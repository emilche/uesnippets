[
  {
    "label": "__GLsync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__GLsync"
  },
  {
    "label": "_cl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_context"
  },
  {
    "label": "_cl_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_event"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __glext_h_ # define __glext_h_ 1 # ifdef __cplusplus \" C \" { # endif # if)",
    "insertText": "defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__) #ifndef WIN32_LEAN_AND_MEAN #define WIN32_LEAN_AND_MEAN 1 #endif #include <windows.h> #endif #ifndef APIENTRY #define APIENTRY #endif #ifndef APIENTRYP #define APIENTRYP APIENTRY * #endif #ifndef GLAPI #define GLAPI extern #endif #define GL_GLEXT_VERSION 20160915 #ifndef GL_VERSION_1_2 #define GL_VERSION_1_2 1 #define GL_UNSIGNED_BYTE_3_3_2 0x8032 #define GL_UNSIGNED_SHORT_4_4_4_4 0x8033 #define GL_UNSIGNED_SHORT_5_5_5_1 0x8034 #define GL_UNSIGNED_INT_8_8_8_8 0x8035 #define GL_UNSIGNED_INT_10_10_10_2 0x8036 #define GL_TEXTURE_BINDING_3D 0x806A #define GL_PACK_SKIP_IMAGES 0x806B #define GL_PACK_IMAGE_HEIGHT 0x806C #define GL_UNPACK_SKIP_IMAGES 0x806D #define GL_UNPACK_IMAGE_HEIGHT 0x806E #define GL_TEXTURE_3D 0x806F #define GL_PROXY_TEXTURE_3D 0x8070 #define GL_TEXTURE_DEPTH 0x8071 #define GL_TEXTURE_WRAP_R 0x8072 #define GL_MAX_3D_TEXTURE_SIZE 0x8073 #define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362 #define GL_UNSIGNED_SHORT_5_6_5 0x8363 #define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364 #define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365 #define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366 #define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367 #define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368 #define GL_BGR 0x80E0 #define GL_BGRA 0x80E1 #define GL_MAX_ELEMENTS_VERTICES 0x80E8 #define GL_MAX_ELEMENTS_INDICES 0x80E9 #define GL_CLAMP_TO_EDGE 0x812F #define GL_TEXTURE_MIN_LOD 0x813A #define GL_TEXTURE_MAX_LOD 0x813B #define GL_TEXTURE_BASE_LEVEL 0x813C #define GL_TEXTURE_MAX_LEVEL 0x813D #define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12 #define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13 #define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22 #define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23 #define GL_ALIASED_LINE_WIDTH_RANGE 0x846E #define GL_RESCALE_NORMAL 0x803A #define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8 #define GL_SINGLE_COLOR 0x81F9 #define GL_SEPARATE_SPECULAR_COLOR 0x81FA #define GL_ALIASED_POINT_SIZE_RANGE 0x846D typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glDrawRangeElements()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_1_3 # define GL_VERSION_1_3 1 # define GL_TEXTURE0 0 x84C0 # define GL_TEXTURE1 0 x84C1 # define GL_TEXTURE2 0 x84C2 # define GL_TEXTURE3 0 x84C3 # define GL_TEXTURE4 0 x84C4 # define GL_TEXTURE5 0 x84C5 # define GL_TEXTURE6 0 x84C6 # define GL_TEXTURE7 0 x84C7 # define GL_TEXTURE8 0 x84C8 # define GL_TEXTURE9 0 x84C9 # define GL_TEXTURE10 0 x84CA # define GL_TEXTURE11 0 x84CB # define GL_TEXTURE12 0 x84CC # define GL_TEXTURE13 0 x84CD # define GL_TEXTURE14 0 x84CE # define GL_TEXTURE15 0 x84CF # define GL_TEXTURE16 0 x84D0 # define GL_TEXTURE17 0 x84D1 # define GL_TEXTURE18 0 x84D2 # define GL_TEXTURE19 0 x84D3 # define GL_TEXTURE20 0 x84D4 # define GL_TEXTURE21 0 x84D5 # define GL_TEXTURE22 0 x84D6 # define GL_TEXTURE23 0 x84D7 # define GL_TEXTURE24 0 x84D8 # define GL_TEXTURE25 0 x84D9 # define GL_TEXTURE26 0 x84DA # define GL_TEXTURE27 0 x84DB # define GL_TEXTURE28 0 x84DC # define GL_TEXTURE29 0 x84DD # define GL_TEXTURE30 0 x84DE # define GL_TEXTURE31 0 x84DF # define GL_ACTIVE_TEXTURE 0 x84E0 # define GL_MULTISAMPLE 0 x809D # define GL_SAMPLE_ALPHA_TO_COVERAGE 0 x809E # define GL_SAMPLE_ALPHA_TO_ONE 0 x809F # define GL_SAMPLE_COVERAGE 0 x80A0 # define GL_SAMPLE_BUFFERS 0 x80A8 # define GL_SAMPLES 0 x80A9 # define GL_SAMPLE_COVERAGE_VALUE 0 x80AA # define GL_SAMPLE_COVERAGE_INVERT 0 x80AB # define GL_TEXTURE_CUBE_MAP 0 x8513 # define GL_TEXTURE_BINDING_CUBE_MAP 0 x8514 # define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0 x8515 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0 x8516 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0 x8517 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0 x8518 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0 x8519 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0 x851A # define GL_PROXY_TEXTURE_CUBE_MAP 0 x851B # define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0 x851C # define GL_COMPRESSED_RGB 0 x84ED # define GL_COMPRESSED_RGBA 0 x84EE # define GL_TEXTURE_COMPRESSION_HINT 0 x84EF # define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0 x86A0 # define GL_TEXTURE_COMPRESSED 0 x86A1 # define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0 x86A2 # define GL_COMPRESSED_TEXTURE_FORMATS 0 x86A3 # define GL_CLAMP_TO_BORDER 0 x812D # define GL_CLIENT_ACTIVE_TEXTURE 0 x84E1 # define GL_MAX_TEXTURE_UNITS 0 x84E2 # define GL_TRANSPOSE_MODELVIEW_MATRIX 0 x84E3 # define GL_TRANSPOSE_PROJECTION_MATRIX 0 x84E4 # define GL_TRANSPOSE_TEXTURE_MATRIX 0 x84E5 # define GL_TRANSPOSE_COLOR_MATRIX 0 x84E6 # define GL_MULTISAMPLE_BIT 0 x20000000 # define GL_NORMAL_MAP 0 x8511 # define GL_REFLECTION_MAP 0 x8512 # define GL_COMPRESSED_ALPHA 0 x84E9 # define GL_COMPRESSED_LUMINANCE 0 x84EA # define GL_COMPRESSED_LUMINANCE_ALPHA 0 x84EB # define GL_COMPRESSED_INTENSITY 0 x84EC # define GL_COMBINE 0 x8570 # define GL_COMBINE_RGB 0 x8571 # define GL_COMBINE_ALPHA 0 x8572 # define GL_SOURCE0_RGB 0 x8580 # define GL_SOURCE1_RGB 0 x8581 # define GL_SOURCE2_RGB 0 x8582 # define GL_SOURCE0_ALPHA 0 x8588 # define GL_SOURCE1_ALPHA 0 x8589 # define GL_SOURCE2_ALPHA 0 x858A # define GL_OPERAND0_RGB 0 x8590 # define GL_OPERAND1_RGB 0 x8591 # define GL_OPERAND2_RGB 0 x8592 # define GL_OPERAND0_ALPHA 0 x8598 # define GL_OPERAND1_ALPHA 0 x8599 # define GL_OPERAND2_ALPHA 0 x859A # define GL_RGB_SCALE 0 x8573 # define GL_ADD_SIGNED 0 x8574 # define GL_INTERPOLATE 0 x8575 # define GL_SUBTRACT 0 x84E7 # define GL_CONSTANT 0 x8576 # define GL_PRIMARY_COLOR 0 x8577 # define GL_PREVIOUS 0 x8578 # define GL_DOT3_RGB 0 x86AE # define GL_DOT3_RGBA 0 x86AF typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble *m)"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glActiveTexture(GLenum texture)"
  },
  {
    "label": "glSampleCoverage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSampleCoverage(GLfloat value, GLboolean invert)"
  },
  {
    "label": "glCompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glGetCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedTexImage(GLenum target, GLint level, void *img)"
  },
  {
    "label": "glClientActiveTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClientActiveTexture(GLenum texture)"
  },
  {
    "label": "glMultiTexCoord1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1d(GLenum target, GLdouble s)"
  },
  {
    "label": "glMultiTexCoord1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1f(GLenum target, GLfloat s)"
  },
  {
    "label": "glMultiTexCoord1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1i(GLenum target, GLint s)"
  },
  {
    "label": "glMultiTexCoord1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord1s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1s(GLenum target, GLshort s)"
  },
  {
    "label": "glMultiTexCoord1sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "glMultiTexCoord2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "glMultiTexCoord2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2i(GLenum target, GLint s, GLint t)"
  },
  {
    "label": "glMultiTexCoord2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord2s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "glMultiTexCoord2sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "glMultiTexCoord3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "glMultiTexCoord3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "glMultiTexCoord3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "glMultiTexCoord3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "glMultiTexCoord4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "glMultiTexCoord4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "glMultiTexCoord4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord4s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "glMultiTexCoord4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glLoadTransposeMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLoadTransposeMatrixf(const GLfloat *m)"
  },
  {
    "label": "glLoadTransposeMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLoadTransposeMatrixd(const GLdouble *m)"
  },
  {
    "label": "glMultTransposeMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultTransposeMatrixf(const GLfloat *m)"
  },
  {
    "label": "glMultTransposeMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultTransposeMatrixd(const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_1_4 # define GL_VERSION_1_4 1 # define GL_BLEND_DST_RGB 0 x80C8 # define GL_BLEND_SRC_RGB 0 x80C9 # define GL_BLEND_DST_ALPHA 0 x80CA # define GL_BLEND_SRC_ALPHA 0 x80CB # define GL_POINT_FADE_THRESHOLD_SIZE 0 x8128 # define GL_DEPTH_COMPONENT16 0 x81A5 # define GL_DEPTH_COMPONENT24 0 x81A6 # define GL_DEPTH_COMPONENT32 0 x81A7 # define GL_MIRRORED_REPEAT 0 x8370 # define GL_MAX_TEXTURE_LOD_BIAS 0 x84FD # define GL_TEXTURE_LOD_BIAS 0 x8501 # define GL_INCR_WRAP 0 x8507 # define GL_DECR_WRAP 0 x8508 # define GL_TEXTURE_DEPTH_SIZE 0 x884A # define GL_TEXTURE_COMPARE_MODE 0 x884C # define GL_TEXTURE_COMPARE_FUNC 0 x884D # define GL_POINT_SIZE_MIN 0 x8126 # define GL_POINT_SIZE_MAX 0 x8127 # define GL_POINT_DISTANCE_ATTENUATION 0 x8129 # define GL_GENERATE_MIPMAP 0 x8191 # define GL_GENERATE_MIPMAP_HINT 0 x8192 # define GL_FOG_COORDINATE_SOURCE 0 x8450 # define GL_FOG_COORDINATE 0 x8451 # define GL_FRAGMENT_DEPTH 0 x8452 # define GL_CURRENT_FOG_COORDINATE 0 x8453 # define GL_FOG_COORDINATE_ARRAY_TYPE 0 x8454 # define GL_FOG_COORDINATE_ARRAY_STRIDE 0 x8455 # define GL_FOG_COORDINATE_ARRAY_POINTER 0 x8456 # define GL_FOG_COORDINATE_ARRAY 0 x8457 # define GL_COLOR_SUM 0 x8458 # define GL_CURRENT_SECONDARY_COLOR 0 x8459 # define GL_SECONDARY_COLOR_ARRAY_SIZE 0 x845A # define GL_SECONDARY_COLOR_ARRAY_TYPE 0 x845B # define GL_SECONDARY_COLOR_ARRAY_STRIDE 0 x845C # define GL_SECONDARY_COLOR_ARRAY_POINTER 0 x845D # define GL_SECONDARY_COLOR_ARRAY 0 x845E # define GL_TEXTURE_FILTER_CONTROL 0 x8500 # define GL_DEPTH_TEXTURE_MODE 0 x884B # define GL_COMPARE_R_TO_TEXTURE 0 x884E # define GL_FUNC_ADD 0 x8006 # define GL_FUNC_SUBTRACT 0 x800A # define GL_FUNC_REVERSE_SUBTRACT 0 x800B # define GL_MIN 0 x8007 # define GL_MAX 0 x8008 # define GL_CONSTANT_COLOR 0 x8001 # define GL_ONE_MINUS_CONSTANT_COLOR 0 x8002 # define GL_CONSTANT_ALPHA 0 x8003 # define GL_ONE_MINUS_CONSTANT_ALPHA 0 x8004 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDFPROC) (GLfloat coord)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDFVPROC) (const GLfloat *coord)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDDPROC) (GLdouble coord)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDDVPROC) (const GLdouble *coord)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2DVPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2FVPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2IPROC) (GLint x, GLint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2IVPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2SVPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3DVPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3FVPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3IVPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3SVPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode)"
  },
  {
    "label": "glBlendFuncSeparate()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glMultiDrawArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)"
  },
  {
    "label": "glMultiDrawElements()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)"
  },
  {
    "label": "glPointParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterf(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterfv(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glPointParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameteri(GLenum pname, GLint param)"
  },
  {
    "label": "glPointParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameteriv(GLenum pname, const GLint *params)"
  },
  {
    "label": "glFogCoordf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordf(GLfloat coord)"
  },
  {
    "label": "glFogCoordfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordfv(const GLfloat *coord)"
  },
  {
    "label": "glFogCoordd()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordd(GLdouble coord)"
  },
  {
    "label": "glFogCoorddv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoorddv(const GLdouble *coord)"
  },
  {
    "label": "glFogCoordPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glSecondaryColor3b()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)"
  },
  {
    "label": "glSecondaryColor3bv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3bv(const GLbyte *v)"
  },
  {
    "label": "glSecondaryColor3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)"
  },
  {
    "label": "glSecondaryColor3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3dv(const GLdouble *v)"
  },
  {
    "label": "glSecondaryColor3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)"
  },
  {
    "label": "glSecondaryColor3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3fv(const GLfloat *v)"
  },
  {
    "label": "glSecondaryColor3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3i(GLint red, GLint green, GLint blue)"
  },
  {
    "label": "glSecondaryColor3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3iv(const GLint *v)"
  },
  {
    "label": "glSecondaryColor3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)"
  },
  {
    "label": "glSecondaryColor3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3sv(const GLshort *v)"
  },
  {
    "label": "glSecondaryColor3ub()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)"
  },
  {
    "label": "glSecondaryColor3ubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3ubv(const GLubyte *v)"
  },
  {
    "label": "glSecondaryColor3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)"
  },
  {
    "label": "glSecondaryColor3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3uiv(const GLuint *v)"
  },
  {
    "label": "glSecondaryColor3us()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)"
  },
  {
    "label": "glSecondaryColor3usv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3usv(const GLushort *v)"
  },
  {
    "label": "glSecondaryColorPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glWindowPos2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2d(GLdouble x, GLdouble y)"
  },
  {
    "label": "glWindowPos2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2dv(const GLdouble *v)"
  },
  {
    "label": "glWindowPos2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2f(GLfloat x, GLfloat y)"
  },
  {
    "label": "glWindowPos2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2fv(const GLfloat *v)"
  },
  {
    "label": "glWindowPos2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2i(GLint x, GLint y)"
  },
  {
    "label": "glWindowPos2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2iv(const GLint *v)"
  },
  {
    "label": "glWindowPos2s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2s(GLshort x, GLshort y)"
  },
  {
    "label": "glWindowPos2sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2sv(const GLshort *v)"
  },
  {
    "label": "glWindowPos3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glWindowPos3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3dv(const GLdouble *v)"
  },
  {
    "label": "glWindowPos3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glWindowPos3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3fv(const GLfloat *v)"
  },
  {
    "label": "glWindowPos3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3i(GLint x, GLint y, GLint z)"
  },
  {
    "label": "glWindowPos3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3iv(const GLint *v)"
  },
  {
    "label": "glWindowPos3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3s(GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glWindowPos3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3sv(const GLshort *v)"
  },
  {
    "label": "glBlendColor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glBlendEquation()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquation(GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_1_5 # define GL_VERSION_1_5 1 # include<stddef . h> typedef ptrdiff_t GLsizeiptr ; typedef ptrdiff_t GLintptr ; # define GL_BUFFER_SIZE 0 x8764 # define GL_BUFFER_USAGE 0 x8765 # define GL_QUERY_COUNTER_BITS 0 x8864 # define GL_CURRENT_QUERY 0 x8865 # define GL_QUERY_RESULT 0 x8866 # define GL_QUERY_RESULT_AVAILABLE 0 x8867 # define GL_ARRAY_BUFFER 0 x8892 # define GL_ELEMENT_ARRAY_BUFFER 0 x8893 # define GL_ARRAY_BUFFER_BINDING 0 x8894 # define GL_ELEMENT_ARRAY_BUFFER_BINDING 0 x8895 # define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0 x889F # define GL_READ_ONLY 0 x88B8 # define GL_WRITE_ONLY 0 x88B9 # define GL_READ_WRITE 0 x88BA # define GL_BUFFER_ACCESS 0 x88BB # define GL_BUFFER_MAPPED 0 x88BC # define GL_BUFFER_MAP_POINTER 0 x88BD # define GL_STREAM_DRAW 0 x88E0 # define GL_STREAM_READ 0 x88E1 # define GL_STREAM_COPY 0 x88E2 # define GL_STATIC_DRAW 0 x88E4 # define GL_STATIC_READ 0 x88E5 # define GL_STATIC_COPY 0 x88E6 # define GL_DYNAMIC_DRAW 0 x88E8 # define GL_DYNAMIC_READ 0 x88E9 # define GL_DYNAMIC_COPY 0 x88EA # define GL_SAMPLES_PASSED 0 x8914 # define GL_SRC1_ALPHA 0 x8589 # define GL_VERTEX_ARRAY_BUFFER_BINDING 0 x8896 # define GL_NORMAL_ARRAY_BUFFER_BINDING 0 x8897 # define GL_COLOR_ARRAY_BUFFER_BINDING 0 x8898 # define GL_INDEX_ARRAY_BUFFER_BINDING 0 x8899 # define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0 x889A # define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0 x889B # define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0 x889C # define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0 x889D # define GL_WEIGHT_ARRAY_BUFFER_BINDING 0 x889E # define GL_FOG_COORD_SRC 0 x8450 # define GL_FOG_COORD 0 x8451 # define GL_CURRENT_FOG_COORD 0 x8453 # define GL_FOG_COORD_ARRAY_TYPE 0 x8454 # define GL_FOG_COORD_ARRAY_STRIDE 0 x8455 # define GL_FOG_COORD_ARRAY_POINTER 0 x8456 # define GL_FOG_COORD_ARRAY 0 x8457 # define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0 x889D # define GL_SRC0_RGB 0 x8580 # define GL_SRC1_RGB 0 x8581 # define GL_SRC2_RGB 0 x8582 # define GL_SRC0_ALPHA 0 x8588 # define GL_SRC2_ALPHA 0 x858A typedef)",
    "insertText": "void(APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISQUERYPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDQUERYPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glGenQueries()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGenQueries(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteQueries()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteQueries(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsQuery()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsQuery(GLuint id)"
  },
  {
    "label": "glBeginQuery()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginQuery(GLenum target, GLuint id)"
  },
  {
    "label": "glEndQuery()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndQuery(GLenum target)"
  },
  {
    "label": "glGetQueryiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryiv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBuffer(GLenum target, GLuint buffer)"
  },
  {
    "label": "glDeleteBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteBuffers(GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glIsBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsBuffer(GLuint buffer)"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glGetBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glMapBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapBuffer(GLenum target, GLenum access)"
  },
  {
    "label": "glUnmapBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glUnmapBuffer(GLenum target)"
  },
  {
    "label": "glGetBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetBufferPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferPointerv(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_2_0 # define GL_VERSION_2_0 1 typedef char GLchar ; # define GL_BLEND_EQUATION_RGB 0 x8009 # define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0 x8622 # define GL_VERTEX_ATTRIB_ARRAY_SIZE 0 x8623 # define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0 x8624 # define GL_VERTEX_ATTRIB_ARRAY_TYPE 0 x8625 # define GL_CURRENT_VERTEX_ATTRIB 0 x8626 # define GL_VERTEX_PROGRAM_POINT_SIZE 0 x8642 # define GL_VERTEX_ATTRIB_ARRAY_POINTER 0 x8645 # define GL_STENCIL_BACK_FUNC 0 x8800 # define GL_STENCIL_BACK_FAIL 0 x8801 # define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0 x8802 # define GL_STENCIL_BACK_PASS_DEPTH_PASS 0 x8803 # define GL_MAX_DRAW_BUFFERS 0 x8824 # define GL_DRAW_BUFFER0 0 x8825 # define GL_DRAW_BUFFER1 0 x8826 # define GL_DRAW_BUFFER2 0 x8827 # define GL_DRAW_BUFFER3 0 x8828 # define GL_DRAW_BUFFER4 0 x8829 # define GL_DRAW_BUFFER5 0 x882A # define GL_DRAW_BUFFER6 0 x882B # define GL_DRAW_BUFFER7 0 x882C # define GL_DRAW_BUFFER8 0 x882D # define GL_DRAW_BUFFER9 0 x882E # define GL_DRAW_BUFFER10 0 x882F # define GL_DRAW_BUFFER11 0 x8830 # define GL_DRAW_BUFFER12 0 x8831 # define GL_DRAW_BUFFER13 0 x8832 # define GL_DRAW_BUFFER14 0 x8833 # define GL_DRAW_BUFFER15 0 x8834 # define GL_BLEND_EQUATION_ALPHA 0 x883D # define GL_MAX_VERTEX_ATTRIBS 0 x8869 # define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0 x886A # define GL_MAX_TEXTURE_IMAGE_UNITS 0 x8872 # define GL_FRAGMENT_SHADER 0 x8B30 # define GL_VERTEX_SHADER 0 x8B31 # define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0 x8B49 # define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0 x8B4A # define GL_MAX_VARYING_FLOATS 0 x8B4B # define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0 x8B4C # define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0 x8B4D # define GL_SHADER_TYPE 0 x8B4F # define GL_FLOAT_VEC2 0 x8B50 # define GL_FLOAT_VEC3 0 x8B51 # define GL_FLOAT_VEC4 0 x8B52 # define GL_INT_VEC2 0 x8B53 # define GL_INT_VEC3 0 x8B54 # define GL_INT_VEC4 0 x8B55 # define GL_BOOL 0 x8B56 # define GL_BOOL_VEC2 0 x8B57 # define GL_BOOL_VEC3 0 x8B58 # define GL_BOOL_VEC4 0 x8B59 # define GL_FLOAT_MAT2 0 x8B5A # define GL_FLOAT_MAT3 0 x8B5B # define GL_FLOAT_MAT4 0 x8B5C # define GL_SAMPLER_1D 0 x8B5D # define GL_SAMPLER_2D 0 x8B5E # define GL_SAMPLER_3D 0 x8B5F # define GL_SAMPLER_CUBE 0 x8B60 # define GL_SAMPLER_1D_SHADOW 0 x8B61 # define GL_SAMPLER_2D_SHADOW 0 x8B62 # define GL_DELETE_STATUS 0 x8B80 # define GL_COMPILE_STATUS 0 x8B81 # define GL_LINK_STATUS 0 x8B82 # define GL_VALIDATE_STATUS 0 x8B83 # define GL_INFO_LOG_LENGTH 0 x8B84 # define GL_ATTACHED_SHADERS 0 x8B85 # define GL_ACTIVE_UNIFORMS 0 x8B86 # define GL_ACTIVE_UNIFORM_MAX_LENGTH 0 x8B87 # define GL_SHADER_SOURCE_LENGTH 0 x8B88 # define GL_ACTIVE_ATTRIBUTES 0 x8B89 # define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0 x8B8A # define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0 x8B8B # define GL_SHADING_LANGUAGE_VERSION 0 x8B8C # define GL_CURRENT_PROGRAM 0 x8B8D # define GL_POINT_SPRITE_COORD_ORIGIN 0 x8CA0 # define GL_LOWER_LEFT 0 x8CA1 # define GL_UPPER_LEFT 0 x8CA2 # define GL_STENCIL_BACK_REF 0 x8CA3 # define GL_STENCIL_BACK_VALUE_MASK 0 x8CA4 # define GL_STENCIL_BACK_WRITEMASK 0 x8CA5 # define GL_VERTEX_PROGRAM_TWO_SIDE 0 x8643 # define GL_POINT_SPRITE 0 x8861 # define GL_COORD_REPLACE 0 x8862 # define GL_MAX_TEXTURE_COORDS 0 x8871 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLCREATEPROGRAMPROC) (void)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLCREATESHADERPROC) (GLenum type)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISSHADERPROC) (GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glBlendEquationSeparate()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glDrawBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawBuffers(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glStencilOpSeparate()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "glStencilFuncSeparate()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilMaskSeparate()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilMaskSeparate(GLenum face, GLuint mask)"
  },
  {
    "label": "glAttachShader()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glAttachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glBindAttribLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "glCompileShader()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompileShader(GLuint shader)"
  },
  {
    "label": "glCreateProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glCreateProgram(void)"
  },
  {
    "label": "glCreateShader()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glCreateShader(GLenum type)"
  },
  {
    "label": "glDeleteProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteProgram(GLuint program)"
  },
  {
    "label": "glDeleteShader()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteShader(GLuint shader)"
  },
  {
    "label": "glDetachShader()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDetachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glDisableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glEnableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glGetActiveAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetActiveUniform()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetAttachedShaders()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "glGetAttribLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetAttribLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetProgramiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramiv(GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramInfoLog()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderiv(GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetShaderInfoLog()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderSource()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "glGetUniformLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetUniformLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetUniformfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformfv(GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "glGetUniformiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformiv(GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "glGetVertexAttribdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetVertexAttribfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glIsProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsProgram(GLuint program)"
  },
  {
    "label": "glIsShader()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsShader(GLuint shader)"
  },
  {
    "label": "glLinkProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLinkProgram(GLuint program)"
  },
  {
    "label": "glShaderSource()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "glUseProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUseProgram(GLuint program)"
  },
  {
    "label": "glUniform1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1f(GLint location, GLfloat v0)"
  },
  {
    "label": "glUniform2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2f(GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glUniform3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glUniform4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glUniform1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1i(GLint location, GLint v0)"
  },
  {
    "label": "glUniform2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2i(GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glUniform3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glUniform4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glUniform1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glValidateProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glValidateProgram(GLuint program)"
  },
  {
    "label": "glVertexAttrib1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1d(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttrib1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1f(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib1s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1s(GLuint index, GLshort x)"
  },
  {
    "label": "glVertexAttrib1sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttrib2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2s(GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexAttrib2sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttrib3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexAttrib3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4Nbv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nbv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4Niv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Niv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4Nsv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nsv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4Nub()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "glVertexAttrib4Nubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4Nuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nuiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4Nusv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nusv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttrib4bv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4bv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttrib4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexAttrib4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4ubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4ubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4usv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4usv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_2_1 # define GL_VERSION_2_1 1 # define GL_PIXEL_PACK_BUFFER 0 x88EB # define GL_PIXEL_UNPACK_BUFFER 0 x88EC # define GL_PIXEL_PACK_BUFFER_BINDING 0 x88ED # define GL_PIXEL_UNPACK_BUFFER_BINDING 0 x88EF # define GL_FLOAT_MAT2x3 0 x8B65 # define GL_FLOAT_MAT2x4 0 x8B66 # define GL_FLOAT_MAT3x2 0 x8B67 # define GL_FLOAT_MAT3x4 0 x8B68 # define GL_FLOAT_MAT4x2 0 x8B69 # define GL_FLOAT_MAT4x3 0 x8B6A # define GL_SRGB 0 x8C40 # define GL_SRGB8 0 x8C41 # define GL_SRGB_ALPHA 0 x8C42 # define GL_SRGB8_ALPHA8 0 x8C43 # define GL_COMPRESSED_SRGB 0 x8C48 # define GL_COMPRESSED_SRGB_ALPHA 0 x8C49 # define GL_CURRENT_RASTER_SECONDARY_COLOR 0 x845F # define GL_SLUMINANCE_ALPHA 0 x8C44 # define GL_SLUMINANCE8_ALPHA8 0 x8C45 # define GL_SLUMINANCE 0 x8C46 # define GL_SLUMINANCE8 0 x8C47 # define GL_COMPRESSED_SLUMINANCE 0 x8C4A # define GL_COMPRESSED_SLUMINANCE_ALPHA 0 x8C4B typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix2x3fv()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix2x4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_3_0 # define GL_VERSION_3_0 1 typedef unsigned short GLhalf ; # define GL_COMPARE_REF_TO_TEXTURE 0 x884E # define GL_CLIP_DISTANCE0 0 x3000 # define GL_CLIP_DISTANCE1 0 x3001 # define GL_CLIP_DISTANCE2 0 x3002 # define GL_CLIP_DISTANCE3 0 x3003 # define GL_CLIP_DISTANCE4 0 x3004 # define GL_CLIP_DISTANCE5 0 x3005 # define GL_CLIP_DISTANCE6 0 x3006 # define GL_CLIP_DISTANCE7 0 x3007 # define GL_MAX_CLIP_DISTANCES 0 x0D32 # define GL_MAJOR_VERSION 0 x821B # define GL_MINOR_VERSION 0 x821C # define GL_NUM_EXTENSIONS 0 x821D # define GL_CONTEXT_FLAGS 0 x821E # define GL_COMPRESSED_RED 0 x8225 # define GL_COMPRESSED_RG 0 x8226 # define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0 x00000001 # define GL_RGBA32F 0 x8814 # define GL_RGB32F 0 x8815 # define GL_RGBA16F 0 x881A # define GL_RGB16F 0 x881B # define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0 x88FD # define GL_MAX_ARRAY_TEXTURE_LAYERS 0 x88FF # define GL_MIN_PROGRAM_TEXEL_OFFSET 0 x8904 # define GL_MAX_PROGRAM_TEXEL_OFFSET 0 x8905 # define GL_CLAMP_READ_COLOR 0 x891C # define GL_FIXED_ONLY 0 x891D # define GL_MAX_VARYING_COMPONENTS 0 x8B4B # define GL_TEXTURE_1D_ARRAY 0 x8C18 # define GL_PROXY_TEXTURE_1D_ARRAY 0 x8C19 # define GL_TEXTURE_2D_ARRAY 0 x8C1A # define GL_PROXY_TEXTURE_2D_ARRAY 0 x8C1B # define GL_TEXTURE_BINDING_1D_ARRAY 0 x8C1C # define GL_TEXTURE_BINDING_2D_ARRAY 0 x8C1D # define GL_R11F_G11F_B10F 0 x8C3A # define GL_UNSIGNED_INT_10F_11F_11F_REV 0 x8C3B # define GL_RGB9_E5 0 x8C3D # define GL_UNSIGNED_INT_5_9_9_9_REV 0 x8C3E # define GL_TEXTURE_SHARED_SIZE 0 x8C3F # define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0 x8C76 # define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0 x8C7F # define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0 x8C80 # define GL_TRANSFORM_FEEDBACK_VARYINGS 0 x8C83 # define GL_TRANSFORM_FEEDBACK_BUFFER_START 0 x8C84 # define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0 x8C85 # define GL_PRIMITIVES_GENERATED 0 x8C87 # define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0 x8C88 # define GL_RASTERIZER_DISCARD 0 x8C89 # define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0 x8C8A # define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0 x8C8B # define GL_INTERLEAVED_ATTRIBS 0 x8C8C # define GL_SEPARATE_ATTRIBS 0 x8C8D # define GL_TRANSFORM_FEEDBACK_BUFFER 0 x8C8E # define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0 x8C8F # define GL_RGBA32UI 0 x8D70 # define GL_RGB32UI 0 x8D71 # define GL_RGBA16UI 0 x8D76 # define GL_RGB16UI 0 x8D77 # define GL_RGBA8UI 0 x8D7C # define GL_RGB8UI 0 x8D7D # define GL_RGBA32I 0 x8D82 # define GL_RGB32I 0 x8D83 # define GL_RGBA16I 0 x8D88 # define GL_RGB16I 0 x8D89 # define GL_RGBA8I 0 x8D8E # define GL_RGB8I 0 x8D8F # define GL_RED_INTEGER 0 x8D94 # define GL_GREEN_INTEGER 0 x8D95 # define GL_BLUE_INTEGER 0 x8D96 # define GL_RGB_INTEGER 0 x8D98 # define GL_RGBA_INTEGER 0 x8D99 # define GL_BGR_INTEGER 0 x8D9A # define GL_BGRA_INTEGER 0 x8D9B # define GL_SAMPLER_1D_ARRAY 0 x8DC0 # define GL_SAMPLER_2D_ARRAY 0 x8DC1 # define GL_SAMPLER_1D_ARRAY_SHADOW 0 x8DC3 # define GL_SAMPLER_2D_ARRAY_SHADOW 0 x8DC4 # define GL_SAMPLER_CUBE_SHADOW 0 x8DC5 # define GL_UNSIGNED_INT_VEC2 0 x8DC6 # define GL_UNSIGNED_INT_VEC3 0 x8DC7 # define GL_UNSIGNED_INT_VEC4 0 x8DC8 # define GL_INT_SAMPLER_1D 0 x8DC9 # define GL_INT_SAMPLER_2D 0 x8DCA # define GL_INT_SAMPLER_3D 0 x8DCB # define GL_INT_SAMPLER_CUBE 0 x8DCC # define GL_INT_SAMPLER_1D_ARRAY 0 x8DCE # define GL_INT_SAMPLER_2D_ARRAY 0 x8DCF # define GL_UNSIGNED_INT_SAMPLER_1D 0 x8DD1 # define GL_UNSIGNED_INT_SAMPLER_2D 0 x8DD2 # define GL_UNSIGNED_INT_SAMPLER_3D 0 x8DD3 # define GL_UNSIGNED_INT_SAMPLER_CUBE 0 x8DD4 # define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0 x8DD6 # define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0 x8DD7 # define GL_QUERY_WAIT 0 x8E13 # define GL_QUERY_NO_WAIT 0 x8E14 # define GL_QUERY_BY_REGION_WAIT 0 x8E15 # define GL_QUERY_BY_REGION_NO_WAIT 0 x8E16 # define GL_BUFFER_ACCESS_FLAGS 0 x911F # define GL_BUFFER_MAP_LENGTH 0 x9120 # define GL_BUFFER_MAP_OFFSET 0 x9121 # define GL_DEPTH_COMPONENT32F 0 x8CAC # define GL_DEPTH32F_STENCIL8 0 x8CAD # define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0 x8DAD # define GL_INVALID_FRAMEBUFFER_OPERATION 0 x0506 # define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0 x8210 # define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0 x8211 # define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0 x8212 # define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0 x8213 # define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0 x8214 # define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0 x8215 # define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0 x8216 # define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0 x8217 # define GL_FRAMEBUFFER_DEFAULT 0 x8218 # define GL_FRAMEBUFFER_UNDEFINED 0 x8219 # define GL_DEPTH_STENCIL_ATTACHMENT 0 x821A # define GL_MAX_RENDERBUFFER_SIZE 0 x84E8 # define GL_DEPTH_STENCIL 0 x84F9 # define GL_UNSIGNED_INT_24_8 0 x84FA # define GL_DEPTH24_STENCIL8 0 x88F0 # define GL_TEXTURE_STENCIL_SIZE 0 x88F1 # define GL_TEXTURE_RED_TYPE 0 x8C10 # define GL_TEXTURE_GREEN_TYPE 0 x8C11 # define GL_TEXTURE_BLUE_TYPE 0 x8C12 # define GL_TEXTURE_ALPHA_TYPE 0 x8C13 # define GL_TEXTURE_DEPTH_TYPE 0 x8C16 # define GL_UNSIGNED_NORMALIZED 0 x8C17 # define GL_FRAMEBUFFER_BINDING 0 x8CA6 # define GL_DRAW_FRAMEBUFFER_BINDING 0 x8CA6 # define GL_RENDERBUFFER_BINDING 0 x8CA7 # define GL_READ_FRAMEBUFFER 0 x8CA8 # define GL_DRAW_FRAMEBUFFER 0 x8CA9 # define GL_READ_FRAMEBUFFER_BINDING 0 x8CAA # define GL_RENDERBUFFER_SAMPLES 0 x8CAB # define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0 x8CD0 # define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0 x8CD1 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0 x8CD2 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0 x8CD3 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0 x8CD4 # define GL_FRAMEBUFFER_COMPLETE 0 x8CD5 # define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0 x8CD6 # define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0 x8CD7 # define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0 x8CDB # define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0 x8CDC # define GL_FRAMEBUFFER_UNSUPPORTED 0 x8CDD # define GL_MAX_COLOR_ATTACHMENTS 0 x8CDF # define GL_COLOR_ATTACHMENT0 0 x8CE0 # define GL_COLOR_ATTACHMENT1 0 x8CE1 # define GL_COLOR_ATTACHMENT2 0 x8CE2 # define GL_COLOR_ATTACHMENT3 0 x8CE3 # define GL_COLOR_ATTACHMENT4 0 x8CE4 # define GL_COLOR_ATTACHMENT5 0 x8CE5 # define GL_COLOR_ATTACHMENT6 0 x8CE6 # define GL_COLOR_ATTACHMENT7 0 x8CE7 # define GL_COLOR_ATTACHMENT8 0 x8CE8 # define GL_COLOR_ATTACHMENT9 0 x8CE9 # define GL_COLOR_ATTACHMENT10 0 x8CEA # define GL_COLOR_ATTACHMENT11 0 x8CEB # define GL_COLOR_ATTACHMENT12 0 x8CEC # define GL_COLOR_ATTACHMENT13 0 x8CED # define GL_COLOR_ATTACHMENT14 0 x8CEE # define GL_COLOR_ATTACHMENT15 0 x8CEF # define GL_COLOR_ATTACHMENT16 0 x8CF0 # define GL_COLOR_ATTACHMENT17 0 x8CF1 # define GL_COLOR_ATTACHMENT18 0 x8CF2 # define GL_COLOR_ATTACHMENT19 0 x8CF3 # define GL_COLOR_ATTACHMENT20 0 x8CF4 # define GL_COLOR_ATTACHMENT21 0 x8CF5 # define GL_COLOR_ATTACHMENT22 0 x8CF6 # define GL_COLOR_ATTACHMENT23 0 x8CF7 # define GL_COLOR_ATTACHMENT24 0 x8CF8 # define GL_COLOR_ATTACHMENT25 0 x8CF9 # define GL_COLOR_ATTACHMENT26 0 x8CFA # define GL_COLOR_ATTACHMENT27 0 x8CFB # define GL_COLOR_ATTACHMENT28 0 x8CFC # define GL_COLOR_ATTACHMENT29 0 x8CFD # define GL_COLOR_ATTACHMENT30 0 x8CFE # define GL_COLOR_ATTACHMENT31 0 x8CFF # define GL_DEPTH_ATTACHMENT 0 x8D00 # define GL_STENCIL_ATTACHMENT 0 x8D20 # define GL_FRAMEBUFFER 0 x8D40 # define GL_RENDERBUFFER 0 x8D41 # define GL_RENDERBUFFER_WIDTH 0 x8D42 # define GL_RENDERBUFFER_HEIGHT 0 x8D43 # define GL_RENDERBUFFER_INTERNAL_FORMAT 0 x8D44 # define GL_STENCIL_INDEX1 0 x8D46 # define GL_STENCIL_INDEX4 0 x8D47 # define GL_STENCIL_INDEX8 0 x8D48 # define GL_STENCIL_INDEX16 0 x8D49 # define GL_RENDERBUFFER_RED_SIZE 0 x8D50 # define GL_RENDERBUFFER_GREEN_SIZE 0 x8D51 # define GL_RENDERBUFFER_BLUE_SIZE 0 x8D52 # define GL_RENDERBUFFER_ALPHA_SIZE 0 x8D53 # define GL_RENDERBUFFER_DEPTH_SIZE 0 x8D54 # define GL_RENDERBUFFER_STENCIL_SIZE 0 x8D55 # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0 x8D56 # define GL_MAX_SAMPLES 0 x8D57 # define GL_INDEX 0 x8222 # define GL_TEXTURE_LUMINANCE_TYPE 0 x8C14 # define GL_TEXTURE_INTENSITY_TYPE 0 x8C15 # define GL_FRAMEBUFFER_SRGB 0 x8DB9 # define GL_HALF_FLOAT 0 x140B # define GL_MAP_READ_BIT 0 x0001 # define GL_MAP_WRITE_BIT 0 x0002 # define GL_MAP_INVALIDATE_RANGE_BIT 0 x0004 # define GL_MAP_INVALIDATE_BUFFER_BIT 0 x0008 # define GL_MAP_FLUSH_EXPLICIT_BIT 0 x0010 # define GL_MAP_UNSYNCHRONIZED_BIT 0 x0020 # define GL_COMPRESSED_RED_RGTC1 0 x8DBB # define GL_COMPRESSED_SIGNED_RED_RGTC1 0 x8DBC # define GL_COMPRESSED_RG_RGTC2 0 x8DBD # define GL_COMPRESSED_SIGNED_RG_RGTC2 0 x8DBE # define GL_RG 0 x8227 # define GL_RG_INTEGER 0 x8228 # define GL_R8 0 x8229 # define GL_R16 0 x822A # define GL_RG8 0 x822B # define GL_RG16 0 x822C # define GL_R16F 0 x822D # define GL_R32F 0 x822E # define GL_RG16F 0 x822F # define GL_RG32F 0 x8230 # define GL_R8I 0 x8231 # define GL_R8UI 0 x8232 # define GL_R16I 0 x8233 # define GL_R16UI 0 x8234 # define GL_R32I 0 x8235 # define GL_R32UI 0 x8236 # define GL_RG8I 0 x8237 # define GL_RG8UI 0 x8238 # define GL_RG16I 0 x8239 # define GL_RG16UI 0 x823A # define GL_RG32I 0 x823B # define GL_RG32UI 0 x823C # define GL_VERTEX_ARRAY_BINDING 0 x85B5 # define GL_CLAMP_VERTEX_COLOR 0 x891A # define GL_CLAMP_FRAGMENT_COLOR 0 x891B # define GL_ALPHA_INTEGER 0 x8D97 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "GLubyte()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "GLubyte(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array)"
  },
  {
    "label": "glColorMaski()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "glGetBooleani_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "glGetIntegeri_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetIntegeri_v(GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "glEnablei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnablei(GLenum target, GLuint index)"
  },
  {
    "label": "glDisablei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisablei(GLenum target, GLuint index)"
  },
  {
    "label": "glIsEnabledi()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsEnabledi(GLenum target, GLuint index)"
  },
  {
    "label": "glBeginTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginTransformFeedback(GLenum primitiveMode)"
  },
  {
    "label": "glEndTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndTransformFeedback(void)"
  },
  {
    "label": "glBindBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBindBufferBase()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferBase(GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackVaryings()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "glGetTransformFeedbackVarying()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glClampColor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClampColor(GLenum target, GLenum clamp)"
  },
  {
    "label": "glBeginConditionalRender()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginConditionalRender(GLuint id, GLenum mode)"
  },
  {
    "label": "glEndConditionalRender()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndConditionalRender(void)"
  },
  {
    "label": "glVertexAttribIPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "glVertexAttribI1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1i(GLuint index, GLint x)"
  },
  {
    "label": "glVertexAttribI2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2i(GLuint index, GLint x, GLint y)"
  },
  {
    "label": "glVertexAttribI3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertexAttribI4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertexAttribI1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1ui(GLuint index, GLuint x)"
  },
  {
    "label": "glVertexAttribI2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "glVertexAttribI3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "glVertexAttribI4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glVertexAttribI1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4bv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4bv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttribI4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttribI4ubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4ubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribI4usv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4usv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glGetUniformuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformuiv(GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "glBindFragDataLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "glGetFragDataLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetFragDataLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glUniform1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1ui(GLint location, GLuint v0)"
  },
  {
    "label": "glUniform2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2ui(GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glUniform3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glUniform4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glUniform1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glTexParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTexParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glClearBufferiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "glClearBufferuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "glClearBufferfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "glClearBufferfi()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "glGetStringi()",
    "kind": "Method",
    "detail": "Function (GLAPI const GLubyte* APIENTRY)",
    "insertText": "glGetStringi(GLenum name, GLuint index)"
  },
  {
    "label": "glIsRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsRenderbuffer(GLuint renderbuffer)"
  },
  {
    "label": "glBindRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindRenderbuffer(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glDeleteRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "glGenRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsFramebuffer(GLuint framebuffer)"
  },
  {
    "label": "glBindFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindFramebuffer(GLenum target, GLuint framebuffer)"
  },
  {
    "label": "glDeleteFramebuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "glGenFramebuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glCheckFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glCheckFramebufferStatus(GLenum target)"
  },
  {
    "label": "glFramebufferTexture1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glGetFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGenerateMipmap()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenerateMipmap(GLenum target)"
  },
  {
    "label": "glBlitFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glRenderbufferStorageMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glMapBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glFlushMappedBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glBindVertexArray()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVertexArray(GLuint array)"
  },
  {
    "label": "glDeleteVertexArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteVertexArrays(GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "glGenVertexArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenVertexArrays(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glIsVertexArray()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsVertexArray(GLuint array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_3_1 # define GL_VERSION_3_1 1 # define GL_SAMPLER_2D_RECT 0 x8B63 # define GL_SAMPLER_2D_RECT_SHADOW 0 x8B64 # define GL_SAMPLER_BUFFER 0 x8DC2 # define GL_INT_SAMPLER_2D_RECT 0 x8DCD # define GL_INT_SAMPLER_BUFFER 0 x8DD0 # define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0 x8DD5 # define GL_UNSIGNED_INT_SAMPLER_BUFFER 0 x8DD8 # define GL_TEXTURE_BUFFER 0 x8C2A # define GL_MAX_TEXTURE_BUFFER_SIZE 0 x8C2B # define GL_TEXTURE_BINDING_BUFFER 0 x8C2C # define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0 x8C2D # define GL_TEXTURE_RECTANGLE 0 x84F5 # define GL_TEXTURE_BINDING_RECTANGLE 0 x84F6 # define GL_PROXY_TEXTURE_RECTANGLE 0 x84F7 # define GL_MAX_RECTANGLE_TEXTURE_SIZE 0 x84F8 # define GL_R8_SNORM 0 x8F94 # define GL_RG8_SNORM 0 x8F95 # define GL_RGB8_SNORM 0 x8F96 # define GL_RGBA8_SNORM 0 x8F97 # define GL_R16_SNORM 0 x8F98 # define GL_RG16_SNORM 0 x8F99 # define GL_RGB16_SNORM 0 x8F9A # define GL_RGBA16_SNORM 0 x8F9B # define GL_SIGNED_NORMALIZED 0 x8F9C # define GL_PRIMITIVE_RESTART 0 x8F9D # define GL_PRIMITIVE_RESTART_INDEX 0 x8F9E # define GL_COPY_READ_BUFFER 0 x8F36 # define GL_COPY_WRITE_BUFFER 0 x8F37 # define GL_UNIFORM_BUFFER 0 x8A11 # define GL_UNIFORM_BUFFER_BINDING 0 x8A28 # define GL_UNIFORM_BUFFER_START 0 x8A29 # define GL_UNIFORM_BUFFER_SIZE 0 x8A2A # define GL_MAX_VERTEX_UNIFORM_BLOCKS 0 x8A2B # define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0 x8A2C # define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0 x8A2D # define GL_MAX_COMBINED_UNIFORM_BLOCKS 0 x8A2E # define GL_MAX_UNIFORM_BUFFER_BINDINGS 0 x8A2F # define GL_MAX_UNIFORM_BLOCK_SIZE 0 x8A30 # define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0 x8A31 # define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0 x8A32 # define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0 x8A33 # define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0 x8A34 # define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0 x8A35 # define GL_ACTIVE_UNIFORM_BLOCKS 0 x8A36 # define GL_UNIFORM_TYPE 0 x8A37 # define GL_UNIFORM_SIZE 0 x8A38 # define GL_UNIFORM_NAME_LENGTH 0 x8A39 # define GL_UNIFORM_BLOCK_INDEX 0 x8A3A # define GL_UNIFORM_OFFSET 0 x8A3B # define GL_UNIFORM_ARRAY_STRIDE 0 x8A3C # define GL_UNIFORM_MATRIX_STRIDE 0 x8A3D # define GL_UNIFORM_IS_ROW_MAJOR 0 x8A3E # define GL_UNIFORM_BLOCK_BINDING 0 x8A3F # define GL_UNIFORM_BLOCK_DATA_SIZE 0 x8A40 # define GL_UNIFORM_BLOCK_NAME_LENGTH 0 x8A41 # define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0 x8A42 # define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0 x8A43 # define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0 x8A44 # define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0 x8A45 # define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0 x8A46 # define GL_INVALID_INDEX 0 xFFFFFFFFu typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)"
  },
  {
    "label": "glDrawArraysInstanced()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)"
  },
  {
    "label": "glDrawElementsInstanced()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)"
  },
  {
    "label": "glTexBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glPrimitiveRestartIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPrimitiveRestartIndex(GLuint index)"
  },
  {
    "label": "glCopyBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glGetUniformIndices()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)"
  },
  {
    "label": "glGetActiveUniformsiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetActiveUniformName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)"
  },
  {
    "label": "glGetUniformBlockIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)"
  },
  {
    "label": "glGetActiveUniformBlockiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetActiveUniformBlockName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)"
  },
  {
    "label": "glUniformBlockBinding()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_3_2 # define GL_VERSION_3_2 1 typedef struct __GLsync* GLsync ; # ifndef GLEXT_64_TYPES_DEFINED # define GLEXT_64_TYPES_DEFINED # if)",
    "insertText": "defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L #include <inttypes.h> #elif defined(__sun__) || defined(__digital__) #include <inttypes.h> #if defined(__STDC__) #if defined(__arch64__) || defined(_LP64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long int uint64_t ; # else typedef long long int int64_t ; typedef unsigned long long int uint64_t ; # endif # endif # elif)",
    "insertText": "defined(__VMS ) || defined(__sgi) #include <inttypes.h> #elif defined(__SCO__) || defined(__USLC__) #include <stdint.h> #elif defined(__UNIXOS2__) || defined(__SOL64__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef long long int int64_t ; typedef unsigned long long int uint64_t ; # elif)",
    "insertText": "defined(_WIN32) && defined(__GNUC__) #include <stdint.h> #elif defined(_WIN32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef __int64 int64_t ; typedef unsigned __int64 uint64_t ; # else # include<inttypes . h> # endif # endif typedef uint64_t GLuint64 ; typedef int64_t GLint64 ; # define GL_CONTEXT_CORE_PROFILE_BIT 0 x00000001 # define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0 x00000002 # define GL_LINES_ADJACENCY 0 x000A # define GL_LINE_STRIP_ADJACENCY 0 x000B # define GL_TRIANGLES_ADJACENCY 0 x000C # define GL_TRIANGLE_STRIP_ADJACENCY 0 x000D # define GL_PROGRAM_POINT_SIZE 0 x8642 # define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0 x8C29 # define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0 x8DA7 # define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0 x8DA8 # define GL_GEOMETRY_SHADER 0 x8DD9 # define GL_GEOMETRY_VERTICES_OUT 0 x8916 # define GL_GEOMETRY_INPUT_TYPE 0 x8917 # define GL_GEOMETRY_OUTPUT_TYPE 0 x8918 # define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0 x8DDF # define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0 x8DE0 # define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0 x8DE1 # define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0 x9122 # define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0 x9123 # define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0 x9124 # define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0 x9125 # define GL_CONTEXT_PROFILE_MASK 0 x9126 # define GL_DEPTH_CLAMP 0 x864F # define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0 x8E4C # define GL_FIRST_VERTEX_CONVENTION 0 x8E4D # define GL_LAST_VERTEX_CONVENTION 0 x8E4E # define GL_PROVOKING_VERTEX 0 x8E4F # define GL_TEXTURE_CUBE_MAP_SEAMLESS 0 x884F # define GL_MAX_SERVER_WAIT_TIMEOUT 0 x9111 # define GL_OBJECT_TYPE 0 x9112 # define GL_SYNC_CONDITION 0 x9113 # define GL_SYNC_STATUS 0 x9114 # define GL_SYNC_FLAGS 0 x9115 # define GL_SYNC_FENCE 0 x9116 # define GL_SYNC_GPU_COMMANDS_COMPLETE 0 x9117 # define GL_UNSIGNALED 0 x9118 # define GL_SIGNALED 0 x9119 # define GL_ALREADY_SIGNALED 0 x911A # define GL_TIMEOUT_EXPIRED 0 x911B # define GL_CONDITION_SATISFIED 0 x911C # define GL_WAIT_FAILED 0 x911D # define GL_TIMEOUT_IGNORED 0 xFFFFFFFFFFFFFFFFull # define GL_SYNC_FLUSH_COMMANDS_BIT 0 x00000001 # define GL_SAMPLE_POSITION 0 x8E50 # define GL_SAMPLE_MASK 0 x8E51 # define GL_SAMPLE_MASK_VALUE 0 x8E52 # define GL_MAX_SAMPLE_MASK_WORDS 0 x8E59 # define GL_TEXTURE_2D_MULTISAMPLE 0 x9100 # define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0 x9101 # define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0 x9102 # define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0 x9103 # define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0 x9104 # define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0 x9105 # define GL_TEXTURE_SAMPLES 0 x9106 # define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0 x9107 # define GL_SAMPLER_2D_MULTISAMPLE 0 x9108 # define GL_INT_SAMPLER_2D_MULTISAMPLE 0 x9109 # define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0 x910A # define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0 x910B # define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0 x910C # define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0 x910D # define GL_MAX_COLOR_TEXTURE_SAMPLES 0 x910E # define GL_MAX_DEPTH_TEXTURE_SAMPLES 0 x910F # define GL_MAX_INTEGER_SAMPLES 0 x9110 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode)"
  },
  {
    "label": "GLsync()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLsync(APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISSYNCPROC) (GLsync sync)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask)"
  },
  {
    "label": "glDrawElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawRangeElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "glMultiDrawElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)"
  },
  {
    "label": "glProvokingVertex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProvokingVertex(GLenum mode)"
  },
  {
    "label": "glFenceSync()",
    "kind": "Method",
    "detail": "Function (GLAPI GLsync APIENTRY)",
    "insertText": "glFenceSync(GLenum condition, GLbitfield flags)"
  },
  {
    "label": "glIsSync()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsSync(GLsync sync)"
  },
  {
    "label": "glDeleteSync()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteSync(GLsync sync)"
  },
  {
    "label": "glClientWaitSync()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glWaitSync()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glGetInteger64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInteger64v(GLenum pname, GLint64 *data)"
  },
  {
    "label": "glGetSynciv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "glGetInteger64i_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)"
  },
  {
    "label": "glGetBufferParameteri64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glTexImage2DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexImage3DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glGetMultisamplefv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "glSampleMaski()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSampleMaski(GLuint maskNumber, GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_3_3 # define GL_VERSION_3_3 1 # define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0 x88FE # define GL_SRC1_COLOR 0 x88F9 # define GL_ONE_MINUS_SRC1_COLOR 0 x88FA # define GL_ONE_MINUS_SRC1_ALPHA 0 x88FB # define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0 x88FC # define GL_ANY_SAMPLES_PASSED 0 x8C2F # define GL_SAMPLER_BINDING 0 x8919 # define GL_RGB10_A2UI 0 x906F # define GL_TEXTURE_SWIZZLE_R 0 x8E42 # define GL_TEXTURE_SWIZZLE_G 0 x8E43 # define GL_TEXTURE_SWIZZLE_B 0 x8E44 # define GL_TEXTURE_SWIZZLE_A 0 x8E45 # define GL_TEXTURE_SWIZZLE_RGBA 0 x8E46 # define GL_TIME_ELAPSED 0 x88BF # define GL_TIMESTAMP 0 x8E28 # define GL_INT_2_10_10_10_REV 0 x8D9F typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORP3UIPROC) (GLenum type, GLuint color)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORP4UIPROC) (GLenum type, GLuint color)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color)"
  },
  {
    "label": "glBindFragDataLocationIndexed()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)"
  },
  {
    "label": "glGetFragDataIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetFragDataIndex(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGenSamplers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenSamplers(GLsizei count, GLuint *samplers)"
  },
  {
    "label": "glDeleteSamplers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteSamplers(GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "glIsSampler()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsSampler(GLuint sampler)"
  },
  {
    "label": "glBindSampler()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindSampler(GLuint unit, GLuint sampler)"
  },
  {
    "label": "glSamplerParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)"
  },
  {
    "label": "glSamplerParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)"
  },
  {
    "label": "glSamplerParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glSamplerParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "glGetSamplerParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetSamplerParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "glQueryCounter()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glQueryCounter(GLuint id, GLenum target)"
  },
  {
    "label": "glGetQueryObjecti64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetQueryObjectui64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "glVertexAttribDivisor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribDivisor(GLuint index, GLuint divisor)"
  },
  {
    "label": "glVertexAttribP1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexP2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexP2ui(GLenum type, GLuint value)"
  },
  {
    "label": "glVertexP2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexP2uiv(GLenum type, const GLuint *value)"
  },
  {
    "label": "glVertexP3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexP3ui(GLenum type, GLuint value)"
  },
  {
    "label": "glVertexP3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexP3uiv(GLenum type, const GLuint *value)"
  },
  {
    "label": "glVertexP4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexP4ui(GLenum type, GLuint value)"
  },
  {
    "label": "glVertexP4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexP4uiv(GLenum type, const GLuint *value)"
  },
  {
    "label": "glTexCoordP1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordP1ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glTexCoordP1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordP1uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glTexCoordP2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordP2ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glTexCoordP2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordP2uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glTexCoordP3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordP3ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glTexCoordP3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordP3uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glTexCoordP4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordP4ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glTexCoordP4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordP4uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glMultiTexCoordP1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "glMultiTexCoordP1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "glMultiTexCoordP2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "glMultiTexCoordP2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "glMultiTexCoordP3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "glMultiTexCoordP3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "glMultiTexCoordP4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "glMultiTexCoordP4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "glNormalP3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalP3ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glNormalP3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalP3uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glColorP3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorP3ui(GLenum type, GLuint color)"
  },
  {
    "label": "glColorP3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorP3uiv(GLenum type, const GLuint *color)"
  },
  {
    "label": "glColorP4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorP4ui(GLenum type, GLuint color)"
  },
  {
    "label": "glColorP4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorP4uiv(GLenum type, const GLuint *color)"
  },
  {
    "label": "glSecondaryColorP3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColorP3ui(GLenum type, GLuint color)"
  },
  {
    "label": "glSecondaryColorP3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColorP3uiv(GLenum type, const GLuint *color)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_0 # define GL_VERSION_4_0 1 # define GL_SAMPLE_SHADING 0 x8C36 # define GL_MIN_SAMPLE_SHADING_VALUE 0 x8C37 # define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0 x8E5E # define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0 x8E5F # define GL_TEXTURE_CUBE_MAP_ARRAY 0 x9009 # define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0 x900A # define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0 x900B # define GL_SAMPLER_CUBE_MAP_ARRAY 0 x900C # define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0 x900D # define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0 x900E # define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0 x900F # define GL_DRAW_INDIRECT_BUFFER 0 x8F3F # define GL_DRAW_INDIRECT_BUFFER_BINDING 0 x8F43 # define GL_GEOMETRY_SHADER_INVOCATIONS 0 x887F # define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0 x8E5A # define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0 x8E5B # define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0 x8E5C # define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0 x8E5D # define GL_MAX_VERTEX_STREAMS 0 x8E71 # define GL_DOUBLE_VEC2 0 x8FFC # define GL_DOUBLE_VEC3 0 x8FFD # define GL_DOUBLE_VEC4 0 x8FFE # define GL_DOUBLE_MAT2 0 x8F46 # define GL_DOUBLE_MAT3 0 x8F47 # define GL_DOUBLE_MAT4 0 x8F48 # define GL_DOUBLE_MAT2x3 0 x8F49 # define GL_DOUBLE_MAT2x4 0 x8F4A # define GL_DOUBLE_MAT3x2 0 x8F4B # define GL_DOUBLE_MAT3x4 0 x8F4C # define GL_DOUBLE_MAT4x2 0 x8F4D # define GL_DOUBLE_MAT4x3 0 x8F4E # define GL_ACTIVE_SUBROUTINES 0 x8DE5 # define GL_ACTIVE_SUBROUTINE_UNIFORMS 0 x8DE6 # define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0 x8E47 # define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0 x8E48 # define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0 x8E49 # define GL_MAX_SUBROUTINES 0 x8DE7 # define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0 x8DE8 # define GL_NUM_COMPATIBLE_SUBROUTINES 0 x8E4A # define GL_COMPATIBLE_SUBROUTINES 0 x8E4B # define GL_PATCHES 0 x000E # define GL_PATCH_VERTICES 0 x8E72 # define GL_PATCH_DEFAULT_INNER_LEVEL 0 x8E73 # define GL_PATCH_DEFAULT_OUTER_LEVEL 0 x8E74 # define GL_TESS_CONTROL_OUTPUT_VERTICES 0 x8E75 # define GL_TESS_GEN_MODE 0 x8E76 # define GL_TESS_GEN_SPACING 0 x8E77 # define GL_TESS_GEN_VERTEX_ORDER 0 x8E78 # define GL_TESS_GEN_POINT_MODE 0 x8E79 # define GL_ISOLINES 0 x8E7A # define GL_FRACTIONAL_ODD 0 x8E7B # define GL_FRACTIONAL_EVEN 0 x8E7C # define GL_MAX_PATCH_VERTICES 0 x8E7D # define GL_MAX_TESS_GEN_LEVEL 0 x8E7E # define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0 x8E7F # define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0 x8E80 # define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0 x8E81 # define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0 x8E82 # define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0 x8E83 # define GL_MAX_TESS_PATCH_COMPONENTS 0 x8E84 # define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0 x8E85 # define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0 x8E86 # define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0 x8E89 # define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0 x8E8A # define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0 x886C # define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0 x886D # define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0 x8E1E # define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0 x8E1F # define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0 x84F0 # define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0 x84F1 # define GL_TESS_EVALUATION_SHADER 0 x8E87 # define GL_TESS_CONTROL_SHADER 0 x8E88 # define GL_TRANSFORM_FEEDBACK 0 x8E22 # define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0 x8E23 # define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0 x8E24 # define GL_TRANSFORM_FEEDBACK_BINDING 0 x8E25 # define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0 x8E70 typedef)",
    "insertText": "void(APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glMinSampleShading()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMinSampleShading(GLfloat value)"
  },
  {
    "label": "glBlendEquationi()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquationi(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparatei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunci()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFunci(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparatei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawArraysIndirect(GLenum mode, const void *indirect)"
  },
  {
    "label": "glDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect)"
  },
  {
    "label": "glUniform1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1d(GLint location, GLdouble x)"
  },
  {
    "label": "glUniform2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2d(GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "glUniform3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glUniform4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glUniform1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2x3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2x4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3x2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3x4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4x2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4x3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glGetUniformdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformdv(GLuint program, GLint location, GLdouble *params)"
  },
  {
    "label": "glGetSubroutineUniformLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "glGetSubroutineIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "glGetActiveSubroutineUniformiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)"
  },
  {
    "label": "glGetActiveSubroutineUniformName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glGetActiveSubroutineName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glUniformSubroutinesuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices)"
  },
  {
    "label": "glGetUniformSubroutineuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params)"
  },
  {
    "label": "glGetProgramStageiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values)"
  },
  {
    "label": "glPatchParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPatchParameteri(GLenum pname, GLint value)"
  },
  {
    "label": "glPatchParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPatchParameterfv(GLenum pname, const GLfloat *values)"
  },
  {
    "label": "glBindTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindTransformFeedback(GLenum target, GLuint id)"
  },
  {
    "label": "glDeleteTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glGenTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenTransformFeedbacks(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glIsTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsTransformFeedback(GLuint id)"
  },
  {
    "label": "glPauseTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPauseTransformFeedback(void)"
  },
  {
    "label": "glResumeTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glResumeTransformFeedback(void)"
  },
  {
    "label": "glDrawTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedback(GLenum mode, GLuint id)"
  },
  {
    "label": "glDrawTransformFeedbackStream()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)"
  },
  {
    "label": "glBeginQueryIndexed()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)"
  },
  {
    "label": "glEndQueryIndexed()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndQueryIndexed(GLenum target, GLuint index)"
  },
  {
    "label": "glGetQueryIndexediv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_1 # define GL_VERSION_4_1 1 # define GL_FIXED 0 x140C # define GL_IMPLEMENTATION_COLOR_READ_TYPE 0 x8B9A # define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0 x8B9B # define GL_LOW_FLOAT 0 x8DF0 # define GL_MEDIUM_FLOAT 0 x8DF1 # define GL_HIGH_FLOAT 0 x8DF2 # define GL_LOW_INT 0 x8DF3 # define GL_MEDIUM_INT 0 x8DF4 # define GL_HIGH_INT 0 x8DF5 # define GL_SHADER_COMPILER 0 x8DFA # define GL_SHADER_BINARY_FORMATS 0 x8DF8 # define GL_NUM_SHADER_BINARY_FORMATS 0 x8DF9 # define GL_MAX_VERTEX_UNIFORM_VECTORS 0 x8DFB # define GL_MAX_VARYING_VECTORS 0 x8DFC # define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0 x8DFD # define GL_RGB565 0 x8D62 # define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0 x8257 # define GL_PROGRAM_BINARY_LENGTH 0 x8741 # define GL_NUM_PROGRAM_BINARY_FORMATS 0 x87FE # define GL_PROGRAM_BINARY_FORMATS 0 x87FF # define GL_VERTEX_SHADER_BIT 0 x00000001 # define GL_FRAGMENT_SHADER_BIT 0 x00000002 # define GL_GEOMETRY_SHADER_BIT 0 x00000004 # define GL_TESS_CONTROL_SHADER_BIT 0 x00000008 # define GL_TESS_EVALUATION_SHADER_BIT 0 x00000010 # define GL_ALL_SHADER_BITS 0 xFFFFFFFF # define GL_PROGRAM_SEPARABLE 0 x8258 # define GL_ACTIVE_PROGRAM 0 x8259 # define GL_PROGRAM_PIPELINE_BINDING 0 x825A # define GL_MAX_VIEWPORTS 0 x825B # define GL_VIEWPORT_SUBPIXEL_BITS 0 x825C # define GL_VIEWPORT_BOUNDS_RANGE 0 x825D # define GL_LAYER_PROVOKING_VERTEX 0 x825E # define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0 x825F # define GL_UNDEFINED_VERTEX 0 x8260 typedef)",
    "insertText": "void(APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "glReleaseShaderCompiler()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glReleaseShaderCompiler(void)"
  },
  {
    "label": "glShaderBinary()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)"
  },
  {
    "label": "glGetShaderPrecisionFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "glDepthRangef()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRangef(GLfloat n, GLfloat f)"
  },
  {
    "label": "glClearDepthf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearDepthf(GLfloat d)"
  },
  {
    "label": "glGetProgramBinary()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)"
  },
  {
    "label": "glProgramBinary()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "glProgramParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramParameteri(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glUseProgramStages()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)"
  },
  {
    "label": "glActiveShaderProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glActiveShaderProgram(GLuint pipeline, GLuint program)"
  },
  {
    "label": "glCreateShaderProgramv()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings)"
  },
  {
    "label": "glBindProgramPipeline()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glDeleteProgramPipelines()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)"
  },
  {
    "label": "glGenProgramPipelines()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenProgramPipelines(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glIsProgramPipeline()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glGetProgramPipelineiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)"
  },
  {
    "label": "glProgramUniform1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1i(GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "glProgramUniform1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1f(GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "glProgramUniform1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1d(GLuint program, GLint location, GLdouble v0)"
  },
  {
    "label": "glProgramUniform1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1ui(GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "glProgramUniform1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glProgramUniform2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glProgramUniform2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)"
  },
  {
    "label": "glProgramUniform2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glProgramUniform2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glProgramUniform3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glProgramUniform3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)"
  },
  {
    "label": "glProgramUniform3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glProgramUniform3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glProgramUniform4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glProgramUniform4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)"
  },
  {
    "label": "glProgramUniform4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glProgramUniform4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glValidateProgramPipeline()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glValidateProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glGetProgramPipelineInfoLog()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glVertexAttribL1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1d(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttribL2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttribL3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttribL4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttribL1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribLPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribLdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glViewportArrayv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glViewportIndexedf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "glViewportIndexedfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glViewportIndexedfv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glScissorArrayv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glScissorArrayv(GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "glScissorIndexed()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "glScissorIndexedv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glScissorIndexedv(GLuint index, const GLint *v)"
  },
  {
    "label": "glDepthRangeArrayv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glDepthRangeIndexed()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f)"
  },
  {
    "label": "glGetFloati_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFloati_v(GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "glGetDoublei_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetDoublei_v(GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_2 # define GL_VERSION_4_2 1 # define GL_COPY_READ_BUFFER_BINDING 0 x8F36 # define GL_COPY_WRITE_BUFFER_BINDING 0 x8F37 # define GL_TRANSFORM_FEEDBACK_ACTIVE 0 x8E24 # define GL_TRANSFORM_FEEDBACK_PAUSED 0 x8E23 # define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0 x9127 # define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0 x9128 # define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0 x9129 # define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0 x912A # define GL_PACK_COMPRESSED_BLOCK_WIDTH 0 x912B # define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0 x912C # define GL_PACK_COMPRESSED_BLOCK_DEPTH 0 x912D # define GL_PACK_COMPRESSED_BLOCK_SIZE 0 x912E # define GL_NUM_SAMPLE_COUNTS 0 x9380 # define GL_MIN_MAP_BUFFER_ALIGNMENT 0 x90BC # define GL_ATOMIC_COUNTER_BUFFER 0 x92C0 # define GL_ATOMIC_COUNTER_BUFFER_BINDING 0 x92C1 # define GL_ATOMIC_COUNTER_BUFFER_START 0 x92C2 # define GL_ATOMIC_COUNTER_BUFFER_SIZE 0 x92C3 # define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0 x92C4 # define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0 x92C5 # define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0 x92C6 # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0 x92C7 # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0 x92C8 # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0 x92C9 # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0 x92CA # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0 x92CB # define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0 x92CC # define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0 x92CD # define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0 x92CE # define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0 x92CF # define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0 x92D0 # define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0 x92D1 # define GL_MAX_VERTEX_ATOMIC_COUNTERS 0 x92D2 # define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0 x92D3 # define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0 x92D4 # define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0 x92D5 # define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0 x92D6 # define GL_MAX_COMBINED_ATOMIC_COUNTERS 0 x92D7 # define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0 x92D8 # define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0 x92DC # define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0 x92D9 # define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0 x92DA # define GL_UNSIGNED_INT_ATOMIC_COUNTER 0 x92DB # define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0 x00000001 # define GL_ELEMENT_ARRAY_BARRIER_BIT 0 x00000002 # define GL_UNIFORM_BARRIER_BIT 0 x00000004 # define GL_TEXTURE_FETCH_BARRIER_BIT 0 x00000008 # define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0 x00000020 # define GL_COMMAND_BARRIER_BIT 0 x00000040 # define GL_PIXEL_BUFFER_BARRIER_BIT 0 x00000080 # define GL_TEXTURE_UPDATE_BARRIER_BIT 0 x00000100 # define GL_BUFFER_UPDATE_BARRIER_BIT 0 x00000200 # define GL_FRAMEBUFFER_BARRIER_BIT 0 x00000400 # define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0 x00000800 # define GL_ATOMIC_COUNTER_BARRIER_BIT 0 x00001000 # define GL_ALL_BARRIER_BITS 0 xFFFFFFFF # define GL_MAX_IMAGE_UNITS 0 x8F38 # define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0 x8F39 # define GL_IMAGE_BINDING_NAME 0 x8F3A # define GL_IMAGE_BINDING_LEVEL 0 x8F3B # define GL_IMAGE_BINDING_LAYERED 0 x8F3C # define GL_IMAGE_BINDING_LAYER 0 x8F3D # define GL_IMAGE_BINDING_ACCESS 0 x8F3E # define GL_IMAGE_1D 0 x904C # define GL_IMAGE_2D 0 x904D # define GL_IMAGE_3D 0 x904E # define GL_IMAGE_2D_RECT 0 x904F # define GL_IMAGE_CUBE 0 x9050 # define GL_IMAGE_BUFFER 0 x9051 # define GL_IMAGE_1D_ARRAY 0 x9052 # define GL_IMAGE_2D_ARRAY 0 x9053 # define GL_IMAGE_CUBE_MAP_ARRAY 0 x9054 # define GL_IMAGE_2D_MULTISAMPLE 0 x9055 # define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0 x9056 # define GL_INT_IMAGE_1D 0 x9057 # define GL_INT_IMAGE_2D 0 x9058 # define GL_INT_IMAGE_3D 0 x9059 # define GL_INT_IMAGE_2D_RECT 0 x905A # define GL_INT_IMAGE_CUBE 0 x905B # define GL_INT_IMAGE_BUFFER 0 x905C # define GL_INT_IMAGE_1D_ARRAY 0 x905D # define GL_INT_IMAGE_2D_ARRAY 0 x905E # define GL_INT_IMAGE_CUBE_MAP_ARRAY 0 x905F # define GL_INT_IMAGE_2D_MULTISAMPLE 0 x9060 # define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0 x9061 # define GL_UNSIGNED_INT_IMAGE_1D 0 x9062 # define GL_UNSIGNED_INT_IMAGE_2D 0 x9063 # define GL_UNSIGNED_INT_IMAGE_3D 0 x9064 # define GL_UNSIGNED_INT_IMAGE_2D_RECT 0 x9065 # define GL_UNSIGNED_INT_IMAGE_CUBE 0 x9066 # define GL_UNSIGNED_INT_IMAGE_BUFFER 0 x9067 # define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0 x9068 # define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0 x9069 # define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0 x906A # define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0 x906B # define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0 x906C # define GL_MAX_IMAGE_SAMPLES 0 x906D # define GL_IMAGE_BINDING_FORMAT 0 x906E # define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0 x90C7 # define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0 x90C8 # define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0 x90C9 # define GL_MAX_VERTEX_IMAGE_UNIFORMS 0 x90CA # define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0 x90CB # define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0 x90CC # define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0 x90CD # define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0 x90CE # define GL_MAX_COMBINED_IMAGE_UNIFORMS 0 x90CF # define GL_COMPRESSED_RGBA_BPTC_UNORM 0 x8E8C # define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0 x8E8D # define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0 x8E8E # define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0 x8E8F # define GL_TEXTURE_IMMUTABLE_FORMAT 0 x912F typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)"
  },
  {
    "label": "glDrawArraysInstancedBaseInstance()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseInstance()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertexBaseInstance()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)"
  },
  {
    "label": "glGetInternalformativ()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetActiveAtomicCounterBufferiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "glBindImageTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)"
  },
  {
    "label": "glMemoryBarrier()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMemoryBarrier(GLbitfield barriers)"
  },
  {
    "label": "glTexStorage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTexStorage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexStorage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glDrawTransformFeedbackInstanced()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount)"
  },
  {
    "label": "glDrawTransformFeedbackStreamInstanced()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_3 # define GL_VERSION_4_3 1 typedef)",
    "insertText": "void(APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# define GL_NUM_SHADING_LANGUAGE_VERSIONS 0 x82E9 # define GL_VERTEX_ATTRIB_ARRAY_LONG 0 x874E # define GL_COMPRESSED_RGB8_ETC2 0 x9274 # define GL_COMPRESSED_SRGB8_ETC2 0 x9275 # define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0 x9276 # define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0 x9277 # define GL_COMPRESSED_RGBA8_ETC2_EAC 0 x9278 # define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0 x9279 # define GL_COMPRESSED_R11_EAC 0 x9270 # define GL_COMPRESSED_SIGNED_R11_EAC 0 x9271 # define GL_COMPRESSED_RG11_EAC 0 x9272 # define GL_COMPRESSED_SIGNED_RG11_EAC 0 x9273 # define GL_PRIMITIVE_RESTART_FIXED_INDEX 0 x8D69 # define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0 x8D6A # define GL_MAX_ELEMENT_INDEX 0 x8D6B # define GL_COMPUTE_SHADER 0 x91B9 # define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0 x91BB # define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0 x91BC # define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0 x91BD # define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0 x8262 # define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0 x8263 # define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0 x8264 # define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0 x8265 # define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0 x8266 # define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0 x90EB # define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0 x91BE # define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0 x91BF # define GL_COMPUTE_WORK_GROUP_SIZE 0 x8267 # define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0 x90EC # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0 x90ED # define GL_DISPATCH_INDIRECT_BUFFER 0 x90EE # define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0 x90EF # define GL_COMPUTE_SHADER_BIT 0 x00000020 # define GL_DEBUG_OUTPUT_SYNCHRONOUS 0 x8242 # define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0 x8243 # define GL_DEBUG_CALLBACK_FUNCTION 0 x8244 # define GL_DEBUG_CALLBACK_USER_PARAM 0 x8245 # define 0 x8246 # define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0 x8247 # define GL_DEBUG_SOURCE_SHADER_COMPILER 0 x8248 # define GL_DEBUG_SOURCE_THIRD_PARTY 0 x8249 # define GL_DEBUG_SOURCE_APPLICATION 0 x824A # define GL_DEBUG_SOURCE_OTHER 0 x824B # define GL_DEBUG_TYPE_ERROR 0 x824C # define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0 x824D # define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0 x824E # define GL_DEBUG_TYPE_PORTABILITY 0 x824F # define GL_DEBUG_TYPE_PERFORMANCE 0 x8250 # define GL_DEBUG_TYPE_OTHER 0 x8251 # define GL_MAX_DEBUG_MESSAGE_LENGTH 0 x9143 # define GL_MAX_DEBUG_LOGGED_MESSAGES 0 x9144 # define GL_DEBUG_LOGGED_MESSAGES 0 x9145 # define GL_DEBUG_SEVERITY_HIGH 0 x9146 # define GL_DEBUG_SEVERITY_MEDIUM 0 x9147 # define GL_DEBUG_SEVERITY_LOW 0 x9148 # define GL_DEBUG_TYPE_MARKER 0 x8268 # define GL_DEBUG_TYPE_PUSH_GROUP 0 x8269 # define GL_DEBUG_TYPE_POP_GROUP 0 x826A # define GL_DEBUG_SEVERITY_NOTIFICATION 0 x826B # define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0 x826C # define GL_DEBUG_GROUP_STACK_DEPTH 0 x826D # define GL_BUFFER 0 x82E0 # define GL_SHADER 0 x82E1 # define GL_PROGRAM 0 x82E2 # define GL_QUERY 0 x82E3 # define GL_PROGRAM_PIPELINE 0 x82E4 # define GL_SAMPLER 0 x82E6 # define GL_MAX_LABEL_LENGTH 0 x82E8 # define GL_DEBUG_OUTPUT 0 x92E0 # define GL_CONTEXT_FLAG_DEBUG_BIT 0 x00000002 # define GL_MAX_UNIFORM_LOCATIONS 0 x826E # define GL_FRAMEBUFFER_DEFAULT_WIDTH 0 x9310 # define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0 x9311 # define GL_FRAMEBUFFER_DEFAULT_LAYERS 0 x9312 # define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0 x9313 # define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0 x9314 # define GL_MAX_FRAMEBUFFER_WIDTH 0 x9315 # define GL_MAX_FRAMEBUFFER_HEIGHT 0 x9316 # define GL_MAX_FRAMEBUFFER_LAYERS 0 x9317 # define GL_MAX_FRAMEBUFFER_SAMPLES 0 x9318 # define GL_INTERNALFORMAT_SUPPORTED 0 x826F # define GL_INTERNALFORMAT_PREFERRED 0 x8270 # define GL_INTERNALFORMAT_RED_SIZE 0 x8271 # define GL_INTERNALFORMAT_GREEN_SIZE 0 x8272 # define GL_INTERNALFORMAT_BLUE_SIZE 0 x8273 # define GL_INTERNALFORMAT_ALPHA_SIZE 0 x8274 # define GL_INTERNALFORMAT_DEPTH_SIZE 0 x8275 # define GL_INTERNALFORMAT_STENCIL_SIZE 0 x8276 # define GL_INTERNALFORMAT_SHARED_SIZE 0 x8277 # define GL_INTERNALFORMAT_RED_TYPE 0 x8278 # define GL_INTERNALFORMAT_GREEN_TYPE 0 x8279 # define GL_INTERNALFORMAT_BLUE_TYPE 0 x827A # define GL_INTERNALFORMAT_ALPHA_TYPE 0 x827B # define GL_INTERNALFORMAT_DEPTH_TYPE 0 x827C # define GL_INTERNALFORMAT_STENCIL_TYPE 0 x827D # define GL_MAX_WIDTH 0 x827E # define GL_MAX_HEIGHT 0 x827F # define GL_MAX_DEPTH 0 x8280 # define GL_MAX_LAYERS 0 x8281 # define GL_MAX_COMBINED_DIMENSIONS 0 x8282 # define GL_COLOR_COMPONENTS 0 x8283 # define GL_DEPTH_COMPONENTS 0 x8284 # define GL_STENCIL_COMPONENTS 0 x8285 # define GL_COLOR_RENDERABLE 0 x8286 # define GL_DEPTH_RENDERABLE 0 x8287 # define GL_STENCIL_RENDERABLE 0 x8288 # define GL_FRAMEBUFFER_RENDERABLE 0 x8289 # define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0 x828A # define GL_FRAMEBUFFER_BLEND 0 x828B # define GL_READ_PIXELS 0 x828C # define GL_READ_PIXELS_FORMAT 0 x828D # define GL_READ_PIXELS_TYPE 0 x828E # define GL_TEXTURE_IMAGE_FORMAT 0 x828F # define GL_TEXTURE_IMAGE_TYPE 0 x8290 # define GL_GET_TEXTURE_IMAGE_FORMAT 0 x8291 # define GL_GET_TEXTURE_IMAGE_TYPE 0 x8292 # define GL_MIPMAP 0 x8293 # define GL_MANUAL_GENERATE_MIPMAP 0 x8294 # define GL_AUTO_GENERATE_MIPMAP 0 x8295 # define GL_COLOR_ENCODING 0 x8296 # define GL_SRGB_READ 0 x8297 # define GL_SRGB_WRITE 0 x8298 # define GL_FILTER 0 x829A # define GL_VERTEX_TEXTURE 0 x829B # define GL_TESS_CONTROL_TEXTURE 0 x829C # define GL_TESS_EVALUATION_TEXTURE 0 x829D # define GL_GEOMETRY_TEXTURE 0 x829E # define GL_FRAGMENT_TEXTURE 0 x829F # define GL_COMPUTE_TEXTURE 0 x82A0 # define GL_TEXTURE_SHADOW 0 x82A1 # define GL_TEXTURE_GATHER 0 x82A2 # define GL_TEXTURE_GATHER_SHADOW 0 x82A3 # define GL_SHADER_IMAGE_LOAD 0 x82A4 # define GL_SHADER_IMAGE_STORE 0 x82A5 # define GL_SHADER_IMAGE_ATOMIC 0 x82A6 # define GL_IMAGE_TEXEL_SIZE 0 x82A7 # define GL_IMAGE_COMPATIBILITY_CLASS 0 x82A8 # define GL_IMAGE_PIXEL_FORMAT 0 x82A9 # define GL_IMAGE_PIXEL_TYPE 0 x82AA # define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0 x82AC # define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0 x82AD # define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0 x82AE # define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0 x82AF # define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0 x82B1 # define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0 x82B2 # define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0 x82B3 # define GL_CLEAR_BUFFER 0 x82B4 # define GL_TEXTURE_VIEW 0 x82B5 # define GL_VIEW_COMPATIBILITY_CLASS 0 x82B6 # define GL_FULL_SUPPORT 0 x82B7 # define GL_CAVEAT_SUPPORT 0 x82B8 # define GL_IMAGE_CLASS_4_X_32 0 x82B9 # define GL_IMAGE_CLASS_2_X_32 0 x82BA # define GL_IMAGE_CLASS_1_X_32 0 x82BB # define GL_IMAGE_CLASS_4_X_16 0 x82BC # define GL_IMAGE_CLASS_2_X_16 0 x82BD # define GL_IMAGE_CLASS_1_X_16 0 x82BE # define GL_IMAGE_CLASS_4_X_8 0 x82BF # define GL_IMAGE_CLASS_2_X_8 0 x82C0 # define GL_IMAGE_CLASS_1_X_8 0 x82C1 # define GL_IMAGE_CLASS_11_11_10 0 x82C2 # define GL_IMAGE_CLASS_10_10_10_2 0 x82C3 # define GL_VIEW_CLASS_128_BITS 0 x82C4 # define GL_VIEW_CLASS_96_BITS 0 x82C5 # define GL_VIEW_CLASS_64_BITS 0 x82C6 # define GL_VIEW_CLASS_48_BITS 0 x82C7 # define GL_VIEW_CLASS_32_BITS 0 x82C8 # define GL_VIEW_CLASS_24_BITS 0 x82C9 # define GL_VIEW_CLASS_16_BITS 0 x82CA # define GL_VIEW_CLASS_8_BITS 0 x82CB # define GL_VIEW_CLASS_S3TC_DXT1_RGB 0 x82CC # define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0 x82CD # define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0 x82CE # define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0 x82CF # define GL_VIEW_CLASS_RGTC1_RED 0 x82D0 # define GL_VIEW_CLASS_RGTC2_RG 0 x82D1 # define GL_VIEW_CLASS_BPTC_UNORM 0 x82D2 # define GL_VIEW_CLASS_BPTC_FLOAT 0 x82D3 # define GL_UNIFORM 0 x92E1 # define GL_UNIFORM_BLOCK 0 x92E2 # define GL_PROGRAM_INPUT 0 x92E3 # define GL_PROGRAM_OUTPUT 0 x92E4 # define GL_BUFFER_VARIABLE 0 x92E5 # define GL_SHADER_STORAGE_BLOCK 0 x92E6 # define GL_VERTEX_SUBROUTINE 0 x92E8 # define GL_TESS_CONTROL_SUBROUTINE 0 x92E9 # define GL_TESS_EVALUATION_SUBROUTINE 0 x92EA # define GL_GEOMETRY_SUBROUTINE 0 x92EB # define GL_FRAGMENT_SUBROUTINE 0 x92EC # define GL_COMPUTE_SUBROUTINE 0 x92ED # define GL_VERTEX_SUBROUTINE_UNIFORM 0 x92EE # define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0 x92EF # define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0 x92F0 # define GL_GEOMETRY_SUBROUTINE_UNIFORM 0 x92F1 # define GL_FRAGMENT_SUBROUTINE_UNIFORM 0 x92F2 # define GL_COMPUTE_SUBROUTINE_UNIFORM 0 x92F3 # define GL_TRANSFORM_FEEDBACK_VARYING 0 x92F4 # define GL_ACTIVE_RESOURCES 0 x92F5 # define GL_MAX_NAME_LENGTH 0 x92F6 # define GL_MAX_NUM_ACTIVE_VARIABLES 0 x92F7 # define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0 x92F8 # define GL_NAME_LENGTH 0 x92F9 # define GL_TYPE 0 x92FA # define GL_ARRAY_SIZE 0 x92FB # define GL_OFFSET 0 x92FC # define GL_BLOCK_INDEX 0 x92FD # define GL_ARRAY_STRIDE 0 x92FE # define GL_MATRIX_STRIDE 0 x92FF # define GL_IS_ROW_MAJOR 0 x9300 # define GL_ATOMIC_COUNTER_BUFFER_INDEX 0 x9301 # define GL_BUFFER_BINDING 0 x9302 # define GL_BUFFER_DATA_SIZE 0 x9303 # define GL_NUM_ACTIVE_VARIABLES 0 x9304 # define GL_ACTIVE_VARIABLES 0 x9305 # define GL_REFERENCED_BY_VERTEX_SHADER 0 x9306 # define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0 x9307 # define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0 x9308 # define GL_REFERENCED_BY_GEOMETRY_SHADER 0 x9309 # define GL_REFERENCED_BY_FRAGMENT_SHADER 0 x930A # define GL_REFERENCED_BY_COMPUTE_SHADER 0 x930B # define GL_TOP_LEVEL_ARRAY_SIZE 0 x930C # define GL_TOP_LEVEL_ARRAY_STRIDE 0 x930D # define GL_LOCATION 0 x930E # define GL_LOCATION_INDEX 0 x930F # define GL_IS_PER_PATCH 0 x92E7 # define GL_SHADER_STORAGE_BUFFER 0 x90D2 # define GL_SHADER_STORAGE_BUFFER_BINDING 0 x90D3 # define GL_SHADER_STORAGE_BUFFER_START 0 x90D4 # define GL_SHADER_STORAGE_BUFFER_SIZE 0 x90D5 # define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0 x90D6 # define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0 x90D7 # define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0 x90D8 # define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0 x90D9 # define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0 x90DA # define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0 x90DB # define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0 x90DC # define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0 x90DD # define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0 x90DE # define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0 x90DF # define GL_SHADER_STORAGE_BARRIER_BIT 0 x00002000 # define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0 x8F39 # define GL_DEPTH_STENCIL_TEXTURE_MODE 0 x90EA # define GL_TEXTURE_BUFFER_OFFSET 0 x919D # define GL_TEXTURE_BUFFER_SIZE 0 x919E # define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0 x919F # define GL_TEXTURE_VIEW_MIN_LEVEL 0 x82DB # define GL_TEXTURE_VIEW_NUM_LEVELS 0 x82DC # define GL_TEXTURE_VIEW_MIN_LAYER 0 x82DD # define GL_TEXTURE_VIEW_NUM_LAYERS 0 x82DE # define GL_TEXTURE_IMMUTABLE_LEVELS 0 x82DF # define GL_VERTEX_ATTRIB_BINDING 0 x82D4 # define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0 x82D5 # define GL_VERTEX_BINDING_DIVISOR 0 x82D6 # define GL_VERTEX_BINDING_OFFSET 0 x82D7 # define GL_VERTEX_BINDING_STRIDE 0 x82D8 # define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0 x82D9 # define GL_MAX_VERTEX_ATTRIB_BINDINGS 0 x82DA # define GL_VERTEX_BINDING_BUFFER 0 x8F4F # define GL_DISPLAY_LIST 0 x82E7 typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glClearBufferData()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glDispatchCompute()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)"
  },
  {
    "label": "glDispatchComputeIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDispatchComputeIndirect(GLintptr indirect)"
  },
  {
    "label": "glCopyImageSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "glFramebufferParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glGetFramebufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetInternalformati64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "glInvalidateTexSubImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glInvalidateTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateTexImage(GLuint texture, GLint level)"
  },
  {
    "label": "glInvalidateBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glInvalidateBufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateBufferData(GLuint buffer)"
  },
  {
    "label": "glInvalidateFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glInvalidateSubFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glMultiDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glGetProgramInterfaceiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramResourceIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glGetProgramResourceiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)"
  },
  {
    "label": "glGetProgramResourceLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceLocationIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glShaderStorageBlockBinding()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)"
  },
  {
    "label": "glTexBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTexStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexStorage3DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureView()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "glBindVertexBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexAttribFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribIFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribLFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribBinding()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexBindingDivisor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glDebugMessageControl()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsert()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLog()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glPushDebugGroup()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)"
  },
  {
    "label": "glPopDebugGroup()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPopDebugGroup(void)"
  },
  {
    "label": "glObjectLabel()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectLabel()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glObjectPtrLabel()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectPtrLabel()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_4 # define GL_VERSION_4_4 1 # define GL_MAX_VERTEX_ATTRIB_STRIDE 0 x82E5 # define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0 x8221 # define GL_TEXTURE_BUFFER_BINDING 0 x8C2A # define GL_MAP_PERSISTENT_BIT 0 x0040 # define GL_MAP_COHERENT_BIT 0 x0080 # define GL_DYNAMIC_STORAGE_BIT 0 x0100 # define GL_CLIENT_STORAGE_BIT 0 x0200 # define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0 x00004000 # define GL_BUFFER_IMMUTABLE_STORAGE 0 x821F # define GL_BUFFER_STORAGE_FLAGS 0 x8220 # define GL_CLEAR_TEXTURE 0 x9365 # define GL_LOCATION_COMPONENT 0 x934A # define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0 x934B # define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0 x934C # define GL_QUERY_BUFFER 0 x9192 # define GL_QUERY_BUFFER_BARRIER_BIT 0 x00008000 # define GL_QUERY_BUFFER_BINDING 0 x9193 # define GL_QUERY_RESULT_NO_WAIT 0 x9194 # define GL_MIRROR_CLAMP_TO_EDGE 0 x8743 typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "glBufferStorage()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glClearTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearTexSubImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glBindBuffersBase()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)"
  },
  {
    "label": "glBindBuffersRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)"
  },
  {
    "label": "glBindTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindTextures(GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "glBindSamplers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "glBindImageTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "glBindVertexBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_5 # define GL_VERSION_4_5 1 # define GL_CONTEXT_LOST 0 x0507 # define GL_NEGATIVE_ONE_TO_ONE 0 x935E # define GL_ZERO_TO_ONE 0 x935F # define GL_CLIP_ORIGIN 0 x935C # define GL_CLIP_DEPTH_MODE 0 x935D # define GL_QUERY_WAIT_INVERTED 0 x8E17 # define GL_QUERY_NO_WAIT_INVERTED 0 x8E18 # define GL_QUERY_BY_REGION_WAIT_INVERTED 0 x8E19 # define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0 x8E1A # define GL_MAX_CULL_DISTANCES 0 x82F9 # define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0 x82FA # define GL_TEXTURE_TARGET 0 x1006 # define GL_QUERY_TARGET 0 x82EA # define GL_GUILTY_CONTEXT_RESET 0 x8253 # define GL_INNOCENT_CONTEXT_RESET 0 x8254 # define GL_UNKNOWN_CONTEXT_RESET 0 x8255 # define GL_RESET_NOTIFICATION_STRATEGY 0 x8256 # define GL_LOSE_CONTEXT_ON_RESET 0 x8252 # define GL_NO_RESET_NOTIFICATION 0 x8261 # define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0 x00000004 # define GL_CONTEXT_RELEASE_BEHAVIOR 0 x82FB # define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0 x82FC typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIPCONTROLPROC) (GLenum origin, GLenum depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATETRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) (GLuint xfb, GLuint index, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKIVPROC) (GLuint xfb, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64 *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEBUFFERSPROC) (GLsizei n, GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERSTORAGEPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERDATAPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYNAMEDBUFFERSUBDATAPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDBUFFERDATAPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPNAMEDBUFFERPROC) (GLuint buffer, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLUNMAPNAMEDBUFFERPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVPROC) (GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) (GLuint buffer, GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVPROC) (GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) (GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) (GLuint framebuffer, GLenum buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) (GLuint framebuffer, GLenum src)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLITNAMEDFRAMEBUFFERPROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) (GLuint framebuffer, GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) (GLuint framebuffer, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATERENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) (GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATETEXTURESPROC) (GLenum target, GLsizei n, GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBUFFERPROC) (GLuint texture, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBUFFERRANGEPROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE1DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE2DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE3DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERFPROC) (GLuint texture, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIPROC) (GLuint texture, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENERATETEXTUREMIPMAPPROC) (GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTEXTUREUNITPROC) (GLuint unit, GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVPROC) (GLuint texture, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVPROC) (GLuint texture, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYELEMENTBUFFERPROC) (GLuint vaobj, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERSPROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYATTRIBBINDINGPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYATTRIBFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYATTRIBIFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYATTRIBLFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYBINDINGDIVISORPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYIVPROC) (GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYINDEXEDIVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYINDEXED64IVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATESAMPLERSPROC) (GLsizei n, GLuint *samplers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEQUERIESPROC) (GLenum target, GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYBUFFEROBJECTI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYBUFFEROBJECTIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMDVPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMFVPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMUIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREADNPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNMAPDVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNMAPFVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNMAPIVPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNPIXELMAPFVPROC) (GLenum map, GLsizei bufSize, GLfloat *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNPIXELMAPUIVPROC) (GLenum map, GLsizei bufSize, GLuint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNPIXELMAPUSVPROC) (GLenum map, GLsizei bufSize, GLushort *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNPOLYGONSTIPPLEPROC) (GLsizei bufSize, GLubyte *pattern)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBARRIERPROC) (void)"
  },
  {
    "label": "glClipControl()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glClipControl(GLenum origin, GLenum depth)"
  },
  {
    "label": "glCreateTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateTransformFeedbacks(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glTransformFeedbackBufferBase()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glGetTransformFeedbackiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetTransformFeedbacki_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param)"
  },
  {
    "label": "glGetTransformFeedbacki64_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param)"
  },
  {
    "label": "glCreateBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glNamedBufferStorage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glNamedBufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glCopyNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glClearNamedBufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glMapNamedBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapNamedBuffer(GLuint buffer, GLenum access)"
  },
  {
    "label": "glMapNamedBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glUnmapNamedBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glUnmapNamedBuffer(GLuint buffer)"
  },
  {
    "label": "glFlushMappedNamedBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glGetNamedBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetNamedBufferParameteri64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetNamedBufferPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "glGetNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glCreateFramebuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glNamedFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glNamedFramebufferParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "glNamedFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glNamedFramebufferDrawBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)"
  },
  {
    "label": "glNamedFramebufferDrawBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glNamedFramebufferReadBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src)"
  },
  {
    "label": "glInvalidateNamedFramebufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glInvalidateNamedFramebufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glClearNamedFramebufferiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "glClearNamedFramebufferuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "glClearNamedFramebufferfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "glClearNamedFramebufferfi()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "glBlitNamedFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glCheckNamedFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target)"
  },
  {
    "label": "glGetNamedFramebufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetNamedFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glNamedRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetNamedRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateTextures(GLenum target, GLsizei n, GLuint *textures)"
  },
  {
    "label": "glTextureBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTextureBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTextureStorage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTextureStorage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureStorage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glTextureStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureStorage3DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCompressedTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCopyTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCopyTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterf(GLuint texture, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTextureParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glTextureParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameteri(GLuint texture, GLenum pname, GLint param)"
  },
  {
    "label": "glTextureParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTextureParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glTextureParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param)"
  },
  {
    "label": "glGenerateTextureMipmap()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenerateTextureMipmap(GLuint texture)"
  },
  {
    "label": "glBindTextureUnit()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindTextureUnit(GLuint unit, GLuint texture)"
  },
  {
    "label": "glGetTextureImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetCompressedTextureImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetTextureLevelParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureLevelParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGetTextureParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateVertexArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateVertexArrays(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glDisableVertexArrayAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVertexArrayAttrib(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glEnableVertexArrayAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableVertexArrayAttrib(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glVertexArrayElementBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer)"
  },
  {
    "label": "glVertexArrayVertexBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexArrayVertexBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "glVertexArrayAttribBinding()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexArrayAttribFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayAttribIFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayAttribLFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayBindingDivisor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glGetVertexArrayiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayIndexediv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayIndexed64iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)"
  },
  {
    "label": "glCreateSamplers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateSamplers(GLsizei n, GLuint *samplers)"
  },
  {
    "label": "glCreateProgramPipelines()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateProgramPipelines(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glCreateQueries()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateQueries(GLenum target, GLsizei n, GLuint *ids)"
  },
  {
    "label": "glGetQueryBufferObjecti64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectui64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glMemoryBarrierByRegion()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMemoryBarrierByRegion(GLbitfield barriers)"
  },
  {
    "label": "glGetTextureSubImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetCompressedTextureSubImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetGraphicsResetStatus()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glGetGraphicsResetStatus(void)"
  },
  {
    "label": "glGetnCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetnTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetnUniformdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "glGetnUniformfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glReadnPixels()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glGetnMapdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)"
  },
  {
    "label": "glGetnMapfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)"
  },
  {
    "label": "glGetnMapiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v)"
  },
  {
    "label": "glGetnPixelMapfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values)"
  },
  {
    "label": "glGetnPixelMapuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values)"
  },
  {
    "label": "glGetnPixelMapusv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values)"
  },
  {
    "label": "glGetnPolygonStipple()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern)"
  },
  {
    "label": "glGetnColorTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)"
  },
  {
    "label": "glGetnConvolutionFilter()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)"
  },
  {
    "label": "glGetnSeparableFilter()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)"
  },
  {
    "label": "glGetnHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "glGetnMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "glTextureBarrier()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureBarrier(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_ES2_compatibility # define GL_ARB_ES2_compatibility 1 # endif # ifndef GL_ARB_ES3_1_compatibility # define GL_ARB_ES3_1_compatibility 1 # endif # ifndef GL_ARB_ES3_2_compatibility # define GL_ARB_ES3_2_compatibility 1 # define GL_PRIMITIVE_BOUNDING_BOX_ARB 0 x92BE # define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0 x9381 # define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0 x9382 typedef)",
    "insertText": "void(APIENTRYP PFNGLPRIMITIVEBOUNDINGBOXARBPROC) (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)"
  },
  {
    "label": "glPrimitiveBoundingBoxARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_ES3_compatibility # define GL_ARB_ES3_compatibility 1 # endif # ifndef GL_ARB_arrays_of_arrays # define GL_ARB_arrays_of_arrays 1 # endif # ifndef GL_ARB_base_instance # define GL_ARB_base_instance 1 # endif # ifndef GL_ARB_bindless_texture # define GL_ARB_bindless_texture 1 typedef uint64_t GLuint64EXT ; # define GL_UNSIGNED_INT64_ARB 0 x140F typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glGetTextureHandleARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetTextureHandleARB(GLuint texture)"
  },
  {
    "label": "glGetTextureSamplerHandleARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)"
  },
  {
    "label": "glMakeTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeTextureHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glMakeTextureHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeTextureHandleNonResidentARB(GLuint64 handle)"
  },
  {
    "label": "glGetImageHandleARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "glMakeImageHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)"
  },
  {
    "label": "glMakeImageHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeImageHandleNonResidentARB(GLuint64 handle)"
  },
  {
    "label": "glUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformHandleui64ARB(GLint location, GLuint64 value)"
  },
  {
    "label": "glUniformHandleui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "glProgramUniformHandleui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "glIsTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsTextureHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glIsImageHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsImageHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glVertexAttribL1ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)"
  },
  {
    "label": "glVertexAttribL1ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glGetVertexAttribLui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "GLsync()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_blend_func_extended # define GL_ARB_blend_func_extended 1 # endif # ifndef GL_ARB_buffer_storage # define GL_ARB_buffer_storage 1 # endif # ifndef GL_ARB_cl_event # define GL_ARB_cl_event 1 struct _cl_context ; struct _cl_event ; # define GL_SYNC_CL_EVENT_ARB 0 x8240 # define GL_SYNC_CL_EVENT_COMPLETE_ARB 0 x8241 typedef)",
    "insertText": "GLsync(APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags)"
  },
  {
    "label": "glCreateSyncFromCLeventARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLsync APIENTRY)",
    "insertText": "glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_clear_buffer_object # define GL_ARB_clear_buffer_object 1 # endif # ifndef GL_ARB_clear_texture # define GL_ARB_clear_texture 1 # endif # ifndef GL_ARB_clip_control # define GL_ARB_clip_control 1 # endif # ifndef GL_ARB_color_buffer_float # define GL_ARB_color_buffer_float 1 # define GL_RGBA_FLOAT_MODE_ARB 0 x8820 # define GL_CLAMP_VERTEX_COLOR_ARB 0 x891A # define GL_CLAMP_FRAGMENT_COLOR_ARB 0 x891B # define GL_CLAMP_READ_COLOR_ARB 0 x891C # define GL_FIXED_ONLY_ARB 0 x891D typedef)",
    "insertText": "void(APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp)"
  },
  {
    "label": "glClampColorARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glClampColorARB(GLenum target, GLenum clamp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_compatibility # define GL_ARB_compatibility 1 # endif # ifndef GL_ARB_compressed_texture_pixel_storage # define GL_ARB_compressed_texture_pixel_storage 1 # endif # ifndef GL_ARB_compute_shader # define GL_ARB_compute_shader 1 # endif # ifndef GL_ARB_compute_variable_group_size # define GL_ARB_compute_variable_group_size 1 # define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0 x9344 # define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0 x90EB # define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0 x9345 # define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0 x91BF typedef)",
    "insertText": "void(APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)"
  },
  {
    "label": "glDispatchComputeGroupSizeARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_conditional_render_inverted # define GL_ARB_conditional_render_inverted 1 # endif # ifndef GL_ARB_conservative_depth # define GL_ARB_conservative_depth 1 # endif # ifndef GL_ARB_copy_buffer # define GL_ARB_copy_buffer 1 # endif # ifndef GL_ARB_copy_image # define GL_ARB_copy_image 1 # endif # ifndef GL_ARB_cull_distance # define GL_ARB_cull_distance 1 # endif # ifndef GL_ARB_debug_output # define GL_ARB_debug_output 1 typedef)",
    "insertText": "void(APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0 x8242 # define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0 x8243 # define GL_DEBUG_CALLBACK_FUNCTION_ARB 0 x8244 # define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0 x8245 # define GL_DEBUG_SOURCE_API_ARB 0 x8246 # define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0 x8247 # define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0 x8248 # define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0 x8249 # define GL_DEBUG_SOURCE_APPLICATION_ARB 0 x824A # define GL_DEBUG_SOURCE_OTHER_ARB 0 x824B # define GL_DEBUG_TYPE_ERROR_ARB 0 x824C # define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0 x824D # define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0 x824E # define GL_DEBUG_TYPE_PORTABILITY_ARB 0 x824F # define GL_DEBUG_TYPE_PERFORMANCE_ARB 0 x8250 # define GL_DEBUG_TYPE_OTHER_ARB 0 x8251 # define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0 x9143 # define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0 x9144 # define GL_DEBUG_LOGGED_MESSAGES_ARB 0 x9145 # define GL_DEBUG_SEVERITY_HIGH_ARB 0 x9146 # define GL_DEBUG_SEVERITY_MEDIUM_ARB 0 x9147 # define GL_DEBUG_SEVERITY_LOW_ARB 0 x9148 typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glDebugMessageControlARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsertARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallbackARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLogARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_depth_buffer_float # define GL_ARB_depth_buffer_float 1 # endif # ifndef GL_ARB_depth_clamp # define GL_ARB_depth_clamp 1 # endif # ifndef GL_ARB_depth_texture # define GL_ARB_depth_texture 1 # define GL_DEPTH_COMPONENT16_ARB 0 x81A5 # define GL_DEPTH_COMPONENT24_ARB 0 x81A6 # define GL_DEPTH_COMPONENT32_ARB 0 x81A7 # define GL_TEXTURE_DEPTH_SIZE_ARB 0 x884A # define GL_DEPTH_TEXTURE_MODE_ARB 0 x884B # endif # ifndef GL_ARB_derivative_control # define GL_ARB_derivative_control 1 # endif # ifndef GL_ARB_direct_state_access # define GL_ARB_direct_state_access 1 # endif # ifndef GL_ARB_draw_buffers # define GL_ARB_draw_buffers 1 # define GL_MAX_DRAW_BUFFERS_ARB 0 x8824 # define GL_DRAW_BUFFER0_ARB 0 x8825 # define GL_DRAW_BUFFER1_ARB 0 x8826 # define GL_DRAW_BUFFER2_ARB 0 x8827 # define GL_DRAW_BUFFER3_ARB 0 x8828 # define GL_DRAW_BUFFER4_ARB 0 x8829 # define GL_DRAW_BUFFER5_ARB 0 x882A # define GL_DRAW_BUFFER6_ARB 0 x882B # define GL_DRAW_BUFFER7_ARB 0 x882C # define GL_DRAW_BUFFER8_ARB 0 x882D # define GL_DRAW_BUFFER9_ARB 0 x882E # define GL_DRAW_BUFFER10_ARB 0 x882F # define GL_DRAW_BUFFER11_ARB 0 x8830 # define GL_DRAW_BUFFER12_ARB 0 x8831 # define GL_DRAW_BUFFER13_ARB 0 x8832 # define GL_DRAW_BUFFER14_ARB 0 x8833 # define GL_DRAW_BUFFER15_ARB 0 x8834 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glDrawBuffersARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawBuffersARB(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_draw_buffers_blend # define GL_ARB_draw_buffers_blend 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glBlendEquationiARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendEquationiARB(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparateiARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunciARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparateiARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_draw_elements_base_vertex # define GL_ARB_draw_elements_base_vertex 1 # endif # ifndef GL_ARB_draw_indirect # define GL_ARB_draw_indirect 1 # endif # ifndef GL_ARB_draw_instanced # define GL_ARB_draw_instanced 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "glDrawArraysInstancedARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "glDrawElementsInstancedARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_enhanced_layouts # define GL_ARB_enhanced_layouts 1 # endif # ifndef GL_ARB_explicit_attrib_location # define GL_ARB_explicit_attrib_location 1 # endif # ifndef GL_ARB_explicit_uniform_location # define GL_ARB_explicit_uniform_location 1 # endif # ifndef GL_ARB_fragment_coord_conventions # define GL_ARB_fragment_coord_conventions 1 # endif # ifndef GL_ARB_fragment_layer_viewport # define GL_ARB_fragment_layer_viewport 1 # endif # ifndef GL_ARB_fragment_program # define GL_ARB_fragment_program 1 # define GL_FRAGMENT_PROGRAM_ARB 0 x8804 # define GL_PROGRAM_FORMAT_ASCII_ARB 0 x8875 # define GL_PROGRAM_LENGTH_ARB 0 x8627 # define GL_PROGRAM_FORMAT_ARB 0 x8876 # define GL_PROGRAM_BINDING_ARB 0 x8677 # define GL_PROGRAM_INSTRUCTIONS_ARB 0 x88A0 # define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0 x88A1 # define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0 x88A2 # define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0 x88A3 # define GL_PROGRAM_TEMPORARIES_ARB 0 x88A4 # define GL_MAX_PROGRAM_TEMPORARIES_ARB 0 x88A5 # define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0 x88A6 # define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0 x88A7 # define GL_PROGRAM_PARAMETERS_ARB 0 x88A8 # define GL_MAX_PROGRAM_PARAMETERS_ARB 0 x88A9 # define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0 x88AA # define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0 x88AB # define GL_PROGRAM_ATTRIBS_ARB 0 x88AC # define GL_MAX_PROGRAM_ATTRIBS_ARB 0 x88AD # define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0 x88AE # define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0 x88AF # define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0 x88B4 # define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0 x88B5 # define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0 x88B6 # define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0 x8805 # define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0 x8806 # define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0 x8807 # define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0 x8808 # define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0 x8809 # define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0 x880A # define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0 x880B # define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0 x880C # define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0 x880D # define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0 x880E # define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0 x880F # define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0 x8810 # define GL_PROGRAM_STRING_ARB 0 x8628 # define GL_PROGRAM_ERROR_POSITION_ARB 0 x864B # define GL_CURRENT_MATRIX_ARB 0 x8641 # define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0 x88B7 # define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0 x8640 # define GL_MAX_PROGRAM_MATRICES_ARB 0 x862F # define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0 x862E # define GL_MAX_TEXTURE_COORDS_ARB 0 x8871 # define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0 x8872 # define GL_PROGRAM_ERROR_STRING_ARB 0 x8874 # define GL_MATRIX0_ARB 0 x88C0 # define GL_MATRIX1_ARB 0 x88C1 # define GL_MATRIX2_ARB 0 x88C2 # define GL_MATRIX3_ARB 0 x88C3 # define GL_MATRIX4_ARB 0 x88C4 # define GL_MATRIX5_ARB 0 x88C5 # define GL_MATRIX6_ARB 0 x88C6 # define GL_MATRIX7_ARB 0 x88C7 # define GL_MATRIX8_ARB 0 x88C8 # define GL_MATRIX9_ARB 0 x88C9 # define GL_MATRIX10_ARB 0 x88CA # define GL_MATRIX11_ARB 0 x88CB # define GL_MATRIX12_ARB 0 x88CC # define GL_MATRIX13_ARB 0 x88CD # define GL_MATRIX14_ARB 0 x88CE # define GL_MATRIX15_ARB 0 x88CF # define GL_MATRIX16_ARB 0 x88D0 # define GL_MATRIX17_ARB 0 x88D1 # define GL_MATRIX18_ARB 0 x88D2 # define GL_MATRIX19_ARB 0 x88D3 # define GL_MATRIX20_ARB 0 x88D4 # define GL_MATRIX21_ARB 0 x88D5 # define GL_MATRIX22_ARB 0 x88D6 # define GL_MATRIX23_ARB 0 x88D7 # define GL_MATRIX24_ARB 0 x88D8 # define GL_MATRIX25_ARB 0 x88D9 # define GL_MATRIX26_ARB 0 x88DA # define GL_MATRIX27_ARB 0 x88DB # define GL_MATRIX28_ARB 0 x88DC # define GL_MATRIX29_ARB 0 x88DD # define GL_MATRIX30_ARB 0 x88DE # define GL_MATRIX31_ARB 0 x88DF typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void *string)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPROGRAMARBPROC) (GLuint program)"
  },
  {
    "label": "glProgramStringARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void *string)"
  },
  {
    "label": "glBindProgramARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindProgramARB(GLenum target, GLuint program)"
  },
  {
    "label": "glDeleteProgramsARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteProgramsARB(GLsizei n, const GLuint *programs)"
  },
  {
    "label": "glGenProgramsARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenProgramsARB(GLsizei n, GLuint *programs)"
  },
  {
    "label": "glProgramEnvParameter4dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramEnvParameter4dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "glProgramEnvParameter4fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glProgramEnvParameter4fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "glProgramLocalParameter4dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramLocalParameter4dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "glProgramLocalParameter4fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glProgramLocalParameter4fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "glGetProgramEnvParameterdvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "glGetProgramEnvParameterfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "glGetProgramLocalParameterdvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "glGetProgramLocalParameterfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "glGetProgramivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramivARB(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramStringARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramStringARB(GLenum target, GLenum pname, void *string)"
  },
  {
    "label": "glIsProgramARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsProgramARB(GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_fragment_program_shadow # define GL_ARB_fragment_program_shadow 1 # endif # ifndef GL_ARB_fragment_shader # define GL_ARB_fragment_shader 1 # define GL_FRAGMENT_SHADER_ARB 0 x8B30 # define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0 x8B49 # define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0 x8B8B # endif # ifndef GL_ARB_fragment_shader_interlock # define GL_ARB_fragment_shader_interlock 1 # endif # ifndef GL_ARB_framebuffer_no_attachments # define GL_ARB_framebuffer_no_attachments 1 # endif # ifndef GL_ARB_framebuffer_object # define GL_ARB_framebuffer_object 1 # endif # ifndef GL_ARB_framebuffer_sRGB # define GL_ARB_framebuffer_sRGB 1 # endif # ifndef GL_ARB_geometry_shader4 # define GL_ARB_geometry_shader4 1 # define GL_LINES_ADJACENCY_ARB 0 x000A # define GL_LINE_STRIP_ADJACENCY_ARB 0 x000B # define GL_TRIANGLES_ADJACENCY_ARB 0 x000C # define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0 x000D # define GL_PROGRAM_POINT_SIZE_ARB 0 x8642 # define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0 x8C29 # define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0 x8DA7 # define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0 x8DA8 # define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0 x8DA9 # define GL_GEOMETRY_SHADER_ARB 0 x8DD9 # define GL_GEOMETRY_VERTICES_OUT_ARB 0 x8DDA # define GL_GEOMETRY_INPUT_TYPE_ARB 0 x8DDB # define GL_GEOMETRY_OUTPUT_TYPE_ARB 0 x8DDC # define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0 x8DDD # define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0 x8DDE # define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0 x8DDF # define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0 x8DE0 # define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0 x8DE1 typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "glProgramParameteriARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramParameteriARB(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glFramebufferTextureARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTextureLayerARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glFramebufferTextureFaceARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_get_program_binary # define GL_ARB_get_program_binary 1 # endif # ifndef GL_ARB_get_texture_sub_image # define GL_ARB_get_texture_sub_image 1 # endif # ifndef GL_ARB_gpu_shader5 # define GL_ARB_gpu_shader5 1 # endif # ifndef GL_ARB_gpu_shader_fp64 # define GL_ARB_gpu_shader_fp64 1 # endif # ifndef GL_ARB_gpu_shader_int64 # define GL_ARB_gpu_shader_int64 1 # define GL_INT64_ARB 0 x140E # define GL_INT64_VEC2_ARB 0 x8FE9 # define GL_INT64_VEC3_ARB 0 x8FEA # define GL_INT64_VEC4_ARB 0 x8FEB # define GL_UNSIGNED_INT64_VEC2_ARB 0 x8FF5 # define GL_UNSIGNED_INT64_VEC3_ARB 0 x8FF6 # define GL_UNSIGNED_INT64_VEC4_ARB 0 x8FF7 typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1I64ARBPROC) (GLint location, GLint64 x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2I64ARBPROC) (GLint location, GLint64 x, GLint64 y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4I64ARBPROC) (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4I64VARBPROC) (GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UI64ARBPROC) (GLint location, GLuint64 x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UI64ARBPROC) (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMI64VARBPROC) (GLuint program, GLint location, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLuint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMUI64VARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1I64ARBPROC) (GLuint program, GLint location, GLint64 x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4I64ARBPROC) (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4I64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UI64ARBPROC) (GLuint program, GLint location, GLuint64 x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UI64ARBPROC) (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glUniform1i64ARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glUniform1i64ARB(GLint location, GLint64 x)"
  },
  {
    "label": "glUniform2i64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2i64ARB(GLint location, GLint64 x, GLint64 y)"
  },
  {
    "label": "glUniform3i64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z)"
  },
  {
    "label": "glUniform4i64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)"
  },
  {
    "label": "glUniform1i64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glUniform2i64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glUniform3i64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glUniform4i64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glUniform1ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1ui64ARB(GLint location, GLuint64 x)"
  },
  {
    "label": "glUniform2ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y)"
  },
  {
    "label": "glUniform3ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)"
  },
  {
    "label": "glUniform4ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)"
  },
  {
    "label": "glUniform1ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glUniform2ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glUniform3ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glUniform4ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glGetUniformi64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformi64vARB(GLuint program, GLint location, GLint64 *params)"
  },
  {
    "label": "glGetUniformui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params)"
  },
  {
    "label": "glGetnUniformi64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "glGetnUniformui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params)"
  },
  {
    "label": "glProgramUniform1i64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x)"
  },
  {
    "label": "glProgramUniform2i64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y)"
  },
  {
    "label": "glProgramUniform3i64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)"
  },
  {
    "label": "glProgramUniform4i64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)"
  },
  {
    "label": "glProgramUniform1i64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glProgramUniform2i64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glProgramUniform3i64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glProgramUniform4i64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glProgramUniform1ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x)"
  },
  {
    "label": "glProgramUniform2ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y)"
  },
  {
    "label": "glProgramUniform3ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)"
  },
  {
    "label": "glProgramUniform4ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)"
  },
  {
    "label": "glProgramUniform1ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniform2ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniform3ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniform4ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_half_float_pixel # define GL_ARB_half_float_pixel 1 typedef unsigned short GLhalfARB ; # define GL_HALF_FLOAT_ARB 0 x140B # endif # ifndef GL_ARB_half_float_vertex # define GL_ARB_half_float_vertex 1 # endif # ifndef GL_ARB_imaging # define GL_ARB_imaging 1 # define GL_BLEND_COLOR 0 x8005 # define GL_BLEND_EQUATION 0 x8009 # define GL_CONVOLUTION_1D 0 x8010 # define GL_CONVOLUTION_2D 0 x8011 # define GL_SEPARABLE_2D 0 x8012 # define GL_CONVOLUTION_BORDER_MODE 0 x8013 # define GL_CONVOLUTION_FILTER_SCALE 0 x8014 # define GL_CONVOLUTION_FILTER_BIAS 0 x8015 # define GL_REDUCE 0 x8016 # define GL_CONVOLUTION_FORMAT 0 x8017 # define GL_CONVOLUTION_WIDTH 0 x8018 # define GL_CONVOLUTION_HEIGHT 0 x8019 # define GL_MAX_CONVOLUTION_WIDTH 0 x801A # define GL_MAX_CONVOLUTION_HEIGHT 0 x801B # define GL_POST_CONVOLUTION_RED_SCALE 0 x801C # define GL_POST_CONVOLUTION_GREEN_SCALE 0 x801D # define GL_POST_CONVOLUTION_BLUE_SCALE 0 x801E # define GL_POST_CONVOLUTION_ALPHA_SCALE 0 x801F # define GL_POST_CONVOLUTION_RED_BIAS 0 x8020 # define GL_POST_CONVOLUTION_GREEN_BIAS 0 x8021 # define GL_POST_CONVOLUTION_BLUE_BIAS 0 x8022 # define GL_POST_CONVOLUTION_ALPHA_BIAS 0 x8023 # define GL_HISTOGRAM 0 x8024 # define GL_PROXY_HISTOGRAM 0 x8025 # define GL_HISTOGRAM_WIDTH 0 x8026 # define GL_HISTOGRAM_FORMAT 0 x8027 # define GL_HISTOGRAM_RED_SIZE 0 x8028 # define GL_HISTOGRAM_GREEN_SIZE 0 x8029 # define GL_HISTOGRAM_BLUE_SIZE 0 x802A # define GL_HISTOGRAM_ALPHA_SIZE 0 x802B # define GL_HISTOGRAM_LUMINANCE_SIZE 0 x802C # define GL_HISTOGRAM_SINK 0 x802D # define GL_MINMAX 0 x802E # define GL_MINMAX_FORMAT 0 x802F # define GL_MINMAX_SINK 0 x8030 # define GL_TABLE_TOO_LARGE 0 x8031 # define GL_COLOR_MATRIX 0 x80B1 # define GL_COLOR_MATRIX_STACK_DEPTH 0 x80B2 # define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0 x80B3 # define GL_POST_COLOR_MATRIX_RED_SCALE 0 x80B4 # define GL_POST_COLOR_MATRIX_GREEN_SCALE 0 x80B5 # define GL_POST_COLOR_MATRIX_BLUE_SCALE 0 x80B6 # define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0 x80B7 # define GL_POST_COLOR_MATRIX_RED_BIAS 0 x80B8 # define GL_POST_COLOR_MATRIX_GREEN_BIAS 0 x80B9 # define GL_POST_COLOR_MATRIX_BLUE_BIAS 0 x80BA # define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0 x80BB # define GL_COLOR_TABLE 0 x80D0 # define GL_POST_CONVOLUTION_COLOR_TABLE 0 x80D1 # define GL_POST_COLOR_MATRIX_COLOR_TABLE 0 x80D2 # define GL_PROXY_COLOR_TABLE 0 x80D3 # define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0 x80D4 # define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0 x80D5 # define GL_COLOR_TABLE_SCALE 0 x80D6 # define GL_COLOR_TABLE_BIAS 0 x80D7 # define GL_COLOR_TABLE_FORMAT 0 x80D8 # define GL_COLOR_TABLE_WIDTH 0 x80D9 # define GL_COLOR_TABLE_RED_SIZE 0 x80DA # define GL_COLOR_TABLE_GREEN_SIZE 0 x80DB # define GL_COLOR_TABLE_BLUE_SIZE 0 x80DC # define GL_COLOR_TABLE_ALPHA_SIZE 0 x80DD # define GL_COLOR_TABLE_LUMINANCE_SIZE 0 x80DE # define GL_COLOR_TABLE_INTENSITY_SIZE 0 x80DF # define GL_CONSTANT_BORDER 0 x8151 # define GL_REPLICATE_BORDER 0 x8153 # define GL_CONVOLUTION_BORDER_COLOR 0 x8154 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, void *table)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, void *image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRESETHISTOGRAMPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRESETMINMAXPROC) (GLenum target)"
  },
  {
    "label": "glColorTable()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "glColorTableParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glColorTableParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyColorTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glGetColorTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTable(GLenum target, GLenum format, GLenum type, void *table)"
  },
  {
    "label": "glGetColorTableParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetColorTableParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glColorSubTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glCopyColorSubTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glConvolutionFilter1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "glConvolutionFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "glConvolutionParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)"
  },
  {
    "label": "glConvolutionParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glConvolutionParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameteri(GLenum target, GLenum pname, GLint params)"
  },
  {
    "label": "glConvolutionParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyConvolutionFilter1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyConvolutionFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetConvolutionFilter()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void *image)"
  },
  {
    "label": "glGetConvolutionParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetConvolutionParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSeparableFilter()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)"
  },
  {
    "label": "glSeparableFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)"
  },
  {
    "label": "glGetHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "glGetHistogramParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetHistogramParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "glGetMinmaxParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMinmaxParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMinmax(GLenum target, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glResetHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glResetHistogram(GLenum target)"
  },
  {
    "label": "glResetMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glResetMinmax(GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_indirect_parameters # define GL_ARB_indirect_parameters 1 # define GL_PARAMETER_BUFFER_ARB 0 x80EE # define GL_PARAMETER_BUFFER_BINDING_ARB 0 x80EF typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawArraysIndirectCountARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirectCountARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_instanced_arrays # define GL_ARB_instanced_arrays 1 # define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0 x88FE typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor)"
  },
  {
    "label": "glVertexAttribDivisorARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexAttribDivisorARB(GLuint index, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_internalformat_query # define GL_ARB_internalformat_query 1 # endif # ifndef GL_ARB_internalformat_query2 # define GL_ARB_internalformat_query2 1 # define GL_SRGB_DECODE_ARB 0 x8299 # endif # ifndef GL_ARB_invalidate_subdata # define GL_ARB_invalidate_subdata 1 # endif # ifndef GL_ARB_map_buffer_alignment # define GL_ARB_map_buffer_alignment 1 # endif # ifndef GL_ARB_map_buffer_range # define GL_ARB_map_buffer_range 1 # endif # ifndef GL_ARB_matrix_palette # define GL_ARB_matrix_palette 1 # define GL_MATRIX_PALETTE_ARB 0 x8840 # define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0 x8841 # define GL_MAX_PALETTE_MATRICES_ARB 0 x8842 # define GL_CURRENT_PALETTE_MATRIX_ARB 0 x8843 # define GL_MATRIX_INDEX_ARRAY_ARB 0 x8844 # define GL_CURRENT_MATRIX_INDEX_ARB 0 x8845 # define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0 x8846 # define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0 x8847 # define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0 x8848 # define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0 x8849 typedef)",
    "insertText": "void(APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glCurrentPaletteMatrixARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCurrentPaletteMatrixARB(GLint index)"
  },
  {
    "label": "glMatrixIndexubvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixIndexubvARB(GLint size, const GLubyte *indices)"
  },
  {
    "label": "glMatrixIndexusvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixIndexusvARB(GLint size, const GLushort *indices)"
  },
  {
    "label": "glMatrixIndexuivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixIndexuivARB(GLint size, const GLuint *indices)"
  },
  {
    "label": "glMatrixIndexPointerARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_multi_bind # define GL_ARB_multi_bind 1 # endif # ifndef GL_ARB_multi_draw_indirect # define GL_ARB_multi_draw_indirect 1 # endif # ifndef GL_ARB_multisample # define GL_ARB_multisample 1 # define GL_MULTISAMPLE_ARB 0 x809D # define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0 x809E # define GL_SAMPLE_ALPHA_TO_ONE_ARB 0 x809F # define GL_SAMPLE_COVERAGE_ARB 0 x80A0 # define GL_SAMPLE_BUFFERS_ARB 0 x80A8 # define GL_SAMPLES_ARB 0 x80A9 # define GL_SAMPLE_COVERAGE_VALUE_ARB 0 x80AA # define GL_SAMPLE_COVERAGE_INVERT_ARB 0 x80AB # define GL_MULTISAMPLE_BIT_ARB 0 x20000000 typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLECOVERAGEARBPROC) (GLfloat value, GLboolean invert)"
  },
  {
    "label": "glSampleCoverageARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSampleCoverageARB(GLfloat value, GLboolean invert)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_multitexture # define GL_ARB_multitexture 1 # define GL_TEXTURE0_ARB 0 x84C0 # define GL_TEXTURE1_ARB 0 x84C1 # define GL_TEXTURE2_ARB 0 x84C2 # define GL_TEXTURE3_ARB 0 x84C3 # define GL_TEXTURE4_ARB 0 x84C4 # define GL_TEXTURE5_ARB 0 x84C5 # define GL_TEXTURE6_ARB 0 x84C6 # define GL_TEXTURE7_ARB 0 x84C7 # define GL_TEXTURE8_ARB 0 x84C8 # define GL_TEXTURE9_ARB 0 x84C9 # define GL_TEXTURE10_ARB 0 x84CA # define GL_TEXTURE11_ARB 0 x84CB # define GL_TEXTURE12_ARB 0 x84CC # define GL_TEXTURE13_ARB 0 x84CD # define GL_TEXTURE14_ARB 0 x84CE # define GL_TEXTURE15_ARB 0 x84CF # define GL_TEXTURE16_ARB 0 x84D0 # define GL_TEXTURE17_ARB 0 x84D1 # define GL_TEXTURE18_ARB 0 x84D2 # define GL_TEXTURE19_ARB 0 x84D3 # define GL_TEXTURE20_ARB 0 x84D4 # define GL_TEXTURE21_ARB 0 x84D5 # define GL_TEXTURE22_ARB 0 x84D6 # define GL_TEXTURE23_ARB 0 x84D7 # define GL_TEXTURE24_ARB 0 x84D8 # define GL_TEXTURE25_ARB 0 x84D9 # define GL_TEXTURE26_ARB 0 x84DA # define GL_TEXTURE27_ARB 0 x84DB # define GL_TEXTURE28_ARB 0 x84DC # define GL_TEXTURE29_ARB 0 x84DD # define GL_TEXTURE30_ARB 0 x84DE # define GL_TEXTURE31_ARB 0 x84DF # define GL_ACTIVE_TEXTURE_ARB 0 x84E0 # define GL_CLIENT_ACTIVE_TEXTURE_ARB 0 x84E1 # define GL_MAX_TEXTURE_UNITS_ARB 0 x84E2 typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "glActiveTextureARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glActiveTextureARB(GLenum texture)"
  },
  {
    "label": "glClientActiveTextureARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClientActiveTextureARB(GLenum texture)"
  },
  {
    "label": "glMultiTexCoord1dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1dARB(GLenum target, GLdouble s)"
  },
  {
    "label": "glMultiTexCoord1dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord1fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1fARB(GLenum target, GLfloat s)"
  },
  {
    "label": "glMultiTexCoord1fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord1iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1iARB(GLenum target, GLint s)"
  },
  {
    "label": "glMultiTexCoord1ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord1sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1sARB(GLenum target, GLshort s)"
  },
  {
    "label": "glMultiTexCoord1svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord2dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "glMultiTexCoord2dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord2fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "glMultiTexCoord2fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord2iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)"
  },
  {
    "label": "glMultiTexCoord2ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord2sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "glMultiTexCoord2svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord3dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "glMultiTexCoord3dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord3fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "glMultiTexCoord3fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord3iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "glMultiTexCoord3ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord3sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "glMultiTexCoord3svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord4dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "glMultiTexCoord4dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord4fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "glMultiTexCoord4fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord4iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "glMultiTexCoord4ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord4sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "glMultiTexCoord4svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_occlusion_query # define GL_ARB_occlusion_query 1 # define GL_QUERY_COUNTER_BITS_ARB 0 x8864 # define GL_CURRENT_QUERY_ARB 0 x8865 # define GL_QUERY_RESULT_ARB 0 x8866 # define GL_QUERY_RESULT_AVAILABLE_ARB 0 x8867 # define GL_SAMPLES_PASSED_ARB 0 x8914 typedef)",
    "insertText": "void(APIENTRYP PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISQUERYARBPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDQUERYARBPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGenQueriesARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGenQueriesARB(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteQueriesARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteQueriesARB(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsQueryARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsQueryARB(GLuint id)"
  },
  {
    "label": "glBeginQueryARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginQueryARB(GLenum target, GLuint id)"
  },
  {
    "label": "glEndQueryARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndQueryARB(GLenum target)"
  },
  {
    "label": "glGetQueryivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryivARB(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectuivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_occlusion_query2 # define GL_ARB_occlusion_query2 1 # endif # ifndef GL_ARB_parallel_shader_compile # define GL_ARB_parallel_shader_compile 1 # define GL_MAX_SHADER_COMPILER_THREADS_ARB 0 x91B0 # define GL_COMPLETION_STATUS_ARB 0 x91B1 typedef)",
    "insertText": "void(APIENTRYP PFNGLMAXSHADERCOMPILERTHREADSARBPROC) (GLuint count)"
  },
  {
    "label": "glMaxShaderCompilerThreadsARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMaxShaderCompilerThreadsARB(GLuint count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_pipeline_statistics_query # define GL_ARB_pipeline_statistics_query 1 # define GL_VERTICES_SUBMITTED_ARB 0 x82EE # define GL_PRIMITIVES_SUBMITTED_ARB 0 x82EF # define GL_VERTEX_SHADER_INVOCATIONS_ARB 0 x82F0 # define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0 x82F1 # define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0 x82F2 # define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0 x82F3 # define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0 x82F4 # define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0 x82F5 # define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0 x82F6 # define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0 x82F7 # endif # ifndef GL_ARB_pixel_buffer_object # define GL_ARB_pixel_buffer_object 1 # define GL_PIXEL_PACK_BUFFER_ARB 0 x88EB # define GL_PIXEL_UNPACK_BUFFER_ARB 0 x88EC # define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0 x88ED # define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0 x88EF # endif # ifndef GL_ARB_point_parameters # define GL_ARB_point_parameters 1 # define GL_POINT_SIZE_MIN_ARB 0 x8126 # define GL_POINT_SIZE_MAX_ARB 0 x8127 # define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0 x8128 # define GL_POINT_DISTANCE_ATTENUATION_ARB 0 x8129 typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glPointParameterfARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPointParameterfARB(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterfvARB(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_point_sprite # define GL_ARB_point_sprite 1 # define GL_POINT_SPRITE_ARB 0 x8861 # define GL_COORD_REPLACE_ARB 0 x8862 # endif # ifndef GL_ARB_post_depth_coverage # define GL_ARB_post_depth_coverage 1 # endif # ifndef GL_ARB_program_interface_query # define GL_ARB_program_interface_query 1 # endif # ifndef GL_ARB_provoking_vertex # define GL_ARB_provoking_vertex 1 # endif # ifndef GL_ARB_query_buffer_object # define GL_ARB_query_buffer_object 1 # endif # ifndef GL_ARB_robust_buffer_access_behavior # define GL_ARB_robust_buffer_access_behavior 1 # endif # ifndef GL_ARB_robustness # define GL_ARB_robustness 1 # define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0 x00000004 # define GL_LOSE_CONTEXT_ON_RESET_ARB 0 x8252 # define GL_GUILTY_CONTEXT_RESET_ARB 0 x8253 # define GL_INNOCENT_CONTEXT_RESET_ARB 0 x8254 # define GL_UNKNOWN_CONTEXT_RESET_ARB 0 x8255 # define GL_RESET_NOTIFICATION_STRATEGY_ARB 0 x8256 # define GL_NO_RESET_NOTIFICATION_ARB 0 x8261 typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "glGetGraphicsResetStatusARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLenum APIENTRY)",
    "insertText": "glGetGraphicsResetStatusARB(void)"
  },
  {
    "label": "glGetnTexImageARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)"
  },
  {
    "label": "glReadnPixelsARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glGetnCompressedTexImageARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img)"
  },
  {
    "label": "glGetnUniformfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glGetnUniformdvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "glGetnMapdvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)"
  },
  {
    "label": "glGetnMapfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)"
  },
  {
    "label": "glGetnMapivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)"
  },
  {
    "label": "glGetnPixelMapfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)"
  },
  {
    "label": "glGetnPixelMapuivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)"
  },
  {
    "label": "glGetnPixelMapusvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)"
  },
  {
    "label": "glGetnPolygonStippleARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)"
  },
  {
    "label": "glGetnColorTableARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)"
  },
  {
    "label": "glGetnConvolutionFilterARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)"
  },
  {
    "label": "glGetnSeparableFilterARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)"
  },
  {
    "label": "glGetnHistogramARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "glGetnMinmaxARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_robustness_isolation # define GL_ARB_robustness_isolation 1 # endif # ifndef GL_ARB_sample_locations # define GL_ARB_sample_locations 1 # define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0 x933D # define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0 x933E # define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0 x933F # define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0 x9340 # define GL_SAMPLE_LOCATION_ARB 0 x8E50 # define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0 x9341 # define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0 x9342 # define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0 x9343 typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEVALUATEDEPTHVALUESARBPROC) (void)"
  },
  {
    "label": "glFramebufferSampleLocationsfvARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glNamedFramebufferSampleLocationsfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glEvaluateDepthValuesARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEvaluateDepthValuesARB(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_sample_shading # define GL_ARB_sample_shading 1 # define GL_SAMPLE_SHADING_ARB 0 x8C36 # define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0 x8C37 typedef)",
    "insertText": "void(APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value)"
  },
  {
    "label": "glMinSampleShadingARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMinSampleShadingARB(GLfloat value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_sampler_objects # define GL_ARB_sampler_objects 1 # endif # ifndef GL_ARB_seamless_cube_map # define GL_ARB_seamless_cube_map 1 # endif # ifndef GL_ARB_seamless_cubemap_per_texture # define GL_ARB_seamless_cubemap_per_texture 1 # endif # ifndef GL_ARB_separate_shader_objects # define GL_ARB_separate_shader_objects 1 # endif # ifndef GL_ARB_shader_atomic_counter_ops # define GL_ARB_shader_atomic_counter_ops 1 # endif # ifndef GL_ARB_shader_atomic_counters # define GL_ARB_shader_atomic_counters 1 # endif # ifndef GL_ARB_shader_ballot # define GL_ARB_shader_ballot 1 # endif # ifndef GL_ARB_shader_bit_encoding # define GL_ARB_shader_bit_encoding 1 # endif # ifndef GL_ARB_shader_clock # define GL_ARB_shader_clock 1 # endif # ifndef GL_ARB_shader_draw_parameters # define GL_ARB_shader_draw_parameters 1 # endif # ifndef GL_ARB_shader_group_vote # define GL_ARB_shader_group_vote 1 # endif # ifndef GL_ARB_shader_image_load_store # define GL_ARB_shader_image_load_store 1 # endif # ifndef GL_ARB_shader_image_size # define GL_ARB_shader_image_size 1 # endif # ifndef GL_ARB_shader_objects # define GL_ARB_shader_objects 1 # ifdef __APPLE__ typedef void* GLhandleARB ; # else typedef unsigned int GLhandleARB ; # endif typedef char GLcharARB ; # define GL_PROGRAM_OBJECT_ARB 0 x8B40 # define GL_SHADER_OBJECT_ARB 0 x8B48 # define GL_OBJECT_TYPE_ARB 0 x8B4E # define GL_OBJECT_SUBTYPE_ARB 0 x8B4F # define GL_FLOAT_VEC2_ARB 0 x8B50 # define GL_FLOAT_VEC3_ARB 0 x8B51 # define GL_FLOAT_VEC4_ARB 0 x8B52 # define GL_INT_VEC2_ARB 0 x8B53 # define GL_INT_VEC3_ARB 0 x8B54 # define GL_INT_VEC4_ARB 0 x8B55 # define GL_BOOL_ARB 0 x8B56 # define GL_BOOL_VEC2_ARB 0 x8B57 # define GL_BOOL_VEC3_ARB 0 x8B58 # define GL_BOOL_VEC4_ARB 0 x8B59 # define GL_FLOAT_MAT2_ARB 0 x8B5A # define GL_FLOAT_MAT3_ARB 0 x8B5B # define GL_FLOAT_MAT4_ARB 0 x8B5C # define GL_SAMPLER_1D_ARB 0 x8B5D # define GL_SAMPLER_2D_ARB 0 x8B5E # define GL_SAMPLER_3D_ARB 0 x8B5F # define GL_SAMPLER_CUBE_ARB 0 x8B60 # define GL_SAMPLER_1D_SHADOW_ARB 0 x8B61 # define GL_SAMPLER_2D_SHADOW_ARB 0 x8B62 # define GL_SAMPLER_2D_RECT_ARB 0 x8B63 # define GL_SAMPLER_2D_RECT_SHADOW_ARB 0 x8B64 # define GL_OBJECT_DELETE_STATUS_ARB 0 x8B80 # define GL_OBJECT_COMPILE_STATUS_ARB 0 x8B81 # define GL_OBJECT_LINK_STATUS_ARB 0 x8B82 # define GL_OBJECT_VALIDATE_STATUS_ARB 0 x8B83 # define GL_OBJECT_INFO_LOG_LENGTH_ARB 0 x8B84 # define GL_OBJECT_ATTACHED_OBJECTS_ARB 0 x8B85 # define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0 x8B86 # define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0 x8B87 # define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0 x8B88 typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj)"
  },
  {
    "label": "GLhandleARB()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLhandleARB(APIENTRYP PFNGLGETHANDLEARBPROC) (GLenum pname)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj)"
  },
  {
    "label": "GLhandleARB()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLhandleARB(APIENTRYP PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj)"
  },
  {
    "label": "GLhandleARB()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLhandleARB(APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)"
  },
  {
    "label": "glDeleteObjectARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDeleteObjectARB(GLhandleARB obj)"
  },
  {
    "label": "glGetHandleARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLhandleARB APIENTRY)",
    "insertText": "glGetHandleARB(GLenum pname)"
  },
  {
    "label": "glDetachObjectARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)"
  },
  {
    "label": "glCreateShaderObjectARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLhandleARB APIENTRY)",
    "insertText": "glCreateShaderObjectARB(GLenum shaderType)"
  },
  {
    "label": "glShaderSourceARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)"
  },
  {
    "label": "glCompileShaderARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompileShaderARB(GLhandleARB shaderObj)"
  },
  {
    "label": "glCreateProgramObjectARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLhandleARB APIENTRY)",
    "insertText": "glCreateProgramObjectARB(void)"
  },
  {
    "label": "glAttachObjectARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)"
  },
  {
    "label": "glLinkProgramARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLinkProgramARB(GLhandleARB programObj)"
  },
  {
    "label": "glUseProgramObjectARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUseProgramObjectARB(GLhandleARB programObj)"
  },
  {
    "label": "glValidateProgramARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glValidateProgramARB(GLhandleARB programObj)"
  },
  {
    "label": "glUniform1fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1fARB(GLint location, GLfloat v0)"
  },
  {
    "label": "glUniform2fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glUniform3fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glUniform4fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glUniform1iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1iARB(GLint location, GLint v0)"
  },
  {
    "label": "glUniform2iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2iARB(GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glUniform3iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glUniform4iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glUniform1fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform2fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform3fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform4fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform1ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1ivARB(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform2ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2ivARB(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform3ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3ivARB(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform4ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4ivARB(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniformMatrix2fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glGetObjectParameterfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetObjectParameterivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetInfoLogARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)"
  },
  {
    "label": "glGetAttachedObjectsARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)"
  },
  {
    "label": "glGetUniformLocationARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)"
  },
  {
    "label": "glGetActiveUniformARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)"
  },
  {
    "label": "glGetUniformfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)"
  },
  {
    "label": "glGetUniformivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)"
  },
  {
    "label": "glGetShaderSourceARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_shader_precision # define GL_ARB_shader_precision 1 # endif # ifndef GL_ARB_shader_stencil_export # define GL_ARB_shader_stencil_export 1 # endif # ifndef GL_ARB_shader_storage_buffer_object # define GL_ARB_shader_storage_buffer_object 1 # endif # ifndef GL_ARB_shader_subroutine # define GL_ARB_shader_subroutine 1 # endif # ifndef GL_ARB_shader_texture_image_samples # define GL_ARB_shader_texture_image_samples 1 # endif # ifndef GL_ARB_shader_texture_lod # define GL_ARB_shader_texture_lod 1 # endif # ifndef GL_ARB_shader_viewport_layer_array # define GL_ARB_shader_viewport_layer_array 1 # endif # ifndef GL_ARB_shading_language_100 # define GL_ARB_shading_language_100 1 # define GL_SHADING_LANGUAGE_VERSION_ARB 0 x8B8C # endif # ifndef GL_ARB_shading_language_420pack # define GL_ARB_shading_language_420pack 1 # endif # ifndef GL_ARB_shading_language_include # define GL_ARB_shading_language_include 1 # define GL_SHADER_INCLUDE_ARB 0 x8DAE # define GL_NAMED_STRING_LENGTH_ARB 0 x8DE9 # define GL_NAMED_STRING_TYPE_ARB 0 x8DEA typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params)"
  },
  {
    "label": "glNamedStringARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)"
  },
  {
    "label": "glDeleteNamedStringARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteNamedStringARB(GLint namelen, const GLchar *name)"
  },
  {
    "label": "glCompileShaderIncludeARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)"
  },
  {
    "label": "glIsNamedStringARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsNamedStringARB(GLint namelen, const GLchar *name)"
  },
  {
    "label": "glGetNamedStringARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)"
  },
  {
    "label": "glGetNamedStringivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_shading_language_packing # define GL_ARB_shading_language_packing 1 # endif # ifndef GL_ARB_shadow # define GL_ARB_shadow 1 # define GL_TEXTURE_COMPARE_MODE_ARB 0 x884C # define GL_TEXTURE_COMPARE_FUNC_ARB 0 x884D # define GL_COMPARE_R_TO_TEXTURE_ARB 0 x884E # endif # ifndef GL_ARB_shadow_ambient # define GL_ARB_shadow_ambient 1 # define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0 x80BF # endif # ifndef GL_ARB_sparse_buffer # define GL_ARB_sparse_buffer 1 # define GL_SPARSE_STORAGE_BIT_ARB 0 x0400 # define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0 x82F8 typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERPAGECOMMITMENTARBPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glBufferPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_sparse_texture # define GL_ARB_sparse_texture 1 # define GL_TEXTURE_SPARSE_ARB 0 x91A6 # define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0 x91A7 # define GL_NUM_SPARSE_LEVELS_ARB 0 x91AA # define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0 x91A8 # define GL_VIRTUAL_PAGE_SIZE_X_ARB 0 x9195 # define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0 x9196 # define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0 x9197 # define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0 x9198 # define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0 x9199 # define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0 x919A # define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0 x91A9 typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "glTexPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_sparse_texture2 # define GL_ARB_sparse_texture2 1 # endif # ifndef GL_ARB_sparse_texture_clamp # define GL_ARB_sparse_texture_clamp 1 # endif # ifndef GL_ARB_stencil_texturing # define GL_ARB_stencil_texturing 1 # endif # ifndef GL_ARB_sync # define GL_ARB_sync 1 # endif # ifndef GL_ARB_tessellation_shader # define GL_ARB_tessellation_shader 1 # endif # ifndef GL_ARB_texture_barrier # define GL_ARB_texture_barrier 1 # endif # ifndef GL_ARB_texture_border_clamp # define GL_ARB_texture_border_clamp 1 # define GL_CLAMP_TO_BORDER_ARB 0 x812D # endif # ifndef GL_ARB_texture_buffer_object # define GL_ARB_texture_buffer_object 1 # define GL_TEXTURE_BUFFER_ARB 0 x8C2A # define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0 x8C2B # define GL_TEXTURE_BINDING_BUFFER_ARB 0 x8C2C # define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0 x8C2D # define GL_TEXTURE_BUFFER_FORMAT_ARB 0 x8C2E typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTexBufferARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_texture_buffer_object_rgb32 # define GL_ARB_texture_buffer_object_rgb32 1 # endif # ifndef GL_ARB_texture_buffer_range # define GL_ARB_texture_buffer_range 1 # endif # ifndef GL_ARB_texture_compression # define GL_ARB_texture_compression 1 # define GL_COMPRESSED_ALPHA_ARB 0 x84E9 # define GL_COMPRESSED_LUMINANCE_ARB 0 x84EA # define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0 x84EB # define GL_COMPRESSED_INTENSITY_ARB 0 x84EC # define GL_COMPRESSED_RGB_ARB 0 x84ED # define GL_COMPRESSED_RGBA_ARB 0 x84EE # define GL_TEXTURE_COMPRESSION_HINT_ARB 0 x84EF # define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0 x86A0 # define GL_TEXTURE_COMPRESSED_ARB 0 x86A1 # define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0 x86A2 # define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0 x86A3 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, void *img)"
  },
  {
    "label": "glCompressedTexImage3DARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage2DARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage1DARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage3DARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage2DARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage1DARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glGetCompressedTexImageARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedTexImageARB(GLenum target, GLint level, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_texture_compression_bptc # define GL_ARB_texture_compression_bptc 1 # define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0 x8E8C # define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0 x8E8D # define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0 x8E8E # define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0 x8E8F # endif # ifndef GL_ARB_texture_compression_rgtc # define GL_ARB_texture_compression_rgtc 1 # endif # ifndef GL_ARB_texture_cube_map # define GL_ARB_texture_cube_map 1 # define GL_NORMAL_MAP_ARB 0 x8511 # define GL_REFLECTION_MAP_ARB 0 x8512 # define GL_TEXTURE_CUBE_MAP_ARB 0 x8513 # define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0 x8514 # define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0 x8515 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0 x8516 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0 x8517 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0 x8518 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0 x8519 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0 x851A # define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0 x851B # define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0 x851C # endif # ifndef GL_ARB_texture_cube_map_array # define GL_ARB_texture_cube_map_array 1 # define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0 x9009 # define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0 x900A # define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0 x900B # define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0 x900C # define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0 x900D # define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0 x900E # define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0 x900F # endif # ifndef GL_ARB_texture_env_add # define GL_ARB_texture_env_add 1 # endif # ifndef GL_ARB_texture_env_combine # define GL_ARB_texture_env_combine 1 # define GL_COMBINE_ARB 0 x8570 # define GL_COMBINE_RGB_ARB 0 x8571 # define GL_COMBINE_ALPHA_ARB 0 x8572 # define GL_SOURCE0_RGB_ARB 0 x8580 # define GL_SOURCE1_RGB_ARB 0 x8581 # define GL_SOURCE2_RGB_ARB 0 x8582 # define GL_SOURCE0_ALPHA_ARB 0 x8588 # define GL_SOURCE1_ALPHA_ARB 0 x8589 # define GL_SOURCE2_ALPHA_ARB 0 x858A # define GL_OPERAND0_RGB_ARB 0 x8590 # define GL_OPERAND1_RGB_ARB 0 x8591 # define GL_OPERAND2_RGB_ARB 0 x8592 # define GL_OPERAND0_ALPHA_ARB 0 x8598 # define GL_OPERAND1_ALPHA_ARB 0 x8599 # define GL_OPERAND2_ALPHA_ARB 0 x859A # define GL_RGB_SCALE_ARB 0 x8573 # define GL_ADD_SIGNED_ARB 0 x8574 # define GL_INTERPOLATE_ARB 0 x8575 # define GL_SUBTRACT_ARB 0 x84E7 # define GL_CONSTANT_ARB 0 x8576 # define GL_PRIMARY_COLOR_ARB 0 x8577 # define GL_PREVIOUS_ARB 0 x8578 # endif # ifndef GL_ARB_texture_env_crossbar # define GL_ARB_texture_env_crossbar 1 # endif # ifndef GL_ARB_texture_env_dot3 # define GL_ARB_texture_env_dot3 1 # define GL_DOT3_RGB_ARB 0 x86AE # define GL_DOT3_RGBA_ARB 0 x86AF # endif # ifndef GL_ARB_texture_filter_minmax # define GL_ARB_texture_filter_minmax 1 # define GL_TEXTURE_REDUCTION_MODE_ARB 0 x9366 # define GL_WEIGHTED_AVERAGE_ARB 0 x9367 # endif # ifndef GL_ARB_texture_float # define GL_ARB_texture_float 1 # define GL_TEXTURE_RED_TYPE_ARB 0 x8C10 # define GL_TEXTURE_GREEN_TYPE_ARB 0 x8C11 # define GL_TEXTURE_BLUE_TYPE_ARB 0 x8C12 # define GL_TEXTURE_ALPHA_TYPE_ARB 0 x8C13 # define GL_TEXTURE_LUMINANCE_TYPE_ARB 0 x8C14 # define GL_TEXTURE_INTENSITY_TYPE_ARB 0 x8C15 # define GL_TEXTURE_DEPTH_TYPE_ARB 0 x8C16 # define GL_UNSIGNED_NORMALIZED_ARB 0 x8C17 # define GL_RGBA32F_ARB 0 x8814 # define GL_RGB32F_ARB 0 x8815 # define GL_ALPHA32F_ARB 0 x8816 # define GL_INTENSITY32F_ARB 0 x8817 # define GL_LUMINANCE32F_ARB 0 x8818 # define GL_LUMINANCE_ALPHA32F_ARB 0 x8819 # define GL_RGBA16F_ARB 0 x881A # define GL_RGB16F_ARB 0 x881B # define GL_ALPHA16F_ARB 0 x881C # define GL_INTENSITY16F_ARB 0 x881D # define GL_LUMINANCE16F_ARB 0 x881E # define GL_LUMINANCE_ALPHA16F_ARB 0 x881F # endif # ifndef GL_ARB_texture_gather # define GL_ARB_texture_gather 1 # define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0 x8E5E # define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0 x8E5F # define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0 x8F9F # endif # ifndef GL_ARB_texture_mirror_clamp_to_edge # define GL_ARB_texture_mirror_clamp_to_edge 1 # endif # ifndef GL_ARB_texture_mirrored_repeat # define GL_ARB_texture_mirrored_repeat 1 # define GL_MIRRORED_REPEAT_ARB 0 x8370 # endif # ifndef GL_ARB_texture_multisample # define GL_ARB_texture_multisample 1 # endif # ifndef GL_ARB_texture_non_power_of_two # define GL_ARB_texture_non_power_of_two 1 # endif # ifndef GL_ARB_texture_query_levels # define GL_ARB_texture_query_levels 1 # endif # ifndef GL_ARB_texture_query_lod # define GL_ARB_texture_query_lod 1 # endif # ifndef GL_ARB_texture_rectangle # define GL_ARB_texture_rectangle 1 # define GL_TEXTURE_RECTANGLE_ARB 0 x84F5 # define GL_TEXTURE_BINDING_RECTANGLE_ARB 0 x84F6 # define GL_PROXY_TEXTURE_RECTANGLE_ARB 0 x84F7 # define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0 x84F8 # endif # ifndef GL_ARB_texture_rg # define GL_ARB_texture_rg 1 # endif # ifndef GL_ARB_texture_rgb10_a2ui # define GL_ARB_texture_rgb10_a2ui 1 # endif # ifndef GL_ARB_texture_stencil8 # define GL_ARB_texture_stencil8 1 # endif # ifndef GL_ARB_texture_storage # define GL_ARB_texture_storage 1 # endif # ifndef GL_ARB_texture_storage_multisample # define GL_ARB_texture_storage_multisample 1 # endif # ifndef GL_ARB_texture_swizzle # define GL_ARB_texture_swizzle 1 # endif # ifndef GL_ARB_texture_view # define GL_ARB_texture_view 1 # endif # ifndef GL_ARB_timer_query # define GL_ARB_timer_query 1 # endif # ifndef GL_ARB_transform_feedback2 # define GL_ARB_transform_feedback2 1 # endif # ifndef GL_ARB_transform_feedback3 # define GL_ARB_transform_feedback3 1 # endif # ifndef GL_ARB_transform_feedback_instanced # define GL_ARB_transform_feedback_instanced 1 # endif # ifndef GL_ARB_transform_feedback_overflow_query # define GL_ARB_transform_feedback_overflow_query 1 # define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0 x82EC # define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0 x82ED # endif # ifndef GL_ARB_transpose_matrix # define GL_ARB_transpose_matrix 1 # define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0 x84E3 # define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0 x84E4 # define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0 x84E5 # define GL_TRANSPOSE_COLOR_MATRIX_ARB 0 x84E6 typedef)",
    "insertText": "void(APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m)"
  },
  {
    "label": "glLoadTransposeMatrixfARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glLoadTransposeMatrixfARB(const GLfloat *m)"
  },
  {
    "label": "glLoadTransposeMatrixdARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLoadTransposeMatrixdARB(const GLdouble *m)"
  },
  {
    "label": "glMultTransposeMatrixfARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultTransposeMatrixfARB(const GLfloat *m)"
  },
  {
    "label": "glMultTransposeMatrixdARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultTransposeMatrixdARB(const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_uniform_buffer_object # define GL_ARB_uniform_buffer_object 1 # endif # ifndef GL_ARB_vertex_array_bgra # define GL_ARB_vertex_array_bgra 1 # endif # ifndef GL_ARB_vertex_array_object # define GL_ARB_vertex_array_object 1 # endif # ifndef GL_ARB_vertex_attrib_64bit # define GL_ARB_vertex_attrib_64bit 1 # endif # ifndef GL_ARB_vertex_attrib_binding # define GL_ARB_vertex_attrib_binding 1 # endif # ifndef GL_ARB_vertex_blend # define GL_ARB_vertex_blend 1 # define GL_MAX_VERTEX_UNITS_ARB 0 x86A4 # define GL_ACTIVE_VERTEX_UNITS_ARB 0 x86A5 # define GL_WEIGHT_SUM_UNITY_ARB 0 x86A6 # define GL_VERTEX_BLEND_ARB 0 x86A7 # define GL_CURRENT_WEIGHT_ARB 0 x86A8 # define GL_WEIGHT_ARRAY_TYPE_ARB 0 x86A9 # define GL_WEIGHT_ARRAY_STRIDE_ARB 0 x86AA # define GL_WEIGHT_ARRAY_SIZE_ARB 0 x86AB # define GL_WEIGHT_ARRAY_POINTER_ARB 0 x86AC # define GL_WEIGHT_ARRAY_ARB 0 x86AD # define GL_MODELVIEW0_ARB 0 x1700 # define GL_MODELVIEW1_ARB 0 x850A # define GL_MODELVIEW2_ARB 0 x8722 # define GL_MODELVIEW3_ARB 0 x8723 # define GL_MODELVIEW4_ARB 0 x8724 # define GL_MODELVIEW5_ARB 0 x8725 # define GL_MODELVIEW6_ARB 0 x8726 # define GL_MODELVIEW7_ARB 0 x8727 # define GL_MODELVIEW8_ARB 0 x8728 # define GL_MODELVIEW9_ARB 0 x8729 # define GL_MODELVIEW10_ARB 0 x872A # define GL_MODELVIEW11_ARB 0 x872B # define GL_MODELVIEW12_ARB 0 x872C # define GL_MODELVIEW13_ARB 0 x872D # define GL_MODELVIEW14_ARB 0 x872E # define GL_MODELVIEW15_ARB 0 x872F # define GL_MODELVIEW16_ARB 0 x8730 # define GL_MODELVIEW17_ARB 0 x8731 # define GL_MODELVIEW18_ARB 0 x8732 # define GL_MODELVIEW19_ARB 0 x8733 # define GL_MODELVIEW20_ARB 0 x8734 # define GL_MODELVIEW21_ARB 0 x8735 # define GL_MODELVIEW22_ARB 0 x8736 # define GL_MODELVIEW23_ARB 0 x8737 # define GL_MODELVIEW24_ARB 0 x8738 # define GL_MODELVIEW25_ARB 0 x8739 # define GL_MODELVIEW26_ARB 0 x873A # define GL_MODELVIEW27_ARB 0 x873B # define GL_MODELVIEW28_ARB 0 x873C # define GL_MODELVIEW29_ARB 0 x873D # define GL_MODELVIEW30_ARB 0 x873E # define GL_MODELVIEW31_ARB 0 x873F typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXBLENDARBPROC) (GLint count)"
  },
  {
    "label": "glWeightbvARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glWeightbvARB(GLint size, const GLbyte *weights)"
  },
  {
    "label": "glWeightsvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightsvARB(GLint size, const GLshort *weights)"
  },
  {
    "label": "glWeightivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightivARB(GLint size, const GLint *weights)"
  },
  {
    "label": "glWeightfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightfvARB(GLint size, const GLfloat *weights)"
  },
  {
    "label": "glWeightdvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightdvARB(GLint size, const GLdouble *weights)"
  },
  {
    "label": "glWeightubvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightubvARB(GLint size, const GLubyte *weights)"
  },
  {
    "label": "glWeightusvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightusvARB(GLint size, const GLushort *weights)"
  },
  {
    "label": "glWeightuivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightuivARB(GLint size, const GLuint *weights)"
  },
  {
    "label": "glWeightPointerARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glVertexBlendARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexBlendARB(GLint count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_vertex_buffer_object # define GL_ARB_vertex_buffer_object 1 typedef ptrdiff_t GLsizeiptrARB ; typedef ptrdiff_t GLintptrARB ; # define GL_BUFFER_SIZE_ARB 0 x8764 # define GL_BUFFER_USAGE_ARB 0 x8765 # define GL_ARRAY_BUFFER_ARB 0 x8892 # define GL_ELEMENT_ARRAY_BUFFER_ARB 0 x8893 # define GL_ARRAY_BUFFER_BINDING_ARB 0 x8894 # define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0 x8895 # define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0 x8896 # define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0 x8897 # define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0 x8898 # define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0 x8899 # define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0 x889A # define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0 x889B # define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0 x889C # define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0 x889D # define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0 x889E # define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0 x889F # define GL_READ_ONLY_ARB 0 x88B8 # define GL_WRITE_ONLY_ARB 0 x88B9 # define GL_READ_WRITE_ARB 0 x88BA # define GL_BUFFER_ACCESS_ARB 0 x88BB # define GL_BUFFER_MAPPED_ARB 0 x88BC # define GL_BUFFER_MAP_POINTER_ARB 0 x88BD # define GL_STREAM_DRAW_ARB 0 x88E0 # define GL_STREAM_READ_ARB 0 x88E1 # define GL_STREAM_COPY_ARB 0 x88E2 # define GL_STATIC_DRAW_ARB 0 x88E4 # define GL_STATIC_READ_ARB 0 x88E5 # define GL_STATIC_COPY_ARB 0 x88E6 # define GL_DYNAMIC_DRAW_ARB 0 x88E8 # define GL_DYNAMIC_READ_ARB 0 x88E9 # define GL_DYNAMIC_COPY_ARB 0 x88EA typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLUNMAPBUFFERARBPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glBindBufferARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBindBufferARB(GLenum target, GLuint buffer)"
  },
  {
    "label": "glDeleteBuffersARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteBuffersARB(GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "glGenBuffersARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenBuffersARB(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glIsBufferARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsBufferARB(GLuint buffer)"
  },
  {
    "label": "glBufferDataARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBufferDataARB(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage)"
  },
  {
    "label": "glBufferSubDataARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data)"
  },
  {
    "label": "glGetBufferSubDataARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data)"
  },
  {
    "label": "glMapBufferARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapBufferARB(GLenum target, GLenum access)"
  },
  {
    "label": "glUnmapBufferARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glUnmapBufferARB(GLenum target)"
  },
  {
    "label": "glGetBufferParameterivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetBufferPointervARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferPointervARB(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_vertex_program # define GL_ARB_vertex_program 1 # define GL_COLOR_SUM_ARB 0 x8458 # define GL_VERTEX_PROGRAM_ARB 0 x8620 # define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0 x8622 # define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0 x8623 # define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0 x8624 # define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0 x8625 # define GL_CURRENT_VERTEX_ATTRIB_ARB 0 x8626 # define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0 x8642 # define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0 x8643 # define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0 x8645 # define GL_MAX_VERTEX_ATTRIBS_ARB 0 x8869 # define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0 x886A # define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0 x88B0 # define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0 x88B1 # define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0 x88B2 # define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0 x88B3 typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glVertexAttrib1dARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1dARB(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttrib1dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1dvARB(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib1fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1fARB(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1fvARB(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib1sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1sARB(GLuint index, GLshort x)"
  },
  {
    "label": "glVertexAttrib1svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1svARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib2dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttrib2dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2dvARB(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib2fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2fvARB(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexAttrib2svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2svARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib3dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttrib3dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3dvARB(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib3fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3fvARB(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexAttrib3svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3svARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4NbvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4NivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4NivARB(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4NsvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4NsvARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4NubARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "glVertexAttrib4NubvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4NuivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4NuivARB(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4NusvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4NusvARB(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttrib4bvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4bvARB(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttrib4dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4dvARB(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib4fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4fvARB(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4ivARB(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexAttrib4svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4svARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4ubvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4uivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4uivARB(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4usvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4usvARB(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttribPointerARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glEnableVertexAttribArrayARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableVertexAttribArrayARB(GLuint index)"
  },
  {
    "label": "glDisableVertexAttribArrayARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVertexAttribArrayARB(GLuint index)"
  },
  {
    "label": "glGetVertexAttribdvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetVertexAttribfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointervARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribPointervARB(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_vertex_shader # define GL_ARB_vertex_shader 1 # define GL_VERTEX_SHADER_ARB 0 x8B31 # define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0 x8B4A # define GL_MAX_VARYING_FLOATS_ARB 0 x8B4B # define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0 x8B4C # define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0 x8B4D # define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0 x8B89 # define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0 x8B8A typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name)"
  },
  {
    "label": "glBindAttribLocationARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)"
  },
  {
    "label": "glGetActiveAttribARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)"
  },
  {
    "label": "glGetAttribLocationARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_vertex_type_10f_11f_11f_rev # define GL_ARB_vertex_type_10f_11f_11f_rev 1 # endif # ifndef GL_ARB_vertex_type_2_10_10_10_rev # define GL_ARB_vertex_type_2_10_10_10_rev 1 # endif # ifndef GL_ARB_viewport_array # define GL_ARB_viewport_array 1 # endif # ifndef GL_ARB_window_pos # define GL_ARB_window_pos 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2IVARBPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3IVARBPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v)"
  },
  {
    "label": "glWindowPos2dARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glWindowPos2dARB(GLdouble x, GLdouble y)"
  },
  {
    "label": "glWindowPos2dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2dvARB(const GLdouble *v)"
  },
  {
    "label": "glWindowPos2fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2fARB(GLfloat x, GLfloat y)"
  },
  {
    "label": "glWindowPos2fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2fvARB(const GLfloat *v)"
  },
  {
    "label": "glWindowPos2iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2iARB(GLint x, GLint y)"
  },
  {
    "label": "glWindowPos2ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2ivARB(const GLint *v)"
  },
  {
    "label": "glWindowPos2sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2sARB(GLshort x, GLshort y)"
  },
  {
    "label": "glWindowPos2svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2svARB(const GLshort *v)"
  },
  {
    "label": "glWindowPos3dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glWindowPos3dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3dvARB(const GLdouble *v)"
  },
  {
    "label": "glWindowPos3fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glWindowPos3fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3fvARB(const GLfloat *v)"
  },
  {
    "label": "glWindowPos3iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3iARB(GLint x, GLint y, GLint z)"
  },
  {
    "label": "glWindowPos3ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3ivARB(const GLint *v)"
  },
  {
    "label": "glWindowPos3sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3sARB(GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glWindowPos3svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3svARB(const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_KHR_blend_equation_advanced # define GL_KHR_blend_equation_advanced 1 # define GL_MULTIPLY_KHR 0 x9294 # define GL_SCREEN_KHR 0 x9295 # define GL_OVERLAY_KHR 0 x9296 # define GL_DARKEN_KHR 0 x9297 # define GL_LIGHTEN_KHR 0 x9298 # define GL_COLORDODGE_KHR 0 x9299 # define GL_COLORBURN_KHR 0 x929A # define GL_HARDLIGHT_KHR 0 x929B # define GL_SOFTLIGHT_KHR 0 x929C # define GL_DIFFERENCE_KHR 0 x929E # define GL_EXCLUSION_KHR 0 x92A0 # define GL_HSL_HUE_KHR 0 x92AD # define GL_HSL_SATURATION_KHR 0 x92AE # define GL_HSL_COLOR_KHR 0 x92AF # define GL_HSL_LUMINOSITY_KHR 0 x92B0 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDBARRIERKHRPROC) (void)"
  },
  {
    "label": "glBlendBarrierKHR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendBarrierKHR(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_KHR_blend_equation_advanced_coherent # define GL_KHR_blend_equation_advanced_coherent 1 # define GL_BLEND_ADVANCED_COHERENT_KHR 0 x9285 # endif # ifndef GL_KHR_context_flush_control # define GL_KHR_context_flush_control 1 # endif # ifndef GL_KHR_debug # define GL_KHR_debug 1 # endif # ifndef GL_KHR_no_error # define GL_KHR_no_error 1 # define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0 x00000008 # endif # ifndef GL_KHR_robust_buffer_access_behavior # define GL_KHR_robust_buffer_access_behavior 1 # endif # ifndef GL_KHR_robustness # define GL_KHR_robustness 1 # define GL_CONTEXT_ROBUST_ACCESS 0 x90F3 # endif # ifndef GL_KHR_texture_compression_astc_hdr # define GL_KHR_texture_compression_astc_hdr 1 # define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0 x93B0 # define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0 x93B1 # define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0 x93B2 # define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0 x93B3 # define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0 x93B4 # define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0 x93B5 # define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0 x93B6 # define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0 x93B7 # define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0 x93B8 # define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0 x93B9 # define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0 x93BA # define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0 x93BB # define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0 x93BC # define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0 x93BD # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0 x93D0 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0 x93D1 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0 x93D2 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0 x93D3 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0 x93D4 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0 x93D5 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0 x93D6 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0 x93D7 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0 x93D8 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0 x93D9 # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0 x93DA # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0 x93DB # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0 x93DC # define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0 x93DD # endif # ifndef GL_KHR_texture_compression_astc_ldr # define GL_KHR_texture_compression_astc_ldr 1 # endif # ifndef GL_KHR_texture_compression_astc_sliced_3d # define GL_KHR_texture_compression_astc_sliced_3d 1 # endif # ifndef GL_OES_byte_coordinates # define GL_OES_byte_coordinates 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1BOESPROC) (GLenum texture, GLbyte s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1BVOESPROC) (GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2BOESPROC) (GLenum texture, GLbyte s, GLbyte t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2BVOESPROC) (GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3BVOESPROC) (GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4BVOESPROC) (GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD1BOESPROC) (GLbyte s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD1BVOESPROC) (const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2BOESPROC) (GLbyte s, GLbyte t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2BVOESPROC) (const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD3BOESPROC) (GLbyte s, GLbyte t, GLbyte r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD3BVOESPROC) (const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4BOESPROC) (GLbyte s, GLbyte t, GLbyte r, GLbyte q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4BVOESPROC) (const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX2BOESPROC) (GLbyte x, GLbyte y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX2BVOESPROC) (const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX3BOESPROC) (GLbyte x, GLbyte y, GLbyte z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX3BVOESPROC) (const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX4BOESPROC) (GLbyte x, GLbyte y, GLbyte z, GLbyte w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX4BVOESPROC) (const GLbyte *coords)"
  },
  {
    "label": "glMultiTexCoord1bOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1bOES(GLenum texture, GLbyte s)"
  },
  {
    "label": "glMultiTexCoord1bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1bvOES(GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "glMultiTexCoord2bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)"
  },
  {
    "label": "glMultiTexCoord2bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2bvOES(GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "glMultiTexCoord3bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r)"
  },
  {
    "label": "glMultiTexCoord3bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3bvOES(GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "glMultiTexCoord4bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)"
  },
  {
    "label": "glMultiTexCoord4bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4bvOES(GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "glTexCoord1bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord1bOES(GLbyte s)"
  },
  {
    "label": "glTexCoord1bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord1bvOES(const GLbyte *coords)"
  },
  {
    "label": "glTexCoord2bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2bOES(GLbyte s, GLbyte t)"
  },
  {
    "label": "glTexCoord2bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2bvOES(const GLbyte *coords)"
  },
  {
    "label": "glTexCoord3bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r)"
  },
  {
    "label": "glTexCoord3bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord3bvOES(const GLbyte *coords)"
  },
  {
    "label": "glTexCoord4bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q)"
  },
  {
    "label": "glTexCoord4bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4bvOES(const GLbyte *coords)"
  },
  {
    "label": "glVertex2bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex2bOES(GLbyte x, GLbyte y)"
  },
  {
    "label": "glVertex2bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex2bvOES(const GLbyte *coords)"
  },
  {
    "label": "glVertex3bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex3bOES(GLbyte x, GLbyte y, GLbyte z)"
  },
  {
    "label": "glVertex3bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex3bvOES(const GLbyte *coords)"
  },
  {
    "label": "glVertex4bOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w)"
  },
  {
    "label": "glVertex4bvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex4bvOES(const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_compressed_paletted_texture # define GL_OES_compressed_paletted_texture 1 # define GL_PALETTE4_RGB8_OES 0 x8B90 # define GL_PALETTE4_RGBA8_OES 0 x8B91 # define GL_PALETTE4_R5_G6_B5_OES 0 x8B92 # define GL_PALETTE4_RGBA4_OES 0 x8B93 # define GL_PALETTE4_RGB5_A1_OES 0 x8B94 # define GL_PALETTE8_RGB8_OES 0 x8B95 # define GL_PALETTE8_RGBA8_OES 0 x8B96 # define GL_PALETTE8_R5_G6_B5_OES 0 x8B97 # define GL_PALETTE8_RGBA4_OES 0 x8B98 # define GL_PALETTE8_RGB5_A1_OES 0 x8B99 # endif # ifndef GL_OES_fixed_point # define GL_OES_fixed_point 1 typedef GLint GLfixed ; # define GL_FIXED_OES 0 x140C typedef)",
    "insertText": "void(APIENTRYP PFNGLALPHAFUNCXOESPROC) (GLenum func, GLfixed ref)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARDEPTHXOESPROC) (GLfixed depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIPPLANEXOESPROC) (GLenum plane, const GLfixed *equation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4XOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEXOESPROC) (GLfixed n, GLfixed f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGXOESPROC) (GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGXVOESPROC) (GLenum pname, const GLfixed *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRUSTUMXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCLIPPLANEXOESPROC) (GLenum plane, GLfixed *equation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFIXEDVOESPROC) (GLenum pname, GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXENVXVOESPROC) (GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLIGHTMODELXOESPROC) (GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLIGHTMODELXVOESPROC) (GLenum pname, const GLfixed *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLIGHTXVOESPROC) (GLenum light, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLINEWIDTHXOESPROC) (GLfixed width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLOADMATRIXXOESPROC) (const GLfixed *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATERIALXVOESPROC) (GLenum face, GLenum pname, const GLfixed *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTMATRIXXOESPROC) (const GLfixed *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMAL3XOESPROC) (GLfixed nx, GLfixed ny, GLfixed nz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLORTHOXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERXVOESPROC) (GLenum pname, const GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTSIZEXOESPROC) (GLfixed size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOLYGONOFFSETXOESPROC) (GLfixed factor, GLfixed units)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLROTATEXOESPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSCALEXOESPROC) (GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXENVXOESPROC) (GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXENVXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSLATEXOESPROC) (GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLACCUMXOESPROC) (GLenum op, GLfixed value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBITMAPXOESPROC) (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARACCUMXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR3XOESPROC) (GLfixed red, GLfixed green, GLfixed blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR3XVOESPROC) (const GLfixed *components)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4XVOESPROC) (const GLfixed *components)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEVALCOORD1XOESPROC) (GLfixed u)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEVALCOORD1XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEVALCOORD2XOESPROC) (GLfixed u, GLfixed v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEVALCOORD2XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFEEDBACKBUFFERXOESPROC) (GLsizei n, GLenum type, const GLfixed *buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETHISTOGRAMPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMAPXVOESPROC) (GLenum target, GLenum query, GLfixed *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPIXELMAPXVPROC) (GLenum map, GLint size, GLfixed *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXGENXVOESPROC) (GLenum coord, GLenum pname, GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXLEVELPARAMETERXVOESPROC) (GLenum target, GLint level, GLenum pname, GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINDEXXOESPROC) (GLfixed component)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINDEXXVOESPROC) (const GLfixed *component)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLOADTRANSPOSEMATRIXXOESPROC) (const GLfixed *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAP1XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAP2XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPGRID1XOESPROC) (GLint n, GLfixed u1, GLfixed u2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPGRID2XOESPROC) (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTTRANSPOSEMATRIXXOESPROC) (const GLfixed *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1XOESPROC) (GLenum texture, GLfixed s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1XVOESPROC) (GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2XOESPROC) (GLenum texture, GLfixed s, GLfixed t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2XVOESPROC) (GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3XVOESPROC) (GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4XVOESPROC) (GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMAL3XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPASSTHROUGHXOESPROC) (GLfixed token)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELMAPXPROC) (GLenum map, GLint size, const GLfixed *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELSTOREXPROC) (GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTRANSFERXOESPROC) (GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELZOOMXOESPROC) (GLfixed xfactor, GLfixed yfactor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPRIORITIZETEXTURESXOESPROC) (GLsizei n, const GLuint *textures, const GLfixed *priorities)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRASTERPOS2XOESPROC) (GLfixed x, GLfixed y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRASTERPOS2XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRASTERPOS3XOESPROC) (GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRASTERPOS3XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRASTERPOS4XOESPROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRASTERPOS4XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRECTXOESPROC) (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRECTXVOESPROC) (const GLfixed *v1, const GLfixed *v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD1XOESPROC) (GLfixed s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD1XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2XOESPROC) (GLfixed s, GLfixed t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD3XOESPROC) (GLfixed s, GLfixed t, GLfixed r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD3XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4XOESPROC) (GLfixed s, GLfixed t, GLfixed r, GLfixed q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXGENXOESPROC) (GLenum coord, GLenum pname, GLfixed param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXGENXVOESPROC) (GLenum coord, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX2XOESPROC) (GLfixed x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX2XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX3XOESPROC) (GLfixed x, GLfixed y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX3XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX4XOESPROC) (GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX4XVOESPROC) (const GLfixed *coords)"
  },
  {
    "label": "glAlphaFuncxOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glAlphaFuncxOES(GLenum func, GLfixed ref)"
  },
  {
    "label": "glClearColorxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "glClearDepthxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearDepthxOES(GLfixed depth)"
  },
  {
    "label": "glClipPlanexOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClipPlanexOES(GLenum plane, const GLfixed *equation)"
  },
  {
    "label": "glColor4xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "glDepthRangexOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRangexOES(GLfixed n, GLfixed f)"
  },
  {
    "label": "glFogxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogxOES(GLenum pname, GLfixed param)"
  },
  {
    "label": "glFogxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogxvOES(GLenum pname, const GLfixed *param)"
  },
  {
    "label": "glFrustumxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)"
  },
  {
    "label": "glGetClipPlanexOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetClipPlanexOES(GLenum plane, GLfixed *equation)"
  },
  {
    "label": "glGetFixedvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFixedvOES(GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetTexEnvxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetTexParameterxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glLightModelxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLightModelxOES(GLenum pname, GLfixed param)"
  },
  {
    "label": "glLightModelxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLightModelxvOES(GLenum pname, const GLfixed *param)"
  },
  {
    "label": "glLightxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLightxOES(GLenum light, GLenum pname, GLfixed param)"
  },
  {
    "label": "glLightxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLightxvOES(GLenum light, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glLineWidthxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLineWidthxOES(GLfixed width)"
  },
  {
    "label": "glLoadMatrixxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLoadMatrixxOES(const GLfixed *m)"
  },
  {
    "label": "glMaterialxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMaterialxOES(GLenum face, GLenum pname, GLfixed param)"
  },
  {
    "label": "glMaterialxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMaterialxvOES(GLenum face, GLenum pname, const GLfixed *param)"
  },
  {
    "label": "glMultMatrixxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultMatrixxOES(const GLfixed *m)"
  },
  {
    "label": "glMultiTexCoord4xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)"
  },
  {
    "label": "glNormal3xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz)"
  },
  {
    "label": "glOrthoxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)"
  },
  {
    "label": "glPointParameterxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterxvOES(GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glPointSizexOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointSizexOES(GLfixed size)"
  },
  {
    "label": "glPolygonOffsetxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPolygonOffsetxOES(GLfixed factor, GLfixed units)"
  },
  {
    "label": "glRotatexOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glScalexOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glScalexOES(GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glTexEnvxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexEnvxOES(GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "glTexEnvxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glTexParameterxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterxOES(GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "glTexParameterxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glTranslatexOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTranslatexOES(GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glAccumxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glAccumxOES(GLenum op, GLfixed value)"
  },
  {
    "label": "glBitmapxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap)"
  },
  {
    "label": "glBlendColorxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "glClearAccumxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "glColor3xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor3xOES(GLfixed red, GLfixed green, GLfixed blue)"
  },
  {
    "label": "glColor3xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor3xvOES(const GLfixed *components)"
  },
  {
    "label": "glColor4xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4xvOES(const GLfixed *components)"
  },
  {
    "label": "glConvolutionParameterxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "glConvolutionParameterxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glEvalCoord1xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEvalCoord1xOES(GLfixed u)"
  },
  {
    "label": "glEvalCoord1xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEvalCoord1xvOES(const GLfixed *coords)"
  },
  {
    "label": "glEvalCoord2xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEvalCoord2xOES(GLfixed u, GLfixed v)"
  },
  {
    "label": "glEvalCoord2xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEvalCoord2xvOES(const GLfixed *coords)"
  },
  {
    "label": "glFeedbackBufferxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed *buffer)"
  },
  {
    "label": "glGetConvolutionParameterxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetHistogramParameterxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetLightxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetLightxOES(GLenum light, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetMapxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMapxvOES(GLenum target, GLenum query, GLfixed *v)"
  },
  {
    "label": "glGetMaterialxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param)"
  },
  {
    "label": "glGetPixelMapxv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPixelMapxv(GLenum map, GLint size, GLfixed *values)"
  },
  {
    "label": "glGetTexGenxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetTexLevelParameterxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glIndexxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glIndexxOES(GLfixed component)"
  },
  {
    "label": "glIndexxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glIndexxvOES(const GLfixed *component)"
  },
  {
    "label": "glLoadTransposeMatrixxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLoadTransposeMatrixxOES(const GLfixed *m)"
  },
  {
    "label": "glMap1xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)"
  },
  {
    "label": "glMap2xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)"
  },
  {
    "label": "glMapGrid1xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2)"
  },
  {
    "label": "glMapGrid2xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)"
  },
  {
    "label": "glMultTransposeMatrixxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultTransposeMatrixxOES(const GLfixed *m)"
  },
  {
    "label": "glMultiTexCoord1xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1xOES(GLenum texture, GLfixed s)"
  },
  {
    "label": "glMultiTexCoord1xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1xvOES(GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "glMultiTexCoord2xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t)"
  },
  {
    "label": "glMultiTexCoord2xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2xvOES(GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "glMultiTexCoord3xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r)"
  },
  {
    "label": "glMultiTexCoord3xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3xvOES(GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "glMultiTexCoord4xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4xvOES(GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "glNormal3xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormal3xvOES(const GLfixed *coords)"
  },
  {
    "label": "glPassThroughxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPassThroughxOES(GLfixed token)"
  },
  {
    "label": "glPixelMapx()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelMapx(GLenum map, GLint size, const GLfixed *values)"
  },
  {
    "label": "glPixelStorex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelStorex(GLenum pname, GLfixed param)"
  },
  {
    "label": "glPixelTransferxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelTransferxOES(GLenum pname, GLfixed param)"
  },
  {
    "label": "glPixelZoomxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor)"
  },
  {
    "label": "glPrioritizeTexturesxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPrioritizeTexturesxOES(GLsizei n, const GLuint *textures, const GLfixed *priorities)"
  },
  {
    "label": "glRasterPos2xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRasterPos2xOES(GLfixed x, GLfixed y)"
  },
  {
    "label": "glRasterPos2xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRasterPos2xvOES(const GLfixed *coords)"
  },
  {
    "label": "glRasterPos3xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glRasterPos3xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRasterPos3xvOES(const GLfixed *coords)"
  },
  {
    "label": "glRasterPos4xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w)"
  },
  {
    "label": "glRasterPos4xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRasterPos4xvOES(const GLfixed *coords)"
  },
  {
    "label": "glRectxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)"
  },
  {
    "label": "glRectxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRectxvOES(const GLfixed *v1, const GLfixed *v2)"
  },
  {
    "label": "glTexCoord1xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord1xOES(GLfixed s)"
  },
  {
    "label": "glTexCoord1xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord1xvOES(const GLfixed *coords)"
  },
  {
    "label": "glTexCoord2xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2xOES(GLfixed s, GLfixed t)"
  },
  {
    "label": "glTexCoord2xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2xvOES(const GLfixed *coords)"
  },
  {
    "label": "glTexCoord3xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r)"
  },
  {
    "label": "glTexCoord3xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord3xvOES(const GLfixed *coords)"
  },
  {
    "label": "glTexCoord4xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q)"
  },
  {
    "label": "glTexCoord4xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4xvOES(const GLfixed *coords)"
  },
  {
    "label": "glTexGenxOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)"
  },
  {
    "label": "glTexGenxvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glVertex2xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex2xOES(GLfixed x)"
  },
  {
    "label": "glVertex2xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex2xvOES(const GLfixed *coords)"
  },
  {
    "label": "glVertex3xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex3xOES(GLfixed x, GLfixed y)"
  },
  {
    "label": "glVertex3xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex3xvOES(const GLfixed *coords)"
  },
  {
    "label": "glVertex4xOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex4xOES(GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glVertex4xvOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex4xvOES(const GLfixed *coords)"
  },
  {
    "label": "GLbitfield()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_query_matrix # define GL_OES_query_matrix 1 typedef)",
    "insertText": "GLbitfield(APIENTRYP PFNGLQUERYMATRIXXOESPROC) (GLfixed *mantissa, GLint *exponent)"
  },
  {
    "label": "glQueryMatrixxOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLbitfield APIENTRY)",
    "insertText": "glQueryMatrixxOES(GLfixed *mantissa, GLint *exponent)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OES_read_format # define GL_OES_read_format 1 # define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0 x8B9A # define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0 x8B9B # endif # ifndef GL_OES_single_precision # define GL_OES_single_precision 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARDEPTHFOESPROC) (GLclampf depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat *equation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat *equation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)"
  },
  {
    "label": "glClearDepthfOES()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glClearDepthfOES(GLclampf depth)"
  },
  {
    "label": "glClipPlanefOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClipPlanefOES(GLenum plane, const GLfloat *equation)"
  },
  {
    "label": "glDepthRangefOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRangefOES(GLclampf n, GLclampf f)"
  },
  {
    "label": "glFrustumfOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)"
  },
  {
    "label": "glGetClipPlanefOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetClipPlanefOES(GLenum plane, GLfloat *equation)"
  },
  {
    "label": "glOrthofOES()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_3DFX_multisample # define GL_3DFX_multisample 1 # define GL_MULTISAMPLE_3DFX 0 x86B2 # define GL_SAMPLE_BUFFERS_3DFX 0 x86B3 # define GL_SAMPLES_3DFX 0 x86B4 # define GL_MULTISAMPLE_BIT_3DFX 0 x20000000 # endif # ifndef GL_3DFX_tbuffer # define GL_3DFX_tbuffer 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLTBUFFERMASK3DFXPROC) (GLuint mask)"
  },
  {
    "label": "glTbufferMask3DFX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTbufferMask3DFX(GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_3DFX_texture_compression_FXT1 # define GL_3DFX_texture_compression_FXT1 1 # define GL_COMPRESSED_RGB_FXT1_3DFX 0 x86B0 # define GL_COMPRESSED_RGBA_FXT1_3DFX 0 x86B1 # endif # ifndef GL_AMD_blend_minmax_factor # define GL_AMD_blend_minmax_factor 1 # define GL_FACTOR_MIN_AMD 0 x901C # define GL_FACTOR_MAX_AMD 0 x901D # endif # ifndef GL_AMD_conservative_depth # define GL_AMD_conservative_depth 1 # endif # ifndef GL_AMD_debug_output # define GL_AMD_debug_output 1 typedef)",
    "insertText": "void(APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0 x9143 # define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0 x9144 # define GL_DEBUG_LOGGED_MESSAGES_AMD 0 x9145 # define GL_DEBUG_SEVERITY_HIGH_AMD 0 x9146 # define GL_DEBUG_SEVERITY_MEDIUM_AMD 0 x9147 # define GL_DEBUG_SEVERITY_LOW_AMD 0 x9148 # define GL_DEBUG_CATEGORY_API_ERROR_AMD 0 x9149 # define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0 x914A # define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0 x914B # define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0 x914C # define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0 x914D # define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0 x914E # define GL_DEBUG_CATEGORY_APPLICATION_AMD 0 x914F # define GL_DEBUG_CATEGORY_OTHER_AMD 0 x9150 typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)"
  },
  {
    "label": "glDebugMessageEnableAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsertAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallbackAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void *userParam)"
  },
  {
    "label": "glGetDebugMessageLogAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_depth_clamp_separate # define GL_AMD_depth_clamp_separate 1 # define GL_DEPTH_CLAMP_NEAR_AMD 0 x901E # define GL_DEPTH_CLAMP_FAR_AMD 0 x901F # endif # ifndef GL_AMD_draw_buffers_blend # define GL_AMD_draw_buffers_blend 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFuncIndexedAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparateIndexedAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glBlendEquationIndexedAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquationIndexedAMD(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparateIndexedAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_gcn_shader # define GL_AMD_gcn_shader 1 # endif # ifndef GL_AMD_gpu_shader_half_float # define GL_AMD_gpu_shader_half_float 1 # define GL_FLOAT16_NV 0 x8FF8 # define GL_FLOAT16_VEC2_NV 0 x8FF9 # define GL_FLOAT16_VEC3_NV 0 x8FFA # define GL_FLOAT16_VEC4_NV 0 x8FFB # define GL_FLOAT16_MAT2_AMD 0 x91C5 # define GL_FLOAT16_MAT3_AMD 0 x91C6 # define GL_FLOAT16_MAT4_AMD 0 x91C7 # define GL_FLOAT16_MAT2x3_AMD 0 x91C8 # define GL_FLOAT16_MAT2x4_AMD 0 x91C9 # define GL_FLOAT16_MAT3x2_AMD 0 x91CA # define GL_FLOAT16_MAT3x4_AMD 0 x91CB # define GL_FLOAT16_MAT4x2_AMD 0 x91CC # define GL_FLOAT16_MAT4x3_AMD 0 x91CD # endif # ifndef GL_AMD_gpu_shader_int64 # define GL_AMD_gpu_shader_int64 1 typedef int64_t GLint64EXT ; # define GL_INT64_NV 0 x140E # define GL_UNSIGNED_INT64_NV 0 x140F # define GL_INT8_NV 0 x8FE0 # define GL_INT8_VEC2_NV 0 x8FE1 # define GL_INT8_VEC3_NV 0 x8FE2 # define GL_INT8_VEC4_NV 0 x8FE3 # define GL_INT16_NV 0 x8FE4 # define GL_INT16_VEC2_NV 0 x8FE5 # define GL_INT16_VEC3_NV 0 x8FE6 # define GL_INT16_VEC4_NV 0 x8FE7 # define GL_INT64_VEC2_NV 0 x8FE9 # define GL_INT64_VEC3_NV 0 x8FEA # define GL_INT64_VEC4_NV 0 x8FEB # define GL_UNSIGNED_INT8_NV 0 x8FEC # define GL_UNSIGNED_INT8_VEC2_NV 0 x8FED # define GL_UNSIGNED_INT8_VEC3_NV 0 x8FEE # define GL_UNSIGNED_INT8_VEC4_NV 0 x8FEF # define GL_UNSIGNED_INT16_NV 0 x8FF0 # define GL_UNSIGNED_INT16_VEC2_NV 0 x8FF1 # define GL_UNSIGNED_INT16_VEC3_NV 0 x8FF2 # define GL_UNSIGNED_INT16_VEC4_NV 0 x8FF3 # define GL_UNSIGNED_INT64_VEC2_NV 0 x8FF5 # define GL_UNSIGNED_INT64_VEC3_NV 0 x8FF6 # define GL_UNSIGNED_INT64_VEC4_NV 0 x8FF7 typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform1i64NV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glUniform1i64NV(GLint location, GLint64EXT x)"
  },
  {
    "label": "glUniform2i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "glUniform3i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "glUniform4i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "glUniform1i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform2i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform3i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform4i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform1ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1ui64NV(GLint location, GLuint64EXT x)"
  },
  {
    "label": "glUniform2ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "glUniform3ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "glUniform4ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "glUniform1ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform2ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform3ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform4ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glGetUniformi64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)"
  },
  {
    "label": "glGetUniformui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)"
  },
  {
    "label": "glProgramUniform1i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)"
  },
  {
    "label": "glProgramUniform2i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "glProgramUniform3i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "glProgramUniform4i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "glProgramUniform1i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform2i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform3i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform4i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform1ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)"
  },
  {
    "label": "glProgramUniform2ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "glProgramUniform3ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "glProgramUniform4ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "glProgramUniform1ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform2ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform3ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform4ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_interleaved_elements # define GL_AMD_interleaved_elements 1 # define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0 x91A4 # define GL_VERTEX_ID_SWIZZLE_AMD 0 x91A5 typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (GLuint index, GLenum pname, GLint param)"
  },
  {
    "label": "glVertexAttribParameteriAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_multi_draw_indirect # define GL_AMD_multi_draw_indirect 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawArraysIndirectAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectAMD(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirectAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_name_gen_delete # define GL_AMD_name_gen_delete 1 # define GL_DATA_BUFFER_AMD 0 x9151 # define GL_PERFORMANCE_MONITOR_AMD 0 x9152 # define GL_QUERY_OBJECT_AMD 0 x9153 # define GL_VERTEX_ARRAY_OBJECT_AMD 0 x9154 # define GL_SAMPLER_OBJECT_AMD 0 x9155 typedef)",
    "insertText": "void(APIENTRYP PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name)"
  },
  {
    "label": "glGenNamesAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)"
  },
  {
    "label": "glDeleteNamesAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)"
  },
  {
    "label": "glIsNameAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsNameAMD(GLenum identifier, GLuint name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_occlusion_query_event # define GL_AMD_occlusion_query_event 1 # define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0 x874F # define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0 x00000001 # define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0 x00000002 # define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0 x00000004 # define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0 x00000008 # define GL_QUERY_ALL_EVENT_BITS_AMD 0 xFFFFFFFF typedef)",
    "insertText": "void(APIENTRYP PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (GLenum target, GLuint id, GLenum pname, GLuint param)"
  },
  {
    "label": "glQueryObjectParameteruiAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_performance_monitor # define GL_AMD_performance_monitor 1 # define GL_COUNTER_TYPE_AMD 0 x8BC0 # define GL_COUNTER_RANGE_AMD 0 x8BC1 # define GL_UNSIGNED_INT64_AMD 0 x8BC2 # define GL_PERCENTAGE_AMD 0 x8BC3 # define GL_PERFMON_RESULT_AVAILABLE_AMD 0 x8BC4 # define GL_PERFMON_RESULT_SIZE_AMD 0 x8BC5 # define GL_PERFMON_RESULT_AMD 0 x8BC6 typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)"
  },
  {
    "label": "glGetPerfMonitorGroupsAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)"
  },
  {
    "label": "glGetPerfMonitorCountersAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)"
  },
  {
    "label": "glGetPerfMonitorGroupStringAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)"
  },
  {
    "label": "glGetPerfMonitorCounterStringAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)"
  },
  {
    "label": "glGetPerfMonitorCounterInfoAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data)"
  },
  {
    "label": "glGenPerfMonitorsAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)"
  },
  {
    "label": "glDeletePerfMonitorsAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)"
  },
  {
    "label": "glSelectPerfMonitorCountersAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)"
  },
  {
    "label": "glBeginPerfMonitorAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginPerfMonitorAMD(GLuint monitor)"
  },
  {
    "label": "glEndPerfMonitorAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndPerfMonitorAMD(GLuint monitor)"
  },
  {
    "label": "glGetPerfMonitorCounterDataAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_pinned_memory # define GL_AMD_pinned_memory 1 # define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0 x9160 # endif # ifndef GL_AMD_query_buffer_object # define GL_AMD_query_buffer_object 1 # define GL_QUERY_BUFFER_AMD 0 x9192 # define GL_QUERY_BUFFER_BINDING_AMD 0 x9193 # define GL_QUERY_RESULT_NO_WAIT_AMD 0 x9194 # endif # ifndef GL_AMD_sample_positions # define GL_AMD_sample_positions 1 # define GL_SUBSAMPLE_DISTANCE_AMD 0 x883F typedef)",
    "insertText": "void(APIENTRYP PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat *val)"
  },
  {
    "label": "glSetMultisamplefvAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_seamless_cubemap_per_texture # define GL_AMD_seamless_cubemap_per_texture 1 # endif # ifndef GL_AMD_shader_atomic_counter_ops # define GL_AMD_shader_atomic_counter_ops 1 # endif # ifndef GL_AMD_shader_ballot # define GL_AMD_shader_ballot 1 # endif # ifndef GL_AMD_shader_explicit_vertex_parameter # define GL_AMD_shader_explicit_vertex_parameter 1 # endif # ifndef GL_AMD_shader_stencil_export # define GL_AMD_shader_stencil_export 1 # endif # ifndef GL_AMD_shader_trinary_minmax # define GL_AMD_shader_trinary_minmax 1 # endif # ifndef GL_AMD_sparse_texture # define GL_AMD_sparse_texture 1 # define GL_VIRTUAL_PAGE_SIZE_X_AMD 0 x9195 # define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0 x9196 # define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0 x9197 # define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0 x9198 # define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0 x9199 # define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0 x919A # define GL_MIN_SPARSE_LEVEL_AMD 0 x919B # define GL_MIN_LOD_WARNING_AMD 0 x919C # define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0 x00000001 typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)"
  },
  {
    "label": "glTexStorageSparseAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)"
  },
  {
    "label": "glTextureStorageSparseAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_stencil_operation_extended # define GL_AMD_stencil_operation_extended 1 # define GL_SET_AMD 0 x874A # define GL_REPLACE_VALUE_AMD 0 x874B # define GL_STENCIL_OP_VALUE_AMD 0 x874C # define GL_STENCIL_BACK_OP_VALUE_AMD 0 x874D typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value)"
  },
  {
    "label": "glStencilOpValueAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glStencilOpValueAMD(GLenum face, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_texture_texture4 # define GL_AMD_texture_texture4 1 # endif # ifndef GL_AMD_transform_feedback3_lines_triangles # define GL_AMD_transform_feedback3_lines_triangles 1 # endif # ifndef GL_AMD_transform_feedback4 # define GL_AMD_transform_feedback4 1 # define GL_STREAM_RASTERIZATION_AMD 0 x91A0 # endif # ifndef GL_AMD_vertex_shader_layer # define GL_AMD_vertex_shader_layer 1 # endif # ifndef GL_AMD_vertex_shader_tessellator # define GL_AMD_vertex_shader_tessellator 1 # define GL_SAMPLER_BUFFER_AMD 0 x9001 # define GL_INT_SAMPLER_BUFFER_AMD 0 x9002 # define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0 x9003 # define GL_TESSELLATION_MODE_AMD 0 x9004 # define GL_TESSELLATION_FACTOR_AMD 0 x9005 # define GL_DISCRETE_AMD 0 x9006 # define GL_CONTINUOUS_AMD 0 x9007 typedef)",
    "insertText": "void(APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode)"
  },
  {
    "label": "glTessellationFactorAMD()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTessellationFactorAMD(GLfloat factor)"
  },
  {
    "label": "glTessellationModeAMD()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTessellationModeAMD(GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_AMD_vertex_shader_viewport_index # define GL_AMD_vertex_shader_viewport_index 1 # endif # ifndef GL_APPLE_aux_depth_stencil # define GL_APPLE_aux_depth_stencil 1 # define GL_AUX_DEPTH_STENCIL_APPLE 0 x8A14 # endif # ifndef GL_APPLE_client_storage # define GL_APPLE_client_storage 1 # define GL_UNPACK_CLIENT_STORAGE_APPLE 0 x85B2 # endif # ifndef GL_APPLE_element_array # define GL_APPLE_element_array 1 # define GL_ELEMENT_ARRAY_APPLE 0 x8A0C # define GL_ELEMENT_ARRAY_TYPE_APPLE 0 x8A0D # define GL_ELEMENT_ARRAY_POINTER_APPLE 0 x8A0E typedef)",
    "insertText": "void(APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "glElementPointerAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glElementPointerAPPLE(GLenum type, const void *pointer)"
  },
  {
    "label": "glDrawElementArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glDrawRangeElementArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)"
  },
  {
    "label": "glMultiDrawElementArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "glMultiDrawRangeElementArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_fence # define GL_APPLE_fence 1 # define GL_DRAW_PIXELS_APPLE 0 x8A0A # define GL_FENCE_APPLE 0 x8A0B typedef)",
    "insertText": "void(APIENTRYP PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSETFENCEAPPLEPROC) (GLuint fence)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISFENCEAPPLEPROC) (GLuint fence)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLTESTFENCEAPPLEPROC) (GLuint fence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFINISHFENCEAPPLEPROC) (GLuint fence)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name)"
  },
  {
    "label": "glGenFencesAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGenFencesAPPLE(GLsizei n, GLuint *fences)"
  },
  {
    "label": "glDeleteFencesAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)"
  },
  {
    "label": "glSetFenceAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSetFenceAPPLE(GLuint fence)"
  },
  {
    "label": "glIsFenceAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsFenceAPPLE(GLuint fence)"
  },
  {
    "label": "glTestFenceAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glTestFenceAPPLE(GLuint fence)"
  },
  {
    "label": "glFinishFenceAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFinishFenceAPPLE(GLuint fence)"
  },
  {
    "label": "glTestObjectAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glTestObjectAPPLE(GLenum object, GLuint name)"
  },
  {
    "label": "glFinishObjectAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFinishObjectAPPLE(GLenum object, GLint name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_float_pixels # define GL_APPLE_float_pixels 1 # define GL_HALF_APPLE 0 x140B # define GL_RGBA_FLOAT32_APPLE 0 x8814 # define GL_RGB_FLOAT32_APPLE 0 x8815 # define GL_ALPHA_FLOAT32_APPLE 0 x8816 # define GL_INTENSITY_FLOAT32_APPLE 0 x8817 # define GL_LUMINANCE_FLOAT32_APPLE 0 x8818 # define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0 x8819 # define GL_RGBA_FLOAT16_APPLE 0 x881A # define GL_RGB_FLOAT16_APPLE 0 x881B # define GL_ALPHA_FLOAT16_APPLE 0 x881C # define GL_INTENSITY_FLOAT16_APPLE 0 x881D # define GL_LUMINANCE_FLOAT16_APPLE 0 x881E # define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0 x881F # define GL_COLOR_FLOAT_APPLE 0 x8A0F # endif # ifndef GL_APPLE_flush_buffer_range # define GL_APPLE_flush_buffer_range 1 # define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0 x8A12 # define GL_BUFFER_FLUSHING_UNMAP_APPLE 0 x8A13 typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBufferParameteriAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glFlushMappedBufferRangeAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_object_purgeable # define GL_APPLE_object_purgeable 1 # define GL_BUFFER_OBJECT_APPLE 0 x85B3 # define GL_RELEASED_APPLE 0 x8A19 # define GL_VOLATILE_APPLE 0 x8A1A # define GL_RETAINED_APPLE 0 x8A1B # define GL_UNDEFINED_APPLE 0 x8A1C # define GL_PURGEABLE_APPLE 0 x8A1D typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params)"
  },
  {
    "label": "glObjectPurgeableAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLenum APIENTRY)",
    "insertText": "glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)"
  },
  {
    "label": "glObjectUnpurgeableAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)"
  },
  {
    "label": "glGetObjectParameterivAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_rgb_422 # define GL_APPLE_rgb_422 1 # define GL_RGB_422_APPLE 0 x8A1F # define GL_UNSIGNED_SHORT_8_8_APPLE 0 x85BA # define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0 x85BB # define GL_RGB_RAW_422_APPLE 0 x8A51 # endif # ifndef GL_APPLE_row_bytes # define GL_APPLE_row_bytes 1 # define GL_PACK_ROW_BYTES_APPLE 0 x8A15 # define GL_UNPACK_ROW_BYTES_APPLE 0 x8A16 # endif # ifndef GL_APPLE_specular_vector # define GL_APPLE_specular_vector 1 # define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0 x85B0 # endif # ifndef GL_APPLE_texture_range # define GL_APPLE_texture_range 1 # define GL_TEXTURE_RANGE_LENGTH_APPLE 0 x85B7 # define GL_TEXTURE_RANGE_POINTER_APPLE 0 x85B8 # define GL_TEXTURE_STORAGE_HINT_APPLE 0 x85BC # define GL_STORAGE_PRIVATE_APPLE 0 x85BD # define GL_STORAGE_CACHED_APPLE 0 x85BE # define GL_STORAGE_SHARED_APPLE 0 x85BF typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glTextureRangeAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTextureRangeAPPLE(GLenum target, GLsizei length, const void *pointer)"
  },
  {
    "label": "glGetTexParameterPointervAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_transform_hint # define GL_APPLE_transform_hint 1 # define GL_TRANSFORM_HINT_APPLE 0 x85B1 # endif # ifndef GL_APPLE_vertex_array_object # define GL_APPLE_vertex_array_object 1 # define GL_VERTEX_ARRAY_BINDING_APPLE 0 x85B5 typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array)"
  },
  {
    "label": "glBindVertexArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBindVertexArrayAPPLE(GLuint array)"
  },
  {
    "label": "glDeleteVertexArraysAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "glGenVertexArraysAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glIsVertexArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsVertexArrayAPPLE(GLuint array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_vertex_array_range # define GL_APPLE_vertex_array_range 1 # define GL_VERTEX_ARRAY_RANGE_APPLE 0 x851D # define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0 x851E # define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0 x851F # define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0 x8521 # define GL_STORAGE_CLIENT_APPLE 0 x85B4 typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "glVertexArrayRangeAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexArrayRangeAPPLE(GLsizei length, void *pointer)"
  },
  {
    "label": "glFlushVertexArrayRangeAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlushVertexArrayRangeAPPLE(GLsizei length, void *pointer)"
  },
  {
    "label": "glVertexArrayParameteriAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayParameteriAPPLE(GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_vertex_program_evaluators # define GL_APPLE_vertex_program_evaluators 1 # define GL_VERTEX_ATTRIB_MAP1_APPLE 0 x8A00 # define GL_VERTEX_ATTRIB_MAP2_APPLE 0 x8A01 # define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0 x8A02 # define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0 x8A03 # define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0 x8A04 # define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0 x8A05 # define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0 x8A06 # define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0 x8A07 # define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0 x8A08 # define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0 x8A09 typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)"
  },
  {
    "label": "glEnableVertexAttribAPPLE()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glEnableVertexAttribAPPLE(GLuint index, GLenum pname)"
  },
  {
    "label": "glDisableVertexAttribAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVertexAttribAPPLE(GLuint index, GLenum pname)"
  },
  {
    "label": "glIsVertexAttribEnabledAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)"
  },
  {
    "label": "glMapVertexAttrib1dAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)"
  },
  {
    "label": "glMapVertexAttrib1fAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)"
  },
  {
    "label": "glMapVertexAttrib2dAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)"
  },
  {
    "label": "glMapVertexAttrib2fAPPLE()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_APPLE_ycbcr_422 # define GL_APPLE_ycbcr_422 1 # define GL_YCBCR_422_APPLE 0 x85B9 # endif # ifndef GL_ATI_draw_buffers # define GL_ATI_draw_buffers 1 # define GL_MAX_DRAW_BUFFERS_ATI 0 x8824 # define GL_DRAW_BUFFER0_ATI 0 x8825 # define GL_DRAW_BUFFER1_ATI 0 x8826 # define GL_DRAW_BUFFER2_ATI 0 x8827 # define GL_DRAW_BUFFER3_ATI 0 x8828 # define GL_DRAW_BUFFER4_ATI 0 x8829 # define GL_DRAW_BUFFER5_ATI 0 x882A # define GL_DRAW_BUFFER6_ATI 0 x882B # define GL_DRAW_BUFFER7_ATI 0 x882C # define GL_DRAW_BUFFER8_ATI 0 x882D # define GL_DRAW_BUFFER9_ATI 0 x882E # define GL_DRAW_BUFFER10_ATI 0 x882F # define GL_DRAW_BUFFER11_ATI 0 x8830 # define GL_DRAW_BUFFER12_ATI 0 x8831 # define GL_DRAW_BUFFER13_ATI 0 x8832 # define GL_DRAW_BUFFER14_ATI 0 x8833 # define GL_DRAW_BUFFER15_ATI 0 x8834 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glDrawBuffersATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawBuffersATI(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_element_array # define GL_ATI_element_array 1 # define GL_ELEMENT_ARRAY_ATI 0 x8768 # define GL_ELEMENT_ARRAY_TYPE_ATI 0 x8769 # define GL_ELEMENT_ARRAY_POINTER_ATI 0 x876A typedef)",
    "insertText": "void(APIENTRYP PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count)"
  },
  {
    "label": "glElementPointerATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glElementPointerATI(GLenum type, const void *pointer)"
  },
  {
    "label": "glDrawElementArrayATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementArrayATI(GLenum mode, GLsizei count)"
  },
  {
    "label": "glDrawRangeElementArrayATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_envmap_bumpmap # define GL_ATI_envmap_bumpmap 1 # define GL_BUMP_ROT_MATRIX_ATI 0 x8775 # define GL_BUMP_ROT_MATRIX_SIZE_ATI 0 x8776 # define GL_BUMP_NUM_TEX_UNITS_ATI 0 x8777 # define GL_BUMP_TEX_UNITS_ATI 0 x8778 # define GL_DUDV_ATI 0 x8779 # define GL_DU8DV8_ATI 0 x877A # define GL_BUMP_ENVMAP_ATI 0 x877B # define GL_BUMP_TARGET_ATI 0 x877C typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param)"
  },
  {
    "label": "glTexBumpParameterivATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexBumpParameterivATI(GLenum pname, const GLint *param)"
  },
  {
    "label": "glTexBumpParameterfvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexBumpParameterfvATI(GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glGetTexBumpParameterivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexBumpParameterivATI(GLenum pname, GLint *param)"
  },
  {
    "label": "glGetTexBumpParameterfvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_fragment_shader # define GL_ATI_fragment_shader 1 # define GL_FRAGMENT_SHADER_ATI 0 x8920 # define GL_REG_0_ATI 0 x8921 # define GL_REG_1_ATI 0 x8922 # define GL_REG_2_ATI 0 x8923 # define GL_REG_3_ATI 0 x8924 # define GL_REG_4_ATI 0 x8925 # define GL_REG_5_ATI 0 x8926 # define GL_REG_6_ATI 0 x8927 # define GL_REG_7_ATI 0 x8928 # define GL_REG_8_ATI 0 x8929 # define GL_REG_9_ATI 0 x892A # define GL_REG_10_ATI 0 x892B # define GL_REG_11_ATI 0 x892C # define GL_REG_12_ATI 0 x892D # define GL_REG_13_ATI 0 x892E # define GL_REG_14_ATI 0 x892F # define GL_REG_15_ATI 0 x8930 # define GL_REG_16_ATI 0 x8931 # define GL_REG_17_ATI 0 x8932 # define GL_REG_18_ATI 0 x8933 # define GL_REG_19_ATI 0 x8934 # define GL_REG_20_ATI 0 x8935 # define GL_REG_21_ATI 0 x8936 # define GL_REG_22_ATI 0 x8937 # define GL_REG_23_ATI 0 x8938 # define GL_REG_24_ATI 0 x8939 # define GL_REG_25_ATI 0 x893A # define GL_REG_26_ATI 0 x893B # define GL_REG_27_ATI 0 x893C # define GL_REG_28_ATI 0 x893D # define GL_REG_29_ATI 0 x893E # define GL_REG_30_ATI 0 x893F # define GL_REG_31_ATI 0 x8940 # define GL_CON_0_ATI 0 x8941 # define GL_CON_1_ATI 0 x8942 # define GL_CON_2_ATI 0 x8943 # define GL_CON_3_ATI 0 x8944 # define GL_CON_4_ATI 0 x8945 # define GL_CON_5_ATI 0 x8946 # define GL_CON_6_ATI 0 x8947 # define GL_CON_7_ATI 0 x8948 # define GL_CON_8_ATI 0 x8949 # define GL_CON_9_ATI 0 x894A # define GL_CON_10_ATI 0 x894B # define GL_CON_11_ATI 0 x894C # define GL_CON_12_ATI 0 x894D # define GL_CON_13_ATI 0 x894E # define GL_CON_14_ATI 0 x894F # define GL_CON_15_ATI 0 x8950 # define GL_CON_16_ATI 0 x8951 # define GL_CON_17_ATI 0 x8952 # define GL_CON_18_ATI 0 x8953 # define GL_CON_19_ATI 0 x8954 # define GL_CON_20_ATI 0 x8955 # define GL_CON_21_ATI 0 x8956 # define GL_CON_22_ATI 0 x8957 # define GL_CON_23_ATI 0 x8958 # define GL_CON_24_ATI 0 x8959 # define GL_CON_25_ATI 0 x895A # define GL_CON_26_ATI 0 x895B # define GL_CON_27_ATI 0 x895C # define GL_CON_28_ATI 0 x895D # define GL_CON_29_ATI 0 x895E # define GL_CON_30_ATI 0 x895F # define GL_CON_31_ATI 0 x8960 # define GL_MOV_ATI 0 x8961 # define GL_ADD_ATI 0 x8963 # define GL_MUL_ATI 0 x8964 # define GL_SUB_ATI 0 x8965 # define GL_DOT3_ATI 0 x8966 # define GL_DOT4_ATI 0 x8967 # define GL_MAD_ATI 0 x8968 # define GL_LERP_ATI 0 x8969 # define GL_CND_ATI 0 x896A # define GL_CND0_ATI 0 x896B # define GL_DOT2_ADD_ATI 0 x896C # define GL_SECONDARY_INTERPOLATOR_ATI 0 x896D # define GL_NUM_FRAGMENT_REGISTERS_ATI 0 x896E # define GL_NUM_FRAGMENT_CONSTANTS_ATI 0 x896F # define GL_NUM_PASSES_ATI 0 x8970 # define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0 x8971 # define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0 x8972 # define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0 x8973 # define GL_NUM_LOOPBACK_COMPONENTS_ATI 0 x8974 # define GL_COLOR_ALPHA_PAIRING_ATI 0 x8975 # define GL_SWIZZLE_STR_ATI 0 x8976 # define GL_SWIZZLE_STQ_ATI 0 x8977 # define GL_SWIZZLE_STR_DR_ATI 0 x8978 # define GL_SWIZZLE_STQ_DQ_ATI 0 x8979 # define GL_SWIZZLE_STRQ_ATI 0 x897A # define GL_SWIZZLE_STRQ_DQ_ATI 0 x897B # define GL_RED_BIT_ATI 0 x00000001 # define GL_GREEN_BIT_ATI 0 x00000002 # define GL_BLUE_BIT_ATI 0 x00000004 # define GL_2X_BIT_ATI 0 x00000001 # define GL_4X_BIT_ATI 0 x00000002 # define GL_8X_BIT_ATI 0 x00000004 # define GL_HALF_BIT_ATI 0 x00000008 # define GL_QUARTER_BIT_ATI 0 x00000010 # define GL_EIGHTH_BIT_ATI 0 x00000020 # define GL_SATURATE_BIT_ATI 0 x00000040 # define GL_COMP_BIT_ATI 0 x00000002 # define GL_NEGATE_BIT_ATI 0 x00000004 # define GL_BIAS_BIT_ATI 0 x00000008 typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value)"
  },
  {
    "label": "glGenFragmentShadersATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLuint APIENTRY)",
    "insertText": "glGenFragmentShadersATI(GLuint range)"
  },
  {
    "label": "glBindFragmentShaderATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindFragmentShaderATI(GLuint id)"
  },
  {
    "label": "glDeleteFragmentShaderATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteFragmentShaderATI(GLuint id)"
  },
  {
    "label": "glBeginFragmentShaderATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginFragmentShaderATI(void)"
  },
  {
    "label": "glEndFragmentShaderATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndFragmentShaderATI(void)"
  },
  {
    "label": "glPassTexCoordATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)"
  },
  {
    "label": "glSampleMapATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)"
  },
  {
    "label": "glColorFragmentOp1ATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)"
  },
  {
    "label": "glColorFragmentOp2ATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)"
  },
  {
    "label": "glColorFragmentOp3ATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)"
  },
  {
    "label": "glAlphaFragmentOp1ATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)"
  },
  {
    "label": "glAlphaFragmentOp2ATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)"
  },
  {
    "label": "glAlphaFragmentOp3ATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)"
  },
  {
    "label": "glSetFragmentShaderConstantATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_map_object_buffer # define GL_ATI_map_object_buffer 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer)"
  },
  {
    "label": "glMapObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void* APIENTRY)",
    "insertText": "glMapObjectBufferATI(GLuint buffer)"
  },
  {
    "label": "glUnmapObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUnmapObjectBufferATI(GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_meminfo # define GL_ATI_meminfo 1 # define GL_VBO_FREE_MEMORY_ATI 0 x87FB # define GL_TEXTURE_FREE_MEMORY_ATI 0 x87FC # define GL_RENDERBUFFER_FREE_MEMORY_ATI 0 x87FD # endif # ifndef GL_ATI_pixel_format_float # define GL_ATI_pixel_format_float 1 # define GL_RGBA_FLOAT_MODE_ATI 0 x8820 # define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0 x8835 # endif # ifndef GL_ATI_pn_triangles # define GL_ATI_pn_triangles 1 # define GL_PN_TRIANGLES_ATI 0 x87F0 # define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0 x87F1 # define GL_PN_TRIANGLES_POINT_MODE_ATI 0 x87F2 # define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0 x87F3 # define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0 x87F4 # define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0 x87F5 # define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0 x87F6 # define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0 x87F7 # define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0 x87F8 typedef)",
    "insertText": "void(APIENTRYP PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "glPNTrianglesiATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPNTrianglesiATI(GLenum pname, GLint param)"
  },
  {
    "label": "glPNTrianglesfATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPNTrianglesfATI(GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_separate_stencil # define GL_ATI_separate_stencil 1 # define GL_STENCIL_BACK_FUNC_ATI 0 x8800 # define GL_STENCIL_BACK_FAIL_ATI 0 x8801 # define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0 x8802 # define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0 x8803 typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilOpSeparateATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "glStencilFuncSeparateATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_text_fragment_shader # define GL_ATI_text_fragment_shader 1 # define GL_TEXT_FRAGMENT_SHADER_ATI 0 x8200 # endif # ifndef GL_ATI_texture_env_combine3 # define GL_ATI_texture_env_combine3 1 # define GL_MODULATE_ADD_ATI 0 x8744 # define GL_MODULATE_SIGNED_ADD_ATI 0 x8745 # define GL_MODULATE_SUBTRACT_ATI 0 x8746 # endif # ifndef GL_ATI_texture_float # define GL_ATI_texture_float 1 # define GL_RGBA_FLOAT32_ATI 0 x8814 # define GL_RGB_FLOAT32_ATI 0 x8815 # define GL_ALPHA_FLOAT32_ATI 0 x8816 # define GL_INTENSITY_FLOAT32_ATI 0 x8817 # define GL_LUMINANCE_FLOAT32_ATI 0 x8818 # define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0 x8819 # define GL_RGBA_FLOAT16_ATI 0 x881A # define GL_RGB_FLOAT16_ATI 0 x881B # define GL_ALPHA_FLOAT16_ATI 0 x881C # define GL_INTENSITY_FLOAT16_ATI 0 x881D # define GL_LUMINANCE_FLOAT16_ATI 0 x881E # define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0 x881F # endif # ifndef GL_ATI_texture_mirror_once # define GL_ATI_texture_mirror_once 1 # define GL_MIRROR_CLAMP_ATI 0 x8742 # define GL_MIRROR_CLAMP_TO_EDGE_ATI 0 x8743 # endif # ifndef GL_ATI_vertex_array_object # define GL_ATI_vertex_array_object 1 # define GL_STATIC_ATI 0 x8760 # define GL_DYNAMIC_ATI 0 x8761 # define GL_PRESERVE_ATI 0 x8762 # define GL_DISCARD_ATI 0 x8763 # define GL_OBJECT_BUFFER_SIZE_ATI 0 x8764 # define GL_OBJECT_BUFFER_USAGE_ATI 0 x8765 # define GL_ARRAY_OBJECT_BUFFER_ATI 0 x8766 # define GL_ARRAY_OBJECT_OFFSET_ATI 0 x8767 typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void *pointer, GLenum usage)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glNewObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLuint APIENTRY)",
    "insertText": "glNewObjectBufferATI(GLsizei size, const void *pointer, GLenum usage)"
  },
  {
    "label": "glIsObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsObjectBufferATI(GLuint buffer)"
  },
  {
    "label": "glUpdateObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve)"
  },
  {
    "label": "glGetObjectBufferfvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetObjectBufferivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glFreeObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFreeObjectBufferATI(GLuint buffer)"
  },
  {
    "label": "glArrayObjectATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "glGetArrayObjectfvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetArrayObjectivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)"
  },
  {
    "label": "glVariantArrayObjectATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "glGetVariantArrayObjectfvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVariantArrayObjectivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_vertex_attrib_array_object # define GL_ATI_vertex_attrib_array_object 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glVertexAttribArrayObjectATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "glGetVertexAttribArrayObjectfvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribArrayObjectivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ATI_vertex_streams # define GL_ATI_vertex_streams 1 # define GL_MAX_VERTEX_STREAMS_ATI 0 x876B # define GL_VERTEX_STREAM0_ATI 0 x876C # define GL_VERTEX_STREAM1_ATI 0 x876D # define GL_VERTEX_STREAM2_ATI 0 x876E # define GL_VERTEX_STREAM3_ATI 0 x876F # define GL_VERTEX_STREAM4_ATI 0 x8770 # define GL_VERTEX_STREAM5_ATI 0 x8771 # define GL_VERTEX_STREAM6_ATI 0 x8772 # define GL_VERTEX_STREAM7_ATI 0 x8773 # define GL_VERTEX_SOURCE_ATI 0 x8774 typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "glVertexStream1sATI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexStream1sATI(GLenum stream, GLshort x)"
  },
  {
    "label": "glVertexStream1svATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream1svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glVertexStream1iATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream1iATI(GLenum stream, GLint x)"
  },
  {
    "label": "glVertexStream1ivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream1ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glVertexStream1fATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream1fATI(GLenum stream, GLfloat x)"
  },
  {
    "label": "glVertexStream1fvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream1fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glVertexStream1dATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream1dATI(GLenum stream, GLdouble x)"
  },
  {
    "label": "glVertexStream1dvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream1dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glVertexStream2sATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexStream2svATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream2svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glVertexStream2iATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream2iATI(GLenum stream, GLint x, GLint y)"
  },
  {
    "label": "glVertexStream2ivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream2ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glVertexStream2fATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexStream2fvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream2fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glVertexStream2dATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexStream2dvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream2dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glVertexStream3sATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexStream3svATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream3svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glVertexStream3iATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertexStream3ivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream3ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glVertexStream3fATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexStream3fvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream3fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glVertexStream3dATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexStream3dvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream3dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glVertexStream4sATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexStream4svATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream4svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glVertexStream4iATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertexStream4ivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream4ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glVertexStream4fATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexStream4fvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream4fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glVertexStream4dATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexStream4dvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexStream4dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glNormalStream3bATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)"
  },
  {
    "label": "glNormalStream3bvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3bvATI(GLenum stream, const GLbyte *coords)"
  },
  {
    "label": "glNormalStream3sATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)"
  },
  {
    "label": "glNormalStream3svATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glNormalStream3iATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)"
  },
  {
    "label": "glNormalStream3ivATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glNormalStream3fATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)"
  },
  {
    "label": "glNormalStream3fvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glNormalStream3dATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)"
  },
  {
    "label": "glNormalStream3dvATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalStream3dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glClientActiveVertexStreamATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClientActiveVertexStreamATI(GLenum stream)"
  },
  {
    "label": "glVertexBlendEnviATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexBlendEnviATI(GLenum pname, GLint param)"
  },
  {
    "label": "glVertexBlendEnvfATI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexBlendEnvfATI(GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_422_pixels # define GL_EXT_422_pixels 1 # define GL_422_EXT 0 x80CC # define GL_422_REV_EXT 0 x80CD # define GL_422_AVERAGE_EXT 0 x80CE # define GL_422_REV_AVERAGE_EXT 0 x80CF # endif # ifndef GL_EXT_abgr # define GL_EXT_abgr 1 # define GL_ABGR_EXT 0 x8000 # endif # ifndef GL_EXT_bgra # define GL_EXT_bgra 1 # define GL_BGR_EXT 0 x80E0 # define GL_BGRA_EXT 0 x80E1 # endif # ifndef GL_EXT_bindable_uniform # define GL_EXT_bindable_uniform 1 # define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0 x8DE2 # define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0 x8DE3 # define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0 x8DE4 # define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0 x8DED # define GL_UNIFORM_BUFFER_EXT 0 x8DEE # define GL_UNIFORM_BUFFER_BINDING_EXT 0 x8DEF typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location)"
  },
  {
    "label": "GLintptr()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLintptr(APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location)"
  },
  {
    "label": "glUniformBufferEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)"
  },
  {
    "label": "glGetUniformBufferSizeEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetUniformBufferSizeEXT(GLuint program, GLint location)"
  },
  {
    "label": "glGetUniformOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLintptr APIENTRY)",
    "insertText": "glGetUniformOffsetEXT(GLuint program, GLint location)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_blend_color # define GL_EXT_blend_color 1 # define GL_CONSTANT_COLOR_EXT 0 x8001 # define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0 x8002 # define GL_CONSTANT_ALPHA_EXT 0 x8003 # define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0 x8004 # define GL_BLEND_COLOR_EXT 0 x8005 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDCOLOREXTPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glBlendColorEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_blend_equation_separate # define GL_EXT_blend_equation_separate 1 # define GL_BLEND_EQUATION_RGB_EXT 0 x8009 # define GL_BLEND_EQUATION_ALPHA_EXT 0 x883D typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendEquationSeparateEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_blend_func_separate # define GL_EXT_blend_func_separate 1 # define GL_BLEND_DST_RGB_EXT 0 x80C8 # define GL_BLEND_SRC_RGB_EXT 0 x80C9 # define GL_BLEND_DST_ALPHA_EXT 0 x80CA # define GL_BLEND_SRC_ALPHA_EXT 0 x80CB typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glBlendFuncSeparateEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_blend_logic_op # define GL_EXT_blend_logic_op 1 # endif # ifndef GL_EXT_blend_minmax # define GL_EXT_blend_minmax 1 # define GL_MIN_EXT 0 x8007 # define GL_MAX_EXT 0 x8008 # define GL_FUNC_ADD_EXT 0 x8006 # define GL_BLEND_EQUATION_EXT 0 x8009 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONEXTPROC) (GLenum mode)"
  },
  {
    "label": "glBlendEquationEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendEquationEXT(GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_blend_subtract # define GL_EXT_blend_subtract 1 # define GL_FUNC_SUBTRACT_EXT 0 x800A # define GL_FUNC_REVERSE_SUBTRACT_EXT 0 x800B # endif # ifndef GL_EXT_clip_volume_hint # define GL_EXT_clip_volume_hint 1 # define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0 x80F0 # endif # ifndef GL_EXT_cmyka # define GL_EXT_cmyka 1 # define GL_CMYK_EXT 0 x800C # define GL_CMYKA_EXT 0 x800D # define GL_PACK_CMYK_HINT_EXT 0 x800E # define GL_UNPACK_CMYK_HINT_EXT 0 x800F # endif # ifndef GL_EXT_color_subtable # define GL_EXT_color_subtable 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glColorSubTableEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glCopyColorSubTableEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_compiled_vertex_array # define GL_EXT_compiled_vertex_array 1 # define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0 x81A8 # define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0 x81A9 typedef)",
    "insertText": "void(APIENTRYP PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNLOCKARRAYSEXTPROC) (void)"
  },
  {
    "label": "glLockArraysEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glLockArraysEXT(GLint first, GLsizei count)"
  },
  {
    "label": "glUnlockArraysEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUnlockArraysEXT(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_convolution # define GL_EXT_convolution 1 # define GL_CONVOLUTION_1D_EXT 0 x8010 # define GL_CONVOLUTION_2D_EXT 0 x8011 # define GL_SEPARABLE_2D_EXT 0 x8012 # define GL_CONVOLUTION_BORDER_MODE_EXT 0 x8013 # define GL_CONVOLUTION_FILTER_SCALE_EXT 0 x8014 # define GL_CONVOLUTION_FILTER_BIAS_EXT 0 x8015 # define GL_REDUCE_EXT 0 x8016 # define GL_CONVOLUTION_FORMAT_EXT 0 x8017 # define GL_CONVOLUTION_WIDTH_EXT 0 x8018 # define GL_CONVOLUTION_HEIGHT_EXT 0 x8019 # define GL_MAX_CONVOLUTION_WIDTH_EXT 0 x801A # define GL_MAX_CONVOLUTION_HEIGHT_EXT 0 x801B # define GL_POST_CONVOLUTION_RED_SCALE_EXT 0 x801C # define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0 x801D # define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0 x801E # define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0 x801F # define GL_POST_CONVOLUTION_RED_BIAS_EXT 0 x8020 # define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0 x8021 # define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0 x8022 # define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0 x8023 typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *image)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)"
  },
  {
    "label": "glConvolutionFilter1DEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "glConvolutionFilter2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "glConvolutionParameterfEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params)"
  },
  {
    "label": "glConvolutionParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glConvolutionParameteriEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params)"
  },
  {
    "label": "glConvolutionParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyConvolutionFilter1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyConvolutionFilter2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetConvolutionFilterEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void *image)"
  },
  {
    "label": "glGetConvolutionParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetConvolutionParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSeparableFilterEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)"
  },
  {
    "label": "glSeparableFilter2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_coordinate_frame # define GL_EXT_coordinate_frame 1 # define GL_TANGENT_ARRAY_EXT 0 x8439 # define GL_BINORMAL_ARRAY_EXT 0 x843A # define GL_CURRENT_TANGENT_EXT 0 x843B # define GL_CURRENT_BINORMAL_EXT 0 x843C # define GL_TANGENT_ARRAY_TYPE_EXT 0 x843E # define GL_TANGENT_ARRAY_STRIDE_EXT 0 x843F # define GL_BINORMAL_ARRAY_TYPE_EXT 0 x8440 # define GL_BINORMAL_ARRAY_STRIDE_EXT 0 x8441 # define GL_TANGENT_ARRAY_POINTER_EXT 0 x8442 # define GL_BINORMAL_ARRAY_POINTER_EXT 0 x8443 # define GL_MAP1_TANGENT_EXT 0 x8444 # define GL_MAP2_TANGENT_EXT 0 x8445 # define GL_MAP1_BINORMAL_EXT 0 x8446 # define GL_MAP2_BINORMAL_EXT 0 x8447 typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3BVEXTPROC) (const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3DVEXTPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3FVEXTPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3IVEXTPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENT3SVEXTPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3IVEXTPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMAL3SVEXTPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glTangent3bEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)"
  },
  {
    "label": "glTangent3bvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3bvEXT(const GLbyte *v)"
  },
  {
    "label": "glTangent3dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)"
  },
  {
    "label": "glTangent3dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3dvEXT(const GLdouble *v)"
  },
  {
    "label": "glTangent3fEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)"
  },
  {
    "label": "glTangent3fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3fvEXT(const GLfloat *v)"
  },
  {
    "label": "glTangent3iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3iEXT(GLint tx, GLint ty, GLint tz)"
  },
  {
    "label": "glTangent3ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3ivEXT(const GLint *v)"
  },
  {
    "label": "glTangent3sEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)"
  },
  {
    "label": "glTangent3svEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangent3svEXT(const GLshort *v)"
  },
  {
    "label": "glBinormal3bEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)"
  },
  {
    "label": "glBinormal3bvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3bvEXT(const GLbyte *v)"
  },
  {
    "label": "glBinormal3dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)"
  },
  {
    "label": "glBinormal3dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3dvEXT(const GLdouble *v)"
  },
  {
    "label": "glBinormal3fEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)"
  },
  {
    "label": "glBinormal3fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3fvEXT(const GLfloat *v)"
  },
  {
    "label": "glBinormal3iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3iEXT(GLint bx, GLint by, GLint bz)"
  },
  {
    "label": "glBinormal3ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3ivEXT(const GLint *v)"
  },
  {
    "label": "glBinormal3sEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)"
  },
  {
    "label": "glBinormal3svEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormal3svEXT(const GLshort *v)"
  },
  {
    "label": "glTangentPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTangentPointerEXT(GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glBinormalPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBinormalPointerEXT(GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_copy_texture # define GL_EXT_copy_texture 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCopyTexImage1DEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyTexImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCopyTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_cull_vertex # define GL_EXT_cull_vertex 1 # define GL_CULL_VERTEX_EXT 0 x81AA # define GL_CULL_VERTEX_EYE_POSITION_EXT 0 x81AB # define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0 x81AC typedef)",
    "insertText": "void(APIENTRYP PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params)"
  },
  {
    "label": "glCullParameterdvEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCullParameterdvEXT(GLenum pname, GLdouble *params)"
  },
  {
    "label": "glCullParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCullParameterfvEXT(GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_debug_label # define GL_EXT_debug_label 1 # define GL_PROGRAM_PIPELINE_OBJECT_EXT 0 x8A4F # define GL_PROGRAM_OBJECT_EXT 0 x8B40 # define GL_SHADER_OBJECT_EXT 0 x8B48 # define GL_BUFFER_OBJECT_EXT 0 x9151 # define GL_QUERY_OBJECT_EXT 0 x9153 # define GL_VERTEX_ARRAY_OBJECT_EXT 0 x9154 typedef)",
    "insertText": "void(APIENTRYP PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glLabelObjectEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectLabelEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_debug_marker # define GL_EXT_debug_marker 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar *marker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar *marker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOPGROUPMARKEREXTPROC) (void)"
  },
  {
    "label": "glInsertEventMarkerEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)"
  },
  {
    "label": "glPushGroupMarkerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)"
  },
  {
    "label": "glPopGroupMarkerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPopGroupMarkerEXT(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_depth_bounds_test # define GL_EXT_depth_bounds_test 1 # define GL_DEPTH_BOUNDS_TEST_EXT 0 x8890 # define GL_DEPTH_BOUNDS_EXT 0 x8891 typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax)"
  },
  {
    "label": "glDepthBoundsEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_direct_state_access # define GL_EXT_direct_state_access 1 # define GL_PROGRAM_MATRIX_EXT 0 x8E2D # define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0 x8E2E # define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0 x8E2F typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void **data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void **param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void **param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (GLuint vaobj, GLuint index, GLuint divisor)"
  },
  {
    "label": "glMatrixLoadfEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMatrixLoadfEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoaddEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixLoaddEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixMultfEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixMultfEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultdEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixMultdEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixLoadIdentityEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixLoadIdentityEXT(GLenum mode)"
  },
  {
    "label": "glMatrixRotatefEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixRotatedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glMatrixScalefEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixScaledEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glMatrixTranslatefEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixTranslatedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glMatrixFrustumEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "glMatrixOrthoEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "glMatrixPopEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixPopEXT(GLenum mode)"
  },
  {
    "label": "glMatrixPushEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixPushEXT(GLenum mode)"
  },
  {
    "label": "glClientAttribDefaultEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClientAttribDefaultEXT(GLbitfield mask)"
  },
  {
    "label": "glPushClientAttribDefaultEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPushClientAttribDefaultEXT(GLbitfield mask)"
  },
  {
    "label": "glTextureParameterfEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTextureParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTextureParameteriEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glTextureParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTextureImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTextureImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyTextureImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTextureSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTextureSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetTextureImageEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glGetTextureParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureLevelParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureLevelParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glTextureImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTextureSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glBindMultiTextureEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)"
  },
  {
    "label": "glMultiTexCoordPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glMultiTexEnvfEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glMultiTexEnvfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glMultiTexEnviEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glMultiTexEnvivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glMultiTexGendEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)"
  },
  {
    "label": "glMultiTexGendvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)"
  },
  {
    "label": "glMultiTexGenfEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)"
  },
  {
    "label": "glMultiTexGenfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glMultiTexGeniEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)"
  },
  {
    "label": "glMultiTexGenivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetMultiTexEnvfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMultiTexEnvivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMultiTexGendvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetMultiTexGenfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMultiTexGenivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)"
  },
  {
    "label": "glMultiTexParameteriEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glMultiTexParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glMultiTexParameterfEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glMultiTexParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glMultiTexImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glMultiTexImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glMultiTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glMultiTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyMultiTexImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyMultiTexImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyMultiTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyMultiTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetMultiTexImageEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glGetMultiTexParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMultiTexParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMultiTexLevelParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMultiTexLevelParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glMultiTexImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glMultiTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyMultiTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glEnableClientStateIndexedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableClientStateIndexedEXT(GLenum array, GLuint index)"
  },
  {
    "label": "glDisableClientStateIndexedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableClientStateIndexedEXT(GLenum array, GLuint index)"
  },
  {
    "label": "glGetFloatIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "glGetDoubleIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "glGetPointerIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPointerIndexedvEXT(GLenum target, GLuint index, void **data)"
  },
  {
    "label": "glEnableIndexedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableIndexedEXT(GLenum target, GLuint index)"
  },
  {
    "label": "glDisableIndexedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableIndexedEXT(GLenum target, GLuint index)"
  },
  {
    "label": "glIsEnabledIndexedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsEnabledIndexedEXT(GLenum target, GLuint index)"
  },
  {
    "label": "glGetIntegerIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "glGetBooleanIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "glCompressedTextureImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glGetCompressedTextureImageEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void *img)"
  },
  {
    "label": "glCompressedMultiTexImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glGetCompressedMultiTexImageEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void *img)"
  },
  {
    "label": "glMatrixLoadTransposefEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoadTransposedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixMultTransposefEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultTransposedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glNamedBufferDataEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glNamedBufferSubDataEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glMapNamedBufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapNamedBufferEXT(GLuint buffer, GLenum access)"
  },
  {
    "label": "glUnmapNamedBufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glUnmapNamedBufferEXT(GLuint buffer)"
  },
  {
    "label": "glGetNamedBufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetNamedBufferPointervEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "glGetNamedBufferSubDataEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glProgramUniform1fEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "glProgramUniform2fEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glProgramUniform3fEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glProgramUniform4fEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glProgramUniform1iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "glProgramUniform2iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glProgramUniform3iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glProgramUniform4iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glProgramUniform1fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform2fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform3fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform4fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform1ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform2ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform3ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform4ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniformMatrix2fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glTextureBufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glMultiTexBufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTextureParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTextureParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTextureParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glMultiTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glMultiTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetMultiTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMultiTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glProgramUniform1uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "glProgramUniform2uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glProgramUniform3uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glProgramUniform4uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glProgramUniform1uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform2uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform3uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform4uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glNamedProgramLocalParameters4fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "glNamedProgramLocalParameterI4iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glNamedProgramLocalParameterI4ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "glNamedProgramLocalParametersI4ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "glNamedProgramLocalParameterI4uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glNamedProgramLocalParameterI4uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "glNamedProgramLocalParametersI4uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glGetNamedProgramLocalParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "glGetNamedProgramLocalParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "glEnableClientStateiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableClientStateiEXT(GLenum array, GLuint index)"
  },
  {
    "label": "glDisableClientStateiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableClientStateiEXT(GLenum array, GLuint index)"
  },
  {
    "label": "glGetFloati_vEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat *params)"
  },
  {
    "label": "glGetDoublei_vEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble *params)"
  },
  {
    "label": "glGetPointeri_vEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPointeri_vEXT(GLenum pname, GLuint index, void **params)"
  },
  {
    "label": "glNamedProgramStringEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string)"
  },
  {
    "label": "glNamedProgramLocalParameter4dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glNamedProgramLocalParameter4dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "glNamedProgramLocalParameter4fEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glNamedProgramLocalParameter4fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "glGetNamedProgramLocalParameterdvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "glGetNamedProgramLocalParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "glGetNamedProgramivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetNamedProgramStringEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void *string)"
  },
  {
    "label": "glNamedRenderbufferStorageEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetNamedRenderbufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisampleCoverageEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCheckNamedFramebufferStatusEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)"
  },
  {
    "label": "glNamedFramebufferTexture1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTexture2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTexture3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glNamedFramebufferRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glGetNamedFramebufferAttachmentParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGenerateTextureMipmapEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenerateTextureMipmapEXT(GLuint texture, GLenum target)"
  },
  {
    "label": "glGenerateMultiTexMipmapEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)"
  },
  {
    "label": "glFramebufferDrawBufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)"
  },
  {
    "label": "glFramebufferDrawBuffersEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glFramebufferReadBufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)"
  },
  {
    "label": "glGetFramebufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glNamedCopyBufferSubDataEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glNamedFramebufferTextureEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTextureLayerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glNamedFramebufferTextureFaceEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "glTextureRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glMultiTexRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glVertexArrayVertexOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayColorOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayEdgeFlagOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayIndexOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayNormalOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayTexCoordOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayMultiTexCoordOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayFogCoordOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArraySecondaryColorOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayVertexAttribOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayVertexAttribIOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glEnableVertexArrayEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableVertexArrayEXT(GLuint vaobj, GLenum array)"
  },
  {
    "label": "glDisableVertexArrayEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVertexArrayEXT(GLuint vaobj, GLenum array)"
  },
  {
    "label": "glEnableVertexArrayAttribEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glDisableVertexArrayAttribEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glGetVertexArrayIntegervEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayPointervEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void **param)"
  },
  {
    "label": "glGetVertexArrayIntegeri_vEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayPointeri_vEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void **param)"
  },
  {
    "label": "glMapNamedBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glFlushMappedNamedBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glNamedBufferStorageEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glClearNamedBufferDataEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearNamedBufferSubDataEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glNamedFramebufferParameteriEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "glGetNamedFramebufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glProgramUniform1dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)"
  },
  {
    "label": "glProgramUniform2dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "glProgramUniform3dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glProgramUniform4dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramUniform1dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform2dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform3dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform4dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glTextureBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTextureStorage1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTextureStorage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureStorage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glTextureStorage2DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureStorage3DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glVertexArrayBindVertexBufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexArrayVertexAttribFormatEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayVertexAttribIFormatEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayVertexAttribLFormatEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayVertexAttribBindingEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexArrayVertexBindingDivisorEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glVertexArrayVertexAttribLOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glTexturePageCommitmentEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "glVertexArrayVertexAttribDivisorEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_draw_buffers2 # define GL_EXT_draw_buffers2 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "glColorMaskIndexedEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_draw_instanced # define GL_EXT_draw_instanced 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "glDrawArraysInstancedEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "glDrawElementsInstancedEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_draw_range_elements # define GL_EXT_draw_range_elements 1 # define GL_MAX_ELEMENTS_VERTICES_EXT 0 x80E8 # define GL_MAX_ELEMENTS_INDICES_EXT 0 x80E9 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glDrawRangeElementsEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_fog_coord # define GL_EXT_fog_coord 1 # define GL_FOG_COORDINATE_SOURCE_EXT 0 x8450 # define GL_FOG_COORDINATE_EXT 0 x8451 # define GL_FRAGMENT_DEPTH_EXT 0 x8452 # define GL_CURRENT_FOG_COORDINATE_EXT 0 x8453 # define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0 x8454 # define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0 x8455 # define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0 x8456 # define GL_FOG_COORDINATE_ARRAY_EXT 0 x8457 typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDFEXTPROC) (GLfloat coord)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDDEXTPROC) (GLdouble coord)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glFogCoordfEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFogCoordfEXT(GLfloat coord)"
  },
  {
    "label": "glFogCoordfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordfvEXT(const GLfloat *coord)"
  },
  {
    "label": "glFogCoorddEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoorddEXT(GLdouble coord)"
  },
  {
    "label": "glFogCoorddvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoorddvEXT(const GLdouble *coord)"
  },
  {
    "label": "glFogCoordPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordPointerEXT(GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_framebuffer_blit # define GL_EXT_framebuffer_blit 1 # define GL_READ_FRAMEBUFFER_EXT 0 x8CA8 # define GL_DRAW_FRAMEBUFFER_EXT 0 x8CA9 # define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0 x8CA6 # define GL_READ_FRAMEBUFFER_BINDING_EXT 0 x8CAA typedef)",
    "insertText": "void(APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glBlitFramebufferEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_framebuffer_multisample # define GL_EXT_framebuffer_multisample 1 # define GL_RENDERBUFFER_SAMPLES_EXT 0 x8CAB # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0 x8D56 # define GL_MAX_SAMPLES_EXT 0 x8D57 typedef)",
    "insertText": "void(APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glRenderbufferStorageMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_framebuffer_multisample_blit_scaled # define GL_EXT_framebuffer_multisample_blit_scaled 1 # define GL_SCALED_RESOLVE_FASTEST_EXT 0 x90BA # define GL_SCALED_RESOLVE_NICEST_EXT 0 x90BB # endif # ifndef GL_EXT_framebuffer_object # define GL_EXT_framebuffer_object 1 # define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0 x0506 # define GL_MAX_RENDERBUFFER_SIZE_EXT 0 x84E8 # define GL_FRAMEBUFFER_BINDING_EXT 0 x8CA6 # define GL_RENDERBUFFER_BINDING_EXT 0 x8CA7 # define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0 x8CD0 # define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0 x8CD1 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0 x8CD2 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0 x8CD3 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0 x8CD4 # define GL_FRAMEBUFFER_COMPLETE_EXT 0 x8CD5 # define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0 x8CD6 # define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0 x8CD7 # define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0 x8CD9 # define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0 x8CDA # define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0 x8CDB # define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0 x8CDC # define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0 x8CDD # define GL_MAX_COLOR_ATTACHMENTS_EXT 0 x8CDF # define GL_COLOR_ATTACHMENT0_EXT 0 x8CE0 # define GL_COLOR_ATTACHMENT1_EXT 0 x8CE1 # define GL_COLOR_ATTACHMENT2_EXT 0 x8CE2 # define GL_COLOR_ATTACHMENT3_EXT 0 x8CE3 # define GL_COLOR_ATTACHMENT4_EXT 0 x8CE4 # define GL_COLOR_ATTACHMENT5_EXT 0 x8CE5 # define GL_COLOR_ATTACHMENT6_EXT 0 x8CE6 # define GL_COLOR_ATTACHMENT7_EXT 0 x8CE7 # define GL_COLOR_ATTACHMENT8_EXT 0 x8CE8 # define GL_COLOR_ATTACHMENT9_EXT 0 x8CE9 # define GL_COLOR_ATTACHMENT10_EXT 0 x8CEA # define GL_COLOR_ATTACHMENT11_EXT 0 x8CEB # define GL_COLOR_ATTACHMENT12_EXT 0 x8CEC # define GL_COLOR_ATTACHMENT13_EXT 0 x8CED # define GL_COLOR_ATTACHMENT14_EXT 0 x8CEE # define GL_COLOR_ATTACHMENT15_EXT 0 x8CEF # define GL_DEPTH_ATTACHMENT_EXT 0 x8D00 # define GL_STENCIL_ATTACHMENT_EXT 0 x8D20 # define GL_FRAMEBUFFER_EXT 0 x8D40 # define GL_RENDERBUFFER_EXT 0 x8D41 # define GL_RENDERBUFFER_WIDTH_EXT 0 x8D42 # define GL_RENDERBUFFER_HEIGHT_EXT 0 x8D43 # define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0 x8D44 # define GL_STENCIL_INDEX1_EXT 0 x8D46 # define GL_STENCIL_INDEX4_EXT 0 x8D47 # define GL_STENCIL_INDEX8_EXT 0 x8D48 # define GL_STENCIL_INDEX16_EXT 0 x8D49 # define GL_RENDERBUFFER_RED_SIZE_EXT 0 x8D50 # define GL_RENDERBUFFER_GREEN_SIZE_EXT 0 x8D51 # define GL_RENDERBUFFER_BLUE_SIZE_EXT 0 x8D52 # define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0 x8D53 # define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0 x8D54 # define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0 x8D55 typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENERATEMIPMAPEXTPROC) (GLenum target)"
  },
  {
    "label": "glIsRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLboolean APIENTRY)",
    "insertText": "glIsRenderbufferEXT(GLuint renderbuffer)"
  },
  {
    "label": "glBindRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glDeleteRenderbuffersEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "glGenRenderbuffersEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glRenderbufferStorageEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetRenderbufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsFramebufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsFramebufferEXT(GLuint framebuffer)"
  },
  {
    "label": "glBindFramebufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindFramebufferEXT(GLenum target, GLuint framebuffer)"
  },
  {
    "label": "glDeleteFramebuffersEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "glGenFramebuffersEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glCheckFramebufferStatusEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glCheckFramebufferStatusEXT(GLenum target)"
  },
  {
    "label": "glFramebufferTexture1DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glFramebufferRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glGetFramebufferAttachmentParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGenerateMipmapEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenerateMipmapEXT(GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_framebuffer_sRGB # define GL_EXT_framebuffer_sRGB 1 # define GL_FRAMEBUFFER_SRGB_EXT 0 x8DB9 # define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0 x8DBA # endif # ifndef GL_EXT_geometry_shader4 # define GL_EXT_geometry_shader4 1 # define GL_GEOMETRY_SHADER_EXT 0 x8DD9 # define GL_GEOMETRY_VERTICES_OUT_EXT 0 x8DDA # define GL_GEOMETRY_INPUT_TYPE_EXT 0 x8DDB # define GL_GEOMETRY_OUTPUT_TYPE_EXT 0 x8DDC # define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0 x8C29 # define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0 x8DDD # define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0 x8DDE # define GL_MAX_VARYING_COMPONENTS_EXT 0 x8B4B # define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0 x8DDF # define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0 x8DE0 # define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0 x8DE1 # define GL_LINES_ADJACENCY_EXT 0 x000A # define GL_LINE_STRIP_ADJACENCY_EXT 0 x000B # define GL_TRIANGLES_ADJACENCY_EXT 0 x000C # define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0 x000D # define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0 x8DA8 # define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0 x8DA9 # define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0 x8DA7 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0 x8CD4 # define GL_PROGRAM_POINT_SIZE_EXT 0 x8642 typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glProgramParameteriEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_gpu_program_parameters # define GL_EXT_gpu_program_parameters 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "glProgramEnvParameters4fvEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "glProgramLocalParameters4fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_gpu_shader4 # define GL_EXT_gpu_shader4 1 # define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0 x88FD # define GL_SAMPLER_1D_ARRAY_EXT 0 x8DC0 # define GL_SAMPLER_2D_ARRAY_EXT 0 x8DC1 # define GL_SAMPLER_BUFFER_EXT 0 x8DC2 # define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0 x8DC3 # define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0 x8DC4 # define GL_SAMPLER_CUBE_SHADOW_EXT 0 x8DC5 # define GL_UNSIGNED_INT_VEC2_EXT 0 x8DC6 # define GL_UNSIGNED_INT_VEC3_EXT 0 x8DC7 # define GL_UNSIGNED_INT_VEC4_EXT 0 x8DC8 # define GL_INT_SAMPLER_1D_EXT 0 x8DC9 # define GL_INT_SAMPLER_2D_EXT 0 x8DCA # define GL_INT_SAMPLER_3D_EXT 0 x8DCB # define GL_INT_SAMPLER_CUBE_EXT 0 x8DCC # define GL_INT_SAMPLER_2D_RECT_EXT 0 x8DCD # define GL_INT_SAMPLER_1D_ARRAY_EXT 0 x8DCE # define GL_INT_SAMPLER_2D_ARRAY_EXT 0 x8DCF # define GL_INT_SAMPLER_BUFFER_EXT 0 x8DD0 # define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0 x8DD1 # define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0 x8DD2 # define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0 x8DD3 # define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0 x8DD4 # define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0 x8DD5 # define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0 x8DD6 # define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0 x8DD7 # define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0 x8DD8 # define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0 x8904 # define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0 x8905 typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glGetUniformuivEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "glBindFragDataLocationEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "glGetFragDataLocationEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetFragDataLocationEXT(GLuint program, const GLchar *name)"
  },
  {
    "label": "glUniform1uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1uiEXT(GLint location, GLuint v0)"
  },
  {
    "label": "glUniform2uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glUniform3uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glUniform4uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glUniform1uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform2uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform3uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform4uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_histogram # define GL_EXT_histogram 1 # define GL_HISTOGRAM_EXT 0 x8024 # define GL_PROXY_HISTOGRAM_EXT 0 x8025 # define GL_HISTOGRAM_WIDTH_EXT 0 x8026 # define GL_HISTOGRAM_FORMAT_EXT 0 x8027 # define GL_HISTOGRAM_RED_SIZE_EXT 0 x8028 # define GL_HISTOGRAM_GREEN_SIZE_EXT 0 x8029 # define GL_HISTOGRAM_BLUE_SIZE_EXT 0 x802A # define GL_HISTOGRAM_ALPHA_SIZE_EXT 0 x802B # define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0 x802C # define GL_HISTOGRAM_SINK_EXT 0 x802D # define GL_MINMAX_EXT 0 x802E # define GL_MINMAX_FORMAT_EXT 0 x802F # define GL_MINMAX_SINK_EXT 0 x8030 # define GL_TABLE_TOO_LARGE_EXT 0 x8031 typedef)",
    "insertText": "void(APIENTRYP PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRESETHISTOGRAMEXTPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRESETMINMAXEXTPROC) (GLenum target)"
  },
  {
    "label": "glGetHistogramEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "glGetHistogramParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetHistogramParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMinmaxEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "glGetMinmaxParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMinmaxParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glHistogramEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glMinmaxEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glResetHistogramEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glResetHistogramEXT(GLenum target)"
  },
  {
    "label": "glResetMinmaxEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glResetMinmaxEXT(GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_index_array_formats # define GL_EXT_index_array_formats 1 # define GL_IUI_V2F_EXT 0 x81AD # define GL_IUI_V3F_EXT 0 x81AE # define GL_IUI_N3F_V2F_EXT 0 x81AF # define GL_IUI_N3F_V3F_EXT 0 x81B0 # define GL_T2F_IUI_V2F_EXT 0 x81B1 # define GL_T2F_IUI_V3F_EXT 0 x81B2 # define GL_T2F_IUI_N3F_V2F_EXT 0 x81B3 # define GL_T2F_IUI_N3F_V3F_EXT 0 x81B4 # endif # ifndef GL_EXT_index_func # define GL_EXT_index_func 1 # define GL_INDEX_TEST_EXT 0 x81B5 # define GL_INDEX_TEST_FUNC_EXT 0 x81B6 # define GL_INDEX_TEST_REF_EXT 0 x81B7 typedef)",
    "insertText": "void(APIENTRYP PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref)"
  },
  {
    "label": "glIndexFuncEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glIndexFuncEXT(GLenum func, GLclampf ref)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_index_material # define GL_EXT_index_material 1 # define GL_INDEX_MATERIAL_EXT 0 x81B8 # define GL_INDEX_MATERIAL_PARAMETER_EXT 0 x81B9 # define GL_INDEX_MATERIAL_FACE_EXT 0 x81BA typedef)",
    "insertText": "void(APIENTRYP PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode)"
  },
  {
    "label": "glIndexMaterialEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glIndexMaterialEXT(GLenum face, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_index_texture # define GL_EXT_index_texture 1 # endif # ifndef GL_EXT_light_texture # define GL_EXT_light_texture 1 # define GL_FRAGMENT_MATERIAL_EXT 0 x8349 # define GL_FRAGMENT_NORMAL_EXT 0 x834A # define GL_FRAGMENT_COLOR_EXT 0 x834C # define GL_ATTENUATION_EXT 0 x834D # define GL_SHADOW_ATTENUATION_EXT 0 x834E # define GL_TEXTURE_APPLICATION_MODE_EXT 0 x834F # define GL_TEXTURE_LIGHT_EXT 0 x8350 # define GL_TEXTURE_MATERIAL_FACE_EXT 0 x8351 # define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0 x8352 typedef)",
    "insertText": "void(APIENTRYP PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURELIGHTEXTPROC) (GLenum pname)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode)"
  },
  {
    "label": "glApplyTextureEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glApplyTextureEXT(GLenum mode)"
  },
  {
    "label": "glTextureLightEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureLightEXT(GLenum pname)"
  },
  {
    "label": "glTextureMaterialEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureMaterialEXT(GLenum face, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_misc_attribute # define GL_EXT_misc_attribute 1 # endif # ifndef GL_EXT_multi_draw_arrays # define GL_EXT_multi_draw_arrays 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount)"
  },
  {
    "label": "glMultiDrawArraysEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "glMultiDrawElementsEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_multisample # define GL_EXT_multisample 1 # define GL_MULTISAMPLE_EXT 0 x809D # define GL_SAMPLE_ALPHA_TO_MASK_EXT 0 x809E # define GL_SAMPLE_ALPHA_TO_ONE_EXT 0 x809F # define GL_SAMPLE_MASK_EXT 0 x80A0 # define GL_1PASS_EXT 0 x80A1 # define GL_2PASS_0_EXT 0 x80A2 # define GL_2PASS_1_EXT 0 x80A3 # define GL_4PASS_0_EXT 0 x80A4 # define GL_4PASS_1_EXT 0 x80A5 # define GL_4PASS_2_EXT 0 x80A6 # define GL_4PASS_3_EXT 0 x80A7 # define GL_SAMPLE_BUFFERS_EXT 0 x80A8 # define GL_SAMPLES_EXT 0 x80A9 # define GL_SAMPLE_MASK_VALUE_EXT 0 x80AA # define GL_SAMPLE_MASK_INVERT_EXT 0 x80AB # define GL_SAMPLE_PATTERN_EXT 0 x80AC # define GL_MULTISAMPLE_BIT_EXT 0 x20000000 typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern)"
  },
  {
    "label": "glSampleMaskEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSampleMaskEXT(GLclampf value, GLboolean invert)"
  },
  {
    "label": "glSamplePatternEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplePatternEXT(GLenum pattern)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_packed_depth_stencil # define GL_EXT_packed_depth_stencil 1 # define GL_DEPTH_STENCIL_EXT 0 x84F9 # define GL_UNSIGNED_INT_24_8_EXT 0 x84FA # define GL_DEPTH24_STENCIL8_EXT 0 x88F0 # define GL_TEXTURE_STENCIL_SIZE_EXT 0 x88F1 # endif # ifndef GL_EXT_packed_float # define GL_EXT_packed_float 1 # define GL_R11F_G11F_B10F_EXT 0 x8C3A # define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0 x8C3B # define GL_RGBA_SIGNED_COMPONENTS_EXT 0 x8C3C # endif # ifndef GL_EXT_packed_pixels # define GL_EXT_packed_pixels 1 # define GL_UNSIGNED_BYTE_3_3_2_EXT 0 x8032 # define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0 x8033 # define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0 x8034 # define GL_UNSIGNED_INT_8_8_8_8_EXT 0 x8035 # define GL_UNSIGNED_INT_10_10_10_2_EXT 0 x8036 # endif # ifndef GL_EXT_paletted_texture # define GL_EXT_paletted_texture 1 # define GL_COLOR_INDEX1_EXT 0 x80E2 # define GL_COLOR_INDEX2_EXT 0 x80E3 # define GL_COLOR_INDEX4_EXT 0 x80E4 # define GL_COLOR_INDEX8_EXT 0 x80E5 # define GL_COLOR_INDEX12_EXT 0 x80E6 # define GL_COLOR_INDEX16_EXT 0 x80E7 # define GL_TEXTURE_INDEX_SIZE_EXT 0 x80ED typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glColorTableEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "glGetColorTableEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void *data)"
  },
  {
    "label": "glGetColorTableParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetColorTableParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_pixel_buffer_object # define GL_EXT_pixel_buffer_object 1 # define GL_PIXEL_PACK_BUFFER_EXT 0 x88EB # define GL_PIXEL_UNPACK_BUFFER_EXT 0 x88EC # define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0 x88ED # define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0 x88EF # endif # ifndef GL_EXT_pixel_transform # define GL_EXT_pixel_transform 1 # define GL_PIXEL_TRANSFORM_2D_EXT 0 x8330 # define GL_PIXEL_MAG_FILTER_EXT 0 x8331 # define GL_PIXEL_MIN_FILTER_EXT 0 x8332 # define GL_PIXEL_CUBIC_WEIGHT_EXT 0 x8333 # define GL_CUBIC_EXT 0 x8334 # define GL_AVERAGE_EXT 0 x8335 # define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0 x8336 # define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0 x8337 # define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0 x8338 typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glPixelTransformParameteriEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glPixelTransformParameterfEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glPixelTransformParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glPixelTransformParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetPixelTransformParameterivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetPixelTransformParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_pixel_transform_color_table # define GL_EXT_pixel_transform_color_table 1 # endif # ifndef GL_EXT_point_parameters # define GL_EXT_point_parameters 1 # define GL_POINT_SIZE_MIN_EXT 0 x8126 # define GL_POINT_SIZE_MAX_EXT 0 x8127 # define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0 x8128 # define GL_DISTANCE_ATTENUATION_EXT 0 x8129 typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glPointParameterfEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPointParameterfEXT(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterfvEXT(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_polygon_offset # define GL_EXT_polygon_offset 1 # define GL_POLYGON_OFFSET_EXT 0 x8037 # define GL_POLYGON_OFFSET_FACTOR_EXT 0 x8038 # define GL_POLYGON_OFFSET_BIAS_EXT 0 x8039 typedef)",
    "insertText": "void(APIENTRYP PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias)"
  },
  {
    "label": "glPolygonOffsetEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPolygonOffsetEXT(GLfloat factor, GLfloat bias)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_polygon_offset_clamp # define GL_EXT_polygon_offset_clamp 1 # define GL_POLYGON_OFFSET_CLAMP_EXT 0 x8E1B typedef)",
    "insertText": "void(APIENTRYP PFNGLPOLYGONOFFSETCLAMPEXTPROC) (GLfloat factor, GLfloat units, GLfloat clamp)"
  },
  {
    "label": "glPolygonOffsetClampEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_post_depth_coverage # define GL_EXT_post_depth_coverage 1 # endif # ifndef GL_EXT_provoking_vertex # define GL_EXT_provoking_vertex 1 # define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0 x8E4C # define GL_FIRST_VERTEX_CONVENTION_EXT 0 x8E4D # define GL_LAST_VERTEX_CONVENTION_EXT 0 x8E4E # define GL_PROVOKING_VERTEX_EXT 0 x8E4F typedef)",
    "insertText": "void(APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode)"
  },
  {
    "label": "glProvokingVertexEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProvokingVertexEXT(GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_raster_multisample # define GL_EXT_raster_multisample 1 # define GL_RASTER_MULTISAMPLE_EXT 0 x9327 # define GL_RASTER_SAMPLES_EXT 0 x9328 # define GL_MAX_RASTER_SAMPLES_EXT 0 x9329 # define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0 x932A # define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0 x932B # define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0 x932C typedef)",
    "insertText": "void(APIENTRYP PFNGLRASTERSAMPLESEXTPROC) (GLuint samples, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glRasterSamplesEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_rescale_normal # define GL_EXT_rescale_normal 1 # define GL_RESCALE_NORMAL_EXT 0 x803A # endif # ifndef GL_EXT_secondary_color # define GL_EXT_secondary_color 1 # define GL_COLOR_SUM_EXT 0 x8458 # define GL_CURRENT_SECONDARY_COLOR_EXT 0 x8459 # define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0 x845A # define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0 x845B # define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0 x845C # define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0 x845D # define GL_SECONDARY_COLOR_ARRAY_EXT 0 x845E typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glSecondaryColor3bEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)"
  },
  {
    "label": "glSecondaryColor3bvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3bvEXT(const GLbyte *v)"
  },
  {
    "label": "glSecondaryColor3dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)"
  },
  {
    "label": "glSecondaryColor3dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3dvEXT(const GLdouble *v)"
  },
  {
    "label": "glSecondaryColor3fEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)"
  },
  {
    "label": "glSecondaryColor3fvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3fvEXT(const GLfloat *v)"
  },
  {
    "label": "glSecondaryColor3iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)"
  },
  {
    "label": "glSecondaryColor3ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3ivEXT(const GLint *v)"
  },
  {
    "label": "glSecondaryColor3sEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)"
  },
  {
    "label": "glSecondaryColor3svEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3svEXT(const GLshort *v)"
  },
  {
    "label": "glSecondaryColor3ubEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)"
  },
  {
    "label": "glSecondaryColor3ubvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3ubvEXT(const GLubyte *v)"
  },
  {
    "label": "glSecondaryColor3uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)"
  },
  {
    "label": "glSecondaryColor3uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3uivEXT(const GLuint *v)"
  },
  {
    "label": "glSecondaryColor3usEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)"
  },
  {
    "label": "glSecondaryColor3usvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3usvEXT(const GLushort *v)"
  },
  {
    "label": "glSecondaryColorPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_separate_shader_objects # define GL_EXT_separate_shader_objects 1 # define GL_ACTIVE_PROGRAM_EXT 0 x8B8D typedef)",
    "insertText": "void(APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVEPROGRAMEXTPROC) (GLuint program)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string)"
  },
  {
    "label": "glUseShaderProgramEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glUseShaderProgramEXT(GLenum type, GLuint program)"
  },
  {
    "label": "glActiveProgramEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glActiveProgramEXT(GLuint program)"
  },
  {
    "label": "glCreateShaderProgramEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glCreateShaderProgramEXT(GLenum type, const GLchar *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_separate_specular_color # define GL_EXT_separate_specular_color 1 # define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0 x81F8 # define GL_SINGLE_COLOR_EXT 0 x81F9 # define GL_SEPARATE_SPECULAR_COLOR_EXT 0 x81FA # endif # ifndef GL_EXT_shader_image_load_formatted # define GL_EXT_shader_image_load_formatted 1 # endif # ifndef GL_EXT_shader_image_load_store # define GL_EXT_shader_image_load_store 1 # define GL_MAX_IMAGE_UNITS_EXT 0 x8F38 # define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0 x8F39 # define GL_IMAGE_BINDING_NAME_EXT 0 x8F3A # define GL_IMAGE_BINDING_LEVEL_EXT 0 x8F3B # define GL_IMAGE_BINDING_LAYERED_EXT 0 x8F3C # define GL_IMAGE_BINDING_LAYER_EXT 0 x8F3D # define GL_IMAGE_BINDING_ACCESS_EXT 0 x8F3E # define GL_IMAGE_1D_EXT 0 x904C # define GL_IMAGE_2D_EXT 0 x904D # define GL_IMAGE_3D_EXT 0 x904E # define GL_IMAGE_2D_RECT_EXT 0 x904F # define GL_IMAGE_CUBE_EXT 0 x9050 # define GL_IMAGE_BUFFER_EXT 0 x9051 # define GL_IMAGE_1D_ARRAY_EXT 0 x9052 # define GL_IMAGE_2D_ARRAY_EXT 0 x9053 # define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0 x9054 # define GL_IMAGE_2D_MULTISAMPLE_EXT 0 x9055 # define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0 x9056 # define GL_INT_IMAGE_1D_EXT 0 x9057 # define GL_INT_IMAGE_2D_EXT 0 x9058 # define GL_INT_IMAGE_3D_EXT 0 x9059 # define GL_INT_IMAGE_2D_RECT_EXT 0 x905A # define GL_INT_IMAGE_CUBE_EXT 0 x905B # define GL_INT_IMAGE_BUFFER_EXT 0 x905C # define GL_INT_IMAGE_1D_ARRAY_EXT 0 x905D # define GL_INT_IMAGE_2D_ARRAY_EXT 0 x905E # define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0 x905F # define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0 x9060 # define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0 x9061 # define GL_UNSIGNED_INT_IMAGE_1D_EXT 0 x9062 # define GL_UNSIGNED_INT_IMAGE_2D_EXT 0 x9063 # define GL_UNSIGNED_INT_IMAGE_3D_EXT 0 x9064 # define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0 x9065 # define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0 x9066 # define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0 x9067 # define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0 x9068 # define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0 x9069 # define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0 x906A # define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0 x906B # define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0 x906C # define GL_MAX_IMAGE_SAMPLES_EXT 0 x906D # define GL_IMAGE_BINDING_FORMAT_EXT 0 x906E # define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0 x00000001 # define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0 x00000002 # define GL_UNIFORM_BARRIER_BIT_EXT 0 x00000004 # define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0 x00000008 # define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0 x00000020 # define GL_COMMAND_BARRIER_BIT_EXT 0 x00000040 # define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0 x00000080 # define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0 x00000100 # define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0 x00000200 # define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0 x00000400 # define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0 x00000800 # define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0 x00001000 # define GL_ALL_BARRIER_BITS_EXT 0 xFFFFFFFF typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers)"
  },
  {
    "label": "glBindImageTextureEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)"
  },
  {
    "label": "glMemoryBarrierEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMemoryBarrierEXT(GLbitfield barriers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_shader_integer_mix # define GL_EXT_shader_integer_mix 1 # endif # ifndef GL_EXT_shadow_funcs # define GL_EXT_shadow_funcs 1 # endif # ifndef GL_EXT_shared_texture_palette # define GL_EXT_shared_texture_palette 1 # define GL_SHARED_TEXTURE_PALETTE_EXT 0 x81FB # endif # ifndef GL_EXT_sparse_texture2 # define GL_EXT_sparse_texture2 1 # endif # ifndef GL_EXT_stencil_clear_tag # define GL_EXT_stencil_clear_tag 1 # define GL_STENCIL_TAG_BITS_EXT 0 x88F2 # define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0 x88F3 typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag)"
  },
  {
    "label": "glStencilClearTagEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_stencil_two_side # define GL_EXT_stencil_two_side 1 # define GL_STENCIL_TEST_TWO_SIDE_EXT 0 x8910 # define GL_ACTIVE_STENCIL_FACE_EXT 0 x8911 typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face)"
  },
  {
    "label": "glActiveStencilFaceEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glActiveStencilFaceEXT(GLenum face)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_stencil_wrap # define GL_EXT_stencil_wrap 1 # define GL_INCR_WRAP_EXT 0 x8507 # define GL_DECR_WRAP_EXT 0 x8508 # endif # ifndef GL_EXT_subtexture # define GL_EXT_subtexture 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture # define GL_EXT_texture 1 # define GL_ALPHA4_EXT 0 x803B # define GL_ALPHA8_EXT 0 x803C # define GL_ALPHA12_EXT 0 x803D # define GL_ALPHA16_EXT 0 x803E # define GL_LUMINANCE4_EXT 0 x803F # define GL_LUMINANCE8_EXT 0 x8040 # define GL_LUMINANCE12_EXT 0 x8041 # define GL_LUMINANCE16_EXT 0 x8042 # define GL_LUMINANCE4_ALPHA4_EXT 0 x8043 # define GL_LUMINANCE6_ALPHA2_EXT 0 x8044 # define GL_LUMINANCE8_ALPHA8_EXT 0 x8045 # define GL_LUMINANCE12_ALPHA4_EXT 0 x8046 # define GL_LUMINANCE12_ALPHA12_EXT 0 x8047 # define GL_LUMINANCE16_ALPHA16_EXT 0 x8048 # define GL_INTENSITY_EXT 0 x8049 # define GL_INTENSITY4_EXT 0 x804A # define GL_INTENSITY8_EXT 0 x804B # define GL_INTENSITY12_EXT 0 x804C # define GL_INTENSITY16_EXT 0 x804D # define GL_RGB2_EXT 0 x804E # define GL_RGB4_EXT 0 x804F # define GL_RGB5_EXT 0 x8050 # define GL_RGB8_EXT 0 x8051 # define GL_RGB10_EXT 0 x8052 # define GL_RGB12_EXT 0 x8053 # define GL_RGB16_EXT 0 x8054 # define GL_RGBA2_EXT 0 x8055 # define GL_RGBA4_EXT 0 x8056 # define GL_RGB5_A1_EXT 0 x8057 # define GL_RGBA8_EXT 0 x8058 # define GL_RGB10_A2_EXT 0 x8059 # define GL_RGBA12_EXT 0 x805A # define GL_RGBA16_EXT 0 x805B # define GL_TEXTURE_RED_SIZE_EXT 0 x805C # define GL_TEXTURE_GREEN_SIZE_EXT 0 x805D # define GL_TEXTURE_BLUE_SIZE_EXT 0 x805E # define GL_TEXTURE_ALPHA_SIZE_EXT 0 x805F # define GL_TEXTURE_LUMINANCE_SIZE_EXT 0 x8060 # define GL_TEXTURE_INTENSITY_SIZE_EXT 0 x8061 # define GL_REPLACE_EXT 0 x8062 # define GL_PROXY_TEXTURE_1D_EXT 0 x8063 # define GL_PROXY_TEXTURE_2D_EXT 0 x8064 # define GL_TEXTURE_TOO_LARGE_EXT 0 x8065 # endif # ifndef GL_EXT_texture3D # define GL_EXT_texture3D 1 # define GL_PACK_SKIP_IMAGES_EXT 0 x806B # define GL_PACK_IMAGE_HEIGHT_EXT 0 x806C # define GL_UNPACK_SKIP_IMAGES_EXT 0 x806D # define GL_UNPACK_IMAGE_HEIGHT_EXT 0 x806E # define GL_TEXTURE_3D_EXT 0 x806F # define GL_PROXY_TEXTURE_3D_EXT 0 x8070 # define GL_TEXTURE_DEPTH_EXT 0 x8071 # define GL_TEXTURE_WRAP_R_EXT 0 x8072 # define GL_MAX_3D_TEXTURE_SIZE_EXT 0 x8073 typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexImage3DEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_array # define GL_EXT_texture_array 1 # define GL_TEXTURE_1D_ARRAY_EXT 0 x8C18 # define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0 x8C19 # define GL_TEXTURE_2D_ARRAY_EXT 0 x8C1A # define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0 x8C1B # define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0 x8C1C # define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0 x8C1D # define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0 x88FF # define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0 x884E typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glFramebufferTextureLayerEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_buffer_object # define GL_EXT_texture_buffer_object 1 # define GL_TEXTURE_BUFFER_EXT 0 x8C2A # define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0 x8C2B # define GL_TEXTURE_BINDING_BUFFER_EXT 0 x8C2C # define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0 x8C2D # define GL_TEXTURE_BUFFER_FORMAT_EXT 0 x8C2E typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTexBufferEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_compression_latc # define GL_EXT_texture_compression_latc 1 # define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0 x8C70 # define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0 x8C71 # define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0 x8C72 # define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0 x8C73 # endif # ifndef GL_EXT_texture_compression_rgtc # define GL_EXT_texture_compression_rgtc 1 # define GL_COMPRESSED_RED_RGTC1_EXT 0 x8DBB # define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0 x8DBC # define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0 x8DBD # define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0 x8DBE # endif # ifndef GL_EXT_texture_compression_s3tc # define GL_EXT_texture_compression_s3tc 1 # define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0 x83F0 # define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0 x83F1 # define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0 x83F2 # define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0 x83F3 # endif # ifndef GL_EXT_texture_cube_map # define GL_EXT_texture_cube_map 1 # define GL_NORMAL_MAP_EXT 0 x8511 # define GL_REFLECTION_MAP_EXT 0 x8512 # define GL_TEXTURE_CUBE_MAP_EXT 0 x8513 # define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0 x8514 # define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0 x8515 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0 x8516 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0 x8517 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0 x8518 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0 x8519 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0 x851A # define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0 x851B # define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0 x851C # endif # ifndef GL_EXT_texture_env_add # define GL_EXT_texture_env_add 1 # endif # ifndef GL_EXT_texture_env_combine # define GL_EXT_texture_env_combine 1 # define GL_COMBINE_EXT 0 x8570 # define GL_COMBINE_RGB_EXT 0 x8571 # define GL_COMBINE_ALPHA_EXT 0 x8572 # define GL_RGB_SCALE_EXT 0 x8573 # define GL_ADD_SIGNED_EXT 0 x8574 # define GL_INTERPOLATE_EXT 0 x8575 # define GL_CONSTANT_EXT 0 x8576 # define GL_PRIMARY_COLOR_EXT 0 x8577 # define GL_PREVIOUS_EXT 0 x8578 # define GL_SOURCE0_RGB_EXT 0 x8580 # define GL_SOURCE1_RGB_EXT 0 x8581 # define GL_SOURCE2_RGB_EXT 0 x8582 # define GL_SOURCE0_ALPHA_EXT 0 x8588 # define GL_SOURCE1_ALPHA_EXT 0 x8589 # define GL_SOURCE2_ALPHA_EXT 0 x858A # define GL_OPERAND0_RGB_EXT 0 x8590 # define GL_OPERAND1_RGB_EXT 0 x8591 # define GL_OPERAND2_RGB_EXT 0 x8592 # define GL_OPERAND0_ALPHA_EXT 0 x8598 # define GL_OPERAND1_ALPHA_EXT 0 x8599 # define GL_OPERAND2_ALPHA_EXT 0 x859A # endif # ifndef GL_EXT_texture_env_dot3 # define GL_EXT_texture_env_dot3 1 # define GL_DOT3_RGB_EXT 0 x8740 # define GL_DOT3_RGBA_EXT 0 x8741 # endif # ifndef GL_EXT_texture_filter_anisotropic # define GL_EXT_texture_filter_anisotropic 1 # define GL_TEXTURE_MAX_ANISOTROPY_EXT 0 x84FE # define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0 x84FF # endif # ifndef GL_EXT_texture_filter_minmax # define GL_EXT_texture_filter_minmax 1 # endif # ifndef GL_EXT_texture_integer # define GL_EXT_texture_integer 1 # define GL_RGBA32UI_EXT 0 x8D70 # define GL_RGB32UI_EXT 0 x8D71 # define GL_ALPHA32UI_EXT 0 x8D72 # define GL_INTENSITY32UI_EXT 0 x8D73 # define GL_LUMINANCE32UI_EXT 0 x8D74 # define GL_LUMINANCE_ALPHA32UI_EXT 0 x8D75 # define GL_RGBA16UI_EXT 0 x8D76 # define GL_RGB16UI_EXT 0 x8D77 # define GL_ALPHA16UI_EXT 0 x8D78 # define GL_INTENSITY16UI_EXT 0 x8D79 # define GL_LUMINANCE16UI_EXT 0 x8D7A # define GL_LUMINANCE_ALPHA16UI_EXT 0 x8D7B # define GL_RGBA8UI_EXT 0 x8D7C # define GL_RGB8UI_EXT 0 x8D7D # define GL_ALPHA8UI_EXT 0 x8D7E # define GL_INTENSITY8UI_EXT 0 x8D7F # define GL_LUMINANCE8UI_EXT 0 x8D80 # define GL_LUMINANCE_ALPHA8UI_EXT 0 x8D81 # define GL_RGBA32I_EXT 0 x8D82 # define GL_RGB32I_EXT 0 x8D83 # define GL_ALPHA32I_EXT 0 x8D84 # define GL_INTENSITY32I_EXT 0 x8D85 # define GL_LUMINANCE32I_EXT 0 x8D86 # define GL_LUMINANCE_ALPHA32I_EXT 0 x8D87 # define GL_RGBA16I_EXT 0 x8D88 # define GL_RGB16I_EXT 0 x8D89 # define GL_ALPHA16I_EXT 0 x8D8A # define GL_INTENSITY16I_EXT 0 x8D8B # define GL_LUMINANCE16I_EXT 0 x8D8C # define GL_LUMINANCE_ALPHA16I_EXT 0 x8D8D # define GL_RGBA8I_EXT 0 x8D8E # define GL_RGB8I_EXT 0 x8D8F # define GL_ALPHA8I_EXT 0 x8D90 # define GL_INTENSITY8I_EXT 0 x8D91 # define GL_LUMINANCE8I_EXT 0 x8D92 # define GL_LUMINANCE_ALPHA8I_EXT 0 x8D93 # define GL_RED_INTEGER_EXT 0 x8D94 # define GL_GREEN_INTEGER_EXT 0 x8D95 # define GL_BLUE_INTEGER_EXT 0 x8D96 # define GL_ALPHA_INTEGER_EXT 0 x8D97 # define GL_RGB_INTEGER_EXT 0 x8D98 # define GL_RGBA_INTEGER_EXT 0 x8D99 # define GL_BGR_INTEGER_EXT 0 x8D9A # define GL_BGRA_INTEGER_EXT 0 x8D9B # define GL_LUMINANCE_INTEGER_EXT 0 x8D9C # define GL_LUMINANCE_ALPHA_INTEGER_EXT 0 x8D9D # define GL_RGBA_INTEGER_MODE_EXT 0 x8D9E typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha)"
  },
  {
    "label": "glTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glClearColorIiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)"
  },
  {
    "label": "glClearColorIuiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_lod_bias # define GL_EXT_texture_lod_bias 1 # define GL_MAX_TEXTURE_LOD_BIAS_EXT 0 x84FD # define GL_TEXTURE_FILTER_CONTROL_EXT 0 x8500 # define GL_TEXTURE_LOD_BIAS_EXT 0 x8501 # endif # ifndef GL_EXT_texture_mirror_clamp # define GL_EXT_texture_mirror_clamp 1 # define GL_MIRROR_CLAMP_EXT 0 x8742 # define GL_MIRROR_CLAMP_TO_EDGE_EXT 0 x8743 # define GL_MIRROR_CLAMP_TO_BORDER_EXT 0 x8912 # endif # ifndef GL_EXT_texture_object # define GL_EXT_texture_object 1 # define GL_TEXTURE_PRIORITY_EXT 0 x8066 # define GL_TEXTURE_RESIDENT_EXT 0 x8067 # define GL_TEXTURE_1D_BINDING_EXT 0 x8068 # define GL_TEXTURE_2D_BINDING_EXT 0 x8069 # define GL_TEXTURE_3D_BINDING_EXT 0 x806A typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISTEXTUREEXTPROC) (GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities)"
  },
  {
    "label": "glAreTexturesResidentEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLboolean APIENTRY)",
    "insertText": "glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)"
  },
  {
    "label": "glBindTextureEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindTextureEXT(GLenum target, GLuint texture)"
  },
  {
    "label": "glDeleteTexturesEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteTexturesEXT(GLsizei n, const GLuint *textures)"
  },
  {
    "label": "glGenTexturesEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenTexturesEXT(GLsizei n, GLuint *textures)"
  },
  {
    "label": "glIsTextureEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsTextureEXT(GLuint texture)"
  },
  {
    "label": "glPrioritizeTexturesEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_perturb_normal # define GL_EXT_texture_perturb_normal 1 # define GL_PERTURB_EXT 0 x85AE # define GL_TEXTURE_NORMAL_EXT 0 x85AF typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURENORMALEXTPROC) (GLenum mode)"
  },
  {
    "label": "glTextureNormalEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTextureNormalEXT(GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_texture_sRGB # define GL_EXT_texture_sRGB 1 # define GL_SRGB_EXT 0 x8C40 # define GL_SRGB8_EXT 0 x8C41 # define GL_SRGB_ALPHA_EXT 0 x8C42 # define GL_SRGB8_ALPHA8_EXT 0 x8C43 # define GL_SLUMINANCE_ALPHA_EXT 0 x8C44 # define GL_SLUMINANCE8_ALPHA8_EXT 0 x8C45 # define GL_SLUMINANCE_EXT 0 x8C46 # define GL_SLUMINANCE8_EXT 0 x8C47 # define GL_COMPRESSED_SRGB_EXT 0 x8C48 # define GL_COMPRESSED_SRGB_ALPHA_EXT 0 x8C49 # define GL_COMPRESSED_SLUMINANCE_EXT 0 x8C4A # define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0 x8C4B # define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0 x8C4C # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0 x8C4D # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0 x8C4E # define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0 x8C4F # endif # ifndef GL_EXT_texture_sRGB_decode # define GL_EXT_texture_sRGB_decode 1 # define GL_TEXTURE_SRGB_DECODE_EXT 0 x8A48 # define GL_DECODE_EXT 0 x8A49 # define GL_SKIP_DECODE_EXT 0 x8A4A # endif # ifndef GL_EXT_texture_shared_exponent # define GL_EXT_texture_shared_exponent 1 # define GL_RGB9_E5_EXT 0 x8C3D # define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0 x8C3E # define GL_TEXTURE_SHARED_SIZE_EXT 0 x8C3F # endif # ifndef GL_EXT_texture_snorm # define GL_EXT_texture_snorm 1 # define GL_ALPHA_SNORM 0 x9010 # define GL_LUMINANCE_SNORM 0 x9011 # define GL_LUMINANCE_ALPHA_SNORM 0 x9012 # define GL_INTENSITY_SNORM 0 x9013 # define GL_ALPHA8_SNORM 0 x9014 # define GL_LUMINANCE8_SNORM 0 x9015 # define GL_LUMINANCE8_ALPHA8_SNORM 0 x9016 # define GL_INTENSITY8_SNORM 0 x9017 # define GL_ALPHA16_SNORM 0 x9018 # define GL_LUMINANCE16_SNORM 0 x9019 # define GL_LUMINANCE16_ALPHA16_SNORM 0 x901A # define GL_INTENSITY16_SNORM 0 x901B # define GL_RED_SNORM 0 x8F90 # define GL_RG_SNORM 0 x8F91 # define GL_RGB_SNORM 0 x8F92 # define GL_RGBA_SNORM 0 x8F93 # endif # ifndef GL_EXT_texture_swizzle # define GL_EXT_texture_swizzle 1 # define GL_TEXTURE_SWIZZLE_R_EXT 0 x8E42 # define GL_TEXTURE_SWIZZLE_G_EXT 0 x8E43 # define GL_TEXTURE_SWIZZLE_B_EXT 0 x8E44 # define GL_TEXTURE_SWIZZLE_A_EXT 0 x8E45 # define GL_TEXTURE_SWIZZLE_RGBA_EXT 0 x8E46 # endif # ifndef GL_EXT_timer_query # define GL_EXT_timer_query 1 # define GL_TIME_ELAPSED_EXT 0 x88BF typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "glGetQueryObjecti64vEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetQueryObjectui64vEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_transform_feedback # define GL_EXT_transform_feedback 1 # define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0 x8C8E # define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0 x8C84 # define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0 x8C85 # define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0 x8C8F # define GL_INTERLEAVED_ATTRIBS_EXT 0 x8C8C # define GL_SEPARATE_ATTRIBS_EXT 0 x8C8D # define GL_PRIMITIVES_GENERATED_EXT 0 x8C87 # define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0 x8C88 # define GL_RASTERIZER_DISCARD_EXT 0 x8C89 # define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0 x8C8A # define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0 x8C8B # define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0 x8C80 # define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0 x8C83 # define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0 x8C7F # define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0 x8C76 typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glBeginTransformFeedbackEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBeginTransformFeedbackEXT(GLenum primitiveMode)"
  },
  {
    "label": "glEndTransformFeedbackEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndTransformFeedbackEXT(void)"
  },
  {
    "label": "glBindBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBindBufferOffsetEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)"
  },
  {
    "label": "glBindBufferBaseEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackVaryingsEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "glGetTransformFeedbackVaryingEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_vertex_array # define GL_EXT_vertex_array 1 # define GL_VERTEX_ARRAY_EXT 0 x8074 # define GL_NORMAL_ARRAY_EXT 0 x8075 # define GL_COLOR_ARRAY_EXT 0 x8076 # define GL_INDEX_ARRAY_EXT 0 x8077 # define GL_TEXTURE_COORD_ARRAY_EXT 0 x8078 # define GL_EDGE_FLAG_ARRAY_EXT 0 x8079 # define GL_VERTEX_ARRAY_SIZE_EXT 0 x807A # define GL_VERTEX_ARRAY_TYPE_EXT 0 x807B # define GL_VERTEX_ARRAY_STRIDE_EXT 0 x807C # define GL_VERTEX_ARRAY_COUNT_EXT 0 x807D # define GL_NORMAL_ARRAY_TYPE_EXT 0 x807E # define GL_NORMAL_ARRAY_STRIDE_EXT 0 x807F # define GL_NORMAL_ARRAY_COUNT_EXT 0 x8080 # define GL_COLOR_ARRAY_SIZE_EXT 0 x8081 # define GL_COLOR_ARRAY_TYPE_EXT 0 x8082 # define GL_COLOR_ARRAY_STRIDE_EXT 0 x8083 # define GL_COLOR_ARRAY_COUNT_EXT 0 x8084 # define GL_INDEX_ARRAY_TYPE_EXT 0 x8085 # define GL_INDEX_ARRAY_STRIDE_EXT 0 x8086 # define GL_INDEX_ARRAY_COUNT_EXT 0 x8087 # define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0 x8088 # define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0 x8089 # define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0 x808A # define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0 x808B # define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0 x808C # define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0 x808D # define GL_VERTEX_ARRAY_POINTER_EXT 0 x808E # define GL_NORMAL_ARRAY_POINTER_EXT 0 x808F # define GL_COLOR_ARRAY_POINTER_EXT 0 x8090 # define GL_INDEX_ARRAY_POINTER_EXT 0 x8091 # define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0 x8092 # define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0 x8093 typedef)",
    "insertText": "void(APIENTRYP PFNGLARRAYELEMENTEXTPROC) (GLint i)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPOINTERVEXTPROC) (GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glArrayElementEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glArrayElementEXT(GLint i)"
  },
  {
    "label": "glColorPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glDrawArraysEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glEdgeFlagPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)"
  },
  {
    "label": "glGetPointervEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPointervEXT(GLenum pname, void **params)"
  },
  {
    "label": "glIndexPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glNormalPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glTexCoordPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glVertexPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_vertex_array_bgra # define GL_EXT_vertex_array_bgra 1 # endif # ifndef GL_EXT_vertex_attrib_64bit # define GL_EXT_vertex_attrib_64bit 1 # define GL_DOUBLE_VEC2_EXT 0 x8FFC # define GL_DOUBLE_VEC3_EXT 0 x8FFD # define GL_DOUBLE_VEC4_EXT 0 x8FFE # define GL_DOUBLE_MAT2_EXT 0 x8F46 # define GL_DOUBLE_MAT3_EXT 0 x8F47 # define GL_DOUBLE_MAT4_EXT 0 x8F48 # define GL_DOUBLE_MAT2x3_EXT 0 x8F49 # define GL_DOUBLE_MAT2x4_EXT 0 x8F4A # define GL_DOUBLE_MAT3x2_EXT 0 x8F4B # define GL_DOUBLE_MAT3x4_EXT 0 x8F4C # define GL_DOUBLE_MAT4x2_EXT 0 x8F4D # define GL_DOUBLE_MAT4x3_EXT 0 x8F4E typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glVertexAttribL1dEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1dEXT(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttribL2dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttribL3dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttribL4dEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttribL1dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL2dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL3dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL4dvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribLPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribLdvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_vertex_shader # define GL_EXT_vertex_shader 1 # define GL_VERTEX_SHADER_EXT 0 x8780 # define GL_VERTEX_SHADER_BINDING_EXT 0 x8781 # define GL_OP_INDEX_EXT 0 x8782 # define GL_OP_NEGATE_EXT 0 x8783 # define GL_OP_DOT3_EXT 0 x8784 # define GL_OP_DOT4_EXT 0 x8785 # define GL_OP_MUL_EXT 0 x8786 # define GL_OP_ADD_EXT 0 x8787 # define GL_OP_MADD_EXT 0 x8788 # define GL_OP_FRAC_EXT 0 x8789 # define GL_OP_MAX_EXT 0 x878A # define GL_OP_MIN_EXT 0 x878B # define GL_OP_SET_GE_EXT 0 x878C # define GL_OP_SET_LT_EXT 0 x878D # define GL_OP_CLAMP_EXT 0 x878E # define GL_OP_FLOOR_EXT 0 x878F # define GL_OP_ROUND_EXT 0 x8790 # define GL_OP_EXP_BASE_2_EXT 0 x8791 # define GL_OP_LOG_BASE_2_EXT 0 x8792 # define GL_OP_POWER_EXT 0 x8793 # define GL_OP_RECIP_EXT 0 x8794 # define GL_OP_RECIP_SQRT_EXT 0 x8795 # define GL_OP_SUB_EXT 0 x8796 # define GL_OP_CROSS_PRODUCT_EXT 0 x8797 # define GL_OP_MULTIPLY_MATRIX_EXT 0 x8798 # define GL_OP_MOV_EXT 0 x8799 # define GL_OUTPUT_VERTEX_EXT 0 x879A # define GL_OUTPUT_COLOR0_EXT 0 x879B # define GL_OUTPUT_COLOR1_EXT 0 x879C # define GL_OUTPUT_TEXTURE_COORD0_EXT 0 x879D # define GL_OUTPUT_TEXTURE_COORD1_EXT 0 x879E # define GL_OUTPUT_TEXTURE_COORD2_EXT 0 x879F # define GL_OUTPUT_TEXTURE_COORD3_EXT 0 x87A0 # define GL_OUTPUT_TEXTURE_COORD4_EXT 0 x87A1 # define GL_OUTPUT_TEXTURE_COORD5_EXT 0 x87A2 # define GL_OUTPUT_TEXTURE_COORD6_EXT 0 x87A3 # define GL_OUTPUT_TEXTURE_COORD7_EXT 0 x87A4 # define GL_OUTPUT_TEXTURE_COORD8_EXT 0 x87A5 # define GL_OUTPUT_TEXTURE_COORD9_EXT 0 x87A6 # define GL_OUTPUT_TEXTURE_COORD10_EXT 0 x87A7 # define GL_OUTPUT_TEXTURE_COORD11_EXT 0 x87A8 # define GL_OUTPUT_TEXTURE_COORD12_EXT 0 x87A9 # define GL_OUTPUT_TEXTURE_COORD13_EXT 0 x87AA # define GL_OUTPUT_TEXTURE_COORD14_EXT 0 x87AB # define GL_OUTPUT_TEXTURE_COORD15_EXT 0 x87AC # define GL_OUTPUT_TEXTURE_COORD16_EXT 0 x87AD # define GL_OUTPUT_TEXTURE_COORD17_EXT 0 x87AE # define GL_OUTPUT_TEXTURE_COORD18_EXT 0 x87AF # define GL_OUTPUT_TEXTURE_COORD19_EXT 0 x87B0 # define GL_OUTPUT_TEXTURE_COORD20_EXT 0 x87B1 # define GL_OUTPUT_TEXTURE_COORD21_EXT 0 x87B2 # define GL_OUTPUT_TEXTURE_COORD22_EXT 0 x87B3 # define GL_OUTPUT_TEXTURE_COORD23_EXT 0 x87B4 # define GL_OUTPUT_TEXTURE_COORD24_EXT 0 x87B5 # define GL_OUTPUT_TEXTURE_COORD25_EXT 0 x87B6 # define GL_OUTPUT_TEXTURE_COORD26_EXT 0 x87B7 # define GL_OUTPUT_TEXTURE_COORD27_EXT 0 x87B8 # define GL_OUTPUT_TEXTURE_COORD28_EXT 0 x87B9 # define GL_OUTPUT_TEXTURE_COORD29_EXT 0 x87BA # define GL_OUTPUT_TEXTURE_COORD30_EXT 0 x87BB # define GL_OUTPUT_TEXTURE_COORD31_EXT 0 x87BC # define GL_OUTPUT_FOG_EXT 0 x87BD # define GL_SCALAR_EXT 0 x87BE # define GL_VECTOR_EXT 0 x87BF # define GL_MATRIX_EXT 0 x87C0 # define GL_VARIANT_EXT 0 x87C1 # define GL_INVARIANT_EXT 0 x87C2 # define GL_LOCAL_CONSTANT_EXT 0 x87C3 # define GL_LOCAL_EXT 0 x87C4 # define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0 x87C5 # define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0 x87C6 # define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0 x87C7 # define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0 x87C8 # define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0 x87C9 # define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0 x87CA # define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0 x87CB # define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0 x87CC # define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0 x87CD # define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0 x87CE # define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0 x87CF # define GL_VERTEX_SHADER_VARIANTS_EXT 0 x87D0 # define GL_VERTEX_SHADER_INVARIANTS_EXT 0 x87D1 # define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0 x87D2 # define GL_VERTEX_SHADER_LOCALS_EXT 0 x87D3 # define GL_VERTEX_SHADER_OPTIMIZED_EXT 0 x87D4 # define GL_X_EXT 0 x87D5 # define GL_Y_EXT 0 x87D6 # define GL_Z_EXT 0 x87D7 # define GL_W_EXT 0 x87D8 # define GL_NEGATIVE_X_EXT 0 x87D9 # define GL_NEGATIVE_Y_EXT 0 x87DA # define GL_NEGATIVE_Z_EXT 0 x87DB # define GL_NEGATIVE_W_EXT 0 x87DC # define GL_ZERO_EXT 0 x87DD # define GL_ONE_EXT 0 x87DE # define GL_NEGATIVE_ONE_EXT 0 x87DF # define GL_NORMALIZED_RANGE_EXT 0 x87E0 # define GL_FULL_RANGE_EXT 0 x87E1 # define GL_CURRENT_VERTEX_EXT 0 x87E2 # define GL_MVP_MATRIX_EXT 0 x87E3 # define GL_VARIANT_VALUE_EXT 0 x87E4 # define GL_VARIANT_DATATYPE_EXT 0 x87E5 # define GL_VARIANT_ARRAY_STRIDE_EXT 0 x87E6 # define GL_VARIANT_ARRAY_TYPE_EXT 0 x87E7 # define GL_VARIANT_ARRAY_EXT 0 x87E8 # define GL_VARIANT_ARRAY_POINTER_EXT 0 x87E9 # define GL_INVARIANT_VALUE_EXT 0 x87EA # define GL_INVARIANT_DATATYPE_EXT 0 x87EB # define GL_LOCAL_CONSTANT_VALUE_EXT 0 x87EC # define GL_LOCAL_CONSTANT_DATATYPE_EXT 0 x87ED typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDVERTEXSHADEREXTPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const void *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const void *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const void *addr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLBINDPARAMETEREXTPROC) (GLenum value)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, void **data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "glBeginVertexShaderEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBeginVertexShaderEXT(void)"
  },
  {
    "label": "glEndVertexShaderEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndVertexShaderEXT(void)"
  },
  {
    "label": "glBindVertexShaderEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVertexShaderEXT(GLuint id)"
  },
  {
    "label": "glGenVertexShadersEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGenVertexShadersEXT(GLuint range)"
  },
  {
    "label": "glDeleteVertexShaderEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteVertexShaderEXT(GLuint id)"
  },
  {
    "label": "glShaderOp1EXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)"
  },
  {
    "label": "glShaderOp2EXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)"
  },
  {
    "label": "glShaderOp3EXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)"
  },
  {
    "label": "glSwizzleEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)"
  },
  {
    "label": "glWriteMaskEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)"
  },
  {
    "label": "glInsertComponentEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInsertComponentEXT(GLuint res, GLuint src, GLuint num)"
  },
  {
    "label": "glExtractComponentEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glExtractComponentEXT(GLuint res, GLuint src, GLuint num)"
  },
  {
    "label": "glGenSymbolsEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)"
  },
  {
    "label": "glSetInvariantEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSetInvariantEXT(GLuint id, GLenum type, const void *addr)"
  },
  {
    "label": "glSetLocalConstantEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSetLocalConstantEXT(GLuint id, GLenum type, const void *addr)"
  },
  {
    "label": "glVariantbvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantbvEXT(GLuint id, const GLbyte *addr)"
  },
  {
    "label": "glVariantsvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantsvEXT(GLuint id, const GLshort *addr)"
  },
  {
    "label": "glVariantivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantivEXT(GLuint id, const GLint *addr)"
  },
  {
    "label": "glVariantfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantfvEXT(GLuint id, const GLfloat *addr)"
  },
  {
    "label": "glVariantdvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantdvEXT(GLuint id, const GLdouble *addr)"
  },
  {
    "label": "glVariantubvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantubvEXT(GLuint id, const GLubyte *addr)"
  },
  {
    "label": "glVariantusvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantusvEXT(GLuint id, const GLushort *addr)"
  },
  {
    "label": "glVariantuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantuivEXT(GLuint id, const GLuint *addr)"
  },
  {
    "label": "glVariantPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void *addr)"
  },
  {
    "label": "glEnableVariantClientStateEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableVariantClientStateEXT(GLuint id)"
  },
  {
    "label": "glDisableVariantClientStateEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVariantClientStateEXT(GLuint id)"
  },
  {
    "label": "glBindLightParameterEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glBindLightParameterEXT(GLenum light, GLenum value)"
  },
  {
    "label": "glBindMaterialParameterEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glBindMaterialParameterEXT(GLenum face, GLenum value)"
  },
  {
    "label": "glBindTexGenParameterEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)"
  },
  {
    "label": "glBindTextureUnitParameterEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glBindTextureUnitParameterEXT(GLenum unit, GLenum value)"
  },
  {
    "label": "glBindParameterEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glBindParameterEXT(GLenum value)"
  },
  {
    "label": "glIsVariantEnabledEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsVariantEnabledEXT(GLuint id, GLenum cap)"
  },
  {
    "label": "glGetVariantBooleanvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "glGetVariantIntegervEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "glGetVariantFloatvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "glGetVariantPointervEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVariantPointervEXT(GLuint id, GLenum value, void **data)"
  },
  {
    "label": "glGetInvariantBooleanvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "glGetInvariantIntegervEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "glGetInvariantFloatvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "glGetLocalConstantBooleanvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "glGetLocalConstantIntegervEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "glGetLocalConstantFloatvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_vertex_weighting # define GL_EXT_vertex_weighting 1 # define GL_MODELVIEW0_STACK_DEPTH_EXT 0 x0BA3 # define GL_MODELVIEW1_STACK_DEPTH_EXT 0 x8502 # define GL_MODELVIEW0_MATRIX_EXT 0 x0BA6 # define GL_MODELVIEW1_MATRIX_EXT 0 x8506 # define GL_VERTEX_WEIGHTING_EXT 0 x8509 # define GL_MODELVIEW0_EXT 0 x1700 # define GL_MODELVIEW1_EXT 0 x850A # define GL_CURRENT_VERTEX_WEIGHT_EXT 0 x850B # define GL_VERTEX_WEIGHT_ARRAY_EXT 0 x850C # define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0 x850D # define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0 x850E # define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0 x850F # define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0 x8510 typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glVertexWeightfEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexWeightfEXT(GLfloat weight)"
  },
  {
    "label": "glVertexWeightfvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexWeightfvEXT(const GLfloat *weight)"
  },
  {
    "label": "glVertexWeightPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_window_rectangles # define GL_EXT_window_rectangles 1 # define GL_INCLUSIVE_EXT 0 x8F10 # define GL_EXCLUSIVE_EXT 0 x8F11 # define GL_WINDOW_RECTANGLE_EXT 0 x8F12 # define GL_WINDOW_RECTANGLE_MODE_EXT 0 x8F13 # define GL_MAX_WINDOW_RECTANGLES_EXT 0 x8F14 # define GL_NUM_WINDOW_RECTANGLES_EXT 0 x8F15 typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWRECTANGLESEXTPROC) (GLenum mode, GLsizei count, const GLint *box)"
  },
  {
    "label": "glWindowRectanglesEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box)"
  },
  {
    "label": "GLsync()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_EXT_x11_sync_object # define GL_EXT_x11_sync_object 1 # define GL_SYNC_X11_FENCE_EXT 0 x90E1 typedef)",
    "insertText": "GLsync(APIENTRYP PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)"
  },
  {
    "label": "glImportSyncEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLsync APIENTRY)",
    "insertText": "glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_GREMEDY_frame_terminator # define GL_GREMEDY_frame_terminator 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC) (void)"
  },
  {
    "label": "glFrameTerminatorGREMEDY()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFrameTerminatorGREMEDY(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_GREMEDY_string_marker # define GL_GREMEDY_string_marker 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void *string)"
  },
  {
    "label": "glStringMarkerGREMEDY()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glStringMarkerGREMEDY(GLsizei len, const void *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_HP_convolution_border_modes # define GL_HP_convolution_border_modes 1 # define GL_IGNORE_BORDER_HP 0 x8150 # define GL_CONSTANT_BORDER_HP 0 x8151 # define GL_REPLICATE_BORDER_HP 0 x8153 # define GL_CONVOLUTION_BORDER_COLOR_HP 0 x8154 # endif # ifndef GL_HP_image_transform # define GL_HP_image_transform 1 # define GL_IMAGE_SCALE_X_HP 0 x8155 # define GL_IMAGE_SCALE_Y_HP 0 x8156 # define GL_IMAGE_TRANSLATE_X_HP 0 x8157 # define GL_IMAGE_TRANSLATE_Y_HP 0 x8158 # define GL_IMAGE_ROTATE_ANGLE_HP 0 x8159 # define GL_IMAGE_ROTATE_ORIGIN_X_HP 0 x815A # define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0 x815B # define GL_IMAGE_MAG_FILTER_HP 0 x815C # define GL_IMAGE_MIN_FILTER_HP 0 x815D # define GL_IMAGE_CUBIC_WEIGHT_HP 0 x815E # define GL_CUBIC_HP 0 x815F # define GL_AVERAGE_HP 0 x8160 # define GL_IMAGE_TRANSFORM_2D_HP 0 x8161 # define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0 x8162 # define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0 x8163 typedef)",
    "insertText": "void(APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glImageTransformParameteriHP()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glImageTransformParameterfHP()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glImageTransformParameterivHP()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glImageTransformParameterfvHP()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetImageTransformParameterivHP()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetImageTransformParameterfvHP()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_HP_occlusion_test # define GL_HP_occlusion_test 1 # define GL_OCCLUSION_TEST_HP 0 x8165 # define GL_OCCLUSION_TEST_RESULT_HP 0 x8166 # endif # ifndef GL_HP_texture_lighting # define GL_HP_texture_lighting 1 # define GL_TEXTURE_LIGHTING_MODE_HP 0 x8167 # define GL_TEXTURE_POST_SPECULAR_HP 0 x8168 # define GL_TEXTURE_PRE_SPECULAR_HP 0 x8169 # endif # ifndef GL_IBM_cull_vertex # define GL_IBM_cull_vertex 1 # define GL_CULL_VERTEX_IBM 1 0 3 0 5 0 # endif # ifndef GL_IBM_multimode_draw_arrays # define GL_IBM_multimode_draw_arrays 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride)"
  },
  {
    "label": "glMultiModeDrawArraysIBM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)"
  },
  {
    "label": "glMultiModeDrawElementsIBM()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_IBM_rasterpos_clip # define GL_IBM_rasterpos_clip 1 # define GL_RASTER_POSITION_UNCLIPPED_IBM 0 x19262 # endif # ifndef GL_IBM_static_data # define GL_IBM_static_data 1 # define GL_ALL_STATIC_DATA_IBM 1 0 3 0 6 0 # define GL_STATIC_VERTEX_ARRAY_IBM 1 0 3 0 6 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHSTATICDATAIBMPROC) (GLenum target)"
  },
  {
    "label": "glFlushStaticDataIBM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFlushStaticDataIBM(GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_IBM_texture_mirrored_repeat # define GL_IBM_texture_mirrored_repeat 1 # define GL_MIRRORED_REPEAT_IBM 0 x8370 # endif # ifndef GL_IBM_vertex_array_lists # define GL_IBM_vertex_array_lists 1 # define GL_VERTEX_ARRAY_LIST_IBM 1 0 3 0 7 0 # define GL_NORMAL_ARRAY_LIST_IBM 1 0 3 0 7 1 # define GL_COLOR_ARRAY_LIST_IBM 1 0 3 0 7 2 # define GL_INDEX_ARRAY_LIST_IBM 1 0 3 0 7 3 # define GL_TEXTURE_COORD_ARRAY_LIST_IBM 1 0 3 0 7 4 # define GL_EDGE_FLAG_ARRAY_LIST_IBM 1 0 3 0 7 5 # define GL_FOG_COORDINATE_ARRAY_LIST_IBM 1 0 3 0 7 6 # define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 1 0 3 0 7 7 # define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 1 0 3 0 8 0 # define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 1 0 3 0 8 1 # define GL_COLOR_ARRAY_LIST_STRIDE_IBM 1 0 3 0 8 2 # define GL_INDEX_ARRAY_LIST_STRIDE_IBM 1 0 3 0 8 3 # define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 1 0 3 0 8 4 # define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 1 0 3 0 8 5 # define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 1 0 3 0 8 6 # define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 1 0 3 0 8 7 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean **pointer, GLint ptrstride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glColorPointerListIBM()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glSecondaryColorPointerListIBM()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glEdgeFlagPointerListIBM()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)"
  },
  {
    "label": "glFogCoordPointerListIBM()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glIndexPointerListIBM()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glIndexPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glNormalPointerListIBM()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glTexCoordPointerListIBM()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glVertexPointerListIBM()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_INGR_blend_func_separate # define GL_INGR_blend_func_separate 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glBlendFuncSeparateINGR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_INGR_color_clamp # define GL_INGR_color_clamp 1 # define GL_RED_MIN_CLAMP_INGR 0 x8560 # define GL_GREEN_MIN_CLAMP_INGR 0 x8561 # define GL_BLUE_MIN_CLAMP_INGR 0 x8562 # define GL_ALPHA_MIN_CLAMP_INGR 0 x8563 # define GL_RED_MAX_CLAMP_INGR 0 x8564 # define GL_GREEN_MAX_CLAMP_INGR 0 x8565 # define GL_BLUE_MAX_CLAMP_INGR 0 x8566 # define GL_ALPHA_MAX_CLAMP_INGR 0 x8567 # endif # ifndef GL_INGR_interlace_read # define GL_INGR_interlace_read 1 # define GL_INTERLACE_READ_INGR 0 x8568 # endif # ifndef GL_INTEL_conservative_rasterization # define GL_INTEL_conservative_rasterization 1 # define GL_CONSERVATIVE_RASTERIZATION_INTEL 0 x83FE # endif # ifndef GL_INTEL_fragment_shader_ordering # define GL_INTEL_fragment_shader_ordering 1 # endif # ifndef GL_INTEL_framebuffer_CMAA # define GL_INTEL_framebuffer_CMAA 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC) (void)"
  },
  {
    "label": "glApplyFramebufferAttachmentCMAAINTEL()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glApplyFramebufferAttachmentCMAAINTEL(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_INTEL_map_texture # define GL_INTEL_map_texture 1 # define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0 x83FF # define GL_LAYOUT_DEFAULT_INTEL 0 # define GL_LAYOUT_LINEAR_INTEL 1 # define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2 typedef)",
    "insertText": "void(APIENTRYP PFNGLSYNCTEXTUREINTELPROC) (GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)"
  },
  {
    "label": "glSyncTextureINTEL()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSyncTextureINTEL(GLuint texture)"
  },
  {
    "label": "glUnmapTexture2DINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUnmapTexture2DINTEL(GLuint texture, GLint level)"
  },
  {
    "label": "glMapTexture2DINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_INTEL_parallel_arrays # define GL_INTEL_parallel_arrays 1 # define GL_PARALLEL_ARRAYS_INTEL 0 x83F4 # define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0 x83F5 # define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0 x83F6 # define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0 x83F7 # define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0 x83F8 typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void **pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "glVertexPointervINTEL()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexPointervINTEL(GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "glNormalPointervINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalPointervINTEL(GLenum type, const void **pointer)"
  },
  {
    "label": "glColorPointervINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorPointervINTEL(GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "glTexCoordPointervINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordPointervINTEL(GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_INTEL_performance_query # define GL_INTEL_performance_query 1 # define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0 x00000000 # define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0 x00000001 # define GL_PERFQUERY_WAIT_INTEL 0 x83FB # define GL_PERFQUERY_FLUSH_INTEL 0 x83FA # define GL_PERFQUERY_DONOT_FLUSH_INTEL 0 x83F9 # define GL_PERFQUERY_COUNTER_EVENT_INTEL 0 x94F0 # define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0 x94F1 # define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0 x94F2 # define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0 x94F3 # define GL_PERFQUERY_COUNTER_RAW_INTEL 0 x94F4 # define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0 x94F5 # define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0 x94F8 # define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0 x94F9 # define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0 x94FA # define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0 x94FB # define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0 x94FC # define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0 x94FD # define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0 x94FE # define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0 x94FF # define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0 x9500 typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint *queryHandle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint *queryId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint *nextQueryId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar *queryName, GLuint *queryId)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)"
  },
  {
    "label": "glBeginPerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBeginPerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glCreatePerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle)"
  },
  {
    "label": "glDeletePerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeletePerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glEndPerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndPerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glGetFirstPerfQueryIdINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFirstPerfQueryIdINTEL(GLuint *queryId)"
  },
  {
    "label": "glGetNextPerfQueryIdINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId)"
  },
  {
    "label": "glGetPerfCounterInfoINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)"
  },
  {
    "label": "glGetPerfQueryDataINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten)"
  },
  {
    "label": "glGetPerfQueryIdByNameINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId)"
  },
  {
    "label": "glGetPerfQueryInfoINTEL()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_MESAX_texture_stack # define GL_MESAX_texture_stack 1 # define GL_TEXTURE_1D_STACK_MESAX 0 x8759 # define GL_TEXTURE_2D_STACK_MESAX 0 x875A # define GL_PROXY_TEXTURE_1D_STACK_MESAX 0 x875B # define GL_PROXY_TEXTURE_2D_STACK_MESAX 0 x875C # define GL_TEXTURE_1D_STACK_BINDING_MESAX 0 x875D # define GL_TEXTURE_2D_STACK_BINDING_MESAX 0 x875E # endif # ifndef GL_MESA_pack_invert # define GL_MESA_pack_invert 1 # define GL_PACK_INVERT_MESA 0 x8758 # endif # ifndef GL_MESA_resize_buffers # define GL_MESA_resize_buffers 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLRESIZEBUFFERSMESAPROC) (void)"
  },
  {
    "label": "glResizeBuffersMESA()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glResizeBuffersMESA(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_MESA_window_pos # define GL_MESA_window_pos 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v)"
  },
  {
    "label": "glWindowPos2dMESA()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glWindowPos2dMESA(GLdouble x, GLdouble y)"
  },
  {
    "label": "glWindowPos2dvMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2dvMESA(const GLdouble *v)"
  },
  {
    "label": "glWindowPos2fMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2fMESA(GLfloat x, GLfloat y)"
  },
  {
    "label": "glWindowPos2fvMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2fvMESA(const GLfloat *v)"
  },
  {
    "label": "glWindowPos2iMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2iMESA(GLint x, GLint y)"
  },
  {
    "label": "glWindowPos2ivMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2ivMESA(const GLint *v)"
  },
  {
    "label": "glWindowPos2sMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2sMESA(GLshort x, GLshort y)"
  },
  {
    "label": "glWindowPos2svMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos2svMESA(const GLshort *v)"
  },
  {
    "label": "glWindowPos3dMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glWindowPos3dvMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3dvMESA(const GLdouble *v)"
  },
  {
    "label": "glWindowPos3fMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glWindowPos3fvMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3fvMESA(const GLfloat *v)"
  },
  {
    "label": "glWindowPos3iMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3iMESA(GLint x, GLint y, GLint z)"
  },
  {
    "label": "glWindowPos3ivMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3ivMESA(const GLint *v)"
  },
  {
    "label": "glWindowPos3sMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glWindowPos3svMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos3svMESA(const GLshort *v)"
  },
  {
    "label": "glWindowPos4dMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glWindowPos4dvMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos4dvMESA(const GLdouble *v)"
  },
  {
    "label": "glWindowPos4fMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glWindowPos4fvMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos4fvMESA(const GLfloat *v)"
  },
  {
    "label": "glWindowPos4iMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glWindowPos4ivMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos4ivMESA(const GLint *v)"
  },
  {
    "label": "glWindowPos4sMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glWindowPos4svMESA()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWindowPos4svMESA(const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_MESA_ycbcr_texture # define GL_MESA_ycbcr_texture 1 # define GL_UNSIGNED_SHORT_8_8_MESA 0 x85BA # define GL_UNSIGNED_SHORT_8_8_REV_MESA 0 x85BB # define GL_YCBCR_MESA 0 x8757 # endif # ifndef GL_NVX_conditional_render # define GL_NVX_conditional_render 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDCONDITIONALRENDERNVXPROC) (void)"
  },
  {
    "label": "glBeginConditionalRenderNVX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBeginConditionalRenderNVX(GLuint id)"
  },
  {
    "label": "glEndConditionalRenderNVX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndConditionalRenderNVX(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NVX_gpu_memory_info # define GL_NVX_gpu_memory_info 1 # define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0 x9047 # define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0 x9048 # define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0 x9049 # define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0 x904A # define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0 x904B # endif # ifndef GL_NV_bindless_multi_draw_indirect # define GL_NV_bindless_multi_draw_indirect 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "glMultiDrawArraysIndirectBindlessNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "glMultiDrawElementsIndirectBindlessNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_bindless_multi_draw_indirect_count # define GL_NV_bindless_multi_draw_indirect_count 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "glMultiDrawArraysIndirectBindlessCountNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "glMultiDrawElementsIndirectBindlessCountNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_bindless_texture # define GL_NV_bindless_texture 1 typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle)"
  },
  {
    "label": "glGetTextureHandleNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetTextureHandleNV(GLuint texture)"
  },
  {
    "label": "glGetTextureSamplerHandleNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)"
  },
  {
    "label": "glMakeTextureHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeTextureHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "glMakeTextureHandleNonResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeTextureHandleNonResidentNV(GLuint64 handle)"
  },
  {
    "label": "glGetImageHandleNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "glMakeImageHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)"
  },
  {
    "label": "glMakeImageHandleNonResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeImageHandleNonResidentNV(GLuint64 handle)"
  },
  {
    "label": "glUniformHandleui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformHandleui64NV(GLint location, GLuint64 value)"
  },
  {
    "label": "glUniformHandleui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniformHandleui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "glProgramUniformHandleui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "glIsTextureHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsTextureHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "glIsImageHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsImageHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_blend_equation_advanced # define GL_NV_blend_equation_advanced 1 # define GL_BLEND_OVERLAP_NV 0 x9281 # define GL_BLEND_PREMULTIPLIED_SRC_NV 0 x9280 # define GL_BLUE_NV 0 x1905 # define GL_COLORBURN_NV 0 x929A # define GL_COLORDODGE_NV 0 x9299 # define GL_CONJOINT_NV 0 x9284 # define GL_CONTRAST_NV 0 x92A1 # define GL_DARKEN_NV 0 x9297 # define GL_DIFFERENCE_NV 0 x929E # define GL_DISJOINT_NV 0 x9283 # define GL_DST_ATOP_NV 0 x928F # define GL_DST_IN_NV 0 x928B # define GL_DST_NV 0 x9287 # define GL_DST_OUT_NV 0 x928D # define GL_DST_OVER_NV 0 x9289 # define GL_EXCLUSION_NV 0 x92A0 # define GL_GREEN_NV 0 x1904 # define GL_HARDLIGHT_NV 0 x929B # define GL_HARDMIX_NV 0 x92A9 # define GL_HSL_COLOR_NV 0 x92AF # define GL_HSL_HUE_NV 0 x92AD # define GL_HSL_LUMINOSITY_NV 0 x92B0 # define GL_HSL_SATURATION_NV 0 x92AE # define GL_INVERT_OVG_NV 0 x92B4 # define GL_INVERT_RGB_NV 0 x92A3 # define GL_LIGHTEN_NV 0 x9298 # define GL_LINEARBURN_NV 0 x92A5 # define GL_LINEARDODGE_NV 0 x92A4 # define GL_LINEARLIGHT_NV 0 x92A7 # define GL_MINUS_CLAMPED_NV 0 x92B3 # define GL_MINUS_NV 0 x929F # define GL_MULTIPLY_NV 0 x9294 # define GL_OVERLAY_NV 0 x9296 # define GL_PINLIGHT_NV 0 x92A8 # define GL_PLUS_CLAMPED_ALPHA_NV 0 x92B2 # define GL_PLUS_CLAMPED_NV 0 x92B1 # define GL_PLUS_DARKER_NV 0 x9292 # define GL_PLUS_NV 0 x9291 # define GL_RED_NV 0 x1903 # define GL_SCREEN_NV 0 x9295 # define GL_SOFTLIGHT_NV 0 x929C # define GL_SRC_ATOP_NV 0 x928E # define GL_SRC_IN_NV 0 x928A # define GL_SRC_NV 0 x9286 # define GL_SRC_OUT_NV 0 x928C # define GL_SRC_OVER_NV 0 x9288 # define GL_UNCORRELATED_NV 0 x9282 # define GL_VIVIDLIGHT_NV 0 x92A6 # define GL_XOR_NV 0 x1506 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDBARRIERNVPROC) (void)"
  },
  {
    "label": "glBlendParameteriNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendParameteriNV(GLenum pname, GLint value)"
  },
  {
    "label": "glBlendBarrierNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendBarrierNV(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_blend_equation_advanced_coherent # define GL_NV_blend_equation_advanced_coherent 1 # define GL_BLEND_ADVANCED_COHERENT_NV 0 x9285 # endif # ifndef GL_NV_blend_square # define GL_NV_blend_square 1 # endif # ifndef GL_NV_clip_space_w_scaling # define GL_NV_clip_space_w_scaling 1 # define GL_VIEWPORT_POSITION_W_SCALE_NV 0 x937C # define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0 x937D # define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0 x937E typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTPOSITIONWSCALENVPROC) (GLuint index, GLfloat xcoeff, GLfloat ycoeff)"
  },
  {
    "label": "glViewportPositionWScaleNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_command_list # define GL_NV_command_list 1 # define GL_TERMINATE_SEQUENCE_COMMAND_NV 0 x0000 # define GL_NOP_COMMAND_NV 0 x0001 # define GL_DRAW_ELEMENTS_COMMAND_NV 0 x0002 # define GL_DRAW_ARRAYS_COMMAND_NV 0 x0003 # define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0 x0004 # define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0 x0005 # define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0 x0006 # define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0 x0007 # define GL_ELEMENT_ADDRESS_COMMAND_NV 0 x0008 # define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0 x0009 # define GL_UNIFORM_ADDRESS_COMMAND_NV 0 x000A # define GL_BLEND_COLOR_COMMAND_NV 0 x000B # define GL_STENCIL_REF_COMMAND_NV 0 x000C # define GL_LINE_WIDTH_COMMAND_NV 0 x000D # define GL_POLYGON_OFFSET_COMMAND_NV 0 x000E # define GL_ALPHA_REF_COMMAND_NV 0 x000F # define GL_VIEWPORT_COMMAND_NV 0 x0010 # define GL_SCISSOR_COMMAND_NV 0 x0011 # define GL_FRONT_FACE_COMMAND_NV 0 x0012 typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATESTATESNVPROC) (GLsizei n, GLuint *states)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETESTATESNVPROC) (GLsizei n, const GLuint *states)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISSTATENVPROC) (GLuint state)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTATECAPTURENVPROC) (GLuint state, GLenum mode)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETCOMMANDHEADERNVPROC) (GLenum tokenID, GLuint size)"
  },
  {
    "label": "GLushort()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLushort(APIENTRYP PFNGLGETSTAGEINDEXNVPROC) (GLenum shadertype)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWCOMMANDSNVPROC) (GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWCOMMANDSADDRESSNVPROC) (GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWCOMMANDSSTATESNVPROC) (GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC) (const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATECOMMANDLISTSNVPROC) (GLsizei n, GLuint *lists)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETECOMMANDLISTSNVPROC) (GLsizei n, const GLuint *lists)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISCOMMANDLISTNVPROC) (GLuint list)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC) (GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMMANDLISTSEGMENTSNVPROC) (GLuint list, GLuint segments)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPILECOMMANDLISTNVPROC) (GLuint list)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCALLCOMMANDLISTNVPROC) (GLuint list)"
  },
  {
    "label": "glCreateStatesNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCreateStatesNV(GLsizei n, GLuint *states)"
  },
  {
    "label": "glDeleteStatesNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteStatesNV(GLsizei n, const GLuint *states)"
  },
  {
    "label": "glIsStateNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsStateNV(GLuint state)"
  },
  {
    "label": "glStateCaptureNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStateCaptureNV(GLuint state, GLenum mode)"
  },
  {
    "label": "glGetCommandHeaderNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetCommandHeaderNV(GLenum tokenID, GLuint size)"
  },
  {
    "label": "glGetStageIndexNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLushort APIENTRY)",
    "insertText": "glGetStageIndexNV(GLenum shadertype)"
  },
  {
    "label": "glDrawCommandsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count)"
  },
  {
    "label": "glDrawCommandsAddressNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count)"
  },
  {
    "label": "glDrawCommandsStatesNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawCommandsStatesNV(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "glDrawCommandsStatesAddressNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawCommandsStatesAddressNV(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "glCreateCommandListsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateCommandListsNV(GLsizei n, GLuint *lists)"
  },
  {
    "label": "glDeleteCommandListsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteCommandListsNV(GLsizei n, const GLuint *lists)"
  },
  {
    "label": "glIsCommandListNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsCommandListNV(GLuint list)"
  },
  {
    "label": "glListDrawCommandsStatesClientNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "glCommandListSegmentsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCommandListSegmentsNV(GLuint list, GLuint segments)"
  },
  {
    "label": "glCompileCommandListNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompileCommandListNV(GLuint list)"
  },
  {
    "label": "glCallCommandListNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCallCommandListNV(GLuint list)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_compute_program5 # define GL_NV_compute_program5 1 # define GL_COMPUTE_PROGRAM_NV 0 x90FB # define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0 x90FC # endif # ifndef GL_NV_conditional_render # define GL_NV_conditional_render 1 # define GL_QUERY_WAIT_NV 0 x8E13 # define GL_QUERY_NO_WAIT_NV 0 x8E14 # define GL_QUERY_BY_REGION_WAIT_NV 0 x8E15 # define GL_QUERY_BY_REGION_NO_WAIT_NV 0 x8E16 typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) (void)"
  },
  {
    "label": "glBeginConditionalRenderNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBeginConditionalRenderNV(GLuint id, GLenum mode)"
  },
  {
    "label": "glEndConditionalRenderNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndConditionalRenderNV(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_conservative_raster # define GL_NV_conservative_raster 1 # define GL_CONSERVATIVE_RASTERIZATION_NV 0 x9346 # define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0 x9347 # define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0 x9348 # define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0 x9349 typedef)",
    "insertText": "void(APIENTRYP PFNGLSUBPIXELPRECISIONBIASNVPROC) (GLuint xbits, GLuint ybits)"
  },
  {
    "label": "glSubpixelPrecisionBiasNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_conservative_raster_dilate # define GL_NV_conservative_raster_dilate 1 # define GL_CONSERVATIVE_RASTER_DILATE_NV 0 x9379 # define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0 x937A # define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0 x937B typedef)",
    "insertText": "void(APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERFNVPROC) (GLenum pname, GLfloat value)"
  },
  {
    "label": "glConservativeRasterParameterfNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glConservativeRasterParameterfNV(GLenum pname, GLfloat value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_conservative_raster_pre_snap_triangles # define GL_NV_conservative_raster_pre_snap_triangles 1 # define GL_CONSERVATIVE_RASTER_MODE_NV 0 x954D # define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0 x954E # define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0 x954F typedef)",
    "insertText": "void(APIENTRYP PFNGLCONSERVATIVERASTERPARAMETERINVPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "glConservativeRasterParameteriNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glConservativeRasterParameteriNV(GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_copy_depth_to_color # define GL_NV_copy_depth_to_color 1 # define GL_DEPTH_STENCIL_TO_RGBA_NV 0 x886E # define GL_DEPTH_STENCIL_TO_BGRA_NV 0 x886F # endif # ifndef GL_NV_copy_image # define GL_NV_copy_image 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glCopyImageSubDataNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_deep_texture3D # define GL_NV_deep_texture3D 1 # define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0 x90D0 # define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0 x90D1 # endif # ifndef GL_NV_depth_buffer_float # define GL_NV_depth_buffer_float 1 # define GL_DEPTH_COMPONENT32F_NV 0 x8DAB # define GL_DEPTH32F_STENCIL8_NV 0 x8DAC # define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0 x8DAD # define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0 x8DAF typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARDEPTHDNVPROC) (GLdouble depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax)"
  },
  {
    "label": "glDepthRangedNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDepthRangedNV(GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "glClearDepthdNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearDepthdNV(GLdouble depth)"
  },
  {
    "label": "glDepthBoundsdNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_depth_clamp # define GL_NV_depth_clamp 1 # define GL_DEPTH_CLAMP_NV 0 x864F # endif # ifndef GL_NV_draw_texture # define GL_NV_draw_texture 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)"
  },
  {
    "label": "glDrawTextureNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_evaluators # define GL_NV_evaluators 1 # define GL_EVAL_2D_NV 0 x86C0 # define GL_EVAL_TRIANGULAR_2D_NV 0 x86C1 # define GL_MAP_TESSELLATION_NV 0 x86C2 # define GL_MAP_ATTRIB_U_ORDER_NV 0 x86C3 # define GL_MAP_ATTRIB_V_ORDER_NV 0 x86C4 # define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0 x86C5 # define GL_EVAL_VERTEX_ATTRIB0_NV 0 x86C6 # define GL_EVAL_VERTEX_ATTRIB1_NV 0 x86C7 # define GL_EVAL_VERTEX_ATTRIB2_NV 0 x86C8 # define GL_EVAL_VERTEX_ATTRIB3_NV 0 x86C9 # define GL_EVAL_VERTEX_ATTRIB4_NV 0 x86CA # define GL_EVAL_VERTEX_ATTRIB5_NV 0 x86CB # define GL_EVAL_VERTEX_ATTRIB6_NV 0 x86CC # define GL_EVAL_VERTEX_ATTRIB7_NV 0 x86CD # define GL_EVAL_VERTEX_ATTRIB8_NV 0 x86CE # define GL_EVAL_VERTEX_ATTRIB9_NV 0 x86CF # define GL_EVAL_VERTEX_ATTRIB10_NV 0 x86D0 # define GL_EVAL_VERTEX_ATTRIB11_NV 0 x86D1 # define GL_EVAL_VERTEX_ATTRIB12_NV 0 x86D2 # define GL_EVAL_VERTEX_ATTRIB13_NV 0 x86D3 # define GL_EVAL_VERTEX_ATTRIB14_NV 0 x86D4 # define GL_EVAL_VERTEX_ATTRIB15_NV 0 x86D5 # define GL_MAX_MAP_TESSELLATION_NV 0 x86D6 # define GL_MAX_RATIONAL_EVAL_ORDER_NV 0 x86D7 typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode)"
  },
  {
    "label": "glMapControlPointsNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points)"
  },
  {
    "label": "glMapParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glMapParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetMapControlPointsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points)"
  },
  {
    "label": "glGetMapParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMapParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMapAttribParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMapAttribParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glEvalMapsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEvalMapsNV(GLenum target, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_explicit_multisample # define GL_NV_explicit_multisample 1 # define GL_SAMPLE_POSITION_NV 0 x8E50 # define GL_SAMPLE_MASK_NV 0 x8E51 # define GL_SAMPLE_MASK_VALUE_NV 0 x8E52 # define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0 x8E53 # define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0 x8E54 # define GL_TEXTURE_RENDERBUFFER_NV 0 x8E55 # define GL_SAMPLER_RENDERBUFFER_NV 0 x8E56 # define GL_INT_SAMPLER_RENDERBUFFER_NV 0 x8E57 # define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0 x8E58 # define GL_MAX_SAMPLE_MASK_WORDS_NV 0 x8E59 typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glGetMultisamplefvNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "glSampleMaskIndexedNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSampleMaskIndexedNV(GLuint index, GLbitfield mask)"
  },
  {
    "label": "glTexRenderbufferNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexRenderbufferNV(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_fence # define GL_NV_fence 1 # define GL_ALL_COMPLETED_NV 0 x84F2 # define GL_FENCE_STATUS_NV 0 x84F3 # define GL_FENCE_CONDITION_NV 0 x84F4 typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISFENCENVPROC) (GLuint fence)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition)"
  },
  {
    "label": "glDeleteFencesNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDeleteFencesNV(GLsizei n, const GLuint *fences)"
  },
  {
    "label": "glGenFencesNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenFencesNV(GLsizei n, GLuint *fences)"
  },
  {
    "label": "glIsFenceNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsFenceNV(GLuint fence)"
  },
  {
    "label": "glTestFenceNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glTestFenceNV(GLuint fence)"
  },
  {
    "label": "glGetFenceivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)"
  },
  {
    "label": "glFinishFenceNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFinishFenceNV(GLuint fence)"
  },
  {
    "label": "glSetFenceNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSetFenceNV(GLuint fence, GLenum condition)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_fill_rectangle # define GL_NV_fill_rectangle 1 # define GL_FILL_RECTANGLE_NV 0 x933C # endif # ifndef GL_NV_float_buffer # define GL_NV_float_buffer 1 # define GL_FLOAT_R_NV 0 x8880 # define GL_FLOAT_RG_NV 0 x8881 # define GL_FLOAT_RGB_NV 0 x8882 # define GL_FLOAT_RGBA_NV 0 x8883 # define GL_FLOAT_R16_NV 0 x8884 # define GL_FLOAT_R32_NV 0 x8885 # define GL_FLOAT_RG16_NV 0 x8886 # define GL_FLOAT_RG32_NV 0 x8887 # define GL_FLOAT_RGB16_NV 0 x8888 # define GL_FLOAT_RGB32_NV 0 x8889 # define GL_FLOAT_RGBA16_NV 0 x888A # define GL_FLOAT_RGBA32_NV 0 x888B # define GL_TEXTURE_FLOAT_COMPONENTS_NV 0 x888C # define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0 x888D # define GL_FLOAT_RGBA_MODE_NV 0 x888E # endif # ifndef GL_NV_fog_distance # define GL_NV_fog_distance 1 # define GL_FOG_DISTANCE_MODE_NV 0 x855A # define GL_EYE_RADIAL_NV 0 x855B # define GL_EYE_PLANE_ABSOLUTE_NV 0 x855C # endif # ifndef GL_NV_fragment_coverage_to_color # define GL_NV_fragment_coverage_to_color 1 # define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0 x92DD # define GL_FRAGMENT_COVERAGE_COLOR_NV 0 x92DE typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTCOVERAGECOLORNVPROC) (GLuint color)"
  },
  {
    "label": "glFragmentCoverageColorNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFragmentCoverageColorNV(GLuint color)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_fragment_program # define GL_NV_fragment_program 1 # define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0 x8868 # define GL_FRAGMENT_PROGRAM_NV 0 x8870 # define GL_MAX_TEXTURE_COORDS_NV 0 x8871 # define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0 x8872 # define GL_FRAGMENT_PROGRAM_BINDING_NV 0 x8873 # define GL_PROGRAM_ERROR_STRING_NV 0 x8874 typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)"
  },
  {
    "label": "glProgramNamedParameter4fNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glProgramNamedParameter4fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)"
  },
  {
    "label": "glProgramNamedParameter4dNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramNamedParameter4dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)"
  },
  {
    "label": "glGetProgramNamedParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)"
  },
  {
    "label": "glGetProgramNamedParameterdvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_fragment_program2 # define GL_NV_fragment_program2 1 # define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0 x88F4 # define GL_MAX_PROGRAM_CALL_DEPTH_NV 0 x88F5 # define GL_MAX_PROGRAM_IF_DEPTH_NV 0 x88F6 # define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0 x88F7 # define GL_MAX_PROGRAM_LOOP_COUNT_NV 0 x88F8 # endif # ifndef GL_NV_fragment_program4 # define GL_NV_fragment_program4 1 # endif # ifndef GL_NV_fragment_program_option # define GL_NV_fragment_program_option 1 # endif # ifndef GL_NV_fragment_shader_interlock # define GL_NV_fragment_shader_interlock 1 # endif # ifndef GL_NV_framebuffer_mixed_samples # define GL_NV_framebuffer_mixed_samples 1 # define GL_COVERAGE_MODULATION_TABLE_NV 0 x9331 # define GL_COLOR_SAMPLES_NV 0 x8E20 # define GL_DEPTH_SAMPLES_NV 0 x932D # define GL_STENCIL_SAMPLES_NV 0 x932E # define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0 x932F # define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0 x9330 # define GL_COVERAGE_MODULATION_NV 0 x9332 # define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0 x9333 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOVERAGEMODULATIONTABLENVPROC) (GLsizei n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOVERAGEMODULATIONTABLENVPROC) (GLsizei bufsize, GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOVERAGEMODULATIONNVPROC) (GLenum components)"
  },
  {
    "label": "glCoverageModulationTableNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCoverageModulationTableNV(GLsizei n, const GLfloat *v)"
  },
  {
    "label": "glGetCoverageModulationTableNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat *v)"
  },
  {
    "label": "glCoverageModulationNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCoverageModulationNV(GLenum components)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_framebuffer_multisample_coverage # define GL_NV_framebuffer_multisample_coverage 1 # define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0 x8CAB # define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0 x8E10 # define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0 x8E11 # define GL_MULTISAMPLE_COVERAGE_MODES_NV 0 x8E12 typedef)",
    "insertText": "void(APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glRenderbufferStorageMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_geometry_program4 # define GL_NV_geometry_program4 1 # define GL_GEOMETRY_PROGRAM_NV 0 x8C26 # define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0 x8C27 # define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0 x8C28 typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "glProgramVertexLimitNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramVertexLimitNV(GLenum target, GLint limit)"
  },
  {
    "label": "glFramebufferTextureEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTextureFaceEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_geometry_shader4 # define GL_NV_geometry_shader4 1 # endif # ifndef GL_NV_geometry_shader_passthrough # define GL_NV_geometry_shader_passthrough 1 # endif # ifndef GL_NV_gpu_program4 # define GL_NV_gpu_program4 1 # define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0 x8904 # define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0 x8905 # define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0 x8906 # define GL_PROGRAM_RESULT_COMPONENTS_NV 0 x8907 # define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0 x8908 # define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0 x8909 # define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0 x8DA5 # define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0 x8DA6 typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "glProgramLocalParameterI4iNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glProgramLocalParameterI4ivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "glProgramLocalParametersI4ivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "glProgramLocalParameterI4uiNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glProgramLocalParameterI4uivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "glProgramLocalParametersI4uivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glProgramEnvParameterI4iNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glProgramEnvParameterI4ivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "glProgramEnvParametersI4ivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "glProgramEnvParameterI4uiNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glProgramEnvParameterI4uivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "glProgramEnvParametersI4uivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glGetProgramLocalParameterIivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "glGetProgramLocalParameterIuivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "glGetProgramEnvParameterIivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "glGetProgramEnvParameterIuivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_gpu_program5 # define GL_NV_gpu_program5 1 # define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0 x8E5A # define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0 x8E5B # define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0 x8E5C # define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0 x8E5D # define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0 x8E5E # define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0 x8E5F # define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0 x8F44 # define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0 x8F45 typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param)"
  },
  {
    "label": "glProgramSubroutineParametersuivNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glGetProgramSubroutineParameteruivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_gpu_program5_mem_extended # define GL_NV_gpu_program5_mem_extended 1 # endif # ifndef GL_NV_gpu_shader5 # define GL_NV_gpu_shader5 1 # endif # ifndef GL_NV_half_float # define GL_NV_half_float 1 typedef unsigned short GLhalfNV ; # define GL_HALF_FLOAT_NV 0 x140B typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD1HNVPROC) (GLhalfNV s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDHNVPROC) (GLhalfNV fog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "glVertex2hNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertex2hNV(GLhalfNV x, GLhalfNV y)"
  },
  {
    "label": "glVertex2hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex2hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glVertex3hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)"
  },
  {
    "label": "glVertex3hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glVertex4hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)"
  },
  {
    "label": "glVertex4hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertex4hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glNormal3hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)"
  },
  {
    "label": "glNormal3hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormal3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glColor3hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)"
  },
  {
    "label": "glColor3hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glColor4hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)"
  },
  {
    "label": "glColor4hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glTexCoord1hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord1hNV(GLhalfNV s)"
  },
  {
    "label": "glTexCoord1hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord1hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glTexCoord2hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2hNV(GLhalfNV s, GLhalfNV t)"
  },
  {
    "label": "glTexCoord2hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glTexCoord3hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)"
  },
  {
    "label": "glTexCoord3hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glTexCoord4hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)"
  },
  {
    "label": "glTexCoord4hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glMultiTexCoord1hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1hNV(GLenum target, GLhalfNV s)"
  },
  {
    "label": "glMultiTexCoord1hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "glMultiTexCoord2hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)"
  },
  {
    "label": "glMultiTexCoord2hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "glMultiTexCoord3hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)"
  },
  {
    "label": "glMultiTexCoord3hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "glMultiTexCoord4hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)"
  },
  {
    "label": "glMultiTexCoord4hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "glFogCoordhNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordhNV(GLhalfNV fog)"
  },
  {
    "label": "glFogCoordhvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordhvNV(const GLhalfNV *fog)"
  },
  {
    "label": "glSecondaryColor3hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)"
  },
  {
    "label": "glSecondaryColor3hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColor3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glVertexWeighthNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexWeighthNV(GLhalfNV weight)"
  },
  {
    "label": "glVertexWeighthvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexWeighthvNV(const GLhalfNV *weight)"
  },
  {
    "label": "glVertexAttrib1hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1hNV(GLuint index, GLhalfNV x)"
  },
  {
    "label": "glVertexAttrib1hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttrib2hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)"
  },
  {
    "label": "glVertexAttrib2hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttrib3hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)"
  },
  {
    "label": "glVertexAttrib3hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttrib4hNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)"
  },
  {
    "label": "glVertexAttrib4hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttribs1hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttribs2hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttribs3hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttribs4hvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_internalformat_sample_query # define GL_NV_internalformat_sample_query 1 # define GL_MULTISAMPLES_NV 0 x9371 # define GL_SUPERSAMPLE_SCALE_X_NV 0 x9372 # define GL_SUPERSAMPLE_SCALE_Y_NV 0 x9373 # define GL_CONFORMANT_NV 0 x9374 typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTERNALFORMATSAMPLEIVNVPROC) (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetInternalformatSampleivNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_light_max_exponent # define GL_NV_light_max_exponent 1 # define GL_MAX_SHININESS_NV 0 x8504 # define GL_MAX_SPOT_EXPONENT_NV 0 x8505 # endif # ifndef GL_NV_multisample_coverage # define GL_NV_multisample_coverage 1 # endif # ifndef GL_NV_multisample_filter_hint # define GL_NV_multisample_filter_hint 1 # define GL_MULTISAMPLE_FILTER_HINT_NV 0 x8534 # endif # ifndef GL_NV_occlusion_query # define GL_NV_occlusion_query 1 # define GL_PIXEL_COUNTER_BITS_NV 0 x8864 # define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0 x8865 # define GL_PIXEL_COUNT_NV 0 x8866 # define GL_PIXEL_COUNT_AVAILABLE_NV 0 x8867 typedef)",
    "insertText": "void(APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGenOcclusionQueriesNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteOcclusionQueriesNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsOcclusionQueryNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsOcclusionQueryNV(GLuint id)"
  },
  {
    "label": "glBeginOcclusionQueryNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginOcclusionQueryNV(GLuint id)"
  },
  {
    "label": "glEndOcclusionQueryNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndOcclusionQueryNV(void)"
  },
  {
    "label": "glGetOcclusionQueryivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetOcclusionQueryuivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_packed_depth_stencil # define GL_NV_packed_depth_stencil 1 # define GL_DEPTH_STENCIL_NV 0 x84F9 # define GL_UNSIGNED_INT_24_8_NV 0 x84FA # endif # ifndef GL_NV_parameter_buffer_object # define GL_NV_parameter_buffer_object 1 # define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0 x8DA0 # define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0 x8DA1 # define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0 x8DA2 # define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0 x8DA3 # define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0 x8DA4 typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glProgramBufferParametersfvNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "glProgramBufferParametersIivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params)"
  },
  {
    "label": "glProgramBufferParametersIuivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_parameter_buffer_object2 # define GL_NV_parameter_buffer_object2 1 # endif # ifndef GL_NV_path_rendering # define GL_NV_path_rendering 1 # define GL_PATH_FORMAT_SVG_NV 0 x9070 # define GL_PATH_FORMAT_PS_NV 0 x9071 # define GL_STANDARD_FONT_NAME_NV 0 x9072 # define GL_SYSTEM_FONT_NAME_NV 0 x9073 # define GL_FILE_NAME_NV 0 x9074 # define GL_PATH_STROKE_WIDTH_NV 0 x9075 # define GL_PATH_END_CAPS_NV 0 x9076 # define GL_PATH_INITIAL_END_CAP_NV 0 x9077 # define GL_PATH_TERMINAL_END_CAP_NV 0 x9078 # define GL_PATH_JOIN_STYLE_NV 0 x9079 # define GL_PATH_MITER_LIMIT_NV 0 x907A # define GL_PATH_DASH_CAPS_NV 0 x907B # define GL_PATH_INITIAL_DASH_CAP_NV 0 x907C # define GL_PATH_TERMINAL_DASH_CAP_NV 0 x907D # define GL_PATH_DASH_OFFSET_NV 0 x907E # define GL_PATH_CLIENT_LENGTH_NV 0 x907F # define GL_PATH_FILL_MODE_NV 0 x9080 # define GL_PATH_FILL_MASK_NV 0 x9081 # define GL_PATH_FILL_COVER_MODE_NV 0 x9082 # define GL_PATH_STROKE_COVER_MODE_NV 0 x9083 # define GL_PATH_STROKE_MASK_NV 0 x9084 # define GL_COUNT_UP_NV 0 x9088 # define GL_COUNT_DOWN_NV 0 x9089 # define GL_PATH_OBJECT_BOUNDING_BOX_NV 0 x908A # define GL_CONVEX_HULL_NV 0 x908B # define GL_BOUNDING_BOX_NV 0 x908D # define GL_TRANSLATE_X_NV 0 x908E # define GL_TRANSLATE_Y_NV 0 x908F # define GL_TRANSLATE_2D_NV 0 x9090 # define GL_TRANSLATE_3D_NV 0 x9091 # define GL_AFFINE_2D_NV 0 x9092 # define GL_AFFINE_3D_NV 0 x9094 # define GL_TRANSPOSE_AFFINE_2D_NV 0 x9096 # define GL_TRANSPOSE_AFFINE_3D_NV 0 x9098 # define GL_UTF8_NV 0 x909A # define GL_UTF16_NV 0 x909B # define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0 x909C # define GL_PATH_COMMAND_COUNT_NV 0 x909D # define GL_PATH_COORD_COUNT_NV 0 x909E # define GL_PATH_DASH_ARRAY_COUNT_NV 0 x909F # define GL_PATH_COMPUTED_LENGTH_NV 0 x90A0 # define GL_PATH_FILL_BOUNDING_BOX_NV 0 x90A1 # define GL_PATH_STROKE_BOUNDING_BOX_NV 0 x90A2 # define GL_SQUARE_NV 0 x90A3 # define GL_ROUND_NV 0 x90A4 # define GL_TRIANGULAR_NV 0 x90A5 # define GL_BEVEL_NV 0 x90A6 # define GL_MITER_REVERT_NV 0 x90A7 # define GL_MITER_TRUNCATE_NV 0 x90A8 # define GL_SKIP_MISSING_GLYPH_NV 0 x90A9 # define GL_USE_MISSING_GLYPH_NV 0 x90AA # define GL_PATH_ERROR_POSITION_NV 0 x90AB # define GL_ACCUM_ADJACENT_PAIRS_NV 0 x90AD # define GL_ADJACENT_PAIRS_NV 0 x90AE # define GL_FIRST_TO_REST_NV 0 x90AF # define GL_PATH_GEN_MODE_NV 0 x90B0 # define GL_PATH_GEN_COEFF_NV 0 x90B1 # define GL_PATH_GEN_COMPONENTS_NV 0 x90B3 # define GL_PATH_STENCIL_FUNC_NV 0 x90B7 # define GL_PATH_STENCIL_REF_NV 0 x90B8 # define GL_PATH_STENCIL_VALUE_MASK_NV 0 x90B9 # define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0 x90BD # define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0 x90BE # define GL_PATH_COVER_DEPTH_FUNC_NV 0 x90BF # define GL_PATH_DASH_OFFSET_RESET_NV 0 x90B4 # define GL_MOVE_TO_RESETS_NV 0 x90B5 # define GL_MOVE_TO_CONTINUES_NV 0 x90B6 # define GL_CLOSE_PATH_NV 0 x00 # define GL_MOVE_TO_NV 0 x02 # define GL_RELATIVE_MOVE_TO_NV 0 x03 # define GL_LINE_TO_NV 0 x04 # define GL_RELATIVE_LINE_TO_NV 0 x05 # define GL_HORIZONTAL_LINE_TO_NV 0 x06 # define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0 x07 # define GL_VERTICAL_LINE_TO_NV 0 x08 # define GL_RELATIVE_VERTICAL_LINE_TO_NV 0 x09 # define GL_QUADRATIC_CURVE_TO_NV 0 x0A # define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0 x0B # define GL_CUBIC_CURVE_TO_NV 0 x0C # define GL_RELATIVE_CUBIC_CURVE_TO_NV 0 x0D # define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0 x0E # define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0 x0F # define GL_SMOOTH_CUBIC_CURVE_TO_NV 0 x10 # define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0 x11 # define GL_SMALL_CCW_ARC_TO_NV 0 x12 # define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0 x13 # define GL_SMALL_CW_ARC_TO_NV 0 x14 # define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0 x15 # define GL_LARGE_CCW_ARC_TO_NV 0 x16 # define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0 x17 # define GL_LARGE_CW_ARC_TO_NV 0 x18 # define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0 x19 # define GL_RESTART_PATH_NV 0 xF0 # define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0 xF2 # define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0 xF4 # define GL_RECT_NV 0 xF6 # define GL_CIRCULAR_CCW_ARC_TO_NV 0 xF8 # define GL_CIRCULAR_CW_ARC_TO_NV 0 xFA # define GL_CIRCULAR_TANGENT_ARC_TO_NV 0 xFC # define GL_ARC_TO_NV 0 xFE # define GL_RELATIVE_ARC_TO_NV 0 xFF # define GL_BOLD_BIT_NV 0 x01 # define GL_ITALIC_BIT_NV 0 x02 # define GL_GLYPH_WIDTH_BIT_NV 0 x01 # define GL_GLYPH_HEIGHT_BIT_NV 0 x02 # define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0 x04 # define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0 x08 # define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0 x10 # define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0 x20 # define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0 x40 # define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0 x80 # define GL_GLYPH_HAS_KERNING_BIT_NV 0 x100 # define GL_FONT_X_MIN_BOUNDS_BIT_NV 0 x00010000 # define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0 x00020000 # define GL_FONT_X_MAX_BOUNDS_BIT_NV 0 x00040000 # define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0 x00080000 # define GL_FONT_UNITS_PER_EM_BIT_NV 0 x00100000 # define GL_FONT_ASCENDER_BIT_NV 0 x00200000 # define GL_FONT_DESCENDER_BIT_NV 0 x00400000 # define GL_FONT_HEIGHT_BIT_NV 0 x00800000 # define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0 x01000000 # define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0 x02000000 # define GL_FONT_UNDERLINE_POSITION_BIT_NV 0 x04000000 # define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0 x08000000 # define GL_FONT_HAS_KERNING_BIT_NV 0 x10000000 # define GL_ROUNDED_RECT_NV 0 xE8 # define GL_RELATIVE_ROUNDED_RECT_NV 0 xE9 # define GL_ROUNDED_RECT2_NV 0 xEA # define GL_RELATIVE_ROUNDED_RECT2_NV 0 xEB # define GL_ROUNDED_RECT4_NV 0 xEC # define GL_RELATIVE_ROUNDED_RECT4_NV 0 xED # define GL_ROUNDED_RECT8_NV 0 xEE # define GL_RELATIVE_ROUNDED_RECT8_NV 0 xEF # define GL_RELATIVE_RECT_NV 0 xF7 # define GL_FONT_GLYPHS_AVAILABLE_NV 0 x9368 # define GL_FONT_TARGET_UNAVAILABLE_NV 0 x9369 # define GL_FONT_UNAVAILABLE_NV 0 x936A # define GL_FONT_UNINTELLIGIBLE_NV 0 x936B # define GL_CONIC_CURVE_TO_NV 0 x1A # define GL_RELATIVE_CONIC_CURVE_TO_NV 0 x1B # define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0 x20000000 # define GL_STANDARD_FONT_FORMAT_NV 0 x936C # define GL_2_BYTES_NV 0 x1407 # define GL_3_BYTES_NV 0 x1408 # define GL_4_BYTES_NV 0 x1409 # define GL_EYE_LINEAR_NV 0 x2400 # define GL_OBJECT_LINEAR_NV 0 x2401 # define GL_CONSTANT_NV 0 x8576 # define GL_PATH_FOG_GEN_MODE_NV 0 x90AC # define GL_PRIMARY_COLOR_NV 0 x852C # define GL_SECONDARY_COLOR_NV 0 x852D # define GL_PATH_GEN_COLOR_FORMAT_NV 0 x90B2 # define GL_PATH_PROJECTION_NV 0 x1701 # define GL_PATH_MODELVIEW_NV 0 x1700 # define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0 x0BA3 # define GL_PATH_MODELVIEW_MATRIX_NV 0 x0BA6 # define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0 x0D36 # define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0 x84E3 # define GL_PATH_PROJECTION_STACK_DEPTH_NV 0 x0BA4 # define GL_PATH_PROJECTION_MATRIX_NV 0 x0BA7 # define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0 x0D38 # define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0 x84E4 # define GL_FRAGMENT_INPUT_NV 0 x936D typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGENPATHSNVPROC) (GLsizei range)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPATHNVPROC) (GLuint path)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum func)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y)"
  },
  {
    "label": "GLfloat()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLfloat(APIENTRYP PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXLOAD3X2FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXLOAD3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXMULT3X2FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXMULT3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC) (GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLPATHGLYPHINDEXRANGENVPROC) (GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLPATHGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC) (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC) (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMRESOURCEFVNVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATHFOGGENNVPROC) (GLenum genMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value)"
  },
  {
    "label": "glGenPathsNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLuint APIENTRY)",
    "insertText": "glGenPathsNV(GLsizei range)"
  },
  {
    "label": "glDeletePathsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeletePathsNV(GLuint path, GLsizei range)"
  },
  {
    "label": "glIsPathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsPathNV(GLuint path)"
  },
  {
    "label": "glPathCommandsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathCoordsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathSubCommandsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathSubCoordsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathStringNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString)"
  },
  {
    "label": "glPathGlyphsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glPathGlyphRangeNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glWeightPathsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)"
  },
  {
    "label": "glCopyPathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyPathNV(GLuint resultPath, GLuint srcPath)"
  },
  {
    "label": "glInterpolatePathsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)"
  },
  {
    "label": "glTransformPathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)"
  },
  {
    "label": "glPathParameteriNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathParameteriNV(GLuint path, GLenum pname, GLint value)"
  },
  {
    "label": "glPathParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)"
  },
  {
    "label": "glPathParameterfNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)"
  },
  {
    "label": "glPathDashArrayNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)"
  },
  {
    "label": "glPathStencilFuncNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glPathStencilDepthOffsetNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)"
  },
  {
    "label": "glStencilFillPathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)"
  },
  {
    "label": "glStencilStrokePathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)"
  },
  {
    "label": "glStencilFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glStencilStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathCoverDepthFuncNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathCoverDepthFuncNV(GLenum func)"
  },
  {
    "label": "glCoverFillPathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCoverFillPathNV(GLuint path, GLenum coverMode)"
  },
  {
    "label": "glCoverStrokePathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCoverStrokePathNV(GLuint path, GLenum coverMode)"
  },
  {
    "label": "glCoverFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glCoverStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glGetPathParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value)"
  },
  {
    "label": "glGetPathParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value)"
  },
  {
    "label": "glGetPathCommandsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathCommandsNV(GLuint path, GLubyte *commands)"
  },
  {
    "label": "glGetPathCoordsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathCoordsNV(GLuint path, GLfloat *coords)"
  },
  {
    "label": "glGetPathDashArrayNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathDashArrayNV(GLuint path, GLfloat *dashArray)"
  },
  {
    "label": "glGetPathMetricsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "glGetPathMetricRangeNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "glGetPathSpacingNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)"
  },
  {
    "label": "glIsPointInFillPathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)"
  },
  {
    "label": "glIsPointInStrokePathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)"
  },
  {
    "label": "glGetPathLengthNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLfloat APIENTRY)",
    "insertText": "glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)"
  },
  {
    "label": "glPointAlongPathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)"
  },
  {
    "label": "glMatrixLoad3x2fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoad3x3fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoadTranspose3x3fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMult3x2fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMult3x3fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultTranspose3x3fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glStencilThenCoverFillPathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "glStencilThenCoverStrokePathNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "glStencilThenCoverFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glStencilThenCoverStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathGlyphIndexRangeNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])"
  },
  {
    "label": "glPathGlyphIndexArrayNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glPathMemoryGlyphIndexArrayNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glProgramPathFragmentInputGenNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs)"
  },
  {
    "label": "glGetProgramResourcefvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params)"
  },
  {
    "label": "glPathColorGenNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)"
  },
  {
    "label": "glPathTexGenNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)"
  },
  {
    "label": "glPathFogGenNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPathFogGenNV(GLenum genMode)"
  },
  {
    "label": "glGetPathColorGenivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)"
  },
  {
    "label": "glGetPathColorGenfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)"
  },
  {
    "label": "glGetPathTexGenivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)"
  },
  {
    "label": "glGetPathTexGenfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_path_rendering_shared_edge # define GL_NV_path_rendering_shared_edge 1 # define GL_SHARED_EDGE_NV 0 xC0 # endif # ifndef GL_NV_pixel_data_range # define GL_NV_pixel_data_range 1 # define GL_WRITE_PIXEL_DATA_RANGE_NV 0 x8878 # define GL_READ_PIXEL_DATA_RANGE_NV 0 x8879 # define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0 x887A # define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0 x887B # define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0 x887C # define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0 x887D typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target)"
  },
  {
    "label": "glPixelDataRangeNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPixelDataRangeNV(GLenum target, GLsizei length, const void *pointer)"
  },
  {
    "label": "glFlushPixelDataRangeNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlushPixelDataRangeNV(GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_point_sprite # define GL_NV_point_sprite 1 # define GL_POINT_SPRITE_NV 0 x8861 # define GL_COORD_REPLACE_NV 0 x8862 # define GL_POINT_SPRITE_R_MODE_NV 0 x8863 typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params)"
  },
  {
    "label": "glPointParameteriNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPointParameteriNV(GLenum pname, GLint param)"
  },
  {
    "label": "glPointParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterivNV(GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_present_video # define GL_NV_present_video 1 # define GL_FRAME_NV 0 x8E26 # define GL_FIELDS_NV 0 x8E27 # define GL_CURRENT_TIME_NV 0 x8E28 # define GL_NUM_FILL_STREAMS_NV 0 x8E29 # define GL_PRESENT_TIME_NV 0 x8E2A # define GL_PRESENT_DURATION_NV 0 x8E2B typedef)",
    "insertText": "void(APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glPresentFrameKeyedNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)"
  },
  {
    "label": "glPresentFrameDualFillNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)"
  },
  {
    "label": "glGetVideoivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVideouivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGetVideoi64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)"
  },
  {
    "label": "glGetVideoui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_primitive_restart # define GL_NV_primitive_restart 1 # define GL_PRIMITIVE_RESTART_NV 0 x8558 # define GL_PRIMITIVE_RESTART_INDEX_NV 0 x8559 typedef)",
    "insertText": "void(APIENTRYP PFNGLPRIMITIVERESTARTNVPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index)"
  },
  {
    "label": "glPrimitiveRestartNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPrimitiveRestartNV(void)"
  },
  {
    "label": "glPrimitiveRestartIndexNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPrimitiveRestartIndexNV(GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_register_combiners # define GL_NV_register_combiners 1 # define GL_REGISTER_COMBINERS_NV 0 x8522 # define GL_VARIABLE_A_NV 0 x8523 # define GL_VARIABLE_B_NV 0 x8524 # define GL_VARIABLE_C_NV 0 x8525 # define GL_VARIABLE_D_NV 0 x8526 # define GL_VARIABLE_E_NV 0 x8527 # define GL_VARIABLE_F_NV 0 x8528 # define GL_VARIABLE_G_NV 0 x8529 # define GL_CONSTANT_COLOR0_NV 0 x852A # define GL_CONSTANT_COLOR1_NV 0 x852B # define GL_SPARE0_NV 0 x852E # define GL_SPARE1_NV 0 x852F # define GL_DISCARD_NV 0 x8530 # define GL_E_TIMES_F_NV 0 x8531 # define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0 x8532 # define GL_UNSIGNED_IDENTITY_NV 0 x8536 # define GL_UNSIGNED_INVERT_NV 0 x8537 # define GL_EXPAND_NORMAL_NV 0 x8538 # define GL_EXPAND_NEGATE_NV 0 x8539 # define GL_HALF_BIAS_NORMAL_NV 0 x853A # define GL_HALF_BIAS_NEGATE_NV 0 x853B # define GL_SIGNED_IDENTITY_NV 0 x853C # define GL_SIGNED_NEGATE_NV 0 x853D # define GL_SCALE_BY_TWO_NV 0 x853E # define GL_SCALE_BY_FOUR_NV 0 x853F # define GL_SCALE_BY_ONE_HALF_NV 0 x8540 # define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0 x8541 # define GL_COMBINER_INPUT_NV 0 x8542 # define GL_COMBINER_MAPPING_NV 0 x8543 # define GL_COMBINER_COMPONENT_USAGE_NV 0 x8544 # define GL_COMBINER_AB_DOT_PRODUCT_NV 0 x8545 # define GL_COMBINER_CD_DOT_PRODUCT_NV 0 x8546 # define GL_COMBINER_MUX_SUM_NV 0 x8547 # define GL_COMBINER_SCALE_NV 0 x8548 # define GL_COMBINER_BIAS_NV 0 x8549 # define GL_COMBINER_AB_OUTPUT_NV 0 x854A # define GL_COMBINER_CD_OUTPUT_NV 0 x854B # define GL_COMBINER_SUM_OUTPUT_NV 0 x854C # define GL_MAX_GENERAL_COMBINERS_NV 0 x854D # define GL_NUM_GENERAL_COMBINERS_NV 0 x854E # define GL_COLOR_SUM_CLAMP_NV 0 x854F # define GL_COMBINER0_NV 0 x8550 # define GL_COMBINER1_NV 0 x8551 # define GL_COMBINER2_NV 0 x8552 # define GL_COMBINER3_NV 0 x8553 # define GL_COMBINER4_NV 0 x8554 # define GL_COMBINER5_NV 0 x8555 # define GL_COMBINER6_NV 0 x8556 # define GL_COMBINER7_NV 0 x8557 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params)"
  },
  {
    "label": "glCombinerParameterfvNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCombinerParameterfvNV(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glCombinerParameterfNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCombinerParameterfNV(GLenum pname, GLfloat param)"
  },
  {
    "label": "glCombinerParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCombinerParameterivNV(GLenum pname, const GLint *params)"
  },
  {
    "label": "glCombinerParameteriNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCombinerParameteriNV(GLenum pname, GLint param)"
  },
  {
    "label": "glCombinerInputNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)"
  },
  {
    "label": "glCombinerOutputNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)"
  },
  {
    "label": "glFinalCombinerInputNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)"
  },
  {
    "label": "glGetCombinerInputParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetCombinerInputParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetCombinerOutputParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetCombinerOutputParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetFinalCombinerInputParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetFinalCombinerInputParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_register_combiners2 # define GL_NV_register_combiners2 1 # define GL_PER_STAGE_CONSTANTS_NV 0 x8535 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glCombinerStageParameterfvNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetCombinerStageParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_robustness_video_memory_purge # define GL_NV_robustness_video_memory_purge 1 # define GL_PURGED_CONTEXT_RESET_NV 0 x92BB # endif # ifndef GL_NV_sample_locations # define GL_NV_sample_locations 1 # define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0 x933D # define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0 x933E # define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0 x933F # define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0 x9340 # define GL_SAMPLE_LOCATION_NV 0 x8E50 # define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0 x9341 # define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0 x9342 # define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0 x9343 typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLenum target, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRESOLVEDEPTHVALUESNVPROC) (void)"
  },
  {
    "label": "glFramebufferSampleLocationsfvNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glNamedFramebufferSampleLocationsfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glResolveDepthValuesNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glResolveDepthValuesNV(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_sample_mask_override_coverage # define GL_NV_sample_mask_override_coverage 1 # endif # ifndef GL_NV_shader_atomic_counters # define GL_NV_shader_atomic_counters 1 # endif # ifndef GL_NV_shader_atomic_float # define GL_NV_shader_atomic_float 1 # endif # ifndef GL_NV_shader_atomic_float64 # define GL_NV_shader_atomic_float64 1 # endif # ifndef GL_NV_shader_atomic_fp16_vector # define GL_NV_shader_atomic_fp16_vector 1 # endif # ifndef GL_NV_shader_atomic_int64 # define GL_NV_shader_atomic_int64 1 # endif # ifndef GL_NV_shader_buffer_load # define GL_NV_shader_buffer_load 1 # define GL_BUFFER_GPU_ADDRESS_NV 0 x8F1D # define GL_GPU_ADDRESS_NV 0 x8F34 # define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0 x8F35 typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISBUFFERRESIDENTNVPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glMakeBufferResidentNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMakeBufferResidentNV(GLenum target, GLenum access)"
  },
  {
    "label": "glMakeBufferNonResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeBufferNonResidentNV(GLenum target)"
  },
  {
    "label": "glIsBufferResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsBufferResidentNV(GLenum target)"
  },
  {
    "label": "glMakeNamedBufferResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)"
  },
  {
    "label": "glMakeNamedBufferNonResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeNamedBufferNonResidentNV(GLuint buffer)"
  },
  {
    "label": "glIsNamedBufferResidentNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsNamedBufferResidentNV(GLuint buffer)"
  },
  {
    "label": "glGetBufferParameterui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glGetNamedBufferParameterui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glGetIntegerui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetIntegerui64vNV(GLenum value, GLuint64EXT *result)"
  },
  {
    "label": "glUniformui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformui64NV(GLint location, GLuint64EXT value)"
  },
  {
    "label": "glUniformui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniformui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value)"
  },
  {
    "label": "glProgramUniformui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_shader_buffer_store # define GL_NV_shader_buffer_store 1 # define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0 x00000010 # endif # ifndef GL_NV_shader_storage_buffer_object # define GL_NV_shader_storage_buffer_object 1 # endif # ifndef GL_NV_shader_thread_group # define GL_NV_shader_thread_group 1 # define GL_WARP_SIZE_NV 0 x9339 # define GL_WARPS_PER_SM_NV 0 x933A # define GL_SM_COUNT_NV 0 x933B # endif # ifndef GL_NV_shader_thread_shuffle # define GL_NV_shader_thread_shuffle 1 # endif # ifndef GL_NV_stereo_view_rendering # define GL_NV_stereo_view_rendering 1 # endif # ifndef GL_NV_tessellation_program5 # define GL_NV_tessellation_program5 1 # define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0 x86D8 # define GL_TESS_CONTROL_PROGRAM_NV 0 x891E # define GL_TESS_EVALUATION_PROGRAM_NV 0 x891F # define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0 x8C74 # define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0 x8C75 # endif # ifndef GL_NV_texgen_emboss # define GL_NV_texgen_emboss 1 # define GL_EMBOSS_LIGHT_NV 0 x855D # define GL_EMBOSS_CONSTANT_NV 0 x855E # define GL_EMBOSS_MAP_NV 0 x855F # endif # ifndef GL_NV_texgen_reflection # define GL_NV_texgen_reflection 1 # define GL_NORMAL_MAP_NV 0 x8511 # define GL_REFLECTION_MAP_NV 0 x8512 # endif # ifndef GL_NV_texture_barrier # define GL_NV_texture_barrier 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void)"
  },
  {
    "label": "glTextureBarrierNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTextureBarrierNV(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_texture_compression_vtc # define GL_NV_texture_compression_vtc 1 # endif # ifndef GL_NV_texture_env_combine4 # define GL_NV_texture_env_combine4 1 # define GL_COMBINE4_NV 0 x8503 # define GL_SOURCE3_RGB_NV 0 x8583 # define GL_SOURCE3_ALPHA_NV 0 x858B # define GL_OPERAND3_RGB_NV 0 x8593 # define GL_OPERAND3_ALPHA_NV 0 x859B # endif # ifndef GL_NV_texture_expand_normal # define GL_NV_texture_expand_normal 1 # define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0 x888F # endif # ifndef GL_NV_texture_multisample # define GL_NV_texture_multisample 1 # define GL_TEXTURE_COVERAGE_SAMPLES_NV 0 x9045 # define GL_TEXTURE_COLOR_SAMPLES_NV 0 x9046 typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTexImage2DMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTexImage3DMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTextureImage2DMultisampleNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTextureImage3DMultisampleNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTextureImage2DMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTextureImage3DMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_texture_rectangle # define GL_NV_texture_rectangle 1 # define GL_TEXTURE_RECTANGLE_NV 0 x84F5 # define GL_TEXTURE_BINDING_RECTANGLE_NV 0 x84F6 # define GL_PROXY_TEXTURE_RECTANGLE_NV 0 x84F7 # define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0 x84F8 # endif # ifndef GL_NV_texture_shader # define GL_NV_texture_shader 1 # define GL_OFFSET_TEXTURE_RECTANGLE_NV 0 x864C # define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0 x864D # define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0 x864E # define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0 x86D9 # define GL_UNSIGNED_INT_S8_S8_8_8_NV 0 x86DA # define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0 x86DB # define GL_DSDT_MAG_INTENSITY_NV 0 x86DC # define GL_SHADER_CONSISTENT_NV 0 x86DD # define GL_TEXTURE_SHADER_NV 0 x86DE # define GL_SHADER_OPERATION_NV 0 x86DF # define GL_CULL_MODES_NV 0 x86E0 # define GL_OFFSET_TEXTURE_MATRIX_NV 0 x86E1 # define GL_OFFSET_TEXTURE_SCALE_NV 0 x86E2 # define GL_OFFSET_TEXTURE_BIAS_NV 0 x86E3 # define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0 x86E1 # define GL_OFFSET_TEXTURE_2D_SCALE_NV 0 x86E2 # define GL_OFFSET_TEXTURE_2D_BIAS_NV 0 x86E3 # define GL_PREVIOUS_TEXTURE_INPUT_NV 0 x86E4 # define GL_CONST_EYE_NV 0 x86E5 # define GL_PASS_THROUGH_NV 0 x86E6 # define GL_CULL_FRAGMENT_NV 0 x86E7 # define GL_OFFSET_TEXTURE_2D_NV 0 x86E8 # define GL_DEPENDENT_AR_TEXTURE_2D_NV 0 x86E9 # define GL_DEPENDENT_GB_TEXTURE_2D_NV 0 x86EA # define GL_DOT_PRODUCT_NV 0 x86EC # define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0 x86ED # define GL_DOT_PRODUCT_TEXTURE_2D_NV 0 x86EE # define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0 x86F0 # define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0 x86F1 # define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0 x86F2 # define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0 x86F3 # define GL_HILO_NV 0 x86F4 # define GL_DSDT_NV 0 x86F5 # define GL_DSDT_MAG_NV 0 x86F6 # define GL_DSDT_MAG_VIB_NV 0 x86F7 # define GL_HILO16_NV 0 x86F8 # define GL_SIGNED_HILO_NV 0 x86F9 # define GL_SIGNED_HILO16_NV 0 x86FA # define GL_SIGNED_RGBA_NV 0 x86FB # define GL_SIGNED_RGBA8_NV 0 x86FC # define GL_SIGNED_RGB_NV 0 x86FE # define GL_SIGNED_RGB8_NV 0 x86FF # define GL_SIGNED_LUMINANCE_NV 0 x8701 # define GL_SIGNED_LUMINANCE8_NV 0 x8702 # define GL_SIGNED_LUMINANCE_ALPHA_NV 0 x8703 # define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0 x8704 # define GL_SIGNED_ALPHA_NV 0 x8705 # define GL_SIGNED_ALPHA8_NV 0 x8706 # define GL_SIGNED_INTENSITY_NV 0 x8707 # define GL_SIGNED_INTENSITY8_NV 0 x8708 # define GL_DSDT8_NV 0 x8709 # define GL_DSDT8_MAG8_NV 0 x870A # define GL_DSDT8_MAG8_INTENSITY8_NV 0 x870B # define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0 x870C # define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0 x870D # define GL_HI_SCALE_NV 0 x870E # define GL_LO_SCALE_NV 0 x870F # define GL_DS_SCALE_NV 0 x8710 # define GL_DT_SCALE_NV 0 x8711 # define GL_MAGNITUDE_SCALE_NV 0 x8712 # define GL_VIBRANCE_SCALE_NV 0 x8713 # define GL_HI_BIAS_NV 0 x8714 # define GL_LO_BIAS_NV 0 x8715 # define GL_DS_BIAS_NV 0 x8716 # define GL_DT_BIAS_NV 0 x8717 # define GL_MAGNITUDE_BIAS_NV 0 x8718 # define GL_VIBRANCE_BIAS_NV 0 x8719 # define GL_TEXTURE_BORDER_VALUES_NV 0 x871A # define GL_TEXTURE_HI_SIZE_NV 0 x871B # define GL_TEXTURE_LO_SIZE_NV 0 x871C # define GL_TEXTURE_DS_SIZE_NV 0 x871D # define GL_TEXTURE_DT_SIZE_NV 0 x871E # define GL_TEXTURE_MAG_SIZE_NV 0 x871F # endif # ifndef GL_NV_texture_shader2 # define GL_NV_texture_shader2 1 # define GL_DOT_PRODUCT_TEXTURE_3D_NV 0 x86EF # endif # ifndef GL_NV_texture_shader3 # define GL_NV_texture_shader3 1 # define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0 x8850 # define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0 x8851 # define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0 x8852 # define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0 x8853 # define GL_OFFSET_HILO_TEXTURE_2D_NV 0 x8854 # define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0 x8855 # define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0 x8856 # define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0 x8857 # define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0 x8858 # define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0 x8859 # define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0 x885A # define GL_DOT_PRODUCT_PASS_THROUGH_NV 0 x885B # define GL_DOT_PRODUCT_TEXTURE_1D_NV 0 x885C # define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0 x885D # define GL_HILO8_NV 0 x885E # define GL_SIGNED_HILO8_NV 0 x885F # define GL_FORCE_BLUE_TO_ONE_NV 0 x8860 # endif # ifndef GL_NV_transform_feedback # define GL_NV_transform_feedback 1 # define GL_BACK_PRIMARY_COLOR_NV 0 x8C77 # define GL_BACK_SECONDARY_COLOR_NV 0 x8C78 # define GL_TEXTURE_COORD_NV 0 x8C79 # define GL_CLIP_DISTANCE_NV 0 x8C7A # define GL_VERTEX_ID_NV 0 x8C7B # define GL_PRIMITIVE_ID_NV 0 x8C7C # define GL_GENERIC_ATTRIB_NV 0 x8C7D # define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0 x8C7E # define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0 x8C7F # define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0 x8C80 # define GL_ACTIVE_VARYINGS_NV 0 x8C81 # define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0 x8C82 # define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0 x8C83 # define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0 x8C84 # define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0 x8C85 # define GL_TRANSFORM_FEEDBACK_RECORD_NV 0 x8C86 # define GL_PRIMITIVES_GENERATED_NV 0 x8C87 # define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0 x8C88 # define GL_RASTERIZER_DISCARD_NV 0 x8C89 # define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0 x8C8A # define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0 x8C8B # define GL_INTERLEAVED_ATTRIBS_NV 0 x8C8C # define GL_SEPARATE_ATTRIBS_NV 0 x8C8D # define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0 x8C8E # define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0 x8C8F # define GL_LAYER_NV 0 x8DAA # define GL_NEXT_BUFFER_NV - 2 # define GL_SKIP_COMPONENTS4_NV - 3 # define GL_SKIP_COMPONENTS3_NV - 4 # define GL_SKIP_COMPONENTS2_NV - 5 # define GL_SKIP_COMPONENTS1_NV - 6 typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLenum bufferMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode)"
  },
  {
    "label": "glBeginTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBeginTransformFeedbackNV(GLenum primitiveMode)"
  },
  {
    "label": "glEndTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndTransformFeedbackNV(void)"
  },
  {
    "label": "glTransformFeedbackAttribsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackAttribsNV(GLsizei count, const GLint *attribs, GLenum bufferMode)"
  },
  {
    "label": "glBindBufferRangeNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBindBufferOffsetNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)"
  },
  {
    "label": "glBindBufferBaseNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackVaryingsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)"
  },
  {
    "label": "glActiveVaryingNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glActiveVaryingNV(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetVaryingLocationNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetVaryingLocationNV(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetActiveVaryingNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetTransformFeedbackVaryingNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)"
  },
  {
    "label": "glTransformFeedbackStreamAttribsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_transform_feedback2 # define GL_NV_transform_feedback2 1 # define GL_TRANSFORM_FEEDBACK_NV 0 x8E22 # define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0 x8E23 # define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0 x8E24 # define GL_TRANSFORM_FEEDBACK_BINDING_NV 0 x8E25 typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id)"
  },
  {
    "label": "glBindTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBindTransformFeedbackNV(GLenum target, GLuint id)"
  },
  {
    "label": "glDeleteTransformFeedbacksNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glGenTransformFeedbacksNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glIsTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsTransformFeedbackNV(GLuint id)"
  },
  {
    "label": "glPauseTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPauseTransformFeedbackNV(void)"
  },
  {
    "label": "glResumeTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glResumeTransformFeedbackNV(void)"
  },
  {
    "label": "glDrawTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedbackNV(GLenum mode, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_uniform_buffer_unified_memory # define GL_NV_uniform_buffer_unified_memory 1 # define GL_UNIFORM_BUFFER_UNIFIED_NV 0 x936E # define GL_UNIFORM_BUFFER_ADDRESS_NV 0 x936F # define GL_UNIFORM_BUFFER_LENGTH_NV 0 x9370 # endif # ifndef GL_NV_vdpau_interop # define GL_NV_vdpau_interop 1 typedef GLintptr GLvdpauSurfaceNV ; # define GL_SURFACE_STATE_NV 0 x86EB # define GL_SURFACE_REGISTERED_NV 0 x86FD # define GL_SURFACE_MAPPED_NV 0 x8700 # define GL_WRITE_DISCARD_NV 0 x88BE typedef)",
    "insertText": "void(APIENTRYP PFNGLVDPAUINITNVPROC) (const void *vdpDevice, const void *getProcAddress)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVDPAUFININVPROC) (void)"
  },
  {
    "label": "GLvdpauSurfaceNV()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLvdpauSurfaceNV(APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)"
  },
  {
    "label": "GLvdpauSurfaceNV()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLvdpauSurfaceNV(APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces)"
  },
  {
    "label": "glVDPAUInitNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVDPAUInitNV(const void *vdpDevice, const void *getProcAddress)"
  },
  {
    "label": "glVDPAUFiniNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVDPAUFiniNV(void)"
  },
  {
    "label": "glVDPAURegisterVideoSurfaceNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLvdpauSurfaceNV APIENTRY)",
    "insertText": "glVDPAURegisterVideoSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)"
  },
  {
    "label": "glVDPAURegisterOutputSurfaceNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLvdpauSurfaceNV APIENTRY)",
    "insertText": "glVDPAURegisterOutputSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)"
  },
  {
    "label": "glVDPAUIsSurfaceNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)"
  },
  {
    "label": "glVDPAUUnregisterSurfaceNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)"
  },
  {
    "label": "glVDPAUGetSurfaceivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "glVDPAUSurfaceAccessNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)"
  },
  {
    "label": "glVDPAUMapSurfacesNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)"
  },
  {
    "label": "glVDPAUUnmapSurfacesNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_vertex_array_range # define GL_NV_vertex_array_range 1 # define GL_VERTEX_ARRAY_RANGE_NV 0 x851D # define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0 x851E # define GL_VERTEX_ARRAY_RANGE_VALID_NV 0 x851F # define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0 x8520 # define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0 x8521 typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const void *pointer)"
  },
  {
    "label": "glFlushVertexArrayRangeNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFlushVertexArrayRangeNV(void)"
  },
  {
    "label": "glVertexArrayRangeNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayRangeNV(GLsizei length, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_vertex_array_range2 # define GL_NV_vertex_array_range2 1 # define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0 x8533 # endif # ifndef GL_NV_vertex_attrib_integer_64bit # define GL_NV_vertex_attrib_integer_64bit 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glVertexAttribL1i64NV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1i64NV(GLuint index, GLint64EXT x)"
  },
  {
    "label": "glVertexAttribL2i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "glVertexAttribL3i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "glVertexAttribL4i64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "glVertexAttribL1i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "glVertexAttribL2i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "glVertexAttribL3i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "glVertexAttribL4i64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "glVertexAttribL1ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)"
  },
  {
    "label": "glVertexAttribL2ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "glVertexAttribL3ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "glVertexAttribL4ui64NV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "glVertexAttribL1ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glVertexAttribL2ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glVertexAttribL3ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glVertexAttribL4ui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glGetVertexAttribLi64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)"
  },
  {
    "label": "glGetVertexAttribLui64vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glVertexAttribLFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_vertex_buffer_unified_memory # define GL_NV_vertex_buffer_unified_memory 1 # define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0 x8F1E # define GL_ELEMENT_ARRAY_UNIFIED_NV 0 x8F1F # define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0 x8F20 # define GL_VERTEX_ARRAY_ADDRESS_NV 0 x8F21 # define GL_NORMAL_ARRAY_ADDRESS_NV 0 x8F22 # define GL_COLOR_ARRAY_ADDRESS_NV 0 x8F23 # define GL_INDEX_ARRAY_ADDRESS_NV 0 x8F24 # define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0 x8F25 # define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0 x8F26 # define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0 x8F27 # define GL_FOG_COORD_ARRAY_ADDRESS_NV 0 x8F28 # define GL_ELEMENT_ARRAY_ADDRESS_NV 0 x8F29 # define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0 x8F2A # define GL_VERTEX_ARRAY_LENGTH_NV 0 x8F2B # define GL_NORMAL_ARRAY_LENGTH_NV 0 x8F2C # define GL_COLOR_ARRAY_LENGTH_NV 0 x8F2D # define GL_INDEX_ARRAY_LENGTH_NV 0 x8F2E # define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0 x8F2F # define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0 x8F30 # define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0 x8F31 # define GL_FOG_COORD_ARRAY_LENGTH_NV 0 x8F32 # define GL_ELEMENT_ARRAY_LENGTH_NV 0 x8F33 # define GL_DRAW_INDIRECT_UNIFIED_NV 0 x8F40 # define GL_DRAW_INDIRECT_ADDRESS_NV 0 x8F41 # define GL_DRAW_INDIRECT_LENGTH_NV 0 x8F42 typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result)"
  },
  {
    "label": "glBufferAddressRangeNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)"
  },
  {
    "label": "glVertexFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexFormatNV(GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glNormalFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormalFormatNV(GLenum type, GLsizei stride)"
  },
  {
    "label": "glColorFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorFormatNV(GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glIndexFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glIndexFormatNV(GLenum type, GLsizei stride)"
  },
  {
    "label": "glTexCoordFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glEdgeFlagFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEdgeFlagFormatNV(GLsizei stride)"
  },
  {
    "label": "glSecondaryColorFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glFogCoordFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFogCoordFormatNV(GLenum type, GLsizei stride)"
  },
  {
    "label": "glVertexAttribFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)"
  },
  {
    "label": "glVertexAttribIFormatNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glGetIntegerui64i_vNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_vertex_program # define GL_NV_vertex_program 1 # define GL_VERTEX_PROGRAM_NV 0 x8620 # define GL_VERTEX_STATE_PROGRAM_NV 0 x8621 # define GL_ATTRIB_ARRAY_SIZE_NV 0 x8623 # define GL_ATTRIB_ARRAY_STRIDE_NV 0 x8624 # define GL_ATTRIB_ARRAY_TYPE_NV 0 x8625 # define GL_CURRENT_ATTRIB_NV 0 x8626 # define GL_PROGRAM_LENGTH_NV 0 x8627 # define GL_PROGRAM_STRING_NV 0 x8628 # define GL_MODELVIEW_PROJECTION_NV 0 x8629 # define GL_IDENTITY_NV 0 x862A # define GL_INVERSE_NV 0 x862B # define GL_TRANSPOSE_NV 0 x862C # define GL_INVERSE_TRANSPOSE_NV 0 x862D # define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0 x862E # define GL_MAX_TRACK_MATRICES_NV 0 x862F # define GL_MATRIX0_NV 0 x8630 # define GL_MATRIX1_NV 0 x8631 # define GL_MATRIX2_NV 0 x8632 # define GL_MATRIX3_NV 0 x8633 # define GL_MATRIX4_NV 0 x8634 # define GL_MATRIX5_NV 0 x8635 # define GL_MATRIX6_NV 0 x8636 # define GL_MATRIX7_NV 0 x8637 # define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0 x8640 # define GL_CURRENT_MATRIX_NV 0 x8641 # define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0 x8642 # define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0 x8643 # define GL_PROGRAM_PARAMETER_NV 0 x8644 # define GL_ATTRIB_ARRAY_POINTER_NV 0 x8645 # define GL_PROGRAM_TARGET_NV 0 x8646 # define GL_PROGRAM_RESIDENT_NV 0 x8647 # define GL_TRACK_MATRIX_NV 0 x8648 # define GL_TRACK_MATRIX_TRANSFORM_NV 0 x8649 # define GL_VERTEX_PROGRAM_BINDING_NV 0 x864A # define GL_PROGRAM_ERROR_POSITION_NV 0 x864B # define GL_VERTEX_ATTRIB_ARRAY0_NV 0 x8650 # define GL_VERTEX_ATTRIB_ARRAY1_NV 0 x8651 # define GL_VERTEX_ATTRIB_ARRAY2_NV 0 x8652 # define GL_VERTEX_ATTRIB_ARRAY3_NV 0 x8653 # define GL_VERTEX_ATTRIB_ARRAY4_NV 0 x8654 # define GL_VERTEX_ATTRIB_ARRAY5_NV 0 x8655 # define GL_VERTEX_ATTRIB_ARRAY6_NV 0 x8656 # define GL_VERTEX_ATTRIB_ARRAY7_NV 0 x8657 # define GL_VERTEX_ATTRIB_ARRAY8_NV 0 x8658 # define GL_VERTEX_ATTRIB_ARRAY9_NV 0 x8659 # define GL_VERTEX_ATTRIB_ARRAY10_NV 0 x865A # define GL_VERTEX_ATTRIB_ARRAY11_NV 0 x865B # define GL_VERTEX_ATTRIB_ARRAY12_NV 0 x865C # define GL_VERTEX_ATTRIB_ARRAY13_NV 0 x865D # define GL_VERTEX_ATTRIB_ARRAY14_NV 0 x865E # define GL_VERTEX_ATTRIB_ARRAY15_NV 0 x865F # define GL_MAP1_VERTEX_ATTRIB0_4_NV 0 x8660 # define GL_MAP1_VERTEX_ATTRIB1_4_NV 0 x8661 # define GL_MAP1_VERTEX_ATTRIB2_4_NV 0 x8662 # define GL_MAP1_VERTEX_ATTRIB3_4_NV 0 x8663 # define GL_MAP1_VERTEX_ATTRIB4_4_NV 0 x8664 # define GL_MAP1_VERTEX_ATTRIB5_4_NV 0 x8665 # define GL_MAP1_VERTEX_ATTRIB6_4_NV 0 x8666 # define GL_MAP1_VERTEX_ATTRIB7_4_NV 0 x8667 # define GL_MAP1_VERTEX_ATTRIB8_4_NV 0 x8668 # define GL_MAP1_VERTEX_ATTRIB9_4_NV 0 x8669 # define GL_MAP1_VERTEX_ATTRIB10_4_NV 0 x866A # define GL_MAP1_VERTEX_ATTRIB11_4_NV 0 x866B # define GL_MAP1_VERTEX_ATTRIB12_4_NV 0 x866C # define GL_MAP1_VERTEX_ATTRIB13_4_NV 0 x866D # define GL_MAP1_VERTEX_ATTRIB14_4_NV 0 x866E # define GL_MAP1_VERTEX_ATTRIB15_4_NV 0 x866F # define GL_MAP2_VERTEX_ATTRIB0_4_NV 0 x8670 # define GL_MAP2_VERTEX_ATTRIB1_4_NV 0 x8671 # define GL_MAP2_VERTEX_ATTRIB2_4_NV 0 x8672 # define GL_MAP2_VERTEX_ATTRIB3_4_NV 0 x8673 # define GL_MAP2_VERTEX_ATTRIB4_4_NV 0 x8674 # define GL_MAP2_VERTEX_ATTRIB5_4_NV 0 x8675 # define GL_MAP2_VERTEX_ATTRIB6_4_NV 0 x8676 # define GL_MAP2_VERTEX_ATTRIB7_4_NV 0 x8677 # define GL_MAP2_VERTEX_ATTRIB8_4_NV 0 x8678 # define GL_MAP2_VERTEX_ATTRIB9_4_NV 0 x8679 # define GL_MAP2_VERTEX_ATTRIB10_4_NV 0 x867A # define GL_MAP2_VERTEX_ATTRIB11_4_NV 0 x867B # define GL_MAP2_VERTEX_ATTRIB12_4_NV 0 x867C # define GL_MAP2_VERTEX_ATTRIB13_4_NV 0 x867D # define GL_MAP2_VERTEX_ATTRIB14_4_NV 0 x867E # define GL_MAP2_VERTEX_ATTRIB15_4_NV 0 x867F typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPROGRAMNVPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v)"
  },
  {
    "label": "glAreProgramsResidentNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLboolean APIENTRY)",
    "insertText": "glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)"
  },
  {
    "label": "glBindProgramNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindProgramNV(GLenum target, GLuint id)"
  },
  {
    "label": "glDeleteProgramsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteProgramsNV(GLsizei n, const GLuint *programs)"
  },
  {
    "label": "glExecuteProgramNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)"
  },
  {
    "label": "glGenProgramsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenProgramsNV(GLsizei n, GLuint *programs)"
  },
  {
    "label": "glGetProgramParameterdvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetProgramParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetProgramivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramivNV(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramStringNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)"
  },
  {
    "label": "glGetTrackMatrixivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribdvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetVertexAttribfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointervNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribPointervNV(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glIsProgramNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsProgramNV(GLuint id)"
  },
  {
    "label": "glLoadProgramNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)"
  },
  {
    "label": "glProgramParameter4dNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramParameter4dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)"
  },
  {
    "label": "glProgramParameter4fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glProgramParameter4fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)"
  },
  {
    "label": "glProgramParameters4dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glProgramParameters4fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glRequestResidentProgramsNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)"
  },
  {
    "label": "glTrackMatrixNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)"
  },
  {
    "label": "glVertexAttribPointerNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glVertexAttrib1dNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1dNV(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttrib1dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1dvNV(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib1fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1fNV(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1fvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib1sNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1sNV(GLuint index, GLshort x)"
  },
  {
    "label": "glVertexAttrib1svNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1svNV(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib2dNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttrib2dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2dvNV(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib2fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2fvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2sNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexAttrib2svNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2svNV(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib3dNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttrib3dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3dvNV(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib3fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3fvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3sNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexAttrib3svNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3svNV(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4dNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttrib4dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4dvNV(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib4fNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4fvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4sNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexAttrib4svNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4svNV(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4ubNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "glVertexAttrib4ubvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribs1dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribs1fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribs1svNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "glVertexAttribs2dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribs2fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribs2svNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "glVertexAttribs3dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribs3fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribs3svNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "glVertexAttribs4dvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribs4fvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribs4svNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "glVertexAttribs4ubvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_vertex_program1_1 # define GL_NV_vertex_program1_1 1 # endif # ifndef GL_NV_vertex_program2 # define GL_NV_vertex_program2 1 # endif # ifndef GL_NV_vertex_program2_option # define GL_NV_vertex_program2_option 1 # endif # ifndef GL_NV_vertex_program3 # define GL_NV_vertex_program3 1 # endif # ifndef GL_NV_vertex_program4 # define GL_NV_vertex_program4 1 # define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0 x88FD typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "glVertexAttribI1iEXT()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1iEXT(GLuint index, GLint x)"
  },
  {
    "label": "glVertexAttribI2iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)"
  },
  {
    "label": "glVertexAttribI3iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertexAttribI4iEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertexAttribI1uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1uiEXT(GLuint index, GLuint x)"
  },
  {
    "label": "glVertexAttribI2uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "glVertexAttribI3uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "glVertexAttribI4uiEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glVertexAttribI1ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1ivEXT(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI2ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2ivEXT(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI3ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3ivEXT(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI4ivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4ivEXT(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI1uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1uivEXT(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI2uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2uivEXT(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI3uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3uivEXT(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4uivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4uivEXT(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4bvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttribI4svEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4svEXT(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttribI4ubvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribI4usvEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4usvEXT(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttribIPointerEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribIivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribIuivEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_video_capture # define GL_NV_video_capture 1 # define GL_VIDEO_BUFFER_NV 0 x9020 # define GL_VIDEO_BUFFER_BINDING_NV 0 x9021 # define GL_FIELD_UPPER_NV 0 x9022 # define GL_FIELD_LOWER_NV 0 x9023 # define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0 x9024 # define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0 x9025 # define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0 x9026 # define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0 x9027 # define GL_VIDEO_BUFFER_PITCH_NV 0 x9028 # define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0 x9029 # define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0 x902A # define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0 x902B # define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0 x902C # define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0 x902D # define GL_PARTIAL_SUCCESS_NV 0 x902E # define GL_SUCCESS_NV 0 x902F # define GL_FAILURE_NV 0 x9030 # define GL_YCBYCR8_422_NV 0 x9031 # define GL_YCBAYCR8A_4224_NV 0 x9032 # define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0 x9033 # define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0 x9034 # define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0 x9035 # define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0 x9036 # define GL_Z4Y12Z4CB12Z4CR12_444_NV 0 x9037 # define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0 x9038 # define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0 x9039 # define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0 x903A # define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0 x903B # define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0 x903C typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)"
  },
  {
    "label": "glBeginVideoCaptureNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBeginVideoCaptureNV(GLuint video_capture_slot)"
  },
  {
    "label": "glBindVideoCaptureStreamBufferNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)"
  },
  {
    "label": "glBindVideoCaptureStreamTextureNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)"
  },
  {
    "label": "glEndVideoCaptureNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndVideoCaptureNV(GLuint video_capture_slot)"
  },
  {
    "label": "glGetVideoCaptureivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVideoCaptureStreamivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVideoCaptureStreamfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVideoCaptureStreamdvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glVideoCaptureNV()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)"
  },
  {
    "label": "glVideoCaptureStreamParameterivNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)"
  },
  {
    "label": "glVideoCaptureStreamParameterfvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glVideoCaptureStreamParameterdvNV()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_NV_viewport_array2 # define GL_NV_viewport_array2 1 # endif # ifndef GL_NV_viewport_swizzle # define GL_NV_viewport_swizzle 1 # define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0 x9350 # define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0 x9351 # define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0 x9352 # define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0 x9353 # define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0 x9354 # define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0 x9355 # define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0 x9356 # define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0 x9357 # define GL_VIEWPORT_SWIZZLE_X_NV 0 x9358 # define GL_VIEWPORT_SWIZZLE_Y_NV 0 x9359 # define GL_VIEWPORT_SWIZZLE_Z_NV 0 x935A # define GL_VIEWPORT_SWIZZLE_W_NV 0 x935B typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTSWIZZLENVPROC) (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)"
  },
  {
    "label": "glViewportSwizzleNV()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OML_interlace # define GL_OML_interlace 1 # define GL_INTERLACE_OML 0 x8980 # define GL_INTERLACE_READ_OML 0 x8981 # endif # ifndef GL_OML_resample # define GL_OML_resample 1 # define GL_PACK_RESAMPLE_OML 0 x8984 # define GL_UNPACK_RESAMPLE_OML 0 x8985 # define GL_RESAMPLE_REPLICATE_OML 0 x8986 # define GL_RESAMPLE_ZERO_FILL_OML 0 x8987 # define GL_RESAMPLE_AVERAGE_OML 0 x8988 # define GL_RESAMPLE_DECIMATE_OML 0 x8989 # endif # ifndef GL_OML_subsample # define GL_OML_subsample 1 # define GL_FORMAT_SUBSAMPLE_24_24_OML 0 x8982 # define GL_FORMAT_SUBSAMPLE_244_244_OML 0 x8983 # endif # ifndef GL_OVR_multiview # define GL_OVR_multiview 1 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0 x9630 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0 x9632 # define GL_MAX_VIEWS_OVR 0 x9631 typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)"
  },
  {
    "label": "glFramebufferTextureMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_OVR_multiview2 # define GL_OVR_multiview2 1 # endif # ifndef GL_PGI_misc_hints # define GL_PGI_misc_hints 1 # define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0 x1A1F8 # define GL_CONSERVE_MEMORY_HINT_PGI 0 x1A1FD # define GL_RECLAIM_MEMORY_HINT_PGI 0 x1A1FE # define GL_NATIVE_GRAPHICS_HANDLE_PGI 0 x1A202 # define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0 x1A203 # define GL_NATIVE_GRAPHICS_END_HINT_PGI 0 x1A204 # define GL_ALWAYS_FAST_HINT_PGI 0 x1A20C # define GL_ALWAYS_SOFT_HINT_PGI 0 x1A20D # define GL_ALLOW_DRAW_OBJ_HINT_PGI 0 x1A20E # define GL_ALLOW_DRAW_WIN_HINT_PGI 0 x1A20F # define GL_ALLOW_DRAW_FRG_HINT_PGI 0 x1A210 # define GL_ALLOW_DRAW_MEM_HINT_PGI 0 x1A211 # define GL_STRICT_DEPTHFUNC_HINT_PGI 0 x1A216 # define GL_STRICT_LIGHTING_HINT_PGI 0 x1A217 # define GL_STRICT_SCISSOR_HINT_PGI 0 x1A218 # define GL_FULL_STIPPLE_HINT_PGI 0 x1A219 # define GL_CLIP_NEAR_HINT_PGI 0 x1A220 # define GL_CLIP_FAR_HINT_PGI 0 x1A221 # define GL_WIDE_LINE_HINT_PGI 0 x1A222 # define GL_BACK_NORMALS_HINT_PGI 0 x1A223 typedef)",
    "insertText": "void(APIENTRYP PFNGLHINTPGIPROC) (GLenum target, GLint mode)"
  },
  {
    "label": "glHintPGI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glHintPGI(GLenum target, GLint mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_PGI_vertex_hints # define GL_PGI_vertex_hints 1 # define GL_VERTEX_DATA_HINT_PGI 0 x1A22A # define GL_VERTEX_CONSISTENT_HINT_PGI 0 x1A22B # define GL_MATERIAL_SIDE_HINT_PGI 0 x1A22C # define GL_MAX_VERTEX_HINT_PGI 0 x1A22D # define GL_COLOR3_BIT_PGI 0 x00010000 # define GL_COLOR4_BIT_PGI 0 x00020000 # define GL_EDGEFLAG_BIT_PGI 0 x00040000 # define GL_INDEX_BIT_PGI 0 x00080000 # define GL_MAT_AMBIENT_BIT_PGI 0 x00100000 # define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0 x00200000 # define GL_MAT_DIFFUSE_BIT_PGI 0 x00400000 # define GL_MAT_EMISSION_BIT_PGI 0 x00800000 # define GL_MAT_COLOR_INDEXES_BIT_PGI 0 x01000000 # define GL_MAT_SHININESS_BIT_PGI 0 x02000000 # define GL_MAT_SPECULAR_BIT_PGI 0 x04000000 # define GL_NORMAL_BIT_PGI 0 x08000000 # define GL_TEXCOORD1_BIT_PGI 0 x10000000 # define GL_TEXCOORD2_BIT_PGI 0 x20000000 # define GL_TEXCOORD3_BIT_PGI 0 x40000000 # define GL_TEXCOORD4_BIT_PGI 0 x80000000 # define GL_VERTEX23_BIT_PGI 0 x00000004 # define GL_VERTEX4_BIT_PGI 0 x00000008 # endif # ifndef GL_REND_screen_coordinates # define GL_REND_screen_coordinates 1 # define GL_SCREEN_COORDINATES_REND 0 x8490 # define GL_INVERTED_SCREEN_W_REND 0 x8491 # endif # ifndef GL_S3_s3tc # define GL_S3_s3tc 1 # define GL_RGB_S3TC 0 x83A0 # define GL_RGB4_S3TC 0 x83A1 # define GL_RGBA_S3TC 0 x83A2 # define GL_RGBA4_S3TC 0 x83A3 # define GL_RGBA_DXT5_S3TC 0 x83A4 # define GL_RGBA4_DXT5_S3TC 0 x83A5 # endif # ifndef GL_SGIS_detail_texture # define GL_SGIS_detail_texture 1 # define GL_DETAIL_TEXTURE_2D_SGIS 0 x8095 # define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0 x8096 # define GL_LINEAR_DETAIL_SGIS 0 x8097 # define GL_LINEAR_DETAIL_ALPHA_SGIS 0 x8098 # define GL_LINEAR_DETAIL_COLOR_SGIS 0 x8099 # define GL_DETAIL_TEXTURE_LEVEL_SGIS 0 x809A # define GL_DETAIL_TEXTURE_MODE_SGIS 0 x809B # define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0 x809C typedef)",
    "insertText": "void(APIENTRYP PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points)"
  },
  {
    "label": "glDetailTexFuncSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)"
  },
  {
    "label": "glGetDetailTexFuncSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_fog_function # define GL_SGIS_fog_function 1 # define GL_FOG_FUNC_SGIS 0 x812A # define GL_FOG_FUNC_POINTS_SGIS 0 x812B # define GL_MAX_FOG_FUNC_POINTS_SGIS 0 x812C typedef)",
    "insertText": "void(APIENTRYP PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFOGFUNCSGISPROC) (GLfloat *points)"
  },
  {
    "label": "glFogFuncSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFogFuncSGIS(GLsizei n, const GLfloat *points)"
  },
  {
    "label": "glGetFogFuncSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFogFuncSGIS(GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_generate_mipmap # define GL_SGIS_generate_mipmap 1 # define GL_GENERATE_MIPMAP_SGIS 0 x8191 # define GL_GENERATE_MIPMAP_HINT_SGIS 0 x8192 # endif # ifndef GL_SGIS_multisample # define GL_SGIS_multisample 1 # define GL_MULTISAMPLE_SGIS 0 x809D # define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0 x809E # define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0 x809F # define GL_SAMPLE_MASK_SGIS 0 x80A0 # define GL_1PASS_SGIS 0 x80A1 # define GL_2PASS_0_SGIS 0 x80A2 # define GL_2PASS_1_SGIS 0 x80A3 # define GL_4PASS_0_SGIS 0 x80A4 # define GL_4PASS_1_SGIS 0 x80A5 # define GL_4PASS_2_SGIS 0 x80A6 # define GL_4PASS_3_SGIS 0 x80A7 # define GL_SAMPLE_BUFFERS_SGIS 0 x80A8 # define GL_SAMPLES_SGIS 0 x80A9 # define GL_SAMPLE_MASK_VALUE_SGIS 0 x80AA # define GL_SAMPLE_MASK_INVERT_SGIS 0 x80AB # define GL_SAMPLE_PATTERN_SGIS 0 x80AC typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern)"
  },
  {
    "label": "glSampleMaskSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSampleMaskSGIS(GLclampf value, GLboolean invert)"
  },
  {
    "label": "glSamplePatternSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplePatternSGIS(GLenum pattern)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_pixel_texture # define GL_SGIS_pixel_texture 1 # define GL_PIXEL_TEXTURE_SGIS 0 x8353 # define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0 x8354 # define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0 x8355 # define GL_PIXEL_GROUP_COLOR_SGIS 0 x8356 typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params)"
  },
  {
    "label": "glPixelTexGenParameteriSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPixelTexGenParameteriSGIS(GLenum pname, GLint param)"
  },
  {
    "label": "glPixelTexGenParameterivSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)"
  },
  {
    "label": "glPixelTexGenParameterfSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPixelTexGenParameterfvSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetPixelTexGenParameterivSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)"
  },
  {
    "label": "glGetPixelTexGenParameterfvSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_point_line_texgen # define GL_SGIS_point_line_texgen 1 # define GL_EYE_DISTANCE_TO_POINT_SGIS 0 x81F0 # define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0 x81F1 # define GL_EYE_DISTANCE_TO_LINE_SGIS 0 x81F2 # define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0 x81F3 # define GL_EYE_POINT_SGIS 0 x81F4 # define GL_OBJECT_POINT_SGIS 0 x81F5 # define GL_EYE_LINE_SGIS 0 x81F6 # define GL_OBJECT_LINE_SGIS 0 x81F7 # endif # ifndef GL_SGIS_point_parameters # define GL_SGIS_point_parameters 1 # define GL_POINT_SIZE_MIN_SGIS 0 x8126 # define GL_POINT_SIZE_MAX_SGIS 0 x8127 # define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0 x8128 # define GL_DISTANCE_ATTENUATION_SGIS 0 x8129 typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glPointParameterfSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPointParameterfSGIS(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfvSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterfvSGIS(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_sharpen_texture # define GL_SGIS_sharpen_texture 1 # define GL_LINEAR_SHARPEN_SGIS 0 x80AD # define GL_LINEAR_SHARPEN_ALPHA_SGIS 0 x80AE # define GL_LINEAR_SHARPEN_COLOR_SGIS 0 x80AF # define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0 x80B0 typedef)",
    "insertText": "void(APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points)"
  },
  {
    "label": "glSharpenTexFuncSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)"
  },
  {
    "label": "glGetSharpenTexFuncSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_texture4D # define GL_SGIS_texture4D 1 # define GL_PACK_SKIP_VOLUMES_SGIS 0 x8130 # define GL_PACK_IMAGE_DEPTH_SGIS 0 x8131 # define GL_UNPACK_SKIP_VOLUMES_SGIS 0 x8132 # define GL_UNPACK_IMAGE_DEPTH_SGIS 0 x8133 # define GL_TEXTURE_4D_SGIS 0 x8134 # define GL_PROXY_TEXTURE_4D_SGIS 0 x8135 # define GL_TEXTURE_4DSIZE_SGIS 0 x8136 # define GL_TEXTURE_WRAP_Q_SGIS 0 x8137 # define GL_MAX_4D_TEXTURE_SIZE_SGIS 0 x8138 # define GL_TEXTURE_4D_BINDING_SGIS 0 x814F typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexImage4DSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage4DSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_texture_border_clamp # define GL_SGIS_texture_border_clamp 1 # define GL_CLAMP_TO_BORDER_SGIS 0 x812D # endif # ifndef GL_SGIS_texture_color_mask # define GL_SGIS_texture_color_mask 1 # define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0 x81EF typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "glTextureColorMaskSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_texture_edge_clamp # define GL_SGIS_texture_edge_clamp 1 # define GL_CLAMP_TO_EDGE_SGIS 0 x812F # endif # ifndef GL_SGIS_texture_filter4 # define GL_SGIS_texture_filter4 1 # define GL_FILTER4_SGIS 0 x8146 # define GL_TEXTURE_FILTER4_SIZE_SGIS 0 x8147 typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)"
  },
  {
    "label": "glGetTexFilterFuncSGIS()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)"
  },
  {
    "label": "glTexFilterFuncSGIS()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIS_texture_lod # define GL_SGIS_texture_lod 1 # define GL_TEXTURE_MIN_LOD_SGIS 0 x813A # define GL_TEXTURE_MAX_LOD_SGIS 0 x813B # define GL_TEXTURE_BASE_LEVEL_SGIS 0 x813C # define GL_TEXTURE_MAX_LEVEL_SGIS 0 x813D # endif # ifndef GL_SGIS_texture_select # define GL_SGIS_texture_select 1 # define GL_DUAL_ALPHA4_SGIS 0 x8110 # define GL_DUAL_ALPHA8_SGIS 0 x8111 # define GL_DUAL_ALPHA12_SGIS 0 x8112 # define GL_DUAL_ALPHA16_SGIS 0 x8113 # define GL_DUAL_LUMINANCE4_SGIS 0 x8114 # define GL_DUAL_LUMINANCE8_SGIS 0 x8115 # define GL_DUAL_LUMINANCE12_SGIS 0 x8116 # define GL_DUAL_LUMINANCE16_SGIS 0 x8117 # define GL_DUAL_INTENSITY4_SGIS 0 x8118 # define GL_DUAL_INTENSITY8_SGIS 0 x8119 # define GL_DUAL_INTENSITY12_SGIS 0 x811A # define GL_DUAL_INTENSITY16_SGIS 0 x811B # define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0 x811C # define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0 x811D # define GL_QUAD_ALPHA4_SGIS 0 x811E # define GL_QUAD_ALPHA8_SGIS 0 x811F # define GL_QUAD_LUMINANCE4_SGIS 0 x8120 # define GL_QUAD_LUMINANCE8_SGIS 0 x8121 # define GL_QUAD_INTENSITY4_SGIS 0 x8122 # define GL_QUAD_INTENSITY8_SGIS 0 x8123 # define GL_DUAL_TEXTURE_SELECT_SGIS 0 x8124 # define GL_QUAD_TEXTURE_SELECT_SGIS 0 x8125 # endif # ifndef GL_SGIX_async # define GL_SGIX_async 1 # define GL_ASYNC_MARKER_SGIX 0 x8329 typedef)",
    "insertText": "void(APIENTRYP PFNGLASYNCMARKERSGIXPROC) (GLuint marker)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISASYNCMARKERSGIXPROC) (GLuint marker)"
  },
  {
    "label": "glAsyncMarkerSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glAsyncMarkerSGIX(GLuint marker)"
  },
  {
    "label": "glFinishAsyncSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glFinishAsyncSGIX(GLuint *markerp)"
  },
  {
    "label": "glPollAsyncSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glPollAsyncSGIX(GLuint *markerp)"
  },
  {
    "label": "glGenAsyncMarkersSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGenAsyncMarkersSGIX(GLsizei range)"
  },
  {
    "label": "glDeleteAsyncMarkersSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)"
  },
  {
    "label": "glIsAsyncMarkerSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsAsyncMarkerSGIX(GLuint marker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_async_histogram # define GL_SGIX_async_histogram 1 # define GL_ASYNC_HISTOGRAM_SGIX 0 x832C # define GL_MAX_ASYNC_HISTOGRAM_SGIX 0 x832D # endif # ifndef GL_SGIX_async_pixel # define GL_SGIX_async_pixel 1 # define GL_ASYNC_TEX_IMAGE_SGIX 0 x835C # define GL_ASYNC_DRAW_PIXELS_SGIX 0 x835D # define GL_ASYNC_READ_PIXELS_SGIX 0 x835E # define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0 x835F # define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0 x8360 # define GL_MAX_ASYNC_READ_PIXELS_SGIX 0 x8361 # endif # ifndef GL_SGIX_blend_alpha_minmax # define GL_SGIX_blend_alpha_minmax 1 # define GL_ALPHA_MIN_SGIX 0 x8320 # define GL_ALPHA_MAX_SGIX 0 x8321 # endif # ifndef GL_SGIX_calligraphic_fragment # define GL_SGIX_calligraphic_fragment 1 # define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0 x8183 # endif # ifndef GL_SGIX_clipmap # define GL_SGIX_clipmap 1 # define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0 x8170 # define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0 x8171 # define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0 x8172 # define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0 x8173 # define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0 x8174 # define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0 x8175 # define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0 x8176 # define GL_MAX_CLIPMAP_DEPTH_SGIX 0 x8177 # define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0 x8178 # define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0 x844D # define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0 x844E # define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0 x844F # endif # ifndef GL_SGIX_convolution_accuracy # define GL_SGIX_convolution_accuracy 1 # define GL_CONVOLUTION_HINT_SGIX 0 x8316 # endif # ifndef GL_SGIX_depth_pass_instrument # define GL_SGIX_depth_pass_instrument 1 # endif # ifndef GL_SGIX_depth_texture # define GL_SGIX_depth_texture 1 # define GL_DEPTH_COMPONENT16_SGIX 0 x81A5 # define GL_DEPTH_COMPONENT24_SGIX 0 x81A6 # define GL_DEPTH_COMPONENT32_SGIX 0 x81A7 # endif # ifndef GL_SGIX_flush_raster # define GL_SGIX_flush_raster 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHRASTERSGIXPROC) (void)"
  },
  {
    "label": "glFlushRasterSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFlushRasterSGIX(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_fog_offset # define GL_SGIX_fog_offset 1 # define GL_FOG_OFFSET_SGIX 0 x8198 # define GL_FOG_OFFSET_VALUE_SGIX 0 x8199 # endif # ifndef GL_SGIX_fragment_lighting # define GL_SGIX_fragment_lighting 1 # define GL_FRAGMENT_LIGHTING_SGIX 0 x8400 # define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0 x8401 # define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0 x8402 # define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0 x8403 # define GL_MAX_FRAGMENT_LIGHTS_SGIX 0 x8404 # define GL_MAX_ACTIVE_LIGHTS_SGIX 0 x8405 # define GL_CURRENT_RASTER_NORMAL_SGIX 0 x8406 # define GL_LIGHT_ENV_MODE_SGIX 0 x8407 # define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0 x8408 # define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0 x8409 # define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0 x840A # define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0 x840B # define GL_FRAGMENT_LIGHT0_SGIX 0 x840C # define GL_FRAGMENT_LIGHT1_SGIX 0 x840D # define GL_FRAGMENT_LIGHT2_SGIX 0 x840E # define GL_FRAGMENT_LIGHT3_SGIX 0 x840F # define GL_FRAGMENT_LIGHT4_SGIX 0 x8410 # define GL_FRAGMENT_LIGHT5_SGIX 0 x8411 # define GL_FRAGMENT_LIGHT6_SGIX 0 x8412 # define GL_FRAGMENT_LIGHT7_SGIX 0 x8413 typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "glFragmentColorMaterialSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFragmentColorMaterialSGIX(GLenum face, GLenum mode)"
  },
  {
    "label": "glFragmentLightfSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)"
  },
  {
    "label": "glFragmentLightfvSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glFragmentLightiSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)"
  },
  {
    "label": "glFragmentLightivSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)"
  },
  {
    "label": "glFragmentLightModelfSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentLightModelfSGIX(GLenum pname, GLfloat param)"
  },
  {
    "label": "glFragmentLightModelfvSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glFragmentLightModeliSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentLightModeliSGIX(GLenum pname, GLint param)"
  },
  {
    "label": "glFragmentLightModelivSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentLightModelivSGIX(GLenum pname, const GLint *params)"
  },
  {
    "label": "glFragmentMaterialfSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)"
  },
  {
    "label": "glFragmentMaterialfvSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glFragmentMaterialiSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)"
  },
  {
    "label": "glFragmentMaterialivSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetFragmentLightfvSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetFragmentLightivSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetFragmentMaterialfvSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetFragmentMaterialivSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)"
  },
  {
    "label": "glLightEnviSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLightEnviSGIX(GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_framezoom # define GL_SGIX_framezoom 1 # define GL_FRAMEZOOM_SGIX 0 x818B # define GL_FRAMEZOOM_FACTOR_SGIX 0 x818C # define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0 x818D typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEZOOMSGIXPROC) (GLint factor)"
  },
  {
    "label": "glFrameZoomSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFrameZoomSGIX(GLint factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_igloo_interface # define GL_SGIX_igloo_interface 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const void *params)"
  },
  {
    "label": "glIglooInterfaceSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glIglooInterfaceSGIX(GLenum pname, const void *params)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_instruments # define GL_SGIX_instruments 1 # define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0 x8180 # define GL_INSTRUMENT_MEASUREMENTS_SGIX 0 x8181 typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker)"
  },
  {
    "label": "glGetInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLint APIENTRY)",
    "insertText": "glGetInstrumentsSGIX(void)"
  },
  {
    "label": "glInstrumentsBufferSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)"
  },
  {
    "label": "glPollInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glPollInstrumentsSGIX(GLint *marker_p)"
  },
  {
    "label": "glReadInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReadInstrumentsSGIX(GLint marker)"
  },
  {
    "label": "glStartInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStartInstrumentsSGIX(void)"
  },
  {
    "label": "glStopInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStopInstrumentsSGIX(GLint marker)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_interlace # define GL_SGIX_interlace 1 # define GL_INTERLACE_SGIX 0 x8094 # endif # ifndef GL_SGIX_ir_instrument1 # define GL_SGIX_ir_instrument1 1 # define GL_IR_INSTRUMENT1_SGIX 0 x817F # endif # ifndef GL_SGIX_list_priority # define GL_SGIX_list_priority 1 # define GL_LIST_PRIORITY_SGIX 0 x8182 typedef)",
    "insertText": "void(APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetListParameterfvSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetListParameterivSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)"
  },
  {
    "label": "glListParameterfSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)"
  },
  {
    "label": "glListParameterfvSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glListParameteriSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glListParameteriSGIX(GLuint list, GLenum pname, GLint param)"
  },
  {
    "label": "glListParameterivSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_pixel_texture # define GL_SGIX_pixel_texture 1 # define GL_PIXEL_TEX_GEN_SGIX 0 x8139 # define GL_PIXEL_TEX_GEN_MODE_SGIX 0 x832B typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELTEXGENSGIXPROC) (GLenum mode)"
  },
  {
    "label": "glPixelTexGenSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glPixelTexGenSGIX(GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_pixel_tiles # define GL_SGIX_pixel_tiles 1 # define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0 x813E # define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0 x813F # define GL_PIXEL_TILE_WIDTH_SGIX 0 x8140 # define GL_PIXEL_TILE_HEIGHT_SGIX 0 x8141 # define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0 x8142 # define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0 x8143 # define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0 x8144 # define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0 x8145 # endif # ifndef GL_SGIX_polynomial_ffd # define GL_SGIX_polynomial_ffd 1 # define GL_TEXTURE_DEFORMATION_BIT_SGIX 0 x00000001 # define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0 x00000002 # define GL_GEOMETRY_DEFORMATION_SGIX 0 x8194 # define GL_TEXTURE_DEFORMATION_SGIX 0 x8195 # define GL_DEFORMATIONS_MASK_SGIX 0 x8196 # define GL_MAX_DEFORMATION_ORDER_SGIX 0 x8197 typedef)",
    "insertText": "void(APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEFORMSGIXPROC) (GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask)"
  },
  {
    "label": "glDeformationMap3dSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)"
  },
  {
    "label": "glDeformationMap3fSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)"
  },
  {
    "label": "glDeformSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeformSGIX(GLbitfield mask)"
  },
  {
    "label": "glLoadIdentityDeformationMapSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLoadIdentityDeformationMapSGIX(GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_reference_plane # define GL_SGIX_reference_plane 1 # define GL_REFERENCE_PLANE_SGIX 0 x817D # define GL_REFERENCE_PLANE_EQUATION_SGIX 0 x817E typedef)",
    "insertText": "void(APIENTRYP PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation)"
  },
  {
    "label": "glReferencePlaneSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glReferencePlaneSGIX(const GLdouble *equation)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_resample # define GL_SGIX_resample 1 # define GL_PACK_RESAMPLE_SGIX 0 x842E # define GL_UNPACK_RESAMPLE_SGIX 0 x842F # define GL_RESAMPLE_REPLICATE_SGIX 0 x8433 # define GL_RESAMPLE_ZERO_FILL_SGIX 0 x8434 # define GL_RESAMPLE_DECIMATE_SGIX 0 x8430 # endif # ifndef GL_SGIX_scalebias_hint # define GL_SGIX_scalebias_hint 1 # define GL_SCALEBIAS_HINT_SGIX 0 x8322 # endif # ifndef GL_SGIX_shadow # define GL_SGIX_shadow 1 # define GL_TEXTURE_COMPARE_SGIX 0 x819A # define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0 x819B # define GL_TEXTURE_LEQUAL_R_SGIX 0 x819C # define GL_TEXTURE_GEQUAL_R_SGIX 0 x819D # endif # ifndef GL_SGIX_shadow_ambient # define GL_SGIX_shadow_ambient 1 # define GL_SHADOW_AMBIENT_SGIX 0 x80BF # endif # ifndef GL_SGIX_sprite # define GL_SGIX_sprite 1 # define GL_SPRITE_SGIX 0 x8148 # define GL_SPRITE_MODE_SGIX 0 x8149 # define GL_SPRITE_AXIS_SGIX 0 x814A # define GL_SPRITE_TRANSLATION_SGIX 0 x814B # define GL_SPRITE_AXIAL_SGIX 0 x814C # define GL_SPRITE_OBJECT_ALIGNED_SGIX 0 x814D # define GL_SPRITE_EYE_ALIGNED_SGIX 0 x814E typedef)",
    "insertText": "void(APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params)"
  },
  {
    "label": "glSpriteParameterfSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glSpriteParameterfSGIX(GLenum pname, GLfloat param)"
  },
  {
    "label": "glSpriteParameterfvSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glSpriteParameteriSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSpriteParameteriSGIX(GLenum pname, GLint param)"
  },
  {
    "label": "glSpriteParameterivSGIX()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSpriteParameterivSGIX(GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_subsample # define GL_SGIX_subsample 1 # define GL_PACK_SUBSAMPLE_RATE_SGIX 0 x85A0 # define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0 x85A1 # define GL_PIXEL_SUBSAMPLE_4444_SGIX 0 x85A2 # define GL_PIXEL_SUBSAMPLE_2424_SGIX 0 x85A3 # define GL_PIXEL_SUBSAMPLE_4242_SGIX 0 x85A4 # endif # ifndef GL_SGIX_tag_sample_buffer # define GL_SGIX_tag_sample_buffer 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC) (void)"
  },
  {
    "label": "glTagSampleBufferSGIX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTagSampleBufferSGIX(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGIX_texture_add_env # define GL_SGIX_texture_add_env 1 # define GL_TEXTURE_ENV_BIAS_SGIX 0 x80BE # endif # ifndef GL_SGIX_texture_coordinate_clamp # define GL_SGIX_texture_coordinate_clamp 1 # define GL_TEXTURE_MAX_CLAMP_S_SGIX 0 x8369 # define GL_TEXTURE_MAX_CLAMP_T_SGIX 0 x836A # define GL_TEXTURE_MAX_CLAMP_R_SGIX 0 x836B # endif # ifndef GL_SGIX_texture_lod_bias # define GL_SGIX_texture_lod_bias 1 # define GL_TEXTURE_LOD_BIAS_S_SGIX 0 x818E # define GL_TEXTURE_LOD_BIAS_T_SGIX 0 x818F # define GL_TEXTURE_LOD_BIAS_R_SGIX 0 x8190 # endif # ifndef GL_SGIX_texture_multi_buffer # define GL_SGIX_texture_multi_buffer 1 # define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0 x812E # endif # ifndef GL_SGIX_texture_scale_bias # define GL_SGIX_texture_scale_bias 1 # define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0 x8179 # define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0 x817A # define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0 x817B # define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0 x817C # endif # ifndef GL_SGIX_vertex_preclip # define GL_SGIX_vertex_preclip 1 # define GL_VERTEX_PRECLIP_SGIX 0 x83EE # define GL_VERTEX_PRECLIP_HINT_SGIX 0 x83EF # endif # ifndef GL_SGIX_ycrcb # define GL_SGIX_ycrcb 1 # define GL_YCRCB_422_SGIX 0 x81BB # define GL_YCRCB_444_SGIX 0 x81BC # endif # ifndef GL_SGIX_ycrcb_subsample # define GL_SGIX_ycrcb_subsample 1 # endif # ifndef GL_SGIX_ycrcba # define GL_SGIX_ycrcba 1 # define GL_YCRCB_SGIX 0 x8318 # define GL_YCRCBA_SGIX 0 x8319 # endif # ifndef GL_SGI_color_matrix # define GL_SGI_color_matrix 1 # define GL_COLOR_MATRIX_SGI 0 x80B1 # define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0 x80B2 # define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0 x80B3 # define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0 x80B4 # define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0 x80B5 # define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0 x80B6 # define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0 x80B7 # define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0 x80B8 # define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0 x80B9 # define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0 x80BA # define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0 x80BB # endif # ifndef GL_SGI_color_table # define GL_SGI_color_table 1 # define GL_COLOR_TABLE_SGI 0 x80D0 # define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0 x80D1 # define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0 x80D2 # define GL_PROXY_COLOR_TABLE_SGI 0 x80D3 # define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0 x80D4 # define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0 x80D5 # define GL_COLOR_TABLE_SCALE_SGI 0 x80D6 # define GL_COLOR_TABLE_BIAS_SGI 0 x80D7 # define GL_COLOR_TABLE_FORMAT_SGI 0 x80D8 # define GL_COLOR_TABLE_WIDTH_SGI 0 x80D9 # define GL_COLOR_TABLE_RED_SIZE_SGI 0 x80DA # define GL_COLOR_TABLE_GREEN_SIZE_SGI 0 x80DB # define GL_COLOR_TABLE_BLUE_SIZE_SGI 0 x80DC # define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0 x80DD # define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0 x80DE # define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0 x80DF typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void *table)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glColorTableSGI()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "glColorTableParameterfvSGI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glColorTableParameterivSGI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyColorTableSGI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glGetColorTableSGI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void *table)"
  },
  {
    "label": "glGetColorTableParameterfvSGI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetColorTableParameterivSGI()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SGI_texture_color_table # define GL_SGI_texture_color_table 1 # define GL_TEXTURE_COLOR_TABLE_SGI 0 x80BC # define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0 x80BD # endif # ifndef GL_SUNX_constant_data # define GL_SUNX_constant_data 1 # define GL_UNPACK_CONSTANT_DATA_SUNX 0 x81D5 # define GL_TEXTURE_CONSTANT_DATA_SUNX 0 x81D6 typedef)",
    "insertText": "void(APIENTRYP PFNGLFINISHTEXTURESUNXPROC) (void)"
  },
  {
    "label": "glFinishTextureSUNX()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glFinishTextureSUNX(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SUN_convolution_border_modes # define GL_SUN_convolution_border_modes 1 # define GL_WRAP_BORDER_SUN 0 x81D4 # endif # ifndef GL_SUN_global_alpha # define GL_SUN_global_alpha 1 # define GL_GLOBAL_ALPHA_SUN 0 x81D9 # define GL_GLOBAL_ALPHA_FACTOR_SUN 0 x81DA typedef)",
    "insertText": "void(APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor)"
  },
  {
    "label": "glGlobalAlphaFactorbSUN()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGlobalAlphaFactorbSUN(GLbyte factor)"
  },
  {
    "label": "glGlobalAlphaFactorsSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGlobalAlphaFactorsSUN(GLshort factor)"
  },
  {
    "label": "glGlobalAlphaFactoriSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGlobalAlphaFactoriSUN(GLint factor)"
  },
  {
    "label": "glGlobalAlphaFactorfSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGlobalAlphaFactorfSUN(GLfloat factor)"
  },
  {
    "label": "glGlobalAlphaFactordSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGlobalAlphaFactordSUN(GLdouble factor)"
  },
  {
    "label": "glGlobalAlphaFactorubSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGlobalAlphaFactorubSUN(GLubyte factor)"
  },
  {
    "label": "glGlobalAlphaFactorusSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGlobalAlphaFactorusSUN(GLushort factor)"
  },
  {
    "label": "glGlobalAlphaFactoruiSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGlobalAlphaFactoruiSUN(GLuint factor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SUN_mesh_array # define GL_SUN_mesh_array 1 # define GL_QUAD_MESH_SUN 0 x8614 # define GL_TRIANGLE_MESH_SUN 0 x8615 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width)"
  },
  {
    "label": "glDrawMeshArraysSUN()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SUN_slice_accum # define GL_SUN_slice_accum 1 # define GL_SLICE_ACCUM_SUN 0 x85CC # endif # ifndef GL_SUN_triangle_list # define GL_SUN_triangle_list 1 # define GL_RESTART_SUN 0 x0001 # define GL_REPLACE_MIDDLE_SUN 0 x0002 # define GL_REPLACE_OLDEST_SUN 0 x0003 # define GL_TRIANGLE_LIST_SUN 0 x81D7 # define GL_REPLACEMENT_CODE_SUN 0 x81D8 # define GL_REPLACEMENT_CODE_ARRAY_SUN 0 x85C0 # define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0 x85C1 # define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0 x85C2 # define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0 x85C3 # define GL_R1UI_V3F_SUN 0 x85C4 # define GL_R1UI_C4UB_V3F_SUN 0 x85C5 # define GL_R1UI_C3F_V3F_SUN 0 x85C6 # define GL_R1UI_N3F_V3F_SUN 0 x85C7 # define GL_R1UI_C4F_N3F_V3F_SUN 0 x85C8 # define GL_R1UI_T2F_V3F_SUN 0 x85C9 # define GL_R1UI_T2F_N3F_V3F_SUN 0 x85CA # define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0 x85CB typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void **pointer)"
  },
  {
    "label": "glReplacementCodeuiSUN()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiSUN(GLuint code)"
  },
  {
    "label": "glReplacementCodeusSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeusSUN(GLushort code)"
  },
  {
    "label": "glReplacementCodeubSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeubSUN(GLubyte code)"
  },
  {
    "label": "glReplacementCodeuivSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuivSUN(const GLuint *code)"
  },
  {
    "label": "glReplacementCodeusvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeusvSUN(const GLushort *code)"
  },
  {
    "label": "glReplacementCodeubvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeubvSUN(const GLubyte *code)"
  },
  {
    "label": "glReplacementCodePointerSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void **pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_SUN_vertex # define GL_SUN_vertex 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glColor4ubVertex2fSUN()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)"
  },
  {
    "label": "glColor4ubVertex2fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "glColor4ubVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glColor4ubVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "glColor3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glColor3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "glNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glColor4fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glColor4fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "glTexCoord4fVertex4fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glTexCoord4fVertex4fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fColor4ubVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fColor4ubVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fColor3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fColor3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fColor4fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fColor4fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glTexCoord4fColor4fNormal3fVertex4fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glTexCoord4fColor4fNormal3fVertex4fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiColor4ubVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiColor4ubVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiColor3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiColor3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiColor4fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiColor4fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  }
]