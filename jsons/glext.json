[
  {
    "label": "__GLsync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__GLsync"
  },
  {
    "label": "_cl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_context"
  },
  {
    "label": "_cl_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_event"
  },
  {
    "label": "_cl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_context"
  },
  {
    "label": "_cl_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_event"
  },
  {
    "label": "_cl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_context"
  },
  {
    "label": "_cl_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_event"
  },
  {
    "label": "glDrawRangeElements()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glActiveTexture(GLenum texture)"
  },
  {
    "label": "glSampleCoverage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleCoverage(GLfloat value, GLboolean invert)"
  },
  {
    "label": "glCompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glGetCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedTexImage(GLenum target, GLint level, void *img)"
  },
  {
    "label": "glClientActiveTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClientActiveTexture(GLenum texture)"
  },
  {
    "label": "glMultiTexCoord1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1d(GLenum target, GLdouble s)"
  },
  {
    "label": "glMultiTexCoord1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord1f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1f(GLenum target, GLfloat s)"
  },
  {
    "label": "glMultiTexCoord1fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord1i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1i(GLenum target, GLint s)"
  },
  {
    "label": "glMultiTexCoord1iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord1s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1s(GLenum target, GLshort s)"
  },
  {
    "label": "glMultiTexCoord1sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "glMultiTexCoord2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord2f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "glMultiTexCoord2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord2i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2i(GLenum target, GLint s, GLint t)"
  },
  {
    "label": "glMultiTexCoord2iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord2s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "glMultiTexCoord2sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "glMultiTexCoord3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "glMultiTexCoord3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "glMultiTexCoord3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord3s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "glMultiTexCoord3sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "glMultiTexCoord4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord4f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "glMultiTexCoord4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord4i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "glMultiTexCoord4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord4s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "glMultiTexCoord4sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glLoadTransposeMatrixf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLoadTransposeMatrixf(const GLfloat *m)"
  },
  {
    "label": "glLoadTransposeMatrixd()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLoadTransposeMatrixd(const GLdouble *m)"
  },
  {
    "label": "glMultTransposeMatrixf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultTransposeMatrixf(const GLfloat *m)"
  },
  {
    "label": "glMultTransposeMatrixd()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultTransposeMatrixd(const GLdouble *m)"
  },
  {
    "label": "glBlendFuncSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glMultiDrawArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)"
  },
  {
    "label": "glMultiDrawElements()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)"
  },
  {
    "label": "glPointParameterf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterf(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterfv(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glPointParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameteri(GLenum pname, GLint param)"
  },
  {
    "label": "glPointParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameteriv(GLenum pname, const GLint *params)"
  },
  {
    "label": "glFogCoordf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordf(GLfloat coord)"
  },
  {
    "label": "glFogCoordfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordfv(const GLfloat *coord)"
  },
  {
    "label": "glFogCoordd()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordd(GLdouble coord)"
  },
  {
    "label": "glFogCoorddv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoorddv(const GLdouble *coord)"
  },
  {
    "label": "glFogCoordPointer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordPointer(GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glSecondaryColor3b()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)"
  },
  {
    "label": "glSecondaryColor3bv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3bv(const GLbyte *v)"
  },
  {
    "label": "glSecondaryColor3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)"
  },
  {
    "label": "glSecondaryColor3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3dv(const GLdouble *v)"
  },
  {
    "label": "glSecondaryColor3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)"
  },
  {
    "label": "glSecondaryColor3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3fv(const GLfloat *v)"
  },
  {
    "label": "glSecondaryColor3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3i(GLint red, GLint green, GLint blue)"
  },
  {
    "label": "glSecondaryColor3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3iv(const GLint *v)"
  },
  {
    "label": "glSecondaryColor3s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)"
  },
  {
    "label": "glSecondaryColor3sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3sv(const GLshort *v)"
  },
  {
    "label": "glSecondaryColor3ub()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)"
  },
  {
    "label": "glSecondaryColor3ubv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3ubv(const GLubyte *v)"
  },
  {
    "label": "glSecondaryColor3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)"
  },
  {
    "label": "glSecondaryColor3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3uiv(const GLuint *v)"
  },
  {
    "label": "glSecondaryColor3us()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)"
  },
  {
    "label": "glSecondaryColor3usv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3usv(const GLushort *v)"
  },
  {
    "label": "glSecondaryColorPointer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glWindowPos2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2d(GLdouble x, GLdouble y)"
  },
  {
    "label": "glWindowPos2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2dv(const GLdouble *v)"
  },
  {
    "label": "glWindowPos2f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2f(GLfloat x, GLfloat y)"
  },
  {
    "label": "glWindowPos2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2fv(const GLfloat *v)"
  },
  {
    "label": "glWindowPos2i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2i(GLint x, GLint y)"
  },
  {
    "label": "glWindowPos2iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2iv(const GLint *v)"
  },
  {
    "label": "glWindowPos2s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2s(GLshort x, GLshort y)"
  },
  {
    "label": "glWindowPos2sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2sv(const GLshort *v)"
  },
  {
    "label": "glWindowPos3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glWindowPos3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3dv(const GLdouble *v)"
  },
  {
    "label": "glWindowPos3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glWindowPos3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3fv(const GLfloat *v)"
  },
  {
    "label": "glWindowPos3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3i(GLint x, GLint y, GLint z)"
  },
  {
    "label": "glWindowPos3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3iv(const GLint *v)"
  },
  {
    "label": "glWindowPos3s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3s(GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glWindowPos3sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3sv(const GLshort *v)"
  },
  {
    "label": "glBlendColor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glBlendEquation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquation(GLenum mode)"
  },
  {
    "label": "glGenQueries()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenQueries(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteQueries()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteQueries(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsQuery()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsQuery(GLuint id)"
  },
  {
    "label": "glBeginQuery()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginQuery(GLenum target, GLuint id)"
  },
  {
    "label": "glEndQuery()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndQuery(GLenum target)"
  },
  {
    "label": "glGetQueryiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryiv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBuffer(GLenum target, GLuint buffer)"
  },
  {
    "label": "glDeleteBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteBuffers(GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glIsBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsBuffer(GLuint buffer)"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glGetBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glMapBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapBuffer(GLenum target, GLenum access)"
  },
  {
    "label": "glUnmapBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnmapBuffer(GLenum target)"
  },
  {
    "label": "glGetBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetBufferPointerv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferPointerv(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glBlendEquationSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glDrawBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawBuffers(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glStencilOpSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "glStencilFuncSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilMaskSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilMaskSeparate(GLenum face, GLuint mask)"
  },
  {
    "label": "glAttachShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAttachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glBindAttribLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "glCompileShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompileShader(GLuint shader)"
  },
  {
    "label": "glCreateProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateProgram(void)"
  },
  {
    "label": "glCreateShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateShader(GLenum type)"
  },
  {
    "label": "glDeleteProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteProgram(GLuint program)"
  },
  {
    "label": "glDeleteShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteShader(GLuint shader)"
  },
  {
    "label": "glDetachShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDetachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glDisableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glEnableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glGetActiveAttrib()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetActiveUniform()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetAttachedShaders()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "glGetAttribLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetAttribLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetProgramiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramiv(GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramInfoLog()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderiv(GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetShaderInfoLog()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderSource()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "glGetUniformLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetUniformfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformfv(GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "glGetUniformiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformiv(GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "glGetVertexAttribdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetVertexAttribfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointerv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glIsProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsProgram(GLuint program)"
  },
  {
    "label": "glIsShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsShader(GLuint shader)"
  },
  {
    "label": "glLinkProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLinkProgram(GLuint program)"
  },
  {
    "label": "glShaderSource()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "glUseProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUseProgram(GLuint program)"
  },
  {
    "label": "glUniform1f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1f(GLint location, GLfloat v0)"
  },
  {
    "label": "glUniform2f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2f(GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glUniform3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glUniform4f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glUniform1i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1i(GLint location, GLint v0)"
  },
  {
    "label": "glUniform2i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2i(GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glUniform3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glUniform4i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glUniform1fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform1iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform2iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glValidateProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glValidateProgram(GLuint program)"
  },
  {
    "label": "glVertexAttrib1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1d(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttrib1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib1f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1f(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib1s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1s(GLuint index, GLshort x)"
  },
  {
    "label": "glVertexAttrib1sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttrib2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib2f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2s(GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexAttrib2sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttrib3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexAttrib3sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4Nbv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nbv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4Niv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Niv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4Nsv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nsv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4Nub()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "glVertexAttrib4Nubv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4Nuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nuiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4Nusv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nusv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttrib4bv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4bv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttrib4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib4f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexAttrib4sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4ubv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4ubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4usv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4usv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glUniformMatrix2x3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix2x4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glColorMaski()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "glGetBooleani_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "glGetIntegeri_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetIntegeri_v(GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "glEnablei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnablei(GLenum target, GLuint index)"
  },
  {
    "label": "glDisablei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisablei(GLenum target, GLuint index)"
  },
  {
    "label": "glIsEnabledi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsEnabledi(GLenum target, GLuint index)"
  },
  {
    "label": "glBeginTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginTransformFeedback(GLenum primitiveMode)"
  },
  {
    "label": "glEndTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndTransformFeedback(void)"
  },
  {
    "label": "glBindBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBindBufferBase()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferBase(GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackVaryings()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "glGetTransformFeedbackVarying()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glClampColor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClampColor(GLenum target, GLenum clamp)"
  },
  {
    "label": "glBeginConditionalRender()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginConditionalRender(GLuint id, GLenum mode)"
  },
  {
    "label": "glEndConditionalRender()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndConditionalRender(void)"
  },
  {
    "label": "glVertexAttribIPointer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "glVertexAttribI1i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1i(GLuint index, GLint x)"
  },
  {
    "label": "glVertexAttribI2i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2i(GLuint index, GLint x, GLint y)"
  },
  {
    "label": "glVertexAttribI3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertexAttribI4i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertexAttribI1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1ui(GLuint index, GLuint x)"
  },
  {
    "label": "glVertexAttribI2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "glVertexAttribI3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "glVertexAttribI4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glVertexAttribI1iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI2iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4bv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4bv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttribI4sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttribI4ubv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4ubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribI4usv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4usv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glGetUniformuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformuiv(GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "glBindFragDataLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "glGetFragDataLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragDataLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glUniform1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1ui(GLint location, GLuint v0)"
  },
  {
    "label": "glUniform2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2ui(GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glUniform3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glUniform4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glUniform1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glTexParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTexParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glClearBufferiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "glClearBufferuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "glClearBufferfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "glClearBufferfi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "glGetStringi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetStringi(GLenum name, GLuint index)"
  },
  {
    "label": "glIsRenderbuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsRenderbuffer(GLuint renderbuffer)"
  },
  {
    "label": "glBindRenderbuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindRenderbuffer(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glDeleteRenderbuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "glGenRenderbuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsFramebuffer(GLuint framebuffer)"
  },
  {
    "label": "glBindFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFramebuffer(GLenum target, GLuint framebuffer)"
  },
  {
    "label": "glDeleteFramebuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "glGenFramebuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glCheckFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCheckFramebufferStatus(GLenum target)"
  },
  {
    "label": "glFramebufferTexture1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glGetFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGenerateMipmap()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenerateMipmap(GLenum target)"
  },
  {
    "label": "glBlitFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glRenderbufferStorageMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glMapBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glFlushMappedBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glBindVertexArray()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVertexArray(GLuint array)"
  },
  {
    "label": "glDeleteVertexArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteVertexArrays(GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "glGenVertexArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenVertexArrays(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glIsVertexArray()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsVertexArray(GLuint array)"
  },
  {
    "label": "glDrawArraysInstanced()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)"
  },
  {
    "label": "glDrawElementsInstanced()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)"
  },
  {
    "label": "glTexBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glPrimitiveRestartIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPrimitiveRestartIndex(GLuint index)"
  },
  {
    "label": "glCopyBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glGetUniformIndices()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)"
  },
  {
    "label": "glGetActiveUniformsiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetActiveUniformName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)"
  },
  {
    "label": "glGetUniformBlockIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)"
  },
  {
    "label": "glGetActiveUniformBlockiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetActiveUniformBlockName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)"
  },
  {
    "label": "glUniformBlockBinding()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)"
  },
  {
    "label": "glDrawElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawRangeElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "glMultiDrawElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)"
  },
  {
    "label": "glProvokingVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProvokingVertex(GLenum mode)"
  },
  {
    "label": "glFenceSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFenceSync(GLenum condition, GLbitfield flags)"
  },
  {
    "label": "glIsSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsSync(GLsync sync)"
  },
  {
    "label": "glDeleteSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteSync(GLsync sync)"
  },
  {
    "label": "glClientWaitSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glWaitSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glGetInteger64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInteger64v(GLenum pname, GLint64 *data)"
  },
  {
    "label": "glGetSynciv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "glGetInteger64i_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)"
  },
  {
    "label": "glGetBufferParameteri64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glTexImage2DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexImage3DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glGetMultisamplefv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "glSampleMaski()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleMaski(GLuint maskNumber, GLbitfield mask)"
  },
  {
    "label": "glBindFragDataLocationIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)"
  },
  {
    "label": "glGetFragDataIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragDataIndex(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGenSamplers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenSamplers(GLsizei count, GLuint *samplers)"
  },
  {
    "label": "glDeleteSamplers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteSamplers(GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "glIsSampler()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsSampler(GLuint sampler)"
  },
  {
    "label": "glBindSampler()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindSampler(GLuint unit, GLuint sampler)"
  },
  {
    "label": "glSamplerParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)"
  },
  {
    "label": "glSamplerParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)"
  },
  {
    "label": "glSamplerParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glSamplerParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "glGetSamplerParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetSamplerParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "glQueryCounter()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glQueryCounter(GLuint id, GLenum target)"
  },
  {
    "label": "glGetQueryObjecti64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetQueryObjectui64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "glVertexAttribDivisor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribDivisor(GLuint index, GLuint divisor)"
  },
  {
    "label": "glVertexAttribP1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexP2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexP2ui(GLenum type, GLuint value)"
  },
  {
    "label": "glVertexP2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexP2uiv(GLenum type, const GLuint *value)"
  },
  {
    "label": "glVertexP3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexP3ui(GLenum type, GLuint value)"
  },
  {
    "label": "glVertexP3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexP3uiv(GLenum type, const GLuint *value)"
  },
  {
    "label": "glVertexP4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexP4ui(GLenum type, GLuint value)"
  },
  {
    "label": "glVertexP4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexP4uiv(GLenum type, const GLuint *value)"
  },
  {
    "label": "glTexCoordP1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordP1ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glTexCoordP1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordP1uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glTexCoordP2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordP2ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glTexCoordP2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordP2uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glTexCoordP3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordP3ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glTexCoordP3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordP3uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glTexCoordP4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordP4ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glTexCoordP4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordP4uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glMultiTexCoordP1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "glMultiTexCoordP1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "glMultiTexCoordP2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "glMultiTexCoordP2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "glMultiTexCoordP3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "glMultiTexCoordP3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "glMultiTexCoordP4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords)"
  },
  {
    "label": "glMultiTexCoordP4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint *coords)"
  },
  {
    "label": "glNormalP3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalP3ui(GLenum type, GLuint coords)"
  },
  {
    "label": "glNormalP3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalP3uiv(GLenum type, const GLuint *coords)"
  },
  {
    "label": "glColorP3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorP3ui(GLenum type, GLuint color)"
  },
  {
    "label": "glColorP3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorP3uiv(GLenum type, const GLuint *color)"
  },
  {
    "label": "glColorP4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorP4ui(GLenum type, GLuint color)"
  },
  {
    "label": "glColorP4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorP4uiv(GLenum type, const GLuint *color)"
  },
  {
    "label": "glSecondaryColorP3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColorP3ui(GLenum type, GLuint color)"
  },
  {
    "label": "glSecondaryColorP3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColorP3uiv(GLenum type, const GLuint *color)"
  },
  {
    "label": "glMinSampleShading()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMinSampleShading(GLfloat value)"
  },
  {
    "label": "glBlendEquationi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationi(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparatei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunci()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFunci(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparatei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysIndirect(GLenum mode, const void *indirect)"
  },
  {
    "label": "glDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect)"
  },
  {
    "label": "glUniform1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1d(GLint location, GLdouble x)"
  },
  {
    "label": "glUniform2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2d(GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "glUniform3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glUniform4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glUniform1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2x3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2x4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3x2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3x4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4x2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4x3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glGetUniformdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformdv(GLuint program, GLint location, GLdouble *params)"
  },
  {
    "label": "glGetSubroutineUniformLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "glGetSubroutineIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "glGetActiveSubroutineUniformiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)"
  },
  {
    "label": "glGetActiveSubroutineUniformName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glGetActiveSubroutineName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glUniformSubroutinesuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices)"
  },
  {
    "label": "glGetUniformSubroutineuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params)"
  },
  {
    "label": "glGetProgramStageiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values)"
  },
  {
    "label": "glPatchParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPatchParameteri(GLenum pname, GLint value)"
  },
  {
    "label": "glPatchParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPatchParameterfv(GLenum pname, const GLfloat *values)"
  },
  {
    "label": "glBindTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTransformFeedback(GLenum target, GLuint id)"
  },
  {
    "label": "glDeleteTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glGenTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenTransformFeedbacks(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glIsTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsTransformFeedback(GLuint id)"
  },
  {
    "label": "glPauseTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPauseTransformFeedback(void)"
  },
  {
    "label": "glResumeTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResumeTransformFeedback(void)"
  },
  {
    "label": "glDrawTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedback(GLenum mode, GLuint id)"
  },
  {
    "label": "glDrawTransformFeedbackStream()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)"
  },
  {
    "label": "glBeginQueryIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)"
  },
  {
    "label": "glEndQueryIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndQueryIndexed(GLenum target, GLuint index)"
  },
  {
    "label": "glGetQueryIndexediv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glReleaseShaderCompiler()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReleaseShaderCompiler(void)"
  },
  {
    "label": "glShaderBinary()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)"
  },
  {
    "label": "glGetShaderPrecisionFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "glDepthRangef()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangef(GLfloat n, GLfloat f)"
  },
  {
    "label": "glClearDepthf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearDepthf(GLfloat d)"
  },
  {
    "label": "glGetProgramBinary()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)"
  },
  {
    "label": "glProgramBinary()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "glProgramParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameteri(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glUseProgramStages()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)"
  },
  {
    "label": "glActiveShaderProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glActiveShaderProgram(GLuint pipeline, GLuint program)"
  },
  {
    "label": "glCreateShaderProgramv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings)"
  },
  {
    "label": "glBindProgramPipeline()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glDeleteProgramPipelines()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)"
  },
  {
    "label": "glGenProgramPipelines()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenProgramPipelines(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glIsProgramPipeline()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glGetProgramPipelineiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)"
  },
  {
    "label": "glProgramUniform1i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1i(GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "glProgramUniform1iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform1f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1f(GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "glProgramUniform1fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1d(GLuint program, GLint location, GLdouble v0)"
  },
  {
    "label": "glProgramUniform1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1ui(GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "glProgramUniform1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform2i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glProgramUniform2iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform2f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glProgramUniform2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)"
  },
  {
    "label": "glProgramUniform2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glProgramUniform2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glProgramUniform3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glProgramUniform3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)"
  },
  {
    "label": "glProgramUniform3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glProgramUniform3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform4i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glProgramUniform4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform4f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glProgramUniform4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)"
  },
  {
    "label": "glProgramUniform4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glProgramUniform4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glValidateProgramPipeline()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glValidateProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glGetProgramPipelineInfoLog()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glVertexAttribL1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1d(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttribL2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttribL3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttribL4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttribL1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribLPointer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribLdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glViewportArrayv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glViewportIndexedf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "glViewportIndexedfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewportIndexedfv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glScissorArrayv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glScissorArrayv(GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "glScissorIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "glScissorIndexedv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glScissorIndexedv(GLuint index, const GLint *v)"
  },
  {
    "label": "glDepthRangeArrayv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glDepthRangeIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f)"
  },
  {
    "label": "glGetFloati_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFloati_v(GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "glGetDoublei_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDoublei_v(GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "glDrawArraysInstancedBaseInstance()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseInstance()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertexBaseInstance()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)"
  },
  {
    "label": "glGetInternalformativ()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetActiveAtomicCounterBufferiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "glBindImageTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)"
  },
  {
    "label": "glMemoryBarrier()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMemoryBarrier(GLbitfield barriers)"
  },
  {
    "label": "glTexStorage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTexStorage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexStorage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glDrawTransformFeedbackInstanced()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount)"
  },
  {
    "label": "glDrawTransformFeedbackStreamInstanced()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)"
  },
  {
    "label": "glClearBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glDispatchCompute()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)"
  },
  {
    "label": "glDispatchComputeIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDispatchComputeIndirect(GLintptr indirect)"
  },
  {
    "label": "glCopyImageSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "glFramebufferParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glGetFramebufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetInternalformati64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "glInvalidateTexSubImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glInvalidateTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateTexImage(GLuint texture, GLint level)"
  },
  {
    "label": "glInvalidateBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glInvalidateBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateBufferData(GLuint buffer)"
  },
  {
    "label": "glInvalidateFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glInvalidateSubFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glMultiDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glGetProgramInterfaceiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramResourceIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glGetProgramResourceiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)"
  },
  {
    "label": "glGetProgramResourceLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceLocationIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glShaderStorageBlockBinding()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)"
  },
  {
    "label": "glTexBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTexStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexStorage3DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureView()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "glBindVertexBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexAttribFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribIFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribLFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribBinding()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexBindingDivisor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glDebugMessageControl()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsert()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLog()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glPushDebugGroup()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)"
  },
  {
    "label": "glPopDebugGroup()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPopDebugGroup(void)"
  },
  {
    "label": "glObjectLabel()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectLabel()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glObjectPtrLabel()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectPtrLabel()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glBufferStorage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glClearTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearTexSubImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glBindBuffersBase()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)"
  },
  {
    "label": "glBindBuffersRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)"
  },
  {
    "label": "glBindTextures()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTextures(GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "glBindSamplers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "glBindImageTextures()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "glBindVertexBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "glClipControl()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClipControl(GLenum origin, GLenum depth)"
  },
  {
    "label": "glCreateTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateTransformFeedbacks(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glTransformFeedbackBufferBase()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glGetTransformFeedbackiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetTransformFeedbacki_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param)"
  },
  {
    "label": "glGetTransformFeedbacki64_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param)"
  },
  {
    "label": "glCreateBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glNamedBufferStorage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glNamedBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glCopyNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glClearNamedBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glMapNamedBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapNamedBuffer(GLuint buffer, GLenum access)"
  },
  {
    "label": "glMapNamedBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glUnmapNamedBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnmapNamedBuffer(GLuint buffer)"
  },
  {
    "label": "glFlushMappedNamedBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glGetNamedBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetNamedBufferParameteri64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetNamedBufferPointerv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "glGetNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glCreateFramebuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glNamedFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glNamedFramebufferParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "glNamedFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glNamedFramebufferDrawBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)"
  },
  {
    "label": "glNamedFramebufferDrawBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glNamedFramebufferReadBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src)"
  },
  {
    "label": "glInvalidateNamedFramebufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glInvalidateNamedFramebufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glClearNamedFramebufferiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "glClearNamedFramebufferuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "glClearNamedFramebufferfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "glClearNamedFramebufferfi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "glBlitNamedFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glCheckNamedFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target)"
  },
  {
    "label": "glGetNamedFramebufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetNamedFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateRenderbuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glNamedRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetNamedRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateTextures()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateTextures(GLenum target, GLsizei n, GLuint *textures)"
  },
  {
    "label": "glTextureBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTextureBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTextureStorage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTextureStorage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureStorage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glTextureStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureStorage3DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCompressedTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCopyTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCopyTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureParameterf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterf(GLuint texture, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTextureParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glTextureParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameteri(GLuint texture, GLenum pname, GLint param)"
  },
  {
    "label": "glTextureParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTextureParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glTextureParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param)"
  },
  {
    "label": "glGenerateTextureMipmap()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenerateTextureMipmap(GLuint texture)"
  },
  {
    "label": "glBindTextureUnit()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTextureUnit(GLuint unit, GLuint texture)"
  },
  {
    "label": "glGetTextureImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetCompressedTextureImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetTextureLevelParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureLevelParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGetTextureParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateVertexArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateVertexArrays(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glDisableVertexArrayAttrib()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVertexArrayAttrib(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glEnableVertexArrayAttrib()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVertexArrayAttrib(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glVertexArrayElementBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer)"
  },
  {
    "label": "glVertexArrayVertexBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexArrayVertexBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "glVertexArrayAttribBinding()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexArrayAttribFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayAttribIFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayAttribLFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayBindingDivisor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glGetVertexArrayiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayIndexediv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayIndexed64iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)"
  },
  {
    "label": "glCreateSamplers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateSamplers(GLsizei n, GLuint *samplers)"
  },
  {
    "label": "glCreateProgramPipelines()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateProgramPipelines(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glCreateQueries()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateQueries(GLenum target, GLsizei n, GLuint *ids)"
  },
  {
    "label": "glGetQueryBufferObjecti64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectui64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glMemoryBarrierByRegion()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMemoryBarrierByRegion(GLbitfield barriers)"
  },
  {
    "label": "glGetTextureSubImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetCompressedTextureSubImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetGraphicsResetStatus()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetGraphicsResetStatus(void)"
  },
  {
    "label": "glGetnCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetnTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetnUniformdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "glGetnUniformfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glReadnPixels()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glGetnMapdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)"
  },
  {
    "label": "glGetnMapfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)"
  },
  {
    "label": "glGetnMapiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint *v)"
  },
  {
    "label": "glGetnPixelMapfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat *values)"
  },
  {
    "label": "glGetnPixelMapuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint *values)"
  },
  {
    "label": "glGetnPixelMapusv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort *values)"
  },
  {
    "label": "glGetnPolygonStipple()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnPolygonStipple(GLsizei bufSize, GLubyte *pattern)"
  },
  {
    "label": "glGetnColorTable()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)"
  },
  {
    "label": "glGetnConvolutionFilter()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)"
  },
  {
    "label": "glGetnSeparableFilter()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)"
  },
  {
    "label": "glGetnHistogram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "glGetnMinmax()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "glTextureBarrier()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBarrier(void)"
  },
  {
    "label": "glPrimitiveBoundingBoxARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW)"
  },
  {
    "label": "glGetTextureHandleARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureHandleARB(GLuint texture)"
  },
  {
    "label": "glGetTextureSamplerHandleARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)"
  },
  {
    "label": "glMakeTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeTextureHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glMakeTextureHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeTextureHandleNonResidentARB(GLuint64 handle)"
  },
  {
    "label": "glGetImageHandleARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "glMakeImageHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)"
  },
  {
    "label": "glMakeImageHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeImageHandleNonResidentARB(GLuint64 handle)"
  },
  {
    "label": "glUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformHandleui64ARB(GLint location, GLuint64 value)"
  },
  {
    "label": "glUniformHandleui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "glProgramUniformHandleui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "glIsTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsTextureHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glIsImageHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsImageHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glVertexAttribL1ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)"
  },
  {
    "label": "glVertexAttribL1ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glGetVertexAttribLui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glCreateSyncFromCLeventARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags)"
  },
  {
    "label": "glClampColorARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClampColorARB(GLenum target, GLenum clamp)"
  },
  {
    "label": "glDispatchComputeGroupSizeARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)"
  },
  {
    "label": "glDebugMessageControlARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsertARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallbackARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLogARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glDrawBuffersARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawBuffersARB(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glBlendEquationiARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationiARB(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparateiARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunciARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparateiARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glDrawArraysInstancedARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "glDrawElementsInstancedARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "glProgramStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramStringARB(GLenum target, GLenum format, GLsizei len, const void *string)"
  },
  {
    "label": "glBindProgramARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindProgramARB(GLenum target, GLuint program)"
  },
  {
    "label": "glDeleteProgramsARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteProgramsARB(GLsizei n, const GLuint *programs)"
  },
  {
    "label": "glGenProgramsARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenProgramsARB(GLsizei n, GLuint *programs)"
  },
  {
    "label": "glProgramEnvParameter4dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramEnvParameter4dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "glProgramEnvParameter4fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glProgramEnvParameter4fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "glProgramLocalParameter4dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramLocalParameter4dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "glProgramLocalParameter4fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glProgramLocalParameter4fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "glGetProgramEnvParameterdvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "glGetProgramEnvParameterfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "glGetProgramLocalParameterdvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "glGetProgramLocalParameterfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "glGetProgramivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramivARB(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramStringARB(GLenum target, GLenum pname, void *string)"
  },
  {
    "label": "glIsProgramARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsProgramARB(GLuint program)"
  },
  {
    "label": "glProgramParameteriARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameteriARB(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glFramebufferTextureARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTextureLayerARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glFramebufferTextureFaceARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "glUniform1i64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1i64ARB(GLint location, GLint64 x)"
  },
  {
    "label": "glUniform2i64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2i64ARB(GLint location, GLint64 x, GLint64 y)"
  },
  {
    "label": "glUniform3i64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z)"
  },
  {
    "label": "glUniform4i64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)"
  },
  {
    "label": "glUniform1i64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1i64vARB(GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glUniform2i64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2i64vARB(GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glUniform3i64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3i64vARB(GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glUniform4i64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4i64vARB(GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glUniform1ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1ui64ARB(GLint location, GLuint64 x)"
  },
  {
    "label": "glUniform2ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y)"
  },
  {
    "label": "glUniform3ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z)"
  },
  {
    "label": "glUniform4ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)"
  },
  {
    "label": "glUniform1ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glUniform2ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glUniform3ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glUniform4ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glGetUniformi64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformi64vARB(GLuint program, GLint location, GLint64 *params)"
  },
  {
    "label": "glGetUniformui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformui64vARB(GLuint program, GLint location, GLuint64 *params)"
  },
  {
    "label": "glGetnUniformi64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "glGetnUniformui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 *params)"
  },
  {
    "label": "glProgramUniform1i64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x)"
  },
  {
    "label": "glProgramUniform2i64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y)"
  },
  {
    "label": "glProgramUniform3i64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z)"
  },
  {
    "label": "glProgramUniform4i64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w)"
  },
  {
    "label": "glProgramUniform1i64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glProgramUniform2i64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glProgramUniform3i64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glProgramUniform4i64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 *value)"
  },
  {
    "label": "glProgramUniform1ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x)"
  },
  {
    "label": "glProgramUniform2ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y)"
  },
  {
    "label": "glProgramUniform3ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z)"
  },
  {
    "label": "glProgramUniform4ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w)"
  },
  {
    "label": "glProgramUniform1ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniform2ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniform3ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniform4ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glColorTable()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "glColorTableParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glColorTableParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyColorTable()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glGetColorTable()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTable(GLenum target, GLenum format, GLenum type, void *table)"
  },
  {
    "label": "glGetColorTableParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetColorTableParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glColorSubTable()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glCopyColorSubTable()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glConvolutionFilter1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "glConvolutionFilter2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "glConvolutionParameterf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)"
  },
  {
    "label": "glConvolutionParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glConvolutionParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameteri(GLenum target, GLenum pname, GLint params)"
  },
  {
    "label": "glConvolutionParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyConvolutionFilter1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyConvolutionFilter2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetConvolutionFilter()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void *image)"
  },
  {
    "label": "glGetConvolutionParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetConvolutionParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSeparableFilter()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSeparableFilter(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)"
  },
  {
    "label": "glSeparableFilter2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)"
  },
  {
    "label": "glGetHistogram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "glGetHistogramParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetHistogramParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMinmax()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "glGetMinmaxParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMinmaxParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glHistogram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glMinmax()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMinmax(GLenum target, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glResetHistogram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResetHistogram(GLenum target)"
  },
  {
    "label": "glResetMinmax()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResetMinmax(GLenum target)"
  },
  {
    "label": "glMultiDrawArraysIndirectCountARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirectCountARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glVertexAttribDivisorARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribDivisorARB(GLuint index, GLuint divisor)"
  },
  {
    "label": "glCurrentPaletteMatrixARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCurrentPaletteMatrixARB(GLint index)"
  },
  {
    "label": "glMatrixIndexubvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixIndexubvARB(GLint size, const GLubyte *indices)"
  },
  {
    "label": "glMatrixIndexusvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixIndexusvARB(GLint size, const GLushort *indices)"
  },
  {
    "label": "glMatrixIndexuivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixIndexuivARB(GLint size, const GLuint *indices)"
  },
  {
    "label": "glMatrixIndexPointerARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glSampleCoverageARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleCoverageARB(GLfloat value, GLboolean invert)"
  },
  {
    "label": "glActiveTextureARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glActiveTextureARB(GLenum texture)"
  },
  {
    "label": "glClientActiveTextureARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClientActiveTextureARB(GLenum texture)"
  },
  {
    "label": "glMultiTexCoord1dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1dARB(GLenum target, GLdouble s)"
  },
  {
    "label": "glMultiTexCoord1dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord1fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1fARB(GLenum target, GLfloat s)"
  },
  {
    "label": "glMultiTexCoord1fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord1iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1iARB(GLenum target, GLint s)"
  },
  {
    "label": "glMultiTexCoord1ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord1sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1sARB(GLenum target, GLshort s)"
  },
  {
    "label": "glMultiTexCoord1svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord2dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "glMultiTexCoord2dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord2fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "glMultiTexCoord2fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord2iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)"
  },
  {
    "label": "glMultiTexCoord2ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord2sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "glMultiTexCoord2svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord3dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "glMultiTexCoord3dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord3fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "glMultiTexCoord3fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord3iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "glMultiTexCoord3ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord3sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "glMultiTexCoord3svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord4dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "glMultiTexCoord4dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord4fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "glMultiTexCoord4fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord4iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "glMultiTexCoord4ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord4sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "glMultiTexCoord4svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glGenQueriesARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenQueriesARB(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteQueriesARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteQueriesARB(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsQueryARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsQueryARB(GLuint id)"
  },
  {
    "label": "glBeginQueryARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginQueryARB(GLenum target, GLuint id)"
  },
  {
    "label": "glEndQueryARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndQueryARB(GLenum target)"
  },
  {
    "label": "glGetQueryivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryivARB(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectuivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glMaxShaderCompilerThreadsARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMaxShaderCompilerThreadsARB(GLuint count)"
  },
  {
    "label": "glPointParameterfARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterfARB(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterfvARB(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetGraphicsResetStatusARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetGraphicsResetStatusARB(void)"
  },
  {
    "label": "glGetnTexImageARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)"
  },
  {
    "label": "glReadnPixelsARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glGetnCompressedTexImageARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img)"
  },
  {
    "label": "glGetnUniformfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glGetnUniformdvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "glGetnMapdvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v)"
  },
  {
    "label": "glGetnMapfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v)"
  },
  {
    "label": "glGetnMapivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint *v)"
  },
  {
    "label": "glGetnPixelMapfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat *values)"
  },
  {
    "label": "glGetnPixelMapuivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint *values)"
  },
  {
    "label": "glGetnPixelMapusvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort *values)"
  },
  {
    "label": "glGetnPolygonStippleARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnPolygonStippleARB(GLsizei bufSize, GLubyte *pattern)"
  },
  {
    "label": "glGetnColorTableARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table)"
  },
  {
    "label": "glGetnConvolutionFilterARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image)"
  },
  {
    "label": "glGetnSeparableFilterARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span)"
  },
  {
    "label": "glGetnHistogramARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "glGetnMinmaxARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values)"
  },
  {
    "label": "glFramebufferSampleLocationsfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glNamedFramebufferSampleLocationsfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glEvaluateDepthValuesARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEvaluateDepthValuesARB(void)"
  },
  {
    "label": "glMinSampleShadingARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMinSampleShadingARB(GLfloat value)"
  },
  {
    "label": "glDeleteObjectARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteObjectARB(GLhandleARB obj)"
  },
  {
    "label": "glGetHandleARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetHandleARB(GLenum pname)"
  },
  {
    "label": "glDetachObjectARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)"
  },
  {
    "label": "glCreateShaderObjectARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateShaderObjectARB(GLenum shaderType)"
  },
  {
    "label": "glShaderSourceARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)"
  },
  {
    "label": "glCompileShaderARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompileShaderARB(GLhandleARB shaderObj)"
  },
  {
    "label": "glCreateProgramObjectARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateProgramObjectARB(void)"
  },
  {
    "label": "glAttachObjectARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)"
  },
  {
    "label": "glLinkProgramARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLinkProgramARB(GLhandleARB programObj)"
  },
  {
    "label": "glUseProgramObjectARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUseProgramObjectARB(GLhandleARB programObj)"
  },
  {
    "label": "glValidateProgramARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glValidateProgramARB(GLhandleARB programObj)"
  },
  {
    "label": "glUniform1fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1fARB(GLint location, GLfloat v0)"
  },
  {
    "label": "glUniform2fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glUniform3fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glUniform4fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glUniform1iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1iARB(GLint location, GLint v0)"
  },
  {
    "label": "glUniform2iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2iARB(GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glUniform3iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glUniform4iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glUniform1fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform2fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform3fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform4fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform1ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1ivARB(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform2ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2ivARB(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform3ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3ivARB(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform4ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4ivARB(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniformMatrix2fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glGetObjectParameterfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetObjectParameterivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetInfoLogARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)"
  },
  {
    "label": "glGetAttachedObjectsARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)"
  },
  {
    "label": "glGetUniformLocationARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name)"
  },
  {
    "label": "glGetActiveUniformARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)"
  },
  {
    "label": "glGetUniformfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params)"
  },
  {
    "label": "glGetUniformivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params)"
  },
  {
    "label": "glGetShaderSourceARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)"
  },
  {
    "label": "glNamedStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)"
  },
  {
    "label": "glDeleteNamedStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteNamedStringARB(GLint namelen, const GLchar *name)"
  },
  {
    "label": "glCompileShaderIncludeARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)"
  },
  {
    "label": "glIsNamedStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsNamedStringARB(GLint namelen, const GLchar *name)"
  },
  {
    "label": "glGetNamedStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)"
  },
  {
    "label": "glGetNamedStringivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)"
  },
  {
    "label": "glBufferPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glTexPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "glTexBufferARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glCompressedTexImage3DARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage2DARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage1DARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage3DARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage2DARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage1DARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glGetCompressedTexImageARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedTexImageARB(GLenum target, GLint level, void *img)"
  },
  {
    "label": "glLoadTransposeMatrixfARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLoadTransposeMatrixfARB(const GLfloat *m)"
  },
  {
    "label": "glLoadTransposeMatrixdARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLoadTransposeMatrixdARB(const GLdouble *m)"
  },
  {
    "label": "glMultTransposeMatrixfARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultTransposeMatrixfARB(const GLfloat *m)"
  },
  {
    "label": "glMultTransposeMatrixdARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultTransposeMatrixdARB(const GLdouble *m)"
  },
  {
    "label": "glWeightbvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightbvARB(GLint size, const GLbyte *weights)"
  },
  {
    "label": "glWeightsvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightsvARB(GLint size, const GLshort *weights)"
  },
  {
    "label": "glWeightivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightivARB(GLint size, const GLint *weights)"
  },
  {
    "label": "glWeightfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightfvARB(GLint size, const GLfloat *weights)"
  },
  {
    "label": "glWeightdvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightdvARB(GLint size, const GLdouble *weights)"
  },
  {
    "label": "glWeightubvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightubvARB(GLint size, const GLubyte *weights)"
  },
  {
    "label": "glWeightusvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightusvARB(GLint size, const GLushort *weights)"
  },
  {
    "label": "glWeightuivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightuivARB(GLint size, const GLuint *weights)"
  },
  {
    "label": "glWeightPointerARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glVertexBlendARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexBlendARB(GLint count)"
  },
  {
    "label": "glBindBufferARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferARB(GLenum target, GLuint buffer)"
  },
  {
    "label": "glDeleteBuffersARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteBuffersARB(GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "glGenBuffersARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenBuffersARB(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glIsBufferARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsBufferARB(GLuint buffer)"
  },
  {
    "label": "glBufferDataARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferDataARB(GLenum target, GLsizeiptrARB size, const void *data, GLenum usage)"
  },
  {
    "label": "glBufferSubDataARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data)"
  },
  {
    "label": "glGetBufferSubDataARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data)"
  },
  {
    "label": "glMapBufferARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapBufferARB(GLenum target, GLenum access)"
  },
  {
    "label": "glUnmapBufferARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnmapBufferARB(GLenum target)"
  },
  {
    "label": "glGetBufferParameterivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetBufferPointervARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferPointervARB(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glVertexAttrib1dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1dARB(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttrib1dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1dvARB(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib1fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1fARB(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1fvARB(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib1sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1sARB(GLuint index, GLshort x)"
  },
  {
    "label": "glVertexAttrib1svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1svARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib2dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttrib2dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2dvARB(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib2fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2fvARB(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexAttrib2svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2svARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib3dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttrib3dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3dvARB(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib3fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3fvARB(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexAttrib3svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3svARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4NbvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4NbvARB(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4NivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4NivARB(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4NsvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4NsvARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4NubARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "glVertexAttrib4NubvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4NubvARB(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4NuivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4NuivARB(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4NusvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4NusvARB(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttrib4bvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4bvARB(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttrib4dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4dvARB(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib4fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4fvARB(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4ivARB(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexAttrib4svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4svARB(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4ubvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4ubvARB(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4uivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4uivARB(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4usvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4usvARB(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttribPointerARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glEnableVertexAttribArrayARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVertexAttribArrayARB(GLuint index)"
  },
  {
    "label": "glDisableVertexAttribArrayARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVertexAttribArrayARB(GLuint index)"
  },
  {
    "label": "glGetVertexAttribdvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetVertexAttribfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointervARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribPointervARB(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glBindAttribLocationARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name)"
  },
  {
    "label": "glGetActiveAttribARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)"
  },
  {
    "label": "glGetAttribLocationARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name)"
  },
  {
    "label": "glWindowPos2dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2dARB(GLdouble x, GLdouble y)"
  },
  {
    "label": "glWindowPos2dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2dvARB(const GLdouble *v)"
  },
  {
    "label": "glWindowPos2fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2fARB(GLfloat x, GLfloat y)"
  },
  {
    "label": "glWindowPos2fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2fvARB(const GLfloat *v)"
  },
  {
    "label": "glWindowPos2iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2iARB(GLint x, GLint y)"
  },
  {
    "label": "glWindowPos2ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2ivARB(const GLint *v)"
  },
  {
    "label": "glWindowPos2sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2sARB(GLshort x, GLshort y)"
  },
  {
    "label": "glWindowPos2svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2svARB(const GLshort *v)"
  },
  {
    "label": "glWindowPos3dARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glWindowPos3dvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3dvARB(const GLdouble *v)"
  },
  {
    "label": "glWindowPos3fARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glWindowPos3fvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3fvARB(const GLfloat *v)"
  },
  {
    "label": "glWindowPos3iARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3iARB(GLint x, GLint y, GLint z)"
  },
  {
    "label": "glWindowPos3ivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3ivARB(const GLint *v)"
  },
  {
    "label": "glWindowPos3sARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3sARB(GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glWindowPos3svARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3svARB(const GLshort *v)"
  },
  {
    "label": "glBlendBarrierKHR()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendBarrierKHR(void)"
  },
  {
    "label": "glMultiTexCoord1bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1bOES(GLenum texture, GLbyte s)"
  },
  {
    "label": "glMultiTexCoord1bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1bvOES(GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "glMultiTexCoord2bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t)"
  },
  {
    "label": "glMultiTexCoord2bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2bvOES(GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "glMultiTexCoord3bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r)"
  },
  {
    "label": "glMultiTexCoord3bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3bvOES(GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "glMultiTexCoord4bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q)"
  },
  {
    "label": "glMultiTexCoord4bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4bvOES(GLenum texture, const GLbyte *coords)"
  },
  {
    "label": "glTexCoord1bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord1bOES(GLbyte s)"
  },
  {
    "label": "glTexCoord1bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord1bvOES(const GLbyte *coords)"
  },
  {
    "label": "glTexCoord2bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2bOES(GLbyte s, GLbyte t)"
  },
  {
    "label": "glTexCoord2bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2bvOES(const GLbyte *coords)"
  },
  {
    "label": "glTexCoord3bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r)"
  },
  {
    "label": "glTexCoord3bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord3bvOES(const GLbyte *coords)"
  },
  {
    "label": "glTexCoord4bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q)"
  },
  {
    "label": "glTexCoord4bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4bvOES(const GLbyte *coords)"
  },
  {
    "label": "glVertex2bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex2bOES(GLbyte x, GLbyte y)"
  },
  {
    "label": "glVertex2bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex2bvOES(const GLbyte *coords)"
  },
  {
    "label": "glVertex3bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex3bOES(GLbyte x, GLbyte y, GLbyte z)"
  },
  {
    "label": "glVertex3bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex3bvOES(const GLbyte *coords)"
  },
  {
    "label": "glVertex4bOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w)"
  },
  {
    "label": "glVertex4bvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex4bvOES(const GLbyte *coords)"
  },
  {
    "label": "glAlphaFuncxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAlphaFuncxOES(GLenum func, GLfixed ref)"
  },
  {
    "label": "glClearColorxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "glClearDepthxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearDepthxOES(GLfixed depth)"
  },
  {
    "label": "glClipPlanexOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClipPlanexOES(GLenum plane, const GLfixed *equation)"
  },
  {
    "label": "glColor4xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "glDepthRangexOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangexOES(GLfixed n, GLfixed f)"
  },
  {
    "label": "glFogxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogxOES(GLenum pname, GLfixed param)"
  },
  {
    "label": "glFogxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogxvOES(GLenum pname, const GLfixed *param)"
  },
  {
    "label": "glFrustumxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)"
  },
  {
    "label": "glGetClipPlanexOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetClipPlanexOES(GLenum plane, GLfixed *equation)"
  },
  {
    "label": "glGetFixedvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFixedvOES(GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetTexEnvxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetTexParameterxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glLightModelxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLightModelxOES(GLenum pname, GLfixed param)"
  },
  {
    "label": "glLightModelxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLightModelxvOES(GLenum pname, const GLfixed *param)"
  },
  {
    "label": "glLightxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLightxOES(GLenum light, GLenum pname, GLfixed param)"
  },
  {
    "label": "glLightxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLightxvOES(GLenum light, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glLineWidthxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLineWidthxOES(GLfixed width)"
  },
  {
    "label": "glLoadMatrixxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLoadMatrixxOES(const GLfixed *m)"
  },
  {
    "label": "glMaterialxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMaterialxOES(GLenum face, GLenum pname, GLfixed param)"
  },
  {
    "label": "glMaterialxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMaterialxvOES(GLenum face, GLenum pname, const GLfixed *param)"
  },
  {
    "label": "glMultMatrixxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultMatrixxOES(const GLfixed *m)"
  },
  {
    "label": "glMultiTexCoord4xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q)"
  },
  {
    "label": "glNormal3xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz)"
  },
  {
    "label": "glOrthoxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f)"
  },
  {
    "label": "glPointParameterxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterxvOES(GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glPointSizexOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointSizexOES(GLfixed size)"
  },
  {
    "label": "glPolygonOffsetxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPolygonOffsetxOES(GLfixed factor, GLfixed units)"
  },
  {
    "label": "glRotatexOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glScalexOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glScalexOES(GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glTexEnvxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexEnvxOES(GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "glTexEnvxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glTexParameterxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterxOES(GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "glTexParameterxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glTranslatexOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTranslatexOES(GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glAccumxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAccumxOES(GLenum op, GLfixed value)"
  },
  {
    "label": "glBitmapxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap)"
  },
  {
    "label": "glBlendColorxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "glClearAccumxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)"
  },
  {
    "label": "glColor3xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor3xOES(GLfixed red, GLfixed green, GLfixed blue)"
  },
  {
    "label": "glColor3xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor3xvOES(const GLfixed *components)"
  },
  {
    "label": "glColor4xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4xvOES(const GLfixed *components)"
  },
  {
    "label": "glConvolutionParameterxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param)"
  },
  {
    "label": "glConvolutionParameterxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glEvalCoord1xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEvalCoord1xOES(GLfixed u)"
  },
  {
    "label": "glEvalCoord1xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEvalCoord1xvOES(const GLfixed *coords)"
  },
  {
    "label": "glEvalCoord2xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEvalCoord2xOES(GLfixed u, GLfixed v)"
  },
  {
    "label": "glEvalCoord2xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEvalCoord2xvOES(const GLfixed *coords)"
  },
  {
    "label": "glFeedbackBufferxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed *buffer)"
  },
  {
    "label": "glGetConvolutionParameterxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetHistogramParameterxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetLightxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetLightxOES(GLenum light, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetMapxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMapxvOES(GLenum target, GLenum query, GLfixed *v)"
  },
  {
    "label": "glGetMaterialxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMaterialxOES(GLenum face, GLenum pname, GLfixed param)"
  },
  {
    "label": "glGetPixelMapxv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPixelMapxv(GLenum map, GLint size, GLfixed *values)"
  },
  {
    "label": "glGetTexGenxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glGetTexLevelParameterxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed *params)"
  },
  {
    "label": "glIndexxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIndexxOES(GLfixed component)"
  },
  {
    "label": "glIndexxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIndexxvOES(const GLfixed *component)"
  },
  {
    "label": "glLoadTransposeMatrixxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLoadTransposeMatrixxOES(const GLfixed *m)"
  },
  {
    "label": "glMap1xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points)"
  },
  {
    "label": "glMap2xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points)"
  },
  {
    "label": "glMapGrid1xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2)"
  },
  {
    "label": "glMapGrid2xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2)"
  },
  {
    "label": "glMultTransposeMatrixxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultTransposeMatrixxOES(const GLfixed *m)"
  },
  {
    "label": "glMultiTexCoord1xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1xOES(GLenum texture, GLfixed s)"
  },
  {
    "label": "glMultiTexCoord1xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1xvOES(GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "glMultiTexCoord2xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t)"
  },
  {
    "label": "glMultiTexCoord2xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2xvOES(GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "glMultiTexCoord3xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r)"
  },
  {
    "label": "glMultiTexCoord3xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3xvOES(GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "glMultiTexCoord4xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4xvOES(GLenum texture, const GLfixed *coords)"
  },
  {
    "label": "glNormal3xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormal3xvOES(const GLfixed *coords)"
  },
  {
    "label": "glPassThroughxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPassThroughxOES(GLfixed token)"
  },
  {
    "label": "glPixelMapx()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelMapx(GLenum map, GLint size, const GLfixed *values)"
  },
  {
    "label": "glPixelStorex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelStorex(GLenum pname, GLfixed param)"
  },
  {
    "label": "glPixelTransferxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTransferxOES(GLenum pname, GLfixed param)"
  },
  {
    "label": "glPixelZoomxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelZoomxOES(GLfixed xfactor, GLfixed yfactor)"
  },
  {
    "label": "glPrioritizeTexturesxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPrioritizeTexturesxOES(GLsizei n, const GLuint *textures, const GLfixed *priorities)"
  },
  {
    "label": "glRasterPos2xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRasterPos2xOES(GLfixed x, GLfixed y)"
  },
  {
    "label": "glRasterPos2xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRasterPos2xvOES(const GLfixed *coords)"
  },
  {
    "label": "glRasterPos3xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glRasterPos3xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRasterPos3xvOES(const GLfixed *coords)"
  },
  {
    "label": "glRasterPos4xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w)"
  },
  {
    "label": "glRasterPos4xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRasterPos4xvOES(const GLfixed *coords)"
  },
  {
    "label": "glRectxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2)"
  },
  {
    "label": "glRectxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRectxvOES(const GLfixed *v1, const GLfixed *v2)"
  },
  {
    "label": "glTexCoord1xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord1xOES(GLfixed s)"
  },
  {
    "label": "glTexCoord1xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord1xvOES(const GLfixed *coords)"
  },
  {
    "label": "glTexCoord2xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2xOES(GLfixed s, GLfixed t)"
  },
  {
    "label": "glTexCoord2xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2xvOES(const GLfixed *coords)"
  },
  {
    "label": "glTexCoord3xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r)"
  },
  {
    "label": "glTexCoord3xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord3xvOES(const GLfixed *coords)"
  },
  {
    "label": "glTexCoord4xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q)"
  },
  {
    "label": "glTexCoord4xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4xvOES(const GLfixed *coords)"
  },
  {
    "label": "glTexGenxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexGenxOES(GLenum coord, GLenum pname, GLfixed param)"
  },
  {
    "label": "glTexGenxvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)"
  },
  {
    "label": "glVertex2xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex2xOES(GLfixed x)"
  },
  {
    "label": "glVertex2xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex2xvOES(const GLfixed *coords)"
  },
  {
    "label": "glVertex3xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex3xOES(GLfixed x, GLfixed y)"
  },
  {
    "label": "glVertex3xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex3xvOES(const GLfixed *coords)"
  },
  {
    "label": "glVertex4xOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex4xOES(GLfixed x, GLfixed y, GLfixed z)"
  },
  {
    "label": "glVertex4xvOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex4xvOES(const GLfixed *coords)"
  },
  {
    "label": "glQueryMatrixxOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glQueryMatrixxOES(GLfixed *mantissa, GLint *exponent)"
  },
  {
    "label": "glClearDepthfOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearDepthfOES(GLclampf depth)"
  },
  {
    "label": "glClipPlanefOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClipPlanefOES(GLenum plane, const GLfloat *equation)"
  },
  {
    "label": "glDepthRangefOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangefOES(GLclampf n, GLclampf f)"
  },
  {
    "label": "glFrustumfOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)"
  },
  {
    "label": "glGetClipPlanefOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetClipPlanefOES(GLenum plane, GLfloat *equation)"
  },
  {
    "label": "glOrthofOES()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)"
  },
  {
    "label": "glTbufferMask3DFX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTbufferMask3DFX(GLuint mask)"
  },
  {
    "label": "glDebugMessageEnableAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsertAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallbackAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void *userParam)"
  },
  {
    "label": "glGetDebugMessageLogAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message)"
  },
  {
    "label": "glBlendFuncIndexedAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparateIndexedAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glBlendEquationIndexedAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationIndexedAMD(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparateIndexedAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glUniform1i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1i64NV(GLint location, GLint64EXT x)"
  },
  {
    "label": "glUniform2i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "glUniform3i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "glUniform4i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "glUniform1i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform2i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform3i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform4i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glUniform1ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1ui64NV(GLint location, GLuint64EXT x)"
  },
  {
    "label": "glUniform2ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "glUniform3ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "glUniform4ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "glUniform1ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform2ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform3ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glUniform4ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glGetUniformi64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformi64vNV(GLuint program, GLint location, GLint64EXT *params)"
  },
  {
    "label": "glGetUniformui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT *params)"
  },
  {
    "label": "glProgramUniform1i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x)"
  },
  {
    "label": "glProgramUniform2i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "glProgramUniform3i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "glProgramUniform4i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "glProgramUniform1i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform2i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform3i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform4i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT *value)"
  },
  {
    "label": "glProgramUniform1ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x)"
  },
  {
    "label": "glProgramUniform2ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "glProgramUniform3ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "glProgramUniform4ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "glProgramUniform1ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform2ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform3ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniform4ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glVertexAttribParameteriAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param)"
  },
  {
    "label": "glMultiDrawArraysIndirectAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectAMD(GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirectAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride)"
  },
  {
    "label": "glGenNamesAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenNamesAMD(GLenum identifier, GLuint num, GLuint *names)"
  },
  {
    "label": "glDeleteNamesAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint *names)"
  },
  {
    "label": "glIsNameAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsNameAMD(GLenum identifier, GLuint name)"
  },
  {
    "label": "glQueryObjectParameteruiAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param)"
  },
  {
    "label": "glGetPerfMonitorGroupsAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfMonitorGroupsAMD(GLint *numGroups, GLsizei groupsSize, GLuint *groups)"
  },
  {
    "label": "glGetPerfMonitorCountersAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfMonitorCountersAMD(GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters)"
  },
  {
    "label": "glGetPerfMonitorGroupStringAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString)"
  },
  {
    "label": "glGetPerfMonitorCounterStringAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString)"
  },
  {
    "label": "glGetPerfMonitorCounterInfoAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void *data)"
  },
  {
    "label": "glGenPerfMonitorsAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenPerfMonitorsAMD(GLsizei n, GLuint *monitors)"
  },
  {
    "label": "glDeletePerfMonitorsAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeletePerfMonitorsAMD(GLsizei n, GLuint *monitors)"
  },
  {
    "label": "glSelectPerfMonitorCountersAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList)"
  },
  {
    "label": "glBeginPerfMonitorAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginPerfMonitorAMD(GLuint monitor)"
  },
  {
    "label": "glEndPerfMonitorAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndPerfMonitorAMD(GLuint monitor)"
  },
  {
    "label": "glGetPerfMonitorCounterDataAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten)"
  },
  {
    "label": "glSetMultisamplefvAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat *val)"
  },
  {
    "label": "glTexStorageSparseAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)"
  },
  {
    "label": "glTextureStorageSparseAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags)"
  },
  {
    "label": "glStencilOpValueAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilOpValueAMD(GLenum face, GLuint value)"
  },
  {
    "label": "glTessellationFactorAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTessellationFactorAMD(GLfloat factor)"
  },
  {
    "label": "glTessellationModeAMD()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTessellationModeAMD(GLenum mode)"
  },
  {
    "label": "glElementPointerAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glElementPointerAPPLE(GLenum type, const void *pointer)"
  },
  {
    "label": "glDrawElementArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glDrawRangeElementArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)"
  },
  {
    "label": "glMultiDrawElementArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "glMultiDrawRangeElementArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "glGenFencesAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenFencesAPPLE(GLsizei n, GLuint *fences)"
  },
  {
    "label": "glDeleteFencesAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteFencesAPPLE(GLsizei n, const GLuint *fences)"
  },
  {
    "label": "glSetFenceAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSetFenceAPPLE(GLuint fence)"
  },
  {
    "label": "glIsFenceAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsFenceAPPLE(GLuint fence)"
  },
  {
    "label": "glTestFenceAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTestFenceAPPLE(GLuint fence)"
  },
  {
    "label": "glFinishFenceAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFinishFenceAPPLE(GLuint fence)"
  },
  {
    "label": "glTestObjectAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTestObjectAPPLE(GLenum object, GLuint name)"
  },
  {
    "label": "glFinishObjectAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFinishObjectAPPLE(GLenum object, GLint name)"
  },
  {
    "label": "glBufferParameteriAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glFlushMappedBufferRangeAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glObjectPurgeableAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)"
  },
  {
    "label": "glObjectUnpurgeableAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option)"
  },
  {
    "label": "glGetObjectParameterivAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params)"
  },
  {
    "label": "glTextureRangeAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureRangeAPPLE(GLenum target, GLsizei length, const void *pointer)"
  },
  {
    "label": "glGetTexParameterPointervAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glBindVertexArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVertexArrayAPPLE(GLuint array)"
  },
  {
    "label": "glDeleteVertexArraysAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "glGenVertexArraysAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenVertexArraysAPPLE(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glIsVertexArrayAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsVertexArrayAPPLE(GLuint array)"
  },
  {
    "label": "glVertexArrayRangeAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayRangeAPPLE(GLsizei length, void *pointer)"
  },
  {
    "label": "glFlushVertexArrayRangeAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushVertexArrayRangeAPPLE(GLsizei length, void *pointer)"
  },
  {
    "label": "glVertexArrayParameteriAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayParameteriAPPLE(GLenum pname, GLint param)"
  },
  {
    "label": "glEnableVertexAttribAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVertexAttribAPPLE(GLuint index, GLenum pname)"
  },
  {
    "label": "glDisableVertexAttribAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVertexAttribAPPLE(GLuint index, GLenum pname)"
  },
  {
    "label": "glIsVertexAttribEnabledAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname)"
  },
  {
    "label": "glMapVertexAttrib1dAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)"
  },
  {
    "label": "glMapVertexAttrib1fAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)"
  },
  {
    "label": "glMapVertexAttrib2dAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)"
  },
  {
    "label": "glMapVertexAttrib2fAPPLE()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)"
  },
  {
    "label": "glDrawBuffersATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawBuffersATI(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glElementPointerATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glElementPointerATI(GLenum type, const void *pointer)"
  },
  {
    "label": "glDrawElementArrayATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementArrayATI(GLenum mode, GLsizei count)"
  },
  {
    "label": "glDrawRangeElementArrayATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)"
  },
  {
    "label": "glTexBumpParameterivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexBumpParameterivATI(GLenum pname, const GLint *param)"
  },
  {
    "label": "glTexBumpParameterfvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexBumpParameterfvATI(GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glGetTexBumpParameterivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexBumpParameterivATI(GLenum pname, GLint *param)"
  },
  {
    "label": "glGetTexBumpParameterfvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexBumpParameterfvATI(GLenum pname, GLfloat *param)"
  },
  {
    "label": "glGenFragmentShadersATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenFragmentShadersATI(GLuint range)"
  },
  {
    "label": "glBindFragmentShaderATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFragmentShaderATI(GLuint id)"
  },
  {
    "label": "glDeleteFragmentShaderATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteFragmentShaderATI(GLuint id)"
  },
  {
    "label": "glBeginFragmentShaderATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginFragmentShaderATI(void)"
  },
  {
    "label": "glEndFragmentShaderATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndFragmentShaderATI(void)"
  },
  {
    "label": "glPassTexCoordATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)"
  },
  {
    "label": "glSampleMapATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)"
  },
  {
    "label": "glColorFragmentOp1ATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)"
  },
  {
    "label": "glColorFragmentOp2ATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)"
  },
  {
    "label": "glColorFragmentOp3ATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)"
  },
  {
    "label": "glAlphaFragmentOp1ATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)"
  },
  {
    "label": "glAlphaFragmentOp2ATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)"
  },
  {
    "label": "glAlphaFragmentOp3ATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)"
  },
  {
    "label": "glSetFragmentShaderConstantATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSetFragmentShaderConstantATI(GLuint dst, const GLfloat *value)"
  },
  {
    "label": "glMapObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapObjectBufferATI(GLuint buffer)"
  },
  {
    "label": "glUnmapObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnmapObjectBufferATI(GLuint buffer)"
  },
  {
    "label": "glPNTrianglesiATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPNTrianglesiATI(GLenum pname, GLint param)"
  },
  {
    "label": "glPNTrianglesfATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPNTrianglesfATI(GLenum pname, GLfloat param)"
  },
  {
    "label": "glStencilOpSeparateATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "glStencilFuncSeparateATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)"
  },
  {
    "label": "glNewObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNewObjectBufferATI(GLsizei size, const void *pointer, GLenum usage)"
  },
  {
    "label": "glIsObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsObjectBufferATI(GLuint buffer)"
  },
  {
    "label": "glUpdateObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve)"
  },
  {
    "label": "glGetObjectBufferfvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetObjectBufferivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glFreeObjectBufferATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFreeObjectBufferATI(GLuint buffer)"
  },
  {
    "label": "glArrayObjectATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "glGetArrayObjectfvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetArrayObjectivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetArrayObjectivATI(GLenum array, GLenum pname, GLint *params)"
  },
  {
    "label": "glVariantArrayObjectATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "glGetVariantArrayObjectfvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVariantArrayObjectivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glVertexAttribArrayObjectATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)"
  },
  {
    "label": "glGetVertexAttribArrayObjectfvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribArrayObjectivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glVertexStream1sATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream1sATI(GLenum stream, GLshort x)"
  },
  {
    "label": "glVertexStream1svATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream1svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glVertexStream1iATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream1iATI(GLenum stream, GLint x)"
  },
  {
    "label": "glVertexStream1ivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream1ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glVertexStream1fATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream1fATI(GLenum stream, GLfloat x)"
  },
  {
    "label": "glVertexStream1fvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream1fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glVertexStream1dATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream1dATI(GLenum stream, GLdouble x)"
  },
  {
    "label": "glVertexStream1dvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream1dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glVertexStream2sATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexStream2svATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream2svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glVertexStream2iATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream2iATI(GLenum stream, GLint x, GLint y)"
  },
  {
    "label": "glVertexStream2ivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream2ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glVertexStream2fATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexStream2fvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream2fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glVertexStream2dATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexStream2dvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream2dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glVertexStream3sATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexStream3svATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream3svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glVertexStream3iATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertexStream3ivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream3ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glVertexStream3fATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexStream3fvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream3fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glVertexStream3dATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexStream3dvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream3dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glVertexStream4sATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexStream4svATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream4svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glVertexStream4iATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertexStream4ivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream4ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glVertexStream4fATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexStream4fvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream4fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glVertexStream4dATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexStream4dvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexStream4dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glNormalStream3bATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)"
  },
  {
    "label": "glNormalStream3bvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3bvATI(GLenum stream, const GLbyte *coords)"
  },
  {
    "label": "glNormalStream3sATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)"
  },
  {
    "label": "glNormalStream3svATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3svATI(GLenum stream, const GLshort *coords)"
  },
  {
    "label": "glNormalStream3iATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)"
  },
  {
    "label": "glNormalStream3ivATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3ivATI(GLenum stream, const GLint *coords)"
  },
  {
    "label": "glNormalStream3fATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)"
  },
  {
    "label": "glNormalStream3fvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3fvATI(GLenum stream, const GLfloat *coords)"
  },
  {
    "label": "glNormalStream3dATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)"
  },
  {
    "label": "glNormalStream3dvATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalStream3dvATI(GLenum stream, const GLdouble *coords)"
  },
  {
    "label": "glClientActiveVertexStreamATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClientActiveVertexStreamATI(GLenum stream)"
  },
  {
    "label": "glVertexBlendEnviATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexBlendEnviATI(GLenum pname, GLint param)"
  },
  {
    "label": "glVertexBlendEnvfATI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexBlendEnvfATI(GLenum pname, GLfloat param)"
  },
  {
    "label": "glUniformBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)"
  },
  {
    "label": "glGetUniformBufferSizeEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformBufferSizeEXT(GLuint program, GLint location)"
  },
  {
    "label": "glGetUniformOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformOffsetEXT(GLuint program, GLint location)"
  },
  {
    "label": "glBlendColorEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glBlendEquationSeparateEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFuncSeparateEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glBlendEquationEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationEXT(GLenum mode)"
  },
  {
    "label": "glColorSubTableEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glCopyColorSubTableEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glLockArraysEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLockArraysEXT(GLint first, GLsizei count)"
  },
  {
    "label": "glUnlockArraysEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnlockArraysEXT(void)"
  },
  {
    "label": "glConvolutionFilter1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "glConvolutionFilter2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image)"
  },
  {
    "label": "glConvolutionParameterfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params)"
  },
  {
    "label": "glConvolutionParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glConvolutionParameteriEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params)"
  },
  {
    "label": "glConvolutionParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyConvolutionFilter1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyConvolutionFilter2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetConvolutionFilterEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void *image)"
  },
  {
    "label": "glGetConvolutionParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetConvolutionParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSeparableFilterEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void *row, void *column, void *span)"
  },
  {
    "label": "glSeparableFilter2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column)"
  },
  {
    "label": "glTangent3bEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)"
  },
  {
    "label": "glTangent3bvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3bvEXT(const GLbyte *v)"
  },
  {
    "label": "glTangent3dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)"
  },
  {
    "label": "glTangent3dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3dvEXT(const GLdouble *v)"
  },
  {
    "label": "glTangent3fEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)"
  },
  {
    "label": "glTangent3fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3fvEXT(const GLfloat *v)"
  },
  {
    "label": "glTangent3iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3iEXT(GLint tx, GLint ty, GLint tz)"
  },
  {
    "label": "glTangent3ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3ivEXT(const GLint *v)"
  },
  {
    "label": "glTangent3sEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)"
  },
  {
    "label": "glTangent3svEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangent3svEXT(const GLshort *v)"
  },
  {
    "label": "glBinormal3bEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)"
  },
  {
    "label": "glBinormal3bvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3bvEXT(const GLbyte *v)"
  },
  {
    "label": "glBinormal3dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)"
  },
  {
    "label": "glBinormal3dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3dvEXT(const GLdouble *v)"
  },
  {
    "label": "glBinormal3fEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)"
  },
  {
    "label": "glBinormal3fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3fvEXT(const GLfloat *v)"
  },
  {
    "label": "glBinormal3iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3iEXT(GLint bx, GLint by, GLint bz)"
  },
  {
    "label": "glBinormal3ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3ivEXT(const GLint *v)"
  },
  {
    "label": "glBinormal3sEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)"
  },
  {
    "label": "glBinormal3svEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormal3svEXT(const GLshort *v)"
  },
  {
    "label": "glTangentPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTangentPointerEXT(GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glBinormalPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBinormalPointerEXT(GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glCopyTexImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyTexImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCopyTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCullParameterdvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCullParameterdvEXT(GLenum pname, GLdouble *params)"
  },
  {
    "label": "glCullParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCullParameterfvEXT(GLenum pname, GLfloat *params)"
  },
  {
    "label": "glLabelObjectEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectLabelEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glInsertEventMarkerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInsertEventMarkerEXT(GLsizei length, const GLchar *marker)"
  },
  {
    "label": "glPushGroupMarkerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPushGroupMarkerEXT(GLsizei length, const GLchar *marker)"
  },
  {
    "label": "glPopGroupMarkerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPopGroupMarkerEXT(void)"
  },
  {
    "label": "glDepthBoundsEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)"
  },
  {
    "label": "glMatrixLoadfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixLoadfEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoaddEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixLoaddEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixMultfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixMultfEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultdEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixMultdEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixLoadIdentityEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixLoadIdentityEXT(GLenum mode)"
  },
  {
    "label": "glMatrixRotatefEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixRotatedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glMatrixScalefEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixScaledEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glMatrixTranslatefEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glMatrixTranslatedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glMatrixFrustumEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "glMatrixOrthoEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "glMatrixPopEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixPopEXT(GLenum mode)"
  },
  {
    "label": "glMatrixPushEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixPushEXT(GLenum mode)"
  },
  {
    "label": "glClientAttribDefaultEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClientAttribDefaultEXT(GLbitfield mask)"
  },
  {
    "label": "glPushClientAttribDefaultEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPushClientAttribDefaultEXT(GLbitfield mask)"
  },
  {
    "label": "glTextureParameterfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTextureParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTextureParameteriEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glTextureParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTextureImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTextureImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyTextureImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTextureSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTextureSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetTextureImageEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glGetTextureParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureLevelParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureLevelParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glTextureImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTextureSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glBindMultiTextureEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture)"
  },
  {
    "label": "glMultiTexCoordPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glMultiTexEnvfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glMultiTexEnvfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glMultiTexEnviEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glMultiTexEnvivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glMultiTexGendEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)"
  },
  {
    "label": "glMultiTexGendvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)"
  },
  {
    "label": "glMultiTexGenfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)"
  },
  {
    "label": "glMultiTexGenfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glMultiTexGeniEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param)"
  },
  {
    "label": "glMultiTexGenivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetMultiTexEnvfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMultiTexEnvivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMultiTexGendvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetMultiTexGenfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMultiTexGenivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint *params)"
  },
  {
    "label": "glMultiTexParameteriEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glMultiTexParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glMultiTexParameterfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glMultiTexParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glMultiTexImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glMultiTexImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glMultiTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glMultiTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyMultiTexImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyMultiTexImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyMultiTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyMultiTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetMultiTexImageEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glGetMultiTexParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMultiTexParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMultiTexLevelParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMultiTexLevelParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glMultiTexImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glMultiTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyMultiTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glEnableClientStateIndexedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableClientStateIndexedEXT(GLenum array, GLuint index)"
  },
  {
    "label": "glDisableClientStateIndexedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableClientStateIndexedEXT(GLenum array, GLuint index)"
  },
  {
    "label": "glGetFloatIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "glGetDoubleIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "glGetPointerIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPointerIndexedvEXT(GLenum target, GLuint index, void **data)"
  },
  {
    "label": "glEnableIndexedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableIndexedEXT(GLenum target, GLuint index)"
  },
  {
    "label": "glDisableIndexedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableIndexedEXT(GLenum target, GLuint index)"
  },
  {
    "label": "glIsEnabledIndexedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsEnabledIndexedEXT(GLenum target, GLuint index)"
  },
  {
    "label": "glGetIntegerIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "glGetBooleanIndexedvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "glCompressedTextureImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedTextureSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glGetCompressedTextureImageEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void *img)"
  },
  {
    "label": "glCompressedMultiTexImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glCompressedMultiTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits)"
  },
  {
    "label": "glGetCompressedMultiTexImageEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void *img)"
  },
  {
    "label": "glMatrixLoadTransposefEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixLoadTransposefEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoadTransposedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixLoadTransposedEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glMatrixMultTransposefEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixMultTransposefEXT(GLenum mode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultTransposedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixMultTransposedEXT(GLenum mode, const GLdouble *m)"
  },
  {
    "label": "glNamedBufferDataEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glNamedBufferSubDataEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glMapNamedBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapNamedBufferEXT(GLuint buffer, GLenum access)"
  },
  {
    "label": "glUnmapNamedBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnmapNamedBufferEXT(GLuint buffer)"
  },
  {
    "label": "glGetNamedBufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetNamedBufferPointervEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "glGetNamedBufferSubDataEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glProgramUniform1fEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "glProgramUniform2fEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glProgramUniform3fEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glProgramUniform4fEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glProgramUniform1iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1iEXT(GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "glProgramUniform2iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glProgramUniform3iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glProgramUniform4iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glProgramUniform1fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform2fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform3fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform4fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform1ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform2ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform3ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform4ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniformMatrix2fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glTextureBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glMultiTexBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTextureParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTextureParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTextureParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glMultiTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glMultiTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetMultiTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMultiTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glProgramUniform1uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "glProgramUniform2uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glProgramUniform3uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glProgramUniform4uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glProgramUniform1uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform2uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform3uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform4uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glNamedProgramLocalParameters4fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "glNamedProgramLocalParameterI4iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glNamedProgramLocalParameterI4ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "glNamedProgramLocalParametersI4ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "glNamedProgramLocalParameterI4uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glNamedProgramLocalParameterI4uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "glNamedProgramLocalParametersI4uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glGetNamedProgramLocalParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "glGetNamedProgramLocalParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "glEnableClientStateiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableClientStateiEXT(GLenum array, GLuint index)"
  },
  {
    "label": "glDisableClientStateiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableClientStateiEXT(GLenum array, GLuint index)"
  },
  {
    "label": "glGetFloati_vEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFloati_vEXT(GLenum pname, GLuint index, GLfloat *params)"
  },
  {
    "label": "glGetDoublei_vEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble *params)"
  },
  {
    "label": "glGetPointeri_vEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPointeri_vEXT(GLenum pname, GLuint index, void **params)"
  },
  {
    "label": "glNamedProgramStringEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void *string)"
  },
  {
    "label": "glNamedProgramLocalParameter4dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glNamedProgramLocalParameter4dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble *params)"
  },
  {
    "label": "glNamedProgramLocalParameter4fEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glNamedProgramLocalParameter4fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat *params)"
  },
  {
    "label": "glGetNamedProgramLocalParameterdvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble *params)"
  },
  {
    "label": "glGetNamedProgramLocalParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat *params)"
  },
  {
    "label": "glGetNamedProgramivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetNamedProgramStringEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void *string)"
  },
  {
    "label": "glNamedRenderbufferStorageEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetNamedRenderbufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisampleCoverageEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCheckNamedFramebufferStatusEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target)"
  },
  {
    "label": "glNamedFramebufferTexture1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTexture2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTexture3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glNamedFramebufferRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glGetNamedFramebufferAttachmentParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGenerateTextureMipmapEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenerateTextureMipmapEXT(GLuint texture, GLenum target)"
  },
  {
    "label": "glGenerateMultiTexMipmapEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target)"
  },
  {
    "label": "glFramebufferDrawBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode)"
  },
  {
    "label": "glFramebufferDrawBuffersEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glFramebufferReadBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode)"
  },
  {
    "label": "glGetFramebufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glNamedCopyBufferSubDataEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glNamedFramebufferTextureEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTextureLayerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glNamedFramebufferTextureFaceEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "glTextureRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glMultiTexRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glVertexArrayVertexOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayColorOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayEdgeFlagOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayIndexOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayNormalOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayTexCoordOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayMultiTexCoordOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayFogCoordOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArraySecondaryColorOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayVertexAttribOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glVertexArrayVertexAttribIOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glEnableVertexArrayEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVertexArrayEXT(GLuint vaobj, GLenum array)"
  },
  {
    "label": "glDisableVertexArrayEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVertexArrayEXT(GLuint vaobj, GLenum array)"
  },
  {
    "label": "glEnableVertexArrayAttribEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glDisableVertexArrayAttribEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glGetVertexArrayIntegervEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayPointervEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void **param)"
  },
  {
    "label": "glGetVertexArrayIntegeri_vEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayPointeri_vEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void **param)"
  },
  {
    "label": "glMapNamedBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glFlushMappedNamedBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glNamedBufferStorageEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glClearNamedBufferDataEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearNamedBufferSubDataEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glNamedFramebufferParameteriEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "glGetNamedFramebufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glProgramUniform1dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1dEXT(GLuint program, GLint location, GLdouble x)"
  },
  {
    "label": "glProgramUniform2dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "glProgramUniform3dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glProgramUniform4dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramUniform1dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform2dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform3dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform4dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glTextureBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTextureStorage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTextureStorage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureStorage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glTextureStorage2DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureStorage3DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glVertexArrayBindVertexBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexArrayVertexAttribFormatEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayVertexAttribIFormatEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayVertexAttribLFormatEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayVertexAttribBindingEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexArrayVertexBindingDivisorEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glVertexArrayVertexAttribLOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset)"
  },
  {
    "label": "glTexturePageCommitmentEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "glVertexArrayVertexAttribDivisorEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor)"
  },
  {
    "label": "glColorMaskIndexedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "glDrawArraysInstancedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)"
  },
  {
    "label": "glDrawElementsInstancedEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount)"
  },
  {
    "label": "glDrawRangeElementsEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glFogCoordfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordfEXT(GLfloat coord)"
  },
  {
    "label": "glFogCoordfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordfvEXT(const GLfloat *coord)"
  },
  {
    "label": "glFogCoorddEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoorddEXT(GLdouble coord)"
  },
  {
    "label": "glFogCoorddvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoorddvEXT(const GLdouble *coord)"
  },
  {
    "label": "glFogCoordPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordPointerEXT(GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glBlitFramebufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glRenderbufferStorageMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glIsRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsRenderbufferEXT(GLuint renderbuffer)"
  },
  {
    "label": "glBindRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glDeleteRenderbuffersEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "glGenRenderbuffersEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glRenderbufferStorageEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetRenderbufferParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsFramebufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsFramebufferEXT(GLuint framebuffer)"
  },
  {
    "label": "glBindFramebufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFramebufferEXT(GLenum target, GLuint framebuffer)"
  },
  {
    "label": "glDeleteFramebuffersEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "glGenFramebuffersEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glCheckFramebufferStatusEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCheckFramebufferStatusEXT(GLenum target)"
  },
  {
    "label": "glFramebufferTexture1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glFramebufferRenderbufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glGetFramebufferAttachmentParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGenerateMipmapEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenerateMipmapEXT(GLenum target)"
  },
  {
    "label": "glProgramParameteriEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glProgramEnvParameters4fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "glProgramLocalParameters4fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "glGetUniformuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformuivEXT(GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "glBindFragDataLocationEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "glGetFragDataLocationEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragDataLocationEXT(GLuint program, const GLchar *name)"
  },
  {
    "label": "glUniform1uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1uiEXT(GLint location, GLuint v0)"
  },
  {
    "label": "glUniform2uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glUniform3uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glUniform4uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glUniform1uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform2uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform3uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform4uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glGetHistogramEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "glGetHistogramParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetHistogramParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMinmaxEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void *values)"
  },
  {
    "label": "glGetMinmaxParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMinmaxParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glHistogramEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glMinmaxEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glResetHistogramEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResetHistogramEXT(GLenum target)"
  },
  {
    "label": "glResetMinmaxEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResetMinmaxEXT(GLenum target)"
  },
  {
    "label": "glIndexFuncEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIndexFuncEXT(GLenum func, GLclampf ref)"
  },
  {
    "label": "glIndexMaterialEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIndexMaterialEXT(GLenum face, GLenum mode)"
  },
  {
    "label": "glApplyTextureEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glApplyTextureEXT(GLenum mode)"
  },
  {
    "label": "glTextureLightEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureLightEXT(GLenum pname)"
  },
  {
    "label": "glTextureMaterialEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureMaterialEXT(GLenum face, GLenum mode)"
  },
  {
    "label": "glMultiDrawArraysEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)"
  },
  {
    "label": "glMultiDrawElementsEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount)"
  },
  {
    "label": "glSampleMaskEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleMaskEXT(GLclampf value, GLboolean invert)"
  },
  {
    "label": "glSamplePatternEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplePatternEXT(GLenum pattern)"
  },
  {
    "label": "glColorTableEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "glGetColorTableEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTableEXT(GLenum target, GLenum format, GLenum type, void *data)"
  },
  {
    "label": "glGetColorTableParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetColorTableParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glPixelTransformParameteriEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glPixelTransformParameterfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glPixelTransformParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glPixelTransformParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetPixelTransformParameterivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetPixelTransformParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glPointParameterfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterfEXT(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterfvEXT(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glPolygonOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPolygonOffsetEXT(GLfloat factor, GLfloat bias)"
  },
  {
    "label": "glPolygonOffsetClampEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp)"
  },
  {
    "label": "glProvokingVertexEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProvokingVertexEXT(GLenum mode)"
  },
  {
    "label": "glRasterSamplesEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glSecondaryColor3bEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)"
  },
  {
    "label": "glSecondaryColor3bvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3bvEXT(const GLbyte *v)"
  },
  {
    "label": "glSecondaryColor3dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)"
  },
  {
    "label": "glSecondaryColor3dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3dvEXT(const GLdouble *v)"
  },
  {
    "label": "glSecondaryColor3fEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)"
  },
  {
    "label": "glSecondaryColor3fvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3fvEXT(const GLfloat *v)"
  },
  {
    "label": "glSecondaryColor3iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)"
  },
  {
    "label": "glSecondaryColor3ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3ivEXT(const GLint *v)"
  },
  {
    "label": "glSecondaryColor3sEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)"
  },
  {
    "label": "glSecondaryColor3svEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3svEXT(const GLshort *v)"
  },
  {
    "label": "glSecondaryColor3ubEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)"
  },
  {
    "label": "glSecondaryColor3ubvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3ubvEXT(const GLubyte *v)"
  },
  {
    "label": "glSecondaryColor3uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)"
  },
  {
    "label": "glSecondaryColor3uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3uivEXT(const GLuint *v)"
  },
  {
    "label": "glSecondaryColor3usEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)"
  },
  {
    "label": "glSecondaryColor3usvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3usvEXT(const GLushort *v)"
  },
  {
    "label": "glSecondaryColorPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glUseShaderProgramEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUseShaderProgramEXT(GLenum type, GLuint program)"
  },
  {
    "label": "glActiveProgramEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glActiveProgramEXT(GLuint program)"
  },
  {
    "label": "glCreateShaderProgramEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateShaderProgramEXT(GLenum type, const GLchar *string)"
  },
  {
    "label": "glBindImageTextureEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format)"
  },
  {
    "label": "glMemoryBarrierEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMemoryBarrierEXT(GLbitfield barriers)"
  },
  {
    "label": "glStencilClearTagEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)"
  },
  {
    "label": "glActiveStencilFaceEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glActiveStencilFaceEXT(GLenum face)"
  },
  {
    "label": "glTexSubImage1DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage2DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage3DEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glFramebufferTextureLayerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glTexBufferEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterIivEXT(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTexParameterIivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexParameterIuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glClearColorIiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)"
  },
  {
    "label": "glClearColorIuiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)"
  },
  {
    "label": "glAreTexturesResidentEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAreTexturesResidentEXT(GLsizei n, const GLuint *textures, GLboolean *residences)"
  },
  {
    "label": "glBindTextureEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTextureEXT(GLenum target, GLuint texture)"
  },
  {
    "label": "glDeleteTexturesEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteTexturesEXT(GLsizei n, const GLuint *textures)"
  },
  {
    "label": "glGenTexturesEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenTexturesEXT(GLsizei n, GLuint *textures)"
  },
  {
    "label": "glIsTextureEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsTextureEXT(GLuint texture)"
  },
  {
    "label": "glPrioritizeTexturesEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPrioritizeTexturesEXT(GLsizei n, const GLuint *textures, const GLclampf *priorities)"
  },
  {
    "label": "glTextureNormalEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureNormalEXT(GLenum mode)"
  },
  {
    "label": "glGetQueryObjecti64vEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetQueryObjectui64vEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "glBeginTransformFeedbackEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginTransformFeedbackEXT(GLenum primitiveMode)"
  },
  {
    "label": "glEndTransformFeedbackEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndTransformFeedbackEXT(void)"
  },
  {
    "label": "glBindBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBindBufferOffsetEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset)"
  },
  {
    "label": "glBindBufferBaseEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackVaryingsEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "glGetTransformFeedbackVaryingEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glArrayElementEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glArrayElementEXT(GLint i)"
  },
  {
    "label": "glColorPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glDrawArraysEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glEdgeFlagPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean *pointer)"
  },
  {
    "label": "glGetPointervEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPointervEXT(GLenum pname, void **params)"
  },
  {
    "label": "glIndexPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glNormalPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glTexCoordPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glVertexPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer)"
  },
  {
    "label": "glVertexAttribL1dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1dEXT(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttribL2dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttribL3dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttribL4dEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttribL1dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1dvEXT(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL2dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2dvEXT(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL3dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3dvEXT(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL4dvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4dvEXT(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribLPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribLdvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glBeginVertexShaderEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginVertexShaderEXT(void)"
  },
  {
    "label": "glEndVertexShaderEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndVertexShaderEXT(void)"
  },
  {
    "label": "glBindVertexShaderEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVertexShaderEXT(GLuint id)"
  },
  {
    "label": "glGenVertexShadersEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenVertexShadersEXT(GLuint range)"
  },
  {
    "label": "glDeleteVertexShaderEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteVertexShaderEXT(GLuint id)"
  },
  {
    "label": "glShaderOp1EXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)"
  },
  {
    "label": "glShaderOp2EXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)"
  },
  {
    "label": "glShaderOp3EXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)"
  },
  {
    "label": "glSwizzleEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)"
  },
  {
    "label": "glWriteMaskEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)"
  },
  {
    "label": "glInsertComponentEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInsertComponentEXT(GLuint res, GLuint src, GLuint num)"
  },
  {
    "label": "glExtractComponentEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glExtractComponentEXT(GLuint res, GLuint src, GLuint num)"
  },
  {
    "label": "glGenSymbolsEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)"
  },
  {
    "label": "glSetInvariantEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSetInvariantEXT(GLuint id, GLenum type, const void *addr)"
  },
  {
    "label": "glSetLocalConstantEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSetLocalConstantEXT(GLuint id, GLenum type, const void *addr)"
  },
  {
    "label": "glVariantbvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantbvEXT(GLuint id, const GLbyte *addr)"
  },
  {
    "label": "glVariantsvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantsvEXT(GLuint id, const GLshort *addr)"
  },
  {
    "label": "glVariantivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantivEXT(GLuint id, const GLint *addr)"
  },
  {
    "label": "glVariantfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantfvEXT(GLuint id, const GLfloat *addr)"
  },
  {
    "label": "glVariantdvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantdvEXT(GLuint id, const GLdouble *addr)"
  },
  {
    "label": "glVariantubvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantubvEXT(GLuint id, const GLubyte *addr)"
  },
  {
    "label": "glVariantusvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantusvEXT(GLuint id, const GLushort *addr)"
  },
  {
    "label": "glVariantuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantuivEXT(GLuint id, const GLuint *addr)"
  },
  {
    "label": "glVariantPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void *addr)"
  },
  {
    "label": "glEnableVariantClientStateEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVariantClientStateEXT(GLuint id)"
  },
  {
    "label": "glDisableVariantClientStateEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVariantClientStateEXT(GLuint id)"
  },
  {
    "label": "glBindLightParameterEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindLightParameterEXT(GLenum light, GLenum value)"
  },
  {
    "label": "glBindMaterialParameterEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindMaterialParameterEXT(GLenum face, GLenum value)"
  },
  {
    "label": "glBindTexGenParameterEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)"
  },
  {
    "label": "glBindTextureUnitParameterEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTextureUnitParameterEXT(GLenum unit, GLenum value)"
  },
  {
    "label": "glBindParameterEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindParameterEXT(GLenum value)"
  },
  {
    "label": "glIsVariantEnabledEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsVariantEnabledEXT(GLuint id, GLenum cap)"
  },
  {
    "label": "glGetVariantBooleanvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "glGetVariantIntegervEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVariantIntegervEXT(GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "glGetVariantFloatvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "glGetVariantPointervEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVariantPointervEXT(GLuint id, GLenum value, void **data)"
  },
  {
    "label": "glGetInvariantBooleanvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "glGetInvariantIntegervEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "glGetInvariantFloatvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "glGetLocalConstantBooleanvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean *data)"
  },
  {
    "label": "glGetLocalConstantIntegervEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint *data)"
  },
  {
    "label": "glGetLocalConstantFloatvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat *data)"
  },
  {
    "label": "glVertexWeightfEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexWeightfEXT(GLfloat weight)"
  },
  {
    "label": "glVertexWeightfvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexWeightfvEXT(const GLfloat *weight)"
  },
  {
    "label": "glVertexWeightPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glWindowRectanglesEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint *box)"
  },
  {
    "label": "glImportSyncEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags)"
  },
  {
    "label": "glFrameTerminatorGREMEDY()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFrameTerminatorGREMEDY(void)"
  },
  {
    "label": "glStringMarkerGREMEDY()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStringMarkerGREMEDY(GLsizei len, const void *string)"
  },
  {
    "label": "glImageTransformParameteriHP()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glImageTransformParameterfHP()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glImageTransformParameterivHP()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glImageTransformParameterivHP(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glImageTransformParameterfvHP()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetImageTransformParameterivHP()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetImageTransformParameterfvHP()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glMultiModeDrawArraysIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiModeDrawArraysIBM(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)"
  },
  {
    "label": "glMultiModeDrawElementsIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiModeDrawElementsIBM(const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride)"
  },
  {
    "label": "glFlushStaticDataIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushStaticDataIBM(GLenum target)"
  },
  {
    "label": "glColorPointerListIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glSecondaryColorPointerListIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glEdgeFlagPointerListIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEdgeFlagPointerListIBM(GLint stride, const GLboolean **pointer, GLint ptrstride)"
  },
  {
    "label": "glFogCoordPointerListIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glIndexPointerListIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIndexPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glNormalPointerListIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalPointerListIBM(GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glTexCoordPointerListIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glVertexPointerListIBM()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride)"
  },
  {
    "label": "glBlendFuncSeparateINGR()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glApplyFramebufferAttachmentCMAAINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glApplyFramebufferAttachmentCMAAINTEL(void)"
  },
  {
    "label": "glSyncTextureINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSyncTextureINTEL(GLuint texture)"
  },
  {
    "label": "glUnmapTexture2DINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnmapTexture2DINTEL(GLuint texture, GLint level)"
  },
  {
    "label": "glMapTexture2DINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout)"
  },
  {
    "label": "glVertexPointervINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexPointervINTEL(GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "glNormalPointervINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalPointervINTEL(GLenum type, const void **pointer)"
  },
  {
    "label": "glColorPointervINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorPointervINTEL(GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "glTexCoordPointervINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordPointervINTEL(GLint size, GLenum type, const void **pointer)"
  },
  {
    "label": "glBeginPerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginPerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glCreatePerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreatePerfQueryINTEL(GLuint queryId, GLuint *queryHandle)"
  },
  {
    "label": "glDeletePerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeletePerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glEndPerfQueryINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndPerfQueryINTEL(GLuint queryHandle)"
  },
  {
    "label": "glGetFirstPerfQueryIdINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFirstPerfQueryIdINTEL(GLuint *queryId)"
  },
  {
    "label": "glGetNextPerfQueryIdINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNextPerfQueryIdINTEL(GLuint queryId, GLuint *nextQueryId)"
  },
  {
    "label": "glGetPerfCounterInfoINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue)"
  },
  {
    "label": "glGetPerfQueryDataINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten)"
  },
  {
    "label": "glGetPerfQueryIdByNameINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfQueryIdByNameINTEL(GLchar *queryName, GLuint *queryId)"
  },
  {
    "label": "glGetPerfQueryInfoINTEL()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask)"
  },
  {
    "label": "glResizeBuffersMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResizeBuffersMESA(void)"
  },
  {
    "label": "glWindowPos2dMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2dMESA(GLdouble x, GLdouble y)"
  },
  {
    "label": "glWindowPos2dvMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2dvMESA(const GLdouble *v)"
  },
  {
    "label": "glWindowPos2fMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2fMESA(GLfloat x, GLfloat y)"
  },
  {
    "label": "glWindowPos2fvMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2fvMESA(const GLfloat *v)"
  },
  {
    "label": "glWindowPos2iMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2iMESA(GLint x, GLint y)"
  },
  {
    "label": "glWindowPos2ivMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2ivMESA(const GLint *v)"
  },
  {
    "label": "glWindowPos2sMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2sMESA(GLshort x, GLshort y)"
  },
  {
    "label": "glWindowPos2svMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos2svMESA(const GLshort *v)"
  },
  {
    "label": "glWindowPos3dMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glWindowPos3dvMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3dvMESA(const GLdouble *v)"
  },
  {
    "label": "glWindowPos3fMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glWindowPos3fvMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3fvMESA(const GLfloat *v)"
  },
  {
    "label": "glWindowPos3iMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3iMESA(GLint x, GLint y, GLint z)"
  },
  {
    "label": "glWindowPos3ivMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3ivMESA(const GLint *v)"
  },
  {
    "label": "glWindowPos3sMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glWindowPos3svMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos3svMESA(const GLshort *v)"
  },
  {
    "label": "glWindowPos4dMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glWindowPos4dvMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos4dvMESA(const GLdouble *v)"
  },
  {
    "label": "glWindowPos4fMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glWindowPos4fvMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos4fvMESA(const GLfloat *v)"
  },
  {
    "label": "glWindowPos4iMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glWindowPos4ivMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos4ivMESA(const GLint *v)"
  },
  {
    "label": "glWindowPos4sMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glWindowPos4svMESA()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWindowPos4svMESA(const GLshort *v)"
  },
  {
    "label": "glBeginConditionalRenderNVX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginConditionalRenderNVX(GLuint id)"
  },
  {
    "label": "glEndConditionalRenderNVX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndConditionalRenderNVX(void)"
  },
  {
    "label": "glMultiDrawArraysIndirectBindlessNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectBindlessNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "glMultiDrawElementsIndirectBindlessNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "glMultiDrawArraysIndirectBindlessCountNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "glMultiDrawElementsIndirectBindlessCountNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount)"
  },
  {
    "label": "glGetTextureHandleNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureHandleNV(GLuint texture)"
  },
  {
    "label": "glGetTextureSamplerHandleNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureSamplerHandleNV(GLuint texture, GLuint sampler)"
  },
  {
    "label": "glMakeTextureHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeTextureHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "glMakeTextureHandleNonResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeTextureHandleNonResidentNV(GLuint64 handle)"
  },
  {
    "label": "glGetImageHandleNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "glMakeImageHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeImageHandleResidentNV(GLuint64 handle, GLenum access)"
  },
  {
    "label": "glMakeImageHandleNonResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeImageHandleNonResidentNV(GLuint64 handle)"
  },
  {
    "label": "glUniformHandleui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformHandleui64NV(GLint location, GLuint64 value)"
  },
  {
    "label": "glUniformHandleui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniformHandleui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "glProgramUniformHandleui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "glIsTextureHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsTextureHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "glIsImageHandleResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsImageHandleResidentNV(GLuint64 handle)"
  },
  {
    "label": "glBlendParameteriNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendParameteriNV(GLenum pname, GLint value)"
  },
  {
    "label": "glBlendBarrierNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendBarrierNV(void)"
  },
  {
    "label": "glViewportPositionWScaleNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff)"
  },
  {
    "label": "glCreateStatesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateStatesNV(GLsizei n, GLuint *states)"
  },
  {
    "label": "glDeleteStatesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteStatesNV(GLsizei n, const GLuint *states)"
  },
  {
    "label": "glIsStateNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsStateNV(GLuint state)"
  },
  {
    "label": "glStateCaptureNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStateCaptureNV(GLuint state, GLenum mode)"
  },
  {
    "label": "glGetCommandHeaderNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCommandHeaderNV(GLenum tokenID, GLuint size)"
  },
  {
    "label": "glGetStageIndexNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetStageIndexNV(GLenum shadertype)"
  },
  {
    "label": "glDrawCommandsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, GLuint count)"
  },
  {
    "label": "glDrawCommandsAddressNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 *indirects, const GLsizei *sizes, GLuint count)"
  },
  {
    "label": "glDrawCommandsStatesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawCommandsStatesNV(GLuint buffer, const GLintptr *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "glDrawCommandsStatesAddressNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawCommandsStatesAddressNV(const GLuint64 *indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "glCreateCommandListsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateCommandListsNV(GLsizei n, GLuint *lists)"
  },
  {
    "label": "glDeleteCommandListsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteCommandListsNV(GLsizei n, const GLuint *lists)"
  },
  {
    "label": "glIsCommandListNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsCommandListNV(GLuint list)"
  },
  {
    "label": "glListDrawCommandsStatesClientNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void **indirects, const GLsizei *sizes, const GLuint *states, const GLuint *fbos, GLuint count)"
  },
  {
    "label": "glCommandListSegmentsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCommandListSegmentsNV(GLuint list, GLuint segments)"
  },
  {
    "label": "glCompileCommandListNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompileCommandListNV(GLuint list)"
  },
  {
    "label": "glCallCommandListNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCallCommandListNV(GLuint list)"
  },
  {
    "label": "glBeginConditionalRenderNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginConditionalRenderNV(GLuint id, GLenum mode)"
  },
  {
    "label": "glEndConditionalRenderNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndConditionalRenderNV(void)"
  },
  {
    "label": "glSubpixelPrecisionBiasNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits)"
  },
  {
    "label": "glConservativeRasterParameterfNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConservativeRasterParameterfNV(GLenum pname, GLfloat value)"
  },
  {
    "label": "glConservativeRasterParameteriNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glConservativeRasterParameteriNV(GLenum pname, GLint param)"
  },
  {
    "label": "glCopyImageSubDataNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glDepthRangedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangedNV(GLdouble zNear, GLdouble zFar)"
  },
  {
    "label": "glClearDepthdNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearDepthdNV(GLdouble depth)"
  },
  {
    "label": "glDepthBoundsdNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)"
  },
  {
    "label": "glDrawTextureNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1)"
  },
  {
    "label": "glMapControlPointsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points)"
  },
  {
    "label": "glMapParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapParameterivNV(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glMapParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapParameterfvNV(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetMapControlPointsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points)"
  },
  {
    "label": "glGetMapParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMapParameterivNV(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMapParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMapAttribParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetMapAttribParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glEvalMapsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEvalMapsNV(GLenum target, GLenum mode)"
  },
  {
    "label": "glGetMultisamplefvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "glSampleMaskIndexedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleMaskIndexedNV(GLuint index, GLbitfield mask)"
  },
  {
    "label": "glTexRenderbufferNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexRenderbufferNV(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glDeleteFencesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteFencesNV(GLsizei n, const GLuint *fences)"
  },
  {
    "label": "glGenFencesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenFencesNV(GLsizei n, GLuint *fences)"
  },
  {
    "label": "glIsFenceNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsFenceNV(GLuint fence)"
  },
  {
    "label": "glTestFenceNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTestFenceNV(GLuint fence)"
  },
  {
    "label": "glGetFenceivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFenceivNV(GLuint fence, GLenum pname, GLint *params)"
  },
  {
    "label": "glFinishFenceNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFinishFenceNV(GLuint fence)"
  },
  {
    "label": "glSetFenceNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSetFenceNV(GLuint fence, GLenum condition)"
  },
  {
    "label": "glFragmentCoverageColorNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentCoverageColorNV(GLuint color)"
  },
  {
    "label": "glProgramNamedParameter4fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glProgramNamedParameter4fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)"
  },
  {
    "label": "glProgramNamedParameter4dNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramNamedParameter4dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)"
  },
  {
    "label": "glGetProgramNamedParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)"
  },
  {
    "label": "glGetProgramNamedParameterdvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)"
  },
  {
    "label": "glCoverageModulationTableNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCoverageModulationTableNV(GLsizei n, const GLfloat *v)"
  },
  {
    "label": "glGetCoverageModulationTableNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCoverageModulationTableNV(GLsizei bufsize, GLfloat *v)"
  },
  {
    "label": "glCoverageModulationNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCoverageModulationNV(GLenum components)"
  },
  {
    "label": "glRenderbufferStorageMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glProgramVertexLimitNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramVertexLimitNV(GLenum target, GLint limit)"
  },
  {
    "label": "glFramebufferTextureEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTextureFaceEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)"
  },
  {
    "label": "glProgramLocalParameterI4iNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glProgramLocalParameterI4ivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "glProgramLocalParametersI4ivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "glProgramLocalParameterI4uiNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glProgramLocalParameterI4uivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "glProgramLocalParametersI4uivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glProgramEnvParameterI4iNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glProgramEnvParameterI4ivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint *params)"
  },
  {
    "label": "glProgramEnvParametersI4ivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint *params)"
  },
  {
    "label": "glProgramEnvParameterI4uiNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glProgramEnvParameterI4uivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint *params)"
  },
  {
    "label": "glProgramEnvParametersI4uivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glGetProgramLocalParameterIivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "glGetProgramLocalParameterIuivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "glGetProgramEnvParameterIivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint *params)"
  },
  {
    "label": "glGetProgramEnvParameterIuivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint *params)"
  },
  {
    "label": "glProgramSubroutineParametersuivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glGetProgramSubroutineParameteruivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint *param)"
  },
  {
    "label": "glVertex2hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex2hNV(GLhalfNV x, GLhalfNV y)"
  },
  {
    "label": "glVertex2hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex2hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glVertex3hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)"
  },
  {
    "label": "glVertex3hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glVertex4hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)"
  },
  {
    "label": "glVertex4hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertex4hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glNormal3hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)"
  },
  {
    "label": "glNormal3hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormal3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glColor3hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)"
  },
  {
    "label": "glColor3hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glColor4hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)"
  },
  {
    "label": "glColor4hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glTexCoord1hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord1hNV(GLhalfNV s)"
  },
  {
    "label": "glTexCoord1hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord1hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glTexCoord2hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2hNV(GLhalfNV s, GLhalfNV t)"
  },
  {
    "label": "glTexCoord2hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glTexCoord3hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)"
  },
  {
    "label": "glTexCoord3hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glTexCoord4hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)"
  },
  {
    "label": "glTexCoord4hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glMultiTexCoord1hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1hNV(GLenum target, GLhalfNV s)"
  },
  {
    "label": "glMultiTexCoord1hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord1hvNV(GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "glMultiTexCoord2hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)"
  },
  {
    "label": "glMultiTexCoord2hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord2hvNV(GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "glMultiTexCoord3hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)"
  },
  {
    "label": "glMultiTexCoord3hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord3hvNV(GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "glMultiTexCoord4hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)"
  },
  {
    "label": "glMultiTexCoord4hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiTexCoord4hvNV(GLenum target, const GLhalfNV *v)"
  },
  {
    "label": "glFogCoordhNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordhNV(GLhalfNV fog)"
  },
  {
    "label": "glFogCoordhvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordhvNV(const GLhalfNV *fog)"
  },
  {
    "label": "glSecondaryColor3hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)"
  },
  {
    "label": "glSecondaryColor3hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColor3hvNV(const GLhalfNV *v)"
  },
  {
    "label": "glVertexWeighthNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexWeighthNV(GLhalfNV weight)"
  },
  {
    "label": "glVertexWeighthvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexWeighthvNV(const GLhalfNV *weight)"
  },
  {
    "label": "glVertexAttrib1hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1hNV(GLuint index, GLhalfNV x)"
  },
  {
    "label": "glVertexAttrib1hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1hvNV(GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttrib2hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)"
  },
  {
    "label": "glVertexAttrib2hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2hvNV(GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttrib3hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)"
  },
  {
    "label": "glVertexAttrib3hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3hvNV(GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttrib4hNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)"
  },
  {
    "label": "glVertexAttrib4hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4hvNV(GLuint index, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttribs1hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttribs2hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttribs3hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "glVertexAttribs4hvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV *v)"
  },
  {
    "label": "glGetInternalformatSampleivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGenOcclusionQueriesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenOcclusionQueriesNV(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteOcclusionQueriesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteOcclusionQueriesNV(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsOcclusionQueryNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsOcclusionQueryNV(GLuint id)"
  },
  {
    "label": "glBeginOcclusionQueryNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginOcclusionQueryNV(GLuint id)"
  },
  {
    "label": "glEndOcclusionQueryNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndOcclusionQueryNV(void)"
  },
  {
    "label": "glGetOcclusionQueryivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetOcclusionQueryuivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glProgramBufferParametersfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params)"
  },
  {
    "label": "glProgramBufferParametersIivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params)"
  },
  {
    "label": "glProgramBufferParametersIuivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params)"
  },
  {
    "label": "glGenPathsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenPathsNV(GLsizei range)"
  },
  {
    "label": "glDeletePathsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeletePathsNV(GLuint path, GLsizei range)"
  },
  {
    "label": "glIsPathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsPathNV(GLuint path)"
  },
  {
    "label": "glPathCommandsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathCoordsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathSubCommandsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathSubCoordsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords)"
  },
  {
    "label": "glPathStringNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathStringNV(GLuint path, GLenum format, GLsizei length, const void *pathString)"
  },
  {
    "label": "glPathGlyphsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glPathGlyphRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glWeightPathsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights)"
  },
  {
    "label": "glCopyPathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyPathNV(GLuint resultPath, GLuint srcPath)"
  },
  {
    "label": "glInterpolatePathsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight)"
  },
  {
    "label": "glTransformPathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathParameterivNV(GLuint path, GLenum pname, const GLint *value)"
  },
  {
    "label": "glPathParameteriNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathParameteriNV(GLuint path, GLenum pname, GLint value)"
  },
  {
    "label": "glPathParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathParameterfvNV(GLuint path, GLenum pname, const GLfloat *value)"
  },
  {
    "label": "glPathParameterfNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathParameterfNV(GLuint path, GLenum pname, GLfloat value)"
  },
  {
    "label": "glPathDashArrayNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat *dashArray)"
  },
  {
    "label": "glPathStencilFuncNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathStencilFuncNV(GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glPathStencilDepthOffsetNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathStencilDepthOffsetNV(GLfloat factor, GLfloat units)"
  },
  {
    "label": "glStencilFillPathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask)"
  },
  {
    "label": "glStencilStrokePathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilStrokePathNV(GLuint path, GLint reference, GLuint mask)"
  },
  {
    "label": "glStencilFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glStencilStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathCoverDepthFuncNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathCoverDepthFuncNV(GLenum func)"
  },
  {
    "label": "glCoverFillPathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCoverFillPathNV(GLuint path, GLenum coverMode)"
  },
  {
    "label": "glCoverStrokePathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCoverStrokePathNV(GLuint path, GLenum coverMode)"
  },
  {
    "label": "glCoverFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glCoverStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glGetPathParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathParameterivNV(GLuint path, GLenum pname, GLint *value)"
  },
  {
    "label": "glGetPathParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat *value)"
  },
  {
    "label": "glGetPathCommandsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathCommandsNV(GLuint path, GLubyte *commands)"
  },
  {
    "label": "glGetPathCoordsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathCoordsNV(GLuint path, GLfloat *coords)"
  },
  {
    "label": "glGetPathDashArrayNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathDashArrayNV(GLuint path, GLfloat *dashArray)"
  },
  {
    "label": "glGetPathMetricsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "glGetPathMetricRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics)"
  },
  {
    "label": "glGetPathSpacingNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing)"
  },
  {
    "label": "glIsPointInFillPathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y)"
  },
  {
    "label": "glIsPointInStrokePathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y)"
  },
  {
    "label": "glGetPathLengthNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments)"
  },
  {
    "label": "glPointAlongPathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY)"
  },
  {
    "label": "glMatrixLoad3x2fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoad3x3fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixLoadTranspose3x3fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMult3x2fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixMult3x2fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMult3x3fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixMult3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glMatrixMultTranspose3x3fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat *m)"
  },
  {
    "label": "glStencilThenCoverFillPathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "glStencilThenCoverStrokePathNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode)"
  },
  {
    "label": "glStencilThenCoverFillPathInstancedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glStencilThenCoverStrokePathInstancedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat *transformValues)"
  },
  {
    "label": "glPathGlyphIndexRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathGlyphIndexRangeNV(GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2])"
  },
  {
    "label": "glPathGlyphIndexArrayNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glPathMemoryGlyphIndexArrayNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void *fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale)"
  },
  {
    "label": "glProgramPathFragmentInputGenNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat *coeffs)"
  },
  {
    "label": "glGetProgramResourcefvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLfloat *params)"
  },
  {
    "label": "glPathColorGenNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs)"
  },
  {
    "label": "glPathTexGenNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs)"
  },
  {
    "label": "glPathFogGenNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPathFogGenNV(GLenum genMode)"
  },
  {
    "label": "glGetPathColorGenivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathColorGenivNV(GLenum color, GLenum pname, GLint *value)"
  },
  {
    "label": "glGetPathColorGenfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat *value)"
  },
  {
    "label": "glGetPathTexGenivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint *value)"
  },
  {
    "label": "glGetPathTexGenfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat *value)"
  },
  {
    "label": "glPixelDataRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelDataRangeNV(GLenum target, GLsizei length, const void *pointer)"
  },
  {
    "label": "glFlushPixelDataRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushPixelDataRangeNV(GLenum target)"
  },
  {
    "label": "glPointParameteriNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameteriNV(GLenum pname, GLint param)"
  },
  {
    "label": "glPointParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterivNV(GLenum pname, const GLint *params)"
  },
  {
    "label": "glPresentFrameKeyedNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1)"
  },
  {
    "label": "glPresentFrameDualFillNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3)"
  },
  {
    "label": "glGetVideoivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVideoivNV(GLuint video_slot, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVideouivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVideouivNV(GLuint video_slot, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGetVideoi64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT *params)"
  },
  {
    "label": "glGetVideoui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glPrimitiveRestartNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPrimitiveRestartNV(void)"
  },
  {
    "label": "glPrimitiveRestartIndexNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPrimitiveRestartIndexNV(GLuint index)"
  },
  {
    "label": "glCombinerParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCombinerParameterfvNV(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glCombinerParameterfNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCombinerParameterfNV(GLenum pname, GLfloat param)"
  },
  {
    "label": "glCombinerParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCombinerParameterivNV(GLenum pname, const GLint *params)"
  },
  {
    "label": "glCombinerParameteriNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCombinerParameteriNV(GLenum pname, GLint param)"
  },
  {
    "label": "glCombinerInputNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)"
  },
  {
    "label": "glCombinerOutputNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)"
  },
  {
    "label": "glFinalCombinerInputNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)"
  },
  {
    "label": "glGetCombinerInputParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetCombinerInputParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetCombinerOutputParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetCombinerOutputParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetFinalCombinerInputParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetFinalCombinerInputParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint *params)"
  },
  {
    "label": "glCombinerStageParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetCombinerStageParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glFramebufferSampleLocationsfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glNamedFramebufferSampleLocationsfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glResolveDepthValuesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResolveDepthValuesNV(void)"
  },
  {
    "label": "glMakeBufferResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeBufferResidentNV(GLenum target, GLenum access)"
  },
  {
    "label": "glMakeBufferNonResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeBufferNonResidentNV(GLenum target)"
  },
  {
    "label": "glIsBufferResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsBufferResidentNV(GLenum target)"
  },
  {
    "label": "glMakeNamedBufferResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeNamedBufferResidentNV(GLuint buffer, GLenum access)"
  },
  {
    "label": "glMakeNamedBufferNonResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeNamedBufferNonResidentNV(GLuint buffer)"
  },
  {
    "label": "glIsNamedBufferResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsNamedBufferResidentNV(GLuint buffer)"
  },
  {
    "label": "glGetBufferParameterui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glGetNamedBufferParameterui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glGetIntegerui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetIntegerui64vNV(GLenum value, GLuint64EXT *result)"
  },
  {
    "label": "glUniformui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformui64NV(GLint location, GLuint64EXT value)"
  },
  {
    "label": "glUniformui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glProgramUniformui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value)"
  },
  {
    "label": "glProgramUniformui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT *value)"
  },
  {
    "label": "glTextureBarrierNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBarrierNV(void)"
  },
  {
    "label": "glTexImage2DMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTexImage3DMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTextureImage2DMultisampleNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTextureImage3DMultisampleNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTextureImage2DMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glTextureImage3DMultisampleCoverageNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations)"
  },
  {
    "label": "glBeginTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginTransformFeedbackNV(GLenum primitiveMode)"
  },
  {
    "label": "glEndTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndTransformFeedbackNV(void)"
  },
  {
    "label": "glTransformFeedbackAttribsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackAttribsNV(GLsizei count, const GLint *attribs, GLenum bufferMode)"
  },
  {
    "label": "glBindBufferRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBindBufferOffsetNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)"
  },
  {
    "label": "glBindBufferBaseNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackVaryingsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)"
  },
  {
    "label": "glActiveVaryingNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glActiveVaryingNV(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetVaryingLocationNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVaryingLocationNV(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetActiveVaryingNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetTransformFeedbackVaryingNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint *location)"
  },
  {
    "label": "glTransformFeedbackStreamAttribsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackStreamAttribsNV(GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode)"
  },
  {
    "label": "glBindTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTransformFeedbackNV(GLenum target, GLuint id)"
  },
  {
    "label": "glDeleteTransformFeedbacksNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteTransformFeedbacksNV(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glGenTransformFeedbacksNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenTransformFeedbacksNV(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glIsTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsTransformFeedbackNV(GLuint id)"
  },
  {
    "label": "glPauseTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPauseTransformFeedbackNV(void)"
  },
  {
    "label": "glResumeTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResumeTransformFeedbackNV(void)"
  },
  {
    "label": "glDrawTransformFeedbackNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedbackNV(GLenum mode, GLuint id)"
  },
  {
    "label": "glVDPAUInitNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAUInitNV(const void *vdpDevice, const void *getProcAddress)"
  },
  {
    "label": "glVDPAUFiniNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAUFiniNV(void)"
  },
  {
    "label": "glVDPAURegisterVideoSurfaceNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAURegisterVideoSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)"
  },
  {
    "label": "glVDPAURegisterOutputSurfaceNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAURegisterOutputSurfaceNV(const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames)"
  },
  {
    "label": "glVDPAUIsSurfaceNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface)"
  },
  {
    "label": "glVDPAUUnregisterSurfaceNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)"
  },
  {
    "label": "glVDPAUGetSurfaceivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "glVDPAUSurfaceAccessNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access)"
  },
  {
    "label": "glVDPAUMapSurfacesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces)"
  },
  {
    "label": "glVDPAUUnmapSurfacesNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV *surfaces)"
  },
  {
    "label": "glFlushVertexArrayRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushVertexArrayRangeNV(void)"
  },
  {
    "label": "glVertexArrayRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayRangeNV(GLsizei length, const void *pointer)"
  },
  {
    "label": "glVertexAttribL1i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1i64NV(GLuint index, GLint64EXT x)"
  },
  {
    "label": "glVertexAttribL2i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y)"
  },
  {
    "label": "glVertexAttribL3i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z)"
  },
  {
    "label": "glVertexAttribL4i64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w)"
  },
  {
    "label": "glVertexAttribL1i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1i64vNV(GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "glVertexAttribL2i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2i64vNV(GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "glVertexAttribL3i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3i64vNV(GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "glVertexAttribL4i64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4i64vNV(GLuint index, const GLint64EXT *v)"
  },
  {
    "label": "glVertexAttribL1ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1ui64NV(GLuint index, GLuint64EXT x)"
  },
  {
    "label": "glVertexAttribL2ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y)"
  },
  {
    "label": "glVertexAttribL3ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z)"
  },
  {
    "label": "glVertexAttribL4ui64NV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w)"
  },
  {
    "label": "glVertexAttribL1ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glVertexAttribL2ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glVertexAttribL3ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glVertexAttribL4ui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glGetVertexAttribLi64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT *params)"
  },
  {
    "label": "glGetVertexAttribLui64vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glVertexAttribLFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glBufferAddressRangeNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length)"
  },
  {
    "label": "glVertexFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexFormatNV(GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glNormalFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormalFormatNV(GLenum type, GLsizei stride)"
  },
  {
    "label": "glColorFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorFormatNV(GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glIndexFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIndexFormatNV(GLenum type, GLsizei stride)"
  },
  {
    "label": "glTexCoordFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoordFormatNV(GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glEdgeFlagFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEdgeFlagFormatNV(GLsizei stride)"
  },
  {
    "label": "glSecondaryColorFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glFogCoordFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogCoordFormatNV(GLenum type, GLsizei stride)"
  },
  {
    "label": "glVertexAttribFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride)"
  },
  {
    "label": "glVertexAttribIFormatNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride)"
  },
  {
    "label": "glGetIntegerui64i_vNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT *result)"
  },
  {
    "label": "glAreProgramsResidentNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAreProgramsResidentNV(GLsizei n, const GLuint *programs, GLboolean *residences)"
  },
  {
    "label": "glBindProgramNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindProgramNV(GLenum target, GLuint id)"
  },
  {
    "label": "glDeleteProgramsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteProgramsNV(GLsizei n, const GLuint *programs)"
  },
  {
    "label": "glExecuteProgramNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glExecuteProgramNV(GLenum target, GLuint id, const GLfloat *params)"
  },
  {
    "label": "glGenProgramsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenProgramsNV(GLsizei n, GLuint *programs)"
  },
  {
    "label": "glGetProgramParameterdvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetProgramParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetProgramivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramivNV(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramStringNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramStringNV(GLuint id, GLenum pname, GLubyte *program)"
  },
  {
    "label": "glGetTrackMatrixivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribdvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetVertexAttribfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribivNV(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointervNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribPointervNV(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glIsProgramNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsProgramNV(GLuint id)"
  },
  {
    "label": "glLoadProgramNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte *program)"
  },
  {
    "label": "glProgramParameter4dNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glProgramParameter4dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble *v)"
  },
  {
    "label": "glProgramParameter4fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glProgramParameter4fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat *v)"
  },
  {
    "label": "glProgramParameters4dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glProgramParameters4fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glRequestResidentProgramsNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRequestResidentProgramsNV(GLsizei n, const GLuint *programs)"
  },
  {
    "label": "glTrackMatrixNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)"
  },
  {
    "label": "glVertexAttribPointerNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glVertexAttrib1dNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1dNV(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttrib1dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1dvNV(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib1fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1fNV(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1fvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib1sNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1sNV(GLuint index, GLshort x)"
  },
  {
    "label": "glVertexAttrib1svNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1svNV(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib2dNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttrib2dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2dvNV(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib2fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2fvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2sNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexAttrib2svNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2svNV(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib3dNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttrib3dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3dvNV(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib3fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3fvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3sNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexAttrib3svNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3svNV(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4dNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttrib4dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4dvNV(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib4fNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4fvNV(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4sNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexAttrib4svNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4svNV(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4ubNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "glVertexAttrib4ubvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4ubvNV(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribs1dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribs1fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribs1svNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "glVertexAttribs2dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribs2fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribs2svNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "glVertexAttribs3dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribs3fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribs3svNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "glVertexAttribs4dvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribs4fvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribs4svNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort *v)"
  },
  {
    "label": "glVertexAttribs4ubvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribI1iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1iEXT(GLuint index, GLint x)"
  },
  {
    "label": "glVertexAttribI2iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)"
  },
  {
    "label": "glVertexAttribI3iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertexAttribI4iEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertexAttribI1uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1uiEXT(GLuint index, GLuint x)"
  },
  {
    "label": "glVertexAttribI2uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "glVertexAttribI3uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "glVertexAttribI4uiEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glVertexAttribI1ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1ivEXT(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI2ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2ivEXT(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI3ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3ivEXT(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI4ivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4ivEXT(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI1uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1uivEXT(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI2uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2uivEXT(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI3uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3uivEXT(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4uivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4uivEXT(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4bvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4bvEXT(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttribI4svEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4svEXT(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttribI4ubvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribI4usvEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4usvEXT(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttribIPointerEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribIivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribIuivEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "glBeginVideoCaptureNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginVideoCaptureNV(GLuint video_capture_slot)"
  },
  {
    "label": "glBindVideoCaptureStreamBufferNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset)"
  },
  {
    "label": "glBindVideoCaptureStreamTextureNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture)"
  },
  {
    "label": "glEndVideoCaptureNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndVideoCaptureNV(GLuint video_capture_slot)"
  },
  {
    "label": "glGetVideoCaptureivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVideoCaptureStreamivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVideoCaptureStreamfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVideoCaptureStreamdvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glVideoCaptureNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVideoCaptureNV(GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time)"
  },
  {
    "label": "glVideoCaptureStreamParameterivNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params)"
  },
  {
    "label": "glVideoCaptureStreamParameterfvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glVideoCaptureStreamParameterdvNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params)"
  },
  {
    "label": "glViewportSwizzleNV()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew)"
  },
  {
    "label": "glFramebufferTextureMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews)"
  },
  {
    "label": "glHintPGI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glHintPGI(GLenum target, GLint mode)"
  },
  {
    "label": "glDetailTexFuncSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)"
  },
  {
    "label": "glGetDetailTexFuncSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDetailTexFuncSGIS(GLenum target, GLfloat *points)"
  },
  {
    "label": "glFogFuncSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFogFuncSGIS(GLsizei n, const GLfloat *points)"
  },
  {
    "label": "glGetFogFuncSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFogFuncSGIS(GLfloat *points)"
  },
  {
    "label": "glSampleMaskSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleMaskSGIS(GLclampf value, GLboolean invert)"
  },
  {
    "label": "glSamplePatternSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplePatternSGIS(GLenum pattern)"
  },
  {
    "label": "glPixelTexGenParameteriSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTexGenParameteriSGIS(GLenum pname, GLint param)"
  },
  {
    "label": "glPixelTexGenParameterivSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTexGenParameterivSGIS(GLenum pname, const GLint *params)"
  },
  {
    "label": "glPixelTexGenParameterfSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPixelTexGenParameterfvSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glGetPixelTexGenParameterivSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPixelTexGenParameterivSGIS(GLenum pname, GLint *params)"
  },
  {
    "label": "glGetPixelTexGenParameterfvSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat *params)"
  },
  {
    "label": "glPointParameterfSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterfSGIS(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfvSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterfvSGIS(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glSharpenTexFuncSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat *points)"
  },
  {
    "label": "glGetSharpenTexFuncSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSharpenTexFuncSGIS(GLenum target, GLfloat *points)"
  },
  {
    "label": "glTexImage4DSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage4DSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureColorMaskSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "glGetTexFilterFuncSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat *weights)"
  },
  {
    "label": "glTexFilterFuncSGIS()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)"
  },
  {
    "label": "glAsyncMarkerSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAsyncMarkerSGIX(GLuint marker)"
  },
  {
    "label": "glFinishAsyncSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFinishAsyncSGIX(GLuint *markerp)"
  },
  {
    "label": "glPollAsyncSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPollAsyncSGIX(GLuint *markerp)"
  },
  {
    "label": "glGenAsyncMarkersSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenAsyncMarkersSGIX(GLsizei range)"
  },
  {
    "label": "glDeleteAsyncMarkersSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)"
  },
  {
    "label": "glIsAsyncMarkerSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsAsyncMarkerSGIX(GLuint marker)"
  },
  {
    "label": "glFlushRasterSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushRasterSGIX(void)"
  },
  {
    "label": "glFragmentColorMaterialSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentColorMaterialSGIX(GLenum face, GLenum mode)"
  },
  {
    "label": "glFragmentLightfSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)"
  },
  {
    "label": "glFragmentLightfvSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glFragmentLightiSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)"
  },
  {
    "label": "glFragmentLightivSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentLightivSGIX(GLenum light, GLenum pname, const GLint *params)"
  },
  {
    "label": "glFragmentLightModelfSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentLightModelfSGIX(GLenum pname, GLfloat param)"
  },
  {
    "label": "glFragmentLightModelfvSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentLightModelfvSGIX(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glFragmentLightModeliSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentLightModeliSGIX(GLenum pname, GLint param)"
  },
  {
    "label": "glFragmentLightModelivSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentLightModelivSGIX(GLenum pname, const GLint *params)"
  },
  {
    "label": "glFragmentMaterialfSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)"
  },
  {
    "label": "glFragmentMaterialfvSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glFragmentMaterialiSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)"
  },
  {
    "label": "glFragmentMaterialivSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetFragmentLightfvSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetFragmentLightivSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetFragmentMaterialfvSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetFragmentMaterialivSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint *params)"
  },
  {
    "label": "glLightEnviSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLightEnviSGIX(GLenum pname, GLint param)"
  },
  {
    "label": "glFrameZoomSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFrameZoomSGIX(GLint factor)"
  },
  {
    "label": "glIglooInterfaceSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIglooInterfaceSGIX(GLenum pname, const void *params)"
  },
  {
    "label": "glGetInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInstrumentsSGIX(void)"
  },
  {
    "label": "glInstrumentsBufferSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInstrumentsBufferSGIX(GLsizei size, GLint *buffer)"
  },
  {
    "label": "glPollInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPollInstrumentsSGIX(GLint *marker_p)"
  },
  {
    "label": "glReadInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReadInstrumentsSGIX(GLint marker)"
  },
  {
    "label": "glStartInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStartInstrumentsSGIX(void)"
  },
  {
    "label": "glStopInstrumentsSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStopInstrumentsSGIX(GLint marker)"
  },
  {
    "label": "glGetListParameterfvSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetListParameterivSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetListParameterivSGIX(GLuint list, GLenum pname, GLint *params)"
  },
  {
    "label": "glListParameterfSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)"
  },
  {
    "label": "glListParameterfvSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glListParameteriSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glListParameteriSGIX(GLuint list, GLenum pname, GLint param)"
  },
  {
    "label": "glListParameterivSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glListParameterivSGIX(GLuint list, GLenum pname, const GLint *params)"
  },
  {
    "label": "glPixelTexGenSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelTexGenSGIX(GLenum mode)"
  },
  {
    "label": "glDeformationMap3dSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)"
  },
  {
    "label": "glDeformationMap3fSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)"
  },
  {
    "label": "glDeformSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeformSGIX(GLbitfield mask)"
  },
  {
    "label": "glLoadIdentityDeformationMapSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLoadIdentityDeformationMapSGIX(GLbitfield mask)"
  },
  {
    "label": "glReferencePlaneSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReferencePlaneSGIX(const GLdouble *equation)"
  },
  {
    "label": "glSpriteParameterfSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSpriteParameterfSGIX(GLenum pname, GLfloat param)"
  },
  {
    "label": "glSpriteParameterfvSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSpriteParameterfvSGIX(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glSpriteParameteriSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSpriteParameteriSGIX(GLenum pname, GLint param)"
  },
  {
    "label": "glSpriteParameterivSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSpriteParameterivSGIX(GLenum pname, const GLint *params)"
  },
  {
    "label": "glTagSampleBufferSGIX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTagSampleBufferSGIX(void)"
  },
  {
    "label": "glColorTableSGI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table)"
  },
  {
    "label": "glColorTableParameterfvSGI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glColorTableParameterivSGI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorTableParameterivSGI(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyColorTableSGI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glGetColorTableSGI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTableSGI(GLenum target, GLenum format, GLenum type, void *table)"
  },
  {
    "label": "glGetColorTableParameterfvSGI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetColorTableParameterivSGI()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glFinishTextureSUNX()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFinishTextureSUNX(void)"
  },
  {
    "label": "glGlobalAlphaFactorbSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGlobalAlphaFactorbSUN(GLbyte factor)"
  },
  {
    "label": "glGlobalAlphaFactorsSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGlobalAlphaFactorsSUN(GLshort factor)"
  },
  {
    "label": "glGlobalAlphaFactoriSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGlobalAlphaFactoriSUN(GLint factor)"
  },
  {
    "label": "glGlobalAlphaFactorfSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGlobalAlphaFactorfSUN(GLfloat factor)"
  },
  {
    "label": "glGlobalAlphaFactordSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGlobalAlphaFactordSUN(GLdouble factor)"
  },
  {
    "label": "glGlobalAlphaFactorubSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGlobalAlphaFactorubSUN(GLubyte factor)"
  },
  {
    "label": "glGlobalAlphaFactorusSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGlobalAlphaFactorusSUN(GLushort factor)"
  },
  {
    "label": "glGlobalAlphaFactoruiSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGlobalAlphaFactoruiSUN(GLuint factor)"
  },
  {
    "label": "glDrawMeshArraysSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)"
  },
  {
    "label": "glReplacementCodeuiSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiSUN(GLuint code)"
  },
  {
    "label": "glReplacementCodeusSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeusSUN(GLushort code)"
  },
  {
    "label": "glReplacementCodeubSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeubSUN(GLubyte code)"
  },
  {
    "label": "glReplacementCodeuivSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuivSUN(const GLuint *code)"
  },
  {
    "label": "glReplacementCodeusvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeusvSUN(const GLushort *code)"
  },
  {
    "label": "glReplacementCodeubvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeubvSUN(const GLubyte *code)"
  },
  {
    "label": "glReplacementCodePointerSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodePointerSUN(GLenum type, GLsizei stride, const void **pointer)"
  },
  {
    "label": "glColor4ubVertex2fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)"
  },
  {
    "label": "glColor4ubVertex2fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4ubVertex2fvSUN(const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "glColor4ubVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glColor4ubVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4ubVertex3fvSUN(const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "glColor3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glColor3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor3fVertex3fvSUN(const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "glNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNormal3fVertex3fvSUN(const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glColor4fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glColor4fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColor4fNormal3fVertex3fvSUN(const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fVertex3fvSUN(const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "glTexCoord4fVertex4fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glTexCoord4fVertex4fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4fVertex4fvSUN(const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fColor4ubVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fColor4ubVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fColor4ubVertex3fvSUN(const GLfloat *tc, const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fColor3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fColor3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fColor3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glTexCoord2fColor4fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTexCoord2fColor4fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glTexCoord4fColor4fNormal3fVertex4fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glTexCoord4fColor4fNormal3fVertex4fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiVertex3fvSUN(const GLuint *rc, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiColor4ubVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiColor4ubVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiColor4ubVertex3fvSUN(const GLuint *rc, const GLubyte *c, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiColor3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiColor3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiColor3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiColor4fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiColor4fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)"
  }
]