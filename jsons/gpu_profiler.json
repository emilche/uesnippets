[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GpuCounterHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GpuCounterHash"
  },
  {
    "label": "GpuCounterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GpuCounterInfo"
  },
  {
    "label": "GpuProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GpuProfiler"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" value . h \" # include<string> # include<unordered_map> # include<unordered_set> namespace hwcpipe { enum class GpuCounter { GpuCycles,VertexComputeCycles,FragmentCycles,TilerCycles,VertexComputeJobs,FragmentJobs,Pixels,Tiles,TransactionEliminations,EarlyZTests,EarlyZKilled,LateZTests,LateZKilled,Instructions,DivergedInstructions,ShaderCycles,ShaderArithmeticCycles,ShaderLoadStoreCycles,ShaderTextureCycles,CacheReadLookups,CacheWriteLookups,ExternalMemoryReadAccesses,ExternalMemoryWriteAccesses,ExternalMemoryReadStalls,ExternalMemoryWriteStalls,ExternalMemoryReadBytes,ExternalMemoryWriteBytes,MaxValue } ; const std::unordered_map<std::string,GpuCounter> gpu_counter_names ; struct GpuCounterHash { template<T> std::size_t)",
    "insertText": "operator()(T t)"
  },
  {
    "label": "GpuProfiler()",
    "kind": "Method",
    "detail": "Function (} } ; struct GpuCounterInfo { std::string desc ; std::string unit ; } ; typedef std::unordered_set<GpuCounter,GpuCounterHash> GpuCounterSet ; typedef std::unordered_map<GpuCounter,Value,GpuCounterHash> GpuMeasurements ; class GpuProfiler { public : ~)",
    "insertText": "GpuProfiler()"
  },
  {
    "label": "enabled_counters()",
    "kind": "Method",
    "detail": "Function (const GpuCounterSet&)",
    "insertText": "enabled_counters()"
  },
  {
    "label": "supported_counters()",
    "kind": "Method",
    "detail": "Function (const GpuCounterSet&)",
    "insertText": "supported_counters()"
  },
  {
    "label": "set_enabled_counters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_enabled_counters(const GpuCounterSet& counters)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (const GpuMeasurements&)",
    "insertText": "sample()"
  }
]