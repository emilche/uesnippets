[
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "SWorldPartitionEditorGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldPartitionEditorGrid"
  },
  {
    "label": "SWorldPartitionEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldPartitionEditor"
  },
  {
    "label": "WORLD_PARTITION_EDITOR_IMPL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Children . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class UWorldPartition ; # define)",
    "insertText": "WORLD_PARTITION_EDITOR_IMPL(Type) \\ SLATE_BEGIN_ARGS(Type) \\ :_InWorld(nullptr)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (} \\)",
    "insertText": "SLATE_ARGUMENT(UWorld*, InWorld) \\ SLATE_END_ARGS() \\ static TSharedRef<SWorldPartitionEditorGrid> CreateInstance(TSharedPtr<SWorldPartitionEditorGrid>& InPtr, UWorld* InWorld)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "SAssignNew(InPtr, Type).InWorld(InWorld).Me()"
  },
  {
    "label": "SWorldPartitionEditorGrid()",
    "kind": "Method",
    "detail": "Function (\\ } class SWorldPartitionEditorGrid : public SCompoundWidget { class SWorldPartitionEditor ; typedef TFunction<TSharedRef<)",
    "insertText": "SWorldPartitionEditorGrid(TSharedPtr<SWorldPartitionEditorGrid>&, UWorld*)"
  },
  {
    "label": "WORLD_PARTITION_EDITOR_IMPL()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "WORLD_PARTITION_EDITOR_IMPL(SWorldPartitionEditorGrid)"
  },
  {
    "label": "SWorldPartitionEditorGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SWorldPartitionEditorGrid() : World(nullptr)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "RegisterPartitionEditorGridCreateInstanceFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPartitionEditorGridCreateInstanceFunc(FName Name, PartitionEditorGridCreateInstanceFunc CreateFunc)"
  },
  {
    "label": "GetPartitionEditorGridCreateInstanceFunc()",
    "kind": "Method",
    "detail": "Function (PartitionEditorGridCreateInstanceFunc)",
    "insertText": "GetPartitionEditorGridCreateInstanceFunc(FName Name)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(AllottedGeometry, ArrangedChildren)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (} } FVector2D)",
    "insertText": "ComputeDesiredSize(float Scale)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetPlayerView()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetPlayerView(FVector& Location, FRotator& Rotation)"
  },
  {
    "label": "GetObserverView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetObserverView(FVector& Location, FRotator& Rotation)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "FocusBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusBox(const FBox& Box)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (} UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetWorldPartition()",
    "kind": "Method",
    "detail": "Function (} UWorldPartition*)",
    "insertText": "GetWorldPartition()"
  },
  {
    "label": "IsDisabled()",
    "kind": "Method",
    "detail": "Function (} protected : TMap<FName,PartitionEditorGridCreateInstanceFunc> PartitionEditorGridCreateInstanceFactory ; private : bool)",
    "insertText": "IsDisabled()"
  }
]