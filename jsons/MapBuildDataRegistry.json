[
  {
    "label": "FPrecomputedLightVolumeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedLightVolumeData"
  },
  {
    "label": "FPrecomputedVolumetricLightmapData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmapData"
  },
  {
    "label": "FAssetCompileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetCompileData"
  },
  {
    "label": "FVolumetricLightMapGridDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricLightMapGridDesc"
  },
  {
    "label": "FPerInstanceLightmapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerInstanceLightmapData"
  },
  {
    "label": "FMeshMapBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMapBuildData"
  },
  {
    "label": "FMeshMapBuildLegacyData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMapBuildLegacyData"
  },
  {
    "label": "FStaticShadowDepthMapData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticShadowDepthMapData"
  },
  {
    "label": "FLevelLegacyMapBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelLegacyMapBuildData"
  },
  {
    "label": "FLightComponentMapBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightComponentMapBuildData"
  },
  {
    "label": "FLightComponentLegacyMapBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightComponentLegacyMapBuildData"
  },
  {
    "label": "FReflectionCaptureData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionCaptureData"
  },
  {
    "label": "FReflectionCaptureMapBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionCaptureMapBuildData"
  },
  {
    "label": "FReflectionCaptureMapBuildLegacyData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionCaptureMapBuildLegacyData"
  },
  {
    "label": "FSkyAtmosphereMapBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereMapBuildData"
  },
  {
    "label": "UMapBuildDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMapBuildDataRegistry"
  },
  {
    "label": "ELightingBuildQuality",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELightingBuildQuality"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" Engine / EngineTypes . h \" # include \" SceneTypes . h \" # include \" UObject / UObjectAnnotation . h \" # include \" RenderCommandFence . h \" # include \" LightMap . h \" # include \" Engine / TextureCube . h \" # include \" MapBuildDataRegistry . generated . h \" class FPrecomputedLightVolumeData ; class FPrecomputedVolumetricLightmapData ; struct FAssetCompileData ; struct FVolumetricLightMapGridDesc ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogMapBuildDataRegistry, Log, All)"
  },
  {
    "label": "UE_LOG_MAPBUILDDATA()",
    "kind": "Method",
    "detail": "Function (# define UE_LOG_MAPBUILDATA_ENABLED 0 # if UE_LOG_MAPBUILDATA_ENABLED # define)",
    "insertText": "UE_LOG_MAPBUILDDATA(...) UE_LOG(LogMapBuildDataRegistry, __VA_ARGS__) #else #define UE_LOG_MAPBUILDDATA(...)"
  },
  {
    "label": "FPerInstanceLightmapData()",
    "kind": "Method",
    "detail": "Function (FVector2f LightmapUVBias ; FVector2f ShadowmapUVBias ;)",
    "insertText": "FPerInstanceLightmapData() : LightmapUVBias(ForceInit) , ShadowmapUVBias(ForceInit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FPerInstanceLightmapData& InstanceData)"
  },
  {
    "label": "FMeshMapBuildData()",
    "kind": "Method",
    "detail": "Function (Ar<<InstanceData . LightmapUVBias<<InstanceData . ShadowmapUVBias ; return Ar ; } } ; class FMeshMapBuildData { public : FLightMapRef LightMap ; FShadowMapRef ShadowMap ; TArray<FGuid> IrrelevantLights ; TArray<FPerInstanceLightmapData> PerInstanceLightmapData ; const FLightmapResourceCluster* ResourceCluster ;)",
    "insertText": "FMeshMapBuildData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FMeshMapBuildData& MeshMapBuildData)"
  },
  {
    "label": "IsDefault()",
    "kind": "Method",
    "detail": "Function (const FMeshMapBuildData DefaultAnnotation ; } ; class FMeshMapBuildLegacyData { public : TArray<TPair<FGuid,FMeshMapBuildData*>> Data ; bool)",
    "insertText": "IsDefault()"
  },
  {
    "label": "FStaticShadowDepthMapData()",
    "kind": "Method",
    "detail": "Function (} } ; class FStaticShadowDepthMapData { public : FMatrix WorldToLight ; int32 ShadowMapSizeX ; int32 ShadowMapSizeY ; TArray<FFloat16> DepthSamples ;)",
    "insertText": "FStaticShadowDepthMapData() : WorldToLight(FMatrix::Identity), ShadowMapSizeX(0), ShadowMapSizeY(0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FStaticShadowDepthMapData& ShadowMap)"
  },
  {
    "label": "FLevelLegacyMapBuildData()",
    "kind": "Method",
    "detail": "Function (} ; class FLevelLegacyMapBuildData { public : FGuid Id ; FPrecomputedLightVolumeData* Data ;)",
    "insertText": "FLevelLegacyMapBuildData() : Data(NULL)"
  },
  {
    "label": "FLightComponentMapBuildData()",
    "kind": "Method",
    "detail": "Function (} } ; class FLightComponentMapBuildData { public :)",
    "insertText": "FLightComponentMapBuildData() : ShadowMapChannel(INDEX_NONE)"
  },
  {
    "label": "FLightComponentMapBuildData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLightComponentMapBuildData()"
  },
  {
    "label": "FinalizeLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeLoad()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int32 ShadowMapChannel ; FStaticShadowDepthMapData DepthMap ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FLightComponentMapBuildData& ShadowMap)"
  },
  {
    "label": "FLightComponentLegacyMapBuildData()",
    "kind": "Method",
    "detail": "Function (} ; class FLightComponentLegacyMapBuildData { public : FGuid Id ; FLightComponentMapBuildData* Data ;)",
    "insertText": "FLightComponentLegacyMapBuildData() : Data(NULL)"
  },
  {
    "label": "FReflectionCaptureData()",
    "kind": "Method",
    "detail": "Function (} } ; class FReflectionCaptureData { public : int32 CubemapSize ; float AverageBrightness ; TArray<uint8> FullHDRCapturedData ; TArray<uint8> EncodedHDRCapturedData ;)",
    "insertText": "FReflectionCaptureData() : CubemapSize(0), AverageBrightness(0.0f), bUploadedFinal(false)"
  },
  {
    "label": "HasBeenUploadedFinal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasBeenUploadedFinal()"
  },
  {
    "label": "FReflectionCaptureMapBuildData()",
    "kind": "Method",
    "detail": "Function (CubemapSize = 0 ; bUploadedFinal = true ; } } private : bool bUploadedFinal ; } ; class FReflectionCaptureMapBuildData : public FReflectionCaptureData { public : size_t AllocatedSize ;)",
    "insertText": "FReflectionCaptureMapBuildData() : AllocatedSize(0)"
  },
  {
    "label": "FReflectionCaptureMapBuildData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FReflectionCaptureMapBuildData()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FReflectionCaptureMapBuildData& ReflectionCaptureMapBuildData)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ; class FSkyAtmosphereMapBuildData { public : bool bDummy = false ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(Category=Lighting, VisibleAnywhere)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "AllocateMeshBuildData()",
    "kind": "Method",
    "detail": "Function (FMeshMapBuildData&)",
    "insertText": "AllocateMeshBuildData(const FGuid& MeshId, bool bMarkDirty)"
  },
  {
    "label": "GetMeshBuildData()",
    "kind": "Method",
    "detail": "Function (const FMeshMapBuildData*)",
    "insertText": "GetMeshBuildData(FGuid MeshId)"
  },
  {
    "label": "GetMeshBuildDataDuringBuild()",
    "kind": "Method",
    "detail": "Function (FMeshMapBuildData*)",
    "insertText": "GetMeshBuildDataDuringBuild(FGuid MeshId)"
  },
  {
    "label": "AllocateLevelPrecomputedLightVolumeBuildData()",
    "kind": "Method",
    "detail": "Function (FPrecomputedLightVolumeData&)",
    "insertText": "AllocateLevelPrecomputedLightVolumeBuildData(const FGuid& LevelId)"
  },
  {
    "label": "AddLevelPrecomputedLightVolumeBuildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelPrecomputedLightVolumeBuildData(const FGuid& LevelId, FPrecomputedLightVolumeData* InData)"
  },
  {
    "label": "GetLevelPrecomputedLightVolumeBuildData()",
    "kind": "Method",
    "detail": "Function (const FPrecomputedLightVolumeData*)",
    "insertText": "GetLevelPrecomputedLightVolumeBuildData(FGuid LevelId)"
  },
  {
    "label": "AllocateLevelPrecomputedVolumetricLightmapBuildData()",
    "kind": "Method",
    "detail": "Function (FPrecomputedVolumetricLightmapData&)",
    "insertText": "AllocateLevelPrecomputedVolumetricLightmapBuildData(const FGuid& LevelId)"
  },
  {
    "label": "AddLevelPrecomputedVolumetricLightmapBuildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelPrecomputedVolumetricLightmapBuildData(const FGuid& LevelId, FPrecomputedVolumetricLightmapData* InData)"
  },
  {
    "label": "GetLevelPrecomputedVolumetricLightmapBuildData()",
    "kind": "Method",
    "detail": "Function (const FPrecomputedVolumetricLightmapData*)",
    "insertText": "GetLevelPrecomputedVolumetricLightmapBuildData(FGuid LevelId)"
  },
  {
    "label": "FindOrAllocateLightBuildData()",
    "kind": "Method",
    "detail": "Function (FLightComponentMapBuildData&)",
    "insertText": "FindOrAllocateLightBuildData(FGuid LightId, bool bMarkDirty)"
  },
  {
    "label": "GetLightBuildData()",
    "kind": "Method",
    "detail": "Function (const FLightComponentMapBuildData*)",
    "insertText": "GetLightBuildData(FGuid LightId)"
  },
  {
    "label": "AllocateReflectionCaptureBuildData()",
    "kind": "Method",
    "detail": "Function (FReflectionCaptureMapBuildData&)",
    "insertText": "AllocateReflectionCaptureBuildData(const FGuid& CaptureId, bool bMarkDirty)"
  },
  {
    "label": "GetReflectionCaptureBuildData()",
    "kind": "Method",
    "detail": "Function (const FReflectionCaptureMapBuildData*)",
    "insertText": "GetReflectionCaptureBuildData(FGuid CaptureId)"
  },
  {
    "label": "FindOrAllocateSkyAtmosphereBuildData()",
    "kind": "Method",
    "detail": "Function (FSkyAtmosphereMapBuildData&)",
    "insertText": "FindOrAllocateSkyAtmosphereBuildData(const FGuid& Guid)"
  },
  {
    "label": "GetSkyAtmosphereBuildData()",
    "kind": "Method",
    "detail": "Function (const FSkyAtmosphereMapBuildData*)",
    "insertText": "GetSkyAtmosphereBuildData(const FGuid& Guid)"
  },
  {
    "label": "ClearSkyAtmosphereBuildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSkyAtmosphereBuildData()"
  },
  {
    "label": "InvalidateStaticLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateStaticLighting(UWorld* World, bool bRecreateRenderState = true, const TSet<FGuid>* ResourcesToKeep = nullptr)"
  },
  {
    "label": "InvalidateSurfaceLightmaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateSurfaceLightmaps(UWorld* World, bool bRecreateRenderState = true, const TSet<FGuid>* ResourcesToKeep = nullptr)"
  },
  {
    "label": "InvalidateReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateReflectionCaptures(const TSet<FGuid>* ResourcesToKeep = nullptr)"
  },
  {
    "label": "IsLegacyBuildData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLegacyBuildData()"
  },
  {
    "label": "IsLightingValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightingValid(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "SetupLightmapResourceClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLightmapResourceClusters()"
  },
  {
    "label": "GetLightmapResourceClusterStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightmapResourceClusterStats(int32& NumMeshes, int32& NumClusters)"
  },
  {
    "label": "InitializeClusterRenderingResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeClusterRenderingResources(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "HandleLegacyEncodedCubemapData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLegacyEncodedCubemapData()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UMapBuildDataRegistry*)",
    "insertText": "Get(const UActorComponent* Component)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UMapBuildDataRegistry*)",
    "insertText": "Get(const AActor* Actor)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UMapBuildDataRegistry*)",
    "insertText": "Get(ULevel* OwnerLevel, UWorld* World)"
  },
  {
    "label": "GetVolumetricLightMapGridDesc()",
    "kind": "Method",
    "detail": "Function (FVolumetricLightMapGridDesc*)",
    "insertText": "GetVolumetricLightMapGridDesc()"
  },
  {
    "label": "RedirectToRegistry()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RedirectToRegistry(TArray<FGuid>& ActorInstances, UMapBuildDataRegistry* Registry)"
  },
  {
    "label": "RemoveRedirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedirect(TArray<FGuid>& ActorInstances, UMapBuildDataRegistry* Registry)"
  },
  {
    "label": "RemoveRegistry()",
    "kind": "Method",
    "detail": "Function (# else void)",
    "insertText": "RemoveRegistry(UMapBuildDataRegistry* Registry)"
  },
  {
    "label": "HandleAssetPostCompileEvent()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_EDITOR void)",
    "insertText": "HandleAssetPostCompileEvent(const TArray<FAssetCompileData>& CompiledAssets)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ReleaseResources(const TSet<FGuid>* ResourcesToKeep = nullptr)"
  },
  {
    "label": "EmptyLevelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyLevelData(const TSet<FGuid>* ResourcesToKeep = nullptr)"
  },
  {
    "label": "CleanupTransientOverrideMapBuildData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupTransientOverrideMapBuildData()"
  },
  {
    "label": "FindRegistryWorldPartition()",
    "kind": "Method",
    "detail": "Function (TMap<FGuid,FMeshMapBuildData> MeshBuildData ; TMap<FGuid,FPrecomputedLightVolumeData*> LevelPrecomputedLightVolumeBuildData ; TMap<FGuid,FPrecomputedVolumetricLightmapData*> LevelPrecomputedVolumetricLightmapBuildData ; TMap<FGuid,FLightComponentMapBuildData> LightBuildData ; TMap<FGuid,FReflectionCaptureMapBuildData> ReflectionCaptureBuildData ; TMap<FGuid,FSkyAtmosphereMapBuildData> SkyAtmosphereBuildData ; bool bSetupResourceClusters ; TArray<FLightmapResourceCluster> LightmapResourceClusters ; FRenderCommandFence DestroyFence ; FVolumetricLightMapGridDesc* VolumetricLightMapGridDesc ; UMapBuildDataRegistry*)",
    "insertText": "FindRegistryWorldPartition(const AActor* Actor)"
  }
]