[
  {
    "label": "FWriteLogBumpAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWriteLogBumpAllocator"
  },
  {
    "label": "FPage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPage"
  },
  {
    "label": "FWriteLogBumpAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Stats . h \" # include \" Utils . h \" namespace AutoRTFM { class FWriteLogBumpAllocator final { public : size_t MaxSize = 1 2 8 ;)",
    "insertText": "FWriteLogBumpAllocator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FWriteLogBumpAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWriteLogBumpAllocator(const FWriteLogBumpAllocator&)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Allocate(size_t Bytes)"
  },
  {
    "label": "ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT(Bytes <= MaxSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StatTotalSize + = Bytes ;)",
    "insertText": "if(nullptr == Start)"
  },
  {
    "label": "FPage()",
    "kind": "Method",
    "detail": "Function (Start = new)",
    "insertText": "FPage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Current = Start ; })",
    "insertText": "if(Bytes <= (MaxSize - Current->Size))"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (Current = Current -> Next ; return)",
    "insertText": "Allocate(Bytes)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FPage* Page = Start ;)",
    "insertText": "while(nullptr != Page)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (FPage* const Next = Page -> Next ; delete Page ; Page = Next ; } Start = nullptr ; Current = nullptr ; } void)",
    "insertText": "Merge(FWriteLogBumpAllocator&& Other)"
  }
]