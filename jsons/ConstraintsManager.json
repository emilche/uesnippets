[
  {
    "label": "UTickableConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableConstraint"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "FConstraintTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintTickFunction"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UTickableConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableConstraint"
  },
  {
    "label": "UConstraintsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UConstraintsManager"
  },
  {
    "label": "AConstraintsActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AConstraintsActor"
  },
  {
    "label": "FConstraintsManagerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintsManagerController"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConstraintsManagerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintsManagerController"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FConstraintTickFunction()",
    "kind": "Method",
    "detail": "Function (CONSTRAINTS_API)",
    "insertText": "FConstraintTickFunction()"
  },
  {
    "label": "FConstraintTickFunction()",
    "kind": "Method",
    "detail": "Function (CONSTRAINTS_API)",
    "insertText": "FConstraintTickFunction(const FConstraintTickFunction& In)"
  },
  {
    "label": "RegisterFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFunction(ConstraintFunction InConstraint)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(GetFunction, return {};)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(IsValid, return false;)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(const bool bIsActive)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(HasBoundObjects, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(GetTargetHash, return 0;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(ReferencesObject, return false;)"
  },
  {
    "label": "UConstraintsManager()",
    "kind": "Method",
    "detail": "Function (CONSTRAINTS_API)",
    "insertText": "UConstraintsManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(UWorld* InWorld)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(UWorld* World)"
  },
  {
    "label": "OnActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorDestroyed(AActor* InActor)"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates(UWorld* World)"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDelegates(UWorld* World)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveConstraint(const int32 InConstraintIndex, bool bDoNotCompensate = false)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveConstraint(UTickableConstraint* InConstraint, bool bDoNotCompensate = false)"
  },
  {
    "label": "RemoveAllConstraints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAllConstraints(bool bDoNotCompensate = false)"
  },
  {
    "label": "DoesExistInAnyWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesExistInAnyWorld(UTickableConstraint* InConstraint)"
  },
  {
    "label": "StaticConstraintCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticConstraintCreated(UWorld* InWorld, UTickableConstraint* InConstraint)"
  }
]