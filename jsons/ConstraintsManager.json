[
  {
    "label": "UTickableConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTickableConstraint"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "FConstraintTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstraintTickFunction"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UConstraintsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UConstraintsManager"
  },
  {
    "label": "AConstraintsActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AConstraintsActor"
  },
  {
    "label": "FConstraintsManagerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstraintsManagerController"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" UObject / Object . h \" # include \" Engine / EngineBaseTypes . h \" # include \" MovieSceneSequenceID . h \" # include \" Misc / Guid . h \" # include \" Engine / Level . h \" # include \" ConstraintsManager . generated . h \" class UTickableConstraint ; namespace UE::MovieScene { struct FSharedPlaybackState ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: CONSTRAINTS_API FConstraintTickFunction()"
  },
  {
    "label": "FConstraintTickFunction()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FConstraintTickFunction()"
  },
  {
    "label": "FConstraintTickFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConstraintTickFunction(const FConstraintTickFunction& In)"
  },
  {
    "label": "ExecuteTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTick(float DeltaTime, ELevelTick TickType, ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "DiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DiagnosticMessage()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ConstraintFunction = TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "RegisterFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFunction(ConstraintFunction InConstraint)"
  },
  {
    "label": "EvaluateFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateFunctions()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UTickableConstraint> Constraint ; TArray<ConstraintFunction> ConstraintFunctions ; } ; template<> struct TStructOpsTypeTraits<FConstraintTickFunction> : public TStructOpsTypeTraitsBase2<FConstraintTickFunction> { enum { WithCopy = false } ; } ;)",
    "insertText": "UCLASS(Abstract, Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UTickableConstraint()"
  },
  {
    "label": "UTickableConstraint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "UTickableConstraint()"
  },
  {
    "label": "GetFunction()",
    "kind": "Method",
    "detail": "Function (} FConstraintTickFunction::ConstraintFunction)",
    "insertText": "GetFunction() const PURE_VIRTUAL(GetFunction, return {};)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate(bool bTickHandlesAlso = false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(const bool bDeepCheck = true) const PURE_VIRTUAL(IsValid, return false;)"
  },
  {
    "label": "SetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActive(const bool bIsActive)"
  },
  {
    "label": "IsFullyActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyActive()"
  },
  {
    "label": "HasBoundObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBoundObjects() const PURE_VIRTUAL(HasBoundObjects, return false;)"
  },
  {
    "label": "ResolveBoundObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveBoundObjects(FMovieSceneSequenceID LocalSequenceID, TSharedRef<UE::MovieScene::FSharedPlaybackState> SharedPlaybackState, UObject* SubObject = nullptr) PURE_VIRTUAL(ResolveBoundObjects)"
  },
  {
    "label": "GetTargetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTargetHash() const PURE_VIRTUAL(GetTargetHash, return 0;)"
  },
  {
    "label": "ReferencesObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReferencesObject(TWeakObjectPtr<UObject> InObject) const PURE_VIRTUAL(ReferencesObject, return false;)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (UTickableConstraint*)",
    "insertText": "Duplicate(UObject* NewOuter)"
  },
  {
    "label": "InitConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitConstraint(UWorld * InWorld) PURE_VIRTUAL(UTickableConstraint::InitConstraint)"
  },
  {
    "label": "TeardownConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownConstraint(UWorld* InWorld) PURE_VIRTUAL(UTickableConstraint::DeInitConstraint)"
  },
  {
    "label": "AddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddedToWorld(UWorld* InWorld) PURE_VIRTUAL(UTickableConstraint::AddedToWorld)"
  },
  {
    "label": "GetTickFunction()",
    "kind": "Method",
    "detail": "Function (FConstraintTickFunction&)",
    "insertText": "GetTickFunction(UWorld* InWorld)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FString)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetFullLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullLabel()"
  },
  {
    "label": "GetTypeLabel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTypeLabel()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FGuid ConstraintID ; protected : TMap<TWeakObjectPtr<ULevel>,FConstraintTickFunction> ConstraintTicks ; } ;)",
    "insertText": "UCLASS(BLUEPRINTABLE, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_TwoParams(FOnConstraintAdded, UConstraintsManager, OnConstraintAdded_BP, UConstraintsManager*, Mananger, UTickableConstraint*, Constraint)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_SPARSE_DELEGATE_ThreeParams(FOnConstraintRemoved, UConstraintsManager, OnConstraintRemoved_BP, UConstraintsManager*, Mananger, UTickableConstraint*, Constraint, bool, bDoNotCompensate)"
  },
  {
    "label": "UConstraintsManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UConstraintsManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(UWorld* InWorld)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(UWorld* World)"
  },
  {
    "label": "RemoveStaticConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStaticConstraint(UTickableConstraint* InConstraint)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Constraints .)",
    "insertText": "Remove(InConstraint)"
  },
  {
    "label": "IsStaticConstraint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStaticConstraint(UTickableConstraint* InConstraint)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} UConstraintsManager*)",
    "insertText": "Find(const UWorld* InWorld)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (private : UConstraintsManager*)",
    "insertText": "Get(UWorld* InWorld)"
  },
  {
    "label": "OnActorDestroyed()",
    "kind": "Method",
    "detail": "Function (private : FDelegateHandle OnActorDestroyedHandle ; void)",
    "insertText": "OnActorDestroyed(AActor* InActor)"
  },
  {
    "label": "RegisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelegates(UWorld* World)"
  },
  {
    "label": "UnregisterDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterDelegates(UWorld* World)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (class AConstraintsActor ; class FConstraintsManagerController ; } ; enum class EConstraintsManagerNotifyType { ConstraintAdded,ConstraintRemoved,ConstraintRemovedWithCompensation,ManagerUpdated,} ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FConstraintsManagerNotifyDelegate, EConstraintsManagerNotifyType , UObject*)"
  },
  {
    "label": "AllocateConstraintT()",
    "kind": "Method",
    "detail": "Function (template<TConstraint> TConstraint*)",
    "insertText": "AllocateConstraintT(const FName& InBaseName, const bool bUseDefault = false)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddConstraint(UTickableConstraint* InConstraint)"
  },
  {
    "label": "AddConstraintFromCopy()",
    "kind": "Method",
    "detail": "Function (UTickableConstraint*)",
    "insertText": "AddConstraintFromCopy(UTickableConstraint* CopyOfConstraint)"
  },
  {
    "label": "GetConstraintIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConstraintIndex(const FGuid& InGuid)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveConstraint(const int32 InConstraintIndex, bool bDoNotCompensate = false)"
  },
  {
    "label": "RemoveConstraint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveConstraint(UTickableConstraint* InConstraint, bool bDoNotCompensate = false)"
  },
  {
    "label": "RemoveAllConstraints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveAllConstraints(bool bDoNotCompensate = false)"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (UTickableConstraint*)",
    "insertText": "GetConstraint(const FGuid& InGuid)"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (UTickableConstraint*)",
    "insertText": "GetConstraint(const int32 InConstraintIndex)"
  },
  {
    "label": "GetConstraintsArray()",
    "kind": "Method",
    "detail": "Function (const TArray<TWeakObjectPtr<UTickableConstraint>>&)",
    "insertText": "GetConstraintsArray()"
  },
  {
    "label": "GetAllConstraints()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakObjectPtr<UTickableConstraint>>)",
    "insertText": "GetAllConstraints(const bool bSorted = false)"
  },
  {
    "label": "GetStaticConstraints()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakObjectPtr<UTickableConstraint>>)",
    "insertText": "GetStaticConstraints(const bool bSorted = false)"
  },
  {
    "label": "GetConstraintsByPredicate()",
    "kind": "Method",
    "detail": "Function (template<Predicate> TArray<TWeakObjectPtr<UTickableConstraint>>)",
    "insertText": "GetConstraintsByPredicate(Predicate Pred, const bool bSorted = false)"
  },
  {
    "label": "GetParentConstraints()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakObjectPtr<UTickableConstraint>>)",
    "insertText": "GetParentConstraints(const uint32 InTargetHash, const bool bSorted = false)"
  },
  {
    "label": "SetConstraintsDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintsDependencies(const FName& InNameToTickBefore, const FName& InNameToTickAfter)"
  },
  {
    "label": "SetConstraintsDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConstraintsDependencies(const struct FGuid& InGuidToTickBefore, const struct FGuid& InGuidToTickAfter)"
  },
  {
    "label": "EvaluateAllConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateAllConstraints()"
  },
  {
    "label": "DoesExistInAnyWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesExistInAnyWorld(UTickableConstraint* InConstraint)"
  },
  {
    "label": "StaticConstraintCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticConstraintCreated(UWorld* InWorld, UTickableConstraint* InConstraint)"
  },
  {
    "label": "GetConstraintIndex()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "GetConstraintIndex(const FName& InConstraintName)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSceneComponentConstrained, USceneComponent*)"
  },
  {
    "label": "GetManager()",
    "kind": "Method",
    "detail": "Function (FOnSceneComponentConstrained SceneComponentConstrained ; FConstraintsManagerNotifyDelegate NotifyDelegate ; UConstraintsManager*)",
    "insertText": "GetManager()"
  },
  {
    "label": "FindManager()",
    "kind": "Method",
    "detail": "Function (UConstraintsManager*)",
    "insertText": "FindManager()"
  },
  {
    "label": "DestroyManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyManager()"
  },
  {
    "label": "OnSceneComponentConstrained()",
    "kind": "Method",
    "detail": "Function (UWorld* World = nullptr ; public : FOnSceneComponentConstrained&)",
    "insertText": "OnSceneComponentConstrained()"
  },
  {
    "label": "MarkConstraintForEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkConstraintForEvaluation(UTickableConstraint* InConstraint)"
  },
  {
    "label": "InvalidateEvaluationGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateEvaluationGraph()"
  },
  {
    "label": "FlushEvaluationGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushEvaluationGraph()"
  }
]