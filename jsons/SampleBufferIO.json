[
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FSoundWavePCMLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWavePCMLoader"
  },
  {
    "label": "FLoadingSoundWaveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadingSoundWaveInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAsyncSoundWavePCMWriteWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncSoundWavePCMWriteWorker"
  },
  {
    "label": "FSoundWavePCMWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWavePCMWriter"
  },
  {
    "label": "FAudioRecordingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioRecordingData"
  },
  {
    "label": "FSoundWavePCMLoader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SampleBuffer . h \" # include \" Misc / Paths . h \" # include \" Sound / SoundEffectBase . h \" # include \" Async / AsyncWork . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / GCObject . h \" # include \" Tickable . h \" class USoundWave ; class FAudioDevice ; namespace Audio { class FSoundWavePCMLoader : public FGCObject { public :)",
    "insertText": "FSoundWavePCMLoader()"
  },
  {
    "label": "LoadSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSoundWave(USoundWave* InSoundWave, TFunction<void(const USoundWave* SoundWave, const Audio::FSampleBuffer& OutSampleBuffer)> OnLoaded, bool bSynchrounous = false)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : struct FLoadingSoundWaveInfo { TObjectPtr<USoundWave> SoundWave ; TFunction<)",
    "insertText": "void(const USoundWave* SoundWave, const Audio::FSampleBuffer& LoadedSampleBuffer)"
  },
  {
    "label": "FLoadingSoundWaveInfo()",
    "kind": "Method",
    "detail": "Function (enum class LoadStatus : uint8 { None = 0,Loading,Loaded,} ; LoadStatus Status ;)",
    "insertText": "FLoadingSoundWaveInfo() : SoundWave(nullptr) , Status(LoadStatus::None)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FLoadingSoundWaveInfo> LoadingSoundWaves ; bool bCanBeTicked ; } ; enum class ESoundWavePCMWriterState : uint8 { Idle,Generating,WritingToDisk,Suceeded,Failed,Cancelled } ; enum class ESoundWavePCMWriteTaskType : uint8 { GenerateSoundWave,GenerateAndWriteSoundWave,WriteSoundWave,WriteWavFile } ; class FAsyncSoundWavePCMWriteWorker : public FNonAbandonableTask { protected : class FSoundWavePCMWriter* Writer ; ESoundWavePCMWriteTaskType TaskType ; FCriticalSection NonAbandonableSection ; TFunction<)",
    "insertText": "void(const USoundWave*)"
  },
  {
    "label": "FAsyncSoundWavePCMWriteWorker()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAsyncSoundWavePCMWriteWorker(FSoundWavePCMWriter* InWriter, ESoundWavePCMWriteTaskType InTaskType, TFunction<void(const USoundWave*)> OnSuccess)"
  },
  {
    "label": "FAsyncSoundWavePCMWriteWorker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncSoundWavePCMWriteWorker()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "CanAbandon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAbandon()"
  },
  {
    "label": "FSoundWavePCMWriter()",
    "kind": "Method",
    "detail": "Function (} } ; typedef FAsyncTask<FAsyncSoundWavePCMWriteWorker> FAsyncSoundWavePCMWriterTask ; const int32 WriterDefaultChunkSize = 8 1 9 2 ; class FSoundWavePCMWriter { public : class FAsyncSoundWavePCMWriteWorker ;)",
    "insertText": "FSoundWavePCMWriter(int32 InChunkSize = WriterDefaultChunkSize)"
  },
  {
    "label": "FSoundWavePCMWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSoundWavePCMWriter()"
  },
  {
    "label": "BeginGeneratingSoundWaveFromBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginGeneratingSoundWaveFromBuffer(const TSampleBuffer<>& InSampleBuffer, USoundWave* InSoundWave = nullptr, TFunction<void(const USoundWave*)> OnSuccess = [](const USoundWave* ResultingWave){})"
  },
  {
    "label": "BeginWriteToSoundWave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginWriteToSoundWave(const FString& FileName, const TSampleBuffer<>& InSampleBuffer, FString InPath, TFunction<void(const USoundWave*)> OnSuccess = [](const USoundWave* ResultingWave) {})"
  },
  {
    "label": "BeginWriteToWavFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginWriteToWavFile(const TSampleBuffer<>& InSampleBuffer, const FString& FileName, const FString& FilePath, TFunction<void()> OnSuccess = []() {})"
  },
  {
    "label": "SynchronouslyWriteSoundWave()",
    "kind": "Method",
    "detail": "Function (USoundWave*)",
    "insertText": "SynchronouslyWriteSoundWave(const TSampleBuffer<>& InSampleBuffer, const FString* FileName = nullptr, const FString* FilePath = nullptr)"
  },
  {
    "label": "SynchronouslyWriteToWavFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SynchronouslyWriteToWavFile(const TSampleBuffer<>& InSampleBuffer, const FString& FileName, const FString& FilePath, FString* OutFilePathName = nullptr)"
  },
  {
    "label": "CheckStatus()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CheckStatus(ESoundWavePCMWriterState* OutCurrentState = nullptr)"
  },
  {
    "label": "CancelWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelWrite()"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDone()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFinishedSoundWave()",
    "kind": "Method",
    "detail": "Function (USoundWave*)",
    "insertText": "GetFinishedSoundWave()"
  },
  {
    "label": "SaveFinishedSoundWaveToPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveFinishedSoundWaveToPath(const FString& FileName, FString InPath = FPaths::EngineContentDir())"
  },
  {
    "label": "ApplyBufferToSoundWave()",
    "kind": "Method",
    "detail": "Function (private : TSampleBuffer<> CurrentBuffer ; USoundWave* CurrentSoundWave ; ESoundWavePCMWriterState CurrentState ; FString AbsoluteFilePath ; bool bWasPreviouslyAddedToRoot ; TUniquePtr<FAsyncSoundWavePCMWriterTask> CurrentOperation ; TArray<uint8> SerializedWavData ; FThreadSafeCounter Progress ; int32 ChunkSize ; UPackage* CurrentPackage ; private : void)",
    "insertText": "ApplyBufferToSoundWave()"
  },
  {
    "label": "SerializeSoundWaveToAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeSoundWaveToAsset()"
  },
  {
    "label": "SerializeBufferToWavFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBufferToWavFile()"
  },
  {
    "label": "CreateDirectoryIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoryIfNeeded(FString& DirectoryPath)"
  },
  {
    "label": "PrepWavFileOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepWavFileOutput(const TSampleBuffer<>& InSampleBuffer, const FString& FileName, const FString& FilePath)"
  },
  {
    "label": "FAudioRecordingData()",
    "kind": "Method",
    "detail": "Function (} ; struct FAudioRecordingData { TSampleBuffer<int16> InputBuffer ; FSoundWavePCMWriter Writer ; ~)",
    "insertText": "FAudioRecordingData()"
  }
]