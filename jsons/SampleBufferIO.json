[
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "loads",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "loads"
  },
  {
    "label": "FSoundWavePCMLoader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWavePCMLoader"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "FLoadingSoundWaveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadingSoundWaveInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FAsyncSoundWavePCMWriteWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncSoundWavePCMWriteWorker"
  },
  {
    "label": "FSoundWavePCMWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWavePCMWriter"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "uses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uses"
  },
  {
    "label": "FSoundWavePCMWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWavePCMWriter"
  },
  {
    "label": "FAsyncSoundWavePCMWriteWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncSoundWavePCMWriteWorker"
  },
  {
    "label": "FAudioRecordingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioRecordingData"
  },
  {
    "label": "FSoundWavePCMLoader()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSoundWavePCMLoader()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abandon()"
  },
  {
    "label": "FSoundWavePCMWriter()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FSoundWavePCMWriter(int32 InChunkSize = WriterDefaultChunkSize)"
  },
  {
    "label": "SynchronouslyWriteToWavFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SynchronouslyWriteToWavFile(const TSampleBuffer<>& InSampleBuffer, const FString& FileName, const FString& FilePath, FString* OutFilePathName = nullptr)"
  },
  {
    "label": "CheckStatus()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CheckStatus(ESoundWavePCMWriterState* OutCurrentState = nullptr)"
  },
  {
    "label": "CancelWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelWrite()"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDone()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ApplyBufferToSoundWave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBufferToSoundWave()"
  },
  {
    "label": "SerializeSoundWaveToAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeSoundWaveToAsset()"
  },
  {
    "label": "SerializeBufferToWavFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBufferToWavFile()"
  },
  {
    "label": "CreateDirectoryIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoryIfNeeded(FString& DirectoryPath)"
  },
  {
    "label": "PrepWavFileOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepWavFileOutput(const TSampleBuffer<>& InSampleBuffer, const FString& FileName, const FString& FilePath)"
  }
]