[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "__wrap_iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__wrap_iter"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Alloc"
  },
  {
    "label": "basic_string",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "basic_string"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "_It",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_It"
  },
  {
    "label": "__is_cpp17_contiguous_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_cpp17_contiguous_iterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_WRAP_ITER_H # define _LIBCPP___ITERATOR_WRAP_ITER_H # include<__config> # include<__debug> # include<__iterator / iterator_traits . h> # include<__memory / addressof . h> # include<__memory / pointer_traits . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__wrap_iter()",
    "kind": "Method",
    "detail": "Function (public : typedef _Iter iterator_type ; typedef iterator_traits<iterator_type>::value_type value_type ; typedef iterator_traits<iterator_type>::difference_type difference_type ; typedef iterator_traits<iterator_type>::pointer pointer ; typedef iterator_traits<iterator_type>::reference reference ; typedef iterator_traits<iterator_type>::iterator_category iterator_category ; # if _LIBCPP_STD_VER> 1 7 typedef contiguous_iterator_tag iterator_concept ; # endif private : iterator_type __i ; public : _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "__wrap_iter() _NOEXCEPT : __i()"
  },
  {
    "label": "__debug_db_insert_i()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__debug_db_insert_i(this)"
  },
  {
    "label": "__wrap_iter()",
    "kind": "Method",
    "detail": "Function (} template<class _Up> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "__wrap_iter(const __wrap_iter<_Up>& __u, typename enable_if<is_convertible<_Up, iterator_type>::value>::type* = nullptr) _NOEXCEPT : __i(__u.base())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef _LIBCPP_ENABLE_DEBUG_MODE)",
    "insertText": "if(!__libcpp_is_constant_evaluated()) __get_db()->__iterator_copy(this, _VSTD::addressof(__u))"
  },
  {
    "label": "__wrap_iter()",
    "kind": "Method",
    "detail": "Function (# endif } # ifdef _LIBCPP_ENABLE_DEBUG_MODE _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "__wrap_iter(const __wrap_iter& __x) : __i(__x.base())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __wrap_iter&)",
    "insertText": "operator(const __wrap_iter& __x)"
  },
  {
    "label": "__wrap_iter()",
    "kind": "Method",
    "detail": "Function (__i = __x . __i ; } return* this ; } _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 ~)",
    "insertText": "__wrap_iter()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 reference)",
    "insertText": "operator()"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this), \"Attempted to dereference a non-dereferenceable iterator\")"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(__get_const_db()->__dereferenceable(this), \"Attempted to increment a non-incrementable iterator\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __i ; return* this ; } _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __wrap_iter)",
    "insertText": "operator(int)"
  },
  {
    "label": "__tmp()",
    "kind": "Method",
    "detail": "Function (__wrap_iter)",
    "insertText": "__tmp(*this)"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(__get_const_db()->__decrementable(this), \"Attempted to decrement a non-decrementable iterator\")"
  },
  {
    "label": "__w()",
    "kind": "Method",
    "detail": "Function (__wrap_iter)",
    "insertText": "__w(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__w + = __n ; return __w ; } _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __wrap_iter&)",
    "insertText": "operator(difference_type __n)"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(__get_const_db()->__addable(this, __n), \"Attempted to add/subtract an iterator outside its valid range\")"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(__get_const_db()->__subscriptable(this, __n), \"Attempted to subscript an iterator outside its valid range\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef _LIBCPP_ENABLE_DEBUG_MODE)",
    "insertText": "if(!__libcpp_is_constant_evaluated()) __get_db()->__insert_ic(this, __p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } template<class _Up> class __wrap_iter ; template<class _CharT,class _Traits,class _Alloc> class basic_string ; template<class _Tp,class _Alloc> class _LIBCPP_TEMPLATE_VIS vector ; template<class _Tp,size_t> class _LIBCPP_TEMPLATE_VIS span ; } ; template<class _Iter1> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bool)",
    "insertText": "operator(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter1>& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter1,class _Iter2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bool)",
    "insertText": "operator(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y)"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(__get_const_db()->__less_than_comparable(_VSTD::addressof(__x), _VSTD::addressof(__y)), \"Attempted to compare incomparable iterators\")"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(__get_const_db()->__less_than_comparable(&__x, &__y), \"Attempted to compare incomparable iterators\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter1,class _Iter2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 # ifndef _LIBCPP_CXX03_LANG auto)",
    "insertText": "operator(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y) _NOEXCEPT -> decltype(__x.base() - __y.base()) #else typename __wrap_iter<_Iter1>::difference_type operator-(const __wrap_iter<_Iter1>& __x, const __wrap_iter<_Iter2>& __y)"
  },
  {
    "label": "_LIBCPP_DEBUG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_DEBUG_ASSERT(__get_const_db()->__less_than_comparable(_VSTD::addressof(__x), _VSTD::addressof(__y)), \"Attempted to subtract incompatible iterators\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter1> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 __wrap_iter<_Iter1>)",
    "insertText": "operator(typename __wrap_iter<_Iter1>::difference_type __n, __wrap_iter<_Iter1> __x)"
  },
  {
    "label": "to_address()",
    "kind": "Method",
    "detail": "Function (__x + = __n ; return __x ; } # if _LIBCPP_STD_VER<= 1 7 template<class _It> struct __is_cpp17_contiguous_iterator<__wrap_iter<_It>> : true_type { } ; # endif template<class _It> struct _LIBCPP_TEMPLATE_VIS pointer_traits<__wrap_iter<_It>> { typedef __wrap_iter<_It> pointer ; typedef pointer_traits<_It>::element_type element_type ; typedef pointer_traits<_It>::difference_type difference_type ; _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR element_type*)",
    "insertText": "to_address(pointer __w)"
  }
]