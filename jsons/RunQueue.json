[
  {
    "label": "RunQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RunQueue"
  },
  {
    "label": "Elem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elem"
  },
  {
    "label": "RunQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_THREADPOOL_RUNQUEUE_H_ # define EIGEN_CXX11_THREADPOOL_RUNQUEUE_H_ namespace Eigen { template<Work,unsigned kSize> class RunQueue { public :)",
    "insertText": "RunQueue() : front_(0), back_(0)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert((kSize & (kSize - 1)) == 0)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(kSize > 2)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(kSize <= (64 << 10))"
  },
  {
    "label": "RunQueue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RunQueue()"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(Size() == 0)"
  },
  {
    "label": "PushFront()",
    "kind": "Method",
    "detail": "Function (} Work)",
    "insertText": "PushFront(Work w)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (unsigned front = front_ .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (front_ .)",
    "insertText": "store(front + 1 + (kSize << 1), std::memory_order_relaxed)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (e -> w =)",
    "insertText": "move(w)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (e -> state .)",
    "insertText": "store(kReady, std::memory_order_release)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (} Work)",
    "insertText": "PopFront()"
  },
  {
    "label": "array_()",
    "kind": "Method",
    "detail": "Function (Elem* e =&)",
    "insertText": "array_(front - 1)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Work w =)",
    "insertText": "move(e->w)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (e -> state .)",
    "insertText": "store(kEmpty, std::memory_order_release)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "front((front - 1) & kMask2) | (front & ~kMask2)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (front_ .)",
    "insertText": "store(front, std::memory_order_relaxed)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (std::unique_lock<std::mutex>)",
    "insertText": "lock(mutex_)"
  },
  {
    "label": "array_()",
    "kind": "Method",
    "detail": "Function (Elem* e =&)",
    "insertText": "array_(back - 1)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "back((back - 1) & kMask2) | (back & ~kMask2)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (back_ .)",
    "insertText": "store(back, std::memory_order_relaxed)"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (} Work)",
    "insertText": "PopBack()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (back_ .)",
    "insertText": "store(back + 1 + (kSize << 1), std::memory_order_relaxed)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (unsigned size =)",
    "insertText": "Size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned mid = back ;)",
    "insertText": "if(size > 1) mid = back + (size - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned n = 0 ; unsigned start = 0 ;)",
    "insertText": "for(; static_cast<int>(mid - back) >= 0; mid--)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (start = mid ; } else {)",
    "insertText": "eigen_plain_assert(s == kReady)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} result ->)",
    "insertText": "push_back(std::move(e->w))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (n + + ; })",
    "insertText": "if(n != 0) back_.store(start + 1 + (kSize << 1), std::memory_order_relaxed)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Empty()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush()"
  },
  {
    "label": "kMask2()",
    "kind": "Method",
    "detail": "Function (} } private : const unsigned kMask = kSize - 1 ; const unsigned)",
    "insertText": "kMask2(kSize << 1)"
  },
  {
    "label": "SizeOrNotEmpty()",
    "kind": "Method",
    "detail": "Function (struct Elem { std::atomic<uint8_t> state ; Work w ; } ; enum { kEmpty,kBusy,kReady,} ; std::mutex mutex_ ; std::atomic<unsigned> front_ ; std::atomic<unsigned> back_ ; Elem array_ [ kSize ] ; template<bool NeedSizeEstimate> unsigned)",
    "insertText": "SizeOrNotEmpty()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (unsigned front = front_ .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (front = front1 ;)",
    "insertText": "atomic_thread_fence(std::memory_order_acquire)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(NeedSizeEstimate)"
  },
  {
    "label": "maybe_zero()",
    "kind": "Method",
    "detail": "Function (} else { unsigned)",
    "insertText": "maybe_zero((front ^ back) & kMask2)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((CalculateSize(front, back) == 0) == (maybe_zero == 0))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "size(front & kMask2) - (back & kMask2)"
  },
  {
    "label": "RunQueue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RunQueue(const RunQueue&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const RunQueue&)"
  }
]