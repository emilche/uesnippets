[
  {
    "label": "UVerseStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVerseStruct"
  },
  {
    "label": "VPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VPackage"
  },
  {
    "label": "VTupleType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTupleType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VPropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VPropertyType"
  },
  {
    "label": "VIntPropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VIntPropertyType"
  },
  {
    "label": "VFloatPropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VFloatPropertyType"
  },
  {
    "label": "VTypePropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTypePropertyType"
  },
  {
    "label": "VClassPropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VClassPropertyType"
  },
  {
    "label": "VTuplePropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTuplePropertyType"
  },
  {
    "label": "VWrappedPropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VWrappedPropertyType"
  },
  {
    "label": "VArrayPropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VArrayPropertyType"
  },
  {
    "label": "VMapPropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VMapPropertyType"
  },
  {
    "label": "VInterfacePropertyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VInterfacePropertyType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (namespace Verse { struct VPackage ; struct VTupleType ; enum class EPropertyType : uint8 { False,True,Void,Any,Comparable,Logic,Int,Rational,Float,Char8,Char32,Range,Type,Class,Enumeration,Array,Generator,Map,Pointer,Reference,Option,Interface,Tuple,Function,Variable,Named,Persistable,Unknown,Module,Path,} ; struct VPropertyType : VCell {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VCell)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VPropertyType&)",
    "insertText": "New(FAllocationContext Context, EPropertyType PropertyType)"
  },
  {
    "label": "VPropertyType()",
    "kind": "Method",
    "detail": "Function (} EPropertyType PropertyType ; protected :)",
    "insertText": "VPropertyType(FAllocationContext Context, EPropertyType InPropertyType, const VEmergentType* EmergentType) : VCell(Context, EmergentType) , PropertyType(InPropertyType)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (} } ; struct VIntPropertyType final : VPropertyType {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VPropertyType)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VIntPropertyType&)",
    "insertText": "New(FAllocationContext Context, int64 ClampMin, int64 ClampMax)"
  },
  {
    "label": "VIntPropertyType()",
    "kind": "Method",
    "detail": "Function (} int64 ClampMin ; int64 ClampMax ; protected :)",
    "insertText": "VIntPropertyType(FAllocationContext Context, int64 InClampMin, int64 InClampMax) : VPropertyType(Context, EPropertyType::Int, &GlobalTrivialEmergentType.Get(Context)) , ClampMin(InClampMin) , ClampMax(InClampMax)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VFloatPropertyType&)",
    "insertText": "New(FAllocationContext Context, double ClampMin, double ClampMax)"
  },
  {
    "label": "VFloatPropertyType()",
    "kind": "Method",
    "detail": "Function (} double ClampMin ; double ClampMax ; protected :)",
    "insertText": "VFloatPropertyType(FAllocationContext Context, double InClampMin, double InClampMax) : VPropertyType(Context, EPropertyType::Float, &GlobalTrivialEmergentType.Get(Context)) , ClampMin(InClampMin) , ClampMax(InClampMax)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VTypePropertyType&)",
    "insertText": "New(FAllocationContext Context, bool bIsAbstract, VUniqueString& PackageName, VUniqueString& ClassName)"
  },
  {
    "label": "VTypePropertyType()",
    "kind": "Method",
    "detail": "Function (} bool bIsAbstract ; TWriteBarrier<VUniqueString> PackageName ; TWriteBarrier<VUniqueString> ClassName ; protected :)",
    "insertText": "VTypePropertyType(FAllocationContext Context, bool bInIsAbstract, VUniqueString& InPackageName, VUniqueString& InClassName) : VPropertyType(Context, EPropertyType::Type, &GlobalTrivialEmergentType.Get(Context)) , bIsAbstract(bInIsAbstract) , PackageName(Context, InPackageName) , ClassName(Context, InClassName)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VClassPropertyType&)",
    "insertText": "New(FAllocationContext Context, bool bIsStruct, VValue ClassValue)"
  },
  {
    "label": "VClassPropertyType()",
    "kind": "Method",
    "detail": "Function (} bool bIsStruct ; TWriteBarrier<VValue> ClassValue ; protected :)",
    "insertText": "VClassPropertyType(FAllocationContext Context, bool bInIsStruct, VValue InClassValue) : VPropertyType(Context, EPropertyType::Class, &GlobalTrivialEmergentType.Get(Context)) , bIsStruct(bInIsStruct) , ClassValue(Context, InClassValue)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VTupleType*)",
    "insertText": "GetType()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} VTuplePropertyType&)",
    "insertText": "New(FAllocationContext Context, VTupleType* Type)"
  },
  {
    "label": "VTuplePropertyType()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "VTuplePropertyType(FAllocationContext Context, VTupleType* InType) : VPropertyType(Context, EPropertyType::Tuple, &GlobalTrivialEmergentType.Get(Context)) , Type(Context, InType)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VWrappedPropertyType&)",
    "insertText": "New(FAllocationContext Context, EPropertyType PropertyType, VPropertyType& Inner)"
  },
  {
    "label": "VWrappedPropertyType()",
    "kind": "Method",
    "detail": "Function (} TWriteBarrier<VPropertyType> Inner ; protected :)",
    "insertText": "VWrappedPropertyType(FAllocationContext Context, EPropertyType InPropertyType, VPropertyType& InInner, const VEmergentType* EmergentType) : VPropertyType(Context, InPropertyType, EmergentType) , Inner(Context, InInner)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (} } ; struct VArrayPropertyType final : VWrappedPropertyType {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VWrappedPropertyType)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VArrayPropertyType&)",
    "insertText": "New(FAllocationContext Context, bool bIsString, VPropertyType& Inner)"
  },
  {
    "label": "VArrayPropertyType()",
    "kind": "Method",
    "detail": "Function (} bool bIsString ; protected :)",
    "insertText": "VArrayPropertyType(FAllocationContext Context, bool bInIsString, VPropertyType& InInner) : VWrappedPropertyType(Context, EPropertyType::Array, InInner, &GlobalTrivialEmergentType.Get(Context)) , bIsString(bInIsString)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VMapPropertyType&)",
    "insertText": "New(FAllocationContext Context, VPropertyType& Key, VPropertyType& Inner)"
  },
  {
    "label": "VMapPropertyType()",
    "kind": "Method",
    "detail": "Function (} TWriteBarrier<VPropertyType> Key ; protected :)",
    "insertText": "VMapPropertyType(FAllocationContext Context, VPropertyType& InKey, VPropertyType& InInner) : VWrappedPropertyType(Context, EPropertyType::Map, InInner, &GlobalTrivialEmergentType.Get(Context)) , Key(Context, InKey)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; VInterfacePropertyType&)",
    "insertText": "New(FAllocationContext Context, VValue InterfaceValue)"
  },
  {
    "label": "VInterfacePropertyType()",
    "kind": "Method",
    "detail": "Function (} TWriteBarrier<VValue> InterfaceValue ; protected :)",
    "insertText": "VInterfacePropertyType(FAllocationContext Context, VValue InInterfaceValue) : VPropertyType(Context, EPropertyType::Class, &GlobalTrivialEmergentType.Get(Context)) , InterfaceValue(Context, InInterfaceValue)"
  }
]