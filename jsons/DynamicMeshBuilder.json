[
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMeshBuilderOneFrameResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshBuilderOneFrameResources"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FPrimitiveUniformShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveUniformShaderParameters"
  },
  {
    "label": "FMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatch"
  },
  {
    "label": "FDynamicMeshVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshVertex"
  },
  {
    "label": "FDynamicMeshDrawOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshDrawOffset"
  },
  {
    "label": "FDynamicMeshBuilderSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshBuilderSettings"
  },
  {
    "label": "FDynamicMeshBufferAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshBufferAllocator"
  },
  {
    "label": "FDynamicMeshBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshBuilder"
  },
  {
    "label": "FPooledDynamicMeshIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPooledDynamicMeshIndexBuffer"
  },
  {
    "label": "FPooledDynamicMeshVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPooledDynamicMeshVertexBuffer"
  },
  {
    "label": "FDynamicMeshIndexBuffer32",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshIndexBuffer32"
  },
  {
    "label": "FDynamicMeshIndexBuffer16",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshIndexBuffer16"
  },
  {
    "label": "FDynamicMeshVertex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PackedNormal . h \" # include \" HitProxies . h \" # include \" RenderUtils . h \" # include \" LocalVertexFactory . h \" # include \" RenderMath . h \" class FMaterialRenderProxy ; class FMeshBuilderOneFrameResources ; class FMeshElementCollector ; class FPrimitiveDrawInterface ; class FPrimitiveUniformShaderParameters ; struct FMeshBatch ; struct FDynamicMeshVertex {)",
    "insertText": "FDynamicMeshVertex()"
  },
  {
    "label": "FDynamicMeshVertex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDynamicMeshVertex(const FVector3f& InPosition ): Position(InPosition), TangentX(FVector3f(1,0,0)), TangentZ(FVector3f(0,0,1)), Color(FColor(255,255,255))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TangentZ . Vector . W = 1 2 7 ;)",
    "insertText": "for(int i = 0; i < MAX_STATIC_TEXCOORDS; i++)"
  },
  {
    "label": "FDynamicMeshVertex()",
    "kind": "Method",
    "detail": "Function (TextureCoordinate [ i ] = FVector2f::ZeroVector ; } })",
    "insertText": "FDynamicMeshVertex(const FVector3f& InPosition, const FVector2f& InTexCoord, const FColor& InColor) : Position(InPosition), TangentX(FVector3f(1, 0, 0)), TangentZ(FVector3f(0, 0, 1)), Color(InColor)"
  },
  {
    "label": "FDynamicMeshVertex()",
    "kind": "Method",
    "detail": "Function (TextureCoordinate [ i ] = InTexCoord ; } })",
    "insertText": "FDynamicMeshVertex(const FVector3f& InPosition,const FVector3f& InTangentX,const FVector3f& InTangentZ,const FVector2f& InTexCoord, const FColor& InColor): Position(InPosition), TangentX(InTangentX), TangentZ(InTangentZ), Color(InColor)"
  },
  {
    "label": "FDynamicMeshVertex()",
    "kind": "Method",
    "detail": "Function (TextureCoordinate [ i ] = InTexCoord ; } })",
    "insertText": "FDynamicMeshVertex(const FVector3f& InPosition, const FVector3f& LayerTexcoords, const FVector2f& WeightmapTexcoords) : Position(InPosition) , TangentX(FVector3f(1, 0, 0)) , TangentZ(FVector3f(0, 0, 1)) , Color(FColor::White)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (TangentZ . Vector . W = 1 2 7 ; TextureCoordinate [ 0 ] =)",
    "insertText": "FVector2f(LayerTexcoords.X, LayerTexcoords.Y)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (TextureCoordinate [ 2 ] =)",
    "insertText": "FVector2f(LayerTexcoords.Y, LayerTexcoords.X)"
  },
  {
    "label": "SetTangents()",
    "kind": "Method",
    "detail": "Function (TextureCoordinate [ 3 ] = WeightmapTexcoords ; } ; void)",
    "insertText": "SetTangents(const FVector3f& InTangentX, const FVector3f& InTangentY, const FVector3f& InTangentZ)"
  },
  {
    "label": "GetBasisDeterminantSignByte()",
    "kind": "Method",
    "detail": "Function (TangentX = InTangentX ; TangentZ = InTangentZ ; TangentZ . Vector . W =)",
    "insertText": "GetBasisDeterminantSignByte(InTangentX,InTangentY,InTangentZ)"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetTangentY()"
  },
  {
    "label": "GetIndexBufferSize()",
    "kind": "Method",
    "detail": "Function (} ; FVector3f Position ; FVector2f TextureCoordinate [ MAX_STATIC_TEXCOORDS ] ; FPackedNormal TangentX ; FPackedNormal TangentZ ; FColor Color ; } ; struct FDynamicMeshDrawOffset { uint32 FirstIndex = 0 ; uint32 MinVertexIndex = 0 ; uint32 MaxVertexIndex = 0 ; uint32 NumPrimitives = 0 ; } ; struct FDynamicMeshBuilderSettings { bool CastShadow = true ; bool bDisableBackfaceCulling = false ; bool bWireframe = false ; bool bReceivesDecals = true ; bool bUseSelectionOutline = true ; bool bCanApplyViewModeOverrides = false ; bool bUseWireframeSelectionColoring = false ; } ; class FDynamicMeshBufferAllocator { public : int32)",
    "insertText": "GetIndexBufferSize(uint32 NumElements)"
  },
  {
    "label": "GetVertexBufferSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetVertexBufferSize(uint32 Stride, uint32 NumElements)"
  },
  {
    "label": "FDynamicMeshBufferAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDynamicMeshBufferAllocator()"
  },
  {
    "label": "AllocIndexBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "AllocIndexBuffer(FRHICommandListBase& RHICmdList, uint32 NumElements)"
  },
  {
    "label": "ReleaseIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseIndexBuffer(FBufferRHIRef& IndexBufferRHI)"
  },
  {
    "label": "AllocVertexBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "AllocVertexBuffer(FRHICommandListBase& RHICmdList, uint32 Stride, uint32 NumElements)"
  },
  {
    "label": "ReleaseVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseVertexBuffer(FBufferRHIRef& VertexBufferRHI)"
  },
  {
    "label": "FDynamicMeshBuilder()",
    "kind": "Method",
    "detail": "Function (} ; class FDynamicMeshBuilder { public :)",
    "insertText": "FDynamicMeshBuilder(ERHIFeatureLevel::Type InFeatureLevel, uint32 InNumTexCoords = 1, uint32 InLightmapCoordinateIndex = 0, bool InUse16bitTexCoord = false, FDynamicMeshBufferAllocator* InDynamicMeshBufferAllocator = nullptr)"
  },
  {
    "label": "FDynamicMeshBuilder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDynamicMeshBuilder()"
  },
  {
    "label": "AddVertex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddVertex(const FVector3f& InPosition, const FVector2f& InTextureCoordinate, const FVector3f& InTangentX, const FVector3f& InTangentY, const FVector3f& InTangentZ, const FColor& InColor)"
  },
  {
    "label": "AddVertex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddVertex(const FDynamicMeshVertex &InVertex)"
  },
  {
    "label": "AddTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangle(int32 V0,int32 V1,int32 V2)"
  },
  {
    "label": "AddVertices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddVertices(const TArray<FDynamicMeshVertex> &InVertices)"
  },
  {
    "label": "AddTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTriangles(const TArray<uint32> &InIndices)"
  },
  {
    "label": "ReserveVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveVertices(int32 InNumVertices)"
  },
  {
    "label": "ReserveTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveTriangles(int32 InNumTriangles)"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMesh(const FMatrix& LocalToWorld, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup, bool bDisableBackfaceCulling, bool bReceivesDecals, int32 ViewIndex, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMesh(const FMatrix& LocalToWorld, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup, bool bDisableBackfaceCulling, bool bReceivesDecals, bool bUseSelectionOutline, int32 ViewIndex, FMeshElementCollector& Collector, HHitProxy* HitProxy)"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMesh(const FMatrix& LocalToWorld, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup, bool bDisableBackfaceCulling, bool bReceivesDecals, bool bUseSelectionOutline, int32 ViewIndex, FMeshElementCollector& Collector, const FHitProxyId HitProxyId = FHitProxyId())"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMesh(const FMatrix& LocalToWorld, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup, const FDynamicMeshBuilderSettings& Settings, FDynamicMeshDrawOffset const * const DrawOffset, int32 ViewIndex, FMeshElementCollector& Collector, const FHitProxyId HitProxyId = FHitProxyId())"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMesh(const FMatrix& LocalToWorld, const FMatrix& PrevLocalToWorld, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup, const FDynamicMeshBuilderSettings& Settings, FDynamicMeshDrawOffset const * const DrawOffset, int32 ViewIndex, FMeshElementCollector& Collector, const FHitProxyId HitProxyId = FHitProxyId())"
  },
  {
    "label": "GetMeshElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMeshElement(const FMatrix& LocalToWorld, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup, bool bDisableBackfaceCulling, bool bReceivesDecals, int32 ViewIndex, FMeshBuilderOneFrameResources& OneFrameResource, FMeshBatch& Mesh)"
  },
  {
    "label": "GetMeshElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMeshElement(const FPrimitiveUniformShaderParameters& PrimitiveParams, const FMaterialRenderProxy* MaterialRenderProxy, uint8 DepthPriorityGroup, bool bDisableBackfaceCulling, int32 ViewIndex, FMeshBuilderOneFrameResources& OneFrameResource, FMeshBatch& Mesh)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FPrimitiveDrawInterface* PDI,const FMatrix& LocalToWorld,const FMaterialRenderProxy* MaterialRenderProxy,uint8 DepthPriorityGroup,bool bDisableBackfaceCulling=false, bool bReceivesDecals=true, const FHitProxyId HitProxyId = FHitProxyId())"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (private : class FMeshBuilderOneFrameResources* OneFrameResources = nullptr ; class FPooledDynamicMeshIndexBuffer* IndexBuffer = nullptr ; class FPooledDynamicMeshVertexBuffer* VertexBuffer = nullptr ; ERHIFeatureLevel::Type FeatureLevel ; FDynamicMeshBufferAllocator* DynamicMeshBufferAllocator ; } ; class FDynamicMeshIndexBuffer32 : public FIndexBuffer { public : TArray<uint32> Indices ; void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  }
]