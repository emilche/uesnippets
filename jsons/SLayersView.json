[
  {
    "label": "SLayersView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLayersView"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DragAndDrop / CompositeDragDropOp . h \" # include \" DragAndDrop / FolderDragDropOp . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" LayerCollectionViewCommands . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" DragAndDrop / ActorDragDropOp . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # include \" LayerCollectionViewModel . h \" # include \" SLayersViewRow . h \" # include \" LayersDragDropOp . h \" # include \" EditorActorFolders . h \" # define LOCTEXT_NAMESPACE \" LayersView \" typedef SListView<TSharedPtr<FLayerViewModel>> SLayersListView ; class SLayersView : public SCompoundWidget { public : typedef SListView<TSharedPtr<FLayerViewModel>>::FOnGenerateRow FOnGenerateRow ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SLayersView)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, HighlightText ) SLATE_ARGUMENT( FOnContextMenuOpening, ConstructContextMenu ) SLATE_EVENT( FOnGenerateRow, OnGenerateRow ) SLATE_END_ARGS() SLayersView() : bUpdatingSelection( false)"
  },
  {
    "label": "SLayersView()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SLayersView()"
  },
  {
    "label": "OnLayersChanged()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "OnLayersChanged().RemoveAll( this)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "OnSelectionChanged().RemoveAll( this)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef< FLayerCollectionViewModel >& InViewModel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ViewModel = InViewModel ; HighlightText = InArgs . _HighlightText ; FOnGenerateRow OnGenerateRowDelegate = InArgs . _OnGenerateRow ;)",
    "insertText": "if(!OnGenerateRowDelegate.IsBound())"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (OnGenerateRowDelegate =)",
    "insertText": "CreateSP(this, &SLayersView::OnGenerateRowDefault)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SHeaderRow> HeaderRowWidget =)",
    "insertText": "SNew(SHeaderRow ) .Visibility( EVisibility::Collapsed ) +SHeaderRow::Column(LayersView::ColumnID_Visibility) .DefaultLabel(NSLOCTEXT(\"LayersView\", \"Visibility\", \"Visibility\")) .FixedWidth(40.0f) +SHeaderRow::Column(LayersView::ColumnID_LayerLabel) .DefaultLabel(LOCTEXT(\"Column_LayerNameLabel\", \"Layer\"))"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SVerticalBox ) +SVerticalBox::Slot() .FillHeight( 1.0f ) [ SAssignNew( ListView, SLayersListView ) .SelectionMode( ESelectionMode::Multi ) .ListItemsSource( &ViewModel->GetLayers() ) .OnSelectionChanged( this, &SLayersView::OnSelectionChanged ) .OnMouseButtonDoubleClick( this, &SLayersView::OnListViewMouseButtonDoubleClick ) .OnGenerateRow( OnGenerateRowDelegate ) .OnContextMenuOpening( InArgs._ConstructContextMenu ) .HeaderRow( HeaderRowWidget ) .OnItemScrolledIntoView( this, &SLayersView::OnItemScrolledIntoView) .ToolTipText(LOCTEXT(\"HelpText\", \"Drag actors from the outliner or right click to add a new layer.\"))"
  },
  {
    "label": "OnLayersChanged()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "OnLayersChanged().AddSP( this, &SLayersView::RequestRefresh)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "OnSelectionChanged().AddSP( this, &SLayersView::UpdateSelection)"
  },
  {
    "label": "RequestRenameOnSelectedLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRenameOnSelectedLayer()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (RequestedRenameLayer = ListView ->)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "RequestScrollIntoView()",
    "kind": "Method",
    "detail": "Function (ListView ->)",
    "insertText": "RequestScrollIntoView(ListView->GetSelectedItems()[0])"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} } protected : bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "FDecoratedDragDropOp()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDecoratedDragDropOp> DragOp = DragDropEvent . GetOperationAs<)",
    "insertText": "FDecoratedDragDropOp()"
  },
  {
    "label": "ResetToDefaultToolTip()",
    "kind": "Method",
    "detail": "Function (DragOp ->)",
    "insertText": "ResetToDefaultToolTip()"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "SetToolTip()",
    "kind": "Method",
    "detail": "Function (DecoratedDragDropOp ->)",
    "insertText": "SetToolTip(LOCTEXT(\"OnDragOver\", \"Add Actors to New Layer\"), FAppStyle::GetBrush(TEXT(\"Graph.ConnectorFeedback.OK\")))"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bHandled = false ; TArray<TWeakObjectPtr<AActor>> ActorsToDrop ; TSharedPtr<FActorDragDropOp> ActorDragOp = nullptr ; TSharedPtr<FFolderDragDropOp> FolderDragOp = nullptr ;)",
    "insertText": "if(const TSharedPtr<FCompositeDragDropOp> CompositeDragOp = DragDropEvent.GetOperationAs<FCompositeDragDropOp>())"
  },
  {
    "label": "FActorDragDropOp()",
    "kind": "Method",
    "detail": "Function (ActorDragOp = CompositeDragOp -> GetSubOp<)",
    "insertText": "FActorDragDropOp()"
  },
  {
    "label": "FFolderDragDropOp()",
    "kind": "Method",
    "detail": "Function (FolderDragOp = CompositeDragOp -> GetSubOp<)",
    "insertText": "FFolderDragDropOp()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ActorDragOp.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ActorsToDrop = ActorDragOp -> Actors ; bHandled = true ; })",
    "insertText": "if(FolderDragOp.IsValid())"
  },
  {
    "label": "GetWeakActorsFromFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWeakActorsFromFolders(*World, FolderDragOp->Folders, ActorsToDrop, FolderDragOp->RootObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHandled = true ; } })",
    "insertText": "if(ActorsToDrop.Num() > 0)"
  },
  {
    "label": "AddActorsToNewLayer()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "AddActorsToNewLayer(ActorsToDrop)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return bHandled ?)",
    "insertText": "Handled() : FReply::Unhandled()"
  },
  {
    "label": "OnDragRow()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnDragRow(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "FLayersDragDropOp()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FLayersDragDropOp> DragDropOp = MakeShared<)",
    "insertText": "FLayersDragDropOp()"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (FName LayerName = Layer ->)",
    "insertText": "GetFName()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DragDropOp -> Layers .)",
    "insertText": "Add(LayerName)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } DragDropOp ->)",
    "insertText": "Construct()"
  },
  {
    "label": "OnGenerateRowDefault()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRowDefault(const TSharedPtr< FLayerViewModel > Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "RequestRefresh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestRefresh(const ELayersAction::Type Action, const TWeakObjectPtr< ULayer >& ChangedLayer, const FName& ChangedProperty)"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (ListView ->)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "UpdateSelection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSelection()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (ListView ->)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SetItemSelection()",
    "kind": "Method",
    "detail": "Function (ListView ->)",
    "insertText": "SetItemSelection(*LayerIter, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SelectedLayers.Num() == 1)"
  },
  {
    "label": "RequestScrollIntoView()",
    "kind": "Method",
    "detail": "Function (ListView ->)",
    "insertText": "RequestScrollIntoView(SelectedLayers[ 0 ])"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} bUpdatingSelection = false ; } void)",
    "insertText": "OnSelectionChanged(const TSharedPtr< FLayerViewModel > Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnListViewMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (bUpdatingSelection = false ; } void)",
    "insertText": "OnListViewMouseButtonDoubleClick(const TSharedPtr< FLayerViewModel > Item)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FLayersViewCommands& Commands =)",
    "insertText": "Get()"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (ViewModel ->)",
    "insertText": "GetCommandList()->TryExecuteAction( Commands.SelectActors.ToSharedRef())"
  },
  {
    "label": "OnItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemScrolledIntoView(TSharedPtr<FLayerViewModel> LayerItem, const TSharedPtr<ITableRow>& Widget)"
  },
  {
    "label": "BroadcastRenameRequest()",
    "kind": "Method",
    "detail": "Function (LayerItem ->)",
    "insertText": "BroadcastRenameRequest()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (RequestedRenameLayer .)",
    "insertText": "Reset()"
  }
]