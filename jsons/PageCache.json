[
  {
    "label": "FPageCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPageCache"
  },
  {
    "label": "AddrToPageIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / MallocBinnedCommon . h \" class FPageCache { FCriticalSection CriticalSection ; uint8* LowAddress ; uint8* HighAddress ; size_t PageSize ; uint32 NumPages ; uint32 MemSize ; uint32 SweepPage ; uint32 CommittedPages ; uint32 DecommittedPages ; uint32 PendingDecommittedPages ; uint64 CommitHits ; uint64 CommitMisses ; FBitTree CurrentlyCommitted ; FBitTree NotPendingDecommit ; uint32)",
    "insertText": "AddrToPageIndex(void* Addr)"
  },
  {
    "label": "PageIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PageIndex(((uint8*)Addr) - LowAddress)"
  },
  {
    "label": "IsCommitted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCommitted(void* Addr)"
  },
  {
    "label": "AddrToPageIndex()",
    "kind": "Method",
    "detail": "Function (uint32 PageIndex =)",
    "insertText": "AddrToPageIndex(Addr)"
  },
  {
    "label": "IsAllocated()",
    "kind": "Method",
    "detail": "Function (bool bCommitted = CurrentlyCommitted .)",
    "insertText": "IsAllocated(PageIndex)"
  },
  {
    "label": "AllocBit()",
    "kind": "Method",
    "detail": "Function (CurrentlyCommitted .)",
    "insertText": "AllocBit(PageIndex)"
  },
  {
    "label": "Decommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Decommit(void* Addr)"
  },
  {
    "label": "FreeBit()",
    "kind": "Method",
    "detail": "Function (CurrentlyCommitted .)",
    "insertText": "FreeBit(PageIndex)"
  },
  {
    "label": "MarkPendingDecommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkPendingDecommit(void* Addr)"
  },
  {
    "label": "UnMarkPendingDecommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnMarkPendingDecommit(void* Addr)"
  },
  {
    "label": "FPageCache()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FPageCache(void *InLowAdress, void* InHighAddress, size_t InPageSize) : LowAddress((uint8*)InLowAdress) , HighAddress((uint8*)InHighAddress) , PageSize(InPageSize) , NumPages(0) , MemSize(0) , SweepPage(0) , CommittedPages(0) , PendingDecommittedPages(0)"
  },
  {
    "label": "GetMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMemoryRequirements()"
  },
  {
    "label": "NumPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumPages(HighAddress - LowAddress)"
  },
  {
    "label": "GetMemoryRequirements()",
    "kind": "Method",
    "detail": "Function (MemSize =)",
    "insertText": "GetMemoryRequirements(NumPages)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "FBitTreeInit()",
    "kind": "Method",
    "detail": "Function (DecommittedPages = NumPages ; CurrentlyCommitted .)",
    "insertText": "FBitTreeInit(NumPages, Memory, MemSize, false)"
  },
  {
    "label": "FBitTreeInit()",
    "kind": "Method",
    "detail": "Function (NotPendingDecommit .)",
    "insertText": "FBitTreeInit(NumPages, (uint8*)Memory + MemSize, MemSize, true)"
  },
  {
    "label": "MarkForPendingDecommit()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "MarkForPendingDecommit(void *InAddr, size_t Size)"
  },
  {
    "label": "AddrToPageIndex()",
    "kind": "Method",
    "detail": "Function (uint32 StartPage =)",
    "insertText": "AddrToPageIndex(InAddr)"
  },
  {
    "label": "FreeBit()",
    "kind": "Method",
    "detail": "Function (NumFound + + ; PendingDecommittedPages + + ; NotPendingDecommit .)",
    "insertText": "FreeBit(Index)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "size_t(NumFound)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (} template<T> size_t)",
    "insertText": "Commit(void *InAddr, size_t Size, size_t& OutUnPending, T&& CommitFunction)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 NumFound = 0 ; uint32 NumUnPending = 0 ;)",
    "insertText": "for(uint32 Index = StartPage; Index < EndPage; Index++)"
  },
  {
    "label": "AllocBit()",
    "kind": "Method",
    "detail": "Function (PendingDecommittedPages - - ; NumUnPending + + ; NotPendingDecommit .)",
    "insertText": "AllocBit(Index)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} } else { NumFound + + ; CommittedPages + + ;)",
    "insertText": "check(DecommittedPages)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (DecommittedPages - - ;)",
    "insertText": "check(NotPendingDecommit.IsAllocated(Index))"
  },
  {
    "label": "CommitFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitFunction(PageIndexToAddr(StartCommitPage), (1 + LastCommitPage - StartCommitPage) * PageSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} StartCommitPage = Index ; } LastCommitPage = Index ; } })",
    "insertText": "if(StartCommitPage != MAX_uint32)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (} CommitHits + = NumUnPending ; CommitMisses + = NumFound ; OutUnPending =)",
    "insertText": "size_t(NumUnPending)"
  },
  {
    "label": "ForceDecommit()",
    "kind": "Method",
    "detail": "Function (} template<T> size_t)",
    "insertText": "ForceDecommit(void *InAddr, size_t Size, size_t& OutUnPending, T&& DecommitFunction)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (NumUnPending + + ; } NumFound + + ;)",
    "insertText": "check(CommittedPages)"
  },
  {
    "label": "DecommitFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecommitFunction(PageIndexToAddr(StartCommitPage), (1 + LastCommitPage - StartCommitPage) * PageSize)"
  },
  {
    "label": "DecommitPending()",
    "kind": "Method",
    "detail": "Function (} template<T> size_t)",
    "insertText": "DecommitPending(size_t Size, T&& DecommitFunction)"
  },
  {
    "label": "NextAllocBit()",
    "kind": "Method",
    "detail": "Function (uint32 Index = NotPendingDecommit .)",
    "insertText": "NextAllocBit(SweepPage)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (SweepPage = 0 ; break ; })",
    "insertText": "check(CurrentlyCommitted.IsAllocated(Index) && !NotPendingDecommit.IsAllocated(Index))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (CommittedPages - - ; DecommittedPages + + ;)",
    "insertText": "check(PendingDecommittedPages)"
  },
  {
    "label": "DecommitFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecommitFunction(PageIndexToAddr(StartDecommitPage), (1 + LastDecommitPage - StartDecommitPage) * PageSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} StartDecommitPage = Index ; } LastDecommitPage = Index ; SweepPage = Index + 1 ;)",
    "insertText": "if(SweepPage >= NumPages)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SweepPage = 0 ; break ; } })",
    "insertText": "if(StartDecommitPage != MAX_uint32)"
  },
  {
    "label": "TryDecommitPending()",
    "kind": "Method",
    "detail": "Function (} template<T> size_t)",
    "insertText": "TryDecommitPending(size_t Size, T&& DecommitFunction)"
  },
  {
    "label": "DecommitRange()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "DecommitRange()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 DecommitPageCount = 1 + LastDecommitPage - StartDecommitPage ;)",
    "insertText": "if(DecommitFunction(PageIndexToAddr(StartDecommitPage), DecommitPageCount * PageSize))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (CommittedPages - = DecommitPageCount ; DecommittedPages + = DecommitPageCount ;)",
    "insertText": "check(PendingDecommittedPages >= DecommitPageCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PendingDecommittedPages - = DecommitPageCount ; NumFound + = DecommitPageCount ; uint32 EndBitIndex = StartDecommitPage + DecommitPageCount ;)",
    "insertText": "for(uint32 BitIndex = StartDecommitPage; BitIndex < EndBitIndex; BitIndex++)"
  },
  {
    "label": "FreeBit()",
    "kind": "Method",
    "detail": "Function (CurrentlyCommitted .)",
    "insertText": "FreeBit(BitIndex)"
  },
  {
    "label": "AllocBit()",
    "kind": "Method",
    "detail": "Function (NotPendingDecommit .)",
    "insertText": "AllocBit(BitIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } } ;)",
    "insertText": "while(NumFound < NumNeed)"
  },
  {
    "label": "GetFreeableMemory()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetFreeableMemory()"
  },
  {
    "label": "GetHitRate()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetHitRate()"
  }
]