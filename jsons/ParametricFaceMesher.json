[
  {
    "label": "FCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriterion"
  },
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FMeshingTolerances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshingTolerances"
  },
  {
    "label": "FThinZoneSide",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZoneSide"
  },
  {
    "label": "FThinZone2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone2D"
  },
  {
    "label": "FTopologicalEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEntity"
  },
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FCrossZoneElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrossZoneElement"
  },
  {
    "label": "FIntersectionTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntersectionTool"
  },
  {
    "label": "FParametricFaceMesher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParametricFaceMesher"
  },
  {
    "label": "FCrossZoneElement()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Chrono . h \" # include \" Core / Types . h \" # include \" Mesh / Structure / Grid . h \" namespace UE::CADKernel { class FCriterion ; class FGrid ; class FMeshingTolerances ; class FThinZoneSide ; class FThinZone2D ; class FTopologicalEntity ; class FTopologicalLoop ; namespace ParametricMesherTool { struct FCrossZoneElement { const int32 VertexId ; FPoint2D VertexPoint2D ; const double Tolerance3D ; const FEdgeSegment* Segment ; FPairOfIndex OppositeVertexIndices ; FPoint2D OppositePoint2D ; FEdgeSegment* OppositeSegment ; double OppositePointCoordinate = - 1 . ; double SquareThickness ; bool bIsSelected = false ;)",
    "insertText": "FCrossZoneElement(const int32 InVertexId, const FPoint2D InPoint2D, const double InTolerance3D, const FEdgeSegment* InSegment, const FPairOfIndex& InOppositeVertexIndices) : VertexId(InVertexId) , VertexPoint2D(InPoint2D) , Tolerance3D(InTolerance3D) , Segment(InSegment) , OppositeVertexIndices(InOppositeVertexIndices) , OppositePoint2D(FPoint2D::ZeroPoint) , OppositeSegment(nullptr) , OppositePointCoordinate(-1.) , SquareThickness(-1.)"
  },
  {
    "label": "FCrossZoneElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCrossZoneElement() : VertexId(-1) , VertexPoint2D(FPoint2D::ZeroPoint) , Tolerance3D(-1.) , Segment(nullptr) , OppositeVertexIndices(FPairOfIndex::Undefined) , OppositePoint2D(FPoint2D::ZeroPoint) , OppositeSegment(nullptr) , OppositePointCoordinate(-1.) , SquareThickness(-1.)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FPairOfIndex& VertexIndices)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OppositeVertexIndices .)",
    "insertText": "Add(VertexIndices)"
  },
  {
    "label": "FIntersectionTool()",
    "kind": "Method",
    "detail": "Function (} } ; class FIntersectionTool { private : const TArray<FEdgeSegment>& Side1Segments ; const TArray<FEdgeSegment>& Side2Segments ; TArray<FCrossZoneElement*> SelectedCrossZoneElement ; public :)",
    "insertText": "FIntersectionTool(const TArray<FEdgeSegment>& InSide1Segments, const TArray<FEdgeSegment>& InSide2Segments, int32 MaxCrossZoneElementCount) : Side1Segments(InSide1Segments) , Side2Segments(InSide2Segments)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (SelectedCrossZoneElement .)",
    "insertText": "Reserve(MaxCrossZoneElementCount)"
  },
  {
    "label": "IsIntersectSides()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIntersectSides(const FCrossZoneElement& CrossZoneElement)"
  },
  {
    "label": "CrossZoneSegment()",
    "kind": "Method",
    "detail": "Function (FSegment2D)",
    "insertText": "CrossZoneSegment(CrossZoneElement.VertexPoint2D, CrossZoneElement.OppositePoint2D)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SelectedCrossZoneElement .)",
    "insertText": "Add(&Element)"
  },
  {
    "label": "IsIntersectSide()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "IsIntersectSide(const TArray<FEdgeSegment>& Segments, const FSegment2D& CrossZoneSegment)"
  },
  {
    "label": "SideSegment()",
    "kind": "Method",
    "detail": "Function (FSegment2D)",
    "insertText": "SideSegment(Segment.GetExtemity(Start), Segment.GetExtemity(End))"
  },
  {
    "label": "SideSegment()",
    "kind": "Method",
    "detail": "Function (FSegment2D)",
    "insertText": "SideSegment(Segment->VertexPoint2D, Segment->OppositePoint2D)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mesh()"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Mesh(FTopologicalEdge& InEdge, bool bFinalMeshing = true)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mesh(FTopologicalVertex& Vertex)"
  },
  {
    "label": "MeshVerticesOfFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshVerticesOfFace(FTopologicalFace& Face)"
  },
  {
    "label": "MeshPlanarFace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MeshPlanarFace()"
  },
  {
    "label": "MeshFaceLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshFaceLoops()"
  },
  {
    "label": "ApplyEdgeCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEdgeCriteria(FTopologicalEdge& Edge)"
  },
  {
    "label": "GenerateCloud()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateCloud()"
  },
  {
    "label": "MeshThinZones()",
    "kind": "Method",
    "detail": "Function (TArray<FThinZone2D*> WaitingThinZones ; TArray<FTopologicalEdge*> ZoneAEdges ; TArray<FTopologicalEdge*> ZoneBEdges ; void)",
    "insertText": "MeshThinZones()"
  },
  {
    "label": "MeshThinZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZones(TArray<FThinZone2D*>& ThinZones)"
  },
  {
    "label": "SortThinZoneSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortThinZoneSides(TArray<FThinZone2D*>& ThinZones)"
  },
  {
    "label": "MeshThinZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZones(TArray<FTopologicalEdge*>& EdgesToMesh, const bool bFinalMeshing)"
  },
  {
    "label": "MeshThinZoneSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZoneSide(FThinZoneSide& Side, bool bFinalMeshing)"
  },
  {
    "label": "DefineImposedCuttingPointsBasedOnOtherSideMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineImposedCuttingPointsBasedOnOtherSideMesh(FThinZoneSide& SideToConstrain)"
  },
  {
    "label": "DisplayMeshOfFaceLoop()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEBUG void)",
    "insertText": "DisplayMeshOfFaceLoop()"
  },
  {
    "label": "DisplayThinZoneEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneEdges(const TCHAR* Text, TArray<FTopologicalEdge*>& Edges, EVisuProperty Color, EVisuProperty Color2)"
  }
]