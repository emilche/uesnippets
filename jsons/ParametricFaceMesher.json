[
  {
    "label": "FCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriterion"
  },
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FMeshingTolerances",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshingTolerances"
  },
  {
    "label": "FThinZoneSide",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZoneSide"
  },
  {
    "label": "FThinZone2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone2D"
  },
  {
    "label": "FTopologicalEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEntity"
  },
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FCrossZoneElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrossZoneElement"
  },
  {
    "label": "FIntersectionTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIntersectionTool"
  },
  {
    "label": "FParametricFaceMesher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParametricFaceMesher"
  },
  {
    "label": "CrossZoneSegment()",
    "kind": "Method",
    "detail": "Function (FSegment2D)",
    "insertText": "CrossZoneSegment(CrossZoneElement.VertexPoint2D, CrossZoneElement.OppositePoint2D)"
  },
  {
    "label": "SideSegment()",
    "kind": "Method",
    "detail": "Function (FSegment2D)",
    "insertText": "SideSegment(Segment->VertexPoint2D, Segment->OppositePoint2D)"
  },
  {
    "label": "FParametricFaceMesher()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FParametricFaceMesher(FTopologicalFace& Face, FModelMesh& InMeshModel, const FMeshingTolerances& InTolerances, bool bActivateThinZoneMeshing)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mesh()"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mesh(FTopologicalEdge& InEdge, bool bFinalMeshing = true)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mesh(FTopologicalVertex& Vertex)"
  },
  {
    "label": "MeshVerticesOfFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshVerticesOfFace(FTopologicalFace& Face)"
  },
  {
    "label": "MeshPlanarFace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MeshPlanarFace()"
  },
  {
    "label": "MeshFaceLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshFaceLoops()"
  },
  {
    "label": "ApplyEdgeCriteria()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyEdgeCriteria(FTopologicalEdge& Edge)"
  },
  {
    "label": "GenerateCloud()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateCloud()"
  },
  {
    "label": "MeshThinZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZones()"
  },
  {
    "label": "MeshThinZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZones(TArray<FThinZone2D*>& ThinZones)"
  },
  {
    "label": "SortThinZoneSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortThinZoneSides(TArray<FThinZone2D*>& ThinZones)"
  },
  {
    "label": "MeshThinZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZones(TArray<FTopologicalEdge*>& EdgesToMesh, const bool bFinalMeshing)"
  },
  {
    "label": "MeshThinZoneSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshThinZoneSide(FThinZoneSide& Side, bool bFinalMeshing)"
  },
  {
    "label": "DefineImposedCuttingPointsBasedOnOtherSideMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineImposedCuttingPointsBasedOnOtherSideMesh(FThinZoneSide& SideToConstrain)"
  },
  {
    "label": "DisplayMeshOfFaceLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayMeshOfFaceLoop()"
  },
  {
    "label": "DisplayThinZoneEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneEdges(const TCHAR* Text, TArray<FTopologicalEdge*>& Edges, EVisuProperty Color, EVisuProperty Color2)"
  }
]