[
  {
    "label": "MessagePump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePump"
  },
  {
    "label": "TaskObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskObserver"
  },
  {
    "label": "TimeDomain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDomain"
  },
  {
    "label": "NativeWorkHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NativeWorkHandle"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "MetricRecordingSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MetricRecordingSettings"
  },
  {
    "label": "Builder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Builder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NativeWorkHandle()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_SEQUENCE_MANAGER_H_ # define BASE_TASK_SEQUENCE_MANAGER_SEQUENCE_MANAGER_H_ # include<memory> # include<string> # include<utility> # include \" base / base_export . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / raw_ptr . h \" # include \" base / message_loop / message_pump_type . h \" # include \" base / message_loop / timer_slack . h \" # include \" base / task / sequence_manager / task_queue_impl . h \" # include \" base / task / sequence_manager / task_time_observer . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / time / default_tick_clock . h \" namespace base { class MessagePump ; class TaskObserver ; namespace sequence_manager { class TimeDomain ; class NativeWorkHandle { public : ~)",
    "insertText": "NativeWorkHandle()"
  },
  {
    "label": "NativeWorkHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeWorkHandle(const NativeWorkHandle&)"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT SequenceManager { public : class Observer { public : ~)",
    "insertText": "Observer()"
  },
  {
    "label": "OnBeginNestedRunLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginNestedRunLoop()"
  },
  {
    "label": "OnExitNestedRunLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitNestedRunLoop()"
  },
  {
    "label": "MetricRecordingSettings()",
    "kind": "Method",
    "detail": "Function (} ; struct MetricRecordingSettings {)",
    "insertText": "MetricRecordingSettings(double task_sampling_rate_for_recording_cpu_time)"
  },
  {
    "label": "Settings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Settings(const Settings&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Settings&)",
    "insertText": "operator(const Settings&)"
  },
  {
    "label": "Settings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Settings(Settings&& move_from)"
  },
  {
    "label": "Settings()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Settings()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (MessagePumpType message_loop_type = MessagePumpType::DEFAULT ; bool randomised_sampling_enabled = false ; raw_ptr<const TickClock,DanglingUntriaged> clock =)",
    "insertText": "GetInstance()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (bool add_queue_time_to_tasks = false ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "SequenceManager()",
    "kind": "Method",
    "detail": "Function (kNone,kEnabled,kEnabledWithBacktrace,kReorderedOnly,} ; TaskLogging task_execution_logging = TaskLogging::kNone ; bool log_post_task = false ; bool log_task_delay_expiry = false ; std::array<TimeDelta,TaskQueue::kQueuePriorityCount> per_priority_cross_thread_task_delay ; std::array<TimeDelta,TaskQueue::kQueuePriorityCount> per_priority_same_thread_task_delay ; uint64_t random_task_selection_seed = 0 ; # endif } ; ~)",
    "insertText": "SequenceManager()"
  },
  {
    "label": "BindToCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToCurrentThread()"
  },
  {
    "label": "GetTaskRunnerForCurrentTask()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SequencedTaskRunner>)",
    "insertText": "GetTaskRunnerForCurrentTask()"
  },
  {
    "label": "BindToMessagePump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToMessagePump(std::unique_ptr<MessagePump> message_pump)"
  },
  {
    "label": "SetObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObserver(Observer* observer)"
  },
  {
    "label": "AddTaskTimeObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTaskTimeObserver(TaskTimeObserver* task_time_observer)"
  },
  {
    "label": "RemoveTaskTimeObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTaskTimeObserver(TaskTimeObserver* task_time_observer)"
  },
  {
    "label": "SetTimeDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeDomain(TimeDomain* time_domain)"
  },
  {
    "label": "ResetTimeDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimeDomain()"
  },
  {
    "label": "GetTickClock()",
    "kind": "Method",
    "detail": "Function (const TickClock*)",
    "insertText": "GetTickClock()"
  },
  {
    "label": "NowTicks()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "NowTicks()"
  },
  {
    "label": "GetNextDelayedWakeUp()",
    "kind": "Method",
    "detail": "Function (absl::optional<WakeUp>)",
    "insertText": "GetNextDelayedWakeUp()"
  },
  {
    "label": "SetDefaultTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultTaskRunner(scoped_refptr<SingleThreadTaskRunner> task_runner)"
  },
  {
    "label": "ReclaimMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReclaimMemory()"
  },
  {
    "label": "GetAndClearSystemIsQuiescentBit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAndClearSystemIsQuiescentBit()"
  },
  {
    "label": "SetWorkBatchSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorkBatchSize(int work_batch_size)"
  },
  {
    "label": "SetTimerSlack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimerSlack(TimerSlack timer_slack)"
  },
  {
    "label": "EnableCrashKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCrashKeys(const char* async_stack_crash_key)"
  },
  {
    "label": "GetMetricRecordingSettings()",
    "kind": "Method",
    "detail": "Function (const MetricRecordingSettings&)",
    "insertText": "GetMetricRecordingSettings()"
  },
  {
    "label": "CreateTaskQueueWithType()",
    "kind": "Method",
    "detail": "Function (template<TaskQueueType,. . . Args> scoped_refptr<TaskQueueType>)",
    "insertText": "CreateTaskQueueWithType(const TaskQueue::Spec& spec, Args&&... args)"
  },
  {
    "label": "CreateTaskQueue()",
    "kind": "Method",
    "detail": "Function (} scoped_refptr<TaskQueue>)",
    "insertText": "CreateTaskQueue(const TaskQueue::Spec& spec)"
  },
  {
    "label": "IsIdleForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdleForTesting()"
  },
  {
    "label": "GetPendingTaskCountForTesting()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetPendingTaskCountForTesting()"
  },
  {
    "label": "DescribeAllPendingTasks()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DescribeAllPendingTasks()"
  },
  {
    "label": "OnNativeWorkPending()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<NativeWorkHandle>)",
    "insertText": "OnNativeWorkPending(TaskQueue::QueuePriority priority)"
  },
  {
    "label": "PrioritizeYieldingToNative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeYieldingToNative(base::TimeTicks prioritize_until)"
  },
  {
    "label": "EnablePeriodicYieldingToNative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePeriodicYieldingToNative(base::TimeDelta interval)"
  },
  {
    "label": "AddTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "RemoveTaskObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTaskObserver(TaskObserver* task_observer)"
  },
  {
    "label": "CreateTaskQueueImpl()",
    "kind": "Method",
    "detail": "Function (protected : std::unique_ptr<internal::TaskQueueImpl>)",
    "insertText": "CreateTaskQueueImpl(const TaskQueue::Spec& spec)"
  },
  {
    "label": "Builder()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT SequenceManager::Settings::Builder { public :)",
    "insertText": "Builder()"
  },
  {
    "label": "SetMessagePumpType()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetMessagePumpType(MessagePumpType message_loop_type)"
  },
  {
    "label": "SetRandomisedSamplingEnabled()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetRandomisedSamplingEnabled(bool randomised_sampling_enabled)"
  },
  {
    "label": "SetTickClock()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetTickClock(const TickClock* clock)"
  },
  {
    "label": "SetAddQueueTimeToTasks()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetAddQueueTimeToTasks(bool add_queue_time_to_tasks)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() Builder& SetTaskLogging(TaskLogging task_execution_logging)"
  },
  {
    "label": "SetLogPostTask()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetLogPostTask(bool log_post_task)"
  },
  {
    "label": "SetLogTaskDelayExpiry()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetLogTaskDelayExpiry(bool log_task_delay_expiry)"
  },
  {
    "label": "SetPerPriorityCrossThreadTaskDelay()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetPerPriorityCrossThreadTaskDelay(std::array<TimeDelta, TaskQueue::kQueuePriorityCount> per_priority_cross_thread_task_delay)"
  },
  {
    "label": "SetPerPrioritySameThreadTaskDelay()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetPerPrioritySameThreadTaskDelay(std::array<TimeDelta, TaskQueue::kQueuePriorityCount> per_priority_same_thread_task_delay)"
  },
  {
    "label": "SetRandomTaskSelectionSeed()",
    "kind": "Method",
    "detail": "Function (Builder&)",
    "insertText": "SetRandomTaskSelectionSeed(uint64_t random_task_selection_seed)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (# endif Settings)",
    "insertText": "Build()"
  },
  {
    "label": "CreateSequenceManagerOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (private : Settings settings_ ; } ; BASE_EXPORT std::unique_ptr<SequenceManager>)",
    "insertText": "CreateSequenceManagerOnCurrentThread(SequenceManager::Settings settings)"
  },
  {
    "label": "CreateSequenceManagerOnCurrentThreadWithPump()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::unique_ptr<SequenceManager>)",
    "insertText": "CreateSequenceManagerOnCurrentThreadWithPump(std::unique_ptr<MessagePump> message_pump, SequenceManager::Settings settings = SequenceManager::Settings())"
  },
  {
    "label": "CreateUnboundSequenceManager()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::unique_ptr<SequenceManager>)",
    "insertText": "CreateUnboundSequenceManager(SequenceManager::Settings settings = SequenceManager::Settings())"
  }
]