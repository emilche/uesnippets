[
  {
    "label": "FIoContainerHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoContainerHeader"
  },
  {
    "label": "FIoRequestImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoRequestImpl"
  },
  {
    "label": "FIoRequestAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoRequestAllocator"
  },
  {
    "label": "FIoDispatcherImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoDispatcherImpl"
  },
  {
    "label": "FIoRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoRequest"
  },
  {
    "label": "FIoBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoBatch"
  },
  {
    "label": "FIoRequestStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoRequestStats"
  },
  {
    "label": "IIoDispatcherBackend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IIoDispatcherBackend"
  },
  {
    "label": "FIoRequestListTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoRequestListTraits"
  },
  {
    "label": "FIoDispatcherBackendContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoDispatcherBackendContext"
  },
  {
    "label": "UE_IODISPATCHER_STATS_ENABLED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IO / IoContainers . h \" # include \" IO / IoOffsetLength . h \" # include \" IoDispatcher . h \" # include \" Async / InheritedContext . h \" # include \" Misc / Optional . h \" # include \" ProfilingDebugging / CountersTrace . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # define)",
    "insertText": "UE_IODISPATCHER_STATS_ENABLED(COUNTERSTRACE_ENABLED || CSV_PROFILER_STATS)"
  },
  {
    "label": "FIoRequestImpl()",
    "kind": "Method",
    "detail": "Function (class FIoRequestImpl : private UE::FInheritedContextBase { public : FIoRequestImpl* NextRequest = nullptr ; void* BackendData = nullptr ; FIoChunkId ChunkId ; FIoReadOptions Options ; int32 Priority = 0 ;)",
    "insertText": "FIoRequestImpl(class FIoRequestAllocator& InAllocator) : Allocator(InAllocator)"
  },
  {
    "label": "CaptureInheritedContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureInheritedContext()"
  },
  {
    "label": "IsCancelled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCancelled()"
  },
  {
    "label": "HasBuffer()",
    "kind": "Method",
    "detail": "Function (bFailed = true ; } bool)",
    "insertText": "HasBuffer()"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateBuffer(uint64 Size)"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (FIoBuffer&)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "SetResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResult(FIoBuffer InBuffer)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Buffer .)",
    "insertText": "Emplace(InBuffer)"
  },
  {
    "label": "GetStartTime()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetStartTime()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (# if UE_IODISPATCHER_STATS_ENABLED return StartTime ; # else return 0 ; # endif } private : class FIoDispatcherImpl ; class FIoRequest ; class FIoBatch ; class FIoRequestStats ; void)",
    "insertText": "AddRef()"
  },
  {
    "label": "IncrementExchange()",
    "kind": "Method",
    "detail": "Function (RefCount .)",
    "insertText": "IncrementExchange()"
  },
  {
    "label": "ReleaseRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRef()"
  },
  {
    "label": "FreeRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeRequest()"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (FIoRequestAllocator& Allocator ; struct IIoDispatcherBackend* Backend = nullptr ; FIoBatchImpl* Batch = nullptr ; # if UE_IODISPATCHER_STATS_ENABLED uint64 StartTime = 0 ; # endif TOptional<FIoBuffer> Buffer ; FIoReadCallback Callback ; TAtomic<uint32> RefCount { 0 } ; TAtomic<EIoErrorCode> ErrorCode { EIoErrorCode::Unknown } ; bool bCancelled = false ; bool bFailed = false ; } ; namespace UE::Private { struct FIoRequestListTraits { using ElementType = FIoRequestImpl ; FIoRequestImpl*)",
    "insertText": "GetNext(const FIoRequestImpl* Element)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (Element -> NextRequest = Next ; } } ; } using FIoRequestList = TInstrusiveList<UE::Private::FIoRequestListTraits> ;)",
    "insertText": "DECLARE_DELEGATE(FWakeUpIoDispatcherThreadDelegate)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (struct FIoDispatcherBackendContext { FWakeUpIoDispatcherThreadDelegate WakeUpDispatcherThreadDelegate ; FIoSignatureErrorDelegate SignatureErrorDelegate ; bool bIsMultiThreaded ; } ; struct IIoDispatcherBackend { void)",
    "insertText": "Initialize(TSharedRef<const FIoDispatcherBackendContext> Context)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "ResolveIoRequests()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ResolveIoRequests(FIoRequestList Requests, FIoRequestList& OutUnresolved)"
  },
  {
    "label": "GetCompletedIoRequests()",
    "kind": "Method",
    "detail": "Function (FIoRequestImpl*)",
    "insertText": "GetCompletedIoRequests()"
  },
  {
    "label": "CancelIoRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelIoRequest(FIoRequestImpl* Request)"
  },
  {
    "label": "UpdatePriorityForIoRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriorityForIoRequest(FIoRequestImpl* Request)"
  },
  {
    "label": "DoesChunkExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChunkExist(const FIoChunkId& ChunkId)"
  },
  {
    "label": "DoesChunkExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChunkExist(const FIoChunkId& ChunkId, const FIoOffsetAndLength& ChunkRange)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (} TIoStatusOr<uint64>)",
    "insertText": "GetSizeForChunk(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "GetSizeForChunk(const FIoChunkId& ChunkId, const FIoOffsetAndLength& ChunkRange, uint64& OutAvailable)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64> ChunkSize =)",
    "insertText": "GetSizeForChunk(ChunkId)"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (OutAvailable = ChunkSize .)",
    "insertText": "IsOk() ? ChunkSize.ValueOrDie()"
  }
]