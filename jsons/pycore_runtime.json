[
  {
    "label": "_ceval_runtime_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ceval_runtime_state"
  },
  {
    "label": "_gil_runtime_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_gil_runtime_state"
  },
  {
    "label": "_gilstate_runtime_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_gilstate_runtime_state"
  },
  {
    "label": "_Py_AuditHookEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_Py_AuditHookEntry"
  },
  {
    "label": "pyruntimestate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pyruntimestate"
  },
  {
    "label": "pyinterpreters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pyinterpreters"
  },
  {
    "label": "_xidregistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xidregistry"
  },
  {
    "label": "_xidregitem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_xidregitem"
  },
  {
    "label": "_Py_unicode_runtime_ids",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_Py_unicode_runtime_ids"
  },
  {
    "label": "_Py_global_objects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_Py_global_objects"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_RUNTIME_H # define Py_INTERNAL_RUNTIME_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif # include \" pycore_atomic . h \" # include \" pycore_gil . h \" # include \" pycore_global_objects . h \" # include \" pycore_interp . h \" # include \" pycore_unicodeobject . h \" struct _ceval_runtime_state { _Py_atomic_int signals_pending ; struct _gil_runtime_state gil ; } ; struct _gilstate_runtime_state { int check_enabled ; _Py_atomic_address tstate_current ; PyInterpreterState* autoInterpreterState ; Py_tss_t autoTSSkey ; } ; typedef struct _Py_AuditHookEntry { struct _Py_AuditHookEntry* next ; Py_AuditHookFunction hookCFunction ; void* userData ; } _Py_AuditHookEntry ; typedef struct pyruntimestate { int _initialized ; int preinitializing ; int preinitialized ; int core_initialized ; int initialized ; _Py_atomic_address _finalizing ; struct pyinterpreters { PyThread_type_lock mutex ; PyInterpreterState* head ; PyInterpreterState* main ; int64_t next_id ; } interpreters ; struct _xidregistry { PyThread_type_lock mutex ; struct _xidregitem* head ; } xidregistry ; unsigned long main_thread ; # define NEXITFUNCS 3 2)",
    "insertText": "void(*exitfuncs[NEXITFUNCS])(void)"
  },
  {
    "label": "PyAPI_DATA()",
    "kind": "Method",
    "detail": "Function (int nexitfuncs ; struct _ceval_runtime_state ceval ; struct _gilstate_runtime_state gilstate ; PyPreConfig preconfig ; Py_OpenCodeHookFunction open_code_hook ; void* open_code_userdata ; _Py_AuditHookEntry* audit_hook_head ; struct _Py_unicode_runtime_ids unicode_ids ; struct _Py_global_objects global_objects ; PyInterpreterState _main_interpreter ; } _PyRuntimeState ;)",
    "insertText": "PyAPI_DATA(_PyRuntimeState)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyStatus) _PyRuntimeState_Init(_PyRuntimeState *runtime)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _PyRuntimeState_Fini(_PyRuntimeState *runtime)"
  },
  {
    "label": "_PyRuntimeState_ReInitThreads()",
    "kind": "Method",
    "detail": "Function (# ifdef HAVE_FORK PyStatus)",
    "insertText": "_PyRuntimeState_ReInitThreads(_PyRuntimeState *runtime)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "PyAPI_FUNC(PyStatus) _PyRuntime_Initialize(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _PyRuntime_Finalize(void)"
  },
  {
    "label": "_PyRuntimeState_GetFinalizing()",
    "kind": "Method",
    "detail": "Function (PyThreadState*)",
    "insertText": "_PyRuntimeState_GetFinalizing(_PyRuntimeState *runtime)"
  },
  {
    "label": "_PyRuntimeState_SetFinalizing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "_PyRuntimeState_SetFinalizing(_PyRuntimeState *runtime, PyThreadState *tstate)"
  },
  {
    "label": "_Py_atomic_store_relaxed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_atomic_store_relaxed(&runtime->_finalizing, (uintptr_t)tstate)"
  }
]