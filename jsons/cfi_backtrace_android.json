[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CFIRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CFIRow"
  },
  {
    "label": "CFICache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFICache"
  },
  {
    "label": "AddrAndCFI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AddrAndCFI"
  },
  {
    "label": "GetInitializedInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_CFI_BACKTRACE_ANDROID_H_ # define BASE_TRACE_EVENT_CFI_BACKTRACE_ANDROID_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include \" base / base_export . h \" # include \" base / debug / debugging_buildflags . h \" # include \" base / files / memory_mapped_file . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / raw_ptr . h \" # include \" base / threading / thread_local_storage . h \" namespace base { namespace trace_event { class BASE_EXPORT CFIBacktraceAndroid { public : CFIBacktraceAndroid*)",
    "insertText": "GetInitializedInstance()"
  },
  {
    "label": "is_chrome_address()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_chrome_address(uintptr_t pc)"
  },
  {
    "label": "executable_start_addr()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "executable_start_addr()"
  },
  {
    "label": "executable_end_addr()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "executable_end_addr()"
  },
  {
    "label": "can_unwind_stack_frames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "can_unwind_stack_frames()"
  },
  {
    "label": "Unwind()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Unwind(uintptr_t pc, uintptr_t sp, uintptr_t lr, const void** out_trace, size_t max_depth)"
  },
  {
    "label": "AllocateCacheForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateCacheForCurrentThread()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct CFIRow { bool)",
    "insertText": "operator(const CFIBacktraceAndroid::CFIRow& o)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(CFIBacktraceAndroidTest, TestCFICache)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(CFIBacktraceAndroidTest, TestFindCFIRow)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(CFIBacktraceAndroidTest, TestUnwinding)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (class CFICache { public : void)",
    "insertText": "Add(uintptr_t address, CFIRow cfi)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Find(uintptr_t address, CFIRow* cfi)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (const int kLimit = 5 0 9 ; struct AddrAndCFI { uintptr_t address ; CFIRow cfi ; } ; AddrAndCFI cache_ [ kLimit ] = { } ; } ;)",
    "insertText": "static_assert(sizeof(CFIBacktraceAndroid::CFICache) < 4096, \"The cache does not fit in a single page.\")"
  },
  {
    "label": "CFIBacktraceAndroid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFIBacktraceAndroid()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "ParseCFITables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCFITables()"
  },
  {
    "label": "GetThreadLocalCFICache()",
    "kind": "Method",
    "detail": "Function (CFICache*)",
    "insertText": "GetThreadLocalCFICache()"
  }
]