[
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpression"
  },
  {
    "label": "UMaterialExpressionCustomOutput",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionCustomOutput"
  },
  {
    "label": "UMaterialParameterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialParameterCollection"
  },
  {
    "label": "FMaterialLayersFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialLayersFunctions"
  },
  {
    "label": "FEmitContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitContext"
  },
  {
    "label": "FMaterialConnectionKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialConnectionKey"
  },
  {
    "label": "FMaterialCachedHLSLTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCachedHLSLTree"
  },
  {
    "label": "FMaterialHLSLGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialHLSLGenerator"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" HLSLTree / HLSLTree . h \" # include \" RHIDefinitions . h \" # include \" SceneTypes . h \" # include \" Misc / MemStack . h \" class UMaterial ; class UMaterialExpression ; class UMaterialExpressionCustomOutput ; class UMaterialParameterCollection ; struct FMaterialLayersFunctions ; namespace UE { namespace HLSLTree { class FEmitContext ; } } struct FMaterialConnectionKey { const UObject* InputObject = nullptr ; const UObject* OutputObject = nullptr ; int32 InputIndex = INDEX_NONE ; int32 OutputIndex = INDEX_NONE ; } ; uint32)",
    "insertText": "GetTypeHash(const FMaterialConnectionKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMaterialConnectionKey& Lhs, const FMaterialConnectionKey& Rhs)"
  },
  {
    "label": "FMaterialCachedHLSLTree()",
    "kind": "Method",
    "detail": "Function (} class FMaterialCachedHLSLTree { public : const FMaterialCachedHLSLTree EmptyTree ;)",
    "insertText": "FMaterialCachedHLSLTree()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GenerateTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateTree(UMaterial* Material, const FMaterialLayersFunctions* LayerOverrides, UMaterialExpression* PreviewExpression)"
  },
  {
    "label": "GetTypeRegistry()",
    "kind": "Method",
    "detail": "Function (UE::Shader::FStructTypeRegistry&)",
    "insertText": "GetTypeRegistry()"
  },
  {
    "label": "EmitSharedCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSharedCode(FStringBuilderBase& OutCode)"
  },
  {
    "label": "IsAttributeUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAttributeUsed(UE::HLSLTree::FEmitContext& Context, UE::HLSLTree::FEmitScope& Scope, const UE::HLSLTree::FPreparedType& ResultType, EMaterialProperty Property)"
  },
  {
    "label": "GetMaterialAttributesDefaultValue()",
    "kind": "Method",
    "detail": "Function (private : const UE::Shader::FValue&)",
    "insertText": "GetMaterialAttributesDefaultValue()"
  }
]