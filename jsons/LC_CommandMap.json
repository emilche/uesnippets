[
  {
    "label": "DuplexPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplexPipe"
  },
  {
    "label": "CommandMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommandMap"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "ReceiveAndCallAction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Commands . h \" # include \" LC_DuplexPipe . h \" class DuplexPipe ; class CommandMap { template<class T> bool)",
    "insertText": "ReceiveAndCallAction(const DuplexPipe* pipe, void* context, void* payload, size_t payloadSize)"
  },
  {
    "label": "ReceiveCommand()",
    "kind": "Method",
    "detail": "Function (T::CommandType command = { } ; const bool success = pipe ->)",
    "insertText": "ReceiveCommand(&command, payload, payloadSize)"
  },
  {
    "label": "SendAck()",
    "kind": "Method",
    "detail": "Function (pipe ->)",
    "insertText": "SendAck()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} public : typedef)",
    "insertText": "bool(*Action)(const DuplexPipe*, void*, void*, size_t)"
  },
  {
    "label": "CommandMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommandMap(void)"
  },
  {
    "label": "RegisterAction()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "RegisterAction(void)"
  },
  {
    "label": "HandleCommands()",
    "kind": "Method",
    "detail": "Function (m_actions [ T::CommandType::ID ] =& ReceiveAndCallAction<T> ; } bool)",
    "insertText": "HandleCommands(const DuplexPipe* pipe, void* context)"
  }
]