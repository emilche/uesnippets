[
  {
    "label": "FTileTexCoordVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTileTexCoordVertexBuffer"
  },
  {
    "label": "FTileIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTileIndexBuffer"
  },
  {
    "label": "FBufferScatterUploader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferScatterUploader"
  },
  {
    "label": "FScatterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScatterInfo"
  },
  {
    "label": "FPersistentBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPersistentBuffer"
  },
  {
    "label": "FStructuredBufferTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructuredBufferTraits"
  },
  {
    "label": "FByteAddressBufferTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FByteAddressBufferTraits"
  },
  {
    "label": "TPersistentBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPersistentBuffer"
  },
  {
    "label": "TBufferScatterUploader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBufferScatterUploader"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "FUploadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUploadData"
  },
  {
    "label": "ShouldSkipNaniteLPIs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderResource . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RenderGraphUtils . h \" bool)",
    "insertText": "ShouldSkipNaniteLPIs(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "FTileTexCoordVertexBuffer()",
    "kind": "Method",
    "detail": "Function (class FTileTexCoordVertexBuffer : public FVertexBuffer { public :)",
    "insertText": "FTileTexCoordVertexBuffer(int32 InNumTileQuadsInBuffer) : NumTileQuadsInBuffer(InNumTileQuadsInBuffer)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32 Size =)",
    "insertText": "sizeof(FVector2f)"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"FTileTexCoordVertexBuffer\"))"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (VertexBufferRHI = RHICmdList .)",
    "insertText": "CreateBuffer(Size, BUF_Static | BUF_VertexBuffer, 0, ERHIAccess::VertexOrIndexBuffer, CreateInfo)"
  },
  {
    "label": "Vertices()",
    "kind": "Method",
    "detail": "Function (FVector2f*)",
    "insertText": "Vertices(FVector2f*)RHICmdList.LockBuffer(VertexBufferRHI, 0, Size, RLM_WriteOnly)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (Vertices [ SpriteIndex* 4 + 0 ] =)",
    "insertText": "FVector2f(0.0f, 0.0f)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (Vertices [ SpriteIndex* 4 + 1 ] =)",
    "insertText": "FVector2f(0.0f, 1.0f)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (Vertices [ SpriteIndex* 4 + 2 ] =)",
    "insertText": "FVector2f(1.0f, 1.0f)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (Vertices [ SpriteIndex* 4 + 3 ] =)",
    "insertText": "FVector2f(1.0f, 0.0f)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (} RHICmdList .)",
    "insertText": "UnlockBuffer(VertexBufferRHI)"
  },
  {
    "label": "FTileIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} const uint32 NumTileQuadsInBuffer ; } ; class FTileIndexBuffer : public FIndexBuffer { public :)",
    "insertText": "FTileIndexBuffer(int32 InNumTileQuadsInBuffer) : NumTileQuadsInBuffer(InNumTileQuadsInBuffer)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32 Size =)",
    "insertText": "sizeof(uint16)"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"FTileIndexBuffer\"))"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (IndexBufferRHI = RHICmdList .)",
    "insertText": "CreateBuffer(Size, BUF_Static | BUF_IndexBuffer, Stride, ERHIAccess::VertexOrIndexBuffer, CreateInfo)"
  },
  {
    "label": "Indices()",
    "kind": "Method",
    "detail": "Function (uint16*)",
    "insertText": "Indices(uint16*)RHICmdList.LockBuffer(IndexBufferRHI, 0, Size, RLM_WriteOnly)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (Indices [ SpriteIndex* 6 + 0 ] = SpriteIndex* 4 + 0 ; Indices [ SpriteIndex* 6 + 1 ] = SpriteIndex* 4 + 1 ; Indices [ SpriteIndex* 6 + 2 ] = SpriteIndex* 4 + 2 ; Indices [ SpriteIndex* 6 + 3 ] = SpriteIndex* 4 + 0 ; Indices [ SpriteIndex* 6 + 4 ] = SpriteIndex* 4 + 2 ; Indices [ SpriteIndex* 6 + 5 ] = SpriteIndex* 4 + 3 ; } RHICmdList .)",
    "insertText": "UnlockBuffer(IndexBufferRHI)"
  },
  {
    "label": "GetOneTileQuadVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} const uint32 NumTileQuadsInBuffer ; } ; FBufferRHIRef&)",
    "insertText": "GetOneTileQuadVertexBuffer()"
  },
  {
    "label": "GetOneTileQuadIndexBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef&)",
    "insertText": "GetOneTileQuadIndexBuffer()"
  },
  {
    "label": "AddBufferLockReadbackPass()",
    "kind": "Method",
    "detail": "Function (template<ReadbackProcessingLambdaType> void)",
    "insertText": "AddBufferLockReadbackPass(FRDGBuilder& GraphBuilder, TRefCountPtr<FRDGPooledBuffer> SourceBuffer, uint32 NumBytes, ReadbackProcessingLambdaType &&ReadbackProcessingLambda)"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (FRHIBuffer* SourceBufferRHI = SourceBuffer ->)",
    "insertText": "GetRHI()"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(RDG_EVENT_NAME(\"BufferLockReadbackPass\"), ERDGPassFlags::None, [ReadbackProcessingLambdaType=MoveTemp(ReadbackProcessingLambda), SourceBufferRHI, NumBytes](FRHICommandList& RHICmdList) { const void *GPUData = (uint32*)RHICmdList.LockBuffer(SourceBufferRHI, 0, NumBytes, RLM_ReadOnly); ReadbackProcessingLambdaType(GPUData); RHICmdList.UnlockBuffer(SourceBufferRHI); })"
  },
  {
    "label": "UploadTo()",
    "kind": "Method",
    "detail": "Function (} class FBufferScatterUploader { public : struct FScatterInfo { FRDGBuffer* ScatterOffsetsRDG ; int32 NumScatters ; } ; void)",
    "insertText": "UploadTo(FRDGBuilder& GraphBuilder, FRDGBuffer *DestBuffer, FRDGBuffer *ScatterOffsets, FRDGBuffer *Values, uint32 NumScatters, uint32 NumBytesPerElement, int32 NumValuesPerScatter)"
  },
  {
    "label": "FPersistentBuffer()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::RendererPrivateUtils::Implementation { class FPersistentBuffer { public :)",
    "insertText": "FPersistentBuffer(int32 InMinimumNumElementsReserved, const TCHAR *InName, bool bInRoundUpToPOT = true)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (FRDGBuffer*)",
    "insertText": "Register(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "ResizeBufferIfNeeded()",
    "kind": "Method",
    "detail": "Function (protected : FRDGBuffer*)",
    "insertText": "ResizeBufferIfNeeded(FRDGBuilder& GraphBuilder, const FRDGBufferDesc& BufferDesc)"
  },
  {
    "label": "CreateUploadBuffer()",
    "kind": "Method",
    "detail": "Function (int32 MinimumNumElementsReserved = 0 ; const TCHAR* Name = nullptr ; bool bRoundUpToPOT = true ; TRefCountPtr<FRDGPooledBuffer> PooledBuffer ; } ; struct FStructuredBufferTraits { template<ElementType,AllocatorType> FRDGBuffer*)",
    "insertText": "CreateUploadBuffer(FRDGBuilder& GraphBuilder, const TCHAR* Name, const TArray<ElementType, AllocatorType> &InitialData)"
  },
  {
    "label": "CreateDesc()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferDesc)",
    "insertText": "CreateDesc(uint32 BytesPerElement, uint32 NumElements)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint32 NumBytes = BytesPerElement* NumElements ;)",
    "insertText": "check((NumBytes & 15) == 0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} bool bAutoValuesPerScatter = true ; } ; template<InValueType,InBufferTraits> class TPersistentBuffer : public FPersistentBuffer { public : using ValueType = InValueType ; using BufferTraits = InBufferTraits ; uint32 BytesPerElement =)",
    "insertText": "sizeof(ValueType)"
  },
  {
    "label": "TPersistentBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPersistentBuffer(int32 InMinimumNumElementsReserved, const TCHAR *InName, bool bInRoundUpToPOT = true) : FPersistentBuffer(InMinimumNumElementsReserved, InName, bInRoundUpToPOT)"
  },
  {
    "label": "ResizeBufferIfNeeded()",
    "kind": "Method",
    "detail": "Function (} FRDGBuffer*)",
    "insertText": "ResizeBufferIfNeeded(FRDGBuilder& GraphBuilder, int32 InNewMinNumElements)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 NewMinNumElements =)",
    "insertText": "Max(MinimumNumElementsReserved, bRoundUpToPOT ? int32(FMath::RoundUpToPowerOfTwo(InNewMinNumElements)) : InNewMinNumElements)"
  },
  {
    "label": "ValidateGPUData()",
    "kind": "Method",
    "detail": "Function (} template<ValueCheckFuncType> void)",
    "insertText": "ValidateGPUData(FRDGBuilder& GraphBuilder, TConstArrayView<ValueType> HostValues, ValueCheckFuncType &&ValueCheckFunc)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK)",
    "insertText": "check(HostValues.Num() == 0 || PooledBuffer.IsValid() && HostValues.Num() <= int32(PooledBuffer->Desc.NumElements))"
  },
  {
    "label": "AddBufferLockReadbackPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBufferLockReadbackPass(GraphBuilder, PooledBuffer, uint32(HostValues.GetTypeSize() * HostValues.Num()), [ValueCheckFunc=MoveTemp(ValueCheckFunc), HostValues](const void *LockedData) { const ValueType *GPUValuePtr = reinterpret_cast<const ValueType*>(LockedData); for (int32 Index = 0; Index < HostValues.Num(); ++Index) { ValueCheckFunc(Index, HostValues[Index], GPUValuePtr[Index]); } })"
  },
  {
    "label": "GetPooledBuffer()",
    "kind": "Method",
    "detail": "Function (} # endif } TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "GetPooledBuffer()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (int32 NumValuesPerScatter = InNumValuesPerScatter ;)",
    "insertText": "static_assert((BytesPerElement % 4) == 0, \"The struct used must be 4-byte aligned\")"
  },
  {
    "label": "TBufferScatterUploader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TBufferScatterUploader(int32 NumScatters = 0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(NumScatters)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 NumScatters)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (UploadData . Values .)",
    "insertText": "Reserve(NumScatters * NumValuesPerScatter)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const ValueType &Value, int32 ScatterOffset)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UploadData . Values .)",
    "insertText": "Add(Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UploadData . ScatterOffsets .)",
    "insertText": "Add(ScatterOffset)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const TConstArrayView<ValueType> &InValues, int32 ScatterOffset)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (UploadData . Values .)",
    "insertText": "Append(InValues)"
  },
  {
    "label": "AddMultiple()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMultiple(const TConstArrayView<ValueType> &InValues, int32 FirstScatterOffset)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UploadData . ScatterOffsets .)",
    "insertText": "Add(FirstScatterOffset + Index)"
  },
  {
    "label": "AddMultiple_GetRef()",
    "kind": "Method",
    "detail": "Function (} } TArrayView<ValueType>)",
    "insertText": "AddMultiple_GetRef(int32 FirstScatterOffset, int32 NumValues)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 SrcOffset = UploadData . Values .)",
    "insertText": "Num()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (UploadData . Values .)",
    "insertText": "AddUninitialized(NumValues)"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "MakeArrayView(&UploadData.Values[SrcOffset], NumValues)"
  },
  {
    "label": "GetNumScatters()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumScatters()"
  },
  {
    "label": "ResizeAndUploadTo()",
    "kind": "Method",
    "detail": "Function (} FRDGBuffer*)",
    "insertText": "ResizeAndUploadTo(FRDGBuilder& GraphBuilder, TPersistentBuffer<ValueType, BufferTraits> &DestDataBuffer, int32 DestDataMinimumSize, FScatterInfo &OutScatterInfo)"
  },
  {
    "label": "ResizeBufferIfNeeded()",
    "kind": "Method",
    "detail": "Function (FRDGBuffer* DestBufferRDG = DestDataBuffer .)",
    "insertText": "ResizeBufferIfNeeded(GraphBuilder, DestDataMinimumSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutScatterInfo . ScatterOffsetsRDG = nullptr ;)",
    "insertText": "if(OutScatterInfo.NumScatters != 0u)"
  },
  {
    "label": "FUploadData()",
    "kind": "Method",
    "detail": "Function (UploadDataProxy = GraphBuilder . AllocObject<)",
    "insertText": "FUploadData(MoveTemp(UploadData))"
  },
  {
    "label": "CreateUploadBuffer()",
    "kind": "Method",
    "detail": "Function (OutScatterInfo . ScatterOffsetsRDG =)",
    "insertText": "CreateUploadBuffer(GraphBuilder, TEXT(\"ScatterUploader.Offsets\"), UploadDataProxy->ScatterOffsets)"
  },
  {
    "label": "CreateUploadBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBuffer* ValuesRDG =)",
    "insertText": "CreateUploadBuffer(GraphBuilder, TEXT(\"ScatterUploader.Values\"), UploadDataProxy->Values)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 ElementsPerScatter = NumValuesPerScatter ;)",
    "insertText": "if(BufferTraits::bAutoValuesPerScatter)"
  },
  {
    "label": "UploadTo()",
    "kind": "Method",
    "detail": "Function (ElementSize* = ElementsPerScatter ; ElementsPerScatter = INDEX_NONE ; })",
    "insertText": "UploadTo(GraphBuilder, DestBufferRDG, OutScatterInfo.ScatterOffsetsRDG, ValuesRDG, OutScatterInfo.NumScatters, ElementSize, ElementsPerScatter)"
  },
  {
    "label": "ResizeAndUploadTo()",
    "kind": "Method",
    "detail": "Function (} return DestBufferRDG ; } FRDGBuffer*)",
    "insertText": "ResizeAndUploadTo(FRDGBuilder& GraphBuilder, TPersistentBuffer<ValueType, BufferTraits> &DestDataBuffer, int32 DestDataMinimumSize)"
  },
  {
    "label": "ResizeAndUploadTo()",
    "kind": "Method",
    "detail": "Function (FScatterInfo ScatterInfo = { nullptr,0 } ; return)",
    "insertText": "ResizeAndUploadTo(GraphBuilder, DestDataBuffer, DestDataMinimumSize, ScatterInfo)"
  },
  {
    "label": "AddClearIndirectDispatchArgsPass()",
    "kind": "Method",
    "detail": "Function (} private : struct FUploadData { TArray<ValueType> Values ; TArray<uint32> ScatterOffsets ; } ; FUploadData* UploadDataProxy = nullptr ; FUploadData UploadData ; } ; } template<InValueType> using TPersistentStructuredBuffer = UE::RendererPrivateUtils::Implementation::TPersistentBuffer<InValueType,UE::RendererPrivateUtils::Implementation::FStructuredBufferTraits> ; template<InValueType,int32 InNumValuesPerScatter = 1> using TStructuredBufferScatterUploader = UE::RendererPrivateUtils::Implementation::TBufferScatterUploader<InValueType,UE::RendererPrivateUtils::Implementation::FStructuredBufferTraits,InNumValuesPerScatter> ; template<InValueType> using TPersistentByteAddressBuffer = UE::RendererPrivateUtils::Implementation::TPersistentBuffer<InValueType,UE::RendererPrivateUtils::Implementation::FByteAddressBufferTraits> ; template<InValueType,int32 InNumValuesPerScatter = 1> using TByteAddressBufferScatterUploader = UE::RendererPrivateUtils::Implementation::TBufferScatterUploader<InValueType,UE::RendererPrivateUtils::Implementation::FByteAddressBufferTraits,InNumValuesPerScatter> ; void)",
    "insertText": "AddClearIndirectDispatchArgsPass(FRDGBuilder& GraphBuilder, ERHIFeatureLevel::Type FeatureLevel, FRDGBufferRef IndirectArgsRDG, const FIntVector3 &DimClearValue, uint32 NumIndirectArgs, uint32 IndirectArgStride)"
  },
  {
    "label": "AddClearIndirectDispatchArgs1DPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearIndirectDispatchArgs1DPass(FRDGBuilder& GraphBuilder, ERHIFeatureLevel::Type FeatureLevel, FRDGBufferRef IndirectArgsRDG, uint32 NumIndirectArgs, uint32 IndirectArgStride)"
  },
  {
    "label": "AddClearIndirectDispatchArgsPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddClearIndirectDispatchArgsPass(GraphBuilder, FeatureLevel, IndirectArgsRDG, FIntVector3(0,1,1), NumIndirectArgs, IndirectArgStride)"
  },
  {
    "label": "CreateAndClearIndirectDispatchArgs()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef)",
    "insertText": "CreateAndClearIndirectDispatchArgs(FRDGBuilder& GraphBuilder, ERHIFeatureLevel::Type FeatureLevel, const TCHAR* Name, const FIntVector3 &DimClearValue, uint32 NumIndirectArgs, uint32 IndirectArgStride)"
  },
  {
    "label": "CreateAndClearIndirectDispatchArgs1D()",
    "kind": "Method",
    "detail": "Function (FRDGBufferRef)",
    "insertText": "CreateAndClearIndirectDispatchArgs1D(FRDGBuilder& GraphBuilder, ERHIFeatureLevel::Type FeatureLevel, const TCHAR* Name)"
  }
]