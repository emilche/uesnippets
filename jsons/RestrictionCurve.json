[
  {
    "label": "FCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurve"
  },
  {
    "label": "FEntityGeom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityGeom"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "PointType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointType"
  },
  {
    "label": "FRestrictionCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADKernelArchive . h \" # include \" Core / Types . h \" # include \" Geo / Curves / SurfacicCurve . h \" # include \" Geo / GeoEnum . h \" # include \" Geo / GeoPoint . h \" # include \" Geo / Sampling / SurfacicPolyline . h \" # include \" Geo / Surfaces / Surface . h \" # include \" Math / Boundary . h \" # include \" Math / MatrixH . h \" # include \" Math / Point . h \" namespace UE::CADKernel { class FCurve ; class FEntityGeom ; class FRestrictionCurve : public FSurfacicCurve { class FEntity ; class FTopologicalEdge ; protected : FSurfacicPolyline Polyline ; double MinLinearTolerance ;)",
    "insertText": "FRestrictionCurve(TSharedRef<FSurface> InCarrierSurface, TSharedRef<FCurve> InCurve2D) : FSurfacicCurve(InCurve2D, InCarrierSurface) , Polyline(InCarrierSurface, InCurve2D)"
  },
  {
    "label": "ComputeMinimalTolerance()",
    "kind": "Method",
    "detail": "Function (MinLinearTolerance = Boundary .)",
    "insertText": "ComputeMinimalTolerance()"
  },
  {
    "label": "FRestrictionCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRestrictionCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "GetMinLinearTolerance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetMinLinearTolerance()"
  },
  {
    "label": "Approximate2DPoint()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "Approximate2DPoint(double InCoordinate)"
  },
  {
    "label": "Approximate3DPoint()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "Approximate3DPoint(double InCoordinate)"
  },
  {
    "label": "GetTangentAt()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "GetTangentAt(double InCoordinate)"
  },
  {
    "label": "GetTangent2DAt()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "GetTangent2DAt(double InCoordinate)"
  },
  {
    "label": "Approximate2DPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Approximate2DPoints(const TArray<double>& InCoordinates, TArray<FPoint2D>& OutPoints)"
  },
  {
    "label": "Approximate3DPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Approximate3DPoints(const TArray<double>& InCoordinates, TArray<FPoint>& OutPoints)"
  },
  {
    "label": "ApproximatePolyline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApproximatePolyline(FSurfacicPolyline& OutPolyline)"
  },
  {
    "label": "ApproximatePolyline()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "ApproximatePolyline(OutPolyline)"
  },
  {
    "label": "GetCoordinateOfProjectedPoint()",
    "kind": "Method",
    "detail": "Function (} template<class PointType> double)",
    "insertText": "GetCoordinateOfProjectedPoint(const FLinearBoundary& InBoundary, const PointType& PointOnEdge, PointType& ProjectedPoint)"
  },
  {
    "label": "ProjectPoints()",
    "kind": "Method",
    "detail": "Function (} template<class PointType> void)",
    "insertText": "ProjectPoints(const FLinearBoundary& InBoundary, const TArray<PointType>& InPointsToProject, TArray<double>& ProjectedPointCoordinates, TArray<PointType>& ProjectedPoints)"
  },
  {
    "label": "ProjectPoints()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "ProjectPoints(InBoundary, InPointsToProject, ProjectedPointCoordinates, ProjectedPoints)"
  },
  {
    "label": "ProjectTwinCurvePoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProjectTwinCurvePoints(const FLinearBoundary& InBoundary, const TArray<FPoint>& InPointsToProject, bool bSameOrientation, TArray<double>& OutProjectedPointCoords, double ToleranceOfProjection)"
  },
  {
    "label": "ProjectCoincidentalPolyline()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "ProjectCoincidentalPolyline(InBoundary, InPointsToProject, bSameOrientation, OutProjectedPointCoords, ToleranceOfProjection)"
  },
  {
    "label": "ComputeIntersectionsWithIsos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeIntersectionsWithIsos(const FLinearBoundary& InBoundary, const TArray<double>& InIsoCoordinates, const EIso InTypeIso, const FSurfacicTolerance& ToleranceIso, TArray<double>& OutIntersection)"
  },
  {
    "label": "ComputeIntersectionsWithIsos()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "ComputeIntersectionsWithIsos(InBoundary, InIsoCoordinates, InTypeIso, ToleranceIso, OutIntersection)"
  },
  {
    "label": "CheckIfDegenerated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckIfDegenerated(const FLinearBoundary& InBoundary, bool& bDegeneration2D, bool& bDegeneration3D, double& Length3D)"
  },
  {
    "label": "GetCarrierSurface()",
    "kind": "Method",
    "detail": "Function (bDegeneration2D = true ; bDegeneration3D = true ; Length3D = 0 . ; return ; } double Tolerance =)",
    "insertText": "GetCarrierSurface()->Get3DTolerance()"
  },
  {
    "label": "GetCarrierSurface()",
    "kind": "Method",
    "detail": "Function (const FSurfacicTolerance& Tolerances2D =)",
    "insertText": "GetCarrierSurface()->GetIsoTolerances()"
  },
  {
    "label": "CheckIfDegenerated()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "CheckIfDegenerated(Tolerance, Tolerances2D, InBoundary, bDegeneration2D, bDegeneration3D, Length3D)"
  },
  {
    "label": "GetExtremities()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetExtremities(const FLinearBoundary& InBoundary, FSurfacicCurveExtremities& Extremities)"
  },
  {
    "label": "GetExtremities()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "GetExtremities(InBoundary, Tolerance, Tolerances2D, Extremities)"
  },
  {
    "label": "GetToleranceAt()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetToleranceAt(const double InCoordinate)"
  },
  {
    "label": "Finder()",
    "kind": "Method",
    "detail": "Function (FDichotomyFinder)",
    "insertText": "Finder(Polyline.GetCoordinates())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 Index = Finder .)",
    "insertText": "Find(InCoordinate)"
  },
  {
    "label": "GetExtremityTolerances()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "GetExtremityTolerances(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 StartIndex = Finder .)",
    "insertText": "Find(InBoundary.Min)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 EndIndex = Finder .)",
    "insertText": "Find(InBoundary.Max)"
  },
  {
    "label": "ComputeLinearToleranceAt()",
    "kind": "Method",
    "detail": "Function (FPoint2D ExtremityTolerance ; ExtremityTolerance [ 0 ] = Polyline .)",
    "insertText": "ComputeLinearToleranceAt(Tolerance, MinLinearTolerance, StartIndex)"
  },
  {
    "label": "ComputeLinearToleranceAt()",
    "kind": "Method",
    "detail": "Function (ExtremityTolerance [ 1 ] = Polyline .)",
    "insertText": "ComputeLinearToleranceAt(Tolerance, MinLinearTolerance, EndIndex)"
  },
  {
    "label": "GetDiscretizationPoints()",
    "kind": "Method",
    "detail": "Function (} template<class PointType> void)",
    "insertText": "GetDiscretizationPoints(const FLinearBoundary& InBoundary, EOrientation Orientation, TArray<PointType>& OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "GetSubPolyline(InBoundary, Orientation, OutPoints)"
  },
  {
    "label": "GetDiscretizationPoints()",
    "kind": "Method",
    "detail": "Function (} template<class PointType> void)",
    "insertText": "GetDiscretizationPoints(const FLinearBoundary& InBoundary, TArray<double>& OutCoordinates, TArray<PointType>& OutPoints)"
  },
  {
    "label": "GetSubPolyline()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "GetSubPolyline(InBoundary, OutCoordinates, OutPoints)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Sample(const FLinearBoundary& InBoundary, const double DesiredSegmentLength, TArray<double>& OutCoordinates)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (Polyline .)",
    "insertText": "Sample(InBoundary, DesiredSegmentLength, OutCoordinates)"
  },
  {
    "label": "ApproximateLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ApproximateLength(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExtendTo(const FPoint2D& Point)"
  },
  {
    "label": "IsIso()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIso(EIso Iso, double ErrorTolerance = DOUBLE_SMALL_NUMBER)"
  },
  {
    "label": "Offset2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Offset2D(const FPoint2D& OffsetDirection)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  }
]