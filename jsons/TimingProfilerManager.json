[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTimerButterflyAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerButterflyAggregator"
  },
  {
    "label": "STimingProfilerWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingProfilerWindow"
  },
  {
    "label": "FTimingProfilerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingProfilerManager"
  },
  {
    "label": "FTimingProfilerActionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingProfilerActionManager"
  },
  {
    "label": "FTimingProfilerManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Ticker . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Insights / InsightsManager . h \" # include \" Insights / IUnrealInsightsModule . h \" # include \" Insights / TimingProfiler / TimingProfilerCommands . h \" # include \" Insights / TimingProfiler / ViewModels / TimerNode . h \" namespace UE::Insights { enum class ETimingEventsColoringMode : uint32 { ByTimerName,ByTimerId,BySourceFile,ByDuration,Count } ; } namespace UE::Insights::TimingProfiler { class FTimerButterflyAggregator ; class STimingProfilerWindow ; class FTimingProfilerManager : public TSharedFromThis<FTimingProfilerManager>,public IInsightsComponent { class FTimingProfilerActionManager ; public : uint32 UnlimitedEventDepth = 1 0 0 0 ; public :)",
    "insertText": "FTimingProfilerManager(TSharedRef<FUICommandList> InCommandList)"
  },
  {
    "label": "FTimingProfilerManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTimingProfilerManager()"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingProfilerManager>)",
    "insertText": "CreateInstance()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimingProfilerManager>)",
    "insertText": "Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(IUnrealInsightsModule& InsightsModule)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "RegisterMajorTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMajorTabs(IUnrealInsightsModule& InsightsModule)"
  },
  {
    "label": "UnregisterMajorTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMajorTabs()"
  },
  {
    "label": "OnWindowClosedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowClosedEvent()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<FUICommandList>)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "GetCommands()",
    "kind": "Method",
    "detail": "Function (const FTimingProfilerCommands&)",
    "insertText": "GetCommands()"
  },
  {
    "label": "GetActionManager()",
    "kind": "Method",
    "detail": "Function (FTimingProfilerActionManager&)",
    "insertText": "GetActionManager()"
  },
  {
    "label": "GetProfilerWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STimingProfilerWindow>)",
    "insertText": "GetProfilerWindow()"
  },
  {
    "label": "IsFramesTrackVisible()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsFramesTrackVisible()"
  },
  {
    "label": "ShowHideFramesTrack()",
    "kind": "Method",
    "detail": "Function (bIsFramesTrackVisible = bIsVisible ; } void)",
    "insertText": "ShowHideFramesTrack(const bool bIsVisible)"
  },
  {
    "label": "IsTimingViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsTimingViewVisible()"
  },
  {
    "label": "ShowHideTimingView()",
    "kind": "Method",
    "detail": "Function (bIsTimingViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideTimingView(const bool bIsVisible)"
  },
  {
    "label": "IsTimersViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsTimersViewVisible()"
  },
  {
    "label": "ShowHideTimersView()",
    "kind": "Method",
    "detail": "Function (bIsTimersViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideTimersView(const bool bIsVisible)"
  },
  {
    "label": "IsCallersTreeViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsCallersTreeViewVisible()"
  },
  {
    "label": "ShowHideCallersTreeView()",
    "kind": "Method",
    "detail": "Function (bIsCallersTreeViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideCallersTreeView(const bool bIsVisible)"
  },
  {
    "label": "IsCalleesTreeViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsCalleesTreeViewVisible()"
  },
  {
    "label": "ShowHideCalleesTreeView()",
    "kind": "Method",
    "detail": "Function (bIsCalleesTreeViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideCalleesTreeView(const bool bIsVisible)"
  },
  {
    "label": "IsStatsCountersViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsStatsCountersViewVisible()"
  },
  {
    "label": "ShowHideStatsCountersView()",
    "kind": "Method",
    "detail": "Function (bIsStatsCountersViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideStatsCountersView(const bool bIsVisible)"
  },
  {
    "label": "IsLogViewVisible()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "IsLogViewVisible()"
  },
  {
    "label": "ShowHideLogView()",
    "kind": "Method",
    "detail": "Function (bIsLogViewVisible = bIsVisible ; } void)",
    "insertText": "ShowHideLogView(const bool bIsVisible)"
  },
  {
    "label": "OnSessionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSessionChanged()"
  },
  {
    "label": "GetTimerNode()",
    "kind": "Method",
    "detail": "Function (FTimerNodePtr)",
    "insertText": "GetTimerNode(uint32 TimerId)"
  },
  {
    "label": "GetSelectedTimer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSelectedTimer()"
  },
  {
    "label": "ToggleTimingViewMainGraphEventSeries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTimingViewMainGraphEventSeries(uint32 InTimerId)"
  },
  {
    "label": "OnThreadFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadFilterChanged()"
  },
  {
    "label": "ResetCallersAndCallees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCallersAndCallees()"
  },
  {
    "label": "UpdateCallersAndCallees()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCallersAndCallees()"
  },
  {
    "label": "GetTimerButterflyAggregator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTimerButterflyAggregator>)",
    "insertText": "GetTimerButterflyAggregator()"
  },
  {
    "label": "UpdateAggregatedCounterStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAggregatedCounterStats()"
  },
  {
    "label": "GetLogListingName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetLogListingName()"
  },
  {
    "label": "GetEventDepthLimit()",
    "kind": "Method",
    "detail": "Function (ColoringMode = InColoringMode ; } uint32)",
    "insertText": "GetEventDepthLimit()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (EventDepthLimit = InEventDepthLimit ; } private : void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "SpawnTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab(const FSpawnTabArgs& Args)"
  },
  {
    "label": "CanSpawnTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSpawnTab(const FSpawnTabArgs& Args)"
  },
  {
    "label": "OnTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabClosed(TSharedRef<SDockTab> TabBeingClosed)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "FinishTimerButterflyAggregation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishTimerButterflyAggregation()"
  },
  {
    "label": "AssignProfilerWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignProfilerWindow(const TSharedRef<STimingProfilerWindow>& InProfilerWindow)"
  },
  {
    "label": "RemoveProfilerWindow()",
    "kind": "Method",
    "detail": "Function (ProfilerWindowWeakPtr = InProfilerWindow ; } void)",
    "insertText": "RemoveProfilerWindow()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ProfilerWindowWeakPtr .)",
    "insertText": "Reset()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} private : bool bIsInitialized ; bool bIsAvailable ; FAvailabilityCheck AvailabilityCheck ; FTickerDelegate OnTick ; FTSTicker::FDelegateHandle OnTickHandle ; TSharedRef<FUICommandList> CommandList ; FTimingProfilerActionManager ActionManager ; TWeakPtr<STimingProfilerWindow> ProfilerWindowWeakPtr ; bool bIsFramesTrackVisible ; bool bIsTimingViewVisible ; bool bIsTimersViewVisible ; bool bIsCallersTreeViewVisible ; bool bIsCalleesTreeViewVisible ; bool bIsStatsCountersViewVisible ; bool bIsLogViewVisible ; double SelectionStartTime ; double SelectionEndTime ; uint32 InvalidTimerId =)",
    "insertText": "uint32(-1)"
  }
]