[
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FPBDRigidsEvolutionGBF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsEvolutionGBF"
  },
  {
    "label": "FCCDConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCCDConstraint"
  },
  {
    "label": "FCCDParticle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCCDParticle"
  },
  {
    "label": "FCCDManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCCDManager"
  },
  {
    "label": "FCCDHelpers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCCDHelpers"
  },
  {
    "label": "FCCDParticle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Collision / PBDCollisionConstraint . h \" # include \" Chaos / Collision / CollisionConstraintAllocator . h \" # include \" Chaos / ParticleHandleFwd . h \" namespace Chaos { class FPBDCollisionConstraint ; class FPBDRigidsEvolutionGBF ; struct FCCDConstraint ; struct FCCDParticle { TPBDRigidParticleHandle<FReal,3>* Particle ; TArray<FCCDParticle*> OverlappingDynamicParticles ; TArray<FCCDConstraint*> AttachedCCDConstraints ; int32 Island ; FReal TOI ; bool Done ;)",
    "insertText": "FCCDParticle() : Particle(nullptr) , Island(INDEX_NONE) , TOI(1.f) , Done(false)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OverlappingDynamicParticles .)",
    "insertText": "Reserve(8)"
  },
  {
    "label": "FCCDParticle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCCDParticle(TPBDRigidParticleHandle<FReal, 3>* InParticle) : Particle(InParticle) , Island(INDEX_NONE) , TOI(1.f) , Done(false)"
  },
  {
    "label": "AddOverlappingDynamicParticle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOverlappingDynamicParticle(FCCDParticle* const InParticle)"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraint(FCCDConstraint* const Constraint)"
  },
  {
    "label": "FCCDConstraint()",
    "kind": "Method",
    "detail": "Function (} ; struct FCCDConstraint { FPBDCollisionConstraint* SweptConstraint ; FCCDParticle* Particle [ 2 ] ; int32 Island ; int32 ProcessedCount ; int32 FastMovingKinematicIndex ; FVec3 NetImpulse ;)",
    "insertText": "FCCDConstraint() : SweptConstraint(nullptr)"
  },
  {
    "label": "Island()",
    "kind": "Method",
    "detail": "Function (nullptr,nullptr },)",
    "insertText": "Island(INDEX_NONE) , ProcessedCount(0) , FastMovingKinematicIndex(INDEX_NONE) , NetImpulse(0)"
  },
  {
    "label": "FCCDConstraint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCCDConstraint(FPBDCollisionConstraint* const InConstraint, FCCDParticle* InParticle[], const FVec3 Displacements[]) : SweptConstraint(InConstraint)"
  },
  {
    "label": "Island()",
    "kind": "Method",
    "detail": "Function (InParticle [ 0 ],InParticle [ 1 ] },)",
    "insertText": "Island(INDEX_NONE) , ProcessedCount(0) , FastMovingKinematicIndex(GetFastMovingKinematicIndex(InConstraint, Displacements)) , NetImpulse(0)"
  },
  {
    "label": "GetFastMovingKinematicIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFastMovingKinematicIndex(const FPBDCollisionConstraint* Constraint, const FVec3 Displacements[])"
  },
  {
    "label": "FCCDManager()",
    "kind": "Method",
    "detail": "Function (} ; class FCCDManager { public :)",
    "insertText": "FCCDManager()"
  },
  {
    "label": "ApplyConstraintsPhaseCCD()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyConstraintsPhaseCCD(const FReal Dt, Private::FCollisionConstraintAllocator *CollisionAllocator, const int32 NumDynamicParticles = TNumericLimits<int32>::Max())"
  },
  {
    "label": "ApplyCorrections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCorrections(const FReal Dt)"
  },
  {
    "label": "ApplySweptConstraints()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ApplySweptConstraints(const FReal Dt, TArrayView<FPBDCollisionConstraint* const> InSweptConstraints, const int32 NumDynamicParticles = TNumericLimits<int32>::Max())"
  },
  {
    "label": "UpdateParticleSweptConstraints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateParticleSweptConstraints(FCCDParticle* CCDParticle, const FReal IslandTOI, const FReal Dt)"
  },
  {
    "label": "UpdateSweptConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSweptConstraints(const FReal Dt, Private::FCollisionConstraintAllocator *CollisionAllocator)"
  },
  {
    "label": "OverwriteXUsingV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverwriteXUsingV(const FReal Dt)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(const FReal Dt, const int32 NumDynamicParticles = TNumericLimits<int32>::Max())"
  },
  {
    "label": "AssignParticleIslandsAndGroupParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignParticleIslandsAndGroupParticles()"
  },
  {
    "label": "AssignConstraintIslandsAndRecordConstraintNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignConstraintIslandsAndRecordConstraintNum()"
  },
  {
    "label": "GroupConstraintsWithIslands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupConstraintsWithIslands()"
  },
  {
    "label": "ApplyIslandSweptConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyIslandSweptConstraints(const int32 Island, const FReal Dt)"
  },
  {
    "label": "ApplyIslandSweptConstraints2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyIslandSweptConstraints2(const int32 Island, const FReal Dt)"
  },
  {
    "label": "ResetIslandParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetIslandParticles(const int32 Island)"
  },
  {
    "label": "ResetIslandConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetIslandConstraints(const int32 Island)"
  },
  {
    "label": "AdvanceParticleXToTOI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceParticleXToTOI(FCCDParticle *CCDParticle, const FReal TOI, const FReal Dt)"
  },
  {
    "label": "UpdateParticleP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateParticleP(FCCDParticle *CCDParticle, const FReal Dt)"
  },
  {
    "label": "ClipParticleP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClipParticleP(FCCDParticle *CCDParticle)"
  },
  {
    "label": "ClipParticleP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClipParticleP(FCCDParticle *CCDParticle, const FVec3 Offset)"
  },
  {
    "label": "ApplyImpulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyImpulse(FCCDConstraint *CCDConstraint)"
  },
  {
    "label": "GetParticleTransformAtTOI()",
    "kind": "Method",
    "detail": "Function (TArrayView<FPBDCollisionConstraint* const> SweptConstraints ; TArray<FCCDParticle> CCDParticles ; TArray<FCCDParticle*> GroupedCCDParticles ; TMap<TPBDRigidParticleHandle<FReal,3>*,FCCDParticle*> ParticleToCCDParticle ; TArray<FCCDConstraint> CCDConstraints ; TArray<FCCDConstraint*> SortedCCDConstraints ; int32 IslandNum ; TArray<FCCDParticle*> IslandStack ; TArray<int32> IslandParticleStart,IslandParticleNum ; TArray<int32> IslandConstraintStart,IslandConstraintNum,IslandConstraintEnd ; } ; struct FCCDHelpers { FRigidTransform3)",
    "insertText": "GetParticleTransformAtTOI(const FGeometryParticleHandle* Particle, const FReal TOI, const FReal Dt)"
  },
  {
    "label": "DeltaExceedsThreshold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeltaExceedsThreshold(const FVec3& AxisThreshold, const FVec3& DeltaX, const FQuat& R)"
  },
  {
    "label": "DeltaExceedsThreshold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeltaExceedsThreshold(const FVec3& AxisThreshold, const FVec3& DeltaX, const FQuat& R, FVec3& OutAbsLocalDelta, FVec3& AxisThresholdScaled, FVec3& AxisThresholdDiff)"
  },
  {
    "label": "DeltaExceedsThreshold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeltaExceedsThreshold(const FVec3& AxisThreshold0, const FVec3& DeltaX0, const FQuat& R0, const FVec3& AxisThreshold1, const FVec3& DeltaX1, const FQuat& R1)"
  },
  {
    "label": "DeltaExceedsThreshold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeltaExceedsThreshold(const FGeometryParticleHandle& Particle0, const FGeometryParticleHandle& Particle1)"
  },
  {
    "label": "DeltaExceedsThreshold()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeltaExceedsThreshold(const FGeometryParticleHandle& Particle0, const FGeometryParticleHandle& Particle1, const FReal Dt)"
  }
]