[
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "ICacheRecordPolicyShared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICacheRecordPolicyShared"
  },
  {
    "label": "FOptionalCacheRecordPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOptionalCacheRecordPolicy"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCacheValuePolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheValuePolicy"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "FCacheRecordPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheRecordPolicy"
  },
  {
    "label": "FCacheRecordPolicyBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCacheRecordPolicyBuilder"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / StringFwd . h \" # include \" CoreTypes . h \" # include \" DerivedDataValueId . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UnrealTemplate . h \" # define class FCbFieldView ; class FCbObjectView ; class FCbWriter ; template<FuncType> class TFunctionRef ; namespace UE::DerivedData::Private { class ICacheRecordPolicyShared ; } namespace UE::DerivedData { class FOptionalCacheRecordPolicy ; } namespace UE::DerivedData { enum class ECachePolicy : uint32 { None = 0,QueryLocal = 1<<0,QueryRemote = 1<<1,Query = QueryLocal | QueryRemote,StoreLocal = 1<<2,StoreRemote = 1<<3,Store = StoreLocal | StoreRemote,Local = QueryLocal | StoreLocal,Remote = QueryRemote | StoreRemote,Default = Query | Store,SkipData = 1<<4,SkipMeta = 1<<5,PartialRecord = 1<<6,KeepAlive = 1<<7,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECachePolicy)"
  },
  {
    "label": "CombineCachePolicy()",
    "kind": "Method",
    "detail": "Function (ECachePolicy)",
    "insertText": "CombineCachePolicy(ECachePolicy A, ECachePolicy B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnsiStringBuilderBase&)",
    "insertText": "operator(FAnsiStringBuilderBase& Builder, ECachePolicy Policy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWideStringBuilderBase&)",
    "insertText": "operator(FWideStringBuilderBase& Builder, ECachePolicy Policy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FUtf8StringBuilderBase&)",
    "insertText": "operator(FUtf8StringBuilderBase& Builder, ECachePolicy Policy)"
  },
  {
    "label": "TryLexFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLexFromString(ECachePolicy& OutPolicy, FUtf8StringView String)"
  },
  {
    "label": "TryLexFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLexFromString(ECachePolicy& OutPolicy, FWideStringView String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, ECachePolicy Policy)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, ECachePolicy& OutPolicy, ECachePolicy Default = ECachePolicy::Default)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FCacheValuePolicy { FValueId Id ; ECachePolicy Policy = ECachePolicy::Default ; ECachePolicy PolicyMask = ECachePolicy::Default | ECachePolicy::SkipData ; } ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FCacheValuePolicy& Policy)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FCacheValuePolicy& OutPolicy)"
  },
  {
    "label": "ICacheRecordPolicyShared()",
    "kind": "Method",
    "detail": "Function (class Private::ICacheRecordPolicyShared { public : ~)",
    "insertText": "ICacheRecordPolicyShared()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "AddValuePolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValuePolicy(const FCacheValuePolicy& Policy)"
  },
  {
    "label": "GetValuePolicies()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FCacheValuePolicy>)",
    "insertText": "GetValuePolicies()"
  },
  {
    "label": "FCacheRecordPolicy()",
    "kind": "Method",
    "detail": "Function (} ; class FCacheRecordPolicy { public :)",
    "insertText": "FCacheRecordPolicy()"
  },
  {
    "label": "FCacheRecordPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCacheRecordPolicy(ECachePolicy BasePolicy) : RecordPolicy(BasePolicy) , DefaultValuePolicy(BasePolicy & FCacheValuePolicy::PolicyMask)"
  },
  {
    "label": "IsDefault()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDefault()"
  },
  {
    "label": "GetValuePolicy()",
    "kind": "Method",
    "detail": "Function (} ECachePolicy)",
    "insertText": "GetValuePolicy(const FValueId& Id)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} FCacheRecordPolicy)",
    "insertText": "Transform(TFunctionRef<ECachePolicy (ECachePolicy)> Op)"
  },
  {
    "label": "FCacheRecordPolicyBuilder()",
    "kind": "Method",
    "detail": "Function (private : class FCacheRecordPolicyBuilder ; class FOptionalCacheRecordPolicy ; ECachePolicy RecordPolicy = ECachePolicy::Default ; ECachePolicy DefaultValuePolicy = ECachePolicy::Default ; TRefCountPtr<const Private::ICacheRecordPolicyShared> Shared ; } ; class FCacheRecordPolicyBuilder { public :)",
    "insertText": "FCacheRecordPolicyBuilder()"
  },
  {
    "label": "FCacheRecordPolicyBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCacheRecordPolicyBuilder(ECachePolicy Policy) : BasePolicy(Policy)"
  },
  {
    "label": "AddValuePolicy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddValuePolicy(const FCacheValuePolicy& Value)"
  },
  {
    "label": "AddValuePolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValuePolicy(const FValueId& Id, ECachePolicy Policy)"
  },
  {
    "label": "AddValuePolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValuePolicy({Id, Policy})"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} FCacheRecordPolicy)",
    "insertText": "Build()"
  },
  {
    "label": "FOptionalCacheRecordPolicy()",
    "kind": "Method",
    "detail": "Function (private : ECachePolicy BasePolicy = ECachePolicy::Default ; TRefCountPtr<Private::ICacheRecordPolicyShared> Shared ; } ; class FOptionalCacheRecordPolicy : private FCacheRecordPolicy { public :)",
    "insertText": "FOptionalCacheRecordPolicy() : FCacheRecordPolicy(~ECachePolicy::None)"
  },
  {
    "label": "FOptionalCacheRecordPolicy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOptionalCacheRecordPolicy(FCacheRecordPolicy&& InOutput) : FCacheRecordPolicy(MoveTemp(InOutput))"
  },
  {
    "label": "FOptionalCacheRecordPolicy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOptionalCacheRecordPolicy(const FCacheRecordPolicy& InOutput) : FCacheRecordPolicy(InOutput)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FOptionalCacheRecordPolicy&)",
    "insertText": "operator(FCacheRecordPolicy&& InOutput)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(MoveTemp(InOutput))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(InOutput)"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FOptionalCacheRecordPolicy()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FOptionalCacheRecordPolicy()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FCacheRecordPolicy& Policy)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FCacheRecordPolicy& OutPolicy)"
  }
]