[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "GAMEPROJECTGENERATION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GAMEPROJECTGENERATION_API"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" TemplateProjectDefs . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" DefaultTemplateProjectDefs . generated . h \" class UObject ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() virtual bool GeneratesCode(const FString& ProjectTemplatePath)"
  },
  {
    "label": "IsClassRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClassRename(const FString& DestFilename, const FString& SrcFilename, const FString& FileExtension)"
  },
  {
    "label": "AddConfigValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConfigValues(TArray<FTemplateConfigValue>& ConfigValuesToSet, const FString& TemplateName, const FString& ProjectName, bool bShouldGenerateCode)"
  }
]