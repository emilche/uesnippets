[
  {
    "label": "LogEntryTestPeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogEntryTestPeer"
  },
  {
    "label": "LogMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogMessage"
  },
  {
    "label": "LogEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LogEntry"
  },
  {
    "label": "log_internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "log_internal"
  },
  {
    "label": "LogEntry()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_LOG_LOG_ENTRY_H_ # define ABSL_LOG_LOG_ENTRY_H_ # include<cstddef> # include<string> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # include \" absl / base / log_severity . h \" # include \" absl / log / internal / config . h \" # include \" absl / strings / string_view . h \" # include \" absl / time / time . h \" # include \" absl / types / span . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace log_internal { class LogEntryTestPeer ; class LogMessage ; } class LogEntry final { public : using tid_t = log_internal::Tid ; int kNoVerbosityLevel = - 1 ; int kNoVerboseLevel = - 1 ;)",
    "insertText": "LogEntry(const LogEntry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LogEntry&)",
    "insertText": "operator(const LogEntry&)"
  },
  {
    "label": "source_filename()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "source_filename()"
  },
  {
    "label": "text_message_with_prefix()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "text_message_with_prefix()"
  },
  {
    "label": "text_message_with_newline()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "text_message_with_newline()"
  },
  {
    "label": "text_message()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "text_message()"
  },
  {
    "label": "text_message_with_prefix_and_newline_c_str()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "text_message_with_prefix_and_newline_c_str()"
  },
  {
    "label": "stacktrace()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "stacktrace()"
  }
]