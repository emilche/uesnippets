[
  {
    "label": "DateFormatSymbols",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateFormatSymbols"
  },
  {
    "label": "DateFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateFormat"
  },
  {
    "label": "MessageFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageFormat"
  },
  {
    "label": "FieldPositionHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldPositionHandler"
  },
  {
    "label": "TimeZoneFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeZoneFormat"
  },
  {
    "label": "SharedNumberFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedNumberFormat"
  },
  {
    "label": "SimpleDateFormatMutableNFs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleDateFormatMutableNFs"
  },
  {
    "label": "DateIntervalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateIntervalFormat"
  },
  {
    "label": "LocalizedNumberFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalizedNumberFormatter"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "NSOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NSOverride"
  },
  {
    "label": "NumberFormatterKey",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NumberFormatterKey"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef SMPDTFMT_H # define SMPDTFMT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / datefmt . h \" # include \" unicode / udisplaycontext . h \" # include \" unicode / tzfmt . h \" # include \" unicode / brkiter . h \" U_NAMESPACE_BEGIN class DateFormatSymbols ; class DateFormat ; class MessageFormat ; class FieldPositionHandler ; class TimeZoneFormat ; class SharedNumberFormat ; class SimpleDateFormatMutableNFs ; class DateIntervalFormat ; namespace number { class LocalizedNumberFormatter ; } class U_I18N_API SimpleDateFormat : public DateFormat { public :)",
    "insertText": "SimpleDateFormat(UErrorCode& status)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(const UnicodeString& pattern, const UnicodeString& override, UErrorCode& status)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(const UnicodeString& pattern, const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(const UnicodeString& pattern, const UnicodeString& override, const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(const UnicodeString& pattern, DateFormatSymbols* formatDataToAdopt, UErrorCode& status)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(const UnicodeString& pattern, const DateFormatSymbols& formatData, UErrorCode& status)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(const SimpleDateFormat&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SimpleDateFormat&)",
    "insertText": "operator(const SimpleDateFormat&)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimpleDateFormat()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using DateFormat::format ; UnicodeString&)",
    "insertText": "format(Calendar& cal, UnicodeString& appendTo, FieldPosition& pos)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(Calendar& cal, UnicodeString& appendTo, FieldPositionIterator* posIter, UErrorCode& status)"
  },
  {
    "label": "parse()",
    "kind": "Method",
    "detail": "Function (using DateFormat::parse ; void)",
    "insertText": "parse(const UnicodeString& text, Calendar& cal, ParsePosition& pos)"
  },
  {
    "label": "set2DigitYearStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set2DigitYearStart(UDate d, UErrorCode& status)"
  },
  {
    "label": "get2DigitYearStart()",
    "kind": "Method",
    "detail": "Function (UDate)",
    "insertText": "get2DigitYearStart(UErrorCode& status)"
  },
  {
    "label": "toPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toPattern(UnicodeString& result)"
  },
  {
    "label": "toLocalizedPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toLocalizedPattern(UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "applyPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyPattern(const UnicodeString& pattern)"
  },
  {
    "label": "applyLocalizedPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyLocalizedPattern(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "getDateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (const DateFormatSymbols*)",
    "insertText": "getDateFormatSymbols(void)"
  },
  {
    "label": "adoptDateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptDateFormatSymbols(DateFormatSymbols* newFormatSymbols)"
  },
  {
    "label": "setDateFormatSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDateFormatSymbols(const DateFormatSymbols& newFormatSymbols)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "adoptCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptCalendar(Calendar* calendarToAdopt)"
  },
  {
    "label": "adoptTimeZoneFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptTimeZoneFormat(TimeZoneFormat* timeZoneFormatToAdopt)"
  },
  {
    "label": "setTimeZoneFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeZoneFormat(const TimeZoneFormat& newTimeZoneFormat)"
  },
  {
    "label": "getTimeZoneFormat()",
    "kind": "Method",
    "detail": "Function (const TimeZoneFormat*)",
    "insertText": "getTimeZoneFormat(void)"
  },
  {
    "label": "setContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setContext(UDisplayContext value, UErrorCode& status)"
  },
  {
    "label": "adoptNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptNumberFormat(NumberFormat *formatToAdopt)"
  },
  {
    "label": "adoptNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptNumberFormat(const UnicodeString& fields, NumberFormat *formatToAdopt, UErrorCode &status)"
  },
  {
    "label": "getNumberFormatForField()",
    "kind": "Method",
    "detail": "Function (const NumberFormat*)",
    "insertText": "getNumberFormatForField(char16_t field)"
  },
  {
    "label": "isFieldUnitIgnored()",
    "kind": "Method",
    "detail": "Function (# ifndef UBool)",
    "insertText": "isFieldUnitIgnored(UCalendarDateFields field)"
  },
  {
    "label": "isFieldUnitIgnored()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isFieldUnitIgnored(const UnicodeString& pattern, UCalendarDateFields field)"
  },
  {
    "label": "getSmpFmtLocale()",
    "kind": "Method",
    "detail": "Function (const Locale&)",
    "insertText": "getSmpFmtLocale(void)"
  },
  {
    "label": "initializeDefaultCentury()",
    "kind": "Method",
    "detail": "Function (# endif private : class DateFormat ; class DateIntervalFormat ; void)",
    "insertText": "initializeDefaultCentury(void)"
  },
  {
    "label": "initializeBooleanAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeBooleanAttributes(void)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(EStyle timeStyle, EStyle dateStyle, const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "SimpleDateFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimpleDateFormat(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "_format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "_format(Calendar& cal, UnicodeString& appendTo, FieldPositionHandler& handler, UErrorCode& status)"
  },
  {
    "label": "subFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "subFormat(UnicodeString &appendTo, char16_t ch, int32_t count, UDisplayContext capitalizationContext, int32_t fieldNum, FieldPositionHandler& handler, Calendar& cal, UErrorCode& status)"
  },
  {
    "label": "zeroPaddingNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "zeroPaddingNumber(const NumberFormat *currentNumberFormat, UnicodeString &appendTo, int32_t value, int32_t minDigits, int32_t maxDigits)"
  },
  {
    "label": "isNumeric()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isNumeric(char16_t formatChar, int32_t count)"
  },
  {
    "label": "isAtNumericField()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isAtNumericField(const UnicodeString &pattern, int32_t patternOffset)"
  },
  {
    "label": "isAfterNonNumericField()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isAfterNonNumericField(const UnicodeString &pattern, int32_t patternOffset)"
  },
  {
    "label": "initializeCalendar()",
    "kind": "Method",
    "detail": "Function (Calendar*)",
    "insertText": "initializeCalendar(TimeZone* adoptZone, const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(EStyle timeStyle, EStyle dateStyle, const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "matchString()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "matchString(const UnicodeString& text, int32_t start, UCalendarDateFields field, const UnicodeString* stringArray, int32_t stringArrayCount, const UnicodeString* monthPattern, Calendar& cal)"
  },
  {
    "label": "matchQuarterString()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "matchQuarterString(const UnicodeString& text, int32_t start, UCalendarDateFields field, const UnicodeString* stringArray, int32_t stringArrayCount, Calendar& cal)"
  },
  {
    "label": "matchDayPeriodStrings()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "matchDayPeriodStrings(const UnicodeString& text, int32_t start, const UnicodeString* stringArray, int32_t stringArrayCount, int32_t &dayPeriod)"
  },
  {
    "label": "matchLiterals()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "matchLiterals(const UnicodeString &pattern, int32_t &patternOffset, const UnicodeString &text, int32_t &textOffset, UBool whitespaceLenient, UBool partialMatchLenient, UBool oldLeniency)"
  },
  {
    "label": "subParse()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "subParse(const UnicodeString& text, int32_t& start, char16_t ch, int32_t count, UBool obeyCount, UBool allowNegative, UBool ambiguousYear[], int32_t& saveHebrewMonth, Calendar& cal, int32_t patLoc, MessageFormat * numericLeapMonthFormatter, UTimeZoneFormatTimeType *tzTimeType, int32_t *dayPeriod=NULL)"
  },
  {
    "label": "parseInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseInt(const UnicodeString& text, Formattable& number, ParsePosition& pos, UBool allowNegative, const NumberFormat *fmt)"
  },
  {
    "label": "parseInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseInt(const UnicodeString& text, Formattable& number, int32_t maxDigits, ParsePosition& pos, UBool allowNegative, const NumberFormat *fmt)"
  },
  {
    "label": "checkIntSuffix()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "checkIntSuffix(const UnicodeString& text, int32_t start, int32_t patLoc, UBool isNegative)"
  },
  {
    "label": "countDigits()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "countDigits(const UnicodeString& text, int32_t start, int32_t end)"
  },
  {
    "label": "translatePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "translatePattern(const UnicodeString& originalPattern, UnicodeString& translatedPattern, const UnicodeString& from, const UnicodeString& to, UErrorCode& status)"
  },
  {
    "label": "parseAmbiguousDatesAsAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseAmbiguousDatesAsAfter(UDate startDate, UErrorCode& status)"
  },
  {
    "label": "compareSimpleAffix()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "compareSimpleAffix(const UnicodeString& affix, const UnicodeString& input, int32_t pos)"
  },
  {
    "label": "skipPatternWhiteSpace()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipPatternWhiteSpace(const UnicodeString& text, int32_t pos)"
  },
  {
    "label": "skipUWhiteSpace()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "skipUWhiteSpace(const UnicodeString& text, int32_t pos)"
  },
  {
    "label": "initFastNumberFormatters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFastNumberFormatters(UErrorCode& status)"
  },
  {
    "label": "freeFastNumberFormatters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freeFastNumberFormatters()"
  },
  {
    "label": "initNumberFormatters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initNumberFormatters(const Locale &locale,UErrorCode &status)"
  },
  {
    "label": "processOverrideString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "processOverrideString(const Locale &locale, const UnicodeString &str, int8_t type, UErrorCode &status)"
  },
  {
    "label": "tzFormat()",
    "kind": "Method",
    "detail": "Function (const UCalendarDateFields fgPatternIndexToCalendarField [ ] ; const UDateFormatField fgPatternIndexToDateFormatField [ ] ; TimeZoneFormat*)",
    "insertText": "tzFormat(UErrorCode &status)"
  },
  {
    "label": "getNumberFormatByIndex()",
    "kind": "Method",
    "detail": "Function (const NumberFormat*)",
    "insertText": "getNumberFormatByIndex(UDateFormatField index)"
  },
  {
    "label": "getLevelFromChar()",
    "kind": "Method",
    "detail": "Function (const int32_t fgCalendarFieldToLevel [ ] ; int32_t)",
    "insertText": "getLevelFromChar(char16_t ch)"
  },
  {
    "label": "isSyntaxChar()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isSyntaxChar(char16_t ch)"
  },
  {
    "label": "parsePattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString fPattern ; UnicodeString fDateOverride ; UnicodeString fTimeOverride ; Locale fLocale ; DateFormatSymbols* fSymbols ; TimeZoneFormat* fTimeZoneFormat ; UDate fDefaultCenturyStart ; UBool fHasMinute ; UBool fHasSecond ; UBool fHasHanYearChar ; void)",
    "insertText": "parsePattern()"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (int32_t fDefaultCenturyStartYear ; struct NSOverride : public UMemory { const SharedNumberFormat* snf ; int32_t hash ; NSOverride* next ; void)",
    "insertText": "free()"
  },
  {
    "label": "NSOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NSOverride() : snf(NULL), hash(0), next(NULL)"
  },
  {
    "label": "NSOverride()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "NSOverride()"
  },
  {
    "label": "get2DigitYearStart()",
    "kind": "Method",
    "detail": "Function (} ; const SharedNumberFormat** fSharedNumberFormatters ; enum NumberFormatterKey { SMPDTFMT_NF_1x10,SMPDTFMT_NF_2x10,SMPDTFMT_NF_3x10,SMPDTFMT_NF_4x10,SMPDTFMT_NF_2x2,SMPDTFMT_NF_COUNT } ; const number::LocalizedNumberFormatter* fFastNumberFormatters [ SMPDTFMT_NF_COUNT ] = { } ; UBool fHaveDefaultCentury ; BreakIterator* fCapitalizationBrkIter ; } ; UDate)",
    "insertText": "get2DigitYearStart(UErrorCode&)"
  }
]