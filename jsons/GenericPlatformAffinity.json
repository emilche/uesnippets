[
  {
    "label": "EThreadPriority",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EThreadPriority"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGenericPlatformAffinity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericPlatformAffinity"
  },
  {
    "label": "MAKEAFFINITYMASK1()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / EnumClassFlags . h \" # define)",
    "insertText": "MAKEAFFINITYMASK1(x) ((1<<x)) #define MAKEAFFINITYMASK2(x,y) ((1<<x)+(1<<y)) #define MAKEAFFINITYMASK3(x,y,z) ((1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK4(w,x,y,z) ((1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK5(v,w,x,y,z) ((1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK6(u,v,w,x,y,z) ((1<<u)+(1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK7(t,u,v,w,x,y,z) ((1<<t)+(1<<u)+(1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK8(s,t,u,v,w,x,y,z) ((1<<s)+(1<<t)+(1<<u)+(1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK9(r,s,t,u,v,w,x,y,z) ((1<<r)+(1<<s)+(1<<t)+(1<<u)+(1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK10(q,r,s,t,u,v,w,x,y,z) ((1<<q)+(1<<r)+(1<<s)+(1<<t)+(1<<u)+(1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK11(p,q,r,s,t,u,v,w,x,y,z) ((1<<p)+(1<<q)+(1<<r)+(1<<s)+(1<<t)+(1<<u)+(1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK12(o,p,q,r,s,t,u,v,w,x,y,z) ((1<<o)+(1<<p)+(1<<q)+(1<<r)+(1<<s)+(1<<t)+(1<<u)+(1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z)) #define MAKEAFFINITYMASK13(n,o,p,q,r,s,t,u,v,w,x,y,z) ((1<<n)+(1<<o)+(1<<p)+(1<<q)+(1<<r)+(1<<s)+(1<<t)+(1<<u)+(1<<v)+(1<<w)+(1<<x)+(1<<y)+(1<<z))"
  },
  {
    "label": "SMTExclusive()",
    "kind": "Method",
    "detail": "Function (TPri_Normal,TPri_AboveNormal,TPri_BelowNormal,TPri_Highest,TPri_Lowest,TPri_SlightlyBelowNormal,TPri_TimeCritical,TPri_Num,} ; enum class EThreadCreateFlags : int8 { None = 0,)",
    "insertText": "SMTExclusive(1 << 0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EThreadCreateFlags)"
  },
  {
    "label": "GetMainGameMask()",
    "kind": "Method",
    "detail": "Function (class FGenericPlatformAffinity { public : const uint64)",
    "insertText": "GetMainGameMask()"
  }
]