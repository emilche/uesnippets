[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "LOCALIZATION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LOCALIZATION_API"
  },
  {
    "label": "FPortableObjectCulture()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Internationalization / CulturePointer . h \" # include \" Internationalization / LocKeyFuncs . h \" # include \" Misc / CString . h \" # include \" Templates / SharedPointer . h \" class FText ; class FPortableObjectCulture { public :)",
    "insertText": "FPortableObjectCulture()"
  },
  {
    "label": "FPortableObjectCulture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPortableObjectCulture(const FString& LangCode, const FString& PluralForms = TEXT(\"\"))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetLanguageCode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLanguageCode(const FString& LangCode)"
  },
  {
    "label": "GetLanguageCode()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetLanguageCode()"
  },
  {
    "label": "GetPluralForms()",
    "kind": "Method",
    "detail": "Function (LanguagePluralForms = InPluralForms ; } FString)",
    "insertText": "GetPluralForms()"
  },
  {
    "label": "Language()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Language()"
  },
  {
    "label": "Country()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Country()"
  },
  {
    "label": "Variant()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Variant()"
  },
  {
    "label": "GetCulture()",
    "kind": "Method",
    "detail": "Function (FCulturePtr)",
    "insertText": "GetCulture()"
  },
  {
    "label": "DisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DisplayName()"
  },
  {
    "label": "EnglishName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "EnglishName()"
  },
  {
    "label": "GetDefaultPluralForms()",
    "kind": "Method",
    "detail": "Function (private : FString)",
    "insertText": "GetDefaultPluralForms()"
  },
  {
    "label": "FPortableObjectEntryKey()",
    "kind": "Method",
    "detail": "Function (FString LanguageCode ; FString LanguagePluralForms ; FCulturePtr Culture ; } ; class FPortableObjectEntryKey { public :)",
    "insertText": "FPortableObjectEntryKey()"
  },
  {
    "label": "FPortableObjectEntryKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPortableObjectEntryKey(const FString& InMsgId, const FString& InMsgIdPlural, const FString& InMsgCtxt) : MsgId(InMsgId) , MsgIdPlural(InMsgIdPlural) , MsgCtxt(InMsgCtxt)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPortableObjectEntryKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FPortableObjectEntryKey& Key)"
  },
  {
    "label": "ProduceHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "ProduceHash(Key.MsgId, Hash)"
  },
  {
    "label": "ProduceHash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "ProduceHash(Key.MsgIdPlural, Hash)"
  },
  {
    "label": "ProduceHash()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "ProduceHash(Key.MsgCtxt, Hash)"
  },
  {
    "label": "AddExtractedComment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddExtractedComment(const FString& InComment)"
  },
  {
    "label": "AddReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReference(const FString& InReference)"
  },
  {
    "label": "AddExtractedComments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExtractedComments(const TArray<FString>& InComments)"
  },
  {
    "label": "AddTranslatorComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTranslatorComment(const FString& InComment)"
  },
  {
    "label": "AddTranslatorComments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTranslatorComments(const TArray<FString>& InComments)"
  },
  {
    "label": "AddReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferences(const TArray<FString>& InReferences)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "FPortableObjectHeader()",
    "kind": "Method",
    "detail": "Function (public : TArray<FString> MsgStr ; TArray<FString> ExtractedComments ; TArray<FString> TranslatorComments ; TArray<FString> ReferenceComments ; TArray<FString> Flags ; TArray<FString> UnknownElements ; } ; typedef TMap<FPortableObjectEntryKey,TSharedPtr<FPortableObjectEntry>> FPortableObjectEntries ; class FPortableObjectHeader { public : typedef TPair<FString,FString> FPOHeaderEntry ; typedef TArray<FPOHeaderEntry> FPOHeaderData ;)",
    "insertText": "FPortableObjectHeader()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromString(const FString& InStr)"
  },
  {
    "label": "HasEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEntry(const FString& EntryKey)"
  },
  {
    "label": "GetEntryValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEntryValue(const FString& EntryKey)"
  },
  {
    "label": "SetEntryValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEntryValue(const FString& EntryKey, const FString& EntryValue)"
  },
  {
    "label": "UpdateTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTimeStamp()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (HeaderEntries .)",
    "insertText": "Empty()"
  },
  {
    "label": "FindEntry()",
    "kind": "Method",
    "detail": "Function (} private : FPortableObjectHeader::FPOHeaderEntry*)",
    "insertText": "FindEntry(const FString& EntryKey)"
  },
  {
    "label": "FPortableObjectFormatDOM()",
    "kind": "Method",
    "detail": "Function (public : TArray<FString> Comments ; FPOHeaderData HeaderEntries ; } ; class FPortableObjectFormatDOM { public :)",
    "insertText": "FPortableObjectFormatDOM()"
  },
  {
    "label": "FPortableObjectFormatDOM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPortableObjectFormatDOM(const FString& LanguageCode ) : Language( LanguageCode)"
  },
  {
    "label": "FPortableObjectFormatDOM()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPortableObjectFormatDOM(const FPortableObjectFormatDOM&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPortableObjectFormatDOM&)",
    "insertText": "operator(const FPortableObjectFormatDOM&)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FString& OutString)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromString(const FString& InStr, FText* OutErrorMsg = nullptr)"
  },
  {
    "label": "CreateNewHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewHeader(const FString& InCopyrightNotice = FString())"
  },
  {
    "label": "SetHeaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeaderValue(const FString& EntryKey, const FString& EntryValue)"
  },
  {
    "label": "SetLanguage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLanguage(const FString& LanguageCode, const FString& LangPluralForms = TEXT(\"\"))"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddEntry(const TSharedRef<FPortableObjectEntry> LocEntry)"
  },
  {
    "label": "FindEntry()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPortableObjectEntry>)",
    "insertText": "FindEntry(const TSharedRef<const FPortableObjectEntry> LocEntry)"
  },
  {
    "label": "FindEntry()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPortableObjectEntry>)",
    "insertText": "FindEntry(const FString& MsgId, const FString& MsgIdPlural, const FString& MsgCtxt)"
  },
  {
    "label": "SetProjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProjectName(const FString& ProjName)"
  },
  {
    "label": "GetProjectName()",
    "kind": "Method",
    "detail": "Function (ProjectName = ProjName ; } FString)",
    "insertText": "GetProjectName()"
  },
  {
    "label": "SortEntries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SortEntries()"
  }
]