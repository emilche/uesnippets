[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "ISequencerInputHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISequencerInputHandler"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Input / Reply . h \" class SWidget ; struct ISequencerInputHandler { FReply)",
    "insertText": "OnMouseButtonDown(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnKeyUp(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  }
]