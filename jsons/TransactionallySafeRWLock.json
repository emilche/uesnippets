[
  {
    "label": "FTransactionallySafeRWLockDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransactionallySafeRWLockDefinition"
  },
  {
    "label": "FState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FState"
  },
  {
    "label": "FTransactionallySafeRWLockDefinition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / CriticalSection . h \" # include \" AutoRTFM / AutoRTFM . h \" # include \" Templates / SharedPointer . h \" # if UE_AUTORTFM struct FTransactionallySafeRWLockDefinition final { UE_AUTORTFM_ALWAYS_OPEN)",
    "insertText": "FTransactionallySafeRWLockDefinition() : State(MakeShared<FState>())"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (const AutoRTFM::EContextStatus Status =)",
    "insertText": "Close([this] { AutoRTFM::PushOnAbortHandler(this, [this] { this->~FTransactionallySafeRWLockDefinition(); }); })"
  },
  {
    "label": "FTransactionallySafeRWLockDefinition()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FTransactionallySafeRWLockDefinition()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (const AutoRTFM::EContextStatus Status =)",
    "insertText": "Close([this] { AutoRTFM::PopOnAbortHandler(this); AutoRTFM::OnCommit([State = this->State] { ensure(0 == State->TransactionalLockCount); }); })"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Open([&] { State = nullptr; })"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadLock()"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLock()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ensure(0 == State->TransactionalLockCount)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Open([&] { if (0 == State->TransactionalLockCount) { State->Lock.WriteLock(); } State->TransactionalLockCount += 1; })"
  },
  {
    "label": "OnAbort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbort([State = this->State] { ensure(0 != State->TransactionalLockCount); State->TransactionalLockCount -= 1; if (0 == State->TransactionalLockCount) { State->Lock.WriteUnlock(); } })"
  },
  {
    "label": "OnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommit([State = this->State] { ensure(0 != State->TransactionalLockCount); State->TransactionalLockCount -= 1; if (0 == State->TransactionalLockCount) { State->Lock.WriteUnlock(); } })"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} } private :)",
    "insertText": "UE_NONCOPYABLE(FTransactionallySafeRWLockDefinition)"
  }
]