[
  {
    "label": "FAssetFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetFilter"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" Filters / FilterBase . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" UObject / NameTypes . h \" # include \" AssetRegistry / ARFilter . h \" # include \" AssetRegistry / IAssetRegistry . h \" template<FilterType> class FAssetFilter : public FFilterBase<FilterType> { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FCompareItemWithClassNames, FilterType , const TSet<FTopLevelAssetPath>&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FConvertItemToAssetData, FilterType , FAssetData&)"
  },
  {
    "label": "FAssetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetFilter() : FFilterBase<FilterType>(nullptr)"
  },
  {
    "label": "SetBackendFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBackendFilter(const FARFilter& InBackendFilter)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (CompiledBackendFilter .)",
    "insertText": "Clear()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get()->CompileFilter(InBackendFilter, CompiledBackendFilter)"
  },
  {
    "label": "SetComparisonFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetComparisonFunction(FCompareItemWithClassNames InOnCompareItem)"
  },
  {
    "label": "SetConversionFunction()",
    "kind": "Method",
    "detail": "Function (OnCompareItem = InOnCompareItem ; } void)",
    "insertText": "SetConversionFunction(FConvertItemToAssetData InOnConvertItem)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (OnConvertItem = InOnConvertItem ; } FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "GetIconName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetIconName()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FAssetData AssetData ; bool bWasConverted = OnConvertItem .)",
    "insertText": "Execute(InItem, AssetData)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Get()->IsAssetIncludedByFilter(AssetData, CompiledBackendFilter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(OnCompareItem.IsBound())"
  },
  {
    "label": "ActiveStateChanged()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "ActiveStateChanged(bool bActive)"
  },
  {
    "label": "ModifyContextMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadSettings(const FString& IniFilename, const FString& IniSection, const FString& SettingsString)"
  }
]