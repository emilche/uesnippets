[
  {
    "label": "Reference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Reference"
  },
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Policy"
  },
  {
    "label": "node_slot_policy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "node_slot_policy"
  },
  {
    "label": "Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Alloc"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "P",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "P"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_NODE_SLOT_POLICY_H_ # define ABSL_CONTAINER_INTERNAL_NODE_SLOT_POLICY_H_ # include<cassert> # include<cstddef> # include<memory> # include<type_traits> # include<utility> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<class Reference,class Policy> struct node_slot_policy {)",
    "insertText": "static_assert(std::is_lvalue_reference<Reference>::value, \"\")"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (using slot_type = std::remove_cv<std::remove_reference<Reference>::type>::type* ; template<class Alloc,class . . . Args> void)",
    "insertText": "construct(Alloc* alloc, slot_type* slot, Args&&... args)"
  },
  {
    "label": "new_element()",
    "kind": "Method",
    "detail": "Function (* slot =)",
    "insertText": "new_element(alloc, std::forward<Args>(args)...)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} template<class Alloc> void)",
    "insertText": "destroy(Alloc* alloc, slot_type* slot)"
  },
  {
    "label": "delete_element()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delete_element(alloc, *slot)"
  },
  {
    "label": "transfer()",
    "kind": "Method",
    "detail": "Function (} template<class Alloc> void)",
    "insertText": "transfer(Alloc*, slot_type* new_slot, slot_type* old_slot)"
  },
  {
    "label": "space_used()",
    "kind": "Method",
    "detail": "Function (* new_slot =* old_slot ; } size_t)",
    "insertText": "space_used(const slot_type* slot)"
  },
  {
    "label": "element()",
    "kind": "Method",
    "detail": "Function (} Reference)",
    "insertText": "element(slot_type* slot)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} template<class . . . Ts,class P = Policy> auto)",
    "insertText": "apply(Ts&&... ts) -> decltype(P::apply(std::forward<Ts>(ts)...))"
  }
]