[
  {
    "label": "FNavigationDirtyElementKeyFunctions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyElementKeyFunctions"
  },
  {
    "label": "FNavigationOctreeController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationOctreeController"
  },
  {
    "label": "EOctreeUpdateMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOctreeUpdateMode"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" NavigationOctree . h \" # include \" AI / Navigation / NavigationDirtyElement . h \" struct FNavigationDirtyElementKeyFunctions : BaseKeyFuncs<FNavigationDirtyElement,FNavigationElementHandle,false> { FNavigationElementHandle)",
    "insertText": "GetSetKey(ElementInitType Element)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(KeyInitType A, KeyInitType B)"
  },
  {
    "label": "SetNavigationOctreeLock()",
    "kind": "Method",
    "detail": "Function (uint8 bNavOctreeLock : 1 = false ; void)",
    "insertText": "SetNavigationOctreeLock(bool bLock)"
  },
  {
    "label": "HasPendingUpdateForElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingUpdateForElement(FNavigationElementHandle Element)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(FOctreeElementId2 ElementId, FNavigationElementHandle GetHandle)"
  },
  {
    "label": "SetNavigableGeometryStoringMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigableGeometryStoringMode(FNavigationOctree::ENavGeometryStoringMode NavGeometryMode)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetOctree()",
    "kind": "Method",
    "detail": "Function (const FNavigationOctree*)",
    "insertText": "GetOctree()"
  },
  {
    "label": "GetMutableOctree()",
    "kind": "Method",
    "detail": "Function (FNavigationOctree*)",
    "insertText": "GetMutableOctree()"
  },
  {
    "label": "GetNavOctreeIdForElement()",
    "kind": "Method",
    "detail": "Function (const FOctreeElementId2*)",
    "insertText": "GetNavOctreeIdForElement(FNavigationElementHandle Element)"
  },
  {
    "label": "GetNavOctreeElementData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavOctreeElementData(FNavigationElementHandle Element, ENavigationDirtyFlag& DirtyFlags, FBox& DirtyBounds)"
  },
  {
    "label": "GetDataForElement()",
    "kind": "Method",
    "detail": "Function (const FNavigationRelevantData*)",
    "insertText": "GetDataForElement(FNavigationElementHandle Element)"
  },
  {
    "label": "GetMutableDataForElement()",
    "kind": "Method",
    "detail": "Function (FNavigationRelevantData*)",
    "insertText": "GetMutableDataForElement(FNavigationElementHandle Element)"
  },
  {
    "label": "HasElementNavOctreeId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasElementNavOctreeId(const FNavigationElementHandle Element)"
  },
  {
    "label": "IsNavigationOctreeLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationOctreeLocked()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsValidElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidElement(const FOctreeElementId2* ElementId)"
  },
  {
    "label": "IsValidElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidElement(const FOctreeElementId2& ElementId)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(FNavigationElementHandle Parent, const TSharedRef<const FNavigationElement>& Child)"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChild(FNavigationElementHandle Parent, const TSharedRef<const FNavigationElement>& Child)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildren(FNavigationElementHandle Parent, TArray<const TSharedRef<const FNavigationElement>>& OutChildren)"
  },
  {
    "label": "HashObject()",
    "kind": "Method",
    "detail": "Function (TMultiMap<FNavigationElementHandle,const TSharedRef<const FNavigationElement>> OctreeParentChildNodesMap ; } ; uint32)",
    "insertText": "HashObject(const UObject& Object)"
  },
  {
    "label": "HashObject()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "HashObject(Object)"
  },
  {
    "label": "GetNavOctreeIdForElement()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } const FOctreeElementId2*)",
    "insertText": "GetNavOctreeIdForElement(const FNavigationElementHandle Element)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveNode(const FOctreeElementId2 ElementId, const FNavigationElementHandle ElementHandle)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (NavOctree ->)",
    "insertText": "RemoveNode(ElementId)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (NavOctree -> ElementToOctreeId .)",
    "insertText": "Remove(ElementHandle)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(const FNavigationElementHandle Parent, const TSharedRef<const FNavigationElement>& Child)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OctreeParentChildNodesMap .)",
    "insertText": "AddUnique(Parent, Child)"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveChild(const FNavigationElementHandle Parent, const TSharedRef<const FNavigationElement>& Child)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (OctreeParentChildNodesMap .)",
    "insertText": "RemoveSingle(Parent, Child)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetChildren(const FNavigationElementHandle Parent, TArray<const TSharedRef<const FNavigationElement>>& OutChildren)"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (OctreeParentChildNodesMap .)",
    "insertText": "MultiFind(Parent, OutChildren)"
  }
]