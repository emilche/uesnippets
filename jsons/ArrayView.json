[
  {
    "label": "TIsCompatibleRangeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsCompatibleRangeType"
  },
  {
    "label": "TIsReinterpretableRangeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsReinterpretableRangeType"
  },
  {
    "label": "TIsTArrayView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsTArrayView"
  },
  {
    "label": "TArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayView"
  },
  {
    "label": "PREDICATE_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PREDICATE_CLASS"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / ReverseIterate . h \" # include \" Misc / IntrusiveUnsetOptionalState . h \" # include \" Templates / Invoke . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Traits / ElementType . h \" # include \" Containers / Array . h \" # include \" Math / UnrealMathUtility . h \" # include<type_traits> namespace UE::Core::ArrayView::Private { template<T,ElementType> bool TIsCompatibleElementType_V = std::is_convertible_v<T**,ElementType* const*> ; template<T>)",
    "insertText": "decltype(auto) GetDataHelper(T&& Arg)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "decltype(auto) GetReinterpretedDataHelper(T&& Arg)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto NaturalPtr =)",
    "insertText": "GetData(Forward<T>(Arg))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using NaturalElementType = std::remove_pointer_t<)",
    "insertText": "decltype(NaturalPtr)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (auto Size =)",
    "insertText": "GetNum(Arg)"
  },
  {
    "label": "ReinterpretRangeContiguous()",
    "kind": "Method",
    "detail": "Function (auto EndPtr = NaturalPtr + Size ; TContainerElementTypeCompatibility<NaturalElementType)",
    "insertText": "ReinterpretRangeContiguous(NaturalPtr, EndPtr, Size)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ElementType> struct TIsCompatibleRangeType { bool Value = TIsCompatibleElementType_V<std::remove_pointer_t<)",
    "insertText": "decltype(GetData(DeclVal<RangeType&>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "decltype(auto) GetData(T&& Arg)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (using TypeCompat = TContainerElementTypeCompatibility<NaturalElementType> ; public : bool Value = ! std::is_same_v<TypeCompat::ReinterpretType,NaturalElementType>&& TIsCompatibleElementType_V<TypeCompat::ReinterpretType,)",
    "insertText": "ElementType(!UE_DEPRECATE_MUTABLE_TOBJECTPTR || std::is_same_v<ElementType, std::remove_pointer_t<typename TypeCompat::ReinterpretType>* const> || std::is_same_v<ElementType, const std::remove_pointer_t<typename TypeCompat::ReinterpretType>* const>)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; } template<T> bool TIsTArrayView_V = false ; template<InElementType,InSizeType> bool TIsTArrayView_V<TArrayView<InElementType,InSizeType>> = true ; template<InElementType,InSizeType> bool TIsTArrayView_V<volatile TArrayView<InElementType,InSizeType>> = true ; template<InElementType,InSizeType> bool TIsTArrayView_V<const TArrayView<InElementType,InSizeType>> = true ; template<InElementType,InSizeType> bool TIsTArrayView_V<const volatile TArrayView<InElementType,InSizeType>> = true ; template<T> struct TIsTArrayView { bool Value = TIsTArrayView_V<T> ; bool value = TIsTArrayView_V<T> ; } ; template<InElementType,InSizeType> class TArrayView { public : using ElementType = InElementType ; using SizeType = InSizeType ;)",
    "insertText": "static_assert(std::is_signed_v<SizeType>, \"TArrayView only supports signed index types\")"
  },
  {
    "label": "TArrayView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayView(const TArrayView&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TArrayView&)",
    "insertText": "operator(const TArrayView&)"
  },
  {
    "label": "TArrayView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TArrayView()"
  },
  {
    "label": "TArrayView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayView() : DataPtr(nullptr) , ArrayNum(0)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} private : template<T> using TIsCompatibleRangeType = UE::Core::ArrayView::Private::TIsCompatibleRangeType<T,ElementType> ; template<T> using TIsReinterpretableRangeType = UE::Core::ArrayView::Private::TIsReinterpretableRangeType<T,ElementType> ; public : template<OtherRangeType,CVUnqualifiedOtherRangeType = std::remove_cv_t<std::remove_reference_t<OtherRangeType>>)",
    "insertText": "UE_REQUIRES(TAnd< TIsContiguousContainer<CVUnqualifiedOtherRangeType>, TOr< TIsCompatibleRangeType<OtherRangeType>, TIsReinterpretableRangeType<OtherRangeType> > >::Value && TIsTArrayView_V<CVUnqualifiedOtherRangeType> && !std::is_same_v<CVUnqualifiedOtherRangeType, TArrayView> ) > FORCEINLINE TArrayView(OtherRangeType&& Other) : DataPtr(std::conditional_t< TIsCompatibleRangeType<OtherRangeType>::Value, TIsCompatibleRangeType<OtherRangeType>, TIsReinterpretableRangeType<OtherRangeType> >::GetData(Forward<OtherRangeType>(Other)))"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (const auto InCount =)",
    "insertText": "GetNum(Forward<OtherRangeType>(Other))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using InCountType =)",
    "insertText": "decltype(InCount)"
  },
  {
    "label": "ArrayNum()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArrayNum(SizeType)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherRangeType,CVUnqualifiedOtherRangeType = std::remove_cv_t<std::remove_reference_t<OtherRangeType>>)",
    "insertText": "UE_REQUIRES(TAnd< TIsContiguousContainer<CVUnqualifiedOtherRangeType>, TOr< TIsCompatibleRangeType<OtherRangeType>, TIsReinterpretableRangeType<OtherRangeType> > >::Value && !TIsTArrayView_V<CVUnqualifiedOtherRangeType> ) > FORCEINLINE TArrayView(OtherRangeType&& Other UE_LIFETIMEBOUND) : DataPtr(std::conditional_t< TIsCompatibleRangeType<OtherRangeType>::Value, TIsCompatibleRangeType<OtherRangeType>, TIsReinterpretableRangeType<OtherRangeType> >::GetData(Forward<OtherRangeType>(Other)))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(InCount >= 0)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherElementType)",
    "insertText": "UE_REQUIRES(UE::Core::ArrayView::Private::TIsCompatibleElementType_V<OtherElementType, ElementType>) > FORCEINLINE TArrayView(OtherElementType* InData UE_LIFETIMEBOUND, SizeType InCount) : DataPtr(InData) , ArrayNum(InCount)"
  },
  {
    "label": "TArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TArrayView(std::initializer_list<ElementType> List UE_LIFETIMEBOUND) : DataPtr(UE::Core::ArrayView::Private::GetDataHelper(List)) , ArrayNum(GetNum(List))"
  },
  {
    "label": "TArrayView()",
    "kind": "Method",
    "detail": "Function (} bool bHasIntrusiveUnsetOptionalState = true ; using IntrusiveUnsetOptionalStateType = TArrayView ;)",
    "insertText": "TArrayView(FIntrusiveUnsetOptionalState) : DataPtr(nullptr) , ArrayNum(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FIntrusiveUnsetOptionalState)"
  },
  {
    "label": "GetTypeAlignment()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetTypeAlignment()"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RangeCheck(SizeType Index)"
  },
  {
    "label": "SliceRangeCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SliceRangeCheck(SizeType Index, SizeType InNum)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(SizeType Index)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(SizeType Index)"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeCheck(Index)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "Last(SizeType IndexFromTheEnd = 0)"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeCheck(ArrayNum - IndexFromTheEnd - 1)"
  },
  {
    "label": "Slice()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TArrayView)",
    "insertText": "Slice(SizeType Index, SizeType InNum)"
  },
  {
    "label": "SliceRangeCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SliceRangeCheck(Index, InNum)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TArrayView)",
    "insertText": "Left(SizeType Count)"
  },
  {
    "label": "LeftChop()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TArrayView)",
    "insertText": "LeftChop(SizeType Count)"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TArrayView)",
    "insertText": "Right(SizeType Count)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const SizeType OutLen =)",
    "insertText": "Clamp(Count, (SizeType)0, ArrayNum)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TArrayView)",
    "insertText": "RightChop(SizeType Count)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const SizeType OutLen =)",
    "insertText": "Clamp(ArrayNum - Count, (SizeType)0, ArrayNum)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] TArrayView)",
    "insertText": "Mid(SizeType Index, SizeType Count = TNumericLimits<SizeType>::Max())"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (ElementType* const CurrentStart =)",
    "insertText": "GetData()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const SizeType CurrentLength =)",
    "insertText": "Num()"
  },
  {
    "label": "NegativeIndexOffset()",
    "kind": "Method",
    "detail": "Function (const SizeType)",
    "insertText": "NegativeIndexOffset(Index < 0)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Count + = NegativeIndexOffset ; Index - = NegativeIndexOffset ;)",
    "insertText": "Index(Index > CurrentLength)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Count =)",
    "insertText": "Clamp(Count, (SizeType)0, (CurrentLength - Index))"
  },
  {
    "label": "TArrayView()",
    "kind": "Method",
    "detail": "Function (TArrayView Result =)",
    "insertText": "TArrayView(CurrentStart + Index, Count)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Left(CharCount)"
  },
  {
    "label": "LeftChopInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LeftChopInline(SizeType CharCount)"
  },
  {
    "label": "LeftChop()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "LeftChop(CharCount)"
  },
  {
    "label": "RightInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RightInline(SizeType CharCount)"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Right(CharCount)"
  },
  {
    "label": "RightChopInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RightChopInline(SizeType CharCount)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "RightChop(CharCount)"
  },
  {
    "label": "MidInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MidInline(SizeType Position, SizeType CharCount = TNumericLimits<SizeType>::Max())"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Mid(Position, CharCount)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Find(const ElementType& Item, SizeType& Index)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (Index = this ->)",
    "insertText": "Find(Item)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "Find(const ElementType& Item)"
  },
  {
    "label": "SizeType()",
    "kind": "Method",
    "detail": "Function (} } return static_cast<)",
    "insertText": "SizeType(INDEX_NONE)"
  },
  {
    "label": "FindLast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindLast(const ElementType& Item, SizeType& Index)"
  },
  {
    "label": "FindLast()",
    "kind": "Method",
    "detail": "Function (Index = this ->)",
    "insertText": "FindLast(Item)"
  },
  {
    "label": "FindLastByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> SizeType)",
    "insertText": "FindLastByPredicate(Predicate Pred, SizeType StartIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - Data ;)",
    "insertText": "if(::Invoke(Pred, *Data))"
  },
  {
    "label": "FindLastByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> SizeType)",
    "insertText": "FindLastByPredicate(Predicate Pred)"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> SizeType)",
    "insertText": "IndexOfByKey(const KeyType& Key)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> SizeType)",
    "insertText": "IndexOfByPredicate(Predicate Pred)"
  },
  {
    "label": "FindByKey()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> ElementType*)",
    "insertText": "FindByKey(const KeyType& Key)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<std::remove_const_t<ElementType>> FilterResults ;)",
    "insertText": "for(const ElementType* RESTRICT Data = GetData(), *RESTRICT DataEnd = Data + ArrayNum; Data != DataEnd; ++Data)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FilterResults .)",
    "insertText": "Add(*Data)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} } return FilterResults ; } template<ComparisonType> bool)",
    "insertText": "Contains(const ComparisonType& Item)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : ElementType*)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} ElementType*)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} TReversePointerIterator<ElementType>)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} TReversePointerIterator<ElementType>)",
    "insertText": "rend()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Sort()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(*this, TDereferenceWrapper<ElementType, TLess<>>(TLess<>()))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} template<class PREDICATE_CLASS> void)",
    "insertText": "Sort(const PREDICATE_CLASS& Predicate)"
  },
  {
    "label": "PredicateWrapper()",
    "kind": "Method",
    "detail": "Function (TDereferenceWrapper<ElementType,PREDICATE_CLASS>)",
    "insertText": "PredicateWrapper(Predicate)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(*this, PredicateWrapper)"
  },
  {
    "label": "StableSort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StableSort()"
  },
  {
    "label": "StableSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StableSort(*this, TDereferenceWrapper<ElementType, TLess<>>(TLess<>()))"
  },
  {
    "label": "StableSort()",
    "kind": "Method",
    "detail": "Function (} template<class PREDICATE_CLASS> void)",
    "insertText": "StableSort(const PREDICATE_CLASS& Predicate)"
  },
  {
    "label": "StableSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StableSort(*this, PredicateWrapper)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} private : ElementType* DataPtr ; SizeType ArrayNum ; } ; template<InElementType> struct TIsZeroConstructType<TArrayView<InElementType>> { enum { Value = true } ; } ; template<T,SizeType> struct TIsContiguousContainer<TArrayView<T,SizeType>> { enum { Value = true } ; } ; template<OtherRangeType,CVUnqualifiedOtherRangeType = std::remove_cv_t<std::remove_reference_t<OtherRangeType>>)",
    "insertText": "UE_REQUIRES(TIsContiguousContainer<CVUnqualifiedOtherRangeType>::Value && TIsTArrayView_V<CVUnqualifiedOtherRangeType>) > auto MakeArrayView(OtherRangeType&& Other)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherRangeType,CVUnqualifiedOtherRangeType = std::remove_cv_t<std::remove_reference_t<OtherRangeType>>)",
    "insertText": "UE_REQUIRES(TIsContiguousContainer<CVUnqualifiedOtherRangeType>::Value && !TIsTArrayView_V<CVUnqualifiedOtherRangeType>) > auto MakeArrayView(OtherRangeType&& Other UE_LIFETIMEBOUND)"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> TArrayView<ElementType>)",
    "insertText": "MakeArrayView(ElementType* Pointer UE_LIFETIMEBOUND, int32 Size)"
  },
  {
    "label": "MakeArrayView()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> TArrayView<const ElementType>)",
    "insertText": "MakeArrayView(std::initializer_list<ElementType> List UE_LIFETIMEBOUND)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherRangeType,CVUnqualifiedOtherRangeType = std::remove_cv_t<std::remove_reference_t<OtherRangeType>>)",
    "insertText": "UE_REQUIRES(TIsContiguousContainer<CVUnqualifiedOtherRangeType>::Value && TIsTArrayView_V<CVUnqualifiedOtherRangeType>) > auto MakeConstArrayView(OtherRangeType&& Other)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherRangeType,CVUnqualifiedOtherRangeType = std::remove_cv_t<std::remove_reference_t<OtherRangeType>>)",
    "insertText": "UE_REQUIRES(TIsContiguousContainer<CVUnqualifiedOtherRangeType>::Value && !TIsTArrayView_V<CVUnqualifiedOtherRangeType>) > auto MakeConstArrayView(OtherRangeType&& Other UE_LIFETIMEBOUND)"
  },
  {
    "label": "MakeConstArrayView()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> TArrayView<const ElementType>)",
    "insertText": "MakeConstArrayView(const ElementType* Pointer UE_LIFETIMEBOUND, int32 Size)"
  },
  {
    "label": "MakeConstArrayView()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> TArrayView<const ElementType>)",
    "insertText": "MakeConstArrayView(std::initializer_list<ElementType> List UE_LIFETIMEBOUND)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ElementType,SizeType,OtherElementType,OtherSizeType> bool)",
    "insertText": "operator(TArrayView<ElementType, SizeType>, TArrayView<OtherElementType, OtherSizeType>)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<RangeType,ElementType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<decltype(GetData(std::declval<RangeType&>())), const ElementType*>) > bool operator==(RangeType&& Lhs, TArrayView<ElementType> Rhs)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (auto Count =)",
    "insertText": "GetNum(Lhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ElementType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<decltype(GetData(std::declval<RangeType&>())), const ElementType*>) > bool operator==(TArrayView<ElementType> Lhs, RangeType&& Rhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} # if ! PLATFORM_COMPILER_HAS_GENERATED_COMPARISON_OPERATORS template<RangeType,ElementType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<decltype(GetData(std::declval<RangeType&>())), const ElementType*>) > bool operator!=(RangeType&& Lhs, TArrayView<ElementType> Rhs)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ElementType)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<decltype(GetData(std::declval<RangeType&>())), const ElementType*>) > bool operator!=(TArrayView<ElementType> Lhs, RangeType&& Rhs)"
  },
  {
    "label": "TArray()",
    "kind": "Method",
    "detail": "Function (} # endif template<InElementType,InAllocatorType> template<OtherElementType,OtherSizeType> TArray<InElementType,InAllocatorType)",
    "insertText": "TArray(const TArrayView<OtherElementType, OtherSizeType>& Other)"
  },
  {
    "label": "CopyToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyToEmpty(Other.GetData(), Other.Num(), 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<InElementType,InAllocatorType> template<OtherElementType,OtherSizeType> TArray<InElementType,InAllocatorType>& TArray<InElementType,InAllocatorType)",
    "insertText": "operator(const TArrayView<OtherElementType, OtherSizeType>& Other)"
  },
  {
    "label": "DestructItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestructItems(GetData(), ArrayNum)"
  },
  {
    "label": "CopyToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyToEmpty(Other.GetData(), Other.Num(), ArrayMax)"
  }
]