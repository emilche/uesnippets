[
  {
    "label": "FClassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassInfo"
  },
  {
    "label": "FAsyncLoadingTraceAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncLoadingTraceAnalyzer"
  },
  {
    "label": "FRequestState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestState"
  },
  {
    "label": "FAsyncPackageState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncPackageState"
  },
  {
    "label": "FLinkerLoadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinkerLoadState"
  },
  {
    "label": "FRequestGroupState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestGroupState"
  },
  {
    "label": "FScopeStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeStackEntry"
  },
  {
    "label": "FThreadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadState"
  },
  {
    "label": "FPointerMapKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerMapKeyFuncs"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" Trace / Analyzer . h \" # include \" AnalysisServicePrivate . h \" # include \" Model / LoadTimeProfilerPrivate . h \" namespace TraceServices { struct FClassInfo ; bool)",
    "insertText": "operator(const FLoadTimeProfilerCpuEvent& Lhs, const FLoadTimeProfilerCpuEvent& Rhs)"
  },
  {
    "label": "FAsyncLoadingTraceAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncLoadingTraceAnalyzer()"
  },
  {
    "label": "OnAnalysisBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisBegin(const FOnAnalysisContext& Context)"
  },
  {
    "label": "OnAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisEnd()"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnEvent(uint16 RouteId, EStyle Style, const FOnEventContext& Context)"
  },
  {
    "label": "EnterScope()",
    "kind": "Method",
    "detail": "Function (private : struct FRequestState ; struct FAsyncPackageState ; struct FLinkerLoadState ; struct FRequestGroupState { FString Name ; TArray<FRequestState*> Requests ; FLoadRequest* LoadRequest = nullptr ; uint64 LatestEndCycle = 0 ; uint64 ActiveRequestsCount = 0 ; } ; struct FRequestState { uint64 WallTimeStartCycle ; uint64 WallTimeEndCycle ; uint32 ThreadId ; TSharedPtr<FRequestGroupState> Group ; TArray<FAsyncPackageState*> AsyncPackages ; } ; struct FAsyncPackageState { FPackageInfo* PackageInfo = nullptr ; FRequestState* Request = nullptr ; FLinkerLoadState* Linker = nullptr ; TSet<FAsyncPackageState*> ImportedAsyncPackages ; TSet<FAsyncPackageState*> ImportedByAsyncPackages ; } ; struct FLinkerLoadState { FPackageInfo* PackageInfo = nullptr ; FAsyncPackageState* AsyncPackage = nullptr ; bool bHasFakeAsyncPackageState = false ; } ; struct FScopeStackEntry { FLoadTimeProfilerCpuEvent Event ; bool EnteredEvent ; } ; struct FThreadState { FScopeStackEntry CpuScopeStack [ 2 5 6 ] ; uint64 CpuScopeStackDepth = 0 ; int64 PostLoadScopeDepth = 0 ; FLoadTimeProfilerCpuEvent CurrentEvent ; TArray<TSharedPtr<FRequestGroupState>> RequestGroupStack ; FLoadTimeProfilerProvider::CpuTimelineInternal* CpuTimeline ; void)",
    "insertText": "EnterScope(double Time, const FPackageInfo* PackageInfo)"
  },
  {
    "label": "EnterScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterScope(double Time, const FPackageExportInfo* ExportInfo, ELoadTimeProfilerObjectEventType EventType)"
  },
  {
    "label": "LeaveScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeaveScope(double Time)"
  },
  {
    "label": "GetCurrentScopeEventType()",
    "kind": "Method",
    "detail": "Function (ELoadTimeProfilerObjectEventType)",
    "insertText": "GetCurrentScopeEventType()"
  },
  {
    "label": "GetCurrentExportScope()",
    "kind": "Method",
    "detail": "Function (FPackageExportInfo*)",
    "insertText": "GetCurrentExportScope()"
  },
  {
    "label": "PackageRequestAssociation()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PackageRequestAssociation(const FOnEventContext& Context, FAsyncPackageState* AsyncPackageState, FRequestState* RequestState)"
  },
  {
    "label": "GetThreadState()",
    "kind": "Method",
    "detail": "Function (FThreadState&)",
    "insertText": "GetThreadState(uint32 ThreadId)"
  },
  {
    "label": "GetClassInfo()",
    "kind": "Method",
    "detail": "Function (const FClassInfo*)",
    "insertText": "GetClassInfo(uint64 ClassPtr)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (enum : uint16 { RouteId_StartAsyncLoading,RouteId_SuspendAsyncLoading,RouteId_ResumeAsyncLoading,RouteId_NewAsyncPackage,RouteId_DestroyAsyncPackage,RouteId_NewLinker,RouteId_DestroyLinker,RouteId_BeginRequest,RouteId_EndRequest,RouteId_BeginRequestGroup,RouteId_EndRequestGroup,RouteId_PackageSummary,RouteId_AsyncPackageRequestAssociation,RouteId_AsyncPackageLinkerAssociation,RouteId_AsyncPackageImportDependency,RouteId_BeginProcessSummary,RouteId_EndProcessSummary,RouteId_BeginCreateExport,RouteId_EndCreateExport,RouteId_BeginSerializeExport,RouteId_EndSerializeExport,RouteId_BeginPostLoad,RouteId_EndPostLoad,RouteId_BeginPostLoadObject,RouteId_EndPostLoadObject,RouteId_ClassInfo,RouteId_BatchIssued,RouteId_BatchResolved,RouteId_BeginObjectScope,RouteId_EndObjectScope,RouteId_BeginPostLoadExport,RouteId_EndPostLoadExport,} ; enum { FormatBufferSize = 6 5 5 3 6 } ; TCHAR FormatBuffer [ FormatBufferSize ] ; TCHAR TempBuffer [ FormatBufferSize ] ; IAnalysisSession& Session ; FLoadTimeProfilerProvider& LoadTimeProfilerProvider ; template<ValueType> struct FPointerMapKeyFuncs { typedef uint64 KeyType ; typedef uint64 KeyInitType ; typedef const TPairInitializer<uint64,ValueType>& ElementInitType ; enum { bAllowDuplicateKeys = false } ; bool)",
    "insertText": "Matches(uint64 A, uint64 B)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Element)"
  }
]