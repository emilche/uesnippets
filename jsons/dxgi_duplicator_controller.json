[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "D3dInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D3dInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "rtc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rtc"
  },
  {
    "label": "ResultName()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_WIN_DXGI_DUPLICATOR_CONTROLLER_H_ # define MODULES_DESKTOP_CAPTURE_WIN_DXGI_DUPLICATOR_CONTROLLER_H_ # include<d3dcommon . h> # include<atomic> # include<string> # include<vector> # include \" api / scoped_refptr . h \" # include \" modules / desktop_capture / desktop_geometry . h \" # include \" modules / desktop_capture / shared_desktop_frame . h \" # include \" modules / desktop_capture / win / d3d_device . h \" # include \" modules / desktop_capture / win / display_configuration_monitor . h \" # include \" modules / desktop_capture / win / dxgi_adapter_duplicator . h \" # include \" modules / desktop_capture / win / dxgi_context . h \" # include \" modules / desktop_capture / win / dxgi_frame . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT DxgiDuplicatorController { public : using Context = DxgiFrameContext ; struct D3dInfo { D3D_FEATURE_LEVEL min_feature_level ; D3D_FEATURE_LEVEL max_feature_level ; } ; enum class Result { SUCCEEDED,UNSUPPORTED_SESSION,FRAME_PREPARE_FAILED,INITIALIZATION_FAILED,DUPLICATION_FAILED,INVALID_MONITOR_ID,} ; std::string)",
    "insertText": "ResultName(Result result)"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<DxgiDuplicatorController>)",
    "insertText": "Instance()"
  },
  {
    "label": "IsCurrentSessionSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentSessionSupported()"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "RetrieveD3dInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RetrieveD3dInfo(D3dInfo* info)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "Duplicate(DxgiFrame* frame)"
  },
  {
    "label": "DuplicateMonitor()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "DuplicateMonitor(DxgiFrame* frame, int monitor_id)"
  },
  {
    "label": "dpi()",
    "kind": "Method",
    "detail": "Function (DesktopVector)",
    "insertText": "dpi()"
  },
  {
    "label": "ScreenCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ScreenCount()"
  },
  {
    "label": "GetDeviceNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDeviceNames(std::vector<std::string>* output)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Reset()"
  },
  {
    "label": "DxgiDuplicatorController()",
    "kind": "Method",
    "detail": "Function (class rtc::scoped_refptr<DxgiDuplicatorController> ;)",
    "insertText": "DxgiDuplicatorController()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "DoDuplicate()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "DoDuplicate(DxgiFrame* frame, int monitor_id)"
  },
  {
    "label": "Unload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unload()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(const Context* const context)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoInitialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoInitialize() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ContextExpired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextExpired(const Context* const context) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(Context* context) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoDuplicateUnlocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoDuplicateUnlocked(Context* context, int monitor_id, SharedDesktopFrame* target) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoDuplicateAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoDuplicateAll(Context* context, SharedDesktopFrame* target) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "DoDuplicateOne()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoDuplicateOne(Context* context, int monitor_id, SharedDesktopFrame* target) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetNumFramesCaptured()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetNumFramesCaptured() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "desktop_size()",
    "kind": "Method",
    "detail": "Function (DesktopSize)",
    "insertText": "desktop_size() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ScreenRect()",
    "kind": "Method",
    "detail": "Function (DesktopRect)",
    "insertText": "ScreenRect(int id) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "ScreenCountUnlocked()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ScreenCountUnlocked() const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetDeviceNamesUnlocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeviceNamesUnlocked(std::vector<std::string>* output) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "SelectedDesktopSize()",
    "kind": "Method",
    "detail": "Function (DesktopSize)",
    "insertText": "SelectedDesktopSize(int monitor_id) const RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "EnsureFrameCaptured()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnsureFrameCaptured(Context* context, SharedDesktopFrame* target) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "TranslateRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateRect() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::atomic_int refcount_ ; Mutex mutex_ ; int identity_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]