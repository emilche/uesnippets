[
  {
    "label": "FDynamicSubmesh3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicSubmesh3"
  },
  {
    "label": "FDynamicSubmesh3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMeshEditor . h \" # include \" Util / SparseIndexCollectionTypes . h \" namespace UE { namespace Geometry { struct FDynamicSubmesh3 { protected : const FDynamicMesh3* BaseMesh ; FDynamicMesh3 Submesh ; FMeshIndexMappings Mappings ; TSet<int> BaseBorderE ; TSet<int> BaseBoundaryE ; TSet<int> BaseBorderV ; public : bool bComputeTriMaps = true ; public :)",
    "insertText": "FDynamicSubmesh3() : BaseMesh(nullptr)"
  },
  {
    "label": "FDynamicSubmesh3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDynamicSubmesh3(const FDynamicMesh3* BaseMesh) : BaseMesh(BaseMesh)"
  },
  {
    "label": "FDynamicSubmesh3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDynamicSubmesh3(const FDynamicMesh3* BaseMesh, const TArray<int>& Triangles, int WantComponents = (int)EMeshComponents::All, bool bAttributes = true) : BaseMesh(BaseMesh)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute(Triangles, WantComponents, bAttributes)"
  },
  {
    "label": "GetBaseMesh()",
    "kind": "Method",
    "detail": "Function (} const FDynamicMesh3*)",
    "insertText": "GetBaseMesh()"
  },
  {
    "label": "InBaseBoundaryEdges()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InBaseBoundaryEdges(int BaseEID)"
  },
  {
    "label": "InBaseBorderVertices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InBaseBorderVertices(int BaseVID)"
  },
  {
    "label": "MapVertexToSubmesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapVertexToSubmesh(int BaseVID)"
  },
  {
    "label": "MapVertexToBaseMesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapVertexToBaseMesh(int SubVID)"
  },
  {
    "label": "MapVerticesToSubmesh()",
    "kind": "Method",
    "detail": "Function (} FIndex2i)",
    "insertText": "MapVerticesToSubmesh(FIndex2i VIDs)"
  },
  {
    "label": "MapVerticesToBaseMesh()",
    "kind": "Method",
    "detail": "Function (} FIndex2i)",
    "insertText": "MapVerticesToBaseMesh(FIndex2i VIDs)"
  },
  {
    "label": "MapVerticesToSubmesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MapVerticesToSubmesh(TArrayView<int>& Vertices)"
  },
  {
    "label": "MapVertexToSubmesh()",
    "kind": "Method",
    "detail": "Function (Vertices [ i ] =)",
    "insertText": "MapVertexToSubmesh(Vertices[i])"
  },
  {
    "label": "MapEdgeToSubmesh()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "MapEdgeToSubmesh(int BaseEID)"
  },
  {
    "label": "GetEdgeV()",
    "kind": "Method",
    "detail": "Function (FIndex2i base_ev = BaseMesh ->)",
    "insertText": "GetEdgeV(BaseEID)"
  },
  {
    "label": "MapVerticesToSubmesh()",
    "kind": "Method",
    "detail": "Function (FIndex2i sub_ev =)",
    "insertText": "MapVerticesToSubmesh(base_ev)"
  },
  {
    "label": "MapEdgeToBaseMesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapEdgeToBaseMesh(int SubEID)"
  },
  {
    "label": "GetEdgeV()",
    "kind": "Method",
    "detail": "Function (FIndex2i sub_ev = Submesh .)",
    "insertText": "GetEdgeV(SubEID)"
  },
  {
    "label": "MapVerticesToBaseMesh()",
    "kind": "Method",
    "detail": "Function (FIndex2i base_ev =)",
    "insertText": "MapVerticesToBaseMesh(sub_ev)"
  },
  {
    "label": "MapEdgesToSubmesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MapEdgesToSubmesh(TArrayView<int>& Edges)"
  },
  {
    "label": "MapEdgeToSubmesh()",
    "kind": "Method",
    "detail": "Function (Edges [ i ] =)",
    "insertText": "MapEdgeToSubmesh(Edges[i])"
  },
  {
    "label": "MapTriangleToSubmesh()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "MapTriangleToSubmesh(int BaseTID)"
  },
  {
    "label": "MapTriangleToBaseMesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapTriangleToBaseMesh(int SubTID)"
  },
  {
    "label": "MapTrianglesToSubmesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MapTrianglesToSubmesh(TArrayView<int>& Triangles)"
  },
  {
    "label": "MapTriangleToSubmesh()",
    "kind": "Method",
    "detail": "Function (Triangles [ i ] =)",
    "insertText": "MapTriangleToSubmesh(Triangles[i])"
  },
  {
    "label": "MapGroupToSubmesh()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "MapGroupToSubmesh(int BaseGID)"
  },
  {
    "label": "MapGroupToBaseMesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapGroupToBaseMesh(int SubGID)"
  },
  {
    "label": "MapGroupsToSubmesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MapGroupsToSubmesh(TArrayView<int32> GroupIDs)"
  },
  {
    "label": "MapGroupToSubmesh()",
    "kind": "Method",
    "detail": "Function (GroupIDs [ i ] =)",
    "insertText": "MapGroupToSubmesh(GroupIDs[i])"
  },
  {
    "label": "MapNormalToSubmesh()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "MapNormalToSubmesh(int NormalLayer, int BaseNID)"
  },
  {
    "label": "MapNormalToBaseMesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapNormalToBaseMesh(int NormalLayer, int SubNID)"
  },
  {
    "label": "MapUVToSubmesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapUVToSubmesh(int UVLayer, int BaseUVID)"
  },
  {
    "label": "MapUVToBaseMesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapUVToBaseMesh(int UVLayer, int SubUVID)"
  },
  {
    "label": "MapColorToSubmesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapColorToSubmesh(int BaseCID)"
  },
  {
    "label": "MapColorToBaseMesh()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MapColorToBaseMesh(int SubCID)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Compute(const TArrayView<const int>& SubTriangles, int WantComponents = (int)EMeshComponents::All, bool bAttributes = true)"
  },
  {
    "label": "FDynamicMesh3()",
    "kind": "Method",
    "detail": "Function (Submesh =)",
    "insertText": "FDynamicMesh3((EMeshComponents)(BaseMesh->GetComponentsFlags() & WantComponents))"
  },
  {
    "label": "EnableAttributes()",
    "kind": "Method",
    "detail": "Function (Submesh .)",
    "insertText": "EnableAttributes()"
  },
  {
    "label": "Attributes()",
    "kind": "Method",
    "detail": "Function (Submesh .)",
    "insertText": "Attributes()->EnableMatchingAttributes(*BaseMesh->Attributes())"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int EstVerts = SubTriangles .)",
    "insertText": "Num()"
  },
  {
    "label": "Editor()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshEditor)",
    "insertText": "Editor(&Submesh)"
  },
  {
    "label": "AppendTriangles()",
    "kind": "Method",
    "detail": "Function (FDynamicMeshEditResult ResultOut ; Editor .)",
    "insertText": "AppendTriangles(BaseMesh, SubTriangles, Mappings, ResultOut, bComputeTriMaps)"
  },
  {
    "label": "ComputeBoundaryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeBoundaryInfo(SubTriangles)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Compute(FDynamicMesh3* Base, const TArrayView<const int>& Triangles, int WantComponents = (int)EMeshComponents::All, bool bAttributes = true)"
  },
  {
    "label": "ComputeBoundaryInfo()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "ComputeBoundaryInfo(const TArrayView<const int>& SubTriangles)"
  },
  {
    "label": "SubTris()",
    "kind": "Method",
    "detail": "Function (FIndexFlagSet)",
    "insertText": "SubTris(BaseMesh->MaxTriangleID(), SubTriangles.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SubTris .)",
    "insertText": "Add(TID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} BaseBorderV .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetTriEdges()",
    "kind": "Method",
    "detail": "Function (FIndex3i tedges = BaseMesh ->)",
    "insertText": "GetTriEdges(TID)"
  },
  {
    "label": "GetEdgeT()",
    "kind": "Method",
    "detail": "Function (int eid = tedges [ j ] ; FIndex2i tris = BaseMesh ->)",
    "insertText": "GetEdgeT(eid)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BaseBoundaryE .)",
    "insertText": "Add(eid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SubTris[tris.A] != SubTris[tris.B])"
  },
  {
    "label": "GetEdgeV()",
    "kind": "Method",
    "detail": "Function (FIndex2i ve = BaseMesh ->)",
    "insertText": "GetEdgeV(eid)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BaseBorderV .)",
    "insertText": "Add(ve.A)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BaseBorderV .)",
    "insertText": "Add(ve.B)"
  }
]