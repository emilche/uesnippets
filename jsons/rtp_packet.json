[
  {
    "label": "RtpPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacket"
  },
  {
    "label": "ExtensionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtensionInfo"
  },
  {
    "label": "RtpPacket()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "RtpPacket(const ExtensionManager* extensions)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const uint8_t* buffer, size_t size)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> packet)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(rtc::CopyOnWriteBuffer packet)"
  },
  {
    "label": "IdentifyExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IdentifyExtensions(ExtensionManager extensions)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "CopyHeaderFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyHeaderFrom(const RtpPacket& packet)"
  },
  {
    "label": "SetMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarker(bool marker_bit)"
  },
  {
    "label": "SetPayloadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadType(uint8_t payload_type)"
  },
  {
    "label": "SetSequenceNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequenceNumber(uint16_t seq_no)"
  },
  {
    "label": "SetTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimestamp(uint32_t timestamp)"
  },
  {
    "label": "SetSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSsrc(uint32_t ssrc)"
  },
  {
    "label": "ZeroMutableExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroMutableExtensions()"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveExtension(ExtensionType type)"
  },
  {
    "label": "SetCsrcs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCsrcs(rtc::ArrayView<const uint32_t> csrcs)"
  },
  {
    "label": "SetExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetExtension(const Values&...)"
  },
  {
    "label": "ReserveExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReserveExtension()"
  },
  {
    "label": "AllocateExtension()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<uint8_t>)",
    "insertText": "AllocateExtension(ExtensionType type, size_t length)"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPadding(size_t padding_size)"
  },
  {
    "label": "ParseBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseBuffer(const uint8_t* buffer, size_t size)"
  },
  {
    "label": "AllocateRawExtension()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<uint8_t>)",
    "insertText": "AllocateRawExtension(int id, size_t length)"
  },
  {
    "label": "PromoteToTwoByteHeaderExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromoteToTwoByteHeaderExtension()"
  },
  {
    "label": "SetExtensionLengthMaybeAddZeroPadding()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "SetExtensionLengthMaybeAddZeroPadding(size_t extensions_offset)"
  },
  {
    "label": "HasExtension()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "HasExtension(Extension::kId)"
  },
  {
    "label": "FindExtension()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FindExtension(Extension::kId)"
  }
]