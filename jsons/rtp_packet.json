[
  {
    "label": "RtpPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpPacket"
  },
  {
    "label": "ExtensionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtensionInfo"
  },
  {
    "label": "RtpPacket()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_PACKET_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_PACKET_H_ # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" modules / rtp_rtcp / include / rtp_header_extension_map . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" rtc_base / copy_on_write_buffer . h \" namespace webrtc { class RtpPacket { public : using ExtensionType = RTPExtensionType ; using ExtensionManager = RtpHeaderExtensionMap ;)",
    "insertText": "RtpPacket()"
  },
  {
    "label": "RtpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacket(const ExtensionManager* extensions)"
  },
  {
    "label": "RtpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacket(const RtpPacket&)"
  },
  {
    "label": "RtpPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacket(const ExtensionManager* extensions, size_t capacity)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacket&)",
    "insertText": "operator(const RtpPacket&)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const uint8_t* buffer, size_t size)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> packet)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(rtc::CopyOnWriteBuffer packet)"
  },
  {
    "label": "IdentifyExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IdentifyExtensions(ExtensionManager extensions)"
  },
  {
    "label": "Marker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Marker()"
  },
  {
    "label": "headers_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "headers_size()"
  },
  {
    "label": "PayloadBuffer()",
    "kind": "Method",
    "detail": "Function (} rtc::CopyOnWriteBuffer)",
    "insertText": "PayloadBuffer()"
  },
  {
    "label": "Buffer()",
    "kind": "Method",
    "detail": "Function (} rtc::CopyOnWriteBuffer)",
    "insertText": "Buffer()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "FreeCapacity()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "FreeCapacity()"
  },
  {
    "label": "MaxPayloadSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "MaxPayloadSize()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "CopyHeaderFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyHeaderFrom(const RtpPacket& packet)"
  },
  {
    "label": "SetMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarker(bool marker_bit)"
  },
  {
    "label": "SetPayloadType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadType(uint8_t payload_type)"
  },
  {
    "label": "SetSequenceNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequenceNumber(uint16_t seq_no)"
  },
  {
    "label": "SetTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimestamp(uint32_t timestamp)"
  },
  {
    "label": "SetSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSsrc(uint32_t ssrc)"
  },
  {
    "label": "ZeroMutableExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroMutableExtensions()"
  },
  {
    "label": "RemoveExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveExtension(ExtensionType type)"
  },
  {
    "label": "SetCsrcs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCsrcs(rtc::ArrayView<const uint32_t> csrcs)"
  },
  {
    "label": "HasExtension()",
    "kind": "Method",
    "detail": "Function (template<Extension> bool)",
    "insertText": "HasExtension()"
  },
  {
    "label": "HasExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExtension(ExtensionType type)"
  },
  {
    "label": "IsRegistered()",
    "kind": "Method",
    "detail": "Function (template<Extension> bool)",
    "insertText": "IsRegistered()"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (template<Extension,FirstValue,. . . Values> bool)",
    "insertText": "GetExtension(FirstValue, Values...)"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (template<Extension> absl::optional<Extension::value_type>)",
    "insertText": "GetExtension()"
  },
  {
    "label": "GetRawExtension()",
    "kind": "Method",
    "detail": "Function (template<Extension> rtc::ArrayView<const uint8_t>)",
    "insertText": "GetRawExtension()"
  },
  {
    "label": "SetExtension()",
    "kind": "Method",
    "detail": "Function (template<Extension,. . . Values> bool)",
    "insertText": "SetExtension(const Values&...)"
  },
  {
    "label": "ReserveExtension()",
    "kind": "Method",
    "detail": "Function (template<Extension> bool)",
    "insertText": "ReserveExtension()"
  },
  {
    "label": "AllocateExtension()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<uint8_t>)",
    "insertText": "AllocateExtension(ExtensionType type, size_t length)"
  },
  {
    "label": "FindExtension()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const uint8_t>)",
    "insertText": "FindExtension(ExtensionType type)"
  },
  {
    "label": "SetPayloadSize()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "SetPayloadSize(size_t size_bytes)"
  },
  {
    "label": "AllocatePayload()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "AllocatePayload(size_t size_bytes)"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPadding(size_t padding_size)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "ExtensionInfo()",
    "kind": "Method",
    "detail": "Function (private : struct ExtensionInfo {)",
    "insertText": "ExtensionInfo(uint8_t id) : ExtensionInfo(id, 0, 0)"
  },
  {
    "label": "ExtensionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExtensionInfo(uint8_t id, uint8_t length, uint16_t offset) : id(id), length(length), offset(offset)"
  },
  {
    "label": "ParseBuffer()",
    "kind": "Method",
    "detail": "Function (} uint8_t id ; uint8_t length ; uint16_t offset ; } ; bool)",
    "insertText": "ParseBuffer(const uint8_t* buffer, size_t size)"
  },
  {
    "label": "FindExtensionInfo()",
    "kind": "Method",
    "detail": "Function (const ExtensionInfo*)",
    "insertText": "FindExtensionInfo(int id)"
  },
  {
    "label": "FindOrCreateExtensionInfo()",
    "kind": "Method",
    "detail": "Function (ExtensionInfo&)",
    "insertText": "FindOrCreateExtensionInfo(int id)"
  },
  {
    "label": "AllocateRawExtension()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<uint8_t>)",
    "insertText": "AllocateRawExtension(int id, size_t length)"
  },
  {
    "label": "PromoteToTwoByteHeaderExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromoteToTwoByteHeaderExtension()"
  },
  {
    "label": "SetExtensionLengthMaybeAddZeroPadding()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "SetExtensionLengthMaybeAddZeroPadding(size_t extensions_offset)"
  },
  {
    "label": "WriteAt()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "WriteAt(size_t offset)"
  },
  {
    "label": "WriteAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteAt(size_t offset, uint8_t byte)"
  },
  {
    "label": "MutableData()",
    "kind": "Method",
    "detail": "Function (buffer_ .)",
    "insertText": "MutableData()"
  },
  {
    "label": "ReadAt()",
    "kind": "Method",
    "detail": "Function (} const uint8_t*)",
    "insertText": "ReadAt(size_t offset)"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (} template<Extension,FirstValue,. . . Values> bool)",
    "insertText": "GetExtension(FirstValue first, Values... values)"
  },
  {
    "label": "FindExtension()",
    "kind": "Method",
    "detail": "Function (auto raw =)",
    "insertText": "FindExtension(Extension::kId)"
  },
  {
    "label": "SetExtension()",
    "kind": "Method",
    "detail": "Function (} template<Extension,. . . Values> bool)",
    "insertText": "SetExtension(const Values&... values)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (const size_t value_size =)",
    "insertText": "ValueSize(values...)"
  },
  {
    "label": "AllocateExtension()",
    "kind": "Method",
    "detail": "Function (auto buffer =)",
    "insertText": "AllocateExtension(Extension::kId, value_size)"
  },
  {
    "label": "AllocateExtension()",
    "kind": "Method",
    "detail": "Function (auto buffer =)",
    "insertText": "AllocateExtension(Extension::kId, Extension::kValueSizeBytes)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(buffer.data(), 0, Extension::kValueSizeBytes)"
  }
]