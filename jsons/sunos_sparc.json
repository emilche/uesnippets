[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_machine_sunos_sparc_H)"
  },
  {
    "label": "__TBB_compiler_fence()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # define __TBB_machine_sunos_sparc_H # include<stdint . h> # include<unistd . h> # define __TBB_WORDSIZE 8 # define __TBB_ENDIANNESS __TBB_ENDIAN_BIG # define)",
    "insertText": "__TBB_compiler_fence() __asm__ __volatile__ (\"\": : :\"memory\") #define __TBB_control_consistency_helper() __TBB_compiler_fence() #define __TBB_acquire_consistency_helper() __TBB_compiler_fence() #define __TBB_release_consistency_helper() __TBB_compiler_fence() #define __TBB_full_memory_fence() __asm__ __volatile__(\"membar #LoadLoad|#LoadStore|#StoreStore|#StoreLoad\": : : \"memory\") static inline int32_t __TBB_machine_cmpswp4(volatile void *ptr, int32_t value, int32_t comparand)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int32_t result ; __asm__)",
    "insertText": "__volatile__(\"cas\\t[%5],%4,%1\" : \"=m\"(*(int32_t *)ptr), \"=r\"(result) : \"m\"(*(int32_t *)ptr), \"1\"(value), \"r\"(comparand), \"r\"(ptr) : \"memory\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int64_t result ; __asm__)",
    "insertText": "__volatile__(\"casx\\t[%5],%4,%1\" : \"=m\"(*(int64_t *)ptr), \"=r\"(result) : \"m\"(*(int64_t *)ptr), \"1\"(value), \"r\"(comparand), \"r\"(ptr) : \"memory\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int32_t result ; __asm__)",
    "insertText": "__volatile__(\"0:\\t add\\t %3, %4, %0\\n\" \"\\t cas\\t [%2], %3, %0\\n\" \"\\t cmp\\t %3, %0\\n\" \"\\t bne,a,pn\\t %%icc, 0b\\n\" \"\\t mov %0, %3\\n\" : \"=&r\"(result), \"=m\"(*(int32_t *)ptr) : \"r\"(ptr), \"r\"(*(int32_t *)ptr), \"r\"(addend), \"m\"(*(int32_t *)ptr) : \"ccr\", \"memory\")"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (int64_t result ; __asm__)",
    "insertText": "__volatile__(\"0:\\t add\\t %3, %4, %0\\n\" \"\\t casx\\t [%2], %3, %0\\n\" \"\\t cmp\\t %3, %0\\n\" \"\\t bne,a,pn\\t %%xcc, 0b\\n\" \"\\t mov %0, %3\\n\" : \"=&r\"(result), \"=m\"(*(int64_t *)ptr) : \"r\"(ptr), \"r\"(*(int64_t *)ptr), \"r\"(addend), \"m\"(*(int64_t *)ptr) : \"ccr\", \"memory\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(x, \"__TBB_Log2(0) undefined\")"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (uint64_t count ;)",
    "insertText": "x(x >> 1)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x >> 2)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x >> 4)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x >> 8)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x >> 16)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x >> 32)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__asm__(\"popc %1, %0\" : \"=r\"(count) : \"r\"(x))"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"0:\\t or\\t %2, %3, %%g1\\n\" \"\\t casx\\t [%1], %2, %%g1\\n\" \"\\t cmp\\t %2, %%g1\\n\" \"\\t bne,a,pn\\t %%xcc, 0b\\n\" \"\\t mov %%g1, %2\\n\" : \"=m\"(*(int64_t *)ptr) : \"r\"(ptr), \"r\"(*(int64_t *)ptr), \"r\"(value), \"m\"(*(int64_t *)ptr) : \"ccr\", \"g1\", \"memory\")"
  },
  {
    "label": "__TBB_machine_and()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_machine_and(volatile void *ptr, uint64_t value)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"0:\\t and\\t %2, %3, %%g1\\n\" \"\\t casx\\t [%1], %2, %%g1\\n\" \"\\t cmp\\t %2, %%g1\\n\" \"\\t bne,a,pn\\t %%xcc, 0b\\n\" \"\\t mov %%g1, %2\\n\" : \"=m\"(*(int64_t *)ptr) : \"r\"(ptr), \"r\"(*(int64_t *)ptr), \"r\"(value), \"m\"(*(int64_t *)ptr) : \"ccr\", \"g1\", \"memory\")"
  },
  {
    "label": "__TBB_machine_pause()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_machine_pause(int32_t delay)"
  },
  {
    "label": "__TBB_machine_trylockbyte()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "__TBB_machine_trylockbyte(unsigned char &flag)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (unsigned char result ; __asm__)",
    "insertText": "__volatile__(\"ldstub\\t [%2], %0\\n\" : \"=r\"(result), \"=m\"(flag) : \"r\"(&flag), \"m\"(flag) : \"memory\")"
  }
]