[
  {
    "label": "FakeDataChannelController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeDataChannelController"
  },
  {
    "label": "FakeDataChannelController()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_FAKE_DATA_CHANNEL_CONTROLLER_H_ # define PC_TEST_FAKE_DATA_CHANNEL_CONTROLLER_H_ # include<set> # include \" pc / sctp_data_channel . h \" # include \" rtc_base / checks . h \" class FakeDataChannelController : public webrtc::SctpDataChannelControllerInterface { public :)",
    "insertText": "FakeDataChannelController() : send_blocked_(false), transport_available_(false), ready_to_send_(false), transport_error_(false)"
  },
  {
    "label": "FakeDataChannelController()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakeDataChannelController()"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendData(int sid, const webrtc::SendDataParams& params, const rtc::CopyOnWriteBuffer& payload, cricket::SendDataResult* result)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(ready_to_send_)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(transport_available_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* result = cricket::SDR_BLOCK ; return false ; })",
    "insertText": "if(transport_error_)"
  },
  {
    "label": "ConnectDataChannel()",
    "kind": "Method",
    "detail": "Function (* result = cricket::SDR_ERROR ; return false ; } last_sid_ = sid ; last_send_data_params_ = params ; return true ; } bool)",
    "insertText": "ConnectDataChannel(webrtc::SctpDataChannel* data_channel)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(connected_channels_.find(data_channel) == connected_channels_.end())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (connected_channels_ .)",
    "insertText": "insert(data_channel)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(connected_channels_.find(data_channel) != connected_channels_.end())"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_INFO)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (connected_channels_ .)",
    "insertText": "erase(data_channel)"
  },
  {
    "label": "AddSctpDataStream()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSctpDataStream(int sid)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(sid >= 0)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (recv_ssrcs_ .)",
    "insertText": "insert(sid)"
  },
  {
    "label": "RemoveSctpDataStream()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveSctpDataStream(int sid)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (send_ssrcs_ .)",
    "insertText": "erase(sid)"
  },
  {
    "label": "OnClosingProcedureComplete()",
    "kind": "Method",
    "detail": "Function (ch ->)",
    "insertText": "OnClosingProcedureComplete(sid)"
  },
  {
    "label": "ReadyToSendData()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "ReadyToSendData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (send_blocked_ = blocked ;)",
    "insertText": "if(!blocked)"
  },
  {
    "label": "OnTransportReady()",
    "kind": "Method",
    "detail": "Function (ch ->)",
    "insertText": "OnTransportReady(true)"
  },
  {
    "label": "set_transport_available()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "set_transport_available(bool available)"
  },
  {
    "label": "set_ready_to_send()",
    "kind": "Method",
    "detail": "Function (transport_available_ = available ; } void)",
    "insertText": "set_ready_to_send(bool ready)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ready_to_send_ = ready ;)",
    "insertText": "if(ready)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::set<webrtc::SctpDataChannel*>::iterator it ;)",
    "insertText": "for(it = connected_channels_.begin(); it != connected_channels_.end(); ++it)"
  },
  {
    "label": "set_transport_error()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "set_transport_error()"
  },
  {
    "label": "last_sid()",
    "kind": "Method",
    "detail": "Function (transport_error_ = true ; } int)",
    "insertText": "last_sid()"
  },
  {
    "label": "IsSendStreamAdded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSendStreamAdded(uint32_t stream)"
  },
  {
    "label": "IsRecvStreamAdded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRecvStreamAdded(uint32_t stream)"
  }
]