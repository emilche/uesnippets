[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FAnimTimelineTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack"
  },
  {
    "label": "SAnimTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTrack"
  },
  {
    "label": "SAnimOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimOutliner"
  },
  {
    "label": "FAnimModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel"
  },
  {
    "label": "FAnimTimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimeSliderController"
  },
  {
    "label": "FAnimTrackAreaSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTrackAreaSlot"
  },
  {
    "label": "SAnimTrackArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTrackArea"
  },
  {
    "label": "FAnimTrackAreaSlot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Geometry . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SlotBase . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" class FArrangedChildren ; class FPaintArgs ; class FSlateWindowElementList ; class FAnimTimelineTrack ; class SAnimTrack ; class SAnimOutliner ; class FAnimModel ; class FAnimTimeSliderController ; class FAnimTrackAreaSlot : public TSlotBase<FAnimTrackAreaSlot>,public TAlignmentWidgetSlotMixin<FAnimTrackAreaSlot> { public :)",
    "insertText": "FAnimTrackAreaSlot(const TSharedPtr<SAnimTrack>& InSlotContent)"
  },
  {
    "label": "GetVerticalOffset()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVerticalOffset()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SAnimTrack> TrackWidget ; } ; class SAnimTrackArea : public SPanel { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimTrackArea)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_END_ARGS() SAnimTrackArea() : Children(this)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FAnimModel>& InAnimModel, const TSharedRef<FAnimTimeSliderController>& InTimeSliderController)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Empty()"
  },
  {
    "label": "AddTrackSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTrackSlot(const TSharedRef<FAnimTimelineTrack>& InTrack, const TSharedPtr<SAnimTrack>& InTrackWidget)"
  },
  {
    "label": "FindTrackSlot()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SAnimTrack>)",
    "insertText": "FindTrackSlot(const TSharedRef<FAnimTimelineTrack>& InTrack)"
  },
  {
    "label": "GetCachedGeometry()",
    "kind": "Method",
    "detail": "Function (const FGeometry&)",
    "insertText": "GetCachedGeometry()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "UpdateHoverStates()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateHoverStates(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  }
]