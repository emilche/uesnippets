[
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "FSkeletalMeshEditorMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshEditorMode"
  },
  {
    "label": "FWorkflowCentricApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkflowCentricApplication"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "FWorkflowTabFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkflowTabFactory"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FMeshPropertiesSummoner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPropertiesSummoner"
  },
  {
    "label": "FAssetEditorToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetEditorToolkit"
  },
  {
    "label": "FMeshControllerMappingTabSummoner",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshControllerMappingTabSummoner"
  },
  {
    "label": "FSkeletalMeshEditorMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Toolkits / AssetEditorToolkit . h \" # include \" WorkflowOrientedApp / WorkflowCentricApplication . h \" # include \" PersonaDelegates . h \" # include \" WorkflowOrientedApp / ApplicationMode . h \" # include \" IDocumentation . h \" # include \" WorkflowOrientedApp / WorkflowTabFactory . h \" # include \" WorkflowOrientedApp / WorkflowTabManager . h \" class SToolTip ; class FSkeletalMeshEditorMode : public FApplicationMode { public :)",
    "insertText": "FSkeletalMeshEditorMode(TSharedRef<class FWorkflowCentricApplication> InHostingApp, TSharedRef<class ISkeletonTree> InSkeletonTree)"
  },
  {
    "label": "RegisterTabFactories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTabFactories(TSharedPtr<FTabManager> InTabManager)"
  },
  {
    "label": "AddTabFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTabFactory(FCreateWorkflowTabFactory FactoryCreator)"
  },
  {
    "label": "RemoveTabFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTabFactory(FName TabFactoryID)"
  },
  {
    "label": "CreateMeshControllerMappingTabFactory()",
    "kind": "Method",
    "detail": "Function (protected : TWeakPtr<class FWorkflowCentricApplication> HostingAppPtr ; FWorkflowAllowedTabSet TabFactories ; TSharedRef<class FWorkflowTabFactory>)",
    "insertText": "CreateMeshControllerMappingTabFactory(const TSharedRef<class FWorkflowCentricApplication>& InHostingApp, const TWeakObjectPtr<class USkeletalMesh>& InEditingMesh, FSimpleMulticastDelegate& OnPostUndo)"
  },
  {
    "label": "FMeshPropertiesSummoner()",
    "kind": "Method",
    "detail": "Function (} ; struct FMeshPropertiesSummoner : public FWorkflowTabFactory {)",
    "insertText": "FMeshPropertiesSummoner(TSharedPtr<class FAssetEditorToolkit> InHostingApp, FOnGetAsset InOnGetAsset)"
  },
  {
    "label": "CreateTabBody()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateTabBody(const FWorkflowTabSpawnInfo& Info)"
  },
  {
    "label": "CreateTabToolTipWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SToolTip>)",
    "insertText": "CreateTabToolTipWidget(const FWorkflowTabSpawnInfo& Info)"
  },
  {
    "label": "FMeshControllerMappingTabSummoner()",
    "kind": "Method",
    "detail": "Function (} private : FOnGetAsset OnGetAsset ; } ; struct FMeshControllerMappingTabSummoner : public FWorkflowTabFactory { public :)",
    "insertText": "FMeshControllerMappingTabSummoner(TSharedPtr<class FAssetEditorToolkit> InHostingApp, const TWeakObjectPtr<class USkeletalMesh>& InEditingMesh, FSimpleMulticastDelegate& InOnPostUndo)"
  }
]