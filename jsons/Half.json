[
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_MATH_HALF_HAS_BEEN_INCLUDED # define OPENVDB_MATH_HALF_HAS_BEEN_INCLUDED # include<openvdb / Platform . h> # include<openvdb / version . h> # include<iostream> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace math { namespace internal { class half { public :)",
    "insertText": "half()"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "half(float f)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "half(const half &)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "half(half &&)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "float()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (half)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (half&)",
    "insertText": "operator(const half &h)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (half&)",
    "insertText": "operator(half &&h)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (half&)",
    "insertText": "operator(float f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (half&)",
    "insertText": "operator(half h)"
  },
  {
    "label": "round()",
    "kind": "Method",
    "detail": "Function (half)",
    "insertText": "round(unsigned int n)"
  },
  {
    "label": "isFinite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFinite()"
  },
  {
    "label": "isNormalized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNormalized()"
  },
  {
    "label": "isDenormalized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDenormalized()"
  },
  {
    "label": "isZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isZero()"
  },
  {
    "label": "isNan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNan()"
  },
  {
    "label": "isInfinity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInfinity()"
  },
  {
    "label": "isNegative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isNegative()"
  },
  {
    "label": "posInf()",
    "kind": "Method",
    "detail": "Function (half)",
    "insertText": "posInf()"
  },
  {
    "label": "negInf()",
    "kind": "Method",
    "detail": "Function (half)",
    "insertText": "negInf()"
  },
  {
    "label": "qNan()",
    "kind": "Method",
    "detail": "Function (half)",
    "insertText": "qNan()"
  },
  {
    "label": "sNan()",
    "kind": "Method",
    "detail": "Function (half)",
    "insertText": "sNan()"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (unsigned short)",
    "insertText": "bits()"
  },
  {
    "label": "setBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBits(unsigned short bits)"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (public : union uif { unsigned int i ; float f ; } ; private : short)",
    "insertText": "convert(int i)"
  },
  {
    "label": "overflow()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "overflow()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (unsigned short _h ; const uif _toFloat [ 1<<1 6 ] ; const unsigned short _eLut [ 1<<9 ] ; } ; std::ostream&)",
    "insertText": "operator(std::ostream &os, half h)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::istream&)",
    "insertText": "operator(std::istream &is, half &h)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printBits(std::ostream &os, half h)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printBits(std::ostream &os, float f)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printBits(char c[19], half h)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printBits(char c[35], float f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined _WIN32 || defined _WIN64) && defined _MSC_VER #define VDB_HALF_MIN 5.96046448e-08f #define VDB_HALF_NRM_MIN 6.10351562e-05f #define VDB_HALF_MAX 65504.0f #define VDB_HALF_EPSILON 0.00097656f #else #define VDB_HALF_MIN 5.96046448e-08 #define VDB_HALF_NRM_MIN 6.10351562e-05 #define VDB_HALF_MAX 65504.0 #define VDB_HALF_EPSILON 0.00097656 #endif #define VDB_HALF_MANT_DIG 11 #define VDB_HALF_DIG 3 #define VDB_HALF_DECIMAL_DIG 5 #define VDB_HALF_RADIX 2 #define VDB_HALF_MIN_EXP -13 #define VDB_HALF_MAX_EXP 16 #define VDB_HALF_MIN_10_EXP -4 #define VDB_HALF_MAX_10_EXP 4 inline half::half (float f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uif x ; x . f = f ;)",
    "insertText": "if(f == 0)"
  },
  {
    "label": "_h()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_h(unsigned short)(x.i >> 16)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (} else { int)",
    "insertText": "e(x.i >> 23)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (e = _eLut [ e ] ;)",
    "insertText": "if(e)"
  },
  {
    "label": "_h()",
    "kind": "Method",
    "detail": "Function (int m = x . i& 0 x007fffff ;)",
    "insertText": "_h(unsigned short)(e + ((m + 0x00000fff + ((m >> 13) & 1)) >> 13))"
  },
  {
    "label": "convert()",
    "kind": "Method",
    "detail": "Function (} else { _h =)",
    "insertText": "convert(x.i)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (unsigned short s = _h& 0 x8000 ; unsigned short e = _h& 0 x7fff ;)",
    "insertText": "e(unsigned short)(e >> (9 - n))"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "e(unsigned short)(e + (e & 1))"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "e(unsigned short)(e << (9 - n))"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (e = _h ;)",
    "insertText": "e(unsigned short)(e >> (10 - n))"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "e(unsigned short)(e << (10 - n))"
  },
  {
    "label": "_h()",
    "kind": "Method",
    "detail": "Function (} half h ; h .)",
    "insertText": "_h(unsigned short)(s | e)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(f)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(float (*this) + float (h))"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(float (*this) + f)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(float (*this) - float (h))"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(float (*this) - f)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(float (*this) * float (h))"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(float (*this) * f)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(float (*this) / float (h))"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "half(float (*this) / f)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (unsigned short)",
    "insertText": "e(_h >> 10)"
  }
]