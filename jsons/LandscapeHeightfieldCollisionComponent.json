[
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "FAsyncPreRegisterDDCRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncPreRegisterDDCRequest"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "UPhysicalMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicalMaterial"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FNavigableGeometryExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigableGeometryExport"
  },
  {
    "label": "FHeightField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeightField"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ULandscapeHeightfieldCollisionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeHeightfieldCollisionComponent"
  },
  {
    "label": "FLandscapeHeightfieldCollisionComponentSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeHeightfieldCollisionComponentSceneProxy"
  },
  {
    "label": "FHeightfieldGeometryRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeightfieldGeometryRef"
  },
  {
    "label": "FEnableCollisionHashOptimScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnableCollisionHashOptimScope"
  },
  {
    "label": "ECollisionQuadFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionQuadFlags"
  },
  {
    "label": "FWriteRuntimeDataParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteRuntimeDataParams"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" Templates / RefCounting . h \" # include \" EngineDefines . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" Components / PrimitiveComponent . h \" # include \" Serialization / BulkData . h \" # include \" LandscapeHeightfieldCollisionComponent . generated . h \" class ALandscapeProxy ; class FAsyncPreRegisterDDCRequest ; class ULandscapeComponent ; class ULandscapeInfo ; class ULandscapeLayerInfoObject ; class UPhysicalMaterial ; struct FConvexVolume ; struct FEngineShowFlags ; struct FNavigableGeometryExport ; namespace Chaos { class FHeightField ; } enum class EHeightfieldSource { None,Simple,Complex,Editor } ;)",
    "insertText": "UCLASS(MinimalAPI, Within=LandscapeProxy)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (class FLandscapeHeightfieldCollisionComponentSceneProxy ;)",
    "insertText": "GENERATED_UCLASS_BODY() ULandscapeHeightfieldCollisionComponent(FVTableHelper& Helper)"
  },
  {
    "label": "ULandscapeHeightfieldCollisionComponent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ULandscapeHeightfieldCollisionComponent()"
  },
  {
    "label": "FHeightfieldGeometryRef()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FHeightfieldGeometryRef(FGuid& InGuid)"
  },
  {
    "label": "FHeightfieldGeometryRef()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHeightfieldGeometryRef()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "OnCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FHeightfieldGeometryRef> HeightfieldRef ; Chaos::FHeightFieldPtr LocalHeightfieldGeometryRef ; Chaos::FHeightFieldPtr LocalHeightfieldSimpleGeometryRef ; int32 HeightfieldRowsCount ; int32 HeightfieldColumnsCount ; FNavHeightfieldSamples CachedHeightFieldSamples ; enum ECollisionQuadFlags : uint8 { QF_PhysicalMaterialMask = 6 3,QF_EdgeTurned = 6 4,QF_NoCollision = 1 2 8,} ; # if WITH_EDITORONLY_DATA private : bool bEnableCollisionHashOptim = false ; # endif protected : void)",
    "insertText": "OnCreatePhysicsState()"
  },
  {
    "label": "OnDestroyPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestroyPhysicsState()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "DestroyComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyComponent(bool bPromoteChildren = false)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform &BoundTransform)"
  },
  {
    "label": "GetCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (ECollisionEnabled::Type)",
    "insertText": "GetCollisionEnabled()"
  },
  {
    "label": "GetCollisionResponseToChannel()",
    "kind": "Method",
    "detail": "Function (ECollisionResponse)",
    "insertText": "GetCollisionResponseToChannel(ECollisionChannel Channel)"
  },
  {
    "label": "GetCollisionObjectType()",
    "kind": "Method",
    "detail": "Function (ECollisionChannel)",
    "insertText": "GetCollisionObjectType()"
  },
  {
    "label": "GetCollisionResponseToChannels()",
    "kind": "Method",
    "detail": "Function (const FCollisionResponseContainer&)",
    "insertText": "GetCollisionResponseToChannels()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "DoCustomNavigableGeometryExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCustomNavigableGeometryExport(FNavigableGeometryExport& GeomExport)"
  },
  {
    "label": "IsShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShown(const FEngineShowFlags& ShowFlags)"
  },
  {
    "label": "SupportsGatheringGeometrySlices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsGatheringGeometrySlices()"
  },
  {
    "label": "GetGeometryGatheringMode()",
    "kind": "Method",
    "detail": "Function (ENavDataGatheringMode)",
    "insertText": "GetGeometryGatheringMode()"
  },
  {
    "label": "PrepareGeometryExportSync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareGeometryExportSync()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "NeedsLoadForClient()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "NeedsLoadForClient()"
  },
  {
    "label": "NeedsLoadForServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForServer()"
  },
  {
    "label": "ExportCustomProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportCustomProperties(FOutputDevice& Out, uint32 Indent)"
  },
  {
    "label": "ImportCustomProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportCustomProperties(const TCHAR* SourceText, FFeedbackContext* Warn)"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "SpeculativelyLoadAsyncDDCCollsionData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpeculativelyLoadAsyncDDCCollsionData()"
  },
  {
    "label": "CookCollisionData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CookCollisionData(const FName& Format, bool bUseDefaultMaterialOnly, bool bCheckDDC, TArray<uint8>& OutCookedData, TArray<UPhysicalMaterial*>& InOutMaterials)"
  },
  {
    "label": "UpdateHeightfieldRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHeightfieldRegion(int32 ComponentX1, int32 ComponentY1, int32 ComponentX2, int32 ComponentY2)"
  },
  {
    "label": "ComputeCollisionHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputeCollisionHash()"
  },
  {
    "label": "GetCollisionSampleInfo()",
    "kind": "Method",
    "detail": "Function (# endif struct FWriteRuntimeDataParams { bool bUseDefaultMaterialOnly = false ; bool bProcessRenderIndices = true ; bool bProcessVisibilityLayer = true ; TArrayView<const uint16> Heights ; TArrayView<const uint16> SimpleHeights ; TArrayView<const uint8> DominantLayers ; TArrayView<const uint8> SimpleDominantLayers ; TArrayView<const uint8> RenderPhysicalMaterialIds ; TArrayView<const uint8> SimpleRenderPhysicalMaterialIds ; TArrayView<const TObjectPtr<UPhysicalMaterial>> PhysicalMaterialRenderObjects ; TArrayView<const TObjectPtr<ULandscapeLayerInfoObject>> ComponentLayerInfos ; int32 VisibilityLayerIndex = INDEX_NONE ; } ; void)",
    "insertText": "GetCollisionSampleInfo(int32& OutCollisionSizeVerts, int32& OutSimpleCollisionSizeVerts, int32& OutNumSamples, int32& OutNumSimpleSamples)"
  },
  {
    "label": "WriteRuntimeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteRuntimeData(const FWriteRuntimeDataParams& Params, TArray<uint8>& OutHeightfieldData, TArray<UPhysicalMaterial*>& InOutMaterials)"
  },
  {
    "label": "GetLandscapeInfo()",
    "kind": "Method",
    "detail": "Function (ULandscapeInfo*)",
    "insertText": "GetLandscapeInfo()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) && WITH_EDITORONLY_DATA virtual FPrimitiveSceneProxy* CreateSceneProxy()"
  },
  {
    "label": "CreateCollisionObject()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CreateCollisionObject()"
  },
  {
    "label": "CreateCollisionObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCollisionObject(bool bUseDefaultMaterialOnly, TArrayView<const uint16> Heights, TArrayView<const uint16> SimpleHeights, TArrayView<const uint8> PhysicalMaterialIds, TArrayView<const uint8> SimplePhysicalMaterialIds, TArrayView<const TObjectPtr<UPhysicalMaterial>> PhysicalMaterialObjects)"
  },
  {
    "label": "GetLandscapeProxy()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy*)",
    "insertText": "GetLandscapeProxy()"
  },
  {
    "label": "GetSectionBase()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetSectionBase()"
  },
  {
    "label": "SetSectionBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSectionBase(FIntPoint InSectionBase)"
  },
  {
    "label": "RecreateCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreateCollision()"
  },
  {
    "label": "DeferredDestroyCollision()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DeferredDestroyCollision(const TRefCountPtr<FHeightfieldGeometryRef>& HeightfieldRefLifetimeExtender)"
  },
  {
    "label": "SnapFoliageInstances()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITORONLY_DATA void)",
    "insertText": "SnapFoliageInstances(const FBox& InInstanceBox)"
  },
  {
    "label": "SnapFoliageInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapFoliageInstances()"
  },
  {
    "label": "SetRenderComponent()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetRenderComponent(ULandscapeComponent* InRenderComponent)"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (RenderComponentRef = InRenderComponent ; } public : TOptional<float>)",
    "insertText": "GetHeight(float X, float Y, EHeightfieldSource HeightFieldSource)"
  },
  {
    "label": "GetPhysicalMaterial()",
    "kind": "Method",
    "detail": "Function (UPhysicalMaterial*)",
    "insertText": "GetPhysicalMaterial(float X, float Y, EHeightfieldSource HeightFieldSource)"
  },
  {
    "label": "FillHeightTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FillHeightTile(TArrayView<float> Heights, int32 Offset, int32 Stride)"
  },
  {
    "label": "FillMaterialIndexTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FillMaterialIndexTile(TArrayView<uint8> Materials, int32 Offset, int32 Stride)"
  }
]