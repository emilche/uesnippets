[
  {
    "label": "Channel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Channel"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Type"
  },
  {
    "label": "Indent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Indent"
  },
  {
    "label": "Indent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Preprocessor . h \" namespace Logging { struct Channel { enum Enum { USER,DEV,TELEMETRY,} ; const unsigned int COUNT = 3 u ; } ; struct Type { enum Enum { LOG_INFO,LOG_WARNING,LOG_ERROR,LOG_SUCCESS } ; } ; class Indent { public :)",
    "insertText": "Indent(Channel::Enum channel)"
  },
  {
    "label": "Indent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Indent(void)"
  },
  {
    "label": "IncrementIndentation()",
    "kind": "Method",
    "detail": "Function (private : Channel::Enum m_channel ; } ; void)",
    "insertText": "IncrementIndentation(Channel::Enum channel)"
  },
  {
    "label": "DecrementIndentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementIndentation(Channel::Enum channel)"
  },
  {
    "label": "GetIndentation()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetIndentation(Channel::Enum channel)"
  },
  {
    "label": "LogNoFormat()",
    "kind": "Method",
    "detail": "Function (template<int Channel,T> void)",
    "insertText": "LogNoFormat(const T* const buffer)"
  },
  {
    "label": "USER()",
    "kind": "Method",
    "detail": "Function (template<> void LogNoFormat<Channel::)",
    "insertText": "USER(const wchar_t* const buffer)"
  },
  {
    "label": "DEV()",
    "kind": "Method",
    "detail": "Function (template<> void LogNoFormat<Channel::)",
    "insertText": "DEV(const char* const buffer)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(Channel::Enum channel, Type::Enum type, const char* const format, ...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*OutputHandlerType)(Channel::Enum channel, Type::Enum type, const wchar_t* const text)"
  },
  {
    "label": "SetOutputHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputHandler(OutputHandlerType handler)"
  },
  {
    "label": "EnableChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableChannel(Channel::Enum channel, bool enabled)"
  }
]