[
  {
    "label": "IMessageRpcClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageRpcClient"
  },
  {
    "label": "FCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCall"
  },
  {
    "label": "TCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCall"
  },
  {
    "label": "FCall()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MessageEndpoint . h \" # include \" Misc / Guid . h \" # include \" IMessageContext . h \" # include \" IMessageRpcCall . h \" # include \" Async / IAsyncProgress . h \" # include \" Async / IAsyncTask . h \" # include \" Async / Future . h \" # include \" Async / AsyncResult . h \" class IMessageRpcClient { class FCall : public IAsyncProgress,public IAsyncTask,public IMessageRpcCall { public :)",
    "insertText": "FCall() : State(EAsyncTaskState::Running) , TimeCreated(FDateTime::UtcNow())"
  },
  {
    "label": "OnCancelled()",
    "kind": "Method",
    "detail": "Function (} public : FSimpleDelegate&)",
    "insertText": "OnCancelled()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (State = EAsyncTaskState::Cancelled ; CanceledDelegate .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "GetTaskState()",
    "kind": "Method",
    "detail": "Function (} EAsyncTaskState)",
    "insertText": "GetTaskState()"
  },
  {
    "label": "UtcNow()",
    "kind": "Method",
    "detail": "Function (Completion = InCompletion ; StatusText = InStatusText ; LastUpdated =)",
    "insertText": "UtcNow()"
  },
  {
    "label": "TCall()",
    "kind": "Method",
    "detail": "Function (} protected : float Completion ; FDateTime LastUpdated ; EAsyncTaskState State ; FText StatusText ; FDateTime TimeCreated ; private : FSimpleDelegate CanceledDelegate ; FSimpleDelegate ProgressChangedDelegate ; } ; template<RpcType,. . . P> class TCall : public FCall { public :)",
    "insertText": "TCall(const FGuid& CallId, P... Params) : MessageTemplate(new typename RpcType::FRequest(Params...))"
  },
  {
    "label": "TCall()",
    "kind": "Method",
    "detail": "Function (MessageTemplate -> CallId = CallId ; } ~)",
    "insertText": "TCall()"
  },
  {
    "label": "Complete()",
    "kind": "Method",
    "detail": "Function (delete MessageTemplate ; } void)",
    "insertText": "Complete(const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& ResponseContext)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (State = EAsyncTaskState::Completed ; Promise .)",
    "insertText": "SetValue(static_cast<const typename RpcType::FResponse*>(ResponseContext->GetMessage())->Result)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} else { State = EAsyncTaskState::Failed ; Promise .)",
    "insertText": "SetValue(typename RpcType::FResult())"
  },
  {
    "label": "ConstructMessage()",
    "kind": "Method",
    "detail": "Function (} } void*)",
    "insertText": "ConstructMessage()"
  },
  {
    "label": "GetFuture()",
    "kind": "Method",
    "detail": "Function (} TFuture<RpcType::FResult>)",
    "insertText": "GetFuture()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetId()"
  },
  {
    "label": "TimeOut()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TimeOut()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (} private : TPromise<RpcType::FResult> Promise ; RpcType::FRequest* MessageTemplate ; } ; public : void)",
    "insertText": "Connect(const FMessageAddress& InServerAddress)"
  },
  {
    "label": "Disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disconnect()"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (public : template<RpcType,. . . P> TAsyncResult<RpcType::FResult>)",
    "insertText": "Call(P... Params)"
  },
  {
    "label": "NewGuid()",
    "kind": "Method",
    "detail": "Function (typedef TCall<RpcType,P . . .> CallType ; FGuid CallId =)",
    "insertText": "NewGuid()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<CallType> Call =)",
    "insertText": "MakeShareable(new CallType(CallId, Params...))"
  },
  {
    "label": "AddCall()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "AddCall(Call)"
  },
  {
    "label": "OnCancelled()",
    "kind": "Method",
    "detail": "Function (Call ->)",
    "insertText": "OnCancelled().BindLambda([this, CallId]() { CancelCall(CallId); })"
  },
  {
    "label": "FResult()",
    "kind": "Method",
    "detail": "Function (} return TAsyncResult<)",
    "insertText": "FResult(Call->GetFuture(), Call, Call)"
  },
  {
    "label": "AddCall()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "AddCall(const TSharedRef<IMessageRpcCall>& Call)"
  },
  {
    "label": "CancelCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCall(const FGuid& CallId)"
  },
  {
    "label": "IMessageRpcClient()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "IMessageRpcClient()"
  }
]