[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MachLogMessage()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_MACH_LOGGING_H_ # define BASE_MAC_MACH_LOGGING_H_ # include<mach / mach . h> # include \" base / base_export . h \" # include \" base / logging . h \" # include \" build / build_config . h \" namespace logging { class BASE_EXPORT MachLogMessage : public logging::LogMessage { public :)",
    "insertText": "MachLogMessage(const char* file_path, int line, LogSeverity severity, mach_error_t mach_err)"
  },
  {
    "label": "MachLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MachLogMessage(const MachLogMessage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MachLogMessage&)",
    "insertText": "operator(const MachLogMessage&)"
  },
  {
    "label": "MachLogMessage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MachLogMessage()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (private : mach_error_t mach_err_ ; } ; } # if)",
    "insertText": "DCHECK_IS_ON() #define MACH_DVLOG_IS_ON(verbose_level) VLOG_IS_ON(verbose_level) #else #define MACH_DVLOG_IS_ON(verbose_level) 0 #endif #define MACH_LOG_STREAM(severity, mach_err) \\ COMPACT_GOOGLE_LOG_EX_ ## severity(MachLogMessage, mach_err).stream() #define MACH_VLOG_STREAM(verbose_level, mach_err) \\ logging::MachLogMessage(__FILE__, __LINE__, \\ -verbose_level, mach_err).stream() #define MACH_LOG(severity, mach_err) \\ LAZY_STREAM(MACH_LOG_STREAM(severity, mach_err), LOG_IS_ON(severity)) #define MACH_LOG_IF(severity, condition, mach_err) \\ LAZY_STREAM(MACH_LOG_STREAM(severity, mach_err), \\ LOG_IS_ON(severity) && (condition)) #define MACH_VLOG(verbose_level, mach_err) \\ LAZY_STREAM(MACH_VLOG_STREAM(verbose_level, mach_err), \\ VLOG_IS_ON(verbose_level)) #define MACH_VLOG_IF(verbose_level, condition, mach_err) \\ LAZY_STREAM(MACH_VLOG_STREAM(verbose_level, mach_err), \\ VLOG_IS_ON(verbose_level) && (condition)) #define MACH_CHECK(condition, mach_err) \\ LAZY_STREAM(MACH_LOG_STREAM(FATAL, mach_err), !(condition)) \\ << \"Check failed: \" # condition << \". \" #define MACH_DLOG(severity, mach_err) \\ LAZY_STREAM(MACH_LOG_STREAM(severity, mach_err), DLOG_IS_ON(severity)) #define MACH_DLOG_IF(severity, condition, mach_err) \\ LAZY_STREAM(MACH_LOG_STREAM(severity, mach_err), \\ DLOG_IS_ON(severity) && (condition)) #define MACH_DVLOG(verbose_level, mach_err) \\ LAZY_STREAM(MACH_VLOG_STREAM(verbose_level, mach_err), \\ MACH_DVLOG_IS_ON(verbose_level)) #define MACH_DVLOG_IF(verbose_level, condition, mach_err) \\ LAZY_STREAM(MACH_VLOG_STREAM(verbose_level, mach_err), \\ MACH_DVLOG_IS_ON(verbose_level) && (condition)) #define MACH_DCHECK(condition, mach_err) \\ LAZY_STREAM(MACH_LOG_STREAM(FATAL, mach_err), \\ DCHECK_IS_ON() && !(condition)) \\ << \"Check failed: \" #condition << \". \" #if !BUILDFLAG(IS_IOS)"
  },
  {
    "label": "BootstrapLogMessage()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT BootstrapLogMessage : public logging::LogMessage { public :)",
    "insertText": "BootstrapLogMessage(const char* file_path, int line, LogSeverity severity, kern_return_t bootstrap_err)"
  },
  {
    "label": "BootstrapLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BootstrapLogMessage(const BootstrapLogMessage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BootstrapLogMessage&)",
    "insertText": "operator(const BootstrapLogMessage&)"
  },
  {
    "label": "BootstrapLogMessage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BootstrapLogMessage()"
  }
]