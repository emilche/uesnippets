[
  {
    "label": "EResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResult"
  },
  {
    "label": "EVoiceResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVoiceResult"
  },
  {
    "label": "EDenyReason",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDenyReason"
  },
  {
    "label": "EBeginAuthSessionResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBeginAuthSessionResult"
  },
  {
    "label": "EAuthSessionResponse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAuthSessionResponse"
  },
  {
    "label": "EUserHasLicenseForAppResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EUserHasLicenseForAppResult"
  },
  {
    "label": "EAccountType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAccountType"
  },
  {
    "label": "EChatEntryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EChatEntryType"
  },
  {
    "label": "EChatRoomEnterResponse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EChatRoomEnterResponse"
  },
  {
    "label": "EChatSteamIDInstanceFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EChatSteamIDInstanceFlags"
  },
  {
    "label": "ENotificationPosition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENotificationPosition"
  },
  {
    "label": "EBroadcastUploadResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBroadcastUploadResult"
  },
  {
    "label": "EMarketNotAllowedReasonFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMarketNotAllowedReasonFlags"
  },
  {
    "label": "EDurationControlProgress",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDurationControlProgress"
  },
  {
    "label": "EDurationControlNotification",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDurationControlNotification"
  },
  {
    "label": "EDurationControlOnlineState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDurationControlOnlineState"
  },
  {
    "label": "CSteamID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSteamID"
  },
  {
    "label": "SteamIDComponent_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SteamIDComponent_t"
  },
  {
    "label": "CGameID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CGameID"
  },
  {
    "label": "EGameIDType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGameIDType"
  },
  {
    "label": "GameID_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GameID_t"
  },
  {
    "label": "EGameSearchErrorCode_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGameSearchErrorCode_t"
  },
  {
    "label": "EPlayerResult_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlayerResult_t"
  },
  {
    "label": "ESteamIPv6ConnectivityProtocol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamIPv6ConnectivityProtocol"
  },
  {
    "label": "ESteamIPv6ConnectivityState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESteamIPv6ConnectivityState"
  },
  {
    "label": "ValvePackingSentinel_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValvePackingSentinel_t"
  },
  {
    "label": "k_EChatInstanceFlagClan()",
    "kind": "Method",
    "detail": "Function (# ifndef STEAMCLIENTPUBLIC_H # define STEAMCLIENTPUBLIC_H # include \" steamtypes . h \" # include \" steamuniverse . h \" enum EResult { k_EResultNone = 0,k_EResultOK = 1,k_EResultFail = 2,k_EResultNoConnection = 3,k_EResultInvalidPassword = 5,k_EResultLoggedInElsewhere = 6,k_EResultInvalidProtocolVer = 7,k_EResultInvalidParam = 8,k_EResultFileNotFound = 9,k_EResultBusy = 1 0,k_EResultInvalidState = 1 1,k_EResultInvalidName = 1 2,k_EResultInvalidEmail = 1 3,k_EResultDuplicateName = 1 4,k_EResultAccessDenied = 1 5,k_EResultTimeout = 1 6,k_EResultBanned = 1 7,k_EResultAccountNotFound = 1 8,k_EResultInvalidSteamID = 1 9,k_EResultServiceUnavailable = 2 0,k_EResultNotLoggedOn = 2 1,k_EResultPending = 2 2,k_EResultEncryptionFailure = 2 3,k_EResultInsufficientPrivilege = 2 4,k_EResultLimitExceeded = 2 5,k_EResultRevoked = 2 6,k_EResultExpired = 2 7,k_EResultAlreadyRedeemed = 2 8,k_EResultDuplicateRequest = 2 9,k_EResultAlreadyOwned = 3 0,k_EResultIPNotFound = 3 1,k_EResultPersistFailed = 3 2,k_EResultLockingFailed = 3 3,k_EResultLogonSessionReplaced = 3 4,k_EResultConnectFailed = 3 5,k_EResultHandshakeFailed = 3 6,k_EResultIOFailure = 3 7,k_EResultRemoteDisconnect = 3 8,k_EResultShoppingCartNotFound = 3 9,k_EResultBlocked = 4 0,k_EResultIgnored = 4 1,k_EResultNoMatch = 4 2,k_EResultAccountDisabled = 4 3,k_EResultServiceReadOnly = 4 4,k_EResultAccountNotFeatured = 4 5,k_EResultAdministratorOK = 4 6,k_EResultContentVersion = 4 7,k_EResultTryAnotherCM = 4 8,k_EResultPasswordRequiredToKickSession = 4 9,k_EResultAlreadyLoggedInElsewhere = 5 0,k_EResultSuspended = 5 1,k_EResultCancelled = 5 2,k_EResultDataCorruption = 5 3,k_EResultDiskFull = 5 4,k_EResultRemoteCallFailed = 5 5,k_EResultPasswordUnset = 5 6,k_EResultExternalAccountUnlinked = 5 7,k_EResultPSNTicketInvalid = 5 8,k_EResultExternalAccountAlreadyLinked = 5 9,k_EResultRemoteFileConflict = 6 0,k_EResultIllegalPassword = 6 1,k_EResultSameAsPreviousValue = 6 2,k_EResultAccountLogonDenied = 6 3,k_EResultCannotUseOldPassword = 6 4,k_EResultInvalidLoginAuthCode = 6 5,k_EResultAccountLogonDeniedNoMail = 6 6,k_EResultHardwareNotCapableOfIPT = 6 7,k_EResultIPTInitError = 6 8,k_EResultParentalControlRestricted = 6 9,k_EResultFacebookQueryError = 7 0,k_EResultExpiredLoginAuthCode = 7 1,k_EResultIPLoginRestrictionFailed = 7 2,k_EResultAccountLockedDown = 7 3,k_EResultAccountLogonDeniedVerifiedEmailRequired = 7 4,k_EResultNoMatchingURL = 7 5,k_EResultBadResponse = 7 6,k_EResultRequirePasswordReEntry = 7 7,k_EResultValueOutOfRange = 7 8,k_EResultUnexpectedError = 7 9,k_EResultDisabled = 8 0,k_EResultInvalidCEGSubmission = 8 1,k_EResultRestrictedDevice = 8 2,k_EResultRegionLocked = 8 3,k_EResultRateLimitExceeded = 8 4,k_EResultAccountLoginDeniedNeedTwoFactor = 8 5,k_EResultItemDeleted = 8 6,k_EResultAccountLoginDeniedThrottle = 8 7,k_EResultTwoFactorCodeMismatch = 8 8,k_EResultTwoFactorActivationCodeMismatch = 8 9,k_EResultAccountAssociatedToMultiplePartners = 9 0,k_EResultNotModified = 9 1,k_EResultNoMobileDevice = 9 2,k_EResultTimeNotSynced = 9 3,k_EResultSmsCodeFailed = 9 4,k_EResultAccountLimitExceeded = 9 5,k_EResultAccountActivityLimitExceeded = 9 6,k_EResultPhoneActivityLimitExceeded = 9 7,k_EResultRefundToWallet = 9 8,k_EResultEmailSendFailure = 9 9,k_EResultNotSettled = 1 0 0,k_EResultNeedCaptcha = 1 0 1,k_EResultGSLTDenied = 1 0 2,k_EResultGSOwnerDenied = 1 0 3,k_EResultInvalidItemType = 1 0 4,k_EResultIPBanned = 1 0 5,k_EResultGSLTExpired = 1 0 6,k_EResultInsufficientFunds = 1 0 7,k_EResultTooManyPending = 1 0 8,k_EResultNoSiteLicensesFound = 1 0 9,k_EResultWGNetworkSendExceeded = 1 1 0,k_EResultAccountNotFriends = 1 1 1,k_EResultLimitedUserAccount = 1 1 2,k_EResultCantRemoveItem = 1 1 3,k_EResultAccountDeleted = 1 1 4,k_EResultExistingUserCancelledLicense = 1 1 5,k_EResultCommunityCooldown = 1 1 6,k_EResultNoLauncherSpecified = 1 1 7,k_EResultMustAgreeToSSA = 1 1 8,k_EResultLauncherMigrated = 1 1 9,k_EResultSteamRealmMismatch = 1 2 0,k_EResultInvalidSignature = 1 2 1,k_EResultParseFailure = 1 2 2,k_EResultNoVerifiedPhone = 1 2 3,k_EResultInsufficientBattery = 1 2 4,k_EResultChargerRequired = 1 2 5,k_EResultCachedCredentialInvalid = 1 2 6,K_EResultPhoneNumberIsVOIP = 1 2 7,} ; enum EVoiceResult { k_EVoiceResultOK = 0,k_EVoiceResultNotInitialized = 1,k_EVoiceResultNotRecording = 2,k_EVoiceResultNoData = 3,k_EVoiceResultBufferTooSmall = 4,k_EVoiceResultDataCorrupted = 5,k_EVoiceResultRestricted = 6,k_EVoiceResultUnsupportedCodec = 7,k_EVoiceResultReceiverOutOfDate = 8,k_EVoiceResultReceiverDidNotAnswer = 9,} ; enum EDenyReason { k_EDenyInvalid = 0,k_EDenyInvalidVersion = 1,k_EDenyGeneric = 2,k_EDenyNotLoggedOn = 3,k_EDenyNoLicense = 4,k_EDenyCheater = 5,k_EDenyLoggedInElseWhere = 6,k_EDenyUnknownText = 7,k_EDenyIncompatibleAnticheat = 8,k_EDenyMemoryCorruption = 9,k_EDenyIncompatibleSoftware = 1 0,k_EDenySteamConnectionLost = 1 1,k_EDenySteamConnectionError = 1 2,k_EDenySteamResponseTimedOut = 1 3,k_EDenySteamValidationStalled = 1 4,k_EDenySteamOwnerLeftGuestUser = 1 5,} ; typedef uint32 HAuthTicket ; const HAuthTicket k_HAuthTicketInvalid = 0 ; enum EBeginAuthSessionResult { k_EBeginAuthSessionResultOK = 0,k_EBeginAuthSessionResultInvalidTicket = 1,k_EBeginAuthSessionResultDuplicateRequest = 2,k_EBeginAuthSessionResultInvalidVersion = 3,k_EBeginAuthSessionResultGameMismatch = 4,k_EBeginAuthSessionResultExpiredTicket = 5,} ; enum EAuthSessionResponse { k_EAuthSessionResponseOK = 0,k_EAuthSessionResponseUserNotConnectedToSteam = 1,k_EAuthSessionResponseNoLicenseOrExpired = 2,k_EAuthSessionResponseVACBanned = 3,k_EAuthSessionResponseLoggedInElseWhere = 4,k_EAuthSessionResponseVACCheckTimedOut = 5,k_EAuthSessionResponseAuthTicketCanceled = 6,k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed = 7,k_EAuthSessionResponseAuthTicketInvalid = 8,k_EAuthSessionResponsePublisherIssuedBan = 9,k_EAuthSessionResponseAuthTicketNetworkIdentityFailure = 1 0,} ; enum EUserHasLicenseForAppResult { k_EUserHasLicenseResultHasLicense = 0,k_EUserHasLicenseResultDoesNotHaveLicense = 1,k_EUserHasLicenseResultNoAuth = 2,} ; enum EAccountType { k_EAccountTypeInvalid = 0,k_EAccountTypeIndividual = 1,k_EAccountTypeMultiseat = 2,k_EAccountTypeGameServer = 3,k_EAccountTypeAnonGameServer = 4,k_EAccountTypePending = 5,k_EAccountTypeContentServer = 6,k_EAccountTypeClan = 7,k_EAccountTypeChat = 8,k_EAccountTypeConsoleUser = 9,k_EAccountTypeAnonUser = 1 0,k_EAccountTypeMax } ; enum EChatEntryType { k_EChatEntryTypeInvalid = 0,k_EChatEntryTypeChatMsg = 1,k_EChatEntryTypeTyping = 2,k_EChatEntryTypeInviteGame = 3,k_EChatEntryTypeEmote = 4,k_EChatEntryTypeLeftConversation = 6,k_EChatEntryTypeEntered = 7,k_EChatEntryTypeWasKicked = 8,k_EChatEntryTypeWasBanned = 9,k_EChatEntryTypeDisconnected = 1 0,k_EChatEntryTypeHistoricalChat = 1 1,k_EChatEntryTypeLinkBlocked = 1 4,} ; enum EChatRoomEnterResponse { k_EChatRoomEnterResponseSuccess = 1,k_EChatRoomEnterResponseDoesntExist = 2,k_EChatRoomEnterResponseNotAllowed = 3,k_EChatRoomEnterResponseFull = 4,k_EChatRoomEnterResponseError = 5,k_EChatRoomEnterResponseBanned = 6,k_EChatRoomEnterResponseLimited = 7,k_EChatRoomEnterResponseClanDisabled = 8,k_EChatRoomEnterResponseCommunityBan = 9,k_EChatRoomEnterResponseMemberBlockedYou = 1 0,k_EChatRoomEnterResponseYouBlockedMember = 1 1,k_EChatRoomEnterResponseRatelimitExceeded = 1 5,} ; const unsigned int k_unSteamAccountIDMask = 0 xFFFFFFFF ; const unsigned int k_unSteamAccountInstanceMask = 0 x000FFFFF ; const unsigned int k_unSteamUserDefaultInstance = 1 ; enum EChatSteamIDInstanceFlags { k_EChatAccountInstanceMask = 0 x00000FFF,)",
    "insertText": "k_EChatInstanceFlagClan(k_unSteamAccountInstanceMask + 1 ) >> 1, k_EChatInstanceFlagLobby = ( k_unSteamAccountInstanceMask + 1 ) >> 2, k_EChatInstanceFlagMMSLobby = ( k_unSteamAccountInstanceMask + 1)"
  },
  {
    "label": "k_EMarketNotAllowedReason_TemporaryFailure()",
    "kind": "Method",
    "detail": "Function (enum ENotificationPosition { k_EPositionInvalid = - 1,k_EPositionTopLeft = 0,k_EPositionTopRight = 1,k_EPositionBottomLeft = 2,k_EPositionBottomRight = 3,} ; enum EBroadcastUploadResult { k_EBroadcastUploadResultNone = 0,k_EBroadcastUploadResultOK = 1,k_EBroadcastUploadResultInitFailed = 2,k_EBroadcastUploadResultFrameFailed = 3,k_EBroadcastUploadResultTimeout = 4,k_EBroadcastUploadResultBandwidthExceeded = 5,k_EBroadcastUploadResultLowFPS = 6,k_EBroadcastUploadResultMissingKeyFrames = 7,k_EBroadcastUploadResultNoConnection = 8,k_EBroadcastUploadResultRelayFailed = 9,k_EBroadcastUploadResultSettingsChanged = 1 0,k_EBroadcastUploadResultMissingAudio = 1 1,k_EBroadcastUploadResultTooFarBehind = 1 2,k_EBroadcastUploadResultTranscodeBehind = 1 3,k_EBroadcastUploadResultNotAllowedToPlay = 1 4,k_EBroadcastUploadResultBusy = 1 5,k_EBroadcastUploadResultBanned = 1 6,k_EBroadcastUploadResultAlreadyActive = 1 7,k_EBroadcastUploadResultForcedOff = 1 8,k_EBroadcastUploadResultAudioBehind = 1 9,k_EBroadcastUploadResultShutdown = 2 0,k_EBroadcastUploadResultDisconnect = 2 1,k_EBroadcastUploadResultVideoInitFailed = 2 2,k_EBroadcastUploadResultAudioInitFailed = 2 3,} ; enum EMarketNotAllowedReasonFlags { k_EMarketNotAllowedReason_None = 0,)",
    "insertText": "k_EMarketNotAllowedReason_TemporaryFailure(1 << 0), k_EMarketNotAllowedReason_AccountDisabled = (1 << 1), k_EMarketNotAllowedReason_AccountLockedDown = (1 << 2), k_EMarketNotAllowedReason_AccountLimited = (1 << 3), k_EMarketNotAllowedReason_TradeBanned = (1 << 4), k_EMarketNotAllowedReason_AccountNotTrusted = (1 << 5), k_EMarketNotAllowedReason_SteamGuardNotEnabled = (1 << 6), k_EMarketNotAllowedReason_SteamGuardOnlyRecentlyEnabled = (1 << 7), k_EMarketNotAllowedReason_RecentPasswordReset = (1 << 8), k_EMarketNotAllowedReason_NewPaymentMethod = (1 << 9), k_EMarketNotAllowedReason_InvalidCookie = (1 << 10), k_EMarketNotAllowedReason_UsingNewDevice = (1 << 11), k_EMarketNotAllowedReason_RecentSelfRefund = (1 << 12), k_EMarketNotAllowedReason_NewPaymentMethodCannotBeVerified = (1 << 13), k_EMarketNotAllowedReason_NoRecentPurchases = (1 << 14), k_EMarketNotAllowedReason_AcceptedWalletGift = (1 << 15)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (enum EDurationControlProgress { k_EDurationControlProgress_Full = 0,k_EDurationControlProgress_Half = 1,k_EDurationControlProgress_None = 2,k_EDurationControl_ExitSoon_3h = 3,k_EDurationControl_ExitSoon_5h = 4,k_EDurationControl_ExitSoon_Night = 5,} ; enum EDurationControlNotification { k_EDurationControlNotification_None = 0,k_EDurationControlNotification_1Hour = 1,k_EDurationControlNotification_3Hours = 2,k_EDurationControlNotification_HalfProgress = 3,k_EDurationControlNotification_NoProgress = 4,k_EDurationControlNotification_ExitSoon_3h = 5,k_EDurationControlNotification_ExitSoon_5h = 6,k_EDurationControlNotification_ExitSoon_Night = 7,} ; enum EDurationControlOnlineState { k_EDurationControlOnlineState_Invalid = 0,k_EDurationControlOnlineState_Offline = 1,k_EDurationControlOnlineState_Online = 2,k_EDurationControlOnlineState_OnlineHighPri = 3,} ; # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CSteamID()"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountID = 0 ; m_steamid . m_comp . m_EAccountType = k_EAccountTypeInvalid ; m_steamid . m_comp . m_EUniverse = k_EUniverseInvalid ; m_steamid . m_comp . m_unAccountInstance = 0 ; })",
    "insertText": "CSteamID(uint32 unAccountID, EUniverse eUniverse, EAccountType eAccountType)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(unAccountID, eUniverse, eAccountType)"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CSteamID(uint32 unAccountID, unsigned int unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_SERVER) && defined(Assert) Assert( ( k_EAccountTypeIndividual != eAccountType ) || ( unAccountInstance == k_unSteamUserDefaultInstance ))"
  },
  {
    "label": "InstancedSet()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "InstancedSet(unAccountID, unAccountInstance, eUniverse, eAccountType)"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CSteamID(uint64 ulSteamID)"
  },
  {
    "label": "SetFromUint64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFromUint64(ulSteamID)"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (} # ifdef INT64_DIFFERENT_FROM_INT64_T)",
    "insertText": "CSteamID(uint64_t ulSteamID)"
  },
  {
    "label": "SetFromUint64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFromUint64((uint64)ulSteamID)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "Set(uint32 unAccountID, EUniverse eUniverse, EAccountType eAccountType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountID = unAccountID ; m_steamid . m_comp . m_EUniverse = eUniverse ; m_steamid . m_comp . m_EAccountType = eAccountType ;)",
    "insertText": "if(eAccountType == k_EAccountTypeClan || eAccountType == k_EAccountTypeGameServer)"
  },
  {
    "label": "InstancedSet()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountInstance = 0 ; } else { m_steamid . m_comp . m_unAccountInstance = k_unSteamUserDefaultInstance ; } } void)",
    "insertText": "InstancedSet(uint32 unAccountID, uint32 unInstance, EUniverse eUniverse, EAccountType eAccountType)"
  },
  {
    "label": "FullSet()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountID = unAccountID ; m_steamid . m_comp . m_EUniverse = eUniverse ; m_steamid . m_comp . m_EAccountType = eAccountType ; m_steamid . m_comp . m_unAccountInstance = unInstance ; } void)",
    "insertText": "FullSet(uint64 ulIdentifier, EUniverse eUniverse, EAccountType eAccountType)"
  },
  {
    "label": "m_unAccountID()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp .)",
    "insertText": "m_unAccountID(ulIdentifier & k_unSteamAccountIDMask)"
  },
  {
    "label": "m_unAccountInstance()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp .)",
    "insertText": "m_unAccountInstance(( ulIdentifier >> 32 ) & k_unSteamAccountInstanceMask)"
  },
  {
    "label": "SetFromUint64()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_EUniverse = eUniverse ; m_steamid . m_comp . m_EAccountType = eAccountType ; } void)",
    "insertText": "SetFromUint64(uint64 ulSteamID)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_unAll64Bits = ulSteamID ; } void)",
    "insertText": "Clear()"
  },
  {
    "label": "ConvertToUint64()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountID = 0 ; m_steamid . m_comp . m_EAccountType = k_EAccountTypeInvalid ; m_steamid . m_comp . m_EUniverse = k_EUniverseInvalid ; m_steamid . m_comp . m_unAccountInstance = 0 ; } uint64)",
    "insertText": "ConvertToUint64()"
  },
  {
    "label": "CreateBlankAnonLogon()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateBlankAnonLogon(EUniverse eUniverse)"
  },
  {
    "label": "CreateBlankAnonUserLogon()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountID = 0 ; m_steamid . m_comp . m_EAccountType = k_EAccountTypeAnonGameServer ; m_steamid . m_comp . m_EUniverse = eUniverse ; m_steamid . m_comp . m_unAccountInstance = 0 ; } void)",
    "insertText": "CreateBlankAnonUserLogon(EUniverse eUniverse)"
  },
  {
    "label": "BBlankAnonAccount()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountID = 0 ; m_steamid . m_comp . m_EAccountType = k_EAccountTypeAnonUser ; m_steamid . m_comp . m_EUniverse = eUniverse ; m_steamid . m_comp . m_unAccountInstance = 0 ; } bool)",
    "insertText": "BBlankAnonAccount()"
  },
  {
    "label": "BGameServerAccount()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BGameServerAccount()"
  },
  {
    "label": "BIndividualAccount()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BIndividualAccount()"
  },
  {
    "label": "SetAccountInstance()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountID = unAccountID ; } void)",
    "insertText": "SetAccountInstance(uint32 unInstance)"
  },
  {
    "label": "GetAccountID()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_unAccountInstance = unInstance ; } AccountID_t)",
    "insertText": "GetAccountID()"
  },
  {
    "label": "GetEUniverse()",
    "kind": "Method",
    "detail": "Function (} EUniverse)",
    "insertText": "GetEUniverse()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (m_steamid . m_comp . m_EUniverse = eUniverse ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSteamID(const char *pchSteamID, EUniverse eDefaultUniverse = k_EUniverseInvalid)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Render()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Render(uint64 ulSteamID)"
  },
  {
    "label": "SetFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFromString(const char *pchSteamID, EUniverse eDefaultUniverse)"
  },
  {
    "label": "SetFromStringStrict()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFromStringStrict(const char *pchSteamID, EUniverse eDefaultUniverse)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const CSteamID &val)"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "CSteamID(uint32)"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSteamID(int32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_steamid.m_comp.m_EAccountType == k_EAccountTypeClan)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_steamid.m_comp.m_EAccountType == k_EAccountTypeGameServer)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} return true ; } # if)",
    "insertText": "defined(INCLUDED_STEAM2_USERID_STRUCTS ) inline CSteamID SteamIDFromSteam2UserID( TSteamGlobalUserID *pTSteamGlobalUserID, EUniverse eUniverse)"
  },
  {
    "label": "CSteamID()",
    "kind": "Method",
    "detail": "Function (uint32 unAccountID = pTSteamGlobalUserID -> m_SteamLocalUserID . Split . Low32bits* 2 + pTSteamGlobalUserID -> m_SteamLocalUserID . Split . High32bits ; return)",
    "insertText": "CSteamID(unAccountID, k_unSteamUserDefaultInstance, eUniverse, k_EAccountTypeIndividual)"
  },
  {
    "label": "SteamIDFromSteam2String()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SteamIDFromSteam2String(const char *pchSteam2ID, EUniverse eUniverse, CSteamID *pSteamIDOut)"
  },
  {
    "label": "SteamIDToSteam2UserID()",
    "kind": "Method",
    "detail": "Function (TSteamGlobalUserID)",
    "insertText": "SteamIDToSteam2UserID(CSteamID steamID)"
  },
  {
    "label": "ClanIDFromSteamID()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "ClanIDFromSteamID(const CSteamID &steamID)"
  },
  {
    "label": "ChatIDFromClanID()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "ChatIDFromClanID(const CSteamID &steamIDClan)"
  },
  {
    "label": "ClanIDFromChatID()",
    "kind": "Method",
    "detail": "Function (CSteamID)",
    "insertText": "ClanIDFromChatID(const CSteamID &steamIDChat)"
  },
  {
    "label": "CGameID()",
    "kind": "Method",
    "detail": "Function (# endif class CGameID { public : enum EGameIDType { k_EGameIDTypeApp = 0,k_EGameIDTypeGameMod = 1,k_EGameIDTypeShortcut = 2,k_EGameIDTypeP2P = 3,} ;)",
    "insertText": "CGameID()"
  },
  {
    "label": "CGameID()",
    "kind": "Method",
    "detail": "Function (m_gameID . m_nType = k_EGameIDTypeApp ; m_gameID . m_nAppID = k_uAppIdInvalid ; m_gameID . m_nModID = 0 ; })",
    "insertText": "CGameID(uint64 ulGameID)"
  },
  {
    "label": "CGameID()",
    "kind": "Method",
    "detail": "Function (m_ulGameID = ulGameID ; } # ifdef INT64_DIFFERENT_FROM_INT64_T)",
    "insertText": "CGameID(uint64_t ulGameID)"
  },
  {
    "label": "m_ulGameID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_ulGameID(uint64)"
  },
  {
    "label": "CGameID()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "CGameID(int32 nAppID)"
  },
  {
    "label": "CGameID()",
    "kind": "Method",
    "detail": "Function (m_ulGameID = 0 ; m_gameID . m_nAppID = nAppID ; })",
    "insertText": "CGameID(uint32 nAppID)"
  },
  {
    "label": "CGameID()",
    "kind": "Method",
    "detail": "Function (m_ulGameID = 0 ; m_gameID . m_nAppID = nAppID ; })",
    "insertText": "CGameID(uint32 nAppID, uint32 nModID, CGameID::EGameIDType nType)"
  },
  {
    "label": "CGameID()",
    "kind": "Method",
    "detail": "Function (m_gameID . m_nAppID = nAppID ; m_gameID . m_nModID = nModID ; m_gameID . m_nType = nType ; })",
    "insertText": "CGameID(const CGameID &that)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_ulGameID = that . m_ulGameID ; } CGameID&)",
    "insertText": "operator(const CGameID & that)"
  },
  {
    "label": "CGameID()",
    "kind": "Method",
    "detail": "Function (m_ulGameID = that . m_ulGameID ; return* this ; })",
    "insertText": "CGameID(const char *pchGameID)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Render(uint64 ulGameID)"
  },
  {
    "label": "ToUint64()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "ToUint64()"
  },
  {
    "label": "IsMod()",
    "kind": "Method",
    "detail": "Function (m_ulGameID = ulGameID ; } bool)",
    "insertText": "IsMod()"
  },
  {
    "label": "IsShortcut()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShortcut()"
  },
  {
    "label": "IsP2PFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsP2PFile()"
  },
  {
    "label": "IsSteamApp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSteamApp()"
  },
  {
    "label": "ModID()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ModID()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "operator(const CGameID &rhs)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (default : return false ; } } void)",
    "insertText": "Reset()"
  },
  {
    "label": "GameIDFromAppAndModPath()",
    "kind": "Method",
    "detail": "Function (m_ulGameID = 0 ; } struct GameID_t { # ifdef VALVE_BIG_ENDIAN unsigned int m_nModID : 3 2 ; unsigned int m_nType : 8 ; unsigned int m_nAppID : 2 4 ; # else unsigned int m_nAppID : 2 4 ; unsigned int m_nType : 8 ; unsigned int m_nModID : 3 2 ; # endif } ; union { uint64 m_ulGameID ; GameID_t m_gameID ; } ; CGameID)",
    "insertText": "GameIDFromAppAndModPath(uint32 nAppID, const char *pchModPath)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (} ; # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*PFNPreMinidumpCallback)(void *context)"
  },
  {
    "label": "VALVE_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (enum EGameSearchErrorCode_t { k_EGameSearchErrorCode_OK = 1,k_EGameSearchErrorCode_Failed_Search_Already_In_Progress = 2,k_EGameSearchErrorCode_Failed_No_Search_In_Progress = 3,k_EGameSearchErrorCode_Failed_Not_Lobby_Leader = 4,k_EGameSearchErrorCode_Failed_No_Host_Available = 5,k_EGameSearchErrorCode_Failed_Search_Params_Invalid = 6,k_EGameSearchErrorCode_Failed_Offline = 7,k_EGameSearchErrorCode_Failed_NotAuthorized = 8,k_EGameSearchErrorCode_Failed_Unknown_Error = 9,} ; enum EPlayerResult_t { k_EPlayerResultFailedToConnect = 1,k_EPlayerResultAbandoned = 2,k_EPlayerResultKicked = 3,k_EPlayerResultIncomplete = 4,k_EPlayerResultCompleted = 5,} ; enum ESteamIPv6ConnectivityProtocol { k_ESteamIPv6ConnectivityProtocol_Invalid = 0,k_ESteamIPv6ConnectivityProtocol_HTTP = 1,k_ESteamIPv6ConnectivityProtocol_UDP = 2,} ; enum ESteamIPv6ConnectivityState { k_ESteamIPv6ConnectivityState_Unknown = 0,k_ESteamIPv6ConnectivityState_Good = 1,k_ESteamIPv6ConnectivityState_Bad = 2,} ; # define)",
    "insertText": "VALVE_COMPILE_TIME_ASSERT(pred ) typedef char compile_time_assert_type[(pred)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) #define VALVE_CALLBACK_PACK_SMALL #else #define VALVE_CALLBACK_PACK_LARGE #endif #if defined( VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  }
]