[
  {
    "label": "FBasicBroadPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBasicBroadPhase"
  },
  {
    "label": "FBasicBroadPhase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / BoundingVolumeUtilities . h \" # include \" Chaos / Collision / ParticlePairMidPhase . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / PBDCollisionConstraints . h \" # include \" Chaos / PBDRigidsSOAs . h \" # include \" ChaosStats . h \" namespace Chaos { class FBasicBroadPhase { public : using FParticleHandle = TGeometryParticleHandle<FReal,3> ; using FAABB = FAABB3 ;)",
    "insertText": "FBasicBroadPhase(const TArray<FParticlePair>* InParticlePairs, const TArray<FParticleHandle*>* InParticlesA, const TArray<FParticleHandle*>* InParticlesB) : ParticlePairs(InParticlePairs) , ParticlesA(InParticlesA) , ParticlesB(InParticlesB)"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProduceOverlaps(FReal Dt, Private::FCollisionConstraintAllocator* Allocator, const FCollisionDetectorSettings& Settings)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_Collisions_ParticlePairBroadPhase)"
  },
  {
    "label": "SetMaxContexts()",
    "kind": "Method",
    "detail": "Function (Allocator ->)",
    "insertText": "SetMaxContexts(1)"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (FCollisionContext Context ; Context .)",
    "insertText": "SetSettings(Settings)"
  },
  {
    "label": "GetContextAllocator()",
    "kind": "Method",
    "detail": "Function (Context . Allocator = Allocator ->)",
    "insertText": "GetContextAllocator(0)"
  },
  {
    "label": "FParticleHandle()",
    "kind": "Method",
    "detail": "Function (FParticleHandle* ParticleA = const_cast<)",
    "insertText": "FParticleHandle(ParticlePair[0])"
  },
  {
    "label": "FParticleHandle()",
    "kind": "Method",
    "detail": "Function (FParticleHandle* ParticleB = const_cast<)",
    "insertText": "FParticleHandle(ParticlePair[1])"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProduceOverlaps(Dt, Context, ParticleA, ParticleB, ParticleA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if((ParticlesA != nullptr) && (ParticlesB != nullptr))"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (} } } } } } private : void)",
    "insertText": "ProduceOverlaps(FReal Dt, const FCollisionContext& Context, FParticleHandle* ParticleA, FParticleHandle* ParticleB, FParticleHandle* SearchParticle)"
  },
  {
    "label": "WorldSpaceInflatedBounds()",
    "kind": "Method",
    "detail": "Function (const FAABB3& Box1 = ParticleB ->)",
    "insertText": "WorldSpaceInflatedBounds()"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (FParticlePairMidPhase* MidPhase = Context .)",
    "insertText": "GetAllocator()->GetMidPhase(ParticleA, ParticleB, SearchParticle, Context)"
  },
  {
    "label": "GenerateCollisions()",
    "kind": "Method",
    "detail": "Function (MidPhase ->)",
    "insertText": "GenerateCollisions(Context.GetSettings().BoundsExpansion, Dt, Context)"
  }
]