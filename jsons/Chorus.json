[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FChorus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChorus"
  },
  {
    "label": "FChorus()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Delay . h \" # include \" DSP / LFO . h \" namespace Audio { namespace EChorusDelays { enum Type { Left,Center,Right,NumDelayTypes } ; } class FChorus { public :)",
    "insertText": "FChorus()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float InSampleRate, const int32 InNumChannels, const float InDelayLengthSec = 2.0f, const int32 InControlSamplePeriod = 256)"
  },
  {
    "label": "SetFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrequency(const EChorusDelays::Type InType, const float InFrequency)"
  },
  {
    "label": "SetFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFeedback(const EChorusDelays::Type InType, const float InFeedback)"
  },
  {
    "label": "SetWetLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWetLevel(const float InWetLevel)"
  },
  {
    "label": "SetDryLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDryLevel(const float InDryLevel)"
  },
  {
    "label": "SetSpread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSpread(const float InSpread)"
  },
  {
    "label": "ProcessAudioFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioFrame(const float* InFrame, float* OutFrame)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* InBuffer, const int32 InNumSamples, float* OutBuffer)"
  }
]