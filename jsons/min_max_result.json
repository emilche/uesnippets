[
  {
    "label": "_T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T1"
  },
  {
    "label": "min_max_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "min_max_result"
  },
  {
    "label": "_T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_MIN_MAX_RESULT_H # define _LIBCPP___ALGORITHM_MIN_MAX_RESULT_H # include<__concepts / convertible_to . h> # include<__config> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_PUSH_MACROS #include <__undef_macros> _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "_T2()",
    "kind": "Method",
    "detail": "Function (template<class _T1> struct min_max_result { _LIBCPP_NO_UNIQUE_ADDRESS _T1 min ; _LIBCPP_NO_UNIQUE_ADDRESS _T1 max ; template<class _T2> requires convertible_to<const _T1&,_T2> _LIBCPP_HIDE_FROM_ABI operator min_max_result<)",
    "insertText": "_T2()"
  }
]