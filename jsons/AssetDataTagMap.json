[
  {
    "label": "FAssetRegistryState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryState"
  },
  {
    "label": "FAssetTagValueRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetTagValueRef"
  },
  {
    "label": "FAssetDataTagMapSharedView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataTagMapSharedView"
  },
  {
    "label": "FAssetRegistrySerializationOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistrySerializationOptions"
  },
  {
    "label": "FMarshalledText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMarshalledText"
  },
  {
    "label": "FStoreBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreBuilder"
  },
  {
    "label": "FAssetRegistryExportPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryExportPath"
  },
  {
    "label": "FNumberlessExportPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberlessExportPath"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FValueId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueId"
  },
  {
    "label": "FNumberedPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberedPair"
  },
  {
    "label": "FNumberlessPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberlessPair"
  },
  {
    "label": "FValueHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueHandle"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "FFixedTagValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFixedTagValue"
  },
  {
    "label": "FStringPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringPointer"
  },
  {
    "label": "FixedTagPrivate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FixedTagPrivate"
  },
  {
    "label": "FAssetDataTagMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataTagMap"
  },
  {
    "label": "TConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstIterator"
  },
  {
    "label": "TConstIteratorWithEnd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstIteratorWithEnd"
  },
  {
    "label": "FAssetRegistryExportPath()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / SortedMap . h \" # include \" HAL / CriticalSection . h \" # include \" Misc / StringBuilder . h \" # include \" Templates / RefCounting . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" UObject / TopLevelAssetPath . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" CoreMinimal . h \" # endif class FAssetRegistryState ; class FAssetTagValueRef ; class FAssetDataTagMapSharedView ; struct FAssetRegistrySerializationOptions ; namespace FixedTagPrivate { class FMarshalledText ; } namespace FixedTagPrivate { class FStoreBuilder ; } struct FAssetRegistryExportPath { PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FAssetRegistryExportPath()"
  },
  {
    "label": "FAssetRegistryExportPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetRegistryExportPath(FAssetRegistryExportPath&&)"
  },
  {
    "label": "FAssetRegistryExportPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetRegistryExportPath(const FAssetRegistryExportPath&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetRegistryExportPath&)",
    "insertText": "operator(FAssetRegistryExportPath&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetRegistryExportPath&)",
    "insertText": "operator(const FAssetRegistryExportPath&)"
  },
  {
    "label": "FAssetRegistryExportPath()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "FAssetRegistryExportPath(FWideStringView String)"
  },
  {
    "label": "FAssetRegistryExportPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetRegistryExportPath(FAnsiStringView String)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FName Package ; FName Object ; FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ToName()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FStringBuilderBase& Out)"
  },
  {
    "label": "ToPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToPath()"
  },
  {
    "label": "ToPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToPath(FStringBuilderBase& Out)"
  },
  {
    "label": "ToTopLevelAssetPath()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "ToTopLevelAssetPath()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAssetRegistryExportPath& A, const FAssetRegistryExportPath& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FAssetRegistryExportPath& Export)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FNumberlessExportPath& A, const FNumberlessExportPath& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FNumberlessExportPath& Export)"
  },
  {
    "label": "ToInt()",
    "kind": "Method",
    "detail": "Function (enum class EValueType : uint32 ; struct FValueId { uint32 TypeBits = 3 ; uint32 IndexBits = 3 2 - TypeBits ; EValueType Type : TypeBits ; uint32 Index : IndexBits ; uint32)",
    "insertText": "ToInt()"
  },
  {
    "label": "FromInt()",
    "kind": "Method",
    "detail": "Function (} FValueId)",
    "insertText": "FromInt(uint32 Int)"
  },
  {
    "label": "AsDisplayString()",
    "kind": "Method",
    "detail": "Function (} } ; struct FNumberedPair { FName Key ; FValueId Value ; } ; struct FNumberlessPair { FDisplayNameEntryId Key ; FValueId Value ; } ; struct FValueHandle { uint32 StoreIndex ; FValueId Id ; FString)",
    "insertText": "AsDisplayString()"
  },
  {
    "label": "AsStorageString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "AsStorageString()"
  },
  {
    "label": "AsName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "AsName()"
  },
  {
    "label": "AsExportPath()",
    "kind": "Method",
    "detail": "Function (FAssetRegistryExportPath)",
    "insertText": "AsExportPath()"
  },
  {
    "label": "AsText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AsText(FText& Out)"
  },
  {
    "label": "AsMarshalledText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AsMarshalledText(FMarshalledText& Out)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FStringView Str)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const TCHAR* Str)"
  },
  {
    "label": "GetResourceSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetResourceSize()"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (private : template<bool bForStorage> FString)",
    "insertText": "AsString()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} ; struct)",
    "insertText": "alignas(uint64)"
  },
  {
    "label": "FindValue()",
    "kind": "Method",
    "detail": "Function (uint32 StoreIndexBits = 1 4 ; uint16 IsValid : 1 ; uint16 HasNumberlessKeys : 1 ; uint16 StoreIndex : StoreIndexBits ; uint16 Num ; uint32 PairBegin ; const FValueId*)",
    "insertText": "FindValue(FName Key)"
  },
  {
    "label": "GetNumberedView()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FNumberedPair>)",
    "insertText": "GetNumberedView()"
  },
  {
    "label": "GetNumberlessView()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FNumberlessPair>)",
    "insertText": "GetNumberlessView()"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (FNumberedPair)",
    "insertText": "At(uint32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FMapHandle A, FMapHandle B)"
  },
  {
    "label": "ForEachPair()",
    "kind": "Method",
    "detail": "Function (template<Func> void)",
    "insertText": "ForEachPair(Func Fn)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fn(FNumberedPair{Pair.Key.ToName(NAME_NO_NUMBER_INTERNAL), Pair.Value})"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(FNumberedPair Pair : GetNumberedView())"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fn(Pair)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} } } } ; } class FAssetTagValueRef { class FAssetDataTagMapSharedView ; class FFixedTagValue { uint64 FixedMask =)",
    "insertText": "uint64(1)"
  },
  {
    "label": "IsFixed()",
    "kind": "Method",
    "detail": "Function (uint64 Bits ; public : uint64)",
    "insertText": "IsFixed()"
  },
  {
    "label": "GetValueId()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetValueId()"
  },
  {
    "label": "FFixedTagValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFixedTagValue()"
  },
  {
    "label": "FFixedTagValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFixedTagValue(uint32 StoreIndex, uint32 ValueId) : Bits(FixedMask | (uint64(StoreIndex) << 32) | uint64(ValueId))"
  },
  {
    "label": "FStringPointer()",
    "kind": "Method",
    "detail": "Function (} } ; # if PLATFORM_32BITS class FStringPointer { uint64 Ptr ; public :)",
    "insertText": "FStringPointer()"
  },
  {
    "label": "FStringPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStringPointer(const FString* InPtr) : Ptr(reinterpret_cast<uint64>(InPtr))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStringPointer&)",
    "insertText": "operator(const FString* InPtr)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (Ptr = reinterpret_cast<)",
    "insertText": "uint64(InPtr)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} operator const)",
    "insertText": "FString()"
  },
  {
    "label": "AsFixed()",
    "kind": "Method",
    "detail": "Function (} FixedTagPrivate::FValueHandle)",
    "insertText": "AsFixed()"
  },
  {
    "label": "AsLoose()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "AsLoose()"
  },
  {
    "label": "FAssetTagValueRef()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAssetTagValueRef()"
  },
  {
    "label": "FAssetTagValueRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetTagValueRef(const FAssetTagValueRef&)"
  },
  {
    "label": "FAssetTagValueRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetTagValueRef(FAssetTagValueRef&&)"
  },
  {
    "label": "FAssetTagValueRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetTagValueRef(const FString* Str) : Loose(Str)"
  },
  {
    "label": "FAssetTagValueRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetTagValueRef(uint32 StoreIndex, FixedTagPrivate::FValueId ValueId) : Fixed(StoreIndex, ValueId.ToInt())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAssetTagValueRef&)",
    "insertText": "operator(const FAssetTagValueRef&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetTagValueRef&)",
    "insertText": "operator(FAssetTagValueRef&&)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "AsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "AsText()"
  },
  {
    "label": "TryGetAsText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetAsText(FText& Out)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetStorageString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetStorageString()"
  },
  {
    "label": "TryGetAsMarshalledText()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryGetAsMarshalledText(FixedTagPrivate::FMarshalledText& Out)"
  },
  {
    "label": "ToLoose()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLoose()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class FixedTagPrivate::FStoreBuilder ; FAssetRegistryState ; bool)",
    "insertText": "operator(FAssetTagValueRef A, FStringView B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FStringView A, FAssetTagValueRef B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FAssetTagValueRef A, const FString& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FString& A, FAssetTagValueRef B)"
  },
  {
    "label": "FAssetDataTagMap()",
    "kind": "Method",
    "detail": "Function (} } ; using FAssetDataTagMapBase = TSortedMap<FName,FString,FDefaultAllocator,FNameFastLess> ; class FAssetDataTagMap : public FAssetDataTagMapBase { FThreadSafeCounter RefCount ; class FAssetDataTagMapSharedView ; public :)",
    "insertText": "FAssetDataTagMap()"
  },
  {
    "label": "FAssetDataTagMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetDataTagMap(const FAssetDataTagMap& O) : FAssetDataTagMapBase(O)"
  },
  {
    "label": "FAssetDataTagMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetDataTagMap(FAssetDataTagMap&& O) : FAssetDataTagMapBase(MoveTemp(O))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAssetDataTagMap&)",
    "insertText": "operator(const FAssetDataTagMap& O)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAssetDataTagMap&)",
    "insertText": "operator(FAssetDataTagMap&& O)"
  },
  {
    "label": "FindFixedValue()",
    "kind": "Method",
    "detail": "Function (} FAssetTagValueRef)",
    "insertText": "FindFixedValue(FName Key)"
  },
  {
    "label": "FindValue()",
    "kind": "Method",
    "detail": "Function (const FixedTagPrivate::FValueId* Value = Fixed .)",
    "insertText": "FindValue(Key)"
  },
  {
    "label": "MakePair()",
    "kind": "Method",
    "detail": "Function (} TPair<FName,FAssetTagValueRef>)",
    "insertText": "MakePair(FixedTagPrivate::FNumberedPair FixedPair, uint32 StoreIndex)"
  },
  {
    "label": "MakePair()",
    "kind": "Method",
    "detail": "Function (} TPair<FName,FAssetTagValueRef>)",
    "insertText": "MakePair(const FAssetDataTagMap::ElementType& LoosePair)"
  },
  {
    "label": "FAssetDataTagMapSharedView()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FAssetDataTagMapSharedView()"
  },
  {
    "label": "FAssetDataTagMapSharedView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetDataTagMapSharedView(const FAssetDataTagMapSharedView& O)"
  },
  {
    "label": "FAssetDataTagMapSharedView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetDataTagMapSharedView(FAssetDataTagMapSharedView&& O)"
  },
  {
    "label": "FAssetDataTagMapSharedView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetDataTagMapSharedView(FixedTagPrivate::FMapHandle InFixed)"
  },
  {
    "label": "FAssetDataTagMapSharedView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetDataTagMapSharedView(FAssetDataTagMap&& InLoose)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetDataTagMapSharedView&)",
    "insertText": "operator(const FAssetDataTagMapSharedView&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetDataTagMapSharedView&)",
    "insertText": "operator(FAssetDataTagMapSharedView&&)"
  },
  {
    "label": "FindTag()",
    "kind": "Method",
    "detail": "Function (using FFindTagResult = FAssetTagValueRef ; FAssetTagValueRef)",
    "insertText": "FindTag(FName Tag)"
  },
  {
    "label": "FAssetTagValueRef()",
    "kind": "Method",
    "detail": "Function (} return Loose ! = nullptr ?)",
    "insertText": "FAssetTagValueRef(Loose->Find(Tag)) : FAssetTagValueRef()"
  },
  {
    "label": "ContainsKeyValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsKeyValue(FName Tag, const FString& Value)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(FName Key)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "CopyMap()",
    "kind": "Method",
    "detail": "Function (} FAssetDataTagMap)",
    "insertText": "CopyMap()"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (template<Func> void)",
    "insertText": "ForEach(Func Fn)"
  },
  {
    "label": "ForEachPair()",
    "kind": "Method",
    "detail": "Function (Fixed .)",
    "insertText": "ForEachPair([&](FixedTagPrivate::FNumberedPair Pair) { Fn(MakePair(Pair, Fixed.StoreIndex)); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Loose != nullptr)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fn(MakePair(Pair))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "operator(const FAssetDataTagMapSharedView& A, const FAssetDataTagMap& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FAssetDataTagMapSharedView& A, const FAssetDataTagMapSharedView& B)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "TConstIterator()",
    "kind": "Method",
    "detail": "Function (class TConstIterator { public :)",
    "insertText": "TConstIterator(const FAssetDataTagMapSharedView& InView, uint32 InIndex) : View(InView) , Index(InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TPair<FName,FAssetTagValueRef>)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + Index ; return* this ; } bool)",
    "insertText": "operator(TConstIterator Rhs)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} FAssetTagValueRef)",
    "insertText": "Value()"
  },
  {
    "label": "CreateConstIterator()",
    "kind": "Method",
    "detail": "Function (} private : const uint32 EndIndex ; } ; TConstIteratorWithEnd)",
    "insertText": "CreateConstIterator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "Include()",
    "kind": "Method",
    "detail": "Function (} class FMemoryCounter { TSet<uint32> FixedStoreIndices ; SIZE_T LooseBytes = 0 ; public : void)",
    "insertText": "Include(const FAssetDataTagMapSharedView& Tags)"
  },
  {
    "label": "GetLooseSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetLooseSize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FAssetDataTagMap& A, const FAssetDataTagMapSharedView& B)"
  }
]