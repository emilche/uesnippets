[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "PowerMonitorDeviceSourceTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PowerMonitorDeviceSourceTest"
  },
  {
    "label": "PowerMessageWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PowerMessageWindow"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_POWER_MONITOR_POWER_MONITOR_DEVICE_SOURCE_H_ # define BASE_POWER_MONITOR_POWER_MONITOR_DEVICE_SOURCE_H_ # include<memory> # include<vector> # include \" base / base_export . h \" # include \" base / power_monitor / power_monitor_source . h \" # include \" base / power_monitor / power_observer . h \" # include \" build / build_config . h \" # include \" build / chromeos_buildflags . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include <windows.h> #include \"base/power_monitor/speed_limit_observer_win.h\" #include \"base/threading/sequence_bound.h\" #endif #if BUILDFLAG(IS_MAC) #include <IOKit/IOTypes.h> #include \"base/mac/scoped_cftyperef.h\" #include \"base/mac/scoped_ionotificationportref.h\" #include \"base/power_monitor/battery_level_provider.h\" #include \"base/power_monitor/iopm_power_source_sampling_event_source.h\" #include \"base/power_monitor/thermal_state_observer_mac.h\" #endif #if BUILDFLAG(IS_IOS)"
  },
  {
    "label": "PowerMonitorDeviceSource()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT PowerMonitorDeviceSource : public PowerMonitorSource { public :)",
    "insertText": "PowerMonitorDeviceSource()"
  },
  {
    "label": "PowerMonitorDeviceSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PowerMonitorDeviceSource(const PowerMonitorDeviceSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PowerMonitorDeviceSource&)",
    "insertText": "operator(const PowerMonitorDeviceSource&)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS) static void SetPowerSource(bool on_battery)"
  },
  {
    "label": "HandleSystemSuspending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSystemSuspending()"
  },
  {
    "label": "HandleSystemResumed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSystemResumed()"
  },
  {
    "label": "ThermalEventReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThermalEventReceived(PowerThermalObserver::DeviceThermalState state)"
  },
  {
    "label": "GetCurrentThermalState()",
    "kind": "Method",
    "detail": "Function (PowerThermalObserver::DeviceThermalState)",
    "insertText": "GetCurrentThermalState()"
  },
  {
    "label": "SetCurrentThermalState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThermalState(PowerThermalObserver::DeviceThermalState state)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif private : class PowerMonitorDeviceSourceTest ; # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "PowerMessageWindow()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "PowerMessageWindow()"
  },
  {
    "label": "WndProcThunk()",
    "kind": "Method",
    "detail": "Function (private : LRESULT CALLBACK)",
    "insertText": "WndProcThunk(HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (HMODULE instance_ ; HWND message_hwnd_ ; HPOWERNOTIFY power_notify_handle_ = nullptr ; } ; # endif # if)",
    "insertText": "BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_WIN) void PlatformInit()"
  },
  {
    "label": "PlatformDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformDestroy()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_MAC) static void SystemPowerEventCallback(void* refcon, io_service_t service, natural_t message_type, void* message_argument)"
  },
  {
    "label": "IsOnBatteryPower()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsOnBatteryPower()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_ANDROID) PowerThermalObserver::DeviceThermalState GetCurrentThermalState()"
  },
  {
    "label": "GetRemainingBatteryCapacity()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetRemainingBatteryCapacity()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) int GetInitialSpeedLimit()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_MAC) PowerThermalObserver::DeviceThermalState GetCurrentThermalState()"
  },
  {
    "label": "GetInitialSpeedLimit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetInitialSpeedLimit()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (io_connect_t power_manager_port_ = IO_OBJECT_NULL ; mac::ScopedIONotificationPortRef notification_port_ ; io_object_t notifier_ = IO_OBJECT_NULL ; IOPMPowerSourceSamplingEventSource power_source_event_source_ ; std::unique_ptr<BatteryLevelProvider> battery_level_provider_ ; std::unique_ptr<ThermalStateObserverMac> thermal_state_observer_ ; bool is_on_battery_ = false ; # endif # if)",
    "insertText": "BUILDFLAG(IS_IOS)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<base::SequenceBound<SpeedLimitObserverWin>> speed_limit_observer_ ; # endif # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS)"
  }
]