[
  {
    "label": "MockDcSctpSocketCallbacks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockDcSctpSocketCallbacks"
  },
  {
    "label": "GetUniqueSeed()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_SOCKET_MOCK_DCSCTP_SOCKET_CALLBACKS_H_ # define NET_DCSCTP_SOCKET_MOCK_DCSCTP_SOCKET_CALLBACKS_H_ # include<cstdint> # include<deque> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / task_queue / task_queue_base . h \" # include \" net / dcsctp / public / dcsctp_message . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / public / timeout . h \" # include \" net / dcsctp / public / types . h \" # include \" net / dcsctp / timer / fake_timeout . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / random . h \" # include \" test / gmock . h \" namespace dcsctp { namespace internal { int)",
    "insertText": "GetUniqueSeed()"
  },
  {
    "label": "MockDcSctpSocketCallbacks()",
    "kind": "Method",
    "detail": "Function (int seed = 0 ; return + + seed ; } } class MockDcSctpSocketCallbacks : public DcSctpSocketCallbacks { public :)",
    "insertText": "MockDcSctpSocketCallbacks(absl::string_view name = \"\") : log_prefix_(name.empty() ? \"\" : std::string(name) + \": \"), random_(internal::GetUniqueSeed()), timeout_manager_([this]() { return now_; })"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, SendPacketWithStatus) .WillByDefault([this](rtc::ArrayView<const uint8_t> data) { sent_packets_.emplace_back( std::vector<uint8_t>(data.begin(), data.end())); return SendPacketStatus::kSuccess; })"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, OnMessageReceived) .WillByDefault([this](DcSctpMessage message) { received_messages_.emplace_back(std::move(message)); })"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, OnError) .WillByDefault([this](ErrorKind error, absl::string_view message) { RTC_LOG(LS_WARNING) << log_prefix_ << \"Socket error: \" << ToString(error) << \"; \" << message; })"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, OnAborted) .WillByDefault([this](ErrorKind error, absl::string_view message) { RTC_LOG(LS_WARNING) << log_prefix_ << \"Socket abort: \" << ToString(error) << \"; \" << message; })"
  },
  {
    "label": "ON_CALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ON_CALL(*this, TimeMillis).WillByDefault([this]() { return now_; })"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(SendPacketStatus, SendPacketWithStatus, (rtc::ArrayView<const uint8_t> data), (override))"
  },
  {
    "label": "CreateTimeout()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Timeout>)",
    "insertText": "CreateTimeout(webrtc::TaskQueueBase::DelayPrecision precision)"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(TimeMs, TimeMillis, (), (override))"
  },
  {
    "label": "GetRandomInt()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRandomInt(uint32_t low, uint32_t high)"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MOCK_METHOD(void, OnMessageReceived, (DcSctpMessage message), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnError, (ErrorKind error, absl::string_view message), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnAborted, (ErrorKind error, absl::string_view message), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnConnected, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnClosed, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnConnectionRestarted, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnStreamsResetFailed, (rtc::ArrayView<const StreamID> outgoing_streams, absl::string_view reason), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnStreamsResetPerformed, (rtc::ArrayView<const StreamID> outgoing_streams), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnIncomingStreamsReset, (rtc::ArrayView<const StreamID> incoming_streams), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnBufferedAmountLow, (StreamID stream_id), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnTotalBufferedAmountLow, (), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnLifecycleMessageExpired, (LifecycleId lifecycle_id, bool maybe_delivered), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnLifecycleMessageFullySent, (LifecycleId lifecycle_id), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnLifecycleMessageDelivered, (LifecycleId lifecycle_id), (override))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnLifecycleEnd, (LifecycleId lifecycle_id), (override))"
  },
  {
    "label": "HasPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPacket()"
  },
  {
    "label": "ConsumeSentPacket()",
    "kind": "Method",
    "detail": "Function (} std::vector<uint8_t>)",
    "insertText": "ConsumeSentPacket()"
  },
  {
    "label": "pop_front()",
    "kind": "Method",
    "detail": "Function (sent_packets_ .)",
    "insertText": "pop_front()"
  },
  {
    "label": "SetTime()",
    "kind": "Method",
    "detail": "Function (now_ = now_ + duration_ms ; } void)",
    "insertText": "SetTime(TimeMs now)"
  },
  {
    "label": "GetNextExpiredTimeout()",
    "kind": "Method",
    "detail": "Function (now_ = now ; } absl::optional<TimeoutID>)",
    "insertText": "GetNextExpiredTimeout()"
  },
  {
    "label": "TimeMs()",
    "kind": "Method",
    "detail": "Function (} private : const std::string log_prefix_ ; TimeMs now_ =)",
    "insertText": "TimeMs(0)"
  }
]