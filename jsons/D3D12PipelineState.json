[
  {
    "label": "FD3D12VertexShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12VertexShader"
  },
  {
    "label": "FD3D12MeshShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12MeshShader"
  },
  {
    "label": "FD3D12AmplificationShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12AmplificationShader"
  },
  {
    "label": "FD3D12PixelShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12PixelShader"
  },
  {
    "label": "FD3D12GeometryShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12GeometryShader"
  },
  {
    "label": "FD3D12ComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ComputeShader"
  },
  {
    "label": "FD3D12_GRAPHICS_PIPELINE_STATE_STREAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12_GRAPHICS_PIPELINE_STATE_STREAM"
  },
  {
    "label": "FD3D12_MESH_PIPELINE_STATE_STREAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12_MESH_PIPELINE_STATE_STREAM"
  },
  {
    "label": "FD3D12_COMPUTE_PIPELINE_STATE_STREAM",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12_COMPUTE_PIPELINE_STATE_STREAM"
  },
  {
    "label": "FD3D12_GRAPHICS_PIPELINE_STATE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12_GRAPHICS_PIPELINE_STATE_DESC"
  },
  {
    "label": "FD3D12LowLevelGraphicsPipelineStateDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12LowLevelGraphicsPipelineStateDesc"
  },
  {
    "label": "FD3D12_COMPUTE_PIPELINE_STATE_DESC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12_COMPUTE_PIPELINE_STATE_DESC"
  },
  {
    "label": "FD3D12ComputePipelineStateDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ComputePipelineStateDesc"
  },
  {
    "label": "equality_pipeline_state_desc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "equality_pipeline_state_desc"
  },
  {
    "label": "ComputePipelineCreationArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePipelineCreationArgs"
  },
  {
    "label": "GraphicsPipelineCreationArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphicsPipelineCreationArgs"
  },
  {
    "label": "ComputePipelineCreationArgs_POD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePipelineCreationArgs_POD"
  },
  {
    "label": "GraphicsPipelineCreationArgs_POD",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphicsPipelineCreationArgs_POD"
  },
  {
    "label": "FD3D12PipelineStateWorker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12PipelineStateWorker"
  },
  {
    "label": "FD3D12PipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12PipelineState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FD3D12PipelineStateCommonData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12PipelineStateCommonData"
  },
  {
    "label": "FD3D12GraphicsPipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12GraphicsPipelineState"
  },
  {
    "label": "FD3D12ComputePipelineState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ComputePipelineState"
  },
  {
    "label": "FInitializerToGPSOMapKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializerToGPSOMapKey"
  },
  {
    "label": "FD3D12PipelineStateCacheBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12PipelineStateCacheBase"
  },
  {
    "label": "PSO_CACHE_TYPE",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PSO_CACHE_TYPE"
  },
  {
    "label": "TStateCacheKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStateCacheKeyFuncs"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" D3D12DiskCache . h \" # include \" D3D12Shader . h \" # include \" D3D12Stats . h \" class FD3D12VertexShader ; class FD3D12MeshShader ; class FD3D12AmplificationShader ; class FD3D12PixelShader ; class FD3D12GeometryShader ; class FD3D12ComputeShader ; # ifndef D3D12RHI_USE_HIGH_LEVEL_PSO_CACHE # define D3D12RHI_USE_HIGH_LEVEL_PSO_CACHE 0 # endif # ifndef D3D12_USE_DERIVED_PSO # define D3D12_USE_DERIVED_PSO 0 # endif # if D3D12_USE_DERIVED_PSO # ifndef D3D12_USE_DERIVED_PSO_SHADER_EXPORTS # define D3D12_USE_DERIVED_PSO_SHADER_EXPORTS 0 # endif # endif # if D3D12RHI_USE_HIGH_LEVEL_PSO_CACHE)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT(TEXT(\"Graphics: Num high-level cache entries\"), STAT_PSOGraphicsNumHighlevelCacheEntries, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT(TEXT(\"Graphics: High-level cache hit\"), STAT_PSOGraphicsHighlevelCacheHit, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT(TEXT(\"Graphics: High-level cache miss\"), STAT_PSOGraphicsHighlevelCacheMiss, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT(TEXT(\"Compute: Num high-level cache entries\"), STAT_PSOComputeNumHighlevelCacheEntries, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT(TEXT(\"Compute: High-level cache hit\"), STAT_PSOComputeHighlevelCacheHit, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT(TEXT(\"Compute: High-level cache miss\"), STAT_PSOComputeHighlevelCacheMiss, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT(TEXT(\"Graphics: Num low-level cache entries\"), STAT_PSOGraphicsNumLowlevelCacheEntries, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT(TEXT(\"Graphics: Low-level cache hit\"), STAT_PSOGraphicsLowlevelCacheHit, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT(TEXT(\"Graphics: Low-level cache miss\"), STAT_PSOGraphicsLowlevelCacheMiss, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT(TEXT(\"Compute: Num low-level cache entries\"), STAT_PSOComputeNumLowlevelCacheEntries, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT(TEXT(\"Compute: Low-level cache hit\"), STAT_PSOComputeLowlevelCacheHit, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT(TEXT(\"Compute: Low-level cache miss\"), STAT_PSOComputeLowlevelCacheMiss, STATGROUP_D3D12PipelineState)"
  },
  {
    "label": "PipelineStateStream()",
    "kind": "Method",
    "detail": "Function (struct FD3D12_GRAPHICS_PIPELINE_STATE_STREAM ; struct FD3D12_MESH_PIPELINE_STATE_STREAM ; struct FD3D12_COMPUTE_PIPELINE_STATE_STREAM ; struct FD3D12_GRAPHICS_PIPELINE_STATE_DESC { ID3D12RootSignature* pRootSignature ; D3D12_SHADER_BYTECODE VS ; D3D12_SHADER_BYTECODE MS ; D3D12_SHADER_BYTECODE AS ; D3D12_SHADER_BYTECODE PS ; D3D12_SHADER_BYTECODE GS ; # if ! D3D12_USE_DERIVED_PSO | | D3D12_USE_DERIVED_PSO_SHADER_EXPORTS D3D12_BLEND_DESC BlendState ; # endif # if ! D3D12_USE_DERIVED_PSO uint32 SampleMask ; D3D12_RASTERIZER_DESC RasterizerState ; D3D12_DEPTH_STENCIL_DESC1 DepthStencilState ; # endif D3D12_INPUT_LAYOUT_DESC InputLayout ; D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue ; D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType ; D3D12_RT_FORMAT_ARRAY RTFormatArray ; DXGI_FORMAT DSVFormat ; DXGI_SAMPLE_DESC SampleDesc ; uint32 NodeMask ; D3D12_CACHED_PIPELINE_STATE CachedPSO ; D3D12_PIPELINE_STATE_FLAGS Flags ; FD3D12_GRAPHICS_PIPELINE_STATE_STREAM)",
    "insertText": "PipelineStateStream()"
  },
  {
    "label": "MeshPipelineStateStream()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_MESH_SHADERS FD3D12_MESH_PIPELINE_STATE_STREAM)",
    "insertText": "MeshPipelineStateStream()"
  },
  {
    "label": "UsesMeshShaders()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FD3D12LowLevelGraphicsPipelineStateDesc { const FD3D12RootSignature* pRootSignature ; FD3D12_GRAPHICS_PIPELINE_STATE_DESC Desc ; ShaderBytecodeHash VSHash ; ShaderBytecodeHash MSHash ; ShaderBytecodeHash ASHash ; ShaderBytecodeHash GSHash ; ShaderBytecodeHash PSHash ; uint32 InputLayoutHash ; bool bFromPSOFileCache ; SIZE_T CombinedHash ; bool)",
    "insertText": "UsesMeshShaders()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} # endif FString)",
    "insertText": "GetName()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} # if D3D12_USE_DERIVED_PSO void)",
    "insertText": "Destroy()"
  },
  {
    "label": "HasVendorExtensions()",
    "kind": "Method",
    "detail": "Function (} ; struct FD3D12ComputePipelineStateDesc { const FD3D12RootSignature* pRootSignature ; FD3D12_COMPUTE_PIPELINE_STATE_DESC Desc ; ShaderBytecodeHash CSHash ; SIZE_T CombinedHash ; # if D3D12RHI_NEEDS_VENDOR_EXTENSIONS const TArray<FShaderCodeVendorExtension>* Extensions ; bool)",
    "insertText": "HasVendorExtensions()"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (# endif } ; # define)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(value ) if(lhs.value != rhs.value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ const char* const rhString = rhs . value ; \\)",
    "insertText": "if(lhString != rhString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(strcmp(lhString, rhString) != 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ return false ; \\ } \\ } template<TDesc> struct equality_pipeline_state_desc ; template<> struct equality_pipeline_state_desc<FD3D12LowLevelGraphicsPipelineStateDesc> { bool)",
    "insertText": "operator()(const FD3D12LowLevelGraphicsPipelineStateDesc& lhs, const FD3D12LowLevelGraphicsPipelineStateDesc& rhs)"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.PS.BytecodeLength) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.VS.BytecodeLength) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.MS.BytecodeLength) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.AS.BytecodeLength) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.GS.BytecodeLength) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.InputLayout.NumElements) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.RTFormatArray.NumRenderTargets) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.DSVFormat) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.PrimitiveTopologyType) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.Flags) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.pRootSignature) #if !D3D12_USE_DERIVED_PSO || D3D12_USE_DERIVED_PSO_SHADER_EXPORTS PSO_IF_MEMCMP_FAILS_RETURN_FALSE(Desc.BlendState) #endif #if !D3D12_USE_DERIVED_PSO PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.SampleMask) PSO_IF_MEMCMP_FAILS_RETURN_FALSE(Desc.RasterizerState) PSO_IF_MEMCMP_FAILS_RETURN_FALSE(Desc.DepthStencilState) #endif PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.IBStripCutValue) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.NodeMask) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.SampleDesc.Count) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.SampleDesc.Quality) for (uint32 i = 0; i < lhs.Desc.RTFormatArray.NumRenderTargets; i++)"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.RTFormatArray.RTFormats[i])"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(VSHash) PSO_IF_NOT_EQUAL_RETURN_FALSE(MSHash) PSO_IF_NOT_EQUAL_RETURN_FALSE(ASHash) PSO_IF_NOT_EQUAL_RETURN_FALSE(PSHash) PSO_IF_NOT_EQUAL_RETURN_FALSE(GSHash) if (lhs.Desc.InputLayout.pInputElementDescs != rhs.Desc.InputLayout.pInputElementDescs && lhs.Desc.InputLayout.NumElements)"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.InputLayout.pInputElementDescs[i].SemanticIndex) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.InputLayout.pInputElementDescs[i].Format) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.InputLayout.pInputElementDescs[i].InputSlot) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.InputLayout.pInputElementDescs[i].AlignedByteOffset) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.InputLayout.pInputElementDescs[i].InputSlotClass) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.InputLayout.pInputElementDescs[i].InstanceDataStepRate) PSO_IF_STRING_COMPARE_FAILS_RETURN_FALSE(Desc.InputLayout.pInputElementDescs[i].SemanticName) } } #if PLATFORM_WINDOWS PSO_IF_NOT_EQUAL_RETURN_FALSE(VSExtensions)"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(MSExtensions)"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(ASExtensions)"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(PSExtensions)"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(GSExtensions)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif return true ; } } ; template<> struct equality_pipeline_state_desc<FD3D12ComputePipelineStateDesc> { bool)",
    "insertText": "operator()(const FD3D12ComputePipelineStateDesc& lhs, const FD3D12ComputePipelineStateDesc& rhs)"
  },
  {
    "label": "PSO_IF_NOT_EQUAL_RETURN_FALSE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.CS.BytecodeLength) #if PLATFORM_WINDOWS PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.Flags) #endif PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.pRootSignature) PSO_IF_NOT_EQUAL_RETURN_FALSE(Desc.NodeMask) PSO_IF_NOT_EQUAL_RETURN_FALSE(CSHash) #if PLATFORM_WINDOWS PSO_IF_NOT_EQUAL_RETURN_FALSE(Extensions)"
  },
  {
    "label": "FD3D12PipelineStateWorker()",
    "kind": "Method",
    "detail": "Function (} } ; struct ComputePipelineCreationArgs ; struct GraphicsPipelineCreationArgs ; struct ComputePipelineCreationArgs_POD ; struct GraphicsPipelineCreationArgs_POD ; struct FD3D12PipelineStateWorker : public FD3D12AdapterChild,public FNonAbandonableTask {)",
    "insertText": "FD3D12PipelineStateWorker(FD3D12Adapter* Adapter, const ComputePipelineCreationArgs& InArgs)"
  },
  {
    "label": "FD3D12PipelineStateWorker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12PipelineStateWorker(FD3D12Adapter* Adapter, const GraphicsPipelineCreationArgs& InArgs)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork()"
  },
  {
    "label": "FD3D12PipelineState()",
    "kind": "Method",
    "detail": "Function (} union PipelineCreationArgs { ComputePipelineCreationArgs_POD* ComputeArgs ; GraphicsPipelineCreationArgs_POD* GraphicsArgs ; } CreationArgs ; const bool bIsGraphics ; TRefCountPtr<ID3D12PipelineState> PSO ; } ; struct FD3D12PipelineState : public FD3D12AdapterChild,public FD3D12MultiNodeGPUObject,public FNoncopyable,public FRefCountBase { public :)",
    "insertText": "FD3D12PipelineState(FD3D12Adapter* Parent)"
  },
  {
    "label": "FD3D12PipelineState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12PipelineState()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create(const ComputePipelineCreationArgs& InCreationArgs)"
  },
  {
    "label": "CreateAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAsync(const ComputePipelineCreationArgs& InCreationArgs)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# if D3D12_USE_DERIVED_PSO void)",
    "insertText": "Create(const FGraphicsPipelineStateInitializer& Initializer, FD3D12PipelineState* BasePSO)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Create(const GraphicsPipelineCreationArgs& InCreationArgs)"
  },
  {
    "label": "CreateAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAsync(const GraphicsPipelineCreationArgs& InCreationArgs)"
  },
  {
    "label": "GetPipelineState()",
    "kind": "Method",
    "detail": "Function (} ID3D12PipelineState*)",
    "insertText": "GetPipelineState()"
  },
  {
    "label": "InternalGetPipelineState()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "InternalGetPipelineState()"
  },
  {
    "label": "GetContextSortKey()",
    "kind": "Method",
    "detail": "Function (} } uint64)",
    "insertText": "GetContextSortKey()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ContextSortKey = InContextSortKey ; } FD3D12PipelineState&)",
    "insertText": "operator(const FD3D12PipelineState& other)"
  },
  {
    "label": "UsePSORefCounting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsePSORefCounting()"
  },
  {
    "label": "FD3D12PipelineStateCommonData()",
    "kind": "Method",
    "detail": "Function (protected : TRefCountPtr<ID3D12PipelineState> PipelineState ; FAsyncTask<FD3D12PipelineStateWorker>* Worker ; FRWLock GetPipelineStateMutex ; enum class PSOInitState { Initialized,Uninitialized,CreationFailed,} ; volatile PSOInitState InitState ; uint64 ContextSortKey = 0 ; } ; struct FD3D12PipelineStateCommonData {)",
    "insertText": "FD3D12PipelineStateCommonData(const FD3D12RootSignature* InRootSignature, FD3D12PipelineState* InPipelineState)"
  },
  {
    "label": "FD3D12GraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (const FD3D12RootSignature* const RootSignature ; FD3D12PipelineState* PipelineState ; } ; struct FD3D12GraphicsPipelineState : public FRHIGraphicsPipelineState,FD3D12PipelineStateCommonData {)",
    "insertText": "FD3D12GraphicsPipelineState()"
  },
  {
    "label": "FD3D12GraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12GraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer, const FD3D12RootSignature* InRootSignature, FD3D12PipelineState* InPipelineState)"
  },
  {
    "label": "GetPixelShader()",
    "kind": "Method",
    "detail": "Function (} FD3D12PixelShader*)",
    "insertText": "GetPixelShader()"
  },
  {
    "label": "GetMeshShader()",
    "kind": "Method",
    "detail": "Function (} FD3D12MeshShader*)",
    "insertText": "GetMeshShader()"
  },
  {
    "label": "GetAmplificationShader()",
    "kind": "Method",
    "detail": "Function (} FD3D12AmplificationShader*)",
    "insertText": "GetAmplificationShader()"
  },
  {
    "label": "GetGeometryShader()",
    "kind": "Method",
    "detail": "Function (} FD3D12GeometryShader*)",
    "insertText": "GetGeometryShader()"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} FRHIGraphicsShader*)",
    "insertText": "GetShader(EShaderFrequency Frequency)"
  },
  {
    "label": "FD3D12ComputePipelineState()",
    "kind": "Method",
    "detail": "Function (default : return nullptr ; } } FGraphicsPipelineStateInitializer PipelineStateInitializer ; TStaticArray<uint16,MaxVertexElementCount> StreamStrides ; bool bShaderNeedsGlobalConstantBuffer [ SF_NumStandardFrequencies ] ; } ; struct FD3D12ComputePipelineState : public FRHIComputePipelineState,FD3D12PipelineStateCommonData {)",
    "insertText": "FD3D12ComputePipelineState()"
  },
  {
    "label": "FD3D12ComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12ComputePipelineState(FD3D12ComputeShader* InComputeShader, const FD3D12RootSignature* InRootSignature, FD3D12PipelineState* InPipelineState)"
  },
  {
    "label": "FInitializerToGPSOMapKey()",
    "kind": "Method",
    "detail": "Function (bool bShaderNeedsGlobalConstantBuffer ; } ; # if D3D12RHI_USE_HIGH_LEVEL_PSO_CACHE struct FInitializerToGPSOMapKey { const FGraphicsPipelineStateInitializer* Initializer ; uint32 Hash ;)",
    "insertText": "FInitializerToGPSOMapKey()"
  },
  {
    "label": "FInitializerToGPSOMapKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInitializerToGPSOMapKey(const FGraphicsPipelineStateInitializer* InInitializer, uint32 InHash) : Initializer(InInitializer), Hash(InHash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FInitializerToGPSOMapKey& Other)"
  },
  {
    "label": "equal()",
    "kind": "Method",
    "detail": "Function (equality_pipeline_state_desc<TDesc> equal ; return)",
    "insertText": "equal(A, B)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetKeyHash(KeyInitType Key)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FD3D12PipelineState**, const FD3D12LowLevelGraphicsPipelineStateDesc&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FD3D12PipelineState*, const FD3D12ComputePipelineStateDesc&)"
  },
  {
    "label": "AddToRuntimeCache()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_HIGH_LEVEL_PSO_CACHE FD3D12GraphicsPipelineState*)",
    "insertText": "AddToRuntimeCache(const FGraphicsPipelineStateInitializer& Initializer, uint32 InitializerHash, const FD3D12RootSignature* RootSignature, FD3D12PipelineState* PipelineState)"
  },
  {
    "label": "AddToRuntimeCache()",
    "kind": "Method",
    "detail": "Function (FD3D12ComputePipelineState*)",
    "insertText": "AddToRuntimeCache(FD3D12ComputeShader* ComputeShader, FD3D12PipelineState* PipelineState)"
  },
  {
    "label": "FindInLowLevelCache()",
    "kind": "Method",
    "detail": "Function (# endif FD3D12PipelineState*)",
    "insertText": "FindInLowLevelCache(const FD3D12LowLevelGraphicsPipelineStateDesc& Desc)"
  },
  {
    "label": "CreateAndAddToLowLevelCache()",
    "kind": "Method",
    "detail": "Function (FD3D12PipelineState*)",
    "insertText": "CreateAndAddToLowLevelCache(const FD3D12LowLevelGraphicsPipelineStateDesc& Desc)"
  },
  {
    "label": "AddToLowLevelCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToLowLevelCache(const FD3D12LowLevelGraphicsPipelineStateDesc& Desc, FD3D12PipelineState** OutPipelineState, const FPostCreateGraphicCallback& PostCreateCallback)"
  },
  {
    "label": "OnPSOCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPSOCreated(FD3D12PipelineState* PipelineState, const FD3D12LowLevelGraphicsPipelineStateDesc& Desc)"
  },
  {
    "label": "FindInLowLevelCache()",
    "kind": "Method",
    "detail": "Function (FD3D12PipelineState*)",
    "insertText": "FindInLowLevelCache(const FD3D12ComputePipelineStateDesc& Desc)"
  },
  {
    "label": "CreateAndAddToLowLevelCache()",
    "kind": "Method",
    "detail": "Function (FD3D12PipelineState*)",
    "insertText": "CreateAndAddToLowLevelCache(const FD3D12ComputePipelineStateDesc& Desc)"
  },
  {
    "label": "AddToLowLevelCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToLowLevelCache(const FD3D12ComputePipelineStateDesc& Desc, FD3D12PipelineState** OutPipelineState, const FPostCreateComputeCallback& PostCreateCallback)"
  },
  {
    "label": "OnPSOCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPSOCreated(FD3D12PipelineState* PipelineState, const FD3D12ComputePipelineStateDesc& Desc)"
  },
  {
    "label": "FindInLoadedCache()",
    "kind": "Method",
    "detail": "Function (# if ! D3D12RHI_USE_HIGH_LEVEL_PSO_CACHE FD3D12GraphicsPipelineState*)",
    "insertText": "FindInLoadedCache(const FGraphicsPipelineStateInitializer& Initializer, const FD3D12RootSignature* RootSignature, FD3D12LowLevelGraphicsPipelineStateDesc& OutLowLevelDesc)"
  },
  {
    "label": "CreateAndAdd()",
    "kind": "Method",
    "detail": "Function (FD3D12GraphicsPipelineState*)",
    "insertText": "CreateAndAdd(const FGraphicsPipelineStateInitializer& Initializer, const FD3D12RootSignature* RootSignature, const FD3D12LowLevelGraphicsPipelineStateDesc& LowLevelDesc)"
  },
  {
    "label": "RemoveFromLowLevelCache()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "RemoveFromLowLevelCache(FD3D12PipelineState* PipelineState, const FGraphicsPipelineStateInitializer& PipelineStateInitializer, const FD3D12RootSignature* RootSignature)"
  },
  {
    "label": "FindInRuntimeCache()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_HIGH_LEVEL_PSO_CACHE FD3D12GraphicsPipelineState*)",
    "insertText": "FindInRuntimeCache(const FGraphicsPipelineStateInitializer& Initializer, uint32& OutHash)"
  },
  {
    "label": "FindInLoadedCache()",
    "kind": "Method",
    "detail": "Function (FD3D12GraphicsPipelineState*)",
    "insertText": "FindInLoadedCache(const FGraphicsPipelineStateInitializer& Initializer, uint32 InitializerHash, const FD3D12RootSignature* RootSignature, FD3D12LowLevelGraphicsPipelineStateDesc& OutLowLevelDesc)"
  },
  {
    "label": "CreateAndAdd()",
    "kind": "Method",
    "detail": "Function (FD3D12GraphicsPipelineState*)",
    "insertText": "CreateAndAdd(const FGraphicsPipelineStateInitializer& Initializer, uint32 InitializerHash, const FD3D12RootSignature* RootSignature, const FD3D12LowLevelGraphicsPipelineStateDesc& LowLevelDesc)"
  },
  {
    "label": "FindInRuntimeCache()",
    "kind": "Method",
    "detail": "Function (FD3D12ComputePipelineState*)",
    "insertText": "FindInRuntimeCache(const FD3D12ComputeShader* ComputeShader)"
  },
  {
    "label": "FindInLoadedCache()",
    "kind": "Method",
    "detail": "Function (# endif FD3D12ComputePipelineState*)",
    "insertText": "FindInLoadedCache(FD3D12ComputeShader* ComputeShader, const FD3D12RootSignature* RootSignature, FD3D12ComputePipelineStateDesc& OutLowLevelDesc)"
  },
  {
    "label": "CreateAndAdd()",
    "kind": "Method",
    "detail": "Function (FD3D12ComputePipelineState*)",
    "insertText": "CreateAndAdd(FD3D12ComputeShader* ComputeShader, const FD3D12RootSignature* RootSignature, const FD3D12ComputePipelineStateDesc& LowLevelDesc)"
  },
  {
    "label": "HashPSODesc()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "HashPSODesc(const FD3D12LowLevelGraphicsPipelineStateDesc& Desc)"
  },
  {
    "label": "HashPSODesc()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "HashPSODesc(const FD3D12ComputePipelineStateDesc& Desc)"
  },
  {
    "label": "HashData()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "HashData(const void* Data, int32 NumBytes)"
  },
  {
    "label": "FD3D12PipelineStateCacheBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12PipelineStateCacheBase(FD3D12Adapter* InParent)"
  },
  {
    "label": "FD3D12PipelineStateCacheBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12PipelineStateCacheBase()"
  }
]