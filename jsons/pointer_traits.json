[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__has_element_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__has_element_type"
  },
  {
    "label": "_Ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ptr"
  },
  {
    "label": "__pointer_traits_element_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__pointer_traits_element_type"
  },
  {
    "label": "_Sp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sp"
  },
  {
    "label": "__has_difference_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__has_difference_type"
  },
  {
    "label": "__pointer_traits_difference_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__pointer_traits_difference_type"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "__has_rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__has_rebind"
  },
  {
    "label": "_Xp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Xp"
  },
  {
    "label": "__pointer_traits_rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__pointer_traits_rebind"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rebind"
  },
  {
    "label": "__nat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__nat"
  },
  {
    "label": "_From",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_From"
  },
  {
    "label": "_To",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_To"
  },
  {
    "label": "__rebind_pointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__rebind_pointer"
  },
  {
    "label": "_Pointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pointer"
  },
  {
    "label": "__to_address_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__to_address_helper"
  },
  {
    "label": "_HasToAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_HasToAddress"
  },
  {
    "label": "_HasArrow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_HasArrow"
  },
  {
    "label": "_IsFancyPointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_IsFancyPointer"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_POINTER_TRAITS_H # define _LIBCPP___MEMORY_POINTER_TRAITS_H # include<__config> # include<__memory / addressof . h> # include<cstddef> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp> struct __has_element_type<_Tp,__void_t<_Tp::element_type>::type> : true_type { } ; template<class _Ptr,bool = __has_element_type<_Ptr>::value> struct __pointer_traits_element_type ; template<class _Ptr> struct __pointer_traits_element_type<_Ptr,true> { typedef _LIBCPP_NODEBUG _Ptr::element_type type ; } ; template<template<class,class . . .> class _Sp,class _Tp,class . . . _Args> struct __pointer_traits_element_type<_Sp<_Tp,_Args . . .>,true> { typedef _LIBCPP_NODEBUG _Sp<_Tp,_Args . . .>::element_type type ; } ; template<template<class,class . . .> class _Sp,class _Tp,class . . . _Args> struct __pointer_traits_element_type<_Sp<_Tp,_Args . . .>,false> { typedef _LIBCPP_NODEBUG _Tp type ; } ; template<class _Tp,class = void> struct __has_difference_type : false_type { } ; template<class _Tp> struct __has_difference_type<_Tp,__void_t<_Tp::difference_type>::type> : true_type { } ; template<class _Ptr,bool = __has_difference_type<_Ptr>::value> struct __pointer_traits_difference_type { typedef _LIBCPP_NODEBUG ptrdiff_t type ; } ; template<class _Ptr> struct __pointer_traits_difference_type<_Ptr,true> { typedef _LIBCPP_NODEBUG _Ptr::difference_type type ; } ; template<class _Tp,class _Up> struct __has_rebind { private : template<class _Xp> false_type)",
    "insertText": "__test(...)"
  },
  {
    "label": "__test()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_PUSH template<class _Xp> true_type)",
    "insertText": "__test(typename _Xp::template rebind<_Up>* = 0)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP public : const bool value =)",
    "insertText": "decltype(__test<_Tp>(0))"
  },
  {
    "label": "pointer_to()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp,class _Up,bool = __has_rebind<_Tp,_Up>::value> struct __pointer_traits_rebind { # ifndef _LIBCPP_CXX03_LANG typedef _LIBCPP_NODEBUG _Tp::template rebind<_Up> type ; # else typedef _LIBCPP_NODEBUG _Tp::template rebind<_Up>::other type ; # endif } ; template<template<class,class . . .> class _Sp,class _Tp,class . . . _Args,class _Up> struct __pointer_traits_rebind<_Sp<_Tp,_Args . . .>,_Up,true> { # ifndef _LIBCPP_CXX03_LANG typedef _LIBCPP_NODEBUG _Sp<_Tp,_Args . . .>::template rebind<_Up> type ; # else typedef _LIBCPP_NODEBUG _Sp<_Tp,_Args . . .>::template rebind<_Up>::other type ; # endif } ; template<template<class,class . . .> class _Sp,class _Tp,class . . . _Args,class _Up> struct __pointer_traits_rebind<_Sp<_Tp,_Args . . .>,_Up,false> { typedef _Sp<_Up,_Args . . .> type ; } ; template<class _Ptr> struct _LIBCPP_TEMPLATE_VIS pointer_traits { typedef _Ptr pointer ; typedef __pointer_traits_element_type<pointer>::type element_type ; typedef __pointer_traits_difference_type<pointer>::type difference_type ; # ifndef _LIBCPP_CXX03_LANG template<class _Up> using rebind = __pointer_traits_rebind<pointer,_Up>::type ; # else template<class _Up> struct rebind { typedef __pointer_traits_rebind<pointer,_Up>::type other ; } ; # endif private : struct __nat { } ; public : _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 pointer)",
    "insertText": "pointer_to(typename conditional<is_void<element_type>::value, __nat, element_type>::type& __r)"
  },
  {
    "label": "__to_address()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _From,class _To> struct __rebind_pointer { # ifndef _LIBCPP_CXX03_LANG typedef pointer_traits<_From>::template rebind<_To> type ; # else typedef pointer_traits<_From>::template rebind<_To>::other type ; # endif } ; template<class _Pointer,class = void> struct __to_address_helper ; template<class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR _Tp*)",
    "insertText": "__to_address(_Tp* __p)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Pointer,class = void> struct _HasArrow : false_type { } ; template<class _Pointer> struct _HasArrow<_Pointer,)",
    "insertText": "decltype((void)declval<const _Pointer&>().operator->())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Pointer> struct _IsFancyPointer { const bool value = _HasArrow<_Pointer>::value | | _HasToAddress<_Pointer>::value ; } ; template<class _Pointer,class = __enable_if_t<_And<is_class<_Pointer>,_IsFancyPointer<_Pointer>>::value>> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR decay<)",
    "insertText": "decltype(__to_address_helper<_Pointer>::__call(declval<const _Pointer&>()))>::type __to_address(const _Pointer& __p)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class _Pointer,class> struct __to_address_helper { _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR)",
    "insertText": "decltype(_VSTD::__to_address(declval<const _Pointer&>().operator->())) __call(const _Pointer& __p)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Pointer> struct __to_address_helper<_Pointer,)",
    "insertText": "decltype((void)pointer_traits<_Pointer>::to_address(declval<const _Pointer&>()))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR)",
    "insertText": "decltype(pointer_traits<_Pointer>::to_address(declval<const _Pointer&>())) __call(const _Pointer& __p)"
  },
  {
    "label": "to_address()",
    "kind": "Method",
    "detail": "Function (} } ; # if _LIBCPP_STD_VER> 1 7 template<class _Tp> _LIBCPP_INLINE_VISIBILITY auto)",
    "insertText": "to_address(_Tp *__p)"
  },
  {
    "label": "to_address()",
    "kind": "Method",
    "detail": "Function (} template<class _Pointer> _LIBCPP_INLINE_VISIBILITY auto)",
    "insertText": "to_address(const _Pointer& __p) noexcept -> decltype(std::__to_address(__p))"
  }
]