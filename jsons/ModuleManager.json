[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FModuleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModuleManager"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FModuleStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleStatus"
  },
  {
    "label": "FModuleDiskInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleDiskInfo"
  },
  {
    "label": "FModuleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModuleManager"
  },
  {
    "label": "FPrivateToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateToken"
  },
  {
    "label": "FModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModuleInfo"
  },
  {
    "label": "FModuleManagerLibraryTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleManagerLibraryTracker"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ModuleClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleClass"
  },
  {
    "label": "FStaticallyLinkedModuleRegistrant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticallyLinkedModuleRegistrant"
  },
  {
    "label": "FModuleInitializerEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModuleInitializerEntry"
  },
  {
    "label": "FDefaultModuleImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultModuleImpl"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FDefaultGameModuleImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultGameModuleImpl"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FSigningKeyRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSigningKeyRegistration"
  },
  {
    "label": "FEncryptionKeyRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncryptionKeyRegistration"
  },
  {
    "label": "FTargetNameRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetNameRegistration"
  },
  {
    "label": "FAutoSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutoSet"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IReload",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IReload"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "AbandonModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbandonModule( const FName InModuleName )"
  },
  {
    "label": "AddModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModule( const FName InModuleName )"
  },
  {
    "label": "RefreshModuleFilenameFromManifest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshModuleFilenameFromManifest(const FName InModuleName)"
  },
  {
    "label": "LoadModuleWithCallback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadModuleWithCallback( const FName InModuleName, FOutputDevice &Ar )"
  },
  {
    "label": "UnloadModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnloadModule( const FName InModuleName, bool bIsShutdown = false, bool bAllowUnloadCode = true )"
  },
  {
    "label": "UnloadOrAbandonModuleWithCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadOrAbandonModuleWithCallback( const FName InModuleName, FOutputDevice &Ar)"
  },
  {
    "label": "AbandonModuleWithCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbandonModuleWithCallback( const FName InModuleName )"
  },
  {
    "label": "AddExtraBinarySearchPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExtraBinarySearchPaths()"
  },
  {
    "label": "UnloadModulesAtShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadModulesAtShutdown( )"
  },
  {
    "label": "StartProcessingNewlyLoadedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartProcessingNewlyLoadedObjects()"
  },
  {
    "label": "AddBinariesDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBinariesDirectory(const TCHAR *InDirectory, bool bIsGameDirectory)"
  },
  {
    "label": "LoadModuleBinaryOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadModuleBinaryOnly(FName ModuleName)"
  },
  {
    "label": "SetGameBinariesDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameBinariesDirectory(const TCHAR* InDirectory)"
  },
  {
    "label": "SetModuleFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModuleFilename(FName ModuleName, const FString& Filename)"
  },
  {
    "label": "SaveCurrentStateForBootstrap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCurrentStateForBootstrap(const TCHAR* Filename)"
  },
  {
    "label": "FModuleManager()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FModuleManager(FPrivateToken)"
  },
  {
    "label": "AddModuleToModulesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModuleToModulesList(const FName InModuleName, FModuleManager::ModuleInfoRef& ModuleInfo)"
  },
  {
    "label": "ResetModulePathsCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetModulePathsCache()"
  },
  {
    "label": "WarnIfItWasntSafeToLoadHere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WarnIfItWasntSafeToLoadHere(const FName InModuleName)"
  },
  {
    "label": "FindModule()",
    "kind": "Method",
    "detail": "Function (ModuleInfoPtr)",
    "insertText": "FindModule(FName InModuleName)"
  },
  {
    "label": "FindModuleChecked()",
    "kind": "Method",
    "detail": "Function (ModuleInfoRef)",
    "insertText": "FindModuleChecked(FName InModuleName)"
  },
  {
    "label": "SerializeStateForBootstrap_Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeStateForBootstrap_Impl(FArchive& Ar)"
  },
  {
    "label": "RefreshModuleFilenameFromManifestImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshModuleFilenameFromManifestImpl(const FName InModuleName, FModuleInfo& ModuleInfo)"
  },
  {
    "label": "InternalFreeLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFreeLibrary(FName ModuleName, void* Handle)"
  },
  {
    "label": "ModuleClass()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ModuleClass()"
  },
  {
    "label": "FModuleInitializerEntry()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FModuleInitializerEntry(const TCHAR* InName, FInitializeModuleFunctionPtr InFunction, const TCHAR* InName2 = nullptr)"
  },
  {
    "label": "FindModule()",
    "kind": "Method",
    "detail": "Function (FInitializeModuleFunctionPtr)",
    "insertText": "FindModule(const TCHAR* Name)"
  },
  {
    "label": "ModuleImplClass()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ModuleImplClass()"
  },
  {
    "label": "GetActiveReloadType()",
    "kind": "Method",
    "detail": "Function (EActiveReloadType)",
    "insertText": "GetActiveReloadType()"
  },
  {
    "label": "IsReloadActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReloadActive()"
  },
  {
    "label": "BeginReload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReload(EActiveReloadType ActiveReloadType, IReload& Interface)"
  },
  {
    "label": "EndReload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReload()"
  }
]