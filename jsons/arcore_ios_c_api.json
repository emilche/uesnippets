[
  {
    "label": "ArSession_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArSession_"
  },
  {
    "label": "ArFrame_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArFrame_"
  },
  {
    "label": "ArPose_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArPose_"
  },
  {
    "label": "ArAnchorList_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArAnchorList_"
  },
  {
    "label": "ArAnchor_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArAnchor_"
  },
  {
    "label": "ARKitFrame_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ARKitFrame_"
  },
  {
    "label": "ARKitAnchor_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ARKitAnchor_"
  },
  {
    "label": "_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_type"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (# ifndef ARCORE_IOS_C_API_H_ # define ARCORE_IOS_C_API_H_ # include<stdint . h> typedef struct ArSession_ ArSession ; typedef struct ArFrame_ ArFrame ; typedef struct ArPose_ ArPose ; typedef struct ArAnchorList_ ArAnchorList ; typedef struct ArAnchor_ ArAnchor ; typedef struct ARKitFrame_ ARKitFrame ; typedef struct ARKitAnchor_ ARKitAnchor ; # if __cplusplus> = 2 0 1 1 0 0 # define)",
    "insertText": "AR_DEFINE_ENUM(_type) enum _type : int32_t #else #define AR_DEFINE_ENUM(_type)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (\\ enum # endif)",
    "insertText": "AR_DEFINE_ENUM(ArStatus)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_SUCCESS = 0,AR_UNAVAILABLE_DEVICE_NOT_COMPATIBLE = - 1 0 1,AR_ERROR_INVALID_ARGUMENT = - 1,AR_ERROR_NOT_TRACKING = - 5,AR_ERROR_RESOURCE_EXHAUSTED = - 1 1,AR_ERROR_ANCHOR_NOT_SUPPORTED_FOR_HOSTING = - 1 6,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArTrackingState)"
  },
  {
    "label": "AR_DEFINE_ENUM()",
    "kind": "Method",
    "detail": "Function (AR_TRACKING_STATE_TRACKING = 0,AR_TRACKING_STATE_PAUSED = 1,AR_TRACKING_STATE_STOPPED = 2,} ;)",
    "insertText": "AR_DEFINE_ENUM(ArCloudAnchorState)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (AR_CLOUD_ANCHOR_STATE_NONE = 0,AR_CLOUD_ANCHOR_STATE_TASK_IN_PROGRESS = 1,AR_CLOUD_ANCHOR_STATE_SUCCESS = 2,AR_CLOUD_ANCHOR_STATE_ERROR_INTERNAL = - 1,AR_CLOUD_ANCHOR_STATE_ERROR_NOT_AUTHORIZED = - 2,AR_CLOUD_ANCHOR_STATE_ERROR_SERVICE_UNAVAILABLE)",
    "insertText": "__attribute__((deprecated(\"Deprecated in ARCore SDK 1.12. \" \"See the CHANGELOG to learn more.\"))) = -3, AR_CLOUD_ANCHOR_STATE_ERROR_RESOURCE_EXHAUSTED = -4, AR_CLOUD_ANCHOR_STATE_ERROR_HOSTING_DATASET_PROCESSING_FAILED = -5, AR_CLOUD_ANCHOR_STATE_ERROR_CLOUD_ID_NOT_FOUND = -6, AR_CLOUD_ANCHOR_STATE_ERROR_RESOLVING_LOCALIZATION_NO_MATCH __attribute__((deprecated(\"Deprecated in ARCore SDK 1.12. \" \"See the CHANGELOG to learn more.\")))"
  },
  {
    "label": "ArSession_create()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus \" C \" { # endif ArStatus)",
    "insertText": "ArSession_create(const char* api_key, const char* bundle_identifier, ArSession** out_session_pointer)"
  },
  {
    "label": "ArSession_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_destroy(ArSession* session)"
  },
  {
    "label": "ArSession_reportEngineType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_reportEngineType(ArSession* session, const char* engine_type, const char* engine_version)"
  },
  {
    "label": "ArSession_updateAndAcquireArFrame()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_updateAndAcquireArFrame(ArSession* session, ARKitFrame* arkit_frame, ArFrame** out_ar_frame)"
  },
  {
    "label": "ArSession_hostAndAcquireNewCloudAnchor()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_hostAndAcquireNewCloudAnchor(ArSession* session, const ARKitAnchor* arkit_anchor, ArAnchor** out_cloud_anchor)"
  },
  {
    "label": "ArSession_resolveAndAcquireNewCloudAnchor()",
    "kind": "Method",
    "detail": "Function (ArStatus)",
    "insertText": "ArSession_resolveAndAcquireNewCloudAnchor(ArSession* session, const char* cloud_anchor_id, ArAnchor** out_cloud_anchor)"
  },
  {
    "label": "ArSession_getAllAnchors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArSession_getAllAnchors(const ArSession* session, ArAnchorList* out_anchor_list)"
  },
  {
    "label": "ArFrame_getTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getTimestamp(const ArSession* session, const ArFrame* frame, int64_t* out_timestamp_ns)"
  },
  {
    "label": "ArFrame_getUpdatedAnchors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_getUpdatedAnchors(const ArSession* session, const ArFrame* frame, ArAnchorList* out_anchor_list)"
  },
  {
    "label": "ArFrame_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArFrame_release(ArFrame* frame)"
  },
  {
    "label": "ARKitAnchor_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ARKitAnchor_create(const ArPose* pose, ARKitAnchor** out_arkit_anchor)"
  },
  {
    "label": "ARKitAnchor_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ARKitAnchor_release(ARKitAnchor* arkit_anchor)"
  },
  {
    "label": "ArAnchorList_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchorList_create(const ArSession* session, ArAnchorList** out_anchor_list)"
  },
  {
    "label": "ArAnchorList_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchorList_destroy(ArAnchorList* anchor_list)"
  },
  {
    "label": "ArAnchorList_getSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchorList_getSize(const ArSession* session, const ArAnchorList* anchor_list, int32_t* out_size)"
  },
  {
    "label": "ArAnchorList_acquireItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchorList_acquireItem(const ArSession* session, const ArAnchorList* anchor_list, int32_t index, ArAnchor** out_anchor)"
  },
  {
    "label": "ArAnchor_getPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_getPose(const ArSession* session, const ArAnchor* anchor, ArPose* out_pose)"
  },
  {
    "label": "ArAnchor_getTrackingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_getTrackingState(const ArSession* session, const ArAnchor* anchor, ArTrackingState* out_tracking_state)"
  },
  {
    "label": "ArAnchor_detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_detach(ArSession* session, ArAnchor* anchor)"
  },
  {
    "label": "ArAnchor_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_release(ArAnchor* anchor)"
  },
  {
    "label": "ArAnchor_acquireCloudAnchorId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_acquireCloudAnchorId(ArSession* session, ArAnchor* anchor, char** out_cloud_anchor_id)"
  },
  {
    "label": "ArAnchor_getCloudAnchorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArAnchor_getCloudAnchorState(const ArSession* session, const ArAnchor* anchor, ArCloudAnchorState* out_state)"
  },
  {
    "label": "ArPose_create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPose_create(const ArSession* session, const float* pose_raw, ArPose** out_pose)"
  },
  {
    "label": "ArPose_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPose_destroy(ArPose* pose)"
  },
  {
    "label": "ArPose_getPoseRaw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPose_getPoseRaw(const ArSession* session, const ArPose* pose, float* out_pose_raw)"
  },
  {
    "label": "ArPose_getMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArPose_getMatrix(const ArSession* session, const ArPose* pose, float* out_matrix_col_major_4x4)"
  },
  {
    "label": "ArString_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArString_release(char* str)"
  }
]