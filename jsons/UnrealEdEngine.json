[
  {
    "label": "AGroupActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGroupActor"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FPerformanceMonitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerformanceMonitor"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "IEngineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEngineLoop"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UHierarchicalInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHierarchicalInstancedStaticMeshComponent"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UUnrealEdOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUnrealEdOptions"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FTypedElementSelectionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementSelectionOptions"
  },
  {
    "label": "EPackageNotifyState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPackageNotifyState"
  },
  {
    "label": "FClassMoveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassMoveInfo"
  },
  {
    "label": "FPerformanceMonitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerformanceMonitor"
  },
  {
    "label": "UUnrealEdEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUnrealEdEngine"
  },
  {
    "label": "UUnrealEdOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUnrealEdOptions"
  },
  {
    "label": "UAutoReimportManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAutoReimportManager"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "USoundCue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundCue"
  },
  {
    "label": "UAnimCompress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCompress"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizer"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FSpriteCategoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpriteCategoryInfo"
  },
  {
    "label": "FComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizer"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "FComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizer"
  },
  {
    "label": "FComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizer"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "UThumbnailManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailManager"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "FComponentVisualizerForSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentVisualizerForSelection"
  },
  {
    "label": "FExternalCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalCookOnTheFlyServer"
  },
  {
    "label": "MakeSortedSpriteInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSortedSpriteInfo(TArray<struct FSpriteCategoryInfo>& OutSortedSpriteInfo)"
  },
  {
    "label": "OnPackageDirtyStateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackageDirtyStateUpdated( UPackage* Pkg)"
  },
  {
    "label": "OnSourceControlStateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSourceControlStateUpdated(const FSourceControlOperationRef& SourceControlOp, ECommandResult::Type ResultType, TArray<TWeakObjectPtr<UPackage>> Packages)"
  },
  {
    "label": "OnPackagesCheckedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackagesCheckedOut(const FSourceControlOperationRef& SourceControlOp, ECommandResult::Type ResultType, TArray<TWeakObjectPtr<UPackage>> Packages)"
  },
  {
    "label": "OnPostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostGarbageCollect()"
  },
  {
    "label": "OnColorPickerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColorPickerChanged()"
  },
  {
    "label": "OnPreWindowsMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreWindowsMessage(FViewport* Viewport, uint32 Message)"
  },
  {
    "label": "OnPostWindowsMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostWindowsMessage(FViewport* Viewport, uint32 Message)"
  },
  {
    "label": "RegisterComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentVisualizer(FName ComponentClassName, TSharedPtr<class FComponentVisualizer> Visualizer)"
  },
  {
    "label": "UnregisterComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponentVisualizer(FName ComponentClassName)"
  },
  {
    "label": "DrawComponentVisualizers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawComponentVisualizers(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawComponentVisualizersHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawComponentVisualizersHUD(const FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "UpdateFloatingPropertyWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFloatingPropertyWindows(bool bForceRefresh=false, bool bNotifyActorSelectionChanged=true)"
  },
  {
    "label": "UpdateFloatingPropertyWindowsFromActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFloatingPropertyWindowsFromActorList(const TArray<AActor*>& ActorList, bool bForceRefresh=false)"
  },
  {
    "label": "PostActorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostActorSelectionChanged()"
  },
  {
    "label": "SetPivotMovedIndependently()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPivotMovedIndependently( bool bMovedIndependently )"
  },
  {
    "label": "UpdatePivotLocationForSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePivotLocationForSelection( bool bOnChange = false )"
  },
  {
    "label": "Exec_Edit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Edit( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Pivot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Pivot( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Actor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Actor( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Element()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Element( UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Mode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Mode( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "Exec_Group()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Group( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "edactSelectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectAll( UWorld* InWorld )"
  },
  {
    "label": "edactSelectInvert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectInvert( UWorld* InWorld )"
  },
  {
    "label": "edactSelectAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectAllChildren( bool bRecurseChildren )"
  },
  {
    "label": "edactSelectOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectOfClass( UWorld* InWorld, UClass* Class )"
  },
  {
    "label": "edactSelectOfClassAndArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectOfClassAndArchetype( UWorld* InWorld, const TSubclassOf<AActor> InClass, const UObject* InArchetype )"
  },
  {
    "label": "edactSelectSubclassOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectSubclassOf( UWorld* InWorld, UClass* Class )"
  },
  {
    "label": "edactSelectDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectDeleted( UWorld* InWorld )"
  },
  {
    "label": "edactSelectMatchingStaticMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectMatchingStaticMesh(bool bAllClasses)"
  },
  {
    "label": "edactSelectMatchingSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectMatchingSkeletalMesh(bool bAllClasses)"
  },
  {
    "label": "edactSelectMatchingMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectMatchingMaterial()"
  },
  {
    "label": "edactSelectMatchingEmitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectMatchingEmitter()"
  },
  {
    "label": "edactSelectRelevantLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectRelevantLights( UWorld* InWorld )"
  },
  {
    "label": "DeleteComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteComponents(const TArray<UActorComponent*>& InComponentsToDelete, UTypedElementSelectionSet* InSelectionSet, const bool bVerifyDeletionCanHappen = true)"
  },
  {
    "label": "DeleteActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteActors(const TArray<AActor*>& InActorsToDelete, UWorld* InWorld, UTypedElementSelectionSet* InSelectionSet, const bool bVerifyDeletionCanHappen = true, const bool bWarnAboutReferences = true, const bool bWarnAboutSoftReferences = true)"
  },
  {
    "label": "PasteComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteComponents(TArray<UActorComponent*>& OutPastedComponents, AActor* TargetActor, const bool bWarnIfHidden, const FString* SourceData = nullptr)"
  },
  {
    "label": "PasteActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteActors(TArray<AActor*>& OutPastedActors, UWorld* InWorld, const FVector& LocationOffset, bool bDuplicate, bool bWarnIfHidden, const FString* SourceData = nullptr)"
  },
  {
    "label": "DuplicateComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateComponents(const TArray<UActorComponent*>& InComponentsToDuplicate, TArray<UActorComponent*>& OutNewComponents)"
  },
  {
    "label": "DuplicateActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateActors(const TArray<AActor*>& InActorsToDuplicate, TArray<AActor*>& OutNewActors, ULevel* InLevel, const FVector& LocationOffset)"
  },
  {
    "label": "edactReplaceSelectedBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactReplaceSelectedBrush( UWorld* InWorld )"
  },
  {
    "label": "edactReplaceSelectedNonBrushWithClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactReplaceSelectedNonBrushWithClass(UClass* Class)"
  },
  {
    "label": "edactReplaceClassWithClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactReplaceClassWithClass(UWorld* InWorld, UClass* SrcClass, UClass* DstClass)"
  },
  {
    "label": "edactAlignOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactAlignOrigin()"
  },
  {
    "label": "edactAlignVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactAlignVertices()"
  },
  {
    "label": "edactHideSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactHideSelected( UWorld* InWorld )"
  },
  {
    "label": "edactHideUnselected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactHideUnselected( UWorld* InWorld )"
  },
  {
    "label": "edactUnHideAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactUnHideAll( UWorld* InWorld )"
  },
  {
    "label": "edactHideSelectedStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactHideSelectedStartup( UWorld* InWorld )"
  },
  {
    "label": "edactUnHideAllStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactUnHideAllStartup( UWorld* InWorld )"
  },
  {
    "label": "edactUnHideSelectedStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactUnHideSelectedStartup( UWorld* InWorld )"
  },
  {
    "label": "edactUnhideSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactUnhideSelected( UWorld* InWorld )"
  },
  {
    "label": "CreateBSPVisibilityMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBSPVisibilityMap( UWorld* InWorld, TMap<AActor*, TArray<int32>>& OutBSPMap, bool& bOutAllVisible )"
  },
  {
    "label": "MakeBSPMapVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBSPMapVisible(const TMap<AActor*, TArray<int32>>& InBSPMap, UWorld* InWorld )"
  },
  {
    "label": "AttachSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachSelectedActors()"
  },
  {
    "label": "ShowActorProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowActorProperties()"
  },
  {
    "label": "AttemptModifiedPackageNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttemptModifiedPackageNotification()"
  },
  {
    "label": "PromptToCheckoutModifiedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromptToCheckoutModifiedPackages( bool bPromptAll = false )"
  },
  {
    "label": "ShowPackageNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPackageNotification()"
  },
  {
    "label": "RebuildTemplateMapData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTemplateMapData()"
  },
  {
    "label": "AppendTemplateMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTemplateMaps( const TArray<FTemplateMapInfo>& TemplateMapInfos )"
  },
  {
    "label": "IsUserInteracting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUserInteracting()"
  },
  {
    "label": "SetCurrentClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentClass( UClass* InClass )"
  },
  {
    "label": "DuplicateSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSelectedActors(UWorld* InWorld)"
  },
  {
    "label": "MakeSelectedActorsLevelCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSelectedActorsLevelCurrent()"
  },
  {
    "label": "CanSavePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSavePackage( UPackage* PackageToSave )"
  },
  {
    "label": "UpdateVolumeActorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVolumeActorVisibility( UClass* InVolumeActorClass = NULL , FLevelEditorViewportClient* InViewport = NULL)"
  },
  {
    "label": "FixAnyInvertedBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixAnyInvertedBrushes(UWorld* World)"
  },
  {
    "label": "ShowLightingStaticMeshInfoWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowLightingStaticMeshInfoWindow()"
  },
  {
    "label": "OpenSceneStatsWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSceneStatsWindow()"
  },
  {
    "label": "OpenTextureStatsWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTextureStatsWindow()"
  },
  {
    "label": "GetSortedVolumeClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSortedVolumeClasses( TArray< UClass* >* VolumeClasses )"
  },
  {
    "label": "HandleDumpModelGUIDCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpModelGUIDCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleModalTestCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleModalTestCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleDisallowExportCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisallowExportCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleDumpBPClassesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpBPClassesCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleFindOutdateInstancesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFindOutdateInstancesCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleDumpSelectionCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpSelectionCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "HandleBuildLightingCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBuildLightingCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleBuildPathsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBuildPathsCommand( const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleRecreateLandscapeCollisionCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRecreateLandscapeCollisionCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleRemoveLandscapeXYOffsetsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRemoveLandscapeXYOffsetsCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDisasmScriptCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisasmScriptCommand( const TCHAR* Str, FOutputDevice& Ar )"
  },
  {
    "label": "IsComponentSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentSelected(const UPrimitiveComponent* PrimComponent)"
  },
  {
    "label": "HasMountWritePermissionForPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMountWritePermissionForPackage(const FString& PackageName)"
  },
  {
    "label": "OnEditorElementSelectionPtrChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorElementSelectionPtrChanged(USelection* Selection, UTypedElementSelectionSet* OldSelectionSet, UTypedElementSelectionSet* NewSelectionSet)"
  },
  {
    "label": "OnEditorElementSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorElementSelectionChanged(const UTypedElementSelectionSet* SelectionSet)"
  },
  {
    "label": "OnHISMTreeBuilt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHISMTreeBuilt(UHierarchicalInstancedStaticMeshComponent* Component, bool bWasAsyncBuild)"
  },
  {
    "label": "VerifyMountPointWritePermission()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyMountPointWritePermission(FName MountPoint)"
  },
  {
    "label": "OnContentPathMounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentPathMounted(const FString& AssetPath, const FString& FileSystemPath)"
  },
  {
    "label": "OnContentPathDismounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentPathDismounted(const FString& AssetPath, const FString& FileSystemPath)"
  }
]