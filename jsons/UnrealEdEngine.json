[
  {
    "label": "AGroupActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGroupActor"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FPerformanceMonitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerformanceMonitor"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "IEngineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEngineLoop"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UHierarchicalInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHierarchicalInstancedStaticMeshComponent"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UUnrealEdOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUnrealEdOptions"
  },
  {
    "label": "USelection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USelection"
  },
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FTypedElementSelectionOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementSelectionOptions"
  },
  {
    "label": "EPackageNotifyState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPackageNotifyState"
  },
  {
    "label": "FClassMoveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassMoveInfo"
  },
  {
    "label": "UUnrealEdEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUnrealEdEngine"
  },
  {
    "label": "UAutoReimportManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAutoReimportManager"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "USoundCue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundCue"
  },
  {
    "label": "UAnimCompress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCompress"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVisualizer"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FSpriteCategoryInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpriteCategoryInfo"
  },
  {
    "label": "UThumbnailManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailManager"
  },
  {
    "label": "FComponentVisualizerForSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentVisualizerForSelection"
  },
  {
    "label": "FExternalCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExternalCookOnTheFlyServer"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" GameFramework / Actor . h \" # include \" Misc / NotifyHook . h \" # include \" Editor / EditorEngine . h \" # include \" IPackageAutoSaver . h \" # include \" ISourceControlProvider . h \" # include \" ComponentVisualizer . h \" # include \" ComponentVisualizerManager . h \" # include \" TemplateMapInfo . h \" # include \" UnrealEdEngine . generated . h \" class AGroupActor ; class FCanvas ; class FLevelEditorViewportClient ; class FPerformanceMonitor ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class IEngineLoop ; class ITargetPlatform ; class UPrimitiveComponent ; class UHierarchicalInstancedStaticMeshComponent ; class UTexture2D ; class UUnrealEdOptions ; class USelection ; class UTypedElementSelectionSet ; class FName ; typedef FName FEditorModeID ; struct FTypedElementSelectionOptions ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (NS_Updating,NS_BalloonPrompted,NS_DialogPrompted,NS_PendingPrompt,NS_PendingWarning,NS_MAX,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(config)"
  },
  {
    "label": "FClassMoveInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClassMoveInfo() : bActive(false)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ; class FPerformanceMonitor ;)",
    "insertText": "UCLASS(config=Engine, transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() public: UPROPERTY()"
  },
  {
    "label": "UUnrealEdEngine()",
    "kind": "Method",
    "detail": "Function (TArray<TWeakObjectPtr<UPackage>> PackagesDirtiedThisTick ; TMap<TWeakObjectPtr<UPackage>,uint8> PackageToNotifyState ; TMap<FName,int32> SpriteIDToIndexMap ; TMap<FName,TSharedPtr<class FComponentVisualizer>> ComponentVisualizerMap ; FComponentVisualizerManager ComponentVisManager ; ~)",
    "insertText": "UUnrealEdEngine()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreChange(FProperty* PropertyAboutToChange)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, FProperty* PropertyThatChanged)"
  },
  {
    "label": "SelectActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectActor(AActor* Actor, bool InSelected, bool bNotify, bool bSelectEvenIfHidden = false, bool bForceRefresh = false)"
  },
  {
    "label": "CanSelectActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectActor(AActor* Actor, bool InSelected, bool bSelectEvenIfHidden=false, bool bWarnIfLevelLocked=false)"
  },
  {
    "label": "SelectGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectGroup(AGroupActor* InGroupActor, bool bForceSelection=false, bool bInSelected=true, bool bNotify=true)"
  },
  {
    "label": "SelectComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectComponent(class UActorComponent* Component, bool bInSelected, bool bNotify, bool bSelectEvenIfHidden = false)"
  },
  {
    "label": "SelectBSPSurf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectBSPSurf(UModel* InModel, int32 iSurf, bool bSelected, bool bNoteSelectionChange)"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNone(bool bNoteSelectionChange, bool bDeselectBSPSurfs, bool WarnAboutManyActors=true)"
  },
  {
    "label": "DeselectAllSurfaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAllSurfaces()"
  },
  {
    "label": "NoteSelectionChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteSelectionChange(bool bNotify = true)"
  },
  {
    "label": "NoteActorMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NoteActorMovement()"
  },
  {
    "label": "FinishAllSnaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAllSnaps()"
  },
  {
    "label": "Cleanse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanse(bool ClearSelection, bool Redraw, const FText& Reason, bool bResetTrans)"
  },
  {
    "label": "GetMapBuildCancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMapBuildCancelled()"
  },
  {
    "label": "SetMapBuildCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMapBuildCancelled(bool InCancelled)"
  },
  {
    "label": "GetPivotLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPivotLocation()"
  },
  {
    "label": "SetPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPivot(FVector NewPivot, bool bSnapPivotToGrid, bool bIgnoreAxis, bool bAssignPivot=false)"
  },
  {
    "label": "ResetPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPivot()"
  },
  {
    "label": "RedrawLevelEditingViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawLevelEditingViewports(bool bInvalidateHitProxies=true)"
  },
  {
    "label": "TakeHighResScreenShots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeHighResScreenShots()"
  },
  {
    "label": "GetPackageList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackageList(TArray<UPackage*>* InPackages, UClass* InClass)"
  },
  {
    "label": "ShouldAbortActorDeletion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAbortActorDeletion()"
  },
  {
    "label": "CloseEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEditor()"
  },
  {
    "label": "IsAutosaving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutosaving()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (# if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Init(IEngineLoop* InEngineLoop)"
  },
  {
    "label": "PreExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreExit()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds, bool bIdleMode)"
  },
  {
    "label": "MakeSortedSpriteInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSortedSpriteInfo(TArray<struct FSpriteCategoryInfo>& OutSortedSpriteInfo)"
  },
  {
    "label": "OnPackageDirtyStateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackageDirtyStateUpdated(UPackage* Pkg)"
  },
  {
    "label": "OnSourceControlStateUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSourceControlStateUpdated(const FSourceControlOperationRef& SourceControlOp, ECommandResult::Type ResultType, TArray<TWeakObjectPtr<UPackage>> Packages)"
  },
  {
    "label": "OnPackagesCheckedOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPackagesCheckedOut(const FSourceControlOperationRef& SourceControlOp, ECommandResult::Type ResultType, TArray<TWeakObjectPtr<UPackage>> Packages)"
  },
  {
    "label": "OnPostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostGarbageCollect()"
  },
  {
    "label": "OnColorPickerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColorPickerChanged()"
  },
  {
    "label": "OnPreWindowsMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreWindowsMessage(FViewport* Viewport, uint32 Message)"
  },
  {
    "label": "OnPostWindowsMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostWindowsMessage(FViewport* Viewport, uint32 Message)"
  },
  {
    "label": "RegisterComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentVisualizer(FName ComponentClassName, TSharedPtr<class FComponentVisualizer> Visualizer)"
  },
  {
    "label": "UnregisterComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponentVisualizer(FName ComponentClassName)"
  },
  {
    "label": "FindComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FComponentVisualizer>)",
    "insertText": "FindComponentVisualizer(FName ComponentClassName)"
  },
  {
    "label": "FindComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FComponentVisualizer>)",
    "insertText": "FindComponentVisualizer(UClass* ComponentClass)"
  },
  {
    "label": "DrawComponentVisualizers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawComponentVisualizers(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawComponentVisualizersHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawComponentVisualizersHUD(const FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "UpdateFloatingPropertyWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFloatingPropertyWindows(bool bForceRefresh=false, bool bNotifyActorSelectionChanged=true)"
  },
  {
    "label": "UpdateFloatingPropertyWindowsFromActorList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFloatingPropertyWindowsFromActorList(const TArray<AActor*>& ActorList, bool bForceRefresh=false)"
  },
  {
    "label": "PostActorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostActorSelectionChanged()"
  },
  {
    "label": "SetPivotMovedIndependently()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPivotMovedIndependently(bool bMovedIndependently)"
  },
  {
    "label": "IsPivotMovedIndependently()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPivotMovedIndependently()"
  },
  {
    "label": "UpdatePivotLocationForSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePivotLocationForSelection(bool bOnChange = false)"
  },
  {
    "label": "ReplaceActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "ReplaceActor(AActor* CurrentActor, UClass* NewActorClass, UObject* Archetype, bool bNoteSelectionChange)"
  },
  {
    "label": "GetUnrealEdOptions()",
    "kind": "Method",
    "detail": "Function (UUnrealEdOptions*)",
    "insertText": "GetUnrealEdOptions()"
  },
  {
    "label": "CanDeleteSelectedActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteSelectedActors(const UWorld* InWorld, const bool bStopAtFirst, const bool bLogUndeletable, TArray<AActor*>* OutDeletableActors = NULL)"
  },
  {
    "label": "Exec_Edit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Edit(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Pivot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Pivot(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Actor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Actor(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Element()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Element(UWorld* InWorld, const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Mode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Mode(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Group()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec_Group(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "edactSelectAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectAll(UWorld* InWorld)"
  },
  {
    "label": "edactSelectInvert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectInvert(UWorld* InWorld)"
  },
  {
    "label": "edactSelectAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectAllChildren(bool bRecurseChildren)"
  },
  {
    "label": "edactSelectOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectOfClass(UWorld* InWorld, UClass* Class)"
  },
  {
    "label": "edactSelectOfClassAndArchetype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectOfClassAndArchetype(UWorld* InWorld, const TSubclassOf<AActor> InClass, const UObject* InArchetype)"
  },
  {
    "label": "edactSelectSubclassOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectSubclassOf(UWorld* InWorld, UClass* Class)"
  },
  {
    "label": "edactSelectDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectDeleted(UWorld* InWorld)"
  },
  {
    "label": "edactSelectMatchingStaticMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectMatchingStaticMesh(bool bAllClasses)"
  },
  {
    "label": "edactSelectMatchingSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectMatchingSkeletalMesh(bool bAllClasses)"
  },
  {
    "label": "edactSelectMatchingMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectMatchingMaterial()"
  },
  {
    "label": "edactSelectMatchingEmitter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectMatchingEmitter()"
  },
  {
    "label": "edactSelectRelevantLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactSelectRelevantLights(UWorld* InWorld)"
  },
  {
    "label": "CanDeleteComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteComponent(const UActorComponent* InComponent, FText* OutReason = nullptr)"
  },
  {
    "label": "CanDeleteActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteActor(const AActor* InActor, FText* OutReason = nullptr)"
  },
  {
    "label": "ShouldAbortComponentDeletion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAbortComponentDeletion(const TArray<UActorComponent*>& InComponentsToDelete, FText* OutReason = nullptr)"
  },
  {
    "label": "ShouldAbortActorDeletion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAbortActorDeletion(const TArray<AActor*>& InActorsToDelete, FText* OutReason = nullptr)"
  },
  {
    "label": "DeleteComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteComponents(const TArray<UActorComponent*>& InComponentsToDelete, UTypedElementSelectionSet* InSelectionSet, const bool bVerifyDeletionCanHappen = true)"
  },
  {
    "label": "DeleteActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteActors(const TArray<AActor*>& InActorsToDelete, UWorld* InWorld, UTypedElementSelectionSet* InSelectionSet, const bool bVerifyDeletionCanHappen = true, const bool bWarnAboutReferences = true, const bool bWarnAboutSoftReferences = true)"
  },
  {
    "label": "edactDeleteSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "edactDeleteSelected(UWorld* InWorld, bool bVerifyDeletionCanHappen=true, bool bWarnAboutReferences = true, bool bWarnAboutSoftReferences = true)"
  },
  {
    "label": "edactCopySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactCopySelected(UWorld* InWorld, FString* DestinationData = nullptr)"
  },
  {
    "label": "CopyComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyComponents(const TArray<UActorComponent*>& InComponentsToCopy, FString* DestinationData = nullptr)"
  },
  {
    "label": "CopyActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyActors(const TArray<AActor*>& InActorsToCopy, UWorld* InWorld, FString* DestinationData = nullptr)"
  },
  {
    "label": "edactPasteSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactPasteSelected(UWorld* InWorld, bool bDuplicate, bool bOffsetLocations, bool bWarnIfHidden, const FString* SourceData = nullptr)"
  },
  {
    "label": "PasteComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteComponents(TArray<UActorComponent*>& OutPastedComponents, AActor* TargetActor, const bool bWarnIfHidden, const FString* SourceData = nullptr)"
  },
  {
    "label": "PasteActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteActors(TArray<AActor*>& OutPastedActors, UWorld* InWorld, const FVector& LocationOffset, bool bDuplicate, bool bWarnIfHidden, const FString* SourceData = nullptr)"
  },
  {
    "label": "edactDuplicateSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactDuplicateSelected(ULevel* InLevel, bool bOffsetLocations)"
  },
  {
    "label": "DuplicateComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateComponents(const TArray<UActorComponent*>& InComponentsToDuplicate, TArray<UActorComponent*>& OutNewComponents)"
  },
  {
    "label": "DuplicateActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateActors(const TArray<AActor*>& InActorsToDuplicate, TArray<AActor*>& OutNewActors, ULevel* InLevel, const FVector& LocationOffset)"
  },
  {
    "label": "edactReplaceSelectedBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactReplaceSelectedBrush(UWorld* InWorld)"
  },
  {
    "label": "edactReplaceSelectedNonBrushWithClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactReplaceSelectedNonBrushWithClass(UClass* Class)"
  },
  {
    "label": "edactReplaceClassWithClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactReplaceClassWithClass(UWorld* InWorld, UClass* SrcClass, UClass* DstClass)"
  },
  {
    "label": "edactAlignOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactAlignOrigin()"
  },
  {
    "label": "edactAlignVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactAlignVertices()"
  },
  {
    "label": "edactHideSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactHideSelected(UWorld* InWorld)"
  },
  {
    "label": "edactHideUnselected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactHideUnselected(UWorld* InWorld)"
  },
  {
    "label": "edactUnHideAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactUnHideAll(UWorld* InWorld)"
  },
  {
    "label": "edactHideSelectedStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactHideSelectedStartup(UWorld* InWorld)"
  },
  {
    "label": "edactUnHideAllStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactUnHideAllStartup(UWorld* InWorld)"
  },
  {
    "label": "edactUnHideSelectedStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactUnHideSelectedStartup(UWorld* InWorld)"
  },
  {
    "label": "edactUnhideSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "edactUnhideSelected(UWorld* InWorld)"
  },
  {
    "label": "CreateBSPVisibilityMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBSPVisibilityMap(UWorld* InWorld, TMap<AActor*, TArray<int32>>& OutBSPMap, bool& bOutAllVisible)"
  },
  {
    "label": "MakeBSPMapVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBSPMapVisible(const TMap<AActor*, TArray<int32>>& InBSPMap, UWorld* InWorld)"
  },
  {
    "label": "GetDesiredAttachmentState()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetDesiredAttachmentState(TArray<AActor*>& OutNewChildren)"
  },
  {
    "label": "AttachSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachSelectedActors()"
  },
  {
    "label": "CanCookByTheBookInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCookByTheBookInEditor(const FString& PlatformName)"
  },
  {
    "label": "CanCookOnTheFlyInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCookOnTheFlyInEditor(const FString& PlatformName)"
  },
  {
    "label": "StartCookByTheBookInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCookByTheBookInEditor(const TArray<ITargetPlatform*> &TargetPlatforms, const TArray<FString> &CookMaps, const TArray<FString> &CookDirectories, const TArray<FString> &CookCultures, const TArray<FString> &IniMapSections)"
  },
  {
    "label": "IsCookByTheBookInEditorFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookByTheBookInEditorFinished()"
  },
  {
    "label": "CancelCookByTheBookInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCookByTheBookInEditor()"
  },
  {
    "label": "ShowActorProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowActorProperties()"
  },
  {
    "label": "AnyWorldsAreDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyWorldsAreDirty(UWorld* InWorld)"
  },
  {
    "label": "AnyContentPackagesAreDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyContentPackagesAreDirty()"
  },
  {
    "label": "AttemptModifiedPackageNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttemptModifiedPackageNotification()"
  },
  {
    "label": "PromptToCheckoutModifiedPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PromptToCheckoutModifiedPackages(bool bPromptAll = false)"
  },
  {
    "label": "ShowPackageNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPackageNotification()"
  },
  {
    "label": "GetNumDirtyPackagesThatNeedCheckout()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumDirtyPackagesThatNeedCheckout()"
  },
  {
    "label": "DoDirtyPackagesNeedCheckout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoDirtyPackagesNeedCheckout()"
  },
  {
    "label": "IsTemplateMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTemplateMap(const FString& MapName)"
  },
  {
    "label": "RebuildTemplateMapData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTemplateMapData()"
  },
  {
    "label": "AppendTemplateMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTemplateMaps(const TArray<FTemplateMapInfo>& TemplateMapInfos)"
  },
  {
    "label": "IsUserInteracting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUserInteracting()"
  },
  {
    "label": "SetCurrentClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentClass(UClass* InClass)"
  },
  {
    "label": "AllowSelectTranslucent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowSelectTranslucent()"
  },
  {
    "label": "OnlyLoadEditorVisibleLevelsInPIE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnlyLoadEditorVisibleLevelsInPIE()"
  },
  {
    "label": "PreferToStreamLevelsInPIE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreferToStreamLevelsInPIE()"
  },
  {
    "label": "DuplicateSelectedActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSelectedActors(UWorld* InWorld)"
  },
  {
    "label": "MakeSelectedActorsLevelCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSelectedActorsLevelCurrent()"
  },
  {
    "label": "GetThumbnailManager()",
    "kind": "Method",
    "detail": "Function (class UThumbnailManager*)",
    "insertText": "GetThumbnailManager()"
  },
  {
    "label": "CanSavePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSavePackage(UPackage* PackageToSave)"
  },
  {
    "label": "UpdateVolumeActorVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVolumeActorVisibility(UClass* InVolumeActorClass = NULL , FLevelEditorViewportClient* InViewport = NULL)"
  },
  {
    "label": "FixAnyInvertedBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixAnyInvertedBrushes(UWorld* World)"
  },
  {
    "label": "GetSpriteCategoryIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSpriteCategoryIndex(const FName& InSpriteCategory)"
  },
  {
    "label": "ShowLightingStaticMeshInfoWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowLightingStaticMeshInfoWindow()"
  },
  {
    "label": "OpenSceneStatsWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenSceneStatsWindow()"
  },
  {
    "label": "OpenTextureStatsWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenTextureStatsWindow()"
  },
  {
    "label": "GetSortedVolumeClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSortedVolumeClasses(TArray< UClass* >* VolumeClasses)"
  },
  {
    "label": "WarnIfDestinationLevelIsHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WarnIfDestinationLevelIsHidden(UWorld* InWorld)"
  },
  {
    "label": "GeneratePackageThumbnailsIfRequired()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "GeneratePackageThumbnailsIfRequired(const TCHAR* Str, FOutputDevice& Ar, TArray<FString>& ThumbNamesToUnload)"
  },
  {
    "label": "GetPackageAutoSaver()",
    "kind": "Method",
    "detail": "Function (IPackageAutoSaver&)",
    "insertText": "GetPackageAutoSaver()"
  },
  {
    "label": "HandleModalTestCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleModalTestCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisallowExportCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisallowExportCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDumpBPClassesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpBPClassesCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleFindOutdateInstancesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFindOutdateInstancesCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDumpSelectionCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDumpSelectionCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "HandleBuildLightingCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBuildLightingCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleBuildPathsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBuildPathsCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleRecreateLandscapeCollisionCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRecreateLandscapeCollisionCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleRemoveLandscapeXYOffsetsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleRemoveLandscapeXYOffsetsCommand(const TCHAR* Str, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDisasmScriptCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisasmScriptCommand(const TCHAR* Str, FOutputDevice& Ar)"
  },
  {
    "label": "IsComponentSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentSelected(const UPrimitiveComponent* PrimComponent)"
  },
  {
    "label": "HasMountWritePermissionForPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMountWritePermissionForPackage(const FString& PackageName)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(const TArray<FTemplateMapInfo>&, FGetTemplateMapInfos)"
  },
  {
    "label": "OnGetTemplateMapInfos()",
    "kind": "Method",
    "detail": "Function (FGetTemplateMapInfos&)",
    "insertText": "OnGetTemplateMapInfos()"
  },
  {
    "label": "OnPasteActorsBegin()",
    "kind": "Method",
    "detail": "Function (FOnPasteActorsBegin&)",
    "insertText": "OnPasteActorsBegin()"
  },
  {
    "label": "GetProjectDefaultMapTemplates()",
    "kind": "Method",
    "detail": "Function (const TArray<FTemplateMapInfo>&)",
    "insertText": "GetProjectDefaultMapTemplates()"
  },
  {
    "label": "OnEditorElementSelectionPtrChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnEditorElementSelectionPtrChanged(USelection* Selection, UTypedElementSelectionSet* OldSelectionSet, UTypedElementSelectionSet* NewSelectionSet)"
  },
  {
    "label": "OnEditorElementSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorElementSelectionChanged(const UTypedElementSelectionSet* SelectionSet)"
  },
  {
    "label": "OnHISMTreeBuilt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHISMTreeBuilt(UHierarchicalInstancedStaticMeshComponent* Component, bool bWasAsyncBuild)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IPackageAutoSaver> PackageAutoSaver ; struct FComponentVisualizerForSelection { FCachedComponentVisualizer ComponentVisualizer ; TOptional<TFunction<)",
    "insertText": "bool(void)"
  },
  {
    "label": "VerifyMountPointWritePermission()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FComponentVisualizerForSelection> VisualizersForSelection ; FPerformanceMonitor* PerformanceMonitor ; bool bPivotMovedIndependently ; TWeakPtr<SNotificationItem> CheckOutNotificationWeakPtr ; private : bool)",
    "insertText": "VerifyMountPointWritePermission(FName MountPoint)"
  },
  {
    "label": "OnContentPathMounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentPathMounted(const FString& AssetPath, const FString& FileSystemPath)"
  },
  {
    "label": "OnContentPathDismounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContentPathDismounted(const FString& AssetPath, const FString& FileSystemPath)"
  },
  {
    "label": "InternalGetNumDirtyPackagesThatNeedCheckout()",
    "kind": "Method",
    "detail": "Function (TMap<FName,bool> MountPointCheckedForWritePermission ; TWeakPtr<SNotificationItem> WritePermissionWarningNotificationWeakPtr ; FGetTemplateMapInfos GetTemplateMapInfosDelegate ; FOnPasteActorsBegin OnPasteActorsBeginDelegate ; FOnPasteActorsEnd OnPasteActorsEndDelegate ; TArray<FTemplateMapInfo> TemplateMapInfoCache ; class FExternalCookOnTheFlyServer* ExternalCookOnTheFlyServer = nullptr ; int32)",
    "insertText": "InternalGetNumDirtyPackagesThatNeedCheckout(bool bCheckIfAny)"
  },
  {
    "label": "ValidateFreeDiskSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateFreeDiskSpace()"
  },
  {
    "label": "AddVisualizers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVisualizers(AActor* Actor, TArray<FCachedComponentVisualizer>& Visualizers, TFunctionRef<bool(const TSharedPtr<FComponentVisualizer>&)> Condition)"
  }
]