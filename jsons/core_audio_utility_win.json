[
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "ScopedMMCSSRegistration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedMMCSSRegistration"
  },
  {
    "label": "ScopedPropVariant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedPropVariant"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ScopedCoMem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCoMem"
  },
  {
    "label": "ScopedHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHandle"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "WaveFormatWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WaveFormatWrapper"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (NOLINT)",
    "insertText": "RTC_DCHECK(mem_ptr_ == nullptr)"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "IsMMCSSSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMMCSSSupported()"
  },
  {
    "label": "NumberOfActiveDevices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfActiveDevices(EDataFlow data_flow)"
  },
  {
    "label": "GetAudioClientVersion()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetAudioClientVersion()"
  },
  {
    "label": "CreateDeviceEnumerator()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IMMDeviceEnumerator>)",
    "insertText": "CreateDeviceEnumerator()"
  },
  {
    "label": "GetDefaultInputDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetDefaultInputDeviceID()"
  },
  {
    "label": "GetDefaultOutputDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetDefaultOutputDeviceID()"
  },
  {
    "label": "GetCommunicationsInputDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetCommunicationsInputDeviceID()"
  },
  {
    "label": "GetCommunicationsOutputDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetCommunicationsOutputDeviceID()"
  },
  {
    "label": "CreateDevice()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IMMDevice>)",
    "insertText": "CreateDevice(absl::string_view device_id,\n                                               EDataFlow data_flow,\n                                               ERole role)"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (webrtc::AudioDeviceName)",
    "insertText": "GetDeviceName(IMMDevice* device)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetFriendlyName(absl::string_view device_id,\n                            EDataFlow data_flow,\n                            ERole role)"
  },
  {
    "label": "GetDataFlow()",
    "kind": "Method",
    "detail": "Function (EDataFlow)",
    "insertText": "GetDataFlow(IMMDevice* device)"
  },
  {
    "label": "GetInputDeviceNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInputDeviceNames(webrtc::AudioDeviceNames* device_names)"
  },
  {
    "label": "GetOutputDeviceNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOutputDeviceNames(webrtc::AudioDeviceNames* device_names)"
  },
  {
    "label": "CreateSessionManager2()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioSessionManager2>)",
    "insertText": "CreateSessionManager2(\n    IMMDevice* device)"
  },
  {
    "label": "CreateSessionEnumerator()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioSessionEnumerator>)",
    "insertText": "CreateSessionEnumerator(\n    IMMDevice* device)"
  },
  {
    "label": "NumberOfActiveSessions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfActiveSessions(IMMDevice* device)"
  },
  {
    "label": "CreateClient()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioClient>)",
    "insertText": "CreateClient(absl::string_view device_id,\n                                                  EDataFlow data_flow,\n                                                  ERole role)"
  },
  {
    "label": "CreateClient2()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioClient2>)",
    "insertText": "CreateClient2(absl::string_view device_id,\n                                                    EDataFlow data_flow,\n                                                    ERole role)"
  },
  {
    "label": "CreateClient3()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioClient3>)",
    "insertText": "CreateClient3(absl::string_view device_id,\n                                                    EDataFlow data_flow,\n                                                    ERole role)"
  },
  {
    "label": "SetClientProperties()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetClientProperties(IAudioClient2* client)"
  },
  {
    "label": "GetBufferSizeLimits()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetBufferSizeLimits(IAudioClient2* client,\n                            const WAVEFORMATEXTENSIBLE* format,\n                            REFERENCE_TIME* min_buffer_duration,\n                            REFERENCE_TIME* max_buffer_duration)"
  },
  {
    "label": "GetSharedModeMixFormat()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetSharedModeMixFormat(IAudioClient* client,\n                               WAVEFORMATEXTENSIBLE* format)"
  },
  {
    "label": "IsFormatSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFormatSupported(IAudioClient* client,\n                       AUDCLNT_SHAREMODE share_mode,\n                       const WAVEFORMATEXTENSIBLE* format)"
  },
  {
    "label": "GetDevicePeriod()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetDevicePeriod(IAudioClient* client,\n                        AUDCLNT_SHAREMODE share_mode,\n                        REFERENCE_TIME* device_period)"
  },
  {
    "label": "GetSharedModeEnginePeriod()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetSharedModeEnginePeriod(IAudioClient3* client3,\n                                  const WAVEFORMATEXTENSIBLE* format,\n                                  uint32_t* default_period_in_frames,\n                                  uint32_t* fundamental_period_in_frames,\n                                  uint32_t* min_period_in_frames,\n                                  uint32_t* max_period_in_frames)"
  },
  {
    "label": "GetPreferredAudioParameters()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetPreferredAudioParameters(IAudioClient* client,\n                                    webrtc::AudioParameters* params)"
  },
  {
    "label": "GetPreferredAudioParameters()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetPreferredAudioParameters(IAudioClient* client,\n                                    webrtc::AudioParameters* params,\n                                    uint32_t sample_rate)"
  },
  {
    "label": "SharedModeInitialize()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SharedModeInitialize(IAudioClient* client,\n                             const WAVEFORMATEXTENSIBLE* format,\n                             HANDLE event_handle,\n                             REFERENCE_TIME buffer_duration,\n                             bool auto_convert_pcm,\n                             uint32_t* endpoint_buffer_size)"
  },
  {
    "label": "SharedModeInitializeLowLatency()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SharedModeInitializeLowLatency(IAudioClient3* client,\n                                       const WAVEFORMATEXTENSIBLE* format,\n                                       HANDLE event_handle,\n                                       uint32_t period_in_frames,\n                                       bool auto_convert_pcm,\n                                       uint32_t* endpoint_buffer_size)"
  },
  {
    "label": "CreateRenderClient()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioRenderClient>)",
    "insertText": "CreateRenderClient(\n    IAudioClient* client)"
  },
  {
    "label": "CreateCaptureClient()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioCaptureClient>)",
    "insertText": "CreateCaptureClient(\n    IAudioClient* client)"
  },
  {
    "label": "CreateAudioClock()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioClock>)",
    "insertText": "CreateAudioClock(IAudioClient* client)"
  },
  {
    "label": "CreateAudioSessionControl()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioSessionControl>)",
    "insertText": "CreateAudioSessionControl(\n    IAudioClient* client)"
  },
  {
    "label": "CreateSimpleAudioVolume()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<ISimpleAudioVolume>)",
    "insertText": "CreateSimpleAudioVolume(\n    IAudioClient* client)"
  },
  {
    "label": "FillRenderEndpointBufferWithSilence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FillRenderEndpointBufferWithSilence(IAudioClient* client,\n                                         IAudioRenderClient* render_client)"
  },
  {
    "label": "WaveFormatToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "WaveFormatToString(WaveFormatWrapper format)"
  },
  {
    "label": "ReferenceTimeToTimeDelta()",
    "kind": "Method",
    "detail": "Function (webrtc::TimeDelta)",
    "insertText": "ReferenceTimeToTimeDelta(REFERENCE_TIME time)"
  },
  {
    "label": "FramesToMilliseconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "FramesToMilliseconds(uint32_t num_frames, uint16_t sample_rate)"
  },
  {
    "label": "ErrorToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ErrorToString(const _com_error& error)"
  }
]