[
  {
    "label": "ScopedMMCSSRegistration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedMMCSSRegistration"
  },
  {
    "label": "ScopedPropVariant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedPropVariant"
  },
  {
    "label": "ScopedCoMem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCoMem"
  },
  {
    "label": "ScopedHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHandle"
  },
  {
    "label": "WaveFormatWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WaveFormatWrapper"
  },
  {
    "label": "comment()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_DEVICE_WIN_CORE_AUDIO_UTILITY_WIN_H_ # define MODULES_AUDIO_DEVICE_WIN_CORE_AUDIO_UTILITY_WIN_H_ # include<audioclient . h> # include<audiopolicy . h> # include<avrt . h> # include<comdef . h> # include<mmdeviceapi . h> # include<objbase . h> # include<propidl . h> # include<wrl / client . h> # include<string> # include \" absl / strings / string_view . h \" # include \" api / units / time_delta . h \" # include \" modules / audio_device / audio_device_name . h \" # include \" modules / audio_device / include / audio_device_defines . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / string_utils . h \" # pragma)",
    "insertText": "comment(lib, \"Avrt.lib\")"
  },
  {
    "label": "PriorityClassToString()",
    "kind": "Method",
    "detail": "Function (namespace webrtc_win { class ScopedMMCSSRegistration { public : const char*)",
    "insertText": "PriorityClassToString(DWORD priority_class)"
  },
  {
    "label": "RTC_DLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DLOG(LS_INFO) << \"ScopedMMCSSRegistration: \" << rtc::ToUtf8(task_name)"
  },
  {
    "label": "AvSetMmThreadCharacteristicsW()",
    "kind": "Method",
    "detail": "Function (DWORD mmcss_task_index = 0 ; mmcss_handle_ =)",
    "insertText": "AvSetMmThreadCharacteristicsW(task_name, &mmcss_task_index)"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_ERROR) << \"Failed to enable MMCSS on this thread: \" << GetLastError()"
  },
  {
    "label": "GetPriorityClass()",
    "kind": "Method",
    "detail": "Function (} else { const DWORD priority_class =)",
    "insertText": "GetPriorityClass(GetCurrentProcess())"
  },
  {
    "label": "GetThreadPriority()",
    "kind": "Method",
    "detail": "Function (const int priority =)",
    "insertText": "GetThreadPriority(GetCurrentThread())"
  },
  {
    "label": "RTC_DLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DLOG(LS_INFO) << \"priority class: \" << PriorityClassToString(priority_class) << \"(\" << priority_class << \")"
  },
  {
    "label": "RTC_DLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DLOG(LS_INFO) << \"priority: \" << PriorityToString(priority) << \"(\" << priority << \")"
  },
  {
    "label": "ScopedMMCSSRegistration()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "ScopedMMCSSRegistration()"
  },
  {
    "label": "RTC_DLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DLOG(LS_INFO)"
  },
  {
    "label": "AvRevertMmThreadCharacteristics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AvRevertMmThreadCharacteristics(mmcss_handle_)"
  },
  {
    "label": "ScopedMMCSSRegistration()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ScopedMMCSSRegistration(const ScopedMMCSSRegistration&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedMMCSSRegistration&)",
    "insertText": "operator(const ScopedMMCSSRegistration&)"
  },
  {
    "label": "Succeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Succeeded()"
  },
  {
    "label": "PropVariantInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropVariantInit(&pv_)"
  },
  {
    "label": "ScopedPropVariant()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedPropVariant()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ScopedPropVariant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedPropVariant(const ScopedPropVariant&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedPropVariant&)",
    "insertText": "operator(const ScopedPropVariant&)"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (PROPVARIANT*)",
    "insertText": "Receive()"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(pv_.vt, VT_EMPTY)"
  },
  {
    "label": "PropVariantClear()",
    "kind": "Method",
    "detail": "Function (HRESULT result =)",
    "insertText": "PropVariantClear(&pv_)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(result, S_OK)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } const PROPVARIANT&)",
    "insertText": "get()"
  },
  {
    "label": "ScopedCoMem()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedCoMem()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(nullptr)"
  },
  {
    "label": "ScopedCoMem()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedCoMem(const ScopedCoMem&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedCoMem&)",
    "insertText": "operator(const ScopedCoMem&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T**)",
    "insertText": "operator()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(mem_ptr_ == nullptr)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(mem_ptr_ != nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(std::nullptr_t, const ScopedCoMem& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ScopedCoMem& lhs, std::nullptr_t)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(T* ptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (mem_ptr_ = ptr ; } T*)",
    "insertText": "Get()"
  },
  {
    "label": "ScopedHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedHandle(HANDLE h) : handle_(nullptr)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(h)"
  },
  {
    "label": "ScopedHandle()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedHandle()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ScopedHandle&)",
    "insertText": "operator(const ScopedHandle&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "WaveFormatWrapper()",
    "kind": "Method",
    "detail": "Function (} handle_ = nullptr ; } } private : HANDLE handle_ ; } ; namespace core_audio_utility { class WaveFormatWrapper { public :)",
    "insertText": "WaveFormatWrapper(WAVEFORMATEXTENSIBLE* p) : ptr_(reinterpret_cast<WAVEFORMATEX*>(p))"
  },
  {
    "label": "WaveFormatWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WaveFormatWrapper(WAVEFORMATEX* p) : ptr_(p)"
  },
  {
    "label": "WaveFormatWrapper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "WaveFormatWrapper()"
  },
  {
    "label": "WAVEFORMATEX()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "WAVEFORMATEX()"
  },
  {
    "label": "IsExtensible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExtensible()"
  },
  {
    "label": "IsPcm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPcm()"
  },
  {
    "label": "IsFloat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFloat()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (private : WAVEFORMATEX* ptr_ ; } ; bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "IsMMCSSSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMMCSSSupported()"
  },
  {
    "label": "NumberOfActiveDevices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfActiveDevices(EDataFlow data_flow)"
  },
  {
    "label": "GetAudioClientVersion()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetAudioClientVersion()"
  },
  {
    "label": "CreateDeviceEnumerator()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IMMDeviceEnumerator>)",
    "insertText": "CreateDeviceEnumerator()"
  },
  {
    "label": "GetDefaultInputDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetDefaultInputDeviceID()"
  },
  {
    "label": "GetDefaultOutputDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetDefaultOutputDeviceID()"
  },
  {
    "label": "GetCommunicationsInputDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetCommunicationsInputDeviceID()"
  },
  {
    "label": "GetCommunicationsOutputDeviceID()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetCommunicationsOutputDeviceID()"
  },
  {
    "label": "CreateDevice()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IMMDevice>)",
    "insertText": "CreateDevice(absl::string_view device_id, EDataFlow data_flow, ERole role)"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (webrtc::AudioDeviceName)",
    "insertText": "GetDeviceName(IMMDevice* device)"
  },
  {
    "label": "GetFriendlyName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetFriendlyName(absl::string_view device_id, EDataFlow data_flow, ERole role)"
  },
  {
    "label": "GetDataFlow()",
    "kind": "Method",
    "detail": "Function (EDataFlow)",
    "insertText": "GetDataFlow(IMMDevice* device)"
  },
  {
    "label": "GetInputDeviceNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInputDeviceNames(webrtc::AudioDeviceNames* device_names)"
  },
  {
    "label": "GetOutputDeviceNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOutputDeviceNames(webrtc::AudioDeviceNames* device_names)"
  },
  {
    "label": "CreateSessionManager2()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioSessionManager2>)",
    "insertText": "CreateSessionManager2(IMMDevice* device)"
  },
  {
    "label": "CreateSessionEnumerator()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioSessionEnumerator>)",
    "insertText": "CreateSessionEnumerator(IMMDevice* device)"
  },
  {
    "label": "NumberOfActiveSessions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfActiveSessions(IMMDevice* device)"
  },
  {
    "label": "CreateClient()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioClient>)",
    "insertText": "CreateClient(absl::string_view device_id, EDataFlow data_flow, ERole role)"
  },
  {
    "label": "CreateClient2()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioClient2>)",
    "insertText": "CreateClient2(absl::string_view device_id, EDataFlow data_flow, ERole role)"
  },
  {
    "label": "CreateClient3()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioClient3>)",
    "insertText": "CreateClient3(absl::string_view device_id, EDataFlow data_flow, ERole role)"
  },
  {
    "label": "SetClientProperties()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetClientProperties(IAudioClient2* client)"
  },
  {
    "label": "GetBufferSizeLimits()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetBufferSizeLimits(IAudioClient2* client, const WAVEFORMATEXTENSIBLE* format, REFERENCE_TIME* min_buffer_duration, REFERENCE_TIME* max_buffer_duration)"
  },
  {
    "label": "GetSharedModeMixFormat()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetSharedModeMixFormat(IAudioClient* client, WAVEFORMATEXTENSIBLE* format)"
  },
  {
    "label": "IsFormatSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFormatSupported(IAudioClient* client, AUDCLNT_SHAREMODE share_mode, const WAVEFORMATEXTENSIBLE* format)"
  },
  {
    "label": "GetDevicePeriod()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetDevicePeriod(IAudioClient* client, AUDCLNT_SHAREMODE share_mode, REFERENCE_TIME* device_period)"
  },
  {
    "label": "GetSharedModeEnginePeriod()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetSharedModeEnginePeriod(IAudioClient3* client3, const WAVEFORMATEXTENSIBLE* format, uint32_t* default_period_in_frames, uint32_t* fundamental_period_in_frames, uint32_t* min_period_in_frames, uint32_t* max_period_in_frames)"
  },
  {
    "label": "GetPreferredAudioParameters()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetPreferredAudioParameters(IAudioClient* client, webrtc::AudioParameters* params)"
  },
  {
    "label": "GetPreferredAudioParameters()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "GetPreferredAudioParameters(IAudioClient* client, webrtc::AudioParameters* params, uint32_t sample_rate)"
  },
  {
    "label": "SharedModeInitialize()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SharedModeInitialize(IAudioClient* client, const WAVEFORMATEXTENSIBLE* format, HANDLE event_handle, REFERENCE_TIME buffer_duration, bool auto_convert_pcm, uint32_t* endpoint_buffer_size)"
  },
  {
    "label": "SharedModeInitializeLowLatency()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SharedModeInitializeLowLatency(IAudioClient3* client, const WAVEFORMATEXTENSIBLE* format, HANDLE event_handle, uint32_t period_in_frames, bool auto_convert_pcm, uint32_t* endpoint_buffer_size)"
  },
  {
    "label": "CreateRenderClient()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioRenderClient>)",
    "insertText": "CreateRenderClient(IAudioClient* client)"
  },
  {
    "label": "CreateCaptureClient()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioCaptureClient>)",
    "insertText": "CreateCaptureClient(IAudioClient* client)"
  },
  {
    "label": "CreateAudioClock()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioClock>)",
    "insertText": "CreateAudioClock(IAudioClient* client)"
  },
  {
    "label": "CreateAudioSessionControl()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<IAudioSessionControl>)",
    "insertText": "CreateAudioSessionControl(IAudioClient* client)"
  },
  {
    "label": "CreateSimpleAudioVolume()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<ISimpleAudioVolume>)",
    "insertText": "CreateSimpleAudioVolume(IAudioClient* client)"
  },
  {
    "label": "FillRenderEndpointBufferWithSilence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FillRenderEndpointBufferWithSilence(IAudioClient* client, IAudioRenderClient* render_client)"
  },
  {
    "label": "WaveFormatToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "WaveFormatToString(WaveFormatWrapper format)"
  },
  {
    "label": "ReferenceTimeToTimeDelta()",
    "kind": "Method",
    "detail": "Function (webrtc::TimeDelta)",
    "insertText": "ReferenceTimeToTimeDelta(REFERENCE_TIME time)"
  },
  {
    "label": "ErrorToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ErrorToString(const _com_error& error)"
  }
]