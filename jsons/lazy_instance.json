[
  {
    "label": "LazyInstanceTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LazyInstanceTraitsBase"
  },
  {
    "label": "DestructorAtExitLazyInstanceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DestructorAtExitLazyInstanceTraits"
  },
  {
    "label": "LeakyLazyInstanceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LeakyLazyInstanceTraits"
  },
  {
    "label": "ErrorMustSelectLazyOrDestructorAtExitForLazyInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ErrorMustSelectLazyOrDestructorAtExitForLazyInstance"
  },
  {
    "label": "LazyInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LazyInstance"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_LAZY_INSTANCE_H_ # define BASE_LAZY_INSTANCE_H_ # include<atomic> # include<new> # include \" base / check_op . h \" # include \" base / dcheck_is_on . h \" # include \" base / debug / leak_annotations . h \" # include \" base / lazy_instance_helpers . h \" # include \" base / threading / thread_restrictions . h \" # include \" build / build_config . h \" # define LAZY_INSTANCE_INITIALIZER { } namespace base { template<Type> struct LazyInstanceTraitsBase { Type*)",
    "insertText": "New(void* instance)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(reinterpret_cast<uintptr_t>(instance) & (alignof(Type) - 1), 0u)"
  },
  {
    "label": "CallDestructor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CallDestructor(Type* instance)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (instance -> ~)",
    "insertText": "Type()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<Type> struct DestructorAtExitLazyInstanceTraits { const bool kRegisterOnExit = true ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Delete(Type* instance)"
  },
  {
    "label": "CallDestructor()",
    "kind": "Method",
    "detail": "Function (LazyInstanceTraitsBase<Type)",
    "insertText": "CallDestructor(instance)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (ANNOTATE_SCOPED_MEMORY_LEAK ; return LazyInstanceTraitsBase<Type)",
    "insertText": "New(instance)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ; template<Type> struct ErrorMustSelectLazyOrDestructorAtExitForLazyInstance { } ; } template<Type,Traits = internal::ErrorMustSelectLazyOrDestructorAtExitForLazyInstance<Type>> class LazyInstance { public : typedef LazyInstance<Type,internal::LeakyLazyInstanceTraits<Type>> Leaky ; typedef LazyInstance<Type,internal::DestructorAtExitLazyInstanceTraits<Type>> DestructorAtExit ; Type&)",
    "insertText": "Get()"
  },
  {
    "label": "Pointer()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "Pointer()"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON() if (!Traits::kAllowedToAccessOnNonjoinableThread) internal::AssertSingletonAllowed()"
  },
  {
    "label": "GetOrCreateLazyPointer()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "GetOrCreateLazyPointer(private_instance_, &Traits::New, private_buf_, Traits::kRegisterOnExit ? OnExit : nullptr, this)"
  },
  {
    "label": "IsCreated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCreated()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(IS_WIN) #pragma warning(push) #pragma warning(disable : 4324)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(Type) char private_buf_[sizeof(Type)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) #pragma warning(pop) #endif private: Type* instance()"
  },
  {
    "label": "OnExit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnExit(void* lazy_instance)"
  },
  {
    "label": "Traits()",
    "kind": "Method",
    "detail": "Function (LazyInstance<Type,Traits>* me = reinterpret_cast<LazyInstance<Type,)",
    "insertText": "Traits(lazy_instance)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(me->instance())"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (me -> private_instance_ .)",
    "insertText": "store(0, std::memory_order_relaxed)"
  }
]