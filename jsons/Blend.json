[
  {
    "label": "TImplicitBlend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImplicitBlend"
  },
  {
    "label": "TImplicitBlend()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Implicit / CachingMeshSDF . h \" # include \" Implicit / GridInterpolant . h \" # include \" Implicit / ImplicitFunctions . h \" # include \" Generators / MarchingCubes . h \" # include \" Async / ParallelFor . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<TriangleMeshType> class TImplicitBlend { public : ~)",
    "insertText": "TImplicitBlend()"
  },
  {
    "label": "SetCellSizesAndFalloff()",
    "kind": "Method",
    "detail": "Function (} TArray<const TriangleMeshType*> Sources ; TArray<FAxisAlignedBox3d> SourceBounds ; double BlendPower = 2 . 0 ; double BlendFalloff = 5 . 0 ; double GridCellSize = 1 . 0 ; double MeshCellSize = 1 . 0 ; bool bSubtract = false ; void)",
    "insertText": "SetCellSizesAndFalloff(FAxisAlignedBox3d Bounds, double BlendFalloffIn, int TargetInputVoxelCount, int TargetOutputVoxelCount)"
  },
  {
    "label": "GridCellSize()",
    "kind": "Method",
    "detail": "Function (BlendFalloff = BlendFalloffIn ;)",
    "insertText": "GridCellSize(Bounds.MaxDim() + BlendFalloff * 2.0) / double(TargetInputVoxelCount)"
  },
  {
    "label": "MeshCellSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MeshCellSize(Bounds.MaxDim() + BlendFalloff * 2.0) / double(TargetOutputVoxelCount)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} TFunction<)",
    "insertText": "bool(void)> CancelF = []()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (bool bHasSourcesWithBounds = Sources .)",
    "insertText": "Num() > 0 && Sources.Num() == SourceBounds.Num()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (MarchingCubes .)",
    "insertText": "Reset()"
  },
  {
    "label": "GenerateBlendAnalytic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBlendAnalytic(bReuseComputed)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CombinedBounds =)",
    "insertText": "Empty()"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (CombinedBounds .)",
    "insertText": "Contain(Box)"
  },
  {
    "label": "ComputeSpatials()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ComputeSpatials(bool bReuseComputed)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ComputedSpatials .)",
    "insertText": "SetNum(Sources.Num())"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(Sources.Num(), [this, bReuseComputed](int SourceIdx) { if (!bReuseComputed || ComputedSpatials[SourceIdx].GetMesh() != Sources[SourceIdx] || !ComputedSpatials[SourceIdx].IsValid(false)) { ComputedSpatials[SourceIdx].SetMesh(Sources[SourceIdx], true); } })"
  },
  {
    "label": "ComputeLazySDFs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeLazySDFs(bool bReuseComputed)"
  },
  {
    "label": "ComputeSpatials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSpatials(bReuseComputed)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ComputedSDFs .)",
    "insertText": "Reserve(Sources.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ComputedSDFs .)",
    "insertText": "Emplace(Sources[i], GridCellSize, &ComputedSpatials[i], false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SDFMaxDistances .)",
    "insertText": "Add(0.0)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (} } double NeedDistance = BlendFalloff ;)",
    "insertText": "ParallelFor(Sources.Num(), [this, bReuseComputed, NeedDistance](int SourceIdx) { if (bReuseComputed && NeedDistance <= SDFMaxDistances[SourceIdx]) { return; } float UseMaxOffset = (float)BlendFalloff; ComputedSDFs[SourceIdx].MaxOffsetDistance = UseMaxOffset; ComputedSDFs[SourceIdx].CellSize = GridCellSize; ComputedSDFs[SourceIdx].CancelF = CancelF; ComputedSDFs[SourceIdx].Initialize(); SDFMaxDistances[SourceIdx] = UseMaxOffset; })"
  },
  {
    "label": "GenerateBlendAnalytic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateBlendAnalytic(bool bReuseComputed)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Interpolants .)",
    "insertText": "Add(ComputedSDFs[SourceIdx].MakeInterpolant())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (SkeletalFields .)",
    "insertText": "Emplace(&Interpolants[SourceIdx], BlendFalloff)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Blend . Children .)",
    "insertText": "Add(&SkeletalFields[SourceIdx])"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (} MarchingCubes . CancelF = CancelF ; MarchingCubes . CubeSize = MeshCellSize ; MarchingCubes . IsoValue = TDistanceFieldToSkeletalField<TBoundedImplicitFunction3<double>,double>::ZeroIsocontour ; MarchingCubes . Bounds = CombinedBounds ; MarchingCubes . Bounds .)",
    "insertText": "Expand(BlendFalloff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MarchingCubes . RootMode = ERootfindingModes::LerpSteps ; MarchingCubes . RootModeSteps = 3 ;)",
    "insertText": "if(CancelF())"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (continue ; } FVector3d Seed = Source ->)",
    "insertText": "GetVertex(VID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Seeds .)",
    "insertText": "Add(Seed)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (} } } MarchingCubes . Implicit = [&)",
    "insertText": "Blend(const FVector3d& Pt)"
  },
  {
    "label": "GenerateContinuation()",
    "kind": "Method",
    "detail": "Function (} ; MarchingCubes .)",
    "insertText": "GenerateContinuation(Seeds)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (MarchingCubes .)",
    "insertText": "Generate()"
  }
]