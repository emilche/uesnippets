[
  {
    "label": "Flag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Flag"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FixedCharArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FixedCharArray"
  },
  {
    "label": "FlagHelpArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagHelpArg"
  },
  {
    "label": "FlagDefaultArg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagDefaultArg"
  },
  {
    "label": "EmptyBraces",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EmptyBraces"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FlagOneWordValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagOneWordValue"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FlagValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagValue"
  },
  {
    "label": "FlagCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagCallback"
  },
  {
    "label": "DynValueDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DynValueDeleter"
  },
  {
    "label": "FlagState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlagState"
  },
  {
    "label": "FlagImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlagImpl"
  },
  {
    "label": "FlagRegistrar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlagRegistrar"
  },
  {
    "label": "FlagImplPeer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlagImplPeer"
  },
  {
    "label": "FlagRegistrarEmpty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagRegistrarEmpty"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FLAGS_INTERNAL_FLAG_H_ # define ABSL_FLAGS_INTERNAL_FLAG_H_ # include<stddef . h> # include<stdint . h> # include<atomic> # include<cstring> # include<memory> # include<new> # include<string> # include<type_traits> # include<typeinfo> # include \" absl / base / attributes . h \" # include \" absl / base / call_once . h \" # include \" absl / base / casts . h \" # include \" absl / base / config . h \" # include \" absl / base / optimization . h \" # include \" absl / base / thread_annotations . h \" # include \" absl / flags / commandlineflag . h \" # include \" absl / flags / config . h \" # include \" absl / flags / internal / commandlineflag . h \" # include \" absl / flags / internal / registry . h \" # include \" absl / flags / internal / sequence_lock . h \" # include \" absl / flags / marshalling . h \" # include \" absl / meta / type_traits . h \" # include \" absl / strings / string_view . h \" # include \" absl / synchronization / mutex . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace flags_internal { template<T> class Flag ; } # if)",
    "insertText": "defined(_MSC_VER) && !defined(__clang__)"
  },
  {
    "label": "GetFlag()",
    "kind": "Method",
    "detail": "Function (# else template<T> using Flag = flags_internal::Flag<T> ; # endif template<T> ABSL_MUST_USE_RESULT T)",
    "insertText": "GetFlag(const absl::Flag<T>& flag)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "SetFlag(absl::Flag<T>* flag, const T& v)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (template<T,V> void)",
    "insertText": "SetFlag(absl::Flag<T>* flag, const V& v)"
  },
  {
    "label": "GetFlagReflectionHandle()",
    "kind": "Method",
    "detail": "Function (template<U> const CommandLineFlag&)",
    "insertText": "GetFlagReflectionHandle(const absl::Flag<U>& f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (namespace flags_internal { enum class FlagOp { kAlloc,kDelete,kCopy,kCopyConstruct,kSizeof,kFastTypeId,kRuntimeTypeId,kParse,kUnparse,kValueOffset,} ; using FlagOpFn =)",
    "insertText": "void(*)(FlagOp, const void*, void*, void*)"
  },
  {
    "label": "FlagOps()",
    "kind": "Method",
    "detail": "Function (template<T> void*)",
    "insertText": "FlagOps(FlagOp op, const void* v1, void* v2, void* v3)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc(FlagOpFn op)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Delete(FlagOpFn op, void* obj)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(FlagOp::kDelete, nullptr, obj, nullptr)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Copy(FlagOpFn op, const void* src, void* dst)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(FlagOp::kCopy, src, dst, nullptr)"
  },
  {
    "label": "CopyConstruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyConstruct(FlagOpFn op, const void* src, void* dst)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(FlagOp::kCopyConstruct, src, dst, nullptr)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Clone(FlagOpFn op, const void* obj)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void* res =)",
    "insertText": "Alloc(op)"
  },
  {
    "label": "CopyConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyConstruct(op, obj, res)"
  },
  {
    "label": "Unparse()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "Unparse(FlagOpFn op, const void* val)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (std::string result ;)",
    "insertText": "op(FlagOp::kUnparse, val, &result, nullptr)"
  },
  {
    "label": "FastTypeId()",
    "kind": "Method",
    "detail": "Function (} FlagFastTypeId)",
    "insertText": "FastTypeId(FlagOpFn op)"
  },
  {
    "label": "RuntimeTypeId()",
    "kind": "Method",
    "detail": "Function (} const std::type_info*)",
    "insertText": "RuntimeTypeId(FlagOpFn op)"
  },
  {
    "label": "ValueOffset()",
    "kind": "Method",
    "detail": "Function (} ptrdiff_t)",
    "insertText": "ValueOffset(FlagOpFn op)"
  },
  {
    "label": "GenRuntimeTypeId()",
    "kind": "Method",
    "detail": "Function (} template<T> const std::type_info*)",
    "insertText": "GenRuntimeTypeId()"
  },
  {
    "label": "typeid()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_INTERNAL_HAS_RTTI return&)",
    "insertText": "typeid(T)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (# else return nullptr ; # endif } using HelpGenFunc =)",
    "insertText": "string(*)()"
  },
  {
    "label": "FromLiteralString()",
    "kind": "Method",
    "detail": "Function (template<size_t N> struct FixedCharArray { char value [ N ] ; template<size_t . . . I> FixedCharArray<N>)",
    "insertText": "FromLiteralString(absl::string_view str, absl::index_sequence<I...>)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} } ; template<Gen,size_t N =)",
    "insertText": "Value().size()> constexpr FixedCharArray<N + 1> HelpStringAsArray(int)"
  },
  {
    "label": "HelpStringAsArray()",
    "kind": "Method",
    "detail": "Function (} template<Gen> std::false_type)",
    "insertText": "HelpStringAsArray(char)"
  },
  {
    "label": "FlagHelpMsg()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FlagHelpMsg(HelpGenFunc help_gen) : gen_func(help_gen)"
  },
  {
    "label": "HelpArg()",
    "kind": "Method",
    "detail": "Function (} const char* literal ; HelpGenFunc gen_func ; } ; enum class FlagHelpKind : uint8_t { kLiteral = 0,kGenFunc = 1 } ; struct FlagHelpArg { FlagHelpMsg source ; FlagHelpKind kind ; } ; const char kStrippedFlagHelp [ ] ; template<Gen,size_t N> FlagHelpArg)",
    "insertText": "HelpArg(const FixedCharArray<N>& value)"
  },
  {
    "label": "HelpArg()",
    "kind": "Method",
    "detail": "Function (} template<Gen> FlagHelpArg)",
    "insertText": "HelpArg(std::false_type)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} using FlagDfltGenFunc =)",
    "insertText": "void(*)(void*)"
  },
  {
    "label": "FlagDefaultSrc()",
    "kind": "Method",
    "detail": "Function (union FlagDefaultSrc {)",
    "insertText": "FlagDefaultSrc(FlagDfltGenFunc gen_func_arg) : gen_func(gen_func_arg)"
  },
  {
    "label": "ABSL_FLAGS_INTERNAL_DFLT_FOR_TYPE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ABSL_FLAGS_INTERNAL_DFLT_FOR_TYPE(T, name)"
  },
  {
    "label": "FlagDefaultSrc()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "FlagDefaultSrc(T value) : name##_value(value)"
  },
  {
    "label": "ABSL_FLAGS_INTERNAL_BUILTIN_TYPES()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ABSL_FLAGS_INTERNAL_BUILTIN_TYPES(ABSL_FLAGS_INTERNAL_DFLT_FOR_TYPE)"
  },
  {
    "label": "InitDefaultValue()",
    "kind": "Method",
    "detail": "Function (FlagDfltGenFunc gen_func ; } ; enum class FlagDefaultKind : uint8_t { kDynamicValue = 0,kGenFunc = 1,kOneWord = 2 } ; struct FlagDefaultArg { FlagDefaultSrc source ; FlagDefaultKind kind ; } ; struct EmptyBraces { } ; template<T> T)",
    "insertText": "InitDefaultValue(T t)"
  },
  {
    "label": "DefaultArg()",
    "kind": "Method",
    "detail": "Function (} template<ValueT,GenT> FlagDefaultArg)",
    "insertText": "DefaultArg(char)"
  },
  {
    "label": "UninitializedFlagValue()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "UninitializedFlagValue()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} template<T> using FlagUseValueAndInitBitStorage = std::integral_constant<bool,absl::type_traits_internal::is_trivially_copyable<T>::value&& std::is_default_constructible<T)",
    "insertText": "value(sizeof(T) < 8)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (template<T> using FlagUseOneWordStorage = std::integral_constant<bool,absl::type_traits_internal::is_trivially_copyable<T)",
    "insertText": "value(sizeof(T) <= 8)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (template<class T> using FlagUseSequenceLockStorage = std::integral_constant<bool,absl::type_traits_internal::is_trivially_copyable<T)",
    "insertText": "value(sizeof(T) > 8)"
  },
  {
    "label": "StorageKind()",
    "kind": "Method",
    "detail": "Function (enum class FlagValueStorageKind : uint8_t { kValueAndInitBit = 0,kOneWordAtomic = 1,kSequenceLocked = 2,kAlignedBuffer = 3,} ; template<T> FlagValueStorageKind)",
    "insertText": "StorageKind()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} std::atomic<int64_t> value ; } ; template<T> struct)",
    "insertText": "alignas(8)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T value ; uint8_t init ; } ; template<T,FlagValueStorageKind Kind = flags_internal::StorageKind<)",
    "insertText": "T()"
  },
  {
    "label": "FlagValue()",
    "kind": "Method",
    "detail": "Function (template<T> struct FlagValue<T,FlagValueStorageKind::kValueAndInitBit> : FlagOneWordValue {)",
    "insertText": "FlagValue() : FlagOneWordValue(0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Get(const SequenceLock&, T& dst)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (int64_t storage = value .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "AlignUp()",
    "kind": "Method",
    "detail": "Function (} int kNumWords =)",
    "insertText": "AlignUp(sizeof(T), sizeof(uint64_t)) / sizeof(uint64_t)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(T) alignas( std::atomic<uint64_t>)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct FlagValue<T,FlagValueStorageKind::kAlignedBuffer> { bool)",
    "insertText": "Get(const SequenceLock&, T&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using FlagCallbackFunc =)",
    "insertText": "void(*)()"
  },
  {
    "label": "DynValueDeleter()",
    "kind": "Method",
    "detail": "Function (struct FlagCallback { FlagCallbackFunc func ; absl::Mutex guard ; } ; struct DynValueDeleter {)",
    "insertText": "DynValueDeleter(FlagOpFn op_arg = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(void* ptr)"
  },
  {
    "label": "FlagImpl()",
    "kind": "Method",
    "detail": "Function (FlagOpFn op ; } ; class FlagState ; class FlagImpl final : public CommandLineFlag { public :)",
    "insertText": "FlagImpl(const char* name, const char* filename, FlagOpFn op, FlagHelpArg help, FlagValueStorageKind value_kind, FlagDefaultArg default_arg) : name_(name), filename_(filename), op_(op), help_(help.source), help_source_kind_(static_cast<uint8_t>(help.kind)), value_storage_kind_(static_cast<uint8_t>(value_kind)), def_kind_(static_cast<uint8_t>(default_arg.kind)), modified_(false), on_command_line_(false), callback_(nullptr), default_value_(default_arg.source)"
  },
  {
    "label": "ReadOneWord()",
    "kind": "Method",
    "detail": "Function (} { } int64_t)",
    "insertText": "ReadOneWord() const ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "ReadOneBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadOneBool() const ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Read(void* dst) const override ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Read(bool* value) const ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "ReadOneBool()",
    "kind": "Method",
    "detail": "Function (* value =)",
    "insertText": "ReadOneBool()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} template<T,absl::enable_if_t<flags_internal::StorageKind<)",
    "insertText": "T() == FlagValueStorageKind::kOneWordAtomic, int> = 0> void Read(T* value) const ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "ReadOneWord()",
    "kind": "Method",
    "detail": "Function (int64_t v =)",
    "insertText": "ReadOneWord()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(value, static_cast<const void*>(&v), sizeof(T))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} template<T,std::enable_if<flags_internal::StorageKind<)",
    "insertText": "T() == FlagValueStorageKind::kValueAndInitBit, int>::type = 0> void Read(T* value) const ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* value = absl::bit_cast<FlagValueAndInitBit<)",
    "insertText": "T(ReadOneWord())"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(const void* src) ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "SetCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCallback(const FlagCallbackFunc mutation_callback) ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "InvokeCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeCallback() const ABSL_EXCLUSIVE_LOCKS_REQUIRED(*DataGuard())"
  },
  {
    "label": "AssertValidType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertValidType(FlagFastTypeId type_id, const std::type_info* (*gen_rtti)())"
  },
  {
    "label": "DataGuard()",
    "kind": "Method",
    "detail": "Function (private : template<T> class Flag ; class FlagState ; absl::Mutex*)",
    "insertText": "DataGuard() const ABSL_LOCK_RETURNED(reinterpret_cast<absl::Mutex*>(data_guard_))"
  },
  {
    "label": "MakeInitValue()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<void,DynValueDeleter>)",
    "insertText": "MakeInitValue() const ABSL_EXCLUSIVE_LOCKS_REQUIRED(*DataGuard())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "OffsetValue()",
    "kind": "Method",
    "detail": "Function (template<StorageT> StorageT*)",
    "insertText": "OffsetValue()"
  },
  {
    "label": "AlignedBufferValue()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AlignedBufferValue()"
  },
  {
    "label": "AtomicBufferValue()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint64_t>*)",
    "insertText": "AtomicBufferValue()"
  },
  {
    "label": "OneWordValue()",
    "kind": "Method",
    "detail": "Function (std::atomic<int64_t>&)",
    "insertText": "OneWordValue()"
  },
  {
    "label": "TryParse()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<void,DynValueDeleter>)",
    "insertText": "TryParse(absl::string_view value, std::string& err) const ABSL_EXCLUSIVE_LOCKS_REQUIRED(*DataGuard())"
  },
  {
    "label": "StoreValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreValue(const void* src) ABSL_EXCLUSIVE_LOCKS_REQUIRED(*DataGuard())"
  },
  {
    "label": "ReadSequenceLockedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadSequenceLockedData(void* dst) const ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "HelpSourceKind()",
    "kind": "Method",
    "detail": "Function (FlagHelpKind)",
    "insertText": "HelpSourceKind()"
  },
  {
    "label": "ValueStorageKind()",
    "kind": "Method",
    "detail": "Function (} FlagValueStorageKind)",
    "insertText": "ValueStorageKind()"
  },
  {
    "label": "DefaultKind()",
    "kind": "Method",
    "detail": "Function (} FlagDefaultKind)",
    "insertText": "DefaultKind() const ABSL_EXCLUSIVE_LOCKS_REQUIRED(*DataGuard())"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} absl::string_view)",
    "insertText": "Name()"
  },
  {
    "label": "Filename()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Filename()"
  },
  {
    "label": "Help()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Help()"
  },
  {
    "label": "TypeId()",
    "kind": "Method",
    "detail": "Function (FlagFastTypeId)",
    "insertText": "TypeId()"
  },
  {
    "label": "IsSpecifiedOnCommandLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpecifiedOnCommandLine() const override ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "DefaultValue()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DefaultValue() const override ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "CurrentValue()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "CurrentValue() const override ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "ValidateInputValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateInputValue(absl::string_view value) const override ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "CheckDefaultValueParsingRoundtrip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckDefaultValueParsingRoundtrip() const override ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "ModificationCount()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ModificationCount() const ABSL_EXCLUSIVE_LOCKS_REQUIRED(*DataGuard())"
  },
  {
    "label": "SaveState()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<FlagStateInterface>)",
    "insertText": "SaveState() override ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "RestoreState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RestoreState(const FlagState& flag_state) ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "ParseFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseFrom(absl::string_view value, FlagSettingMode set_mode, ValueSource source, std::string& error) override ABSL_LOCKS_EXCLUDED(*DataGuard())"
  },
  {
    "label": "ABSL_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const char* const name_ ; const char* const filename_ ; const FlagOpFn op_ ; const FlagHelpMsg help_ ; const uint8_t help_source_kind_ : 1 ; const uint8_t value_storage_kind_ : 2 ; uint8_t : 0 ; uint8_t def_kind_ : 2 ; bool modified_ : 1)",
    "insertText": "ABSL_GUARDED_BY(*DataGuard())"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (FlagDefaultSrc default_value_ ;)",
    "insertText": "alignas(absl::Mutex) mutable char data_guard_[sizeof(absl::Mutex)"
  },
  {
    "label": "Flag()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class Flag { public :)",
    "insertText": "Flag(const char* name, const char* filename, FlagHelpArg help, const FlagDefaultArg default_arg) : impl_(name, filename, &FlagOps<T>, help, flags_internal::StorageKind<T>(), default_arg), value_()"
  },
  {
    "label": "IsSpecifiedOnCommandLine()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSpecifiedOnCommandLine()"
  },
  {
    "label": "DefaultValue()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "DefaultValue()"
  },
  {
    "label": "CurrentValue()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "CurrentValue()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} private : template<,bool> class FlagRegistrar ; class FlagImplPeer ; T)",
    "insertText": "Get()"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (union U { T value ;)",
    "insertText": "U()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; U u ; # if !)",
    "insertText": "defined(NDEBUG) impl_.AssertValidType(base_internal::FastTypeId<T>(), &GenRuntimeTypeId<T>)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(ABSL_PREDICT_FALSE(!value_.Get(impl_.seq_lock_, u.value)))"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "Read(&u.value)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "move(u.value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const T& v)"
  },
  {
    "label": "AssertValidType()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "AssertValidType(base_internal::FastTypeId<T>(), &GenRuntimeTypeId<T>)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "Write(&v)"
  },
  {
    "label": "Reflect()",
    "kind": "Method",
    "detail": "Function (} const CommandLineFlag&)",
    "insertText": "Reflect()"
  },
  {
    "label": "InvokeSet()",
    "kind": "Method",
    "detail": "Function (} template<FlagType,T> void)",
    "insertText": "InvokeSet(FlagType& flag, const T& v)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (flag .)",
    "insertText": "Set(v)"
  },
  {
    "label": "InvokeReflect()",
    "kind": "Method",
    "detail": "Function (} template<FlagType> const CommandLineFlag&)",
    "insertText": "InvokeReflect(const FlagType& f)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} case FlagOp::kDelete : { T* p = static_cast<)",
    "insertText": "T(v2)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (std::allocator<T> alloc ; std::allocator_traits<std::allocator<T>)",
    "insertText": "deallocate(alloc, p, 1)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "offset(sizeof(FlagImpl) + round_to - 1)"
  },
  {
    "label": "FlagRegistrar()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } struct FlagRegistrarEmpty { } ; template<T,bool do_register> class FlagRegistrar { public :)",
    "insertText": "FlagRegistrar(Flag<T>& flag, const char* filename) : flag_(flag)"
  },
  {
    "label": "OnUpdate()",
    "kind": "Method",
    "detail": "Function (} FlagRegistrar)",
    "insertText": "OnUpdate(FlagCallbackFunc cb)"
  },
  {
    "label": "SetCallback()",
    "kind": "Method",
    "detail": "Function (flag_ . impl_ .)",
    "insertText": "SetCallback(cb)"
  }
]