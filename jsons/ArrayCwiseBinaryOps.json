[
  {
    "label": "EIGEN_CWISE_BINARY_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const)",
    "insertText": "EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product) operator*(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_quotient_op<Scalar,OtherDerived::Scalar>,const Derived,const OtherDerived>)",
    "insertText": "operator(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other)"
  },
  {
    "label": "EIGEN_MAKE_CWISE_BINARY_OP()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_MAKE_CWISE_BINARY_OP(min,min) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_min_op<Scalar,Scalar>, const Derived, const CwiseNullaryOp<internal::scalar_constant_op<Scalar>, PlainObject> > #ifdef EIGEN_PARSED_BY_DOXYGEN min #else (min) #endif (const Scalar &other)"
  },
  {
    "label": "EIGEN_MAKE_CWISE_BINARY_OP()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_MAKE_CWISE_BINARY_OP(max,max) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_max_op<Scalar,Scalar>, const Derived, const CwiseNullaryOp<internal::scalar_constant_op<Scalar>, PlainObject> > #ifdef EIGEN_PARSED_BY_DOXYGEN max #else (max) #endif (const Scalar &other)"
  },
  {
    "label": "EIGEN_MAKE_CWISE_BINARY_OP()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_MAKE_CWISE_BINARY_OP(absolute_difference,absolute_difference) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_absolute_difference_op<Scalar,Scalar>, const Derived, const CwiseNullaryOp<internal::scalar_constant_op<Scalar>, PlainObject> > #ifdef EIGEN_PARSED_BY_DOXYGEN absolute_difference #else (absolute_difference) #endif (const Scalar &other)"
  },
  {
    "label": "EIGEN_MAKE_CWISE_BINARY_OP()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_MAKE_CWISE_BINARY_OP(pow,pow) #ifndef EIGEN_PARSED_BY_DOXYGEN EIGEN_MAKE_SCALAR_BINARY_OP_ONTHERIGHT(pow,pow) #else template<typename T> const CwiseBinaryOp<internal::scalar_pow_op<Scalar,T>,Derived,Constant<T> > pow(const T& exponent)"
  },
  {
    "label": "EIGEN_MAKE_CWISE_COMP_OP()",
    "kind": "Method",
    "detail": "Function (# endif # define)",
    "insertText": "EIGEN_MAKE_CWISE_COMP_OP(OP, COMPARATOR) \\ template<typename OtherDerived> \\ EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_cmp_op<Scalar, typename OtherDerived::Scalar, internal::cmp_ ## COMPARATOR>, const Derived, const OtherDerived> \\ OP(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other)"
  },
  {
    "label": "OtherDerived()",
    "kind": "Method",
    "detail": "Function (\\ return CwiseBinaryOp<internal::scalar_cmp_op<Scalar,OtherDerived::Scalar,internal::cmp_ # # COMPARATOR>,const Derived,const)",
    "insertText": "OtherDerived(derived(), other.derived())"
  },
  {
    "label": "OP()",
    "kind": "Method",
    "detail": "Function (\\ } \\ typedef CwiseBinaryOp<internal::scalar_cmp_op<Scalar,Scalar,internal::cmp_ # # COMPARATOR>,const Derived,const CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject>> Cmp # # COMPARATOR # # ReturnType ; \\ typedef CwiseBinaryOp<internal::scalar_cmp_op<Scalar,Scalar,internal::cmp_ # # COMPARATOR>,const CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject>,const Derived> RCmp # # COMPARATOR # # ReturnType ; \\ EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Cmp # # COMPARATOR # # ReturnType \\)",
    "insertText": "OP(const Scalar& s)"
  },
  {
    "label": "OP()",
    "kind": "Method",
    "detail": "Function (\\ return this ->)",
    "insertText": "OP(Derived::PlainObject::Constant(rows(), cols(), s))"
  },
  {
    "label": "OP()",
    "kind": "Method",
    "detail": "Function (\\ } \\ EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const RCmp # # COMPARATOR # # ReturnType \\)",
    "insertText": "OP(const Scalar& s, const EIGEN_CURRENT_STORAGE_BASE_CLASS<Derived>& d)"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (\\ return Derived::)",
    "insertText": "Constant(d.rows(), d.cols(), s).OP(d)"
  },
  {
    "label": "EIGEN_MAKE_CWISE_COMP_R_OP()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "EIGEN_MAKE_CWISE_COMP_R_OP(OP, R_OP, RCOMPARATOR) \\ template<typename OtherDerived> \\ EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CwiseBinaryOp<internal::scalar_cmp_op<typename OtherDerived::Scalar, Scalar, internal::cmp_##RCOMPARATOR>, const OtherDerived, const Derived> \\ OP(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other)"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (\\ return CwiseBinaryOp<internal::scalar_cmp_op<OtherDerived::Scalar,Scalar,internal::cmp_ # # RCOMPARATOR>,const OtherDerived,const)",
    "insertText": "Derived(other.derived(), derived())"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (\\ return Derived::)",
    "insertText": "Constant(rows(), cols(), s).R_OP(*this)"
  },
  {
    "label": "OP()",
    "kind": "Method",
    "detail": "Function (\\ } \\ const Cmp # # RCOMPARATOR # # ReturnType \\)",
    "insertText": "OP(const Scalar& s, const Derived& d)"
  },
  {
    "label": "R_OP()",
    "kind": "Method",
    "detail": "Function (\\ return d .)",
    "insertText": "R_OP(Derived::PlainObject::Constant(d.rows(), d.cols(), s))"
  },
  {
    "label": "EIGEN_MAKE_CWISE_COMP_OP()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "EIGEN_MAKE_CWISE_COMP_OP(operator<, LT) EIGEN_MAKE_CWISE_COMP_OP(operator<=, LE) EIGEN_MAKE_CWISE_COMP_R_OP(operator>, operator<, LT) EIGEN_MAKE_CWISE_COMP_R_OP(operator>=, operator<=, LE) EIGEN_MAKE_CWISE_COMP_OP(operator==, EQ) EIGEN_MAKE_CWISE_COMP_OP(operator!=, NEQ) #undef EIGEN_MAKE_CWISE_COMP_OP #undef EIGEN_MAKE_CWISE_COMP_R_OP #ifndef EIGEN_PARSED_BY_DOXYGEN EIGEN_MAKE_SCALAR_BINARY_OP(operator+,sum) #else template<typename T> const CwiseBinaryOp<internal::scalar_sum_op<Scalar,T>,Derived,Constant<T> > operator+(const T& scalar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> const CwiseBinaryOp<internal::scalar_sum_op<T,Scalar>,Constant<T>,Derived>)",
    "insertText": "operator(const T& scalar, const StorageBaseType& expr)"
  },
  {
    "label": "EIGEN_MAKE_SCALAR_BINARY_OP()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EIGEN_PARSED_BY_DOXYGEN)",
    "insertText": "EIGEN_MAKE_SCALAR_BINARY_OP(operator-,difference) #else template<typename T> const CwiseBinaryOp<internal::scalar_difference_op<Scalar,T>,Derived,Constant<T> > operator-(const T& scalar)"
  },
  {
    "label": "EIGEN_MAKE_SCALAR_BINARY_OP_ONTHELEFT()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef EIGEN_PARSED_BY_DOXYGEN)",
    "insertText": "EIGEN_MAKE_SCALAR_BINARY_OP_ONTHELEFT(operator/,quotient) #else template<typename T> friend inline const CwiseBinaryOp<internal::scalar_quotient_op<T,Scalar>,Constant<T>,Derived> operator/(const T& s,const StorageBaseType& a)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<bool,Scalar>::value && internal::is_same<bool,typename OtherDerived::Scalar>::value), THIS_METHOD_IS_ONLY_FOR_EXPRESSIONS_OF_BOOL)"
  },
  {
    "label": "polygamma()",
    "kind": "Method",
    "detail": "Function (} # if 0 template<DerivedN> const CwiseBinaryOp<internal::scalar_polygamma_op<Scalar>,const DerivedN,const Derived>)",
    "insertText": "polygamma(const EIGEN_CURRENT_STORAGE_BASE_CLASS<DerivedN> &n)"
  },
  {
    "label": "zeta()",
    "kind": "Method",
    "detail": "Function (} # endif template<DerivedQ> const CwiseBinaryOp<internal::scalar_zeta_op<Scalar>,const Derived,const DerivedQ>)",
    "insertText": "zeta(const EIGEN_CURRENT_STORAGE_BASE_CLASS<DerivedQ> &q)"
  }
]