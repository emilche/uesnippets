[
  {
    "label": "RTPStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPStream"
  },
  {
    "label": "RTPPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPPacket"
  },
  {
    "label": "RTPBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPBuffer"
  },
  {
    "label": "RTPFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPFile"
  },
  {
    "label": "RTPStream()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_TEST_RTPFILE_H_ # define MODULES_AUDIO_CODING_TEST_RTPFILE_H_ # include<stdio . h> # include<queue> # include \" absl / strings / string_view . h \" # include \" api / rtp_headers . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RTPStream { public : ~)",
    "insertText": "RTPStream()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(uint8_t payloadType, uint32_t timeStamp, int16_t seqNo, const uint8_t* payloadData, size_t payloadSize, uint32_t frequency)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Read(RTPHeader* rtp_Header, uint8_t* payloadData, size_t payloadSize, uint32_t* offset)"
  },
  {
    "label": "EndOfFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndOfFile()"
  },
  {
    "label": "MakeRTPheader()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "MakeRTPheader(uint8_t* rtpHeader, uint8_t payloadType, int16_t seqNo, uint32_t timeStamp, uint32_t ssrc)"
  },
  {
    "label": "ParseRTPHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseRTPHeader(RTPHeader* rtp_header, const uint8_t* rtpHeader)"
  },
  {
    "label": "RTPPacket()",
    "kind": "Method",
    "detail": "Function (} ; class RTPPacket { public :)",
    "insertText": "RTPPacket(uint8_t payloadType, uint32_t timeStamp, int16_t seqNo, const uint8_t* payloadData, size_t payloadSize, uint32_t frequency)"
  },
  {
    "label": "RTPPacket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RTPPacket()"
  },
  {
    "label": "RTPBuffer()",
    "kind": "Method",
    "detail": "Function (uint8_t payloadType ; uint32_t timeStamp ; int16_t seqNo ; uint8_t* payloadData ; size_t payloadSize ; uint32_t frequency ; } ; class RTPBuffer : public RTPStream { public :)",
    "insertText": "RTPBuffer()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Read(RTPHeader* rtp_header, uint8_t* payloadData, size_t payloadSize, uint32_t* offset)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex mutex_ ; std::queue<RTPPacket*> _rtpQueue)",
    "insertText": "RTC_GUARDED_BY(&mutex_)"
  },
  {
    "label": "RTPFile()",
    "kind": "Method",
    "detail": "Function (} ; class RTPFile : public RTPStream { public : ~)",
    "insertText": "RTPFile()"
  },
  {
    "label": "RTPFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RTPFile() : _rtpFile(NULL), _rtpEOF(false)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Open(absl::string_view outFilename, absl::string_view mode)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "WriteHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteHeader()"
  },
  {
    "label": "ReadHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadHeader()"
  }
]