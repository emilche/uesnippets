[
  {
    "label": "BandMatrixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BandMatrixBase"
  },
  {
    "label": "DiagonalIntReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DiagonalIntReturnType"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "BandMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BandMatrix"
  },
  {
    "label": "BandMatrixWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BandMatrixWrapper"
  },
  {
    "label": "TridiagonalMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TridiagonalMatrix"
  },
  {
    "label": "BandShape",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BandShape"
  },
  {
    "label": "evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator_traits"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "DataRowsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BANDMATRIX_H # define EIGEN_BANDMATRIX_H namespace Eigen { namespace internal { template<Derived> class BandMatrixBase : public EigenBase<Derived> { public : enum { Flags = internal::traits<Derived>::Flags,CoeffReadCost = internal::traits<Derived>::CoeffReadCost,RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime,Supers = internal::traits<Derived>::Supers,Subs = internal::traits<Derived>::Subs,Options = internal::traits<Derived>::Options } ; typedef internal::traits<Derived>::Scalar Scalar ; typedef Matrix<Scalar,RowsAtCompileTime,ColsAtCompileTime> DenseMatrixType ; typedef DenseMatrixType::StorageIndex StorageIndex ; typedef internal::traits<Derived>::CoefficientsType CoefficientsType ; typedef EigenBase<Derived> Base ; protected : enum {)",
    "insertText": "DataRowsAtCompileTime((Supers!=Dynamic) && (Subs!=Dynamic)) ? 1 + Supers + Subs : Dynamic, SizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_DYNAMIC(RowsAtCompileTime,ColsAtCompileTime)"
  },
  {
    "label": "supers()",
    "kind": "Method",
    "detail": "Function (public : using Base::derived ; using Base::rows ; using Base::cols ; Index)",
    "insertText": "supers()"
  },
  {
    "label": "subs()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "subs()"
  },
  {
    "label": "coeffs()",
    "kind": "Method",
    "detail": "Function (} const CoefficientsType&)",
    "insertText": "coeffs()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Block<CoefficientsType,Dynamic,1>)",
    "insertText": "col(Index i)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((int(Options) & int(RowMajor)) == 0, THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES)"
  },
  {
    "label": "coeffs()",
    "kind": "Method",
    "detail": "Function (Index start = 0 ; Index len =)",
    "insertText": "coeffs().rows()"
  },
  {
    "label": "len()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "len(std::min)(rows(),std::max<Index>(0,coeffs().rows() - (supers()-i)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(i>=rows()-subs()) len = std::max<Index>(0,coeffs().rows() - (i + 1 - rows() + subs()))"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} Block<CoefficientsType,1,SizeAtCompileTime>)",
    "insertText": "diagonal()"
  },
  {
    "label": "ReturnOpposite()",
    "kind": "Method",
    "detail": "Function (} template<int Index> struct DiagonalIntReturnType { enum {)",
    "insertText": "ReturnOpposite(int(Options) & int(SelfAdjoint)) && (((Index) > 0 && Supers == 0) || ((Index) < 0 && Subs == 0)), Conjugate = ReturnOpposite && NumTraits<Scalar>::IsComplex, ActualIndex = ReturnOpposite ? -Index : Index, DiagonalSize = (RowsAtCompileTime==Dynamic || ColsAtCompileTime==Dynamic) ? Dynamic : (ActualIndex<0 ? EIGEN_SIZE_MIN_PREFER_DYNAMIC(ColsAtCompileTime, RowsAtCompileTime + ActualIndex) : EIGEN_SIZE_MIN_PREFER_DYNAMIC(RowsAtCompileTime, ColsAtCompileTime - ActualIndex))"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} Block<CoefficientsType,1,Dynamic>)",
    "insertText": "diagonal(Index i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((i<0 && -i<=subs()) || (i>=0 && i<=supers()))"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> void)",
    "insertText": "evalTo(Dest& dst)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "resize(rows(),cols())"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "setZero()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "diagonal() = diagonal()"
  },
  {
    "label": "toDenseMatrix()",
    "kind": "Method",
    "detail": "Function (} DenseMatrixType)",
    "insertText": "toDenseMatrix()"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (DenseMatrixType)",
    "insertText": "res(rows(),cols())"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(res)"
  },
  {
    "label": "DataRowsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (} } ; template<_Scalar,int _Rows,int _Cols,int _Supers,int _Subs,int _Options> struct traits<BandMatrix<_Scalar,_Rows,_Cols,_Supers,_Subs,_Options>> { typedef _Scalar Scalar ; typedef Dense StorageKind ; typedef Eigen::Index StorageIndex ; enum { CoeffReadCost = NumTraits<Scalar>::ReadCost,RowsAtCompileTime = _Rows,ColsAtCompileTime = _Cols,MaxRowsAtCompileTime = _Rows,MaxColsAtCompileTime = _Cols,Flags = LvalueBit,Supers = _Supers,Subs = _Subs,Options = _Options,)",
    "insertText": "DataRowsAtCompileTime((Supers!=Dynamic) && (Subs!=Dynamic))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<Scalar,DataRowsAtCompileTime,ColsAtCompileTime,)",
    "insertText": "int(Options) & int(RowMajor)"
  },
  {
    "label": "BandMatrix()",
    "kind": "Method",
    "detail": "Function (} ; template<_Scalar,int Rows,int Cols,int Supers,int Subs,int Options> class BandMatrix : public BandMatrixBase<BandMatrix<_Scalar,Rows,Cols,Supers,Subs,Options>> { public : typedef internal::traits<BandMatrix>::Scalar Scalar ; typedef internal::traits<BandMatrix>::StorageIndex StorageIndex ; typedef internal::traits<BandMatrix>::CoefficientsType CoefficientsType ;)",
    "insertText": "BandMatrix(Index rows=Rows, Index cols=Cols, Index supers=Supers, Index subs=Subs) : m_coeffs(1+supers+subs,cols), m_rows(rows), m_supers(supers), m_subs(subs)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "BandMatrixWrapper()",
    "kind": "Method",
    "detail": "Function (typedef _CoefficientsType CoefficientsType ; } ; template<_CoefficientsType,int _Rows,int _Cols,int _Supers,int _Subs,int _Options> class BandMatrixWrapper : public BandMatrixBase<BandMatrixWrapper<_CoefficientsType,_Rows,_Cols,_Supers,_Subs,_Options>> { public : typedef internal::traits<BandMatrixWrapper>::Scalar Scalar ; typedef internal::traits<BandMatrixWrapper>::CoefficientsType CoefficientsType ; typedef internal::traits<BandMatrixWrapper>::StorageIndex StorageIndex ;)",
    "insertText": "BandMatrixWrapper(const CoefficientsType& coeffs, Index rows=_Rows, Index cols=_Cols, Index supers=_Supers, Index subs=_Subs) : m_coeffs(coeffs), m_rows(rows), m_supers(supers), m_subs(subs)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(cols)"
  },
  {
    "label": "super()",
    "kind": "Method",
    "detail": "Function (} Base::template DiagonalIntReturnType<1>::Type)",
    "insertText": "super()"
  },
  {
    "label": "sub()",
    "kind": "Method",
    "detail": "Function (} Base::template DiagonalIntReturnType<- 1>::Type)",
    "insertText": "sub()"
  }
]