[
  {
    "label": "FBulkDataReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkDataReader"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FBulkDataReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Serialization / BufferReader . h \" # include \" Serialization / BulkData . h \" # include \" Containers / UnrealString . h \" class FBulkDataReader final : public FBufferReaderBase { public :)",
    "insertText": "FBulkDataReader(FByteBulkData& InBulkData, bool bIsPersistent = false ) : FBufferReaderBase( InBulkData.Lock( LOCK_READ_ONLY ), InBulkData.GetBulkDataSize(), false, bIsPersistent ) , BulkData( InBulkData)"
  },
  {
    "label": "FBulkDataReader()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBulkDataReader()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (BulkData .)",
    "insertText": "Unlock()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} using FArchive::operator<<; FArchive&)",
    "insertText": "operator(class FName& Name)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FString StringName ;* this<<StringName ; Name =)",
    "insertText": "FName(*StringName)"
  }
]