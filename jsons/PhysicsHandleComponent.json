[
  {
    "label": "UPhysicsHandleComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsHandleComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Components / ActorComponent . h \" # include \" PhysicsEngine / ConstraintInstance . h \" # include \" PhysicsHandleComponent . generated . h \")",
    "insertText": "UCLASS(collapsecategories, ClassGroup=Physics, hidecategories=Object, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (protected : FTransform PreviousTransform ; bool bPendingConstraint ; FPhysicsUserData PhysicsUserData ; FConstraintInstance ConstraintInstance ; FPhysicsActorHandle GrabbedHandle ; FPhysicsActorHandle KinematicHandle ; FPhysicsConstraintHandle ConstraintHandle ; FVector ConstraintLocalPosition ; FRotator ConstraintLocalRotation ; void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "UpdateHandleTransform()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateHandleTransform(const FTransform& NewTransform)"
  },
  {
    "label": "UpdateDriveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDriveSettings()"
  },
  {
    "label": "GrabComponentImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GrabComponentImp(class UPrimitiveComponent* Component, FName InBoneName, const FVector& Location, const FRotator& Rotation, bool bRotationConstrained)"
  }
]