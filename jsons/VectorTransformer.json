[
  {
    "label": "HomogeneousMatMul",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HomogeneousMatMul"
  },
  {
    "label": "MatMul",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MatMul"
  },
  {
    "label": "MatMulNormalize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MatMulNormalize"
  },
  {
    "label": "transformVectors()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_VECTORTRANSFORMER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_VECTORTRANSFORMER_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / math / Mat4 . h> # include<openvdb / math / Vec3 . h> # include \" ValueTransformer . h \" # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridType> void)",
    "insertText": "transformVectors(GridType&, const Mat4d&)"
  },
  {
    "label": "HomogeneousMatMul()",
    "kind": "Method",
    "detail": "Function (struct HomogeneousMatMul { const Mat4d mat ;)",
    "insertText": "HomogeneousMatMul(const Mat4d& _mat): mat(_mat)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TreeIterT> void)",
    "insertText": "operator()(const TreeIterT& it)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (Vec3d)",
    "insertText": "v(*it)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (it .)",
    "insertText": "setValue(mat.transformH(v))"
  },
  {
    "label": "MatMul()",
    "kind": "Method",
    "detail": "Function (} } ; struct MatMul { const Mat4d mat ;)",
    "insertText": "MatMul(const Mat4d& _mat): mat(_mat)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (it .)",
    "insertText": "setValue(mat.transform3x3(v))"
  },
  {
    "label": "MatMulNormalize()",
    "kind": "Method",
    "detail": "Function (} } ; struct MatMulNormalize { const Mat4d mat ;)",
    "insertText": "MatMulNormalize(const Mat4d& _mat): mat(_mat)"
  },
  {
    "label": "transform3x3()",
    "kind": "Method",
    "detail": "Function (v = mat .)",
    "insertText": "transform3x3(v)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "normalize()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (it .)",
    "insertText": "setValue(v)"
  },
  {
    "label": "doTransformVectors()",
    "kind": "Method",
    "detail": "Function (} } ; template<GridType> std::enable_if<! VecTraits<GridType::ValueType>::IsVec,void>::type)",
    "insertText": "doTransformVectors(GridType&, const Mat4d&)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(TypeError, \"tools::transformVectors() requires a vector-valued grid\")"
  },
  {
    "label": "doTransformVectors()",
    "kind": "Method",
    "detail": "Function (} template<GridType> std::enable_if<VecTraits<GridType::ValueType>::IsVec,void>::type)",
    "insertText": "doTransformVectors(GridType& grid, const Mat4d& mat)"
  },
  {
    "label": "getVectorType()",
    "kind": "Method",
    "detail": "Function (const VecType vecType = grid .)",
    "insertText": "getVectorType()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (invmat = invmat .)",
    "insertText": "transpose()"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "foreach(grid.beginValueAll(), MatMul(invmat))"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} break ; } case VEC_CONTRAVARIANT_RELATIVE :)",
    "insertText": "foreach(grid.beginValueAll(), MatMul(mat))"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (break ; case VEC_CONTRAVARIANT_ABSOLUTE :)",
    "insertText": "foreach(grid.beginValueAll(), HomogeneousMatMul(mat))"
  },
  {
    "label": "transformVectors()",
    "kind": "Method",
    "detail": "Function (break ; case VEC_INVARIANT : break ; } } template<GridType> void)",
    "insertText": "transformVectors(GridType& grid, const Mat4d& mat)"
  }
]