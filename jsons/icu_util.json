[
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_I18N_ICU_UTIL_H_ # define BASE_I18N_ICU_UTIL_H_ # include<stdint . h> # include \" base / files / memory_mapped_file . h \" # include \" base / i18n / base_i18n_export . h \" # include \" build / build_config . h \" # include \" build / chromeos_buildflags . h \" # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS_LACROS)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_NACL) BASE_I18N_EXPORT bool InitializeICU()"
  },
  {
    "label": "GetIcuDataFileHandle()",
    "kind": "Method",
    "detail": "Function (# else using IcuDataFile = MemoryMappedFile ; # endif BASE_I18N_EXPORT PlatformFile)",
    "insertText": "GetIcuDataFileHandle(MemoryMappedFile::Region* out_region)"
  },
  {
    "label": "InitializeICUWithFileDescriptor()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT bool)",
    "insertText": "InitializeICUWithFileDescriptor(PlatformFile data_fd, const MemoryMappedFile::Region& data_region)"
  },
  {
    "label": "ResetGlobalsForTesting()",
    "kind": "Method",
    "detail": "Function (BASE_I18N_EXPORT void)",
    "insertText": "ResetGlobalsForTesting()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_FUCHSIA) BASE_I18N_EXPORT void SetIcuTimeZoneDataDirForTesting(const char* dir)"
  },
  {
    "label": "AllowMultipleInitializeCallsForTesting()",
    "kind": "Method",
    "detail": "Function (# endif # endif BASE_I18N_EXPORT void)",
    "insertText": "AllowMultipleInitializeCallsForTesting()"
  }
]