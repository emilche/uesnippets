[
  {
    "label": "FRigidBodyIndexPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRigidBodyIndexPair"
  },
  {
    "label": "FRigidBodyIndexPair()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FRigidBodyIndexPair { int32 Indices [ 2 ] ;)",
    "insertText": "FRigidBodyIndexPair()"
  },
  {
    "label": "FRigidBodyIndexPair()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRigidBodyIndexPair(int32 Index1, int32 Index2)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (Indices [ 0 ] =)",
    "insertText": "Min(Index1, Index2)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Indices [ 1 ] =)",
    "insertText": "Max(Index1, Index2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRigidBodyIndexPair &Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive &Ar, FRigidBodyIndexPair &Pair)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<Pair . Indices [ 0 ]<<Pair . Indices [ 1 ] ; return Ar ; } } ; uint32)",
    "insertText": "GetTypeHash(const FRigidBodyIndexPair Pair)"
  }
]