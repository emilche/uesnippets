[
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FVirtualShadowMapArrayCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArrayCacheManager"
  },
  {
    "label": "FVirtualShadowMapPerLightCacheEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapPerLightCacheEntry"
  },
  {
    "label": "FLightTileIntersectionParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightTileIntersectionParameters"
  },
  {
    "label": "FDistanceFieldCulledObjectBufferParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldCulledObjectBufferParameters"
  },
  {
    "label": "FShadowDepthBasePS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowDepthBasePS"
  },
  {
    "label": "EShadowDepthRenderMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShadowDepthRenderMode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShadowDepthPassMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowDepthPassMeshProcessor"
  },
  {
    "label": "EShadowDepthCacheMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShadowDepthCacheMode"
  },
  {
    "label": "FTiledShadowRendering",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTiledShadowRendering"
  },
  {
    "label": "FShadowMapRenderTargets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapRenderTargets"
  },
  {
    "label": "FAddSubjectPrimitiveStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddSubjectPrimitiveStats"
  },
  {
    "label": "FAddSubjectPrimitiveOverflowedIndices",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddSubjectPrimitiveOverflowedIndices"
  },
  {
    "label": "FAddSubjectPrimitiveOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddSubjectPrimitiveOp"
  },
  {
    "label": "FFinalizeAddSubjectPrimitiveContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFinalizeAddSubjectPrimitiveContext"
  },
  {
    "label": "FVisibleLightInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibleLightInfo"
  },
  {
    "label": "DistanceFieldShadowViewGPUData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DistanceFieldShadowViewGPUData"
  },
  {
    "label": "FVirtualShadowMapArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArray"
  },
  {
    "label": "FAddSubjectPrimitiveResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddSubjectPrimitiveResult"
  },
  {
    "label": "FShadowDepthVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowDepthVS"
  },
  {
    "label": "FShadowVolumeBoundProjectionVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowVolumeBoundProjectionVS"
  },
  {
    "label": "FShadowProjectionPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowProjectionPS"
  },
  {
    "label": "FShadowProjectionNoTransformVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowProjectionNoTransformVS"
  },
  {
    "label": "FShadowProjectionPixelShaderInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowProjectionPixelShaderInterface"
  },
  {
    "label": "FShadowProjectionShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowProjectionShaderParameters"
  },
  {
    "label": "TShadowProjectionPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShadowProjectionPS"
  },
  {
    "label": "TModulatedShadowProjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TModulatedShadowProjection"
  },
  {
    "label": "FEmptyTranslucentSelfShadowUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmptyTranslucentSelfShadowUniformBuffer"
  },
  {
    "label": "TShadowProjectionFromTranslucencyPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShadowProjectionFromTranslucencyPS"
  },
  {
    "label": "FOnePassPointShadowProjectionShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnePassPointShadowProjectionShaderParameters"
  },
  {
    "label": "TOnePassPointShadowProjectionPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOnePassPointShadowProjectionPS"
  },
  {
    "label": "FShadowProjectionMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadowProjectionMatrix"
  },
  {
    "label": "TDirectionalPercentageCloserShadowProjectionPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDirectionalPercentageCloserShadowProjectionPS"
  },
  {
    "label": "TSpotPercentageCloserShadowProjectionPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSpotPercentageCloserShadowProjectionPS"
  },
  {
    "label": "FCompareFProjectedShadowInfoByResolution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareFProjectedShadowInfoByResolution"
  },
  {
    "label": "FCompareFProjectedShadowInfoBySplitIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareFProjectedShadowInfoBySplitIndex"
  },
  {
    "label": "DECLARE_GPU_STAT_NAMED_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / IConsoleManager . h \" # include \" Templates / RefCounting . h \" # include \" RHI . h \" # include \" DataDrivenShaderPlatformInfo . h \" # include \" LightSceneProxy . h \" # include \" RenderResource . h \" # include \" UniformBuffer . h \" # include \" SceneInterface . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" HitProxies . h \" # include \" ConvexVolume . h \" # include \" RHIStaticStates . h \" # include \" RendererInterface . h \" # include \" SceneManagement . h \" # include \" ScenePrivateBase . h \" # include \" SceneCore . h \" # include \" GlobalShader . h \" # include \" SystemTextures . h \" # include \" PostProcess / SceneRenderTargets . h \" # include \" SceneRenderTargetParameters . h \" # include \" ShaderParameterUtils . h \" # include \" LightRendering . h \" # include \" HairStrands / HairStrandsRendering . h \" # include \" Substrate / Substrate . h \" # include \" SimpleMeshDrawCommandPass . h \" # include \" Engine / SubsurfaceProfile . h \" class FPrimitiveSceneInfo ; class FPrimitiveSceneProxy ; class FProjectedShadowInfo ; class FScene ; class FSceneRenderer ; class FViewInfo ; class FVirtualShadowMapArrayCacheManager ; class FVirtualShadowMapPerLightCacheEntry ; class FLightTileIntersectionParameters ; class FDistanceFieldCulledObjectBufferParameters ;)",
    "insertText": "DECLARE_GPU_STAT_NAMED_EXTERN(ShadowDepths, TEXT(\"Shadow Depths\"))"
  },
  {
    "label": "DrawStencilingCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStencilingCone(const FMatrix& ConeToWorld, float ConeAngle, float SphereRadius, const FVector& PreViewTranslation)"
  },
  {
    "label": "OverrideWithDefaultMaterialForShadowDepth()",
    "kind": "Method",
    "detail": "Function (class FShadowDepthBasePS ; void)",
    "insertText": "OverrideWithDefaultMaterialForShadowDepth(const FMaterialRenderProxy*& InOutMaterialRenderProxy, const FMaterial*& InOutMaterialResource, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "InitMobileShadowProjectionOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMobileShadowProjectionOutputs(FRHICommandListImmediate& RHICmdList, const FIntPoint& Extent, const bool bRequireMultiView)"
  },
  {
    "label": "ReleaseMobileShadowProjectionOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMobileShadowProjectionOutputs()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum EShadowDepthRenderMode { ShadowDepthRenderMode_Normal,ShadowDepthRenderMode_EmissiveOnly,ShadowDepthRenderMode_GIBlockingVolumes,} ; enum class EShadowDepthType { None = 0,VSM = 1<<0,Directional = 1<<1,Point = 1<<2,OnePassPoint = 1<<3 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EShadowDepthType)"
  },
  {
    "label": "GetShadowMeshPassType()",
    "kind": "Method",
    "detail": "Function (EMeshPass::Type)",
    "insertText": "GetShadowMeshPassType(EShadowDepthType ShadowDepthType)"
  },
  {
    "label": "UseCachedMeshDrawCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCachedMeshDrawCommands(EShadowDepthType ShadowDepthType)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EShadowMeshSelection : uint8 { SM = 1 U<<0 U,VSM = 1 U<<1 U,All = SM | VSM,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EShadowMeshSelection)"
  },
  {
    "label": "FShadowDepthPassMeshProcessor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShadowDepthPassMeshProcessor(const FScene* Scene, const ERHIFeatureLevel::Type InFeatureLevel, const FSceneView* InViewIfDynamicMeshCommand, EShadowDepthType ShadowDepthType, FMeshPassDrawListContext* InDrawListContext)"
  },
  {
    "label": "AddMeshBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId = -1)"
  },
  {
    "label": "CollectPSOInitializers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOInitializers(const FSceneTexturesConfig& SceneTexturesConfig, const FMaterial& Material, const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FPSOPrecacheParams& PreCacheParams, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "TryAddMeshBatch()",
    "kind": "Method",
    "detail": "Function (FMeshPassProcessorRenderState PassDrawRenderState ; private : bool)",
    "insertText": "TryAddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Process(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, int32 StaticMeshId, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT MaterialResource, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode)"
  },
  {
    "label": "CollectPSOInitializersForEachShadowDepthType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOInitializersForEachShadowDepthType(const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FMaterial& RESTRICT MaterialResource, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode, bool bCastShadowAsTwoSided, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "CollectPSOInitializersForEachStreamSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOInitializersForEachStreamSetup(const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FMaterial& RESTRICT MaterialResource, EShadowDepthType InShadowDepthType, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode, bool bRequired, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "CollectPSOInitializersInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOInitializersInternal(const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FMaterial& RESTRICT MaterialResource, EShadowDepthType InShadowDepthType, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode, bool bSupportsPositionAndNormalOnlyStream, bool bRequired, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "IsShadowCacheModeOcclusionQueryable()",
    "kind": "Method",
    "detail": "Function (EShadowDepthType ShadowDepthType ; EShadowMeshSelection MeshSelectionMask = EShadowMeshSelection::All ; } ; enum EShadowDepthCacheMode { SDCM_MovablePrimitivesOnly,SDCM_StaticPrimitivesOnly,SDCM_CSMScrolling,SDCM_Uncached } ; bool)",
    "insertText": "IsShadowCacheModeOcclusionQueryable(EShadowDepthCacheMode CacheMode)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetSize()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(ColorTargets.Num() > 0)"
  },
  {
    "label": "CopyReferencesFromRenderTargets()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CopyReferencesFromRenderTargets(const FShadowMapRenderTargetsRefCounted& SourceTargets)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 ColorTargetsCount = SourceTargets . ColorTargets .)",
    "insertText": "Num()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ColorTargets .)",
    "insertText": "Empty(ColorTargetsCount)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (ColorTargets .)",
    "insertText": "AddDefaulted(ColorTargetsCount)"
  },
  {
    "label": "GetReference()",
    "kind": "Method",
    "detail": "Function (ColorTargets [ TargetIndex ] = SourceTargets . ColorTargets [ TargetIndex ] .)",
    "insertText": "GetReference()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TFunctionRef<)",
    "insertText": "void(FRHICommandList& RHICmdList, bool bFirst)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (using FPackedNaniteView = Nanite::FPackedView ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FShadowDepthPassUniformParameters,) SHADER_PARAMETER_STRUCT(FSceneTextureUniformParameters, SceneTextures) SHADER_PARAMETER(FMatrix44f, ProjectionMatrix) SHADER_PARAMETER(FMatrix44f, ViewMatrix) SHADER_PARAMETER(FVector4f, ShadowParams) SHADER_PARAMETER(float, bClampToNearPlane) SHADER_PARAMETER_ARRAY(FMatrix44f, ShadowViewProjectionMatrices, [6]) SHADER_PARAMETER_ARRAY(FMatrix44f, ShadowViewMatrices, [6]) SHADER_PARAMETER(int, bRenderToVirtualShadowMap) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer< uint >, VirtualSmPageTable) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer< FPackedNaniteView >, PackedNaniteViews) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer< uint4 >, AllocatedPageRectBounds) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer< uint4 >, UncachedPageRectBounds) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2DArray< uint >, OutDepthBufferArray) END_GLOBAL_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FMobileShadowDepthPassUniformParameters, RENDERER_API) SHADER_PARAMETER_STRUCT(FMobileSceneTextureUniformParameters, SceneTextures) SHADER_PARAMETER(FMatrix44f, ProjectionMatrix) SHADER_PARAMETER(FMatrix44f, ViewMatrix) SHADER_PARAMETER(FVector4f, ShadowParams) SHADER_PARAMETER(float, bClampToNearPlane) SHADER_PARAMETER_ARRAY(FMatrix44f, ShadowViewProjectionMatrices, [6]) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "ComputeScissorRectOptim()",
    "kind": "Method",
    "detail": "Function (public : typedef TArray<const FPrimitiveSceneInfo*,SceneRenderingAllocator> PrimitiveArrayType ; FViewInfo* ShadowDepthView ; FShadowMapRenderTargets RenderTargets ; EShadowDepthCacheMode CacheMode ; FViewInfo* DependentView ; int32 ShadowId ; FVector PreShadowTranslation ; FMatrix TranslatedWorldToView ; FMatrix ViewToClipInner ; FMatrix ViewToClipOuter ; FMatrix44f TranslatedWorldToClipInnerMatrix ; FMatrix44f TranslatedWorldToClipOuterMatrix ; FMatrix44f InvReceiverInnerMatrix ; float InvMaxSubjectDepth ; float MaxSubjectZ ; float MinSubjectZ ; FConvexVolume CasterOuterFrustum ; FConvexVolume ReceiverInnerFrustum ; float MinPreSubjectZ ; FSphere ShadowBounds ; FShadowCascadeSettings CascadeSettings ; uint32 X ; uint32 Y ; uint32 ResolutionX ; uint32 ResolutionY ; uint32 BorderSize ; FIntRect ScissorRectOptim ; void)",
    "insertText": "ComputeScissorRectOptim()"
  },
  {
    "label": "FProjectedShadowInfo()",
    "kind": "Method",
    "detail": "Function (float MaxScreenPercent ; TArray<float,TInlineAllocator<2>> FadeAlphas ; uint32 bAllocated : 1 ; uint32 bRendered : 1 ; uint32 bAllocatedInPreshadowCache : 1 ; uint32 bDepthsCached : 1 ; uint32 bDirectionalLight : 1 ; uint32 bOnePassPointLightShadow : 1 ; uint32 bVSM : 1 ; uint32 bWholeSceneShadow : 1 ; uint32 bTranslucentShadow : 1 ; uint32 bRayTracedDistanceField : 1 ; uint32 bCapsuleShadow : 1 ; uint32 bPreShadow : 1 ; uint32 bSelfShadowOnly : 1 ; uint32 bPerObjectOpaqueShadow : 1 ; uint32 bTransmission : 1 ; uint32 bHairStrandsDeepShadow : 1 ; uint32 bNaniteGeometry : 1 ; uint32 bContainsNaniteSubjects : 1 ; uint32 bShouldRenderVSM : 1 ; uint32 bVolumetricShadow : 1 ; EShadowMeshSelection MeshSelectionMask = EShadowMeshSelection::All ; int32 VirtualShadowMapId = INDEX_NONE ; TSharedPtr<FVirtualShadowMapPerLightCacheEntry> VirtualShadowMapPerLightCacheEntry ; TArray<FMatrix> OnePassShadowViewProjectionMatrices ; TArray<FMatrix> OnePassShadowViewMatrices ; FMatrix OnePassShadowFaceProjectionMatrix ; float PerObjectShadowFadeStart ; float InvPerObjectShadowFadeLength ; float CSMScrollingZOffset ; FVector4f OverlappedUVOnCachedShadowMap ; FVector4f OverlappedUVOnCurrentShadowMap ; TArray<FPlane,TInlineAllocator<4>> CSMScrollingExtraCullingPlanes ; int32 ProjectionIndex = 0 ; int32 SubjectPrimitiveComponentIndex = - 1 ; TArray<int32,TInlineAllocator<6>> ViewIds ; TSharedPtr<FVirtualShadowMapClipmap> VirtualShadowMapClipmap ; public :)",
    "insertText": "FProjectedShadowInfo()"
  },
  {
    "label": "SetupPerObjectProjection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetupPerObjectProjection(FLightSceneInfo* InLightSceneInfo, const FPrimitiveSceneInfo* InParentSceneInfo, const FPerObjectProjectedShadowInitializer& Initializer, bool bInPreShadow, uint32 InResolutionX, uint32 MaxShadowResolutionY, uint32 InBorderSize, float InMaxScreenPercent, bool bInTranslucentShadow)"
  },
  {
    "label": "SetupWholeSceneProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupWholeSceneProjection(FLightSceneInfo* InLightSceneInfo, FViewInfo* InDependentView, const FWholeSceneProjectedShadowInitializer& Initializer, uint32 InResolutionX, uint32 InResolutionY, uint32 InSnapResolutionX, uint32 InSnapResolutionY, uint32 InBorderSize)"
  },
  {
    "label": "SetupClipmapProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupClipmapProjection(FLightSceneInfo* InLightSceneInfo, FViewInfo* InDependentView, const TSharedPtr<FVirtualShadowMapClipmap> &VirtualShadowMapClipmap, float InMaxNonFarCascadeDistance)"
  },
  {
    "label": "GetShadowDepthRenderingViewMatrices()",
    "kind": "Method",
    "detail": "Function (FViewMatrices)",
    "insertText": "GetShadowDepthRenderingViewMatrices(int32 CubeFaceIndex = -1, bool bUseForVSMCubeFaceWorkaround = false)"
  },
  {
    "label": "GetShaderDepthBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShaderDepthBias()"
  },
  {
    "label": "SetStateForView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStateForView(FRHICommandList& RHICmdList)"
  },
  {
    "label": "GetInnerViewRect()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "GetInnerViewRect()"
  },
  {
    "label": "GetOuterViewRect()",
    "kind": "Method",
    "detail": "Function (} FIntRect)",
    "insertText": "GetOuterViewRect()"
  },
  {
    "label": "SetStateForDepth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStateForDepth(FMeshPassProcessorRenderState& DrawRenderState)"
  },
  {
    "label": "ClearDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDepth(FRHICommandList& RHICmdList)"
  },
  {
    "label": "RenderTranslucencyDepths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderTranslucencyDepths(FRDGBuilder& GraphBuilder, class FSceneRenderer* SceneRenderer, const FRenderTargetBindingSlots& RenderTargets, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "HasShadowStencilCulling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasShadowStencilCulling(FStaticShaderPlatform ShaderPlatform)"
  },
  {
    "label": "GetBlendStateForProjection()",
    "kind": "Method",
    "detail": "Function (FRHIBlendState*)",
    "insertText": "GetBlendStateForProjection(int32 ShadowMapChannel, bool bIsWholeSceneDirectionalShadow, bool bUseFadePlane, bool bProjectingForForwardShading, bool bMobileModulatedProjections)"
  },
  {
    "label": "GetBlendStateForProjection()",
    "kind": "Method",
    "detail": "Function (FRHIBlendState*)",
    "insertText": "GetBlendStateForProjection(bool bProjectingForForwardShading, bool bMobileModulatedProjections)"
  },
  {
    "label": "RenderProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderProjection(FRDGBuilder& GraphBuilder, const FShadowProjectionPassParameters& CommonPassParameters, int32 ViewIndex, const FViewInfo* View, const FLightSceneProxy* LightSceneProxy, const FSceneRenderer* SceneRender, bool bProjectingForForwardShading, bool bSubPixelShadow)"
  },
  {
    "label": "RenderProjectionInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderProjectionInternal(FRHICommandList& RHICmdList, int32 ViewIndex, const FViewInfo* View, const FLightSceneProxy* LightSceneProxy, const FSceneRenderer* SceneRender, bool bProjectingForForwardShading, bool bMobileModulatedProjections, const FInstanceCullingDrawParams& InstanceCullingDrawParams, FRHIUniformBuffer* HairStrandsUniformBuffer)"
  },
  {
    "label": "RenderMobileModulatedShadowProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMobileModulatedShadowProjection(FRHICommandList& RHICmdList, int32 ViewIndex, const FViewInfo* View, const FLightSceneProxy* LightSceneProxy, const FSceneRenderer* SceneRender)"
  },
  {
    "label": "RenderDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderDepth(FRDGBuilder& GraphBuilder, const FSceneRenderer* SceneRenderer, FRDGTextureRef ShadowDepthTexture, bool bDoParallelDispatch, bool bDoCrossGPUCopy)"
  },
  {
    "label": "ResetRayTracedDistanceFieldShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRayTracedDistanceFieldShadow(const FViewInfo* View)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (DistanceFieldShadowViewGPUData& SDFShadowViewGPUData = CachedDistanceFieldShadowViewGPUData .)",
    "insertText": "FindOrAdd(View)"
  },
  {
    "label": "RenderRayTracedDistanceFieldProjection()",
    "kind": "Method",
    "detail": "Function (SDFShadowViewGPUData . RayTracedShadowsTexture = nullptr ; } FScreenPassTexture)",
    "insertText": "RenderRayTracedDistanceFieldProjection(FRDGBuilder& GraphBuilder, bool bAsyncCompute, const FMinimalSceneTextures& SceneTextures, const FViewInfo& View, const FIntRect& ScissorRect)"
  },
  {
    "label": "RenderRayTracedDistanceFieldProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderRayTracedDistanceFieldProjection(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, FRDGTextureRef ScreenShadowMaskTexture, const FViewInfo& View, FIntRect ScissorRect, bool bProjectingForForwardShading, bool bForceRGBModulation = false, FTiledShadowRendering* TiledShadowRendering = nullptr)"
  },
  {
    "label": "RenderOnePassPointLightProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderOnePassPointLightProjection(FRDGBuilder& GraphBuilder, const FShadowProjectionPassParameters& CommonPassParameters, int32 ViewIndex, const FViewInfo& View, const FLightSceneProxy* LightSceneProxy, bool bProjectingForForwardShading, bool bSubPixelShadow)"
  },
  {
    "label": "RenderFrustumWireframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderFrustumWireframe(FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "AddSubjectPrimitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSubjectPrimitive(FDynamicShadowsTaskData& TaskData, FPrimitiveSceneInfo* PrimitiveSceneInfo, TArrayView<FViewInfo> ViewArray, bool bRecordShadowSubjectForMobileShading)"
  },
  {
    "label": "AddSubjectPrimitive_AnyThread()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "AddSubjectPrimitive_AnyThread(const FPrimitiveSceneInfoCompact& PrimitiveSceneInfoCompact, TArrayView<FViewInfo> ViewArray, ERHIFeatureLevel::Type FeatureLevel, struct FAddSubjectPrimitiveStats& OutStats, struct FAddSubjectPrimitiveOverflowedIndices& OverflowBuffer)"
  },
  {
    "label": "PresizeSubjectPrimitiveArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresizeSubjectPrimitiveArrays(struct FAddSubjectPrimitiveStats const& Stats)"
  },
  {
    "label": "FinalizeAddSubjectPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeAddSubjectPrimitive(FDynamicShadowsTaskData& TaskData, struct FAddSubjectPrimitiveOp const& Op, TArrayView<FViewInfo> ViewArray, struct FFinalizeAddSubjectPrimitiveContext& Context)"
  },
  {
    "label": "HasSubjectPrims()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSubjectPrims()"
  },
  {
    "label": "AddReceiverPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReceiverPrimitive(FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "GatherDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (enum class EGatherDynamicMeshElementsPass : uint8 { All,Parallel,Serial,} ; bool)",
    "insertText": "GatherDynamicMeshElements(FMeshElementCollector& MeshCollector, FSceneRenderer& Renderer, class FVisibleLightInfo& VisibleLightInfo, TArray<const FSceneView*>& ReusedViewsArray, EGatherDynamicMeshElementsPass Pass)"
  },
  {
    "label": "SetupMeshDrawCommandsForShadowDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMeshDrawCommandsForShadowDepth(FSceneRenderer& Renderer, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "SetupMeshDrawCommandsForProjectionStenciling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMeshDrawCommandsForProjectionStenciling(FSceneRenderer& Renderer, FInstanceCullingManager& InstanceCullingManager)"
  },
  {
    "label": "SubjectsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SubjectsVisible(const FViewInfo& View)"
  },
  {
    "label": "ClearTransientArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTransientArrays()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FProjectedShadowInfo* ProjectedShadowInfo)"
  },
  {
    "label": "GetScreenToShadowMatrix()",
    "kind": "Method",
    "detail": "Function (} FMatrix)",
    "insertText": "GetScreenToShadowMatrix(const FSceneView& View)"
  },
  {
    "label": "GetClipToShadowBufferUvScaleBias()",
    "kind": "Method",
    "detail": "Function (} FVector4f)",
    "insertText": "GetClipToShadowBufferUvScaleBias()"
  },
  {
    "label": "GetScreenToShadowMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetScreenToShadowMatrix(const FSceneView& View, uint32 TileOffsetX, uint32 TileOffsetY, uint32 TileResolutionX, uint32 TileResolutionY)"
  },
  {
    "label": "GetWorldToShadowMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "GetWorldToShadowMatrix(FVector4f& ShadowmapMinMax, const FIntPoint* ShadowBufferResolutionOverride = nullptr)"
  },
  {
    "label": "GetShadowBufferResolution()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetShadowBufferResolution()"
  },
  {
    "label": "UpdateShaderDepthBias()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateShaderDepthBias()"
  },
  {
    "label": "ComputeTransitionSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeTransitionSize()"
  },
  {
    "label": "IsWholeSceneDirectionalShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWholeSceneDirectionalShadow()"
  },
  {
    "label": "IsWholeScenePointLightShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWholeScenePointLightShadow()"
  },
  {
    "label": "ShouldClampToNearPlane()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldClampToNearPlane()"
  },
  {
    "label": "GetLightSceneInfo()",
    "kind": "Method",
    "detail": "Function (} FLightSceneInfo&)",
    "insertText": "GetLightSceneInfo()"
  },
  {
    "label": "GetShadowDepthType()",
    "kind": "Method",
    "detail": "Function (EShadowDepthType)",
    "insertText": "GetShadowDepthType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EShadowDepthType ShadowDepthType = bVSM ? EShadowDepthType::VSM : EShadowDepthType::None ;)",
    "insertText": "if(bDirectionalLight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ShadowDepthType | = EShadowDepthType::Directional ; } else)",
    "insertText": "if(bOnePassPointLightShadow)"
  },
  {
    "label": "GetTargetMeshPassType()",
    "kind": "Method",
    "detail": "Function (ShadowDepthType | = EShadowDepthType::OnePassPoint ; } else { ShadowDepthType | = EShadowDepthType::Point ; } return ShadowDepthType ; } EMeshPass::Type)",
    "insertText": "GetTargetMeshPassType()"
  },
  {
    "label": "HasVirtualShadowMap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasVirtualShadowMap()"
  },
  {
    "label": "GetShadowDepthPass()",
    "kind": "Method",
    "detail": "Function (} FParallelMeshDrawCommandPass&)",
    "insertText": "GetShadowDepthPass()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (ShadowDepthView -> DynamicPrimitiveCollector .)",
    "insertText": "Commit()"
  },
  {
    "label": "ShouldUseCSMScissorOptim()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUseCSMScissorOptim()"
  },
  {
    "label": "GetDynamicSubjectHeterogeneousVolumeMeshElements()",
    "kind": "Method",
    "detail": "Function (const TArray<FMeshBatchAndRelevance,SceneRenderingAllocator>&)",
    "insertText": "GetDynamicSubjectHeterogeneousVolumeMeshElements()"
  },
  {
    "label": "GetLODDistanceFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLODDistanceFactor()"
  },
  {
    "label": "ModifyViewForShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyViewForShadow(FViewInfo* FoundView)"
  },
  {
    "label": "BeginRenderView()",
    "kind": "Method",
    "detail": "Function (class FVirtualShadowMapArray ; void)",
    "insertText": "BeginRenderView(FRDGBuilder& GraphBuilder, FScene* Scene)"
  },
  {
    "label": "FindViewForShadow()",
    "kind": "Method",
    "detail": "Function (FViewInfo*)",
    "insertText": "FindViewForShadow(FSceneRenderer* SceneRenderer)"
  },
  {
    "label": "AddCachedMeshDrawCommandsForPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedMeshDrawCommandsForPass(const FMeshDrawCommandPrimitiveIdInfo &PrimitiveIdInfo, const FPrimitiveSceneInfo* InPrimitiveSceneInfo, const FStaticMeshBatchRelevance& RESTRICT StaticMeshRelevance, const FStaticMeshBatch& StaticMesh, EMeshDrawCommandCullingPayloadFlags CullingPayloadFlags, const FScene* Scene, EMeshPass::Type PassType, FMeshCommandOneFrameArray& VisibleMeshCommands, TArray<const FStaticMeshBatch*, SceneRenderingAllocator>& MeshCommandBuildRequests, TArray<EMeshDrawCommandCullingPayloadFlags, SceneRenderingAllocator> MeshCommandBuildFlags, int32& NumMeshCommandBuildRequestElements)"
  },
  {
    "label": "AddCachedMeshDrawCommands_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedMeshDrawCommands_AnyThread(const FScene* Scene, const FStaticMeshBatchRelevance& RESTRICT StaticMeshRelevance, int32 StaticMeshIdx, int32& NumAcceptedStaticMeshes, struct FAddSubjectPrimitiveResult& OutResult, struct FAddSubjectPrimitiveStats& OutStats, struct FAddSubjectPrimitiveOverflowedIndices& OverflowBuffer)"
  },
  {
    "label": "ShouldDrawStaticMeshes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawStaticMeshes(FViewInfo& InCurrentView, FPrimitiveSceneInfo* InPrimitiveSceneInfo)"
  },
  {
    "label": "ShouldDrawStaticMeshes_AnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawStaticMeshes_AnyThread(FViewInfo& InCurrentView, const FPrimitiveSceneInfoCompact& PrimitiveSceneInfoCompact, bool bMayBeFading, struct FAddSubjectPrimitiveResult& OutResult, struct FAddSubjectPrimitiveStats& OutStats, struct FAddSubjectPrimitiveOverflowedIndices& OverflowBuffer)"
  },
  {
    "label": "GetShadowTypeNameForDrawEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadowTypeNameForDrawEvent(FString& TypeName)"
  },
  {
    "label": "UpdateShadowCastingObjectBuffers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "UpdateShadowCastingObjectBuffers()"
  },
  {
    "label": "GatherDynamicMeshElementsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GatherDynamicMeshElementsArray(FMeshElementCollector& Collector, const PrimitiveArrayType& PrimitiveArray, const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, TArray<FMeshBatchAndRelevance,SceneRenderingAllocator>& OutDynamicMeshElements, int32& OutNumDynamicSubjectMeshElements, EGatherDynamicMeshElementsPass Pass)"
  },
  {
    "label": "GatherDynamicHeterogeneousVolumeMeshElementsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GatherDynamicHeterogeneousVolumeMeshElementsArray(FSceneRenderer& Renderer, FMeshElementCollector& Collector, const PrimitiveArrayType& PrimitiveArray, const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, TArray<FMeshBatchAndRelevance, SceneRenderingAllocator>& OutDynamicMeshElements, int32& OutNumDynamicSubjectMeshElements, EGatherDynamicMeshElementsPass Pass)"
  },
  {
    "label": "SetupFrustumForProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupFrustumForProjection(const FViewInfo* View, TArray<FVector4f, TInlineAllocator<8>>& OutFrustumVertices, bool& bOutCameraInsideShadowFrustum, FPlane* OutPlanes)"
  },
  {
    "label": "SetupProjectionStencilMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupProjectionStencilMask(FRHICommandList& RHICmdList, const FViewInfo* View, int32 ViewIndex, const class FSceneRenderer* SceneRender, const TArray<FVector4f, TInlineAllocator<8>>& FrustumVertices, bool bMobileModulatedProjections, bool bCameraInsideShadowFrustum, const FInstanceCullingDrawParams& InstanceCullingDrawParams)"
  },
  {
    "label": "SetupProjectionStencilMaskForHair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupProjectionStencilMaskForHair(FRHICommandList& RHICmdList, const FViewInfo* View)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (class FShadowDepthVS ; class FShadowDepthBasePS ; class FShadowVolumeBoundProjectionVS ; class FShadowProjectionPS ; } ; enum class EShadowProjectionVertexShaderFlags { None,DrawingFrustum = 0 x01 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EShadowProjectionVertexShaderFlags)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_SHADER_TYPE(FShadowVolumeBoundProjectionVS,Global)"
  },
  {
    "label": "FShadowVolumeBoundProjectionVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShadowVolumeBoundProjectionVS()"
  },
  {
    "label": "FShadowVolumeBoundProjectionVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShadowVolumeBoundProjectionVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (const FShaderParameterMap& ParameterMap = Initializer . ParameterMap ; StencilingGeometryParameters .)",
    "insertText": "Bind(ParameterMap)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InvReceiverInnerMatrix .)",
    "insertText": "Bind(ParameterMap, TEXT(\"InvReceiverInnerMatrix\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (PreShadowToPreViewTranslation .)",
    "insertText": "Bind(ParameterMap, TEXT(\"PreShadowToPreViewTranslation\"))"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView& View, const FProjectedShadowInfo* ShadowInfo, EShadowProjectionVertexShaderFlags Flags)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LAYOUT_FIELD(FStencilingGeometryShaderParameters, StencilingGeometryParameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InvReceiverInnerMatrix)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PreShadowToPreViewTranslation)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FShadowProjectionNoTransformVS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(FShadowProjectionNoTransformVS,Global)"
  },
  {
    "label": "FShadowProjectionNoTransformVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShadowProjectionNoTransformVS()"
  },
  {
    "label": "FShadowProjectionNoTransformVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShadowProjectionNoTransformVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; class FShadowProjectionPixelShaderInterface : public FGlobalShader {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FShadowProjectionPixelShaderInterface, NonVirtual)"
  },
  {
    "label": "FShadowProjectionPixelShaderInterface()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShadowProjectionPixelShaderInterface() : FGlobalShader()"
  },
  {
    "label": "FShadowProjectionPixelShaderInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShadowProjectionPixelShaderInterface(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; class FShadowProjectionShaderParameters {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FShadowProjectionShaderParameters, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Bind(const FShader::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (const FShaderParameterMap& ParameterMap = Initializer . ParameterMap ; ScreenToShadowMatrix .)",
    "insertText": "Bind(ParameterMap,TEXT(\"ScreenToShadowMatrix\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (SoftTransitionScale .)",
    "insertText": "Bind(ParameterMap,TEXT(\"SoftTransitionScale\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowBufferSize .)",
    "insertText": "Bind(ParameterMap,TEXT(\"ShadowBufferSize\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowDepthTexture .)",
    "insertText": "Bind(ParameterMap,TEXT(\"ShadowDepthTexture\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowDepthTextureSampler .)",
    "insertText": "Bind(ParameterMap,TEXT(\"ShadowDepthTextureSampler\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ProjectionDepthBias .)",
    "insertText": "Bind(ParameterMap,TEXT(\"ProjectionDepthBiasParameters\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (FadePlaneOffset .)",
    "insertText": "Bind(ParameterMap,TEXT(\"FadePlaneOffset\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InvFadePlaneLength .)",
    "insertText": "Bind(ParameterMap,TEXT(\"InvFadePlaneLength\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowTileOffsetAndSizeParam .)",
    "insertText": "Bind(ParameterMap, TEXT(\"ShadowTileOffsetAndSize\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (LightPositionOrDirection .)",
    "insertText": "Bind(ParameterMap, TEXT(\"LightPositionOrDirection\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (PerObjectShadowFadeStart .)",
    "insertText": "Bind(ParameterMap, TEXT(\"PerObjectShadowFadeStart\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InvPerObjectShadowFadeLength .)",
    "insertText": "Bind(ParameterMap, TEXT(\"InvPerObjectShadowFadeLength\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowNearAndFarDepth .)",
    "insertText": "Bind(ParameterMap, TEXT(\"ShadowNearAndFarDepth\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (bCascadeUseFadePlane .)",
    "insertText": "Bind(ParameterMap, TEXT(\"bCascadeUseFadePlane\"))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView& View, const FProjectedShadowInfo* ShadowInfo, bool bModulatedShadows, bool bUseFadePlane, bool SubPixelShadow)"
  },
  {
    "label": "GetPreViewTranslation()",
    "kind": "Method",
    "detail": "Function (const FVector PreViewTranslation = View . ViewMatrices .)",
    "insertText": "GetPreViewTranslation()"
  },
  {
    "label": "InverseShadowBufferResolution()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "InverseShadowBufferResolution(1.0f / ShadowBufferResolution.X, 1.0f / ShadowBufferResolution.Y)"
  },
  {
    "label": "ShadowTileOffsetAndSize()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "ShadowTileOffsetAndSize((ShadowInfo->BorderSize + ShadowInfo->X) * InverseShadowBufferResolution.X, (ShadowInfo->BorderSize + ShadowInfo->Y) * InverseShadowBufferResolution.Y, ShadowInfo->ResolutionX * InverseShadowBufferResolution.X, ShadowInfo->ResolutionY * InverseShadowBufferResolution.Y)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ShadowTileOffsetAndSizeParam, ShadowTileOffsetAndSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bModulatedShadows)"
  },
  {
    "label": "FMatrix44f()",
    "kind": "Method",
    "detail": "Function (const FMatrix44f ScreenToShadow =)",
    "insertText": "FMatrix44f(ShadowInfo->GetScreenToShadowMatrix(View, 0, 0, ShadowBufferResolution.X, ShadowBufferResolution.Y))"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ScreenToShadowMatrix, ScreenToShadow)"
  },
  {
    "label": "FMatrix44f()",
    "kind": "Method",
    "detail": "Function (} else { const FMatrix44f ScreenToShadow =)",
    "insertText": "FMatrix44f(ShadowInfo->GetScreenToShadowMatrix(View))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SoftTransitionScale.IsBound())"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, SoftTransitionScale, FVector3f(0, 0, 1.0f / TransitionSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ShadowBufferSize.IsBound())"
  },
  {
    "label": "ShadowBufferSizeValue()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ShadowBufferSizeValue(ShadowBufferResolution.X, ShadowBufferResolution.Y)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ShadowBufferSize, FVector4f(ShadowBufferSizeValue.X, ShadowBufferSizeValue.Y, 1.0f / ShadowBufferSizeValue.X, 1.0f / ShadowBufferSizeValue.Y))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FRHITexture* ShadowDepthTextureValue ;)",
    "insertText": "if(ShadowInfo->RenderTargets.DepthTarget)"
  },
  {
    "label": "GetRHI()",
    "kind": "Method",
    "detail": "Function (ShadowDepthTextureValue = ShadowInfo -> RenderTargets . DepthTarget ->)",
    "insertText": "GetRHI()"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, ShadowDepthTexture, ShadowDepthTextureSampler, DepthSamplerState, ShadowDepthTextureValue)"
  },
  {
    "label": "SetSamplerParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSamplerParameter(BatchedParameters, ShadowDepthTextureSampler, DepthSamplerState)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetShaderValue(BatchedParameters, ProjectionDepthBias, FVector4f(ShadowInfo->GetShaderDepthBias(), ShadowInfo->GetShaderSlopeDepthBias(), ShadowInfo->GetShaderReceiverDepthBias(), ShadowInfo->MaxSubjectZ - ShadowInfo->MinSubjectZ))"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, FadePlaneOffset, ShadowInfo->CascadeSettings.FadePlaneOffset)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, InvFadePlaneLength, 1.0f / ShadowInfo->CascadeSettings.FadePlaneLength)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LightPositionOrDirection.IsBound())"
  },
  {
    "label": "GetLightSceneInfo()",
    "kind": "Method",
    "detail": "Function (const FVector LightDirection = ShadowInfo ->)",
    "insertText": "GetLightSceneInfo().Proxy->GetDirection()"
  },
  {
    "label": "GetLightSceneInfo()",
    "kind": "Method",
    "detail": "Function (const FVector LightPosition = ShadowInfo ->)",
    "insertText": "GetLightSceneInfo().Proxy->GetPosition()"
  },
  {
    "label": "GetLightSceneInfo()",
    "kind": "Method",
    "detail": "Function (const bool bIsDirectional = ShadowInfo ->)",
    "insertText": "GetLightSceneInfo().Proxy->GetLightType()"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, LightPositionOrDirection, bIsDirectional ? FVector4f((FVector3f)LightDirection,0) : FVector4f((FVector3f)LightPosition,1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SubPixelShadow)"
  },
  {
    "label": "bDirectionalLight()",
    "kind": "Method",
    "detail": "Function (float DeviceZNear = 1 ; float DeviceZFar = 0 ; const bool bIsCascadedShadow = ShadowInfo ->)",
    "insertText": "bDirectionalLight(ShadowInfo->bPerObjectOpaqueShadow || ShadowInfo->bPreShadow)"
  },
  {
    "label": "GetProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (FVector4 Near = View . ViewMatrices .)",
    "insertText": "GetProjectionMatrix().TransformFVector4(FVector4(0, 0, ShadowInfo->CascadeSettings.SplitNear))"
  },
  {
    "label": "GetProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (FVector4 Far = View . ViewMatrices .)",
    "insertText": "GetProjectionMatrix().TransformFVector4(FVector4(0, 0, ShadowInfo->CascadeSettings.SplitFar))"
  },
  {
    "label": "DeviceZNear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeviceZNear(float)(Near.Z / Near.W)"
  },
  {
    "label": "DeviceZFar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeviceZFar(float)(Far.Z / Far.W)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (} FVector2f SliceNearAndFarDepth ; SliceNearAndFarDepth . X = DeviceZNear ; SliceNearAndFarDepth . Y = DeviceZFar ;)",
    "insertText": "SetShaderValue(BatchedParameters, ShadowNearAndFarDepth, SliceNearAndFarDepth)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, bCascadeUseFadePlane, bUseFadePlane ? 1 : 0)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetShaderValue(BatchedParameters, PerObjectShadowFadeStart, ShadowInfo->PerObjectShadowFadeStart)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, InvPerObjectShadowFadeLength, ShadowInfo->InvPerObjectShadowFadeLength)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ScreenToShadowMatrix)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, SoftTransitionScale)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShadowBufferSize)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, ShadowDepthTexture)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, ShadowDepthTextureSampler)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ProjectionDepthBias)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, FadePlaneOffset)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InvFadePlaneLength)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShadowTileOffsetAndSizeParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, LightPositionOrDirection)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PerObjectShadowFadeStart)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InvPerObjectShadowFadeLength)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShadowNearAndFarDepth)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, bCascadeUseFadePlane)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<uint32 Quality,bool bUseFadePlane = false,bool bModulatedShadows = false,bool bUseTransmission = false,bool SubPixelShadow = false> class TShadowProjectionPS : public FShadowProjectionPixelShaderInterface {)",
    "insertText": "DECLARE_SHADER_TYPE(TShadowProjectionPS,Global)"
  },
  {
    "label": "TShadowProjectionPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TShadowProjectionPS() : FShadowProjectionPixelShaderInterface()"
  },
  {
    "label": "TShadowProjectionPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TShadowProjectionPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer): FShadowProjectionPixelShaderInterface(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ProjectionParameters .)",
    "insertText": "Bind(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowFadeFraction .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"ShadowFadeFraction\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowSharpen .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"ShadowSharpen\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (LightPosition .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"LightPositionAndInvRadius\"))"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters,OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SHADOW_QUALITY\"), Quality)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SUBPIXEL_SHADOW\"), (uint32)(SubPixelShadow ? 1 : 0))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_FADE_PLANE\"), (uint32)(bUseFadePlane ? 1 : 0))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_TRANSMISSION\"), (uint32)(bUseTransmission ? 1 : 0))"
  },
  {
    "label": "MobileUsesFullDepthPrepass()",
    "kind": "Method",
    "detail": "Function (const bool bMobileForceDepthRead =)",
    "insertText": "MobileUsesFullDepthPrepass(Parameters.Platform)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"FORCE_DEPTH_TEXTURE_READS\"), (uint32)(bMobileForceDepthRead ? 1 : 0))"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, int32 ViewIndex, const FSceneView& View, const FProjectedShadowInfo* ShadowInfo, bool bUseLightFunctionAtlas)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (const bool bUseFadePlaneEnable = ShadowInfo -> CascadeSettings . FadePlaneLength> 0 ; ProjectionParameters .)",
    "insertText": "Set(BatchedParameters, View, ShadowInfo, bModulatedShadows, bUseFadePlaneEnable, SubPixelShadow)"
  },
  {
    "label": "LightProxy()",
    "kind": "Method",
    "detail": "Function (const FLightSceneProxy&)",
    "insertText": "LightProxy(ShadowInfo->GetLightSceneInfo().Proxy)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ShadowFadeFraction, ShadowInfo->FadeAlphas[ViewIndex])"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ShadowSharpen, LightProxy.GetShadowSharpen() * 7.0f + 1.0f)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, LightPosition, FVector4f(FVector3f((FVector)LightProxy.GetPosition() + PreViewTranslation), 1.0f / LightProxy.GetRadius()))"
  },
  {
    "label": "FDeferredLightUniformStruct()",
    "kind": "Method",
    "detail": "Function (auto DeferredLightParameter = GetUniformBufferParameter<)",
    "insertText": "FDeferredLightUniformStruct()"
  },
  {
    "label": "SetDeferredLightParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeferredLightParameters(BatchedParameters, DeferredLightParameter, &ShadowInfo->GetLightSceneInfo(), View, bUseLightFunctionAtlas)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} FScene* Scene = nullptr ;)",
    "insertText": "if(View.Family->Scene)"
  },
  {
    "label": "GetRenderScene()",
    "kind": "Method",
    "detail": "Function (Scene = View . Family -> Scene ->)",
    "insertText": "GetRenderScene()"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} } protected :)",
    "insertText": "LAYOUT_FIELD(FShadowProjectionShaderParameters, ProjectionParameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShadowFadeFraction)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShadowSharpen)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, LightPosition)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<uint32 Quality> class TModulatedShadowProjection : public TShadowProjectionPS<Quality,false,true> {)",
    "insertText": "DECLARE_SHADER_TYPE(TModulatedShadowProjection, Global)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (TShadowProjectionPS<Quality,false,true)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"MODULATED_SHADOWS\"), 1)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"IS_MOBILE_DEPTHREAD_SUBPASS\"), bMobileForceDepthRead ? 0u : 1u)"
  },
  {
    "label": "TModulatedShadowProjection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TModulatedShadowProjection()"
  },
  {
    "label": "TModulatedShadowProjection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TModulatedShadowProjection(const ShaderMetaType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (TShadowProjectionPS<Quality,false,true)",
    "insertText": "SetParameters(BatchedParameters, ViewIndex, View, ShadowInfo, bUseLightFunctionAtlas)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, ModulatedShadowColorParameter, ShadowInfo->GetLightSceneInfo().Proxy->GetModulatedShadowColor())"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ModulatedShadowColorParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, MobileBasePassUniformBuffer)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FTranslucentSelfShadowUniformParameters, ) SHADER_PARAMETER(FMatrix44f, WorldToShadowMatrix) SHADER_PARAMETER(FVector4f, ShadowUVMinMax) SHADER_PARAMETER(FVector4f, DirectionalLightDirection) SHADER_PARAMETER(FVector4f, DirectionalLightColor) SHADER_PARAMETER_TEXTURE(Texture2D, Transmission0) SHADER_PARAMETER_TEXTURE(Texture2D, Transmission1) SHADER_PARAMETER_SAMPLER(SamplerState, Transmission0Sampler) SHADER_PARAMETER_SAMPLER(SamplerState, Transmission1Sampler) END_GLOBAL_SHADER_PARAMETER_STRUCT() extern void SetupTranslucentSelfShadowUniformParameters(const FProjectedShadowInfo* ShadowInfo, FTranslucentSelfShadowUniformParameters& OutParameters)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (class FEmptyTranslucentSelfShadowUniformBuffer : public TUniformBuffer<FTranslucentSelfShadowUniformParameters> { typedef TUniformBuffer<FTranslucentSelfShadowUniformParameters> Super ; public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FEmptyTranslucentSelfShadowUniformBuffer> GEmptyTranslucentSelfShadowUniformBuffer ; template<uint32 Quality> class TShadowProjectionFromTranslucencyPS : public TShadowProjectionPS<Quality> {)",
    "insertText": "DECLARE_SHADER_TYPE(TShadowProjectionFromTranslucencyPS,Global)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"APPLY_TRANSLUCENCY_SHADOWS\"), 1)"
  },
  {
    "label": "TShadowProjectionFromTranslucencyPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TShadowProjectionFromTranslucencyPS()"
  },
  {
    "label": "TShadowProjectionFromTranslucencyPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TShadowProjectionFromTranslucencyPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer): TShadowProjectionPS<Quality>(Initializer)"
  },
  {
    "label": "SetupTranslucentSelfShadowUniformParameters()",
    "kind": "Method",
    "detail": "Function (FTranslucentSelfShadowUniformParameters TranslucentSelfShadowUniformParameters ;)",
    "insertText": "SetupTranslucentSelfShadowUniformParameters(ShadowInfo, TranslucentSelfShadowUniformParameters)"
  },
  {
    "label": "SetUniformBufferParameterImmediate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniformBufferParameterImmediate(BatchedParameters, this->template GetUniformBufferParameter<FTranslucentSelfShadowUniformParameters>(), TranslucentSelfShadowUniformParameters)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FOnePassPointShadowProjection, ) SHADER_PARAMETER_RDG_TEXTURE(TextureCube, ShadowDepthCubeTexture) SHADER_PARAMETER_RDG_TEXTURE(TextureCube, ShadowDepthCubeTexture2) SHADER_PARAMETER_SAMPLER(SamplerComparisonState, ShadowDepthCubeTextureSampler) SHADER_PARAMETER_ARRAY(FMatrix44f, ShadowViewProjectionMatrices, [6]) SHADER_PARAMETER(float, InvShadowmapResolution) END_SHADER_PARAMETER_STRUCT() extern void GetOnePassPointShadowProjectionParameters(FRDGBuilder& GraphBuilder, const FProjectedShadowInfo* ShadowInfo, FOnePassPointShadowProjection& OutParameters)"
  },
  {
    "label": "DECLARE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (class FOnePassPointShadowProjectionShaderParameters {)",
    "insertText": "DECLARE_TYPE_LAYOUT(FOnePassPointShadowProjectionShaderParameters, NonVirtual)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Bind(const FShaderParameterMap& ParameterMap)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowDepthTexture .)",
    "insertText": "Bind(ParameterMap,TEXT(\"ShadowDepthCubeTexture\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowDepthTexture2 .)",
    "insertText": "Bind(ParameterMap, TEXT(\"ShadowDepthCubeTexture2\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowDepthCubeComparisonSampler .)",
    "insertText": "Bind(ParameterMap,TEXT(\"ShadowDepthCubeTextureSampler\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowViewProjectionMatrices .)",
    "insertText": "Bind(ParameterMap, TEXT(\"ShadowViewProjectionMatrices\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InvShadowmapResolution .)",
    "insertText": "Bind(ParameterMap, TEXT(\"InvShadowmapResolution\"))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(FRHIBatchedShaderParameters& BatchedParameters, const FSceneView& View, const FProjectedShadowInfo* ShadowInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRHITexture* ShadowDepthTextureValue = GBlackTextureDepthCube -> TextureRHI ;)",
    "insertText": "if(ShadowInfo)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (ShadowDepthTextureValue = Texture ; } })",
    "insertText": "SetTextureParameter(BatchedParameters, ShadowDepthTexture, ShadowDepthTextureValue)"
  },
  {
    "label": "SetTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureParameter(BatchedParameters, ShadowDepthTexture2, ShadowDepthTextureValue)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (const FVector LightPosition = ShadowInfo ?)",
    "insertText": "FVector(ShadowInfo->GetLightSceneInfo().Proxy->GetPosition())"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, LightPositionOrDirection, FVector4f(FVector3f(LightPosition + PreViewTranslation), 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ShadowDepthCubeComparisonSampler.IsBound())"
  },
  {
    "label": "SetSamplerParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSamplerParameter(BatchedParameters, ShadowDepthCubeComparisonSampler, TStaticSamplerState<SF_Bilinear, AM_Clamp, AM_Clamp, AM_Clamp, 0, 0, 0, SCF_Less>::GetRHI())"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (} const int32 NumShaderMatrices = FMath::DivideAndRoundUp<)",
    "insertText": "int32(ShadowViewProjectionMatrices.GetNumBytes(), sizeof(FMatrix44f))"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 NumUsableMatrices = FMath::Min<)",
    "insertText": "int32(NumShaderMatrices, ShadowInfo->OnePassShadowViewProjectionMatrices.Num())"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<FMatrix44f,SceneRenderingAllocator> TypeCastedMatrices ; TypeCastedMatrices .)",
    "insertText": "AddUninitialized(NumUsableMatrices)"
  },
  {
    "label": "FMatrix44f()",
    "kind": "Method",
    "detail": "Function (TypeCastedMatrices [ i ] =)",
    "insertText": "FMatrix44f(ShadowInfo->OnePassShadowViewProjectionMatrices[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumUsableMatrices < NumShaderMatrices)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (TypeCastedMatrices .)",
    "insertText": "AddZeroed(NumShaderMatrices - NumUsableMatrices)"
  },
  {
    "label": "FMatrix44f()",
    "kind": "Method",
    "detail": "Function (} SetShaderValueArray<)",
    "insertText": "FMatrix44f(BatchedParameters, ShadowViewProjectionMatrices, TypeCastedMatrices.GetData(), NumShaderMatrices)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters,InvShadowmapResolution,1.0f / ShadowInfo->ResolutionX)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (} else { TArray<FMatrix44f,SceneRenderingAllocator> ZeroMatrices ; ZeroMatrices .)",
    "insertText": "AddZeroed(NumShaderMatrices)"
  },
  {
    "label": "FMatrix44f()",
    "kind": "Method",
    "detail": "Function (SetShaderValueArray<)",
    "insertText": "FMatrix44f(BatchedParameters, ShadowViewProjectionMatrices, ZeroMatrices.GetData(), NumShaderMatrices)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters,InvShadowmapResolution,0)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, ShadowDepthTexture2)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, ShadowDepthCubeComparisonSampler)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShadowViewProjectionMatrices)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, InvShadowmapResolution)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<uint32 Quality,bool bUseTransmission,bool bUseSubPixel> class TOnePassPointShadowProjectionPS : public FGlobalShader {)",
    "insertText": "DECLARE_SHADER_TYPE(TOnePassPointShadowProjectionPS,Global)"
  },
  {
    "label": "TOnePassPointShadowProjectionPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TOnePassPointShadowProjectionPS()"
  },
  {
    "label": "TOnePassPointShadowProjectionPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TOnePassPointShadowProjectionPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer): FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (HairStrandsParameters .)",
    "insertText": "Bind(Initializer.ParameterMap, FHairStrandsViewUniformParameters::FTypeInfo::GetStructMetadata()->GetShaderVariableName())"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (SubstrateGlobalParameters .)",
    "insertText": "Bind(Initializer.ParameterMap, FSubstrateGlobalUniformParameters::FTypeInfo::GetStructMetadata()->GetShaderVariableName())"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (OnePassShadowParameters .)",
    "insertText": "Bind(Initializer.ParameterMap)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShadowDepthTextureSampler .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"ShadowDepthTextureSampler\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (LightPosition .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"LightPositionAndInvRadius\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (PointLightDepthBias .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"PointLightDepthBias\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (PointLightProjParameters .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"PointLightProjParameters\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_TRANSMISSION\"), 0)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SUBPIXEL_SHADOW\"), (uint32)(bUseSubPixel ? 1 : 0))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (OnePassShadowParameters .)",
    "insertText": "Set(BatchedParameters, View, ShadowInfo)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, LightPosition, FVector4f(FVector3f(FVector(LightProxy.GetPosition()) + PreViewTranslation), 1.0f / LightProxy.GetRadius()))"
  },
  {
    "label": "FVector2d()",
    "kind": "Method",
    "detail": "Function (FVector2d ProjectionParams =)",
    "insertText": "FVector2d(ShadowInfo->OnePassShadowFaceProjectionMatrix.M[2][2], ShadowInfo->OnePassShadowFaceProjectionMatrix.M[3][2])"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (FVector2f InverseProjParams =)",
    "insertText": "FVector2f(1.0 / ProjectionParams.Y, ProjectionParams.X / ProjectionParams.Y)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, PointLightDepthBias, FVector3f(ShadowInfo->GetShaderDepthBias(), ShadowInfo->GetShaderSlopeDepthBias(), ShadowInfo->GetShaderMaxSlopeDepthBias()))"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, PointLightProjParameters, InverseProjParams)"
  },
  {
    "label": "SetUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniformBufferParameter(BatchedParameters, HairStrandsParameters, HairStrandsUniformBuffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SubstrateGlobalParameters.IsBound())"
  },
  {
    "label": "BindSubstrateGlobalUniformParameters()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FSubstrateGlobalUniformParameters> SubstrateUniformBuffer =)",
    "insertText": "BindSubstrateGlobalUniformParameters(View)"
  },
  {
    "label": "SetUniformBufferParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniformBufferParameter(BatchedParameters, SubstrateGlobalParameters, SubstrateUniformBuffer->GetRHIRef())"
  },
  {
    "label": "SetSamplerParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetSamplerParameter(BatchedParameters, ShadowDepthTextureSampler, TStaticSamplerState<SF_Point, AM_Clamp, AM_Clamp, AM_Clamp>::GetRHI())"
  },
  {
    "label": "SetDeferredLightParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeferredLightParameters(BatchedParameters, DeferredLightParameter, &ShadowInfo->GetLightSceneInfo(), View, LightFunctionAtlas::IsEnabled(View, LightFunctionAtlas::ELightFunctionAtlasSystem::DeferredLighting))"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} } private :)",
    "insertText": "LAYOUT_FIELD(FOnePassPointShadowProjectionShaderParameters, OnePassShadowParameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PointLightDepthBias)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PointLightProjParameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, HairStrandsParameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, SubstrateGlobalParameters)"
  },
  {
    "label": "FShadowProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (} ; struct FShadowProjectionMatrix : FMatrix {)",
    "insertText": "FShadowProjectionMatrix(FVector::FReal MinZ, FVector::FReal MaxZ, const FVector4& WAxis) : FMatrix( FPlane(1, 0, 0, WAxis.X), FPlane(0, 1, 0, WAxis.Y), FPlane(0, 0, -(WAxis.Z * MinZ + WAxis.W) / (MaxZ - MinZ), WAxis.Z), FPlane(0, 0, MaxZ *(WAxis.Z * MinZ + WAxis.W) / (MaxZ - MinZ), WAxis.W))"
  },
  {
    "label": "FShadowProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShadowProjectionMatrix(const FVector2D& Min, const FVector2D& Max, const FVector4& WAxis ) : FMatrix( FPlane( 2.0f / (Max.X - Min.X), 0.0f, 0.0f, WAxis.X), FPlane( 0.0f, 2.0f / (Max.Y - Min.Y), 0.0f, WAxis.Y), FPlane( -(Max.X + Min.X) / (Max.X - Min.X), -(Max.Y + Min.Y) / (Max.Y - Min.Y), 0.0f, WAxis.Z), FPlane( 0.0f, 0.0f, 1.0f, WAxis.W))"
  },
  {
    "label": "FShadowProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShadowProjectionMatrix(const FMatrix& InMatrix, float MinZ, float MaxZ ) : FMatrix( InMatrix)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "M(M[2][3] * MinZ + M[3][3] ) / ( MaxZ - MinZ)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (M [ 3 ] [ 2 ] = MaxZ* - M [ 2 ] [ 2 ] ; } } ; template<uint32 Quality,bool bUseFadePlane> class TDirectionalPercentageCloserShadowProjectionPS : public TShadowProjectionPS<Quality,bUseFadePlane> {)",
    "insertText": "DECLARE_SHADER_TYPE(TDirectionalPercentageCloserShadowProjectionPS, Global)"
  },
  {
    "label": "TDirectionalPercentageCloserShadowProjectionPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TDirectionalPercentageCloserShadowProjectionPS()"
  },
  {
    "label": "TDirectionalPercentageCloserShadowProjectionPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDirectionalPercentageCloserShadowProjectionPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : TShadowProjectionPS<Quality, bUseFadePlane>(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (PCSSParameters .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"PCSSParameters\"))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_PCSS\"), 1)"
  },
  {
    "label": "Tan()",
    "kind": "Method",
    "detail": "Function (float TanLightSourceAngle =)",
    "insertText": "Tan(0.5 * FMath::DegreesToRadians(ShadowInfo->GetLightSceneInfo().Proxy->GetLightSourceAngle()))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable* CVarMaxSoftShadowKernelSize =)",
    "insertText": "Get().FindConsoleVariable(TEXT(\"r.Shadow.MaxSoftKernelSize\"))"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (int32 MaxKernelSize = CVarMaxSoftShadowKernelSize ->)",
    "insertText": "GetInt()"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (float SW = 2 . 0* ShadowInfo -> ShadowBounds . W ; float SZ = ShadowInfo -> MaxSubjectZ - ShadowInfo -> MinSubjectZ ; FVector4f PCSSParameterValues =)",
    "insertText": "FVector4f(TanLightSourceAngle * SZ / SW, MaxKernelSize / float(ShadowInfo->ResolutionX), 0, 0)"
  },
  {
    "label": "SetShaderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderValue(BatchedParameters, PCSSParameters, PCSSParameterValues)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, PCSSParameters)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<uint32 Quality,bool bUseFadePlane> class TSpotPercentageCloserShadowProjectionPS : public TShadowProjectionPS<Quality,bUseFadePlane> {)",
    "insertText": "DECLARE_SHADER_TYPE(TSpotPercentageCloserShadowProjectionPS, Global)"
  },
  {
    "label": "TSpotPercentageCloserShadowProjectionPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TSpotPercentageCloserShadowProjectionPS()"
  },
  {
    "label": "TSpotPercentageCloserShadowProjectionPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSpotPercentageCloserShadowProjectionPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : TShadowProjectionPS<Quality, bUseFadePlane>(Initializer)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SPOT_LIGHT_PCSS\"), 1)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (FVector4f PCSSParameterValues =)",
    "insertText": "FVector4f(0, MaxKernelSize / float(ShadowInfo->ResolutionX), 0, 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FCompareFProjectedShadowInfoByResolution { bool)",
    "insertText": "operator() (const FProjectedShadowInfo& A, const FProjectedShadowInfo& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCompareFProjectedShadowInfoBySplitIndex { bool)",
    "insertText": "operator()( const FProjectedShadowInfo& A, const FProjectedShadowInfo& B)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return true ; } else {)",
    "insertText": "if(B.IsWholeSceneDirectionalShadow())"
  }
]