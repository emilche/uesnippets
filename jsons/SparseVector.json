[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "sparse_vector_assign_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_vector_assign_selector"
  },
  {
    "label": "SparseVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseVector"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "IsColVector()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSEVECTOR_H # define EIGEN_SPARSEVECTOR_H namespace Eigen { namespace internal { template<_Scalar,int _Options,_StorageIndex> struct traits<SparseVector<_Scalar,_Options,_StorageIndex>> { typedef _Scalar Scalar ; typedef _StorageIndex StorageIndex ; typedef Sparse StorageKind ; typedef MatrixXpr XprKind ; enum {)",
    "insertText": "IsColVector(_Options & RowMajorBit) ? 0 : 1, RowsAtCompileTime = IsColVector ? Dynamic : 1, ColsAtCompileTime = IsColVector ? 1 : Dynamic, MaxRowsAtCompileTime = RowsAtCompileTime, MaxColsAtCompileTime = ColsAtCompileTime, Flags = _Options | NestByRefBit | LvalueBit | (IsColVector ? 0 : RowMajorBit)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; enum { SVA_RuntimeSwitch,SVA_Inner,SVA_Outer } ; template<Dest,Src,int AssignmentKind = !)",
    "insertText": "bool(Src::IsVectorAtCompileTime)"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} template<_Scalar,int _Options,_StorageIndex> class SparseVector : public SparseCompressedBase<SparseVector<_Scalar,_Options,_StorageIndex>> { typedef SparseCompressedBase<SparseVector> Base ; using Base::convert_index ; public :)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(SparseVector) EIGEN_SPARSE_INHERIT_ASSIGNMENT_OPERATOR(SparseVector, +=) EIGEN_SPARSE_INHERIT_ASSIGNMENT_OPERATOR(SparseVector, -=)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (enum { IsColVector = internal::traits<SparseVector>::IsColVector } ; enum { Options = _Options } ; EIGEN_STRONG_INLINE Index)",
    "insertText": "rows()"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Scalar*)",
    "insertText": "valuePtr()"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE const StorageIndex*)",
    "insertText": "innerIndexPtr()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(IsColVector ? (col==0 && row>=0 && row<m_size) : (row==0 && col>=0 && col<m_size))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeff(Index i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(i>=0 && i<m_size)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "coeffRef(Index i)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (} public : typedef Base::InnerIterator InnerIterator ; typedef Base::ReverseInnerIterator ReverseInnerIterator ; void)",
    "insertText": "setZero()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "clear()"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZeros()"
  },
  {
    "label": "startVec()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "startVec(Index outer)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(outer)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(outer==0)"
  },
  {
    "label": "insertBackByOuterInner()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insertBackByOuterInner(Index outer, Index inner)"
  },
  {
    "label": "insertBack()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insertBack(Index i)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "append(0, i)"
  },
  {
    "label": "insertBackByOuterInnerUnordered()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insertBackByOuterInnerUnordered(Index outer, Index inner)"
  },
  {
    "label": "insertBackUnordered()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insertBackUnordered(Index i)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insert(Index row, Index col)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (Index inner = IsColVector ? row : col ; Index outer = IsColVector ? col : row ;)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(outer)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "insert(Index i)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index startId = 0 ; Index p =)",
    "insertText": "Index(m_data.size())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "resize(p+2,1)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "index(p+1) = m_data.index(p)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "value(p+1) = m_data.value(p)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (- - p ; } m_data .)",
    "insertText": "index(p+1) = convert_index(i)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "value(p+1)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reserve(Index reserveSize)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "reserve(reserveSize)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "finalize()"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "prune(const Scalar& reference, const RealScalar& epsilon = NumTraits<RealScalar>::dummy_precision())"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "prune(reference,epsilon)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(Index rows, Index cols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((IsColVector ? cols : rows)==1 && \"Outer dimension must equal 1\")"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(IsColVector ? rows : cols)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(Index newSize)"
  },
  {
    "label": "conservativeResize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "conservativeResize(Index newSize)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "while(i<m_data.size() && m_data.index(i)<newSize)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "resize(i)"
  },
  {
    "label": "resizeNonZeros()",
    "kind": "Method",
    "detail": "Function (} m_size = newSize ; } void)",
    "insertText": "resizeNonZeros(Index size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "resize(size)"
  },
  {
    "label": "SparseVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseVector() : m_size(0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(0)"
  },
  {
    "label": "SparseVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseVector(Index size) : m_size(0)"
  },
  {
    "label": "SparseVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseVector(Index rows, Index cols) : m_size(0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(rows,cols)"
  },
  {
    "label": "SparseVector()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived>)",
    "insertText": "SparseVector(const SparseMatrixBase<OtherDerived>& other) : m_size(0)"
  },
  {
    "label": "check_template_parameters()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN EIGEN_SPARSE_CREATE_TEMPORARY_PLUGIN # endif)",
    "insertText": "check_template_parameters()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (* this = other .)",
    "insertText": "derived()"
  },
  {
    "label": "SparseVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseVector(const SparseVector& other) : Base(other), m_size(0)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(SparseVector& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_size, other.m_size)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "swap(other.m_data)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<int OtherOptions> void)",
    "insertText": "swap(SparseMatrix<Scalar,OtherOptions,StorageIndex>& other)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(other.outerSize()==1)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_size, other.m_innerSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SparseVector&)",
    "insertText": "operator(const SparseVector& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(other.const_cast_derived())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "resize(other.size())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_data = other . m_data ; } return* this ; } template<OtherDerived> SparseVector&)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (SparseVector)",
    "insertText": "tmp(other.size())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::sparse_vector_assign_selector<SparseVector,OtherDerived)",
    "insertText": "run(tmp,other.derived())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "swap(tmp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif std::ostream&)",
    "insertText": "operator(std::ostream & s, const SparseVector& m)"
  },
  {
    "label": "SparseVector()",
    "kind": "Method",
    "detail": "Function (s<<std::endl ; return s ; } ~)",
    "insertText": "SparseVector()"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "sum()"
  },
  {
    "label": "startFill()",
    "kind": "Method",
    "detail": "Function (public : EIGEN_DEPRECATED void)",
    "insertText": "startFill(Index reserve)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "reserve(reserve)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED Scalar&)",
    "insertText": "fill(Index r, Index c)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(r==0 || c==0)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED Scalar&)",
    "insertText": "fill(Index i)"
  },
  {
    "label": "fillrand()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED Scalar&)",
    "insertText": "fillrand(Index r, Index c)"
  },
  {
    "label": "fillrand()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED Scalar&)",
    "insertText": "fillrand(Index i)"
  },
  {
    "label": "endFill()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED void)",
    "insertText": "endFill()"
  },
  {
    "label": "_data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEPRECATED Storage&)",
    "insertText": "_data()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumTraits<StorageIndex>::IsSigned,THE_INDEX_TYPE_MUST_BE_A_SIGNED_TYPE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((_Options&(ColMajor|RowMajor))==Options,INVALID_MATRIX_TEMPLATE_PARAMETERS)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (} Storage m_data ; Index m_size ; } ; namespace internal { template<_Scalar,int _Options,_Index> struct evaluator<SparseVector<_Scalar,_Options,_Index>> : evaluator_base<SparseVector<_Scalar,_Options,_Index>> { typedef SparseVector<_Scalar,_Options,_Index> SparseVectorType ; typedef evaluator_base<SparseVectorType> Base ; typedef SparseVectorType::InnerIterator InnerIterator ; typedef SparseVectorType::ReverseInnerIterator ReverseInnerIterator ; enum { CoeffReadCost = NumTraits<_Scalar>::ReadCost,Flags = SparseVectorType::Flags } ;)",
    "insertText": "evaluator() : Base()"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "evaluator(const SparseVectorType &mat) : m_matrix(&mat)"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost)"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosEstimate()"
  },
  {
    "label": "SparseVectorType()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "SparseVectorType()"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(src.innerSize()==src.size())"
  },
  {
    "label": "srcEval()",
    "kind": "Method",
    "detail": "Function (typedef internal::evaluator<Src> SrcEvaluatorType ; SrcEvaluatorType)",
    "insertText": "srcEval(src)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Dest,Src> struct sparse_vector_assign_selector<Dest,Src,SVA_Outer> { void)",
    "insertText": "run(Dest& dst, const Src& src)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(src.outerSize()==src.size())"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (SrcEvaluatorType::InnerIterator)",
    "insertText": "it(srcEval, i)"
  }
]