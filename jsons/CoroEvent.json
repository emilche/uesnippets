[
  {
    "label": "FCoroEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoroEvent"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "InvalidNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Coroutine . h \" # if WITH_CPP_COROUTINES class FCoroEvent { struct FNode : public TConcurrentLinearObject<FNode,CoroTask_Detail::FCoroBlockAllocationTag> { FLockedTask DummyTask ; FNode* Next ; } ; FNode*)",
    "insertText": "InvalidNode()"
  },
  {
    "label": "FCoroEvent()",
    "kind": "Method",
    "detail": "Function (} std::atomic<FNode*> Head { nullptr } ; public :)",
    "insertText": "FCoroEvent()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Trigger()"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (FNode* LocalNode = Head .)",
    "insertText": "exchange(InvalidNode(), std::memory_order_acquire)"
  },
  {
    "label": "Yield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Yield()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (} LocalNode -> DummyTask .)",
    "insertText": "Unlock()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (FNode* Deleted = LocalNode ; LocalNode = LocalNode -> Next ; delete Deleted ; } } void)",
    "insertText": "Reset()"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (FNode* LocalNode = Head .)",
    "insertText": "exchange(nullptr, std::memory_order_acquire)"
  },
  {
    "label": "await_ready()",
    "kind": "Method",
    "detail": "Function (FNode* Deleted = LocalNode ; LocalNode = LocalNode -> Next ; delete Deleted ; } } bool)",
    "insertText": "await_ready()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FLockedTask DummyTask =)",
    "insertText": "Create()"
  },
  {
    "label": "GetPromise()",
    "kind": "Method",
    "detail": "Function (const CoroTask_Detail::FPromise* DummyPromise = DummyTask .)",
    "insertText": "GetPromise()"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (FNode* Node = new)",
    "insertText": "FNode()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Node -> DummyTask =)",
    "insertText": "MoveTemp(DummyTask)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (FNode* LocalHead = Head .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (delete Node ; return false ; } Node -> Next = LocalHead ; })",
    "insertText": "while(!Head.compare_exchange_weak(LocalHead, Node, std::memory_order_release))"
  },
  {
    "label": "promise()",
    "kind": "Method",
    "detail": "Function (Continuation .)",
    "insertText": "promise().Suspend(DummyPromise)"
  }
]