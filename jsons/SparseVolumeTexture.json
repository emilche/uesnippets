[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestOwner"
  },
  {
    "label": "FTextureData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureData"
  },
  {
    "label": "FStreamingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingManager"
  },
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "FPageTopology",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageTopology"
  },
  {
    "label": "FMip",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMip"
  },
  {
    "label": "FMipLevelStreamingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipLevelStreamingInfo"
  },
  {
    "label": "FTileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileInfo"
  },
  {
    "label": "FTileStreamingMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileStreamingMetaData"
  },
  {
    "label": "EResourceFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResourceFlag"
  },
  {
    "label": "FResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResources"
  },
  {
    "label": "FDerivedTextureData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDerivedTextureData"
  },
  {
    "label": "FTextureRenderResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureRenderResources"
  },
  {
    "label": "ESparseVolumeTextureShaderUniform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESparseVolumeTextureShaderUniform"
  },
  {
    "label": "USparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTexture"
  },
  {
    "label": "USparseVolumeTextureFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTextureFrame"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "UStreamableSparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableSparseVolumeTexture"
  },
  {
    "label": "EPixelFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPixelFormat"
  },
  {
    "label": "TextureAddress",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TextureAddress"
  },
  {
    "label": "UAssetImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportData"
  },
  {
    "label": "UAssetUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetUserData"
  },
  {
    "label": "EInitState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EInitState"
  },
  {
    "label": "UStaticSparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticSparseVolumeTexture"
  },
  {
    "label": "UAnimatedSparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimatedSparseVolumeTexture"
  },
  {
    "label": "UAnimatedSparseVolumeTextureController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimatedSparseVolumeTextureController"
  },
  {
    "label": "SPARSE_VOLUME_TILE_RES_PADDED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / VolumeTexture . h \" # include \" Containers / Array . h \" # include \" Containers / StaticArray . h \" # include \" Engine / TextureDefines . h \" # include \" Interfaces / Interface_AssetUserData . h \" # include \" Serialization / EditorBulkData . h \" # include \" UnrealClient . h \" # include \" UObject / ObjectSaveContext . h \" # include \" SparseVolumeTexture . generated . h \" namespace UE { namespace Shader { enum class EValueType : uint8 ; } } namespace UE { namespace DerivedData { class FRequestOwner ; } } # define SPARSE_VOLUME_TILE_RES 1 6 # define SPARSE_VOLUME_TILE_BORDER 1 # define)",
    "insertText": "SPARSE_VOLUME_TILE_RES_PADDED(SPARSE_VOLUME_TILE_RES + 2 * SPARSE_VOLUME_TILE_BORDER)"
  },
  {
    "label": "FIntVector3()",
    "kind": "Method",
    "detail": "Function (namespace SVT { struct FTextureData ; class FStreamingManager ; struct FHeader { FIntVector3 VirtualVolumeResolution =)",
    "insertText": "FIntVector3(0, 0, 0)"
  },
  {
    "label": "FIntVector3()",
    "kind": "Method",
    "detail": "Function (FIntVector3 VirtualVolumeAABBMin =)",
    "insertText": "FIntVector3(INT32_MAX, INT32_MAX, INT32_MAX)"
  },
  {
    "label": "FIntVector3()",
    "kind": "Method",
    "detail": "Function (FIntVector3 VirtualVolumeAABBMax =)",
    "insertText": "FIntVector3(INT32_MIN, INT32_MIN, INT32_MIN)"
  },
  {
    "label": "EPixelFormat()",
    "kind": "Method",
    "detail": "Function (TStaticArray<EPixelFormat,2> AttributesFormats = TStaticArray<)",
    "insertText": "EPixelFormat(InPlace, PF_Unknown)"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (TStaticArray<FVector4f,2> FallbackValues = TStaticArray<)",
    "insertText": "FVector4f(InPlace, FVector4f(0.0f, 0.0f, 0.0f, 0.0f))"
  },
  {
    "label": "FHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHeader()"
  },
  {
    "label": "FHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHeader(const FIntVector3& AABBMin, const FIntVector3& AABBMax, EPixelFormat FormatA, EPixelFormat FormatB, const FVector4f& FallbackValueA, const FVector4f& FallbackValueB)"
  },
  {
    "label": "UpdatePageTableFromGlobalNumMipLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePageTableFromGlobalNumMipLevels(int32 NumMipLevelsGlobal)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate(bool bPrintToLog)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; struct FPageTopology { struct FMip { uint32 PageOffset ; uint32 PageCount ; } ; TArray<FMip> MipInfo ; TArray<uint32> PackedPageTableCoords ; TArray<uint32> TileIndices ; TArray<uint32> ParentIndices ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "NumPages()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumPages()"
  },
  {
    "label": "IsValidPageIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidPageIndex(uint32 PageIndex)"
  },
  {
    "label": "GetTileRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTileRange(uint32 PageOffset, uint32 PageCount, uint32& OutTileOffset, uint32& OutTileCount)"
  },
  {
    "label": "GetNumTiles()",
    "kind": "Method",
    "detail": "Function (FirstStreamingTileIndex = 0 ; } uint32)",
    "insertText": "GetNumTiles()"
  },
  {
    "label": "GetNumStreamingTiles()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumStreamingTiles()"
  },
  {
    "label": "HasRootTile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasRootTile()"
  },
  {
    "label": "GetRootTileSize()",
    "kind": "Method",
    "detail": "Function (const uint32 RootTileSize = TileOffset<FirstStreamingTileIndex ? 0 :)",
    "insertText": "GetRootTileSize()"
  },
  {
    "label": "GetTileInfo()",
    "kind": "Method",
    "detail": "Function (OutMemoryOffset = TileDataOffsets [ TileOffset ] - RootTileSize ; const uint32 ReadEnd = TileDataOffsets [ TileOffset + TileCount ] - RootTileSize ; OutMemorySize = ReadEnd - OutMemoryOffset ; } FTileInfo)",
    "insertText": "GetTileInfo(uint32 TileIndex, uint32 FormatSizeA, uint32 FormatSizeB)"
  },
  {
    "label": "GetNumVoxelsInTileRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNumVoxelsInTileRange(uint32 TileOffset, uint32 TileCount, uint32 FormatSizeA, uint32 FormatSizeB, const TBitArray<>* OptionalValidTiles, uint32& OutNumVoxelsA, uint32& OutNumVoxelsB)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} ; enum EResourceFlag : uint32 { EResourceFlag_StreamingDataInDDC = 1<<0 u,} ; struct FResources { public : FHeader Header ; uint32 ResourceFlags = 0 ; int32 NumMipLevels = 0 ; FTileStreamingMetaData StreamingMetaData ; TArray<uint8> RootData ; FByteBulkData StreamableMipLevels ; FPageTopology Topology ; # if WITH_EDITORONLY_DATA FString ResourceName ; FIoHash DDCKeyHash ; TArray<TStaticArray<uint8,1 2>> DDCChunkIds ; TArray<uint32> DDCChunkMaxTileIndices ; # endif void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, bool bCooked)"
  },
  {
    "label": "HasStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStreamingData()"
  },
  {
    "label": "DropBulkData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DropBulkData()"
  },
  {
    "label": "HasBuildFromDDCError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBuildFromDDCError()"
  },
  {
    "label": "SetHasBuildFromDDCError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasBuildFromDDCError(bool bHasError)"
  },
  {
    "label": "RebuildBulkDataFromCacheAsync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RebuildBulkDataFromCacheAsync(const UObject* Owner, bool& bFailed)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Build(USparseVolumeTextureFrame* Owner, UE::Serialization::FEditorBulkData& SourceData)"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cache(USparseVolumeTextureFrame* Owner, UE::Serialization::FEditorBulkData& SourceData, bool bLocalCachingOnly)"
  },
  {
    "label": "SetDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefault(EPixelFormat FormatA, EPixelFormat FormatB, const FVector4f& FallbackValueA, const FVector4f& FallbackValueB)"
  },
  {
    "label": "IsInitialState()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_EDITORONLY_DATA enum class EDDCRebuildState : uint8 { Initial,InitialAfterFailed,Pending,Succeeded,Failed,} ; bool)",
    "insertText": "IsInitialState(EDDCRebuildState State)"
  },
  {
    "label": "EndRebuildBulkDataFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRebuildBulkDataFromCache()"
  },
  {
    "label": "CompressTiles()",
    "kind": "Method",
    "detail": "Function (# endif FTileStreamingMetaData)",
    "insertText": "CompressTiles(const FPageTopology& Topology, const struct FDerivedTextureData& DerivedTextureData, TArray<uint8>& OutRootBulkData, TArray64<uint8>& OutStreamingBulkData)"
  },
  {
    "label": "GetHeader()",
    "kind": "Method",
    "detail": "Function (} ; class FTextureRenderResources : public::FRenderResource { class FStreamingManager ; public : const FHeader&)",
    "insertText": "GetHeader()"
  },
  {
    "label": "GetPhysicalTileDataATexture()",
    "kind": "Method",
    "detail": "Function (} FRHITextureReference*)",
    "insertText": "GetPhysicalTileDataATexture()"
  },
  {
    "label": "GetPhysicalTileDataBTexture()",
    "kind": "Method",
    "detail": "Function (} FRHITextureReference*)",
    "insertText": "GetPhysicalTileDataBTexture()"
  },
  {
    "label": "GetPackedUniforms()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPackedUniforms(FUintVector4& OutPacked0, FUintVector4& OutPacked1)"
  },
  {
    "label": "SetGlobalVolumeResolution_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalVolumeResolution_GameThread(const FIntVector3& GlobalVolumeResolution)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FHeader Header ; FIntVector3 GlobalVolumeResolution = FIntVector3::ZeroValue ; FIntVector3 TileDataTextureResolution = FIntVector3::ZeroValue ; int32 FrameIndex = INDEX_NONE ; int32 NumLogicalMipLevels = 0 ; FTextureReferenceRHIRef PageTableTextureReferenceRHI ; FTextureReferenceRHIRef PhysicalTileDataATextureReferenceRHI ; FTextureReferenceRHIRef PhysicalTileDataBTextureReferenceRHI ; } ; } } FArchive&)",
    "insertText": "operator(FArchive& Ar, UE::SVT::FHeader& Header)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, UE::SVT::FPageTopology::FMip& Mip)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum ESparseVolumeTextureShaderUniform { ESparseVolumeTexture_TileSize,ESparseVolumeTexture_PageTableSize,ESparseVolumeTexture_UVScale,ESparseVolumeTexture_UVBias,ESparseVolumeTexture_Count,} ;)",
    "insertText": "UCLASS(MinimalAPI, ClassGroup = Rendering, BlueprintType)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API USparseVolumeTexture()"
  },
  {
    "label": "USparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "USparseVolumeTexture()"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat)",
    "insertText": "GetFormat(int32 AttributesIndex)"
  },
  {
    "label": "GetTextureAddressX()",
    "kind": "Method",
    "detail": "Function (} TextureAddress)",
    "insertText": "GetTextureAddressX()"
  },
  {
    "label": "GetUniformParameter()",
    "kind": "Method",
    "detail": "Function (FVector4)",
    "insertText": "GetUniformParameter(int32 Index)"
  },
  {
    "label": "GetUniformParameterType()",
    "kind": "Method",
    "detail": "Function (} UE::Shader::EValueType)",
    "insertText": "GetUniformParameterType(int32 Index)"
  },
  {
    "label": "NotifyMaterials()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR enum class ENotifyMaterialsEffectOnShaders { Default,DoesNotInvalidate } ; void)",
    "insertText": "NotifyMaterials(const ENotifyMaterialsEffectOnShaders EffectOnShaders = ENotifyMaterialsEffectOnShaders::Default)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "USparseVolumeTextureFrame()",
    "kind": "Method",
    "detail": "Function (class UStreamableSparseVolumeTexture ; public :)",
    "insertText": "USparseVolumeTextureFrame()"
  },
  {
    "label": "GetFrameAndIssueStreamingRequest()",
    "kind": "Method",
    "detail": "Function (USparseVolumeTextureFrame*)",
    "insertText": "GetFrameAndIssueStreamingRequest(USparseVolumeTexture* SparseVolumeTexture, uint32 StreamingInstanceKey, float FrameRate, float FrameIndex, float MipLevel, bool bBlocking, bool bHasValidFrameRate)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(USparseVolumeTexture* InOwner, int32 InFrameIndex, const FTransform& InFrameTransform, UE::SVT::FTextureData& UncookedFrame)"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFrameIndex()"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "Cache(bool bSkipDDCAndSetResourcesToDefault)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "BeginCacheForCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "IsCachedCookedPlatformDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachedCookedPlatformDataLoaded(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "WillNeverCacheCookedPlatformDataAgain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillNeverCacheCookedPlatformDataAgain()"
  },
  {
    "label": "ClearCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCachedCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ClearAllCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCachedCookedPlatformData()"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetNumFrames()"
  },
  {
    "label": "GetFrameTransform()",
    "kind": "Method",
    "detail": "Function (} FTransform)",
    "insertText": "GetFrameTransform()"
  },
  {
    "label": "GetFallbackValue()",
    "kind": "Method",
    "detail": "Function (} FVector4f)",
    "insertText": "GetFallbackValue(int32 AttributesIndex)"
  },
  {
    "label": "GetTextureAddressY()",
    "kind": "Method",
    "detail": "Function (} TextureAddress)",
    "insertText": "GetTextureAddressY()"
  },
  {
    "label": "GetTextureAddressZ()",
    "kind": "Method",
    "detail": "Function (} TextureAddress)",
    "insertText": "GetTextureAddressZ()"
  },
  {
    "label": "GetTextureRenderResources()",
    "kind": "Method",
    "detail": "Function (} const UE::SVT::FTextureRenderResources*)",
    "insertText": "GetTextureRenderResources()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(VisibleAnywhere, Category = \"Texture\", AssetRegistrySearchable)"
  },
  {
    "label": "UStreamableSparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UStreamableSparseVolumeTexture()"
  },
  {
    "label": "BeginInitialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginInitialize(int32 NumExpectedFrames)"
  },
  {
    "label": "AppendFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendFrame(UE::SVT::FTextureData& UncookedFrame, const FTransform& FrameTransform)"
  },
  {
    "label": "EndInitialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndInitialize()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const TArrayView<UE::SVT::FTextureData>& UncookedData, const TArrayView<FTransform>& FrameTransforms)"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (USparseVolumeTextureFrame*)",
    "insertText": "GetFrame(int32 FrameIndex)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "AddAssetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetUserData(UAssetUserData* InUserData)"
  },
  {
    "label": "RemoveUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (UAssetUserData*)",
    "insertText": "GetAssetUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataArray()",
    "kind": "Method",
    "detail": "Function (const TArray<UAssetUserData*>*)",
    "insertText": "GetAssetUserDataArray()"
  },
  {
    "label": "GetNumMipLevels()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumMipLevels()"
  },
  {
    "label": "GetVolumeResolution()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetVolumeResolution()"
  },
  {
    "label": "OnAddExtraObjectsToDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddExtraObjectsToDelete(const TArray<UObject*>& InObjectsToDelete, TSet<UObject*>& OutSecondaryObjects)"
  },
  {
    "label": "RecacheFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecacheFrames()"
  },
  {
    "label": "ShouldRegisterDelegates()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "ShouldRegisterDelegates()"
  },
  {
    "label": "RegisterEditorDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEditorDelegates()"
  },
  {
    "label": "UnregisterEditorDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterEditorDelegates()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API UStaticSparseVolumeTexture()"
  },
  {
    "label": "UStaticSparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UStaticSparseVolumeTexture()"
  },
  {
    "label": "AppendFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AppendFrame(UE::SVT::FTextureData& UncookedFrame, const FTransform& InFrameTransform)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API UAnimatedSparseVolumeTexture()"
  },
  {
    "label": "UAnimatedSparseVolumeTexture()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UAnimatedSparseVolumeTexture()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(BlueprintReadWrite, Category = \"Animation\")"
  },
  {
    "label": "UAnimatedSparseVolumeTextureController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAnimatedSparseVolumeTextureController()"
  }
]