[
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "LEVELEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEVELEDITOR_API"
  },
  {
    "label": "GizmoManipulationStarted()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Component / ComponentElementEditorViewportInteractionCustomization . h \" # include \" Elements / Framework / TypedElementAssetEditorLevelEditorViewportClientMixin . h \" class FLevelEditorViewportClient ; class FComponentElementLevelEditorViewportInteractionCustomization : public FComponentElementEditorViewportInteractionCustomization,public FTypedElementAssetEditorLevelEditorViewportClientMixin { public : void)",
    "insertText": "GizmoManipulationStarted(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GizmoManipulationDeltaUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GizmoManipulationDeltaUpdate(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode, const EAxisList::Type InDragAxis, const FInputDeviceState& InInputState, const FTransform& InDeltaTransform, const FVector& InPivotLocation)"
  },
  {
    "label": "GizmoManipulationStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GizmoManipulationStopped(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode, const ETypedElementViewportInteractionGizmoManipulationType InManipulationType)"
  },
  {
    "label": "ValidateScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateScale(const FVector& InOriginalPreDragScale, const EAxisList::Type InDragAxis, const FVector& InCurrentScale, const FVector& InBoxExtent, FVector& InOutScaleDelta, bool bInCheckSmallExtent)"
  },
  {
    "label": "GetEditTransformProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "GetEditTransformProperty(const UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "ModifyScale()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ModifyScale(USceneComponent* InComponent, const EAxisList::Type InDragAxis, FVector& ScaleDelta)"
  }
]