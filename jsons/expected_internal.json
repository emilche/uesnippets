[
  {
    "label": "ok",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ok"
  },
  {
    "label": "unexpected",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "unexpected"
  },
  {
    "label": "unexpect_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unexpect_t"
  },
  {
    "label": "expected",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "expected"
  },
  {
    "label": "IsOk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsOk"
  },
  {
    "label": "IsUnexpected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsUnexpected"
  },
  {
    "label": "IsExpected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsExpected"
  },
  {
    "label": "IsConstructibleOrConvertible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsConstructibleOrConvertible"
  },
  {
    "label": "IsAnyConstructibleOrConvertible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsAnyConstructibleOrConvertible"
  },
  {
    "label": "IsValidConversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsValidConversion"
  },
  {
    "label": "IsValidVoidConversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsValidVoidConversion"
  },
  {
    "label": "IsValidValueConstruction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsValidValueConstruction"
  },
  {
    "label": "AreValueAndErrorConvertible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AreValueAndErrorConvertible"
  },
  {
    "label": "ExpectedImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExpectedImpl"
  },
  {
    "label": "unexpect_t()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TYPES_EXPECTED_INTERNAL_H_ # define BASE_TYPES_EXPECTED_INTERNAL_H_ # include<type_traits> # include<utility> # include \" base / check . h \" # include \" base / template_util . h \" # include \" third_party / abseil - cpp / absl / types / variant . h \" # include \" third_party / abseil - cpp / absl / utility / utility . h \" namespace base { template<T> class ok ; template<E> class unexpected ; struct unexpect_t {)",
    "insertText": "unexpect_t()"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (} ; unexpect_t unexpect { } ; template<T,E,bool = std::is_void_v<T>> class expected ; namespace internal { template<T> struct IsOk : std::false_type { } ; template<T> struct IsOk<ok<T>> : std::true_type { } ; template<T> struct IsUnexpected : std::false_type { } ; template<E> struct IsUnexpected<unexpected<E>> : std::true_type { } ; template<T> struct IsExpected : std::false_type { } ; template<T,E> struct IsExpected<expected<T,E>> : std::true_type { } ; template<T,U> struct IsConstructibleOrConvertible : std::disjunction<std::is_constructible<T,U>,std::is_convertible<U,T>> { } ; template<T,U> struct IsAnyConstructibleOrConvertible : std::disjunction<IsConstructibleOrConvertible<T,U&>,IsConstructibleOrConvertible<T,U&&>,IsConstructibleOrConvertible<T,const U&>,IsConstructibleOrConvertible<T,const U&&>> { } ; template<T,E,UF,GF,ExUG = expected<remove_cvref_t<UF>,remove_cvref_t<GF>>> struct IsValidConversion : std::conjunction<std::is_constructible<T,UF>,std::is_constructible<E,GF>,std::negation<IsAnyConstructibleOrConvertible<T,ExUG>>,std::negation<IsAnyConstructibleOrConvertible<unexpected<E>,ExUG>>> { } ; template<E,U,GF,ExUG = expected<U,remove_cvref_t<GF>>> struct IsValidVoidConversion : std::conjunction<std::is_void<U>,std::is_constructible<E,GF>,std::negation<IsAnyConstructibleOrConvertible<unexpected<E>,ExUG>>> { } ; template<T,E,U> struct IsValidValueConstruction : std::conjunction<std::is_constructible<T,U>,std::negation<std::is_same<remove_cvref_t<U>,absl::in_place_t>>,std::negation<std::is_same<remove_cvref_t<U>,expected<T,E>>>,std::negation<IsOk<remove_cvref_t<U>>>,std::negation<IsUnexpected<remove_cvref_t<U>>>> { } ; template<T,E,UF,GF> struct AreValueAndErrorConvertible : std::conjunction<std::is_convertible<UF,T>,std::is_convertible<GF,E>> { } ; template<T> using EnableIfDefaultConstruction = std::enable_if_t<std::is_default_constructible_v<T>,int> ; template<T,E,UF,GF> using EnableIfExplicitConversion = std::enable_if_t<std::conjunction_v<IsValidConversion<T,E,UF,GF>,std::negation<AreValueAndErrorConvertible<T,E,UF,GF>>>,int> ; template<T,E,UF,GF> using EnableIfImplicitConversion = std::enable_if_t<std::conjunction_v<IsValidConversion<T,E,UF,GF>,AreValueAndErrorConvertible<T,E,UF,GF>>,int> ; template<E,U,GF> using EnableIfExplicitVoidConversion = std::enable_if_t<std::conjunction_v<IsValidVoidConversion<E,U,GF>,std::negation<std::is_convertible<GF,E>>>,int> ; template<E,U,GF> using EnableIfImplicitVoidConversion = std::enable_if_t<std::conjunction_v<IsValidVoidConversion<E,U,GF>,std::is_convertible<GF,E>>,int> ; template<T,U> using EnableIfOkValueConstruction = std::enable_if_t<std::conjunction_v<std::negation<std::is_same<remove_cvref_t<U>,ok<T>>>,std::negation<std::is_same<remove_cvref_t<U>,absl::in_place_t>>,std::is_constructible<T,U>>,int> ; template<T,U> using EnableIfUnexpectedValueConstruction = std::enable_if_t<std::conjunction_v<std::negation<std::is_same<remove_cvref_t<U>,unexpected<T>>>,std::negation<std::is_same<remove_cvref_t<U>,absl::in_place_t>>,std::is_constructible<T,U>>,int> ; template<T,E,U> using EnableIfExplicitValueConstruction = std::enable_if_t<std::conjunction_v<IsValidValueConstruction<T,E,U>,std::disjunction<std::negation<std::is_convertible<U,T>>,std::is_convertible<U,E>>>,int> ; template<T,E,U> using EnableIfImplicitValueConstruction = std::enable_if_t<std::conjunction_v<IsValidValueConstruction<T,E,U>,std::conjunction<std::is_convertible<U,T>,std::negation<std::is_convertible<U,E>>>>,int> ; template<T,U> using EnableIfExplicitConstruction = std::enable_if_t<std::conjunction_v<std::is_constructible<T,U>,std::negation<std::is_convertible<U,T>>>,int> ; template<T,U> using EnableIfImplicitConstruction = std::enable_if_t<std::conjunction_v<std::is_constructible<T,U>,std::is_convertible<U,T>>,int> ; template<T,E,U> using EnableIfValueAssignment = std::enable_if_t<std::conjunction_v<std::negation<std::is_same<expected<T,E>,remove_cvref_t<U>>>,std::negation<IsOk<remove_cvref_t<U>>>,std::negation<IsUnexpected<remove_cvref_t<U>>>,std::is_constructible<T,U>,std::is_assignable<T&,U>>,int> ; template<T> using EnableIfCopyConstructible = std::enable_if_t<std::is_copy_constructible_v<T>,int> ; template<T> using EnableIfMoveConstructible = std::enable_if_t<std::is_move_constructible_v<T>,int> ; template<T> using EnableIfNotVoid = std::enable_if_t<std::negation_v<std::is_void<T>>,int> ; template<T,E> class ExpectedImpl { public : size_t kValIdx = 1 ; size_t kErrIdx = 2 ; absl::in_place_index_t<1> kValTag { } ; absl::in_place_index_t<2> kErrTag { } ; template<U,G> class ExpectedImpl ; template<LazyT = T,EnableIfDefaultConstruction<LazyT> = 0>)",
    "insertText": "ExpectedImpl() noexcept : data_(kValTag)"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExpectedImpl(const ExpectedImpl& rhs) noexcept : data_(rhs.data_)"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExpectedImpl(ExpectedImpl&& rhs) noexcept : data_(std::move(rhs.data_))"
  },
  {
    "label": "set_is_moved_from()",
    "kind": "Method",
    "detail": "Function (rhs .)",
    "insertText": "set_is_moved_from()"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (} template<U,G>)",
    "insertText": "ExpectedImpl(const ExpectedImpl<U, G>& rhs)"
  },
  {
    "label": "emplace_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace_value(rhs.value())"
  },
  {
    "label": "emplace_error()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "emplace_error(rhs.error())"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (} } template<U,G>)",
    "insertText": "ExpectedImpl(ExpectedImpl<U, G>&& rhs)"
  },
  {
    "label": "emplace_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emplace_value(std::move(rhs.value()))"
  },
  {
    "label": "emplace_error()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "emplace_error(std::move(rhs.error()))"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "ExpectedImpl(decltype(kValTag), Args&&... args) noexcept : data_(kValTag, std::forward<Args>(args)...)"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args>)",
    "insertText": "ExpectedImpl(decltype(kValTag), std::initializer_list<U> il, Args&&... args) noexcept : data_(kValTag, il, std::forward<Args>(args)...)"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "ExpectedImpl(decltype(kErrTag), Args&&... args) noexcept : data_(kErrTag, std::forward<Args>(args)...)"
  },
  {
    "label": "ExpectedImpl()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args>)",
    "insertText": "ExpectedImpl(decltype(kErrTag), std::initializer_list<U> il, Args&&... args) noexcept : data_(kErrTag, il, std::forward<Args>(args)...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ExpectedImpl&)",
    "insertText": "operator(const ExpectedImpl& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (data_ = rhs . data_ ; return* this ; } ExpectedImpl&)",
    "insertText": "operator(ExpectedImpl&& rhs)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (data_ =)",
    "insertText": "move(rhs.data_)"
  },
  {
    "label": "emplace_value()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args> T&)",
    "insertText": "emplace_value(std::initializer_list<U> il, Args&&... args)"
  },
  {
    "label": "emplace_error()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> E&)",
    "insertText": "emplace_error(Args&&... args)"
  },
  {
    "label": "emplace_error()",
    "kind": "Method",
    "detail": "Function (} template<U,. . . Args> E&)",
    "insertText": "emplace_error(std::initializer_list<U> il, Args&&... args)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(ExpectedImpl& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (data_ .)",
    "insertText": "swap(rhs.data_)"
  },
  {
    "label": "has_value()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_value()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "value()"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (} E&)",
    "insertText": "error()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : size_t kNulIdx = 0 ;)",
    "insertText": "static_assert(kNulIdx != kValIdx)"
  },
  {
    "label": "is_moved_from()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_moved_from()"
  },
  {
    "label": "kNulIdx()",
    "kind": "Method",
    "detail": "Function (data_ . template emplace<)",
    "insertText": "kNulIdx()"
  },
  {
    "label": "AndThen()",
    "kind": "Method",
    "detail": "Function (} absl::variant<absl::monostate,T,E> data_ ; } ; template<Exp,F> auto)",
    "insertText": "AndThen(Exp&& exp, F&& f)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using T = remove_cvref_t<)",
    "insertText": "decltype(exp.value())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using E = remove_cvref_t<)",
    "insertText": "decltype(exp.error())"
  },
  {
    "label": "invoke_f()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "invoke_f() -> decltype(auto)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "invoke(std::forward<F>(f))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; using U = remove_cvref_t<)",
    "insertText": "decltype(invoke_f())"
  },
  {
    "label": "OrElse()",
    "kind": "Method",
    "detail": "Function (} template<Exp,F> auto)",
    "insertText": "OrElse(Exp&& exp, F&& f)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using G = remove_cvref_t<std::invoke_result_t<F,)",
    "insertText": "decltype(std::forward<Exp>(exp).error())"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(!std::is_void_v<T>)"
  },
  {
    "label": "G()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "G()"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} } template<Exp,F> auto)",
    "insertText": "Transform(Exp&& exp, F&& f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!exp.has_value())"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(!std::is_void_v<U>)"
  },
  {
    "label": "invoke_f()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "invoke_f()"
  },
  {
    "label": "TransformError()",
    "kind": "Method",
    "detail": "Function (} } template<Exp,F> auto)",
    "insertText": "TransformError(Exp&& exp, F&& f)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(std::is_void_v<T>)"
  },
  {
    "label": "G()",
    "kind": "Method",
    "detail": "Function (} else { return expected<T,)",
    "insertText": "G(absl::in_place, std::forward<Exp>(exp).value())"
  }
]