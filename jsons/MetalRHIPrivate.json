[
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "FMetalSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalSurface"
  },
  {
    "label": "EMTLTextureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMTLTextureType"
  },
  {
    "label": "FMetalBufferFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalBufferFormat"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TMetalResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMetalResourceTraits"
  },
  {
    "label": "EMetalShaderStages",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalShaderStages"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHI . h \" # include \" MetalThirdParty . h \" # include \" PixelFormat . h \" # include \" RHICommandList . h \" # include \" RHIGlobals . h \" class FMetalDevice ; class FMetalSurface ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogMetal, Display, All)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FMetalCommandBufferCompletionHandler, MTL::CommandBuffer*)"
  },
  {
    "label": "METAL_DEBUG_OPTIONS()",
    "kind": "Method",
    "detail": "Function (bool GIsMetalInitialized ; # if PLATFORM_MAC const uint32 BufferOffsetAlignment = 2 5 6 ; const uint32 BufferBackedLinearTextureOffsetAlignment = 1 0 2 4 ; # else const uint32 BufferOffsetAlignment = 1 6 ; const uint32 BufferBackedLinearTextureOffsetAlignment = 6 4 ; # endif const uint32 MetalBufferPageSize = 4 0 9 6 ; # if PLATFORM_MAC const uint32 MetalBufferBytesSize = BufferOffsetAlignment* 2 ; # else const uint32 MetalBufferBytesSize = BufferOffsetAlignment* 3 2 ; # endif # define METAL_USE_METAL_SHADER_CONVERTER PLATFORM_SUPPORTS_BINDLESS_RENDERING # if METAL_USE_METAL_SHADER_CONVERTER THIRD_PARTY_INCLUDES_START # include \" metal_irconverter . h \" # define IR_RUNTIME_METALCPP 1 # define IR_PRIVATE_IMPLEMENTATION 1 # include \" metal_irconverter_runtime . h \" THIRD_PARTY_INCLUDES_END uint64_t kIRStandardHeapBindPoint = 0 ; # endif # define BUFFER_CACHE_MODE MTL::ResourceCPUCacheModeDefaultCache # if PLATFORM_MAC # define BUFFER_MANAGED_MEM MTL::ResourceStorageModeManaged # define BUFFER_STORAGE_MODE MTL::StorageModeShared # define BUFFER_RESOURCE_STORAGE_MANAGED MTL::ResourceStorageModeManaged # define BUFFER_DYNAMIC_REALLOC BUF_AnyDynamic const uint32 MaxMetalStreams = 3 1 ; # else # define BUFFER_MANAGED_MEM 0 # if WITH_IOS_SIMULATOR # define BUFFER_STORAGE_MODE MTL::StorageModePrivate # define BUFFER_RESOURCE_STORAGE_MANAGED MTL::ResourceStorageModePrivate # else # define BUFFER_STORAGE_MODE MTL::StorageModeShared # define BUFFER_RESOURCE_STORAGE_MANAGED MTL::ResourceStorageModeShared # endif # define BUFFER_DYNAMIC_REALLOC BUF_AnyDynamic const uint32 MaxMetalStreams = 3 0 ; # endif enum EMTLTextureType { EMTLTextureTypeCubeArray = 6 } ; # define METAL_SUPPORTS_INDIRECT_ARGUMENT_BUFFERS 1 # define METAL_SUPPORTS_CAPTURE_MANAGER 1 # define METAL_SUPPORTS_TILE_SHADERS 1 bool GMetalSupportsCaptureManager ; struct FMetalBufferFormat { MTL::PixelFormat LinearTextureFormat ; uint8 DataFormat ; } ; FMetalBufferFormat GMetalBufferFormats [ PF_MAX ] ; # define)",
    "insertText": "METAL_DEBUG_OPTIONS(UE_BUILD_SHIPPING || UE_BUILD_TEST) #if METAL_DEBUG_OPTIONS #define METAL_DEBUG_OPTION(Code) Code #else #define METAL_DEBUG_OPTION(Code)"
  },
  {
    "label": "ENABLE_METAL_GPUEVENTS()",
    "kind": "Method",
    "detail": "Function (# ifndef ENABLE_METAL_GPUEVENTS_IN_TEST # define ENABLE_METAL_GPUEVENTS_IN_TEST 0 # endif # define)",
    "insertText": "ENABLE_METAL_GPUEVENTS(UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT || (UE_BUILD_TEST && ENABLE_METAL_GPUEVENTS_IN_TEST)) #define ENABLE_METAL_GPUPROFILE (ENABLE_METAL_GPUEVENTS && 1) #if ENABLE_METAL_GPUPROFILE #define METAL_GPUPROFILE(Code) Code #else #define METAL_GPUPROFILE(Code) #endif #define UNREAL_TO_METAL_BUFFER_INDEX(Index) ((MaxMetalStreams - 1) - Index) #define METAL_TO_UNREAL_BUFFER_INDEX(Index) ((MaxMetalStreams - 1) - Index) #define METAL_NEW_NONNULL_DECL (__clang_major__ >= 9) #if PLATFORM_IOS #define METAL_FATAL_ERROR(Format, ...)"
  },
  {
    "label": "MetalAssert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MetalAssert()"
  },
  {
    "label": "METAL_FATAL_ERROR()",
    "kind": "Method",
    "detail": "Function (} # else # define)",
    "insertText": "METAL_FATAL_ERROR(Format, ...) UE_LOG(LogMetal, Fatal, Format, __VA_ARGS__) #endif #define METAL_FATAL_ASSERT(Condition, Format, ...) if (!(Condition))"
  },
  {
    "label": "METAL_FATAL_ERROR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METAL_FATAL_ERROR(Format, __VA_ARGS__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(METAL_IGNORED) #define METAL_IGNORED(Func) #endif FORCEINLINE bool IsMetalBindlessEnabled()"
  },
  {
    "label": "NOT_SUPPORTED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "NOT_SUPPORTED(Func) UE_LOG(LogMetal, Fatal, TEXT(\"'%s' is not supported\"), TEXT(Func))"
  },
  {
    "label": "GetMetalCubeFace()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMetalCubeFace(ECubeFace Face)"
  },
  {
    "label": "TranslatePrimitiveTopology()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_MAC MTL::PrimitiveTopologyClass)",
    "insertText": "TranslatePrimitiveTopology(uint32 PrimitiveType)"
  },
  {
    "label": "UEToMetalFormat()",
    "kind": "Method",
    "detail": "Function (# endif MTL::PixelFormat)",
    "insertText": "UEToMetalFormat(FMetalDevice& Device, EPixelFormat UEFormat, bool bSRGB)"
  },
  {
    "label": "GetMetalPixelFormatKey()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetMetalPixelFormatKey(MTL::PixelFormat Format)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (template<class T> struct TMetalResourceTraits { } ; template<TRHIType> TMetalResourceTraits<TRHIType>::TConcreteType*)",
    "insertText": "ResourceCast(TRHIType* Resource)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} FMetalSurface*)",
    "insertText": "ResourceCast(FRHITexture* Texture)"
  },
  {
    "label": "ValidateVersion()",
    "kind": "Method",
    "detail": "Function (} MTL::LanguageVersion)",
    "insertText": "ValidateVersion(uint32 Version)"
  },
  {
    "label": "GetRHIShaderFrequency()",
    "kind": "Method",
    "detail": "Function (enum EMetalShaderStages { Vertex,Pixel,# if PLATFORM_SUPPORTS_GEOMETRY_SHADERS Geometry,# endif # if PLATFORM_SUPPORTS_MESH_SHADERS Mesh,Amplification,# endif Compute,Num,} ; EShaderFrequency)",
    "insertText": "GetRHIShaderFrequency(EMetalShaderStages Stage)"
  },
  {
    "label": "FStringToNSString()",
    "kind": "Method",
    "detail": "Function (} NS::String*)",
    "insertText": "FStringToNSString(const FString& InputString)"
  },
  {
    "label": "ShouldUseMemoryless()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUseMemoryless(ETextureCreateFlags Flags)"
  },
  {
    "label": "AllowMSAA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowMSAA()"
  }
]