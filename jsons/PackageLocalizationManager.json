[
  {
    "label": "IPackageLocalizationCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPackageLocalizationCache"
  },
  {
    "label": "FPackageLocalizationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageLocalizationManager"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Misc / CoreDelegates . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class IPackageLocalizationCache ; class FPackageLocalizationManager { public : typedef TFunction<)",
    "insertText": "void(FPackageLocalizationManager&)"
  },
  {
    "label": "PerformLazyInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformLazyInitialization()"
  },
  {
    "label": "InitializeFromLazyCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromLazyCallback(FLazyInitFunc InLazyInitFunc)"
  },
  {
    "label": "InitializeFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromCache(const TSharedRef<IPackageLocalizationCache>& InCache)"
  },
  {
    "label": "InitializeFromDefaultCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromDefaultCache()"
  },
  {
    "label": "FindLocalizedPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindLocalizedPackageName(const FName InSourcePackageName)"
  },
  {
    "label": "FindLocalizedPackageNameForCulture()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindLocalizedPackageNameForCulture(const FName InSourcePackageName, const FString& InCultureName)"
  },
  {
    "label": "InvalidateRootSourcePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateRootSourcePath(const FString& InRootPath)"
  },
  {
    "label": "ConditionalUpdateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalUpdateCache()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FPackageLocalizationManager&)",
    "insertText": "Get()"
  },
  {
    "label": "FindLocalizedPackageNameNoCache()",
    "kind": "Method",
    "detail": "Function (private : FName)",
    "insertText": "FindLocalizedPackageNameNoCache(const FName InSourcePackageName, const FString& InCultureName)"
  }
]