[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "WordSize",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WordSize"
  },
  {
    "label": "ValidationStages",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ValidationStages"
  },
  {
    "label": "OptionalHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OptionalHeader"
  },
  {
    "label": "OPTIONAL_HEADER_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPTIONAL_HEADER_TYPE"
  },
  {
    "label": "OptionalHeaderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OptionalHeaderImpl"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_PE_IMAGE_READER_H_ # define BASE_WIN_PE_IMAGE_READER_H_ # include<stddef . h> # include<stdint . h> # include<windows . h> # include<memory> # include \" base / base_export . h \" namespace base { namespace win { class BASE_EXPORT PeImageReader { public : enum WordSize { WORD_SIZE_32,WORD_SIZE_64,} ; using EnumCertificatesCallback =)",
    "insertText": "bool(*)(uint16_t revision, uint16_t certificate_type, const uint8_t* certificate_data, size_t certificate_data_size, void* context)"
  },
  {
    "label": "PeImageReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeImageReader()"
  },
  {
    "label": "PeImageReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeImageReader(const PeImageReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PeImageReader&)",
    "insertText": "operator(const PeImageReader&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const uint8_t* image_data, size_t image_size)"
  },
  {
    "label": "GetWordSize()",
    "kind": "Method",
    "detail": "Function (WordSize)",
    "insertText": "GetWordSize()"
  },
  {
    "label": "GetDosHeader()",
    "kind": "Method",
    "detail": "Function (const IMAGE_DOS_HEADER*)",
    "insertText": "GetDosHeader()"
  },
  {
    "label": "GetCoffFileHeader()",
    "kind": "Method",
    "detail": "Function (const IMAGE_FILE_HEADER*)",
    "insertText": "GetCoffFileHeader()"
  },
  {
    "label": "GetOptionalHeaderData()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "GetOptionalHeaderData(size_t* optional_data_size)"
  },
  {
    "label": "GetNumberOfSections()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumberOfSections()"
  },
  {
    "label": "GetSectionHeaderAt()",
    "kind": "Method",
    "detail": "Function (const IMAGE_SECTION_HEADER*)",
    "insertText": "GetSectionHeaderAt(size_t index)"
  },
  {
    "label": "GetExportSection()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "GetExportSection(size_t* section_size)"
  },
  {
    "label": "GetNumberOfDebugEntries()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumberOfDebugEntries()"
  },
  {
    "label": "GetDebugEntry()",
    "kind": "Method",
    "detail": "Function (const IMAGE_DEBUG_DIRECTORY*)",
    "insertText": "GetDebugEntry(size_t index, const uint8_t** raw_data, size_t* raw_data_size)"
  },
  {
    "label": "EnumCertificates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumCertificates(EnumCertificatesCallback callback, void* context)"
  },
  {
    "label": "GetSizeOfImage()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "GetSizeOfImage()"
  },
  {
    "label": "OptionalHeader()",
    "kind": "Method",
    "detail": "Function (private : enum ValidationStages { VALID_DOS_HEADER = 1<<0,VALID_PE_SIGNATURE = 1<<1,VALID_COFF_FILE_HEADER = 1<<2,VALID_OPTIONAL_HEADER = 1<<3,VALID_SECTION_HEADERS = 1<<4,} ; class OptionalHeader { public : ~)",
    "insertText": "OptionalHeader()"
  },
  {
    "label": "GetDataDirectoryOffset()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetDataDirectoryOffset()"
  },
  {
    "label": "GetDataDirectorySize()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "GetDataDirectorySize()"
  },
  {
    "label": "GetDataDirectoryEntries()",
    "kind": "Method",
    "detail": "Function (const IMAGE_DATA_DIRECTORY*)",
    "insertText": "GetDataDirectoryEntries()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} ; template<class OPTIONAL_HEADER_TYPE> class OptionalHeaderImpl ; void)",
    "insertText": "Clear()"
  },
  {
    "label": "ValidateDosHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateDosHeader()"
  },
  {
    "label": "ValidatePeSignature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidatePeSignature()"
  },
  {
    "label": "ValidateCoffFileHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateCoffFileHeader()"
  },
  {
    "label": "ValidateOptionalHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateOptionalHeader()"
  },
  {
    "label": "ValidateSectionHeaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateSectionHeaders()"
  },
  {
    "label": "GetOptionalHeaderStart()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "GetOptionalHeaderStart()"
  },
  {
    "label": "GetOptionalHeaderSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetOptionalHeaderSize()"
  },
  {
    "label": "GetDataDirectoryEntryAt()",
    "kind": "Method",
    "detail": "Function (const IMAGE_DATA_DIRECTORY*)",
    "insertText": "GetDataDirectoryEntryAt(size_t index)"
  },
  {
    "label": "FindSectionFromRva()",
    "kind": "Method",
    "detail": "Function (const IMAGE_SECTION_HEADER*)",
    "insertText": "FindSectionFromRva(uint32_t relative_address)"
  },
  {
    "label": "GetImageData()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "GetImageData(size_t index, size_t* data_length)"
  },
  {
    "label": "GetStructureAt()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "GetStructureAt(size_t offset, const T** structure)"
  },
  {
    "label": "GetStructureAt()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "GetStructureAt(size_t offset, size_t structure_size, const T** structure)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* structure = reinterpret_cast<const)",
    "insertText": "T(image_data_ + offset)"
  }
]