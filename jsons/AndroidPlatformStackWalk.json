[
  {
    "label": "FAsyncThreadBackTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncThreadBackTrace"
  },
  {
    "label": "FAndroidPlatformStackWalk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAndroidPlatformStackWalk"
  },
  {
    "label": "ProgramCounterToSymbolInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" GenericPlatform / GenericPlatformStackWalk . h \" struct FAsyncThreadBackTrace { std::atomic<int32> Flag ; int32 Depth ; int StackTraceMaxDepth = 1 0 0 ; uint64 BackTrace [ StackTraceMaxDepth ] ; uint32 ThreadID ; int MaxThreadName = 2 0 ; char ThreadName [ MaxThreadName ] ; } ; struct FAndroidPlatformStackWalk : public FGenericPlatformStackWalk { typedef FGenericPlatformStackWalk Parent ; void)",
    "insertText": "ProgramCounterToSymbolInfo(uint64 ProgramCounter, FProgramCounterSymbolInfo& out_SymbolInfo)"
  },
  {
    "label": "CaptureStackBackTrace()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CaptureStackBackTrace(uint64* BackTrace, uint32 MaxDepth, void* Context = nullptr)"
  },
  {
    "label": "CaptureStackBackTraceViaFramePointerWalking()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CaptureStackBackTraceViaFramePointerWalking(uint64* BackTrace, uint32 MaxDepth)"
  },
  {
    "label": "SymbolInfoToHumanReadableString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SymbolInfoToHumanReadableString(const FProgramCounterSymbolInfo& SymbolInfo, ANSICHAR* HumanReadableString, SIZE_T HumanReadableStringSize)"
  },
  {
    "label": "CaptureThreadStackBackTrace()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CaptureThreadStackBackTrace(uint64 ThreadId, uint64* BackTrace, uint32 MaxDepth, void* Context = nullptr)"
  },
  {
    "label": "CaptureThreadStackBackTraceAsync()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CaptureThreadStackBackTraceAsync(FAsyncThreadBackTrace* BackTrace)"
  },
  {
    "label": "HandleBackTraceSignal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBackTraceSignal(siginfo* Info, void* Context)"
  },
  {
    "label": "InitStackWalking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitStackWalking()"
  }
]