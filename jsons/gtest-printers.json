[
  {
    "label": "ContainerPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContainerPrinter"
  },
  {
    "label": "FunctionPointerPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FunctionPointerPrinter"
  },
  {
    "label": "PointerPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointerPrinter"
  },
  {
    "label": "LookupBlocker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LookupBlocker"
  },
  {
    "label": "StreamPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamPrinter"
  },
  {
    "label": "ProtobufPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProtobufPrinter"
  },
  {
    "label": "ConvertibleToIntegerPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertibleToIntegerPrinter"
  },
  {
    "label": "ConvertibleToStringViewPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertibleToStringViewPrinter"
  },
  {
    "label": "RawBytesPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawBytesPrinter"
  },
  {
    "label": "FallbackPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FallbackPrinter"
  },
  {
    "label": "FindFirstPrinter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindFirstPrinter"
  },
  {
    "label": "FormatForComparison",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatForComparison"
  },
  {
    "label": "UniversalPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniversalPrinter"
  },
  {
    "label": "Visitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Visitor"
  },
  {
    "label": "UniversalTersePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniversalTersePrinter"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_PRINTERS_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_PRINTERS_H_ # include<functional> # include<memory> # include<ostream> # include<sstream> # include<string> # include<tuple> # include<type_traits> # include<utility> # include<vector> # include \" gtest / internal / gtest - internal . h \" # include \" gtest / internal / gtest - port . h \" namespace testing { namespace internal { template<T> void)",
    "insertText": "UniversalPrint(const T& value, ::std::ostream* os)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (struct ContainerPrinter { template<T,=)",
    "insertText": "enable_if(sizeof(IsContainerTest<T>(0)) == sizeof(IsContainer)) && !IsRecursiveContainer<T>::value>::type> static void PrintValue(const T& container, std::ostream* os)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const size_t kMaxCount = 3 2 ;* os<<' { ' ; size_t count = 0 ;)",
    "insertText": "for(auto&& elem : container)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* os<<',' ;)",
    "insertText": "if(count == kMaxCount)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (* os<<\" . . . \" ; break ; } }* os<<' ' ;)",
    "insertText": "UniversalPrint(elem, os)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + count ; })",
    "insertText": "if(count > 0)"
  },
  {
    "label": "PrintValue()",
    "kind": "Method",
    "detail": "Function (* os<<' ' ; }* os<<' } ' ; } } ; struct FunctionPointerPrinter { template<T,= std::enable_if<std::is_function<T>::value>::type> void)",
    "insertText": "PrintValue(T* p, ::std::ostream* os)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (* os<<\" NULL \" ; } else {* os<<reinterpret_cast<const)",
    "insertText": "void(p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* os<<\" NULL \" ; } else {* os<<p ; } } } ; namespace internal_stream_operator_without_lexical_name_lookup { struct LookupBlocker { } ; void)",
    "insertText": "operator(LookupBlocker, LookupBlocker)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (struct StreamPrinter { template<T,= std::enable_if<! std::is_member_pointer<T>::value>::type,=)",
    "insertText": "decltype(std::declval<std::ostream&>() << std::declval<const T&>())> static void PrintValue(const T& value, ::std::ostream* os)"
  },
  {
    "label": "PrintValue()",
    "kind": "Method",
    "detail": "Function (* os<<value ; } } ; } struct ProtobufPrinter { const size_t kProtobufOneLinerMaxLength = 5 0 ; template<T,= std::enable_if<internal::HasDebugStringAndShortDebugString<T>::value>::type> void)",
    "insertText": "PrintValue(const T& value, ::std::ostream* os)"
  },
  {
    "label": "ShortDebugString()",
    "kind": "Method",
    "detail": "Function (std::string pretty_str = value .)",
    "insertText": "ShortDebugString()"
  },
  {
    "label": "DebugString()",
    "kind": "Method",
    "detail": "Function (pretty_str = \" \\ n \" + value .)",
    "insertText": "DebugString()"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (}*)",
    "insertText": "os(\"<\" + pretty_str + \">\")"
  },
  {
    "label": "PrintValue()",
    "kind": "Method",
    "detail": "Function (} } ; struct ConvertibleToIntegerPrinter { void)",
    "insertText": "PrintValue(internal::BiggestInt value, ::std::ostream* os)"
  },
  {
    "label": "PrintValue()",
    "kind": "Method",
    "detail": "Function (* os<<value ; } } ; struct ConvertibleToStringViewPrinter { # if GTEST_INTERNAL_HAS_STRING_VIEW void)",
    "insertText": "PrintValue(internal::StringView value, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UniversalPrint(value, os)"
  },
  {
    "label": "PrintBytesInObjectTo()",
    "kind": "Method",
    "detail": "Function (} # endif } ; GTEST_API_ void)",
    "insertText": "PrintBytesInObjectTo(const unsigned char* obj_bytes, size_t count, ::std::ostream* os)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (struct RawBytesPrinter { template<T,size_t =)",
    "insertText": "sizeof(T)> static void PrintValue(const T& value, ::std::ostream* os)"
  },
  {
    "label": "PrintBytesInObjectTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintBytesInObjectTo(static_cast<const unsigned char*>( reinterpret_cast<const void*>(std::addressof(value))), sizeof(value), os)"
  },
  {
    "label": "PrintValue()",
    "kind": "Method",
    "detail": "Function (} } ; struct FallbackPrinter { template<T> void)",
    "insertText": "PrintValue(const T&, ::std::ostream* os)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os(incomplete type)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,E,Printer,. . . Printers> struct FindFirstPrinter : FindFirstPrinter<T,E,Printers . . .> { } ; template<T,Printer,. . . Printers> struct FindFirstPrinter<T,)",
    "insertText": "decltype(Printer::PrintValue(std::declval<const T&>(), nullptr))"
  },
  {
    "label": "PrintWithFallback()",
    "kind": "Method",
    "detail": "Function (using type = Printer ; } ; template<T> void)",
    "insertText": "PrintWithFallback(const T& value, ::std::ostream* os)"
  },
  {
    "label": "PrintValue()",
    "kind": "Method",
    "detail": "Function (using Printer = FindFirstPrinter<T,void,ContainerPrinter,FunctionPointerPrinter,PointerPrinter,internal_stream_operator_without_lexical_name_lookup::StreamPrinter,ProtobufPrinter,ConvertibleToIntegerPrinter,ConvertibleToStringViewPrinter,RawBytesPrinter,FallbackPrinter>::type ;)",
    "insertText": "PrintValue(value, os)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} template<ToPrint,OtherOperand> class FormatForComparison { public :::std::string)",
    "insertText": "Format(const ToPrint& value)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} } ; template<ToPrint,size_t N,OtherOperand> class FormatForComparison<ToPrint [ N ],OtherOperand> { public :::std::string)",
    "insertText": "Format(const ToPrint* value)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(CharType)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (\\ public : \\::std::string)",
    "insertText": "Format(CharType* value)"
  },
  {
    "label": "PrintToString()",
    "kind": "Method",
    "detail": "Function (\\ return::)",
    "insertText": "PrintToString(static_cast<const void*>(value))"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(char)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const char)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(wchar_t)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const wchar_t)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (# ifdef __cpp_lib_char8_t)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(char8_t)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const char8_t)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(char16_t)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const char16_t)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(char32_t)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const char32_t)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (# undef GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_ # define)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(CharType, OtherStringType)"
  },
  {
    "label": "PrintToString()",
    "kind": "Method",
    "detail": "Function (\\ return::)",
    "insertText": "PrintToString(value)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(char, ::std::string)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const char, ::std::string)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (# ifdef __cpp_char8_t)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(char8_t, ::std::u8string)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const char8_t, ::std::u8string)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(char16_t, ::std::u16string)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const char16_t, ::std::u16string)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(char32_t, ::std::u32string)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const char32_t, ::std::u32string)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (# if GTEST_HAS_STD_WSTRING)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(wchar_t, ::std::wstring)"
  },
  {
    "label": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const wchar_t, ::std::wstring)"
  },
  {
    "label": "FormatForComparisonFailureMessage()",
    "kind": "Method",
    "detail": "Function (# endif # undef GTEST_IMPL_FORMAT_C_STRING_AS_STRING_ template<T1,T2> std::string)",
    "insertText": "FormatForComparisonFailureMessage(const T1& value, const T2&)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} template<T> class UniversalPrinter ; template<T> void)",
    "insertText": "PrintTo(const T& value, ::std::ostream* os)"
  },
  {
    "label": "PrintWithFallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintWithFallback(value, os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} GTEST_API_ void)",
    "insertText": "PrintTo(unsigned char c, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "PrintTo(signed char c, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(char c, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(static_cast<unsigned char>(c), os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintTo(bool x, ::std::ostream* os)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os(x ? \"true\" : \"false\")"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} GTEST_API_ void)",
    "insertText": "PrintTo(wchar_t wc, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "PrintTo(char32_t c, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(char16_t c, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(ImplicitCast_<char32_t>(c), os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} # ifdef __cpp_char8_t void)",
    "insertText": "PrintTo(char8_t c, ::std::ostream* os)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # if)",
    "insertText": "defined(__SIZEOF_INT128__) GTEST_API_ void PrintTo(__uint128_t v, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "PrintTo(__int128_t v, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (# endif GTEST_API_ void)",
    "insertText": "PrintTo(const char* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(char* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(ImplicitCast_<const char*>(s), os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintTo(const signed char* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(ImplicitCast_<const void*>(s), os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintTo(signed char* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintTo(const unsigned char* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintTo(unsigned char* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} # ifdef __cpp_char8_t GTEST_API_ void)",
    "insertText": "PrintTo(const char8_t* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(char8_t* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(ImplicitCast_<const char8_t*>(s), os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} # endif GTEST_API_ void)",
    "insertText": "PrintTo(const char16_t* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(char16_t* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(ImplicitCast_<const char16_t*>(s), os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} GTEST_API_ void)",
    "insertText": "PrintTo(const char32_t* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(char32_t* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(ImplicitCast_<const char32_t*>(s), os)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(_MSC_VER) || defined(_NATIVE_WCHAR_T_DEFINED) GTEST_API_ void PrintTo(const wchar_t* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(wchar_t* s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(ImplicitCast_<const wchar_t*>(s), os)"
  },
  {
    "label": "PrintRawArrayTo()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> void)",
    "insertText": "PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UniversalPrint(a[0], os)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (* os<<\",\" ;)",
    "insertText": "UniversalPrint(a[i], os)"
  },
  {
    "label": "PrintStringTo()",
    "kind": "Method",
    "detail": "Function (} } GTEST_API_ void)",
    "insertText": "PrintStringTo(const ::std::string& s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(const ::std::string& s, ::std::ostream* os)"
  },
  {
    "label": "PrintStringTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintStringTo(s, os)"
  },
  {
    "label": "PrintU8StringTo()",
    "kind": "Method",
    "detail": "Function (} # ifdef __cpp_char8_t GTEST_API_ void)",
    "insertText": "PrintU8StringTo(const ::std::u8string& s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(const ::std::u8string& s, ::std::ostream* os)"
  },
  {
    "label": "PrintU8StringTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintU8StringTo(s, os)"
  },
  {
    "label": "PrintU16StringTo()",
    "kind": "Method",
    "detail": "Function (} # endif GTEST_API_ void)",
    "insertText": "PrintU16StringTo(const ::std::u16string& s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(const ::std::u16string& s, ::std::ostream* os)"
  },
  {
    "label": "PrintU16StringTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintU16StringTo(s, os)"
  },
  {
    "label": "PrintU32StringTo()",
    "kind": "Method",
    "detail": "Function (} GTEST_API_ void)",
    "insertText": "PrintU32StringTo(const ::std::u32string& s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(const ::std::u32string& s, ::std::ostream* os)"
  },
  {
    "label": "PrintU32StringTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintU32StringTo(s, os)"
  },
  {
    "label": "PrintWideStringTo()",
    "kind": "Method",
    "detail": "Function (} # if GTEST_HAS_STD_WSTRING GTEST_API_ void)",
    "insertText": "PrintWideStringTo(const ::std::wstring& s, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(const ::std::wstring& s, ::std::ostream* os)"
  },
  {
    "label": "PrintWideStringTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintWideStringTo(s, os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} # endif # if GTEST_INTERNAL_HAS_STRING_VIEW void)",
    "insertText": "PrintTo(internal::StringView sp, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(::std::string(sp), os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "PrintTo(std::nullptr_t, ::std::ostream* os)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os(nullptr)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} # if GTEST_HAS_RTTI void)",
    "insertText": "PrintTo(const std::type_info& info, std::ostream* os)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (* os<<)",
    "insertText": "GetTypeName(info)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> void)",
    "insertText": "PrintTo(std::reference_wrapper<T> ref, ::std::ostream* os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (UniversalPrinter<T&)",
    "insertText": "Print(ref.get(), os)"
  },
  {
    "label": "VoidifyPointer()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "VoidifyPointer(const void* p)"
  },
  {
    "label": "PrintSmartPointer()",
    "kind": "Method",
    "detail": "Function (} template<T,Ptr> void)",
    "insertText": "PrintSmartPointer(const Ptr& ptr, std::ostream* os, char)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (} else {*)",
    "insertText": "os(\" << (VoidifyPointer)(ptr.get()) << \")"
  },
  {
    "label": "PrintSmartPointer()",
    "kind": "Method",
    "detail": "Function (} } template<T,Ptr,= std::enable_if<! std::is_void<T>::value&& ! std::is_array<T>::value>::type> void)",
    "insertText": "PrintSmartPointer(const Ptr& ptr, std::ostream* os, int)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (} else {*)",
    "insertText": "os(ptr = \" << (VoidifyPointer)(ptr.get()) << \", value = \"; UniversalPrinter<T>::Print(*ptr, os); *os << \")"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} } template<T,D> void)",
    "insertText": "PrintTo(const std::unique_ptr<T, D>& ptr, std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PrintTo(const std::shared_ptr<T>& ptr, std::ostream* os)"
  },
  {
    "label": "PrintTupleTo()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "PrintTupleTo(const T&, std::integral_constant<size_t, 0>, ::std::ostream*)"
  },
  {
    "label": "PrintTupleTo()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t I> void)",
    "insertText": "PrintTupleTo(const T& t, std::integral_constant<size_t, I>, ::std::ostream* os)"
  },
  {
    "label": "PrintTupleTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTupleTo(t, std::integral_constant<size_t, I - 1>(), os)"
  },
  {
    "label": "GTEST_INTENTIONAL_CONST_COND_PUSH_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_INTENTIONAL_CONST_COND_PUSH_() if (I > 1)"
  },
  {
    "label": "GTEST_INTENTIONAL_CONST_COND_POP_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_INTENTIONAL_CONST_COND_POP_()"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} UniversalPrinter<std::tuple_element<I - 1,T>::type)",
    "insertText": "Print(std::get<I - 1>(t), os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} template<. . . Types> void)",
    "insertText": "PrintTo(const ::std::tuple<Types...>& t, ::std::ostream* os)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os(\"; PrintTupleTo(t, std::integral_constant<size_t, sizeof...(Types)>(), os); *os << \")"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (} template<T1,T2> void)",
    "insertText": "PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os('; UniversalPrinter<T1>::Print(value.first, os); *os << \", \"; UniversalPrinter<T2>::Print(value.second, os); *os << ')"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_PUSH_()",
    "kind": "Method",
    "detail": "Function (} template<T> class UniversalPrinter { public :)",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_PUSH_(4180) static void Print(const T& value, ::std::ostream* os)"
  },
  {
    "label": "PrintTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTo(value, os)"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_POP_()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_POP_()"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (template<T> class UniversalPrinter<const T> : public UniversalPrinter<T> { } ; # if GTEST_INTERNAL_HAS_ANY template<> class UniversalPrinter<Any> { public : void)",
    "insertText": "Print(const Any& value, ::std::ostream* os)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (* os<<\" value of type \"<<)",
    "insertText": "GetTypeName(value)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} else {* os<<\" no value \" ; } } private : std::string)",
    "insertText": "GetTypeName(const Any& value)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (# if GTEST_HAS_RTTI return)",
    "insertText": "GetTypeName(value.type())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# else static_cast<)",
    "insertText": "void(value)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os('; if (!value) { *os << \"nullopt\"; } else { UniversalPrint(*value, os); } *os << ')"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class UniversalPrinter<)",
    "insertText": "decltype(Nullopt())"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Print(decltype(Nullopt()), ::std::ostream* os)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os(nullopt)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # if GTEST_INTERNAL_HAS_VARIANT template<. . . T> class UniversalPrinter<Variant<T . . .>> { public : void)",
    "insertText": "Print(const Variant<T...>& value, ::std::ostream* os)"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "os('; #if GTEST_HAS_ABSL absl::visit(Visitor{os, value.index()}, value); #else std::visit(Visitor{os, value.index()}, value); #endif *os << ')"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : struct Visitor { template<U> void)",
    "insertText": "operator()(const U& u)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (* os<<\" ' \"<<GetTypeName<)",
    "insertText": "U() << \"(index = \" << index << \")"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UniversalPrint(u, os)"
  },
  {
    "label": "UniversalPrintArray()",
    "kind": "Method",
    "detail": "Function (}::std::ostream* os ; std::size_t index ; } ; } ; # endif template<T> void)",
    "insertText": "UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* os<<\" { } \" ; } else {* os<<\" { \" ; const size_t kThreshold = 1 8 ; const size_t kChunkSize = 8 ;)",
    "insertText": "if(len <= kThreshold)"
  },
  {
    "label": "PrintRawArrayTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintRawArrayTo(begin, len, os)"
  },
  {
    "label": "PrintRawArrayTo()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PrintRawArrayTo(begin, kChunkSize, os)"
  },
  {
    "label": "PrintRawArrayTo()",
    "kind": "Method",
    "detail": "Function (* os<<\",. . .,\" ;)",
    "insertText": "PrintRawArrayTo(begin + len - kChunkSize, kChunkSize, os)"
  },
  {
    "label": "UniversalPrintArray()",
    "kind": "Method",
    "detail": "Function (}* os<<\" } \" ; } } GTEST_API_ void)",
    "insertText": "UniversalPrintArray(const char* begin, size_t len, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrintArray()",
    "kind": "Method",
    "detail": "Function (# ifdef __cpp_char8_t GTEST_API_ void)",
    "insertText": "UniversalPrintArray(const char8_t* begin, size_t len, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrintArray()",
    "kind": "Method",
    "detail": "Function (# endif GTEST_API_ void)",
    "insertText": "UniversalPrintArray(const char16_t* begin, size_t len, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrintArray()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "UniversalPrintArray(const char32_t* begin, size_t len, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrintArray()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "UniversalPrintArray(const wchar_t* begin, size_t len, ::std::ostream* os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (template<T,size_t N> class UniversalPrinter<T [ N ]> { public : void)",
    "insertText": "Print(const T (&a)[N], ::std::ostream* os)"
  },
  {
    "label": "UniversalPrintArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UniversalPrintArray(a, N, os)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (* os<<\" @ \"<<reinterpret_cast<const)",
    "insertText": "void(&value)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (template<T> class UniversalTersePrinter { public : void)",
    "insertText": "Print(const T& value, ::std::ostream* os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,size_t N> class UniversalTersePrinter<T [ N ]> { public : void)",
    "insertText": "Print(const T (&value)[N], ::std::ostream* os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (UniversalPrinter<T [ N ])",
    "insertText": "Print(value, os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class UniversalTersePrinter<const char*> { public : void)",
    "insertText": "Print(const char* str, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (* os<<\" NULL \" ; } else {)",
    "insertText": "UniversalPrint(std::string(str), os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} } } ; template<> class UniversalTersePrinter<char*> : public UniversalTersePrinter<const char*> { } ; # ifdef __cpp_char8_t template<> class UniversalTersePrinter<const char8_t*> { public : void)",
    "insertText": "Print(const char8_t* str, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (* os<<\" NULL \" ; } else {)",
    "insertText": "UniversalPrint(::std::u8string(str), os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} } } ; template<> class UniversalTersePrinter<char8_t*> : public UniversalTersePrinter<const char8_t*> { } ; # endif template<> class UniversalTersePrinter<const char16_t*> { public : void)",
    "insertText": "Print(const char16_t* str, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (* os<<\" NULL \" ; } else {)",
    "insertText": "UniversalPrint(::std::u16string(str), os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} } } ; template<> class UniversalTersePrinter<char16_t*> : public UniversalTersePrinter<const char16_t*> { } ; template<> class UniversalTersePrinter<const char32_t*> { public : void)",
    "insertText": "Print(const char32_t* str, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (* os<<\" NULL \" ; } else {)",
    "insertText": "UniversalPrint(::std::u32string(str), os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} } } ; template<> class UniversalTersePrinter<char32_t*> : public UniversalTersePrinter<const char32_t*> { } ; # if GTEST_HAS_STD_WSTRING template<> class UniversalTersePrinter<const wchar_t*> { public : void)",
    "insertText": "Print(const wchar_t* str, ::std::ostream* os)"
  },
  {
    "label": "UniversalPrint()",
    "kind": "Method",
    "detail": "Function (* os<<\" NULL \" ; } else {)",
    "insertText": "UniversalPrint(::std::wstring(str), os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} } } ; # endif template<> class UniversalTersePrinter<wchar_t*> { public : void)",
    "insertText": "Print(wchar_t* str, ::std::ostream* os)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (UniversalTersePrinter<const wchar_t*)",
    "insertText": "Print(str, os)"
  },
  {
    "label": "UniversalTersePrint()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> void)",
    "insertText": "UniversalTersePrint(const T& value, ::std::ostream* os)"
  },
  {
    "label": "TersePrintPrefixToStrings()",
    "kind": "Method",
    "detail": "Function (} typedef::std::vector<::std::string> Strings ; template<Tuple> void)",
    "insertText": "TersePrintPrefixToStrings(const Tuple&, std::integral_constant<size_t, 0>, Strings*)"
  },
  {
    "label": "TersePrintPrefixToStrings()",
    "kind": "Method",
    "detail": "Function (} template<Tuple,size_t I> void)",
    "insertText": "TersePrintPrefixToStrings(const Tuple& t, std::integral_constant<size_t, I>, Strings* strings)"
  },
  {
    "label": "TersePrintPrefixToStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TersePrintPrefixToStrings(t, std::integral_constant<size_t, I - 1>(), strings)"
  },
  {
    "label": "UniversalTersePrint()",
    "kind": "Method",
    "detail": "Function (::std::stringstream ss ;)",
    "insertText": "UniversalTersePrint(std::get<I - 1>(t), &ss)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (strings ->)",
    "insertText": "push_back(ss.str())"
  },
  {
    "label": "UniversalTersePrintTupleFieldsToStrings()",
    "kind": "Method",
    "detail": "Function (} template<Tuple> Strings)",
    "insertText": "UniversalTersePrintTupleFieldsToStrings(const Tuple& value)"
  },
  {
    "label": "TersePrintPrefixToStrings()",
    "kind": "Method",
    "detail": "Function (Strings result ;)",
    "insertText": "TersePrintPrefixToStrings(value, std::integral_constant<size_t, std::tuple_size<Tuple>::value>(), &result)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (::std::stringstream ss ; internal::UniversalTersePrinter<T)",
    "insertText": "Print(value, &ss)"
  }
]