[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EIso",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EIso"
  },
  {
    "label": "EOrientation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOrientation"
  },
  {
    "label": "ESituation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESituation"
  },
  {
    "label": "ELimit",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELimit"
  },
  {
    "label": "Other()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" namespace UE::CADKernel { enum class ECurve : uint8 { Bezier = 0,BoundedCurve,Composite,Ellipse,Hyperbola,Nurbs,Offset,Parabola,Polyline3D,Polyline2D,Restriction,Segment,Surfacic,SurfacicPolyline,Spline,None,} ; # ifdef CADKERNEL_DEV const TCHAR* CurvesTypesNames [ ] ; # endif enum class ESurface : uint8 { Bezier = 0,Blend01,Blend02,Blend03,Composite,Cone,Coons,Cylinder,Nurbs,Offset,Plane,Revolution,Ruled,Sphere,TabulatedCylinder,Torus,None,} ; # ifdef CADKERNEL_DEV const TCHAR* SurfacesTypesNames [ ] ; # endif enum class ERupture : uint8 { Continuity = 0,Tangency,Curvature,} ; enum EIso : uint8 { IsoU = 0,IsoV = 1,UndefinedIso } ; # ifdef CADKERNEL_DEV const TCHAR* IsoNames [ ] ; # endif EIso)",
    "insertText": "Other(const EIso Iso)"
  }
]