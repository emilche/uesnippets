[
  {
    "label": "COOKEDEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COOKEDEDITOR_API"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FactoryForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Common / TargetPlatformBase . h \" # include \" Interfaces / IPluginManager . h \" # include \" GenericWindowsTargetPlatformControls . h \" # include \" Windows / WindowsPlatformProperties . h \" # if COOKEDEDITOR_WITH_LINUXTARGETPLATFORM # include \" LinuxTargetPlatformSettings . h \" # include \" LinuxTargetPlatformControls . h \" # endif # if COOKEDEDITOR_WITH_MACTARGETPLATFORM # include \" GenericMacTargetPlatformSettings . h \" # include \" GenericMacTargetPlatformControls . h \" # endif typedef TGenericWindowsTargetPlatformSettings<FWindowsPlatformProperties<false,false,false>> FWindowsEditorTargetPlatformSettingsParent ; typedef TGenericWindowsTargetPlatformControls<FWindowsPlatformProperties<false,false,false>> FWindowsEditorTargetPlatformControlsParent ; # if COOKEDEDITOR_WITH_LINUXTARGETPLATFORM typedef TLinuxTargetPlatformSettings<FLinuxPlatformProperties<false,false,false,false>> FLinuxEditorTargetPlatformSettingsParent ; typedef TLinuxTargetPlatformControls<FLinuxPlatformProperties<false,false,false,false>> FLinuxEditorTargetPlatformControlsParent ; # endif # if COOKEDEDITOR_WITH_MACTARGETPLATFORM typedef TGenericMacTargetPlatformSettings<false,false,false> FMacEditorTargetPlatformSettingsParent ; typedef TGenericMacTargetPlatformControls<false,false,false> FMacEditorTargetPlatformControlsParent ; # endif # if PLATFORM_WINDOWS typedef FWindowsEditorTargetPlatformSettingsParent FHostPlatformEditorTargetPlatformSettingsParent ; typedef FWindowsEditorTargetPlatformControlsParent FHostPlatformEditorTargetPlatformControlsParent ; # elif PLATFORM_LINUX typedef FLinuxEditorTargetPlatformSettingsParent FHostPlatformEditorTargetPlatformSettingsParent ; typedef FLinuxEditorTargetPlatformControlsParent FHostPlatformEditorTargetPlatformControlsParent ; # elif PLATFORM_MAC typedef FMacEditorTargetPlatformSettingsParent FHostPlatformEditorTargetPlatformSettingsParent ; typedef FMacEditorTargetPlatformControlsParent FHostPlatformEditorTargetPlatformControlsParent ; # endif class ICookedEditorPackageManager { public : TUniquePtr<ICookedEditorPackageManager>)",
    "insertText": "FactoryForTargetPlatform(bool bIsCookedCooker)"
  },
  {
    "label": "ICookedEditorPackageManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ICookedEditorPackageManager()"
  },
  {
    "label": "InitializeForCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeForCook()"
  },
  {
    "label": "GetEnginePackagesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEnginePackagesToCook(TArray<FName>& PackagesToCook)"
  },
  {
    "label": "GetProjectPackagesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetProjectPackagesToCook(TArray<FName>& PackagesToCook)"
  },
  {
    "label": "AllowObjectToBeCooked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowObjectToBeCooked(const class UObject* Obj)"
  },
  {
    "label": "AllowAssetToBeGathered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowAssetToBeGathered(const struct FAssetData& AssetData)"
  },
  {
    "label": "AllowEnginePluginContentToBeCooked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowEnginePluginContentToBeCooked(const TSharedRef<IPlugin>)"
  },
  {
    "label": "AllowProjectPluginContentToBeCooked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowProjectPluginContentToBeCooked(const TSharedRef<IPlugin>)"
  },
  {
    "label": "GatherAllPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAllPackages(TArray<FName>& PackageNames)"
  },
  {
    "label": "AddPackagesFromPath()",
    "kind": "Method",
    "detail": "Function (protected : enum class EPackageSearchMode { TopDirectoryOnly,Recurse,} ; void)",
    "insertText": "AddPackagesFromPath(TArray<FName>& Packages, const TCHAR* Path, EPackageSearchMode SearchMode)"
  },
  {
    "label": "FilterGatheredPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterGatheredPackages(TArray<FName>& PackageNames)"
  },
  {
    "label": "GatherAllPackagesExceptDisabled()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GatherAllPackagesExceptDisabled(TArray<FName>& PackageNames, const TArray<FString>& DisabledPlugins)"
  },
  {
    "label": "GetConfigArray()",
    "kind": "Method",
    "detail": "Function (} ; class FIniCookedEditorPackageManager : public ICookedEditorPackageManager { TArray<FString> EngineAssetPaths ; TArray<FString> ProjectAssetPaths ; TArray<FString> DisabledPlugins ; TSet<FTopLevelAssetPath> DisallowedObjectClassesToLoad ; TArray<UClass*> DisallowedAssetClassesToGather ; TArray<FString> DisallowedPathsToGather ; bool bIsCookedCooker ; bool bClassesInitialized = false ; TArray<FString>)",
    "insertText": "GetConfigArray(const TCHAR* Key)"
  },
  {
    "label": "InitializeClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeClasses()"
  },
  {
    "label": "FIniCookedEditorPackageManager()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FIniCookedEditorPackageManager(bool bIsCookedCooker)"
  },
  {
    "label": "GetConfigArray()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetConfigArray(const TCHAR* Key, bool bIsCookedCooker)"
  }
]