[
  {
    "label": "UDateRelativeUnit",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateRelativeUnit"
  },
  {
    "label": "UDateAbsoluteUnit",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateAbsoluteUnit"
  },
  {
    "label": "UDateDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateDirection"
  },
  {
    "label": "BreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BreakIterator"
  },
  {
    "label": "RelativeDateTimeCacheData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RelativeDateTimeCacheData"
  },
  {
    "label": "SharedNumberFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedNumberFormat"
  },
  {
    "label": "SharedPluralRules",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedPluralRules"
  },
  {
    "label": "SharedBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedBreakIterator"
  },
  {
    "label": "NumberFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NumberFormat"
  },
  {
    "label": "UnicodeString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeString"
  },
  {
    "label": "FormattedRelativeDateTimeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedRelativeDateTimeData"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "RelativeDateTimeFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RelativeDateTimeFormatter"
  },
  {
    "label": "FormattedRelativeDateTime()",
    "kind": "Method",
    "detail": "Function (# ifndef __RELDATEFMT_H # define __RELDATEFMT_H # include \" unicode / utypes . h \" # include \" unicode / uobject . h \" # include \" unicode / udisplaycontext . h \" # include \" unicode / ureldatefmt . h \" # include \" unicode / locid . h \" # include \" unicode / formattedvalue . h \" # if ! UCONFIG_NO_FORMATTING typedef enum UDateRelativeUnit { UDAT_RELATIVE_SECONDS,UDAT_RELATIVE_MINUTES,UDAT_RELATIVE_HOURS,UDAT_RELATIVE_DAYS,UDAT_RELATIVE_WEEKS,UDAT_RELATIVE_MONTHS,UDAT_RELATIVE_YEARS,# ifndef UDAT_RELATIVE_UNIT_COUNT # endif } UDateRelativeUnit ; typedef enum UDateAbsoluteUnit { UDAT_ABSOLUTE_SUNDAY,UDAT_ABSOLUTE_MONDAY,UDAT_ABSOLUTE_TUESDAY,UDAT_ABSOLUTE_WEDNESDAY,UDAT_ABSOLUTE_THURSDAY,UDAT_ABSOLUTE_FRIDAY,UDAT_ABSOLUTE_SATURDAY,UDAT_ABSOLUTE_DAY,UDAT_ABSOLUTE_WEEK,UDAT_ABSOLUTE_MONTH,UDAT_ABSOLUTE_YEAR,UDAT_ABSOLUTE_NOW,# ifndef UDAT_ABSOLUTE_QUARTER,# endif # ifndef UDAT_ABSOLUTE_UNIT_COUNT = UDAT_ABSOLUTE_NOW + 2 # endif } UDateAbsoluteUnit ; typedef enum UDateDirection { UDAT_DIRECTION_LAST_2,UDAT_DIRECTION_LAST,UDAT_DIRECTION_THIS,UDAT_DIRECTION_NEXT,UDAT_DIRECTION_NEXT_2,UDAT_DIRECTION_PLAIN,# ifndef UDAT_DIRECTION_COUNT # endif } UDateDirection ; # if ! UCONFIG_NO_BREAK_ITERATION U_NAMESPACE_BEGIN class BreakIterator ; class RelativeDateTimeCacheData ; class SharedNumberFormat ; class SharedPluralRules ; class SharedBreakIterator ; class NumberFormat ; class UnicodeString ; class FormattedRelativeDateTimeData ; # ifndef class U_I18N_API FormattedRelativeDateTime : public UMemory,public FormattedValue { public :)",
    "insertText": "FormattedRelativeDateTime() : fData(nullptr), fErrorCode(U_INVALID_STATE_ERROR)"
  },
  {
    "label": "FormattedRelativeDateTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedRelativeDateTime(FormattedRelativeDateTime&& src)"
  },
  {
    "label": "FormattedRelativeDateTime()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FormattedRelativeDateTime()"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toString(UErrorCode& status)"
  },
  {
    "label": "toTempString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toTempString(UErrorCode& status)"
  },
  {
    "label": "appendTo()",
    "kind": "Method",
    "detail": "Function (Appendable&)",
    "insertText": "appendTo(Appendable& appendable, UErrorCode& status)"
  },
  {
    "label": "nextPosition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextPosition(ConstrainedFieldPosition& cfpos, UErrorCode& status)"
  },
  {
    "label": "FormattedRelativeDateTime()",
    "kind": "Method",
    "detail": "Function (private : FormattedRelativeDateTimeData* fData ; UErrorCode fErrorCode ;)",
    "insertText": "FormattedRelativeDateTime(FormattedRelativeDateTimeData *results) : fData(results), fErrorCode(U_ZERO_ERROR)"
  },
  {
    "label": "FormattedRelativeDateTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedRelativeDateTime(UErrorCode errorCode) : fData(nullptr), fErrorCode(errorCode)"
  },
  {
    "label": "RelativeDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (} class RelativeDateTimeFormatter ; } ; # endif class U_I18N_API RelativeDateTimeFormatter : public UObject { public :)",
    "insertText": "RelativeDateTimeFormatter(UErrorCode& status)"
  },
  {
    "label": "RelativeDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelativeDateTimeFormatter(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "RelativeDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelativeDateTimeFormatter(const Locale& locale, NumberFormat *nfToAdopt, UErrorCode& status)"
  },
  {
    "label": "RelativeDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelativeDateTimeFormatter(const Locale& locale, NumberFormat *nfToAdopt, UDateRelativeDateTimeFormatterStyle style, UDisplayContext capitalizationContext, UErrorCode& status)"
  },
  {
    "label": "RelativeDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RelativeDateTimeFormatter(const RelativeDateTimeFormatter& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RelativeDateTimeFormatter&)",
    "insertText": "operator(const RelativeDateTimeFormatter& other)"
  },
  {
    "label": "RelativeDateTimeFormatter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RelativeDateTimeFormatter()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(double quantity, UDateDirection direction, UDateRelativeUnit unit, UnicodeString& appendTo, UErrorCode& status)"
  },
  {
    "label": "formatToValue()",
    "kind": "Method",
    "detail": "Function (# ifndef FormattedRelativeDateTime)",
    "insertText": "formatToValue(double quantity, UDateDirection direction, UDateRelativeUnit unit, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "format(UDateDirection direction, UDateAbsoluteUnit unit, UnicodeString& appendTo, UErrorCode& status)"
  },
  {
    "label": "formatToValue()",
    "kind": "Method",
    "detail": "Function (# ifndef FormattedRelativeDateTime)",
    "insertText": "formatToValue(UDateDirection direction, UDateAbsoluteUnit unit, UErrorCode& status)"
  },
  {
    "label": "formatNumeric()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "formatNumeric(double offset, URelativeDateTimeUnit unit, UnicodeString& appendTo, UErrorCode& status)"
  },
  {
    "label": "formatNumericToValue()",
    "kind": "Method",
    "detail": "Function (# ifndef FormattedRelativeDateTime)",
    "insertText": "formatNumericToValue(double offset, URelativeDateTimeUnit unit, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "format(double offset, URelativeDateTimeUnit unit, UnicodeString& appendTo, UErrorCode& status)"
  },
  {
    "label": "formatToValue()",
    "kind": "Method",
    "detail": "Function (# ifndef FormattedRelativeDateTime)",
    "insertText": "formatToValue(double offset, URelativeDateTimeUnit unit, UErrorCode& status)"
  },
  {
    "label": "combineDateAndTime()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "combineDateAndTime(const UnicodeString& relativeDateString, const UnicodeString& timeString, UnicodeString& appendTo, UErrorCode& status)"
  },
  {
    "label": "getNumberFormat()",
    "kind": "Method",
    "detail": "Function (const NumberFormat&)",
    "insertText": "getNumberFormat()"
  },
  {
    "label": "getCapitalizationContext()",
    "kind": "Method",
    "detail": "Function (UDisplayContext)",
    "insertText": "getCapitalizationContext()"
  },
  {
    "label": "getFormatStyle()",
    "kind": "Method",
    "detail": "Function (UDateRelativeDateTimeFormatterStyle)",
    "insertText": "getFormatStyle()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : const RelativeDateTimeCacheData* fCache ; const SharedNumberFormat* fNumberFormat ; const SharedPluralRules* fPluralRules ; UDateRelativeDateTimeFormatterStyle fStyle ; UDisplayContext fContext ; const SharedBreakIterator* fOptBreakIterator ; Locale fLocale ; void)",
    "insertText": "init(NumberFormat *nfToAdopt, BreakIterator *brkIter, UErrorCode &status)"
  },
  {
    "label": "adjustForContext()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "adjustForContext(UnicodeString &)"
  },
  {
    "label": "checkNoAdjustForContext()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "checkNoAdjustForContext(UErrorCode& status)"
  },
  {
    "label": "doFormat()",
    "kind": "Method",
    "detail": "Function (template<F,. . . Args> UnicodeString&)",
    "insertText": "doFormat(F callback, UnicodeString& appendTo, UErrorCode& status, Args... args)"
  },
  {
    "label": "doFormatToValue()",
    "kind": "Method",
    "detail": "Function (# ifndef template<F,. . . Args> FormattedRelativeDateTime)",
    "insertText": "doFormatToValue(F callback, UErrorCode& status, Args... args)"
  },
  {
    "label": "formatImpl()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "formatImpl(double quantity, UDateDirection direction, UDateRelativeUnit unit, FormattedRelativeDateTimeData& output, UErrorCode& status)"
  },
  {
    "label": "formatAbsoluteImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "formatAbsoluteImpl(UDateDirection direction, UDateAbsoluteUnit unit, FormattedRelativeDateTimeData& output, UErrorCode& status)"
  },
  {
    "label": "formatNumericImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "formatNumericImpl(double offset, URelativeDateTimeUnit unit, FormattedRelativeDateTimeData& output, UErrorCode& status)"
  },
  {
    "label": "formatRelativeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "formatRelativeImpl(double offset, URelativeDateTimeUnit unit, FormattedRelativeDateTimeData& output, UErrorCode& status)"
  }
]