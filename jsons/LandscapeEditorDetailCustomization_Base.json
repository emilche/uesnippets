[
  {
    "label": "FEdModeLandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdModeLandscape"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "FLandscapeEditorDetailCustomization_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditorDetailCustomization_Base"
  },
  {
    "label": "FLandscapeEditorStructCustomization_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditorStructCustomization_Base"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / Casts . h \" # include \" IDetailCustomization . h \" # include \" IPropertyTypeCustomization . h \" # include \" PropertyHandle . h \" class FEdModeLandscape ; class IDetailLayoutBuilder ; class FLandscapeEditorDetailCustomization_Base : public IDetailCustomization { public : void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "GetEditorMode()",
    "kind": "Method",
    "detail": "Function (protected : FEdModeLandscape*)",
    "insertText": "GetEditorMode()"
  },
  {
    "label": "IsToolActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToolActive(FName ToolName)"
  },
  {
    "label": "IsBrushSetActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBrushSetActive(FName BrushSetName)"
  },
  {
    "label": "OnGetValue()",
    "kind": "Method",
    "detail": "Function (template<type> TOptional<type>)",
    "insertText": "OnGetValue(TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (template<type> void)",
    "insertText": "OnValueChanged(type NewValue, TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "OnValueCommitted()",
    "kind": "Method",
    "detail": "Function (template<type> void)",
    "insertText": "OnValueCommitted(type NewValue, ETextCommit::Type CommitType, TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (template<type> type)",
    "insertText": "GetPropertyValue(TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "GetOptionalPropertyValue()",
    "kind": "Method",
    "detail": "Function (template<type> TOptional<type>)",
    "insertText": "GetOptionalPropertyValue(TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "GetObjectPropertyValue()",
    "kind": "Method",
    "detail": "Function (template<type> type*)",
    "insertText": "GetObjectPropertyValue(TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "GetPropertyValueText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPropertyValueText(TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (template<type> void)",
    "insertText": "SetPropertyValue(type NewValue, ETextCommit::Type CommitInfo, TSharedRef<IPropertyHandle> PropertyHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (type Value ;)",
    "insertText": "if(ensure(PropertyHandle->GetValue(Value) == FPropertyAccess::Success))"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (} return TOptional<)",
    "insertText": "type()"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (const EPropertyValueSetFlags::Type Flags = EPropertyValueSetFlags::InteractiveChange ;)",
    "insertText": "ensure(PropertyHandle->SetValue(NewValue, Flags) == FPropertyAccess::Success)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (type Value ;)",
    "insertText": "if(PropertyHandle->GetValue(Value) == FPropertyAccess::Success)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString Value ;)",
    "insertText": "if(PropertyHandle->GetValueAsFormattedString(Value) == FPropertyAccess::Success)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FText()"
  }
]