[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "traits"
  },
  {
    "label": "CefStructBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefStructBase"
  },
  {
    "label": "CefPointTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefPointTraits"
  },
  {
    "label": "CefPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefPoint"
  },
  {
    "label": "CefRectTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefRectTraits"
  },
  {
    "label": "CefRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefRect"
  },
  {
    "label": "CefSizeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefSizeTraits"
  },
  {
    "label": "CefSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefSize"
  },
  {
    "label": "CefRangeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefRangeTraits"
  },
  {
    "label": "CefRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefRange"
  },
  {
    "label": "CefInsetsTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefInsetsTraits"
  },
  {
    "label": "CefInsets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefInsets"
  },
  {
    "label": "CefDraggableRegionTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefDraggableRegionTraits"
  },
  {
    "label": "CefDraggableRegion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefDraggableRegion"
  },
  {
    "label": "CefScreenInfoTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefScreenInfoTraits"
  },
  {
    "label": "CefScreenInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefScreenInfo"
  },
  {
    "label": "CefKeyEventTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefKeyEventTraits"
  },
  {
    "label": "CefMouseEventTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefMouseEventTraits"
  },
  {
    "label": "CefTouchEventTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefTouchEventTraits"
  },
  {
    "label": "CefPopupFeaturesTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefPopupFeaturesTraits"
  },
  {
    "label": "CefSettingsTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefSettingsTraits"
  },
  {
    "label": "CefRequestContextSettingsTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefRequestContextSettingsTraits"
  },
  {
    "label": "CefBrowserSettingsTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefBrowserSettingsTraits"
  },
  {
    "label": "CefURLPartsTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefURLPartsTraits"
  },
  {
    "label": "CefTimeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefTimeTraits"
  },
  {
    "label": "CefTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefTime"
  },
  {
    "label": "CefCookieTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefCookieTraits"
  },
  {
    "label": "CefCursorInfoTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefCursorInfoTraits"
  },
  {
    "label": "CefPdfPrintSettingsTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefPdfPrintSettingsTraits"
  },
  {
    "label": "CefBoxLayoutSettingsTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefBoxLayoutSettingsTraits"
  },
  {
    "label": "CefCompositionUnderlineTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefCompositionUnderlineTraits"
  },
  {
    "label": "CefAudioParametersTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefAudioParametersTraits"
  },
  {
    "label": "CefMediaSinkDeviceInfoTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CefMediaSinkDeviceInfoTraits"
  },
  {
    "label": "CefStructBase()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_INTERNAL_CEF_TYPES_WRAPPERS_H_ # define CEF_INCLUDE_INTERNAL_CEF_TYPES_WRAPPERS_H_ # pragma once # include \" include / internal / cef_string . h \" # include \" include / internal / cef_string_list . h \" # include \" include / internal / cef_types . h \" template<class traits> class CefStructBase : public traits::struct_type { public : typedef traits::struct_type struct_type ;)",
    "insertText": "CefStructBase() : attached_to_(NULL)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "CefStructBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CefStructBase()"
  },
  {
    "label": "CefStructBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefStructBase(const CefStructBase& r)"
  },
  {
    "label": "CefStructBase()",
    "kind": "Method",
    "detail": "Function (* this = r ; })",
    "insertText": "CefStructBase(const struct_type& r)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (* this = r ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(this)"
  },
  {
    "label": "AttachTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AttachTo(struct_type& source)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (attached_to_ =& source ;)",
    "insertText": "memcpy(static_cast<struct_type*>(this), &source, sizeof(struct_type))"
  },
  {
    "label": "DetachTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DetachTo(struct_type& target)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear(&target)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memcpy(&target, static_cast<struct_type*>(this), sizeof(struct_type))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const struct_type& source, bool copy)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set(&source, this, copy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CefStructBase&)",
    "insertText": "operator(const CefStructBase& s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CefStructBase&)",
    "insertText": "operator(const struct_type& s)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(s, true)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(static_cast<struct_type*>(this), 0, sizeof(struct_type))"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (attached_to_ = NULL ;)",
    "insertText": "init(this)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear(struct_type* s)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear(s)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} struct_type* attached_to_ ; } ; struct CefPointTraits { typedef cef_point_t struct_type ; void)",
    "insertText": "init(struct_type* s)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear(struct_type* s)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set(const struct_type* src, struct_type* target, bool copy)"
  },
  {
    "label": "CefPoint()",
    "kind": "Method",
    "detail": "Function (* target =* src ; } } ; class CefPoint : public CefStructBase<CefPointTraits> { public : typedef CefStructBase<CefPointTraits> parent ;)",
    "insertText": "CefPoint()"
  },
  {
    "label": "CefPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefPoint(const cef_point_t& r) : parent(r)"
  },
  {
    "label": "CefPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefPoint(int x, int y)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(x, y)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (x = x_val,y = y_val ; } } ; bool)",
    "insertText": "operator(const CefPoint& a, const CefPoint& b)"
  },
  {
    "label": "CefRect()",
    "kind": "Method",
    "detail": "Function (* target =* src ; } } ; class CefRect : public CefStructBase<CefRectTraits> { public : typedef CefStructBase<CefRectTraits> parent ;)",
    "insertText": "CefRect()"
  },
  {
    "label": "CefRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefRect(const cef_rect_t& r) : parent(r)"
  },
  {
    "label": "CefRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefRect(int x, int y, int width, int height)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(x, y, width, height)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (x = x_val,y = y_val,width = width_val,height = height_val ; } bool)",
    "insertText": "Contains(int point_x, int point_y)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const CefPoint& point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "operator(const CefRect& a, const CefRect& b)"
  },
  {
    "label": "CefSize()",
    "kind": "Method",
    "detail": "Function (* target =* src ; } } ; class CefSize : public CefStructBase<CefSizeTraits> { public : typedef CefStructBase<CefSizeTraits> parent ;)",
    "insertText": "CefSize()"
  },
  {
    "label": "CefSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefSize(const cef_size_t& r) : parent(r)"
  },
  {
    "label": "CefSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefSize(int width, int height)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(width, height)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (width = width_val,height = height_val ; } } ; bool)",
    "insertText": "operator(const CefSize& a, const CefSize& b)"
  },
  {
    "label": "CefRange()",
    "kind": "Method",
    "detail": "Function (* target =* src ; } } ; class CefRange : public CefStructBase<CefRangeTraits> { public : typedef CefStructBase<CefRangeTraits> parent ;)",
    "insertText": "CefRange()"
  },
  {
    "label": "CefRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefRange(const cef_range_t& r) : parent(r)"
  },
  {
    "label": "CefRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefRange(int from, int to)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(from, to)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int from_val, int to_val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (from = from_val,to = to_val ; } } ; bool)",
    "insertText": "operator(const CefRange& a, const CefRange& b)"
  },
  {
    "label": "CefInsets()",
    "kind": "Method",
    "detail": "Function (* target =* src ; } } ; class CefInsets : public CefStructBase<CefInsetsTraits> { public : typedef CefStructBase<CefInsetsTraits> parent ;)",
    "insertText": "CefInsets()"
  },
  {
    "label": "CefInsets()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefInsets(const cef_insets_t& r) : parent(r)"
  },
  {
    "label": "CefInsets()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefInsets(int top, int left, int bottom, int right)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(top, left, bottom, right)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int top_val, int left_val, int bottom_val, int right_val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (top = top_val,left = left_val,bottom = bottom_val,right = right_val ; } } ; bool)",
    "insertText": "operator(const CefInsets& a, const CefInsets& b)"
  },
  {
    "label": "CefDraggableRegion()",
    "kind": "Method",
    "detail": "Function (* target =* src ; } } ; class CefDraggableRegion : public CefStructBase<CefDraggableRegionTraits> { public : typedef CefStructBase<CefDraggableRegionTraits> parent ;)",
    "insertText": "CefDraggableRegion()"
  },
  {
    "label": "CefDraggableRegion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefDraggableRegion(const cef_draggable_region_t& r) : parent(r)"
  },
  {
    "label": "CefDraggableRegion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefDraggableRegion(const CefRect& bounds, bool draggable)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(bounds, draggable)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const CefRect& bounds_val, bool draggable_val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bounds = bounds_val,draggable = draggable_val ; } } ; bool)",
    "insertText": "operator(const CefDraggableRegion& a, const CefDraggableRegion& b)"
  },
  {
    "label": "CefScreenInfo()",
    "kind": "Method",
    "detail": "Function (target -> device_scale_factor = src -> device_scale_factor ; target -> depth = src -> depth ; target -> depth_per_component = src -> depth_per_component ; target -> is_monochrome = src -> is_monochrome ; target -> rect = src -> rect ; target -> available_rect = src -> available_rect ; } } ; class CefScreenInfo : public CefStructBase<CefScreenInfoTraits> { public : typedef CefStructBase<CefScreenInfoTraits> parent ;)",
    "insertText": "CefScreenInfo()"
  },
  {
    "label": "CefScreenInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefScreenInfo(const cef_screen_info_t& r) : parent(r)"
  },
  {
    "label": "CefScreenInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefScreenInfo(float device_scale_factor, int depth, int depth_per_component, bool is_monochrome, const CefRect& rect, const CefRect& available_rect)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(device_scale_factor, depth, depth_per_component, is_monochrome, rect, available_rect)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(float device_scale_factor_val, int depth_val, int depth_per_component_val, bool is_monochrome_val, const CefRect& rect_val, const CefRect& available_rect_val)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (s -> size =)",
    "insertText": "sizeof(struct_type)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->browser_subprocess_path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->framework_dir_path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->main_bundle_path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->cache_path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->root_cache_path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->user_data_path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->user_agent)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->user_agent_product)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->locale)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->log_file)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->javascript_flags)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->resources_dir_path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->locales_dir_path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->accept_language_list)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->cookieable_schemes_list)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->application_client_id_for_file_scanning)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> no_sandbox = src -> no_sandbox ;)",
    "insertText": "cef_string_set(src->browser_subprocess_path.str, src->browser_subprocess_path.length, &target->browser_subprocess_path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->framework_dir_path.str, src->framework_dir_path.length, &target->framework_dir_path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->main_bundle_path.str, src->main_bundle_path.length, &target->main_bundle_path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> chrome_runtime = src -> chrome_runtime ; target -> multi_threaded_message_loop = src -> multi_threaded_message_loop ; target -> external_message_pump = src -> external_message_pump ; target -> windowless_rendering_enabled = src -> windowless_rendering_enabled ; target -> command_line_args_disabled = src -> command_line_args_disabled ;)",
    "insertText": "cef_string_set(src->cache_path.str, src->cache_path.length, &target->cache_path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->root_cache_path.str, src->root_cache_path.length, &target->root_cache_path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->user_data_path.str, src->user_data_path.length, &target->user_data_path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> persist_session_cookies = src -> persist_session_cookies ; target -> persist_user_preferences = src -> persist_user_preferences ;)",
    "insertText": "cef_string_set(src->user_agent.str, src->user_agent.length, &target->user_agent, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->user_agent_product.str, src->user_agent_product.length, &target->user_agent_product, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->locale.str, src->locale.length, &target->locale, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->log_file.str, src->log_file.length, &target->log_file, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> log_severity = src -> log_severity ;)",
    "insertText": "cef_string_set(src->javascript_flags.str, src->javascript_flags.length, &target->javascript_flags, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->resources_dir_path.str, src->resources_dir_path.length, &target->resources_dir_path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->locales_dir_path.str, src->locales_dir_path.length, &target->locales_dir_path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> pack_loading_disabled = src -> pack_loading_disabled ; target -> remote_debugging_port = src -> remote_debugging_port ; target -> uncaught_exception_stack_size = src -> uncaught_exception_stack_size ; target -> ignore_certificate_errors = src -> ignore_certificate_errors ; target -> background_color = src -> background_color ;)",
    "insertText": "cef_string_set(src->accept_language_list.str, src->accept_language_list.length, &target->accept_language_list, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->cookieable_schemes_list.str, src->cookieable_schemes_list.length, &target->cookieable_schemes_list, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> cookieable_schemes_exclude_defaults = src -> cookieable_schemes_exclude_defaults ;)",
    "insertText": "cef_string_set(src->application_client_id_for_file_scanning.str, src->application_client_id_for_file_scanning.length, &target->application_client_id_for_file_scanning, copy)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->standard_font_family)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->fixed_font_family)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->serif_font_family)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->sans_serif_font_family)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->cursive_font_family)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->fantasy_font_family)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->default_encoding)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> windowless_frame_rate = src -> windowless_frame_rate ;)",
    "insertText": "cef_string_set(src->standard_font_family.str, src->standard_font_family.length, &target->standard_font_family, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->fixed_font_family.str, src->fixed_font_family.length, &target->fixed_font_family, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->serif_font_family.str, src->serif_font_family.length, &target->serif_font_family, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->sans_serif_font_family.str, src->sans_serif_font_family.length, &target->sans_serif_font_family, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->cursive_font_family.str, src->cursive_font_family.length, &target->cursive_font_family, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->fantasy_font_family.str, src->fantasy_font_family.length, &target->fantasy_font_family, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> default_font_size = src -> default_font_size ; target -> default_fixed_font_size = src -> default_fixed_font_size ; target -> minimum_font_size = src -> minimum_font_size ; target -> minimum_logical_font_size = src -> minimum_logical_font_size ;)",
    "insertText": "cef_string_set(src->default_encoding.str, src->default_encoding.length, &target->default_encoding, copy)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->spec)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->scheme)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->username)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->password)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->host)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->port)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->origin)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->path)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->query)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->fragment)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->spec.str, src->spec.length, &target->spec, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->scheme.str, src->scheme.length, &target->scheme, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->username.str, src->username.length, &target->username, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->password.str, src->password.length, &target->password, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->host.str, src->host.length, &target->host, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->port.str, src->port.length, &target->port, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->origin.str, src->origin.length, &target->origin, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->path.str, src->path.length, &target->path, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->query.str, src->query.length, &target->query, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->fragment.str, src->fragment.length, &target->fragment, copy)"
  },
  {
    "label": "CefTime()",
    "kind": "Method",
    "detail": "Function (* target =* src ; } } ; class CefTime : public CefStructBase<CefTimeTraits> { public : typedef CefStructBase<CefTimeTraits> parent ;)",
    "insertText": "CefTime()"
  },
  {
    "label": "CefTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefTime(const cef_time_t& r) : parent(r)"
  },
  {
    "label": "CefTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefTime(time_t r)"
  },
  {
    "label": "SetTimeT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeT(r)"
  },
  {
    "label": "CefTime()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CefTime(double r)"
  },
  {
    "label": "SetDoubleT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDoubleT(r)"
  },
  {
    "label": "SetTimeT()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimeT(time_t r)"
  },
  {
    "label": "cef_time_from_timet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_time_from_timet(r, this)"
  },
  {
    "label": "GetTimeT()",
    "kind": "Method",
    "detail": "Function (} time_t)",
    "insertText": "GetTimeT()"
  },
  {
    "label": "cef_time_to_timet()",
    "kind": "Method",
    "detail": "Function (time_t time = 0 ;)",
    "insertText": "cef_time_to_timet(this, &time)"
  },
  {
    "label": "cef_time_from_doublet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_time_from_doublet(r, this)"
  },
  {
    "label": "GetDoubleT()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetDoubleT()"
  },
  {
    "label": "cef_time_now()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_time_now(this)"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (} long long)",
    "insertText": "Delta(const CefTime& other)"
  },
  {
    "label": "cef_time_delta()",
    "kind": "Method",
    "detail": "Function (long long delta = 0 ;)",
    "insertText": "cef_time_delta(this, &other, &delta)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->name)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->value)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->domain)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->name.str, src->name.length, &target->name, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->value.str, src->value.length, &target->value, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->domain.str, src->domain.length, &target->domain, copy)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->header_footer_title)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->header_footer_url)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->header_footer_title.str, src->header_footer_title.length, &target->header_footer_title, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->header_footer_url.str, src->header_footer_url.length, &target->header_footer_url, copy)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->ip_address)"
  },
  {
    "label": "cef_string_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_clear(&s->model_name)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_string_set(src->ip_address.str, src->ip_address.length, &target->ip_address, copy)"
  },
  {
    "label": "cef_string_set()",
    "kind": "Method",
    "detail": "Function (target -> port = src -> port ;)",
    "insertText": "cef_string_set(src->model_name.str, src->model_name.length, &target->model_name, copy)"
  }
]