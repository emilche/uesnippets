[
  {
    "label": "FAnimNode_SequenceEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_SequenceEvaluator"
  },
  {
    "label": "FSequenceEvaluatorReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequenceEvaluatorReference"
  },
  {
    "label": "USequenceEvaluatorLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequenceEvaluatorLibrary"
  },
  {
    "label": "ConvertToSequenceEvaluator()",
    "kind": "Method",
    "detail": "Function (FSequenceEvaluatorReference)",
    "insertText": "ConvertToSequenceEvaluator(const FAnimNodeReference& Node, EAnimNodeReferenceConversionResult& Result)"
  },
  {
    "label": "SetExplicitTime()",
    "kind": "Method",
    "detail": "Function (FSequenceEvaluatorReference)",
    "insertText": "SetExplicitTime(const FSequenceEvaluatorReference& SequenceEvaluator, float Time)"
  },
  {
    "label": "SetExplicitFrame()",
    "kind": "Method",
    "detail": "Function (FSequenceEvaluatorReference)",
    "insertText": "SetExplicitFrame(const FSequenceEvaluatorReference& SequenceEvaluator, int32 Frame)"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (FSequenceEvaluatorReference)",
    "insertText": "AdvanceTime(const FAnimUpdateContext& UpdateContext, const FSequenceEvaluatorReference& SequenceEvaluator, float PlayRate = 1.0f)"
  },
  {
    "label": "SetSequence()",
    "kind": "Method",
    "detail": "Function (FSequenceEvaluatorReference)",
    "insertText": "SetSequence(const FSequenceEvaluatorReference& SequenceEvaluator, UAnimSequenceBase* Sequence)"
  },
  {
    "label": "SetSequenceWithInertialBlending()",
    "kind": "Method",
    "detail": "Function (FSequenceEvaluatorReference)",
    "insertText": "SetSequenceWithInertialBlending(const FAnimUpdateContext& UpdateContext, const FSequenceEvaluatorReference& SequenceEvaluator, UAnimSequenceBase* Sequence, float BlendTime = 0.2f)"
  },
  {
    "label": "GetAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAccumulatedTime(const FSequenceEvaluatorReference& SequenceEvaluator)"
  }
]