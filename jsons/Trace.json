[
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "Trace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Trace"
  },
  {
    "label": "Trace()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_TRACE_H # define LLVM_ANALYSIS_TRACE_H # include<cassert> # include<vector> namespace llvm { class BasicBlock ; class Function ; class Module ; class raw_ostream ; class Trace { typedef std::vector<BasicBlock*> BasicBlockListType ; BasicBlockListType BasicBlocks ; public :)",
    "insertText": "Trace(const std::vector<BasicBlock *> &vBB) : BasicBlocks (vBB)"
  },
  {
    "label": "getEntryBasicBlock()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getEntryBasicBlock()"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (Module*)",
    "insertText": "getModule()"
  },
  {
    "label": "getBlockIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getBlockIndex(const BasicBlock *X)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "dominates(const BasicBlock *B1, const BasicBlock *B2)"
  },
  {
    "label": "getBlockIndex()",
    "kind": "Method",
    "detail": "Function (int B1Idx =)",
    "insertText": "getBlockIndex(B1), B2Idx = getBlockIndex(B2)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(B1Idx != -1 && B2Idx != -1 && \"Block is not in the trace!\")"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(iterator q)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(iterator q1, iterator q2)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &O)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  }
]