[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FMeshBatchElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchElement"
  },
  {
    "label": "FMeshDrawingRenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDrawingRenderState"
  },
  {
    "label": "FMeshPassProcessorRenderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPassProcessorRenderState"
  },
  {
    "label": "TUniformBufferRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniformBufferRef"
  },
  {
    "label": "FMeshMaterialShaderElementData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShaderElementData"
  },
  {
    "label": "FMeshMaterialShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshMaterialShaderPermutationParameters"
  },
  {
    "label": "FVertexFactoryShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexFactoryShaderPermutationParameters"
  },
  {
    "label": "FMeshMaterialShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShader"
  },
  {
    "label": "InitializeMeshMaterialData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshMaterialShaderType . h \" # include \" MaterialShader . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" CoreMinimal . h \" # include \" ShaderParameters . h \" # include \" VertexFactory . h \" # include \" MeshDrawShaderBindings . h \" # endif class FPrimitiveSceneProxy ; struct FMeshBatchElement ; struct FMeshDrawingRenderState ; struct FMeshPassProcessorRenderState ; template<TBufferStruct> class TUniformBufferRef ; class FMeshMaterialShaderElementData { public : FRHIUniformBuffer* FadeUniformBuffer = nullptr ; FRHIUniformBuffer* DitherUniformBuffer = nullptr ; void)",
    "insertText": "InitializeMeshMaterialData()"
  },
  {
    "label": "InitializeMeshMaterialData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMeshMaterialData(const FSceneView* SceneView, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMeshBatch& RESTRICT MeshBatch, int32 StaticMeshId, bool bAllowStencilDither)"
  },
  {
    "label": "InitializeMeshMaterialData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeMeshMaterialData(const FSceneView* SceneView, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, bool bDitheredLODTransition, bool bAllowStencilDither)"
  },
  {
    "label": "FMeshMaterialShaderPermutationParameters()",
    "kind": "Method",
    "detail": "Function (} ; struct FMeshMaterialShaderPermutationParameters : public FMaterialShaderPermutationParameters { const FVertexFactoryType* VertexFactoryType ;)",
    "insertText": "FMeshMaterialShaderPermutationParameters(EShaderPlatform InPlatform, const FMaterialShaderParameters& InMaterialParameters, const FVertexFactoryType* InVertexFactoryType, int32 InPermutationId, EShaderPermutationFlags InFlags) : FMaterialShaderPermutationParameters(InPlatform, InMaterialParameters, InPermutationId, InFlags) , VertexFactoryType(InVertexFactoryType)"
  },
  {
    "label": "FVertexFactoryShaderPermutationParameters()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVertexFactoryShaderPermutationParameters { const FShaderType* ShaderType ; const FVertexFactoryType* VertexFactoryType ; FMaterialShaderParameters MaterialParameters ; EShaderPlatform Platform ; EShaderPermutationFlags Flags ;)",
    "insertText": "FVertexFactoryShaderPermutationParameters(EShaderPlatform InPlatform, const FMaterialShaderParameters& InMaterialParameters, const FVertexFactoryType* InVertexFactoryType, const FShaderType* InShaderType, EShaderPermutationFlags InFlags ) : ShaderType(InShaderType) , VertexFactoryType(InVertexFactoryType) , MaterialParameters(InMaterialParameters) , Platform(InPlatform) , Flags(InFlags)"
  },
  {
    "label": "DECLARE_EXPORTED_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; class FMeshMaterialShader : public FMaterialShader {)",
    "insertText": "DECLARE_EXPORTED_TYPE_LAYOUT(FMeshMaterialShader, RENDERER_API, NonVirtual)"
  },
  {
    "label": "FMeshMaterialShader()",
    "kind": "Method",
    "detail": "Function (public : using FPermutationParameters = FMeshMaterialShaderPermutationParameters ; using ShaderMetaType = FMeshMaterialShaderType ;)",
    "insertText": "FMeshMaterialShader()"
  },
  {
    "label": "FMeshMaterialShader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshMaterialShader(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer)"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderBindings(const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material, const FMeshMaterialShaderElementData& ShaderElementData, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetElementShaderBindings(const FShaderMapPointerTable& PointerTable, const FScene* Scene, const FSceneView* ViewIfDynamicMeshCommand, const FVertexFactory* VertexFactory, const EVertexInputStreamType InputStreamType, const FStaticFeatureLevel FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMeshBatch& MeshBatch, const FMeshBatchElement& BatchElement, const FMeshMaterialShaderElementData& ShaderElementData, FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (template<ShaderType,PointerTableType,ShaderElementDataType> void)",
    "insertText": "GetElementShaderBindings(const TShaderRefBase<ShaderType, PointerTableType>& Shader, const FScene* Scene, const FSceneView* ViewIfDynamicMeshCommand, const FVertexFactory* VertexFactory, const EVertexInputStreamType InputStreamType, ERHIFeatureLevel::Type FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMeshBatch& MeshBatch, const FMeshBatchElement& BatchElement, const ShaderElementDataType& ShaderElementData, FMeshDrawSingleShaderBindings& ShaderBindings, FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "GetElementShaderBindings()",
    "kind": "Method",
    "detail": "Function (Shader ->)",
    "insertText": "GetElementShaderBindings(Shader.GetPointerTable(), Scene, ViewIfDynamicMeshCommand, VertexFactory, InputStreamType, FeatureLevel, PrimitiveSceneProxy, MeshBatch, BatchElement, ShaderElementData, ShaderBindings, VertexStreams)"
  },
  {
    "label": "WriteFrozenVertexFactoryParameters()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "WriteFrozenVertexFactoryParameters(FMemoryImageWriter& Writer, const TMemoryImagePtr<FVertexFactoryShaderParameters>& InVertexFactoryParameters)"
  },
  {
    "label": "LAYOUT_FIELD_WITH_WRITER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD_WITH_WRITER(TMemoryImagePtr<FVertexFactoryShaderParameters>, VertexFactoryParameters, WriteFrozenVertexFactoryParameters)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, PassUniformBuffer)"
  }
]