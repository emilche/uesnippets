[
  {
    "label": "Dest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dest"
  },
  {
    "label": "Source",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Source"
  },
  {
    "label": "PA_HAS_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_BIT_CAST_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_BASE_BIT_CAST_H_ # include<type_traits> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # if !)",
    "insertText": "PA_HAS_BUILTIN(__builtin_bit_cast)"
  },
  {
    "label": "PA_HAS_BUILTIN()",
    "kind": "Method",
    "detail": "Function (template<class Dest,class Source> # if)",
    "insertText": "PA_HAS_BUILTIN(__builtin_bit_cast) constexpr #else inline #endif Dest bit_cast(const Source& source)"
  },
  {
    "label": "PA_HAS_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "PA_HAS_BUILTIN(__builtin_bit_cast) return __builtin_bit_cast(Dest, source)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "static_assert(sizeof(Dest) == sizeof(Source), \"bit_cast requires source and destination to be the same size\")"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (Dest dest ;)",
    "insertText": "memcpy(&dest, &source, sizeof(dest))"
  }
]