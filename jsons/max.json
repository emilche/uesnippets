[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_MAX_H # define _LIBCPP___ALGORITHM_MAX_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / max_element . h> # include<__config> # include<initializer_list> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_PUSH_MACROS #include <__undef_macros> _LIBCPP_BEGIN_NAMESPACE_STD template <class _Tp, class _Compare> _LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const _Tp& max(const _Tp& __a, const _Tp& __b, _Compare __comp)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 const _Tp&)",
    "insertText": "max(const _Tp& __a, const _Tp& __b)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG template<class _Tp,class _Compare> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 _Tp)",
    "insertText": "max(initializer_list<_Tp> __t, _Compare __comp)"
  },
  {
    "label": "_Comp_ref()",
    "kind": "Method",
    "detail": "Function (typedef __comp_ref_type<_Compare>::type _Comp_ref ; return* _VSTD::__max_element<)",
    "insertText": "_Comp_ref(__t.begin(), __t.end(), __comp)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX11 _Tp)",
    "insertText": "max(initializer_list<_Tp> __t)"
  }
]