[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TConsoleVariableData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConsoleVariableData"
  },
  {
    "label": "FSharedPoolPolicyData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedPoolPolicyData"
  },
  {
    "label": "FVertexBufferAndSRV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexBufferAndSRV"
  },
  {
    "label": "FBoneBufferPoolPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoneBufferPoolPolicy"
  },
  {
    "label": "FBoneBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBoneBufferPool"
  },
  {
    "label": "FClothBufferPoolPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClothBufferPoolPolicy"
  },
  {
    "label": "FClothBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClothBufferPool"
  },
  {
    "label": "GPUSkinBoneInfluenceType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "GPUSkinBoneInfluenceType"
  },
  {
    "label": "FGPUSkinDataType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGPUSkinDataType"
  },
  {
    "label": "FMorphVertexBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMorphVertexBufferPool"
  },
  {
    "label": "FGPUBaseSkinVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUBaseSkinVertexFactory"
  },
  {
    "label": "FShaderDataType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderDataType"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FMorphVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMorphVertexBuffer"
  },
  {
    "label": "FGPUBaseSkinAPEXClothVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUBaseSkinAPEXClothVertexFactory"
  },
  {
    "label": "TGPUSkinVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGPUSkinVertexFactory"
  },
  {
    "label": "ClothShaderType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ClothShaderType"
  },
  {
    "label": "FGPUSkinAPEXClothDataType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGPUSkinAPEXClothDataType"
  },
  {
    "label": "TGPUSkinAPEXClothVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGPUSkinAPEXClothVertexFactory"
  },
  {
    "label": "FGPUSkinPassthroughVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinPassthroughVertexFactory"
  },
  {
    "label": "EShaderResource",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderResource"
  },
  {
    "label": "EVertexAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVertexAttribute"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAddVertexAttributeDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddVertexAttributeDesc"
  },
  {
    "label": "SET_BONE_DATA()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" BoneIndices . h \" # include \" GPUSkinPublicDefs . h \" # include \" UniformBuffer . h \" # include \" VertexFactory . h \" # include \" LocalVertexFactory . h \" # include \" ResourcePool . h \" # include \" Matrix3x4 . h \" # include \" SkeletalMeshTypes . h \" template<class T> class TConsoleVariableData ; # define)",
    "insertText": "SET_BONE_DATA(B, X) B.SetMatrixTranspose(X)"
  },
  {
    "label": "GetPoolBucketIndex()",
    "kind": "Method",
    "detail": "Function (public : typedef uint32 CreationArguments ; enum { NumSafeFrames = 3,NumPoolBucketSizes = 1 8,NumToDrainPerFrame = 1 0,CullAfterFramesNum = 3 0 } ; uint32)",
    "insertText": "GetPoolBucketIndex(uint32 Size)"
  },
  {
    "label": "GetPoolBucketSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPoolBucketSize(uint32 Bucket)"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (private : uint32 BucketSizes [ NumPoolBucketSizes ] ; } ; struct FVertexBufferAndSRV { void)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "IsValidRef()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef VertexBufferRHI ; FShaderResourceViewRHIRef VertexBufferSRV ; } ; bool)",
    "insertText": "IsValidRef(const FVertexBufferAndSRV& Buffer)"
  },
  {
    "label": "CreateResource()",
    "kind": "Method",
    "detail": "Function (} class FBoneBufferPoolPolicy : public FSharedPoolPolicyData { public : enum { NumSafeFrames = FSharedPoolPolicyData::NumSafeFrames,NumPoolBuckets = FSharedPoolPolicyData::NumPoolBucketSizes,NumToDrainPerFrame = FSharedPoolPolicyData::NumToDrainPerFrame,CullAfterFramesNum = FSharedPoolPolicyData::CullAfterFramesNum } ; FVertexBufferAndSRV)",
    "insertText": "CreateResource(FRHICommandListBase& RHICmdList, FSharedPoolPolicyData::CreationArguments Args)"
  },
  {
    "label": "GetCreationArguments()",
    "kind": "Method",
    "detail": "Function (FSharedPoolPolicyData::CreationArguments)",
    "insertText": "GetCreationArguments(const FVertexBufferAndSRV& Resource)"
  },
  {
    "label": "FreeResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeResource(FVertexBufferAndSRV Resource)"
  },
  {
    "label": "FBoneBufferPool()",
    "kind": "Method",
    "detail": "Function (} ; class FBoneBufferPool : public TRenderResourcePool<FVertexBufferAndSRV,FBoneBufferPoolPolicy,FSharedPoolPolicyData::CreationArguments> { public : ~)",
    "insertText": "FBoneBufferPool()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (public : TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "FClothBufferPool()",
    "kind": "Method",
    "detail": "Function (} ; class FClothBufferPool : public TRenderResourcePool<FVertexBufferAndSRV,FClothBufferPoolPolicy,FSharedPoolPolicyData::CreationArguments> { public : ~)",
    "insertText": "FClothBufferPool()"
  },
  {
    "label": "FShaderDataType()",
    "kind": "Method",
    "detail": "Function (} ; enum GPUSkinBoneInfluenceType { DefaultBoneInfluence,UnlimitedBoneInfluence } ; struct FGPUSkinDataType : public FStaticMeshDataType { FVertexStreamComponent BoneIndices ; FVertexStreamComponent ExtraBoneIndices ; FVertexStreamComponent BoneWeights ; FVertexStreamComponent ExtraBoneWeights ; FVertexStreamComponent BlendOffsetCount ; uint32 NumBoneInfluences = 0 ; bool bUse16BitBoneIndex = 0 ; bool bMorphTarget = false ; FVertexStreamComponent DeltaPositionComponent ; FVertexStreamComponent DeltaTangentZComponent ; class FMorphVertexBufferPool* MorphVertexBufferPool = nullptr ; } ; class FGPUBaseSkinVertexFactory : public FVertexFactory { public : struct FShaderDataType {)",
    "insertText": "FShaderDataType()"
  },
  {
    "label": "GetMaxGPUSkinBones()",
    "kind": "Method",
    "detail": "Function (MaxGPUSkinBones =)",
    "insertText": "GetMaxGPUSkinBones()"
  },
  {
    "label": "UpdateBoneData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateBoneData(FRHICommandList& RHICmdList, const TArray<FMatrix44f>& ReferenceToLocalMatrices, const TArray<FBoneIndexType>& BoneMap, uint32 RevisionNumber, ERHIFeatureLevel::Type FeatureLevel, const FName& AssetPathName)"
  },
  {
    "label": "ReleaseBoneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBoneData()"
  },
  {
    "label": "ReleasePooledResource()",
    "kind": "Method",
    "detail": "Function (BoneBufferPool .)",
    "insertText": "ReleasePooledResource(BoneBuffer[i])"
  },
  {
    "label": "HasBoneBufferForReading()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasBoneBufferForReading(bool bPrevious)"
  },
  {
    "label": "GetBoneBufferInternal()",
    "kind": "Method",
    "detail": "Function (const FVertexBufferAndSRV* RetPtr =&)",
    "insertText": "GetBoneBufferInternal(bPrevious)"
  },
  {
    "label": "GetBoneBufferInternal()",
    "kind": "Method",
    "detail": "Function (RetPtr =&)",
    "insertText": "GetBoneBufferInternal(false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} return RetPtr -> VertexBufferRHI .)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetBoneBufferForReading()",
    "kind": "Method",
    "detail": "Function (} const FVertexBufferAndSRV&)",
    "insertText": "GetBoneBufferForReading(bool bPrevious)"
  },
  {
    "label": "GetBoneBufferForWriting()",
    "kind": "Method",
    "detail": "Function (} return* RetPtr ; } FVertexBufferAndSRV&)",
    "insertText": "GetBoneBufferForWriting(bool bPrevious)"
  },
  {
    "label": "This()",
    "kind": "Method",
    "detail": "Function (const FShaderDataType*)",
    "insertText": "This(const FShaderDataType*)"
  },
  {
    "label": "GetRevisionNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRevisionNumber(bool bPrevious)"
  },
  {
    "label": "SetCurrentRevisionNumber()",
    "kind": "Method",
    "detail": "Function (} int32 InputWeightIndexSize = 0 ; FShaderResourceViewRHIRef InputWeightStream ; uint64 UpdatedFrameNumber = 0 ; private : FVertexBufferAndSRV BoneBuffer [ 2 ] ; uint32 CurrentBuffer = 0 ; uint32 PreviousRevisionNumber = 0 ; uint32 CurrentRevisionNumber = 0 ; TConsoleVariableData<int32>* MaxBonesVar ; uint32 MaxGPUSkinBones ; void)",
    "insertText": "SetCurrentRevisionNumber(uint32 RevisionNumber)"
  },
  {
    "label": "GetBoneBufferInternal()",
    "kind": "Method",
    "detail": "Function (PreviousRevisionNumber = CurrentRevisionNumber ; CurrentRevisionNumber = RevisionNumber ; CurrentBuffer = 1 - CurrentBuffer ; } } const FVertexBufferAndSRV&)",
    "insertText": "GetBoneBufferInternal(bool bPrevious)"
  },
  {
    "label": "CurrentBuffer()",
    "kind": "Method",
    "detail": "Function (bPrevious = false ; } uint32 BufferIndex =)",
    "insertText": "CurrentBuffer(uint32)"
  },
  {
    "label": "FGPUBaseSkinVertexFactory()",
    "kind": "Method",
    "detail": "Function (const FVertexBufferAndSRV& Ret = BoneBuffer [ BufferIndex ] ; return Ret ; } } ;)",
    "insertText": "FGPUBaseSkinVertexFactory(ERHIFeatureLevel::Type InFeatureLevel, uint32 InNumVertices, uint32 InBaseVertexIndex, bool bInUsedForPassthroughVertexFactory) : FVertexFactory(InFeatureLevel) , NumVertices(InNumVertices) , BaseVertexIndex(InBaseVertexIndex) , bUsedForPassthroughVertexFactory(bInUsedForPassthroughVertexFactory)"
  },
  {
    "label": "FGPUBaseSkinVertexFactory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGPUBaseSkinVertexFactory()"
  },
  {
    "label": "GetShaderData()",
    "kind": "Method",
    "detail": "Function (} FShaderDataType&)",
    "insertText": "GetShaderData()"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(FRHICommandListBase& RHICmdList, const FGPUSkinDataType* InData)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetMaxGPUSkinBones()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxGPUSkinBones(const class ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "UseUnlimitedBoneInfluences()",
    "kind": "Method",
    "detail": "Function (const uint32 GHardwareMaxGPUSkinBones = 6 5 5 3 6 ; bool)",
    "insertText": "UseUnlimitedBoneInfluences(uint32 MaxBoneInfluences, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "GetUnlimitedBoneInfluences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUnlimitedBoneInfluences(const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "GetBoneInfluenceLimitForAsset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBoneInfluenceLimitForAsset(int32 AssetProvidedLimit, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "GetAlwaysUseDeformerForUnlimitedBoneInfluences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAlwaysUseDeformerForUnlimitedBoneInfluences(EShaderPlatform Platform)"
  },
  {
    "label": "UpdateMorphState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMorphState(FRHICommandListBase& RHICmdList, bool bUseMorphTarget)"
  },
  {
    "label": "GetMorphVertexBuffer()",
    "kind": "Method",
    "detail": "Function (const class FMorphVertexBuffer*)",
    "insertText": "GetMorphVertexBuffer(bool bPrevious)"
  },
  {
    "label": "GetMorphVertexBufferUpdatedFrameNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMorphVertexBufferUpdatedFrameNumber()"
  },
  {
    "label": "GetClothVertexFactory()",
    "kind": "Method",
    "detail": "Function (class FGPUBaseSkinAPEXClothVertexFactory*)",
    "insertText": "GetClothVertexFactory()"
  },
  {
    "label": "Use16BitBoneIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Use16BitBoneIndex()"
  },
  {
    "label": "GetPositionsSRV()",
    "kind": "Method",
    "detail": "Function (} const FShaderResourceViewRHIRef)",
    "insertText": "GetPositionsSRV()"
  },
  {
    "label": "GetTangentsSRV()",
    "kind": "Method",
    "detail": "Function (} const FShaderResourceViewRHIRef)",
    "insertText": "GetTangentsSRV()"
  },
  {
    "label": "GetTextureCoordinatesSRV()",
    "kind": "Method",
    "detail": "Function (} const FShaderResourceViewRHIRef)",
    "insertText": "GetTextureCoordinatesSRV()"
  },
  {
    "label": "GetColorComponentsSRV()",
    "kind": "Method",
    "detail": "Function (} const FShaderResourceViewRHIRef)",
    "insertText": "GetColorComponentsSRV()"
  },
  {
    "label": "GetNumTexCoords()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumTexCoords()"
  },
  {
    "label": "GetColorIndexMask()",
    "kind": "Method",
    "detail": "Function (} const uint32)",
    "insertText": "GetColorIndexMask()"
  },
  {
    "label": "IsMorphTarget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMorphTarget()"
  },
  {
    "label": "UpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateUniformBuffer(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer*)",
    "insertText": "GetUniformBuffer()"
  },
  {
    "label": "GetOverrideVertexStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOverrideVertexStreams(FVertexInputStreamArray& VertexStreams)"
  },
  {
    "label": "IsReadyForStaticMeshCaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForStaticMeshCaching()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "AddVertexElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVertexElements(FVertexDeclarationElementList& OutElements)"
  },
  {
    "label": "DECLARE_VERTEX_FACTORY_TYPE()",
    "kind": "Method",
    "detail": "Function (FShaderDataType ShaderData ; TGlobalResource<FBoneBufferPool> BoneBufferPool ; TUniquePtr<FGPUSkinDataType> Data ; FUniformBufferRHIRef UniformBuffer ; TRefCountPtr<FRHIStreamSourceSlot> MorphDeltaBufferSlot ; int32 MorphDeltaStreamIndex = - 1 ; private : uint32 NumVertices ; uint32 BaseVertexIndex ; bool bUsedForPassthroughVertexFactory ; } ; template<GPUSkinBoneInfluenceType BoneInfluenceType> class TGPUSkinVertexFactory : public FGPUBaseSkinVertexFactory {)",
    "insertText": "DECLARE_VERTEX_FACTORY_TYPE(TGPUSkinVertexFactory<BoneInfluenceType>)"
  },
  {
    "label": "TGPUSkinVertexFactory()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TGPUSkinVertexFactory(ERHIFeatureLevel::Type InFeatureLevel, uint32 InNumVertices, uint32 InBaseVertexIndex, bool bInUsedForPassthroughVertexFactory) : FGPUBaseSkinVertexFactory(InFeatureLevel, InNumVertices, InBaseVertexIndex, bInUsedForPassthroughVertexFactory)"
  },
  {
    "label": "GetBoneInfluenceType()",
    "kind": "Method",
    "detail": "Function (} GPUSkinBoneInfluenceType)",
    "insertText": "GetBoneInfluenceType()"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FVertexFactoryShaderPermutationParameters& Parameters)"
  },
  {
    "label": "GetPSOPrecacheVertexFetchElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPSOPrecacheVertexFetchElements(EVertexInputStreamType VertexInputStreamType, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "GetVertexElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexElements(ERHIFeatureLevel::Type FeatureLevel, EVertexInputStreamType InputStreamType, FGPUSkinDataType& GPUSkinData, FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetVertexElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexElements(ERHIFeatureLevel::Type FeatureLevel, EVertexInputStreamType InputStreamType, FGPUSkinDataType& GPUSkinData, FVertexDeclarationElementList& Elements, FVertexStreamList& InOutStreams, int32& OutMorphDeltaStreamIndex)"
  },
  {
    "label": "ClothShaderType()",
    "kind": "Method",
    "detail": "Function (} ; class FGPUBaseSkinAPEXClothVertexFactory { public : struct ClothShaderType {)",
    "insertText": "ClothShaderType()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdateClothSimulationData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateClothSimulationData(FRHICommandList& RHICmdList, TConstArrayView<FVector3f> InSimulPositions, TConstArrayView<FVector3f> InSimulNormals, uint32 RevisionNumber, const FName& AssetPathName)"
  },
  {
    "label": "ReleaseClothSimulData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseClothSimulData()"
  },
  {
    "label": "ReleasePooledResource()",
    "kind": "Method",
    "detail": "Function (ClothSimulDataBufferPool .)",
    "insertText": "ReleasePooledResource(ClothSimulPositionNormalBuffer[i])"
  },
  {
    "label": "EnableDoubleBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableDoubleBuffer()"
  },
  {
    "label": "GetClothBufferForWriting()",
    "kind": "Method",
    "detail": "Function (FVertexBufferAndSRV&)",
    "insertText": "GetClothBufferForWriting()"
  },
  {
    "label": "HasClothBufferForReading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClothBufferForReading(bool bPrevious)"
  },
  {
    "label": "GetClothBufferForReading()",
    "kind": "Method",
    "detail": "Function (const FVertexBufferAndSRV&)",
    "insertText": "GetClothBufferForReading(bool bPrevious)"
  },
  {
    "label": "GetClothToLocalForWriting()",
    "kind": "Method",
    "detail": "Function (FMatrix44f&)",
    "insertText": "GetClothToLocalForWriting()"
  },
  {
    "label": "GetClothToLocalForReading()",
    "kind": "Method",
    "detail": "Function (const FMatrix44f&)",
    "insertText": "GetClothToLocalForReading(bool bPrevious)"
  },
  {
    "label": "GetClothBufferIndexInternal()",
    "kind": "Method",
    "detail": "Function (float ClothBlendWeight = 1 . 0 f ; FVector3f WorldScale = FVector3f::OneVector ; uint32 NumInfluencesPerVertex = 1 ; bool bEnabled = false ; private : uint32)",
    "insertText": "GetClothBufferIndexInternal(bool bPrevious)"
  },
  {
    "label": "GetClothBufferIndexForWriting()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetClothBufferIndexForWriting()"
  },
  {
    "label": "GetClothBufferIndexForReading()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetClothBufferIndexForReading(bool bPrevious)"
  },
  {
    "label": "FGPUBaseSkinAPEXClothVertexFactory()",
    "kind": "Method",
    "detail": "Function (CurrentBuffer = 0 ; PreviousRevisionNumber = 0 ; CurrentRevisionNumber = 0 ; ClothToLocal [ 0 ] = FMatrix44f::Identity ; ClothToLocal [ 1 ] = FMatrix44f::Identity ; bDoubleBuffer = false ; } } ;)",
    "insertText": "FGPUBaseSkinAPEXClothVertexFactory(uint32 InNumInfluencesPerVertex)"
  },
  {
    "label": "FGPUBaseSkinAPEXClothVertexFactory()",
    "kind": "Method",
    "detail": "Function (ClothShaderData . NumInfluencesPerVertex = InNumInfluencesPerVertex ; } ~)",
    "insertText": "FGPUBaseSkinAPEXClothVertexFactory()"
  },
  {
    "label": "GetClothShaderData()",
    "kind": "Method",
    "detail": "Function (} ClothShaderType&)",
    "insertText": "GetClothShaderData()"
  },
  {
    "label": "GetVertexFactory()",
    "kind": "Method",
    "detail": "Function (FGPUBaseSkinVertexFactory*)",
    "insertText": "GetVertexFactory()"
  },
  {
    "label": "GetClothBuffer()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef)",
    "insertText": "GetClothBuffer()"
  },
  {
    "label": "TGPUSkinAPEXClothVertexFactory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TGPUSkinAPEXClothVertexFactory()"
  },
  {
    "label": "ClothDataPtr()",
    "kind": "Method",
    "detail": "Function (delete)",
    "insertText": "ClothDataPtr(void)this->Data.Release()"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FVertexFactoryShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "FGPUSkinPassthroughVertexFactory()",
    "kind": "Method",
    "detail": "Function (protected : FGPUSkinAPEXClothDataType* ClothDataPtr = nullptr ; } ; class FGPUSkinPassthroughVertexFactory : public FLocalVertexFactory { public : enum EShaderResource { Position,PreviousPosition,Tangent,Color,TexCoord,NumShaderResources } ; enum EVertexAttribute { VertexPosition,VertexTangent,VertexColor,NumAttributes } ; enum class EVertexAttributeFlags : uint8 { None = 0,Position = 1<<EVertexAttribute::VertexPosition,Tangent = 1<<EVertexAttribute::VertexTangent,Color = 1<<EVertexAttribute::VertexColor,} ;)",
    "insertText": "FGPUSkinPassthroughVertexFactory(ERHIFeatureLevel::Type InFeatureLevel, EVertexAttributeFlags InVertexAttributeMask)"
  },
  {
    "label": "FAddVertexAttributeDesc()",
    "kind": "Method",
    "detail": "Function (struct FAddVertexAttributeDesc {)",
    "insertText": "FAddVertexAttributeDesc() : StreamBuffers(InPlace, nullptr), SRVs(InPlace, nullptr)"
  },
  {
    "label": "ResetVertexAttributes()",
    "kind": "Method",
    "detail": "Function (} uint32 FrameNumber = ~ 0 U ; TStaticArray<FRHIBuffer*,EVertexAttribute::NumAttributes> StreamBuffers ; TStaticArray<FRHIShaderResourceView*,EShaderResource::NumShaderResources> SRVs ; } ; void)",
    "insertText": "ResetVertexAttributes(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "SetVertexAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexAttributes(FRHICommandListBase& RHICmdList, FGPUBaseSkinVertexFactory const* InSourceVertexFactory, FAddVertexAttributeDesc const& InDesc)"
  },
  {
    "label": "SupportsPositionOnlyStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsPositionOnlyStream()"
  },
  {
    "label": "UpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUniformBuffer(FRHICommandListBase& RHICmdList, FGPUBaseSkinVertexFactory const* InSourceVertexFactory)"
  },
  {
    "label": "UpdateLooseUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLooseUniformBuffer(FRHICommandListBase& RHICmdList, FGPUBaseSkinVertexFactory const* InSourceVertexFactory, uint32 InFrameNumber)"
  }
]