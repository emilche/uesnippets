[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FWildcardString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWildcardString"
  },
  {
    "label": "FVisualizeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualizeTexture"
  },
  {
    "label": "FGlobalShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderMap"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConfig"
  },
  {
    "label": "FRequested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequested"
  },
  {
    "label": "FCaptured",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaptured"
  },
  {
    "label": "FVisualizeTexturePresent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualizeTexturePresent"
  },
  {
    "label": "FVisualizeTexture()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Misc / WildcardString . h \" # include \" RenderGraphDefinitions . h \" # include \" RenderResource . h \" # include \" RendererInterface . h \" # include \" Templates / RefCounting . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_3 # include \" RHIDefinitions . h \" # include \" RenderGraph . h \" # include \" RenderGraphResources . h \" # endif class FOutputDevice ; class FRDGBuilder ; class FRHICommandListImmediate ; class FWildcardString ; class FVisualizeTexture : public FRenderResource { public :)",
    "insertText": "FVisualizeTexture()"
  },
  {
    "label": "ParseCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseCommands(const TCHAR* Cmd, FOutputDevice &Ar)"
  },
  {
    "label": "DebugLogOnCrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugLogOnCrash()"
  },
  {
    "label": "GetTextureInfos_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureInfos_GameThread(TArray<FString>& Infos)"
  },
  {
    "label": "BeginFrameRenderThread()",
    "kind": "Method",
    "detail": "Function (# if SUPPORTS_VISUALIZE_TEXTURE void)",
    "insertText": "BeginFrameRenderThread()"
  },
  {
    "label": "BeginViewRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginViewRenderThread(ERHIFeatureLevel::Type InFeatureLevel, int32 UniqueId, const TCHAR* Description, bool bIsSceneCapture)"
  },
  {
    "label": "SetSceneTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSceneTextures(const TArray<FRDGTextureRef>& InSceneTextures, FIntPoint InFamilySize, const TArray<FIntRect>& InFamilyViewRects)"
  },
  {
    "label": "EndViewRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndViewRenderThread()"
  },
  {
    "label": "EndFrameRenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrameRenderThread()"
  },
  {
    "label": "SetCheckPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCheckPoint(FRDGBuilder& GraphBuilder, IPooledRenderTarget* PooledRenderTarget)"
  },
  {
    "label": "SetCheckPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCheckPoint(FRHICommandListImmediate& RHICmdList, IPooledRenderTarget* PooledRenderTarget)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "IsRequestedView()",
    "kind": "Method",
    "detail": "Function (# if SUPPORTS_VISUALIZE_TEXTURE return State ! = EState::Inactive ; # else return false ; # endif } bool)",
    "insertText": "IsRequestedView()"
  },
  {
    "label": "AddVisualizeTexturePass()",
    "kind": "Method",
    "detail": "Function (# if SUPPORTS_VISUALIZE_TEXTURE return bIsRequestedView ; # else return false ; # endif } FRDGTextureRef)",
    "insertText": "AddVisualizeTexturePass(FRDGBuilder& GraphBuilder, class FGlobalShaderMap* ShaderMap, const FRDGTextureRef InputTexture)"
  },
  {
    "label": "AddVisualizeTextureAlphaPass()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "AddVisualizeTextureAlphaPass(FRDGBuilder& GraphBuilder, class FGlobalShaderMap* ShaderMap, const FRDGTextureRef InputTexture)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : enum class EFlags { None = 0,SaveBitmap = 1<<0,SaveBitmapAsStencil = 1<<1,} ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EFlags)"
  },
  {
    "label": "DisplayHelp()",
    "kind": "Method",
    "detail": "Function (enum class EState { Inactive,DisplayViews,DisplayResources,TrackResources,} ; enum class ECommand { Unknown,DisableVisualization,VisualizeResource,DisplayHelp,DisplayPoolResourceList,DisplayResourceList,DisplayViewList,SetViewId } ; enum class EInputUVMapping { LeftTop,Whole,PixelPerfectCenter,PictureInPicture } ; enum class EInputValueMapping { Color,Depth,Shadow } ; enum class EDisplayMode { MultiColomn,Detailed,} ; enum class ESortBy { Index,Name,Size } ; enum class EShaderOp { Frac,Saturate } ; # if SUPPORTS_VISUALIZE_TEXTURE void)",
    "insertText": "DisplayHelp(FOutputDevice &Ar)"
  },
  {
    "label": "DisplayPoolResourceListToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayPoolResourceListToLog(ESortBy SortBy)"
  },
  {
    "label": "DisplayResourceListToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayResourceListToLog(const TOptional<FWildcardString>& Wildcard)"
  },
  {
    "label": "DisplayViewListToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayViewListToLog()"
  },
  {
    "label": "ShouldCapture()",
    "kind": "Method",
    "detail": "Function (TOptional<uint32>)",
    "insertText": "ShouldCapture(const TCHAR* DebugName, uint32 MipIndex)"
  },
  {
    "label": "AddVisualizeTexturePass()",
    "kind": "Method",
    "detail": "Function (struct FConfig { float RGBMul = 1 . 0 f ; float AMul = 0 . 0 f ; int32 SingleChannel = - 1 ; float SingleChannelMul = 0 . 0 f ; EFlags Flags = EFlags::None ; EInputUVMapping InputUVMapping = EInputUVMapping::PictureInPicture ; EShaderOp ShaderOp = EShaderOp::Frac ; uint32 MipIndex = 0 ; uint32 ArrayIndex = 0 ; } ; FRDGTextureRef)",
    "insertText": "AddVisualizeTexturePass(FRDGBuilder& GraphBuilder, class FGlobalShaderMap* ShaderMap, const FRDGTextureRef InputTexture, const FConfig& Config, EInputValueMapping InputValueMapping, uint32 CaptureId)"
  },
  {
    "label": "CreateContentCapturePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateContentCapturePass(FRDGBuilder& GraphBuilder, FRDGTextureRef Texture, uint32 CaptureId)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "Visualize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visualize(const FString& InName, TOptional<uint32> InVersion = {})"
  },
  {
    "label": "GetVersionCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetVersionCount(const TCHAR* InName)"
  },
  {
    "label": "FCaptured()",
    "kind": "Method",
    "detail": "Function (FConfig Config ; EState State = EState::Inactive ; TOptional<FWildcardString> DisplayResourcesParam ; bool bAnyViewRendered = false ; bool bIsRequestedView = false ; bool bFoundRequestedView = false ; TArray<FIntRect> FamilyViewRects ; struct FRequested { uint32 ViewUniqueId = 0 ; FString ViewName ; FString Name ; TOptional<uint32> Version ; } Requested ; struct FCaptured {)",
    "insertText": "FCaptured()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Desc . DebugName =)",
    "insertText": "TEXT(\"VisualizeTexture\")"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} TRefCountPtr<IPooledRenderTarget> PooledRenderTarget ; FRDGTextureRef Texture = nullptr ; FPooledRenderTargetDesc Desc ; EInputValueMapping InputValueMapping = EInputValueMapping::Color ; int32 ViewUniqueId = 0 ; FIntPoint OutputExtent ; TArray<FIntRect> ViewRects ; } Captured ; ERHIFeatureLevel::Type FeatureLevel = ERHIFeatureLevel::SM5 ; TMap<int32,FString> ViewDescriptionMap ; TMap<FString,uint32> VersionCountMap ; # endif class FRDGBuilder ; class FVisualizeTexturePresent ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FVisualizeTexture::EFlags)"
  }
]