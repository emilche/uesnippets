[
  {
    "label": "DxilRDATBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilRDATBuilder"
  },
  {
    "label": "SizeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SizeInfo"
  },
  {
    "label": "m_pTables()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DxilRDATParts . h \" # include<vector> namespace hlsl { class DxilRDATBuilder { llvm::SmallVector<char,1 0 2 4> m_RDATBuffer ; std::vector<std::unique_ptr<RDATPart>> m_Parts ; StringBufferPart* m_pStringBufferPart = nullptr ; IndexArraysPart* m_pIndexArraysPart = nullptr ; RawBytesPart* m_pRawBytesPart = nullptr ; RDATTable*)",
    "insertText": "m_pTables(size_t)"
  },
  {
    "label": "GetOrAddPart()",
    "kind": "Method",
    "detail": "Function (} ; bool m_bRecordDeduplicationEnabled = true ; template<T> T*)",
    "insertText": "GetOrAddPart(T **ptrStorage)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_Parts .)",
    "insertText": "emplace_back(llvm::make_unique<T>())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* ptrStorage = reinterpret_cast<)",
    "insertText": "T(m_Parts.back().get())"
  },
  {
    "label": "DxilRDATBuilder()",
    "kind": "Method",
    "detail": "Function (} return* ptrStorage ; } public :)",
    "insertText": "DxilRDATBuilder(bool allowRecordDuplication)"
  },
  {
    "label": "GetOrAddTable()",
    "kind": "Method",
    "detail": "Function (template<T> RDATTable*)",
    "insertText": "GetOrAddTable()"
  },
  {
    "label": "m_pTables()",
    "kind": "Method",
    "detail": "Function (RDATTable** tablePtr =&)",
    "insertText": "m_pTables(size_t)RDAT::RecordTraits<T>::TableIndex()"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (m_Parts .)",
    "insertText": "emplace_back(llvm::make_unique<RDATTable>())"
  },
  {
    "label": "RDATTable()",
    "kind": "Method",
    "detail": "Function (* tablePtr = reinterpret_cast<)",
    "insertText": "RDATTable(m_Parts.back().get())"
  },
  {
    "label": "InsertRecord()",
    "kind": "Method",
    "detail": "Function (} return* tablePtr ; } template<T> uint32_t)",
    "insertText": "InsertRecord(const T &record)"
  },
  {
    "label": "InsertString()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "InsertString(llvm::StringRef str)"
  },
  {
    "label": "InsertBytesRef()",
    "kind": "Method",
    "detail": "Function (} hlsl::RDAT::BytesRef)",
    "insertText": "InsertBytesRef(const void *ptr, size_t size)"
  },
  {
    "label": "InsertBytesRef()",
    "kind": "Method",
    "detail": "Function (} hlsl::RDAT::BytesRef)",
    "insertText": "InsertBytesRef(llvm::StringRef data)"
  },
  {
    "label": "InsertArray()",
    "kind": "Method",
    "detail": "Function (} template<T> uint32_t)",
    "insertText": "InsertArray(T begin, T end)"
  },
  {
    "label": "InsertArray()",
    "kind": "Method",
    "detail": "Function (} template<T> uint32_t)",
    "insertText": "InsertArray(T arr)"
  },
  {
    "label": "GetStringBufferPart()",
    "kind": "Method",
    "detail": "Function (} StringBufferPart&)",
    "insertText": "GetStringBufferPart()"
  },
  {
    "label": "GetIndexArraysPart()",
    "kind": "Method",
    "detail": "Function (} IndexArraysPart&)",
    "insertText": "GetIndexArraysPart()"
  },
  {
    "label": "GetRawBytesPart()",
    "kind": "Method",
    "detail": "Function (} RawBytesPart&)",
    "insertText": "GetRawBytesPart()"
  },
  {
    "label": "ComputeSize()",
    "kind": "Method",
    "detail": "Function (} struct SizeInfo { uint32_t sizeInBytes ; uint32_t numParts ; } ; SizeInfo)",
    "insertText": "ComputeSize()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "size()"
  },
  {
    "label": "FinalizeAndGetData()",
    "kind": "Method",
    "detail": "Function (} llvm::StringRef)",
    "insertText": "FinalizeAndGetData()"
  }
]