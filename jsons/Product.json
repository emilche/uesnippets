[
  {
    "label": "ProductImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProductImpl"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Product",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Product"
  },
  {
    "label": "dense_product_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dense_product_base"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_FIXED()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PRODUCT_H # define EIGEN_PRODUCT_H namespace Eigen { template<Lhs,Rhs,int Option,StorageKind> class ProductImpl ; namespace internal { template<Lhs,Rhs,int Option> struct traits<Product<Lhs,Rhs,Option>> { typedef remove_all<Lhs>::type LhsCleaned ; typedef remove_all<Rhs>::type RhsCleaned ; typedef traits<LhsCleaned> LhsTraits ; typedef traits<RhsCleaned> RhsTraits ; typedef MatrixXpr XprKind ; typedef ScalarBinaryOpTraits<traits<LhsCleaned>::Scalar,traits<RhsCleaned>::Scalar>::ReturnType Scalar ; typedef product_promote_storage_type<LhsTraits::StorageKind,RhsTraits::StorageKind,internal::product_type<Lhs,Rhs>::ret>::ret StorageKind ; typedef promote_index_type<LhsTraits::StorageIndex,RhsTraits::StorageIndex>::type StorageIndex ; enum { RowsAtCompileTime = LhsTraits::RowsAtCompileTime,ColsAtCompileTime = RhsTraits::ColsAtCompileTime,MaxRowsAtCompileTime = LhsTraits::MaxRowsAtCompileTime,MaxColsAtCompileTime = RhsTraits::MaxColsAtCompileTime,InnerSize =)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_FIXED(LhsTraits::ColsAtCompileTime, RhsTraits::RowsAtCompileTime), Flags = (MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1) ? RowMajorBit : (MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1) ? 0 : ( ((LhsTraits::Flags&NoPreferredStorageOrderBit) && (RhsTraits::Flags&RowMajorBit)) || ((RhsTraits::Flags&NoPreferredStorageOrderBit) && (LhsTraits::Flags&RowMajorBit)))"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; } template<_Lhs,_Rhs,int Option> class Product : public ProductImpl<_Lhs,_Rhs,Option,internal::product_promote_storage_type<internal::traits<_Lhs>::StorageKind,internal::traits<_Rhs>::StorageKind,internal::product_type<_Lhs,_Rhs>::ret>::ret> { public : typedef _Lhs Lhs ; typedef _Rhs Rhs ; typedef ProductImpl<Lhs,Rhs,Option,internal::product_promote_storage_type<internal::traits<Lhs>::StorageKind,internal::traits<Rhs>::StorageKind,internal::product_type<Lhs,Rhs>::ret>::ret>::Base Base ;)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(Product)"
  },
  {
    "label": "Product()",
    "kind": "Method",
    "detail": "Function (typedef internal::ref_selector<Rhs>::type RhsNested ; typedef internal::remove_all<LhsNested>::type LhsNestedCleaned ; typedef internal::remove_all<RhsNested>::type RhsNestedCleaned ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(lhs.cols() == rhs.rows() && \"invalid matrix product\" && \"if you wanted a coeff-wise or a dot product use the respective explicit functions\")"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const LhsNestedCleaned&)",
    "insertText": "lhs()"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Lhs,Rhs,int Option,StorageKind> class ProductImpl : public internal::generic_xpr_base<Product<Lhs,Rhs,Option>,MatrixXpr,StorageKind>::type { public : typedef internal::generic_xpr_base<Product<Lhs,Rhs,Option>,MatrixXpr,StorageKind>::type Base ; } ; template<Lhs,Rhs,int Option> class ProductImpl<Lhs,Rhs,Option,Dense> : public internal::dense_product_base<Lhs,Rhs,Option> { typedef Product<Lhs,Rhs,Option> Derived ; public : typedef internal::dense_product_base<Lhs,Rhs,Option> Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(Derived)"
  },
  {
    "label": "IsOneByOne()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IsOneByOne(RowsAtCompileTime == 1 || RowsAtCompileTime == Dynamic) && (ColsAtCompileTime == 1 || ColsAtCompileTime == Dynamic)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (public : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(EnableCoeff, THIS_METHOD_IS_ONLY_FOR_INNER_OR_LAZY_PRODUCTS)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((Option==LazyProduct) || (this->rows() == 1 && this->cols() == 1))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "coeff(Index i)"
  }
]