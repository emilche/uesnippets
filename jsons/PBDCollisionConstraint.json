[
  {
    "label": "FChaosVDDataWrapperUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDDataWrapperUtils"
  },
  {
    "label": "FCollisionConstraintAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionConstraintAllocator"
  },
  {
    "label": "FCollisionContextAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionContextAllocator"
  },
  {
    "label": "FConstGenericParticleHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstGenericParticleHandle"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePairMidPhase"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FPBDCollisionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraints"
  },
  {
    "label": "FPerShapeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerShapeData"
  },
  {
    "label": "FShapeInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapeInstance"
  },
  {
    "label": "FSingleShapePairCollisionDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleShapePairCollisionDetector"
  },
  {
    "label": "FSolverBody",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverBody"
  },
  {
    "label": "FSolverBodyContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverBodyContainer"
  },
  {
    "label": "FPBDCollisionConstraintMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraintMaterial"
  },
  {
    "label": "FPBDCollisionConstraintContainerCookie",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraintContainerCookie"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "FContactPairModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContactPairModifier"
  },
  {
    "label": "FGenericParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericParticlePairMidPhase"
  },
  {
    "label": "FShapePairParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapePairParticlePairMidPhase"
  },
  {
    "label": "FSphereApproximationParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSphereApproximationParticlePairMidPhase"
  },
  {
    "label": "ContactConstraintSortPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContactConstraintSortPredicate(const FPBDCollisionConstraint& L, const FPBDCollisionConstraint& R)"
  },
  {
    "label": "FPBDCollisionConstraintMaterial()",
    "kind": "Method",
    "detail": "Function (int32 Chaos_Collision_MaxManifoldPoints ; class FPBDCollisionConstraintMaterial { public : PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FPBDCollisionConstraintMaterial() : FaceIndex(INDEX_NONE) , DynamicFriction(0) , StaticFriction(0) , Restitution(0) , RestitutionThreshold(0) , InvMassScale0(1) , InvMassScale1(1) , InvInertiaScale0(1) , InvInertiaScale1(1) , SoftSeparation(0) , BaseFrictionImpulse(0)"
  },
  {
    "label": "FPBDCollisionConstraintMaterial()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDCollisionConstraintMaterial(const FPBDCollisionConstraintMaterial& Other) : FaceIndex(Other.FaceIndex) , DynamicFriction(Other.DynamicFriction) , StaticFriction(Other.StaticFriction) , Restitution(Other.Restitution) , RestitutionThreshold(Other.RestitutionThreshold) , InvMassScale0(Other.InvMassScale0) , InvMassScale1(Other.InvMassScale1) , InvInertiaScale0(Other.InvInertiaScale0) , InvInertiaScale1(Other.InvInertiaScale1) , SoftSeparation(Other.SoftSeparation) , BaseFrictionImpulse(Other.BaseFrictionImpulse)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FPBDCollisionConstraintMaterial&)",
    "insertText": "operator(const FPBDCollisionConstraintMaterial& Other)"
  },
  {
    "label": "FImplicitBoundsTestFlags()",
    "kind": "Method",
    "detail": "Function (namespace Private { union FImplicitBoundsTestFlags {)",
    "insertText": "FImplicitBoundsTestFlags() : Bits(0)"
  },
  {
    "label": "CalculateImplicitBoundsTestFlags()",
    "kind": "Method",
    "detail": "Function (} struct { uint8 bEnableAABBCheck : 1 ; uint8 bEnableOBBCheck0 : 1 ; uint8 bEnableOBBCheck1 : 1 ; uint8 bEnableDistanceCheck : 1 ; uint8 bEnableManifoldUpdate : 1 ; uint8 bIsProbe : 1 ; } ; uint8 Bits ; } ; FImplicitBoundsTestFlags)",
    "insertText": "CalculateImplicitBoundsTestFlags(FGeometryParticleHandle* Particle0, const FImplicitObject* Implicit0, const FPerShapeData* Shape0, FGeometryParticleHandle* Particle1, const FImplicitObject* Implicit1, const FPerShapeData* Shape1, FRealSingle& OutDistanceCheckSize)"
  },
  {
    "label": "FPBDCollisionConstraintContainerCookie()",
    "kind": "Method",
    "detail": "Function (} class FPBDCollisionConstraintContainerCookie { public :)",
    "insertText": "FPBDCollisionConstraintContainerCookie() : MidPhase(nullptr) , CreationEpoch(INDEX_NONE) , LastUsedEpoch(INDEX_NONE) , ConstraintIndex(INDEX_NONE) , bIsMultiShapePair(false) , CCDConstraintIndex(INDEX_NONE)"
  },
  {
    "label": "ClearContainerData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearContainerData()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (public : using FConstraintContainerHandle = TIntrusiveConstraintHandle<FPBDCollisionConstraint> ; FRealSingle MaxTOI = std::numeric_limits<FRealSingle)",
    "insertText": "max()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Make(FGeometryParticleHandle* Particle0, const FImplicitObject* Implicit0, const FPerShapeData* Shape0, const FBVHParticles* Simplicial0, const FRigidTransform3& ImplicitLocalTransform0, FGeometryParticleHandle* Particle1, const FImplicitObject* Implicit1, const FPerShapeData* Shape1, const FBVHParticles* Simplicial1, const FRigidTransform3& ImplicitLocalTransform1, const FReal InCullDistance, const bool bInUseManifold, const EContactShapesType ShapesType, FPBDCollisionConstraint& OutConstraint)"
  },
  {
    "label": "MakeTriangle()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraint)",
    "insertText": "MakeTriangle(const FImplicitObject* Implicit0)"
  },
  {
    "label": "MakeCopy()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraint)",
    "insertText": "MakeCopy(const FPBDCollisionConstraint& Source)"
  },
  {
    "label": "RestoreFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFrom(const FPBDCollisionConstraint& Source)"
  },
  {
    "label": "FPBDCollisionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDCollisionConstraint()"
  },
  {
    "label": "GetCCDEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCCDEnabled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Flags . bCCDEnabled = bCCDEnabled ; Flags . bCCDSweepEnabled = bCCDEnabled ;)",
    "insertText": "if(bCCDEnabled && (CCDEnablePenetration == FReal(0)))"
  },
  {
    "label": "InitCCDThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCCDThreshold()"
  },
  {
    "label": "GetCCDSweepEnabled()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetCCDSweepEnabled()"
  },
  {
    "label": "GetCCDEnablePenetration()",
    "kind": "Method",
    "detail": "Function (Flags . bCCDSweepEnabled = bCCDSweepEnabled ; } FReal)",
    "insertText": "GetCCDEnablePenetration()"
  },
  {
    "label": "GetCollisionRadius0()",
    "kind": "Method",
    "detail": "Function (} const FReal)",
    "insertText": "GetCollisionRadius0()"
  },
  {
    "label": "GetCollisionRadius1()",
    "kind": "Method",
    "detail": "Function (} const FReal)",
    "insertText": "GetCollisionRadius1()"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Activate()"
  },
  {
    "label": "UpdateParticleTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateParticleTransform(FGeometryParticleHandle* InParticle)"
  },
  {
    "label": "ResetPhi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPhi(FReal InPhi)"
  },
  {
    "label": "GetPhi()",
    "kind": "Method",
    "detail": "Function (ClosestManifoldPointIndex = INDEX_NONE ; } FReal)",
    "insertText": "GetPhi()"
  },
  {
    "label": "BeginTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginTick()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Flags . bDisabled = true ;)",
    "insertText": "if(!IsSleeping())"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (Flags . bIsCurrent = false ; } ContainerCookie . ConstraintIndex = INDEX_NONE ; ContainerCookie . CCDConstraintIndex = INDEX_NONE ; } bool)",
    "insertText": "IsCurrent()"
  },
  {
    "label": "GetDisabled()",
    "kind": "Method",
    "detail": "Function (Flags . bDisabled = bInDisabled ; } bool)",
    "insertText": "GetDisabled()"
  },
  {
    "label": "GetIsProbe()",
    "kind": "Method",
    "detail": "Function (Flags . bIsProbe = bInProbe ; } bool)",
    "insertText": "GetIsProbe()"
  },
  {
    "label": "IsInitialContact()",
    "kind": "Method",
    "detail": "Function (Flags . bInitialContact = bInIsInitialContact ; } bool)",
    "insertText": "IsInitialContact()"
  },
  {
    "label": "SetIsSleeping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSleeping(const bool bInIsSleeping)"
  },
  {
    "label": "CalculateWorldContactNormal()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "CalculateWorldContactNormal()"
  },
  {
    "label": "CalculateWorldContactLocation()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "CalculateWorldContactLocation()"
  },
  {
    "label": "ClearMaterialProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMaterialProperties()"
  },
  {
    "label": "UpdateMaterialProperties()",
    "kind": "Method",
    "detail": "Function (Flags . bMaterialSet = false ; } void)",
    "insertText": "UpdateMaterialProperties()"
  },
  {
    "label": "UpdateMaterialPropertiesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterialPropertiesImpl()"
  },
  {
    "label": "SetModifierApplied()",
    "kind": "Method",
    "detail": "Function (Flags . bMaterialSet = true ; } } void)",
    "insertText": "SetModifierApplied()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Material . InvMassScale0 =)",
    "insertText": "FRealSingle(InInvMassScale)"
  },
  {
    "label": "GetInvMassScale0()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetInvMassScale0()"
  },
  {
    "label": "GetInvMassScale1()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetInvMassScale1()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Material . InvInertiaScale0 =)",
    "insertText": "FRealSingle(InInvInertiaScale)"
  },
  {
    "label": "GetInvInertiaScale0()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetInvInertiaScale0()"
  },
  {
    "label": "GetInvInertiaScale1()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetInvInertiaScale1()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Stiffness =)",
    "insertText": "FRealSingle(InStiffness)"
  },
  {
    "label": "GetStiffness()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetStiffness()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Material . Restitution =)",
    "insertText": "FRealSingle(InRestitution)"
  },
  {
    "label": "GetRestitution()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetRestitution()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Material . RestitutionThreshold =)",
    "insertText": "FRealSingle(InRestitutionThreshold)"
  },
  {
    "label": "GetRestitutionThreshold()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetRestitutionThreshold()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Material . StaticFriction =)",
    "insertText": "FRealSingle(InStaticFriction)"
  },
  {
    "label": "GetStaticFriction()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetStaticFriction()"
  },
  {
    "label": "SetDynamicFriction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDynamicFriction(const FReal InDynamicFriction)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Material . DynamicFriction =)",
    "insertText": "FRealSingle(InDynamicFriction)"
  },
  {
    "label": "GetDynamicFriction()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetDynamicFriction()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Material . BaseFrictionImpulse =)",
    "insertText": "FRealSingle(InMinFrictionPushOut)"
  },
  {
    "label": "GetMinFrictionPushOut()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetMinFrictionPushOut()"
  },
  {
    "label": "SetSoftSeparation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSoftSeparation(const FReal InSoftSeparation)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (Material . SoftSeparation =)",
    "insertText": "FRealSingle(InSoftSeparation)"
  },
  {
    "label": "GetSoftSeparation()",
    "kind": "Method",
    "detail": "Function (} FRealSingle)",
    "insertText": "GetSoftSeparation()"
  },
  {
    "label": "GetCullDistance()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetCullDistance()"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (CullDistance =)",
    "insertText": "FRealSingle(InCullDistance)"
  },
  {
    "label": "GetRelativeMovement()",
    "kind": "Method",
    "detail": "Function (} FVec3f)",
    "insertText": "GetRelativeMovement()"
  },
  {
    "label": "GetUseManifold()",
    "kind": "Method",
    "detail": "Function (RelativeMovement = InDelta ; } bool)",
    "insertText": "GetUseManifold()"
  },
  {
    "label": "ResetManifold()",
    "kind": "Method",
    "detail": "Function (Flags . bIsProbe = BoundsTestFlags . bIsProbe ; Flags . bModifierApplied = false ; } } void)",
    "insertText": "ResetManifold()"
  },
  {
    "label": "GetManifoldPoints()",
    "kind": "Method",
    "detail": "Function (TArrayView<FManifoldPoint>)",
    "insertText": "GetManifoldPoints()"
  },
  {
    "label": "NumManifoldPoints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumManifoldPoints()"
  },
  {
    "label": "GetManifoldPoint()",
    "kind": "Method",
    "detail": "Function (} FManifoldPoint&)",
    "insertText": "GetManifoldPoint(const int32 PointIndex)"
  },
  {
    "label": "IsManifoldPointActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsManifoldPointActive(const int32 PointIndex)"
  },
  {
    "label": "GetManifoldPointResult()",
    "kind": "Method",
    "detail": "Function (} const FManifoldPointResult&)",
    "insertText": "GetManifoldPointResult(const int32 PointIndex)"
  },
  {
    "label": "NumEnabledManifoldPoints()",
    "kind": "Method",
    "detail": "Function (FManifoldPointResult ZeroResult ; return ZeroResult ; } return ManifoldPointResults [ PointIndex ] ; } int32)",
    "insertText": "NumEnabledManifoldPoints()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 NumEnabled = 0 ;)",
    "insertText": "if(IsEnabled())"
  },
  {
    "label": "DisableManifoldPoint()",
    "kind": "Method",
    "detail": "Function (+ + NumEnabled ; } } } return NumEnabled ; } void)",
    "insertText": "DisableManifoldPoint(const int32 DisabledManifoldPointIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ManifoldPoints [ DisabledManifoldPointIndex ] . Flags . bDisabled = true ;)",
    "insertText": "if(NumEnabledManifoldPoints() == 0)"
  },
  {
    "label": "SetDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisabled(true)"
  },
  {
    "label": "AddIncrementalManifoldContact()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddIncrementalManifoldContact(const FContactPoint& ContactPoint)"
  },
  {
    "label": "AddOneshotManifoldContact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOneshotManifoldContact(const FContactPoint& ContactPoint)"
  },
  {
    "label": "AddManifoldPoint()",
    "kind": "Method",
    "detail": "Function (int32 ManifoldPointIndex =)",
    "insertText": "AddManifoldPoint(ContactPoint)"
  },
  {
    "label": "SetOneShotManifoldContacts()",
    "kind": "Method",
    "detail": "Function (ClosestManifoldPointIndex = ManifoldPointIndex ; } } } void)",
    "insertText": "SetOneShotManifoldContacts(const TArrayView<const FContactPoint>& ContactPoints)"
  },
  {
    "label": "ResetActiveManifoldContacts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetActiveManifoldContacts()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FReal MinPhi = TNumericLimits<FReal)",
    "insertText": "Max()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumContacts = ContactPoints .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 MaxManifoldPoints = Chaos_Collision_MaxManifoldPoints ;)",
    "insertText": "if((MaxManifoldPoints >= 0) && (NumContacts > MaxManifoldPoints))"
  },
  {
    "label": "LogOneShotManifoldError()",
    "kind": "Method",
    "detail": "Function (NumContacts = MaxManifoldPoints ;)",
    "insertText": "LogOneShotManifoldError(MaxManifoldPoints, ContactPoints)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} ManifoldPoints .)",
    "insertText": "Reserve(NumContacts)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FContactPoint& ContactPoint = ContactPoints [ ContactIndex ] ;)",
    "insertText": "if(ContactPoint.Phi < CullDistance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ClosestManifoldPointIndex = ManifoldPointIndex ; MinPhi = ContactPoint . Phi ; } } })",
    "insertText": "if(NumManifoldPoints() > 0)"
  },
  {
    "label": "CorrectManifoldPoints()",
    "kind": "Method",
    "detail": "Function (Material . FaceIndex = ManifoldPoints [ 0 ] . ContactPoint . FaceIndex ; Flags . bMaterialSet = false ; } } } void)",
    "insertText": "CorrectManifoldPoints()"
  },
  {
    "label": "UpdateManifoldContacts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateManifoldContacts()"
  },
  {
    "label": "GetShapeRelativeTransform0()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3&)",
    "insertText": "GetShapeRelativeTransform0()"
  },
  {
    "label": "SetLastShapeWorldTransforms()",
    "kind": "Method",
    "detail": "Function (ShapeWorldTransforms [ 0 ] = InShapeWorldTransform0 ; ShapeWorldTransforms [ 1 ] = InShapeWorldTransform1 ; } void)",
    "insertText": "SetLastShapeWorldTransforms(const FRigidTransform3& InShapeWorldTransform0, const FRigidTransform3& InShapeWorldTransform1)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (LastShapeWorldPositionDelta = InShapeWorldTransform0 .)",
    "insertText": "GetTranslation() - InShapeWorldTransform1.GetTranslation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (LastShapeWorldRotationDelta = InShapeWorldTransform0 .)",
    "insertText": "GetRotation().Inverse() * InShapeWorldTransform1.GetRotation()"
  },
  {
    "label": "GetCanRestoreManifold()",
    "kind": "Method",
    "detail": "Function (Flags . bCanRestoreManifold = BoundsTestFlags . bEnableManifoldUpdate ; } bool)",
    "insertText": "GetCanRestoreManifold()"
  },
  {
    "label": "TryAddManifoldContact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAddManifoldContact(const FContactPoint& ContactPoint)"
  },
  {
    "label": "TryInsertManifoldContact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryInsertManifoldContact(const FContactPoint& ContactPoint)"
  },
  {
    "label": "GetGJKWarmStartData()",
    "kind": "Method",
    "detail": "Function (FGJKSimplexData&)",
    "insertText": "GetGJKWarmStartData()"
  },
  {
    "label": "WasManifoldRestored()",
    "kind": "Method",
    "detail": "Function (SolverBodies [ 0 ] = InSolverBody0 ; SolverBodies [ 1 ] = InSolverBody1 ; } bool)",
    "insertText": "WasManifoldRestored()"
  },
  {
    "label": "ResetSavedManifoldPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSavedManifoldPoints()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (SavedManifoldPoints .)",
    "insertText": "Reset()"
  },
  {
    "label": "NumSavedManifoldPoints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumSavedManifoldPoints()"
  },
  {
    "label": "GetSavedManifoldPoint()",
    "kind": "Method",
    "detail": "Function (} const FSavedManifoldPoint&)",
    "insertText": "GetSavedManifoldPoint(const int32 PointIndex)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (CCDTimeOfImpact =)",
    "insertText": "FRealSingle(TOI)"
  },
  {
    "label": "ResetCCDTimeOfImpact()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetCCDTimeOfImpact()"
  },
  {
    "label": "SetCCDResults()",
    "kind": "Method",
    "detail": "Function (CCDTimeOfImpact = MaxTOI ; } void)",
    "insertText": "SetCCDResults(const FVec3& InNetImpulse)"
  },
  {
    "label": "FVec3f()",
    "kind": "Method",
    "detail": "Function (AccumulatedImpulse + =)",
    "insertText": "FVec3f(InNetImpulse)"
  },
  {
    "label": "ResetSolverResults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetSolverResults()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (SavedManifoldPoints .)",
    "insertText": "Reset(ManifoldPoints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ManifoldPointResults .)",
    "insertText": "SetNum(ManifoldPoints.Num())"
  },
  {
    "label": "SetSolverResults()",
    "kind": "Method",
    "detail": "Function (MinInitialPhi = 0 ; } void)",
    "insertText": "SetSolverResults(const int32 ManifoldPointIndex, const FVec3f& NetPushOut, const FVec3f& NetImpulse, const FRealSingle StaticFrictionRatio, const FRealSingle Dt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FManifoldPoint& ManifoldPoint = ManifoldPoints [ ManifoldPointIndex ] ; FManifoldPointResult& ManifoldPointResult = ManifoldPointResults [ ManifoldPointIndex ] ; bool bInsideStaticFrictionCone = false ;)",
    "insertText": "if(StaticFrictionRatio >= FRealSingle(1.0f - UE_KINDA_SMALL_NUMBER))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (SavedManifoldPoints .)",
    "insertText": "Emplace(ManifoldPoint.ShapeAnchorPoints[0], ManifoldPoint.ShapeAnchorPoints[1], ManifoldPoint.InitialPhi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bInsideStaticFrictionCone = true ; } else)",
    "insertText": "if(StaticFrictionRatio < FRealSingle(UE_KINDA_SMALL_NUMBER))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 SmallNumManifoldPoints = 8 ;)",
    "insertText": "if(ManifoldPoints.Num() < SmallNumManifoldPoints)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (SavedManifoldPoints .)",
    "insertText": "Emplace(ManifoldPoint.ContactPoint.ShapeContactPoints[0], ManifoldPoint.ContactPoint.ShapeContactPoints[1], ManifoldPoint.InitialPhi)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} } else { SavedManifoldPoints .)",
    "insertText": "Emplace(FVec3f::Lerp(ManifoldPoint.ContactPoint.ShapeContactPoints[0], ManifoldPoint.ShapeAnchorPoints[0], StaticFrictionRatio), FVec3f::Lerp(ManifoldPoint.ContactPoint.ShapeContactPoints[1], ManifoldPoint.ShapeAnchorPoints[1], StaticFrictionRatio), ManifoldPoint.InitialPhi)"
  },
  {
    "label": "NetImpulse()",
    "kind": "Method",
    "detail": "Function (} AccumulatedImpulse + =)",
    "insertText": "NetImpulse(NetPushOut / Dt)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (ManifoldPointResult . NetPushOut = NetPushOut ; ManifoldPointResult . NetImpulse = NetImpulse ; ManifoldPointResult . bIsValid = true ; ManifoldPointResult . bInsideStaticFrictionCone = bInsideStaticFrictionCone ; MinInitialPhi =)",
    "insertText": "Min(MinInitialPhi, ManifoldPoint.InitialPhi)"
  },
  {
    "label": "GetParticlePairKey()",
    "kind": "Method",
    "detail": "Function (} Private::FCollisionParticlePairKey)",
    "insertText": "GetParticlePairKey()"
  },
  {
    "label": "GetCollisionSortKey()",
    "kind": "Method",
    "detail": "Function (} Private::FCollisionSortKey)",
    "insertText": "GetCollisionSortKey()"
  },
  {
    "label": "GetBoundsTestFlags()",
    "kind": "Method",
    "detail": "Function (CollisionSortKey = InCollisionSortKey ; } Private::FImplicitBoundsTestFlags)",
    "insertText": "GetBoundsTestFlags()"
  },
  {
    "label": "FPBDCollisionConstraint()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FPBDCollisionConstraint(FGeometryParticleHandle* Particle0, const FImplicitObject* Implicit0, const FPerShapeData* Shape0, const FBVHParticles* Simplicial0, FGeometryParticleHandle* Particle1, const FImplicitObject* Implicit1, const FPerShapeData* Shape1, const FBVHParticles* Simplicial1)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup(const ECollisionCCDType InCCDType, const EContactShapesType InShapesType, const FRigidTransform3& InImplicitTransform0, const FRigidTransform3& InImplicitTransform1, const FReal InCullDistance, const bool bInUseManifold)"
  },
  {
    "label": "GetContainerCookie()",
    "kind": "Method",
    "detail": "Function (const FPBDCollisionConstraintContainerCookie&)",
    "insertText": "GetContainerCookie()"
  },
  {
    "label": "FindManifoldPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindManifoldPoint(const FContactPoint& ContactPoint)"
  },
  {
    "label": "FindSavedManifoldPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindSavedManifoldPoint(const int32 ManifoldPointIndex, int32* InOutAllowedSavedPointIndices, int32& InOutNumAllowedSavedPoints)"
  },
  {
    "label": "AssignSavedManifoldPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignSavedManifoldPoints()"
  },
  {
    "label": "InitManifoldPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitManifoldPoint(const int32 ManifoldPointIndex, const FContactPoint& ContactPoint)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (FManifoldPoint& ManifoldPoint = ManifoldPoints [ ManifoldPointIndex ] ; ManifoldPoint . ContactPoint = ContactPoint ; ManifoldPoint . ShapeAnchorPoints [ 0 ] = ContactPoint . ShapeContactPoints [ 0 ] ; ManifoldPoint . ShapeAnchorPoints [ 1 ] = ContactPoint . ShapeContactPoints [ 1 ] ; ManifoldPoint . InitialShapeContactPoints [ 0 ] = ContactPoint . ShapeContactPoints [ 0 ] ; ManifoldPoint . InitialShapeContactPoints [ 1 ] = ContactPoint . ShapeContactPoints [ 1 ] ; ManifoldPoint . TargetPhi =)",
    "insertText": "FRealSingle(0)"
  },
  {
    "label": "AddManifoldPoint()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AddManifoldPoint(const FContactPoint& ContactPoint)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (int32 ManifoldPointIndex = ManifoldPoints .)",
    "insertText": "AddUninitialized()"
  },
  {
    "label": "InitManifoldPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitManifoldPoint(ManifoldPointIndex, ContactPoint)"
  },
  {
    "label": "InitMarginsAndTolerances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMarginsAndTolerances(const EImplicitObjectType ImplicitType0, const EImplicitObjectType ImplicitType1, const FRealSingle Margin0, const FRealSingle Margin1)"
  },
  {
    "label": "UpdateMassScales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMassScales()"
  },
  {
    "label": "CalculateSavedManifoldPointDistanceSq()",
    "kind": "Method",
    "detail": "Function (private : FRealSingle)",
    "insertText": "CalculateSavedManifoldPointDistanceSq(const FSavedManifoldPoint& SavedManifoldPoint, const FManifoldPoint& ManifoldPoint)"
  },
  {
    "label": "LogOneShotManifoldError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogOneShotManifoldError(const int32 MaxManifoldPoints, const TArrayView<const FContactPoint>& ContactPoints)"
  },
  {
    "label": "FFlags()",
    "kind": "Method",
    "detail": "Function (union FFlags {)",
    "insertText": "FFlags() : Bits(0)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} struct { uint16 bIsCurrent : 1 ; uint16 bDisabled : 1 ; uint16 bUseManifold : 1 ; uint16 bUseIncrementalManifold : 1 ; uint16 bCanRestoreManifold : 1 ; uint16 bWasManifoldRestored : 1 ; uint16 bIsQuadratic0 : 1 ; uint16 bIsQuadratic1 : 1 ; uint16 bIsProbe : 1 ; uint16 bCCDEnabled : 1 ; uint16 bCCDSweepEnabled : 1 ; uint16 bModifierApplied : 1 ; uint16 bMaterialSet : 1 ; uint16 bInitialContact : 1 ; uint16 bIsOneWayInteraction : 1 ; uint16 bUsePerContactInitialPhi : 1 ; } ; uint16 Bits ; } ;)",
    "insertText": "static_assert(sizeof(FFlags) == 2, \"Unexpected size for FPBDCollisionConstraint::FFLags\")"
  }
]