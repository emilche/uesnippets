[
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "GrantAccessToPath()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SECURITY_UTIL_H_ # define BASE_WIN_SECURITY_UTIL_H_ # include<vector> # include \" base / base_export . h \" # include \" base / win / sid . h \" # include \" base / win / windows_types . h \" namespace base { class FilePath ; namespace win { BASE_EXPORT bool)",
    "insertText": "GrantAccessToPath(const FilePath& path, const std::vector<Sid>& sids, DWORD access_mask, DWORD inheritance, bool recursive = true)"
  },
  {
    "label": "DenyAccessToPath()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "DenyAccessToPath(const FilePath& path, const std::vector<Sid>& sids, DWORD access_mask, DWORD inheritance, bool recursive = true)"
  },
  {
    "label": "CloneSidVector()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::vector<Sid>)",
    "insertText": "CloneSidVector(const std::vector<Sid>& sids)"
  },
  {
    "label": "AppendSidVector()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "AppendSidVector(std::vector<Sid>& base_sids, const std::vector<Sid>& append_sids)"
  }
]