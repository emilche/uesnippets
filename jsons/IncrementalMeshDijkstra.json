[
  {
    "label": "PointSetType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointSetType"
  },
  {
    "label": "TIncrementalMeshDijkstra",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIncrementalMeshDijkstra"
  },
  {
    "label": "FSeedPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSeedPoint"
  },
  {
    "label": "FGraphNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphNode"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" MatrixTypes . h \" # include \" BoxTypes . h \" # include \" FrameTypes . h \" # include \" Util / IndexPriorityQueue . h \" # include \" Util / DynamicVector . h \" namespace UE { namespace Geometry { template<class PointSetType> class TIncrementalMeshDijkstra { public : const PointSetType* PointSet ; TUniqueFunction<)",
    "insertText": "FVector3d(int32)"
  },
  {
    "label": "TIncrementalMeshDijkstra()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TIncrementalMeshDijkstra(const PointSetType* PointSetIn)"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (PointSet = PointSetIn ; int32 MaxID = PointSet ->)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Initialize(MaxID)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (GetPositionFunc = [)",
    "insertText": "this(int32 PointID)"
  },
  {
    "label": "ForceInitializeAllNodes()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ForceInitializeAllNodes()"
  },
  {
    "label": "InvalidDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "InvalidDistance()"
  },
  {
    "label": "AddSeedPoints()",
    "kind": "Method",
    "detail": "Function (} ; struct FSeedPoint { int32 ExternalID = - 1 ; int32 PointID = 0 ; double StartDistance = 0 ; } ; void)",
    "insertText": "AddSeedPoints(const TArray<FSeedPoint>& SeedPointsIn)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + CurrentSeedTimestamp ;)",
    "insertText": "for(const FSeedPoint& SeedPoint : SeedPointsIn)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NewIndex = SeedPoints .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SeedPointExternalIDMap .)",
    "insertText": "Add(SeedPoint.ExternalID, NewIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SeedPoints .)",
    "insertText": "Add(SeedPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 PointID = SeedPoint . PointID ;)",
    "insertText": "if(ensure(Queue.Contains(PointID) == false))"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* Node =)",
    "insertText": "GetNodeForPointSetID(PointID)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Node -> GraphDistance = SeedPoint . StartDistance ; Node -> FrozenTimestamp = CurrentSeedTimestamp ; Node -> SeedID = NewIndex ; Queue .)",
    "insertText": "Insert(PointID, float(Node->GraphDistance))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(Queue.GetCount() > 0)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (int32 NextID = Queue .)",
    "insertText": "Dequeue()"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* Node =)",
    "insertText": "GetNodeForPointSetID(NextID)"
  },
  {
    "label": "UpdateNeighboursSparse()",
    "kind": "Method",
    "detail": "Function (Node -> FrozenTimestamp = CurrentSeedTimestamp ;)",
    "insertText": "UpdateNeighboursSparse(Node)"
  },
  {
    "label": "GetSeedExternalIDForPointSetID()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "GetSeedExternalIDForPointSetID(int32 PointID)"
  },
  {
    "label": "HasDistance()",
    "kind": "Method",
    "detail": "Function (MaxDistance = Distance ; MaxDistancePointID = PointID ; } } } return MaxDistancePointID ; } bool)",
    "insertText": "HasDistance(int32 PointID)"
  },
  {
    "label": "GetDistance()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetDistance(int32 PointID)"
  },
  {
    "label": "FindPathToNearestSeed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindPathToNearestSeed(int32 PointID, TArray<int32>& PathToSeedOut, int32 MaxLength = 100000)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PathToSeedOut .)",
    "insertText": "Add(PointID)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 IterCount = 0 ;)",
    "insertText": "while(IterCount++ < MaxLength)"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (CurNode =)",
    "insertText": "GetNodeForPointSetID(CurNode->ParentPointID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PathToSeedOut .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (AllocatedNodes .)",
    "insertText": "SetNum(MaxID)"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (AllocatedNodes [ k ] = NewNode ; } } FGraphNode*)",
    "insertText": "GetNodeForPointSetID(int32 PointSetID)"
  },
  {
    "label": "ParentPos()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "ParentPos(GetPositionFunc(Parent->PointID))"
  },
  {
    "label": "GetNodeForPointSetID()",
    "kind": "Method",
    "detail": "Function (FGraphNode* NbrNode =)",
    "insertText": "GetNodeForPointSetID(NbrPointID)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (continue ; } double NbrDist = ParentDist +)",
    "insertText": "Distance(ParentPos, GetPositionFunc(NbrPointID))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (NbrNode -> ParentPointID = Parent -> PointID ; NbrNode -> SeedID = Parent -> SeedID ; NbrNode -> GraphDistance = NbrDist ; Queue .)",
    "insertText": "Update(NbrPointID, float(NbrNode->GraphDistance))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(NbrDist < NbrNode->GraphDistance)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (NbrNode -> ParentPointID = Parent -> PointID ; NbrNode -> SeedID = Parent -> SeedID ; NbrNode -> GraphDistance = NbrDist ; Queue .)",
    "insertText": "Insert(NbrPointID, float(NbrNode->GraphDistance))"
  }
]