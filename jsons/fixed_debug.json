[
  {
    "label": "MULT16_16SU()",
    "kind": "Method",
    "detail": "Function (# ifndef FIXED_DEBUG_H # define FIXED_DEBUG_H # include<stdio . h> # include \" opus_defines . h \" # ifdef CELT_C OPUS_EXPORT opus_int64 celt_mips = 0 ; # else opus_int64 celt_mips ; # endif # define)",
    "insertText": "MULT16_16SU(a,b) ((opus_val32)(opus_val16)(a)*(opus_val32)(opus_uint16)(b)) #define MULT32_32_Q31(a,b) ADD32(ADD32(SHL32(MULT16_16(SHR32((a),16),SHR((b),16)),1), SHR32(MULT16_16SU(SHR32((a),16),((b)&0x0000ffff)),15)), SHR32(MULT16_16SU(SHR32((b),16),((a)&0x0000ffff)),15)) #define MULT16_32_Q16(a,b) ADD32(MULT16_16((a),SHR32((b),16)), SHR32(MULT16_16SU((a),((b)&0x0000ffff)),16)) #define MULT16_32_P16(a,b) MULT16_32_PX(a,b,16) #define QCONST16(x,bits) ((opus_val16)(.5+(x)*(((opus_val32)1)<<(bits)))) #define QCONST32(x,bits) ((opus_val32)(.5+(x)*(((opus_val32)1)<<(bits)))) #define VERIFY_SHORT(x) ((x)<=32767&&(x)>=-32768) #define VERIFY_INT(x) ((x)<=2147483647LL&&(x)>=-2147483648LL) #define VERIFY_UINT(x) ((x)<=(2147483647LLU<<1)) #define SHR(a,b) SHR32(a,b) #define PSHR(a,b) PSHR32(a,b) #define ADD32_ovflw(a,b) (celt_mips+=2,(opus_val32)((opus_uint32)(a)+(opus_uint32)(b))) #define SUB32_ovflw(a,b) (celt_mips+=2,(opus_val32)((opus_uint32)(a)-(opus_uint32)(b))) #define NEG32_ovflw(a) (celt_mips+=2,(opus_val32)(0-(opus_uint32)(a))) static OPUS_INLINE short NEG16(int x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int res ;)",
    "insertText": "if(!VERIFY_SHORT(x))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"NEG16: input is not short: %d\\n\", (int)x)"
  },
  {
    "label": "celt_assert()",
    "kind": "Method",
    "detail": "Function (# ifdef FIXED_DEBUG_ASSERT)",
    "insertText": "celt_assert(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif } res = - x ;)",
    "insertText": "if(!VERIFY_SHORT(res))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"NEG16: output is not short: %d\\n\", (int)res)"
  },
  {
    "label": "NEG32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + + ; return res ; } OPUS_INLINE int)",
    "insertText": "NEG32(opus_int64 x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ;)",
    "insertText": "if(!VERIFY_INT(x))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"NEG16: input is not int: %d\\n\", (int)x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif } res = - x ;)",
    "insertText": "if(!VERIFY_INT(res))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"NEG16: output is not int: %d\\n\", (int)res)"
  },
  {
    "label": "EXTRACT16()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 2 ; return res ; } # define)",
    "insertText": "EXTRACT16(x) EXTRACT16_(x, __FILE__, __LINE__) static OPUS_INLINE short EXTRACT16_(int x, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"EXTRACT16: input is not short: %d in %s: line %d\\n\", x, file, line)"
  },
  {
    "label": "EXTEND32()",
    "kind": "Method",
    "detail": "Function (# endif } res = x ; celt_mips + + ; return res ; } # define)",
    "insertText": "EXTEND32(x) EXTEND32_(x, __FILE__, __LINE__) static OPUS_INLINE int EXTEND32_(int x, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"EXTEND32: input is not short: %d in %s: line %d\\n\", x, file, line)"
  },
  {
    "label": "SHR16()",
    "kind": "Method",
    "detail": "Function (# endif } res = x ; celt_mips + + ; return res ; } # define)",
    "insertText": "SHR16(a, shift) SHR16_(a, shift, __FILE__, __LINE__) static OPUS_INLINE short SHR16_(int a, int shift, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int res ;)",
    "insertText": "if(!VERIFY_SHORT(a) || !VERIFY_SHORT(shift))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SHR16: inputs are not short: %d >> %d in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SHR16: output is not short: %d in %s: line %d\\n\", res, file, line)"
  },
  {
    "label": "SHL16()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + + ; return res ; } # define)",
    "insertText": "SHL16(a, shift) SHL16_(a, shift, __FILE__, __LINE__) static OPUS_INLINE short SHL16_(int a, int shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SHL16: inputs are not short: %d %d in %s: line %d\\n\", a, shift, file, line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "res(opus_int32)((opus_uint32)a<<shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SHL16: output is not short: %d in %s: line %d\\n\", res, file, line)"
  },
  {
    "label": "SHR32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + + ; return res ; } OPUS_INLINE int)",
    "insertText": "SHR32(opus_int64 a, int shift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ;)",
    "insertText": "if(!VERIFY_INT(a) || !VERIFY_SHORT(shift))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SHR32: inputs are not int: %d %d\\n\", (int)a, shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SHR32: output is not int: %d\\n\", (int)res)"
  },
  {
    "label": "SHL32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 2 ; return res ; } # define)",
    "insertText": "SHL32(a, shift) SHL32_(a, shift, __FILE__, __LINE__) static OPUS_INLINE int SHL32_(opus_int64 a, int shift, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SHL32: inputs are not int: %lld %d in %s: line %d\\n\", (long long)a, shift, file, line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "res(opus_int64)((opus_uint64)a<<shift)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SHL32: output is not int: %lld<<%d = %lld in %s: line %d\\n\", (long long)a, shift, (long long)res, file, line)"
  },
  {
    "label": "PSHR32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 2 ; return res ; } # define)",
    "insertText": "PSHR32(a,shift) (celt_mips--,SHR32(ADD32((a),(((opus_val32)(1)<<((shift))>>1))),shift)) #define VSHR32(a, shift) (((shift)>0) ? SHR32(a, shift) : SHL32(a, -(shift))) #define ROUND16(x,a) (celt_mips--,EXTRACT16(PSHR32((x),(a)))) #define SROUND16(x,a) (celt_mips--,EXTRACT16(SATURATE(PSHR32(x,a), 32767)))"
  },
  {
    "label": "HALF16()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "HALF16(x) (SHR16(x,1)) #define HALF32(x) (SHR32(x,1)) #define ADD16(a, b) ADD16_(a, b, __FILE__, __LINE__) static OPUS_INLINE short ADD16_(int a, int b, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int res ;)",
    "insertText": "if(!VERIFY_SHORT(a) || !VERIFY_SHORT(b))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"ADD16: inputs are not short: %d %d in %s: line %d\\n\", a, b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"ADD16: output is not short: %d+%d=%d in %s: line %d\\n\", a,b,res, file, line)"
  },
  {
    "label": "SUB16()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + + ; return res ; } # define)",
    "insertText": "SUB16(a, b) SUB16_(a, b, __FILE__, __LINE__) static OPUS_INLINE short SUB16_(int a, int b, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SUB16: inputs are not short: %d %d in %s: line %d\\n\", a, b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SUB16: output is not short: %d in %s: line %d\\n\", res, file, line)"
  },
  {
    "label": "ADD32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + + ; return res ; } # define)",
    "insertText": "ADD32(a, b) ADD32_(a, b, __FILE__, __LINE__) static OPUS_INLINE int ADD32_(opus_int64 a, opus_int64 b, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ;)",
    "insertText": "if(!VERIFY_INT(a) || !VERIFY_INT(b))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"ADD32: inputs are not int: %d %d in %s: line %d\\n\", (int)a, (int)b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"ADD32: output is not int: %d in %s: line %d\\n\", (int)res, file, line)"
  },
  {
    "label": "SUB32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 2 ; return res ; } # define)",
    "insertText": "SUB32(a, b) SUB32_(a, b, __FILE__, __LINE__) static OPUS_INLINE int SUB32_(opus_int64 a, opus_int64 b, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SUB32: inputs are not int: %d %d in %s: line %d\\n\", (int)a, (int)b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"SUB32: output is not int: %d in %s: line %d\\n\", (int)res, file, line)"
  },
  {
    "label": "UADD32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 2 ; return res ; } # undef UADD32 # define)",
    "insertText": "UADD32(a, b) UADD32_(a, b, __FILE__, __LINE__) static OPUS_INLINE unsigned int UADD32_(opus_uint64 a, opus_uint64 b, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_uint64 res ;)",
    "insertText": "if(!VERIFY_UINT(a) || !VERIFY_UINT(b))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"UADD32: inputs are not uint32: %llu %llu in %s: line %d\\n\", (unsigned long long)a, (unsigned long long)b, file, line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif } res = a + b ;)",
    "insertText": "if(!VERIFY_UINT(res))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"UADD32: output is not uint32: %llu in %s: line %d\\n\", (unsigned long long)res, file, line)"
  },
  {
    "label": "USUB32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 2 ; return res ; } # undef USUB32 # define)",
    "insertText": "USUB32(a, b) USUB32_(a, b, __FILE__, __LINE__) static OPUS_INLINE unsigned int USUB32_(opus_uint64 a, opus_uint64 b, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"USUB32: inputs are not uint32: %llu %llu in %s: line %d\\n\", (unsigned long long)a, (unsigned long long)b, file, line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "if(a<b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"USUB32: inputs underflow: %llu < %llu in %s: line %d\\n\", (unsigned long long)a, (unsigned long long)b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"USUB32: output is not uint32: %llu - %llu = %llu in %s: line %d\\n\", (unsigned long long)a, (unsigned long long)b, (unsigned long long)res, file, line)"
  },
  {
    "label": "MULT16_16_16()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 2 ; return res ; } OPUS_INLINE short)",
    "insertText": "MULT16_16_16(int a, int b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_16: inputs are not short: %d %d\\n\", a, b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_16: output is not short: %d\\n\", res)"
  },
  {
    "label": "MULT32_32_32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + + ; return res ; } OPUS_INLINE int)",
    "insertText": "MULT32_32_32(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT32_32_32: inputs are not int: %lld %lld\\n\", (long long)a, (long long)b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT32_32_32: output is not int: %lld\\n\", (long long)res)"
  },
  {
    "label": "MULT32_32_Q16()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 5 ; return res ; } OPUS_INLINE int)",
    "insertText": "MULT32_32_Q16(opus_int64 a, opus_int64 b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT32_32_Q16: inputs are not int: %lld %lld\\n\", (long long)a, (long long)b)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "res((opus_int64)(a)*(opus_int64)(b))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT32_32_Q16: output is not int: %lld*%lld=%lld\\n\", (long long)a, (long long)b, (long long)res)"
  },
  {
    "label": "MULT16_16()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 5 ; return res ; } # define)",
    "insertText": "MULT16_16(a, b) MULT16_16_(a, b, __FILE__, __LINE__) static OPUS_INLINE int MULT16_16_(int a, int b, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16: inputs are not short: %d %d in %s: line %d\\n\", a, b, file, line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "res((opus_int64)a)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16: output is not int: %d in %s: line %d\\n\", (int)res, file, line)"
  },
  {
    "label": "MAC16_16()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + + ; return res ; } # define)",
    "insertText": "MAC16_16(c,a,b) (celt_mips-=2,ADD32((c),MULT16_16((a),(b)))) #define MULT16_32_QX(a, b, Q) MULT16_32_QX_(a, b, Q, __FILE__, __LINE__) static OPUS_INLINE int MULT16_32_QX_(int a, opus_int64 b, int Q, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ;)",
    "insertText": "if(!VERIFY_SHORT(a) || !VERIFY_INT(b))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_32_Q%d: inputs are not short+int: %d %d in %s: line %d\\n\", Q, (int)a, (int)b, file, line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "if(ABS32(b)>=((opus_int64)(1)<<(16+Q)))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_32_Q%d: second operand too large: %d %d in %s: line %d\\n\", Q, (int)a, (int)b, file, line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "res(((opus_int64)a)*(opus_int64)b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_32_Q%d: output is not int: %d*%d=%d in %s: line %d\\n\", Q, (int)a, (int)b,(int)res, file, line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "if(Q==15)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_32_P%d: inputs are not short+int: %d %d in %s: line %d\\n\\n\", Q, (int)a, (int)b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_32_Q%d: second operand too large: %d %d in %s: line %d\\n\\n\", Q, (int)a, (int)b,file, line)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "res((((opus_int64)a)*(opus_int64)b) + (((opus_val32)(1)<<Q)>>1))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_32_P%d: output is not int: %d*%d=%d in %s: line %d\\n\\n\", Q, (int)a, (int)b,(int)res, file, line)"
  },
  {
    "label": "SATURATE16()",
    "kind": "Method",
    "detail": "Function (celt_mips + = 3 ; return a ; } OPUS_INLINE opus_int16)",
    "insertText": "SATURATE16(opus_int32 a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (celt_mips + = 3 ;)",
    "insertText": "if(a>32767)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_Q11: inputs are not short: %d %d\\n\", a, b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_Q11: output is not short: %d*%d=%d\\n\", (int)a, (int)b, (int)res)"
  },
  {
    "label": "MULT16_16_Q13()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 3 ; return res ; } OPUS_INLINE short)",
    "insertText": "MULT16_16_Q13(int a, int b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_Q13: inputs are not short: %d %d\\n\", a, b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_Q13: output is not short: %d*%d=%d\\n\", a, b, (int)res)"
  },
  {
    "label": "MULT16_16_Q14()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 3 ; return res ; } OPUS_INLINE short)",
    "insertText": "MULT16_16_Q14(int a, int b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_Q14: inputs are not short: %d %d\\n\", a, b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_Q14: output is not short: %d\\n\", (int)res)"
  },
  {
    "label": "MULT16_16_Q15()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 3 ; return res ; } # define)",
    "insertText": "MULT16_16_Q15(a, b) MULT16_16_Q15_(a, b, __FILE__, __LINE__) static OPUS_INLINE short MULT16_16_Q15_(int a, int b, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_Q15: inputs are not short: %d %d in %s: line %d\\n\", a, b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_Q15: output is not short: %d in %s: line %d\\n\", (int)res, file, line)"
  },
  {
    "label": "MULT16_16_P13()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 1 ; return res ; } OPUS_INLINE short)",
    "insertText": "MULT16_16_P13(int a, int b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P13: inputs are not short: %d %d\\n\", a, b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P13: overflow: %d*%d=%d\\n\", a, b, (int)res)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P13: output is not short: %d*%d=%d\\n\", a, b, (int)res)"
  },
  {
    "label": "MULT16_16_P14()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 4 ; return res ; } OPUS_INLINE short)",
    "insertText": "MULT16_16_P14(int a, int b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P14: inputs are not short: %d %d\\n\", a, b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P14: overflow: %d*%d=%d\\n\", a, b, (int)res)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P14: output is not short: %d*%d=%d\\n\", a, b, (int)res)"
  },
  {
    "label": "MULT16_16_P15()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 4 ; return res ; } OPUS_INLINE short)",
    "insertText": "MULT16_16_P15(int a, int b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P15: inputs are not short: %d %d\\n\", a, b)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P15: overflow: %d*%d=%d\\n\", a, b, (int)res)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"MULT16_16_P15: output is not short: %d*%d=%d\\n\", a, b, (int)res)"
  },
  {
    "label": "DIV32_16()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 2 ; return res ; } # define)",
    "insertText": "DIV32_16(a, b) DIV32_16_(a, b, __FILE__, __LINE__) static OPUS_INLINE int DIV32_16_(opus_int64 a, opus_int64 b, char *file, int line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (opus_int64 res ;)",
    "insertText": "if(b==0)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"DIV32_16: divide by zero: %d/%d in %s: line %d\\n\", (int)a, (int)b, file, line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif return 0 ; })",
    "insertText": "if(!VERIFY_INT(a) || !VERIFY_SHORT(b))"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"DIV32_16: inputs are not int/short: %d %d in %s: line %d\\n\", (int)a, (int)b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"DIV32_16: output is not short: %d / %d = %d in %s: line %d\\n\", (int)a,(int)b,(int)res, file, line)"
  },
  {
    "label": "DIV32()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 3 5 ; return res ; } # define)",
    "insertText": "DIV32(a, b) DIV32_(a, b, __FILE__, __LINE__) static OPUS_INLINE int DIV32_(opus_int64 a, opus_int64 b, char *file, int line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"DIV32: divide by zero: %d/%d in %s: line %d\\n\", (int)a, (int)b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"DIV32: inputs are not int/short: %d %d in %s: line %d\\n\", (int)a, (int)b, file, line)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(stderr, \"DIV32: output is not int: %d in %s: line %d\\n\", (int)res, file, line)"
  },
  {
    "label": "SIG2WORD16_generic()",
    "kind": "Method",
    "detail": "Function (# endif } celt_mips + = 7 0 ; return res ; } OPUS_INLINE opus_val16)",
    "insertText": "SIG2WORD16_generic(celt_sig x)"
  },
  {
    "label": "PSHR32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "PSHR32(x, SIG_SHIFT)"
  },
  {
    "label": "MAX32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "MAX32(x, -32768)"
  },
  {
    "label": "MIN32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "MIN32(x, 32767)"
  },
  {
    "label": "SIG2WORD16()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "SIG2WORD16(x) (SIG2WORD16_generic(x)) #undef PRINT_MIPS #define PRINT_MIPS(file)"
  },
  {
    "label": "fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fprintf(file, \"total complexity = %llu MIPS\\n\", (unsigned long long)celt_mips)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0)"
  }
]