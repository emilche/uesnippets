[
  {
    "label": "TensorContractionBlocking",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorContractionBlocking"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CONTRACTION_BLOCKING_H # define EIGEN_CXX11_TENSOR_TENSOR_CONTRACTION_BLOCKING_H namespace Eigen { namespace internal { enum { ShardByRow = 0,ShardByCol = 1 } ; template<ResScalar,LhsScalar,RhsScalar,StorageIndex,int ShardingType = ShardByCol> class TensorContractionBlocking { public : # if !)",
    "insertText": "defined(EIGEN_HIPCC) EIGEN_DEVICE_FUNC #endif TensorContractionBlocking(StorageIndex k, StorageIndex m, StorageIndex n, StorageIndex num_threads = 1) : kc_(k), mc_(m), nc_(n)"
  },
  {
    "label": "RhsScalar()",
    "kind": "Method",
    "detail": "Function (computeProductBlockingSizes<LhsScalar,)",
    "insertText": "RhsScalar(kc_, mc_, nc_, num_threads)"
  },
  {
    "label": "RhsScalar()",
    "kind": "Method",
    "detail": "Function (} else { computeProductBlockingSizes<LhsScalar,)",
    "insertText": "RhsScalar(kc_, nc_, mc_, num_threads)"
  },
  {
    "label": "kc_()",
    "kind": "Method",
    "detail": "Function (} const int rhs_packet_size = internal::packet_traits<RhsScalar>::size ;)",
    "insertText": "kc_(rhs_packet_size <= 8 || kc_ <= rhs_packet_size) ? kc_ : (kc_ / rhs_packet_size)"
  },
  {
    "label": "kc()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE StorageIndex)",
    "insertText": "kc()"
  }
]