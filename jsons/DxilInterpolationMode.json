[
  {
    "label": "InterpolationMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterpolationMode"
  },
  {
    "label": "InterpolationMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DxilConstants . h \" namespace hlsl { class InterpolationMode { public : using Kind = DXIL::InterpolationMode ;)",
    "insertText": "InterpolationMode()"
  },
  {
    "label": "InterpolationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolationMode(const InterpolationMode &Mode)"
  },
  {
    "label": "InterpolationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolationMode(Kind Kind)"
  },
  {
    "label": "InterpolationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolationMode(unsigned long long Kind)"
  },
  {
    "label": "InterpolationMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolationMode(bool bNoInterpolation, bool bLinear, bool bNoperspective, bool bCentroid, bool bSample)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InterpolationMode&)",
    "insertText": "operator(const InterpolationMode &o)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsAnyNoPerspective()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyNoPerspective()"
  },
  {
    "label": "IsAnyCentroid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyCentroid()"
  },
  {
    "label": "IsAnySample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnySample()"
  },
  {
    "label": "GetKind()",
    "kind": "Method",
    "detail": "Function (Kind)",
    "insertText": "GetKind()"
  }
]