[
  {
    "label": "TKelvinletIntegrator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TKelvinletIntegrator"
  },
  {
    "label": "TBaseKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseKelvinlet"
  },
  {
    "label": "FPullKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPullKelvinlet"
  },
  {
    "label": "FLaplacianPullKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLaplacianPullKelvinlet"
  },
  {
    "label": "FBiLaplacianPullKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBiLaplacianPullKelvinlet"
  },
  {
    "label": "FSharpLaplacianPullKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharpLaplacianPullKelvinlet"
  },
  {
    "label": "FSharpBiLaplacianPullKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharpBiLaplacianPullKelvinlet"
  },
  {
    "label": "FAffineKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAffineKelvinlet"
  },
  {
    "label": "FTwistKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTwistKelvinlet"
  },
  {
    "label": "FPinchKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPinchKelvinlet"
  },
  {
    "label": "FScaleKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScaleKelvinlet"
  },
  {
    "label": "TBlendPairedKelvinlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBlendPairedKelvinlet"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" MatrixTypes . h \" namespace UE { namespace Geometry { template<KelvinletModelType> class TKelvinletIntegrator { public : FVector3d)",
    "insertText": "Evaluate(const FVector3d& Pos)"
  },
  {
    "label": "IntegrateRK3()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "IntegrateRK3(const FVector3d& Pos, double dt)"
  },
  {
    "label": "KelvinletModelType()",
    "kind": "Method",
    "detail": "Function (FVector3d k1 = static_cast<const)",
    "insertText": "KelvinletModelType(this)->Evaluate(Pos)"
  },
  {
    "label": "KelvinletModelType()",
    "kind": "Method",
    "detail": "Function (FVector3d k2 = static_cast<const)",
    "insertText": "KelvinletModelType(this)->Evaluate(Pos + dt * 0.5 * k1)"
  },
  {
    "label": "KelvinletModelType()",
    "kind": "Method",
    "detail": "Function (FVector3d k3 = static_cast<const)",
    "insertText": "KelvinletModelType(this)->Evaluate(Pos + dt * (2.0 * k2 - k1))"
  },
  {
    "label": "TBaseKelvinlet()",
    "kind": "Method",
    "detail": "Function (} } ; template<KelvinletModelType> class TBaseKelvinlet : public TKelvinletIntegrator<KelvinletModelType> { public :)",
    "insertText": "TBaseKelvinlet(const double Size, const double ShearModulus, const double PoissonRatio)"
  },
  {
    "label": "SetMaterialParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterialParameters(ShearModulus, PoissonRatio)"
  },
  {
    "label": "UpdateRegularization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegularization(Size)"
  },
  {
    "label": "SetMaterialParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaterialParameters(const double ShearModulus, const double PoissonRatio)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(4. * PI * ShearModulus)"
  },
  {
    "label": "bhat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bhat(4. * (1.0 - PoissonRatio))"
  },
  {
    "label": "UpdateRegularization()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateRegularization(const double R)"
  },
  {
    "label": "FPullKelvinlet()",
    "kind": "Method",
    "detail": "Function (E = R ; } protected : double E ; double a ; double bhat ; } ; class FPullKelvinlet : public TBaseKelvinlet<FPullKelvinlet> { public : typedef TBaseKelvinlet<FPullKelvinlet> MyBase ;)",
    "insertText": "FPullKelvinlet(const FVector3d& Force, const double Size, const double ShearModulus, const double PoissonRatio) : MyBase(Size, ShearModulus, PoissonRatio), F(Force)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (const FVector3d NPos = Pos / E ; const double D2 = 1 . + NPos .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const double D =)",
    "insertText": "Sqrt(D2)"
  },
  {
    "label": "RadialTerm()",
    "kind": "Method",
    "detail": "Function (const double D3 = D2* D ; const double)",
    "insertText": "RadialTerm(1. - bhat)"
  },
  {
    "label": "NonIsoTerm()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "NonIsoTerm(bhat / D3) * F.Dot(NPos)"
  },
  {
    "label": "Divergence()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Divergence(const FVector3d& Pos)"
  },
  {
    "label": "RadialTerm()",
    "kind": "Method",
    "detail": "Function (const double D3 = D2* D ; const double D7 = D* D3* D3 ; double)",
    "insertText": "RadialTerm(15. - bhat * D2 * (10. + 4. * R2)) / (2. * D7)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (const double D9 = D2* D2* D2* D2* D ; double)",
    "insertText": "Div(2. * bhat - 1.) * 105 * F.Dot(NPos)"
  },
  {
    "label": "RadialTerm()",
    "kind": "Method",
    "detail": "Function (const double D3 = D2* D ; const double D11 = D3* D3* D3* D2 ; const double)",
    "insertText": "RadialTerm(3. - 6. * R2 - 2. * bhat * D2) / (2. * D11)"
  },
  {
    "label": "NonIsoTerm()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "NonIsoTerm(bhat * 945. / D11) * F.Dot(NPos)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (const double D8 = D2* D2* D2* D2 ; const double D13 = D8* D2* D2* D ; double)",
    "insertText": "Div(2. * bhat - 1.) * F.Dot(NPos) * (11 - 6. * D2) / (2. * D13)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const double R =)",
    "insertText": "Sqrt(R2)"
  },
  {
    "label": "RadialTerm()",
    "kind": "Method",
    "detail": "Function (const double D3 = D2* D ; const double D5 = D3* D2 ; const double D11 = D3* D3* D3* D2 ; const double)",
    "insertText": "RadialTerm((15. - 10. * bhat) + (90. - 88. * bhat) * R2 + 120. * (1. - bhat) * R4 + 48. * (1. - bhat) * R * (R5 - D5))"
  },
  {
    "label": "NonIsoTerm()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "NonIsoTerm(bhat / (R * D5)) * (2. * R2 * (4. * D - 5. * R) + 4. * R4 * (D - R) + (4. * D - 7. * R)) * F.Dot(NPos)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (const double D3 = D2* D ; const double D5 = D3* D2 ; const double D9 = D5* D2* D2 ; const double D10 = D5* D5 ; const double D11 = D3* D3* D3* D2 ; FVector3d)",
    "insertText": "Result(0., 0., 0.)"
  },
  {
    "label": "RadialTerm()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "RadialTerm(9. / D10) * (-512. * R * D10 + (((((512. * R2 + 2304.) * R2 + 4032.) * R2 + 3360.) * R2 + 1260.) * R2 + 105.) * D + 2. * bhat * (128 * R * D10 - D3 * (35. + R2 * (280. + R2 * (560. + R2 * (448. + 128 * R2))))))"
  },
  {
    "label": "NonIsoTerm()",
    "kind": "Method",
    "detail": "Function (const double)",
    "insertText": "NonIsoTerm(bhat / (R * D9)) * (128. * D9 - R * (R2 * (R2 * (R2 * (128. * R2 + 576.) + 1008.) + 840.) + 315.)) * F.Dot(NPos)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "c(RadialTerm * F + NonIsoTerm * NPos)"
  },
  {
    "label": "Transpose()",
    "kind": "Method",
    "detail": "Function (SymF = F + F .)",
    "insertText": "Transpose() + F.Trace() * FMatrix3d::Identity()"
  },
  {
    "label": "UpdateForce()",
    "kind": "Method",
    "detail": "Function (E2 = E* E ; } void)",
    "insertText": "UpdateForce(const FMatrix3d& NF)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (const double D3 = D2* D ; const double D5 = D3* D2 ; const FVector3d Fr = F* NPos ; const double rDotFr = NPos .)",
    "insertText": "Dot(Fr)"
  },
  {
    "label": "Term1()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "Term1(bhat * SymF * NPos - Fr)"
  },
  {
    "label": "Term2()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "Term2(Fr + 2. * bhat * rDotFr * NPos) / (2. * D5)"
  },
  {
    "label": "FTwistKelvinlet()",
    "kind": "Method",
    "detail": "Function (} protected : FMatrix3d F ; FMatrix3d SymF ; double E2 ; } ; class FTwistKelvinlet : public TBaseKelvinlet<FTwistKelvinlet> { public : typedef TBaseKelvinlet<FTwistKelvinlet> MyBase ;)",
    "insertText": "FTwistKelvinlet(const FVector3d& Twist, const double Size, const double ShearModulus, const double PoissonRatio) : MyBase(Size, ShearModulus, PoissonRatio), F(CrossProductMatrix(Twist))"
  },
  {
    "label": "FTwistKelvinlet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTwistKelvinlet(const FTwistKelvinlet& Other) : MyBase(Other)"
  },
  {
    "label": "Term1()",
    "kind": "Method",
    "detail": "Function (const double D3 = D2* D ; const double D5 = D3* D2 ; const FVector3d Fr = F* NPos ; FVector3d)",
    "insertText": "Term1(1. / D3 + 1.5 / D5)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize()"
  },
  {
    "label": "Term1()",
    "kind": "Method",
    "detail": "Function (const FVector3d)",
    "insertText": "Term1((2. * bhat - 1.) / D3 - (3. / 2.) / D5)"
  },
  {
    "label": "Term2()",
    "kind": "Method",
    "detail": "Function (const FVector3d)",
    "insertText": "Term2(3. * bhat * rtFr / D5)"
  },
  {
    "label": "PinchMatrix()",
    "kind": "Method",
    "detail": "Function (} private : FMatrix3d)",
    "insertText": "PinchMatrix(const FMatrix3d& Mat)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "c(4. * bhat - 5.)"
  },
  {
    "label": "FScaleKelvinlet()",
    "kind": "Method",
    "detail": "Function (} double c ; FMatrix3d F ; } ; class FScaleKelvinlet : public TBaseKelvinlet<FScaleKelvinlet> { public : typedef TBaseKelvinlet<FScaleKelvinlet> MyBase ;)",
    "insertText": "FScaleKelvinlet(const double Scale, const double Size, const double ShearModulus, const double PoissonRatio) : MyBase(Size, ShearModulus, PoissonRatio), S(Scale)"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (const double D3 = D2* D ; const double D5 = D3* D2 ; return S*)",
    "insertText": "E(2. / 15.) * (1.0 / D3 + 1.5 / D5)"
  },
  {
    "label": "TBlendPairedKelvinlet()",
    "kind": "Method",
    "detail": "Function (} double S ; } ; template<BrushTypeA,BrushTypeB> class TBlendPairedKelvinlet : public TKelvinletIntegrator<TBlendPairedKelvinlet<BrushTypeA,BrushTypeB>> { public :)",
    "insertText": "TBlendPairedKelvinlet(const BrushTypeA& BrushA, const BrushTypeB& BrushB, double StrengthA) : ABrush(BrushA), BBrush(BrushB)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Alpha =)",
    "insertText": "Clamp(StrengthA, 0., 1.)"
  }
]