[
  {
    "label": "FRWAccessDetector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWAccessDetector"
  },
  {
    "label": "FRWRecursiveAccessDetector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWRecursiveAccessDetector"
  },
  {
    "label": "FRWFullyRecursiveAccessDetector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRWFullyRecursiveAccessDetector"
  },
  {
    "label": "FBaseScopedAccessDetector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseScopedAccessDetector"
  },
  {
    "label": "TScopedReaderAccessDetector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScopedReaderAccessDetector"
  },
  {
    "label": "TScopedWriterDetector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScopedWriterDetector"
  },
  {
    "label": "FMRSWRecursiveAccessDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMRSWRecursiveAccessDetector"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDestructionSentinel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDestructionSentinel"
  },
  {
    "label": "FReaderNum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReaderNum"
  },
  {
    "label": "FRWAccessDetector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # define ENABLE_MT_DETECTOR DO_CHECK # if ENABLE_MT_DETECTOR # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" HAL / PlatformTLS . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" HAL / PlatformStackWalk . h \" # include \" Misc / Build . h \" # include \" AutoRTFM / AutoRTFM . h \" # include<atomic> bool GIsAutomationTesting ; struct FRWAccessDetector { public :)",
    "insertText": "FRWAccessDetector() : AtomicValue(0)"
  },
  {
    "label": "FRWAccessDetector()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRWAccessDetector()"
  },
  {
    "label": "FRWAccessDetector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRWAccessDetector(FRWAccessDetector&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FRWAccessDetector&)",
    "insertText": "operator(FRWAccessDetector&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FRWAccessDetector&)",
    "insertText": "operator(const FRWAccessDetector& Other)"
  },
  {
    "label": "ErrorDetected()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ErrorDetected(AtomicValue.fetch_add(1, std::memory_order_relaxed) & WriterBits)"
  },
  {
    "label": "ErrorDetected()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ErrorDetected(AtomicValue.fetch_sub(1, std::memory_order_relaxed) & WriterBits)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (const bool ErrorDetected = AtomicValue .)",
    "insertText": "fetch_add(WriterIncrementValue, std::memory_order_relaxed)"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (const bool ErrorDetected = AtomicValue .)",
    "insertText": "fetch_sub(WriterIncrementValue, std::memory_order_relaxed)"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (uint32 CurThreadID =)",
    "insertText": "GetCurrentThreadId()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RecursiveDepth + + ; return true ; } else)",
    "insertText": "if(FRWAccessDetector::AcquireWriteAccess())"
  },
  {
    "label": "ReleaseWriteAccess()",
    "kind": "Method",
    "detail": "Function (WriterThreadID = CurThreadID ; RecursiveDepth + + ; return true ; } return false ; } bool)",
    "insertText": "ReleaseWriteAccess()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RecursiveDepth - - ;)",
    "insertText": "if(RecursiveDepth == 0)"
  },
  {
    "label": "WriterThreadID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriterThreadID(uint32)"
  },
  {
    "label": "AcquireReadAccess()",
    "kind": "Method",
    "detail": "Function (int32 RecursiveDepth = 0 ; } ; struct FRWFullyRecursiveAccessDetector : public FRWRecursiveAccessDetector { public : bool)",
    "insertText": "AcquireReadAccess()"
  },
  {
    "label": "ReleaseReadAccess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ReleaseReadAccess()"
  },
  {
    "label": "TScopedReaderAccessDetector()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBaseScopedAccessDetector { } ; template<RWAccessDetector> struct TScopedReaderAccessDetector : public FBaseScopedAccessDetector { public :)",
    "insertText": "TScopedReaderAccessDetector(RWAccessDetector& InAccessDetector) : AccessDetector(InAccessDetector)"
  },
  {
    "label": "TScopedReaderAccessDetector()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TScopedReaderAccessDetector()"
  },
  {
    "label": "MakeScopedReaderAccessDetector()",
    "kind": "Method",
    "detail": "Function (} private : RWAccessDetector& AccessDetector ; } ; template<RWAccessDetector> TScopedReaderAccessDetector<RWAccessDetector>)",
    "insertText": "MakeScopedReaderAccessDetector(RWAccessDetector& InAccessDetector)"
  },
  {
    "label": "TScopedWriterDetector()",
    "kind": "Method",
    "detail": "Function (} template<RWAccessDetector> struct TScopedWriterDetector : public FBaseScopedAccessDetector { public :)",
    "insertText": "TScopedWriterDetector(RWAccessDetector& InAccessDetector) : AccessDetector(InAccessDetector)"
  },
  {
    "label": "AcquireWriteAccess()",
    "kind": "Method",
    "detail": "Function (AccessDetector .)",
    "insertText": "AcquireWriteAccess()"
  },
  {
    "label": "TScopedWriterDetector()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TScopedWriterDetector()"
  },
  {
    "label": "MakeScopedWriterAccessDetector()",
    "kind": "Method",
    "detail": "Function (} private : RWAccessDetector& AccessDetector ; } ; template<RWAccessDetector> TScopedWriterDetector<RWAccessDetector>)",
    "insertText": "MakeScopedWriterAccessDetector(RWAccessDetector& InAccessDetector)"
  },
  {
    "label": "FState()",
    "kind": "Method",
    "detail": "Function (} class FMRSWRecursiveAccessDetector { private : uint32 InvalidThreadId = 0 ; union FState { uint64 Value ; struct { uint32 ReaderNum : 2 0 ; uint32 WriterNum : 1 2 ; uint32 WriterThreadId ; } ;)",
    "insertText": "FState() : Value(0)"
  },
  {
    "label": "FState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FState(uint64 InValue) : Value(InValue)"
  },
  {
    "label": "FState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FState(uint32 InReaderNum, uint32 InWriterNum, uint32 InWriterThreadId) : ReaderNum(InReaderNum) , WriterNum(InWriterNum) , WriterThreadId(InWriterThreadId)"
  },
  {
    "label": "GetWriterThreadId()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetWriterThreadId()"
  },
  {
    "label": "LoadState()",
    "kind": "Method",
    "detail": "Function (WriterThreadId = ThreadId + 1 ; } } ; std::atomic<uint64> State { 0 } ; FState)",
    "insertText": "LoadState()"
  },
  {
    "label": "ExchangeState()",
    "kind": "Method",
    "detail": "Function (} FState)",
    "insertText": "ExchangeState(FState NewState)"
  },
  {
    "label": "IncrementReaderNum()",
    "kind": "Method",
    "detail": "Function (} FState)",
    "insertText": "IncrementReaderNum()"
  },
  {
    "label": "FState()",
    "kind": "Method",
    "detail": "Function (FState OneReader { 1,0,0 } ; return)",
    "insertText": "FState(State.fetch_add(OneReader.Value, std::memory_order_relaxed))"
  },
  {
    "label": "DecrementReaderNum()",
    "kind": "Method",
    "detail": "Function (} FState)",
    "insertText": "DecrementReaderNum()"
  },
  {
    "label": "FState()",
    "kind": "Method",
    "detail": "Function (FState OneReader { 1,0,0 } ; return)",
    "insertText": "FState(State.fetch_sub(OneReader.Value, std::memory_order_relaxed))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FState L, FState R)"
  },
  {
    "label": "GetCurrentThreadCallstack()",
    "kind": "Method",
    "detail": "Function (} } FString)",
    "insertText": "GetCurrentThreadCallstack()"
  },
  {
    "label": "StackWalkAndDump()",
    "kind": "Method",
    "detail": "Function (const SIZE_T StackTraceSize = 6 5 5 3 6 ; ANSICHAR StackTrace [ StackTraceSize ] = { 0 } ; UE_AUTORTFM_OPEN {)",
    "insertText": "StackWalkAndDump(StackTrace, StackTraceSize, 0)"
  },
  {
    "label": "ANSI_TO_TCHAR()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "ANSI_TO_TCHAR(StackTrace)"
  },
  {
    "label": "GetThreadCallstack()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetThreadCallstack(uint32 ThreadId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FPlatformTLS::GetCurrentThreadId() == ThreadId)"
  },
  {
    "label": "ThreadStackWalkAndDump()",
    "kind": "Method",
    "detail": "Function (} const SIZE_T StackTraceSize = 6 5 5 3 6 ; ANSICHAR StackTrace [ StackTraceSize ] = { 0 } ; UE_AUTORTFM_OPEN {)",
    "insertText": "ThreadStackWalkAndDump(StackTrace, StackTraceSize, 0, ThreadId)"
  },
  {
    "label": "FDestructionSentinel()",
    "kind": "Method",
    "detail": "Function (} public : enum class EAccessType { Reader,Writer } ; struct FDestructionSentinel {)",
    "insertText": "FDestructionSentinel(EAccessType InAccessType) : AccessType(InAccessType)"
  },
  {
    "label": "GetDestructionSentinelStackTls()",
    "kind": "Method",
    "detail": "Function (} EAccessType AccessType ; const FMRSWRecursiveAccessDetector* Accessor ; bool bDestroyed = false ; } ; private : using FDestructionSentinelStackTls = TArray<FDestructionSentinel*,TInlineAllocator<4>> ; FDestructionSentinelStackTls&)",
    "insertText": "GetDestructionSentinelStackTls()"
  },
  {
    "label": "GetReadersTls()",
    "kind": "Method",
    "detail": "Function (private : struct FReaderNum { const FMRSWRecursiveAccessDetector* Reader ; uint32 Num ; } ; using FReadersTls = TArray<FReaderNum,TInlineAllocator<4>> ; FReadersTls&)",
    "insertText": "GetReadersTls()"
  },
  {
    "label": "RemoveReaderFromTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReaderFromTls()"
  },
  {
    "label": "GetReadersTls()",
    "kind": "Method",
    "detail": "Function (int32 ReaderIndex =)",
    "insertText": "GetReadersTls().IndexOfByPredicate([this](FReaderNum ReaderNum) { return ReaderNum.Reader == this; })"
  },
  {
    "label": "GetReadersTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReadersTls().RemoveAtSwap(ReaderIndex, EAllowShrinking::No)"
  },
  {
    "label": "FMRSWRecursiveAccessDetector()",
    "kind": "Method",
    "detail": "Function (} } public :)",
    "insertText": "FMRSWRecursiveAccessDetector()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMRSWRecursiveAccessDetector&)",
    "insertText": "operator(const FMRSWRecursiveAccessDetector& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FState ExpectedState ;)",
    "insertText": "for(int DestructionSentinelIndex = 0; DestructionSentinelIndex != GetDestructionSentinelStackTls().Num(); ++DestructionSentinelIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DestructionSentinel . bDestroyed = true ;)",
    "insertText": "if(DestructionSentinel.AccessType == EAccessType::Reader)"
  },
  {
    "label": "SetWriterThreadId()",
    "kind": "Method",
    "detail": "Function (} else { + + ExpectedState . WriterNum ; ExpectedState .)",
    "insertText": "SetWriterThreadId(FPlatformTLS::GetCurrentThreadId())"
  },
  {
    "label": "GetDestructionSentinelStackTls()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GetDestructionSentinelStackTls().RemoveAtSwap(DestructionSentinelIndex)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (- - DestructionSentinelIndex ; } })",
    "insertText": "ensureMsgf(LoadState().Value == ExpectedState.Value, TEXT(\"Race detector destroyed while being accessed on another thread: %d readers, %d writers on thread %u:\\nCurrent thread %u callstack:\\n%s\\nWriter thread %u callstack:\\n%s\"), LoadState().ReaderNum - ExpectedState.ReaderNum, LoadState().WriterNum - ExpectedState.WriterNum, LoadState().GetWriterThreadId(), FPlatformTLS::GetCurrentThreadId(), *GetCurrentThreadCallstack(), LoadState().GetWriterThreadId(), *GetThreadCallstack(LoadState().GetWriterThreadId()))"
  },
  {
    "label": "GetReadersTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReadersTls().Add(FReaderNum{this, 1})"
  },
  {
    "label": "AcquireReadAccess()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AcquireReadAccess(FDestructionSentinel& DestructionSentinel)"
  },
  {
    "label": "GetDestructionSentinelStackTls()",
    "kind": "Method",
    "detail": "Function (DestructionSentinel . Accessor = this ;)",
    "insertText": "GetDestructionSentinelStackTls().Add(&DestructionSentinel)"
  },
  {
    "label": "ReleaseReadAccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseReadAccess(FDestructionSentinel& DestructionSentinel)"
  },
  {
    "label": "GetDestructionSentinelStackTls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDestructionSentinelStackTls().RemoveAtSwap(GetDestructionSentinelStackTls().Num() - 1)"
  },
  {
    "label": "ExchangeState()",
    "kind": "Method",
    "detail": "Function (} FState NewState { LocalState . ReaderNum,LocalState . WriterNum + 1 u,CurrentThreadId + 1 } ; FState PrevState =)",
    "insertText": "ExchangeState(NewState)"
  },
  {
    "label": "AcquireWriteAccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AcquireWriteAccess(FDestructionSentinel& DestructionSentinel)"
  },
  {
    "label": "ReleaseWriteAccess()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseWriteAccess(FDestructionSentinel& DestructionSentinel)"
  },
  {
    "label": "UE_MT_DECLARE_RW_ACCESS_DETECTOR()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "UE_MT_DECLARE_RW_ACCESS_DETECTOR(AccessDetector)"
  },
  {
    "label": "UE_MT_DECLARE_RW_RECURSIVE_ACCESS_DETECTOR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_DECLARE_RW_RECURSIVE_ACCESS_DETECTOR(AccessDetector)"
  },
  {
    "label": "UE_MT_DECLARE_RW_FULLY_RECURSIVE_ACCESS_DETECTOR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_DECLARE_RW_FULLY_RECURSIVE_ACCESS_DETECTOR(AccessDetector)"
  },
  {
    "label": "UE_MT_DECLARE_MRSW_RECURSIVE_ACCESS_DETECTOR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_DECLARE_MRSW_RECURSIVE_ACCESS_DETECTOR(AccessDetector)"
  },
  {
    "label": "UE_MT_SCOPED_READ_ACCESS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_SCOPED_READ_ACCESS(AccessDetector) const FBaseScopedAccessDetector& PREPROCESSOR_JOIN(ScopedMTAccessDetector_,__LINE__) = MakeScopedReaderAccessDetector(AccessDetector)"
  },
  {
    "label": "UE_MT_SCOPED_WRITE_ACCESS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_SCOPED_WRITE_ACCESS(AccessDetector) const FBaseScopedAccessDetector& PREPROCESSOR_JOIN(ScopedMTAccessDetector_,__LINE__) = MakeScopedWriterAccessDetector(AccessDetector)"
  },
  {
    "label": "UE_MT_ACQUIRE_READ_ACCESS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_ACQUIRE_READ_ACCESS(AccessDetector) (AccessDetector).AcquireReadAccess()"
  },
  {
    "label": "UE_MT_RELEASE_READ_ACCESS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_RELEASE_READ_ACCESS(AccessDetector) (AccessDetector).ReleaseReadAccess()"
  },
  {
    "label": "UE_MT_ACQUIRE_WRITE_ACCESS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_ACQUIRE_WRITE_ACCESS(AccessDetector) (AccessDetector).AcquireWriteAccess()"
  },
  {
    "label": "UE_MT_RELEASE_WRITE_ACCESS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_MT_RELEASE_WRITE_ACCESS(AccessDetector) (AccessDetector).ReleaseWriteAccess()"
  }
]