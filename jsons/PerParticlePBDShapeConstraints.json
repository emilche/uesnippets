[
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FPerParticlePBDShapeConstraints()",
    "kind": "Method",
    "detail": "Function (typedef FPBDShapeConstraintsBase Base ; public :)",
    "insertText": "FPerParticlePBDShapeConstraints(const FSolverReal Stiffness = (FSolverReal)1.) : Base(Stiffness)"
  },
  {
    "label": "FPerParticlePBDShapeConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerParticlePBDShapeConstraints(const FSolverParticles& InParticles, const TArray<FSolverVec3>& TargetPositions, const FSolverReal Stiffness = (FSolverReal)1.) : Base(InParticles, TargetPositions, Stiffness)"
  },
  {
    "label": "FPerParticlePBDShapeConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPerParticlePBDShapeConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FSolverReal Dt, const int32 Index)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(Index) -= InParticles.InvM(Index) * Base::GetDelta(InParticles, Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Apply(FSolverParticles& InParticles, const FSolverReal Dt)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(InParticles.Size(), [&](int32 Index) { Apply(InParticles, Dt, Index); })"
  }
]