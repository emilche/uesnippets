[
  {
    "label": "FSeparateTranslucencyDimensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSeparateTranslucencyDimensions"
  },
  {
    "label": "FTranslucencyComposition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyComposition"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetViewport()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HitProxies . h \" # include \" ShaderParameters . h \" # include \" GlobalShader . h \" # include \" SceneRendering . h \" # include \" VolumeRendering . h \" # include \" ScreenPass . h \" # include \" SystemTextures . h \" # include \" RenderGraphDefinitions . h \" # include \" PostProcess / SceneRenderTargets . h \" # define DISTORTION_STENCIL_MASK_BIT STENCIL_SANDBOX_MASK struct FSeparateTranslucencyDimensions { FScreenPassTextureViewport)",
    "insertText": "GetViewport(FIntRect ViewRect)"
  },
  {
    "label": "GetInstancedStereoViewport()",
    "kind": "Method",
    "detail": "Function (} FScreenPassTextureViewport)",
    "insertText": "GetInstancedStereoViewport(const FViewInfo& View)"
  },
  {
    "label": "DECLARE_GPU_DRAWCALL_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (FIntPoint Extent = FIntPoint::ZeroValue ; float Scale = 1 . 0 f ; uint32 NumSamples = 1 ; } ;)",
    "insertText": "DECLARE_GPU_DRAWCALL_STAT_EXTERN(Translucency)"
  },
  {
    "label": "TranslucencyPassToMeshPass()",
    "kind": "Method",
    "detail": "Function (EMeshPass::Type)",
    "insertText": "TranslucencyPassToMeshPass(ETranslucencyPass::Type TranslucencyPass)"
  },
  {
    "label": "GetTranslucencyView()",
    "kind": "Method",
    "detail": "Function (ETranslucencyView)",
    "insertText": "GetTranslucencyView(const FViewInfo& View)"
  },
  {
    "label": "GetTranslucencyViews()",
    "kind": "Method",
    "detail": "Function (ETranslucencyView)",
    "insertText": "GetTranslucencyViews(TArrayView<const FViewInfo> Views)"
  },
  {
    "label": "UpdateSeparateTranslucencyDimensions()",
    "kind": "Method",
    "detail": "Function (FSeparateTranslucencyDimensions)",
    "insertText": "UpdateSeparateTranslucencyDimensions(const FSceneRenderer& SceneRenderer)"
  },
  {
    "label": "ShouldRenderTranslucency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderTranslucency(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "IsSeparateTranslucencyEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSeparateTranslucencyEnabled(ETranslucencyPass::Type TranslucencyPass, float DownsampleScale)"
  },
  {
    "label": "GetPostDOFTranslucentTextureDesc()",
    "kind": "Method",
    "detail": "Function (const FRDGTextureDesc)",
    "insertText": "GetPostDOFTranslucentTextureDesc(ETranslucencyPass::Type TranslucencyPass, FSeparateTranslucencyDimensions& SeparateTranslucencyDimensions, bool bIsModulate, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "CreatePostDOFTranslucentTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureMSAA)",
    "insertText": "CreatePostDOFTranslucentTexture(FRDGBuilder& GraphBuilder, ETranslucencyPass::Type TranslucencyPass, FSeparateTranslucencyDimensions& SeparateTranslucencyDimensions, bool bIsModulate, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (struct FTranslucencyComposition { enum class EOperation { UpscaleOnly,ComposeToExistingSceneColor,ComposeToNewSceneColor,ComposeToSceneColorAlpha } ; EOperation Operation = EOperation::UpscaleOnly ; bool bApplyModulateOnly = false ; FScreenPassTextureSlice SceneColor ; FScreenPassTexture SceneDepth ; FScreenPassTextureViewport OutputViewport ; EPixelFormat OutputPixelFormat = PF_Unknown ; FLensDistortionLUT LensDistortionLUT ; FScreenPassTexture)",
    "insertText": "AddPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FTranslucencyPassResources& TranslucencyTextures)"
  }
]