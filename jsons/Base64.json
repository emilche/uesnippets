[
  {
    "label": "Base64",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Base64"
  },
  {
    "label": "DecodeOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DecodeOption"
  },
  {
    "label": "IsBase64Char()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBase64Char(char ch)"
  },
  {
    "label": "GetNextBase64Char()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNextBase64Char(char ch, char* next_ch)"
  },
  {
    "label": "IsBase64Encoded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBase64Encoded(absl::string_view str)"
  },
  {
    "label": "EncodeFromArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeFromArray(const void* data,\n                                         size_t len,\n                                         std::string* result)"
  },
  {
    "label": "DecodeFromArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecodeFromArray(const char* data,\n                                         size_t len,\n                                         DecodeFlags flags,\n                                         std::string* result,\n                                         size_t* data_used)"
  },
  {
    "label": "DecodeFromArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecodeFromArray(const char* data,\n                              size_t len,\n                              DecodeFlags flags,\n                              std::vector<char>* result,\n                              size_t* data_used)"
  },
  {
    "label": "DecodeFromArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecodeFromArray(const char* data,\n                              size_t len,\n                              DecodeFlags flags,\n                              std::vector<uint8_t>* result,\n                              size_t* data_used)"
  },
  {
    "label": "GetNextQuantum()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNextQuantum(DecodeFlags parse_flags,\n                               bool illegal_pads,\n                               const char* data,\n                               size_t len,\n                               size_t* dpos,\n                               unsigned char qbuf[4],\n                               bool* padded)"
  },
  {
    "label": "DecodeFromArrayTemplate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecodeFromArrayTemplate(const char* data,\n                                      size_t len,\n                                      DecodeFlags flags,\n                                      T* result,\n                                      size_t* data_used)"
  }
]