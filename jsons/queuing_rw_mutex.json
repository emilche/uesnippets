[
  {
    "label": "queuing_rw_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "queuing_rw_mutex"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "queuing_rw_mutex()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_queuing_rw_mutex_H # define __TBB_queuing_rw_mutex_H # include<cstring> # include \" atomic . h \" # include \" tbb_profiling . h \" namespace tbb { class queuing_rw_mutex : internal::mutex_copy_deprecated_and_disabled { public :)",
    "insertText": "queuing_rw_mutex()"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (q_tail = NULL ; # if TBB_USE_THREADING_TOOLS)",
    "insertText": "internal_construct()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT)",
    "insertText": "__TBB_ASSERT(!q_tail, \"destruction of an acquired mutex\")"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (# endif } class scoped_lock : internal::no_copy { void)",
    "insertText": "initialize()"
  },
  {
    "label": "poison_pointer()",
    "kind": "Method",
    "detail": "Function (my_mutex = NULL ; my_internal_lock = 0 ; my_going = 0 ; # if TBB_USE_ASSERT my_state = 0 xFF ;)",
    "insertText": "poison_pointer(my_next)"
  },
  {
    "label": "poison_pointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "poison_pointer(my_prev)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (# endif } public :)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_lock(queuing_rw_mutex& m, bool write=true)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "acquire(m,write)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "acquire(queuing_rw_mutex& m, bool write=true)"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "try_acquire(queuing_rw_mutex& m, bool write=true)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "release()"
  },
  {
    "label": "upgrade_to_writer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "upgrade_to_writer()"
  },
  {
    "label": "downgrade_to_reader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "downgrade_to_reader()"
  },
  {
    "label": "acquire_internal_lock()",
    "kind": "Method",
    "detail": "Function (private : queuing_rw_mutex* my_mutex ; scoped_lock* __TBB_atomic my_prev,* __TBB_atomic my_next ; typedef unsigned char state_t ; atomic<state_t> my_state ; unsigned char __TBB_atomic my_going ; unsigned char my_internal_lock ; void)",
    "insertText": "acquire_internal_lock()"
  },
  {
    "label": "try_acquire_internal_lock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "try_acquire_internal_lock()"
  },
  {
    "label": "release_internal_lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "release_internal_lock()"
  },
  {
    "label": "wait_for_release_of_internal_lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wait_for_release_of_internal_lock()"
  },
  {
    "label": "unblock_or_wait_on_internal_lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unblock_or_wait_on_internal_lock(uintptr_t)"
  }
]