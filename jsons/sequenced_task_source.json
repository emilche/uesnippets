[
  {
    "label": "EventContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EventContext"
  },
  {
    "label": "SequencedTaskSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskSource"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_SEQUENCED_TASK_SOURCE_H_ # define BASE_TASK_SEQUENCE_MANAGER_SEQUENCED_TASK_SOURCE_H_ # include \" base / base_export . h \" # include \" base / callback_helpers . h \" # include \" base / pending_task . h \" # include \" base / task / common / lazy_now . h \" # include \" base / task / sequence_manager / task_queue . h \" # include \" base / task / sequence_manager / tasks . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace perfetto { class EventContext ; } namespace base { namespace sequence_manager { namespace internal { class SequencedTaskSource { public : enum class SelectTaskOption { kDefault,kSkipDelayedTask } ; using TaskExecutionTraceLogger = RepeatingCallback<)",
    "insertText": "void(perfetto::EventContext&, const Task&)"
  },
  {
    "label": "SelectedTask()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT SelectedTask {)",
    "insertText": "SelectedTask(const SelectedTask&)"
  },
  {
    "label": "SelectedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectedTask(Task& task, TaskExecutionTraceLogger task_execution_trace_logger, TaskQueue::QueuePriority priority, QueueName task_queue_name)"
  },
  {
    "label": "SelectedTask()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SelectedTask()"
  },
  {
    "label": "TaskExecutionTraceLogger()",
    "kind": "Method",
    "detail": "Function (Task& task ; TaskExecutionTraceLogger task_execution_trace_logger =)",
    "insertText": "TaskExecutionTraceLogger()"
  },
  {
    "label": "SequencedTaskSource()",
    "kind": "Method",
    "detail": "Function (TaskQueue::QueuePriority priority ; QueueName task_queue_name ; } ; ~)",
    "insertText": "SequencedTaskSource()"
  },
  {
    "label": "SelectNextTask()",
    "kind": "Method",
    "detail": "Function (absl::optional<SelectedTask>)",
    "insertText": "SelectNextTask(LazyNow& lazy_now, SelectTaskOption option = SelectTaskOption::kDefault)"
  },
  {
    "label": "DidRunTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DidRunTask(LazyNow& lazy_now)"
  },
  {
    "label": "RemoveAllCanceledDelayedTasksFromFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllCanceledDelayedTasksFromFront(LazyNow* lazy_now)"
  },
  {
    "label": "GetPendingWakeUp()",
    "kind": "Method",
    "detail": "Function (absl::optional<WakeUp>)",
    "insertText": "GetPendingWakeUp(LazyNow* lazy_now, SelectTaskOption option = SelectTaskOption::kDefault)"
  },
  {
    "label": "HasPendingHighResolutionTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingHighResolutionTasks()"
  },
  {
    "label": "OnSystemIdle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnSystemIdle()"
  }
]