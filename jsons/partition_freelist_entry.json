[
  {
    "label": "PartitionFreelistEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PartitionFreelistEntry"
  },
  {
    "label": "EncodedPartitionFreelistEntryPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodedPartitionFreelistEntryPtr"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_FREELIST_ENTRY_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_FREELIST_ENTRY_H_ # include<cstddef> # include<cstdint> # include \" base / allocator / partition_allocator / freeslot_bitmap . h \" # include \" base / allocator / partition_allocator / partition_alloc - inl . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / bits . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / immediate_crash . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_ref_count . h \" # include \" build / build_config . h \" # if !)",
    "insertText": "defined(ARCH_CPU_BIG_ENDIAN)"
  },
  {
    "label": "FreelistCorruptionDetected()",
    "kind": "Method",
    "detail": "Function (namespace { [ [ noreturn ] ] PA_NOINLINE void)",
    "insertText": "FreelistCorruptionDetected(size_t extra)"
  },
  {
    "label": "PA_DEBUG_DATA_ON_STACK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DEBUG_DATA_ON_STACK(\"extra\", extra)"
  },
  {
    "label": "PA_IMMEDIATE_CRASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_IMMEDIATE_CRASH()"
  },
  {
    "label": "EncodedPartitionFreelistEntryPtr()",
    "kind": "Method",
    "detail": "Function (} } class PartitionFreelistEntry ; class EncodedPartitionFreelistEntryPtr { private : PA_ALWAYS_INLINE)",
    "insertText": "EncodedPartitionFreelistEntryPtr(std::nullptr_t) : encoded_(Transform(0))"
  },
  {
    "label": "EncodedPartitionFreelistEntryPtr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE)",
    "insertText": "EncodedPartitionFreelistEntryPtr(void* ptr) : encoded_(Transform(reinterpret_cast<uintptr_t>(ptr)))"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE PartitionFreelistEntry*)",
    "insertText": "Decode()"
  },
  {
    "label": "Inverted()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "Inverted()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (encoded_ = encoded ; } PA_ALWAYS_INLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "ReverseBytes()",
    "kind": "Method",
    "detail": "Function (# else uintptr_t transformed =)",
    "insertText": "ReverseBytes(address)"
  },
  {
    "label": "PartitionFreelistEntry()",
    "kind": "Method",
    "detail": "Function (# endif return transformed ; } uintptr_t encoded_ ; PartitionFreelistEntry ; } ; class PartitionFreelistEntry { private :)",
    "insertText": "PartitionFreelistEntry(std::nullptr_t) : encoded_next_(EncodedPartitionFreelistEntryPtr(nullptr)) #if defined(PA_HAS_FREELIST_SHADOW_ENTRY) , shadow_(encoded_next_.Inverted())"
  },
  {
    "label": "PartitionFreelistEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PartitionFreelistEntry(PartitionFreelistEntry* next) : encoded_next_(EncodedPartitionFreelistEntryPtr(next)) #if defined(PA_HAS_FREELIST_SHADOW_ENTRY) , shadow_(encoded_next_.Inverted())"
  },
  {
    "label": "PartitionFreelistEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PartitionFreelistEntry(void* next, bool make_shadow_match) : encoded_next_(EncodedPartitionFreelistEntryPtr(next)) #if defined(PA_HAS_FREELIST_SHADOW_ENTRY) , shadow_(make_shadow_match ? encoded_next_.Inverted() : 12345)"
  },
  {
    "label": "PartitionFreelistEntry()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "PartitionFreelistEntry()"
  },
  {
    "label": "EmplaceAndInitNull()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE PartitionFreelistEntry*)",
    "insertText": "EmplaceAndInitNull(void* slot_start_tagged)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (auto* entry =)",
    "insertText": "new(slot_start_tagged) PartitionFreelistEntry(nullptr)"
  },
  {
    "label": "EmplaceAndInitForThreadCache()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE PartitionFreelistEntry*)",
    "insertText": "EmplaceAndInitForThreadCache(uintptr_t slot_start, PartitionFreelistEntry* next)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (auto* entry =)",
    "insertText": "new(SlotStartAddr2Ptr(slot_start)) PartitionFreelistEntry(next)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(SlotStartAddr2Ptr(slot_start)) PartitionFreelistEntry(next, make_shadow_match)"
  },
  {
    "label": "CorruptNextForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CorruptNextForTesting(uintptr_t v)"
  },
  {
    "label": "Override()",
    "kind": "Method",
    "detail": "Function (encoded_next_ .)",
    "insertText": "Override(EncodedPartitionFreelistEntryPtr::Transform(v))"
  },
  {
    "label": "GetNextForThreadCache()",
    "kind": "Method",
    "detail": "Function (} template<bool crash_on_corruption> PA_ALWAYS_INLINE PartitionFreelistEntry*)",
    "insertText": "GetNextForThreadCache(size_t extra)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE PartitionFreelistEntry*)",
    "insertText": "GetNext(size_t extra)"
  },
  {
    "label": "CheckFreeList()",
    "kind": "Method",
    "detail": "Function (PA_NOINLINE void)",
    "insertText": "CheckFreeList(size_t extra)"
  },
  {
    "label": "CheckFreeListForThreadCache()",
    "kind": "Method",
    "detail": "Function (} } PA_NOINLINE void)",
    "insertText": "CheckFreeListForThreadCache(size_t extra)"
  },
  {
    "label": "SetNext()",
    "kind": "Method",
    "detail": "Function (} } PA_ALWAYS_INLINE void)",
    "insertText": "SetNext(PartitionFreelistEntry* entry)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) if (PA_UNLIKELY(entry && (SlotStartPtr2Addr(this) & kSuperPageBaseMask) != (SlotStartPtr2Addr(entry) & kSuperPageBaseMask)))"
  },
  {
    "label": "FreelistCorruptionDetected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreelistCorruptionDetected(0)"
  },
  {
    "label": "EncodedPartitionFreelistEntryPtr()",
    "kind": "Method",
    "detail": "Function (} # endif encoded_next_ =)",
    "insertText": "EncodedPartitionFreelistEntryPtr(entry)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_FREELIST_SHADOW_ENTRY) shadow_ = encoded_next_.Inverted()"
  },
  {
    "label": "ClearForAllocation()",
    "kind": "Method",
    "detail": "Function (# endif } PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ClearForAllocation()"
  },
  {
    "label": "Override()",
    "kind": "Method",
    "detail": "Function (encoded_next_ .)",
    "insertText": "Override(0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_FREELIST_SHADOW_ENTRY)"
  },
  {
    "label": "SlotStartPtr2Addr()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "SlotStartPtr2Addr(this)"
  },
  {
    "label": "IsEncodedNextPtrZero()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsEncodedNextPtrZero()"
  },
  {
    "label": "IsSane()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE bool)",
    "insertText": "IsSane(const PartitionFreelistEntry* here, const PartitionFreelistEntry* next, bool for_thread_cache)"
  },
  {
    "label": "SlotStartPtr2Addr()",
    "kind": "Method",
    "detail": "Function (uintptr_t here_address =)",
    "insertText": "SlotStartPtr2Addr(here)"
  },
  {
    "label": "SlotStartPtr2Addr()",
    "kind": "Method",
    "detail": "Function (uintptr_t next_address =)",
    "insertText": "SlotStartPtr2Addr(next)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (shadow_)",
    "insertText": "defined(PA_HAS_FREELIST_SHADOW_ENTRY) bool shadow_ptr_ok = here->encoded_next_.Inverted()"
  },
  {
    "label": "same_superpage()",
    "kind": "Method",
    "detail": "Function (# else bool shadow_ptr_ok = true ; # endif bool)",
    "insertText": "same_superpage(here_address & kSuperPageBaseMask) == (next_address & kSuperPageBaseMask)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_FREESLOT_BITMAP) bool marked_as_free_in_bitmap = for_thread_cache ? true : !FreeSlotBitmapSlotIsUsed(reinterpret_cast<uintptr_t>(next))"
  },
  {
    "label": "not_in_metadata()",
    "kind": "Method",
    "detail": "Function (# else bool marked_as_free_in_bitmap = true ; # endif bool)",
    "insertText": "not_in_metadata(next_address & kSuperPageOffsetMask) >= PartitionPageSize()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "static_assert(kSmallestBucket >= sizeof(PartitionFreelistEntry), \"Need enough space for freelist entries in the smallest slot\")"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PUT_REF_COUNT_IN_PREVIOUS_SLOT)"
  },
  {
    "label": "AlignUp()",
    "kind": "Method",
    "detail": "Function (size_t kSmallestUsedBucket = base::)",
    "insertText": "AlignUp(1 + sizeof(PartitionRefCount), kSmallestBucket)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(kSmallestUsedBucket >= sizeof(PartitionFreelistEntry) + sizeof(PartitionRefCount), \"Need enough space for freelist entries and the ref-count in the \" \"smallest *used* slot\")"
  },
  {
    "label": "GetNextInternal()",
    "kind": "Method",
    "detail": "Function (# endif template<bool crash_on_corruption> PA_ALWAYS_INLINE PartitionFreelistEntry*)",
    "insertText": "GetNextInternal(size_t extra, bool for_thread_cache)"
  },
  {
    "label": "PA_DEBUG_DATA_ON_STACK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DEBUG_DATA_ON_STACK(\"first\", static_cast<size_t>(encoded_next_.encoded_))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_FREELIST_SHADOW_ENTRY) PA_DEBUG_DATA_ON_STACK(\"second\", static_cast<size_t>(shadow_))"
  },
  {
    "label": "FreelistCorruptionDetected()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FreelistCorruptionDetected(extra)"
  },
  {
    "label": "PA_PREFETCH()",
    "kind": "Method",
    "detail": "Function (} else { return nullptr ; } })",
    "insertText": "PA_PREFETCH(ret)"
  }
]