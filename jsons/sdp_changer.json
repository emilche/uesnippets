[
  {
    "label": "LocalAndRemoteSdp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LocalAndRemoteSdp"
  },
  {
    "label": "PatchingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PatchingParams"
  },
  {
    "label": "SignalingInterceptor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SignalingInterceptor"
  },
  {
    "label": "SimulcastSectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SimulcastSectionInfo"
  },
  {
    "label": "SignalingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SignalingContext"
  },
  {
    "label": "FilterVideoCodecCapabilities()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_SDP_SDP_CHANGER_H_ # define TEST_PC_E2E_SDP_SDP_CHANGER_H_ # include<map> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / jsep . h \" # include \" api / rtp_parameters . h \" # include \" api / test / pclf / media_configuration . h \" # include \" media / base / rid_description . h \" # include \" pc / session_description . h \" # include \" pc / simulcast_description . h \" namespace webrtc { namespace webrtc_pc_e2e { std::vector<RtpCodecCapability>)",
    "insertText": "FilterVideoCodecCapabilities(rtc::ArrayView<const VideoCodecConfig> video_codecs, bool use_rtx, bool use_ulpfec, bool use_flexfec, rtc::ArrayView<const RtpCodecCapability> supported_codecs)"
  },
  {
    "label": "LocalAndRemoteSdp()",
    "kind": "Method",
    "detail": "Function (struct LocalAndRemoteSdp {)",
    "insertText": "LocalAndRemoteSdp(std::unique_ptr<SessionDescriptionInterface> local_sdp, std::unique_ptr<SessionDescriptionInterface> remote_sdp) : local_sdp(std::move(local_sdp)), remote_sdp(std::move(remote_sdp))"
  },
  {
    "label": "PatchingParams()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<SessionDescriptionInterface> local_sdp ; std::unique_ptr<SessionDescriptionInterface> remote_sdp ; } ; struct PatchingParams {)",
    "insertText": "PatchingParams(bool use_conference_mode, std::map<std::string, int> stream_label_to_simulcast_streams_count) : use_conference_mode(use_conference_mode), stream_label_to_simulcast_streams_count( stream_label_to_simulcast_streams_count)"
  },
  {
    "label": "SignalingInterceptor()",
    "kind": "Method",
    "detail": "Function (} bool use_conference_mode ; std::map<std::string,int> stream_label_to_simulcast_streams_count ; } ; class SignalingInterceptor { public :)",
    "insertText": "SignalingInterceptor(PatchingParams params) : params_(params)"
  },
  {
    "label": "PatchOffer()",
    "kind": "Method",
    "detail": "Function (} LocalAndRemoteSdp)",
    "insertText": "PatchOffer(std::unique_ptr<SessionDescriptionInterface> offer, const VideoCodecConfig& first_codec)"
  },
  {
    "label": "PatchAnswer()",
    "kind": "Method",
    "detail": "Function (LocalAndRemoteSdp)",
    "insertText": "PatchAnswer(std::unique_ptr<SessionDescriptionInterface> answer, const VideoCodecConfig& first_codec)"
  },
  {
    "label": "PatchOffererIceCandidates()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<IceCandidateInterface>>)",
    "insertText": "PatchOffererIceCandidates(rtc::ArrayView<const IceCandidateInterface* const> candidates)"
  },
  {
    "label": "PatchAnswererIceCandidates()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<IceCandidateInterface>>)",
    "insertText": "PatchAnswererIceCandidates(rtc::ArrayView<const IceCandidateInterface* const> candidates)"
  },
  {
    "label": "SimulcastSectionInfo()",
    "kind": "Method",
    "detail": "Function (private : struct SimulcastSectionInfo {)",
    "insertText": "SimulcastSectionInfo(const std::string& mid, cricket::MediaProtocolType media_protocol_type, const std::vector<cricket::RidDescription>& rids_desc)"
  },
  {
    "label": "SignalingContext()",
    "kind": "Method",
    "detail": "Function (const std::string mid ; const cricket::MediaProtocolType media_protocol_type ; std::vector<std::string> rids ; cricket::SimulcastDescription simulcast_description ; webrtc::RtpExtension mid_extension ; webrtc::RtpExtension rid_extension ; webrtc::RtpExtension rrid_extension ; cricket::TransportDescription transport_description ; } ; struct SignalingContext {)",
    "insertText": "SignalingContext()"
  },
  {
    "label": "SignalingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalingContext(SignalingContext&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SignalingContext&)",
    "insertText": "operator(SignalingContext&)"
  },
  {
    "label": "SignalingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalingContext(SignalingContext&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SignalingContext&)",
    "insertText": "operator(SignalingContext&&)"
  },
  {
    "label": "AddSimulcastInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimulcastInfo(const SimulcastSectionInfo& info)"
  },
  {
    "label": "HasSimulcast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSimulcast()"
  },
  {
    "label": "PatchVp8Offer()",
    "kind": "Method",
    "detail": "Function (} std::vector<SimulcastSectionInfo> simulcast_infos ; std::map<std::string,SimulcastSectionInfo*> simulcast_infos_by_mid ; std::map<std::string,SimulcastSectionInfo*> simulcast_infos_by_rid ; std::vector<std::string> mids_order ; } ; LocalAndRemoteSdp)",
    "insertText": "PatchVp8Offer(std::unique_ptr<SessionDescriptionInterface> offer)"
  },
  {
    "label": "PatchVp9Offer()",
    "kind": "Method",
    "detail": "Function (LocalAndRemoteSdp)",
    "insertText": "PatchVp9Offer(std::unique_ptr<SessionDescriptionInterface> offer)"
  },
  {
    "label": "PatchVp8Answer()",
    "kind": "Method",
    "detail": "Function (LocalAndRemoteSdp)",
    "insertText": "PatchVp8Answer(std::unique_ptr<SessionDescriptionInterface> answer)"
  },
  {
    "label": "PatchVp9Answer()",
    "kind": "Method",
    "detail": "Function (LocalAndRemoteSdp)",
    "insertText": "PatchVp9Answer(std::unique_ptr<SessionDescriptionInterface> answer)"
  },
  {
    "label": "FillSimulcastContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSimulcastContext(SessionDescriptionInterface* offer)"
  },
  {
    "label": "RestoreMediaSectionsOrder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<cricket::SessionDescription>)",
    "insertText": "RestoreMediaSectionsOrder(std::unique_ptr<cricket::SessionDescription> source)"
  }
]