[
  {
    "label": "client",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "client"
  },
  {
    "label": "async_writer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "async_writer"
  },
  {
    "label": "rpc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rpc"
  },
  {
    "label": "async_writer()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef ASYNC_WRITER_H_HQIRH28I # define ASYNC_WRITER_H_HQIRH28I # include \" asio . hpp \" # include \" rpc / msgpack . hpp \" # include<condition_variable> # include<deque> # include<memory> # include<thread> namespace rpc { class client ; namespace detail { class async_writer : public std::enable_shared_from_this<async_writer> { public :)",
    "insertText": "async_writer(RPCLIB_ASIO::io_service *io, RPCLIB_ASIO::ip::tcp::socket socket) : socket_(std::move(socket)), write_strand_(*io), exit_(false)"
  },
  {
    "label": "do_write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "do_write()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (auto& item = write_queue_ .)",
    "insertText": "front()"
  },
  {
    "label": "async_write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "async_write(socket_, RPCLIB_ASIO::buffer(item.data(), item.size()), write_strand_.wrap( [this, self](std::error_code ec, std::size_t transferred) { (void)transferred; if (!ec) { write_queue_.pop_front(); if (write_queue_.size() > 0) { if (!exit_) { do_write(); } } } else { LOG_ERROR(\"Error while writing to socket: {}\", ec); } if (exit_) { LOG_INFO(\"Closing socket\"); try { socket_.shutdown( RPCLIB_ASIO::ip::tcp::socket::shutdown_both); } catch (std::system_error &e) { (void)e; LOG_WARN(\"std::system_error during socket shutdown. \" \"Code: {}. Message: {}\", e.code(), e.what()); } socket_.close(); } }))"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "write(RPCLIB_MSGPACK::sbuffer &&data)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (write_queue_ .)",
    "insertText": "push_back(std::move(data))"
  },
  {
    "label": "shared_from_base()",
    "kind": "Method",
    "detail": "Function (} class rpc::client ; protected : template<Derived> std::shared_ptr<Derived>)",
    "insertText": "shared_from_base()"
  },
  {
    "label": "RPCLIB_CREATE_LOG_CHANNEL()",
    "kind": "Method",
    "detail": "Function (} protected : RPCLIB_ASIO::ip::tcp::socket socket_ ; RPCLIB_ASIO::strand write_strand_ ; std::atomic_bool exit_ { false } ; bool exited_ = false ; std::mutex m_exit_ ; std::condition_variable cv_exit_ ; private : std::deque<RPCLIB_MSGPACK::sbuffer> write_queue_ ;)",
    "insertText": "RPCLIB_CREATE_LOG_CHANNEL(async_writer)"
  }
]