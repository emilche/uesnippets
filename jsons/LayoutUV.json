[
  {
    "label": "TAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAtomic"
  },
  {
    "label": "FMeshChart",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshChart"
  },
  {
    "label": "FOverlappingCorners",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlappingCorners"
  },
  {
    "label": "FLayoutUV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLayoutUV"
  },
  {
    "label": "IMeshView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMeshView"
  },
  {
    "label": "FChartFinder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChartFinder"
  },
  {
    "label": "FChartPacker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChartPacker"
  },
  {
    "label": "IMeshView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Allocator2D . h \" # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" MeshUtilitiesCommon . h \" template<T> class TAtomic ; struct FMeshChart { uint32 FirstTri ; uint32 LastTri ; FVector2f MinUV ; FVector2f MaxUV ; float UVArea ; FVector2f UVScale ; FVector2f WorldScale ; float UVLengthSum ; float WorldLengthSum ; FVector2f PackingScaleU ; FVector2f PackingScaleV ; FVector2f PackingBias ; int32 Join [ 4 ] ; int32 Id ; } ; struct FOverlappingCorners ; class FLayoutUV { public : struct IMeshView { ~)",
    "insertText": "IMeshView()"
  },
  {
    "label": "GetNumIndices()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumIndices()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetPosition(uint32 Index)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetNormal(uint32 Index)"
  },
  {
    "label": "GetInputTexcoord()",
    "kind": "Method",
    "detail": "Function (FVector2f)",
    "insertText": "GetInputTexcoord(uint32 Index)"
  },
  {
    "label": "InitOutputTexcoords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOutputTexcoords(uint32 Num)"
  },
  {
    "label": "SetOutputTexcoord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputTexcoord(uint32 Index, const FVector2f& Value)"
  },
  {
    "label": "FLayoutUV()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FLayoutUV(IMeshView& InMeshView)"
  },
  {
    "label": "SetVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVersion(ELightmapUVVersion Version)"
  },
  {
    "label": "FindCharts()",
    "kind": "Method",
    "detail": "Function (LayoutVersion = Version ; } int32)",
    "insertText": "FindCharts(const FOverlappingCorners& OverlappingCorners)"
  },
  {
    "label": "FindBestPacking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindBestPacking(uint32 InTextureResolution)"
  },
  {
    "label": "CommitPackedUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackedUVs()"
  },
  {
    "label": "LogStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogStats()"
  },
  {
    "label": "ResetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStats()"
  }
]