[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Object . h \" # include \" CurveEditorSelection . h \" # include \" CurveEditor . h \" # include \" CurveEditorTypes . h \" # include \" CurveEditorFilterBase . generated . h \" class FCurveEditor ;)",
    "insertText": "UCLASS(BlueprintType, config=EditorSettings)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: void InitializeFilter(TSharedRef<FCurveEditor> InCurveEditor)"
  },
  {
    "label": "InitializeFilter_Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFilter_Impl(InCurveEditor)"
  },
  {
    "label": "CanApplyFilter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanApplyFilter(TSharedRef<FCurveEditor> InCurveEditor)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyFilter(TSharedRef<FCurveEditor> InCurveEditor, FCurveModelID InCurve, TMap<FCurveModelID, FKeyHandleSet>& OutKeysToSelect)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TSet<FCurveModelID> InCurves ; InCurves .)",
    "insertText": "Add(InCurve)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter(InCurveEditor, InCurves, OutKeysToSelect)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyFilter(TSharedRef<FCurveEditor> InCurveEditor, FCurveModelID InCurve, TArrayView<FKeyHandle> InKeyHandles, TArray<FKeyHandle>& OutKeysToSelect)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (HandleSet .)",
    "insertText": "Add(Handle, ECurvePointType::Key)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (} TMap<FCurveModelID,FKeyHandleSet> OutSelectionMap ;)",
    "insertText": "ApplyFilter(InCurveEditor, KeyMap, OutSelectionMap)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FKeyHandleSet& SelectedKeySet = OutSelectionMap .)",
    "insertText": "FindOrAdd(InCurve)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutKeysToSelect .)",
    "insertText": "Reserve(SelectedKeySet.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutKeysToSelect .)",
    "insertText": "Add(Handle)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyFilter(TSharedRef<FCurveEditor> InCurveEditor, const TSet<FCurveModelID>& InCurves, TMap<FCurveModelID, FKeyHandleSet>& OutKeysToSelect)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<FCurveModelID,FKeyHandleSet> KeysToOperateOn ;)",
    "insertText": "for(FCurveModelID CurveModelID : InCurves)"
  },
  {
    "label": "FindCurve()",
    "kind": "Method",
    "detail": "Function (FCurveModel* CurveModel = InCurveEditor ->)",
    "insertText": "FindCurve(CurveModelID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FKeyHandleSet& HandleSet = KeysToOperateOn .)",
    "insertText": "Add(CurveModelID)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (TArray<FKeyHandle> Handles ; CurveModel ->)",
    "insertText": "GetKeys(TNumericLimits<double>::Lowest(), TNumericLimits<double>::Max(), TNumericLimits<double>::Lowest(), TNumericLimits<double>::Max(), Handles)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ApplyFilter(InCurveEditor, KeysToOperateOn, OutKeysToSelect)"
  },
  {
    "label": "ApplyFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyFilter(TSharedRef<FCurveEditor> InCurveEditor, const TMap<FCurveModelID, FKeyHandleSet>& InKeysToOperateOn, TMap<FCurveModelID, FKeyHandleSet>& OutKeysToSelect)"
  },
  {
    "label": "ApplyFilter_Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilter_Impl(InCurveEditor, InKeysToOperateOn, OutKeysToSelect)"
  },
  {
    "label": "InitializeFilter_Impl()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "InitializeFilter_Impl(TSharedRef<FCurveEditor> InCurveEditor)"
  },
  {
    "label": "ApplyFilter_Impl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyFilter_Impl(TSharedRef<FCurveEditor> InCurveEditor, const TMap<FCurveModelID, FKeyHandleSet>& InKeysToOperateOn, TMap<FCurveModelID, FKeyHandleSet>& OutKeysToSelect)"
  },
  {
    "label": "CanApplyFilter_Impl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanApplyFilter_Impl(TSharedRef<FCurveEditor> InCurveEditor)"
  }
]