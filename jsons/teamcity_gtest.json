[
  {
    "label": "TeamcityGoogleTestEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TeamcityGoogleTestEventListener"
  },
  {
    "label": "TeamcityGoogleTestEventListener()",
    "kind": "Method",
    "detail": "Function (# ifndef H_TEAMCITY_GTEST # define H_TEAMCITY_GTEST # include<string> # include \" tests / gtest / include / gtest / gtest . h \" # include \" tests / gtest / teamcity / src / teamcity_messages . h \" namespace jetbrains { namespace teamcity { class TeamcityGoogleTestEventListener : public::testing::EmptyTestEventListener { public :)",
    "insertText": "TeamcityGoogleTestEventListener(const std::string& flowid)"
  },
  {
    "label": "TeamcityGoogleTestEventListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeamcityGoogleTestEventListener()"
  },
  {
    "label": "OnTestCaseStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestCaseStart(const ::testing::TestCase& test_case)"
  },
  {
    "label": "OnTestStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestStart(const ::testing::TestInfo& test_info)"
  },
  {
    "label": "OnTestEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestEnd(const ::testing::TestInfo& test_info)"
  },
  {
    "label": "OnTestCaseEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestCaseEnd(const ::testing::TestCase& test_case)"
  },
  {
    "label": "TeamcityGoogleTestEventListener()",
    "kind": "Method",
    "detail": "Function (private : TeamcityMessages messages ; std::string flowid ;)",
    "insertText": "TeamcityGoogleTestEventListener(const TeamcityGoogleTestEventListener&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const TeamcityGoogleTestEventListener&)"
  }
]