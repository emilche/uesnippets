[
  {
    "label": "UInteractiveGizmoManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInteractiveGizmoManager"
  },
  {
    "label": "IGizmoAxisSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGizmoAxisSource"
  },
  {
    "label": "IGizmoTransformSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGizmoTransformSource"
  },
  {
    "label": "IGizmoStateTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGizmoStateTarget"
  },
  {
    "label": "UGizmoConstantFrameAxisSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoConstantFrameAxisSource"
  },
  {
    "label": "UGizmoComponentAxisSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoComponentAxisSource"
  },
  {
    "label": "UGizmoTransformChangeStateTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoTransformChangeStateTarget"
  },
  {
    "label": "UGizmoViewContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoViewContext"
  },
  {
    "label": "FTransformGizmoTransformChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransformGizmoTransformChange"
  },
  {
    "label": "FTransformSubGizmoCommonParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformSubGizmoCommonParams"
  },
  {
    "label": "FTransformSubGizmoSharedState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformSubGizmoSharedState"
  },
  {
    "label": "ACombinedTransformGizmoActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACombinedTransformGizmoActor"
  },
  {
    "label": "FCombinedTransformGizmoActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCombinedTransformGizmoActorFactory"
  },
  {
    "label": "UCombinedTransformGizmoBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCombinedTransformGizmoBuilder"
  },
  {
    "label": "FToolContextOptionalToggle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolContextOptionalToggle"
  },
  {
    "label": "UCombinedTransformGizmo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCombinedTransformGizmo"
  },
  {
    "label": "FSubGizmoInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubGizmoInfo"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InteractiveGizmo . h \" # include \" InteractiveGizmoBuilder . h \" # include \" InteractiveToolObjects . h \" # include \" InteractiveToolChange . h \" # include \" BaseGizmos / GizmoActor . h \" # include \" BaseGizmos / TransformProxy . h \" # include \" CombinedTransformGizmo . generated . h \" class UInteractiveGizmoManager ; class IGizmoAxisSource ; class IGizmoTransformSource ; class IGizmoStateTarget ; class UGizmoConstantFrameAxisSource ; class UGizmoComponentAxisSource ; class UGizmoTransformChangeStateTarget ; class UGizmoViewContext ; class FTransformGizmoTransformChange ; namespace UE::GizmoUtil { struct FTransformSubGizmoCommonParams ; struct FTransformSubGizmoSharedState ; })",
    "insertText": "UCLASS(Transient, NotPlaceable, Hidden, NotBlueprintable, NotBlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API ACombinedTransformGizmoActor()"
  },
  {
    "label": "ReplaceSubGizmoComponent()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ReplaceSubGizmoComponent(ETransformGizmoSubElements Element, UPrimitiveComponent* NewComponent, const FTransform& SubGizmoToGizmo, UPrimitiveComponent** ReplacedComponentOut = nullptr)"
  },
  {
    "label": "ConstructDefault3AxisGizmo()",
    "kind": "Method",
    "detail": "Function (ACombinedTransformGizmoActor*)",
    "insertText": "ConstructDefault3AxisGizmo(UWorld* World, UGizmoViewContext* GizmoViewContext)"
  },
  {
    "label": "ConstructCustom3AxisGizmo()",
    "kind": "Method",
    "detail": "Function (ACombinedTransformGizmoActor*)",
    "insertText": "ConstructCustom3AxisGizmo(UWorld* World, UGizmoViewContext* GizmoViewContext, ETransformGizmoSubElements Elements)"
  },
  {
    "label": "FCombinedTransformGizmoActorFactory()",
    "kind": "Method",
    "detail": "Function (} ; class FCombinedTransformGizmoActorFactory { public :)",
    "insertText": "FCombinedTransformGizmoActorFactory(UGizmoViewContext* GizmoViewContextIn) : GizmoViewContext(GizmoViewContextIn)"
  },
  {
    "label": "CreateNewGizmoActor()",
    "kind": "Method",
    "detail": "Function (} ETransformGizmoSubElements EnableElements = ETransformGizmoSubElements::TranslateAllAxes | ETransformGizmoSubElements::TranslateAllPlanes | ETransformGizmoSubElements::RotateAllAxes | ETransformGizmoSubElements::ScaleAllAxes | ETransformGizmoSubElements::ScaleAllPlanes | ETransformGizmoSubElements::ScaleUniform ; ACombinedTransformGizmoActor*)",
    "insertText": "CreateNewGizmoActor(UWorld* World)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (protected : UGizmoViewContext* GizmoViewContext = nullptr ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (FString PlanePositionBuilderIdentifier ; FString AxisAngleBuilderIdentifier ; TSharedPtr<FCombinedTransformGizmoActorFactory> GizmoActorBuilder ; TFunction<)",
    "insertText": "void(UPrimitiveComponent*, bool)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(UPrimitiveComponent*, EToolContextCoordinateSystem)"
  },
  {
    "label": "BuildGizmo()",
    "kind": "Method",
    "detail": "Function (UInteractiveGizmo*)",
    "insertText": "BuildGizmo(const FToolBuilderState& SceneState)"
  },
  {
    "label": "FToolContextOptionalToggle()",
    "kind": "Method",
    "detail": "Function (} ; struct FToolContextOptionalToggle { bool bEnabledDirectly = false ; bool bEnabledInContext = false ; bool bInheritFromContext = false ;)",
    "insertText": "FToolContextOptionalToggle()"
  },
  {
    "label": "FToolContextOptionalToggle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FToolContextOptionalToggle(bool bEnabled, bool bSetInheritFromContext)"
  },
  {
    "label": "UpdateContextValue()",
    "kind": "Method",
    "detail": "Function (bEnabledDirectly = bEnabled ; bInheritFromContext = bSetInheritFromContext ; } void)",
    "insertText": "UpdateContextValue(bool bNewValue)"
  },
  {
    "label": "InheritFromContext()",
    "kind": "Method",
    "detail": "Function (bEnabledInContext = bNewValue ; } bool)",
    "insertText": "InheritFromContext()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API virtual void SetWorld(UWorld* World)"
  },
  {
    "label": "SetGizmoActorBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGizmoActorBuilder(TSharedPtr<FCombinedTransformGizmoActorFactory> Builder)"
  },
  {
    "label": "SetSubGizmoBuilderIdentifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubGizmoBuilderIdentifiers(FString AxisPositionBuilderIdentifier, FString PlanePositionBuilderIdentifier, FString AxisAngleBuilderIdentifier)"
  },
  {
    "label": "SetUpdateHoverFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdateHoverFunction(TFunction<void(UPrimitiveComponent*, bool)> HoverFunction)"
  },
  {
    "label": "SetUpdateCoordSystemFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdateCoordSystemFunction(TFunction<void(UPrimitiveComponent*, EToolContextCoordinateSystem)> CoordSysFunction)"
  },
  {
    "label": "SetSubGizmoComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSubGizmoComponent(ETransformGizmoSubElements Element, UPrimitiveComponent* Component, const FTransform& SubGizmoToGizmo)"
  },
  {
    "label": "SetWorldAlignmentFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldAlignmentFunctions(TUniqueFunction<bool()>&& ShouldAlignDestination, TUniqueFunction<bool(const FRay&, FVector&)>&& DestinationAlignmentRayCaster)"
  },
  {
    "label": "SetIsNonUniformScaleAllowedFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsNonUniformScaleAllowedFunction(TUniqueFunction<bool()>&& IsNonUniformScaleAllowed)"
  },
  {
    "label": "IsNonUniformScaleAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonUniformScaleAllowed()"
  },
  {
    "label": "SetDisallowNegativeScaling()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisallowNegativeScaling(bool bDisallow)"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Setup()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "SetActiveTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveTarget(UTransformProxy* Target, IToolContextTransactionProvider* TransactionProvider = nullptr)"
  },
  {
    "label": "ClearActiveTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActiveTarget()"
  },
  {
    "label": "GetGizmoActor()",
    "kind": "Method",
    "detail": "Function (ACombinedTransformGizmoActor*)",
    "insertText": "GetGizmoActor()"
  },
  {
    "label": "ReinitializeGizmoTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitializeGizmoTransform(const FTransform& NewTransform, bool bKeepGizmoUnscaled = true)"
  },
  {
    "label": "SetNewGizmoTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewGizmoTransform(const FTransform& NewTransform, bool bKeepGizmoUnscaled = true)"
  },
  {
    "label": "BeginTransformEditSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTransformEditSequence()"
  },
  {
    "label": "EndTransformEditSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransformEditSequence()"
  },
  {
    "label": "UpdateTransformDuringEditSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransformDuringEditSequence(const FTransform& NewTransform, bool bKeepGizmoUnscaled = true)"
  },
  {
    "label": "SetNewChildScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewChildScale(const FVector& NewChildScale)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(bool bVisible)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "FToolContextOptionalToggle()",
    "kind": "Method",
    "detail": "Function (FToolContextOptionalToggle RelativeTranslationSnapping =)",
    "insertText": "FToolContextOptionalToggle(true, true)"
  },
  {
    "label": "GetGizmoElements()",
    "kind": "Method",
    "detail": "Function (ETransformGizmoSubElements)",
    "insertText": "GetGizmoElements()"
  },
  {
    "label": "SetDisplaySpaceTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplaySpaceTransform(TOptional<FTransform> TransformIn)"
  },
  {
    "label": "GetDisplaySpaceTransform()",
    "kind": "Method",
    "detail": "Function (const TOptional<FTransform>&)",
    "insertText": "GetDisplaySpaceTransform()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnDisplaySpaceTransformChanged OnDisplaySpaceTransformChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSetActiveTarget, UCombinedTransformGizmo*, UTransformProxy*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnSetActiveTarget OnSetActiveTarget ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnClearActiveTarget, UCombinedTransformGizmo*, UTransformProxy*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnClearActiveTarget OnAboutToClearActiveTarget ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnVisibilityChanged, UCombinedTransformGizmo*, bool)"
  },
  {
    "label": "UpdateCameraAxisSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCameraAxisSource()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TUniqueFunction<)",
    "insertText": "bool()> ShouldAlignDestination = []()"
  },
  {
    "label": "AddPlaneTranslationGizmo()",
    "kind": "Method",
    "detail": "Function (UInteractiveGizmo*)",
    "insertText": "AddPlaneTranslationGizmo(FTransformSubGizmoCommonParams& Params, FTransformSubGizmoSharedState& SharedState)"
  },
  {
    "label": "AddAxisRotationGizmo()",
    "kind": "Method",
    "detail": "Function (UInteractiveGizmo*)",
    "insertText": "AddAxisRotationGizmo(FTransformSubGizmoCommonParams& Params, FTransformSubGizmoSharedState& SharedState)"
  },
  {
    "label": "AddAxisScaleGizmo()",
    "kind": "Method",
    "detail": "Function (UInteractiveGizmo*)",
    "insertText": "AddAxisScaleGizmo(FTransformSubGizmoCommonParams& Params, FTransformSubGizmoSharedState& SharedState)"
  },
  {
    "label": "AddPlaneScaleGizmo()",
    "kind": "Method",
    "detail": "Function (UInteractiveGizmo*)",
    "insertText": "AddPlaneScaleGizmo(FTransformSubGizmoCommonParams& Params, FTransformSubGizmoSharedState& SharedState)"
  },
  {
    "label": "AddUniformScaleGizmo()",
    "kind": "Method",
    "detail": "Function (UInteractiveGizmo*)",
    "insertText": "AddUniformScaleGizmo(FTransformSubGizmoCommonParams& Params, FTransformSubGizmoSharedState& SharedState)"
  },
  {
    "label": "PositionSnapFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PositionSnapFunction(const FVector& WorldPosition, FVector& SnappedPositionOut)"
  },
  {
    "label": "PositionAxisDeltaSnapFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PositionAxisDeltaSnapFunction(double AxisDelta, double& SnappedDeltaOut, int AxisIndex)"
  },
  {
    "label": "RotationSnapFunction()",
    "kind": "Method",
    "detail": "Function (FQuat)",
    "insertText": "RotationSnapFunction(const FQuat& DeltaRotation)"
  },
  {
    "label": "RotationAxisAngleSnapFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RotationAxisAngleSnapFunction(double AxisAngleDelta, double& SnappedAxisAngleDeltaOut, int AxisIndex)"
  },
  {
    "label": "ScaleSnapFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScaleSnapFunction(double DeltaScale)"
  },
  {
    "label": "ScaleAxisDeltaSnapFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScaleAxisDeltaSnapFunction(double ScaleAxisDelta, double & SnappedAxisScaleDeltaOut)"
  }
]