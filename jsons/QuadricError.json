[
  {
    "label": "TQuadricError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TQuadricError"
  },
  {
    "label": "TVolPresQuadricError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVolPresQuadricError"
  },
  {
    "label": "FPlaneData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlaneData"
  },
  {
    "label": "TAttrBasedQuadricError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttrBasedQuadricError"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" MatrixTypes . h \" # include \" Math / UnrealMathUtility . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TQuadricError { typedef RealType ScalarType ; RealType Axx,Axy,Axz,Ayy,Ayz,Azz ; RealType bx,by,bz ; RealType c ; TQuadricError)",
    "insertText": "Zero()"
  },
  {
    "label": "TQuadricError()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TQuadricError()"
  },
  {
    "label": "TQuadricError()",
    "kind": "Method",
    "detail": "Function (Axx = Axy = Axz = Ayy = Ayz = Azz = bx = by = bz = c = 0 ; })",
    "insertText": "TQuadricError(const TVector<RealType>& Normal, const TVector<RealType>& Point)"
  },
  {
    "label": "MultiplyA()",
    "kind": "Method",
    "detail": "Function (Axx = Normal . X* Normal . X ; Axy = Normal . X* Normal . Y ; Axz = Normal . X* Normal . Z ; Ayy = Normal . Y* Normal . Y ; Ayz = Normal . Y* Normal . Z ; Azz = Normal . Z* Normal . Z ; bx = by = bz = c = 0 ; TVector<RealType> v =)",
    "insertText": "MultiplyA(Point)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (bx = - v . X ; by = - v . Y ; bz = - v . Z ; c = Point .)",
    "insertText": "Dot(v)"
  },
  {
    "label": "TQuadricError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TQuadricError(const TQuadricError& a, const TQuadricError& b)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Axx = a . Axx + b . Axx ; Axy = a . Axy + b . Axy ; Axz = a . Axz + b . Axz ; Ayy = a . Ayy + b . Ayy ; Ayz = a . Ayz + b . Ayz ; Azz = a . Azz + b . Azz ; bx = a . bx + b . bx ; by = a . by + b . by ; bz = a . bz + b . bz ; c = a . c + b . c ; } void)",
    "insertText": "Add(RealType w, const TQuadricError& b)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Axx + = w* b . Axx ; Axy + = w* b . Axy ; Axz + = w* b . Axz ; Ayy + = w* b . Ayy ; Ayz + = w* b . Ayz ; Azz + = w* b . Azz ; bx + = w* b . bx ; by + = w* b . by ; bz + = w* b . bz ; c + = w* b . c ; } void)",
    "insertText": "Add(const TQuadricError& b)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (Axx + = b . Axx ; Axy + = b . Axy ; Axz + = b . Axz ; Ayy + = b . Ayy ; Ayz + = b . Ayz ; Azz + = b . Azz ; bx + = b . bx ; by + = b . by ; bz + = b . bz ; c + = b . c ; } void)",
    "insertText": "Subtract(const TQuadricError& b)"
  },
  {
    "label": "AddSeamQuadric()",
    "kind": "Method",
    "detail": "Function (Axx - = b . Axx ; Axy - = b . Axy ; Axz - = b . Axz ; Ayy - = b . Ayy ; Ayz - = b . Ayz ; Azz - = b . Azz ; bx - = b . bx ; by - = b . by ; bz - = b . bz ; c - = b . c ; } void)",
    "insertText": "AddSeamQuadric(const TQuadricError& b)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(b)"
  },
  {
    "label": "SubtractSeamQuadric()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubtractSeamQuadric(const TQuadricError& b)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subtract(b)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Scale(RealType w)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (Axx* = w ; Axy* = w ; Axz* = w ; Ayy* = w ; Ayz* = w ; Azz* = w ; bx* = w ; by* = w ; bz* = w ; c* = w ; } RealType)",
    "insertText": "Evaluate(const UE::Math::TVector<RealType>& pt)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (RealType x = Axx* pt . X + Axy* pt . Y + Axz* pt . Z ; RealType y = Axy* pt . X + Ayy* pt . Y + Ayz* pt . Z ; RealType z = Axz* pt . X + Ayz* pt . Y + Azz* pt . Z ;)",
    "insertText": "return(pt.X * x + pt.Y * y + pt.Z * z) + 2.0 * (pt.X * bx + pt.Y * by + pt.Z * bz)"
  },
  {
    "label": "MultiplyA()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "MultiplyA(const UE::Math::TVector<RealType>& pt)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType x = Axx* pt . X + Axy* pt . Y + Axz* pt . Z ; RealType y = Axy* pt . X + Ayy* pt . Y + Ayz* pt . Z ; RealType z = Axz* pt . X + Ayz* pt . Y + Azz* pt . Z ; return TVector<)",
    "insertText": "RealType(x, y, z)"
  },
  {
    "label": "SolveAxEqualsb()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SolveAxEqualsb(UE::Math::TVector<RealType>& OutResult, const RealType bvecx, const RealType bvecy, const RealType bvecz, const RealType minThresh = 1000.0*TMathUtil<RealType>::Epsilon)"
  },
  {
    "label": "det()",
    "kind": "Method",
    "detail": "Function (RealType a11 = Azz* Ayy - Ayz* Ayz ; RealType a12 = Axz* Ayz - Azz* Axy ; RealType a13 = Axy* Ayz - Axz* Ayy ; RealType a22 = Azz* Axx - Axz* Axz ; RealType a23 = Axy* Axz - Axx* Ayz ; RealType a33 = Axx* Ayy - Axy* Axy ; RealType)",
    "insertText": "det(Axx * a11) + (Axy * a12) + (Axz * a13)"
  },
  {
    "label": "Det()",
    "kind": "Method",
    "detail": "Function (bool Result = false ; InvSM [ 0 ] = SM [ 5 ]* SM [ 3 ] - SM [ 4 ]* SM [ 4 ] ; InvSM [ 1 ] = SM [ 2 ]* SM [ 4 ] - SM [ 5 ]* SM [ 1 ] ; InvSM [ 2 ] = SM [ 1 ]* SM [ 4 ] - SM [ 2 ]* SM [ 3 ] ; InvSM [ 3 ] = SM [ 5 ]* SM [ 0 ] - SM [ 2 ]* SM [ 2 ] ; InvSM [ 4 ] = SM [ 1 ]* SM [ 2 ] - SM [ 0 ]* SM [ 4 ] ; InvSM [ 5 ] = SM [ 0 ]* SM [ 3 ] - SM [ 1 ]* SM [ 1 ] ; RealType)",
    "insertText": "Det(SM[0] * InvSM[0]) + (SM[1] * InvSM[1]) + (SM[2] * InvSM[2])"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType InvDet =)",
    "insertText": "RealType(1)"
  },
  {
    "label": "MultiplySymmetricMatrix()",
    "kind": "Method",
    "detail": "Function (InvSM [ 0 ]* = InvDet ; InvSM [ 1 ]* = InvDet ; InvSM [ 2 ]* = InvDet ; InvSM [ 3 ]* = InvDet ; InvSM [ 4 ]* = InvDet ; InvSM [ 5 ]* = InvDet ; Result = true ; } return Result ; } TVector<RealType>)",
    "insertText": "MultiplySymmetricMatrix(const RealType SM[6], const RealType vec[3])"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType a = SM [ 0 ]* vec [ 0 ] + SM [ 1 ]* vec [ 1 ] + SM [ 2 ]* vec [ 2 ] ; RealType b = SM [ 1 ]* vec [ 0 ] + SM [ 3 ]* vec [ 1 ] + SM [ 4 ]* vec [ 2 ] ; RealType c = SM [ 2 ]* vec [ 0 ] + SM [ 4 ]* vec [ 1 ] + SM [ 5 ]* vec [ 2 ] ; return TVector<)",
    "insertText": "RealType(a, b, c)"
  },
  {
    "label": "MultiplySymmetricMatrix()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "MultiplySymmetricMatrix(const RealType SM[6], const UE::Math::TVector<RealType>& vec)"
  },
  {
    "label": "MultiplySymmetricMatrix()",
    "kind": "Method",
    "detail": "Function (RealType vectmp [ 3 ] = { vec . X,vec . Y,vec . Z } ; return)",
    "insertText": "MultiplySymmetricMatrix(SM, vectmp)"
  },
  {
    "label": "OptimalPoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OptimalPoint(UE::Math::TVector<RealType>& OutResult, RealType minThresh = 1000.0*TMathUtil<RealType>::Epsilon)"
  },
  {
    "label": "FPlaneData()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TQuadricError<float> FQuadricErrorf ; typedef TQuadricError<double> FQuadricErrord ; template<RealType> class TVolPresQuadricError : public TQuadricError<RealType> { public : typedef TQuadricError<RealType> BaseStruct ; struct FPlaneData {)",
    "insertText": "FPlaneData(const TVector<RealType>& Normal, const TVector<RealType>& Point)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (N = Normal ; Dist = - Normal .)",
    "insertText": "Dot(Point)"
  },
  {
    "label": "FPlaneData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPlaneData(RealType w, const FPlaneData& other)"
  },
  {
    "label": "FPlaneData()",
    "kind": "Method",
    "detail": "Function (N = w* other . N ; Dist = w* other . Dist ; })",
    "insertText": "FPlaneData(const FPlaneData& other)"
  },
  {
    "label": "FPlaneData()",
    "kind": "Method",
    "detail": "Function (N = other . N ; Dist = other . Dist ; })",
    "insertText": "FPlaneData()"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Dist =)",
    "insertText": "RealType(0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FPlaneData& other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (N + = other . N ; Dist + = other . Dist ; } void)",
    "insertText": "Add(RealType w, const FPlaneData& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (N + = w* other . N ; Dist + = w* other . Dist ; } FPlaneData&)",
    "insertText": "operator(const FPlaneData& other)"
  },
  {
    "label": "TVolPresQuadricError()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TVolPresQuadricError() : BaseStruct()"
  },
  {
    "label": "TVolPresQuadricError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TVolPresQuadricError(const TVector<RealType>& Normal, const TVector<RealType>& Point) : BaseStruct(Normal, Point) , PlaneData(Normal, Point)"
  },
  {
    "label": "TVolPresQuadricError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TVolPresQuadricError(const TVolPresQuadricError& a, const TVolPresQuadricError& b) : BaseStruct(a, b) , PlaneData(a.PlaneData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PlaneData .)",
    "insertText": "Add(b.PlaneData)"
  },
  {
    "label": "TVolPresQuadricError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TVolPresQuadricError(const TVolPresQuadricError& a, const TVolPresQuadricError& b, const FPlaneData& DuplicatePlaneData) : BaseStruct(a, b) , PlaneData(a.PlaneData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PlaneData .)",
    "insertText": "Add(-1., DuplicatePlaneData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(RealType w, const TVolPresQuadricError& b)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(w, b)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PlaneData .)",
    "insertText": "Add(w, b.PlaneData)"
  },
  {
    "label": "OptimalPoint()",
    "kind": "Method",
    "detail": "Function (bool bValid =)",
    "insertText": "OptimalPoint(OutResult, minThresh)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealType Tol = minThresh ; TVector<RealType> Ainv_g ;)",
    "insertText": "if(BaseStruct::SolveAxEqualsb(Ainv_g, gvol.N.X, gvol.N.Y, gvol.N.Z, Tol))"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType gt_Ainv_g = gvol . N .)",
    "insertText": "Dot(Ainv_g)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType gt_unopt = gvol . N .)",
    "insertText": "Dot(OutResult)"
  },
  {
    "label": "lambda()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "lambda(gvol.Dist + gt_unopt)"
  },
  {
    "label": "BasisMatrix()",
    "kind": "Method",
    "detail": "Function (const TMatrix3<RealType>)",
    "insertText": "BasisMatrix(P2-P0, P1-P0, NFace, true)"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (const double det = BasisMatrix .)",
    "insertText": "Determinant()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (const FMatrix3d CoBasisMatrix = BasisMatrix .)",
    "insertText": "Inverse()"
  },
  {
    "label": "FVector3d()",
    "kind": "Method",
    "detail": "Function (const FVector3d ScaledAttr = AttrWeight*)",
    "insertText": "FVector3d(N0[i], N1[i], N2[i])"
  },
  {
    "label": "DataVec()",
    "kind": "Method",
    "detail": "Function (const FVector3d)",
    "insertText": "DataVec(ScaledAttr[2] - ScaledAttr[0], ScaledAttr[1] - ScaledAttr[0], 0.)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (grad [ i ] = CoBasisMatrix* DataVec ; d [ i ] = ScaledAttr [ 0 ] - P0 .)",
    "insertText": "Dot(grad[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (BaseStruct::Axx + = grad [ i ] . X* grad [ i ] . X ; BaseStruct::Axy + = grad [ i ] . X* grad [ i ] . Y ; BaseStruct::Axz + = grad [ i ] . X* grad [ i ] . Z ; BaseStruct::Ayy + = grad [ i ] . Y* grad [ i ] . Y ; BaseStruct::Ayz + = grad [ i ] . Y* grad [ i ] . Z ; BaseStruct::Azz + = grad [ i ] . Z* grad [ i ] . Z ; BaseStruct::bx + = d [ i ]* grad [ i ] . X ; BaseStruct::by + = d [ i ]* grad [ i ] . Y ; BaseStruct::bz + = d [ i ]* grad [ i ] . Z ; BaseStruct::c + = d [ i ]* d [ i ] ; } } else {)",
    "insertText": "for(int i = 0; i < 3; ++i)"
  },
  {
    "label": "AttrWeight()",
    "kind": "Method",
    "detail": "Function (d [ i ] =)",
    "insertText": "AttrWeight(N0[i] + N1[i] + N2[i])"
  },
  {
    "label": "TAttrBasedQuadricError()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "TAttrBasedQuadricError() :BaseClass(), a(0.), attrweight(1.)"
  },
  {
    "label": "TAttrBasedQuadricError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TAttrBasedQuadricError(const TAttrBasedQuadricError& Aother, const TAttrBasedQuadricError& Bother) :BaseClass(Aother, Bother)"
  },
  {
    "label": "attrweight()",
    "kind": "Method",
    "detail": "Function (a = Aother . a + Bother . a ;)",
    "insertText": "attrweight(Aother.attrweight + Bother.attrweight)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(RealType w, const TAttrBasedQuadricError& other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(w, other)"
  },
  {
    "label": "OptimalPoint()",
    "kind": "Method",
    "detail": "Function (a + = w ; attrweight = other . attrweight ; grad [ 0 ] + = w* other . grad [ 0 ] ; grad [ 1 ] + = w* other . grad [ 1 ] ; grad [ 2 ] + = w* other . grad [ 2 ] ; d [ 0 ] + = w* other . d [ 0 ] ; d [ 1 ] + = w* other . d [ 1 ] ; d [ 2 ] + = w* other . d [ 2 ] ; } bool)",
    "insertText": "OptimalPoint(UE::Math::TVector<RealType>& OptPoint, RealType minThresh = 1000.0*TMathUtil<RealType>::Epsilon)"
  },
  {
    "label": "InvA()",
    "kind": "Method",
    "detail": "Function (SM [ 0 ] - = grad [ i ] . X* grad [ i ] . X ; SM [ 1 ] - = grad [ i ] . X* grad [ i ] . Y ; SM [ 2 ] - = grad [ i ] . X* grad [ i ] . Z ; SM [ 3 ] - = grad [ i ] . Y* grad [ i ] . Y ; SM [ 4 ] - = grad [ i ] . Y* grad [ i ] . Z ; SM [ 5 ] - = grad [ i ] . Z* grad [ i ] . Z ; } RealType)",
    "insertText": "InvA(FMath::Abs(a) > 1.e-7) ? RealType(1)"
  },
  {
    "label": "InvertSymmetricMatrix()",
    "kind": "Method",
    "detail": "Function (SM [ 0 ]* = InvA ; SM [ 1 ]* = InvA ; SM [ 2 ]* = InvA ; SM [ 3 ]* = InvA ; SM [ 4 ]* = InvA ; SM [ 5 ]* = InvA ; SM [ 0 ] + = BaseStruct::Axx ; SM [ 1 ] + = BaseStruct::Axy ; SM [ 2 ] + = BaseStruct::Axz ; SM [ 3 ] + = BaseStruct::Ayy ; SM [ 4 ] + = BaseStruct::Ayz ; SM [ 5 ] + = BaseStruct::Azz ; RealType InvSM [ 6 ] ; bool bValid =)",
    "insertText": "InvertSymmetricMatrix(SM, InvSM, minThresh)"
  },
  {
    "label": "InvA()",
    "kind": "Method",
    "detail": "Function (RealType b [ 3 ] = { - BaseStruct::bx,- BaseStruct::by,- BaseStruct::bz } ; b [ 0 ] + =)",
    "insertText": "InvA(grad[0].X * d[0] + grad[1].X * d[1] + grad[2].X * d[2])"
  },
  {
    "label": "InvA()",
    "kind": "Method",
    "detail": "Function (b [ 1 ] + =)",
    "insertText": "InvA(grad[0].Y * d[0] + grad[1].Y * d[1] + grad[2].Y * d[2])"
  },
  {
    "label": "InvA()",
    "kind": "Method",
    "detail": "Function (b [ 2 ] + =)",
    "insertText": "InvA(grad[0].Z * d[0] + grad[1].Z * d[1] + grad[2].Z * d[2])"
  },
  {
    "label": "gvol()",
    "kind": "Method",
    "detail": "Function (BaseClass::FPlaneData)",
    "insertText": "gvol(1. / 3., BaseClass::PlaneData)"
  },
  {
    "label": "MultiplySymmetricMatrix()",
    "kind": "Method",
    "detail": "Function (OptPoint =)",
    "insertText": "MultiplySymmetricMatrix(InvSM, b)"
  },
  {
    "label": "MultiplySymmetricMatrix()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> InvSMgvol =)",
    "insertText": "MultiplySymmetricMatrix(InvSM, gvol.N)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType gvolDotInvSMgvol = gvol . N .)",
    "insertText": "Dot(InvSMgvol)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType gvolDotuncopt = gvol . N .)",
    "insertText": "Dot(OptPoint)"
  },
  {
    "label": "lambda()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "lambda(gvol.Dist + gvolDotuncopt)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (const TVector<RealType> attr = attrweight* InAttr ; RealType ptAp = point .)",
    "insertText": "Dot(BaseStruct::MultiplyA(point))"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType attrDotattr = attr .)",
    "insertText": "Dot(attr)"
  },
  {
    "label": "Gradattr()",
    "kind": "Method",
    "detail": "Function (TVector<RealType>)",
    "insertText": "Gradattr(grad[0].X * attr[0] + grad[1].X * attr[1] + grad[2].X * attr[2], grad[0].Y * attr[0] + grad[1].Y * attr[1] + grad[2].Y * attr[2], grad[0].Z * attr[0] + grad[1].Z * attr[1] + grad[2].Z * attr[2])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (RealType ptGradattr = point .)",
    "insertText": "Dot(Gradattr)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType vtSv = ptAp + a* attrDotattr -)",
    "insertText": "RealType(2)"
  },
  {
    "label": "bz()",
    "kind": "Method",
    "detail": "Function (RealType vtb = point . X* BaseStruct::bx + point . Y* BaseStruct::by + point . Z*)",
    "insertText": "bz(d[0] * attr[0] + d[1] * attr[1] + d[2] * attr[2])"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (attr . X = grad [ 0 ] .)",
    "insertText": "Dot(point)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} attr* = 1 . / attrweight ; } RealType)",
    "insertText": "Evaluate(const TVector<RealType>& point)"
  },
  {
    "label": "ComputeAttributes()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> attr ;)",
    "insertText": "ComputeAttributes(point, attr)"
  },
  {
    "label": "CreateSeamQuadric()",
    "kind": "Method",
    "detail": "Function (} public : RealType a ; RealType attrweight = 1 . ; TVector<RealType> grad [ 3 ] ; RealType d [ 3 ] ; } ; typedef TAttrBasedQuadricError<float> FAttrBasedQuadricErrorf ; typedef TAttrBasedQuadricError<double> FAttrBasedQuadricErrord ; template<RealType> TQuadricError<RealType>)",
    "insertText": "CreateSeamQuadric(const TVector<RealType>& p0, const TVector<RealType>& p1, const TVector<RealType>& AdjFaceNormal)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (RealType LenghtSqrd = AdjFaceNormal .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealType error = 1 0 0 0 0 0 . 0* TMathUtil<RealType>::Epsilon ;)",
    "insertText": "if(!FMath::IsNearlyEqual(LenghtSqrd, (RealType)1., error))"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} const RealType EdgeLength =)",
    "insertText": "Sqrt(EdgeLengthSqrd)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (Edge* = 1 . / EdgeLength ; const RealType Weight = EdgeLength ; TVector<RealType> ConstraintNormal = Edge .)",
    "insertText": "Cross(AdjFaceNormal)"
  },
  {
    "label": "SeamQuadric()",
    "kind": "Method",
    "detail": "Function (TQuadricError<RealType>)",
    "insertText": "SeamQuadric(ConstraintNormal, p0)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (SeamQuadric .)",
    "insertText": "Scale(EdgeLength)"
  }
]