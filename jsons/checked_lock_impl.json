[
  {
    "label": "ConditionVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConditionVariable"
  },
  {
    "label": "UniversalPredecessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UniversalPredecessor"
  },
  {
    "label": "UniversalSuccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UniversalSuccessor"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CheckedLockImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_COMMON_CHECKED_LOCK_IMPL_H_ # define BASE_TASK_COMMON_CHECKED_LOCK_IMPL_H_ # include<memory> # include \" base / base_export . h \" # include \" base / synchronization / lock . h \" namespace base { class ConditionVariable ; namespace internal { struct UniversalPredecessor { } ; struct UniversalSuccessor { } ; class BASE_EXPORT CheckedLockImpl { public :)",
    "insertText": "CheckedLockImpl()"
  },
  {
    "label": "CheckedLockImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckedLockImpl(const CheckedLockImpl* predecessor)"
  },
  {
    "label": "CheckedLockImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckedLockImpl(UniversalPredecessor)"
  },
  {
    "label": "CheckedLockImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckedLockImpl(UniversalSuccessor)"
  },
  {
    "label": "AssertNoLockHeldOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertNoLockHeldOnCurrentThread()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Acquire() EXCLUSIVE_LOCK_FUNCTION(lock_)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release() UNLOCK_FUNCTION(lock_)"
  },
  {
    "label": "AssertAcquired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertAcquired()"
  },
  {
    "label": "CreateConditionVariable()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ConditionVariable>)",
    "insertText": "CreateConditionVariable()"
  },
  {
    "label": "is_universal_predecessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_universal_predecessor()"
  }
]