[
  {
    "label": "TArrayAttributeHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayAttributeHelper"
  },
  {
    "label": "TMapAttributeHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMapAttributeHelper"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Types / AttributeStorage . h \" # include \" UObject / Class . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" namespace UE { namespace Interchange { template<ItemType> class TArrayAttributeHelper {)",
    "insertText": "static_assert(TAttributeTypeTraits<ItemType>::GetType() != EAttributeTypes::None, \"The value type must be supported by the attribute storage\")"
  },
  {
    "label": "TArrayAttributeHelper()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "TArrayAttributeHelper()"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"Interchange\"))"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Attributes = nullptr ; KeyCount = NAME_None ; } void)",
    "insertText": "Initialize(const TSharedPtr<FAttributeStorage, ESPMode::ThreadSafe>& InAttributes, const FString& BaseKeyName)"
  },
  {
    "label": "IndexKey()",
    "kind": "Method",
    "detail": "Function (Attributes = InAttributes ; KeyCount = BaseKeyName ; } const FString&)",
    "insertText": "IndexKey()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString IndexKeyString =)",
    "insertText": "TEXT(\"_NameIndex_\")"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FAttributeStorage,ESPMode::ThreadSafe> AttributePtr = Attributes .)",
    "insertText": "Pin()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (FAttributeStorage::TAttributeHandle<int32> Handle = AttributePtr -> GetAttributeHandle<)",
    "insertText": "int32(GetKeyCount())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Handle .)",
    "insertText": "Get(ItemCount)"
  },
  {
    "label": "GetItem()",
    "kind": "Method",
    "detail": "Function (} } return ItemCount ; } void)",
    "insertText": "GetItem(const int32 Index, ItemType& OutItem)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (FAttributeStorage::TAttributeHandle<ItemType> HandleItem = AttributePtr -> GetAttributeHandle<)",
    "insertText": "ItemType(DepIndexKey)"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetItems(TArray<ItemType>& OutItems)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutItems .)",
    "insertText": "Empty()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutItems .)",
    "insertText": "Reset(ItemCount)"
  },
  {
    "label": "GetIndexKey()",
    "kind": "Method",
    "detail": "Function (FAttributeKey DepIndexKey =)",
    "insertText": "GetIndexKey(NameIndex)"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (continue ; } ItemType& OutItem = OutItems .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (HandleItem .)",
    "insertText": "Get(OutItem)"
  },
  {
    "label": "AddItem()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "AddItem(const ItemType& Item)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 DependencyCount = 0 ; EAttributeStorageResult Result = AttributePtr -> RegisterAttribute<)",
    "insertText": "int32(GetKeyCount(), DependencyCount)"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAttributeStorageErrors(Result, TEXT(\"TArrayAttributeHelper.AddName\"), GetKeyCount())"
  },
  {
    "label": "GetIndexKey()",
    "kind": "Method",
    "detail": "Function (FAttributeKey ItemIndexKey =)",
    "insertText": "GetIndexKey(ItemIndex)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (EAttributeStorageResult AddItemResult = AttributePtr -> RegisterAttribute<)",
    "insertText": "ItemType(ItemIndexKey, Item)"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAttributeStorageErrors(AddItemResult, TEXT(\"TArrayAttributeHelper.AddName\"), ItemIndexKey)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 DecrementKey = 0 ;)",
    "insertText": "for(int32 ItemIndex = 0; ItemIndex < ItemCount; ++ItemIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (continue ; } ItemType Item ; HandleItem .)",
    "insertText": "Get(Item)"
  },
  {
    "label": "UnregisterAttribute()",
    "kind": "Method",
    "detail": "Function (AttributePtr ->)",
    "insertText": "UnregisterAttribute(DepIndexKey)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Handle .)",
    "insertText": "Set(ItemCount - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DecrementKey + + ; } else)",
    "insertText": "if(DecrementKey > 0)"
  },
  {
    "label": "GetIndexKey()",
    "kind": "Method",
    "detail": "Function (FAttributeKey NewDepIndexKey =)",
    "insertText": "GetIndexKey(ItemIndex - DecrementKey)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (EAttributeStorageResult RegisterResult = AttributePtr -> RegisterAttribute<)",
    "insertText": "ItemType(NewDepIndexKey, Item)"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogAttributeStorageErrors(RegisterResult, TEXT(\"TArrayAttributeHelper.RemoveItem\"), NewDepIndexKey)"
  },
  {
    "label": "LogAttributeStorageErrors()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "LogAttributeStorageErrors(UnregisterResult, TEXT(\"TArrayAttributeHelper.RemoveItem\"), DepIndexKey)"
  },
  {
    "label": "RemoveAllItems()",
    "kind": "Method",
    "detail": "Function (} continue ; } } return true ; } bool)",
    "insertText": "RemoveAllItems()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ItemCount = 0 ; HandleCount .)",
    "insertText": "Set(ItemCount)"
  },
  {
    "label": "GetKeyCount()",
    "kind": "Method",
    "detail": "Function (FString DepIndexKeyString =)",
    "insertText": "GetKeyCount().ToString() + IndexKey() + FString::FromInt(Index)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyType,ValueType> class TMapAttributeHelper {)",
    "insertText": "static_assert(TAttributeTypeTraits<KeyType>::GetType() != EAttributeTypes::None, \"The key type must be supported by the attribute storage\")"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (template<T> using TAttributeHandle = FAttributeStorage::TAttributeHandle<T> ; public : void)",
    "insertText": "Initialize(const TSharedRef<FAttributeStorage, ESPMode::ThreadSafe>& InAttributes, const FString& BaseKeyName)"
  },
  {
    "label": "KeyCountKey()",
    "kind": "Method",
    "detail": "Function (Attributes = InAttributes ; FString BaseTryName = BaseKeyName ; FAttributeKey)",
    "insertText": "KeyCountKey(MoveTemp(BaseTryName))"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (EAttributeStorageResult Result = InAttributes -> RegisterAttribute<)",
    "insertText": "int32(KeyCountKey, 0)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (KeyCountHandle = InAttributes -> GetAttributeHandle<)",
    "insertText": "int32(KeyCountKey)"
  },
  {
    "label": "RebuildCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildCache()"
  },
  {
    "label": "TMapAttributeHelper()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TMapAttributeHelper()"
  },
  {
    "label": "TMapAttributeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TMapAttributeHelper(const TMapAttributeHelper&)"
  },
  {
    "label": "TMapAttributeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TMapAttributeHelper(TMapAttributeHelper&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TMapAttributeHelper&)",
    "insertText": "operator(const TMapAttributeHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TMapAttributeHelper&)",
    "insertText": "operator(TMapAttributeHelper&&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Attributes .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetKeyValue(const KeyType& InKey, const ValueType& InValue)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (const uint32 Hash =)",
    "insertText": "GetTypeHash(InKey)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetValue(const KeyType& InKey, ValueType& OutValue)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveKey(const KeyType& InKey)"
  },
  {
    "label": "RemoveKeyAndGetValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveKeyAndGetValue(const KeyType& InKey, ValueType& OutValue)"
  },
  {
    "label": "SetKeyValueByHash()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetKeyValueByHash(uint32 Hash, const KeyType& InKey, const ValueType& InValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Pair -> Value .)",
    "insertText": "Set(InValue)"
  },
  {
    "label": "GetKeyAttribute()",
    "kind": "Method",
    "detail": "Function (} else { FAttributeKey IndexKey =)",
    "insertText": "GetKeyAttribute(CachedKeysAndValues.Num())"
  },
  {
    "label": "GetValueAttribute()",
    "kind": "Method",
    "detail": "Function (FAttributeKey AttributeKey =)",
    "insertText": "GetValueAttribute(InKey)"
  },
  {
    "label": "AddByHash()",
    "kind": "Method",
    "detail": "Function (CachedKeysAndValues .)",
    "insertText": "AddByHash(Hash , InKey , TPair<TAttributeHandle<KeyType>, TAttributeHandle<ValueType>>( AttributesPtr->GetAttributeHandle<KeyType>(IndexKey) , AttributesPtr->GetAttributeHandle<ValueType>(AttributeKey) ))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (KeyCountHandle .)",
    "insertText": "Set(CachedKeysAndValues.Num())"
  },
  {
    "label": "GetValueByHash()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "GetValueByHash(uint32 Hash, const KeyType& InKey, ValueType& OutValue)"
  },
  {
    "label": "RemoveKeyByHash()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "RemoveKeyByHash(uint32 Hash, const KeyType& InKey)"
  },
  {
    "label": "RemoveKeyAndGetValueByHash()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "RemoveKeyAndGetValueByHash(uint32 Hash, const KeyType& InKey, ValueType& OutValue)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} } return false ; } void)",
    "insertText": "Reserve(int32 Number)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (CachedKeysAndValues .)",
    "insertText": "Reserve(Number)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32 NumOfExpectedElements = 0)"
  },
  {
    "label": "EmptyInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyInternal(NumOfExpectedElements)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMapAttributeHelper&)",
    "insertText": "operator(const TMap<KeyType, ValueType>& InMap)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (KeyCountHandle .)",
    "insertText": "Set(InMap.Num())"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(Pair.Key, Pair.Value)"
  },
  {
    "label": "ToMap()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TMap<KeyType,ValueType>)",
    "insertText": "ToMap()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TMap<KeyType,ValueType> Map ; Map .)",
    "insertText": "Reserve(CachedKeysAndValues.Num())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (KeyType Key ; Pair . Value . Key .)",
    "insertText": "Get(Key)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ValueType Value ; Pair . Value . Value .)",
    "insertText": "Get(Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "Add(MoveTemp(Key), MoveTemp(Value))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 KeyCount ;)",
    "insertText": "if(KeyCountHandle.Get(KeyCount) == EAttributeStorageResult::Operation_Success)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (CachedKeysAndValues .)",
    "insertText": "Empty(KeyCount)"
  },
  {
    "label": "KeyType()",
    "kind": "Method",
    "detail": "Function (TAttributeHandle<KeyType> KeyAttribute = AttributesPtr -> GetAttributeHandle<)",
    "insertText": "KeyType(GetKeyAttribute(Index))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (TAttributeHandle<ValueType> ValueAttribute = AttributesPtr -> GetAttributeHandle<)",
    "insertText": "ValueType(GetValueAttribute(Key))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (continue ; } CachedKeysAndValues .)",
    "insertText": "Add(Key, TPair<TAttributeHandle<KeyType>, TAttributeHandle<ValueType>>(KeyAttribute, ValueAttribute))"
  },
  {
    "label": "GetKeyAttribute()",
    "kind": "Method",
    "detail": "Function (} } } } private : FAttributeKey)",
    "insertText": "GetKeyAttribute(int32 Index)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const FString KeyIndex =)",
    "insertText": "TEXT(\"_KeyIndex_\")"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (FString IndexedKey = KeyCountHandle .)",
    "insertText": "GetKey().ToString()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (IndexedKey .)",
    "insertText": "Reserve(KeyIndex.Len() + 16)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (IndexedKey .)",
    "insertText": "Append(KeyIndex)"
  },
  {
    "label": "AppendInt()",
    "kind": "Method",
    "detail": "Function (IndexedKey .)",
    "insertText": "AppendInt(Index)"
  },
  {
    "label": "GetValueAttribute()",
    "kind": "Method",
    "detail": "Function (} FAttributeKey)",
    "insertText": "GetValueAttribute(const KeyType& InKey)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const FString KeyChars =)",
    "insertText": "TEXT(\"_Key_\")"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString Key = TTypeToString<KeyType)",
    "insertText": "ToString(InKey)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ValueAttribute .)",
    "insertText": "Reserve(KeyChars.Len() + Key.Len())"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ValueAttribute .)",
    "insertText": "Append(KeyChars)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ValueAttribute .)",
    "insertText": "Append(Key)"
  },
  {
    "label": "GetLastKeyAttributeHandle()",
    "kind": "Method",
    "detail": "Function (} TAttributeHandle<KeyType>)",
    "insertText": "GetLastKeyAttributeHandle()"
  },
  {
    "label": "RemoveBySwap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveBySwap(uint32 Hash, const KeyType& InKey, TPair<TAttributeHandle<FString>, TAttributeHandle<ValueType>>& CachedPair)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (KeyType LastKey ; LastKeyIndex .)",
    "insertText": "Get(LastKey)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (CachedKeysAndValues [ LastKey ] . Key = CachedPair . Key ; CachedPair . Key .)",
    "insertText": "Set(MoveTemp(LastKey))"
  },
  {
    "label": "UnregisterAttribute()",
    "kind": "Method",
    "detail": "Function (AttributesPtr ->)",
    "insertText": "UnregisterAttribute(LastKeyIndex.GetKey())"
  },
  {
    "label": "UnregisterAttribute()",
    "kind": "Method",
    "detail": "Function (AttributesPtr ->)",
    "insertText": "UnregisterAttribute(CachedPair.Value.GetKey())"
  },
  {
    "label": "RemoveByHash()",
    "kind": "Method",
    "detail": "Function (CachedKeysAndValues .)",
    "insertText": "RemoveByHash(Hash, InKey)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (const FAttributeKey& KeyAttribute = Pair . Value . Key .)",
    "insertText": "GetKey()"
  },
  {
    "label": "UnregisterAttribute()",
    "kind": "Method",
    "detail": "Function (AttributesPtr ->)",
    "insertText": "UnregisterAttribute(KeyAttribute)"
  },
  {
    "label": "UnregisterAttribute()",
    "kind": "Method",
    "detail": "Function (AttributesPtr ->)",
    "insertText": "UnregisterAttribute(ValueAttribute)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} CachedKeysAndValues .)",
    "insertText": "Empty(NumOfExpectedElements)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (KeyCountHandle .)",
    "insertText": "Set(0)"
  }
]