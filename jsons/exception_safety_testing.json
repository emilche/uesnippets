[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NoThrowTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NoThrowTag"
  },
  {
    "label": "StrongGuaranteeTagType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StrongGuaranteeTagType"
  },
  {
    "label": "TestException",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestException"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "TestBadAllocException",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestBadAllocException"
  },
  {
    "label": "TrackedAddress",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrackedAddress"
  },
  {
    "label": "ConstructorTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstructorTracker"
  },
  {
    "label": "TrackedObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrackedObject"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "ThrowingBool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThrowingBool"
  },
  {
    "label": "for",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "for"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "instrumented",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "instrumented"
  },
  {
    "label": "ThrowingValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThrowingValue"
  },
  {
    "label": "for",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "for"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ThrowingAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThrowingAllocator"
  },
  {
    "label": "rebind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rebind"
  },
  {
    "label": "ThrowingAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThrowingAllocator"
  },
  {
    "label": "Cleanup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cleanup"
  },
  {
    "label": "Cleanup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cleanup"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "UninitializedT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UninitializedT"
  },
  {
    "label": "DefaultFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultFactory"
  },
  {
    "label": "ExceptionSafetyTestBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExceptionSafetyTestBuilder"
  },
  {
    "label": "IsUniquePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsUniquePtr"
  },
  {
    "label": "IsUniquePtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsUniquePtr"
  },
  {
    "label": "FactoryPtrTypeHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FactoryPtrTypeHelper"
  },
  {
    "label": "ExceptionSafetyTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExceptionSafetyTest"
  },
  {
    "label": "ExceptionSafetyTestBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExceptionSafetyTestBuilder"
  },
  {
    "label": "ExceptionSafetyTestBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExceptionSafetyTestBuilder"
  },
  {
    "label": "GetSpecString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetSpecString(TypeSpec)"
  },
  {
    "label": "GetSpecString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetSpecString(AllocSpec)"
  },
  {
    "label": "MaybeThrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeThrow(absl::string_view msg, bool throw_bad_alloc = false)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ + other.dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ - other.dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(-dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ * other.dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ / other.dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ % other.dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ << shift, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ >> shift, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(~dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ & other.dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ | other.dummy_, nothrow_ctor)"
  },
  {
    "label": "ThrowingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ThrowingValue(dummy_ ^ other.dummy_, nothrow_ctor)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "new(s)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(p)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "allocate(n)"
  },
  {
    "label": "ct()",
    "kind": "Method",
    "detail": "Function (exceptions_internal::ConstructorTracker)",
    "insertText": "ct(count)"
  },
  {
    "label": "MakeExceptionSafetyTester()",
    "kind": "Method",
    "detail": "Function (exceptions_internal::ExceptionSafetyTestBuilder<>)",
    "insertText": "MakeExceptionSafetyTester()"
  },
  {
    "label": "ct()",
    "kind": "Method",
    "detail": "Function (exceptions_internal::ConstructorTracker)",
    "insertText": "ct(count)"
  },
  {
    "label": "AssertionSuccess()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AssertionSuccess()"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Test(operation_)"
  }
]