[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TrackedRefFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrackedRefFactory"
  },
  {
    "label": "TrackedRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrackedRef"
  },
  {
    "label": "TrackedRef()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_TRACKED_REF_H_ # define BASE_TASK_THREAD_POOL_TRACKED_REF_H_ # include \" base / atomic_ref_count . h \" # include \" base / check . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / ptr_util . h \" # include \" base / memory / raw_ptr . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / template_util . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace internal { template<class T> class TrackedRefFactory ; template<class T> class TrackedRef { public :)",
    "insertText": "TrackedRef(TrackedRef<T>&& other) : ptr_(other.ptr_), factory_(other.factory_)"
  },
  {
    "label": "TrackedRef()",
    "kind": "Method",
    "detail": "Function (other . factory_ = nullptr ; })",
    "insertText": "TrackedRef(const TrackedRef<T>& other) : ptr_(other.ptr_), factory_(other.factory_)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (factory_ -> live_tracked_refs_ .)",
    "insertText": "Increment()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TrackedRef&)",
    "insertText": "operator(TrackedRef<T>&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TrackedRef&)",
    "insertText": "operator(const TrackedRef<T>& other)"
  },
  {
    "label": "TrackedRef()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TrackedRef()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(factory_->ready_to_destroy_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!factory_->ready_to_destroy_->IsSignaled())"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (factory_ -> ready_to_destroy_ ->)",
    "insertText": "Signal()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } T&)",
    "insertText": "operator()"
  },
  {
    "label": "TrackedRefFactory()",
    "kind": "Method",
    "detail": "Function (} T* ptr_ ; TrackedRefFactory<T>* factory_ ; } ; template<class T> class TrackedRefFactory { public :)",
    "insertText": "TrackedRefFactory(T* ptr) : ptr_(ptr), self_ref_(TrackedRef<T>(ptr_.get(), this))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(ptr_)"
  },
  {
    "label": "TrackedRefFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TrackedRefFactory(const TrackedRefFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TrackedRefFactory&)",
    "insertText": "operator(const TrackedRefFactory&)"
  },
  {
    "label": "TrackedRefFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TrackedRefFactory()"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (ready_to_destroy_ .)",
    "insertText": "emplace()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (self_ref_ .)",
    "insertText": "reset()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (ready_to_destroy_ ->)",
    "insertText": "Wait()"
  },
  {
    "label": "GetTrackedRef()",
    "kind": "Method",
    "detail": "Function (} TrackedRef<T>)",
    "insertText": "GetTrackedRef()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!live_tracked_refs_.IsZero())"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (} private : class TrackedRef<T> ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(TrackedRefTest, CopyAndMoveSemantics)"
  }
]