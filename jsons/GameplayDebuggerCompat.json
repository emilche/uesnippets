[
  {
    "label": "AGameplayDebuggingReplicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameplayDebuggingReplicator"
  },
  {
    "label": "FGameplayDebuggerCompat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerCompat"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Editor / EditorEngine . h \" # include \" LevelEditor . h \" # endif # include \" GameplayDebuggerAddonManager . h \" # include \" GameplayDebuggerPlayerManager . h \" class AGameplayDebuggingReplicator ; class FGameplayDebuggerCompat : public FSelfRegisteringExec,public GameplayDebugger { public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "WorldAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorldAdded(UWorld* InWorld)"
  },
  {
    "label": "WorldDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorldDestroyed(UWorld* InWorld)"
  },
  {
    "label": "OnLevelActorAdded()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnLevelActorAdded(AActor* InActor)"
  },
  {
    "label": "OnLevelActorDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelActorDeleted(AActor* InActor)"
  },
  {
    "label": "OnExtendLevelEditorViewMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FExtender>)",
    "insertText": "OnExtendLevelEditorViewMenu(const TSharedRef<FUICommandList> CommandList)"
  },
  {
    "label": "CreateSnappingOptionsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSnappingOptionsMenu(FMenuBuilder& Builder)"
  },
  {
    "label": "CreateSettingSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSettingSubMenu(FMenuBuilder& Builder)"
  },
  {
    "label": "HandleSettingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSettingChanged(FName PropertyName)"
  },
  {
    "label": "GetAllReplicators()",
    "kind": "Method",
    "detail": "Function (# endif TArray<TWeakObjectPtr<AGameplayDebuggingReplicator>>&)",
    "insertText": "GetAllReplicators(UWorld* InWorld)"
  },
  {
    "label": "AddReplicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReplicator(UWorld* InWorld, AGameplayDebuggingReplicator* InReplicator)"
  },
  {
    "label": "RemoveReplicator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReplicator(UWorld* InWorld, AGameplayDebuggingReplicator* InReplicator)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(UWorld* Inworld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "CreateGameplayDebuggerForPlayerController()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CreateGameplayDebuggerForPlayerController(APlayerController* PlayerController)"
  },
  {
    "label": "IsGameplayDebuggerActiveForPlayerController()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGameplayDebuggerActiveForPlayerController(APlayerController* PlayerController)"
  },
  {
    "label": "DoesGameplayDebuggingReplicatorExistForPlayerController()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesGameplayDebuggingReplicatorExistForPlayerController(APlayerController* PlayerController)"
  },
  {
    "label": "RegisterCategory()",
    "kind": "Method",
    "detail": "Function (TMap<TWeakObjectPtr<UWorld>,TArray<TWeakObjectPtr<AGameplayDebuggingReplicator>>> AllReplicatorsPerWorlds ; public : void)",
    "insertText": "RegisterCategory(FName CategoryName, FOnGetCategory MakeInstanceDelegate, EGameplayDebuggerCategoryState CategoryState = EGameplayDebuggerCategoryState::Disabled, int32 SlotIdx = INDEX_NONE)"
  },
  {
    "label": "UnregisterCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCategory(FName CategoryName)"
  },
  {
    "label": "NotifyCategoriesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyCategoriesChanged()"
  },
  {
    "label": "RegisterExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExtension(FName ExtensionName, IGameplayDebugger::FOnGetExtension MakeInstanceDelegate)"
  },
  {
    "label": "UnregisterExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterExtension(FName ExtensionName)"
  },
  {
    "label": "NotifyExtensionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyExtensionsChanged()"
  },
  {
    "label": "UseNewGameplayDebugger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseNewGameplayDebugger()"
  },
  {
    "label": "StartupNewDebugger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartupNewDebugger()"
  },
  {
    "label": "ShutdownNewDebugger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownNewDebugger()"
  },
  {
    "label": "GetPlayerManager()",
    "kind": "Method",
    "detail": "Function (AGameplayDebuggerPlayerManager&)",
    "insertText": "GetPlayerManager(UWorld* World)"
  },
  {
    "label": "OnWorldInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldInitialized(UWorld* World, const UWorld::InitializationValues IVS)"
  }
]