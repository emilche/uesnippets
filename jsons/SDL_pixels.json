[
  {
    "label": "SDL_Color",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_Color"
  },
  {
    "label": "SDL_Palette",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_Palette"
  },
  {
    "label": "SDL_PixelFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_PixelFormat"
  },
  {
    "label": "SDL_PixelFormat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_PixelFormat"
  },
  {
    "label": "SDL_GetPixelFormatName()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_GetPixelFormatName(Uint32 format)"
  },
  {
    "label": "SDL_PixelFormatEnumToMasks()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_PixelFormatEnumToMasks(Uint32 format,\n                                                            int *bpp,\n                                                            Uint32 * Rmask,\n                                                            Uint32 * Gmask,\n                                                            Uint32 * Bmask,\n                                                            Uint32 * Amask)"
  },
  {
    "label": "SDL_MasksToPixelFormatEnum()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_MasksToPixelFormatEnum(int bpp,\n                                                          Uint32 Rmask,\n                                                          Uint32 Gmask,\n                                                          Uint32 Bmask,\n                                                          Uint32 Amask)"
  },
  {
    "label": "SDL_AllocFormat()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_AllocFormat(Uint32 pixel_format)"
  },
  {
    "label": "SDL_FreeFormat()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_FreeFormat(SDL_PixelFormat *format)"
  },
  {
    "label": "failure()",
    "kind": "Method",
    "detail": "Function (on)",
    "insertText": "failure(e.g. if\n *          there wasn't enough memory)"
  },
  {
    "label": "SDL_AllocPalette()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_AllocPalette(int ncolors)"
  },
  {
    "label": "SDL_SetPixelFormatPalette()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_SetPixelFormatPalette(SDL_PixelFormat * format,\n                                                      SDL_Palette *palette)"
  },
  {
    "label": "SDL_SetPaletteColors()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_SetPaletteColors(SDL_Palette * palette,\n                                                 const SDL_Color * colors,\n                                                 int firstcolor, int ncolors)"
  },
  {
    "label": "SDL_FreePalette()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_FreePalette(SDL_Palette * palette)"
  },
  {
    "label": "SDL_MapRGB()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_MapRGB(const SDL_PixelFormat * format,\n                                          Uint8 r, Uint8 g, Uint8 b)"
  },
  {
    "label": "SDL_MapRGBA()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_MapRGBA(const SDL_PixelFormat * format,\n                                           Uint8 r, Uint8 g, Uint8 b,\n                                           Uint8 a)"
  },
  {
    "label": "SDL_GetRGB()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_GetRGB(Uint32 pixel,\n                                        const SDL_PixelFormat * format,\n                                        Uint8 * r, Uint8 * g, Uint8 * b)"
  },
  {
    "label": "SDL_GetRGBA()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_GetRGBA(Uint32 pixel,\n                                         const SDL_PixelFormat * format,\n                                         Uint8 * r, Uint8 * g, Uint8 * b,\n                                         Uint8 * a)"
  },
  {
    "label": "SDL_CalculateGammaRamp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_CalculateGammaRamp(float gamma, Uint16 * ramp)"
  }
]