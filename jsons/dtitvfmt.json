[
  {
    "label": "FormattedDateIntervalData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormattedDateIntervalData"
  },
  {
    "label": "DateIntervalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateIntervalFormat"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "PatternInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PatternInfo"
  },
  {
    "label": "FormattedDateInterval()",
    "kind": "Method",
    "detail": "Function (# ifndef __DTITVFMT_H__ # define __DTITVFMT_H__ # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / ucal . h \" # include \" unicode / smpdtfmt . h \" # include \" unicode / dtintrv . h \" # include \" unicode / dtitvinf . h \" # include \" unicode / dtptngen . h \" # include \" unicode / formattedvalue . h \" U_NAMESPACE_BEGIN class FormattedDateIntervalData ; class DateIntervalFormat ; # ifndef class U_I18N_API FormattedDateInterval : public UMemory,public FormattedValue { public :)",
    "insertText": "FormattedDateInterval() : fData(nullptr), fErrorCode(U_INVALID_STATE_ERROR)"
  },
  {
    "label": "FormattedDateInterval()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedDateInterval(FormattedDateInterval&& src)"
  },
  {
    "label": "FormattedDateInterval()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FormattedDateInterval()"
  },
  {
    "label": "toString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toString(UErrorCode& status)"
  },
  {
    "label": "toTempString()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "toTempString(UErrorCode& status)"
  },
  {
    "label": "appendTo()",
    "kind": "Method",
    "detail": "Function (Appendable&)",
    "insertText": "appendTo(Appendable& appendable, UErrorCode& status)"
  },
  {
    "label": "nextPosition()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "nextPosition(ConstrainedFieldPosition& cfpos, UErrorCode& status)"
  },
  {
    "label": "FormattedDateInterval()",
    "kind": "Method",
    "detail": "Function (private : FormattedDateIntervalData* fData ; UErrorCode fErrorCode ;)",
    "insertText": "FormattedDateInterval(FormattedDateIntervalData *results) : fData(results), fErrorCode(U_ZERO_ERROR)"
  },
  {
    "label": "FormattedDateInterval()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FormattedDateInterval(UErrorCode errorCode) : fData(nullptr), fErrorCode(errorCode)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (} class DateIntervalFormat ; } ; # endif class U_I18N_API DateIntervalFormat : public Format { public : DateIntervalFormat* U_EXPORT2)",
    "insertText": "createInstance(const UnicodeString& skeleton, UErrorCode& status)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (DateIntervalFormat* U_EXPORT2)",
    "insertText": "createInstance(const UnicodeString& skeleton, const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (DateIntervalFormat* U_EXPORT2)",
    "insertText": "createInstance(const UnicodeString& skeleton, const DateIntervalInfo& dtitvinf, UErrorCode& status)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (DateIntervalFormat* U_EXPORT2)",
    "insertText": "createInstance(const UnicodeString& skeleton, const Locale& locale, const DateIntervalInfo& dtitvinf, UErrorCode& status)"
  },
  {
    "label": "DateIntervalFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DateIntervalFormat()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (using Format::format ; UnicodeString&)",
    "insertText": "format(const Formattable& obj, UnicodeString& appendTo, FieldPosition& fieldPosition, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "format(const DateInterval* dtInterval, UnicodeString& appendTo, FieldPosition& fieldPosition, UErrorCode& status)"
  },
  {
    "label": "formatToValue()",
    "kind": "Method",
    "detail": "Function (# ifndef FormattedDateInterval)",
    "insertText": "formatToValue(const DateInterval& dtInterval, UErrorCode& status)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (# endif UnicodeString&)",
    "insertText": "format(Calendar& fromCalendar, Calendar& toCalendar, UnicodeString& appendTo, FieldPosition& fieldPosition, UErrorCode& status)"
  },
  {
    "label": "formatToValue()",
    "kind": "Method",
    "detail": "Function (# ifndef FormattedDateInterval)",
    "insertText": "formatToValue(Calendar& fromCalendar, Calendar& toCalendar, UErrorCode& status)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "parseObject(const UnicodeString& source, Formattable& result, ParsePosition& parse_pos)"
  },
  {
    "label": "getDateIntervalInfo()",
    "kind": "Method",
    "detail": "Function (const DateIntervalInfo*)",
    "insertText": "getDateIntervalInfo(void)"
  },
  {
    "label": "setDateIntervalInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDateIntervalInfo(const DateIntervalInfo& newIntervalPatterns, UErrorCode& status)"
  },
  {
    "label": "getDateFormat()",
    "kind": "Method",
    "detail": "Function (const DateFormat*)",
    "insertText": "getDateFormat(void)"
  },
  {
    "label": "getTimeZone()",
    "kind": "Method",
    "detail": "Function (const TimeZone&)",
    "insertText": "getTimeZone(void)"
  },
  {
    "label": "adoptTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptTimeZone(TimeZone* zoneToAdopt)"
  },
  {
    "label": "setTimeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeZone(const TimeZone& zone)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "DateIntervalFormat()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "DateIntervalFormat(const DateIntervalFormat&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DateIntervalFormat&)",
    "insertText": "operator(const DateIntervalFormat&)"
  },
  {
    "label": "DateIntervalFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateIntervalFormat(const Locale& locale, DateIntervalInfo* dtItvInfo, const UnicodeString* skeleton, UErrorCode& status)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (DateIntervalFormat* U_EXPORT2)",
    "insertText": "create(const Locale& locale, DateIntervalInfo* dtitvinf, const UnicodeString* skeleton, UErrorCode& status)"
  },
  {
    "label": "fallbackFormatRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fallbackFormatRange(Calendar& fromCalendar, Calendar& toCalendar, UnicodeString& appendTo, int8_t& firstIndex, FieldPositionHandler& fphandler, UErrorCode& status)"
  },
  {
    "label": "fallbackFormat()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "fallbackFormat(Calendar& fromCalendar, Calendar& toCalendar, UBool fromToOnSameDay, UnicodeString& appendTo, int8_t& firstIndex, FieldPositionHandler& fphandler, UErrorCode& status)"
  },
  {
    "label": "initializePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializePattern(UErrorCode& status)"
  },
  {
    "label": "setFallbackPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFallbackPattern(UCalendarDateFields field, const UnicodeString& skeleton, UErrorCode& status)"
  },
  {
    "label": "getDateTimeSkeleton()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "getDateTimeSkeleton(const UnicodeString& skeleton, UnicodeString& date, UnicodeString& normalizedDate, UnicodeString& time, UnicodeString& normalizedTime)"
  },
  {
    "label": "setSeparateDateTimePtn()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "setSeparateDateTimePtn(const UnicodeString& dateSkeleton, const UnicodeString& timeSkeleton)"
  },
  {
    "label": "setIntervalPattern()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "setIntervalPattern(UCalendarDateFields field, const UnicodeString* skeleton, const UnicodeString* bestSkeleton, int8_t differenceInfo, UnicodeString* extendedSkeleton = NULL, UnicodeString* extendedBestSkeleton = NULL)"
  },
  {
    "label": "adjustFieldWidth()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "adjustFieldWidth(const UnicodeString& inputSkeleton, const UnicodeString& bestMatchSkeleton, const UnicodeString& bestMatchIntervalPattern, int8_t differenceInfo, UnicodeString& adjustedIntervalPattern)"
  },
  {
    "label": "concatSingleDate2TimeInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concatSingleDate2TimeInterval(UnicodeString& format, const UnicodeString& datePattern, UCalendarDateFields field, UErrorCode& status)"
  },
  {
    "label": "fieldExistsInSkeleton()",
    "kind": "Method",
    "detail": "Function (UBool U_EXPORT2)",
    "insertText": "fieldExistsInSkeleton(UCalendarDateFields field, const UnicodeString& skeleton)"
  },
  {
    "label": "splitPatternInto2Part()",
    "kind": "Method",
    "detail": "Function (int32_t U_EXPORT2)",
    "insertText": "splitPatternInto2Part(const UnicodeString& intervalPattern)"
  },
  {
    "label": "setIntervalPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIntervalPattern(UCalendarDateFields field, const UnicodeString& intervalPattern)"
  },
  {
    "label": "setIntervalPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIntervalPattern(UCalendarDateFields field, const UnicodeString& intervalPattern, UBool laterDateFirst)"
  },
  {
    "label": "setPatternInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPatternInfo(UCalendarDateFields field, const UnicodeString* firstPart, const UnicodeString* secondPart, UBool laterDateFirst)"
  },
  {
    "label": "formatImpl()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatImpl(Calendar& fromCalendar, Calendar& toCalendar, UnicodeString& appendTo, int8_t& firstIndex, FieldPositionHandler& fphandler, UErrorCode& status)"
  },
  {
    "label": "formatIntervalImpl()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "formatIntervalImpl(const DateInterval& dtInterval, UnicodeString& appendTo, int8_t& firstIndex, FieldPositionHandler& fphandler, UErrorCode& status)"
  }
]