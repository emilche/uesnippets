[
  {
    "label": "UNavigationSystemBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemBase"
  },
  {
    "label": "UNavigationSystemConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemConfig"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "INavigationDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationDataInterface"
  },
  {
    "label": "IPathFollowingAgentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPathFollowingAgentInterface"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "UNavAreaBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavAreaBase"
  },
  {
    "label": "FNavigationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElement"
  },
  {
    "label": "FNavigationElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElementHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNavigationLockContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationLockContext"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "IPathFollowingManagerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPathFollowingManagerInterface"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Object . h \" # include \" AI / Navigation / NavigationTypes . h \" # include \" AI / NavigationModifier . h \" # include \" Engine / World . h \" # include \" NavigationSystemBase . generated . h \" class UNavigationSystemBase ; class UNavigationSystemConfig ; class AActor ; class UActorComponent ; class USceneComponent ; class INavigationDataInterface ; class IPathFollowingAgentInterface ; class AWorldSettings ; class ULevel ; class AController ; class UNavAreaBase ; struct FNavigationElement ; struct FNavigationElementHandle ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavigation, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavigationDataBuild, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavigationHistory, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavInvokers, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavLink, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAStar, Display, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "FNavigationLockContext()",
    "kind": "Method",
    "detail": "Function (namespace ENavigationLockReason { enum Type { Unknown = 1<<0,AllowUnregister = 1<<1,MaterialUpdate = 1<<2,LightingUpdate = 1<<3,ContinuousEditorMove = 1<<4,SpawnOnDragEnter = 1<<5,} ; } class FNavigationLockContext { public :)",
    "insertText": "FNavigationLockContext(ENavigationLockReason::Type Reason = ENavigationLockReason::Unknown, bool bApplyLock = true) : MyWorld(NULL), LockReason((uint8)Reason), bSingleWorld(false), bIsLocked(false)"
  },
  {
    "label": "LockUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockUpdates()"
  },
  {
    "label": "FNavigationLockContext()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FNavigationLockContext(UWorld* InWorld, ENavigationLockReason::Type Reason = ENavigationLockReason::Unknown, bool bApplyLock = true) : MyWorld(InWorld), LockReason((uint8)Reason), bSingleWorld(true), bIsLocked(false)"
  },
  {
    "label": "FNavigationLockContext()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FNavigationLockContext()"
  },
  {
    "label": "UnlockUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockUpdates()"
  },
  {
    "label": "AddNavigationSystemToWorld()",
    "kind": "Method",
    "detail": "Function (} ; namespace FNavigationSystem { void)",
    "insertText": "AddNavigationSystemToWorld(UWorld& WorldOwner, const FNavigationSystemRunMode RunMode = FNavigationSystemRunMode::InvalidMode, UNavigationSystemConfig* NavigationSystemConfig = nullptr, const bool bInitializeForWorld = true, const bool bOverridePreviousNavSys = false)"
  },
  {
    "label": "DiscardNavigationDataChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardNavigationDataChunks(UWorld& InWorld)"
  },
  {
    "label": "IsEditorRunMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorRunMode(const FNavigationSystemRunMode Mode)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (template<TNavSys> TNavSys*)",
    "insertText": "GetCurrent(UWorld* World)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (} template<TNavSys> const TNavSys*)",
    "insertText": "GetCurrent(const UWorld* World)"
  },
  {
    "label": "GetWorldFromContextObject()",
    "kind": "Method",
    "detail": "Function (} UWorld*)",
    "insertText": "GetWorldFromContextObject(UObject* WorldContextObject)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (template<TNavSys> TNavSys*)",
    "insertText": "GetCurrent(UObject* WorldContextObject)"
  },
  {
    "label": "GetWorldFromContextObject()",
    "kind": "Method",
    "detail": "Function (UWorld* World =)",
    "insertText": "GetWorldFromContextObject(WorldContextObject)"
  },
  {
    "label": "UpdateActorData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateActorData(AActor& Actor)"
  },
  {
    "label": "UpdateComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentData(UActorComponent& Comp)"
  },
  {
    "label": "UpdateActorAndComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorAndComponentData(AActor& Actor, bool bUpdateAttachedActors = true)"
  },
  {
    "label": "UpdateComponentDataAfterMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentDataAfterMove(USceneComponent& Comp)"
  },
  {
    "label": "OnActorBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorBoundsChanged(AActor& Actor)"
  },
  {
    "label": "OnPostEditActorMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostEditActorMove(AActor& Actor)"
  },
  {
    "label": "OnComponentTransformChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentTransformChanged(USceneComponent& Comp)"
  },
  {
    "label": "OnActorRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorRegistered(AActor& Actor)"
  },
  {
    "label": "OnActorUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorUnregistered(AActor& Actor)"
  },
  {
    "label": "OnComponentRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentRegistered(UActorComponent& Comp)"
  },
  {
    "label": "OnComponentUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentUnregistered(UActorComponent& Comp)"
  },
  {
    "label": "RegisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponent(UActorComponent& Comp)"
  },
  {
    "label": "UnregisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponent(UActorComponent& Comp)"
  },
  {
    "label": "RegisterNavRelevantObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavRelevantObject(UObject& Object)"
  },
  {
    "label": "UpdateNavRelevantObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavRelevantObject(UObject& Object)"
  },
  {
    "label": "UnregisterNavRelevantObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavRelevantObject(UObject& Object)"
  },
  {
    "label": "OnObjectBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectBoundsChanged(UObject& Object, const FBox& NewBounds, TConstArrayView<FBox> DirtyAreas)"
  },
  {
    "label": "AddNavigationElement()",
    "kind": "Method",
    "detail": "Function (FNavigationElementHandle)",
    "insertText": "AddNavigationElement(UWorld* World, FNavigationElement&& Element)"
  },
  {
    "label": "UpdateNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavigationElement(UWorld* World, FNavigationElementHandle ElementHandle, FNavigationElement&& Element)"
  },
  {
    "label": "RemoveNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNavigationElement(UWorld* World, FNavigationElementHandle ElementHandle)"
  },
  {
    "label": "OnNavigationElementBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationElementBoundsChanged(UWorld* World, FNavigationElementHandle ElementHandle, const FBox& NewBounds, TConstArrayView<FBox> DirtyAreas)"
  },
  {
    "label": "RemoveActorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorData(AActor& Actor)"
  },
  {
    "label": "HasComponentData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasComponentData(UActorComponent& Comp)"
  },
  {
    "label": "GetDefaultSupportedAgent()",
    "kind": "Method",
    "detail": "Function (const FNavDataConfig&)",
    "insertText": "GetDefaultSupportedAgent()"
  },
  {
    "label": "GetBiggestSupportedAgent()",
    "kind": "Method",
    "detail": "Function (const FNavDataConfig&)",
    "insertText": "GetBiggestSupportedAgent(const UWorld* World)"
  },
  {
    "label": "GetWorldPartitionNavigationDataBuilderOverlap()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetWorldPartitionNavigationDataBuilderOverlap(const UWorld& World)"
  },
  {
    "label": "GetDefaultWalkableArea()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UNavAreaBase>)",
    "insertText": "GetDefaultWalkableArea()"
  },
  {
    "label": "GetDefaultObstacleArea()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UNavAreaBase>)",
    "insertText": "GetDefaultObstacleArea()"
  },
  {
    "label": "GetCoordTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform&)",
    "insertText": "GetCoordTransform(const ENavigationCoordSystem::Type FromCoordType, const ENavigationCoordSystem::Type ToCoordType)"
  },
  {
    "label": "WantsComponentChangeNotifies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsComponentChangeNotifies()"
  },
  {
    "label": "GetNavDataForActor()",
    "kind": "Method",
    "detail": "Function (INavigationDataInterface*)",
    "insertText": "GetNavDataForActor(const AActor& Actor)"
  },
  {
    "label": "GetDefaultNavDataClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<AActor>)",
    "insertText": "GetDefaultNavDataClass()"
  },
  {
    "label": "VerifyNavigationRenderingComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyNavigationRenderingComponents(UWorld& World, const bool bShow)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(UWorld& World)"
  },
  {
    "label": "OnPIEStart()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnPIEStart(UWorld& World)"
  },
  {
    "label": "OnPIEEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPIEEnd(UWorld& World)"
  },
  {
    "label": "SetNavigationAutoUpdateEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationAutoUpdateEnabled(const bool bNewEnable, UNavigationSystemBase* InNavigationSystem)"
  },
  {
    "label": "UpdateLevelCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelCollision(ULevel& Level)"
  },
  {
    "label": "IsFollowingAPath()",
    "kind": "Method",
    "detail": "Function (# endif enum class ECleanupMode : uint8 { CleanupWithWorld,CleanupUnsafe,} ; bool)",
    "insertText": "IsFollowingAPath(const AController& Controller)"
  },
  {
    "label": "StopMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMovement(const AController& Controller)"
  },
  {
    "label": "FindPathFollowingAgentForActor()",
    "kind": "Method",
    "detail": "Function (IPathFollowingAgentInterface*)",
    "insertText": "FindPathFollowingAgentForActor(const AActor& Actor)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(FNavigationElementHandle, FAddNavigationElementSignature, UWorld* , FNavigationElement&&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FRemoveNavigationElementSignature, UWorld* , FNavigationElementHandle)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FUpdateNavigationElementSignature, UWorld* , FNavigationElementHandle , FNavigationElement&& ) DECLARE_DELEGATE_FourParams(FUpdateNavigationElementBoundsSignature, UWorld* , FNavigationElementHandle , const FBox& , TConstArrayView<FBox> ) DECLARE_DELEGATE_OneParam(FObjectBasedSignature, UObject&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FObjectBoundsChangedSignature, UObject& , const FBox& , TConstArrayView<FBox> ) DECLARE_DELEGATE_OneParam(FActorBasedSignature, AActor&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FActorComponentBasedSignature, UActorComponent&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FSceneComponentBasedSignature, USceneComponent&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FWorldBasedSignature, UWorld&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FLevelBasedSignature, ULevel&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FControllerBasedSignature, const AController&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FNavigationAutoUpdateEnableSignature, const bool , UNavigationSystemBase*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FBoolControllerBasedSignature, const AController&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FBoolActorComponentBasedSignature, UActorComponent&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(TSubclassOf<UNavAreaBase>, FNavAreaBasedSignature)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(const FNavDataConfig&, FNavDataConfigBasedSignature)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(const FNavDataConfig&, FNavDataConfigAndWorldSignature, const UWorld*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(double, FDoubleWorldBasedSignature, const UWorld&)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FWorldByteBasedSignature, UWorld& , uint8)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FActorBooleBasedSignature, AActor& , bool)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(INavigationDataInterface*, FNavDataForPropsSignature, const FNavAgentProperties&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(INavigationDataInterface*, FNavDataForActorSignature, const AActor&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(TSubclassOf<AActor>, FNavDataClassFetchSignature)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FWorldBoolBasedSignature, UWorld& , const bool)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnNavigationInitSignature, const UNavigationSystemBase&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnNavAreaGenericEvent, const UWorld&, const UClass*)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual ~UNavigationSystemBase()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float DeltaSeconds) PURE_VIRTUAL(UNavigationSystemBase::Tick,)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(const FNavigationSystem::ECleanupMode Mode) PURE_VIRTUAL(UNavigationSystemBase::CleanUp,)"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Configure(const UNavigationSystemConfig& Config) PURE_VIRTUAL(UNavigationSystemBase::Configure,)"
  },
  {
    "label": "AppendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendConfig(const UNavigationSystemConfig& NewConfig) PURE_VIRTUAL(UNavigationSystemBase::AppendConfig,)"
  },
  {
    "label": "OnInitializeActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitializeActors()"
  },
  {
    "label": "IsNavigationBuilt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNavigationBuilt(const AWorldSettings* Settings)"
  },
  {
    "label": "InitializeForWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForWorld(UWorld& World, FNavigationSystemRunMode Mode) PURE_VIRTUAL(UNavigationSystemBase::InitializeForWorld,)"
  },
  {
    "label": "GetMainNavData()",
    "kind": "Method",
    "detail": "Function (INavigationDataInterface*)",
    "insertText": "GetMainNavData()"
  },
  {
    "label": "GetNavigableWorldBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNavigableWorldBounds() const PURE_VIRTUAL(UNavigationSystemBase::GetNavigableWorldBounds, return FBox(ForceInit);)"
  },
  {
    "label": "ContainsNavData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsNavData(const FBox& Bounds) const PURE_VIRTUAL(UNavigationSystemBase::ContainsNavData, return false;)"
  },
  {
    "label": "ComputeNavDataBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeNavDataBounds() const PURE_VIRTUAL(UNavigationSystemBase::GetNavigableWorldBounds, return FBox(ForceInit);)"
  },
  {
    "label": "AddNavigationDataChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNavigationDataChunk(class ANavigationDataChunkActor& DataChunkActor)"
  },
  {
    "label": "RemoveNavigationDataChunk()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveNavigationDataChunk(class ANavigationDataChunkActor& DataChunkActor)"
  },
  {
    "label": "FillNavigationDataChunkActor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillNavigationDataChunkActor(const FBox& QueryBounds, class ANavigationDataChunkActor& DataChunkActor, FBox& OutTilesBounds)"
  },
  {
    "label": "IsWorldInitDone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWorldInitDone() const PURE_VIRTUAL(UNavigationSystemBase::IsWorldInitDone, return false;)"
  },
  {
    "label": "ShouldCreateNavigationSystemInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreateNavigationSystemInstance(const UWorld* World) const PURE_VIRTUAL(UNavigationSystemBase::ShouldCreateNavigationSystemInstance, return true;)"
  },
  {
    "label": "OnNavigationInitStartStaticDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FOnNavigationInitSignature&)",
    "insertText": "OnNavigationInitStartStaticDelegate()"
  },
  {
    "label": "OnNavigationInitDoneStaticDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FOnNavigationInitSignature&)",
    "insertText": "OnNavigationInitDoneStaticDelegate()"
  },
  {
    "label": "OnNavAreaRegisteredDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FOnNavAreaGenericEvent&)",
    "insertText": "OnNavAreaRegisteredDelegate()"
  },
  {
    "label": "OnNavAreaUnregisteredDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FOnNavAreaGenericEvent&)",
    "insertText": "OnNavAreaUnregisteredDelegate()"
  },
  {
    "label": "SetCoordTransform()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetCoordTransform(const ENavigationCoordSystem::Type FromCoordType, const ENavigationCoordSystem::Type ToCoordType, const FTransform& Transform, bool bAddInverse = true)"
  },
  {
    "label": "SetWantsComponentChangeNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWantsComponentChangeNotifies(const bool bEnable)"
  },
  {
    "label": "SetDefaultWalkableArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultWalkableArea(TSubclassOf<UNavAreaBase> InAreaClass)"
  },
  {
    "label": "SetDefaultObstacleArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultObstacleArea(TSubclassOf<UNavAreaBase> InAreaClass)"
  },
  {
    "label": "ResetEventDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEventDelegates()"
  },
  {
    "label": "GetAddNavigationElementDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FAddNavigationElementSignature&)",
    "insertText": "GetAddNavigationElementDelegate()"
  },
  {
    "label": "GetUpdateNavigationElementDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FUpdateNavigationElementSignature&)",
    "insertText": "GetUpdateNavigationElementDelegate()"
  },
  {
    "label": "GetRemoveNavigationElementDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FRemoveNavigationElementSignature&)",
    "insertText": "GetRemoveNavigationElementDelegate()"
  },
  {
    "label": "GetUpdateNavigationElementBoundsDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FUpdateNavigationElementBoundsSignature&)",
    "insertText": "GetUpdateNavigationElementBoundsDelegate()"
  },
  {
    "label": "RegisterNavRelevantObjectDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FObjectBasedSignature&)",
    "insertText": "RegisterNavRelevantObjectDelegate()"
  },
  {
    "label": "UpdateNavRelevantObjectDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FObjectBasedSignature&)",
    "insertText": "UpdateNavRelevantObjectDelegate()"
  },
  {
    "label": "UnregisterNavRelevantObjectDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FObjectBasedSignature&)",
    "insertText": "UnregisterNavRelevantObjectDelegate()"
  },
  {
    "label": "OnObjectBoundsChangedDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FObjectBoundsChangedSignature&)",
    "insertText": "OnObjectBoundsChangedDelegate()"
  },
  {
    "label": "UpdateActorDataDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorBasedSignature&)",
    "insertText": "UpdateActorDataDelegate()"
  },
  {
    "label": "UpdateComponentDataDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorComponentBasedSignature&)",
    "insertText": "UpdateComponentDataDelegate()"
  },
  {
    "label": "UpdateComponentDataAfterMoveDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FSceneComponentBasedSignature&)",
    "insertText": "UpdateComponentDataAfterMoveDelegate()"
  },
  {
    "label": "OnActorBoundsChangedDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorBasedSignature&)",
    "insertText": "OnActorBoundsChangedDelegate()"
  },
  {
    "label": "OnPostEditActorMoveDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorBasedSignature&)",
    "insertText": "OnPostEditActorMoveDelegate()"
  },
  {
    "label": "OnComponentTransformChangedDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FSceneComponentBasedSignature&)",
    "insertText": "OnComponentTransformChangedDelegate()"
  },
  {
    "label": "OnActorRegisteredDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorBasedSignature&)",
    "insertText": "OnActorRegisteredDelegate()"
  },
  {
    "label": "OnActorUnregisteredDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorBasedSignature&)",
    "insertText": "OnActorUnregisteredDelegate()"
  },
  {
    "label": "OnComponentRegisteredDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorComponentBasedSignature&)",
    "insertText": "OnComponentRegisteredDelegate()"
  },
  {
    "label": "OnComponentUnregisteredDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorComponentBasedSignature&)",
    "insertText": "OnComponentUnregisteredDelegate()"
  },
  {
    "label": "RegisterComponentDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorComponentBasedSignature&)",
    "insertText": "RegisterComponentDelegate()"
  },
  {
    "label": "UnregisterComponentDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorComponentBasedSignature&)",
    "insertText": "UnregisterComponentDelegate()"
  },
  {
    "label": "RemoveActorDataDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorBasedSignature&)",
    "insertText": "RemoveActorDataDelegate()"
  },
  {
    "label": "HasComponentDataDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FBoolActorComponentBasedSignature&)",
    "insertText": "HasComponentDataDelegate()"
  },
  {
    "label": "GetDefaultSupportedAgentDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FNavDataConfigBasedSignature&)",
    "insertText": "GetDefaultSupportedAgentDelegate()"
  },
  {
    "label": "GetBiggestSupportedAgentDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FNavDataConfigAndWorldSignature&)",
    "insertText": "GetBiggestSupportedAgentDelegate()"
  },
  {
    "label": "UpdateActorAndComponentDataDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FActorBooleBasedSignature&)",
    "insertText": "UpdateActorAndComponentDataDelegate()"
  },
  {
    "label": "GetNavDataForActorDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FNavDataForActorSignature&)",
    "insertText": "GetNavDataForActorDelegate()"
  },
  {
    "label": "GetDefaultNavDataClassDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FNavDataClassFetchSignature&)",
    "insertText": "GetDefaultNavDataClassDelegate()"
  },
  {
    "label": "VerifyNavigationRenderingComponentsDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FWorldBoolBasedSignature&)",
    "insertText": "VerifyNavigationRenderingComponentsDelegate()"
  },
  {
    "label": "BuildDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FWorldBasedSignature&)",
    "insertText": "BuildDelegate()"
  },
  {
    "label": "OnComponentBoundsChangedDelegate()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS FNavigationSystem::FComponentBoundsChangeSignature&)",
    "insertText": "OnComponentBoundsChangedDelegate()"
  },
  {
    "label": "OnPIEStartDelegate()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS # if WITH_EDITOR FNavigationSystem::FWorldBasedSignature&)",
    "insertText": "OnPIEStartDelegate()"
  },
  {
    "label": "OnPIEEndDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FWorldBasedSignature&)",
    "insertText": "OnPIEEndDelegate()"
  },
  {
    "label": "UpdateLevelCollisionDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FLevelBasedSignature&)",
    "insertText": "UpdateLevelCollisionDelegate()"
  },
  {
    "label": "SetNavigationAutoUpdateEnableDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FNavigationAutoUpdateEnableSignature&)",
    "insertText": "SetNavigationAutoUpdateEnableDelegate()"
  },
  {
    "label": "AddNavigationUpdateLockDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FWorldByteBasedSignature&)",
    "insertText": "AddNavigationUpdateLockDelegate()"
  },
  {
    "label": "RemoveNavigationUpdateLockDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FWorldByteBasedSignature&)",
    "insertText": "RemoveNavigationUpdateLockDelegate()"
  },
  {
    "label": "GetWorldPartitionNavigationDataBuilderOverlapDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FDoubleWorldBasedSignature&)",
    "insertText": "GetWorldPartitionNavigationDataBuilderOverlapDelegate()"
  },
  {
    "label": "StopMovementDelegate()",
    "kind": "Method",
    "detail": "Function (# endif } ; class IPathFollowingManagerInterface { protected : FNavigationSystem::FControllerBasedSignature&)",
    "insertText": "StopMovementDelegate()"
  },
  {
    "label": "IsFollowingAPathDelegate()",
    "kind": "Method",
    "detail": "Function (FNavigationSystem::FBoolControllerBasedSignature&)",
    "insertText": "IsFollowingAPathDelegate()"
  }
]