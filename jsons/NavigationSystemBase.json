[
  {
    "label": "UNavigationSystemBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemBase"
  },
  {
    "label": "UNavigationSystemConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemConfig"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "INavigationDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationDataInterface"
  },
  {
    "label": "IPathFollowingAgentInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPathFollowingAgentInterface"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "UNavAreaBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavAreaBase"
  },
  {
    "label": "FNavigationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElement"
  },
  {
    "label": "FNavigationElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElementHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNavigationLockContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavigationLockContext"
  },
  {
    "label": "being",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "being"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UNavigationSystemBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemBase"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "IPathFollowingManagerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPathFollowingManagerInterface"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavigation, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavigationDataBuild, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavigationHistory, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavInvokers, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavLink, Warning, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAStar, Display, All)"
  },
  {
    "label": "LockUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockUpdates()"
  },
  {
    "label": "UnlockUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockUpdates()"
  },
  {
    "label": "AddNavigationSystemToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNavigationSystemToWorld(UWorld& WorldOwner, const FNavigationSystemRunMode RunMode = FNavigationSystemRunMode::InvalidMode, UNavigationSystemConfig* NavigationSystemConfig = nullptr, const bool bInitializeForWorld = true, const bool bOverridePreviousNavSys = false)"
  },
  {
    "label": "DiscardNavigationDataChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardNavigationDataChunks(UWorld& InWorld)"
  },
  {
    "label": "IsEditorRunMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorRunMode(const FNavigationSystemRunMode Mode)"
  },
  {
    "label": "UpdateActorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorData(AActor& Actor)"
  },
  {
    "label": "UpdateComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentData(UActorComponent& Comp)"
  },
  {
    "label": "UpdateActorAndComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorAndComponentData(AActor& Actor, bool bUpdateAttachedActors = true)"
  },
  {
    "label": "UpdateComponentDataAfterMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentDataAfterMove(USceneComponent& Comp)"
  },
  {
    "label": "HasComponentData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasComponentData(UActorComponent& Comp)"
  },
  {
    "label": "OnActorBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorBoundsChanged(AActor& Actor)"
  },
  {
    "label": "OnPostEditActorMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostEditActorMove(AActor& Actor)"
  },
  {
    "label": "OnComponentBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentBoundsChanged(UActorComponent& Comp, const FBox& NewBounds, const FBox& DirtyArea)"
  },
  {
    "label": "OnComponentTransformChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentTransformChanged(USceneComponent& Comp)"
  },
  {
    "label": "OnActorRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorRegistered(AActor& Actor)"
  },
  {
    "label": "OnActorUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorUnregistered(AActor& Actor)"
  },
  {
    "label": "OnComponentRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentRegistered(UActorComponent& Comp)"
  },
  {
    "label": "OnComponentUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentUnregistered(UActorComponent& Comp)"
  },
  {
    "label": "RegisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponent(UActorComponent& Comp)"
  },
  {
    "label": "UnregisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponent(UActorComponent& Comp)"
  },
  {
    "label": "RegisterNavRelevantObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavRelevantObject(UObject& Object)"
  },
  {
    "label": "UpdateNavRelevantObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavRelevantObject(UObject& Object)"
  },
  {
    "label": "UnregisterNavRelevantObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavRelevantObject(UObject& Object)"
  },
  {
    "label": "OnObjectBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectBoundsChanged(UObject& Object, const FBox& NewBounds, TConstArrayView<FBox> DirtyAreas)"
  },
  {
    "label": "AddNavigationElement()",
    "kind": "Method",
    "detail": "Function (FNavigationElementHandle)",
    "insertText": "AddNavigationElement(UWorld* World, FNavigationElement&& Element)"
  },
  {
    "label": "UpdateNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavigationElement(UWorld* World, FNavigationElementHandle ElementHandle, FNavigationElement&& Element)"
  },
  {
    "label": "RemoveNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNavigationElement(UWorld* World, FNavigationElementHandle ElementHandle)"
  },
  {
    "label": "OnNavigationElementBoundsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationElementBoundsChanged(UWorld* World, FNavigationElementHandle ElementHandle, const FBox& NewBounds, TConstArrayView<FBox> DirtyAreas)"
  },
  {
    "label": "RemoveActorData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorData(AActor& Actor)"
  },
  {
    "label": "HasComponentData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasComponentData(UActorComponent& Comp)"
  },
  {
    "label": "GetWorldPartitionNavigationDataBuilderOverlap()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetWorldPartitionNavigationDataBuilderOverlap(const UWorld& World)"
  },
  {
    "label": "GetDefaultWalkableArea()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UNavAreaBase>)",
    "insertText": "GetDefaultWalkableArea()"
  },
  {
    "label": "GetDefaultObstacleArea()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UNavAreaBase>)",
    "insertText": "GetDefaultObstacleArea()"
  },
  {
    "label": "WantsComponentChangeNotifies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsComponentChangeNotifies()"
  },
  {
    "label": "GetDefaultNavDataClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<AActor>)",
    "insertText": "GetDefaultNavDataClass()"
  },
  {
    "label": "VerifyNavigationRenderingComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyNavigationRenderingComponents(UWorld& World, const bool bShow)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(UWorld& World)"
  },
  {
    "label": "OnPIEStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPIEStart(UWorld& World)"
  },
  {
    "label": "OnPIEEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPIEEnd(UWorld& World)"
  },
  {
    "label": "SetNavigationAutoUpdateEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationAutoUpdateEnabled(const bool bNewEnable, UNavigationSystemBase* InNavigationSystem)"
  },
  {
    "label": "UpdateLevelCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelCollision(ULevel& Level)"
  },
  {
    "label": "IsFollowingAPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFollowingAPath(const AController& Controller)"
  },
  {
    "label": "StopMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMovement(const AController& Controller)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(UNavigationSystemBase::GetNavigableWorldBounds, return FBox(ForceInit)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(UNavigationSystemBase::ContainsNavData, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(UNavigationSystemBase::GetNavigableWorldBounds, return FBox(ForceInit)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(UNavigationSystemBase::IsWorldInitDone, return false;)"
  },
  {
    "label": "PURE_VIRTUAL()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "PURE_VIRTUAL(UNavigationSystemBase::ShouldCreateNavigationSystemInstance, return true;)"
  },
  {
    "label": "SetCoordTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCoordTransform(const ENavigationCoordSystem::Type FromCoordType, const ENavigationCoordSystem::Type ToCoordType, const FTransform& Transform, bool bAddInverse = true)"
  },
  {
    "label": "SetWantsComponentChangeNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWantsComponentChangeNotifies(const bool bEnable)"
  },
  {
    "label": "SetDefaultWalkableArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultWalkableArea(TSubclassOf<UNavAreaBase> InAreaClass)"
  },
  {
    "label": "SetDefaultObstacleArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultObstacleArea(TSubclassOf<UNavAreaBase> InAreaClass)"
  },
  {
    "label": "ResetEventDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEventDelegates()"
  }
]