[
  {
    "label": "vml_assign_traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "vml_assign_traits"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "StorageOrdersAgree()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ASSIGN_VML_H # define EIGEN_ASSIGN_VML_H namespace Eigen { namespace internal { template<Dst,Src> class vml_assign_traits { private : enum { DstHasDirectAccess = Dst::Flags& DirectAccessBit,SrcHasDirectAccess = Src::Flags& DirectAccessBit,)",
    "insertText": "StorageOrdersAgree(int(Dst::IsRowMajor) == int(Src::IsRowMajor)), InnerSize = int(Dst::IsVectorAtCompileTime) ? int(Dst::SizeAtCompileTime) : int(Dst::Flags)&RowMajorBit ? int(Dst::ColsAtCompileTime) : int(Dst::RowsAtCompileTime), InnerMaxSize = int(Dst::IsVectorAtCompileTime) ? int(Dst::MaxSizeAtCompileTime) : int(Dst::Flags)&RowMajorBit ? int(Dst::MaxColsAtCompileTime) : int(Dst::MaxRowsAtCompileTime), MaxSizeAtCompileTime = Dst::SizeAtCompileTime, MightEnableVml = StorageOrdersAgree && DstHasDirectAccess && SrcHasDirectAccess && Src::InnerStrideAtCompileTime==1 && Dst::InnerStrideAtCompileTime==1, MightLinearize = MightEnableVml && (int(Dst::Flags) & int(Src::Flags) & LinearAccessBit)"
  },
  {
    "label": "EIGEN_PP_EXPAND()",
    "kind": "Method",
    "detail": "Function (public : enum { EnableVml = MightEnableVml&& LargeEnough,Traversal = MightLinearize ? LinearTraversal : DefaultTraversal } ; } ; # define)",
    "insertText": "EIGEN_PP_EXPAND(ARG) ARG #if !defined (EIGEN_FAST_MATH) || (EIGEN_FAST_MATH != 1) #define EIGEN_VMLMODE_EXPAND_xLA , VML_HA #else #define EIGEN_VMLMODE_EXPAND_xLA , VML_LA #endif #define EIGEN_VMLMODE_EXPAND_x_ #define EIGEN_VMLMODE_PREFIX_xLA vm #define EIGEN_VMLMODE_PREFIX_x_ v #define EIGEN_VMLMODE_PREFIX(VMLMODE) EIGEN_CAT(EIGEN_VMLMODE_PREFIX_x,VMLMODE) #define EIGEN_MKL_VML_DECLARE_UNARY_CALL(EIGENOP, VMLOP, EIGENTYPE, VMLTYPE, VMLMODE)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ typedef CwiseUnaryOp<scalar_ # # EIGENOP # # _op<EIGENTYPE>,SrcXprNested> SrcXprType ; \\ void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const assign_op<EIGENTYPE,EIGENTYPE> &func)"
  },
  {
    "label": "resize_if_allowed()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "resize_if_allowed(dst, src, func)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(vml_assign_traits<DstXprType,SrcXprNested>::Traversal==LinearTraversal)"
  },
  {
    "label": "VMLOP()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VMLOP(dst.size(), (const VMLTYPE*)src.nestedExpression().data(), \\ (VMLTYPE*)dst.data() EIGEN_PP_EXPAND(EIGEN_VMLMODE_EXPAND_x##VMLMODE))"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ const Index outerSize = dst .)",
    "insertText": "outerSize()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(Index outer = 0; outer < outerSize; ++outer)"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (\\ const EIGENTYPE* src_ptr = src .)",
    "insertText": "IsRowMajor(src.nestedExpression().coeffRef(outer,0)) : \\ &(src.nestedExpression().coeffRef(0, outer))"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (\\ EIGENTYPE* dst_ptr = dst .)",
    "insertText": "IsRowMajor(dst.coeffRef(outer,0)) : &(dst.coeffRef(0, outer))"
  },
  {
    "label": "VMLOP()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VMLOP(dst.innerSize(), (const VMLTYPE*)src_ptr, \\ (VMLTYPE*)dst_ptr EIGEN_PP_EXPAND(EIGEN_VMLMODE_EXPAND_x##VMLMODE))"
  },
  {
    "label": "EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } \\ } ; \\ # define)",
    "insertText": "EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL(EIGENOP, VMLOP, VMLMODE) \\ EIGEN_MKL_VML_DECLARE_UNARY_CALL(EIGENOP, EIGEN_CAT(EIGEN_VMLMODE_PREFIX(VMLMODE),s##VMLOP), float, float, VMLMODE) \\ EIGEN_MKL_VML_DECLARE_UNARY_CALL(EIGENOP, EIGEN_CAT(EIGEN_VMLMODE_PREFIX(VMLMODE),d##VMLOP), double, double, VMLMODE) #define EIGEN_MKL_VML_DECLARE_UNARY_CALLS_CPLX(EIGENOP, VMLOP, VMLMODE) \\ EIGEN_MKL_VML_DECLARE_UNARY_CALL(EIGENOP, EIGEN_CAT(EIGEN_VMLMODE_PREFIX(VMLMODE),c##VMLOP), scomplex, MKL_Complex8, VMLMODE) \\ EIGEN_MKL_VML_DECLARE_UNARY_CALL(EIGENOP, EIGEN_CAT(EIGEN_VMLMODE_PREFIX(VMLMODE),z##VMLOP), dcomplex, MKL_Complex16, VMLMODE) #define EIGEN_MKL_VML_DECLARE_UNARY_CALLS(EIGENOP, VMLOP, VMLMODE) \\ EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL(EIGENOP, VMLOP, VMLMODE) \\ EIGEN_MKL_VML_DECLARE_UNARY_CALLS_CPLX(EIGENOP, VMLOP, VMLMODE) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(sin, Sin, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(asin, Asin, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(sinh, Sinh, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(cos, Cos, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(acos, Acos, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(cosh, Cosh, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(tan, Tan, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(atan, Atan, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(tanh, Tanh, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(exp, Exp, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(log, Ln, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(log10, Log10, LA) EIGEN_MKL_VML_DECLARE_UNARY_CALLS(sqrt, Sqrt, _) EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL(square, Sqr, _) EIGEN_MKL_VML_DECLARE_UNARY_CALLS_CPLX(arg, Arg, _) EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL(round, Round, _) EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL(floor, Floor, _) EIGEN_MKL_VML_DECLARE_UNARY_CALLS_REAL(ceil, Ceil, _) #define EIGEN_MKL_VML_DECLARE_POW_CALL(EIGENOP, VMLOP, EIGENTYPE, VMLTYPE, VMLMODE)"
  },
  {
    "label": "VMLTYPE()",
    "kind": "Method",
    "detail": "Function (\\ VMLTYPE exponent = reinterpret_cast<const)",
    "insertText": "VMLTYPE(src.rhs().functor().m_other)"
  },
  {
    "label": "VMLOP()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VMLOP(dst.size(), (const VMLTYPE*)src.lhs().data(), exponent, \\ (VMLTYPE*)dst.data() EIGEN_PP_EXPAND(EIGEN_VMLMODE_EXPAND_x##VMLMODE))"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (\\ const EIGENTYPE* src_ptr = src .)",
    "insertText": "IsRowMajor(src.lhs().coeffRef(outer,0)) : \\ &(src.lhs().coeffRef(0, outer))"
  },
  {
    "label": "VMLOP()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VMLOP(dst.innerSize(), (const VMLTYPE*)src_ptr, exponent, \\ (VMLTYPE*)dst_ptr EIGEN_PP_EXPAND(EIGEN_VMLMODE_EXPAND_x##VMLMODE))"
  }
]