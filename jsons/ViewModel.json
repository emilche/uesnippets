[
  {
    "label": "FSharedViewModelData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedViewModelData"
  },
  {
    "label": "FParentFirstChildIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParentFirstChildIterator"
  },
  {
    "label": "FParentModelIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParentModelIterator"
  },
  {
    "label": "FViewModelIterationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelIterationState"
  },
  {
    "label": "FViewModelListIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelListIterator"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "implementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implementation"
  },
  {
    "label": "implementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implementation"
  },
  {
    "label": "implementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implementation"
  },
  {
    "label": "implementation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implementation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FViewModel, FDynamicExtensionContainer)"
  },
  {
    "label": "SetSharedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSharedData(TSharedPtr<FSharedViewModelData> InSharedData)"
  },
  {
    "label": "FindChildList()",
    "kind": "Method",
    "detail": "Function (TOptional<FViewModelChildren>)",
    "insertText": "FindChildList(EViewModelListType InType)"
  },
  {
    "label": "GetChildList()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetChildList(EViewModelListType InType)"
  },
  {
    "label": "RemoveFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromParent()"
  },
  {
    "label": "DiscardAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardAllChildren()"
  },
  {
    "label": "RegisterChildList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterChildList(FViewModelListHead* InChildren)"
  },
  {
    "label": "GetChildrenForList()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetChildrenForList(FViewModelListHead* ListHead)"
  },
  {
    "label": "SetParentOnly()",
    "kind": "Method",
    "detail": "Function (ESetParentResult)",
    "insertText": "SetParentOnly(const TSharedPtr<FViewModel>& NewParent, bool bReportChanges = true)"
  }
]