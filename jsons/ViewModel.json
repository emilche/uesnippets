[
  {
    "label": "FSharedViewModelData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedViewModelData"
  },
  {
    "label": "FParentFirstChildIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParentFirstChildIterator"
  },
  {
    "label": "FParentModelIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParentModelIterator"
  },
  {
    "label": "FViewModelIterationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelIterationState"
  },
  {
    "label": "FViewModelListIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelListIterator"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FViewModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" HAL / Platform . h \" # include \" MVVM / Extensions / DynamicExtensionContainer . h \" # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" Misc / Optional . h \" # include \" SequencerCoreFwd . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" namespace UE { namespace Sequencer { class FSharedViewModelData ; struct FParentFirstChildIterator ; struct FParentModelIterator ; struct FViewModelIterationState ; struct FViewModelListIterator ; class FViewModel : public ICastable,public TSharedFromThis<FViewModel>,public FDynamicExtensionContainer { public :)",
    "insertText": "FViewModel()"
  },
  {
    "label": "FViewModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewModel(const FViewModel&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FViewModel&)",
    "insertText": "operator(const FViewModel&)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FViewModel, FDynamicExtensionContainer)"
  },
  {
    "label": "AddDynamicExtension()",
    "kind": "Method",
    "detail": "Function (template<T,. . . InArgTypes> T&)",
    "insertText": "AddDynamicExtension(InArgTypes&&... Args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* StaticImpl = this -> CastThis<)",
    "insertText": "T()"
  },
  {
    "label": "AddDynamicExtension()",
    "kind": "Method",
    "detail": "Function (; } template<T,. . . InArgTypes> T&)",
    "insertText": "AddDynamicExtension(const TViewModelTypeID<T>& TypeID, InArgTypes&&... Args)"
  },
  {
    "label": "CastThisShared()",
    "kind": "Method",
    "detail": "Function (} template<T> TViewModelPtr<T>)",
    "insertText": "CastThisShared()"
  },
  {
    "label": "CastThisSharedChecked()",
    "kind": "Method",
    "detail": "Function (} template<T> TSharedPtr<T>)",
    "insertText": "CastThisSharedChecked()"
  },
  {
    "label": "GetHierarchicalDepth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetHierarchicalDepth()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (int32 Depth = 0 ; TSharedPtr<FViewModel> Parent = WeakParent .)",
    "insertText": "Pin()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} return Depth ; } FViewModelPtr)",
    "insertText": "GetParent()"
  },
  {
    "label": "CastParent()",
    "kind": "Method",
    "detail": "Function (template<T> TViewModelPtr<T>)",
    "insertText": "CastParent()"
  },
  {
    "label": "GetRoot()",
    "kind": "Method",
    "detail": "Function (} FViewModelPtr)",
    "insertText": "GetRoot()"
  },
  {
    "label": "GetModelID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetModelID()"
  },
  {
    "label": "GetSharedData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSharedViewModelData>)",
    "insertText": "GetSharedData()"
  },
  {
    "label": "SetSharedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSharedData(TSharedPtr<FSharedViewModelData> InSharedData)"
  },
  {
    "label": "FindChildList()",
    "kind": "Method",
    "detail": "Function (TOptional<FViewModelChildren>)",
    "insertText": "FindChildList(EViewModelListType InType)"
  },
  {
    "label": "GetChildList()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetChildList(EViewModelListType InType)"
  },
  {
    "label": "HasChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChildren()"
  },
  {
    "label": "GetPreviousSibling()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "GetPreviousSibling()"
  },
  {
    "label": "GetNextSibling()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FViewModel>)",
    "insertText": "GetNextSibling()"
  },
  {
    "label": "RemoveFromParent()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RemoveFromParent()"
  },
  {
    "label": "DiscardAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardAllChildren()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (public : FViewModelListIterator)",
    "insertText": "GetChildren(EViewModelListType InFilter = EViewModelListType::Everything)"
  },
  {
    "label": "GetChildrenOfType()",
    "kind": "Method",
    "detail": "Function (template<T> TViewModelListIterator<T>)",
    "insertText": "GetChildrenOfType(EViewModelListType InFilter = EViewModelListType::Everything)"
  },
  {
    "label": "GetDescendants()",
    "kind": "Method",
    "detail": "Function (} FParentFirstChildIterator)",
    "insertText": "GetDescendants(bool bIncludeThis = false, EViewModelListType InFilter = EViewModelListType::Everything)"
  },
  {
    "label": "GetDescendantsOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDescendantsOfType(FViewModelTypeID Type, TArray<TSharedPtr<FViewModel>>& OutChildren, EViewModelListType InFilter = EViewModelListType::Everything)"
  },
  {
    "label": "GetDescendantsOfType()",
    "kind": "Method",
    "detail": "Function (template<T> TParentFirstChildIterator<T>)",
    "insertText": "GetDescendantsOfType(bool bIncludeThis = false, EViewModelListType InFilter = EViewModelListType::Everything)"
  },
  {
    "label": "FindAncestorOfType()",
    "kind": "Method",
    "detail": "Function (} template<T> TViewModelPtr<T>)",
    "insertText": "FindAncestorOfType(bool bIncludeThis = false)"
  },
  {
    "label": "FindAncestorOfTypes()",
    "kind": "Method",
    "detail": "Function (FViewModelPtr)",
    "insertText": "FindAncestorOfTypes(TArrayView<const FViewModelTypeID> Types, bool bIncludeThis = false)"
  },
  {
    "label": "GetAncestors()",
    "kind": "Method",
    "detail": "Function (FParentModelIterator)",
    "insertText": "GetAncestors(bool bIncludeThis = false)"
  },
  {
    "label": "GetAncestorsOfType()",
    "kind": "Method",
    "detail": "Function (template<T> TParentModelIterator<T>)",
    "insertText": "GetAncestorsOfType(bool bIncludeThis = false)"
  },
  {
    "label": "RegisterChildList()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "RegisterChildList(FViewModelListHead* InChildren)"
  },
  {
    "label": "GetChildrenForList()",
    "kind": "Method",
    "detail": "Function (FViewModelChildren)",
    "insertText": "GetChildrenForList(FViewModelListHead* ListHead)"
  },
  {
    "label": "SetParentOnly()",
    "kind": "Method",
    "detail": "Function (private : enum class ESetParentResult { AlreadySameParent,ChangedParent,ClearedParent,} ; ESetParentResult)",
    "insertText": "SetParentOnly(const TSharedPtr<FViewModel>& NewParent, bool bReportChanges = true)"
  },
  {
    "label": "OnConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConstruct()"
  },
  {
    "label": "OnDestruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDestruct()"
  }
]