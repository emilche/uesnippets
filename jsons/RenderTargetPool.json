[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FRenderTargetPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRenderTargetPool"
  },
  {
    "label": "FPooledRenderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPooledRenderTarget"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FVisualizeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualizeTexture"
  },
  {
    "label": "FVisualizeTexturePresent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualizeTexturePresent"
  },
  {
    "label": "FPooledRenderTarget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformAtomics . h \" # include \" RHI . h \" # include \" RenderGraphDefinitions . h \" # include \" RenderGraphResources . h \" # include \" RenderResource . h \" # include \" RendererInterface . h \" # include \" Templates / RefCounting . h \" # include \" Async / RecursiveMutex . h \" class FOutputDevice ; class FRHICommandList ; class FRenderTargetPool ; struct FPooledRenderTarget final : public IPooledRenderTarget {)",
    "insertText": "FPooledRenderTarget(FRHITexture* Texture, const FPooledRenderTargetDesc& InDesc, FRenderTargetPool* InRenderTargetPool) : RenderTargetPool(InRenderTargetPool) , Desc(InDesc) , PooledTexture(Texture)"
  },
  {
    "label": "GetUnusedForNFrames()",
    "kind": "Method",
    "detail": "Function (RenderTargetItem . TargetableTexture = RenderTargetItem . ShaderResourceTexture = Texture ; } uint32)",
    "insertText": "GetUnusedForNFrames()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (const int32 Refs =)",
    "insertText": "InterlockedDecrement(&NumRefs)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (delete this ; } return)",
    "insertText": "uint32(Refs)"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "IsFree()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFree()"
  },
  {
    "label": "IsTracked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTracked()"
  },
  {
    "label": "SetDebugLabelName()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetDebugLabelName(FRHICommandListBase& RHICmdList, const TCHAR* Name)"
  },
  {
    "label": "OnFrameStart()",
    "kind": "Method",
    "detail": "Function (FRenderTargetPool* RenderTargetPool ; FPooledRenderTargetDesc Desc ; int32 NumRefs = 0 ; uint32 UnusedForNFrames = 0 ; FRDGPooledTexture PooledTexture ; bool)",
    "insertText": "OnFrameStart()"
  },
  {
    "label": "FRenderTargetPool()",
    "kind": "Method",
    "detail": "Function (class FRDGTexture ; class FRDGBuilder ; class FRenderTargetPool ; } ; class FRenderTargetPool : public FRenderResource { public :)",
    "insertText": "FRenderTargetPool()"
  },
  {
    "label": "FindFreeElement()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IPooledRenderTarget>)",
    "insertText": "FindFreeElement(FRHICommandListBase& RHICmdList, FRHITextureCreateInfo Desc, const TCHAR* Name)"
  },
  {
    "label": "FindFreeElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindFreeElement(FRHICommandListBase& RHICmdList, const FRHITextureCreateInfo& Desc, TRefCountPtr<IPooledRenderTarget>& Out, const TCHAR* Name)"
  },
  {
    "label": "FindFreeElement()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IPooledRenderTarget>)",
    "insertText": "FindFreeElement(FRHITextureCreateInfo Desc, const TCHAR* Name)"
  },
  {
    "label": "FindFreeElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindFreeElement(const FRHITextureCreateInfo& Desc, TRefCountPtr<IPooledRenderTarget>& Out, const TCHAR* Name)"
  },
  {
    "label": "FindFreeElement()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindFreeElement(FRHICommandListBase& RHICmdList, const FPooledRenderTargetDesc& Desc, TRefCountPtr<IPooledRenderTarget>& Out, const TCHAR* InDebugName)"
  },
  {
    "label": "CreateUntrackedElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateUntrackedElement(const FPooledRenderTargetDesc& Desc, TRefCountPtr<IPooledRenderTarget>& Out, const FSceneRenderTargetItem& Item)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(uint32& OutWholeCount, uint32& OutWholePoolInKB, uint32& OutUsedInKB)"
  },
  {
    "label": "TickPoolElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickPoolElements()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "FreeUnusedResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeUnusedResource(TRefCountPtr<IPooledRenderTarget>& In)"
  },
  {
    "label": "FreeUnusedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeUnusedResources()"
  },
  {
    "label": "GetElementById()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTarget*)",
    "insertText": "GetElementById(uint32 Id)"
  },
  {
    "label": "GetElementCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetElementCount()"
  },
  {
    "label": "FindIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindIndex(IPooledRenderTarget* In)"
  },
  {
    "label": "DumpMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMemoryUsage(FOutputDevice& OutputDevice)"
  },
  {
    "label": "FreeElementAtIndex()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FreeElementAtIndex(int32 Index)"
  },
  {
    "label": "CreateRenderTarget()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTarget*)",
    "insertText": "CreateRenderTarget(FRHICommandListBase& RHICmdList, const FRHITextureCreateInfo& Desc, uint32 DescHash, const TCHAR* Name)"
  },
  {
    "label": "TryFindRenderTarget()",
    "kind": "Method",
    "detail": "Function (template<T> FPooledRenderTarget*)",
    "insertText": "TryFindRenderTarget(const FRHITextureCreateInfo& Desc, uint32 DescHash, T&& Predicate)"
  },
  {
    "label": "TryFindRenderTarget()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTarget*)",
    "insertText": "TryFindRenderTarget(const FRHITextureCreateInfo& Desc, uint32 DescHash)"
  },
  {
    "label": "ScheduleAllocation()",
    "kind": "Method",
    "detail": "Function (} FPooledRenderTarget*)",
    "insertText": "ScheduleAllocation(FRHICommandListBase& RHICmdList, FRHITextureCreateInfo Desc, const TCHAR* Name, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "ScheduleDeallocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDeallocation(FPooledRenderTarget* RenderTarget, const FRHITransientAllocationFences& Fences)"
  },
  {
    "label": "FinishSchedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishSchedule(FRHICommandListBase& RHICmdList, FPooledRenderTarget* RenderTarget, const TCHAR* Name)"
  },
  {
    "label": "CompactPool()",
    "kind": "Method",
    "detail": "Function (UE::FRecursiveMutex Mutex ; TArray<uint32> PooledRenderTargetHashes ; TArray<TRefCountPtr<FPooledRenderTarget>> PooledRenderTargets ; TArray<TRefCountPtr<FPooledRenderTarget>> DeferredDeleteArray ; uint32 AllocationLevelInKB = 0 ; bool bCurrentlyOverBudget = false ; void)",
    "insertText": "CompactPool()"
  }
]