[
  {
    "label": "UBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendSpace"
  },
  {
    "label": "FAnimNode_BlendSpacePlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_BlendSpacePlayerBase"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FAnimNode_BlendSpacePlayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_BlendSpacePlayer"
  },
  {
    "label": "UAnimGraphNode_BlendSpaceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_BlendSpaceBase"
  },
  {
    "label": "UAnimGraphNode_BlendSpacePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_BlendSpacePlayer"
  },
  {
    "label": "UAnimGraphNode_BlendSpaceEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_BlendSpaceEvaluator"
  },
  {
    "label": "UAnimGraphNode_RotationOffsetBlendSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_RotationOffsetBlendSpace"
  },
  {
    "label": "UAnimGraphNode_AimOffsetLookAt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_AimOffsetLookAt"
  },
  {
    "label": "FAnimNode_BlendSpacePlayer_Standalone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_BlendSpacePlayer_Standalone"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimNode_AssetPlayerBase . h \" # include \" AnimNode_BlendSpacePlayer . generated . h \" class UBlendSpace ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetCurrentAssetTime()",
    "kind": "Method",
    "detail": "Function (public : float)",
    "insertText": "GetCurrentAssetTime()"
  },
  {
    "label": "GetCurrentAssetTimePlayRateAdjusted()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentAssetTimePlayRateAdjusted()"
  },
  {
    "label": "GetCurrentAssetLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentAssetLength()"
  },
  {
    "label": "GetAnimAsset()",
    "kind": "Method",
    "detail": "Function (UAnimationAsset*)",
    "insertText": "GetAnimAsset()"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "UpdateAssetPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAssetPlayer(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "GetTimeFromEnd()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTimeFromEnd(float CurrentTime)"
  },
  {
    "label": "GetFilteredPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetFilteredPosition()"
  },
  {
    "label": "SnapToPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SnapToPosition(const FVector& NewPosition)"
  },
  {
    "label": "GetBlendSpace()",
    "kind": "Method",
    "detail": "Function (public : UBlendSpace*)",
    "insertText": "GetBlendSpace() const PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::GetBlendSpace, return nullptr;)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPosition() const PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::GetPosition, return FVector::Zero();)"
  },
  {
    "label": "GetStartPosition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStartPosition() const PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::GetStartPosition, return 0.0f;)"
  },
  {
    "label": "GetPlayRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPlayRate() const PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::GetPlayRate, return 1.0f;)"
  },
  {
    "label": "ShouldResetPlayTimeWhenBlendSpaceChanges()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldResetPlayTimeWhenBlendSpaceChanges() const PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::ShouldResetPlayTimeWhenBlendSpaceChanges, return true;)"
  },
  {
    "label": "SetResetPlayTimeWhenBlendSpaceChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetResetPlayTimeWhenBlendSpaceChanges(bool bReset) PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::SetResetPlayTimeWhenBlendSpaceChanges, return false;)"
  },
  {
    "label": "ShouldTeleportToTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTeleportToTime()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPosition(FVector InPosition) PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::SetPosition, return false;)"
  },
  {
    "label": "SetPlayRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlayRate(float InPlayRate) PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::SetPlayRate, return false;)"
  },
  {
    "label": "SetLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLoop(bool bInLoop) PURE_VIRTUAL(FAnimNode_BlendSpacePlayerBase::SetLoop, return false;)"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateInternal(const FAnimationUpdateContext& Context)"
  },
  {
    "label": "Reinitialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Reinitialize(bool bResetTime = true)"
  },
  {
    "label": "GetHighestWeightedSample()",
    "kind": "Method",
    "detail": "Function (const FBlendSampleData*)",
    "insertText": "GetHighestWeightedSample()"
  },
  {
    "label": "GetGroupName()",
    "kind": "Method",
    "detail": "Function (public : FName)",
    "insertText": "GetGroupName()"
  },
  {
    "label": "GetGroupRole()",
    "kind": "Method",
    "detail": "Function (EAnimGroupRole::Type)",
    "insertText": "GetGroupRole()"
  },
  {
    "label": "GetGroupMethod()",
    "kind": "Method",
    "detail": "Function (EAnimSyncMethod)",
    "insertText": "GetGroupMethod()"
  },
  {
    "label": "GetIgnoreForRelevancyTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIgnoreForRelevancyTest()"
  },
  {
    "label": "IsLooping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLooping()"
  },
  {
    "label": "SetGroupName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGroupName(FName InGroupName)"
  },
  {
    "label": "SetGroupRole()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGroupRole(EAnimGroupRole::Type InRole)"
  },
  {
    "label": "SetGroupMethod()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGroupMethod(EAnimSyncMethod InMethod)"
  },
  {
    "label": "SetIgnoreForRelevancyTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIgnoreForRelevancyTest(bool bInIgnoreForRelevancyTest)"
  },
  {
    "label": "GetBlendSpace()",
    "kind": "Method",
    "detail": "Function (UBlendSpace*)",
    "insertText": "GetBlendSpace()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPosition()"
  },
  {
    "label": "GetStartPosition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStartPosition()"
  },
  {
    "label": "GetPlayRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPlayRate()"
  },
  {
    "label": "ShouldResetPlayTimeWhenBlendSpaceChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldResetPlayTimeWhenBlendSpaceChanges()"
  },
  {
    "label": "SetResetPlayTimeWhenBlendSpaceChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetResetPlayTimeWhenBlendSpaceChanges(bool bReset)"
  },
  {
    "label": "SetBlendSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBlendSpace(UBlendSpace* InBlendSpace)"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPosition(FVector InPosition)"
  },
  {
    "label": "SetPlayRate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPlayRate(float InPlayRate)"
  },
  {
    "label": "SetLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLoop(bool bInLoop)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() private: UPROPERTY(EditAnywhere, Category = Sync)"
  },
  {
    "label": "SetOverridePositionWhenJoiningSyncGroupAsLeader()",
    "kind": "Method",
    "detail": "Function (Method = InMethod ; return true ; } bool)",
    "insertText": "SetOverridePositionWhenJoiningSyncGroupAsLeader(bool InOverridePositionWhenJoiningSyncGroupAsLeader)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (X = static_cast<)",
    "insertText": "float(InPosition[0])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Y = static_cast<)",
    "insertText": "float(InPosition[1])"
  }
]