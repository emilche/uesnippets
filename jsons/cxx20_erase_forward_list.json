[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "EraseIf()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_CXX20_ERASE_FORWARD_LIST_H_ # define BASE_CONTAINERS_CXX20_ERASE_FORWARD_LIST_H_ # include<forward_list> # include<iterator> namespace base { template<class T,class Allocator,class Predicate> size_t)",
    "insertText": "EraseIf(std::forward_list<T, Allocator>& container, Predicate pred)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (size_t old_size =)",
    "insertText": "distance(container.begin(), container.end())"
  },
  {
    "label": "remove_if()",
    "kind": "Method",
    "detail": "Function (container .)",
    "insertText": "remove_if(pred)"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (} template<class T,class Allocator,class Value> size_t)",
    "insertText": "Erase(std::forward_list<T, Allocator>& container, const Value& value)"
  }
]