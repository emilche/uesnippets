[
  {
    "label": "WatchHangsInScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WatchHangsInScope"
  },
  {
    "label": "HangWatchState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HangWatchState"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "WatchStateCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WatchStateCopy"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "this",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "this"
  },
  {
    "label": "it",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "it"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "WatchHangsInScope()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "WatchHangsInScope(TimeDelta timeout = kDefaultHangWatchTime)"
  },
  {
    "label": "CreateHangWatcherInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateHangWatcherInstance()"
  },
  {
    "label": "InitializeOnMainThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOnMainThread(ProcessType process_type)"
  },
  {
    "label": "UnitializeOnMainThreadForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnitializeOnMainThreadForTesting()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsThreadPoolHangWatchingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThreadPoolHangWatchingEnabled()"
  },
  {
    "label": "IsIOThreadHangWatchingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIOThreadHangWatchingEnabled()"
  },
  {
    "label": "IsCrashReportingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCrashReportingEnabled()"
  },
  {
    "label": "InvalidateActiveExpectations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateActiveExpectations()"
  },
  {
    "label": "RegisterThread()",
    "kind": "Method",
    "detail": "Function (ScopedClosureRunner)",
    "insertText": "RegisterThread(\n      ThreadType thread_type)"
  },
  {
    "label": "SetAfterMonitorClosureForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAfterMonitorClosureForTesting(base::RepeatingClosure closure)"
  },
  {
    "label": "SetOnHangClosureForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnHangClosureForTesting(base::RepeatingClosure closure)"
  },
  {
    "label": "SetMonitoringPeriodForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMonitoringPeriodForTesting(base::TimeDelta period)"
  },
  {
    "label": "SignalMonitorEventForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalMonitorEventForTesting()"
  },
  {
    "label": "StopMonitoringForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMonitoringForTesting()"
  },
  {
    "label": "SetTickClockForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickClockForTesting(const base::TickClock* tick_clock)"
  },
  {
    "label": "BlockIfCaptureInProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockIfCaptureInProgress()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "OnMemoryPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMemoryPressure(\n      base::MemoryPressureListener::MemoryPressureLevel memory_pressure_level)"
  },
  {
    "label": "GetTimeSinceLastCriticalMemoryPressureCrashKey()",
    "kind": "Method",
    "detail": "Function (debug::ScopedCrashKeyString)",
    "insertText": "GetTimeSinceLastCriticalMemoryPressureCrashKey()"
  },
  {
    "label": "RecordHang()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordHang()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const HangWatchStates& watch_states,\n              base::TimeTicks deadline_ignore_threshold)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (watch_states_)",
    "insertText": "GUARDED_BY(watch_state_lock_)"
  },
  {
    "label": "GUARDED_BY_CONTEXT()",
    "kind": "Method",
    "detail": "Function (watch_state_snapshot_)",
    "insertText": "GUARDED_BY_CONTEXT(hang_watcher_thread_checker_)"
  },
  {
    "label": "ACQUIRED_AFTER()",
    "kind": "Method",
    "detail": "Function (capture_lock_)",
    "insertText": "ACQUIRED_AFTER(watch_state_lock_)"
  },
  {
    "label": "IsFlagSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlagSet(Flag flag, uint64_t flags)"
  },
  {
    "label": "SetDeadline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeadline(TimeTicks new_value)"
  },
  {
    "label": "SetShouldBlockOnHang()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetShouldBlockOnHang(uint64_t old_flags, TimeTicks old_deadline)"
  },
  {
    "label": "SetIgnoreCurrentWatchHangsInScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreCurrentWatchHangsInScope()"
  },
  {
    "label": "UnsetIgnoreCurrentWatchHangsInScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetIgnoreCurrentWatchHangsInScope()"
  },
  {
    "label": "ResetSwitchBitsClosureForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSwitchBitsClosureForTesting()"
  },
  {
    "label": "SwitchBitsForTesting()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "SwitchBitsForTesting()"
  },
  {
    "label": "SetPersistentFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPersistentFlag(Flag flag)"
  },
  {
    "label": "ClearPersistentFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPersistentFlag(Flag flag)"
  },
  {
    "label": "DeadlineFromBits()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "DeadlineFromBits(uint64_t bits)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "Max()"
  },
  {
    "label": "ExtractFlags()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ExtractFlags(uint64_t bits)"
  },
  {
    "label": "ExtractDeadline()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ExtractDeadline(uint64_t bits)"
  },
  {
    "label": "HangWatchState()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "HangWatchState(HangWatcher::ThreadType thread_type)"
  },
  {
    "label": "CreateHangWatchStateForCurrentThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HangWatchState>)",
    "insertText": "CreateHangWatchStateForCurrentThread(\n      HangWatcher::ThreadType thread_type)"
  },
  {
    "label": "SetDeadline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeadline(TimeTicks deadline)"
  },
  {
    "label": "SetIgnoreCurrentWatchHangsInScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreCurrentWatchHangsInScope()"
  },
  {
    "label": "UnsetIgnoreCurrentWatchHangsInScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetIgnoreCurrentWatchHangsInScope()"
  },
  {
    "label": "SetShouldBlockOnHang()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetShouldBlockOnHang(uint64_t old_flags, TimeTicks old_deadline)"
  },
  {
    "label": "IsFlagSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFlagSet(HangWatchDeadline::Flag flag)"
  },
  {
    "label": "SetCurrentWatchHangsInScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWatchHangsInScope(WatchHangsInScope* scope)"
  },
  {
    "label": "IncrementNestingLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementNestingLevel()"
  },
  {
    "label": "DecrementNestingLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementNestingLevel()"
  }
]