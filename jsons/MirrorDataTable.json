[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMirrorTableRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMirrorTableRow"
  },
  {
    "label": "FMirrorFindReplaceExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMirrorFindReplaceExpression"
  },
  {
    "label": "UMirrorDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorDataTable"
  },
  {
    "label": "UMirrorDataTableFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorDataTableFactory"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Engine / DataTable . h \" # include \" BoneContainer . h \" # include \" CustomBoneIndexArray . h \" # include \" MirrorDataTable . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Prefix,Suffix,RegularExpression } ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Mirroring)"
  },
  {
    "label": "FMirrorTableRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMirrorTableRow() : Name(NAME_None) , MirroredName(NAME_None) , MirrorEntryType(EMirrorRowType::Bone)"
  },
  {
    "label": "FMirrorTableRow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMirrorTableRow(const FMirrorTableRow& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMirrorTableRow&)",
    "insertText": "operator(FMirrorTableRow const& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category = Mirroring)"
  },
  {
    "label": "FMirrorFindReplaceExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMirrorFindReplaceExpression() : FindExpression(NAME_None) , ReplaceExpression(NAME_None) , FindReplaceMethod(EMirrorFindReplaceMethod::Prefix)"
  },
  {
    "label": "FMirrorFindReplaceExpression()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMirrorFindReplaceExpression(FName InFindExpression, FName InReplaceExpression, EMirrorFindReplaceMethod::Type Method) : FindExpression(InFindExpression) , ReplaceExpression(InReplaceExpression) , FindReplaceMethod(Method)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(MinimalAPI, BlueprintType, hideCategories = (ImportOptions, ImportSource))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UMirrorDataTable()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UMirrorDataTable(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetSettingsMirrorName()",
    "kind": "Method",
    "detail": "Function (# endif FName)",
    "insertText": "GetSettingsMirrorName(FName InName)"
  },
  {
    "label": "GetMirrorName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMirrorName(FName InName, const TArray<FMirrorFindReplaceExpression>& MirrorFindReplaceExpressions)"
  },
  {
    "label": "FillCompactPoseMirrorBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillCompactPoseMirrorBones(const FBoneContainer& BoneContainer, const TCustomBoneIndexArray<FSkeletonPoseBoneIndex, FSkeletonPoseBoneIndex>& MirrorBoneIndexes, TCustomBoneIndexArray<FCompactPoseBoneIndex, FCompactPoseBoneIndex>& OutCompactPoseMirrorBones)"
  },
  {
    "label": "FillMirrorBoneIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillMirrorBoneIndexes(const USkeleton* Skeleton, TCustomBoneIndexArray<FSkeletonPoseBoneIndex, FSkeletonPoseBoneIndex>& OutMirrorBoneIndexes)"
  },
  {
    "label": "FillCompactPoseAndComponentRefRotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillCompactPoseAndComponentRefRotations(const FBoneContainer& BoneContainer, TCustomBoneIndexArray<FCompactPoseBoneIndex, FCompactPoseBoneIndex>& OutCompactPoseMirrorBones, TCustomBoneIndexArray<FQuat, FCompactPoseBoneIndex>& OutComponentSpaceRefRotations)"
  },
  {
    "label": "FindReplaceMirroredNames()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "FindReplaceMirroredNames()"
  },
  {
    "label": "FindReplace()",
    "kind": "Method",
    "detail": "Function (# endif FName)",
    "insertText": "FindReplace(FName InName)"
  },
  {
    "label": "FindBestMirroredBone()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindBestMirroredBone(const FName InBoneName, const FReferenceSkeleton& InRefSkeleton, EAxis::Type InMirrorAxis, const float SearchThreshold = 2.0f)"
  },
  {
    "label": "FillMirrorArrays()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FName> CurveToMirrorCurveMap ; TMap<FName,FName> AnimNotifyToMirrorAnimNotifyMap ; TMap<FName,FName> SyncToMirrorSyncMap ; protected : void)",
    "insertText": "FillMirrorArrays()"
  }
]