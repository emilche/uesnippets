[
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FMonitoredProcess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMonitoredProcess"
  },
  {
    "label": "FSerializedUATProcess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSerializedUATProcess"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Runnable . h \" # include \" Misc / DateTime . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" Misc / Timespan . h \" class FRunnableThread ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnMonitoredProcessCompleted, int32) DECLARE_DELEGATE_OneParam(FOnMonitoredProcessOutput, FString)"
  },
  {
    "label": "FMonitoredProcess()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMonitoredProcess(const FString& InURL, const FString& InParams, bool InHidden, bool InCreatePipes = true)"
  },
  {
    "label": "FMonitoredProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMonitoredProcess(const FString& InURL, const FString& InParams, const FString& InWorkingDir, bool InHidden, bool InCreatePipes = true)"
  },
  {
    "label": "FMonitoredProcess()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMonitoredProcess()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Cancel(bool InKillTree = false)"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (Canceling = true ; KillTree = InKillTree ; } FTimespan)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetProcessHandle()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "GetProcessHandle()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Update()"
  },
  {
    "label": "Launch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Launch()"
  },
  {
    "label": "SetSleepInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSleepInterval(float InSleepInterval)"
  },
  {
    "label": "OnCanceled()",
    "kind": "Method",
    "detail": "Function (SleepInterval = InSleepInterval ; } public : FSimpleDelegate&)",
    "insertText": "OnCanceled()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Exit()"
  },
  {
    "label": "GetSingleThreadInterface()",
    "kind": "Method",
    "detail": "Function (} FSingleThreadRunnable*)",
    "insertText": "GetSingleThreadInterface()"
  },
  {
    "label": "ProcessOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessOutput(const FString& Output)"
  },
  {
    "label": "TickInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "TickInternal()"
  },
  {
    "label": "TSAN_ATOMIC()",
    "kind": "Method",
    "detail": "Function (bool Canceling = false ; FDateTime EndTime ; bool Hidden = false ; bool KillTree = false ; FString Params ; FProcHandle ProcessHandle ; void* ReadPipe = nullptr ; int ReturnCode = 0 ; FDateTime StartTime { 0 } ; FRunnableThread* Thread = nullptr ;)",
    "insertText": "TSAN_ATOMIC(bool)"
  },
  {
    "label": "GetUATPath()",
    "kind": "Method",
    "detail": "Function (FString URL ; FString WorkingDir ; void* WritePipe = nullptr ; bool bCreatePipes = false ; float SleepInterval = 0 . 0 1 f ; FString OutputBuffer ; protected : FSimpleDelegate CanceledDelegate ; FOnMonitoredProcessCompleted CompletedDelegate ; FOnMonitoredProcessOutput OutputDelegate ; } ; class FSerializedUATProcess : public FMonitoredProcess { public : FString)",
    "insertText": "GetUATPath()"
  },
  {
    "label": "FSerializedUATProcess()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSerializedUATProcess(const FString& RunUATCommandline)"
  },
  {
    "label": "OnLaunchFailed()",
    "kind": "Method",
    "detail": "Function (FSimpleDelegate&)",
    "insertText": "OnLaunchFailed()"
  },
  {
    "label": "LaunchInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchInternal()"
  },
  {
    "label": "CancelQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelQueue()"
  }
]