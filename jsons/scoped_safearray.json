[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedSafearray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedSafearray"
  },
  {
    "label": "LockScope()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_SAFEARRAY_H_ # define BASE_WIN_SCOPED_SAFEARRAY_H_ # include<objbase . h> # include \" base / base_export . h \" # include \" base / check_op . h \" # include \" base / win / variant_util . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace win { class BASE_EXPORT ScopedSafearray { public : template<VARTYPE ElementVartype> class BASE_EXPORT LockScope final { public : using iterator_category = std::random_access_iterator_tag ; using value_type = internal::VariantUtil<ElementVartype>::Type ; using difference_type = ptrdiff_t ; using reference = value_type& ; using const_reference = const value_type& ; using pointer = value_type* ; using const_pointer = const value_type* ;)",
    "insertText": "LockScope()"
  },
  {
    "label": "LockScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockScope(LockScope<ElementVartype>&& other) : safearray_(std::exchange(other.safearray_, nullptr)), vartype_(std::exchange(other.vartype_, VT_EMPTY)), array_(std::exchange(other.array_, nullptr)), array_size_(std::exchange(other.array_size_, 0U))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} LockScope<ElementVartype>&)",
    "insertText": "operator(LockScope<ElementVartype>&& other)"
  },
  {
    "label": "DCHECK_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_NE(this, &other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (safearray_ =)",
    "insertText": "exchange(other.safearray_, nullptr)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (vartype_ =)",
    "insertText": "exchange(other.vartype_, VT_EMPTY)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (array_ =)",
    "insertText": "exchange(other.array_, nullptr)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (array_size_ =)",
    "insertText": "exchange(other.array_size_, 0U)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LockScope&)",
    "insertText": "operator(const LockScope&)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (} VARTYPE)",
    "insertText": "Type()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "operator(size_t index)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "at(size_t index)"
  },
  {
    "label": "DCHECK_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_NE(array_, nullptr)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(index, array_size_)"
  },
  {
    "label": "LockScope()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LockScope(SAFEARRAY* safearray, VARTYPE vartype, pointer array, size_t array_size) : safearray_(safearray), vartype_(vartype), array_(array), array_size_(array_size)"
  },
  {
    "label": "ScopedSafearray()",
    "kind": "Method",
    "detail": "Function (safearray_ = nullptr ; vartype_ = VT_EMPTY ; array_ = nullptr ; array_size_ = 0 U ; } SAFEARRAY* safearray_ = nullptr ; VARTYPE vartype_ = VT_EMPTY ; pointer array_ = nullptr ; size_t array_size_ = 0 U ; class ScopedSafearray ; } ;)",
    "insertText": "ScopedSafearray(SAFEARRAY* safearray = nullptr) : safearray_(safearray)"
  },
  {
    "label": "ScopedSafearray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedSafearray(const ScopedSafearray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSafearray&)",
    "insertText": "operator(const ScopedSafearray&)"
  },
  {
    "label": "ScopedSafearray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSafearray(ScopedSafearray&& r) noexcept : safearray_(r.safearray_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (r . safearray_ = nullptr ; } ScopedSafearray&)",
    "insertText": "operator(ScopedSafearray&& rvalue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(rvalue.Release())"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "CreateLockScope()",
    "kind": "Method",
    "detail": "Function (} template<VARTYPE ElementVartype> absl::optional<LockScope<ElementVartype>>)",
    "insertText": "CreateLockScope()"
  },
  {
    "label": "SafeArrayGetVartype()",
    "kind": "Method",
    "detail": "Function (VARTYPE vartype ; HRESULT hr =)",
    "insertText": "SafeArrayGetVartype(safearray_, &vartype)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (const size_t array_size =)",
    "insertText": "GetCount()"
  },
  {
    "label": "SafeArrayDestroy()",
    "kind": "Method",
    "detail": "Function (HRESULT hr =)",
    "insertText": "SafeArrayDestroy(safearray_)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(S_OK, hr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (safearray_ = nullptr ; } } void)",
    "insertText": "Reset(SAFEARRAY* safearray = nullptr)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (safearray_ = safearray ; } } SAFEARRAY*)",
    "insertText": "Release()"
  },
  {
    "label": "Receive()",
    "kind": "Method",
    "detail": "Function (SAFEARRAY* safearray = safearray_ ; safearray_ = nullptr ; return safearray ; } SAFEARRAY**)",
    "insertText": "Receive()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(safearray_)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (LONG lower = 0 ; LONG upper = - 1 ;)",
    "insertText": "DCHECK_LT(dimension, SafeArrayGetDim(safearray_))"
  },
  {
    "label": "SafeArrayGetLBound()",
    "kind": "Method",
    "detail": "Function (HRESULT hr =)",
    "insertText": "SafeArrayGetLBound(safearray_, dimension + 1, &lower)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(SUCCEEDED(hr))"
  },
  {
    "label": "SafeArrayGetUBound()",
    "kind": "Method",
    "detail": "Function (hr =)",
    "insertText": "SafeArrayGetUBound(safearray_, dimension + 1, &upper)"
  },
  {
    "label": "DCHECK_GT()",
    "kind": "Method",
    "detail": "Function (LONG count = upper - lower + 1 ;)",
    "insertText": "DCHECK_GT(count, 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} SAFEARRAY*)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const ScopedSafearray& safearray2)"
  }
]