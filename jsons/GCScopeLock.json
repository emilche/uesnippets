[
  {
    "label": "FGCCSyncObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGCCSyncObject"
  },
  {
    "label": "FGCCSyncObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / PlatformProcess . h \" # include \" Misc / ScopeLock . h \" # include \" HAL / ThreadSafeBool . h \" # include \" HAL / Event . h \" class FGCCSyncObject { FThreadSafeCounter AsyncCounter ; FThreadSafeCounter GCCounter ; TAtomic<int32> GCWantsToRunCounter { 0 } ; FCriticalSection Critical ; FEvent* GCUnlockedEvent ; public :)",
    "insertText": "FGCCSyncObject()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FGCCSyncObject&)",
    "insertText": "Get()"
  },
  {
    "label": "LockAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockAsync()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bLocked = false ; do {)",
    "insertText": "if(GCCounter.GetValue() > 0)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (GCUnlockedEvent ->)",
    "insertText": "Wait()"
  },
  {
    "label": "CriticalLock()",
    "kind": "Method",
    "detail": "Function (} { FScopeLock)",
    "insertText": "CriticalLock(&Critical)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (AsyncCounter .)",
    "insertText": "Increment()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bLocked = true ; } } })",
    "insertText": "while(!bLocked)"
  },
  {
    "label": "UnlockAsync()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UnlockAsync()"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (AsyncCounter .)",
    "insertText": "Decrement()"
  },
  {
    "label": "GCLock()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GCLock()"
  },
  {
    "label": "SetGCIsWaiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGCIsWaiting()"
  },
  {
    "label": "ConditionalSleep()",
    "kind": "Method",
    "detail": "Function (bool bLocked = false ; do {)",
    "insertText": "ConditionalSleep([&]() { return AsyncCounter.GetValue() == 0; })"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (GCUnlockedEvent ->)",
    "insertText": "Reset()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "ResetGCIsWaiting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGCIsWaiting()"
  },
  {
    "label": "IsAsyncLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAsyncLocked()"
  },
  {
    "label": "IsGCLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGCLocked()"
  },
  {
    "label": "TryGCLock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGCLock()"
  },
  {
    "label": "GCUnlock()",
    "kind": "Method",
    "detail": "Function (bSuccess = true ; } return bSuccess ; } void)",
    "insertText": "GCUnlock()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (GCUnlockedEvent ->)",
    "insertText": "Trigger()"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (GCWantsToRunCounter .)",
    "insertText": "Store(0)"
  },
  {
    "label": "IsGCWaiting()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGCWaiting()"
  }
]