[
  {
    "label": "ERuntimeVirtualTextureMipValueMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERuntimeVirtualTextureMipValueMode"
  },
  {
    "label": "ERuntimeVirtualTextureTextureAddressMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERuntimeVirtualTextureTextureAddressMode"
  },
  {
    "label": "UMaterialExpressionRuntimeVirtualTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionRuntimeVirtualTextureSample"
  },
  {
    "label": "URuntimeVirtualTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTexture"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Materials / MaterialExpression . h \" # include \" UObject / ObjectMacros . h \" # include \" VT / RuntimeVirtualTexture . h \" # include \" MaterialExpressionRuntimeVirtualTextureSample . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RVTMVM_None)",
    "insertText": "UMETA(DisplayName = \"Default\"), RVTMVM_MipLevel UMETA(DisplayName = \"Mip Level\"), RVTMVM_MipBias UMETA(DisplayName = \"Mip Bias\"), RVTMVM_RecalculateDerivatives UMETA(Hidden, DisplayName = \"Ignore Input WorldPosition\"), RVTMVM_DerivativeUV UMETA(DisplayName = \"Derivatives (UV Space)\"), RVTMVM_DerivativeWorld UMETA(DisplayName = \"Derivatives (World Space)\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RVTTA_Clamp)",
    "insertText": "UMETA(DisplayName = \"Clamp\"), RVTTA_Wrap UMETA(DisplayName = \"Wrap\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(collapsecategories, hidecategories=Object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(meta = (RequiredInput = \"false\"))"
  },
  {
    "label": "InitVirtualTextureDependentSettings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitVirtualTextureDependentSettings()"
  },
  {
    "label": "InitOutputs()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitOutputs()"
  },
  {
    "label": "GetReferencedTexture()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetReferencedTexture()"
  },
  {
    "label": "CanReferenceTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReferenceTexture()"
  },
  {
    "label": "GetInput()",
    "kind": "Method",
    "detail": "Function (FExpressionInput*)",
    "insertText": "GetInput(int32 InputIndex)"
  },
  {
    "label": "GetInputName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetInputName(int32 InputIndex)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "GetCaption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCaption(TArray<FString>& OutCaptions)"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GenerateHLSLExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 OutputIndex, UE::HLSLTree::FExpression const*& OutExpression)"
  }
]