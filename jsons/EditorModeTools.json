[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "EGeomSelectionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGeomSelectionType"
  },
  {
    "label": "EGeomSelectionStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGeomSelectionStatus"
  },
  {
    "label": "EModeTools",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EModeTools"
  },
  {
    "label": "FModeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeTool"
  },
  {
    "label": "FModeTool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Engine / EngineBaseTypes . h \" # include \" InputCoreTypes . h \" # include \" Math / Box . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathSSE . h \" class FCanvas ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; struct FConvexVolume ; enum EGeomSelectionType { GS_Object,GS_Poly,GS_Edge,GS_Vertex,} ; enum EGeomSelectionStatus { GSS_None = 0,GSS_Polygon = 1,GSS_Edge = 2,GSS_Vertex = 4,} ; enum EModeTools : int8 { MT_None,MT_InterpEdit,MT_GeometryModify,MT_Texture } ; class FModeTool { public :)",
    "insertText": "FModeTool()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MouseEnter(FEditorViewportClient* ViewportClient,FViewport* Viewport,int32 x, int32 y)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient,FViewport* Viewport,const FSceneView* View,FCanvas* Canvas)"
  },
  {
    "label": "StartModify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartModify()"
  },
  {
    "label": "EndTrans()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndTrans()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(FEditorViewportClient* ViewportClient,float DeltaTime)"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SelectNone()"
  },
  {
    "label": "BoxSelect()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BoxSelect(FBox& InBox, bool InSelect = true)"
  }
]