[
  {
    "label": "generic_product_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_product_impl"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSEPRODUCT_H # define EIGEN_SPARSEPRODUCT_H namespace Eigen { template<Derived> template<OtherDerived> const Product<Derived,OtherDerived,AliasFreeProduct> SparseMatrixBase<Derived)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived> &other)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<Lhs,Rhs,int ProductType> struct generic_product_impl<Lhs,Rhs,SparseShape,SparseShape,ProductType> { template<Dest> void)",
    "insertText": "evalTo(Dest& dst, const Lhs& lhs, const Rhs& rhs)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalTo(dst, lhs, rhs, typename evaluator_traits<Dest>::Shape())"
  },
  {
    "label": "addTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest,ActualLhs> void)",
    "insertText": "addTo(Dest& dst, const ActualLhs& lhs, const Rhs& rhs, typename enable_if<is_same<typename evaluator_traits<Dest>::Shape,DenseShape>::value,int*>::type* = 0)"
  },
  {
    "label": "lhsNested()",
    "kind": "Method",
    "detail": "Function (typedef nested_eval<ActualLhs,Dynamic>::type LhsNested ; typedef nested_eval<Rhs,Dynamic>::type RhsNested ; LhsNested)",
    "insertText": "lhsNested(lhs)"
  },
  {
    "label": "rhsNested()",
    "kind": "Method",
    "detail": "Function (RhsNested)",
    "insertText": "rhsNested(rhs)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_to_dense_product_selector<remove_all<LhsNested>::type,remove_all<RhsNested>::type,Dest)",
    "insertText": "run(lhsNested,rhsNested,dst)"
  },
  {
    "label": "subTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> void)",
    "insertText": "subTo(Dest& dst, const Lhs& lhs, const Rhs& rhs, typename enable_if<is_same<typename evaluator_traits<Dest>::Shape,DenseShape>::value,int*>::type* = 0)"
  },
  {
    "label": "addTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTo(dst, -lhs, rhs)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} protected : template<Dest> void)",
    "insertText": "evalTo(Dest& dst, const Lhs& lhs, const Rhs& rhs, SparseShape)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> void)",
    "insertText": "evalTo(Dest& dst, const Lhs& lhs, const Rhs& rhs, DenseShape)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "setZero()"
  },
  {
    "label": "addTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTo(dst, lhs, rhs)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs,int ProductType> struct generic_product_impl<Lhs,Rhs,SparseShape,SparseTriangularShape,ProductType> : public generic_product_impl<Lhs,Rhs,SparseShape,SparseShape,ProductType> { } ; template<Lhs,Rhs,int ProductType> struct generic_product_impl<Lhs,Rhs,SparseTriangularShape,SparseShape,ProductType> : public generic_product_impl<Lhs,Rhs,SparseShape,SparseShape,ProductType> { } ; template<DstXprType,Lhs,Rhs> struct Assignment<DstXprType,Product<Lhs,Rhs,AliasFreeProduct>,internal::assign_op<DstXprType::Scalar,Product<Lhs,Rhs,AliasFreeProduct>::Scalar>,Sparse2Dense> { typedef Product<Lhs,Rhs,AliasFreeProduct> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index dstRows = src .)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index dstCols = src .)",
    "insertText": "cols()"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (generic_product_impl<Lhs,Rhs)",
    "insertText": "evalTo(dst,src.lhs(),src.rhs())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstXprType,Lhs,Rhs> struct Assignment<DstXprType,Product<Lhs,Rhs,AliasFreeProduct>,internal::add_assign_op<DstXprType::Scalar,Product<Lhs,Rhs,AliasFreeProduct>::Scalar>,Sparse2Dense> { typedef Product<Lhs,Rhs,AliasFreeProduct> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "addTo()",
    "kind": "Method",
    "detail": "Function (generic_product_impl<Lhs,Rhs)",
    "insertText": "addTo(dst,src.lhs(),src.rhs())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstXprType,Lhs,Rhs> struct Assignment<DstXprType,Product<Lhs,Rhs,AliasFreeProduct>,internal::sub_assign_op<DstXprType::Scalar,Product<Lhs,Rhs,AliasFreeProduct>::Scalar>,Sparse2Dense> { typedef Product<Lhs,Rhs,AliasFreeProduct> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "subTo()",
    "kind": "Method",
    "detail": "Function (generic_product_impl<Lhs,Rhs)",
    "insertText": "subTo(dst,src.lhs(),src.rhs())"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Lhs,Rhs,int Options> struct unary_evaluator<SparseView<Product<Lhs,Rhs,Options>>,IteratorBased> : public evaluator<Product<Lhs,Rhs,DefaultProduct>::PlainObject> { typedef SparseView<Product<Lhs,Rhs,Options>> XprType ; typedef XprType::PlainObject PlainObject ; typedef evaluator<PlainObject> Base ;)",
    "insertText": "unary_evaluator(const XprType& xpr) : m_result(xpr.rows(), xpr.cols())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (using std::abs)",
    "insertText": "new(static_cast<Base*>(this)) Base(m_result)"
  },
  {
    "label": "lhsNested()",
    "kind": "Method",
    "detail": "Function (typedef nested_eval<Lhs,Dynamic>::type LhsNested ; typedef nested_eval<Rhs,Dynamic>::type RhsNested ; LhsNested)",
    "insertText": "lhsNested(xpr.nestedExpression().lhs())"
  },
  {
    "label": "rhsNested()",
    "kind": "Method",
    "detail": "Function (RhsNested)",
    "insertText": "rhsNested(xpr.nestedExpression().rhs())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_product_with_pruning_selector<remove_all<LhsNested>::type,remove_all<RhsNested>::type,PlainObject)",
    "insertText": "run(lhsNested,rhsNested,m_result, abs(xpr.reference())*xpr.epsilon())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} protected : PlainObject m_result ; } ; } template<Scalar,int _Options,_StorageIndex> template<Lhs,Rhs> SparseMatrix<Scalar,_Options,_StorageIndex>& SparseMatrix<Scalar,_Options,_StorageIndex)",
    "insertText": "operator(const Product<Lhs,Rhs,AliasFreeProduct>& src)"
  },
  {
    "label": "dst()",
    "kind": "Method",
    "detail": "Function (SparseMatrix)",
    "insertText": "dst(src.rows(),src.cols())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "swap(dst)"
  }
]