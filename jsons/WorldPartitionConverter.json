[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FWorldPartitionConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionConverter"
  },
  {
    "label": "FParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameters"
  },
  {
    "label": "FParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" WorldPartition / WorldPartitionEditorHash . h \" # include \" WorldPartition / WorldPartitionRuntimeHash . h \" # if WITH_EDITOR class AActor ; class ULevel ; class ULevelStreaming ; class UPackage ; class UWorld ; class FWorldPartitionConverter { public : struct FParameters {)",
    "insertText": "FParameters() : bConvertSubLevels(true) , bEnableStreaming(true) , bEnableLoadingInEditor(true) , bUseActorFolders(true) , EditorHashClass(nullptr) , RuntimeHashClass(nullptr)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} bool bConvertSubLevels ; bool bEnableStreaming ; bool bEnableLoadingInEditor ; bool bUseActorFolders ; TSubclassOf<UWorldPartitionEditorHash> EditorHashClass ; TSubclassOf<UWorldPartitionRuntimeHash> RuntimeHashClass ; } ; bool)",
    "insertText": "Convert(UWorld* InWorld, const FWorldPartitionConverter::FParameters& InParameters)"
  },
  {
    "label": "FWorldPartitionConverter()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FWorldPartitionConverter(UWorld* InWorld, const FWorldPartitionConverter::FParameters& InParameters)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert()"
  },
  {
    "label": "ShouldDeleteActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDeleteActor(AActor* InActor, bool bIsMainLevel)"
  },
  {
    "label": "ChangeObjectOuter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeObjectOuter(UObject* InObject, UObject* InNewOuter)"
  },
  {
    "label": "GatherAndPrepareSubLevelsToConvert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAndPrepareSubLevelsToConvert(ULevel* InLevel, TArray<ULevel*>& OutSubLevels)"
  },
  {
    "label": "PrepareStreamingLevelForConversion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareStreamingLevelForConversion(ULevelStreaming* InStreamingLevel)"
  },
  {
    "label": "LevelHasLevelScriptBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LevelHasLevelScriptBlueprint(ULevel* InLevel)"
  },
  {
    "label": "FixupSoftObjectPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupSoftObjectPaths(UPackage* OuterPackage)"
  }
]