[
  {
    "label": "FAssetThumbnail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetThumbnail"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "FAssetButtonActionExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetButtonActionExtension"
  },
  {
    "label": "SPropertyEditorAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorAsset"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FObjectOrAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectOrAssetData"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" GameFramework / Actor . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Styling / AppStyle . h \" # include \" AssetRegistry / AssetData . h \" # include \" AssetThumbnail . h \" # include \" PropertyHandle . h \" # include \" Presentation / PropertyEditor / PropertyEditor . h \" # include \" PropertyCustomizationHelpers . h \" class FAssetThumbnail ; class FPropertyEditor ; class IPropertyHandle ; class SBorder ; class SComboButton ; class UFactory ; class FDetailWidgetRow ; struct FAssetButtonActionExtension ; class SPropertyEditorAsset : public SCompoundWidget { public : enum class EActorReferenceState : uint8 { NotAnActor,Null,Loaded,Exists,Unknown,Error,} ;)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyEditorAsset) : _DisplayThumbnail(true) , _DisplayUseSelected(true) , _DisplayBrowse(true) , _EnableContentPicker(true) , _DisplayCompactSize(true) , _ThumbnailPool(nullptr) , _ThumbnailSize(FIntPoint(48, 48)) , _ObjectPath() , _Class(nullptr) , _CustomContentSlot()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TOptional<bool>, AllowClear) SLATE_ARGUMENT(TOptional<bool>, AllowCreate) SLATE_ARGUMENT(bool, DisplayThumbnail) SLATE_ARGUMENT(bool, DisplayUseSelected) SLATE_ARGUMENT(bool, DisplayBrowse) SLATE_EVENT(FSimpleDelegate, OnBrowseOverride) SLATE_ARGUMENT(bool, EnableContentPicker) SLATE_ARGUMENT(bool, DisplayCompactSize) SLATE_ARGUMENT(TSharedPtr<FAssetThumbnailPool>, ThumbnailPool) SLATE_ARGUMENT(FIntPoint, ThumbnailSize) SLATE_ATTRIBUTE(FString, ObjectPath) SLATE_ARGUMENT(const UClass*, Class) SLATE_ARGUMENT(TOptional<TArray<UFactory*>>, NewAssetFactories) SLATE_EVENT(FOnSetObject, OnSetObject) SLATE_EVENT(FOnShouldFilterAsset, OnShouldFilterAsset) SLATE_NAMED_SLOT(FArguments, CustomContentSlot) SLATE_ARGUMENT(TSharedPtr<IPropertyHandle>, PropertyHandle) SLATE_ARGUMENT(TArray<FAssetData>, OwnerAssetDataArray) SLATE_EVENT(FOnShouldFilterActor, OnShouldFilterActor) SLATE_ARGUMENT(TOptional<FDetailWidgetRow*>, InWidgetRow) SLATE_ATTRIBUTE(bool, bOnlyRecognizeOnDragEnter) SLATE_END_ARGS() static bool Supports( const TSharedRef<FPropertyEditor>& InPropertyEditor)"
  },
  {
    "label": "Supports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Supports(const FProperty* NodeProperty)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedPtr<FPropertyEditor>& InPropertyEditor = NULL)"
  },
  {
    "label": "GetDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDesiredWidth(float& OutMinDesiredWidth, float &OutMaxDesiredWidth)"
  },
  {
    "label": "OpenComboButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenComboButton()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "FObjectOrAssetData()",
    "kind": "Method",
    "detail": "Function (private : struct FObjectOrAssetData { enum class EAssetDataOptions { None,SkipAssetRegistryTagsGathering } ; UObject* Object = nullptr ; FSoftObjectPath ObjectPath ; FAssetData AssetData ; UObject* EditorPathOwner = nullptr ;)",
    "insertText": "FObjectOrAssetData()"
  },
  {
    "label": "FObjectOrAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectOrAssetData(UObject* InObject, UObject* EditorPathOwner, EAssetDataOptions AssetDataOptions)"
  },
  {
    "label": "FObjectOrAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectOrAssetData(const FSoftObjectPath& InObjectPath ) : Object(nullptr) , ObjectPath(InObjectPath) , EditorPathOwner(nullptr)"
  },
  {
    "label": "FObjectOrAssetData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FObjectOrAssetData(const FAssetData& InAssetData ) : Object(nullptr) , ObjectPath( InAssetData.ToSoftObjectPath() ) , AssetData( InAssetData ) , EditorPathOwner(nullptr)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ShouldDisplayThumbnail()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "ShouldDisplayThumbnail(const FArguments& InArgs, const UClass* ObjectClass)"
  },
  {
    "label": "GetThumbnailBorder()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetThumbnailBorder()"
  },
  {
    "label": "GetStatusIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetStatusIcon()"
  },
  {
    "label": "GetActorReferenceState()",
    "kind": "Method",
    "detail": "Function (EActorReferenceState)",
    "insertText": "GetActorReferenceState()"
  },
  {
    "label": "OnGetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetMenuContent()"
  },
  {
    "label": "OnMenuOpenChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMenuOpenChanged(bool bOpen)"
  },
  {
    "label": "IsFilteredActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilteredActor(const AActor* const Actor)"
  },
  {
    "label": "CloseComboButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseComboButton()"
  },
  {
    "label": "OnGetAssetName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetAssetName()"
  },
  {
    "label": "OnGetAssetClassName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetAssetClassName()"
  },
  {
    "label": "OnGetToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetToolTip()"
  },
  {
    "label": "CanAssetBeAssigned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAssetBeAssigned(const FAssetData& AssetData)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(const FAssetData& AssetData)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FPropertyAccess::Result)",
    "insertText": "GetValue(FObjectOrAssetData& OutValue, FObjectOrAssetData::EAssetDataOptions GetValueOptions)"
  },
  {
    "label": "GetDisplayedClass()",
    "kind": "Method",
    "detail": "Function (const UClass*)",
    "insertText": "GetDisplayedClass()"
  },
  {
    "label": "OnAssetSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetSelected(const FAssetData& AssetData)"
  },
  {
    "label": "OnActorSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorSelected(AActor* InActor)"
  },
  {
    "label": "OnGetAllowedClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetAllowedClasses(TArray<const UClass*>& AllowedClasses)"
  },
  {
    "label": "OnOpenAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenAssetEditor()"
  },
  {
    "label": "OnBrowse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowse()"
  },
  {
    "label": "GetOnBrowseToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetOnBrowseToolTip()"
  },
  {
    "label": "OnUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUse()"
  },
  {
    "label": "OnClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClear()"
  },
  {
    "label": "GetAssetClassColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetAssetClassColor()"
  },
  {
    "label": "OnAssetDraggedOver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAssetDraggedOver(TArrayView<FAssetData> InAssets, FText& OutReason)"
  },
  {
    "label": "OnAssetDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetDropped(const FDragDropEvent&, TArrayView<FAssetData> InAssets)"
  },
  {
    "label": "OnCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopy()"
  },
  {
    "label": "OnPaste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPaste()"
  },
  {
    "label": "CanPasteFromText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteFromText(const FString& InTag, const FString& InText)"
  },
  {
    "label": "OnPasteFromText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteFromText(const FString& InTag, const FString& InText, const TOptional<FGuid>& InOperationId)"
  },
  {
    "label": "PasteFromText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteFromText(const FString& InTag, const FString& InText)"
  },
  {
    "label": "CanPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPaste()"
  },
  {
    "label": "OnAssetThumbnailDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAssetThumbnailDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "CanEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEdit()"
  },
  {
    "label": "CanSetBasedOnCustomClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetBasedOnCustomClasses(const FAssetData& InAssetData)"
  },
  {
    "label": "CanSetBasedOnAssetReferenceFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetBasedOnAssetReferenceFilter(const FAssetData& InAssetData, FText* OutOptionalFailureReason = nullptr)"
  },
  {
    "label": "GetMostSpecificPropertyHandle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyHandle>)",
    "insertText": "GetMostSpecificPropertyHandle()"
  },
  {
    "label": "GetObjectPropertyClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetObjectPropertyClass(const FProperty* Property)"
  },
  {
    "label": "InitializeClassFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeClassFilters(const FProperty* Property)"
  },
  {
    "label": "IsClassAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClassAllowed(const UClass* InClass)"
  },
  {
    "label": "InitializeAssetDataTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAssetDataTags(const FProperty* Property)"
  },
  {
    "label": "IsAssetFiltered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetFiltered(const FAssetData& InAssetData)"
  },
  {
    "label": "GenerateCustomAssetPickerButtons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCustomAssetPickerButtons(const FAssetData& InAssetData, const TArray<FAssetButtonActionExtension>& InExtensions)"
  }
]