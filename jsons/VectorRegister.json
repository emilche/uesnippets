[
  {
    "label": "VectorRegisterConstInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorRegisterConstInit"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FScopedFTZFloatMode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedFTZFloatMode"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" # define SUPPORT_DOUBLE_TO_FLOAT_VECTOR_CONVERSION 1 # if WITH_DIRECTXMATH struct VectorRegisterConstInit { } ; # include \" Math / UnrealMathDirectX . h \" # elif PLATFORM_ENABLE_VECTORINTRINSICS_NEON struct VectorRegisterConstInit { } ; # include \" Math / UnrealMathNeon . h \" # elif)",
    "insertText": "defined(__cplusplus_cli)"
  },
  {
    "label": "SIMD_ALIGNMENT()",
    "kind": "Method",
    "detail": "Function (} ; # include \" Math / UnrealMathFPU . h \" # elif PLATFORM_ENABLE_VECTORINTRINSICS # include \" Math / UnrealMathSSE . h \" # else struct VectorRegisterConstInit { } ; # include \" Math / UnrealMathFPU . h \" # endif # define)",
    "insertText": "SIMD_ALIGNMENT(alignof(VectorRegister))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# include \" Math / UnrealMathVectorCommon . h \" # if !)",
    "insertText": "defined(UE_SSE_DOUBLE_ALIGNMENT) || (UE_SSE_DOUBLE_ALIGNMENT <= 16)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (# else struct)",
    "insertText": "alignas(16)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStore(Register, XYZW)"
  },
  {
    "label": "PersistentVectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PersistentVectorRegister4Double(const VectorRegister4Float& Register)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStore(VectorRegister4Double(Register), XYZW)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PersistentVectorRegister4Double&)",
    "insertText": "operator(const VectorRegister4Double& Register)"
  },
  {
    "label": "MakeVectorRegisterDoubleConstant()",
    "kind": "Method",
    "detail": "Function (} } ; # endif using PersistentVectorRegister4Float = VectorRegister4Float ; template<T> using TPersistentVectorRegisterType = std::conditional_t<std::is_same_v<T,float>,PersistentVectorRegister4Float,std::conditional_t<std::is_same_v<T,double>,PersistentVectorRegister4Double,void>> ; VectorRegister VECTOR_INV_255 =)",
    "insertText": "MakeVectorRegisterDoubleConstant(1.0 / 255, 1.0 / 255, 1.0 / 255, 1.0 / 255)"
  },
  {
    "label": "VectorMask_LT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VectorMask_LT(Vec1, Vec2 ) VectorCompareLT(Vec1, Vec2) #define VectorMask_LE( Vec1, Vec2 ) VectorCompareLE(Vec1, Vec2) #define VectorMask_GT( Vec1, Vec2 ) VectorCompareGT(Vec1, Vec2) #define VectorMask_GE( Vec1, Vec2 ) VectorCompareGE(Vec1, Vec2) #define VectorMask_EQ( Vec1, Vec2 ) VectorCompareEQ(Vec1, Vec2) #define VectorMask_NE( Vec1, Vec2 ) VectorCompareNE(Vec1, Vec2) #define ZERO_ANIMWEIGHT_THRESH (0.00001f) #define ZERO_ANIMWEIGHT_THRESH_DOUBLE (0.00001)"
  },
  {
    "label": "MakeVectorRegisterConstant()",
    "kind": "Method",
    "detail": "Function (VectorRegister AnimWeightThreshold =)",
    "insertText": "MakeVectorRegisterConstant(ZERO_ANIMWEIGHT_THRESH_DOUBLE, ZERO_ANIMWEIGHT_THRESH_DOUBLE, ZERO_ANIMWEIGHT_THRESH_DOUBLE, ZERO_ANIMWEIGHT_THRESH_DOUBLE)"
  },
  {
    "label": "MakeVectorRegisterConstant()",
    "kind": "Method",
    "detail": "Function (VectorRegister RotationSignificantThreshold =)",
    "insertText": "MakeVectorRegisterConstant(1.0 - UE_DELTA*UE_DELTA, 1.0 - UE_DELTA*UE_DELTA, 1.0 - UE_DELTA*UE_DELTA, 1.0 - UE_DELTA*UE_DELTA)"
  },
  {
    "label": "FScopedFTZFloatMode()",
    "kind": "Method",
    "detail": "Function (} struct FScopedFTZFloatMode {)",
    "insertText": "FScopedFTZFloatMode()"
  },
  {
    "label": "VectorGetControlRegister()",
    "kind": "Method",
    "detail": "Function (ControlRegisterState =)",
    "insertText": "VectorGetControlRegister()"
  },
  {
    "label": "VectorSetControlRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorSetControlRegister(ControlRegisterState | VECTOR_DENORMALS_FLUSH_TO_ZERO)"
  },
  {
    "label": "VectorSetControlRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorSetControlRegister(ControlRegisterState)"
  }
]