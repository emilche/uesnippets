[
  {
    "label": "iplist",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iplist"
  },
  {
    "label": "ilist_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ilist_iterator"
  },
  {
    "label": "ilist_nextprev_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_nextprev_traits"
  },
  {
    "label": "ilist_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_traits"
  },
  {
    "label": "ilist_sentinel_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_sentinel_traits"
  },
  {
    "label": "ilist_node_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_node_traits"
  },
  {
    "label": "ilist_default_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_default_traits"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "node_ty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "node_ty"
  },
  {
    "label": "simplify_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "simplify_type"
  },
  {
    "label": "InIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InIt"
  },
  {
    "label": "ilist",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist"
  },
  {
    "label": "Ty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ty"
  },
  {
    "label": "getPrev()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_ILIST_H # define LLVM_ADT_ILIST_H # include \" llvm / Support / Compiler . h \" # include<algorithm> # include<cassert> # include<cstddef> # include<iterator> namespace llvm { template<NodeTy,Traits> class iplist ; template<NodeTy> class ilist_iterator ; template<NodeTy> struct ilist_nextprev_traits { NodeTy*)",
    "insertText": "getPrev(NodeTy *N)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (} NodeTy*)",
    "insertText": "getNext(NodeTy *N)"
  },
  {
    "label": "getPrev()",
    "kind": "Method",
    "detail": "Function (} const NodeTy*)",
    "insertText": "getPrev(const NodeTy *N)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (} const NodeTy*)",
    "insertText": "getNext(const NodeTy *N)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setPrev(NodeTy *N, NodeTy *Prev)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (N ->)",
    "insertText": "setPrev(Prev)"
  },
  {
    "label": "setNext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNext(NodeTy *N, NodeTy *Next)"
  },
  {
    "label": "setNext()",
    "kind": "Method",
    "detail": "Function (N ->)",
    "insertText": "setNext(Next)"
  },
  {
    "label": "createSentinel()",
    "kind": "Method",
    "detail": "Function (} } ; template<NodeTy> struct ilist_traits ; template<NodeTy> struct ilist_sentinel_traits { NodeTy*)",
    "insertText": "createSentinel()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "destroySentinel(NodeTy *N)"
  },
  {
    "label": "provideInitialHead()",
    "kind": "Method",
    "detail": "Function (delete N ; } NodeTy*)",
    "insertText": "provideInitialHead()"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (ilist_traits<NodeTy)",
    "insertText": "noteHead(Head, Head)"
  },
  {
    "label": "setNext()",
    "kind": "Method",
    "detail": "Function (ilist_traits<NodeTy)",
    "insertText": "setNext(Head, nullptr)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "noteHead(NodeTy *NewHead, NodeTy *Sentinel)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (ilist_traits<NodeTy)",
    "insertText": "setPrev(NewHead, Sentinel)"
  },
  {
    "label": "createNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<NodeTy> struct ilist_node_traits { NodeTy*)",
    "insertText": "createNode(const NodeTy &V)"
  },
  {
    "label": "deleteNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deleteNode(NodeTy *V)"
  },
  {
    "label": "addNodeToList()",
    "kind": "Method",
    "detail": "Function (delete V ; } void)",
    "insertText": "addNodeToList(NodeTy *)"
  },
  {
    "label": "removeNodeFromList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeNodeFromList(NodeTy *)"
  },
  {
    "label": "transferNodesFromList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "transferNodesFromList(ilist_node_traits & , ilist_iterator<NodeTy> , ilist_iterator<NodeTy>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<NodeTy> struct ilist_default_traits : public ilist_nextprev_traits<NodeTy>,public ilist_sentinel_traits<NodeTy>,public ilist_node_traits<NodeTy> { } ; template<NodeTy> struct ilist_traits : public ilist_default_traits<NodeTy> { } ; template<Ty> struct ilist_traits<const Ty> : public ilist_traits<Ty> { } ; template<NodeTy> class ilist_iterator { public : using iterator_category = std::bidirectional_iterator_tag ; using value_type = NodeTy ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; typedef ilist_traits<NodeTy> Traits ; private : pointer NodePtr ; void)",
    "insertText": "operator(difference_type)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "operator(T)"
  },
  {
    "label": "ilist_iterator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ilist_iterator(pointer NP) : NodePtr(NP)"
  },
  {
    "label": "ilist_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ilist_iterator(reference NR) : NodePtr(&NR)"
  },
  {
    "label": "ilist_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ilist_iterator() : NodePtr(nullptr)"
  },
  {
    "label": "ilist_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class node_ty>)",
    "insertText": "ilist_iterator(const ilist_iterator<node_ty> &RHS) : NodePtr(RHS.getNodePtrUnchecked())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class node_ty> const ilist_iterator&)",
    "insertText": "operator(const ilist_iterator<node_ty> &RHS)"
  },
  {
    "label": "getNodePtrUnchecked()",
    "kind": "Method",
    "detail": "Function (NodePtr = RHS .)",
    "insertText": "getNodePtrUnchecked()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ilist_iterator &RHS)"
  },
  {
    "label": "getPrev()",
    "kind": "Method",
    "detail": "Function (NodePtr =)",
    "insertText": "getPrev(NodePtr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NodePtr && \"--'d off the beginning of an ilist!\")"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (NodePtr =)",
    "insertText": "getNext(NodePtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ilist_iterator tmp =* this ; - -* this ; return tmp ; } ilist_iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "operator(ilist_iterator<T>,int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "operator(int, ilist_iterator<T>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T,U> bool)",
    "insertText": "operator(const T* LHS, const ilist_iterator<const U> &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U> bool)",
    "insertText": "operator(T* LHS, const ilist_iterator<U> &RHS)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} template<From> struct simplify_type ; template<NodeTy> struct simplify_type<ilist_iterator<NodeTy>> { typedef NodeTy* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(ilist_iterator<NodeTy> &Node)"
  },
  {
    "label": "getTail()",
    "kind": "Method",
    "detail": "Function (} const NodeTy*)",
    "insertText": "getTail()"
  },
  {
    "label": "setTail()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTail(NodeTy *N)"
  },
  {
    "label": "noteHead()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "noteHead(Head, N)"
  },
  {
    "label": "CreateLazySentinel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateLazySentinel()"
  },
  {
    "label": "ensureHead()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ensureHead(Head)"
  },
  {
    "label": "op_less()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "op_less(NodeTy &L, NodeTy &R)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const iplist &)"
  },
  {
    "label": "iplist()",
    "kind": "Method",
    "detail": "Function (public : typedef NodeTy* pointer ; typedef const NodeTy* const_pointer ; typedef NodeTy& reference ; typedef const NodeTy& const_reference ; typedef NodeTy value_type ; typedef ilist_iterator<NodeTy> iterator ; typedef ilist_iterator<const NodeTy> const_iterator ; typedef size_t size_type ; typedef ptrdiff_t difference_type ; typedef std::reverse_iterator<const_iterator> const_reverse_iterator ; typedef std::reverse_iterator<iterator> reverse_iterator ;)",
    "insertText": "iplist() : Head(this->provideInitialHead())"
  },
  {
    "label": "iplist()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "iplist()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "destroySentinel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroySentinel(getTail())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "empty()"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "front()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!empty() && \"Called front() on empty list!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!empty() && \"Called back() on empty list!\")"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "back()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(iplist &RHS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(0 && \"Swap does not use list traits callback correctly yet!\")"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(Head, RHS.Head)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(iterator where, NodeTy *New)"
  },
  {
    "label": "getPrev()",
    "kind": "Method",
    "detail": "Function (NodeTy* PrevNode = this ->)",
    "insertText": "getPrev(CurNode)"
  },
  {
    "label": "setNext()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setNext(New, CurNode)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setPrev(New, PrevNode)"
  },
  {
    "label": "addNodeToList()",
    "kind": "Method",
    "detail": "Function (try { this ->)",
    "insertText": "addNodeToList(New)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(...)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setPrev(CurNode, PrevNode)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setPrev(New, nullptr)"
  },
  {
    "label": "setNext()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setNext(New, nullptr)"
  },
  {
    "label": "insertAfter()",
    "kind": "Method",
    "detail": "Function (throw ; } return New ; } iterator)",
    "insertText": "insertAfter(iterator where, NodeTy *New)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} NodeTy*)",
    "insertText": "remove(iterator &IT)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(IT != end() && \"Cannot remove end of list!\")"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (NodeTy* Node =&* IT ; NodeTy* NextNode = this ->)",
    "insertText": "getNext(Node)"
  },
  {
    "label": "getPrev()",
    "kind": "Method",
    "detail": "Function (NodeTy* PrevNode = this ->)",
    "insertText": "getPrev(Node)"
  },
  {
    "label": "removeNodeFromList()",
    "kind": "Method",
    "detail": "Function (IT = NextNode ; this ->)",
    "insertText": "removeNodeFromList(Node)"
  },
  {
    "label": "setNext()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setNext(Node, nullptr)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setPrev(Node, nullptr)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (iterator MutIt = IT ; return)",
    "insertText": "remove(MutIt)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(iterator where)"
  },
  {
    "label": "deleteNode()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "deleteNode(remove(where))"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setPrev(Head, Head)"
  },
  {
    "label": "transfer()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "transfer(iterator position, iplist &L2, iterator first, iterator last)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(first != last && \"Should be checked by callers\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(position != first && \"Insertion point can't be one of the transferred nodes\")"
  },
  {
    "label": "setTail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTail(nullptr)"
  },
  {
    "label": "getPrev()",
    "kind": "Method",
    "detail": "Function (NodeTy* First =&* first,* Prev = this ->)",
    "insertText": "getPrev(First)"
  },
  {
    "label": "getNodePtrUnchecked()",
    "kind": "Method",
    "detail": "Function (NodeTy* Next = last .)",
    "insertText": "getNodePtrUnchecked(), *Last = this->getPrev(Next)"
  },
  {
    "label": "getPrev()",
    "kind": "Method",
    "detail": "Function (NodeTy* PosPrev = this ->)",
    "insertText": "getPrev(PosNext)"
  },
  {
    "label": "setNext()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setNext(Last, PosNext)"
  },
  {
    "label": "setPrev()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setPrev(PosNext, Last)"
  },
  {
    "label": "transferNodesFromList()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "transferNodesFromList(L2, First, PosNext)"
  },
  {
    "label": "setTail()",
    "kind": "Method",
    "detail": "Function (L2 .)",
    "insertText": "setTail(L2Sentinel)"
  },
  {
    "label": "setTail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTail(ThisSentinel)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} } public : size_type LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "size()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(iterator first, iterator last)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_front(NodeTy *val)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(begin(), val)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_back(NodeTy *val)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(end(), val)"
  },
  {
    "label": "pop_front()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "pop_front()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!empty() && \"pop_front() on empty list!\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(begin())"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "pop_back()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!empty() && \"pop_back() on empty list!\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(--t)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<class InIt> void)",
    "insertText": "insert(iterator where, InIt first, InIt last)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "splice(iterator where, iplist &L2)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "splice(iterator where, iplist &L2, iterator first)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iterator last = first ; + + last ;)",
    "insertText": "if(where == first || where == last)"
  },
  {
    "label": "transfer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transfer(where, L2, first, last)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "splice(iterator where, iplist &L2, iterator first, iterator last)"
  },
  {
    "label": "ilist()",
    "kind": "Method",
    "detail": "Function (} } ; template<NodeTy> struct ilist : public iplist<NodeTy> { typedef iplist<NodeTy>::size_type size_type ; typedef iplist<NodeTy>::iterator iterator ;)",
    "insertText": "ilist()"
  },
  {
    "label": "ilist()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ilist(const ilist &right)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(this->begin(), right.begin(), right.end())"
  },
  {
    "label": "ilist()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ilist(size_type count)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(this->begin(), count, NodeTy())"
  },
  {
    "label": "ilist()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ilist(size_type count, const NodeTy &val)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(this->begin(), count, val)"
  },
  {
    "label": "ilist()",
    "kind": "Method",
    "detail": "Function (} template<class InIt>)",
    "insertText": "ilist(InIt first, InIt last)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(this->begin(), first, last)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} using iplist<NodeTy>::insert ; using iplist<NodeTy>::push_front ; using iplist<NodeTy>::push_back ; iterator)",
    "insertText": "insert(iterator where, const NodeTy &val)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_front(const NodeTy &val)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(this->begin(), val)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push_back(const NodeTy &val)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(this->end(), val)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insert(iterator where, size_type count, const NodeTy &val)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "assign(size_type count, const NodeTy &val)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} template<class InIt> void)",
    "insertText": "assign(InIt first1, InIt last1)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator first2 = this ->)",
    "insertText": "begin(), last2 = this->end()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(size_type newsize, NodeTy val)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_type len = 0 ;)",
    "insertText": "for(; i != this->end() && len < newsize; ++i, ++len)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(size_type newsize)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(newsize, NodeTy())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace std { template<class Ty> void)",
    "insertText": "swap(llvm::iplist<Ty> &Left, llvm::iplist<Ty> &Right)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (Left .)",
    "insertText": "swap(Right)"
  }
]