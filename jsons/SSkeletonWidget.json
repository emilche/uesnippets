[
  {
    "label": "UAnimSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSet"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FBoneTrackPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneTrackPair"
  },
  {
    "label": "SBonePairRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBonePairRow"
  },
  {
    "label": "SSkeletonWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSkeletonWidget"
  },
  {
    "label": "SSkeletonListWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSkeletonListWidget"
  },
  {
    "label": "SSkeletonCompareWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSkeletonCompareWidget"
  },
  {
    "label": "SSkeletonSelectorWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSkeletonSelectorWindow"
  },
  {
    "label": "SBasePoseViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBasePoseViewport"
  },
  {
    "label": "UDebugSkelMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDebugSkelMeshComponent"
  },
  {
    "label": "FDisplayedAssetEntryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayedAssetEntryInfo"
  },
  {
    "label": "SSkeletonBoneRemoval",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSkeletonBoneRemoval"
  },
  {
    "label": "SSelectFolderDlg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSelectFolderDlg"
  },
  {
    "label": "SReplaceMissingSkeletonDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SReplaceMissingSkeletonDialog"
  },
  {
    "label": "FBoneTrackPair()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / Skeleton . h \" # include \" CoreMinimal . h \" # include \" IContentBrowserSingleton . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Input / SButton . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / SListView . h \" # include \" Styling / AppStyle . h \" # include \" AssetRegistry / AssetData . h \" # include \" Widgets / Layout / SUniformGridPanel . h \" # include \" PreviewScene . h \" # include \" EditorViewportClient . h \" # include \" SEditorViewport . h \" # include \" EditorAnimUtils . h \" class UAnimSet ; class USkeletalMesh ; using namespace EditorAnimUtils ; # define LOCTEXT_NAMESPACE \" SkeletonWidget \" struct FBoneTrackPair { FName Bone1 ; FName Bone2 ;)",
    "insertText": "FBoneTrackPair(FName InBone1, FName InBone2) : Bone1(InBone1) , Bone2(InBone2)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; class SBonePairRow : public SMultiColumnTableRow<TSharedPtr<FBoneTrackPair>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SBonePairRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FBoneTrackPair>, BonePair) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (this -> BonePair = InArgs . _BonePair ; SMultiColumnTableRow<TSharedPtr<FBoneTrackPair>)",
    "insertText": "Construct(FSuperRowType::FArguments(), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SBorder> Border1,Border2 ;)",
    "insertText": "if(ColumnName == TEXT(\"Curretly Selected\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(BonePair->Bone2 == NAME_None)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "SAssignNew(Border2, SBorder) .Padding(2.f) .Content() [ SNew(STextBlock) .Text(FText::FromName(BonePair->Bone2))"
  },
  {
    "label": "GetSelectedSkeleton()",
    "kind": "Method",
    "detail": "Function (} } } private : TSharedPtr<FBoneTrackPair> BonePair ; } ; class SSkeletonWidget : public SCompoundWidget { public : USkeleton*)",
    "insertText": "GetSelectedSkeleton()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, ShowBones) SLATE_ARGUMENT(EAssetViewType::Type, InitialViewType) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SkeletonSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkeletonSelectionChanged(const FAssetData& AssetData)"
  },
  {
    "label": "GenerateSkeletonRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateSkeletonRow(USkeleton* InSkeleton, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GenerateSkeletonBoneRow()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ITableRow>)",
    "insertText": "GenerateSkeletonBoneRow(TSharedPtr<FName> InBoneName, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} private : bool bShowBones = true ; EAssetViewType::Type InitialViewType = EAssetViewType::Column ; SVerticalBox::FSlot* BoneListSlot ; TArray<TSharedPtr<FName>> BoneList ; } ; class SSkeletonCompareWidget : public SSkeletonWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSkeletonCompareWidget ) : _Object(NULL)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(UObject*, Object ) SLATE_ARGUMENT( TArray<FName>*, BoneNames ) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GenerateBonePairRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateBonePairRow(TSharedPtr<FBoneTrackPair> InBonePair, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FName> BoneNames ; SVerticalBox::FSlot* BonePairSlot ; TArray<TSharedPtr<FBoneTrackPair>> BonePairList ; } ; class SSkeletonSelectorWindow : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSkeletonSelectorWindow ) : _Object(NULL)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(UObject*, Object ) SLATE_ARGUMENT( TSharedPtr<SWindow>, WidgetWindow ) SLATE_END_ARGS() public: UNREALED_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "ConstructWindowFromAnimSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructWindowFromAnimSet(UAnimSet* InAnimSet)"
  },
  {
    "label": "ConstructWindowFromMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructWindowFromMesh(USkeletalMesh* InSkeletalMesh)"
  },
  {
    "label": "ConstructWindowFromAnimBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructWindowFromAnimBlueprint(UAnimBlueprint* AnimBlueprint)"
  },
  {
    "label": "ConstructWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructWindow()"
  },
  {
    "label": "ConstructButtons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructButtons(TSharedRef<SVerticalBox> ParentBox)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (ParentBox ->)",
    "insertText": "AddSlot() .AutoHeight() .HAlign(HAlign_Right) .VAlign(VAlign_Bottom) [ SNew(SUniformGridPanel) .SlotPadding(FAppStyle::GetMargin(\"StandardDialog.SlotPadding\")) .MinDesiredSlotWidth(FAppStyle::GetFloat(\"StandardDialog.MinDesiredSlotWidth\")) .MinDesiredSlotHeight(FAppStyle::GetFloat(\"StandardDialog.MinDesiredSlotHeight\")) +SUniformGridPanel::Slot(0,0) [ SNew(SButton) .Text(LOCTEXT(\"Accept\", \"Accept\")) .HAlign(HAlign_Center) .ContentPadding(FAppStyle::GetMargin(\"StandardDialog.ContentPadding\")) .OnClicked_Raw( this, &SSkeletonSelectorWindow::OnAccept ) ] +SUniformGridPanel::Slot(1,0) [ SNew(SButton) .Text(LOCTEXT(\"Cancel\", \"Cancel\")) .HAlign(HAlign_Center) .ContentPadding(FAppStyle::GetMargin(\"StandardDialog.ContentPadding\")) .OnClicked_Raw( this, &SSkeletonSelectorWindow::OnCancel)"
  },
  {
    "label": "OnAccept()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnAccept()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (WidgetWindow .)",
    "insertText": "Pin()->RequestDestroyWindow()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Handled()"
  },
  {
    "label": "OnCancel()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnCancel()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(USkeleton*, Skeleton) SLATE_END_ARGS() public: SBasePoseViewport()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkeleton(USkeleton* Skeleton)"
  },
  {
    "label": "MakeEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<FEditorViewportClient>)",
    "insertText": "MakeEditorViewportClient()"
  },
  {
    "label": "MakeViewportToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "MakeViewportToolbar()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (private : USkeleton* TargetSkeleton ; FPreviewScene PreviewScene ; class UDebugSkelMeshComponent* PreviewComponent ; bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} ; class FDisplayedAssetEntryInfo { public : USkeleton* NewSkeleton ; UObject* AnimAsset ; UObject* RemapAsset ; TSharedRef<FDisplayedAssetEntryInfo>)",
    "insertText": "Make(UObject* InAsset, USkeleton* InNewSkeleton)"
  },
  {
    "label": "FDisplayedAssetEntryInfo()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDisplayedAssetEntryInfo()"
  },
  {
    "label": "FDisplayedAssetEntryInfo()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FDisplayedAssetEntryInfo(UObject* InAsset, USkeleton* InNewSkeleton)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SSkeletonBoneRemoval : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSkeletonBoneRemoval)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TArray<FName>, BonesToRemove ) SLATE_ARGUMENT( TSharedPtr<SWindow>, WidgetWindow ) SLATE_ARGUMENT( FText, WarningMessage ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnOk()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SWindow> WidgetWindow ; FReply)",
    "insertText": "OnOk()"
  },
  {
    "label": "CloseWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseWindow()"
  },
  {
    "label": "ShowModal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShowModal(const TArray<FName> BonesToRemove, const FText& WarningMessage)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (bool bShouldContinue ; TArray<TSharedPtr<FName>> BoneNames ; } ; class SSelectFolderDlg : public SWindow { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSelectFolderDlg)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FText, DefaultAssetPath) SLATE_END_ARGS() SSelectFolderDlg() : UserResponse(EAppReturnType::Cancel)"
  },
  {
    "label": "ShowModal()",
    "kind": "Method",
    "detail": "Function (public : EAppReturnType::Type)",
    "insertText": "ShowModal()"
  },
  {
    "label": "GetAssetPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAssetPath()"
  },
  {
    "label": "OnPathChange()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPathChange(const FString& NewPath)"
  },
  {
    "label": "OnButtonClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonClick(EAppReturnType::Type ButtonID)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (EAppReturnType::Type UserResponse ; FText AssetPath ; } ; class SReplaceMissingSkeletonDialog : public SWindow { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SReplaceMissingSkeletonDialog)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TArray<TWeakObjectPtr<UObject>>, AnimAssets) SLATE_END_ARGS() void UNREALED_API Construct(const FArguments& InArgs)"
  },
  {
    "label": "SReplaceMissingSkeletonDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SReplaceMissingSkeletonDialog() : UserResponse(EAppReturnType::Cancel) , bWasSkeletonReplaced(false)"
  },
  {
    "label": "OnSkeletonSelected()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnSkeletonSelected(const FAssetData& Replacement)"
  }
]