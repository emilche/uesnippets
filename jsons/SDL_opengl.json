[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_opengl_h_ # define SDL_opengl_h_ # include \" SDL_config . h \" # ifndef __IPHONEOS__ # ifndef __gl_h_ # define __gl_h_ # if)",
    "insertText": "defined(USE_MGL_NAMESPACE) #include \"gl_mangle.h\" #endif #if defined(_WIN32) && !defined(__WIN32__) && !defined(__CYGWIN__) #define __WIN32__ #endif #if defined(__WIN32__) && !defined(__CYGWIN__) # if (defined(_MSC_VER) || defined(__MINGW32__)) && defined(BUILD_GL32) # define GLAPI __declspec(dllexport) # elif (defined(_MSC_VER) || defined(__MINGW32__)) && defined(_DLL) # define GLAPI __declspec(dllimport) # else # define GLAPI extern # endif # if defined(__MINGW32__) && defined(GL_NO_STDCALL) || defined(UNDER_CE) # define GLAPIENTRY # else # define GLAPIENTRY __stdcall # endif #elif defined(__CYGWIN__) && defined(USE_OPENGL32) # define GLAPI extern # define GLAPIENTRY __stdcall #elif defined(__OS2__) || defined(__EMX__) # define GLAPI extern # define GLAPIENTRY _System # define APIENTRY _System # if defined(__GNUC__) && !defined(_System) # define _System # endif #elif (defined(__GNUC__) && __GNUC__ >= 4) || (defined(__SUNPRO_C) && (__SUNPRO_C >= 0x590)) # define GLAPI __attribute__((visibility(\"default\"))) # define GLAPIENTRY #endif #if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) #ifndef WIN32_LEAN_AND_MEAN #define WIN32_LEAN_AND_MEAN 1 #endif #ifndef NOMINMAX #define NOMINMAX #endif #include <windows.h> #endif #ifndef GLAPI #define GLAPI extern #endif #ifndef GLAPIENTRY #define GLAPIENTRY #endif #ifndef APIENTRY #define APIENTRY GLAPIENTRY #endif #ifndef APIENTRYP #define APIENTRYP APIENTRY * #endif #ifndef GLAPIENTRYP #define GLAPIENTRYP GLAPIENTRY * #endif #if defined(PRAGMA_EXPORT_SUPPORTED)"
  },
  {
    "label": "glClearIndex()",
    "kind": "Method",
    "detail": "Function (# endif # define GL_VERSION_1_1 1 # define GL_VERSION_1_2 1 # define GL_VERSION_1_3 1 # define GL_ARB_imaging 1 typedef unsigned int GLenum ; typedef unsigned char GLboolean ; typedef unsigned int GLbitfield ; typedef void GLvoid ; typedef signed char GLbyte ; typedef short GLshort ; typedef int GLint ; typedef unsigned char GLubyte ; typedef unsigned short GLushort ; typedef unsigned int GLuint ; typedef int GLsizei ; typedef float GLfloat ; typedef float GLclampf ; typedef double GLdouble ; typedef double GLclampd ; # define GL_FALSE 0 # define GL_TRUE 1 # define GL_BYTE 0 x1400 # define GL_UNSIGNED_BYTE 0 x1401 # define GL_SHORT 0 x1402 # define GL_UNSIGNED_SHORT 0 x1403 # define GL_INT 0 x1404 # define GL_UNSIGNED_INT 0 x1405 # define GL_FLOAT 0 x1406 # define GL_2_BYTES 0 x1407 # define GL_3_BYTES 0 x1408 # define GL_4_BYTES 0 x1409 # define GL_DOUBLE 0 x140A # define GL_POINTS 0 x0000 # define GL_LINES 0 x0001 # define GL_LINE_LOOP 0 x0002 # define GL_LINE_STRIP 0 x0003 # define GL_TRIANGLES 0 x0004 # define GL_TRIANGLE_STRIP 0 x0005 # define GL_TRIANGLE_FAN 0 x0006 # define GL_QUADS 0 x0007 # define GL_QUAD_STRIP 0 x0008 # define GL_POLYGON 0 x0009 # define GL_VERTEX_ARRAY 0 x8074 # define GL_NORMAL_ARRAY 0 x8075 # define GL_COLOR_ARRAY 0 x8076 # define GL_INDEX_ARRAY 0 x8077 # define GL_TEXTURE_COORD_ARRAY 0 x8078 # define GL_EDGE_FLAG_ARRAY 0 x8079 # define GL_VERTEX_ARRAY_SIZE 0 x807A # define GL_VERTEX_ARRAY_TYPE 0 x807B # define GL_VERTEX_ARRAY_STRIDE 0 x807C # define GL_NORMAL_ARRAY_TYPE 0 x807E # define GL_NORMAL_ARRAY_STRIDE 0 x807F # define GL_COLOR_ARRAY_SIZE 0 x8081 # define GL_COLOR_ARRAY_TYPE 0 x8082 # define GL_COLOR_ARRAY_STRIDE 0 x8083 # define GL_INDEX_ARRAY_TYPE 0 x8085 # define GL_INDEX_ARRAY_STRIDE 0 x8086 # define GL_TEXTURE_COORD_ARRAY_SIZE 0 x8088 # define GL_TEXTURE_COORD_ARRAY_TYPE 0 x8089 # define GL_TEXTURE_COORD_ARRAY_STRIDE 0 x808A # define GL_EDGE_FLAG_ARRAY_STRIDE 0 x808C # define GL_VERTEX_ARRAY_POINTER 0 x808E # define GL_NORMAL_ARRAY_POINTER 0 x808F # define GL_COLOR_ARRAY_POINTER 0 x8090 # define GL_INDEX_ARRAY_POINTER 0 x8091 # define GL_TEXTURE_COORD_ARRAY_POINTER 0 x8092 # define GL_EDGE_FLAG_ARRAY_POINTER 0 x8093 # define GL_V2F 0 x2A20 # define GL_V3F 0 x2A21 # define GL_C4UB_V2F 0 x2A22 # define GL_C4UB_V3F 0 x2A23 # define GL_C3F_V3F 0 x2A24 # define GL_N3F_V3F 0 x2A25 # define GL_C4F_N3F_V3F 0 x2A26 # define GL_T2F_V3F 0 x2A27 # define GL_T4F_V4F 0 x2A28 # define GL_T2F_C4UB_V3F 0 x2A29 # define GL_T2F_C3F_V3F 0 x2A2A # define GL_T2F_N3F_V3F 0 x2A2B # define GL_T2F_C4F_N3F_V3F 0 x2A2C # define GL_T4F_C4F_N3F_V4F 0 x2A2D # define GL_MATRIX_MODE 0 x0BA0 # define GL_MODELVIEW 0 x1700 # define GL_PROJECTION 0 x1701 # define GL_TEXTURE 0 x1702 # define GL_POINT_SMOOTH 0 x0B10 # define GL_POINT_SIZE 0 x0B11 # define GL_POINT_SIZE_GRANULARITY 0 x0B13 # define GL_POINT_SIZE_RANGE 0 x0B12 # define GL_LINE_SMOOTH 0 x0B20 # define GL_LINE_STIPPLE 0 x0B24 # define GL_LINE_STIPPLE_PATTERN 0 x0B25 # define GL_LINE_STIPPLE_REPEAT 0 x0B26 # define GL_LINE_WIDTH 0 x0B21 # define GL_LINE_WIDTH_GRANULARITY 0 x0B23 # define GL_LINE_WIDTH_RANGE 0 x0B22 # define GL_POINT 0 x1B00 # define GL_LINE 0 x1B01 # define GL_FILL 0 x1B02 # define GL_CW 0 x0900 # define GL_CCW 0 x0901 # define GL_FRONT 0 x0404 # define GL_BACK 0 x0405 # define GL_POLYGON_MODE 0 x0B40 # define GL_POLYGON_SMOOTH 0 x0B41 # define GL_POLYGON_STIPPLE 0 x0B42 # define GL_EDGE_FLAG 0 x0B43 # define GL_CULL_FACE 0 x0B44 # define GL_CULL_FACE_MODE 0 x0B45 # define GL_FRONT_FACE 0 x0B46 # define GL_POLYGON_OFFSET_FACTOR 0 x8038 # define GL_POLYGON_OFFSET_UNITS 0 x2A00 # define GL_POLYGON_OFFSET_POINT 0 x2A01 # define GL_POLYGON_OFFSET_LINE 0 x2A02 # define GL_POLYGON_OFFSET_FILL 0 x8037 # define GL_COMPILE 0 x1300 # define GL_COMPILE_AND_EXECUTE 0 x1301 # define GL_LIST_BASE 0 x0B32 # define GL_LIST_INDEX 0 x0B33 # define GL_LIST_MODE 0 x0B30 # define GL_NEVER 0 x0200 # define GL_LESS 0 x0201 # define GL_EQUAL 0 x0202 # define GL_LEQUAL 0 x0203 # define GL_GREATER 0 x0204 # define GL_NOTEQUAL 0 x0205 # define GL_GEQUAL 0 x0206 # define GL_ALWAYS 0 x0207 # define GL_DEPTH_TEST 0 x0B71 # define GL_DEPTH_BITS 0 x0D56 # define GL_DEPTH_CLEAR_VALUE 0 x0B73 # define GL_DEPTH_FUNC 0 x0B74 # define GL_DEPTH_RANGE 0 x0B70 # define GL_DEPTH_WRITEMASK 0 x0B72 # define GL_DEPTH_COMPONENT 0 x1902 # define GL_LIGHTING 0 x0B50 # define GL_LIGHT0 0 x4000 # define GL_LIGHT1 0 x4001 # define GL_LIGHT2 0 x4002 # define GL_LIGHT3 0 x4003 # define GL_LIGHT4 0 x4004 # define GL_LIGHT5 0 x4005 # define GL_LIGHT6 0 x4006 # define GL_LIGHT7 0 x4007 # define GL_SPOT_EXPONENT 0 x1205 # define GL_SPOT_CUTOFF 0 x1206 # define GL_CONSTANT_ATTENUATION 0 x1207 # define GL_LINEAR_ATTENUATION 0 x1208 # define GL_QUADRATIC_ATTENUATION 0 x1209 # define GL_AMBIENT 0 x1200 # define GL_DIFFUSE 0 x1201 # define GL_SPECULAR 0 x1202 # define GL_SHININESS 0 x1601 # define GL_EMISSION 0 x1600 # define GL_POSITION 0 x1203 # define GL_SPOT_DIRECTION 0 x1204 # define GL_AMBIENT_AND_DIFFUSE 0 x1602 # define GL_COLOR_INDEXES 0 x1603 # define GL_LIGHT_MODEL_TWO_SIDE 0 x0B52 # define GL_LIGHT_MODEL_LOCAL_VIEWER 0 x0B51 # define GL_LIGHT_MODEL_AMBIENT 0 x0B53 # define GL_FRONT_AND_BACK 0 x0408 # define GL_SHADE_MODEL 0 x0B54 # define GL_FLAT 0 x1D00 # define GL_SMOOTH 0 x1D01 # define GL_COLOR_MATERIAL 0 x0B57 # define GL_COLOR_MATERIAL_FACE 0 x0B55 # define GL_COLOR_MATERIAL_PARAMETER 0 x0B56 # define GL_NORMALIZE 0 x0BA1 # define GL_CLIP_PLANE0 0 x3000 # define GL_CLIP_PLANE1 0 x3001 # define GL_CLIP_PLANE2 0 x3002 # define GL_CLIP_PLANE3 0 x3003 # define GL_CLIP_PLANE4 0 x3004 # define GL_CLIP_PLANE5 0 x3005 # define GL_ACCUM_RED_BITS 0 x0D58 # define GL_ACCUM_GREEN_BITS 0 x0D59 # define GL_ACCUM_BLUE_BITS 0 x0D5A # define GL_ACCUM_ALPHA_BITS 0 x0D5B # define GL_ACCUM_CLEAR_VALUE 0 x0B80 # define GL_ACCUM 0 x0100 # define GL_ADD 0 x0104 # define GL_LOAD 0 x0101 # define GL_MULT 0 x0103 # define GL_RETURN 0 x0102 # define GL_ALPHA_TEST 0 x0BC0 # define GL_ALPHA_TEST_REF 0 x0BC2 # define GL_ALPHA_TEST_FUNC 0 x0BC1 # define GL_BLEND 0 x0BE2 # define GL_BLEND_SRC 0 x0BE1 # define GL_BLEND_DST 0 x0BE0 # define GL_ZERO 0 # define GL_ONE 1 # define GL_SRC_COLOR 0 x0300 # define GL_ONE_MINUS_SRC_COLOR 0 x0301 # define GL_SRC_ALPHA 0 x0302 # define GL_ONE_MINUS_SRC_ALPHA 0 x0303 # define GL_DST_ALPHA 0 x0304 # define GL_ONE_MINUS_DST_ALPHA 0 x0305 # define GL_DST_COLOR 0 x0306 # define GL_ONE_MINUS_DST_COLOR 0 x0307 # define GL_SRC_ALPHA_SATURATE 0 x0308 # define GL_FEEDBACK 0 x1C01 # define GL_RENDER 0 x1C00 # define GL_SELECT 0 x1C02 # define GL_2D 0 x0600 # define GL_3D 0 x0601 # define GL_3D_COLOR 0 x0602 # define GL_3D_COLOR_TEXTURE 0 x0603 # define GL_4D_COLOR_TEXTURE 0 x0604 # define GL_POINT_TOKEN 0 x0701 # define GL_LINE_TOKEN 0 x0702 # define GL_LINE_RESET_TOKEN 0 x0707 # define GL_POLYGON_TOKEN 0 x0703 # define GL_BITMAP_TOKEN 0 x0704 # define GL_DRAW_PIXEL_TOKEN 0 x0705 # define GL_COPY_PIXEL_TOKEN 0 x0706 # define GL_PASS_THROUGH_TOKEN 0 x0700 # define GL_FEEDBACK_BUFFER_POINTER 0 x0DF0 # define GL_FEEDBACK_BUFFER_SIZE 0 x0DF1 # define GL_FEEDBACK_BUFFER_TYPE 0 x0DF2 # define GL_SELECTION_BUFFER_POINTER 0 x0DF3 # define GL_SELECTION_BUFFER_SIZE 0 x0DF4 # define GL_FOG 0 x0B60 # define GL_FOG_MODE 0 x0B65 # define GL_FOG_DENSITY 0 x0B62 # define GL_FOG_COLOR 0 x0B66 # define GL_FOG_INDEX 0 x0B61 # define GL_FOG_START 0 x0B63 # define GL_FOG_END 0 x0B64 # define GL_LINEAR 0 x2601 # define GL_EXP 0 x0800 # define GL_EXP2 0 x0801 # define GL_LOGIC_OP 0 x0BF1 # define GL_INDEX_LOGIC_OP 0 x0BF1 # define GL_COLOR_LOGIC_OP 0 x0BF2 # define GL_LOGIC_OP_MODE 0 x0BF0 # define GL_CLEAR 0 x1500 # define GL_SET 0 x150F # define GL_COPY 0 x1503 # define GL_COPY_INVERTED 0 x150C # define GL_NOOP 0 x1505 # define GL_INVERT 0 x150A # define GL_AND 0 x1501 # define GL_NAND 0 x150E # define GL_OR 0 x1507 # define GL_NOR 0 x1508 # define GL_XOR 0 x1506 # define GL_EQUIV 0 x1509 # define GL_AND_REVERSE 0 x1502 # define GL_AND_INVERTED 0 x1504 # define GL_OR_REVERSE 0 x150B # define GL_OR_INVERTED 0 x150D # define GL_STENCIL_BITS 0 x0D57 # define GL_STENCIL_TEST 0 x0B90 # define GL_STENCIL_CLEAR_VALUE 0 x0B91 # define GL_STENCIL_FUNC 0 x0B92 # define GL_STENCIL_VALUE_MASK 0 x0B93 # define GL_STENCIL_FAIL 0 x0B94 # define GL_STENCIL_PASS_DEPTH_FAIL 0 x0B95 # define GL_STENCIL_PASS_DEPTH_PASS 0 x0B96 # define GL_STENCIL_REF 0 x0B97 # define GL_STENCIL_WRITEMASK 0 x0B98 # define GL_STENCIL_INDEX 0 x1901 # define GL_KEEP 0 x1E00 # define GL_REPLACE 0 x1E01 # define GL_INCR 0 x1E02 # define GL_DECR 0 x1E03 # define GL_NONE 0 # define GL_LEFT 0 x0406 # define GL_RIGHT 0 x0407 # define GL_FRONT_LEFT 0 x0400 # define GL_FRONT_RIGHT 0 x0401 # define GL_BACK_LEFT 0 x0402 # define GL_BACK_RIGHT 0 x0403 # define GL_AUX0 0 x0409 # define GL_AUX1 0 x040A # define GL_AUX2 0 x040B # define GL_AUX3 0 x040C # define GL_COLOR_INDEX 0 x1900 # define GL_RED 0 x1903 # define GL_GREEN 0 x1904 # define GL_BLUE 0 x1905 # define GL_ALPHA 0 x1906 # define GL_LUMINANCE 0 x1909 # define GL_LUMINANCE_ALPHA 0 x190A # define GL_ALPHA_BITS 0 x0D55 # define GL_RED_BITS 0 x0D52 # define GL_GREEN_BITS 0 x0D53 # define GL_BLUE_BITS 0 x0D54 # define GL_INDEX_BITS 0 x0D51 # define GL_SUBPIXEL_BITS 0 x0D50 # define GL_AUX_BUFFERS 0 x0C00 # define GL_READ_BUFFER 0 x0C02 # define GL_DRAW_BUFFER 0 x0C01 # define GL_DOUBLEBUFFER 0 x0C32 # define GL_STEREO 0 x0C33 # define GL_BITMAP 0 x1A00 # define GL_COLOR 0 x1800 # define GL_DEPTH 0 x1801 # define GL_STENCIL 0 x1802 # define GL_DITHER 0 x0BD0 # define GL_RGB 0 x1907 # define GL_RGBA 0 x1908 # define GL_MAX_LIST_NESTING 0 x0B31 # define GL_MAX_EVAL_ORDER 0 x0D30 # define GL_MAX_LIGHTS 0 x0D31 # define GL_MAX_CLIP_PLANES 0 x0D32 # define GL_MAX_TEXTURE_SIZE 0 x0D33 # define GL_MAX_PIXEL_MAP_TABLE 0 x0D34 # define GL_MAX_ATTRIB_STACK_DEPTH 0 x0D35 # define GL_MAX_MODELVIEW_STACK_DEPTH 0 x0D36 # define GL_MAX_NAME_STACK_DEPTH 0 x0D37 # define GL_MAX_PROJECTION_STACK_DEPTH 0 x0D38 # define GL_MAX_TEXTURE_STACK_DEPTH 0 x0D39 # define GL_MAX_VIEWPORT_DIMS 0 x0D3A # define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0 x0D3B # define GL_ATTRIB_STACK_DEPTH 0 x0BB0 # define GL_CLIENT_ATTRIB_STACK_DEPTH 0 x0BB1 # define GL_COLOR_CLEAR_VALUE 0 x0C22 # define GL_COLOR_WRITEMASK 0 x0C23 # define GL_CURRENT_INDEX 0 x0B01 # define GL_CURRENT_COLOR 0 x0B00 # define GL_CURRENT_NORMAL 0 x0B02 # define GL_CURRENT_RASTER_COLOR 0 x0B04 # define GL_CURRENT_RASTER_DISTANCE 0 x0B09 # define GL_CURRENT_RASTER_INDEX 0 x0B05 # define GL_CURRENT_RASTER_POSITION 0 x0B07 # define GL_CURRENT_RASTER_TEXTURE_COORDS 0 x0B06 # define GL_CURRENT_RASTER_POSITION_VALID 0 x0B08 # define GL_CURRENT_TEXTURE_COORDS 0 x0B03 # define GL_INDEX_CLEAR_VALUE 0 x0C20 # define GL_INDEX_MODE 0 x0C30 # define GL_INDEX_WRITEMASK 0 x0C21 # define GL_MODELVIEW_MATRIX 0 x0BA6 # define GL_MODELVIEW_STACK_DEPTH 0 x0BA3 # define GL_NAME_STACK_DEPTH 0 x0D70 # define GL_PROJECTION_MATRIX 0 x0BA7 # define GL_PROJECTION_STACK_DEPTH 0 x0BA4 # define GL_RENDER_MODE 0 x0C40 # define GL_RGBA_MODE 0 x0C31 # define GL_TEXTURE_MATRIX 0 x0BA8 # define GL_TEXTURE_STACK_DEPTH 0 x0BA5 # define GL_VIEWPORT 0 x0BA2 # define GL_AUTO_NORMAL 0 x0D80 # define GL_MAP1_COLOR_4 0 x0D90 # define GL_MAP1_INDEX 0 x0D91 # define GL_MAP1_NORMAL 0 x0D92 # define GL_MAP1_TEXTURE_COORD_1 0 x0D93 # define GL_MAP1_TEXTURE_COORD_2 0 x0D94 # define GL_MAP1_TEXTURE_COORD_3 0 x0D95 # define GL_MAP1_TEXTURE_COORD_4 0 x0D96 # define GL_MAP1_VERTEX_3 0 x0D97 # define GL_MAP1_VERTEX_4 0 x0D98 # define GL_MAP2_COLOR_4 0 x0DB0 # define GL_MAP2_INDEX 0 x0DB1 # define GL_MAP2_NORMAL 0 x0DB2 # define GL_MAP2_TEXTURE_COORD_1 0 x0DB3 # define GL_MAP2_TEXTURE_COORD_2 0 x0DB4 # define GL_MAP2_TEXTURE_COORD_3 0 x0DB5 # define GL_MAP2_TEXTURE_COORD_4 0 x0DB6 # define GL_MAP2_VERTEX_3 0 x0DB7 # define GL_MAP2_VERTEX_4 0 x0DB8 # define GL_MAP1_GRID_DOMAIN 0 x0DD0 # define GL_MAP1_GRID_SEGMENTS 0 x0DD1 # define GL_MAP2_GRID_DOMAIN 0 x0DD2 # define GL_MAP2_GRID_SEGMENTS 0 x0DD3 # define GL_COEFF 0 x0A00 # define GL_ORDER 0 x0A01 # define GL_DOMAIN 0 x0A02 # define GL_PERSPECTIVE_CORRECTION_HINT 0 x0C50 # define GL_POINT_SMOOTH_HINT 0 x0C51 # define GL_LINE_SMOOTH_HINT 0 x0C52 # define GL_POLYGON_SMOOTH_HINT 0 x0C53 # define GL_FOG_HINT 0 x0C54 # define GL_DONT_CARE 0 x1100 # define GL_FASTEST 0 x1101 # define GL_NICEST 0 x1102 # define GL_SCISSOR_BOX 0 x0C10 # define GL_SCISSOR_TEST 0 x0C11 # define GL_MAP_COLOR 0 x0D10 # define GL_MAP_STENCIL 0 x0D11 # define GL_INDEX_SHIFT 0 x0D12 # define GL_INDEX_OFFSET 0 x0D13 # define GL_RED_SCALE 0 x0D14 # define GL_RED_BIAS 0 x0D15 # define GL_GREEN_SCALE 0 x0D18 # define GL_GREEN_BIAS 0 x0D19 # define GL_BLUE_SCALE 0 x0D1A # define GL_BLUE_BIAS 0 x0D1B # define GL_ALPHA_SCALE 0 x0D1C # define GL_ALPHA_BIAS 0 x0D1D # define GL_DEPTH_SCALE 0 x0D1E # define GL_DEPTH_BIAS 0 x0D1F # define GL_PIXEL_MAP_S_TO_S_SIZE 0 x0CB1 # define GL_PIXEL_MAP_I_TO_I_SIZE 0 x0CB0 # define GL_PIXEL_MAP_I_TO_R_SIZE 0 x0CB2 # define GL_PIXEL_MAP_I_TO_G_SIZE 0 x0CB3 # define GL_PIXEL_MAP_I_TO_B_SIZE 0 x0CB4 # define GL_PIXEL_MAP_I_TO_A_SIZE 0 x0CB5 # define GL_PIXEL_MAP_R_TO_R_SIZE 0 x0CB6 # define GL_PIXEL_MAP_G_TO_G_SIZE 0 x0CB7 # define GL_PIXEL_MAP_B_TO_B_SIZE 0 x0CB8 # define GL_PIXEL_MAP_A_TO_A_SIZE 0 x0CB9 # define GL_PIXEL_MAP_S_TO_S 0 x0C71 # define GL_PIXEL_MAP_I_TO_I 0 x0C70 # define GL_PIXEL_MAP_I_TO_R 0 x0C72 # define GL_PIXEL_MAP_I_TO_G 0 x0C73 # define GL_PIXEL_MAP_I_TO_B 0 x0C74 # define GL_PIXEL_MAP_I_TO_A 0 x0C75 # define GL_PIXEL_MAP_R_TO_R 0 x0C76 # define GL_PIXEL_MAP_G_TO_G 0 x0C77 # define GL_PIXEL_MAP_B_TO_B 0 x0C78 # define GL_PIXEL_MAP_A_TO_A 0 x0C79 # define GL_PACK_ALIGNMENT 0 x0D05 # define GL_PACK_LSB_FIRST 0 x0D01 # define GL_PACK_ROW_LENGTH 0 x0D02 # define GL_PACK_SKIP_PIXELS 0 x0D04 # define GL_PACK_SKIP_ROWS 0 x0D03 # define GL_PACK_SWAP_BYTES 0 x0D00 # define GL_UNPACK_ALIGNMENT 0 x0CF5 # define GL_UNPACK_LSB_FIRST 0 x0CF1 # define GL_UNPACK_ROW_LENGTH 0 x0CF2 # define GL_UNPACK_SKIP_PIXELS 0 x0CF4 # define GL_UNPACK_SKIP_ROWS 0 x0CF3 # define GL_UNPACK_SWAP_BYTES 0 x0CF0 # define GL_ZOOM_X 0 x0D16 # define GL_ZOOM_Y 0 x0D17 # define GL_TEXTURE_ENV 0 x2300 # define GL_TEXTURE_ENV_MODE 0 x2200 # define GL_TEXTURE_1D 0 x0DE0 # define GL_TEXTURE_2D 0 x0DE1 # define GL_TEXTURE_WRAP_S 0 x2802 # define GL_TEXTURE_WRAP_T 0 x2803 # define GL_TEXTURE_MAG_FILTER 0 x2800 # define GL_TEXTURE_MIN_FILTER 0 x2801 # define GL_TEXTURE_ENV_COLOR 0 x2201 # define GL_TEXTURE_GEN_S 0 x0C60 # define GL_TEXTURE_GEN_T 0 x0C61 # define GL_TEXTURE_GEN_R 0 x0C62 # define GL_TEXTURE_GEN_Q 0 x0C63 # define GL_TEXTURE_GEN_MODE 0 x2500 # define GL_TEXTURE_BORDER_COLOR 0 x1004 # define GL_TEXTURE_WIDTH 0 x1000 # define GL_TEXTURE_HEIGHT 0 x1001 # define GL_TEXTURE_BORDER 0 x1005 # define GL_TEXTURE_COMPONENTS 0 x1003 # define GL_TEXTURE_RED_SIZE 0 x805C # define GL_TEXTURE_GREEN_SIZE 0 x805D # define GL_TEXTURE_BLUE_SIZE 0 x805E # define GL_TEXTURE_ALPHA_SIZE 0 x805F # define GL_TEXTURE_LUMINANCE_SIZE 0 x8060 # define GL_TEXTURE_INTENSITY_SIZE 0 x8061 # define GL_NEAREST_MIPMAP_NEAREST 0 x2700 # define GL_NEAREST_MIPMAP_LINEAR 0 x2702 # define GL_LINEAR_MIPMAP_NEAREST 0 x2701 # define GL_LINEAR_MIPMAP_LINEAR 0 x2703 # define GL_OBJECT_LINEAR 0 x2401 # define GL_OBJECT_PLANE 0 x2501 # define GL_EYE_LINEAR 0 x2400 # define GL_EYE_PLANE 0 x2502 # define GL_SPHERE_MAP 0 x2402 # define GL_DECAL 0 x2101 # define GL_MODULATE 0 x2100 # define GL_NEAREST 0 x2600 # define GL_REPEAT 0 x2901 # define GL_CLAMP 0 x2900 # define GL_S 0 x2000 # define GL_T 0 x2001 # define GL_R 0 x2002 # define GL_Q 0 x2003 # define GL_VENDOR 0 x1F00 # define GL_RENDERER 0 x1F01 # define GL_VERSION 0 x1F02 # define GL_EXTENSIONS 0 x1F03 # define GL_NO_ERROR 0 # define GL_INVALID_ENUM 0 x0500 # define GL_INVALID_VALUE 0 x0501 # define GL_INVALID_OPERATION 0 x0502 # define GL_STACK_OVERFLOW 0 x0503 # define GL_STACK_UNDERFLOW 0 x0504 # define GL_OUT_OF_MEMORY 0 x0505 # define GL_CURRENT_BIT 0 x00000001 # define GL_POINT_BIT 0 x00000002 # define GL_LINE_BIT 0 x00000004 # define GL_POLYGON_BIT 0 x00000008 # define GL_POLYGON_STIPPLE_BIT 0 x00000010 # define GL_PIXEL_MODE_BIT 0 x00000020 # define GL_LIGHTING_BIT 0 x00000040 # define GL_FOG_BIT 0 x00000080 # define GL_DEPTH_BUFFER_BIT 0 x00000100 # define GL_ACCUM_BUFFER_BIT 0 x00000200 # define GL_STENCIL_BUFFER_BIT 0 x00000400 # define GL_VIEWPORT_BIT 0 x00000800 # define GL_TRANSFORM_BIT 0 x00001000 # define GL_ENABLE_BIT 0 x00002000 # define GL_COLOR_BUFFER_BIT 0 x00004000 # define GL_HINT_BIT 0 x00008000 # define GL_EVAL_BIT 0 x00010000 # define GL_LIST_BIT 0 x00020000 # define GL_TEXTURE_BIT 0 x00040000 # define GL_SCISSOR_BIT 0 x00080000 # define GL_ALL_ATTRIB_BITS 0 x000FFFFF # define GL_PROXY_TEXTURE_1D 0 x8063 # define GL_PROXY_TEXTURE_2D 0 x8064 # define GL_TEXTURE_PRIORITY 0 x8066 # define GL_TEXTURE_RESIDENT 0 x8067 # define GL_TEXTURE_BINDING_1D 0 x8068 # define GL_TEXTURE_BINDING_2D 0 x8069 # define GL_TEXTURE_INTERNAL_FORMAT 0 x1003 # define GL_ALPHA4 0 x803B # define GL_ALPHA8 0 x803C # define GL_ALPHA12 0 x803D # define GL_ALPHA16 0 x803E # define GL_LUMINANCE4 0 x803F # define GL_LUMINANCE8 0 x8040 # define GL_LUMINANCE12 0 x8041 # define GL_LUMINANCE16 0 x8042 # define GL_LUMINANCE4_ALPHA4 0 x8043 # define GL_LUMINANCE6_ALPHA2 0 x8044 # define GL_LUMINANCE8_ALPHA8 0 x8045 # define GL_LUMINANCE12_ALPHA4 0 x8046 # define GL_LUMINANCE12_ALPHA12 0 x8047 # define GL_LUMINANCE16_ALPHA16 0 x8048 # define GL_INTENSITY 0 x8049 # define GL_INTENSITY4 0 x804A # define GL_INTENSITY8 0 x804B # define GL_INTENSITY12 0 x804C # define GL_INTENSITY16 0 x804D # define GL_R3_G3_B2 0 x2A10 # define GL_RGB4 0 x804F # define GL_RGB5 0 x8050 # define GL_RGB8 0 x8051 # define GL_RGB10 0 x8052 # define GL_RGB12 0 x8053 # define GL_RGB16 0 x8054 # define GL_RGBA2 0 x8055 # define GL_RGBA4 0 x8056 # define GL_RGB5_A1 0 x8057 # define GL_RGBA8 0 x8058 # define GL_RGB10_A2 0 x8059 # define GL_RGBA12 0 x805A # define GL_RGBA16 0 x805B # define GL_CLIENT_PIXEL_STORE_BIT 0 x00000001 # define GL_CLIENT_VERTEX_ARRAY_BIT 0 x00000002 # define GL_ALL_CLIENT_ATTRIB_BITS 0 xFFFFFFFF # define GL_CLIENT_ALL_ATTRIB_BITS 0 xFFFFFFFF GLAPI void GLAPIENTRY)",
    "insertText": "glClearIndex(GLfloat c)"
  },
  {
    "label": "glClearColor()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)"
  },
  {
    "label": "glClear()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glClear(GLbitfield mask)"
  },
  {
    "label": "glIndexMask()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexMask(GLuint mask)"
  },
  {
    "label": "glColorMask()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "glAlphaFunc()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glAlphaFunc(GLenum func, GLclampf ref)"
  },
  {
    "label": "glBlendFunc()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glBlendFunc(GLenum sfactor, GLenum dfactor)"
  },
  {
    "label": "glLogicOp()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLogicOp(GLenum opcode)"
  },
  {
    "label": "glCullFace()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCullFace(GLenum mode)"
  },
  {
    "label": "glFrontFace()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFrontFace(GLenum mode)"
  },
  {
    "label": "glPointSize()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPointSize(GLfloat size)"
  },
  {
    "label": "glLineWidth()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLineWidth(GLfloat width)"
  },
  {
    "label": "glLineStipple()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLineStipple(GLint factor, GLushort pattern)"
  },
  {
    "label": "glPolygonMode()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPolygonMode(GLenum face, GLenum mode)"
  },
  {
    "label": "glPolygonOffset()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPolygonOffset(GLfloat factor, GLfloat units)"
  },
  {
    "label": "glPolygonStipple()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPolygonStipple(const GLubyte *mask)"
  },
  {
    "label": "glGetPolygonStipple()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetPolygonStipple(GLubyte *mask)"
  },
  {
    "label": "glEdgeFlag()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEdgeFlag(GLboolean flag)"
  },
  {
    "label": "glEdgeFlagv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEdgeFlagv(const GLboolean *flag)"
  },
  {
    "label": "glScissor()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glScissor(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glClipPlane()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glClipPlane(GLenum plane, const GLdouble *equation)"
  },
  {
    "label": "glGetClipPlane()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetClipPlane(GLenum plane, GLdouble *equation)"
  },
  {
    "label": "glDrawBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDrawBuffer(GLenum mode)"
  },
  {
    "label": "glReadBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glReadBuffer(GLenum mode)"
  },
  {
    "label": "glEnable()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEnable(GLenum cap)"
  },
  {
    "label": "glDisable()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDisable(GLenum cap)"
  },
  {
    "label": "glIsEnabled()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean GLAPIENTRY)",
    "insertText": "glIsEnabled(GLenum cap)"
  },
  {
    "label": "glEnableClientState()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEnableClientState(GLenum cap)"
  },
  {
    "label": "glDisableClientState()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDisableClientState(GLenum cap)"
  },
  {
    "label": "glGetBooleanv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetBooleanv(GLenum pname, GLboolean *params)"
  },
  {
    "label": "glGetDoublev()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetDoublev(GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetFloatv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetFloatv(GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetIntegerv(GLenum pname, GLint *params)"
  },
  {
    "label": "glPushAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPushAttrib(GLbitfield mask)"
  },
  {
    "label": "glPopAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPopAttrib(void)"
  },
  {
    "label": "glPushClientAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPushClientAttrib(GLbitfield mask)"
  },
  {
    "label": "glPopClientAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPopClientAttrib(void)"
  },
  {
    "label": "glRenderMode()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint GLAPIENTRY)",
    "insertText": "glRenderMode(GLenum mode)"
  },
  {
    "label": "glGetError()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum GLAPIENTRY)",
    "insertText": "glGetError(void)"
  },
  {
    "label": "glGetString()",
    "kind": "Method",
    "detail": "Function (GLAPI const GLubyte* GLAPIENTRY)",
    "insertText": "glGetString(GLenum name)"
  },
  {
    "label": "glFinish()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFinish(void)"
  },
  {
    "label": "glFlush()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFlush(void)"
  },
  {
    "label": "glHint()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glHint(GLenum target, GLenum mode)"
  },
  {
    "label": "glClearDepth()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glClearDepth(GLclampd depth)"
  },
  {
    "label": "glDepthFunc()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDepthFunc(GLenum func)"
  },
  {
    "label": "glDepthMask()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDepthMask(GLboolean flag)"
  },
  {
    "label": "glDepthRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDepthRange(GLclampd near_val, GLclampd far_val)"
  },
  {
    "label": "glClearAccum()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glAccum()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glAccum(GLenum op, GLfloat value)"
  },
  {
    "label": "glMatrixMode()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMatrixMode(GLenum mode)"
  },
  {
    "label": "glOrtho()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)"
  },
  {
    "label": "glFrustum()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val)"
  },
  {
    "label": "glViewport()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glViewport(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glPushMatrix()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPushMatrix(void)"
  },
  {
    "label": "glPopMatrix()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPopMatrix(void)"
  },
  {
    "label": "glLoadIdentity()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLoadIdentity(void)"
  },
  {
    "label": "glLoadMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLoadMatrixd(const GLdouble *m)"
  },
  {
    "label": "glLoadMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLoadMatrixf(const GLfloat *m)"
  },
  {
    "label": "glMultMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultMatrixd(const GLdouble *m)"
  },
  {
    "label": "glMultMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultMatrixf(const GLfloat *m)"
  },
  {
    "label": "glRotated()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glRotatef()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glScaled()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glScaled(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glScalef()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glScalef(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glTranslated()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTranslated(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glTranslatef()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTranslatef(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glIsList()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean GLAPIENTRY)",
    "insertText": "glIsList(GLuint list)"
  },
  {
    "label": "glDeleteLists()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDeleteLists(GLuint list, GLsizei range)"
  },
  {
    "label": "glGenLists()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint GLAPIENTRY)",
    "insertText": "glGenLists(GLsizei range)"
  },
  {
    "label": "glNewList()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNewList(GLuint list, GLenum mode)"
  },
  {
    "label": "glEndList()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEndList(void)"
  },
  {
    "label": "glCallList()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCallList(GLuint list)"
  },
  {
    "label": "glCallLists()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCallLists(GLsizei n, GLenum type, const GLvoid *lists)"
  },
  {
    "label": "glListBase()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glListBase(GLuint base)"
  },
  {
    "label": "glBegin()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glBegin(GLenum mode)"
  },
  {
    "label": "glEnd()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEnd(void)"
  },
  {
    "label": "glVertex2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex2d(GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertex2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex2f(GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertex2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex2i(GLint x, GLint y)"
  },
  {
    "label": "glVertex2s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex2s(GLshort x, GLshort y)"
  },
  {
    "label": "glVertex3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex3d(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertex3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex3f(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertex3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex3i(GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertex3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex3s(GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertex4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertex4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertex4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex4i(GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertex4s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertex2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex2dv(const GLdouble *v)"
  },
  {
    "label": "glVertex2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex2fv(const GLfloat *v)"
  },
  {
    "label": "glVertex2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex2iv(const GLint *v)"
  },
  {
    "label": "glVertex2sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex2sv(const GLshort *v)"
  },
  {
    "label": "glVertex3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex3dv(const GLdouble *v)"
  },
  {
    "label": "glVertex3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex3fv(const GLfloat *v)"
  },
  {
    "label": "glVertex3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex3iv(const GLint *v)"
  },
  {
    "label": "glVertex3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex3sv(const GLshort *v)"
  },
  {
    "label": "glVertex4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex4dv(const GLdouble *v)"
  },
  {
    "label": "glVertex4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex4fv(const GLfloat *v)"
  },
  {
    "label": "glVertex4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex4iv(const GLint *v)"
  },
  {
    "label": "glVertex4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertex4sv(const GLshort *v)"
  },
  {
    "label": "glNormal3b()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)"
  },
  {
    "label": "glNormal3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)"
  },
  {
    "label": "glNormal3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)"
  },
  {
    "label": "glNormal3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3i(GLint nx, GLint ny, GLint nz)"
  },
  {
    "label": "glNormal3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3s(GLshort nx, GLshort ny, GLshort nz)"
  },
  {
    "label": "glNormal3bv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3bv(const GLbyte *v)"
  },
  {
    "label": "glNormal3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3dv(const GLdouble *v)"
  },
  {
    "label": "glNormal3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3fv(const GLfloat *v)"
  },
  {
    "label": "glNormal3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3iv(const GLint *v)"
  },
  {
    "label": "glNormal3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormal3sv(const GLshort *v)"
  },
  {
    "label": "glIndexd()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexd(GLdouble c)"
  },
  {
    "label": "glIndexf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexf(GLfloat c)"
  },
  {
    "label": "glIndexi()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexi(GLint c)"
  },
  {
    "label": "glIndexs()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexs(GLshort c)"
  },
  {
    "label": "glIndexub()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexub(GLubyte c)"
  },
  {
    "label": "glIndexdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexdv(const GLdouble *c)"
  },
  {
    "label": "glIndexfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexfv(const GLfloat *c)"
  },
  {
    "label": "glIndexiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexiv(const GLint *c)"
  },
  {
    "label": "glIndexsv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexsv(const GLshort *c)"
  },
  {
    "label": "glIndexubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexubv(const GLubyte *c)"
  },
  {
    "label": "glColor3b()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3b(GLbyte red, GLbyte green, GLbyte blue)"
  },
  {
    "label": "glColor3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3d(GLdouble red, GLdouble green, GLdouble blue)"
  },
  {
    "label": "glColor3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3f(GLfloat red, GLfloat green, GLfloat blue)"
  },
  {
    "label": "glColor3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3i(GLint red, GLint green, GLint blue)"
  },
  {
    "label": "glColor3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3s(GLshort red, GLshort green, GLshort blue)"
  },
  {
    "label": "glColor3ub()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3ub(GLubyte red, GLubyte green, GLubyte blue)"
  },
  {
    "label": "glColor3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3ui(GLuint red, GLuint green, GLuint blue)"
  },
  {
    "label": "glColor3us()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3us(GLushort red, GLushort green, GLushort blue)"
  },
  {
    "label": "glColor4b()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)"
  },
  {
    "label": "glColor4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)"
  },
  {
    "label": "glColor4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glColor4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4i(GLint red, GLint green, GLint blue, GLint alpha)"
  },
  {
    "label": "glColor4s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)"
  },
  {
    "label": "glColor4ub()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)"
  },
  {
    "label": "glColor4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)"
  },
  {
    "label": "glColor4us()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)"
  },
  {
    "label": "glColor3bv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3bv(const GLbyte *v)"
  },
  {
    "label": "glColor3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3dv(const GLdouble *v)"
  },
  {
    "label": "glColor3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3fv(const GLfloat *v)"
  },
  {
    "label": "glColor3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3iv(const GLint *v)"
  },
  {
    "label": "glColor3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3sv(const GLshort *v)"
  },
  {
    "label": "glColor3ubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3ubv(const GLubyte *v)"
  },
  {
    "label": "glColor3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3uiv(const GLuint *v)"
  },
  {
    "label": "glColor3usv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor3usv(const GLushort *v)"
  },
  {
    "label": "glColor4bv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4bv(const GLbyte *v)"
  },
  {
    "label": "glColor4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4dv(const GLdouble *v)"
  },
  {
    "label": "glColor4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4fv(const GLfloat *v)"
  },
  {
    "label": "glColor4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4iv(const GLint *v)"
  },
  {
    "label": "glColor4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4sv(const GLshort *v)"
  },
  {
    "label": "glColor4ubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4ubv(const GLubyte *v)"
  },
  {
    "label": "glColor4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4uiv(const GLuint *v)"
  },
  {
    "label": "glColor4usv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColor4usv(const GLushort *v)"
  },
  {
    "label": "glTexCoord1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord1d(GLdouble s)"
  },
  {
    "label": "glTexCoord1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord1f(GLfloat s)"
  },
  {
    "label": "glTexCoord1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord1i(GLint s)"
  },
  {
    "label": "glTexCoord1s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord1s(GLshort s)"
  },
  {
    "label": "glTexCoord2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord2d(GLdouble s, GLdouble t)"
  },
  {
    "label": "glTexCoord2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord2f(GLfloat s, GLfloat t)"
  },
  {
    "label": "glTexCoord2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord2i(GLint s, GLint t)"
  },
  {
    "label": "glTexCoord2s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord2s(GLshort s, GLshort t)"
  },
  {
    "label": "glTexCoord3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "glTexCoord3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "glTexCoord3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord3i(GLint s, GLint t, GLint r)"
  },
  {
    "label": "glTexCoord3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord3s(GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "glTexCoord4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "glTexCoord4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "glTexCoord4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord4i(GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "glTexCoord4s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "glTexCoord1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord1dv(const GLdouble *v)"
  },
  {
    "label": "glTexCoord1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord1fv(const GLfloat *v)"
  },
  {
    "label": "glTexCoord1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord1iv(const GLint *v)"
  },
  {
    "label": "glTexCoord1sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord1sv(const GLshort *v)"
  },
  {
    "label": "glTexCoord2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord2dv(const GLdouble *v)"
  },
  {
    "label": "glTexCoord2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord2fv(const GLfloat *v)"
  },
  {
    "label": "glTexCoord2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord2iv(const GLint *v)"
  },
  {
    "label": "glTexCoord2sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord2sv(const GLshort *v)"
  },
  {
    "label": "glTexCoord3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord3dv(const GLdouble *v)"
  },
  {
    "label": "glTexCoord3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord3fv(const GLfloat *v)"
  },
  {
    "label": "glTexCoord3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord3iv(const GLint *v)"
  },
  {
    "label": "glTexCoord3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord3sv(const GLshort *v)"
  },
  {
    "label": "glTexCoord4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord4dv(const GLdouble *v)"
  },
  {
    "label": "glTexCoord4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord4fv(const GLfloat *v)"
  },
  {
    "label": "glTexCoord4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord4iv(const GLint *v)"
  },
  {
    "label": "glTexCoord4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoord4sv(const GLshort *v)"
  },
  {
    "label": "glRasterPos2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos2d(GLdouble x, GLdouble y)"
  },
  {
    "label": "glRasterPos2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos2f(GLfloat x, GLfloat y)"
  },
  {
    "label": "glRasterPos2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos2i(GLint x, GLint y)"
  },
  {
    "label": "glRasterPos2s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos2s(GLshort x, GLshort y)"
  },
  {
    "label": "glRasterPos3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glRasterPos3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glRasterPos3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos3i(GLint x, GLint y, GLint z)"
  },
  {
    "label": "glRasterPos3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos3s(GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glRasterPos4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glRasterPos4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glRasterPos4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos4i(GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glRasterPos4s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glRasterPos2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos2dv(const GLdouble *v)"
  },
  {
    "label": "glRasterPos2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos2fv(const GLfloat *v)"
  },
  {
    "label": "glRasterPos2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos2iv(const GLint *v)"
  },
  {
    "label": "glRasterPos2sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos2sv(const GLshort *v)"
  },
  {
    "label": "glRasterPos3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos3dv(const GLdouble *v)"
  },
  {
    "label": "glRasterPos3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos3fv(const GLfloat *v)"
  },
  {
    "label": "glRasterPos3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos3iv(const GLint *v)"
  },
  {
    "label": "glRasterPos3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos3sv(const GLshort *v)"
  },
  {
    "label": "glRasterPos4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos4dv(const GLdouble *v)"
  },
  {
    "label": "glRasterPos4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos4fv(const GLfloat *v)"
  },
  {
    "label": "glRasterPos4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos4iv(const GLint *v)"
  },
  {
    "label": "glRasterPos4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRasterPos4sv(const GLshort *v)"
  },
  {
    "label": "glRectd()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)"
  },
  {
    "label": "glRectf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)"
  },
  {
    "label": "glRecti()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRecti(GLint x1, GLint y1, GLint x2, GLint y2)"
  },
  {
    "label": "glRects()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)"
  },
  {
    "label": "glRectdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRectdv(const GLdouble *v1, const GLdouble *v2)"
  },
  {
    "label": "glRectfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRectfv(const GLfloat *v1, const GLfloat *v2)"
  },
  {
    "label": "glRectiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRectiv(const GLint *v1, const GLint *v2)"
  },
  {
    "label": "glRectsv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glRectsv(const GLshort *v1, const GLshort *v2)"
  },
  {
    "label": "glVertexPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr)"
  },
  {
    "label": "glNormalPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glNormalPointer(GLenum type, GLsizei stride, const GLvoid *ptr)"
  },
  {
    "label": "glColorPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr)"
  },
  {
    "label": "glIndexPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glIndexPointer(GLenum type, GLsizei stride, const GLvoid *ptr)"
  },
  {
    "label": "glTexCoordPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *ptr)"
  },
  {
    "label": "glEdgeFlagPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEdgeFlagPointer(GLsizei stride, const GLvoid *ptr)"
  },
  {
    "label": "glGetPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetPointerv(GLenum pname, GLvoid **params)"
  },
  {
    "label": "glArrayElement()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glArrayElement(GLint i)"
  },
  {
    "label": "glDrawArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDrawArrays(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glDrawElements()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)"
  },
  {
    "label": "glInterleavedArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glInterleavedArrays(GLenum format, GLsizei stride, const GLvoid *pointer)"
  },
  {
    "label": "glShadeModel()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glShadeModel(GLenum mode)"
  },
  {
    "label": "glLightf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLightf(GLenum light, GLenum pname, GLfloat param)"
  },
  {
    "label": "glLighti()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLighti(GLenum light, GLenum pname, GLint param)"
  },
  {
    "label": "glLightfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLightfv(GLenum light, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glLightiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLightiv(GLenum light, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetLightfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetLightfv(GLenum light, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetLightiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetLightiv(GLenum light, GLenum pname, GLint *params)"
  },
  {
    "label": "glLightModelf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLightModelf(GLenum pname, GLfloat param)"
  },
  {
    "label": "glLightModeli()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLightModeli(GLenum pname, GLint param)"
  },
  {
    "label": "glLightModelfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLightModelfv(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glLightModeliv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLightModeliv(GLenum pname, const GLint *params)"
  },
  {
    "label": "glMaterialf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMaterialf(GLenum face, GLenum pname, GLfloat param)"
  },
  {
    "label": "glMateriali()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMateriali(GLenum face, GLenum pname, GLint param)"
  },
  {
    "label": "glMaterialfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glMaterialiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMaterialiv(GLenum face, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetMaterialfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMaterialiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetMaterialiv(GLenum face, GLenum pname, GLint *params)"
  },
  {
    "label": "glColorMaterial()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColorMaterial(GLenum face, GLenum mode)"
  },
  {
    "label": "glPixelZoom()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPixelZoom(GLfloat xfactor, GLfloat yfactor)"
  },
  {
    "label": "glPixelStoref()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPixelStoref(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPixelStorei()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPixelStorei(GLenum pname, GLint param)"
  },
  {
    "label": "glPixelTransferf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPixelTransferf(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPixelTransferi()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPixelTransferi(GLenum pname, GLint param)"
  },
  {
    "label": "glPixelMapfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat *values)"
  },
  {
    "label": "glPixelMapuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint *values)"
  },
  {
    "label": "glPixelMapusv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort *values)"
  },
  {
    "label": "glGetPixelMapfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetPixelMapfv(GLenum map, GLfloat *values)"
  },
  {
    "label": "glGetPixelMapuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetPixelMapuiv(GLenum map, GLuint *values)"
  },
  {
    "label": "glGetPixelMapusv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetPixelMapusv(GLenum map, GLushort *values)"
  },
  {
    "label": "glBitmap()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)"
  },
  {
    "label": "glReadPixels()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)"
  },
  {
    "label": "glDrawPixels()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "glCopyPixels()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)"
  },
  {
    "label": "glStencilFunc()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glStencilFunc(GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilMask()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glStencilMask(GLuint mask)"
  },
  {
    "label": "glStencilOp()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)"
  },
  {
    "label": "glClearStencil()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glClearStencil(GLint s)"
  },
  {
    "label": "glTexGend()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexGend(GLenum coord, GLenum pname, GLdouble param)"
  },
  {
    "label": "glTexGenf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexGenf(GLenum coord, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTexGeni()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexGeni(GLenum coord, GLenum pname, GLint param)"
  },
  {
    "label": "glTexGendv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexGendv(GLenum coord, GLenum pname, const GLdouble *params)"
  },
  {
    "label": "glTexGenfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTexGeniv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexGeniv(GLenum coord, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetTexGendv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexGendv(GLenum coord, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetTexGenfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexGeniv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexGeniv(GLenum coord, GLenum pname, GLint *params)"
  },
  {
    "label": "glTexEnvf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexEnvf(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTexEnvi()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexEnvi(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glTexEnvfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTexEnviv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexEnviv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetTexEnvfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexEnviv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexEnviv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glTexParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexParameterf(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTexParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glGetTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexLevelParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexLevelParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "glTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "glGetTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGenTextures(GLsizei n, GLuint *textures)"
  },
  {
    "label": "glDeleteTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glDeleteTextures(GLsizei n, const GLuint *textures)"
  },
  {
    "label": "glBindTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glBindTexture(GLenum target, GLuint texture)"
  },
  {
    "label": "glPrioritizeTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPrioritizeTextures(GLsizei n, const GLuint *textures, const GLclampf *priorities)"
  },
  {
    "label": "glAreTexturesResident()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean GLAPIENTRY)",
    "insertText": "glAreTexturesResident(GLsizei n, const GLuint *textures, GLboolean *residences)"
  },
  {
    "label": "glIsTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean GLAPIENTRY)",
    "insertText": "glIsTexture(GLuint texture)"
  },
  {
    "label": "glTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "glTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "glCopyTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glMap1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)"
  },
  {
    "label": "glMap1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)"
  },
  {
    "label": "glMap2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)"
  },
  {
    "label": "glMap2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)"
  },
  {
    "label": "glGetMapdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetMapdv(GLenum target, GLenum query, GLdouble *v)"
  },
  {
    "label": "glGetMapfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetMapfv(GLenum target, GLenum query, GLfloat *v)"
  },
  {
    "label": "glGetMapiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetMapiv(GLenum target, GLenum query, GLint *v)"
  },
  {
    "label": "glEvalCoord1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalCoord1d(GLdouble u)"
  },
  {
    "label": "glEvalCoord1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalCoord1f(GLfloat u)"
  },
  {
    "label": "glEvalCoord1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalCoord1dv(const GLdouble *u)"
  },
  {
    "label": "glEvalCoord1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalCoord1fv(const GLfloat *u)"
  },
  {
    "label": "glEvalCoord2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalCoord2d(GLdouble u, GLdouble v)"
  },
  {
    "label": "glEvalCoord2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalCoord2f(GLfloat u, GLfloat v)"
  },
  {
    "label": "glEvalCoord2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalCoord2dv(const GLdouble *u)"
  },
  {
    "label": "glEvalCoord2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalCoord2fv(const GLfloat *u)"
  },
  {
    "label": "glMapGrid1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)"
  },
  {
    "label": "glMapGrid1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)"
  },
  {
    "label": "glMapGrid2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)"
  },
  {
    "label": "glMapGrid2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glEvalPoint1()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalPoint1(GLint i)"
  },
  {
    "label": "glEvalPoint2()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalPoint2(GLint i, GLint j)"
  },
  {
    "label": "glEvalMesh1()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalMesh1(GLenum mode, GLint i1, GLint i2)"
  },
  {
    "label": "glEvalMesh2()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)"
  },
  {
    "label": "glFogf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFogf(GLenum pname, GLfloat param)"
  },
  {
    "label": "glFogi()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFogi(GLenum pname, GLint param)"
  },
  {
    "label": "glFogfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFogfv(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glFogiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFogiv(GLenum pname, const GLint *params)"
  },
  {
    "label": "glFeedbackBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glFeedbackBuffer(GLsizei size, GLenum type, GLfloat *buffer)"
  },
  {
    "label": "glPassThrough()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPassThrough(GLfloat token)"
  },
  {
    "label": "glSelectBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glSelectBuffer(GLsizei size, GLuint *buffer)"
  },
  {
    "label": "glInitNames()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glInitNames(void)"
  },
  {
    "label": "glLoadName()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLoadName(GLuint name)"
  },
  {
    "label": "glPushName()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPushName(GLuint name)"
  },
  {
    "label": "glPopName()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glPopName(void)"
  },
  {
    "label": "glDrawRangeElements()",
    "kind": "Method",
    "detail": "Function (# define GL_RESCALE_NORMAL 0 x803A # define GL_CLAMP_TO_EDGE 0 x812F # define GL_MAX_ELEMENTS_VERTICES 0 x80E8 # define GL_MAX_ELEMENTS_INDICES 0 x80E9 # define GL_BGR 0 x80E0 # define GL_BGRA 0 x80E1 # define GL_UNSIGNED_BYTE_3_3_2 0 x8032 # define GL_UNSIGNED_BYTE_2_3_3_REV 0 x8362 # define GL_UNSIGNED_SHORT_5_6_5 0 x8363 # define GL_UNSIGNED_SHORT_5_6_5_REV 0 x8364 # define GL_UNSIGNED_SHORT_4_4_4_4 0 x8033 # define GL_UNSIGNED_SHORT_4_4_4_4_REV 0 x8365 # define GL_UNSIGNED_SHORT_5_5_5_1 0 x8034 # define GL_UNSIGNED_SHORT_1_5_5_5_REV 0 x8366 # define GL_UNSIGNED_INT_8_8_8_8 0 x8035 # define GL_UNSIGNED_INT_8_8_8_8_REV 0 x8367 # define GL_UNSIGNED_INT_10_10_10_2 0 x8036 # define GL_UNSIGNED_INT_2_10_10_10_REV 0 x8368 # define GL_LIGHT_MODEL_COLOR_CONTROL 0 x81F8 # define GL_SINGLE_COLOR 0 x81F9 # define GL_SEPARATE_SPECULAR_COLOR 0 x81FA # define GL_TEXTURE_MIN_LOD 0 x813A # define GL_TEXTURE_MAX_LOD 0 x813B # define GL_TEXTURE_BASE_LEVEL 0 x813C # define GL_TEXTURE_MAX_LEVEL 0 x813D # define GL_SMOOTH_POINT_SIZE_RANGE 0 x0B12 # define GL_SMOOTH_POINT_SIZE_GRANULARITY 0 x0B13 # define GL_SMOOTH_LINE_WIDTH_RANGE 0 x0B22 # define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0 x0B23 # define GL_ALIASED_POINT_SIZE_RANGE 0 x846D # define GL_ALIASED_LINE_WIDTH_RANGE 0 x846E # define GL_PACK_SKIP_IMAGES 0 x806B # define GL_PACK_IMAGE_HEIGHT 0 x806C # define GL_UNPACK_SKIP_IMAGES 0 x806D # define GL_UNPACK_IMAGE_HEIGHT 0 x806E # define GL_TEXTURE_3D 0 x806F # define GL_PROXY_TEXTURE_3D 0 x8070 # define GL_TEXTURE_DEPTH 0 x8071 # define GL_TEXTURE_WRAP_R 0 x8072 # define GL_MAX_3D_TEXTURE_SIZE 0 x8073 # define GL_TEXTURE_BINDING_3D 0 x806A GLAPI void GLAPIENTRY)",
    "insertText": "glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "glTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "glCopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glColorTable()",
    "kind": "Method",
    "detail": "Function (# define GL_CONSTANT_COLOR 0 x8001 # define GL_ONE_MINUS_CONSTANT_COLOR 0 x8002 # define GL_CONSTANT_ALPHA 0 x8003 # define GL_ONE_MINUS_CONSTANT_ALPHA 0 x8004 # define GL_COLOR_TABLE 0 x80D0 # define GL_POST_CONVOLUTION_COLOR_TABLE 0 x80D1 # define GL_POST_COLOR_MATRIX_COLOR_TABLE 0 x80D2 # define GL_PROXY_COLOR_TABLE 0 x80D3 # define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0 x80D4 # define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0 x80D5 # define GL_COLOR_TABLE_SCALE 0 x80D6 # define GL_COLOR_TABLE_BIAS 0 x80D7 # define GL_COLOR_TABLE_FORMAT 0 x80D8 # define GL_COLOR_TABLE_WIDTH 0 x80D9 # define GL_COLOR_TABLE_RED_SIZE 0 x80DA # define GL_COLOR_TABLE_GREEN_SIZE 0 x80DB # define GL_COLOR_TABLE_BLUE_SIZE 0 x80DC # define GL_COLOR_TABLE_ALPHA_SIZE 0 x80DD # define GL_COLOR_TABLE_LUMINANCE_SIZE 0 x80DE # define GL_COLOR_TABLE_INTENSITY_SIZE 0 x80DF # define GL_CONVOLUTION_1D 0 x8010 # define GL_CONVOLUTION_2D 0 x8011 # define GL_SEPARABLE_2D 0 x8012 # define GL_CONVOLUTION_BORDER_MODE 0 x8013 # define GL_CONVOLUTION_FILTER_SCALE 0 x8014 # define GL_CONVOLUTION_FILTER_BIAS 0 x8015 # define GL_REDUCE 0 x8016 # define GL_CONVOLUTION_FORMAT 0 x8017 # define GL_CONVOLUTION_WIDTH 0 x8018 # define GL_CONVOLUTION_HEIGHT 0 x8019 # define GL_MAX_CONVOLUTION_WIDTH 0 x801A # define GL_MAX_CONVOLUTION_HEIGHT 0 x801B # define GL_POST_CONVOLUTION_RED_SCALE 0 x801C # define GL_POST_CONVOLUTION_GREEN_SCALE 0 x801D # define GL_POST_CONVOLUTION_BLUE_SCALE 0 x801E # define GL_POST_CONVOLUTION_ALPHA_SCALE 0 x801F # define GL_POST_CONVOLUTION_RED_BIAS 0 x8020 # define GL_POST_CONVOLUTION_GREEN_BIAS 0 x8021 # define GL_POST_CONVOLUTION_BLUE_BIAS 0 x8022 # define GL_POST_CONVOLUTION_ALPHA_BIAS 0 x8023 # define GL_CONSTANT_BORDER 0 x8151 # define GL_REPLICATE_BORDER 0 x8153 # define GL_CONVOLUTION_BORDER_COLOR 0 x8154 # define GL_COLOR_MATRIX 0 x80B1 # define GL_COLOR_MATRIX_STACK_DEPTH 0 x80B2 # define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0 x80B3 # define GL_POST_COLOR_MATRIX_RED_SCALE 0 x80B4 # define GL_POST_COLOR_MATRIX_GREEN_SCALE 0 x80B5 # define GL_POST_COLOR_MATRIX_BLUE_SCALE 0 x80B6 # define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0 x80B7 # define GL_POST_COLOR_MATRIX_RED_BIAS 0 x80B8 # define GL_POST_COLOR_MATRIX_GREEN_BIAS 0 x80B9 # define GL_POST_COLOR_MATRIX_BLUE_BIAS 0 x80BA # define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0 x80BB # define GL_HISTOGRAM 0 x8024 # define GL_PROXY_HISTOGRAM 0 x8025 # define GL_HISTOGRAM_WIDTH 0 x8026 # define GL_HISTOGRAM_FORMAT 0 x8027 # define GL_HISTOGRAM_RED_SIZE 0 x8028 # define GL_HISTOGRAM_GREEN_SIZE 0 x8029 # define GL_HISTOGRAM_BLUE_SIZE 0 x802A # define GL_HISTOGRAM_ALPHA_SIZE 0 x802B # define GL_HISTOGRAM_LUMINANCE_SIZE 0 x802C # define GL_HISTOGRAM_SINK 0 x802D # define GL_MINMAX 0 x802E # define GL_MINMAX_FORMAT 0 x802F # define GL_MINMAX_SINK 0 x8030 # define GL_TABLE_TOO_LARGE 0 x8031 # define GL_BLEND_EQUATION 0 x8009 # define GL_MIN 0 x8007 # define GL_MAX 0 x8008 # define GL_FUNC_ADD 0 x8006 # define GL_FUNC_SUBTRACT 0 x800A # define GL_FUNC_REVERSE_SUBTRACT 0 x800B # define GL_BLEND_COLOR 0 x8005 GLAPI void GLAPIENTRY)",
    "insertText": "glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)"
  },
  {
    "label": "glColorSubTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)"
  },
  {
    "label": "glColorTableParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColorTableParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glColorTableParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glColorTableParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glCopyColorSubTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyColorTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glGetColorTable()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetColorTable(GLenum target, GLenum format, GLenum type, GLvoid *table)"
  },
  {
    "label": "glGetColorTableParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetColorTableParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetColorTableParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glBlendEquation()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glBlendEquation(GLenum mode)"
  },
  {
    "label": "glBlendColor()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)"
  },
  {
    "label": "glHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glResetHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glResetHistogram(GLenum target)"
  },
  {
    "label": "glGetHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)"
  },
  {
    "label": "glGetHistogramParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetHistogramParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetHistogramParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMinmax(GLenum target, GLenum internalformat, GLboolean sink)"
  },
  {
    "label": "glResetMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glResetMinmax(GLenum target)"
  },
  {
    "label": "glGetMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values)"
  },
  {
    "label": "glGetMinmaxParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetMinmaxParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glConvolutionFilter1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)"
  },
  {
    "label": "glConvolutionFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)"
  },
  {
    "label": "glConvolutionParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glConvolutionParameterf(GLenum target, GLenum pname, GLfloat params)"
  },
  {
    "label": "glConvolutionParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glConvolutionParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glConvolutionParameteri(GLenum target, GLenum pname, GLint params)"
  },
  {
    "label": "glConvolutionParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glConvolutionParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glCopyConvolutionFilter1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyConvolutionFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetConvolutionFilter()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, GLvoid *image)"
  },
  {
    "label": "glGetConvolutionParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetConvolutionParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glSeparableFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)"
  },
  {
    "label": "glGetSeparableFilter()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetSeparableFilter(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (# define GL_TEXTURE0 0 x84C0 # define GL_TEXTURE1 0 x84C1 # define GL_TEXTURE2 0 x84C2 # define GL_TEXTURE3 0 x84C3 # define GL_TEXTURE4 0 x84C4 # define GL_TEXTURE5 0 x84C5 # define GL_TEXTURE6 0 x84C6 # define GL_TEXTURE7 0 x84C7 # define GL_TEXTURE8 0 x84C8 # define GL_TEXTURE9 0 x84C9 # define GL_TEXTURE10 0 x84CA # define GL_TEXTURE11 0 x84CB # define GL_TEXTURE12 0 x84CC # define GL_TEXTURE13 0 x84CD # define GL_TEXTURE14 0 x84CE # define GL_TEXTURE15 0 x84CF # define GL_TEXTURE16 0 x84D0 # define GL_TEXTURE17 0 x84D1 # define GL_TEXTURE18 0 x84D2 # define GL_TEXTURE19 0 x84D3 # define GL_TEXTURE20 0 x84D4 # define GL_TEXTURE21 0 x84D5 # define GL_TEXTURE22 0 x84D6 # define GL_TEXTURE23 0 x84D7 # define GL_TEXTURE24 0 x84D8 # define GL_TEXTURE25 0 x84D9 # define GL_TEXTURE26 0 x84DA # define GL_TEXTURE27 0 x84DB # define GL_TEXTURE28 0 x84DC # define GL_TEXTURE29 0 x84DD # define GL_TEXTURE30 0 x84DE # define GL_TEXTURE31 0 x84DF # define GL_ACTIVE_TEXTURE 0 x84E0 # define GL_CLIENT_ACTIVE_TEXTURE 0 x84E1 # define GL_MAX_TEXTURE_UNITS 0 x84E2 # define GL_NORMAL_MAP 0 x8511 # define GL_REFLECTION_MAP 0 x8512 # define GL_TEXTURE_CUBE_MAP 0 x8513 # define GL_TEXTURE_BINDING_CUBE_MAP 0 x8514 # define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0 x8515 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0 x8516 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0 x8517 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0 x8518 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0 x8519 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0 x851A # define GL_PROXY_TEXTURE_CUBE_MAP 0 x851B # define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0 x851C # define GL_COMPRESSED_ALPHA 0 x84E9 # define GL_COMPRESSED_LUMINANCE 0 x84EA # define GL_COMPRESSED_LUMINANCE_ALPHA 0 x84EB # define GL_COMPRESSED_INTENSITY 0 x84EC # define GL_COMPRESSED_RGB 0 x84ED # define GL_COMPRESSED_RGBA 0 x84EE # define GL_TEXTURE_COMPRESSION_HINT 0 x84EF # define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0 x86A0 # define GL_TEXTURE_COMPRESSED 0 x86A1 # define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0 x86A2 # define GL_COMPRESSED_TEXTURE_FORMATS 0 x86A3 # define GL_MULTISAMPLE 0 x809D # define GL_SAMPLE_ALPHA_TO_COVERAGE 0 x809E # define GL_SAMPLE_ALPHA_TO_ONE 0 x809F # define GL_SAMPLE_COVERAGE 0 x80A0 # define GL_SAMPLE_BUFFERS 0 x80A8 # define GL_SAMPLES 0 x80A9 # define GL_SAMPLE_COVERAGE_VALUE 0 x80AA # define GL_SAMPLE_COVERAGE_INVERT 0 x80AB # define GL_MULTISAMPLE_BIT 0 x20000000 # define GL_TRANSPOSE_MODELVIEW_MATRIX 0 x84E3 # define GL_TRANSPOSE_PROJECTION_MATRIX 0 x84E4 # define GL_TRANSPOSE_TEXTURE_MATRIX 0 x84E5 # define GL_TRANSPOSE_COLOR_MATRIX 0 x84E6 # define GL_COMBINE 0 x8570 # define GL_COMBINE_RGB 0 x8571 # define GL_COMBINE_ALPHA 0 x8572 # define GL_SOURCE0_RGB 0 x8580 # define GL_SOURCE1_RGB 0 x8581 # define GL_SOURCE2_RGB 0 x8582 # define GL_SOURCE0_ALPHA 0 x8588 # define GL_SOURCE1_ALPHA 0 x8589 # define GL_SOURCE2_ALPHA 0 x858A # define GL_OPERAND0_RGB 0 x8590 # define GL_OPERAND1_RGB 0 x8591 # define GL_OPERAND2_RGB 0 x8592 # define GL_OPERAND0_ALPHA 0 x8598 # define GL_OPERAND1_ALPHA 0 x8599 # define GL_OPERAND2_ALPHA 0 x859A # define GL_RGB_SCALE 0 x8573 # define GL_ADD_SIGNED 0 x8574 # define GL_INTERPOLATE 0 x8575 # define GL_SUBTRACT 0 x84E7 # define GL_CONSTANT 0 x8576 # define GL_PRIMARY_COLOR 0 x8577 # define GL_PREVIOUS 0 x8578 # define GL_DOT3_RGB 0 x86AE # define GL_DOT3_RGBA 0 x86AF # define GL_CLAMP_TO_BORDER 0 x812D GLAPI void GLAPIENTRY)",
    "insertText": "glActiveTexture(GLenum texture)"
  },
  {
    "label": "glClientActiveTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glClientActiveTexture(GLenum texture)"
  },
  {
    "label": "glCompressedTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "glCompressedTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "glCompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "glCompressedTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "glCompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "glGetCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glGetCompressedTexImage(GLenum target, GLint lod, GLvoid *img)"
  },
  {
    "label": "glMultiTexCoord1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1d(GLenum target, GLdouble s)"
  },
  {
    "label": "glMultiTexCoord1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1f(GLenum target, GLfloat s)"
  },
  {
    "label": "glMultiTexCoord1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1i(GLenum target, GLint s)"
  },
  {
    "label": "glMultiTexCoord1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord1s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1s(GLenum target, GLshort s)"
  },
  {
    "label": "glMultiTexCoord1sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "glMultiTexCoord2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "glMultiTexCoord2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2i(GLenum target, GLint s, GLint t)"
  },
  {
    "label": "glMultiTexCoord2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord2s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "glMultiTexCoord2sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "glMultiTexCoord3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "glMultiTexCoord3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "glMultiTexCoord3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "glMultiTexCoord3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "glMultiTexCoord4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4dv(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "glMultiTexCoord4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4fv(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "glMultiTexCoord4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4iv(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord4s()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "glMultiTexCoord4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4sv(GLenum target, const GLshort *v)"
  },
  {
    "label": "glLoadTransposeMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLoadTransposeMatrixd(const GLdouble m[16])"
  },
  {
    "label": "glLoadTransposeMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glLoadTransposeMatrixf(const GLfloat m[16])"
  },
  {
    "label": "glMultTransposeMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultTransposeMatrixd(const GLdouble m[16])"
  },
  {
    "label": "glMultTransposeMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultTransposeMatrixf(const GLfloat m[16])"
  },
  {
    "label": "glSampleCoverage()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glSampleCoverage(GLclampf value, GLboolean invert)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img)"
  },
  {
    "label": "glActiveTextureARB()",
    "kind": "Method",
    "detail": "Function (# ifndef GL_ARB_multitexture # define GL_ARB_multitexture 1 # define GL_TEXTURE0_ARB 0 x84C0 # define GL_TEXTURE1_ARB 0 x84C1 # define GL_TEXTURE2_ARB 0 x84C2 # define GL_TEXTURE3_ARB 0 x84C3 # define GL_TEXTURE4_ARB 0 x84C4 # define GL_TEXTURE5_ARB 0 x84C5 # define GL_TEXTURE6_ARB 0 x84C6 # define GL_TEXTURE7_ARB 0 x84C7 # define GL_TEXTURE8_ARB 0 x84C8 # define GL_TEXTURE9_ARB 0 x84C9 # define GL_TEXTURE10_ARB 0 x84CA # define GL_TEXTURE11_ARB 0 x84CB # define GL_TEXTURE12_ARB 0 x84CC # define GL_TEXTURE13_ARB 0 x84CD # define GL_TEXTURE14_ARB 0 x84CE # define GL_TEXTURE15_ARB 0 x84CF # define GL_TEXTURE16_ARB 0 x84D0 # define GL_TEXTURE17_ARB 0 x84D1 # define GL_TEXTURE18_ARB 0 x84D2 # define GL_TEXTURE19_ARB 0 x84D3 # define GL_TEXTURE20_ARB 0 x84D4 # define GL_TEXTURE21_ARB 0 x84D5 # define GL_TEXTURE22_ARB 0 x84D6 # define GL_TEXTURE23_ARB 0 x84D7 # define GL_TEXTURE24_ARB 0 x84D8 # define GL_TEXTURE25_ARB 0 x84D9 # define GL_TEXTURE26_ARB 0 x84DA # define GL_TEXTURE27_ARB 0 x84DB # define GL_TEXTURE28_ARB 0 x84DC # define GL_TEXTURE29_ARB 0 x84DD # define GL_TEXTURE30_ARB 0 x84DE # define GL_TEXTURE31_ARB 0 x84DF # define GL_ACTIVE_TEXTURE_ARB 0 x84E0 # define GL_CLIENT_ACTIVE_TEXTURE_ARB 0 x84E1 # define GL_MAX_TEXTURE_UNITS_ARB 0 x84E2 GLAPI void GLAPIENTRY)",
    "insertText": "glActiveTextureARB(GLenum texture)"
  },
  {
    "label": "glClientActiveTextureARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glClientActiveTextureARB(GLenum texture)"
  },
  {
    "label": "glMultiTexCoord1dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1dARB(GLenum target, GLdouble s)"
  },
  {
    "label": "glMultiTexCoord1dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord1fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1fARB(GLenum target, GLfloat s)"
  },
  {
    "label": "glMultiTexCoord1fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord1iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1iARB(GLenum target, GLint s)"
  },
  {
    "label": "glMultiTexCoord1ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord1sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1sARB(GLenum target, GLshort s)"
  },
  {
    "label": "glMultiTexCoord1svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord1svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord2dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "glMultiTexCoord2dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord2fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "glMultiTexCoord2fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord2iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)"
  },
  {
    "label": "glMultiTexCoord2ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord2sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "glMultiTexCoord2svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord2svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord3dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "glMultiTexCoord3dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord3fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "glMultiTexCoord3fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord3iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "glMultiTexCoord3ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord3sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "glMultiTexCoord3svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord3svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord4dARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "glMultiTexCoord4dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord4fARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "glMultiTexCoord4fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord4iARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "glMultiTexCoord4ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord4sARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "glMultiTexCoord4svARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void GLAPIENTRY)",
    "insertText": "glMultiTexCoord4svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v)"
  }
]