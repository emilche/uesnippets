[
  {
    "label": "glClearIndex()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClearIndex( GLfloat c )"
  },
  {
    "label": "glClearColor()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )"
  },
  {
    "label": "glClear()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClear( GLbitfield mask )"
  },
  {
    "label": "glIndexMask()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexMask( GLuint mask )"
  },
  {
    "label": "glColorMask()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha )"
  },
  {
    "label": "glAlphaFunc()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glAlphaFunc( GLenum func, GLclampf ref )"
  },
  {
    "label": "glBlendFunc()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glBlendFunc( GLenum sfactor, GLenum dfactor )"
  },
  {
    "label": "glLogicOp()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLogicOp( GLenum opcode )"
  },
  {
    "label": "glCullFace()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCullFace( GLenum mode )"
  },
  {
    "label": "glFrontFace()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFrontFace( GLenum mode )"
  },
  {
    "label": "glPointSize()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPointSize( GLfloat size )"
  },
  {
    "label": "glLineWidth()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLineWidth( GLfloat width )"
  },
  {
    "label": "glLineStipple()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLineStipple( GLint factor, GLushort pattern )"
  },
  {
    "label": "glPolygonMode()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPolygonMode( GLenum face, GLenum mode )"
  },
  {
    "label": "glPolygonOffset()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPolygonOffset( GLfloat factor, GLfloat units )"
  },
  {
    "label": "glPolygonStipple()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPolygonStipple( const GLubyte *mask )"
  },
  {
    "label": "glGetPolygonStipple()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetPolygonStipple( GLubyte *mask )"
  },
  {
    "label": "glEdgeFlag()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEdgeFlag( GLboolean flag )"
  },
  {
    "label": "glEdgeFlagv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEdgeFlagv( const GLboolean *flag )"
  },
  {
    "label": "glScissor()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glScissor( GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glClipPlane()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClipPlane( GLenum plane, const GLdouble *equation )"
  },
  {
    "label": "glGetClipPlane()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetClipPlane( GLenum plane, GLdouble *equation )"
  },
  {
    "label": "glDrawBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDrawBuffer( GLenum mode )"
  },
  {
    "label": "glReadBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glReadBuffer( GLenum mode )"
  },
  {
    "label": "glEnable()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEnable( GLenum cap )"
  },
  {
    "label": "glDisable()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDisable( GLenum cap )"
  },
  {
    "label": "glIsEnabled()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIsEnabled( GLenum cap )"
  },
  {
    "label": "glEnableClientState()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEnableClientState( GLenum cap )"
  },
  {
    "label": "glDisableClientState()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDisableClientState( GLenum cap )"
  },
  {
    "label": "glGetBooleanv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetBooleanv( GLenum pname, GLboolean *params )"
  },
  {
    "label": "glGetDoublev()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetDoublev( GLenum pname, GLdouble *params )"
  },
  {
    "label": "glGetFloatv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetFloatv( GLenum pname, GLfloat *params )"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetIntegerv( GLenum pname, GLint *params )"
  },
  {
    "label": "glPushAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPushAttrib( GLbitfield mask )"
  },
  {
    "label": "glPopAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPopAttrib( void )"
  },
  {
    "label": "glPushClientAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPushClientAttrib( GLbitfield mask )"
  },
  {
    "label": "glPopClientAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPopClientAttrib( void )"
  },
  {
    "label": "glRenderMode()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRenderMode( GLenum mode )"
  },
  {
    "label": "glGetError()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetError( void )"
  },
  {
    "label": "glGetString()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetString( GLenum name )"
  },
  {
    "label": "glFinish()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFinish( void )"
  },
  {
    "label": "glFlush()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFlush( void )"
  },
  {
    "label": "glHint()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glHint( GLenum target, GLenum mode )"
  },
  {
    "label": "glClearDepth()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClearDepth( GLclampd depth )"
  },
  {
    "label": "glDepthFunc()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDepthFunc( GLenum func )"
  },
  {
    "label": "glDepthMask()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDepthMask( GLboolean flag )"
  },
  {
    "label": "glDepthRange()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDepthRange( GLclampd near_val, GLclampd far_val )"
  },
  {
    "label": "glClearAccum()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha )"
  },
  {
    "label": "glAccum()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glAccum( GLenum op, GLfloat value )"
  },
  {
    "label": "glMatrixMode()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMatrixMode( GLenum mode )"
  },
  {
    "label": "glOrtho()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glOrtho( GLdouble left, GLdouble right,\n                                 GLdouble bottom, GLdouble top,\n                                 GLdouble near_val, GLdouble far_val )"
  },
  {
    "label": "glFrustum()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFrustum( GLdouble left, GLdouble right,\n                                   GLdouble bottom, GLdouble top,\n                                   GLdouble near_val, GLdouble far_val )"
  },
  {
    "label": "glViewport()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glViewport( GLint x, GLint y,\n                                    GLsizei width, GLsizei height )"
  },
  {
    "label": "glPushMatrix()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPushMatrix( void )"
  },
  {
    "label": "glPopMatrix()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPopMatrix( void )"
  },
  {
    "label": "glLoadIdentity()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLoadIdentity( void )"
  },
  {
    "label": "glLoadMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLoadMatrixd( const GLdouble *m )"
  },
  {
    "label": "glLoadMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLoadMatrixf( const GLfloat *m )"
  },
  {
    "label": "glMultMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultMatrixd( const GLdouble *m )"
  },
  {
    "label": "glMultMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultMatrixf( const GLfloat *m )"
  },
  {
    "label": "glRotated()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRotated( GLdouble angle,\n                                   GLdouble x, GLdouble y, GLdouble z )"
  },
  {
    "label": "glRotatef()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRotatef( GLfloat angle,\n                                   GLfloat x, GLfloat y, GLfloat z )"
  },
  {
    "label": "glScaled()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glScaled( GLdouble x, GLdouble y, GLdouble z )"
  },
  {
    "label": "glScalef()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glScalef( GLfloat x, GLfloat y, GLfloat z )"
  },
  {
    "label": "glTranslated()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTranslated( GLdouble x, GLdouble y, GLdouble z )"
  },
  {
    "label": "glTranslatef()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTranslatef( GLfloat x, GLfloat y, GLfloat z )"
  },
  {
    "label": "glIsList()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIsList( GLuint list )"
  },
  {
    "label": "glDeleteLists()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDeleteLists( GLuint list, GLsizei range )"
  },
  {
    "label": "glGenLists()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGenLists( GLsizei range )"
  },
  {
    "label": "glNewList()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNewList( GLuint list, GLenum mode )"
  },
  {
    "label": "glEndList()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEndList( void )"
  },
  {
    "label": "glCallList()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCallList( GLuint list )"
  },
  {
    "label": "glCallLists()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCallLists( GLsizei n, GLenum type,\n                                     const GLvoid *lists )"
  },
  {
    "label": "glListBase()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glListBase( GLuint base )"
  },
  {
    "label": "glBegin()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glBegin( GLenum mode )"
  },
  {
    "label": "glEnd()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEnd( void )"
  },
  {
    "label": "glVertex2d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex2d( GLdouble x, GLdouble y )"
  },
  {
    "label": "glVertex2f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex2f( GLfloat x, GLfloat y )"
  },
  {
    "label": "glVertex2i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex2i( GLint x, GLint y )"
  },
  {
    "label": "glVertex2s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex2s( GLshort x, GLshort y )"
  },
  {
    "label": "glVertex3d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex3d( GLdouble x, GLdouble y, GLdouble z )"
  },
  {
    "label": "glVertex3f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex3f( GLfloat x, GLfloat y, GLfloat z )"
  },
  {
    "label": "glVertex3i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex3i( GLint x, GLint y, GLint z )"
  },
  {
    "label": "glVertex3s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex3s( GLshort x, GLshort y, GLshort z )"
  },
  {
    "label": "glVertex4d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )"
  },
  {
    "label": "glVertex4f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w )"
  },
  {
    "label": "glVertex4i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex4i( GLint x, GLint y, GLint z, GLint w )"
  },
  {
    "label": "glVertex4s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w )"
  },
  {
    "label": "glVertex2dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex2dv( const GLdouble *v )"
  },
  {
    "label": "glVertex2fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex2fv( const GLfloat *v )"
  },
  {
    "label": "glVertex2iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex2iv( const GLint *v )"
  },
  {
    "label": "glVertex2sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex2sv( const GLshort *v )"
  },
  {
    "label": "glVertex3dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex3dv( const GLdouble *v )"
  },
  {
    "label": "glVertex3fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex3fv( const GLfloat *v )"
  },
  {
    "label": "glVertex3iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex3iv( const GLint *v )"
  },
  {
    "label": "glVertex3sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex3sv( const GLshort *v )"
  },
  {
    "label": "glVertex4dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex4dv( const GLdouble *v )"
  },
  {
    "label": "glVertex4fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex4fv( const GLfloat *v )"
  },
  {
    "label": "glVertex4iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex4iv( const GLint *v )"
  },
  {
    "label": "glVertex4sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertex4sv( const GLshort *v )"
  },
  {
    "label": "glNormal3b()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3b( GLbyte nx, GLbyte ny, GLbyte nz )"
  },
  {
    "label": "glNormal3d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3d( GLdouble nx, GLdouble ny, GLdouble nz )"
  },
  {
    "label": "glNormal3f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz )"
  },
  {
    "label": "glNormal3i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3i( GLint nx, GLint ny, GLint nz )"
  },
  {
    "label": "glNormal3s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3s( GLshort nx, GLshort ny, GLshort nz )"
  },
  {
    "label": "glNormal3bv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3bv( const GLbyte *v )"
  },
  {
    "label": "glNormal3dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3dv( const GLdouble *v )"
  },
  {
    "label": "glNormal3fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3fv( const GLfloat *v )"
  },
  {
    "label": "glNormal3iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3iv( const GLint *v )"
  },
  {
    "label": "glNormal3sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormal3sv( const GLshort *v )"
  },
  {
    "label": "glIndexd()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexd( GLdouble c )"
  },
  {
    "label": "glIndexf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexf( GLfloat c )"
  },
  {
    "label": "glIndexi()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexi( GLint c )"
  },
  {
    "label": "glIndexs()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexs( GLshort c )"
  },
  {
    "label": "glIndexub()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexub( GLubyte c )"
  },
  {
    "label": "glIndexdv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexdv( const GLdouble *c )"
  },
  {
    "label": "glIndexfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexfv( const GLfloat *c )"
  },
  {
    "label": "glIndexiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexiv( const GLint *c )"
  },
  {
    "label": "glIndexsv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexsv( const GLshort *c )"
  },
  {
    "label": "glIndexubv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexubv( const GLubyte *c )"
  },
  {
    "label": "glColor3b()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3b( GLbyte red, GLbyte green, GLbyte blue )"
  },
  {
    "label": "glColor3d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3d( GLdouble red, GLdouble green, GLdouble blue )"
  },
  {
    "label": "glColor3f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3f( GLfloat red, GLfloat green, GLfloat blue )"
  },
  {
    "label": "glColor3i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3i( GLint red, GLint green, GLint blue )"
  },
  {
    "label": "glColor3s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3s( GLshort red, GLshort green, GLshort blue )"
  },
  {
    "label": "glColor3ub()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3ub( GLubyte red, GLubyte green, GLubyte blue )"
  },
  {
    "label": "glColor3ui()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3ui( GLuint red, GLuint green, GLuint blue )"
  },
  {
    "label": "glColor3us()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3us( GLushort red, GLushort green, GLushort blue )"
  },
  {
    "label": "glColor4b()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4b( GLbyte red, GLbyte green,\n                                   GLbyte blue, GLbyte alpha )"
  },
  {
    "label": "glColor4d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4d( GLdouble red, GLdouble green,\n                                   GLdouble blue, GLdouble alpha )"
  },
  {
    "label": "glColor4f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4f( GLfloat red, GLfloat green,\n                                   GLfloat blue, GLfloat alpha )"
  },
  {
    "label": "glColor4i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4i( GLint red, GLint green,\n                                   GLint blue, GLint alpha )"
  },
  {
    "label": "glColor4s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4s( GLshort red, GLshort green,\n                                   GLshort blue, GLshort alpha )"
  },
  {
    "label": "glColor4ub()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4ub( GLubyte red, GLubyte green,\n                                    GLubyte blue, GLubyte alpha )"
  },
  {
    "label": "glColor4ui()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4ui( GLuint red, GLuint green,\n                                    GLuint blue, GLuint alpha )"
  },
  {
    "label": "glColor4us()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4us( GLushort red, GLushort green,\n                                    GLushort blue, GLushort alpha )"
  },
  {
    "label": "glColor3bv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3bv( const GLbyte *v )"
  },
  {
    "label": "glColor3dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3dv( const GLdouble *v )"
  },
  {
    "label": "glColor3fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3fv( const GLfloat *v )"
  },
  {
    "label": "glColor3iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3iv( const GLint *v )"
  },
  {
    "label": "glColor3sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3sv( const GLshort *v )"
  },
  {
    "label": "glColor3ubv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3ubv( const GLubyte *v )"
  },
  {
    "label": "glColor3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3uiv( const GLuint *v )"
  },
  {
    "label": "glColor3usv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor3usv( const GLushort *v )"
  },
  {
    "label": "glColor4bv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4bv( const GLbyte *v )"
  },
  {
    "label": "glColor4dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4dv( const GLdouble *v )"
  },
  {
    "label": "glColor4fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4fv( const GLfloat *v )"
  },
  {
    "label": "glColor4iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4iv( const GLint *v )"
  },
  {
    "label": "glColor4sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4sv( const GLshort *v )"
  },
  {
    "label": "glColor4ubv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4ubv( const GLubyte *v )"
  },
  {
    "label": "glColor4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4uiv( const GLuint *v )"
  },
  {
    "label": "glColor4usv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColor4usv( const GLushort *v )"
  },
  {
    "label": "glTexCoord1d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord1d( GLdouble s )"
  },
  {
    "label": "glTexCoord1f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord1f( GLfloat s )"
  },
  {
    "label": "glTexCoord1i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord1i( GLint s )"
  },
  {
    "label": "glTexCoord1s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord1s( GLshort s )"
  },
  {
    "label": "glTexCoord2d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord2d( GLdouble s, GLdouble t )"
  },
  {
    "label": "glTexCoord2f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord2f( GLfloat s, GLfloat t )"
  },
  {
    "label": "glTexCoord2i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord2i( GLint s, GLint t )"
  },
  {
    "label": "glTexCoord2s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord2s( GLshort s, GLshort t )"
  },
  {
    "label": "glTexCoord3d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord3d( GLdouble s, GLdouble t, GLdouble r )"
  },
  {
    "label": "glTexCoord3f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord3f( GLfloat s, GLfloat t, GLfloat r )"
  },
  {
    "label": "glTexCoord3i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord3i( GLint s, GLint t, GLint r )"
  },
  {
    "label": "glTexCoord3s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord3s( GLshort s, GLshort t, GLshort r )"
  },
  {
    "label": "glTexCoord4d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q )"
  },
  {
    "label": "glTexCoord4f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q )"
  },
  {
    "label": "glTexCoord4i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord4i( GLint s, GLint t, GLint r, GLint q )"
  },
  {
    "label": "glTexCoord4s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q )"
  },
  {
    "label": "glTexCoord1dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord1dv( const GLdouble *v )"
  },
  {
    "label": "glTexCoord1fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord1fv( const GLfloat *v )"
  },
  {
    "label": "glTexCoord1iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord1iv( const GLint *v )"
  },
  {
    "label": "glTexCoord1sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord1sv( const GLshort *v )"
  },
  {
    "label": "glTexCoord2dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord2dv( const GLdouble *v )"
  },
  {
    "label": "glTexCoord2fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord2fv( const GLfloat *v )"
  },
  {
    "label": "glTexCoord2iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord2iv( const GLint *v )"
  },
  {
    "label": "glTexCoord2sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord2sv( const GLshort *v )"
  },
  {
    "label": "glTexCoord3dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord3dv( const GLdouble *v )"
  },
  {
    "label": "glTexCoord3fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord3fv( const GLfloat *v )"
  },
  {
    "label": "glTexCoord3iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord3iv( const GLint *v )"
  },
  {
    "label": "glTexCoord3sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord3sv( const GLshort *v )"
  },
  {
    "label": "glTexCoord4dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord4dv( const GLdouble *v )"
  },
  {
    "label": "glTexCoord4fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord4fv( const GLfloat *v )"
  },
  {
    "label": "glTexCoord4iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord4iv( const GLint *v )"
  },
  {
    "label": "glTexCoord4sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoord4sv( const GLshort *v )"
  },
  {
    "label": "glRasterPos2d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos2d( GLdouble x, GLdouble y )"
  },
  {
    "label": "glRasterPos2f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos2f( GLfloat x, GLfloat y )"
  },
  {
    "label": "glRasterPos2i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos2i( GLint x, GLint y )"
  },
  {
    "label": "glRasterPos2s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos2s( GLshort x, GLshort y )"
  },
  {
    "label": "glRasterPos3d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos3d( GLdouble x, GLdouble y, GLdouble z )"
  },
  {
    "label": "glRasterPos3f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos3f( GLfloat x, GLfloat y, GLfloat z )"
  },
  {
    "label": "glRasterPos3i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos3i( GLint x, GLint y, GLint z )"
  },
  {
    "label": "glRasterPos3s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos3s( GLshort x, GLshort y, GLshort z )"
  },
  {
    "label": "glRasterPos4d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )"
  },
  {
    "label": "glRasterPos4f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w )"
  },
  {
    "label": "glRasterPos4i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos4i( GLint x, GLint y, GLint z, GLint w )"
  },
  {
    "label": "glRasterPos4s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w )"
  },
  {
    "label": "glRasterPos2dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos2dv( const GLdouble *v )"
  },
  {
    "label": "glRasterPos2fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos2fv( const GLfloat *v )"
  },
  {
    "label": "glRasterPos2iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos2iv( const GLint *v )"
  },
  {
    "label": "glRasterPos2sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos2sv( const GLshort *v )"
  },
  {
    "label": "glRasterPos3dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos3dv( const GLdouble *v )"
  },
  {
    "label": "glRasterPos3fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos3fv( const GLfloat *v )"
  },
  {
    "label": "glRasterPos3iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos3iv( const GLint *v )"
  },
  {
    "label": "glRasterPos3sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos3sv( const GLshort *v )"
  },
  {
    "label": "glRasterPos4dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos4dv( const GLdouble *v )"
  },
  {
    "label": "glRasterPos4fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos4fv( const GLfloat *v )"
  },
  {
    "label": "glRasterPos4iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos4iv( const GLint *v )"
  },
  {
    "label": "glRasterPos4sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRasterPos4sv( const GLshort *v )"
  },
  {
    "label": "glRectd()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 )"
  },
  {
    "label": "glRectf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 )"
  },
  {
    "label": "glRecti()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRecti( GLint x1, GLint y1, GLint x2, GLint y2 )"
  },
  {
    "label": "glRects()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 )"
  },
  {
    "label": "glRectdv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRectdv( const GLdouble *v1, const GLdouble *v2 )"
  },
  {
    "label": "glRectfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRectfv( const GLfloat *v1, const GLfloat *v2 )"
  },
  {
    "label": "glRectiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRectiv( const GLint *v1, const GLint *v2 )"
  },
  {
    "label": "glRectsv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glRectsv( const GLshort *v1, const GLshort *v2 )"
  },
  {
    "label": "glVertexPointer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glVertexPointer( GLint size, GLenum type,\n                                       GLsizei stride, const GLvoid *ptr )"
  },
  {
    "label": "glNormalPointer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glNormalPointer( GLenum type, GLsizei stride,\n                                       const GLvoid *ptr )"
  },
  {
    "label": "glColorPointer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColorPointer( GLint size, GLenum type,\n                                      GLsizei stride, const GLvoid *ptr )"
  },
  {
    "label": "glIndexPointer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIndexPointer( GLenum type, GLsizei stride,\n                                      const GLvoid *ptr )"
  },
  {
    "label": "glTexCoordPointer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexCoordPointer( GLint size, GLenum type,\n                                         GLsizei stride, const GLvoid *ptr )"
  },
  {
    "label": "glEdgeFlagPointer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEdgeFlagPointer( GLsizei stride, const GLvoid *ptr )"
  },
  {
    "label": "glGetPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetPointerv( GLenum pname, GLvoid **params )"
  },
  {
    "label": "glArrayElement()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glArrayElement( GLint i )"
  },
  {
    "label": "glDrawArrays()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDrawArrays( GLenum mode, GLint first, GLsizei count )"
  },
  {
    "label": "glDrawElements()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDrawElements( GLenum mode, GLsizei count,\n                                      GLenum type, const GLvoid *indices )"
  },
  {
    "label": "glInterleavedArrays()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glInterleavedArrays( GLenum format, GLsizei stride,\n                                           const GLvoid *pointer )"
  },
  {
    "label": "glShadeModel()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glShadeModel( GLenum mode )"
  },
  {
    "label": "glLightf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLightf( GLenum light, GLenum pname, GLfloat param )"
  },
  {
    "label": "glLighti()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLighti( GLenum light, GLenum pname, GLint param )"
  },
  {
    "label": "glLightfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLightfv( GLenum light, GLenum pname,\n                                 const GLfloat *params )"
  },
  {
    "label": "glLightiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLightiv( GLenum light, GLenum pname,\n                                 const GLint *params )"
  },
  {
    "label": "glGetLightfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetLightfv( GLenum light, GLenum pname,\n                                    GLfloat *params )"
  },
  {
    "label": "glGetLightiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetLightiv( GLenum light, GLenum pname,\n                                    GLint *params )"
  },
  {
    "label": "glLightModelf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLightModelf( GLenum pname, GLfloat param )"
  },
  {
    "label": "glLightModeli()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLightModeli( GLenum pname, GLint param )"
  },
  {
    "label": "glLightModelfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLightModelfv( GLenum pname, const GLfloat *params )"
  },
  {
    "label": "glLightModeliv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLightModeliv( GLenum pname, const GLint *params )"
  },
  {
    "label": "glMaterialf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMaterialf( GLenum face, GLenum pname, GLfloat param )"
  },
  {
    "label": "glMateriali()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMateriali( GLenum face, GLenum pname, GLint param )"
  },
  {
    "label": "glMaterialfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMaterialfv( GLenum face, GLenum pname, const GLfloat *params )"
  },
  {
    "label": "glMaterialiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMaterialiv( GLenum face, GLenum pname, const GLint *params )"
  },
  {
    "label": "glGetMaterialfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetMaterialfv( GLenum face, GLenum pname, GLfloat *params )"
  },
  {
    "label": "glGetMaterialiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetMaterialiv( GLenum face, GLenum pname, GLint *params )"
  },
  {
    "label": "glColorMaterial()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColorMaterial( GLenum face, GLenum mode )"
  },
  {
    "label": "glPixelZoom()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPixelZoom( GLfloat xfactor, GLfloat yfactor )"
  },
  {
    "label": "glPixelStoref()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPixelStoref( GLenum pname, GLfloat param )"
  },
  {
    "label": "glPixelStorei()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPixelStorei( GLenum pname, GLint param )"
  },
  {
    "label": "glPixelTransferf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPixelTransferf( GLenum pname, GLfloat param )"
  },
  {
    "label": "glPixelTransferi()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPixelTransferi( GLenum pname, GLint param )"
  },
  {
    "label": "glPixelMapfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPixelMapfv( GLenum map, GLsizei mapsize,\n                                    const GLfloat *values )"
  },
  {
    "label": "glPixelMapuiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPixelMapuiv( GLenum map, GLsizei mapsize,\n                                     const GLuint *values )"
  },
  {
    "label": "glPixelMapusv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPixelMapusv( GLenum map, GLsizei mapsize,\n                                     const GLushort *values )"
  },
  {
    "label": "glGetPixelMapfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetPixelMapfv( GLenum map, GLfloat *values )"
  },
  {
    "label": "glGetPixelMapuiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetPixelMapuiv( GLenum map, GLuint *values )"
  },
  {
    "label": "glGetPixelMapusv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetPixelMapusv( GLenum map, GLushort *values )"
  },
  {
    "label": "glBitmap()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glBitmap( GLsizei width, GLsizei height,\n                                GLfloat xorig, GLfloat yorig,\n                                GLfloat xmove, GLfloat ymove,\n                                const GLubyte *bitmap )"
  },
  {
    "label": "glReadPixels()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glReadPixels( GLint x, GLint y,\n                                    GLsizei width, GLsizei height,\n                                    GLenum format, GLenum type,\n                                    GLvoid *pixels )"
  },
  {
    "label": "glDrawPixels()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDrawPixels( GLsizei width, GLsizei height,\n                                    GLenum format, GLenum type,\n                                    const GLvoid *pixels )"
  },
  {
    "label": "glCopyPixels()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyPixels( GLint x, GLint y,\n                                    GLsizei width, GLsizei height,\n                                    GLenum type )"
  },
  {
    "label": "glStencilFunc()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glStencilFunc( GLenum func, GLint ref, GLuint mask )"
  },
  {
    "label": "glStencilMask()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glStencilMask( GLuint mask )"
  },
  {
    "label": "glStencilOp()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glStencilOp( GLenum fail, GLenum zfail, GLenum zpass )"
  },
  {
    "label": "glClearStencil()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClearStencil( GLint s )"
  },
  {
    "label": "glTexGend()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexGend( GLenum coord, GLenum pname, GLdouble param )"
  },
  {
    "label": "glTexGenf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexGenf( GLenum coord, GLenum pname, GLfloat param )"
  },
  {
    "label": "glTexGeni()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexGeni( GLenum coord, GLenum pname, GLint param )"
  },
  {
    "label": "glTexGendv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexGendv( GLenum coord, GLenum pname, const GLdouble *params )"
  },
  {
    "label": "glTexGenfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexGenfv( GLenum coord, GLenum pname, const GLfloat *params )"
  },
  {
    "label": "glTexGeniv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexGeniv( GLenum coord, GLenum pname, const GLint *params )"
  },
  {
    "label": "glGetTexGendv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexGendv( GLenum coord, GLenum pname, GLdouble *params )"
  },
  {
    "label": "glGetTexGenfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexGenfv( GLenum coord, GLenum pname, GLfloat *params )"
  },
  {
    "label": "glGetTexGeniv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexGeniv( GLenum coord, GLenum pname, GLint *params )"
  },
  {
    "label": "glTexEnvf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexEnvf( GLenum target, GLenum pname, GLfloat param )"
  },
  {
    "label": "glTexEnvi()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexEnvi( GLenum target, GLenum pname, GLint param )"
  },
  {
    "label": "glTexEnvfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexEnvfv( GLenum target, GLenum pname, const GLfloat *params )"
  },
  {
    "label": "glTexEnviv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexEnviv( GLenum target, GLenum pname, const GLint *params )"
  },
  {
    "label": "glGetTexEnvfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexEnvfv( GLenum target, GLenum pname, GLfloat *params )"
  },
  {
    "label": "glGetTexEnviv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexEnviv( GLenum target, GLenum pname, GLint *params )"
  },
  {
    "label": "glTexParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexParameterf( GLenum target, GLenum pname, GLfloat param )"
  },
  {
    "label": "glTexParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexParameteri( GLenum target, GLenum pname, GLint param )"
  },
  {
    "label": "glTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexParameterfv( GLenum target, GLenum pname,\n                                          const GLfloat *params )"
  },
  {
    "label": "glTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexParameteriv( GLenum target, GLenum pname,\n                                          const GLint *params )"
  },
  {
    "label": "glGetTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexParameterfv( GLenum target,\n                                           GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexParameteriv( GLenum target,\n                                           GLenum pname, GLint *params )"
  },
  {
    "label": "glGetTexLevelParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexLevelParameterfv( GLenum target, GLint level,\n                                                GLenum pname, GLfloat *params )"
  },
  {
    "label": "glGetTexLevelParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexLevelParameteriv( GLenum target, GLint level,\n                                                GLenum pname, GLint *params )"
  },
  {
    "label": "glTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexImage1D( GLenum target, GLint level,\n                                    GLint internalFormat,\n                                    GLsizei width, GLint border,\n                                    GLenum format, GLenum type,\n                                    const GLvoid *pixels )"
  },
  {
    "label": "glTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexImage2D( GLenum target, GLint level,\n                                    GLint internalFormat,\n                                    GLsizei width, GLsizei height,\n                                    GLint border, GLenum format, GLenum type,\n                                    const GLvoid *pixels )"
  },
  {
    "label": "glGetTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetTexImage( GLenum target, GLint level,\n                                     GLenum format, GLenum type,\n                                     GLvoid *pixels )"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGenTextures( GLsizei n, GLuint *textures )"
  },
  {
    "label": "glDeleteTextures()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDeleteTextures( GLsizei n, const GLuint *textures)"
  },
  {
    "label": "glBindTexture()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glBindTexture( GLenum target, GLuint texture )"
  },
  {
    "label": "glPrioritizeTextures()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPrioritizeTextures( GLsizei n,\n                                            const GLuint *textures,\n                                            const GLclampf *priorities )"
  },
  {
    "label": "glAreTexturesResident()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glAreTexturesResident( GLsizei n,\n                                                  const GLuint *textures,\n                                                  GLboolean *residences )"
  },
  {
    "label": "glIsTexture()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glIsTexture( GLuint texture )"
  },
  {
    "label": "glTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexSubImage1D( GLenum target, GLint level,\n                                       GLint xoffset,\n                                       GLsizei width, GLenum format,\n                                       GLenum type, const GLvoid *pixels )"
  },
  {
    "label": "glTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexSubImage2D( GLenum target, GLint level,\n                                       GLint xoffset, GLint yoffset,\n                                       GLsizei width, GLsizei height,\n                                       GLenum format, GLenum type,\n                                       const GLvoid *pixels )"
  },
  {
    "label": "glCopyTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyTexImage1D( GLenum target, GLint level,\n                                        GLenum internalformat,\n                                        GLint x, GLint y,\n                                        GLsizei width, GLint border )"
  },
  {
    "label": "glCopyTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyTexImage2D( GLenum target, GLint level,\n                                        GLenum internalformat,\n                                        GLint x, GLint y,\n                                        GLsizei width, GLsizei height,\n                                        GLint border )"
  },
  {
    "label": "glCopyTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyTexSubImage1D( GLenum target, GLint level,\n                                           GLint xoffset, GLint x, GLint y,\n                                           GLsizei width )"
  },
  {
    "label": "glCopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyTexSubImage2D( GLenum target, GLint level,\n                                           GLint xoffset, GLint yoffset,\n                                           GLint x, GLint y,\n                                           GLsizei width, GLsizei height )"
  },
  {
    "label": "glMap1d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMap1d( GLenum target, GLdouble u1, GLdouble u2,\n                               GLint stride,\n                               GLint order, const GLdouble *points )"
  },
  {
    "label": "glMap1f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMap1f( GLenum target, GLfloat u1, GLfloat u2,\n                               GLint stride,\n                               GLint order, const GLfloat *points )"
  },
  {
    "label": "glMap2d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMap2d( GLenum target,\n\t\t     GLdouble u1, GLdouble u2, GLint ustride, GLint uorder,\n\t\t     GLdouble v1, GLdouble v2, GLint vstride, GLint vorder,\n\t\t     const GLdouble *points )"
  },
  {
    "label": "glMap2f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMap2f( GLenum target,\n\t\t     GLfloat u1, GLfloat u2, GLint ustride, GLint uorder,\n\t\t     GLfloat v1, GLfloat v2, GLint vstride, GLint vorder,\n\t\t     const GLfloat *points )"
  },
  {
    "label": "glGetMapdv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetMapdv( GLenum target, GLenum query, GLdouble *v )"
  },
  {
    "label": "glGetMapfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetMapfv( GLenum target, GLenum query, GLfloat *v )"
  },
  {
    "label": "glGetMapiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetMapiv( GLenum target, GLenum query, GLint *v )"
  },
  {
    "label": "glEvalCoord1d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalCoord1d( GLdouble u )"
  },
  {
    "label": "glEvalCoord1f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalCoord1f( GLfloat u )"
  },
  {
    "label": "glEvalCoord1dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalCoord1dv( const GLdouble *u )"
  },
  {
    "label": "glEvalCoord1fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalCoord1fv( const GLfloat *u )"
  },
  {
    "label": "glEvalCoord2d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalCoord2d( GLdouble u, GLdouble v )"
  },
  {
    "label": "glEvalCoord2f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalCoord2f( GLfloat u, GLfloat v )"
  },
  {
    "label": "glEvalCoord2dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalCoord2dv( const GLdouble *u )"
  },
  {
    "label": "glEvalCoord2fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalCoord2fv( const GLfloat *u )"
  },
  {
    "label": "glMapGrid1d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMapGrid1d( GLint un, GLdouble u1, GLdouble u2 )"
  },
  {
    "label": "glMapGrid1f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMapGrid1f( GLint un, GLfloat u1, GLfloat u2 )"
  },
  {
    "label": "glMapGrid2d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMapGrid2d( GLint un, GLdouble u1, GLdouble u2,\n                                   GLint vn, GLdouble v1, GLdouble v2 )"
  },
  {
    "label": "glMapGrid2f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMapGrid2f( GLint un, GLfloat u1, GLfloat u2,\n                                   GLint vn, GLfloat v1, GLfloat v2 )"
  },
  {
    "label": "glEvalPoint1()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalPoint1( GLint i )"
  },
  {
    "label": "glEvalPoint2()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalPoint2( GLint i, GLint j )"
  },
  {
    "label": "glEvalMesh1()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalMesh1( GLenum mode, GLint i1, GLint i2 )"
  },
  {
    "label": "glEvalMesh2()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 )"
  },
  {
    "label": "glFogf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFogf( GLenum pname, GLfloat param )"
  },
  {
    "label": "glFogi()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFogi( GLenum pname, GLint param )"
  },
  {
    "label": "glFogfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFogfv( GLenum pname, const GLfloat *params )"
  },
  {
    "label": "glFogiv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFogiv( GLenum pname, const GLint *params )"
  },
  {
    "label": "glFeedbackBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glFeedbackBuffer( GLsizei size, GLenum type, GLfloat *buffer )"
  },
  {
    "label": "glPassThrough()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPassThrough( GLfloat token )"
  },
  {
    "label": "glSelectBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glSelectBuffer( GLsizei size, GLuint *buffer )"
  },
  {
    "label": "glInitNames()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glInitNames( void )"
  },
  {
    "label": "glLoadName()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLoadName( GLuint name )"
  },
  {
    "label": "glPushName()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPushName( GLuint name )"
  },
  {
    "label": "glPopName()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glPopName( void )"
  },
  {
    "label": "glDrawRangeElements()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glDrawRangeElements( GLenum mode, GLuint start,\n\tGLuint end, GLsizei count, GLenum type, const GLvoid *indices )"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexImage3D( GLenum target, GLint level,\n                                      GLint internalFormat,\n                                      GLsizei width, GLsizei height,\n                                      GLsizei depth, GLint border,\n                                      GLenum format, GLenum type,\n                                      const GLvoid *pixels )"
  },
  {
    "label": "glTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glTexSubImage3D( GLenum target, GLint level,\n                                         GLint xoffset, GLint yoffset,\n                                         GLint zoffset, GLsizei width,\n                                         GLsizei height, GLsizei depth,\n                                         GLenum format,\n                                         GLenum type, const GLvoid *pixels)"
  },
  {
    "label": "glCopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyTexSubImage3D( GLenum target, GLint level,\n                                             GLint xoffset, GLint yoffset,\n                                             GLint zoffset, GLint x,\n                                             GLint y, GLsizei width,\n                                             GLsizei height )"
  },
  {
    "label": "glColorTable()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColorTable( GLenum target, GLenum internalformat,\n                                    GLsizei width, GLenum format,\n                                    GLenum type, const GLvoid *table )"
  },
  {
    "label": "glColorSubTable()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColorSubTable( GLenum target,\n                                       GLsizei start, GLsizei count,\n                                       GLenum format, GLenum type,\n                                       const GLvoid *data )"
  },
  {
    "label": "glColorTableParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColorTableParameteriv(GLenum target, GLenum pname,\n                                              const GLint *params)"
  },
  {
    "label": "glColorTableParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glColorTableParameterfv(GLenum target, GLenum pname,\n                                              const GLfloat *params)"
  },
  {
    "label": "glCopyColorSubTable()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyColorSubTable( GLenum target, GLsizei start,\n                                           GLint x, GLint y, GLsizei width )"
  },
  {
    "label": "glCopyColorTable()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyColorTable( GLenum target, GLenum internalformat,\n                                        GLint x, GLint y, GLsizei width )"
  },
  {
    "label": "glGetColorTable()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetColorTable( GLenum target, GLenum format,\n                                       GLenum type, GLvoid *table )"
  },
  {
    "label": "glGetColorTableParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetColorTableParameterfv( GLenum target, GLenum pname,\n                                                  GLfloat *params )"
  },
  {
    "label": "glGetColorTableParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetColorTableParameteriv( GLenum target, GLenum pname,\n                                                  GLint *params )"
  },
  {
    "label": "glBlendEquation()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glBlendEquation( GLenum mode )"
  },
  {
    "label": "glBlendColor()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glBlendColor( GLclampf red, GLclampf green,\n                                    GLclampf blue, GLclampf alpha )"
  },
  {
    "label": "glHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glHistogram( GLenum target, GLsizei width,\n\t\t\t\t   GLenum internalformat, GLboolean sink )"
  },
  {
    "label": "glResetHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glResetHistogram( GLenum target )"
  },
  {
    "label": "glGetHistogram()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetHistogram( GLenum target, GLboolean reset,\n\t\t\t\t      GLenum format, GLenum type,\n\t\t\t\t      GLvoid *values )"
  },
  {
    "label": "glGetHistogramParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetHistogramParameterfv( GLenum target, GLenum pname,\n\t\t\t\t\t\t GLfloat *params )"
  },
  {
    "label": "glGetHistogramParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetHistogramParameteriv( GLenum target, GLenum pname,\n\t\t\t\t\t\t GLint *params )"
  },
  {
    "label": "glMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMinmax( GLenum target, GLenum internalformat,\n\t\t\t\tGLboolean sink )"
  },
  {
    "label": "glResetMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glResetMinmax( GLenum target )"
  },
  {
    "label": "glGetMinmax()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetMinmax( GLenum target, GLboolean reset,\n                                   GLenum format, GLenum types,\n                                   GLvoid *values )"
  },
  {
    "label": "glGetMinmaxParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetMinmaxParameterfv( GLenum target, GLenum pname,\n\t\t\t\t\t      GLfloat *params )"
  },
  {
    "label": "glGetMinmaxParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetMinmaxParameteriv( GLenum target, GLenum pname,\n\t\t\t\t\t      GLint *params )"
  },
  {
    "label": "glConvolutionFilter1D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glConvolutionFilter1D( GLenum target,\n\tGLenum internalformat, GLsizei width, GLenum format, GLenum type,\n\tconst GLvoid *image )"
  },
  {
    "label": "glConvolutionFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glConvolutionFilter2D( GLenum target,\n\tGLenum internalformat, GLsizei width, GLsizei height, GLenum format,\n\tGLenum type, const GLvoid *image )"
  },
  {
    "label": "glConvolutionParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glConvolutionParameterf( GLenum target, GLenum pname,\n\tGLfloat params )"
  },
  {
    "label": "glConvolutionParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glConvolutionParameterfv( GLenum target, GLenum pname,\n\tconst GLfloat *params )"
  },
  {
    "label": "glConvolutionParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glConvolutionParameteri( GLenum target, GLenum pname,\n\tGLint params )"
  },
  {
    "label": "glConvolutionParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glConvolutionParameteriv( GLenum target, GLenum pname,\n\tconst GLint *params )"
  },
  {
    "label": "glCopyConvolutionFilter1D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyConvolutionFilter1D( GLenum target,\n\tGLenum internalformat, GLint x, GLint y, GLsizei width )"
  },
  {
    "label": "glCopyConvolutionFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCopyConvolutionFilter2D( GLenum target,\n\tGLenum internalformat, GLint x, GLint y, GLsizei width,\n\tGLsizei height)"
  },
  {
    "label": "glGetConvolutionFilter()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetConvolutionFilter( GLenum target, GLenum format,\n\tGLenum type, GLvoid *image )"
  },
  {
    "label": "glGetConvolutionParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetConvolutionParameterfv( GLenum target, GLenum pname,\n\tGLfloat *params )"
  },
  {
    "label": "glGetConvolutionParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetConvolutionParameteriv( GLenum target, GLenum pname,\n\tGLint *params )"
  },
  {
    "label": "glSeparableFilter2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glSeparableFilter2D( GLenum target,\n\tGLenum internalformat, GLsizei width, GLsizei height, GLenum format,\n\tGLenum type, const GLvoid *row, const GLvoid *column )"
  },
  {
    "label": "glGetSeparableFilter()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetSeparableFilter( GLenum target, GLenum format,\n\tGLenum type, GLvoid *row, GLvoid *column, GLvoid *span )"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glActiveTexture( GLenum texture )"
  },
  {
    "label": "glClientActiveTexture()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClientActiveTexture( GLenum texture )"
  },
  {
    "label": "glCompressedTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCompressedTexImage1D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data )"
  },
  {
    "label": "glCompressedTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCompressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data )"
  },
  {
    "label": "glCompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCompressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data )"
  },
  {
    "label": "glCompressedTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCompressedTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data )"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCompressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data )"
  },
  {
    "label": "glCompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glCompressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data )"
  },
  {
    "label": "glGetCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glGetCompressedTexImage( GLenum target, GLint lod, GLvoid *img )"
  },
  {
    "label": "glMultiTexCoord1d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1d( GLenum target, GLdouble s )"
  },
  {
    "label": "glMultiTexCoord1dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1dv( GLenum target, const GLdouble *v )"
  },
  {
    "label": "glMultiTexCoord1f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1f( GLenum target, GLfloat s )"
  },
  {
    "label": "glMultiTexCoord1fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1fv( GLenum target, const GLfloat *v )"
  },
  {
    "label": "glMultiTexCoord1i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1i( GLenum target, GLint s )"
  },
  {
    "label": "glMultiTexCoord1iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1iv( GLenum target, const GLint *v )"
  },
  {
    "label": "glMultiTexCoord1s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1s( GLenum target, GLshort s )"
  },
  {
    "label": "glMultiTexCoord1sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1sv( GLenum target, const GLshort *v )"
  },
  {
    "label": "glMultiTexCoord2d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2d( GLenum target, GLdouble s, GLdouble t )"
  },
  {
    "label": "glMultiTexCoord2dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2dv( GLenum target, const GLdouble *v )"
  },
  {
    "label": "glMultiTexCoord2f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2f( GLenum target, GLfloat s, GLfloat t )"
  },
  {
    "label": "glMultiTexCoord2fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2fv( GLenum target, const GLfloat *v )"
  },
  {
    "label": "glMultiTexCoord2i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2i( GLenum target, GLint s, GLint t )"
  },
  {
    "label": "glMultiTexCoord2iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2iv( GLenum target, const GLint *v )"
  },
  {
    "label": "glMultiTexCoord2s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2s( GLenum target, GLshort s, GLshort t )"
  },
  {
    "label": "glMultiTexCoord2sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2sv( GLenum target, const GLshort *v )"
  },
  {
    "label": "glMultiTexCoord3d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3d( GLenum target, GLdouble s, GLdouble t, GLdouble r )"
  },
  {
    "label": "glMultiTexCoord3dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3dv( GLenum target, const GLdouble *v )"
  },
  {
    "label": "glMultiTexCoord3f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3f( GLenum target, GLfloat s, GLfloat t, GLfloat r )"
  },
  {
    "label": "glMultiTexCoord3fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3fv( GLenum target, const GLfloat *v )"
  },
  {
    "label": "glMultiTexCoord3i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3i( GLenum target, GLint s, GLint t, GLint r )"
  },
  {
    "label": "glMultiTexCoord3iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3iv( GLenum target, const GLint *v )"
  },
  {
    "label": "glMultiTexCoord3s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3s( GLenum target, GLshort s, GLshort t, GLshort r )"
  },
  {
    "label": "glMultiTexCoord3sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3sv( GLenum target, const GLshort *v )"
  },
  {
    "label": "glMultiTexCoord4d()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4d( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q )"
  },
  {
    "label": "glMultiTexCoord4dv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4dv( GLenum target, const GLdouble *v )"
  },
  {
    "label": "glMultiTexCoord4f()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4f( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q )"
  },
  {
    "label": "glMultiTexCoord4fv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4fv( GLenum target, const GLfloat *v )"
  },
  {
    "label": "glMultiTexCoord4i()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4i( GLenum target, GLint s, GLint t, GLint r, GLint q )"
  },
  {
    "label": "glMultiTexCoord4iv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4iv( GLenum target, const GLint *v )"
  },
  {
    "label": "glMultiTexCoord4s()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4s( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q )"
  },
  {
    "label": "glMultiTexCoord4sv()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4sv( GLenum target, const GLshort *v )"
  },
  {
    "label": "glLoadTransposeMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLoadTransposeMatrixd( const GLdouble m[16] )"
  },
  {
    "label": "glLoadTransposeMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glLoadTransposeMatrixf( const GLfloat m[16] )"
  },
  {
    "label": "glMultTransposeMatrixd()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultTransposeMatrixd( const GLdouble m[16] )"
  },
  {
    "label": "glMultTransposeMatrixf()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultTransposeMatrixf( const GLfloat m[16] )"
  },
  {
    "label": "glSampleCoverage()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glSampleCoverage( GLclampf value, GLboolean invert )"
  },
  {
    "label": "glActiveTextureARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glActiveTextureARB(GLenum texture)"
  },
  {
    "label": "glClientActiveTextureARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glClientActiveTextureARB(GLenum texture)"
  },
  {
    "label": "glMultiTexCoord1dARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1dARB(GLenum target, GLdouble s)"
  },
  {
    "label": "glMultiTexCoord1dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord1fARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1fARB(GLenum target, GLfloat s)"
  },
  {
    "label": "glMultiTexCoord1fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord1iARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1iARB(GLenum target, GLint s)"
  },
  {
    "label": "glMultiTexCoord1ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord1sARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1sARB(GLenum target, GLshort s)"
  },
  {
    "label": "glMultiTexCoord1svARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord1svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord2dARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)"
  },
  {
    "label": "glMultiTexCoord2dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord2fARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)"
  },
  {
    "label": "glMultiTexCoord2fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord2iARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)"
  },
  {
    "label": "glMultiTexCoord2ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord2sARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)"
  },
  {
    "label": "glMultiTexCoord2svARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord2svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord3dARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)"
  },
  {
    "label": "glMultiTexCoord3dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord3fARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)"
  },
  {
    "label": "glMultiTexCoord3fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord3iARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)"
  },
  {
    "label": "glMultiTexCoord3ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord3sARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)"
  },
  {
    "label": "glMultiTexCoord3svARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord3svARB(GLenum target, const GLshort *v)"
  },
  {
    "label": "glMultiTexCoord4dARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)"
  },
  {
    "label": "glMultiTexCoord4dvARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4dvARB(GLenum target, const GLdouble *v)"
  },
  {
    "label": "glMultiTexCoord4fARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)"
  },
  {
    "label": "glMultiTexCoord4fvARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4fvARB(GLenum target, const GLfloat *v)"
  },
  {
    "label": "glMultiTexCoord4iARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)"
  },
  {
    "label": "glMultiTexCoord4ivARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4ivARB(GLenum target, const GLint *v)"
  },
  {
    "label": "glMultiTexCoord4sARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)"
  },
  {
    "label": "glMultiTexCoord4svARB()",
    "kind": "Method",
    "detail": "Function (GLAPIENTRY)",
    "insertText": "glMultiTexCoord4svARB(GLenum target, const GLshort *v)"
  }
]