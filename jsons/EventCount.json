[
  {
    "label": "EventCount",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EventCount"
  },
  {
    "label": "Waiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Waiter"
  },
  {
    "label": "EventCount()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_THREADPOOL_EVENTCOUNT_H_ # define EIGEN_CXX11_THREADPOOL_EVENTCOUNT_H_ namespace Eigen { class EventCount { public : class Waiter ;)",
    "insertText": "EventCount(MaxSizeVector<Waiter>& waiters) : state_(kStackMask), waiters_(waiters)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(waiters.size() < (1 << kWaiterBits) - 1)"
  },
  {
    "label": "EventCount()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "EventCount()"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(state_.load() == kStackMask)"
  },
  {
    "label": "Prewait()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Prewait()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint64_t state = state_ .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "CheckState()",
    "kind": "Method",
    "detail": "Function (uint64_t newstate = state + kWaiterInc ;)",
    "insertText": "CheckState(newstate)"
  },
  {
    "label": "CommitWait()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CommitWait(Waiter* w)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert((w->epoch & ~kEpochMask) == 0)"
  },
  {
    "label": "me()",
    "kind": "Method",
    "detail": "Function (epoch)",
    "insertText": "me(w - &waiters_[0])"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint64_t state = state_ .)",
    "insertText": "load(std::memory_order_seq_cst)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t newstate ;)",
    "insertText": "if((state & kSignalMask) != 0)"
  },
  {
    "label": "newstate()",
    "kind": "Method",
    "detail": "Function (newstate = state - kWaiterInc - kSignalInc ; } else {)",
    "insertText": "newstate((state & kWaiterMask) - kWaiterInc)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (w -> next .)",
    "insertText": "store(state & (kStackMask | kEpochMask), std::memory_order_relaxed)"
  },
  {
    "label": "Park()",
    "kind": "Method",
    "detail": "Function (w -> epoch + = kEpochInc ;)",
    "insertText": "Park(w)"
  },
  {
    "label": "CancelWait()",
    "kind": "Method",
    "detail": "Function (} return ; } } } void)",
    "insertText": "CancelWait()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t newstate = state - kWaiterInc ;)",
    "insertText": "if(((state & kWaiterMask) >> kWaiterShift) == ((state & kSignalMask) >> kSignalShift))"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Notify(bool notifyAll)"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_thread_fence(std::memory_order_seq_cst)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint64_t state = state_ .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "waiters()",
    "kind": "Method",
    "detail": "Function (const uint64_t)",
    "insertText": "waiters(state & kWaiterMask)"
  },
  {
    "label": "signals()",
    "kind": "Method",
    "detail": "Function (const uint64_t)",
    "insertText": "signals(state & kSignalMask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t newstate ;)",
    "insertText": "if(notifyAll)"
  },
  {
    "label": "newstate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "newstate(state & kWaiterMask) | (waiters << kSignalShift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(signals < waiters)"
  },
  {
    "label": "newstate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "newstate(state & (kWaiterMask | kSignalMask))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Waiter* w =& waiters_ [ state& kStackMask ] ;)",
    "insertText": "if(!notifyAll) w->next.store(kStackMask, std::memory_order_relaxed)"
  },
  {
    "label": "Unpark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unpark(w)"
  },
  {
    "label": "kStackMask()",
    "kind": "Method",
    "detail": "Function (std::mutex mu ; std::condition_variable cv ; uint64_t epoch = 0 ; unsigned state = kNotSignaled ; enum { kNotSignaled,kWaiting,kSignaled,} ; } ; private : const uint64_t kWaiterBits = 1 4 ; const uint64_t)",
    "insertText": "kStackMask(1ull << kWaiterBits)"
  },
  {
    "label": "kWaiterMask()",
    "kind": "Method",
    "detail": "Function (const uint64_t kWaiterShift = kWaiterBits ; const uint64_t)",
    "insertText": "kWaiterMask((1ull << kWaiterBits) - 1)"
  },
  {
    "label": "kSignalMask()",
    "kind": "Method",
    "detail": "Function (const uint64_t kWaiterInc = 1 ull<<kWaiterShift ; const uint64_t kSignalShift = 2* kWaiterBits ; const uint64_t)",
    "insertText": "kSignalMask((1ull << kWaiterBits) - 1)"
  },
  {
    "label": "kEpochMask()",
    "kind": "Method",
    "detail": "Function (const uint64_t kSignalInc = 1 ull<<kSignalShift ; const uint64_t kEpochShift = 3* kWaiterBits ; const uint64_t kEpochBits = 6 4 - kEpochShift ; const uint64_t)",
    "insertText": "kEpochMask((1ull << kEpochBits) - 1)"
  },
  {
    "label": "CheckState()",
    "kind": "Method",
    "detail": "Function (const uint64_t kEpochInc = 1 ull<<kEpochShift ; std::atomic<uint64_t> state_ ; MaxSizeVector<Waiter>& waiters_ ; void)",
    "insertText": "CheckState(uint64_t state, bool waiter = false)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(waiters >= signals)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(waiters < (1 << kWaiterBits) - 1)"
  },
  {
    "label": "eigen_plain_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_plain_assert(!waiter || waiters > 0)"
  },
  {
    "label": "Park()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Park(Waiter* w)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (std::unique_lock<std::mutex>)",
    "insertText": "lock(w->mu)"
  },
  {
    "label": "wait()",
    "kind": "Method",
    "detail": "Function (w -> state = Waiter::kWaiting ; w -> cv .)",
    "insertText": "wait(lock)"
  },
  {
    "label": "Unpark()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Unpark(Waiter* w)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state = w -> state ; w -> state = Waiter::kSignaled ; })",
    "insertText": "if(state == Waiter::kWaiting) w->cv.notify_one()"
  },
  {
    "label": "EventCount()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "EventCount(const EventCount&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const EventCount&)"
  }
]