[
  {
    "label": "IKeyArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyArea"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSequencerSnapField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSnapField"
  },
  {
    "label": "FSnapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSnapResult"
  },
  {
    "label": "FSequencerSnapField()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Tools / SequencerEntityVisitor . h \" # include \" MVVM / Extensions / ISnappableExtension . h \" class IKeyArea ; class FSequencer ; enum class ESequencerScrubberStyle : uint8 ; class FSequencerSnapField { public : struct FSnapResult { FFrameTime OriginalTime ; FFrameNumber SnappedTime ; float SnappedWeight = 0 . f ; } ;)",
    "insertText": "FSequencerSnapField()"
  },
  {
    "label": "FSequencerSnapField()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSequencerSnapField(const FSequencer& InSequencer, UE::Sequencer::ISnapCandidate& Candidate, uint32 EntityMask = ESequencerEntity::Everything)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FSequencer& InSequencer, UE::Sequencer::ISnapCandidate& Candidate, uint32 EntityMask = ESequencerEntity::Everything)"
  },
  {
    "label": "AddExplicitSnap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExplicitSnap(UE::Sequencer::FSnapPoint InSnap)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "SetSnapToInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSnapToInterval(bool bInSnapToInterval)"
  },
  {
    "label": "SetSnapToLikeTypes()",
    "kind": "Method",
    "detail": "Function (bSnapToInterval = bInSnapToInterval ; } void)",
    "insertText": "SetSnapToLikeTypes(bool bInSnapToLikeTypes)"
  },
  {
    "label": "Snap()",
    "kind": "Method",
    "detail": "Function (bSnapToLikeTypes = bInSnapToLikeTypes ; } TOptional<FSnapResult>)",
    "insertText": "Snap(const FFrameTime& InTime, const FFrameTime& Threshold)"
  },
  {
    "label": "Snap()",
    "kind": "Method",
    "detail": "Function (TOptional<FSnapResult>)",
    "insertText": "Snap(const TArray<FFrameTime>& InTimes, const FFrameTime& Threshold)"
  }
]