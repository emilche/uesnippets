[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ElapsedTimer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TIMER_ELAPSED_TIMER_H_ # define BASE_TIMER_ELAPSED_TIMER_H_ # include \" base / base_export . h \" # include \" base / time / time . h \" namespace base { class BASE_EXPORT ElapsedTimer { public :)",
    "insertText": "ElapsedTimer()"
  },
  {
    "label": "ElapsedTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElapsedTimer(const ElapsedTimer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ElapsedTimer&)",
    "insertText": "operator(const ElapsedTimer&)"
  },
  {
    "label": "ElapsedTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElapsedTimer(ElapsedTimer&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(ElapsedTimer&& other)"
  },
  {
    "label": "Elapsed()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "Elapsed()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (TimeTicks)",
    "insertText": "Begin()"
  },
  {
    "label": "ElapsedThreadTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElapsedThreadTimer(const ElapsedThreadTimer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ElapsedThreadTimer&)",
    "insertText": "operator(const ElapsedThreadTimer&)"
  },
  {
    "label": "is_supported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_supported()"
  },
  {
    "label": "ScopedMockElapsedTimersForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedMockElapsedTimersForTest()"
  },
  {
    "label": "ScopedMockElapsedTimersForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedMockElapsedTimersForTest(const ScopedMockElapsedTimersForTest&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedMockElapsedTimersForTest&)",
    "insertText": "operator(const ScopedMockElapsedTimersForTest&)"
  }
]