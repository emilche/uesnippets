[
  {
    "label": "NVMATH_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NVMATH_CLASS"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_MATH_QUATERNION_H # define NV_MATH_QUATERNION_H # include<nvmath / nvmath . h> # include<nvmath / Vector . h> namespace nv { class NVMATH_CLASS Quaternion { public : typedef Quaternion const& Arg ;)",
    "insertText": "Quaternion()"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quaternion(zero_t)"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quaternion(float x, float y, float z, float w)"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quaternion(Vector4::Arg v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const Quaternion&)",
    "insertText": "operator(Quaternion::Arg v)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (scalar)",
    "insertText": "x()"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (scalar)",
    "insertText": "y()"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (scalar)",
    "insertText": "z()"
  },
  {
    "label": "w()",
    "kind": "Method",
    "detail": "Function (scalar)",
    "insertText": "w()"
  },
  {
    "label": "asVector()",
    "kind": "Method",
    "detail": "Function (const Vector4&)",
    "insertText": "asVector()"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Quaternion(zero_t) : q(zero)"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Quaternion(float x, float y, float z, float w) : q(x, y, z, w)"
  },
  {
    "label": "Quaternion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Quaternion(Vector4::Arg v) : q(v)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (} Quaternion)",
    "insertText": "scale(Quaternion::Arg q, float s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Quaternion)",
    "insertText": "operator(Quaternion::Arg q, float s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Quaternion)",
    "insertText": "operator(float s, Quaternion::Arg q)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (} Quaternion)",
    "insertText": "scale(Quaternion::Arg q, Vector4::Arg s)"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (} Quaternion)",
    "insertText": "conjugate(Quaternion::Arg q)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "length(Quaternion::Arg q)"
  },
  {
    "label": "isNormalized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNormalized(Quaternion::Arg q, float epsilon = NV_NORMAL_EPSILON)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (} Quaternion)",
    "insertText": "normalize(Quaternion::Arg q, float epsilon = NV_EPSILON)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (float l =)",
    "insertText": "length(q)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(!isZero(l, epsilon))"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (Quaternion n =)",
    "insertText": "scale(q, 1.0f / l)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(isNormalized(n))"
  },
  {
    "label": "axisAngle()",
    "kind": "Method",
    "detail": "Function (} Quaternion)",
    "insertText": "axisAngle(Vector3::Arg v, float alpha)"
  },
  {
    "label": "sinf()",
    "kind": "Method",
    "detail": "Function (float s =)",
    "insertText": "sinf(alpha * 0.5f)"
  },
  {
    "label": "cosf()",
    "kind": "Method",
    "detail": "Function (float c =)",
    "insertText": "cosf(alpha * 0.5f)"
  }
]