[
  {
    "label": "ISyntaxTokenizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISyntaxTokenizer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToken"
  },
  {
    "label": "FTokenizedLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTokenizedLine"
  },
  {
    "label": "FSyntaxTokenizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSyntaxTokenizer"
  },
  {
    "label": "FRule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRule"
  },
  {
    "label": "FToken()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" class ISyntaxTokenizer { public : enum class ETokenType : uint8 { Syntax,Literal,} ; struct FToken {)",
    "insertText": "FToken(const ETokenType InType, const FTextRange& InRange) : Type(InType) , Range(InRange)"
  },
  {
    "label": "ISyntaxTokenizer()",
    "kind": "Method",
    "detail": "Function (} ETokenType Type ; FTextRange Range ; } ; struct FTokenizedLine { FTextRange Range ; TArray<FToken> Tokens ; } ; ~)",
    "insertText": "ISyntaxTokenizer()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Process(TArray<FTokenizedLine>& OutTokenizedLines, const FString& Input)"
  },
  {
    "label": "FRule()",
    "kind": "Method",
    "detail": "Function (} ; class FSyntaxTokenizer : public ISyntaxTokenizer { public : struct FRule {)",
    "insertText": "FRule(FString InMatchText) : MatchText(MoveTemp(InMatchText))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FString MatchText ; } ; TSharedRef<FSyntaxTokenizer>)",
    "insertText": "Create(TArray<FRule> InRules)"
  },
  {
    "label": "FSyntaxTokenizer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSyntaxTokenizer()"
  },
  {
    "label": "FSyntaxTokenizer()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSyntaxTokenizer(TArray<FRule> InRules)"
  },
  {
    "label": "TokenizeLineRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TokenizeLineRanges(const FString& Input, const TArray<FTextRange>& LineRanges, TArray<FTokenizedLine>& OutTokenizedLines)"
  }
]