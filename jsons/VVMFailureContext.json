[
  {
    "label": "FOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOp"
  },
  {
    "label": "VFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VFrame"
  },
  {
    "label": "VTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTask"
  },
  {
    "label": "VFailureContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VFailureContext"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct FOp ; struct VFrame ; struct VTask ; struct VFailureContext : VCell,TIntrusiveTree<VFailureContext> {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VCell)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; TWriteBarrier<VTask> Task ; TWriteBarrier<VFrame> Frame ; TWriteBarrier<VValue> IncomingEffectToken ; FOp* FailurePC ; VRestValue BeforeThenEffectToken { 0 } ; VRestValue DoneEffectToken { 0 } ; FOp* ThenPC { nullptr } ; FOp* DonePC { nullptr } ; uint32 SuspensionCount { 0 } ; bool bFailed { false } ; bool bExecutedEndFailureContextOpcode { false } ; FTransaction Transaction ; VFailureContext&)",
    "insertText": "New(FAllocationContext Context, VTask* Task, VFailureContext* Parent, VFrame& Frame, VValue IncomingEffectToken, FOp* FailurePC)"
  },
  {
    "label": "FinishedExecuting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishedExecuting(FAccessContext Context)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Detach(Context)"
  },
  {
    "label": "Fail()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Fail(FRunningContext Context)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (uint32 NumStartedTransactions = 0 ;)",
    "insertText": "ForEach([&](VFailureContext& FailureContext) { if (FailureContext.Transaction.bHasStarted) { ++NumStartedTransactions; } else { FailureContext.Transaction.Abort(Context); } FailureContext.bFailed = true; })"
  },
  {
    "label": "CurrentTransaction()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "CurrentTransaction()->Abort(Context)"
  },
  {
    "label": "VFailureContext()",
    "kind": "Method",
    "detail": "Function (} } private :)",
    "insertText": "VFailureContext(FAllocationContext Context, VTask* Task, VFailureContext* Parent, VFrame& Frame, VValue IncomingEffectToken, FOp* FailurePC) : VCell(Context, &GlobalTrivialEmergentType.Get(Context)) , TIntrusiveTree(Context, Parent) , Task(Context, Task) , Frame(Context, Frame) , IncomingEffectToken(Context, IncomingEffectToken) , FailurePC(FailurePC)"
  }
]