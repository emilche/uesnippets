[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_SIZE_H # define _LIBCPP___RANGES_SIZE_H # include<__concepts / class_or_enum . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__utility / auto_cast . h> # include<concepts> # include<cstddef> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (template<class> bool disable_sized_range = false ; } namespace ranges { namespace __size { void)",
    "insertText": "size(auto&)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size(const auto&)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> concept __size_enabled = ! disable_sized_range<remove_cvref_t<_Tp>> ; template<class _Tp> concept __member_size = __size_enabled<_Tp>&& __workaround_52970<_Tp>&&)",
    "insertText": "requires(_Tp&& __t)"
  },
  {
    "label": "_LIBCPP_AUTO_CAST()",
    "kind": "Method",
    "detail": "Function (__integer_like)",
    "insertText": "_LIBCPP_AUTO_CAST(__t.size())"
  },
  {
    "label": "_LIBCPP_AUTO_CAST()",
    "kind": "Method",
    "detail": "Function (__integer_like)",
    "insertText": "_LIBCPP_AUTO_CAST(size(__t))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (forward_iterator)",
    "insertText": "begin(__t)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "end(__t) } -> sized_sentinel_for<decltype(ranges::begin(declval<_Tp>()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct __fn { template<class _Tp,size_t _Sz> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI size_t)",
    "insertText": "operator()(_Tp (&&)[_Sz])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<__unqualified_size _Tp> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI __integer_like auto)",
    "insertText": "operator()(_Tp&& __t) const noexcept(noexcept(_LIBCPP_AUTO_CAST(size(__t))))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<__difference _Tp> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI auto)",
    "insertText": "operator()(_Tp&& __t) const noexcept(noexcept(std::__to_unsigned_like(ranges::end(__t) - ranges::begin(__t)))) -> decltype( std::__to_unsigned_like(ranges::end(__t) - ranges::begin(__t)))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size(__t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI integral auto)",
    "insertText": "operator()(_Tp&& __t) const noexcept(noexcept(ranges::size(__t)))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using _Signed = make_signed_t<)",
    "insertText": "decltype(ranges::size(__t))"
  }
]