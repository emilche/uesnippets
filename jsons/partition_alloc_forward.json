[
  {
    "label": "SlotSpanMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SlotSpanMetadata"
  },
  {
    "label": "PartitionStatsDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PartitionStatsDumper"
  },
  {
    "label": "PartitionRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PartitionRoot"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_FORWARD_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_ALLOC_FORWARD_H_ # include<algorithm> # include<cstddef> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" namespace partition_alloc { namespace internal { size_t kAlignment =)",
    "insertText": "max(alignof(max_align_t), static_cast<size_t>(__STDCPP_DEFAULT_NEW_ALIGNMENT__))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool ThreadSafe = true ; template<bool thread_safe> struct SlotSpanMetadata ; #)",
    "insertText": "if(BUILDFLAG(PA_DCHECK_IS_ON) || \\ BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS)) && \\ BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) PA_COMPONENT_EXPORT(PARTITION_ALLOC) void CheckThatSlotOffsetIsZero(uintptr_t address)"
  }
]