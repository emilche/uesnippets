[
  {
    "label": "IClassViewerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClassViewerFilter"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SWizard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWizard"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FModuleContextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleContextInfo"
  },
  {
    "label": "FParentClassItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParentClassItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SNewClassDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNewClassDialog"
  },
  {
    "label": "SClassViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SClassViewer"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AddToProjectConfig . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" Delegates / Delegate . h \" # include \" GameProjectUtils . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Misc / Optional . h \" # include \" Serialization / Archive . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / SListView . h \" class IClassViewerFilter ; class ITableRow ; class SEditableTextBox ; class STableViewBase ; class SWidget ; class SWindow ; class SWizard ; class UClass ; struct FGeometry ; struct FKeyEvent ; struct FModuleContextInfo ; struct FParentClassItem ; enum class EClassDomain : uint8 { Blueprint,Native } ; class SNewClassDialog : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SNewClassDialog ) : _ClassDomain(EClassDomain::Native), _Class(NULL)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SWindow>, ParentWindow) SLATE_ARGUMENT(EClassDomain, ClassDomain) SLATE_ARGUMENT(TArray<FNewClassInfo>, FeaturedClasses) SLATE_ARGUMENT(TSharedPtr<IClassViewerFilter>, ClassViewerFilter) SLATE_ARGUMENT(const UClass*, Class) SLATE_ARGUMENT(FString, InitialPath) SLATE_ARGUMENT(FString, DefaultClassPrefix) SLATE_ARGUMENT(FString, DefaultClassName) SLATE_EVENT( FOnAddedToProject, OnAddedToProject ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "MakeParentClassListViewWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "MakeParentClassListViewWidget(TSharedPtr<FParentClassItem> ParentClassItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetSelectedParentClassName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedParentClassName()"
  },
  {
    "label": "GetSelectedParentClassFilename()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedParentClassFilename()"
  },
  {
    "label": "GetSourceHyperlinkVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSourceHyperlinkVisibility()"
  },
  {
    "label": "GetSelectedParentDocLink()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSelectedParentDocLink()"
  },
  {
    "label": "GetDocLinkVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDocLinkVisibility()"
  },
  {
    "label": "OnEditCodeClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditCodeClicked()"
  },
  {
    "label": "OnParentClassItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnParentClassItemDoubleClicked(TSharedPtr<FParentClassItem> TemplateItem)"
  },
  {
    "label": "OnClassSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassSelected(TSharedPtr<FParentClassItem> Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnAdvancedClassSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAdvancedClassSelected(UClass* Class)"
  },
  {
    "label": "IsFullClassTreeShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullClassTreeShown()"
  },
  {
    "label": "OnFullClassTreeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFullClassTreeChanged(bool bInShowFullClassTree)"
  },
  {
    "label": "GetBasicParentClassVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetBasicParentClassVisibility()"
  },
  {
    "label": "GetAdvancedParentClassVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetAdvancedParentClassVisibility()"
  },
  {
    "label": "GetNameErrorLabelVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetNameErrorLabelVisibility()"
  },
  {
    "label": "GetNameErrorLabelText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNameErrorLabelText()"
  },
  {
    "label": "GetGlobalErrorLabelVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetGlobalErrorLabelVisibility()"
  },
  {
    "label": "GetGlobalErrorLabelText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGlobalErrorLabelText()"
  },
  {
    "label": "OnNamePageEntered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNamePageEntered()"
  },
  {
    "label": "GetNameClassTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNameClassTitle()"
  },
  {
    "label": "OnGetClassNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetClassNameText()"
  },
  {
    "label": "OnClassNameTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassNameTextChanged(const FText& NewText)"
  },
  {
    "label": "OnClassNameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassNameTextCommitted(const FText& NewText, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnGetClassPathText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetClassPathText()"
  },
  {
    "label": "OnClassPathTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassPathTextChanged(const FText& NewText)"
  },
  {
    "label": "OnBlueprintPathSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintPathSelected(const FString& NewPath)"
  },
  {
    "label": "OnGetClassHeaderFileText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetClassHeaderFileText()"
  },
  {
    "label": "OnGetClassSourceFileText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetClassSourceFileText()"
  },
  {
    "label": "CancelClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelClicked()"
  },
  {
    "label": "CanFinish()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFinish()"
  },
  {
    "label": "FinishClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishClicked()"
  },
  {
    "label": "HandleChooseFolderButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleChooseFolderButtonClicked()"
  },
  {
    "label": "GetSelectedModuleComboText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedModuleComboText()"
  },
  {
    "label": "SelectedModuleComboBoxSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectedModuleComboBoxSelectionChanged(TSharedPtr<FModuleContextInfo> Value, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "MakeWidgetForSelectedModuleCombo()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeWidgetForSelectedModuleCombo(TSharedPtr<FModuleContextInfo> Value)"
  },
  {
    "label": "GetClassLocationTextColor()",
    "kind": "Method",
    "detail": "Function (private : FSlateColor)",
    "insertText": "GetClassLocationTextColor(GameProjectUtils::EClassLocation InLocation)"
  },
  {
    "label": "IsClassLocationActive()",
    "kind": "Method",
    "detail": "Function (GameProjectUtils::EClassLocation)",
    "insertText": "IsClassLocationActive()"
  },
  {
    "label": "OnClassLocationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClassLocationChanged(GameProjectUtils::EClassLocation InLocation)"
  },
  {
    "label": "UpdateInputValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInputValidity()"
  },
  {
    "label": "GetSelectedParentClassInfo()",
    "kind": "Method",
    "detail": "Function (const FNewClassInfo&)",
    "insertText": "GetSelectedParentClassInfo()"
  },
  {
    "label": "SetupParentClassItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupParentClassItems(const TArray<FNewClassInfo>& UserSpecifiedFeaturedClasses)"
  },
  {
    "label": "CloseContainingWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseContainingWindow()"
  }
]