[
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FMassEntityManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityManager"
  },
  {
    "label": "FMassEntityHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassEntityHandle"
  },
  {
    "label": "GetProcessorExecutionFlagsForWorld()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassProcessingTypes . h \" # include \" MassArchetypeTypes . h \" class UWorld ; struct FMassEntityManager ; struct FMassEntityHandle ; namespace UE::Mass::Utils { EProcessorExecutionFlags)",
    "insertText": "GetProcessorExecutionFlagsForWorld(const UWorld& World)"
  },
  {
    "label": "DetermineProcessorExecutionFlags()",
    "kind": "Method",
    "detail": "Function (EProcessorExecutionFlags)",
    "insertText": "DetermineProcessorExecutionFlags(const UWorld* World, EProcessorExecutionFlags ExecutionFlagsOverride = EProcessorExecutionFlags::None)"
  },
  {
    "label": "DetermineProcessorSupportedTickTypes()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "DetermineProcessorSupportedTickTypes(const UWorld* World)"
  },
  {
    "label": "CreateEntityCollections()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateEntityCollections(const FMassEntityManager& EntitySubsystem, const TConstArrayView<FMassEntityHandle> Entities , const FMassArchetypeEntityCollection::EDuplicatesHandling DuplicatesHandling, TArray<FMassArchetypeEntityCollection>& OutEntityCollections)"
  },
  {
    "label": "AbstractSort()",
    "kind": "Method",
    "detail": "Function (template<TPred,TSwap> void)",
    "insertText": "AbstractSort(const int32 NumElements, TPred&& Predicate, TSwap&& SwapFunctor)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int i = 0 ; do { Indices [ i ] = i ; })",
    "insertText": "while(++i < NumElements)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "Sort(Predicate)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 SwapFromIndex = Indices [ i ] ;)",
    "insertText": "while(SwapFromIndex < i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SwapFromIndex = Indices [ SwapFromIndex ] ; })",
    "insertText": "if(SwapFromIndex != i)"
  },
  {
    "label": "SwapFunctor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapFunctor(i, SwapFromIndex)"
  },
  {
    "label": "GetEntityManager()",
    "kind": "Method",
    "detail": "Function (} } } FMassEntityManager*)",
    "insertText": "GetEntityManager(const UWorld* World)"
  },
  {
    "label": "GetEntityManagerChecked()",
    "kind": "Method",
    "detail": "Function (FMassEntityManager&)",
    "insertText": "GetEntityManagerChecked(const UWorld& World)"
  }
]