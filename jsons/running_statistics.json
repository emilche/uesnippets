[
  {
    "label": "RunningStatistics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RunningStatistics"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (# ifndef API_NUMERICS_RUNNING_STATISTICS_H_ # define API_NUMERICS_RUNNING_STATISTICS_H_ # include<algorithm> # include<cmath> # include<limits> # include \" absl / types / optional . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / math_utils . h \" namespace webrtc { namespace webrtc_impl { template<T> class RunningStatistics { public : void)",
    "insertText": "AddSample(T sample)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (max_ =)",
    "insertText": "max(max_, sample)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (min_ =)",
    "insertText": "min(min_, sample)"
  },
  {
    "label": "RemoveSample()",
    "kind": "Method",
    "detail": "Function (+ + size_ ; const double delta = sample - mean_ ; mean_ + = delta / size_ ; const double delta2 = sample - mean_ ; cumul_ + = delta* delta2 ; } void)",
    "insertText": "RemoveSample(T sample)"
  },
  {
    "label": "RTC_DCHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GT(Size(), 0)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (min_ =)",
    "insertText": "min(min_, other.min_)"
  },
  {
    "label": "new_mean()",
    "kind": "Method",
    "detail": "Function (const int64_t new_size = size_ + other . size_ ; const double)",
    "insertText": "new_mean(mean_ * size_ + other.mean_ * other.size_)"
  },
  {
    "label": "new_mean()",
    "kind": "Method",
    "detail": "Function (auto delta = [)",
    "insertText": "new_mean(const RunningStatistics<T>& stats)"
  },
  {
    "label": "delta()",
    "kind": "Method",
    "detail": "Function (} ; cumul_ = cumul_ +)",
    "insertText": "delta(*this) + other.cumul_ + delta(other)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (mean_ = new_mean ; size_ = new_size ; } int64_t)",
    "insertText": "Size()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} private : int64_t size_ = 0 ; T min_ = infinity_or_max<)",
    "insertText": "T()"
  }
]