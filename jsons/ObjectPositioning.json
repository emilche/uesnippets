[
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewportCursorLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportCursorLocation"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FObjectPositioningTraceResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPositioningTraceResult"
  },
  {
    "label": "EResultState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResultState"
  },
  {
    "label": "FObjectPositioningTraceResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Vector . h \" # include \" UObject / WeakObjectPtr . h \" struct FCollisionQueryParams ; class FSceneView ; struct FViewportCursorLocation ; class UObject ; namespace UE::Positioning { struct FObjectPositioningTraceResult { enum EResultState { HitSuccess,Default,Failed,} ;)",
    "insertText": "FObjectPositioningTraceResult() : State(Failed), Location(0.f), SurfaceNormal(0.f, 0.f, 1.f)"
  },
  {
    "label": "UnitZ()",
    "kind": "Method",
    "detail": "Function (} EResultState State = EResultState::Failed ; FVector Location = FVector::ZeroVector ; FVector SurfaceNormal =)",
    "insertText": "UnitZ()"
  },
  {
    "label": "TraceWorldForPositionWithDefault()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UObject> HitObject ; } ; FObjectPositioningTraceResult)",
    "insertText": "TraceWorldForPositionWithDefault(const FViewportCursorLocation& Cursor, const FSceneView& View, FCollisionQueryParams* CollisionQueryParams)"
  },
  {
    "label": "TraceWorldForPosition()",
    "kind": "Method",
    "detail": "Function (FObjectPositioningTraceResult)",
    "insertText": "TraceWorldForPosition(const FViewportCursorLocation& Cursor, const FSceneView& View, FCollisionQueryParams* CollisionQueryParams)"
  },
  {
    "label": "TraceWorldForPosition()",
    "kind": "Method",
    "detail": "Function (FObjectPositioningTraceResult)",
    "insertText": "TraceWorldForPosition(const UWorld& InWorld, const FSceneView& InSceneView, const FVector& RayStart, const FVector& RayEnd, FCollisionQueryParams* CollisionQueryParams)"
  }
]