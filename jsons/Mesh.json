[
  {
    "label": "ID3D11DeviceContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ID3D11DeviceContext"
  },
  {
    "label": "MeshBits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MeshBits"
  },
  {
    "label": "PATCH_TABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PATCH_TABLE"
  },
  {
    "label": "MeshInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MeshInterface"
  },
  {
    "label": "EvaluatorCacheT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EvaluatorCacheT"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "instantiatable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "instantiatable"
  },
  {
    "label": "enable_if",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "enable_if"
  },
  {
    "label": "Mesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Mesh"
  },
  {
    "label": "MeshInterface()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_OSD_MESH_H # define OPENSUBDIV3_OSD_MESH_H # include \" . . / version . h \" # include<bitset> # include<cassert> # include<cstring> # include<vector> # include \" . . / far / topologyRefiner . h \" # include \" . . / far / patchTableFactory . h \" # include \" . . / far / stencilTable . h \" # include \" . . / far / stencilTableFactory . h \" # include \" . . / osd / bufferDescriptor . h \" struct ID3D11DeviceContext ; namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Osd { enum MeshBits { MeshAdaptive = 0,MeshInterleaveVarying = 1,MeshFVarData = 2,MeshFVarAdaptive = 3,MeshUseSmoothCornerPatch = 4,MeshUseSingleCreasePatch = 5,MeshUseInfSharpPatch = 6,MeshEndCapBilinearBasis = 7,MeshEndCapBSplineBasis = 8,MeshEndCapGregoryBasis = 9,MeshEndCapLegacyGregory = 1 0,NUM_MESH_BITS = 1 1,} ; typedef std::bitset<NUM_MESH_BITS> MeshBitset ; template<class PATCH_TABLE> class MeshInterface { public : typedef PATCH_TABLE PatchTable ; typedef PatchTable::VertexBufferBinding VertexBufferBinding ; public :)",
    "insertText": "MeshInterface()"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "GetMaxValence()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaxValence()"
  },
  {
    "label": "UpdateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVertexBuffer(float const *vertexData, int startVertex, int numVerts)"
  },
  {
    "label": "UpdateVaryingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVaryingBuffer(float const *varyingData, int startVertex, int numVerts)"
  },
  {
    "label": "Refine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refine()"
  },
  {
    "label": "Synchronize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Synchronize()"
  },
  {
    "label": "GetPatchTable()",
    "kind": "Method",
    "detail": "Function (PatchTable*)",
    "insertText": "GetPatchTable()"
  },
  {
    "label": "GetFarPatchTable()",
    "kind": "Method",
    "detail": "Function (Far::PatchTable const*)",
    "insertText": "GetFarPatchTable()"
  },
  {
    "label": "BindVertexBuffer()",
    "kind": "Method",
    "detail": "Function (VertexBufferBinding)",
    "insertText": "BindVertexBuffer()"
  },
  {
    "label": "BindVaryingBuffer()",
    "kind": "Method",
    "detail": "Function (VertexBufferBinding)",
    "insertText": "BindVaryingBuffer()"
  },
  {
    "label": "refineMesh()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "refineMesh(Far::TopologyRefiner & refiner, int level, bool adaptive, bool singleCreasePatch)"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (Far::TopologyRefiner::AdaptiveOptions)",
    "insertText": "options(level)"
  },
  {
    "label": "RefineAdaptive()",
    "kind": "Method",
    "detail": "Function (options . useSingleCreasePatch = singleCreasePatch ; refiner .)",
    "insertText": "RefineAdaptive(options)"
  },
  {
    "label": "GetNumFVarChannels()",
    "kind": "Method",
    "detail": "Function (} else { bool fullTopologyInLastLevel = refiner .)",
    "insertText": "GetNumFVarChannels()"
  },
  {
    "label": "RefineUniform()",
    "kind": "Method",
    "detail": "Function (options . fullTopologyInLastLevel = fullTopologyInLastLevel ; refiner .)",
    "insertText": "RefineUniform(options)"
  },
  {
    "label": "refineMesh()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "refineMesh(Far::TopologyRefiner & refiner, int level, MeshBitset bits)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (options . useSingleCreasePatch = bits .)",
    "insertText": "test(MeshUseSingleCreasePatch)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (options . useInfSharpPatch = bits .)",
    "insertText": "test(MeshUseInfSharpPatch)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (options . considerFVarChannels = bits .)",
    "insertText": "test(MeshFVarAdaptive)"
  },
  {
    "label": "convertToCompatibleStencilTable()",
    "kind": "Method",
    "detail": "Function (} } } ; template<STENCIL_TABLE,SRC_STENCIL_TABLE,DEVICE_CONTEXT> STENCIL_TABLE const*)",
    "insertText": "convertToCompatibleStencilTable(SRC_STENCIL_TABLE const *table, DEVICE_CONTEXT *context)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<> Far::StencilTable const* convertToCompatibleStencilTable<Far::StencilTable,Far::StencilTable,)",
    "insertText": "void(Far::StencilTable const *table, void *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<> Far::LimitStencilTable const* convertToCompatibleStencilTable<Far::LimitStencilTable,Far::LimitStencilTable,)",
    "insertText": "void(Far::LimitStencilTable const *table, void *)"
  },
  {
    "label": "ID3D11DeviceContext()",
    "kind": "Method",
    "detail": "Function (} template<> Far::StencilTable const* convertToCompatibleStencilTable<Far::StencilTable,Far::StencilTable,)",
    "insertText": "ID3D11DeviceContext(Far::StencilTable const *table, ID3D11DeviceContext *)"
  },
  {
    "label": "EvaluatorCacheT()",
    "kind": "Method",
    "detail": "Function (} template<EVALUATOR> class EvaluatorCacheT { public : ~)",
    "insertText": "EvaluatorCacheT()"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (delete it -> evaluator ; } } struct Entry {)",
    "insertText": "Entry(BufferDescriptor const &srcDescArg, BufferDescriptor const &dstDescArg, BufferDescriptor const &duDescArg, BufferDescriptor const &dvDescArg, EVALUATOR *evalArg) : srcDesc(srcDescArg), dstDesc(dstDescArg), duDesc(duDescArg), dvDesc(dvDescArg), duuDesc(BufferDescriptor()), duvDesc(BufferDescriptor()), dvvDesc(BufferDescriptor()), evaluator(evalArg)"
  },
  {
    "label": "Entry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Entry(BufferDescriptor const &srcDescArg, BufferDescriptor const &dstDescArg, BufferDescriptor const &duDescArg, BufferDescriptor const &dvDescArg, BufferDescriptor const &duuDescArg, BufferDescriptor const &duvDescArg, BufferDescriptor const &dvvDescArg, EVALUATOR *evalArg) : srcDesc(srcDescArg), dstDesc(dstDescArg), duDesc(duDescArg), dvDesc(dvDescArg), duuDesc(duuDescArg), duvDesc(duvDescArg), dvvDesc(dvvDescArg), evaluator(evalArg)"
  },
  {
    "label": "GetEvaluator()",
    "kind": "Method",
    "detail": "Function (} BufferDescriptor srcDesc,dstDesc ; BufferDescriptor duDesc,dvDesc ; BufferDescriptor duuDesc,duvDesc,dvvDesc ; EVALUATOR* evaluator ; } ; typedef std::vector<Entry> Evaluators ; template<DEVICE_CONTEXT> EVALUATOR*)",
    "insertText": "GetEvaluator(BufferDescriptor const &srcDesc, BufferDescriptor const &dstDesc, DEVICE_CONTEXT *deviceContext)"
  },
  {
    "label": "GetEvaluator()",
    "kind": "Method",
    "detail": "Function (} template<DEVICE_CONTEXT> EVALUATOR*)",
    "insertText": "GetEvaluator(BufferDescriptor const &srcDesc, BufferDescriptor const &dstDesc, BufferDescriptor const &duDesc, BufferDescriptor const &dvDesc, DEVICE_CONTEXT *deviceContext)"
  },
  {
    "label": "GetEvaluator()",
    "kind": "Method",
    "detail": "Function (} template<DEVICE_CONTEXT> EVALUATOR*)",
    "insertText": "GetEvaluator(BufferDescriptor const &srcDesc, BufferDescriptor const &dstDesc, BufferDescriptor const &duDesc, BufferDescriptor const &dvDesc, BufferDescriptor const &duuDesc, BufferDescriptor const &duvDesc, BufferDescriptor const &dvvDesc, DEVICE_CONTEXT *deviceContext)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (_evaluators .)",
    "insertText": "push_back(Entry(srcDesc, dstDesc, duDesc, dvDesc, duuDesc, duvDesc, dvvDesc, e))"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (int offsetA = a .)",
    "insertText": "stride(a.offset % a.stride)"
  },
  {
    "label": "stride()",
    "kind": "Method",
    "detail": "Function (int offsetB = b .)",
    "insertText": "stride(b.offset % b.stride)"
  },
  {
    "label": "chk()",
    "kind": "Method",
    "detail": "Function (} Evaluators _evaluators ; } ; template<EVALUATOR> struct instantiatable { typedef char yes [ 1 ] ; typedef char no [ 2 ] ; template<C> yes&)",
    "insertText": "chk(typename C::Instantiatable *t=0)"
  },
  {
    "label": "chk()",
    "kind": "Method",
    "detail": "Function (template<C> no&)",
    "insertText": "chk(...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (bool const value =)",
    "insertText": "sizeof(chk<EVALUATOR>(0)) == sizeof(yes)"
  },
  {
    "label": "GetEvaluator()",
    "kind": "Method",
    "detail": "Function (} ; template<bool C,T = void> struct enable_if { typedef T type ; } ; template<T> struct enable_if<false,T> { } ; template<EVALUATOR,DEVICE_CONTEXT> EVALUATOR*)",
    "insertText": "GetEvaluator(EvaluatorCacheT<EVALUATOR> *cache, BufferDescriptor const &srcDesc, BufferDescriptor const &dstDesc, BufferDescriptor const &duDesc, BufferDescriptor const &dvDesc, BufferDescriptor const &duuDesc, BufferDescriptor const &duvDesc, BufferDescriptor const &dvvDesc, DEVICE_CONTEXT deviceContext, typename enable_if<instantiatable<EVALUATOR>::value, void>::type*t=0)"
  },
  {
    "label": "GetEvaluator()",
    "kind": "Method",
    "detail": "Function (} template<EVALUATOR,DEVICE_CONTEXT> EVALUATOR*)",
    "insertText": "GetEvaluator(EvaluatorCacheT<EVALUATOR> *cache, BufferDescriptor const &srcDesc, BufferDescriptor const &dstDesc, BufferDescriptor const &duDesc, BufferDescriptor const &dvDesc, DEVICE_CONTEXT deviceContext, typename enable_if<instantiatable<EVALUATOR>::value, void>::type*t=0)"
  },
  {
    "label": "GetEvaluator()",
    "kind": "Method",
    "detail": "Function (} template<EVALUATOR,DEVICE_CONTEXT> EVALUATOR*)",
    "insertText": "GetEvaluator(EvaluatorCacheT<EVALUATOR> *cache, BufferDescriptor const &srcDesc, BufferDescriptor const &dstDesc, DEVICE_CONTEXT deviceContext, typename enable_if<instantiatable<EVALUATOR>::value, void>::type*t=0)"
  },
  {
    "label": "GetEvaluator()",
    "kind": "Method",
    "detail": "Function (} template<EVALUATOR,DEVICE_CONTEXT> EVALUATOR*)",
    "insertText": "GetEvaluator(EvaluatorCacheT<EVALUATOR> *, BufferDescriptor const &, BufferDescriptor const &, BufferDescriptor const &, BufferDescriptor const &, BufferDescriptor const &, BufferDescriptor const &, BufferDescriptor const &, DEVICE_CONTEXT, typename enable_if<!instantiatable<EVALUATOR>::value, void>::type*t=0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(_refiner)"
  },
  {
    "label": "refineMesh()",
    "kind": "Method",
    "detail": "Function (MeshInterface<PATCH_TABLE)",
    "insertText": "refineMesh(*_refiner, level, bits)"
  },
  {
    "label": "numVertexElements()",
    "kind": "Method",
    "detail": "Function (int vertexBufferStride =)",
    "insertText": "numVertexElements(bits.test(MeshInterleaveVarying) ? numVaryingElements : 0)"
  },
  {
    "label": "varyingBufferStride()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "varyingBufferStride(bits.test(MeshInterleaveVarying) ? 0 : numVaryingElements)"
  },
  {
    "label": "initializeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeContext(numVertexElements, numVaryingElements, level, bits)"
  },
  {
    "label": "initializeVertexBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeVertexBuffers(_numVertices, vertexBufferStride, varyingBufferStride)"
  },
  {
    "label": "BufferDescriptor()",
    "kind": "Method",
    "detail": "Function (_vertexDesc =)",
    "insertText": "BufferDescriptor(0, numVertexElements, vertexBufferStride)"
  },
  {
    "label": "BufferDescriptor()",
    "kind": "Method",
    "detail": "Function (_varyingDesc =)",
    "insertText": "BufferDescriptor(numVertexElements, numVaryingElements, vertexBufferStride)"
  },
  {
    "label": "BufferDescriptor()",
    "kind": "Method",
    "detail": "Function (} else { _varyingDesc =)",
    "insertText": "BufferDescriptor(0, numVaryingElements, varyingBufferStride)"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "Mesh()"
  },
  {
    "label": "UpdateData()",
    "kind": "Method",
    "detail": "Function (_vertexBuffer ->)",
    "insertText": "UpdateData(vertexData, startVertex, numVerts, _deviceContext)"
  },
  {
    "label": "UpdateData()",
    "kind": "Method",
    "detail": "Function (_varyingBuffer ->)",
    "insertText": "UpdateData(varyingData, startVertex, numVerts, _deviceContext)"
  },
  {
    "label": "GetLevel()",
    "kind": "Method",
    "detail": "Function (int numControlVertices = _refiner ->)",
    "insertText": "GetLevel(0).GetNumVertices()"
  },
  {
    "label": "dstDesc()",
    "kind": "Method",
    "detail": "Function (BufferDescriptor srcDesc = _vertexDesc ; BufferDescriptor)",
    "insertText": "dstDesc(srcDesc)"
  },
  {
    "label": "Evaluator()",
    "kind": "Method",
    "detail": "Function (dstDesc . offset + = numControlVertices* dstDesc . stride ; Evaluator const* instance = GetEvaluator<)",
    "insertText": "Evaluator(_evaluatorCache, srcDesc, dstDesc, _deviceContext)"
  },
  {
    "label": "EvalStencils()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvalStencils(_vertexBuffer, srcDesc, _vertexBuffer, dstDesc, _vertexStencilTable, instance, _deviceContext)"
  },
  {
    "label": "vDstDesc()",
    "kind": "Method",
    "detail": "Function (BufferDescriptor vSrcDesc = _varyingDesc ; BufferDescriptor)",
    "insertText": "vDstDesc(vSrcDesc)"
  },
  {
    "label": "Evaluator()",
    "kind": "Method",
    "detail": "Function (vDstDesc . offset + = numControlVertices* vDstDesc . stride ; instance = GetEvaluator<)",
    "insertText": "Evaluator(_evaluatorCache, vSrcDesc, vDstDesc, _deviceContext)"
  },
  {
    "label": "EvalStencils()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvalStencils(_varyingBuffer, vSrcDesc, _varyingBuffer, vDstDesc, _varyingStencilTable, instance, _deviceContext)"
  },
  {
    "label": "EvalStencils()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "EvalStencils(_vertexBuffer, vSrcDesc, _vertexBuffer, vDstDesc, _varyingStencilTable, instance, _deviceContext)"
  },
  {
    "label": "Synchronize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Synchronize(_deviceContext)"
  },
  {
    "label": "GetVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} VertexBuffer*)",
    "insertText": "GetVertexBuffer()"
  },
  {
    "label": "IsUniform()",
    "kind": "Method",
    "detail": "Function (Far::StencilTableFactory::Options options ; options . generateOffsets = true ; options . generateIntermediateLevels = _refiner ->)",
    "insertText": "IsUniform()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Far::StencilTable const* vertexStencils = NULL ; Far::StencilTable const* varyingStencils = NULL ;)",
    "insertText": "if(numVertexElements>0)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (vertexStencils = Far::)",
    "insertText": "Create(*_refiner, options)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(numVaryingElements>0)"
  },
  {
    "label": "poptions()",
    "kind": "Method",
    "detail": "Function (} Far::PatchTableFactory::Options)",
    "insertText": "poptions(level)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (poptions . generateFVarTables = bits .)",
    "insertText": "test(MeshFVarData)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (poptions . generateLegacySharpCornerPatches = ! bits .)",
    "insertText": "test(MeshUseSmoothCornerPatch)"
  },
  {
    "label": "SetEndCapType()",
    "kind": "Method",
    "detail": "Function (poptions .)",
    "insertText": "SetEndCapType(Far::PatchTableFactory::Options::ENDCAP_BILINEAR_BASIS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (poptions . shareEndCapPatchPoints = true ; } else)",
    "insertText": "if(bits.test(MeshEndCapBSplineBasis))"
  },
  {
    "label": "SetEndCapType()",
    "kind": "Method",
    "detail": "Function (poptions .)",
    "insertText": "SetEndCapType(Far::PatchTableFactory::Options::ENDCAP_BSPLINE_BASIS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bits.test(MeshEndCapGregoryBasis))"
  },
  {
    "label": "SetEndCapType()",
    "kind": "Method",
    "detail": "Function (poptions .)",
    "insertText": "SetEndCapType(Far::PatchTableFactory::Options::ENDCAP_GREGORY_BASIS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (poptions . shareEndCapPatchPoints = true ; } else)",
    "insertText": "if(bits.test(MeshEndCapLegacyGregory))"
  },
  {
    "label": "SetEndCapType()",
    "kind": "Method",
    "detail": "Function (poptions .)",
    "insertText": "SetEndCapType(Far::PatchTableFactory::Options::ENDCAP_LEGACY_GREGORY)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} _farPatchTable = Far::)",
    "insertText": "Create(*_refiner, poptions)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delete vertexStencils ; vertexStencils = vertexStencilsWithLocalPoints ; })",
    "insertText": "if(varyingStencils)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (_patchTable =)",
    "insertText": "Create(_farPatchTable, _deviceContext)"
  },
  {
    "label": "GetNumControlVertices()",
    "kind": "Method",
    "detail": "Function (_numVertices = vertexStencils ->)",
    "insertText": "GetNumControlVertices() + vertexStencils->GetNumStencils()"
  },
  {
    "label": "StencilTable()",
    "kind": "Method",
    "detail": "Function (_vertexStencilTable = convertToCompatibleStencilTable<)",
    "insertText": "StencilTable(vertexStencils, _deviceContext)"
  },
  {
    "label": "StencilTable()",
    "kind": "Method",
    "detail": "Function (_varyingStencilTable = convertToCompatibleStencilTable<)",
    "insertText": "StencilTable(varyingStencils, _deviceContext)"
  },
  {
    "label": "initializeVertexBuffers()",
    "kind": "Method",
    "detail": "Function (delete vertexStencils ; delete varyingStencils ; } void)",
    "insertText": "initializeVertexBuffers(int numVertices, int numVertexElements, int numVaryingElements)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (_vertexBuffer =)",
    "insertText": "Create(numVertexElements, numVertices, _deviceContext)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(numVaryingElements)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (_varyingBuffer =)",
    "insertText": "Create(numVaryingElements, numVertices, _deviceContext)"
  }
]