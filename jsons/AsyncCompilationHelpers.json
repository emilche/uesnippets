[
  {
    "label": "FAsyncCompilationNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncCompilationNotification"
  },
  {
    "label": "FQueuedThreadPoolWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedThreadPoolWrapper"
  },
  {
    "label": "FAsyncCompilationStandardCVars",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncCompilationStandardCVars"
  },
  {
    "label": "ICompilable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICompilable"
  },
  {
    "label": "TCompilableAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCompilableAsyncTask"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / IConsoleManager . h \" # include \" Logging / LogMacros . h \" # include \" Framework / Notifications / NotificationManager . h \" # include \" Misc / QueuedThreadPool . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAsyncCompilation, Log, All)"
  },
  {
    "label": "FAsyncCompilationNotification()",
    "kind": "Method",
    "detail": "Function (class FAsyncCompilationNotification { public :)",
    "insertText": "FAsyncCompilationNotification(FTextFormat InAssetNameFormat) : AssetNameFormat(InAssetNameFormat)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(int32 NumJobs)"
  },
  {
    "label": "FAsyncCompilationStandardCVars()",
    "kind": "Method",
    "detail": "Function (private : FProgressNotificationHandle NotificationHandle ; int32 StartNumJobs ; FTextFormat AssetNameFormat ; } ; # if WITH_EDITOR class FQueuedThreadPoolWrapper ; namespace AsyncCompilationHelpers { class FAsyncCompilationStandardCVars { public : TAutoConsoleVariable<int32> AsyncCompilation ; TAutoConsoleVariable<int32> AsyncCompilationMaxConcurrency ; FAutoConsoleCommand AsyncCompilationFinishAll ; TAutoConsoleVariable<int32> AsyncCompilationResume ;)",
    "insertText": "FAsyncCompilationStandardCVars(const TCHAR* AssetType, const TCHAR* AssetTypePluralLowerCase, const FConsoleCommandDelegate& FinishAllCommand)"
  },
  {
    "label": "ICompilable()",
    "kind": "Method",
    "detail": "Function (} ; class ICompilable { public : ~)",
    "insertText": "ICompilable()"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Reschedule(FQueuedThreadPool* InThreadPool, EQueuedWorkPriority InPriority)"
  },
  {
    "label": "WaitCompletionWithTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitCompletionWithTimeout(float TimeLimitSeconds)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "GetAsyncTask()",
    "kind": "Method",
    "detail": "Function (} ; template<AsyncTaskType> class TCompilableAsyncTask : public ICompilable { AsyncTaskType*)",
    "insertText": "GetAsyncTask()"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (AsyncTask ->)",
    "insertText": "Reschedule(InThreadPool, InPriority)"
  },
  {
    "label": "FinishCompilation()",
    "kind": "Method",
    "detail": "Function (} return true ; } } ; void)",
    "insertText": "FinishCompilation(TFunctionRef<ICompilable& (int32 Index)> Getter, int32 Num, const FText& AssetType, const FLogCategoryBase& LogCategory, TFunctionRef<void(ICompilable*)> PostCompileSingle)"
  },
  {
    "label": "EnsureInitializedCVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureInitializedCVars(const TCHAR* InName, TAutoConsoleVariable<int32>& InCVarAsyncCompilation, TAutoConsoleVariable<int32>& InCVarAsyncCompilationMaxConcurrency, FName ExperimentalSettingsName = NAME_None)"
  },
  {
    "label": "BindThreadPoolToCVar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindThreadPoolToCVar(FQueuedThreadPoolWrapper* InThreadPoolWrapper, TAutoConsoleVariable<int32>& InCVarAsyncCompilation, TAutoConsoleVariable<int32>& InCVarAsyncCompilationResume, TAutoConsoleVariable<int32>& InCVarAsyncCompilationMaxConcurrency)"
  },
  {
    "label": "SaveStallStack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveStallStack(uint64 Cycles)"
  },
  {
    "label": "DumpStallStacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStallStacks()"
  }
]