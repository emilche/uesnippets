[
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FThinZone2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone2D"
  },
  {
    "label": "FThinZone2DFinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone2DFinder"
  },
  {
    "label": "FThinZoneChronos",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThinZoneChronos"
  },
  {
    "label": "FThinZone2DFinder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Chrono . h \" # include \" Core / HaveStates . h \" # include \" Core / Factory . h \" # include \" Core / Types . h \" # include \" Math / Point . h \" # include \" Mesh / Structure / EdgeSegment . h \" # include \" Mesh / Structure / GridBase . h \" # include \" Mesh / Structure / ThinZone2D . h \" # ifdef CADKERNEL_DEBUG # include \" UI / DefineForDebug . h \" # endif namespace UE::CADKernel { class FTopologicalLoop ; class FTopologicalEdge ; class FGrid ; class FThinZone2D ; class FThinZone2DFinder ; struct FThinZoneChronos { FDuration BuildLoopSegmentsTime ; FDuration DisplayBoundarySegmentTime ; FDuration FindCloseSegmentTime ; FDuration LinkCloseSegmentTime ; FDuration BuildThinZoneTime ; } ; class FThinZone2DFinder { class FThinZone2D ; public : FThinZoneChronos Chronos ; protected : const FGridBase& Grid ; const FTopologicalFace& Face ; double FinderTolerance ; double SquareFinderTolerance ; TArray<FThinZone2D> ThinZones ; TArray<FEdgeSegment*> LoopSegments ; TArray<TArray<FEdgeSegment*>> ThinZoneSides ; double ExternalLoopLength = 0 . 0 ; TFactory<FEdgeSegment> SegmentFatory ; public :)",
    "insertText": "FThinZone2DFinder(const FGridBase& InGrid, const FTopologicalFace& InFace) : Grid(InGrid) , Face(InFace) , SegmentFatory()"
  },
  {
    "label": "SearchThinZones()",
    "kind": "Method",
    "detail": "Function (# ifdef DEBUG_CADKERNEL bDisplay = Grid . bDisplay ; # endif } bool)",
    "insertText": "SearchThinZones(double InFinderTolerance)"
  },
  {
    "label": "GetThinZones()",
    "kind": "Method",
    "detail": "Function (TArray<FThinZone2D>&)",
    "insertText": "GetThinZones()"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (FinderTolerance = InFinderTolerance ; SquareFinderTolerance =)",
    "insertText": "Square(FinderTolerance)"
  },
  {
    "label": "BuildLoopSegments()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BuildLoopSegments()"
  },
  {
    "label": "FindCloseSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindCloseSegments()"
  },
  {
    "label": "FindCloseSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindCloseSegments(const TArray<FEdgeSegment*>& Segments, const TArray<const TArray<FEdgeSegment*>*>& OppositeSides)"
  },
  {
    "label": "LinkCloseSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkCloseSegments()"
  },
  {
    "label": "ImproveThinSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImproveThinSide()"
  },
  {
    "label": "CheckIfCloseSideOfThinSideIsNotDegenerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfCloseSideOfThinSideIsNotDegenerated(TArray<FEdgeSegment*>& Side)"
  },
  {
    "label": "CheckIfCloseSideOfThinSidesAreNotDegenerated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckIfCloseSideOfThinSidesAreNotDegenerated()"
  },
  {
    "label": "SplitThinSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitThinSide()"
  },
  {
    "label": "BuildThinZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildThinZone()"
  },
  {
    "label": "BuildThinZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildThinZone(const TArray<FEdgeSegment*>& FirstSide, const TArray<FEdgeSegment*>& SecondSide)"
  },
  {
    "label": "GetThinZoneSideConnectionsLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetThinZoneSideConnectionsLength(const TArray<FEdgeSegment*>& FirstSide, const TArray<FEdgeSegment*>& SecondSide, double InMaxLength, double* OutLengthBetweenExtremities, TArray<const FTopologicalEdge*>* OutPeakEdges)"
  },
  {
    "label": "DisplayCloseSegments()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV bool bDisplay = false ; void)",
    "insertText": "DisplayCloseSegments()"
  },
  {
    "label": "DisplayLoopSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayLoopSegments()"
  },
  {
    "label": "DisplaySegmentsOfThinZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySegmentsOfThinZone()"
  },
  {
    "label": "DisplayEdgeSegmentAndProjection()",
    "kind": "Method",
    "detail": "Function (# endif } ; # ifdef CADKERNEL_DEBUG namespace ThinZone { bool bDisplay = false ; void)",
    "insertText": "DisplayEdgeSegmentAndProjection(const FEdgeSegment* Segment, EVisuProperty SegColor, EVisuProperty OppositeColor, EVisuProperty ProjectionColor)"
  },
  {
    "label": "DisplayEdgeSegmentAndProjection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayEdgeSegmentAndProjection(const FEdgeSegment* Segment, const FEdgeSegment* Opposite, EVisuProperty SegColor, EVisuProperty OppositeColor, EVisuProperty ProjectionColor)"
  },
  {
    "label": "DisplayEdgeSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayEdgeSegment(const FEdgeSegment* EdgeSegment, EVisuProperty Color)"
  },
  {
    "label": "DisplayEdgeSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayEdgeSegment(const FEdgeSegment* EdgeSegment, EVisuProperty Color, int32 Index)"
  },
  {
    "label": "DisplayThinZoneSidesAndCloses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneSidesAndCloses(const TArray<TArray<FEdgeSegment*>>& ThinZoneSides)"
  },
  {
    "label": "DisplayThinZoneSides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneSides(const TArray<TArray<FEdgeSegment*>>& ThinZoneSides)"
  },
  {
    "label": "DisplayThinZoneSides2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneSides2(const TArray<TArray<FEdgeSegment*>>& ThinZoneSides)"
  },
  {
    "label": "DisplayThinZoneSide2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneSide2(const TArray<FEdgeSegment*>& Side, int32 Index, bool bSplitBySide = false, bool bSplitBySegment = false)"
  },
  {
    "label": "DisplayThinZoneSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneSide(const TArray<FEdgeSegment*>& Side, int32 Index, EVisuProperty Color, bool bSplitBySegment = false)"
  },
  {
    "label": "DisplayThinZoneSideAndClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneSideAndClose(const TArray<FEdgeSegment*>& Side, int32 Index, bool bSplitBySegment = false)"
  },
  {
    "label": "DisplayThinZoneSide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZoneSide(const FThinZoneSide& Side, int32 Index, EVisuProperty Color, bool bSplitBySegment = false)"
  },
  {
    "label": "DisplayThinZones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayThinZones(const TArray<FThinZone2D>& ThinZones)"
  }
]