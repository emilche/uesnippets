[
  {
    "label": "RemoveIf()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / Invoke . h \" namespace Algo { template<RangeType,Predicate> [ [ nodiscard ] ] int32)",
    "insertText": "RemoveIf(RangeType& Range, Predicate Pred)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto* First =)",
    "insertText": "GetData(Range)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (auto* Last = First +)",
    "insertText": "GetNum(Range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto* IterStart = First ; auto* IterEnd = Last ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Invoke(Pred, *IterStart))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } - - IterEnd ;)",
    "insertText": "if(IterStart == IterEnd)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} }* IterStart =)",
    "insertText": "MoveTemp(*(IterEnd - 1))"
  },
  {
    "label": "StableRemoveIf()",
    "kind": "Method",
    "detail": "Function (+ + IterStart ; - - IterEnd ; } } template<RangeType,Predicate> [ [ nodiscard ] ] int32)",
    "insertText": "StableRemoveIf(RangeType& Range, Predicate Pred)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Invoke(Pred, *IterKeep))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* IterStart + + =)",
    "insertText": "MoveTemp(*IterKeep)"
  }
]