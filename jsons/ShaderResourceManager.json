[
  {
    "label": "FNewTextureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNewTextureInfo"
  },
  {
    "label": "FCompareFNewTextureInfoByTextureSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareFNewTextureInfoByTextureSize"
  },
  {
    "label": "FSlateShaderResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResourceManager"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FNewTextureInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateBrush . h \" # include \" Textures / SlateShaderResource . h \" # include \" Textures / SlateTextureData . h \" # include \" Textures / TextureAtlas . h \" # include \" Types / SlateVector2 . h \" struct FNewTextureInfo { FSlateTextureDataPtr TextureData ; bool bShouldAtlas ; bool bSrgb ;)",
    "insertText": "FNewTextureInfo() : bShouldAtlas(true) , bSrgb(true)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCompareFNewTextureInfoByTextureSize { bool)",
    "insertText": "operator()( const FNewTextureInfo& A, const FNewTextureInfo& B)"
  },
  {
    "label": "FSlateShaderResourceManager()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlateShaderResourceManager { public :)",
    "insertText": "FSlateShaderResourceManager()"
  },
  {
    "label": "GetShaderResource()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResourceProxy*)",
    "insertText": "GetShaderResource(const FSlateBrush& Brush, FVector2f LocalSize, float DrawScale)"
  },
  {
    "label": "GetResourceHandle()",
    "kind": "Method",
    "detail": "Function (FSlateResourceHandle)",
    "insertText": "GetResourceHandle(const FSlateBrush& Brush, FVector2f LocalSize, float DrawScale)"
  },
  {
    "label": "GetResourceHandle()",
    "kind": "Method",
    "detail": "Function (FSlateResourceHandle)",
    "insertText": "GetResourceHandle(const FSlateBrush& Brush)"
  },
  {
    "label": "GetFontShaderResource()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResource*)",
    "insertText": "GetFontShaderResource(int32 InTextureAtlasIndex, FSlateShaderResource* FontTextureAtlas, const class UObject* FontMaterial)"
  },
  {
    "label": "ClearTextureMap()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ClearTextureMap()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (delete It .)",
    "insertText": "Value()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} ResourceMap .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetResourcePath()",
    "kind": "Method",
    "detail": "Function (# endif } FString)",
    "insertText": "GetResourcePath(const FSlateBrush& InBrush)"
  },
  {
    "label": "FSlateShaderResourceManager()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,FSlateShaderResourceProxy*> ResourceMap ; # if WITH_ATLAS_DEBUGGING TMap<const FAtlasedTextureSlot*,FName> AtlasDebugData ; # endif private :)",
    "insertText": "FSlateShaderResourceManager(const FSlateShaderResourceManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResourceManager&)",
    "insertText": "operator(const FSlateShaderResourceManager&)"
  }
]