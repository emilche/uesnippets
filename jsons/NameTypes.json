[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FMinimalName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalName"
  },
  {
    "label": "FScriptName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptName"
  },
  {
    "label": "FNumberedEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberedEntry"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FNameEntryId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameEntryId"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELinkerNameTableConstructor",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinkerNameTableConstructor"
  },
  {
    "label": "EFindName",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFindName"
  },
  {
    "label": "FNameEntryHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameEntryHeader"
  },
  {
    "label": "FNameEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameEntry"
  },
  {
    "label": "FNumberedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberedData"
  },
  {
    "label": "FClangKeepDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClangKeepDebugInfo"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "FNameHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameHelper"
  },
  {
    "label": "FNameEntryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNameEntryAllocator"
  },
  {
    "label": "FNamePoolShardBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamePoolShardBase"
  },
  {
    "label": "FNamePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamePool"
  },
  {
    "label": "FNameEntrySerialized",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameEntrySerialized"
  },
  {
    "label": "FMemoryImageName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageName"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "TMemoryImageNameLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMemoryImageNameLayout"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FNameFastLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameFastLess"
  },
  {
    "label": "FNameLexicalLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameLexicalLess"
  },
  {
    "label": "FNameDebugVisualizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameDebugVisualizer"
  },
  {
    "label": "FLazyName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLazyName"
  },
  {
    "label": "FLiteralOrName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiteralOrName"
  },
  {
    "label": "FDisplayNameEntryId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayNameEntryId"
  },
  {
    "label": "FNameBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNameBuilder"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FBlake3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlake3"
  },
  {
    "label": "FNameEntryId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Templates / UnrealTemplate . h \" # include \" Containers / UnrealString . h \" # include \" HAL / CriticalSection . h \" # include \" Containers / StringConv . h \" # include \" Containers / StringFwd . h \" # include \" UObject / UnrealNames . h \" # include \" Templates / Atomic . h \" # include \" Serialization / MemoryLayout . h \" # include \" Misc / IntrusiveUnsetOptionalState . h \" # include \" Misc / StringBuilder . h \" # include \" Trace / Trace . h \" # ifndef WITH_CASE_PRESERVING_NAME # define WITH_CASE_PRESERVING_NAME WITH_EDITORONLY_DATA # endif # ifndef UE_FNAME_OUTLINE_NUMBER # define UE_FNAME_OUTLINE_NUMBER 0 # endif class FText ; enum { NAME_SIZE = 1 0 2 4 } ; struct FMinimalName ; struct FScriptName ; struct FNumberedEntry ; class FName ; struct FNameEntryId { bool bHasIntrusiveUnsetOptionalState = true ; using IntrusiveUnsetOptionalStateType = FNameEntryId ;)",
    "insertText": "FNameEntryId() : Value(0)"
  },
  {
    "label": "FNameEntryId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNameEntryId(ENoInit)"
  },
  {
    "label": "FNameEntryId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNameEntryId(FIntrusiveUnsetOptionalState) : Value(~0u)"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNone()"
  },
  {
    "label": "LexicalLess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexicalLess(FNameEntryId Rhs)"
  },
  {
    "label": "CompareLexicalSensitive()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CompareLexicalSensitive(FNameEntryId Rhs)"
  },
  {
    "label": "LexicalSensitiveLess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LexicalSensitiveLess(FNameEntryId Rhs)"
  },
  {
    "label": "CompareFast()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CompareFast(FNameEntryId Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FNameEntryId Rhs)"
  },
  {
    "label": "FromEName()",
    "kind": "Method",
    "detail": "Function (FNameEntryId Id ; Id . Value = UnstableInt ; return Id ; } FNameEntryId)",
    "insertText": "FromEName(EName Ename)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FNameEntryId Id, EName Ename)"
  },
  {
    "label": "FromValidEName()",
    "kind": "Method",
    "detail": "Function (} private : uint32 Value ; FNameEntryId)",
    "insertText": "FromValidEName(EName Ename)"
  },
  {
    "label": "FromValidENamePostInit()",
    "kind": "Method",
    "detail": "Function (FNameEntryId)",
    "insertText": "FromValidENamePostInit(EName Ename)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(EName Ename, FNameEntryId Id)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(FNameEntryId Id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FNameEntryId& InId)"
  },
  {
    "label": "NAME_INTERNAL_TO_EXTERNAL()",
    "kind": "Method",
    "detail": "Function (} ; typedef FNameEntryId NAME_INDEX ; # define checkName checkSlow # define NAME_NO_NUMBER_INTERNAL 0 # define)",
    "insertText": "NAME_INTERNAL_TO_EXTERNAL(x) (x - 1) #define NAME_EXTERNAL_TO_INTERNAL(x) (x + 1) #define NAME_NO_NUMBER NAME_INTERNAL_TO_EXTERNAL(NAME_NO_NUMBER_INTERNAL) #define SUBOBJECT_DELIMITER_ANSI \":\" #define SUBOBJECT_DELIMITER TEXT(SUBOBJECT_DELIMITER_ANSI) #define SUBOBJECT_DELIMITER_CHAR_ANSI ':' #define SUBOBJECT_DELIMITER_CHAR TEXT(SUBOBJECT_DELIMITER_CHAR_ANSI) #define INVALID_NAME_CHARACTERS TEXT(\"\\\"' ,\\n\\r\\t\") #define INVALID_OBJECTNAME_CHARACTERS TEXT(\"\\\"' ,/.:|&!~\\n\\r\\t@#(){}[]=;^%$`\") #define INVALID_OBJECTPATH_CHARACTERS TEXT(\"\\\"' ,|&!~\\n\\r\\t@#(){}[]=;^%$`\") #define INVALID_LONGPACKAGE_CHARACTERS TEXT(\"\\\\:*?\\\"<>|' ,.&!~\\n\\r\\t@#\") #define VALID_SAVEDDIRSUFFIX_CHARACTERS TEXT(\"_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# endif uint8 Id [)",
    "insertText": "sizeof(FNameEntryId)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint8 Number [)",
    "insertText": "sizeof(uint32)"
  },
  {
    "label": "FNameEntry()",
    "kind": "Method",
    "detail": "Function (# endif } ; union { ANSICHAR AnsiName [ NAME_SIZE ] ; WIDECHAR WideName [ NAME_SIZE ] ; FNumberedData NumberedName ; } ;)",
    "insertText": "FNameEntry(struct FClangKeepDebugInfo)"
  },
  {
    "label": "FNameEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNameEntry(const FNameEntry&)"
  },
  {
    "label": "FNameEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNameEntry(FNameEntry&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNameEntry&)",
    "insertText": "operator(const FNameEntry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FNameEntry&)",
    "insertText": "operator(FNameEntry&&)"
  },
  {
    "label": "IsWide()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsWide()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetName(TCHAR(&OutName)[NAME_SIZE])"
  },
  {
    "label": "GetAnsiName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnsiName(ANSICHAR(&OutName)[NAME_SIZE])"
  },
  {
    "label": "GetWideName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWideName(WIDECHAR(&OutName)[NAME_SIZE])"
  },
  {
    "label": "GetPlainNameString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlainNameString()"
  },
  {
    "label": "AppendNameToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNameToString(FString& OutString)"
  },
  {
    "label": "AppendNameToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNameToString(FWideStringBuilderBase& OutString)"
  },
  {
    "label": "AppendNameToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNameToString(FUtf8StringBuilderBase& OutString)"
  },
  {
    "label": "AppendAnsiNameToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnsiNameToString(FAnsiStringBuilderBase& OutString)"
  },
  {
    "label": "AppendNameToPathString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendNameToPathString(FString& OutString)"
  },
  {
    "label": "DebugDump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDump(FOutputDevice& Out)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSize(int32 Length, bool bIsPureAnsi)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSize(const TCHAR* Name)"
  },
  {
    "label": "GetSizeInBytes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSizeInBytes()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(FArchive& Ar)"
  },
  {
    "label": "GetDataOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDataOffset()"
  },
  {
    "label": "MakeView()",
    "kind": "Method",
    "detail": "Function (struct FNameStringView)",
    "insertText": "MakeView(union FNameBuffer& OptionalDecodeBuffer)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (private : class FName ; struct FNameHelper ; class FNameEntryAllocator ; class FNamePoolShardBase ; class FNamePool ; void)",
    "insertText": "Encode(ANSICHAR* Name, uint32 Len)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encode(WIDECHAR* Name, uint32 Len)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(ANSICHAR* Name, uint32 Len)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(WIDECHAR* Name, uint32 Len)"
  },
  {
    "label": "StoreName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreName(const ANSICHAR* InName, uint32 Len)"
  },
  {
    "label": "StoreName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreName(const WIDECHAR* InName, uint32 Len)"
  },
  {
    "label": "CopyUnterminatedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyUnterminatedName(ANSICHAR* OutName)"
  },
  {
    "label": "CopyUnterminatedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyUnterminatedName(WIDECHAR* OutName)"
  },
  {
    "label": "CopyAndConvertUnterminatedName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAndConvertUnterminatedName(TCHAR* OutName)"
  },
  {
    "label": "GetUnterminatedName()",
    "kind": "Method",
    "detail": "Function (const ANSICHAR*)",
    "insertText": "GetUnterminatedName(ANSICHAR(&OptionalDecodeBuffer)[NAME_SIZE])"
  },
  {
    "label": "GetUnterminatedName()",
    "kind": "Method",
    "detail": "Function (const WIDECHAR*)",
    "insertText": "GetUnterminatedName(WIDECHAR(&OptionalDecodeBuffer)[NAME_SIZE])"
  },
  {
    "label": "GetNumberedName()",
    "kind": "Method",
    "detail": "Function (# if UE_FNAME_OUTLINE_NUMBER const FNumberedEntry&)",
    "insertText": "GetNumberedName()"
  },
  {
    "label": "GetNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumber()"
  },
  {
    "label": "FNameEntrySerialized()",
    "kind": "Method",
    "detail": "Function (# endif } ; struct FNameEntrySerialized { bool bIsWide = false ; union { ANSICHAR AnsiName [ NAME_SIZE ] ; WIDECHAR WideName [ NAME_SIZE ] ; } ; uint16 NonCasePreservingHash = 0 ; uint16 CasePreservingHash = 0 ;)",
    "insertText": "FNameEntrySerialized(const FNameEntry& NameEntry)"
  },
  {
    "label": "FNameEntrySerialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNameEntrySerialized(enum ELinkerNameTableConstructor)"
  },
  {
    "label": "GetAnsiName()",
    "kind": "Method",
    "detail": "Function (} ANSICHAR const*)",
    "insertText": "GetAnsiName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FNameEntrySerialized& E)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FNameEntrySerialized* E)"
  },
  {
    "label": "FMinimalName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMinimalName(EName N) : Index(FNameEntryId::FromEName(N))"
  },
  {
    "label": "FMinimalName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMinimalName(const FName& Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FNameEntryId Index ; # if ! UE_FNAME_OUTLINE_NUMBER int32 Number = NAME_NO_NUMBER_INTERNAL ; # endif # if UE_FNAME_OUTLINE_NUMBER bool)",
    "insertText": "operator(FMinimalName Lhs, FMinimalName Rhs)"
  },
  {
    "label": "FScriptName()",
    "kind": "Method",
    "detail": "Function (} } ; struct FScriptName { FName ;)",
    "insertText": "FScriptName()"
  },
  {
    "label": "FScriptName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptName(EName Ename) : ComparisonIndex(FNameEntryId::FromEName(Ename)) , DisplayIndex(ComparisonIndex)"
  },
  {
    "label": "FScriptName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptName(const FName& Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(EName Name)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FNameEntryId ComparisonIndex ; FNameEntryId DisplayIndex ; # if UE_FNAME_OUTLINE_NUMBER uint32 Dummy = 0 ; # else uint32 Number = NAME_NO_NUMBER_INTERNAL ; # endif # if UE_FNAME_OUTLINE_NUMBER bool)",
    "insertText": "operator(FScriptName Lhs, FScriptName Rhs)"
  },
  {
    "label": "ApplyMemoryImageNamePatch()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMemoryImageName ; namespace Freeze { void)",
    "insertText": "ApplyMemoryImageNamePatch(void* NameDst, const FMemoryImageName& Name, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, const FMemoryImageName& Object, const FTypeLayoutDesc&)"
  },
  {
    "label": "IntrinsicUnfrozenCopy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "IntrinsicUnfrozenCopy(const FMemoryUnfreezeContent& Context, const FMemoryImageName& Object, void* OutDst)"
  },
  {
    "label": "FMemoryImageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMemoryImageName()"
  },
  {
    "label": "FMemoryImageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMemoryImageName(EName Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FNameEntryId ComparisonIndex ; # if UE_FNAME_OUTLINE_NUMBER uint32 Dummy = 0 ; # else uint32 Number = NAME_NO_NUMBER_INTERNAL ; # endif # if WITH_CASE_PRESERVING_NAME FNameEntryId DisplayIndex ; # endif # if UE_FNAME_OUTLINE_NUMBER bool)",
    "insertText": "operator(FMemoryImageName Lhs, FMemoryImageName Rhs)"
  },
  {
    "label": "GetComparisonIndex()",
    "kind": "Method",
    "detail": "Function (} } ; class FName { public : bool bHasIntrusiveUnsetOptionalState = true ; using IntrusiveUnsetOptionalStateType = FName ; # if UE_FNAME_OUTLINE_NUMBER FNameEntryId)",
    "insertText": "GetComparisonIndex()"
  },
  {
    "label": "GetDisplayIndex()",
    "kind": "Method",
    "detail": "Function (FNameEntryId)",
    "insertText": "GetDisplayIndex()"
  },
  {
    "label": "GetDisplayIndexFast()",
    "kind": "Method",
    "detail": "Function (const FNameEntryId Index =)",
    "insertText": "GetDisplayIndexFast()"
  },
  {
    "label": "SetNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumber(const int32 NewNumber)"
  },
  {
    "label": "GetPlainNameString()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPlainNameString(TCHAR(&OutName)[NAME_SIZE])"
  },
  {
    "label": "GetPlainANSIString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlainANSIString(ANSICHAR(&AnsiName)[NAME_SIZE])"
  },
  {
    "label": "GetPlainWIDEString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlainWIDEString(WIDECHAR(&WideName)[NAME_SIZE])"
  },
  {
    "label": "GetComparisonNameEntry()",
    "kind": "Method",
    "detail": "Function (const FNameEntry*)",
    "insertText": "GetComparisonNameEntry()"
  },
  {
    "label": "GetDisplayNameEntry()",
    "kind": "Method",
    "detail": "Function (const FNameEntry*)",
    "insertText": "GetDisplayNameEntry()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FString& Out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FWideStringBuilderBase& Out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FUtf8StringBuilderBase& Out)"
  },
  {
    "label": "GetStringLength()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStringLength()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (uint32 StringBufferSize = NAME_SIZE + 1 + 1 0 ; uint32)",
    "insertText": "ToString(TCHAR* Out, uint32 OutSize)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (template<int N> uint32)",
    "insertText": "ToString(TCHAR (&Out)[N])"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendString(FString& Out)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(FWideStringBuilderBase& Out)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(FUtf8StringBuilderBase& Out)"
  },
  {
    "label": "TryAppendAnsiString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAppendAnsiString(FAnsiStringBuilderBase& Out)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FName Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FIntrusiveUnsetOptionalState I)"
  },
  {
    "label": "LexicalLess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LexicalLess(const FName& Other)"
  },
  {
    "label": "ToUnstableInt()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS&& ! WITH_CASE_PRESERVING_NAME return)",
    "insertText": "ToUnstableInt()"
  },
  {
    "label": "IsNone()",
    "kind": "Method",
    "detail": "Function (# else return ComparisonIndex .)",
    "insertText": "IsNone() && GetNumber()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsValidIndexFast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndexFast()"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidXName(const FName InName, const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr)"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName(const TCHAR* InName, const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr)"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName(const FString& InName, const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr)"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName(const FStringView& InName, const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr)"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName(const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr)"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidXName()"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName(FText& OutReason, const FString& InInvalidChars)"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidXName(FText& OutReason)"
  },
  {
    "label": "IsValidObjectName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidObjectName(FText& OutReason)"
  },
  {
    "label": "IsValidGroupName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidGroupName(FText& OutReason, bool bIsGroupName=false)"
  },
  {
    "label": "SanitizeWhitespace()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SanitizeWhitespace(const FString& FNameString)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Compare(const FName& Other)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FName(EName Ename) : FName(Ename, NAME_NO_NUMBER_INTERNAL)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(EName Ename, int32 InNumber) : FName(CreateNumberedNameIfNecessary(FNameEntryId::FromEName(Ename), InNumber))"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(FName Other, int32 InNumber) : FName(CreateNumberedNameIfNecessary(Other.GetComparisonIndex(), Other.GetDisplayIndex(), InNumber))"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(FNameEntryId InComparisonIndex, FNameEntryId InDisplayIndex, int32 InNumber) : FName(CreateNumberedNameIfNecessary(InComparisonIndex, InDisplayIndex, InNumber))"
  },
  {
    "label": "GetComparisonIdFromDisplayId()",
    "kind": "Method",
    "detail": "Function (} # if WITH_CASE_PRESERVING_NAME FNameEntryId)",
    "insertText": "GetComparisonIdFromDisplayId(FNameEntryId DisplayId)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (# if UE_FNAME_OUTLINE_NUMBER)",
    "insertText": "checkSlow(ResolveEntry(DisplayId)->IsNumbered() == false)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "FName(GetComparisonIdFromDisplayId(DisplayId), DisplayId, Number)"
  },
  {
    "label": "FindNumberedName()",
    "kind": "Method",
    "detail": "Function (} # if UE_FNAME_OUTLINE_NUMBER FName)",
    "insertText": "FindNumberedName(FNameEntryId DisplayId, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FName() #if !UE_FNAME_OUTLINE_NUMBER : Number(NAME_NO_NUMBER_INTERNAL)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(ENoInit) : ComparisonIndex(NoInit) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(NoInit)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(FIntrusiveUnsetOptionalState I) : ComparisonIndex(I) #if !UE_FNAME_OUTLINE_NUMBER , Number(NAME_NO_NUMBER_INTERNAL) #endif #if WITH_CASE_PRESERVING_NAME , DisplayIndex(I)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(FMinimalName InName)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(const WIDECHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(const ANSICHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(const UTF8CHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(int32 Len, const WIDECHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(int32 Len, const ANSICHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(int32 Len, const UTF8CHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(TStringView<ANSICHAR> View, EFindName FindType = FNAME_Add) : FName(NoInit)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FName(View.Len(), View.GetData(), FindType)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(TStringView<WIDECHAR> View, EFindName FindType = FNAME_Add) : FName(NoInit)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(TStringView<UTF8CHAR> View, EFindName FindType = FNAME_Add) : FName(NoInit)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(const WIDECHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(const ANSICHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(const UTF8CHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(int32 Len, const WIDECHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(int32 Len, const ANSICHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(int32 Len, const UTF8CHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(TStringView<ANSICHAR> View, int32 InNumber) : FName(NoInit)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FName(View.Len(), View.GetData(), InNumber)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(TStringView<WIDECHAR> View, int32 InNumber) : FName(NoInit)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(TStringView<UTF8CHAR> View, int32 InNumber) : FName(NoInit)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(const TCHAR* Name, int32 InNumber, bool bSplitName)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FName(const FNameEntrySerialized& LoadedEntry)"
  },
  {
    "label": "DisplayHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayHash(class FOutputDevice& Ar)"
  },
  {
    "label": "SafeString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SafeString(FNameEntryId InDisplayIndex, int32 InstanceNumber = NAME_NO_NUMBER_INTERNAL)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(uint32 NumBytes, uint32 NumNames)"
  },
  {
    "label": "GetNameEntryMemorySize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNameEntryMemorySize()"
  },
  {
    "label": "GetNameEntryMemoryEstimatedAvailable()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNameEntryMemoryEstimatedAvailable()"
  },
  {
    "label": "GetNameTableMemorySize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNameTableMemorySize()"
  },
  {
    "label": "GetNumAnsiNames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAnsiNames()"
  },
  {
    "label": "GetNumWideNames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumWideNames()"
  },
  {
    "label": "GetNumNumberedNames()",
    "kind": "Method",
    "detail": "Function (# if UE_FNAME_OUTLINE_NUMBER int32)",
    "insertText": "GetNumNumberedNames()"
  },
  {
    "label": "DebugDump()",
    "kind": "Method",
    "detail": "Function (# endif TArray<const FNameEntry*>)",
    "insertText": "DebugDump()"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (FNameEntry const*)",
    "insertText": "GetEntry(EName Ename)"
  },
  {
    "label": "GetEntry()",
    "kind": "Method",
    "detail": "Function (FNameEntry const*)",
    "insertText": "GetEntry(FNameEntryId Id)"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (# if UE_TRACE_ENABLED UE::Trace::FEventRef32)",
    "insertText": "TraceName(const FName& Name)"
  },
  {
    "label": "TraceNamesOnConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceNamesOnConnection()"
  },
  {
    "label": "AutoTest()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AutoTest()"
  },
  {
    "label": "NameToDisplayString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NameToDisplayString(const FString& InDisplayName, const bool bIsBool)"
  },
  {
    "label": "AddNameToDisplayStringExemption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNameToDisplayStringExemption(const FString& InExemption)"
  },
  {
    "label": "RemoveNameToDisplayStringExemption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNameToDisplayStringExemption(const FString& InExemption)"
  },
  {
    "label": "ToEName()",
    "kind": "Method",
    "detail": "Function (const EName*)",
    "insertText": "ToEName()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (uint64 Out = 0 ;)",
    "insertText": "Memcpy(&Out, this, sizeof(uint64))"
  },
  {
    "label": "DebugFName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "DebugFName(int32, int32)"
  },
  {
    "label": "DebugFName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "DebugFName(FName&)"
  },
  {
    "label": "NameToScriptName()",
    "kind": "Method",
    "detail": "Function (struct FNameHelper ; FScriptName)",
    "insertText": "NameToScriptName(FName InName)"
  },
  {
    "label": "NameToMinimalName()",
    "kind": "Method",
    "detail": "Function (FMinimalName)",
    "insertText": "NameToMinimalName(FName InName)"
  },
  {
    "label": "FMemoryImageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMemoryImageName(const FName& Name)"
  },
  {
    "label": "AppendStringInternal()",
    "kind": "Method",
    "detail": "Function (template<StringBufferType> void)",
    "insertText": "AppendStringInternal(StringBufferType& Out)"
  },
  {
    "label": "GetComparisonIndexInternal()",
    "kind": "Method",
    "detail": "Function (# if WITH_CASE_PRESERVING_NAME return DisplayIndex ; # else return ComparisonIndex ; # endif } FNameEntryId)",
    "insertText": "GetComparisonIndexInternal()"
  },
  {
    "label": "ResolveEntry()",
    "kind": "Method",
    "detail": "Function (# if WITH_CASE_PRESERVING_NAME return DisplayIndex ; # else return ComparisonIndex ; # endif } const FNameEntry*)",
    "insertText": "ResolveEntry(FNameEntryId LookupId)"
  },
  {
    "label": "ResolveEntryRecursive()",
    "kind": "Method",
    "detail": "Function (const FNameEntry*)",
    "insertText": "ResolveEntryRecursive(FNameEntryId LookupId)"
  },
  {
    "label": "IsWithinBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWithinBounds(FNameEntryId Id)"
  },
  {
    "label": "CreateNumberedName()",
    "kind": "Method",
    "detail": "Function (# if UE_FNAME_OUTLINE_NUMBER FName)",
    "insertText": "CreateNumberedName(FNameEntryId ComparisonId, FNameEntryId DisplayId, int32 Number)"
  },
  {
    "label": "CreateNumberedNameIfNecessary()",
    "kind": "Method",
    "detail": "Function (# endif FName)",
    "insertText": "CreateNumberedNameIfNecessary(FNameEntryId ComparisonId, FNameEntryId DisplayId, int32 Number)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_FNAME_OUTLINE_NUMBER)",
    "insertText": "if(Number != NAME_NO_NUMBER_INTERNAL)"
  },
  {
    "label": "CreateNumberedNameIfNecessary()",
    "kind": "Method",
    "detail": "Function (} # endif FName Out ; Out . ComparisonIndex = ComparisonId ; # if WITH_CASE_PRESERVING_NAME Out . DisplayIndex = DisplayId ; # endif # if ! UE_FNAME_OUTLINE_NUMBER Out . Number = Number ; # endif return Out ; } FName)",
    "insertText": "CreateNumberedNameIfNecessary(FNameEntryId ComparisonId, int32 Number)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(FName A, FName B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FName A, FAnsiStringView B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FName A, FWideStringView B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FName A, const ANSICHAR* B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FName A, const WIDECHAR* B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} # if UE_FNAME_OUTLINE_NUMBER bool)",
    "insertText": "Equals(FName A, FMinimalName B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(FName A, FScriptName B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(FName A, FMemoryImageName B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(FName Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> auto)",
    "insertText": "operator(FName N, T O) -> decltype(FName::Equals(N, O))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(T O, FName N) -> decltype(FName::Equals(N, O))"
  },
  {
    "label": "Expose_TNameOf()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<> struct TIsZeroConstructType<class FName> { enum { Value = true } ; } ;)",
    "insertText": "Expose_TNameOf(FName)"
  },
  {
    "label": "IntrinsicAppendHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "IntrinsicAppendHash(const FMemoryImageName* DummyObject, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, const FScriptName& Object, const FTypeLayoutDesc&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# if UE_FNAME_OUTLINE_NUMBER)",
    "insertText": "static_assert(STRUCT_OFFSET(FMemoryImageName, Dummy) == STRUCT_OFFSET(Freeze::TMemoryImageNameLayout<WITH_CASE_PRESERVING_NAME>, NumberOrDummy))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "static_assert(STRUCT_OFFSET(FMemoryImageName, Number) == STRUCT_OFFSET(Freeze::TMemoryImageNameLayout<WITH_CASE_PRESERVING_NAME>, NumberOrDummy))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_CASE_PRESERVING_NAME)",
    "insertText": "static_assert(STRUCT_OFFSET(FMemoryImageName, DisplayIndex) == STRUCT_OFFSET(Freeze::TMemoryImageNameLayout<WITH_CASE_PRESERVING_NAME>, DisplayIndex))"
  },
  {
    "label": "FMemoryImageName()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "FMemoryImageName(EName Name) : FMemoryImageName(FName(Name))"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(FMemoryImageName)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(FScriptName)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (# if UE_FNAME_OUTLINE_NUMBER)",
    "insertText": "FName(FMinimalName InName) : ComparisonIndex(InName.Index) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(InName.Index)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(FScriptName InName) : ComparisonIndex(InName.ComparisonIndex) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(InName.DisplayIndex)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(FMemoryImageName InName) : ComparisonIndex(InName.ComparisonIndex) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(InName.DisplayIndex)"
  },
  {
    "label": "FMinimalName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMinimalName(const FName& Name) : Index(Name.GetComparisonIndexInternal())"
  },
  {
    "label": "FScriptName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptName(const FName& Name) : ComparisonIndex(Name.GetComparisonIndexInternal()) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(Name.GetDisplayIndexInternal())"
  },
  {
    "label": "FMemoryImageName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMemoryImageName(const FName& Name) : ComparisonIndex(Name.GetComparisonIndexInternal()) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(Name.GetDisplayIndexInternal())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FMinimalName Rhs)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqual(const FName& Rhs, const ENameCase CompareMethod , const bool bCompareNumber)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FName(FMinimalName InName) : ComparisonIndex(InName.Index) , Number(InName.Number) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(InName.Index)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(FScriptName InName) : ComparisonIndex(InName.ComparisonIndex) , Number(InName.Number) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(InName.DisplayIndex)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FName(FMemoryImageName InName) : ComparisonIndex(InName.ComparisonIndex) , Number(InName.Number) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(InName.DisplayIndex)"
  },
  {
    "label": "FMinimalName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMinimalName(const FName& Name) : Index(Name.GetComparisonIndexInternal()) , Number(Name.GetNumber())"
  },
  {
    "label": "FScriptName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptName(const FName& Name) : ComparisonIndex(Name.GetComparisonIndexInternal()) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(Name.GetDisplayIndexInternal()) #endif , Number(Name.GetNumber())"
  },
  {
    "label": "FMemoryImageName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMemoryImageName(const FName& Name) : ComparisonIndex(Name.GetComparisonIndex()) , Number(Name.GetNumber()) #if WITH_CASE_PRESERVING_NAME , DisplayIndex(Name.GetDisplayIndex())"
  },
  {
    "label": "MinimalNameToName()",
    "kind": "Method",
    "detail": "Function (} # endif FName)",
    "insertText": "MinimalNameToName(FMinimalName InName)"
  },
  {
    "label": "ScriptNameToName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "ScriptNameToName(FScriptName InName)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "LexToString(const FName& Name)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (Name =)",
    "insertText": "FName(Str)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FWideStringBuilderBase&)",
    "insertText": "operator(FWideStringBuilderBase& Builder, const FName& Name)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (Name .)",
    "insertText": "AppendString(Builder)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FUtf8StringBuilderBase&)",
    "insertText": "operator(FUtf8StringBuilderBase& Builder, FNameEntryId Id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<> struct TIsPODType<FName> { enum { Value = true } ; } ; struct FNameFastLess { bool)",
    "insertText": "operator()(const FName& A, const FName& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(FNameEntryId A, FNameEntryId B)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (} } ; # ifndef WITH_CUSTOM_NAME_ENCODING void)",
    "insertText": "Encode(ANSICHAR*, uint32)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Encode(WIDECHAR*, uint32)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Decode(ANSICHAR*, uint32)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Decode(WIDECHAR*, uint32)"
  },
  {
    "label": "GetBlocks()",
    "kind": "Method",
    "detail": "Function (} # endif struct FNameDebugVisualizer { uint8**)",
    "insertText": "GetBlocks()"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (private : uint32 EntryStride =)",
    "insertText": "alignof(FNameEntry)"
  },
  {
    "label": "OffsetMask()",
    "kind": "Method",
    "detail": "Function (uint32 OffsetBits = 1 6 ; uint32 BlockBits = 1 3 ; uint32)",
    "insertText": "OffsetMask(1 << OffsetBits)"
  },
  {
    "label": "FLazyName()",
    "kind": "Method",
    "detail": "Function (uint32 UnusedMask = UINT32_MAX<<BlockBits<<OffsetBits ; uint32 MaxLength = NAME_SIZE ; } ; class FLazyName { public :)",
    "insertText": "FLazyName() : Either(FNameEntryId(), FNameEntryId())"
  },
  {
    "label": "FLazyName()",
    "kind": "Method",
    "detail": "Function (} template<int N>)",
    "insertText": "FLazyName(const WIDECHAR(&Literal)[N]) : Either(Literal) , Number(ParseNumber(Literal, N - 1)) , bLiteralIsWide(true)"
  },
  {
    "label": "FLazyName()",
    "kind": "Method",
    "detail": "Function (} template<int N>)",
    "insertText": "FLazyName(const ANSICHAR(&Literal)[N]) : Either(Literal) , Number(ParseNumber(Literal, N - 1)) , bLiteralIsWide(false)"
  },
  {
    "label": "FLazyName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLazyName(FName Name) : Either(Name.GetComparisonIndex(), Name.GetDisplayIndex()) , Number(Name.GetNumber())"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "FName()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "Resolve()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} private : struct FLiteralOrName { uint64 LiteralFlag =)",
    "insertText": "uint64(1) << (sizeof(uint64) * 8 - 1)"
  },
  {
    "label": "FLiteralOrName()",
    "kind": "Method",
    "detail": "Function (uint32 DisplayNameShift = 3 2 ;)",
    "insertText": "FLiteralOrName(const ANSICHAR* Literal) : Int(reinterpret_cast<uint64>(Literal) | LiteralFlag)"
  },
  {
    "label": "FLiteralOrName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiteralOrName(const WIDECHAR* Literal) : Int(reinterpret_cast<uint64>(Literal) | LiteralFlag)"
  },
  {
    "label": "FLiteralOrName()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLiteralOrName(FNameEntryId ComparisionId, FNameEntryId DisplayId) : Int(ComparisionId.ToUnstableInt() | (WITH_CASE_PRESERVING_NAME ? ((static_cast<uint64>(DisplayId.ToUnstableInt()) << DisplayNameShift)) : 0))"
  },
  {
    "label": "IsName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsName()"
  },
  {
    "label": "IsLiteral()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLiteral()"
  },
  {
    "label": "GetComparisionId()",
    "kind": "Method",
    "detail": "Function (} FNameEntryId)",
    "insertText": "GetComparisionId()"
  },
  {
    "label": "GetDisplayId()",
    "kind": "Method",
    "detail": "Function (} FNameEntryId)",
    "insertText": "GetDisplayId()"
  },
  {
    "label": "FromUnstableInt()",
    "kind": "Method",
    "detail": "Function (# if WITH_CASE_PRESERVING_NAME return)",
    "insertText": "FromUnstableInt(static_cast<uint32>(Int >> DisplayNameShift))"
  },
  {
    "label": "AsAnsiLiteral()",
    "kind": "Method",
    "detail": "Function (# endif } const ANSICHAR*)",
    "insertText": "AsAnsiLiteral()"
  },
  {
    "label": "AsWideLiteral()",
    "kind": "Method",
    "detail": "Function (} const WIDECHAR*)",
    "insertText": "AsWideLiteral()"
  },
  {
    "label": "ParseNumber()",
    "kind": "Method",
    "detail": "Function (} uint64 Int ; } ; FLiteralOrName Either ; uint32 Number = 0 ; bool bLiteralIsWide = false ; uint32)",
    "insertText": "ParseNumber(const WIDECHAR* Literal, int32 Len)"
  },
  {
    "label": "ParseNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ParseNumber(const ANSICHAR* Literal, int32 Len)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(FName Name, const FLazyName& Lazy)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!Lazy.bLiteralIsWide)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const FLazyName& Lazy, FName Name)"
  },
  {
    "label": "FDisplayNameEntryId()",
    "kind": "Method",
    "detail": "Function (} ; class FDisplayNameEntryId { public :)",
    "insertText": "FDisplayNameEntryId() : FDisplayNameEntryId(FName())"
  },
  {
    "label": "FDisplayNameEntryId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDisplayNameEntryId(FName Name) : FDisplayNameEntryId(Name.GetDisplayIndex(), Name.GetComparisonIndex())"
  },
  {
    "label": "ToName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "ToName(uint32 Number)"
  },
  {
    "label": "FDisplayNameEntryId()",
    "kind": "Method",
    "detail": "Function (} private : # if WITH_CASE_PRESERVING_NAME uint32 DifferentIdsFlag = 1 u<<3 1 ; uint32 DisplayIdMask = ~ DifferentIdsFlag ; uint32 Value = 0 ;)",
    "insertText": "FDisplayNameEntryId(FNameEntryId Id, FNameEntryId CmpId) : Value(Id.ToUnstableInt() | (Id != CmpId) * DifferentIdsFlag)"
  },
  {
    "label": "SameIds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SameIds()"
  },
  {
    "label": "GetComparisonId()",
    "kind": "Method",
    "detail": "Function (} FNameEntryId)",
    "insertText": "GetComparisonId()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FDisplayNameEntryId A, FDisplayNameEntryId B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FDisplayNameEntryId A, FNameEntryId B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(FDisplayNameEntryId InId)"
  },
  {
    "label": "FromComparisonId()",
    "kind": "Method",
    "detail": "Function (} public : FDisplayNameEntryId)",
    "insertText": "FromComparisonId(FNameEntryId ComparisonId)"
  },
  {
    "label": "ToDisplayId()",
    "kind": "Method",
    "detail": "Function (FNameEntryId)",
    "insertText": "ToDisplayId()"
  },
  {
    "label": "SetLoadedComparisonId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadedComparisonId(FNameEntryId ComparisonId)"
  },
  {
    "label": "SetLoadedDifferentDisplayId()",
    "kind": "Method",
    "detail": "Function (# if WITH_CASE_PRESERVING_NAME void)",
    "insertText": "SetLoadedDifferentDisplayId(FNameEntryId DisplayId)"
  },
  {
    "label": "GetLoadedComparisonId()",
    "kind": "Method",
    "detail": "Function (FNameEntryId)",
    "insertText": "GetLoadedComparisonId()"
  },
  {
    "label": "FNameBuilder()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FNameBuilder : public TStringBuilder<FName::StringBufferSize> { public :)",
    "insertText": "FNameBuilder()"
  },
  {
    "label": "FNameBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNameBuilder(const FName InName)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (InName .)",
    "insertText": "AppendString(*this)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TIsContiguousContainer<FNameBuilder> { bool Value = true ; } ; class FBlake3 ; void)",
    "insertText": "AppendHash(FBlake3& Builder, FName In)"
  }
]