[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FMinimalName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalName"
  },
  {
    "label": "FScriptName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptName"
  },
  {
    "label": "FNumberedEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberedEntry"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FNameEntryId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameEntryId"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ELinkerNameTableConstructor",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinkerNameTableConstructor"
  },
  {
    "label": "EFindName",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFindName"
  },
  {
    "label": "FNameEntryHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameEntryHeader"
  },
  {
    "label": "FNameEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameEntry"
  },
  {
    "label": "FNumberedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNumberedData"
  },
  {
    "label": "FClangKeepDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClangKeepDebugInfo"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FNameHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameHelper"
  },
  {
    "label": "FNameEntryAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNameEntryAllocator"
  },
  {
    "label": "FNamePoolShardBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamePoolShardBase"
  },
  {
    "label": "FNamePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNamePool"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "FNameEntrySerialized",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameEntrySerialized"
  },
  {
    "label": "ELinkerNameTableConstructor",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELinkerNameTableConstructor"
  },
  {
    "label": "FMinimalName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalName"
  },
  {
    "label": "FScriptName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptName"
  },
  {
    "label": "FMemoryImageName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageName"
  },
  {
    "label": "FMemoryImageName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageName"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FNameHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameHelper"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "TMemoryImageNameLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMemoryImageNameLayout"
  },
  {
    "label": "TMemoryImageNameLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMemoryImageNameLayout"
  },
  {
    "label": "TMemoryImageNameLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMemoryImageNameLayout"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "FNameFastLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameFastLess"
  },
  {
    "label": "FNameLexicalLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameLexicalLess"
  },
  {
    "label": "FNameDebugVisualizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameDebugVisualizer"
  },
  {
    "label": "FLazyName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLazyName"
  },
  {
    "label": "FLiteralOrName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiteralOrName"
  },
  {
    "label": "FDisplayNameEntryId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDisplayNameEntryId"
  },
  {
    "label": "FNameBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNameBuilder"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FBlake3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlake3"
  },
  {
    "label": "FromValidEName()",
    "kind": "Method",
    "detail": "Function (FNameEntryId)",
    "insertText": "FromValidEName(EName Ename)"
  },
  {
    "label": "FromValidENamePostInit()",
    "kind": "Method",
    "detail": "Function (FNameEntryId)",
    "insertText": "FromValidENamePostInit(EName Ename)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(FNameEntryId Id)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSize( int32 Length, bool bIsPureAnsi )"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSize(const TCHAR* Name)"
  },
  {
    "label": "GetDataOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDataOffset()"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encode(ANSICHAR* Name, uint32 Len)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encode(WIDECHAR* Name, uint32 Len)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(ANSICHAR* Name, uint32 Len)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(WIDECHAR* Name, uint32 Len)"
  },
  {
    "label": "StoreName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreName(const ANSICHAR* InName, uint32 Len)"
  },
  {
    "label": "StoreName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreName(const WIDECHAR* InName, uint32 Len)"
  },
  {
    "label": "FMinimalName()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FMinimalName(const FName& Name)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTypeHash(Name.Index)"
  },
  {
    "label": "FScriptName()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FScriptName(const FName& Name)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTypeHash(Name.ComparisonIndex)"
  },
  {
    "label": "ApplyMemoryImageNamePatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMemoryImageNamePatch(void* NameDst, const FMemoryImageName& Name, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, const FMemoryImageName& Object, const FTypeLayoutDesc&)"
  },
  {
    "label": "IntrinsicUnfrozenCopy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "IntrinsicUnfrozenCopy(const FMemoryUnfreezeContent& Context, const FMemoryImageName& Object, void* OutDst)"
  },
  {
    "label": "FMemoryImageName()",
    "kind": "Method",
    "detail": "Function (FORCEINLINE)",
    "insertText": "FMemoryImageName(const FName& Name)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTypeHash(Name.ComparisonIndex)"
  },
  {
    "label": "SetNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumber(const int32 NewNumber)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ToString(Out, N)"
  },
  {
    "label": "IsWithinBounds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsWithinBounds(ComparisonIndex)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName( const FName InName, const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr )"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName( const TCHAR* InName, const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr )"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName( const FString& InName, const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr )"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidXName( const FStringView& InName, const FString& InInvalidChars, FText* OutReason = nullptr, const FText* InErrorCtx = nullptr )"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsValidXName(*this, InInvalidChars, OutReason, InErrorCtx)"
  },
  {
    "label": "IsValidXName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsValidXName(*this, InInvalidChars, &OutReason)"
  },
  {
    "label": "SanitizeWhitespace()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SanitizeWhitespace(const FString& FNameString)"
  },
  {
    "label": "GetComparisonIdFromDisplayId()",
    "kind": "Method",
    "detail": "Function (FNameEntryId)",
    "insertText": "GetComparisonIdFromDisplayId(FNameEntryId DisplayId)"
  },
  {
    "label": "FindNumberedName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindNumberedName(FNameEntryId DisplayId, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FName(FMinimalName InName)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FName(FScriptName InName)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FORCEINLINE)",
    "insertText": "FName(FMemoryImageName InName)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(const WIDECHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(const ANSICHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(const UTF8CHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(int32 Len, const WIDECHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(int32 Len, const ANSICHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(int32 Len, const UTF8CHAR* Name, EFindName FindType=FNAME_Add)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(const WIDECHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(const ANSICHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(const UTF8CHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(int32 Len, const WIDECHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(int32 Len, const ANSICHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(int32 Len, const UTF8CHAR* Name, int32 Number)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(const TCHAR* Name, int32 InNumber, bool bSplitName)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (CORE_API)",
    "insertText": "FName(const FNameEntrySerialized& LoadedEntry)"
  },
  {
    "label": "DisplayHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayHash( class FOutputDevice& Ar )"
  },
  {
    "label": "SafeString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SafeString(FNameEntryId InDisplayIndex, int32 InstanceNumber = NAME_NO_NUMBER_INTERNAL)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(uint32 NumBytes, uint32 NumNames)"
  },
  {
    "label": "GetNameEntryMemorySize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNameEntryMemorySize()"
  },
  {
    "label": "GetNameEntryMemoryEstimatedAvailable()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNameEntryMemoryEstimatedAvailable()"
  },
  {
    "label": "GetNameTableMemorySize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNameTableMemorySize()"
  },
  {
    "label": "GetNumAnsiNames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAnsiNames()"
  },
  {
    "label": "GetNumWideNames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumWideNames()"
  },
  {
    "label": "GetNumNumberedNames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumNumberedNames()"
  },
  {
    "label": "TraceName()",
    "kind": "Method",
    "detail": "Function (UE::Trace::FEventRef32)",
    "insertText": "TraceName(const FName& Name)"
  },
  {
    "label": "TraceNamesOnConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceNamesOnConnection()"
  },
  {
    "label": "AutoTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoTest()"
  },
  {
    "label": "NameToDisplayString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "NameToDisplayString( const FString& InDisplayName, const bool bIsBool )"
  },
  {
    "label": "AddNameToDisplayStringExemption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNameToDisplayStringExemption(const FString& InExemption)"
  },
  {
    "label": "RemoveNameToDisplayStringExemption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNameToDisplayStringExemption(const FString& InExemption)"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "NameToScriptName()",
    "kind": "Method",
    "detail": "Function (FScriptName)",
    "insertText": "NameToScriptName(FName InName)"
  },
  {
    "label": "NameToMinimalName()",
    "kind": "Method",
    "detail": "Function (FMinimalName)",
    "insertText": "NameToMinimalName(FName InName)"
  },
  {
    "label": "IsWithinBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWithinBounds(FNameEntryId Id)"
  },
  {
    "label": "CreateNumberedName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "CreateNumberedName(FNameEntryId ComparisonId, FNameEntryId DisplayId, int32 Number)"
  },
  {
    "label": "CreateNumberedName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateNumberedName(ComparisonId, DisplayId, Number)"
  },
  {
    "label": "CreateNumberedNameIfNecessary()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateNumberedNameIfNecessary(ComparisonId, ComparisonId, Number)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FName A, FAnsiStringView B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FName A, FWideStringView B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FName A, const ANSICHAR* B)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(FName A, const WIDECHAR* B)"
  },
  {
    "label": "ApplyMemoryImageNamePatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMemoryImageNamePatch(void* NameDst, const FMemoryImageName& Name, const FPlatformTypeLayoutParameters& LayoutParams)"
  },
  {
    "label": "IntrinsicAppendHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "IntrinsicAppendHash(const FMemoryImageName* DummyObject, const FTypeLayoutDesc& TypeDesc, const FPlatformTypeLayoutParameters& LayoutParams, FSHA1& Hasher)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, const FMemoryImageName& Object, const FTypeLayoutDesc&)"
  },
  {
    "label": "IntrinsicUnfrozenCopy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "IntrinsicUnfrozenCopy(const FMemoryUnfreezeContent& Context, const FMemoryImageName& Object, void* OutDst)"
  },
  {
    "label": "IntrinsicWriteMemoryImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrinsicWriteMemoryImage(FMemoryImageWriter& Writer, const FScriptName& Object, const FTypeLayoutDesc&)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FName(InName)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FName(InName)"
  },
  {
    "label": "FMinimalName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FMinimalName(InName)"
  },
  {
    "label": "FScriptName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FScriptName(InName)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(const FName& Name)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Resolve()"
  },
  {
    "label": "GetComparisionId()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetComparisionId()"
  },
  {
    "label": "ParseNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ParseNumber(const WIDECHAR* Literal, int32 Len)"
  },
  {
    "label": "ParseNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ParseNumber(const ANSICHAR* Literal, int32 Len)"
  },
  {
    "label": "FromComparisonId()",
    "kind": "Method",
    "detail": "Function (FDisplayNameEntryId)",
    "insertText": "FromComparisonId(FNameEntryId ComparisonId)"
  },
  {
    "label": "SetLoadedComparisonId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadedComparisonId(FNameEntryId ComparisonId)"
  },
  {
    "label": "SetLoadedDifferentDisplayId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoadedDifferentDisplayId(FNameEntryId DisplayId)"
  },
  {
    "label": "AppendHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendHash(FBlake3& Builder, FName In)"
  }
]