[
  {
    "label": "PendingTaskSafetyFlag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PendingTaskSafetyFlag"
  },
  {
    "label": "ScopedTaskSafety",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTaskSafety"
  },
  {
    "label": "ScopedTaskSafetyDetached",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTaskSafetyDetached"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TASK_QUEUE_PENDING_TASK_SAFETY_FLAG_H_ # define API_TASK_QUEUE_PENDING_TASK_SAFETY_FLAG_H_ # include<utility> # include \" absl / functional / any_invocable . h \" # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / system / no_unique_address . h \" namespace webrtc { class PendingTaskSafetyFlag final : public rtc::RefCountedNonVirtual<PendingTaskSafetyFlag> { public : rtc::scoped_refptr<PendingTaskSafetyFlag>)",
    "insertText": "Create()"
  },
  {
    "label": "CreateDetached()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<PendingTaskSafetyFlag>)",
    "insertText": "CreateDetached()"
  },
  {
    "label": "CreateDetachedInactive()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<PendingTaskSafetyFlag>)",
    "insertText": "CreateDetachedInactive()"
  },
  {
    "label": "PendingTaskSafetyFlag()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PendingTaskSafetyFlag()"
  },
  {
    "label": "SetNotAlive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotAlive()"
  },
  {
    "label": "SetAlive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlive()"
  },
  {
    "label": "alive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "alive()"
  },
  {
    "label": "PendingTaskSafetyFlag()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "PendingTaskSafetyFlag(bool alive) : alive_(alive)"
  },
  {
    "label": "CreateInternal()",
    "kind": "Method",
    "detail": "Function (} private : rtc::scoped_refptr<PendingTaskSafetyFlag>)",
    "insertText": "CreateInternal(bool alive)"
  },
  {
    "label": "ScopedTaskSafety()",
    "kind": "Method",
    "detail": "Function (bool alive_ = true ; RTC_NO_UNIQUE_ADDRESS SequenceChecker main_sequence_ ; } ; class ScopedTaskSafety final { public :)",
    "insertText": "ScopedTaskSafety()"
  },
  {
    "label": "ScopedTaskSafety()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedTaskSafety(rtc::scoped_refptr<PendingTaskSafetyFlag> flag) : flag_(std::move(flag))"
  },
  {
    "label": "flag()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<PendingTaskSafetyFlag>)",
    "insertText": "flag()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (flag_ =)",
    "insertText": "move(new_flag)"
  },
  {
    "label": "ScopedTaskSafetyDetached()",
    "kind": "Method",
    "detail": "Function (} ; class ScopedTaskSafetyDetached final { public :)",
    "insertText": "ScopedTaskSafetyDetached()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; absl::AnyInvocable<)",
    "insertText": "void() &&> SafeTask( rtc::scoped_refptr<PendingTaskSafetyFlag> flag, absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(task)()"
  }
]