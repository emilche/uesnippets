[
  {
    "label": "FFreeTypeFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeFace"
  },
  {
    "label": "FFreeTypeCacheDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeCacheDirectory"
  },
  {
    "label": "FSlateFontInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateFontInfo"
  },
  {
    "label": "FHarfBuzzFontFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHarfBuzzFontFactory"
  },
  {
    "label": "__identifier()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / StringView . h \" class FFreeTypeFace ; class FFreeTypeCacheDirectory ; struct FSlateFontInfo ; # ifndef WITH_HARFBUZZ # define WITH_HARFBUZZ 0 # endif # ifndef WITH_HARFBUZZ_V24 # define WITH_HARFBUZZ_V24 0 # endif # if PLATFORM_COMPILER_HAS_GENERIC_KEYWORD # define generic)",
    "insertText": "__identifier(generic)"
  },
  {
    "label": "AppendStringToBuffer()",
    "kind": "Method",
    "detail": "Function (# if WITH_HARFBUZZ void)",
    "insertText": "AppendStringToBuffer(const FStringView InString, hb_buffer_t* InHarfBuzzTextBuffer)"
  },
  {
    "label": "AppendStringToBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendStringToBuffer(const FStringView InString, const int32 InStartIndex, const int32 InLength, hb_buffer_t* InHarfBuzzTextBuffer)"
  },
  {
    "label": "FHarfBuzzFontFactory()",
    "kind": "Method",
    "detail": "Function (# endif } class FHarfBuzzFontFactory { public :)",
    "insertText": "FHarfBuzzFontFactory(FFreeTypeCacheDirectory* InFTCacheDirectory)"
  },
  {
    "label": "FHarfBuzzFontFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHarfBuzzFontFactory()"
  },
  {
    "label": "CreateFont()",
    "kind": "Method",
    "detail": "Function (# if WITH_HARFBUZZ hb_font_t*)",
    "insertText": "CreateFont(const FFreeTypeFace& InFace, const uint32 InGlyphFlags, const FSlateFontInfo& InFontInfo, const float InFontScale)"
  }
]