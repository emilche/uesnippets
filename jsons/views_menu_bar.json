[
  {
    "label": "ViewsMenuBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ViewsMenuBar"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "MenuBarExecuteCommand()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_VIEWS_MENU_BAR_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_VIEWS_MENU_BAR_H_ # pragma once # include<map> # include<string> # include<vector> # include \" include / cef_menu_model . h \" # include \" include / cef_menu_model_delegate . h \" # include \" include / views / cef_menu_button . h \" # include \" include / views / cef_menu_button_delegate . h \" # include \" include / views / cef_panel . h \" namespace client { class ViewsMenuBar : public CefMenuButtonDelegate,public CefMenuModelDelegate { public : class Delegate { public : void)",
    "insertText": "MenuBarExecuteCommand(CefRefPtr<CefMenuModel> menu_model, int command_id, cef_event_flags_t event_flags)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "ViewsMenuBar()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "ViewsMenuBar(Delegate* delegate, int menu_id_start)"
  },
  {
    "label": "HasMenuId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMenuId(int menu_id)"
  },
  {
    "label": "GetMenuPanel()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefPanel>)",
    "insertText": "GetMenuPanel()"
  },
  {
    "label": "CreateMenuModel()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefMenuModel>)",
    "insertText": "CreateMenuModel(const CefString& label, int* menu_id)"
  },
  {
    "label": "GetMenuModel()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefMenuModel>)",
    "insertText": "GetMenuModel(int menu_id)"
  },
  {
    "label": "SetMenuFocusable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMenuFocusable(bool focusable)"
  },
  {
    "label": "OnKeyEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnKeyEvent(const CefKeyEvent& event)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "OnButtonPressed()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnButtonPressed(CefRefPtr<CefButton> button)"
  },
  {
    "label": "OnMenuButtonPressed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMenuButtonPressed(CefRefPtr<CefMenuButton> menu_button, const CefPoint& screen_point, CefRefPtr<CefMenuButtonPressedLock> button_pressed_lock)"
  },
  {
    "label": "ExecuteCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCommand(CefRefPtr<CefMenuModel> menu_model, int command_id, cef_event_flags_t event_flags)"
  },
  {
    "label": "MouseOutsideMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseOutsideMenu(CefRefPtr<CefMenuModel> menu_model, const CefPoint& screen_point)"
  },
  {
    "label": "UnhandledOpenSubmenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnhandledOpenSubmenu(CefRefPtr<CefMenuModel> menu_model, bool is_rtl)"
  },
  {
    "label": "UnhandledCloseSubmenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnhandledCloseSubmenu(CefRefPtr<CefMenuModel> menu_model, bool is_rtl)"
  },
  {
    "label": "MenuClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MenuClosed(CefRefPtr<CefMenuModel> menu_model)"
  },
  {
    "label": "EnsureMenuPanel()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EnsureMenuPanel()"
  },
  {
    "label": "GetActiveMenuId()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetActiveMenuId()"
  },
  {
    "label": "TriggerNextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerNextMenu(int offset)"
  },
  {
    "label": "TriggerMenuButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerMenuButton(CefRefPtr<CefView> button)"
  },
  {
    "label": "IMPLEMENT_REFCOUNTING()",
    "kind": "Method",
    "detail": "Function (Delegate* delegate_ ; const int id_start_ ; int id_next_ ; CefRefPtr<CefPanel> panel_ ; std::vector<CefRefPtr<CefMenuModel>> models_ ; bool last_nav_with_keyboard_ ; typedef std::map<base::char16,int> MnemonicMap ; MnemonicMap mnemonics_ ;)",
    "insertText": "IMPLEMENT_REFCOUNTING(ViewsMenuBar)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(ViewsMenuBar)"
  }
]