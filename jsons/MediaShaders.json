[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaElementVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaElementVertex"
  },
  {
    "label": "FMediaVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaVertexDeclaration"
  },
  {
    "label": "FMediaShadersVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaShadersVS"
  },
  {
    "label": "FAYUVConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAYUVConvertPS"
  },
  {
    "label": "FBMPConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBMPConvertPS"
  },
  {
    "label": "FNV12ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNV12ConvertPS"
  },
  {
    "label": "FNV12ConvertAsBytesPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNV12ConvertAsBytesPS"
  },
  {
    "label": "FNV21ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNV21ConvertPS"
  },
  {
    "label": "FP010ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FP010ConvertPS"
  },
  {
    "label": "FP010ConvertAsUINT16sPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FP010ConvertAsUINT16sPS"
  },
  {
    "label": "FP010_2101010ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FP010_2101010ConvertPS"
  },
  {
    "label": "FRGBConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRGBConvertPS"
  },
  {
    "label": "FYCoCgConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYCoCgConvertPS"
  },
  {
    "label": "FYCbCrConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYCbCrConvertPS"
  },
  {
    "label": "FYCbCrConvertPS_4x4Matrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYCbCrConvertPS_4x4Matrix"
  },
  {
    "label": "FUYVYConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUYVYConvertPS"
  },
  {
    "label": "FYUVConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUVConvertPS"
  },
  {
    "label": "FYUVv216ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUVv216ConvertPS"
  },
  {
    "label": "FYUVv210ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUVv210ConvertPS"
  },
  {
    "label": "FYUVY416ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUVY416ConvertPS"
  },
  {
    "label": "FYUY2ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUY2ConvertPS"
  },
  {
    "label": "FARGB16BigConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FARGB16BigConvertPS"
  },
  {
    "label": "FYVYUConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYVYUConvertPS"
  },
  {
    "label": "FRGB8toY8ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRGB8toY8ConvertPS"
  },
  {
    "label": "FReadTextureExternalPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReadTextureExternalPS"
  },
  {
    "label": "FRGB8toUYVY8ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRGB8toUYVY8ConvertPS"
  },
  {
    "label": "FRGB10toYUVv210ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRGB10toYUVv210ConvertPS"
  },
  {
    "label": "FModifyAlphaSwizzleRgbaPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModifyAlphaSwizzleRgbaPS"
  },
  {
    "label": "FConversionOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConversionOp"
  },
  {
    "label": "FVYUConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVYUConvertPS"
  },
  {
    "label": "CombineColorTransformAndOffset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GlobalShader . h \" # include \" ShaderParameterStruct . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Math / Color . h \" # include \" Math / Matrix . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" PipelineStateCache . h \" # include \" RHI . h \" # include \" RHICommandList . h \" # include \" RHIDefinitions . h \" # include \" RenderGraphDefinitions . h \" # include \" RenderResource . h \" # include \" Serialization / MemoryLayout . h \" # include \" Shader . h \" # include \" ShaderParameterMacros . h \" # include \" ShaderPermutation . h \" # include \" ShaderPermutation . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UnrealTemplate . h \" # endif class FPointerTableBase ; class FRDGBuilder ; class FRDGTexture ; namespace UE { namespace Color { enum class EEncoding : uint8 ; } } # define NUM_MEDIA_SHADERS_CONVERSION_OP 5 namespace MediaShaders { enum class EToneMapMethod : uint8 { None = 0,Hable = 1,SimpleReinhard = 2,MAX } ; const FMatrix YuvToRgbRec601Unscaled ; const FMatrix YuvToRgbRec601Scaled ; const FMatrix YuvToRgbRec709Unscaled ; const FMatrix YuvToRgbRec709Scaled ; const FMatrix YuvToRgbRec2020Unscaled ; const FMatrix YuvToRgbRec2020Scaled ; const FMatrix YuvToSrgbPs4 ; const FMatrix RgbToYuvRec709Scaled ; const FMatrix RgbToYuvRec2020Scaled ; const FVector YUVOffset8bits ; const FVector YUVOffsetNoScale8bits ; const FVector YUVOffset10bits ; const FVector YUVOffsetNoScale10bits ; const FVector YUVOffset16bits ; const FVector YUVOffsetNoScale16bits ; const FVector YUVOffsetFloat ; const FVector YUVOffsetNoScaleFloat ; FMatrix)",
    "insertText": "CombineColorTransformAndOffset(const FMatrix& InMatrix, const FVector& InYUVOffset)"
  },
  {
    "label": "FMediaElementVertex()",
    "kind": "Method",
    "detail": "Function (} struct FMediaElementVertex { FVector4f Position ; FVector2f TextureCoordinate ;)",
    "insertText": "FMediaElementVertex()"
  },
  {
    "label": "FMediaElementVertex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMediaElementVertex(const FVector4f& InPosition, const FVector2f& InTextureCoordinate) : Position(InPosition) , TextureCoordinate(InTextureCoordinate)"
  },
  {
    "label": "CreateTempMediaVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} } ; FBufferRHIRef)",
    "insertText": "CreateTempMediaVertexBuffer(float ULeft = 0.0f, float URight = 1.0f, float VTop = 0.0f, float VBottom = 1.0f)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FRHICommandListBase& RHICmdList =)",
    "insertText": "Get()"
  },
  {
    "label": "CreateInfo()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCreateInfo)",
    "insertText": "CreateInfo(TEXT(\"TempMediaVertexBuffer\"))"
  },
  {
    "label": "CreateVertexBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef VertexBufferRHI = RHICmdList .)",
    "insertText": "CreateVertexBuffer(sizeof(FMediaElementVertex) * 4, BUF_Volatile, CreateInfo)"
  },
  {
    "label": "LockBuffer()",
    "kind": "Method",
    "detail": "Function (void* VoidPtr = RHICmdList .)",
    "insertText": "LockBuffer(VertexBufferRHI, 0, sizeof(FMediaElementVertex) * 4, RLM_WriteOnly)"
  },
  {
    "label": "Vertices()",
    "kind": "Method",
    "detail": "Function (FMediaElementVertex*)",
    "insertText": "Vertices(FMediaElementVertex*)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vertices [ 0 ] . Position .)",
    "insertText": "Set(-1.0f, 1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vertices [ 1 ] . Position .)",
    "insertText": "Set(1.0f, 1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vertices [ 2 ] . Position .)",
    "insertText": "Set(-1.0f, -1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vertices [ 3 ] . Position .)",
    "insertText": "Set(1.0f, -1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vertices [ 0 ] . TextureCoordinate .)",
    "insertText": "Set(ULeft, VTop)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vertices [ 1 ] . TextureCoordinate .)",
    "insertText": "Set(URight, VTop)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vertices [ 2 ] . TextureCoordinate .)",
    "insertText": "Set(ULeft, VBottom)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Vertices [ 3 ] . TextureCoordinate .)",
    "insertText": "Set(URight, VBottom)"
  },
  {
    "label": "UnlockBuffer()",
    "kind": "Method",
    "detail": "Function (RHICmdList .)",
    "insertText": "UnlockBuffer(VertexBufferRHI)"
  },
  {
    "label": "FMediaVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMediaVertexDeclaration()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationRHIRef VertexDeclarationRHI ; } ; TGlobalResource<FMediaVertexDeclaration> GMediaVertexDeclaration ; class FMediaShadersVS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FMediaShadersVS, Global, RENDERCORE_API)"
  },
  {
    "label": "FMediaShadersVS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMediaShadersVS()"
  },
  {
    "label": "FMediaShadersVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMediaShadersVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FAYUVConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FAYUVConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FAYUVConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAYUVConvertPS()"
  },
  {
    "label": "FAYUVConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAYUVConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> AYUVTexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FBMPConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FBMPConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FBMPConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FBMPConvertPS()"
  },
  {
    "label": "FBMPConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBMPConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> BMPTexture, const FIntPoint& OutputDimensions, bool SrgbToLinear)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FNV12ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FNV12ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FNV12ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNV12ConvertPS()"
  },
  {
    "label": "FNV12ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNV12ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FIntPoint & TexDim, FShaderResourceViewRHIRef SRV_Y, FShaderResourceViewRHIRef SRV_UV, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bSwapChroma, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "FNV12ConvertAsBytesPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNV12ConvertAsBytesPS()"
  },
  {
    "label": "FNV12ConvertAsBytesPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNV12ConvertAsBytesPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> NV12Texture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bSwapChroma, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FNV21ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FNV21ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FNV21ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNV21ConvertPS()"
  },
  {
    "label": "FNV21ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNV21ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> NV21Texture, const FIntPoint& OutputDimensions, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FP010ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FP010ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FP010ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FP010ConvertPS()"
  },
  {
    "label": "FP010ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FP010ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FIntPoint& TexDim, FShaderResourceViewRHIRef SRV_Y, FShaderResourceViewRHIRef SRV_UV, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, const FMatrix44f& CSTransform, UE::Color::EEncoding Encoding, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FP010ConvertAsUINT16sPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FP010ConvertAsUINT16sPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FP010ConvertAsUINT16sPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FP010ConvertAsUINT16sPS()"
  },
  {
    "label": "FP010ConvertAsUINT16sPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FP010ConvertAsUINT16sPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FIntPoint& TexDim, TRefCountPtr<FRHITexture> NV12Texture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, const FMatrix44f& CSTransform, UE::Color::EEncoding Encoding, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FP010_2101010ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FP010_2101010ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FP010_2101010ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FP010_2101010ConvertPS()"
  },
  {
    "label": "FP010_2101010ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FP010_2101010ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FIntPoint& TexDim, FShaderResourceViewRHIRef SRV_Y, FShaderResourceViewRHIRef SRV_U, FShaderResourceViewRHIRef SRV_V, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, const FMatrix44f& CSTransform, UE::Color::EEncoding Encoding, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FRGBConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FRGBConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FRGBConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FRGBConvertPS()"
  },
  {
    "label": "FRGBConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRGBConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> RGBTexture, const FIntPoint& OutputDimensions, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYCoCgConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYCoCgConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FYCoCgConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYCoCgConvertPS()"
  },
  {
    "label": "FYCoCgConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYCoCgConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YCoCgTexture, const FIntPoint& OutputDimensions, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYCbCrConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYCbCrConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FYCbCrConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYCbCrConvertPS()"
  },
  {
    "label": "FYCbCrConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYCbCrConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> LumaTexture, TRefCountPtr<FRHITexture> CbCrTexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYCbCrConvertPS_4x4Matrix : public FYCbCrConvertPS {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYCbCrConvertPS_4x4Matrix, Global, RENDERCORE_API)"
  },
  {
    "label": "FYCbCrConvertPS_4x4Matrix()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYCbCrConvertPS_4x4Matrix()"
  },
  {
    "label": "FYCbCrConvertPS_4x4Matrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYCbCrConvertPS_4x4Matrix(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FYCbCrConvertPS(Initializer)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FUYVYConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FUYVYConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FUYVYConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FUYVYConvertPS()"
  },
  {
    "label": "FUYVYConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUYVYConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> UYVYTexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYUVConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYUVConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FYUVConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYUVConvertPS()"
  },
  {
    "label": "FYUVConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYUVConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YTexture, TRefCountPtr<FRHITexture> UTexture, TRefCountPtr<FRHITexture> VTexture, const FIntPoint& OutputDimensions, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYUVv216ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYUVv216ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FYUVv216ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYUVv216ConvertPS()"
  },
  {
    "label": "FYUVv216ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYUVv216ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YUVTexture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bIsCbY0CrY1, bool bIsARGBFmt, bool bSwapChroma, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None, bool bUseBilinearSamplingForChroma = false)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYUVv210ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYUVv210ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FYUVv210ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYUVv210ConvertPS()"
  },
  {
    "label": "FYUVv210ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYUVv210ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YUVTexture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bIsCbY0CrY1, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYUVY416ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYUVY416ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FYUVY416ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYUVY416ConvertPS()"
  },
  {
    "label": "FYUVY416ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYUVY416ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FShaderResourceViewRHIRef SRV_Y, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bIsARGBFmt, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYUY2ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYUY2ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FYUY2ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYUY2ConvertPS()"
  },
  {
    "label": "FYUY2ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYUY2ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YUY2Texture, const FIntPoint& OutputDimensions, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FARGB16BigConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FARGB16BigConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FARGB16BigConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FARGB16BigConvertPS()"
  },
  {
    "label": "FARGB16BigConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FARGB16BigConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FShaderResourceViewRHIRef SRV, const FIntPoint& OutputDimensions, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FYVYUConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FYVYUConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FYVYUConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FYVYUConvertPS()"
  },
  {
    "label": "FYVYUConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FYVYUConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YVYUTexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FRGB8toY8ConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FRGB8toY8ConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FRGB8toY8ConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FRGB8toY8ConvertPS()"
  },
  {
    "label": "FRGB8toY8ConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRGB8toY8ConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> RGBATexture, const FVector4f& ColorTransform, bool LinearToSrgb)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FReadTextureExternalPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FReadTextureExternalPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FReadTextureExternalPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FReadTextureExternalPS()"
  },
  {
    "label": "FReadTextureExternalPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FReadTextureExternalPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InTexture .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InExternalTexture\"), SPF_Mandatory)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FTextureRHIRef TextureExt, FSamplerStateRHIRef SamplerState, const FLinearColor & ScaleRotation, const FLinearColor & Offset)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InTexture)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FRGBToYUVConversion, RENDERCORE_API) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, InputTexture) SHADER_PARAMETER_SAMPLER(SamplerState, InputSampler) SHADER_PARAMETER(FMatrix44f, ColorTransform) SHADER_PARAMETER(uint32, DoLinearToSrgb) SHADER_PARAMETER(float, OnePixelDeltaX) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FRGB8toUYVY8ConvertPS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FRGB8toUYVY8ConvertPS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FRGBToYUVConversion, RGBToYUVConversion) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT() public: RENDERCORE_API FRGB8toUYVY8ConvertPS::FParameters* AllocateAndSetParameters(FRDGBuilder& GraphBuilder, FRDGTextureRef RGBATexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool bDoLinearToSrgb, FRDGTextureRef OutputTexture)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FRGB10toYUVv210ConvertPS : public FGlobalShader { public :)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FRGB10toYUVv210ConvertPS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FRGB10toYUVv210ConvertPS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FRGBToYUVConversion, RGBToYUVConversion) SHADER_PARAMETER(float, PaddingScale) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT() public: RENDERCORE_API FRGB10toYUVv210ConvertPS::FParameters* AllocateAndSetParameters(FRDGBuilder& GraphBuilder, FRDGTextureRef RGBATexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool bDoLinearToSrgb, FRDGTextureRef OutputTexture)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FModifyAlphaSwizzleRgbaPS : public FGlobalShader { public :)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FModifyAlphaSwizzleRgbaPS, RENDERCORE_API)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FModifyAlphaSwizzleRgbaPS, FGlobalShader)"
  },
  {
    "label": "SHADER_PERMUTATION_INT()",
    "kind": "Method",
    "detail": "Function (class FConversionOp :)",
    "insertText": "SHADER_PERMUTATION_INT(\"CONVERSION_OP\", NUM_MEDIA_SHADERS_CONVERSION_OP)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<FConversionOp> ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, InputTexture) SHADER_PARAMETER_SAMPLER(SamplerState, InputSampler) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT() public: RENDERCORE_API FModifyAlphaSwizzleRgbaPS::FParameters* AllocateAndSetParameters(FRDGBuilder& GraphBuilder, FRDGTextureRef RGBATexture, FRDGTextureRef OutputTexture)"
  },
  {
    "label": "DECLARE_EXPORTED_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FVYUConvertPS : public FGlobalShader {)",
    "insertText": "DECLARE_EXPORTED_SHADER_TYPE(FVYUConvertPS, Global, RENDERCORE_API)"
  },
  {
    "label": "FVYUConvertPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FVYUConvertPS()"
  },
  {
    "label": "FVYUConvertPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVYUConvertPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> VYUTexture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  }
]