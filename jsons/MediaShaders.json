[
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaElementVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaElementVertex"
  },
  {
    "label": "FMediaVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaVertexDeclaration"
  },
  {
    "label": "FMediaShadersVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaShadersVS"
  },
  {
    "label": "FAYUVConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAYUVConvertPS"
  },
  {
    "label": "FBMPConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBMPConvertPS"
  },
  {
    "label": "FNV12ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNV12ConvertPS"
  },
  {
    "label": "FNV12ConvertAsBytesPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNV12ConvertAsBytesPS"
  },
  {
    "label": "FNV21ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNV21ConvertPS"
  },
  {
    "label": "FP010ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FP010ConvertPS"
  },
  {
    "label": "FP010ConvertAsUINT16sPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FP010ConvertAsUINT16sPS"
  },
  {
    "label": "FP010_2101010ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FP010_2101010ConvertPS"
  },
  {
    "label": "FRGBConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRGBConvertPS"
  },
  {
    "label": "FYCoCgConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYCoCgConvertPS"
  },
  {
    "label": "FYCbCrConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYCbCrConvertPS"
  },
  {
    "label": "FYCbCrConvertPS_4x4Matrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYCbCrConvertPS_4x4Matrix"
  },
  {
    "label": "FUYVYConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUYVYConvertPS"
  },
  {
    "label": "FYUVConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUVConvertPS"
  },
  {
    "label": "FYUVv216ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUVv216ConvertPS"
  },
  {
    "label": "FYUVv210ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUVv210ConvertPS"
  },
  {
    "label": "FYUVY416ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUVY416ConvertPS"
  },
  {
    "label": "FYUY2ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYUY2ConvertPS"
  },
  {
    "label": "FARGB16BigConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FARGB16BigConvertPS"
  },
  {
    "label": "FYVYUConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FYVYUConvertPS"
  },
  {
    "label": "FRGB8toY8ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRGB8toY8ConvertPS"
  },
  {
    "label": "FReadTextureExternalPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReadTextureExternalPS"
  },
  {
    "label": "FRGB8toUYVY8ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRGB8toUYVY8ConvertPS"
  },
  {
    "label": "FRGB10toYUVv210ConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRGB10toYUVv210ConvertPS"
  },
  {
    "label": "FModifyAlphaSwizzleRgbaPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModifyAlphaSwizzleRgbaPS"
  },
  {
    "label": "FConversionOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConversionOp"
  },
  {
    "label": "FVYUConvertPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVYUConvertPS"
  },
  {
    "label": "CombineColorTransformAndOffset()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "CombineColorTransformAndOffset(const FMatrix& InMatrix, const FVector& InYUVOffset)"
  },
  {
    "label": "FMediaVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "FMediaVertexDeclaration()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> AYUVTexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> BMPTexture, const FIntPoint& OutputDimensions, bool SrgbToLinear)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FIntPoint & TexDim, FShaderResourceViewRHIRef SRV_Y, FShaderResourceViewRHIRef SRV_UV, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bSwapChroma, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> NV12Texture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bSwapChroma, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> NV21Texture, const FIntPoint& OutputDimensions, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FIntPoint& TexDim, FShaderResourceViewRHIRef SRV_Y, FShaderResourceViewRHIRef SRV_UV, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, const FMatrix44f& CSTransform, UE::Color::EEncoding Encoding, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FIntPoint& TexDim, TRefCountPtr<FRHITexture> NV12Texture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, const FMatrix44f& CSTransform, UE::Color::EEncoding Encoding, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, const FIntPoint& TexDim, FShaderResourceViewRHIRef SRV_Y, FShaderResourceViewRHIRef SRV_U, FShaderResourceViewRHIRef SRV_V, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, const FMatrix44f& CSTransform, UE::Color::EEncoding Encoding, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> RGBTexture, const FIntPoint& OutputDimensions, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YCoCgTexture, const FIntPoint& OutputDimensions, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> LumaTexture, TRefCountPtr<FRHITexture> CbCrTexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> UYVYTexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YTexture, TRefCountPtr<FRHITexture> UTexture, TRefCountPtr<FRHITexture> VTexture, const FIntPoint& OutputDimensions, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YUVTexture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bIsCbY0CrY1, bool bIsARGBFmt, bool bSwapChroma, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None, bool bUseBilinearSamplingForChroma = false)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YUVTexture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bIsCbY0CrY1, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FShaderResourceViewRHIRef SRV_Y, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, bool bIsARGBFmt, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YUY2Texture, const FIntPoint& OutputDimensions, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FShaderResourceViewRHIRef SRV, const FIntPoint& OutputDimensions, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> YVYUTexture, const FMatrix& ColorTransform, const FVector& YUVOffset, bool SrgbToLinear)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> RGBATexture, const FVector4f& ColorTransform, bool LinearToSrgb)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, FTextureRHIRef TextureExt, FSamplerStateRHIRef SamplerState, const FLinearColor & ScaleRotation, const FLinearColor & Offset)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FRGB8toUYVY8ConvertPS, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FRGB10toYUVv210ConvertPS, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_EXPORTED_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DECLARE_EXPORTED_GLOBAL_SHADER(FModifyAlphaSwizzleRgbaPS, RENDERCORE_API)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRHIBatchedShaderParameters& BatchedParameters, TRefCountPtr<FRHITexture> VYUTexture, const FIntPoint& OutputDimensions, const FMatrix44f& ColorTransform, UE::Color::EEncoding Encoding, const FMatrix44f& CSTransform, MediaShaders::EToneMapMethod ToneMapMethod = MediaShaders::EToneMapMethod::None)"
  }
]