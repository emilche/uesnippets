[
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPreviewScene"
  },
  {
    "label": "ConstructionValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstructionValues"
  },
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "ULineBatchComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULineBatchComponent"
  },
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "UDirectionalLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDirectionalLightComponent"
  },
  {
    "label": "USkyLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyLightComponent"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "ConstructionValues()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / GCObject . h \" # include \" Engine / World . h \" class FSceneInterface ; class FPreviewScene : public FGCObject { public : struct ConstructionValues {)",
    "insertText": "ConstructionValues() : LightRotation(-40.f,-67.5f,0.f) , SkyBrightness(1.0f) , LightBrightness(UE_PI) , bDefaultLighting(true) , bAllowAudioPlayback(false) , bForceMipsResident(true) , bCreatePhysicsScene(true) , bShouldSimulatePhysics(false) , bTransactional(true) , bEditor(true) , bForceUseMovementComponentInNonGameWorld(false)"
  },
  {
    "label": "SetCreateDefaultLighting()",
    "kind": "Method",
    "detail": "Function (} FRotator LightRotation ; float SkyBrightness ; float LightBrightness ; uint32 bDefaultLighting : 1 ; uint32 bAllowAudioPlayback : 1 ; uint32 bForceMipsResident : 1 ; uint32 bCreatePhysicsScene : 1 ; uint32 bShouldSimulatePhysics : 1 ; uint32 bTransactional : 1 ; uint32 bEditor : 1 ; uint32 bForceUseMovementComponentInNonGameWorld : 1 ; TSubclassOf<class AGameModeBase> DefaultGameMode ; class UGameInstance* OwningGameInstance = nullptr ; ConstructionValues&)",
    "insertText": "SetCreateDefaultLighting(const bool bDefault)"
  },
  {
    "label": "SetLightRotation()",
    "kind": "Method",
    "detail": "Function (bDefaultLighting = bDefault ; return* this ; } ConstructionValues&)",
    "insertText": "SetLightRotation(const FRotator& Rotation)"
  },
  {
    "label": "SetSkyBrightness()",
    "kind": "Method",
    "detail": "Function (LightRotation = Rotation ; return* this ; } ConstructionValues&)",
    "insertText": "SetSkyBrightness(const float Brightness)"
  },
  {
    "label": "SetLightBrightness()",
    "kind": "Method",
    "detail": "Function (SkyBrightness = Brightness ; return* this ; } ConstructionValues&)",
    "insertText": "SetLightBrightness(const float Brightness)"
  },
  {
    "label": "AllowAudioPlayback()",
    "kind": "Method",
    "detail": "Function (LightBrightness = Brightness ; return* this ; } ConstructionValues&)",
    "insertText": "AllowAudioPlayback(const bool bAllow)"
  },
  {
    "label": "SetForceMipsResident()",
    "kind": "Method",
    "detail": "Function (bAllowAudioPlayback = bAllow ; return* this ; } ConstructionValues&)",
    "insertText": "SetForceMipsResident(const bool bForce)"
  },
  {
    "label": "SetCreatePhysicsScene()",
    "kind": "Method",
    "detail": "Function (bForceMipsResident = bForce ; return* this ; } ConstructionValues&)",
    "insertText": "SetCreatePhysicsScene(const bool bCreate)"
  },
  {
    "label": "ShouldSimulatePhysics()",
    "kind": "Method",
    "detail": "Function (bCreatePhysicsScene = bCreate ; return* this ; } ConstructionValues&)",
    "insertText": "ShouldSimulatePhysics(const bool bInShouldSimulatePhysics)"
  },
  {
    "label": "SetTransactional()",
    "kind": "Method",
    "detail": "Function (bShouldSimulatePhysics = bInShouldSimulatePhysics ; return* this ; } ConstructionValues&)",
    "insertText": "SetTransactional(const bool bInTransactional)"
  },
  {
    "label": "SetEditor()",
    "kind": "Method",
    "detail": "Function (bTransactional = bInTransactional ; return* this ; } ConstructionValues&)",
    "insertText": "SetEditor(const bool bInEditor)"
  },
  {
    "label": "ForceUseMovementComponentInNonGameWorld()",
    "kind": "Method",
    "detail": "Function (bEditor = bInEditor ; return* this ; } ConstructionValues&)",
    "insertText": "ForceUseMovementComponentInNonGameWorld(const bool bInForceUseMovementComponentInNonGameWorld)"
  },
  {
    "label": "SetDefaultGameMode()",
    "kind": "Method",
    "detail": "Function (bForceUseMovementComponentInNonGameWorld = bInForceUseMovementComponentInNonGameWorld ; return* this ; } ConstructionValues&)",
    "insertText": "SetDefaultGameMode(TSubclassOf<class AGameModeBase> GameMode)"
  },
  {
    "label": "SetOwningGameInstance()",
    "kind": "Method",
    "detail": "Function (DefaultGameMode = GameMode ; return* this ; } ConstructionValues&)",
    "insertText": "SetOwningGameInstance(class UGameInstance* InGameInstance)"
  },
  {
    "label": "FPreviewScene()",
    "kind": "Method",
    "detail": "Function (OwningGameInstance = InGameInstance ; return* this ; } } ;)",
    "insertText": "FPreviewScene(ConstructionValues CVS = ConstructionValues())"
  },
  {
    "label": "FPreviewScene()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPreviewScene()"
  },
  {
    "label": "AddComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComponent(class UActorComponent* Component,const FTransform& LocalToWorld, bool bAttachToRoot=false)"
  },
  {
    "label": "RemoveComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveComponent(class UActorComponent* Component)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "UpdateCaptureContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCaptureContents()"
  },
  {
    "label": "GetLightDirection()",
    "kind": "Method",
    "detail": "Function (FRotator)",
    "insertText": "GetLightDirection()"
  },
  {
    "label": "SetLightDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightDirection(const FRotator& InLightDir)"
  },
  {
    "label": "SetLightBrightness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightBrightness(float LightBrightness)"
  },
  {
    "label": "SetLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightColor(const FColor& LightColor)"
  },
  {
    "label": "SetSkyBrightness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkyBrightness(float SkyBrightness)"
  },
  {
    "label": "SetSkyCubemap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkyCubemap(class UTextureCube* Cubemap)"
  },
  {
    "label": "GetBackgroundColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetBackgroundColor()"
  },
  {
    "label": "LoadSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSettings(const TCHAR* Section)"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings(const TCHAR* Section)"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (class UDirectionalLightComponent* DirectionalLight = nullptr ; ; class USkyLightComponent* SkyLight = nullptr ; ; private : void)",
    "insertText": "Uninitialize()"
  }
]