[
  {
    "label": "FRBFInterpolatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRBFInterpolatorBase"
  },
  {
    "label": "TRBFInterpolator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRBFInterpolator"
  },
  {
    "label": "Euclidean()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Math / Quat . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Misc / MemStack . h \" # include \" Templates / Function . h \" # include \" Templates / Tuple . h \" namespace RBFDistanceMetric { double)",
    "insertText": "Euclidean(const FVector& A, const FVector& B)"
  },
  {
    "label": "Manhattan()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Manhattan(const FVector& A, const FVector& B)"
  },
  {
    "label": "AbsDiff()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "AbsDiff(A - B).GetAbs()"
  },
  {
    "label": "Euclidean()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Euclidean(const FRotator& A, const FRotator& B)"
  },
  {
    "label": "ArcLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ArcLength(const FRotator& A, const FRotator& B)"
  },
  {
    "label": "Euclidean()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Euclidean(const FQuat& A, const FQuat& B)"
  },
  {
    "label": "ArcLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ArcLength(const FQuat& A, const FQuat& B)"
  },
  {
    "label": "SwingAngle()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "SwingAngle(const FQuat& A, const FQuat& B, const FVector& TwistAxis)"
  },
  {
    "label": "ToSwingTwist()",
    "kind": "Method",
    "detail": "Function (FQuat ASwing,BSwing,DummyTwist ; A .)",
    "insertText": "ToSwingTwist(TwistAxis, ASwing, DummyTwist)"
  },
  {
    "label": "ToSwingTwist()",
    "kind": "Method",
    "detail": "Function (B .)",
    "insertText": "ToSwingTwist(TwistAxis, BSwing, DummyTwist)"
  },
  {
    "label": "TwistAngle()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "TwistAngle(const FQuat& A, const FQuat& B, const FVector& TwistAxis)"
  },
  {
    "label": "Linear()",
    "kind": "Method",
    "detail": "Function (} } namespace RBFKernel { float)",
    "insertText": "Linear(float Value, float Sigma)"
  },
  {
    "label": "Gaussian()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Gaussian(float Value, float Sigma)"
  },
  {
    "label": "Exponential()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Exponential(float Value, float Sigma)"
  },
  {
    "label": "Cubic()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Cubic(float Value, float Sigma)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Value / = Sigma ; return)",
    "insertText": "Max(1.f - (Value * Value * Value), 0.f)"
  },
  {
    "label": "Quintic()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Quintic(float Value, float Sigma)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Value / = Sigma ; return)",
    "insertText": "Max(1.f - FMath::Pow(Value, 5.0f), 0.f)"
  },
  {
    "label": "SetUpperKernel()",
    "kind": "Method",
    "detail": "Function (} } class FRBFInterpolatorBase { protected : bool)",
    "insertText": "SetUpperKernel(const TArrayView<float>& UpperKernel, int32 Size)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (public : TArray<float> Coeffs ; bool bIsValid = false ; } ; template<T> class TRBFInterpolator : public FRBFInterpolatorBase { public : using WeightFuncT = TFunction<)",
    "insertText": "float(const T& A, const T& B)"
  },
  {
    "label": "TRBFInterpolator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRBFInterpolator()"
  },
  {
    "label": "TRBFInterpolator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRBFInterpolator(const TArrayView<T>& InNodes, WeightFuncT InWeightFunc) : Nodes(InNodes) , WeightFunc(InWeightFunc)"
  },
  {
    "label": "MakeUpperKernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUpperKernel()"
  },
  {
    "label": "TRBFInterpolator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRBFInterpolator(const TRBFInterpolator<T>&)"
  },
  {
    "label": "TRBFInterpolator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRBFInterpolator(TRBFInterpolator<T>&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TRBFInterpolator<T>&)",
    "insertText": "operator(const TRBFInterpolator<T>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TRBFInterpolator<T>&)",
    "insertText": "operator(TRBFInterpolator<T>&&)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (template<U,InAllocator> void)",
    "insertText": "Interpolate(TArray<float, InAllocator>& OutWeights, const U& Value, bool bClip = true, bool bNormalize = false)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int NumNodes = Nodes .)",
    "insertText": "Num()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (OutWeights .)",
    "insertText": "Init(0.0f, NumNodes)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<float,TMemStackAllocator<>> ValueWeights ; ValueWeights .)",
    "insertText": "SetNum(Nodes.Num())"
  },
  {
    "label": "WeightFunc()",
    "kind": "Method",
    "detail": "Function (ValueWeights [ i ] =)",
    "insertText": "WeightFunc(Value, Nodes[i])"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} OutWeights .)",
    "insertText": "Reset(NumNodes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const float* C =& Coeffs [ i* NumNodes ] ; float W = 0 . 0 f ;)",
    "insertText": "for(int32 j = 0; j < NumNodes; j++)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (W + = C [ j ]* ValueWeights [ j ] ; } OutWeights .)",
    "insertText": "Add(W)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bNormalize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float MaxNegative = 0 . 0 f ;)",
    "insertText": "for(int32 i = 0; i < NumNodes; i++)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (OutWeights [ i ] =)",
    "insertText": "Clamp(OutWeights[i] / TotalWeight, 0.0f, 1.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(bClip)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (OutWeights [ i ] =)",
    "insertText": "Clamp(OutWeights[i], 0.0f, 1.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(NumNodes == 1)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutWeights .)",
    "insertText": "Reset(1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutWeights .)",
    "insertText": "Add(1)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { OutWeights .)",
    "insertText": "Reset(0)"
  },
  {
    "label": "GetIdenticalNodePairs()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetIdenticalNodePairs(const TArrayView<T>& InNodes, WeightFuncT InWeightFunc, TArray<TTuple<int, int>>& OutInvalidPairs)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutInvalidPairs .)",
    "insertText": "Empty()"
  },
  {
    "label": "InWeightFunc()",
    "kind": "Method",
    "detail": "Function (float Weight =)",
    "insertText": "InWeightFunc(InNodes[i], InNodes[j])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutInvalidPairs .)",
    "insertText": "Add(MakeTuple(i, j))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (bIsValid = true ; return ; } TArray<float,TMemStackAllocator<>> UpperKernel ; UpperKernel .)",
    "insertText": "Reserve(NumNodes * (NumNodes - 1) / 2)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UpperKernel .)",
    "insertText": "Add(WeightFunc(Nodes[i], Nodes[j]))"
  },
  {
    "label": "SetUpperKernel()",
    "kind": "Method",
    "detail": "Function (} } bIsValid =)",
    "insertText": "SetUpperKernel(UpperKernel, NumNodes)"
  }
]