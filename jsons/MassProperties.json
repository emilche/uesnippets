[
  {
    "label": "FTriangleMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleMesh"
  },
  {
    "label": "FPerShapeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerShapeData"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FImplicitObjectUnion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObjectUnion"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticles"
  },
  {
    "label": "FMassProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassProperties"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FMassProperties()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Defines . h \" # include \" Chaos / Matrix . h \" # include \" Chaos / Rotation . h \" # include \" Chaos / Vector . h \" # include \" Containers / ArrayView . h \" # if ! COMPILE_WITHOUT_UNREAL_SUPPORT namespace Chaos { class FTriangleMesh ; class FPerShapeData ; class FImplicitObject ; class FImplicitObjectUnion ; template<class T,int d> class TParticles ; using FParticles = TParticles<FReal,3> ; struct FMassProperties {)",
    "insertText": "FMassProperties() : Mass(0) , Volume(0) , CenterOfMass(0) , RotationOfMass(FRotation3::FromElements(FVec3(0), 1)) , InertiaTensor(0)"
  },
  {
    "label": "TransformToLocalSpace()",
    "kind": "Method",
    "detail": "Function (} FReal Mass ; FReal Volume ; FVec3 CenterOfMass ; FRotation3 RotationOfMass ; FMatrix33 InertiaTensor ; } ; template<T> TRotation<T,3>)",
    "insertText": "TransformToLocalSpace(PMatrix<T,3,3>& Inertia)"
  },
  {
    "label": "TransformToLocalSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformToLocalSpace(FMassProperties& MassProperties)"
  },
  {
    "label": "CalculateVolumeAndCenterOfMass()",
    "kind": "Method",
    "detail": "Function (template<T,TSurfaces> void)",
    "insertText": "CalculateVolumeAndCenterOfMass(const TParticles<T,3>& Vertices, const TSurfaces& Surfaces, T& OutVolume, TVec3<T>& OutCenterOfMass)"
  },
  {
    "label": "CalculateVolumeAndCenterOfMass()",
    "kind": "Method",
    "detail": "Function (template<T,TSurfaces> void)",
    "insertText": "CalculateVolumeAndCenterOfMass(const TArray<TVec3<T>>& Vertices, const TSurfaces& Surfaces, T& OutVolume, TVec3<T>& OutCenterOfMass)"
  },
  {
    "label": "CalculateVolumeAndCenterOfMass()",
    "kind": "Method",
    "detail": "Function (template<T,TSurfaces> void)",
    "insertText": "CalculateVolumeAndCenterOfMass(const TArray<UE::Math::TVector<T>>& Vertices, const TSurfaces& Surfaces, T& OutVolume, UE::Math::TVector<T>& OutCenterOfMass)"
  },
  {
    "label": "CalculateMassProperties()",
    "kind": "Method",
    "detail": "Function (template<TSurfaces> FMassProperties)",
    "insertText": "CalculateMassProperties(const FParticles& Vertices, const TSurfaces& Surfaces, const FReal Mass)"
  },
  {
    "label": "CalculateInertiaAndRotationOfMass()",
    "kind": "Method",
    "detail": "Function (template<T,TSurfaces> void)",
    "insertText": "CalculateInertiaAndRotationOfMass(const TParticles<T,3>& Vertices, const TSurfaces& Surfaces, const T Density, const TVec3<T>& CenterOfMass, PMatrix<T,3,3>& OutInertiaTensor, TRotation<T, 3>& OutRotationOfMass)"
  },
  {
    "label": "CalculateInertiaAndRotationOfMass()",
    "kind": "Method",
    "detail": "Function (template<T,TSurfaces> void)",
    "insertText": "CalculateInertiaAndRotationOfMass(const TArray<UE::Math::TVector<T>>& Vertices, const TSurfaces& Surfaces, const T Density, const UE::Math::TVector<T>& CenterOfMass, PMatrix<T,3,3>& OutInertiaTensor, TRotation<T, 3>& OutRotationOfMass)"
  },
  {
    "label": "CalculateVolumeAndCenterOfMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateVolumeAndCenterOfMass(const FBox& BoundingBox, FVector::FReal& OutVolume, FVector& OutCenterOfMass)"
  },
  {
    "label": "CalculateInertiaAndRotationOfMass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateInertiaAndRotationOfMass(const FBox& BoundingBox, const FVector::FReal Density, FMatrix33& OutInertiaTensor, FRotation3& OutRotationOfMass)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (FMassProperties)",
    "insertText": "Combine(const TArray<FMassProperties>& MPArray)"
  },
  {
    "label": "CombineWorldSpace()",
    "kind": "Method",
    "detail": "Function (FMassProperties)",
    "insertText": "CombineWorldSpace(const TArray<FMassProperties>& MPArray)"
  },
  {
    "label": "CalculateMassPropertiesOfImplicitUnion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateMassPropertiesOfImplicitUnion(Chaos::FMassProperties& OutMassProperties, const Chaos::FRigidTransform3& WorldTransform, const Chaos::FImplicitObjectUnion& ImplicitUnion, Chaos::FReal InDensityKGPerCM)"
  },
  {
    "label": "CalculateMassPropertiesOfImplicitType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateMassPropertiesOfImplicitType(FMassProperties& OutMassProperties, const FRigidTransform3& WorldTransform, const FImplicitObject* ImplicitObject, Chaos::FReal InDensityKGPerCM)"
  },
  {
    "label": "CalculateMassPropertiesFromShapeCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateMassPropertiesFromShapeCollection(FMassProperties& OutProperties, int32 InNumShapes, FReal InDensityKGPerCM, const TArray<bool>& bContributesToMass, TFunction<FPerShapeData* (int32 ShapeIndex)> GetShapeDelegate)"
  },
  {
    "label": "KgCm3ToKgM3()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "KgCm3ToKgM3(T Density)"
  },
  {
    "label": "KgM3ToKgCm3()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "KgM3ToKgCm3(T Density)"
  },
  {
    "label": "GCm3ToKgCm3()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "GCm3ToKgCm3(T Density)"
  },
  {
    "label": "KgCm3ToGCm3()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "KgCm3ToGCm3(T Density)"
  }
]