[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSpawnTabArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpawnTabArgs"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IDiffControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDiffControl"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SDetailsSplitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDetailsSplitter"
  },
  {
    "label": "FDetailsDiffControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailsDiffControl"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRevisionInfo"
  },
  {
    "label": "FDiffResultItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffResultItem"
  },
  {
    "label": "FDiffControl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffControl"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AsyncDetailViewDiff . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_5 # include \" CoreMinimal . h \" # endif # include \" DiffUtils . h \" # include \" IAssetTypeActions . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / SCompoundWidget . h \" enum class ETreeDiffResult ; class FSpawnTabArgs ; class FTabManager ; class IDiffControl ; class FUICommandList ; class SDetailsSplitter ; class FDetailsDiffControl ; enum class EAssetEditorCloseReason : uint8 ; struct FDetailsDiffPanel { const UObject* Object = nullptr ; FRevisionInfo RevisionInfo ; bool bShowAssetName = true ; TSharedPtr<SWidget> OverlayRevisionInfo ; private : TSharedPtr<FUICommandList> GraphEditorCommands ; } ; class SDetailsDiff : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnCustomizeDetailsWidget, const TSharedRef<IDetailsView>&) DECLARE_DELEGATE_RetVal_OneParam(FLinearColor, FRowHighlightColor, const TUniquePtr<FAsyncDetailViewDiff::DiffNodeType>&) DECLARE_DELEGATE_RetVal_OneParam(bool, FShouldHighlightRow, const TUniquePtr<FAsyncDetailViewDiff::DiffNodeType>&) SLATE_BEGIN_ARGS(SDetailsDiff)"
  },
  {
    "label": "SLATE_ARGUMENT_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT_DEPRECATED(const class UObject*, AssetOld, 5.5, \"Use OldAsset instead\") SLATE_ARGUMENT_DEPRECATED(const class UObject*, AssetNew, 5.5, \"Use NewAsset instead\") SLATE_ARGUMENT(const class UObject*, OldAsset) SLATE_ARGUMENT(const class UObject*, NewAsset) SLATE_ARGUMENT(struct FRevisionInfo, OldRevision) SLATE_ARGUMENT(struct FRevisionInfo, NewRevision) SLATE_ARGUMENT(bool, ShowAssetNames) SLATE_ARGUMENT(TSharedPtr<SWindow>, ParentWindow) SLATE_ARGUMENT(TSharedPtr<IDetailPropertyExtensionHandler>, ExtensionHandler) SLATE_EVENT(FOnCustomizeDetailsWidget, OnCustomizeDetailsWidget) SLATE_EVENT(DiffUtils::FOnGenerateCustomDiffEntries, OnGenerateCustomDiffEntries) SLATE_EVENT(DiffUtils::FOnGenerateCustomDiffEntryWidget, OnGenerateCustomDiffEntryWidget) SLATE_EVENT(DiffUtils::FOnOrganizeDiffEntries, OnOrganizeDiffEntries) SLATE_EVENT(FShouldHighlightRow, ShouldHighlightRow) SLATE_EVENT(FRowHighlightColor, RowHighlightColor) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SDetailsDiff()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SDetailsDiff()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnDiffListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDiffListSelectionChanged(TSharedPtr<struct FDiffResultItem> TheDiff)"
  },
  {
    "label": "DefaultEmptyPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "DefaultEmptyPanel()"
  },
  {
    "label": "CreateDiffWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDetailsDiff>)",
    "insertText": "CreateDiffWindow(FText WindowTitle, const UObject* OldObject, const UObject* NewObject, const struct FRevisionInfo& OldRevision, const struct FRevisionInfo& NewRevision)"
  },
  {
    "label": "CreateDiffWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDetailsDiff>)",
    "insertText": "CreateDiffWindow(const UObject* OldObject, const UObject* NewObject, const FRevisionInfo& OldRevision, const FRevisionInfo& NewRevision, const UClass* ObjectClass)"
  },
  {
    "label": "SetOutputObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputObject(UObject* OutputObject)"
  },
  {
    "label": "GetOutputObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetOutputObject()"
  },
  {
    "label": "IsOutputEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutputEnabled()"
  },
  {
    "label": "ReportMergeConflicts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMergeConflicts(const TMap<FString, TMap<FPropertySoftPath, ETreeDiffResult>>& Conflicts)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWindowClosedEvent, TSharedRef<SDetailsDiff>)"
  },
  {
    "label": "NextDiff()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "NextDiff()"
  },
  {
    "label": "PrevDiff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrevDiff()"
  },
  {
    "label": "HasNextDiff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNextDiff()"
  },
  {
    "label": "HasPrevDiff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrevDiff()"
  },
  {
    "label": "GenerateDifferencesList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateDifferencesList()"
  },
  {
    "label": "OnCloseAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCloseAssetEditor(UObject* Asset, EAssetEditorCloseReason CloseReason)"
  },
  {
    "label": "OnObjectReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectReplaced(const FCoreUObjectDelegates::FReplacementObjectMap& Replacements)"
  },
  {
    "label": "FDiffControl()",
    "kind": "Method",
    "detail": "Function (struct FDiffControl {)",
    "insertText": "FDiffControl() : Widget() , DiffControl(nullptr)"
  },
  {
    "label": "GenerateDetailsPanel()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget> Widget ; TSharedPtr<class IDiffControl> DiffControl ; } ; FDiffControl)",
    "insertText": "GenerateDetailsPanel(const TFunction<const UObject*(const UObject*)>& Redirector = nullptr)"
  },
  {
    "label": "GenerateRevisionInfoWidgetForPanel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SBox>)",
    "insertText": "GenerateRevisionInfoWidgetForPanel(TSharedPtr<SWidget>& OutGeneratedWidget,const FText& InRevisionText)"
  },
  {
    "label": "SetCurrentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentMode(FName NewMode)"
  },
  {
    "label": "RefreshCurrentModePanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshCurrentModePanel()"
  },
  {
    "label": "GetCurrentMode()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCurrentMode()"
  },
  {
    "label": "UpdateTopSectionVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTopSectionVisibility(const FName& InNewViewMode)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FName CurrentMode ; FDetailsDiffPanel PanelOld ; FDetailsDiffPanel PanelNew ; UObject* OutputObject = nullptr ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSetOutputObjectEvent)"
  }
]