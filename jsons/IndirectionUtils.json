[
  {
    "label": "JITCompileCallbackManagerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JITCompileCallbackManagerBase"
  },
  {
    "label": "CompileCallbackInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompileCallbackInfo"
  },
  {
    "label": "JITCompileCallbackManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JITCompileCallbackManager"
  },
  {
    "label": "TargetAddress()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_INDIRECTIONUTILS_H # define LLVM_EXECUTIONENGINE_ORC_INDIRECTIONUTILS_H # include \" JITSymbol . h \" # include \" LambdaResolver . h \" # include \" llvm / ADT / DenseSet . h \" # include \" llvm / ExecutionEngine / RuntimeDyld . h \" # include \" llvm / IR / IRBuilder . h \" # include \" llvm / IR / Mangler . h \" # include \" llvm / IR / Module . h \" # include \" llvm / Transforms / Utils / ValueMapper . h \" # include<sstream> namespace llvm { namespace orc { class JITCompileCallbackManagerBase { public : typedef std::function<)",
    "insertText": "TargetAddress()"
  },
  {
    "label": "CompileCallbackInfo()",
    "kind": "Method",
    "detail": "Function (class CompileCallbackInfo { public :)",
    "insertText": "CompileCallbackInfo(TargetAddress Addr, CompileFtor &Compile) : Addr(Addr), Compile(Compile)"
  },
  {
    "label": "getAddress()",
    "kind": "Method",
    "detail": "Function (} TargetAddress)",
    "insertText": "getAddress()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (this -> Compile =)",
    "insertText": "move(Compile)"
  },
  {
    "label": "JITCompileCallbackManagerBase()",
    "kind": "Method",
    "detail": "Function (} private : TargetAddress Addr ; CompileFtor& Compile ; } ;)",
    "insertText": "JITCompileCallbackManagerBase(TargetAddress ErrorHandlerAddress, unsigned NumTrampolinesPerBlock) : ErrorHandlerAddress(ErrorHandlerAddress), NumTrampolinesPerBlock(NumTrampolinesPerBlock)"
  },
  {
    "label": "JITCompileCallbackManagerBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "JITCompileCallbackManagerBase()"
  },
  {
    "label": "executeCompileCallback()",
    "kind": "Method",
    "detail": "Function (} TargetAddress)",
    "insertText": "executeCompileCallback(TargetAddress TrampolineAddr)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto I = ActiveTrampolines .)",
    "insertText": "find(TrampolineAddr)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (auto Compile =)",
    "insertText": "move(I->second)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (ActiveTrampolines .)",
    "insertText": "erase(I)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (AvailableTrampolines .)",
    "insertText": "push_back(TrampolineAddr)"
  },
  {
    "label": "getCompileCallbackInfo()",
    "kind": "Method",
    "detail": "Function (CompileCallbackInfo)",
    "insertText": "getCompileCallbackInfo(TargetAddress TrampolineAddr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != ActiveTrampolines.end() && \"Not an active trampoline.\")"
  },
  {
    "label": "releaseCompileCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "releaseCompileCallback(TargetAddress TrampolineAddr)"
  },
  {
    "label": "JITCompileCallbackManager()",
    "kind": "Method",
    "detail": "Function (} protected : TargetAddress ErrorHandlerAddress ; unsigned NumTrampolinesPerBlock ; typedef std::map<TargetAddress,CompileFtor> TrampolineMapT ; TrampolineMapT ActiveTrampolines ; std::vector<TargetAddress> AvailableTrampolines ; } ; template<JITLayerT,TargetT> class JITCompileCallbackManager : public JITCompileCallbackManagerBase { public :)",
    "insertText": "JITCompileCallbackManager(JITLayerT &JIT, RuntimeDyld::MemoryManager &MemMgr, LLVMContext &Context, TargetAddress ErrorHandlerAddress, unsigned NumTrampolinesPerBlock) : JITCompileCallbackManagerBase(ErrorHandlerAddress, NumTrampolinesPerBlock), JIT(JIT), MemMgr(MemMgr)"
  },
  {
    "label": "emitResolverBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitResolverBlock(Context)"
  },
  {
    "label": "getCompileCallback()",
    "kind": "Method",
    "detail": "Function (} CompileCallbackInfo)",
    "insertText": "getCompileCallback(LLVMContext &Context)"
  },
  {
    "label": "getAvailableTrampolineAddr()",
    "kind": "Method",
    "detail": "Function (TargetAddress TrampolineAddr =)",
    "insertText": "getAvailableTrampolineAddr(Context)"
  },
  {
    "label": "CompileCallbackInfo()",
    "kind": "Method",
    "detail": "Function (auto& Compile = this -> ActiveTrampolines [ TrampolineAddr ] ; return)",
    "insertText": "CompileCallbackInfo(TrampolineAddr, Compile)"
  },
  {
    "label": "SingletonSet()",
    "kind": "Method",
    "detail": "Function (} private : std::vector<std::unique_ptr<Module>>)",
    "insertText": "SingletonSet(std::unique_ptr<Module> M)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<Module>> Ms ; Ms .)",
    "insertText": "push_back(std::move(M))"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Module>)",
    "insertText": "M(new Module(\"resolver_block_module\", Context))"
  },
  {
    "label": "insertResolverBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertResolverBlock(*M, *this)"
  },
  {
    "label": "createLambdaResolver()",
    "kind": "Method",
    "detail": "Function (auto NonResolver =)",
    "insertText": "createLambdaResolver([](const std::string &Name) -> RuntimeDyld::SymbolInfo { llvm_unreachable(\"External symbols in resolver block?\"); }, [](const std::string &Name) -> RuntimeDyld::SymbolInfo { llvm_unreachable(\"Dylib symbols in resolver block?\"); })"
  },
  {
    "label": "addModuleSet()",
    "kind": "Method",
    "detail": "Function (auto H = JIT .)",
    "insertText": "addModuleSet(SingletonSet(std::move(M)), &MemMgr, std::move(NonResolver))"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (JIT .)",
    "insertText": "emitAndFinalize(H)"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (auto ResolverBlockSymbol = JIT .)",
    "insertText": "findSymbolIn(H, TargetT::ResolverBlockName, false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ResolverBlockSymbol && \"Failed to insert resolver block\")"
  },
  {
    "label": "getAvailableTrampolineAddr()",
    "kind": "Method",
    "detail": "Function (} TargetAddress)",
    "insertText": "getAvailableTrampolineAddr(LLVMContext &Context)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!this->AvailableTrampolines.empty() && \"Failed to grow available trampolines.\")"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (TargetAddress TrampolineAddr = this -> AvailableTrampolines .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (this -> AvailableTrampolines .)",
    "insertText": "pop_back()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->AvailableTrampolines.empty() && \"Growing prematurely?\")"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Module>)",
    "insertText": "M(new Module(\"trampoline_block\", Context))"
  },
  {
    "label": "insertCompileCallbackTrampolines()",
    "kind": "Method",
    "detail": "Function (auto GetLabelName =)",
    "insertText": "insertCompileCallbackTrampolines(*M, ResolverBlockAddr, this->NumTrampolinesPerBlock, this->ActiveTrampolines.size())"
  },
  {
    "label": "createLambdaResolver()",
    "kind": "Method",
    "detail": "Function (auto NonResolver =)",
    "insertText": "createLambdaResolver([](const std::string &Name) -> RuntimeDyld::SymbolInfo { llvm_unreachable(\"External symbols in trampoline block?\"); }, [](const std::string &Name) -> RuntimeDyld::SymbolInfo { llvm_unreachable(\"Dylib symbols in trampoline block?\"); })"
  },
  {
    "label": "GetLabelName()",
    "kind": "Method",
    "detail": "Function (std::string Name =)",
    "insertText": "GetLabelName(I)"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (auto TrampolineSymbol = JIT .)",
    "insertText": "findSymbolIn(H, Name, false)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(TrampolineSymbol && \"Failed to emit trampoline.\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (this -> AvailableTrampolines .)",
    "insertText": "push_back(TrampolineSymbol.getAddress())"
  },
  {
    "label": "createIRTypedAddress()",
    "kind": "Method",
    "detail": "Function (} } JITLayerT& JIT ; RuntimeDyld::MemoryManager& MemMgr ; TargetAddress ResolverBlockAddr ; } ; Constant*)",
    "insertText": "createIRTypedAddress(FunctionType &FT, TargetAddress Addr)"
  },
  {
    "label": "createImplPointer()",
    "kind": "Method",
    "detail": "Function (GlobalVariable*)",
    "insertText": "createImplPointer(PointerType &PT, Module &M, const Twine &Name, Constant *Initializer)"
  },
  {
    "label": "makeStub()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeStub(Function &F, GlobalVariable &ImplPointer)"
  },
  {
    "label": "makeAllSymbolsExternallyAccessible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeAllSymbolsExternallyAccessible(Module &M)"
  },
  {
    "label": "cloneFunctionDecl()",
    "kind": "Method",
    "detail": "Function (Function*)",
    "insertText": "cloneFunctionDecl(Module &Dst, const Function &F, ValueToValueMapTy *VMap = nullptr)"
  },
  {
    "label": "moveFunctionBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveFunctionBody(Function &OrigF, ValueToValueMapTy &VMap, ValueMaterializer *Materializer = nullptr, Function *NewF = nullptr)"
  },
  {
    "label": "cloneGlobalVariableDecl()",
    "kind": "Method",
    "detail": "Function (GlobalVariable*)",
    "insertText": "cloneGlobalVariableDecl(Module &Dst, const GlobalVariable &GV, ValueToValueMapTy *VMap = nullptr)"
  },
  {
    "label": "moveGlobalVariableInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveGlobalVariableInitializer(GlobalVariable &OrigGV, ValueToValueMapTy &VMap, ValueMaterializer *Materializer = nullptr, GlobalVariable *NewGV = nullptr)"
  }
]