[
  {
    "label": "GraphT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphT"
  },
  {
    "label": "FuncT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuncT"
  },
  {
    "label": "NodeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeT"
  },
  {
    "label": "DFSPass()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_GENERICDOMTREECONSTRUCTION_H # define LLVM_SUPPORT_GENERICDOMTREECONSTRUCTION_H # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / Support / GenericDomTree . h \" namespace llvm { template<class GraphT> unsigned)",
    "insertText": "DFSPass(DominatorTreeBase<typename GraphT::NodeType>& DT, typename GraphT::NodeType* V, unsigned N)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (# if 0 InfoRec& VInfo = DT . Info [ DT . Roots [ i ] ] ; VInfo . DFSNum = VInfo . Semi = + + N ; VInfo . Label = V ; Vertex .)",
    "insertText": "push_back(V)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InfoRec& SuccVInfo = DT . Info [* SI ] ;)",
    "insertText": "if(SuccVInfo.Semi == 0)"
  },
  {
    "label": "DTDFSPass()",
    "kind": "Method",
    "detail": "Function (SuccVInfo . Parent = V ; N =)",
    "insertText": "DTDFSPass(DT, *SI, N)"
  },
  {
    "label": "IsChildOfArtificialExit()",
    "kind": "Method",
    "detail": "Function (} } # else bool)",
    "insertText": "IsChildOfArtificialExit(N != 0)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SmallVector<std::pair<GraphT::NodeType*,GraphT::ChildIteratorType>,3 2> Worklist ; Worklist .)",
    "insertText": "push_back(std::make_pair(V, GraphT::child_begin(V)))"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* BB = Worklist .)",
    "insertText": "back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DominatorTreeBase<GraphT::NodeType>::InfoRec& BBInfo = DT . Info [ BB ] ;)",
    "insertText": "if(NextSucc == GraphT::child_begin(BB))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (BBInfo . DFSNum = BBInfo . Semi = + + N ; BBInfo . Label = BB ; DT . Vertex .)",
    "insertText": "push_back(BB)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IsChildOfArtificialExit = false ; } unsigned BBDFSNum = BBInfo . DFSNum ;)",
    "insertText": "if(NextSucc == GraphT::child_end(BB))"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (Worklist .)",
    "insertText": "pop_back()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (SuccVInfo . Parent = BBDFSNum ; Worklist .)",
    "insertText": "push_back(std::make_pair(Succ, GraphT::child_begin(Succ)))"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (} } # endif return N ; } template<class GraphT> GraphT::NodeType*)",
    "insertText": "Eval(DominatorTreeBase<typename GraphT::NodeType>& DT, typename GraphT::NodeType *VIn, unsigned LastLinked)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DominatorTreeBase<GraphT::NodeType>::InfoRec& VInInfo = DT . Info [ VIn ] ;)",
    "insertText": "if(VInInfo.DFSNum < LastLinked)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SmallVector<GraphT::NodeType*,3 2> Work ; SmallPtrSet<GraphT::NodeType*,3 2> Visited ;)",
    "insertText": "if(VInInfo.Parent >= LastLinked) Work.push_back(VIn)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DominatorTreeBase<GraphT::NodeType>::InfoRec& VInfo = DT . Info [ V ] ; GraphT::NodeType* VAncestor = DT . Vertex [ VInfo . Parent ] ;)",
    "insertText": "if(Visited.insert(VAncestor).second && VInfo.Parent >= LastLinked)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Work .)",
    "insertText": "push_back(VAncestor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DominatorTreeBase<GraphT::NodeType>::InfoRec& VAInfo = DT . Info [ VAncestor ] ; GraphT::NodeType* VAncestorLabel = VAInfo . Label ; GraphT::NodeType* VLabel = VInfo . Label ;)",
    "insertText": "if(DT.Info[VAncestorLabel].Semi < DT.Info[VLabel].Semi)"
  },
  {
    "label": "Calculate()",
    "kind": "Method",
    "detail": "Function (VInfo . Parent = VAInfo . Parent ; } return VInInfo . Label ; } template<class FuncT,class NodeT> void)",
    "insertText": "Calculate(DominatorTreeBase<typename GraphTraits<NodeT>::NodeType>& DT, FuncT& F)"
  },
  {
    "label": "MultipleRoots()",
    "kind": "Method",
    "detail": "Function (typedef GraphTraits<NodeT> GraphT ; unsigned N = 0 ; bool)",
    "insertText": "MultipleRoots(DT.Roots.size() > 1)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (DominatorTreeBase<GraphT::NodeType>::InfoRec& BBInfo = DT . Info [ nullptr ] ; BBInfo . DFSNum = BBInfo . Semi = + + N ; BBInfo . Label = nullptr ; DT . Vertex .)",
    "insertText": "push_back(nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(unsigned i = 0, e = static_cast<unsigned>(DT.Roots.size()); i != e; ++i) N = DFSPass<GraphT>(DT, DT.Roots[i], N)"
  },
  {
    "label": "MultipleRoots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultipleRoots(DT.isPostDominator() && N != GraphTraits<FuncT*>::size(&F))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (SmallVector<unsigned,3 2> Buckets ; Buckets .)",
    "insertText": "resize(N + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* W = DT . Vertex [ i ] ; DominatorTreeBase<GraphT::NodeType>::InfoRec& WInfo = DT . Info [ W ] ;)",
    "insertText": "for(unsigned j = i; Buckets[j] != i; j = Buckets[j])"
  },
  {
    "label": "GraphT()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* V = DT . Vertex [ Buckets [ j ] ] ; GraphT::NodeType* U = Eval<)",
    "insertText": "GraphT(DT, V, i + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DT . IDoms [ V ] = DT . Info [ U ] . Semi<i ? U : W ; } WInfo . Semi = WInfo . Parent ; typedef GraphTraits<Inverse<NodeT>> InvTraits ;)",
    "insertText": "for(typename InvTraits::ChildIteratorType CI = InvTraits::child_begin(W), E = InvTraits::child_end(W); CI != E; ++CI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InvTraits::NodeType* N =* CI ;)",
    "insertText": "if(DT.Info.count(N))"
  },
  {
    "label": "GraphT()",
    "kind": "Method",
    "detail": "Function (unsigned SemiU = DT . Info [ Eval<)",
    "insertText": "GraphT(DT, N, i + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(WInfo.Semi == WInfo.Parent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DT . IDoms [ W ] = DT . Vertex [ WInfo . Parent ] ; } else { Buckets [ i ] = Buckets [ WInfo . Semi ] ; Buckets [ WInfo . Semi ] = i ; } })",
    "insertText": "if(N >= 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* Root = DT . Vertex [ 1 ] ;)",
    "insertText": "for(unsigned j = 1; Buckets[j] != 1; j = Buckets[j])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* V = DT . Vertex [ Buckets [ j ] ] ; DT . IDoms [ V ] = Root ; } })",
    "insertText": "for(unsigned i = 2; i <= N; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* W = DT . Vertex [ i ] ; GraphT::NodeType*& WIDom = DT . IDoms [ W ] ;)",
    "insertText": "if(WIDom != DT.Vertex[DT.Info[W].Semi])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DT.Roots.empty())"
  },
  {
    "label": "RootNode()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* Root = ! MultipleRoots ? DT . Roots [ 0 ] : nullptr ; DT .)",
    "insertText": "RootNode(DT.DomTreeNodes[Root] = llvm::make_unique<DomTreeNodeBase<typename GraphT::NodeType>>( Root, nullptr)).get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* W = DT . Vertex [ i ] ;)",
    "insertText": "if(DT.DomTreeNodes[W])"
  },
  {
    "label": "getIDom()",
    "kind": "Method",
    "detail": "Function (GraphT::NodeType* ImmDom = DT .)",
    "insertText": "getIDom(W)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ImmDom || DT.DomTreeNodes[nullptr])"
  },
  {
    "label": "addChild()",
    "kind": "Method",
    "detail": "Function (DT . DomTreeNodes [ W ] = IDomNode ->)",
    "insertText": "addChild(llvm::make_unique<DomTreeNodeBase<typename GraphT::NodeType>>( W, IDomNode))"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} DT . IDoms .)",
    "insertText": "clear()"
  },
  {
    "label": "shrink_to_fit()",
    "kind": "Method",
    "detail": "Function (DT . Vertex .)",
    "insertText": "shrink_to_fit()"
  },
  {
    "label": "updateDFSNumbers()",
    "kind": "Method",
    "detail": "Function (DT .)",
    "insertText": "updateDFSNumbers()"
  }
]