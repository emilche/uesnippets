[
  {
    "label": "frozen_frame()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_FRAME_ANALYZER_REFERENCE_LESS_VIDEO_ANALYSIS_LIB_H_ # define RTC_TOOLS_FRAME_ANALYZER_REFERENCE_LESS_VIDEO_ANALYSIS_LIB_H_ # include<stddef . h> # include<string> # include<vector> # include \" api / scoped_refptr . h \" # include \" rtc_tools / video_file_reader . h \" bool)",
    "insertText": "frozen_frame(std::vector<double> psnr_per_frame, std::vector<double> ssim_per_frame, size_t frame)"
  },
  {
    "label": "find_frame_clusters()",
    "kind": "Method",
    "detail": "Function (std::vector<int>)",
    "insertText": "find_frame_clusters(const std::vector<double>& psnr_per_frame, const std::vector<double>& ssim_per_frame)"
  },
  {
    "label": "print_freezing_metrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print_freezing_metrics(const std::vector<double>& psnr_per_frame, const std::vector<double>& ssim_per_frame)"
  },
  {
    "label": "compute_metrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute_metrics(const rtc::scoped_refptr<webrtc::test::Video>& video, std::vector<double>* psnr_per_frame, std::vector<double>* ssim_per_frame)"
  },
  {
    "label": "run_analysis()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "run_analysis(const std::string& video_file)"
  }
]