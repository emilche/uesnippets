[
  {
    "label": "srtp_ctx_t_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_ctx_t_"
  },
  {
    "label": "srtp_crypto_policy_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_crypto_policy_t"
  },
  {
    "label": "srtp_ekt_policy_ctx_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_ekt_policy_ctx_t"
  },
  {
    "label": "srtp_ekt_stream_ctx_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_ekt_stream_ctx_t"
  },
  {
    "label": "srtp_master_key_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_master_key_t"
  },
  {
    "label": "srtp_policy_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_policy_t"
  },
  {
    "label": "srtp_event_data_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_event_data_t"
  },
  {
    "label": "SRTP_MAX_TRAILER_LEN()",
    "kind": "Method",
    "detail": "Function (# ifndef SRTP_SRTP_H # define SRTP_SRTP_H # include<stdint . h> # ifdef __cplusplus \" C \" { # endif # define SRTP_MASTER_KEY_LEN 3 0 # define SRTP_MAX_KEY_LEN 6 4 # define SRTP_MAX_TAG_LEN 1 6 # define SRTP_MAX_MKI_LEN 1 2 8 # define)",
    "insertText": "SRTP_MAX_TRAILER_LEN(SRTP_MAX_TAG_LEN + SRTP_MAX_MKI_LEN) #define SRTP_MAX_NUM_MASTER_KEYS 16 #define SRTP_SALT_LEN 14 #define SRTP_AEAD_SALT_LEN 12 #define SRTP_AES_128_KEY_LEN 16 #define SRTP_AES_192_KEY_LEN 24 #define SRTP_AES_256_KEY_LEN 32 #define SRTP_AES_ICM_128_KEY_LEN_WSALT (SRTP_SALT_LEN + SRTP_AES_128_KEY_LEN) #define SRTP_AES_ICM_192_KEY_LEN_WSALT (SRTP_SALT_LEN + SRTP_AES_192_KEY_LEN) #define SRTP_AES_ICM_256_KEY_LEN_WSALT (SRTP_SALT_LEN + SRTP_AES_256_KEY_LEN) #define SRTP_AES_GCM_128_KEY_LEN_WSALT \\ (SRTP_AEAD_SALT_LEN + SRTP_AES_128_KEY_LEN) #define SRTP_AES_GCM_192_KEY_LEN_WSALT \\ (SRTP_AEAD_SALT_LEN + SRTP_AES_192_KEY_LEN) #define SRTP_AES_GCM_256_KEY_LEN_WSALT \\ (SRTP_AEAD_SALT_LEN + SRTP_AES_256_KEY_LEN)"
  },
  {
    "label": "srtp_init()",
    "kind": "Method",
    "detail": "Function (typedef uint32_t srtp_auth_type_id_t ; typedef enum { srtp_err_status_ok = 0,srtp_err_status_fail = 1,srtp_err_status_bad_param = 2,srtp_err_status_alloc_fail = 3,srtp_err_status_dealloc_fail = 4,srtp_err_status_init_fail = 5,srtp_err_status_terminus = 6,srtp_err_status_auth_fail = 7,srtp_err_status_cipher_fail = 8,srtp_err_status_replay_fail = 9,srtp_err_status_replay_old = 1 0,srtp_err_status_algo_fail = 1 1,srtp_err_status_no_such_op = 1 2,srtp_err_status_no_ctx = 1 3,srtp_err_status_cant_check = 1 4,srtp_err_status_key_expired = 1 5,srtp_err_status_socket_err = 1 6,srtp_err_status_signal_err = 1 7,srtp_err_status_nonce_bad = 1 8,srtp_err_status_read_fail = 1 9,srtp_err_status_write_fail = 2 0,srtp_err_status_parse_err = 2 1,srtp_err_status_encode_err = 2 2,srtp_err_status_semaphore_err = 2 3,srtp_err_status_pfkey_err = 2 4,srtp_err_status_bad_mki = 2 5,srtp_err_status_pkt_idx_old = 2 6,srtp_err_status_pkt_idx_adv = 2 7 } srtp_err_status_t ; typedef struct srtp_ctx_t_ srtp_ctx_t ; typedef enum { sec_serv_none = 0,sec_serv_conf = 1,sec_serv_auth = 2,sec_serv_conf_and_auth = 3 } srtp_sec_serv_t ; typedef struct srtp_crypto_policy_t { srtp_cipher_type_id_t cipher_type ; int cipher_key_len ; srtp_auth_type_id_t auth_type ; int auth_key_len ; int auth_tag_len ; srtp_sec_serv_t sec_serv ; } srtp_crypto_policy_t ; typedef enum { ssrc_undefined = 0,ssrc_specific = 1,ssrc_any_inbound = 2,ssrc_any_outbound = 3 } srtp_ssrc_type_t ; typedef struct { srtp_ssrc_type_t type ; unsigned int value ; } srtp_ssrc_t ; typedef struct srtp_ekt_policy_ctx_t* srtp_ekt_policy_t ; typedef struct srtp_ekt_stream_ctx_t* srtp_ekt_stream_t ; typedef struct srtp_master_key_t { unsigned char* key ; unsigned char* mki_id ; unsigned int mki_size ; } srtp_master_key_t ; typedef struct srtp_policy_t { srtp_ssrc_t ssrc ; srtp_crypto_policy_t rtp ; srtp_crypto_policy_t rtcp ; unsigned char* key ; srtp_master_key_t** keys ; unsigned long num_master_keys ; srtp_ekt_policy_t ekt ; unsigned long window_size ; int allow_repeat_tx ; int* enc_xtn_hdr ; int enc_xtn_hdr_count ; struct srtp_policy_t* next ; } srtp_policy_t ; typedef srtp_ctx_t* srtp_t ; srtp_err_status_t)",
    "insertText": "srtp_init(void)"
  },
  {
    "label": "srtp_shutdown()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_shutdown(void)"
  },
  {
    "label": "srtp_protect()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_protect(srtp_t ctx, void *rtp_hdr, int *len_ptr)"
  },
  {
    "label": "srtp_protect_mki()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_protect_mki(srtp_ctx_t *ctx, void *rtp_hdr, int *pkt_octet_len, unsigned int use_mki, unsigned int mki_index)"
  },
  {
    "label": "srtp_unprotect()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_unprotect(srtp_t ctx, void *srtp_hdr, int *len_ptr)"
  },
  {
    "label": "srtp_unprotect_mki()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_unprotect_mki(srtp_t ctx, void *srtp_hdr, int *len_ptr, unsigned int use_mki)"
  },
  {
    "label": "srtp_create()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_create(srtp_t *session, const srtp_policy_t *policy)"
  },
  {
    "label": "srtp_add_stream()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_add_stream(srtp_t session, const srtp_policy_t *policy)"
  },
  {
    "label": "srtp_remove_stream()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_remove_stream(srtp_t session, unsigned int ssrc)"
  },
  {
    "label": "srtp_update()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_update(srtp_t session, const srtp_policy_t *policy)"
  },
  {
    "label": "srtp_update_stream()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_update_stream(srtp_t session, const srtp_policy_t *policy)"
  },
  {
    "label": "srtp_crypto_policy_set_rtp_default()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_rtp_default(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_rtcp_default()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_rtcp_default(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_cm_128_hmac_sha1_80()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "srtp_crypto_policy_set_aes_cm_128_hmac_sha1_80(p) \\ srtp_crypto_policy_set_rtp_default(p) void srtp_crypto_policy_set_aes_cm_128_hmac_sha1_32(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_cm_128_null_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_cm_128_null_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_null_cipher_hmac_sha1_80()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_null_cipher_hmac_sha1_80(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_null_cipher_hmac_null()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_null_cipher_hmac_null(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_cm_256_hmac_sha1_80()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_cm_256_hmac_sha1_80(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_cm_256_hmac_sha1_32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_cm_256_hmac_sha1_32(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_cm_256_null_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_cm_256_null_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_cm_192_hmac_sha1_80()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_cm_192_hmac_sha1_80(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_cm_192_hmac_sha1_32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_cm_192_hmac_sha1_32(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_cm_192_null_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_cm_192_null_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_gcm_128_8_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_gcm_128_8_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_gcm_256_8_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_gcm_256_8_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_gcm_128_8_only_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_gcm_128_8_only_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_gcm_256_8_only_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_gcm_256_8_only_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_gcm_128_16_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_gcm_128_16_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_crypto_policy_set_aes_gcm_256_16_auth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_crypto_policy_set_aes_gcm_256_16_auth(srtp_crypto_policy_t *p)"
  },
  {
    "label": "srtp_dealloc()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_dealloc(srtp_t s)"
  },
  {
    "label": "srtp_crypto_policy_set_from_profile_for_rtp()",
    "kind": "Method",
    "detail": "Function (typedef enum { srtp_profile_reserved = 0,srtp_profile_aes128_cm_sha1_80 = 1,srtp_profile_aes128_cm_sha1_32 = 2,srtp_profile_null_sha1_80 = 5,srtp_profile_null_sha1_32 = 6,srtp_profile_aead_aes_128_gcm = 7,srtp_profile_aead_aes_256_gcm = 8,} srtp_profile_t ; srtp_err_status_t)",
    "insertText": "srtp_crypto_policy_set_from_profile_for_rtp(srtp_crypto_policy_t *policy, srtp_profile_t profile)"
  },
  {
    "label": "srtp_crypto_policy_set_from_profile_for_rtcp()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_crypto_policy_set_from_profile_for_rtcp(srtp_crypto_policy_t *policy, srtp_profile_t profile)"
  },
  {
    "label": "srtp_profile_get_master_key_length()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "srtp_profile_get_master_key_length(srtp_profile_t profile)"
  },
  {
    "label": "srtp_profile_get_master_salt_length()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "srtp_profile_get_master_salt_length(srtp_profile_t profile)"
  },
  {
    "label": "srtp_append_salt_to_key()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_append_salt_to_key(unsigned char *key, unsigned int bytes_in_key, unsigned char *salt, unsigned int bytes_in_salt)"
  },
  {
    "label": "srtp_protect_rtcp()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_protect_rtcp(srtp_t ctx, void *rtcp_hdr, int *pkt_octet_len)"
  },
  {
    "label": "srtp_protect_rtcp_mki()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_protect_rtcp_mki(srtp_t ctx, void *rtcp_hdr, int *pkt_octet_len, unsigned int use_mki, unsigned int mki_index)"
  },
  {
    "label": "srtp_unprotect_rtcp()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_unprotect_rtcp(srtp_t ctx, void *srtcp_hdr, int *pkt_octet_len)"
  },
  {
    "label": "srtp_unprotect_rtcp_mki()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_unprotect_rtcp_mki(srtp_t ctx, void *srtcp_hdr, int *pkt_octet_len, unsigned int use_mki)"
  },
  {
    "label": "srtp_set_user_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srtp_set_user_data(srtp_t ctx, void *data)"
  },
  {
    "label": "srtp_get_user_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "srtp_get_user_data(srtp_t ctx)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef enum { event_ssrc_collision,event_key_soft_limit,event_key_hard_limit,event_packet_index_limit } srtp_event_t ; typedef struct srtp_event_data_t { srtp_t session ; uint32_t ssrc ; srtp_event_t event ; } srtp_event_data_t ; typedef)",
    "insertText": "void(srtp_event_handler_func_t)(srtp_event_data_t *data)"
  },
  {
    "label": "srtp_install_event_handler()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_install_event_handler(srtp_event_handler_func_t func)"
  },
  {
    "label": "srtp_get_version_string()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "srtp_get_version_string(void)"
  },
  {
    "label": "srtp_get_version()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "srtp_get_version(void)"
  },
  {
    "label": "srtp_set_debug_module()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_set_debug_module(const char *mod_name, int v)"
  },
  {
    "label": "srtp_list_debug_modules()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_list_debug_modules(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef enum { srtp_log_level_error,srtp_log_level_warning,srtp_log_level_info,srtp_log_level_debug } srtp_log_level_t ; typedef)",
    "insertText": "void(srtp_log_handler_func_t)(srtp_log_level_t level, const char *msg, void *data)"
  },
  {
    "label": "srtp_install_log_handler()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_install_log_handler(srtp_log_handler_func_t func, void *data)"
  },
  {
    "label": "srtp_get_protect_trailer_length()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_get_protect_trailer_length(srtp_t session, uint32_t use_mki, uint32_t mki_index, uint32_t *length)"
  },
  {
    "label": "srtp_get_protect_rtcp_trailer_length()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_get_protect_rtcp_trailer_length(srtp_t session, uint32_t use_mki, uint32_t mki_index, uint32_t *length)"
  },
  {
    "label": "srtp_set_stream_roc()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_set_stream_roc(srtp_t session, uint32_t ssrc, uint32_t roc)"
  },
  {
    "label": "srtp_get_stream_roc()",
    "kind": "Method",
    "detail": "Function (srtp_err_status_t)",
    "insertText": "srtp_get_stream_roc(srtp_t session, uint32_t ssrc, uint32_t *roc)"
  }
]