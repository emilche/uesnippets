[
  {
    "label": "FShrinkWrapNetBlob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShrinkWrapNetBlob"
  },
  {
    "label": "FShrinkWrapNetObjectAttachment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShrinkWrapNetObjectAttachment"
  },
  {
    "label": "FShrinkWrapNetBlob()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / ReplicationSystem / NetBlob / NetBlob . h \" # include \" Net / Core / NetToken / NetToken . h \" namespace UE::Net { class FShrinkWrapNetBlob final : public FNetBlob { public :)",
    "insertText": "FShrinkWrapNetBlob(FNetSerializationContext& Context, const TRefCountPtr<FNetBlob>& OriginalBlob, TArray<uint32>&& Payload, uint32 PayloadBitCount)"
  },
  {
    "label": "GetNetObjectReferenceExports()",
    "kind": "Method",
    "detail": "Function (private : TArrayView<const FNetObjectReference>)",
    "insertText": "GetNetObjectReferenceExports()"
  },
  {
    "label": "GetNetTokenExports()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FNetToken>)",
    "insertText": "GetNetTokenExports()"
  },
  {
    "label": "SerializeWithObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "DeserializeWithObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeWithObject(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FNetSerializationContext& Context)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(FNetSerializationContext& Context)"
  },
  {
    "label": "InternalSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSerialize(FNetSerializationContext& Context)"
  },
  {
    "label": "FShrinkWrapNetObjectAttachment()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FNetBlob> OriginalBlob ; TArray<FNetToken,TInlineAllocator<4>> NetTokenExportsArray ; TArray<uint32> SerializedBlob ; uint32 SerializedBlobBitCount ; } ; class FShrinkWrapNetObjectAttachment final : public FNetBlob { public :)",
    "insertText": "FShrinkWrapNetObjectAttachment(FNetSerializationContext& Context, const TRefCountPtr<FNetObjectAttachment>& OriginalBlob, TArray<uint32>&& Payload, uint32 PayloadBitCount)"
  }
]