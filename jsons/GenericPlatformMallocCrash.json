[
  {
    "label": "FMallocCrashPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMallocCrashPool"
  },
  {
    "label": "FPoolDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPoolDesc"
  },
  {
    "label": "FPtrInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPtrInfo"
  },
  {
    "label": "FGenericPlatformMallocCrash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformMallocCrash"
  },
  {
    "label": "FGenericStackBasedMallocCrash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericStackBasedMallocCrash"
  },
  {
    "label": "FPtrInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / MemoryBase . h \" struct FMallocCrashPool ; struct FPoolDesc ; struct FPtrInfo { uint64 Size ; uint8* Ptr ; # if PLATFORM_32BITS uint8 Padding [ 4 ] ; # endif)",
    "insertText": "FPtrInfo(): Size(0), Ptr(0)"
  },
  {
    "label": "FPtrInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPtrInfo(void* NewPtr ): Size(0), Ptr((uint8*)NewPtr)"
  },
  {
    "label": "FGenericPlatformMallocCrash()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMallocCrashPool ; struct FPoolDesc ; struct FGenericPlatformMallocCrash final : public FMalloc { struct FPoolDesc ; struct FMallocCrashPool ; enum { LARGE_MEMORYPOOL_SIZE = 2* 1 0 2 4* 1 0 2 4,REQUIRED_ALIGNMENT = 1 6,NUM_POOLS = 1 4,MAX_NUM_ALLOCS_IN_POOL = 2 0 4 8,MEM_TAG = 0 xfe,MEM_WIPETAG = 0 xcd,} ; public :)",
    "insertText": "FGenericPlatformMallocCrash(FMalloc* MainMalloc)"
  },
  {
    "label": "FGenericPlatformMallocCrash()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGenericPlatformMallocCrash()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FGenericPlatformMallocCrash&)",
    "insertText": "Get(FMalloc* MainMalloc = nullptr)"
  },
  {
    "label": "SetAsGMalloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsGMalloc()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void*)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "PrintPoolsUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintPoolsUsage()"
  },
  {
    "label": "IsOnCrashedThread()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsOnCrashedThread()"
  },
  {
    "label": "IsPtrInLargePool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPtrInLargePool(void* Ptr)"
  },
  {
    "label": "IsPtrInSmallPool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPtrInSmallPool(void* Ptr)"
  },
  {
    "label": "GetPoolDesc()",
    "kind": "Method",
    "detail": "Function (const FPoolDesc&)",
    "insertText": "GetPoolDesc(uint32 Index)"
  },
  {
    "label": "CalculateSmallPoolTotalSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CalculateSmallPoolTotalSize()"
  },
  {
    "label": "CalculateBookkeepingPoolTotalSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CalculateBookkeepingPoolTotalSize()"
  },
  {
    "label": "InitializeSmallPools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSmallPools()"
  },
  {
    "label": "ChoosePoolForSize()",
    "kind": "Method",
    "detail": "Function (FMallocCrashPool*)",
    "insertText": "ChoosePoolForSize(uint32 AllocationSize)"
  },
  {
    "label": "FindPoolForAlloc()",
    "kind": "Method",
    "detail": "Function (FMallocCrashPool*)",
    "insertText": "FindPoolForAlloc(void* Ptr)"
  },
  {
    "label": "AllocateFromBookkeeping()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "AllocateFromBookkeeping(uint32 AllocationSize)"
  },
  {
    "label": "AllocateFromSmallPool()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "AllocateFromSmallPool(uint32 AllocationSize)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetAllocationSize(void *Original)"
  },
  {
    "label": "SafePageSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SafePageSize()"
  },
  {
    "label": "FGenericStackBasedMallocCrash()",
    "kind": "Method",
    "detail": "Function (protected : FCriticalSection InternalLock ; int32 CrashedThreadId = 0 ; uint8* LargeMemoryPool = nullptr ; uint32 LargeMemoryPoolOffset = 0 ; uint8* SmallMemoryPool = nullptr ; uint32 SmallMemoryPoolOffset = 0 ; uint32 SmallMemoryPoolSize = 0 ; uint8* BookkeepingPool = nullptr ; uint32 BookkeepingPoolOffset = 0 ; uint32 BookkeepingPoolSize = 0 ; FMalloc* PreviousMalloc = nullptr ; } ; struct FGenericStackBasedMallocCrash : public FMalloc {)",
    "insertText": "FGenericStackBasedMallocCrash(FMalloc* MainMalloc)"
  },
  {
    "label": "FGenericStackBasedMallocCrash()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGenericStackBasedMallocCrash()"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  }
]