[
  {
    "label": "FSlateRotatedRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateRotatedRect"
  },
  {
    "label": "FSlateRotatedRect()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / SlateRect . h \" # include \" Math / TransformCalculus . h \" # include \" Math / TransformCalculus2D . h \" # include \" Math / Vector2D . h \" # include \" Rendering / SlateLayoutTransform . h \" # include \" Rendering / SlateRenderTransform . h \" # include \" Types / SlateVector2 . h \" struct FSlateRotatedRect { public :)",
    "insertText": "FSlateRotatedRect()"
  },
  {
    "label": "FSlateRotatedRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateRotatedRect(const FSlateRect& AlignedRect) : TopLeft(AlignedRect.Left, AlignedRect.Top) , ExtentX(AlignedRect.Right - AlignedRect.Left, 0.0f) , ExtentY(0.0f, AlignedRect.Bottom - AlignedRect.Top)"
  },
  {
    "label": "FSlateRotatedRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateRotatedRect(const UE::Slate::FDeprecateVector2DParameter& InTopLeft, const UE::Slate::FDeprecateVector2DParameter& InExtentX, const UE::Slate::FDeprecateVector2DParameter& InExtentY) : TopLeft(InTopLeft) , ExtentX(InExtentX) , ExtentY(InExtentY)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : FVector2f TopLeft ; FVector2f ExtentX ; FVector2f ExtentY ; public : bool)",
    "insertText": "operator(const FSlateRotatedRect& Other)"
  },
  {
    "label": "IsUnderLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnderLocation(const UE::Slate::FDeprecateVector2DParameter Location)"
  },
  {
    "label": "MakeRotatedRect()",
    "kind": "Method",
    "detail": "Function (FSlateRotatedRect)",
    "insertText": "MakeRotatedRect(const FSlateRect& ClipRectInLayoutWindowSpace, const FSlateLayoutTransform& InverseLayoutTransform, const FSlateRenderTransform& RenderTransform)"
  },
  {
    "label": "MakeRotatedRect()",
    "kind": "Method",
    "detail": "Function (} FSlateRotatedRect)",
    "insertText": "MakeRotatedRect(const FSlateRect& ClipRectInLayoutWindowSpace, const FTransform2f& LayoutToRenderTransform)"
  },
  {
    "label": "MakeSnappedRotatedRect()",
    "kind": "Method",
    "detail": "Function (FSlateRotatedRect)",
    "insertText": "MakeSnappedRotatedRect(const FSlateRect& ClipRectInLayoutWindowSpace, const FSlateLayoutTransform& InverseLayoutTransform, const FSlateRenderTransform& RenderTransform)"
  },
  {
    "label": "MakeSnappedRotatedRect()",
    "kind": "Method",
    "detail": "Function (} FSlateRotatedRect)",
    "insertText": "MakeSnappedRotatedRect(const FSlateRect& ClipRectInLayoutWindowSpace, const FTransform2f& LayoutToRenderTransform)"
  },
  {
    "label": "TransformRect()",
    "kind": "Method",
    "detail": "Function (} ; template<TransformType> FSlateRotatedRect)",
    "insertText": "TransformRect(const TransformType& Transform, const FSlateRotatedRect& Rect)"
  }
]