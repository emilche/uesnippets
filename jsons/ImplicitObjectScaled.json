[
  {
    "label": "FMTDInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMTDInfo"
  },
  {
    "label": "FImplicitObjectInstanced",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObjectInstanced"
  },
  {
    "label": "TImplicitObjectInstanced",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImplicitObjectInstanced"
  },
  {
    "label": "FImplicitObjectScaled",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObjectScaled"
  },
  {
    "label": "TImplicitObjectScaled",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImplicitObjectScaled"
  },
  {
    "label": "TImplicitTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TImplicitTypeInfo"
  },
  {
    "label": "FImplicitObjectInstanced()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Box . h \" # include \" Chaos / Collision / ContactPoint . h \" # include \" Chaos / Convex . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / Transform . h \" # include \" Chaos / Utilities . h \" # include \" ChaosArchive . h \" # include \" Templates / EnableIf . h \" # include \" Math / NumericLimits . h \" # include \" ChaosCheck . h \" namespace Chaos { struct FMTDInfo ; class FImplicitObjectInstanced : public FImplicitObject { public :)",
    "insertText": "FImplicitObjectInstanced(int32 Flags, EImplicitObjectType InType) : FImplicitObject(Flags, InType | ImplicitObjectType::IsInstanced) , OuterMargin(0)"
  },
  {
    "label": "GetInnerObject()",
    "kind": "Method",
    "detail": "Function (} TSerializablePtr<FImplicitObject>)",
    "insertText": "GetInnerObject()"
  },
  {
    "label": "GetWindingOrder()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetWindingOrder()"
  },
  {
    "label": "TImplicitObjectInstanced()",
    "kind": "Method",
    "detail": "Function (this -> OuterMargin = 0 ; })",
    "insertText": "TImplicitObjectInstanced(const ObjectType&& Object, const FReal InMargin = 0) : FImplicitObjectInstanced(EImplicitObject::HasBoundingBox, Object->GetType()) , MObject(MoveTemp(Object))"
  },
  {
    "label": "IsConvex()",
    "kind": "Method",
    "detail": "Function (this -> bIsConvex = MObject ->)",
    "insertText": "IsConvex()"
  },
  {
    "label": "GetDoCollide()",
    "kind": "Method",
    "detail": "Function (this -> bDoCollide = MObject ->)",
    "insertText": "GetDoCollide()"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (this -> OuterMargin = InMargin ;)",
    "insertText": "SetMargin(OuterMargin + MObject->GetMargin())"
  },
  {
    "label": "TImplicitObjectInstanced()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImplicitObjectInstanced(const ObjectType& Object, const FReal InMargin = 0) : FImplicitObjectInstanced(EImplicitObject::HasBoundingBox,Object->GetType()) , MObject(Object)"
  },
  {
    "label": "TImplicitObjectInstanced()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImplicitObjectInstanced(TImplicitObjectInstanced<TConcrete>&& Other) : FImplicitObjectInstanced(EImplicitObject::HasBoundingBox, Other.MObject->GetType()) , MObject(MoveTemp(Other.MObject))"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (this -> OuterMargin = Other . OuterMargin ;)",
    "insertText": "SetMargin(Other.GetMargin())"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} EImplicitObjectType)",
    "insertText": "StaticType()"
  },
  {
    "label": "GetInstancedObject()",
    "kind": "Method",
    "detail": "Function (} const TConcrete*)",
    "insertText": "GetInstancedObject()"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetRadius()"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "PhiWithNormal(const FVec3& X, FVec3& Normal)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Raycast(const FVec3& StartPoint, const FVec3& Dir, const FReal Length, const FReal Thickness, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "ScopedMemory()",
    "kind": "Method",
    "detail": "Function (FChaosArchiveScopedMemory)",
    "insertText": "ScopedMemory(Ar, GetTypeName(), false)"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImp(Ar)"
  },
  {
    "label": "FindMostOpposingFace()",
    "kind": "Method",
    "detail": "Function (Ar<<MObject ; } int32)",
    "insertText": "FindMostOpposingFace(const FVec3& Position, const FVec3& UnitDir, int32 HintFaceIndex, FReal SearchDist)"
  },
  {
    "label": "FindGeometryOpposingNormal()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "FindGeometryOpposingNormal(const FVec3& DenormDir, int32 HintFaceIndex, const FVec3& OriginalNormal)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Overlap(const FVec3& Point, const FReal Thickness)"
  },
  {
    "label": "Support()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "Support(const FVec3& Direction, const FReal Thickness, int32& VertexIndex)"
  },
  {
    "label": "SupportScaled()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "SupportScaled(const FVec3& Direction, const T Thickness, const FVec3& Scale, int32& VertexIndex)"
  },
  {
    "label": "SupportCore()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "SupportCore(const FVec3& Direction, const FReal InMargin, FReal* OutSupportDelta, int32& VertexIndex)"
  },
  {
    "label": "SupportCoreSimd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "SupportCoreSimd(const VectorRegister4Float& Direction, const FReal InMargin)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (FVec3 DirectionVec3 ;)",
    "insertText": "VectorStoreFloat3(Direction, &DirectionVec3)"
  },
  {
    "label": "SupportCore()",
    "kind": "Method",
    "detail": "Function (int32 VertexIndex = INDEX_NONE ; FVec3 SupportVert = MObject ->)",
    "insertText": "SupportCore(DirectionVec3, InMargin, nullptr, VertexIndex)"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (} const FAABB3)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "Object()",
    "kind": "Method",
    "detail": "Function (} const ObjectType)",
    "insertText": "Object()"
  },
  {
    "label": "GetNestedType()",
    "kind": "Method",
    "detail": "Function (} EImplicitObjectType)",
    "insertText": "GetNestedType()"
  },
  {
    "label": "CopyGeometry()",
    "kind": "Method",
    "detail": "Function (} Chaos::FImplicitObjectPtr)",
    "insertText": "CopyGeometry()"
  },
  {
    "label": "CopyGeometryWithScale()",
    "kind": "Method",
    "detail": "Function (} Chaos::FImplicitObjectPtr)",
    "insertText": "CopyGeometryWithScale(const FVec3& Scale)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "AsInstancedChecked()",
    "kind": "Method",
    "detail": "Function (} const TImplicitObjectInstanced<TConcrete>&)",
    "insertText": "AsInstancedChecked(const FImplicitObject& Obj)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(StaticType() == Obj.GetType())"
  },
  {
    "label": "TConcrete()",
    "kind": "Method",
    "detail": "Function (} return static_cast<const TImplicitObjectInstanced<)",
    "insertText": "TConcrete(Obj)"
  },
  {
    "label": "AsInstanced()",
    "kind": "Method",
    "detail": "Function (} const TImplicitObjectInstanced<TConcrete>*)",
    "insertText": "AsInstanced(const FImplicitObject& Obj)"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "StaticType() == Obj.GetType() ? static_cast<const TImplicitObjectInstanced<TConcrete>*>(&Obj)"
  },
  {
    "label": "AsInstanced()",
    "kind": "Method",
    "detail": "Function (} } TImplicitObjectInstanced<TConcrete>*)",
    "insertText": "AsInstanced(FImplicitObject& Obj)"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "StaticType() == Obj.GetType() ? static_cast<TImplicitObjectInstanced<TConcrete>*>(&Obj)"
  },
  {
    "label": "LowLevelSweepGeom()",
    "kind": "Method",
    "detail": "Function (} } template<QueryGeomType> bool)",
    "insertText": "LowLevelSweepGeom(const QueryGeomType& B, const TRigidTransform<T, d>& BToATM, const TVector<T, d>& LocalDir, const T Length, T& OutTime, TVector<T, d>& LocalPosition, TVector<T, d>& LocalNormal, int32& OutFaceIndex, TVector<T, d>& OutFaceNormal, T Thickness = 0, bool bComputeMTD = false)"
  },
  {
    "label": "LowLevelOverlapGeom()",
    "kind": "Method",
    "detail": "Function (} template<QueryGeomType> bool)",
    "insertText": "LowLevelOverlapGeom(const QueryGeomType& B,const TRigidTransform<T,d>& BToATM,T Thickness = 0, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "GJKContactPoint()",
    "kind": "Method",
    "detail": "Function (} template<QueryGeomType> bool)",
    "insertText": "GJKContactPoint(const QueryGeomType& A, const FRigidTransform3& AToBTM, const FReal Thickness, FVec3& Location, FVec3& Normal, FReal& Penetration, int32& FaceIndex)"
  },
  {
    "label": "GetMaterialIndex()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetMaterialIndex(uint32 HintIndex)"
  },
  {
    "label": "GetMostOpposingPlane()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMostOpposingPlane(const FVec3& Normal)"
  },
  {
    "label": "GetClosestEdge()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetClosestEdge(int32 PlaneIndex, const FVec3& Position, FVec3& OutEdgePos0, FVec3& OutEdgePos1)"
  },
  {
    "label": "GetClosestEdgePosition()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetClosestEdgePosition(int32 PlaneIndex, const FVec3& Position)"
  },
  {
    "label": "GetClosestEdgeVertices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetClosestEdgeVertices(int32 PlaneIndexHint, const FVec3& Position, int32& OutVertexIndex0, int32& OutVertexIndex1)"
  },
  {
    "label": "FindVertexPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindVertexPlanes(int32 VertexIndex, int32* OutVertexPlanes, int32 MaxVertexPlanes)"
  },
  {
    "label": "GetVertexPlanes3()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVertexPlanes3(int32 VertexIndex, int32& PlaneIndex0, int32& PlaneIndex1, int32& PlaneIndex2)"
  },
  {
    "label": "NumPlaneVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumPlaneVertices(int32 PlaneIndex)"
  },
  {
    "label": "GetPlaneVertex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlaneVertex(int32 PlaneIndex, int32 PlaneVertexIndex)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEdgeVertex(int32 EdgeIndex, int32 EdgeVertexIndex)"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEdgePlane(int32 EdgeIndex, int32 EdgePlaneIndex)"
  },
  {
    "label": "NumPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumPlanes()"
  },
  {
    "label": "NumEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumEdges()"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumVertices()"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (} const TPlaneConcrete<FReal,3>)",
    "insertText": "GetPlane(int32 FaceIndex)"
  },
  {
    "label": "GetPlaneNX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPlaneNX(const int32 FaceIndex, FVec3& OutN, FVec3& OutX)"
  },
  {
    "label": "GetPlaneNX()",
    "kind": "Method",
    "detail": "Function (MObject ->)",
    "insertText": "GetPlaneNX(FaceIndex, OutN, OutX)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "GetVertex(int32 VertexIndex)"
  },
  {
    "label": "GetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "GetCenterOfMass()"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass()"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} const FMatrix33)",
    "insertText": "GetInertiaTensor(const FReal Mass)"
  },
  {
    "label": "CopyHelper()",
    "kind": "Method",
    "detail": "Function (} protected : ObjectType MObject ; TImplicitObjectInstanced<TConcrete>*)",
    "insertText": "CopyHelper(const TImplicitObjectInstanced<TConcrete>* Obj)"
  },
  {
    "label": "FImplicitObjectScaled()",
    "kind": "Method",
    "detail": "Function (} } ; class FImplicitObjectScaled : public FImplicitObject { public :)",
    "insertText": "FImplicitObjectScaled(int32 Flags, EImplicitObjectType InType) : FImplicitObject(Flags, InType | ImplicitObjectType::IsScaled) , MScale(1) , MInvScale(1) , OuterMargin(0.0f) , MLocalBoundingBox(FAABB3::EmptyAABB())"
  },
  {
    "label": "GetSignVector()",
    "kind": "Method",
    "detail": "Function (const FVec3 SignVector = MScale .)",
    "insertText": "GetSignVector()"
  },
  {
    "label": "TImplicitObjectScaled()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImplicitObjectScaled(ObjectType Object, const FVec3& Scale, FReal InMargin = 0) : FImplicitObjectScaled(EImplicitObject::HasBoundingBox, Object->GetType()) , MObject(Object)"
  },
  {
    "label": "InitScaledImplicit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitScaledImplicit(Scale, InMargin)"
  },
  {
    "label": "TImplicitObjectScaled()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImplicitObjectScaled(TConcrete* Object, const FVec3& Scale, FReal InMargin = 0) : FImplicitObjectScaled(EImplicitObject::HasBoundingBox, Object->GetType()) , MObject(Object)"
  },
  {
    "label": "MakePersistent()",
    "kind": "Method",
    "detail": "Function (Object ->)",
    "insertText": "MakePersistent()"
  },
  {
    "label": "TImplicitObjectScaled()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImplicitObjectScaled(const TImplicitObjectScaled<TConcrete, bInstanced>& Other)"
  },
  {
    "label": "TImplicitObjectScaled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TImplicitObjectScaled(TImplicitObjectScaled<TConcrete, bInstanced>&& Other) : FImplicitObjectScaled(EImplicitObject::HasBoundingBox, Other.MObject->GetType() | ImplicitObjectType::IsScaled) , MObject(MoveTemp(Other.MObject))"
  },
  {
    "label": "TImplicitObjectScaled()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TImplicitObjectScaled()"
  },
  {
    "label": "AsScaledChecked()",
    "kind": "Method",
    "detail": "Function (} const TImplicitObjectScaled<TConcrete>&)",
    "insertText": "AsScaledChecked(const FImplicitObject& Obj)"
  },
  {
    "label": "AsScaledChecked()",
    "kind": "Method",
    "detail": "Function (} TImplicitObjectScaled<TConcrete>&)",
    "insertText": "AsScaledChecked(FImplicitObject& Obj)"
  },
  {
    "label": "AsScaled()",
    "kind": "Method",
    "detail": "Function (} const TImplicitObjectScaled<TConcrete>*)",
    "insertText": "AsScaled(const FImplicitObject& Obj)"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "StaticType() == Obj.GetType() ? static_cast<const TImplicitObjectScaled<TConcrete>*>(&Obj)"
  },
  {
    "label": "AsScaled()",
    "kind": "Method",
    "detail": "Function (} } TImplicitObjectScaled<TConcrete>*)",
    "insertText": "AsScaled(FImplicitObject& Obj)"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "StaticType() == Obj.GetType() ? static_cast<TImplicitObjectScaled<TConcrete>*>(&Obj)"
  },
  {
    "label": "GetUnscaledObject()",
    "kind": "Method",
    "detail": "Function (} const TConcrete*)",
    "insertText": "GetUnscaledObject()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FVec3 UnscaledStart = MInvScale* StartPoint ; const FVec3 UnscaledDirDenorm = MInvScale* Dir ; const FReal LengthScale = UnscaledDirDenorm .)",
    "insertText": "Size()"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal LengthScaleInv =)",
    "insertText": "FReal(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal UnscaledLength = Length* LengthScale ; const FVec3 UnscaledDir = UnscaledDirDenorm* LengthScaleInv ; FVec3 UnscaledPosition ; FVec3 UnscaledNormal ; FReal UnscaledTime ;)",
    "insertText": "if(MObject->Raycast(UnscaledStart, UnscaledDir, UnscaledLength, Thickness * MInvScale[0], UnscaledTime, UnscaledPosition, UnscaledNormal, OutFaceIndex))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal NewTime = LengthScaleInv* UnscaledTime ;)",
    "insertText": "if(NewTime == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutPosition = StartPoint ; OutNormal = - Dir ; OutTime = NewTime ; return true ; } else)",
    "insertText": "if(NewTime < Length)"
  },
  {
    "label": "OutNormal()",
    "kind": "Method",
    "detail": "Function (OutPosition = MScale* UnscaledPosition ;)",
    "insertText": "OutNormal(MInvScale * UnscaledNormal).GetSafeNormal(TNumericLimits<FReal>::Min())"
  },
  {
    "label": "BToATMNoScale()",
    "kind": "Method",
    "detail": "Function (const T LengthScaleInv = 1 . f / LengthScale ; const T UnscaledLength = Length* LengthScale ; const TVector<T,d> UnscaledDir = UnscaledDirDenorm* LengthScaleInv ; TVector<T,d> UnscaledPosition ; TVector<T,d> UnscaledNormal ; T UnscaledTime ; TRigidTransform<T,d>)",
    "insertText": "BToATMNoScale(BToATM.GetLocation() * MInvScale, BToATM.GetRotation())"
  },
  {
    "label": "LocalNormal()",
    "kind": "Method",
    "detail": "Function (OutTime = NewTime ; LocalPosition = MScale* UnscaledPosition ;)",
    "insertText": "LocalNormal(MInvScale * UnscaledNormal).GetSafeNormal()"
  },
  {
    "label": "AToBTMNoScale()",
    "kind": "Method",
    "detail": "Function (TRigidTransform<T,d>)",
    "insertText": "AToBTMNoScale(AToBTM.GetLocation() * MInvScale, AToBTM.GetRotation())"
  },
  {
    "label": "MakeScaledHelper()",
    "kind": "Method",
    "detail": "Function (const FReal UnscaledThickness = Thickness ; auto ScaledA =)",
    "insertText": "MakeScaledHelper(A, MInvScale)"
  },
  {
    "label": "LowLevelOverlapGeom()",
    "kind": "Method",
    "detail": "Function (} template<QueryGeomType> bool)",
    "insertText": "LowLevelOverlapGeom(const QueryGeomType& B, const TRigidTransform<T, d>& BToATM, T Thickness = 0, FMTDInfo* OutMTD = nullptr)"
  },
  {
    "label": "MakeScaledHelper()",
    "kind": "Method",
    "detail": "Function (auto ScaledB =)",
    "insertText": "MakeScaledHelper(B, MInvScale)"
  },
  {
    "label": "GetClosestEdge()",
    "kind": "Method",
    "detail": "Function (FVec3 EdgePos = MObject ->)",
    "insertText": "GetClosestEdge(PlaneIndex, MInvScale * Position, OutEdgePos0, OutEdgePos1)"
  },
  {
    "label": "GetClosestEdgeVertices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetClosestEdgeVertices(int32 PlaneIndex, const FVec3& Position, int32& OutVertexIndex0, int32& OutVertexIndex1)"
  },
  {
    "label": "GetPlane()",
    "kind": "Method",
    "detail": "Function (const TPlaneConcrete<FReal,3> InnerPlane = MObject ->)",
    "insertText": "GetPlane(FaceIndex)"
  },
  {
    "label": "GetPlaneNX()",
    "kind": "Method",
    "detail": "Function (FVec3 InnerN,InnerX ; MObject ->)",
    "insertText": "GetPlaneNX(FaceIndex, InnerN, InnerX)"
  },
  {
    "label": "MakeScaledUnsafe()",
    "kind": "Method",
    "detail": "Function (TPlaneConcrete<FReal)",
    "insertText": "MakeScaledUnsafe(InnerN, InnerX, MScale, MInvScale, OutN, OutX)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (const FVec3 InnerVertex = MObject ->)",
    "insertText": "GetVertex(VertexIndex)"
  },
  {
    "label": "CHAOS_ENSURE()",
    "kind": "Method",
    "detail": "Function (const FVec3 LocalOriginalNormal =)",
    "insertText": "CHAOS_ENSURE(NormalLengthScale > UE_SMALL_NUMBER) ? LocalOriginalNormalDenorm / NormalLengthScale : FVec3(0, 0, 1)"
  },
  {
    "label": "FindGeometryOpposingNormal()",
    "kind": "Method",
    "detail": "Function (const FVec3 LocalNormal = MObject ->)",
    "insertText": "FindGeometryOpposingNormal(LocalDenormDir, HintFaceIndex, LocalOriginalNormal)"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (FVec3 Normal = LocalNormal* MInvScale ; FReal NormalLength = Normal .)",
    "insertText": "SafeNormalize(TNumericLimits<FReal>::Min())"
  },
  {
    "label": "CHAOS_ENSURE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_ENSURE(false)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (Normal =)",
    "insertText": "FVec3(0, 0, 1)"
  },
  {
    "label": "Overlap()",
    "kind": "Method",
    "detail": "Function (const FVec3 UnscaledPoint = MInvScale* Point ; const FReal UnscaleThickness = MInvScale [ 0 ]* Thickness ; return MObject ->)",
    "insertText": "Overlap(UnscaledPoint, UnscaleThickness)"
  },
  {
    "label": "FindClosestIntersectionImp()",
    "kind": "Method",
    "detail": "Function (} Pair<FVec3,bool>)",
    "insertText": "FindClosestIntersectionImp(const FVec3& StartPoint, const FVec3& EndPoint, const FReal Thickness)"
  },
  {
    "label": "FindClosestIntersection()",
    "kind": "Method",
    "detail": "Function (const FVec3 UnscaledStart = MInvScale* StartPoint ; const FVec3 UnscaledEnd = MInvScale* EndPoint ; auto ClosestIntersection = MObject ->)",
    "insertText": "FindClosestIntersection(UnscaledStart, UnscaledEnd, Thickness)"
  },
  {
    "label": "FindClosestFaceAndVertices()",
    "kind": "Method",
    "detail": "Function (ClosestIntersection . First = MScale* ClosestIntersection . First ; } return ClosestIntersection ; } int32)",
    "insertText": "FindClosestFaceAndVertices(const FVec3& Position, TArray<FVec3>& FaceVertices, FReal SearchDist = FReal(0.01))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FVec3 UnscaledPoint = MInvScale* Position ; const FReal UnscaledSearchDist = SearchDist* MInvScale .)",
    "insertText": "Max()"
  },
  {
    "label": "FindClosestFaceAndVertices()",
    "kind": "Method",
    "detail": "Function (int32 FaceIndex = MObject ->)",
    "insertText": "FindClosestFaceAndVertices(UnscaledPoint, FaceVertices, UnscaledSearchDist)"
  },
  {
    "label": "Support()",
    "kind": "Method",
    "detail": "Function (const FVec3 UnthickenedPt = MObject ->)",
    "insertText": "Support(Direction * MScale, 0.0f, VertexIndex)"
  },
  {
    "label": "SupportCoreScaled()",
    "kind": "Method",
    "detail": "Function (int32 VertexIndex = INDEX_NONE ; FVec3 SupportVert = MObject ->)",
    "insertText": "SupportCoreScaled(DirectionVec3, InMargin, MScale, nullptr, VertexIndex)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScale(const FVec3& Scale)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FReal MinMagnitude = 1 e - 6 f ;)",
    "insertText": "for(int Axis = 0; Axis < 3; ++Axis)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (MScale [ Axis ] = MinMagnitude ; } else { MScale [ Axis ] = Scale [ Axis ] ; } MInvScale [ Axis ] = 1 / MScale [ Axis ] ; })",
    "insertText": "SetMargin(OuterMargin + MScale[0] * MObject->GetMargin())"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBounds()"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} const FReal)",
    "insertText": "GetVolume()"
  },
  {
    "label": "SerializeAsAABB()",
    "kind": "Method",
    "detail": "Function (Ar<<MObject<<MScale<<MInvScale ; TBox<FReal,d)",
    "insertText": "SerializeAsAABB(Ar, MLocalBoundingBox)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FExternalPhysicsCustomObjectVersion::GUID)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (this -> Type = MObject ->)",
    "insertText": "GetType()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "CopyHelper()",
    "kind": "Method",
    "detail": "Function (TImplicitObjectScaled<TConcrete,bInstanced>* Obj =)",
    "insertText": "CopyHelper(this)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (Obj ->)",
    "insertText": "SetScale(Obj->GetScale() * Scale)"
  },
  {
    "label": "TImplicitObjectScaled()",
    "kind": "Method",
    "detail": "Function (} private : ObjectType MObject ;)",
    "insertText": "TImplicitObjectScaled() : FImplicitObjectScaled(EImplicitObject::HasBoundingBox, StaticType())"
  },
  {
    "label": "CopyHelper()",
    "kind": "Method",
    "detail": "Function (} FImplicitObject ; TImplicitObjectScaled<TConcrete,true>*)",
    "insertText": "CopyHelper(const TImplicitObjectScaled<TConcrete, true>* Obj)"
  },
  {
    "label": "CopyHelper()",
    "kind": "Method",
    "detail": "Function (} TImplicitObjectScaled<TConcrete,false>*)",
    "insertText": "CopyHelper(const TImplicitObjectScaled<TConcrete, false>* Obj)"
  },
  {
    "label": "InitScaledImplicit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitScaledImplicit(const FVec3& Scale, FReal InMargin = 0)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (this -> OuterMargin = InMargin ;)",
    "insertText": "SetScale(Scale)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const FVec3 Vector1 = UnscaledBounds .)",
    "insertText": "Min()"
  },
  {
    "label": "FAABB3()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox =)",
    "insertText": "FAABB3(Vector1, Vector1)"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox .)",
    "insertText": "GrowToInclude(Vector2)"
  },
  {
    "label": "MakeScaledHelper()",
    "kind": "Method",
    "detail": "Function (} template<QueryGeomType> auto)",
    "insertText": "MakeScaledHelper(const QueryGeomType& B, const TVector<T,d>& InvScale)"
  },
  {
    "label": "MakeScaledHelper()",
    "kind": "Method",
    "detail": "Function (} template<QueryGeomType> auto)",
    "insertText": "MakeScaledHelper(const TImplicitObjectScaled<QueryGeomType>& B, const TVector<T,d>& InvScale)"
  },
  {
    "label": "ScaledB()",
    "kind": "Method",
    "detail": "Function (TImplicitObjectScaled<QueryGeomType>)",
    "insertText": "ScaledB(B.Object(), InvScale * B.GetScale())"
  },
  {
    "label": "IsBaseOf()",
    "kind": "Method",
    "detail": "Function (} template<> struct TImplicitTypeInfo<FImplicitObjectInstanced> { bool)",
    "insertText": "IsBaseOf(const EImplicitObjectType InType)"
  },
  {
    "label": "UnwrapImplicit()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> const T*)",
    "insertText": "UnwrapImplicit(const FImplicitObject& Implicit, FVec3& OutScale, FReal &OutMargin)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (OutScale =)",
    "insertText": "FVec3(1)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (OutMargin =)",
    "insertText": "FReal(0)"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (OutScale = ScaledImplicit ->)",
    "insertText": "GetScale()"
  },
  {
    "label": "GetMargin()",
    "kind": "Method",
    "detail": "Function (OutMargin = ScaledImplicit ->)",
    "insertText": "GetMargin()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const TImplicitObjectInstanced<T>* InstancedImplicit = Implicit.template GetObject<TImplicitObjectInstanced<T>>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const T* RawImplicit = Implicit.template GetObject<T>())"
  }
]