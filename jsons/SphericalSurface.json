[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FSphericalSurface()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Surfaces / Surface . h \" namespace UE::CADKernel { class FSphericalSurface : public FSurface { FEntity ; protected : FMatrixH Matrix ; double Radius ;)",
    "insertText": "FSphericalSurface(const double InToleranceGeometric, const FMatrixH& InMatrix, double InRadius, double InParallelStartAngle = 0.0, double InParallelEndAngle = DOUBLE_TWO_PI, double InMeridianStartAngle = -DOUBLE_HALF_PI, double InMeridianEndAngle = DOUBLE_HALF_PI) : FSphericalSurface(InToleranceGeometric, InMatrix, InRadius, FSurfacicBoundary(InParallelStartAngle, InParallelEndAngle, InMeridianStartAngle, InMeridianEndAngle))"
  },
  {
    "label": "FSphericalSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSphericalSurface(const double InToleranceGeometric, const FMatrixH& InMatrix, double InRadius, const FSurfacicBoundary& Boundary) : FSurface(InToleranceGeometric, Boundary) , Matrix(InMatrix) , Radius(InRadius)"
  },
  {
    "label": "ComputeMinToleranceIso()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeMinToleranceIso()"
  },
  {
    "label": "FSphericalSurface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSphericalSurface()"
  },
  {
    "label": "ComputeScaleAlongAxis()",
    "kind": "Method",
    "detail": "Function (FPoint Point2DU { 1,0,0 } ; FPoint Point2DV { 0,1,0 } ; double ToleranceU = Tolerance2D /)",
    "insertText": "ComputeScaleAlongAxis(Point2DU, Matrix, Origin)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (MinToleranceIso .)",
    "insertText": "Set(ToleranceU, ToleranceV)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetSurfaceType()",
    "kind": "Method",
    "detail": "Function (Ar<<Matrix ; Ar<<Radius ; } ESurface)",
    "insertText": "GetSurfaceType()"
  },
  {
    "label": "ApplyMatrix()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrix(const FMatrixH& InMatrix)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(const FPoint2D& InSurfacicCoordinate, FSurfacicPoint& OutPoint3D, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . DerivativeOrder = InDerivativeOrder ; OutPoint3D . Point .)",
    "insertText": "Set(Radius * CosV * CosU, Radius * CosV * SinU, Radius * SinV)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . Point = Matrix .)",
    "insertText": "Multiply(OutPoint3D.Point)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . GradientU =)",
    "insertText": "FPoint(-Radius * CosV * SinU, Radius * CosV * CosU, 0.0)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . GradientV =)",
    "insertText": "FPoint(-Radius * SinV * CosU, -Radius * SinV * SinU, Radius * CosV)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . GradientU = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.GradientU)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . GradientV = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.GradientV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InDerivativeOrder > 1)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianU =)",
    "insertText": "FPoint(-Radius * CosV * CosU, -Radius * CosV * SinU, 0.0)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianV =)",
    "insertText": "FPoint(OutPoint3D.LaplacianU.X, OutPoint3D.LaplacianU.Y, -Radius * SinV)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianUV =)",
    "insertText": "FPoint(Radius * SinV * SinU, -Radius * SinV * CosU, 0.)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianU = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.LaplacianU)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianV = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.LaplacianV)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint3D . LaplacianUV = Matrix .)",
    "insertText": "MultiplyVector(OutPoint3D.LaplacianUV)"
  },
  {
    "label": "EvaluatePointGrid()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EvaluatePointGrid(const FCoordinateGrid& Coordinates, FSurfacicSampling& OutPoints, bool bComputeNormals = false)"
  },
  {
    "label": "EvaluatePointInCylindricalSpace()",
    "kind": "Method",
    "detail": "Function (FPoint2D)",
    "insertText": "EvaluatePointInCylindricalSpace(const FPoint2D& InSurfacicCoordinate)"
  },
  {
    "label": "EvaluatePointGridInCylindricalSpace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluatePointGridInCylindricalSpace(const FCoordinateGrid& Coordinates, TArray<FPoint2D>&)"
  },
  {
    "label": "Presample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Presample(const FSurfacicBoundary& InBoundaries, FCoordinateGrid& OutCoordinates)"
  },
  {
    "label": "PresampleIsoCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresampleIsoCircle(InBoundaries, OutCoordinates, EIso::IsoU)"
  },
  {
    "label": "PresampleIsoCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresampleIsoCircle(InBoundaries, OutCoordinates, EIso::IsoV)"
  }
]