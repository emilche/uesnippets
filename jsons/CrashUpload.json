[
  {
    "label": "FCompressedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedData"
  },
  {
    "label": "FCompressedHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedHeader"
  },
  {
    "label": "FCrashUploadBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCrashUploadBase"
  },
  {
    "label": "EUploadState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EUploadState"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FCrashUploadToReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCrashUploadToReceiver"
  },
  {
    "label": "FCrashUploadToDataRouter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCrashUploadToDataRouter"
  },
  {
    "label": "FCrashUploadBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Interfaces / IHttpRequest . h \" # include \" Internationalization / Text . h \" # include \" PlatformErrorReport . h \" # include \" ProfilingDebugging / ScopedTimers . h \" # include \" Templates / SharedPointer . h \" struct FCompressedData ; struct FCompressedHeader ; class FCrashUploadBase { public :)",
    "insertText": "FCrashUploadBase()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetCurrentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentState(EUploadState::Cancelled)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "StaticShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticShutdown()"
  },
  {
    "label": "CompressData()",
    "kind": "Method",
    "detail": "Function (protected : struct EUploadState { enum Type { NotSet,PingingServer,Ready,CheckingReport,CheckingReportDetail,CompressAndSendData,WaitingToPostReportComplete,PostingReportComplete,Finished,ServerNotAvailable,UploadError,Cancelled,Disabled,FirstCompletedState = Finished,} ; } ; bool)",
    "insertText": "CompressData(const TArray<FString>& InPendingFiles, struct FCompressedData& OutCompressedData, TArray<uint8>& OutPostData, struct FCompressedHeader* OptionalHeader = nullptr)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ToString(EUploadState::Type InState)"
  },
  {
    "label": "SetCurrentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentState(EUploadState::Type InState)"
  },
  {
    "label": "AddReportToFailedList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReportToFailedList()"
  },
  {
    "label": "CleanCrashReportDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanCrashReportDirectory(const FString& CrashReportDirectory)"
  },
  {
    "label": "FCrashUploadToReceiver()",
    "kind": "Method",
    "detail": "Function (protected : bool bUploadCalled ; EUploadState::Type State ; FText UploadStateText ; EUploadState::Type PauseState ; TArray<FString> PendingFiles ; FPlatformErrorReport ErrorReport ; TArray<uint8> PostData ; int32 PendingReportDirectoryIndex ; protected : bool bInitialized ; TArray<FString> PendingReportDirectories ; TArray<FString> FailedReportDirectories ; } ; class FCrashUploadToReceiver : public FCrashUploadBase { public :)",
    "insertText": "FCrashUploadToReceiver(const FString& InReceiverAddress)"
  },
  {
    "label": "FCrashUploadToReceiver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCrashUploadToReceiver()"
  },
  {
    "label": "BeginUpload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUpload(const FPlatformErrorReport& PlatformErrorReport)"
  },
  {
    "label": "SendCheckReportRequest()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "SendCheckReportRequest()"
  },
  {
    "label": "CompressAndSendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressAndSendData()"
  },
  {
    "label": "AssignReportIdToPostDataBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignReportIdToPostDataBuffer()"
  },
  {
    "label": "PostReportComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostReportComplete()"
  },
  {
    "label": "OnProcessRequestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnProcessRequestComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded)"
  },
  {
    "label": "OnPingSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPingSuccess()"
  },
  {
    "label": "PingTimeout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PingTimeout(float DeltaTime)"
  },
  {
    "label": "CheckPendingReportsForFilesToUpload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckPendingReportsForFilesToUpload()"
  },
  {
    "label": "BeginUploadImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUploadImpl()"
  },
  {
    "label": "CreateHttpRequest()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IHttpRequest,ESPMode::ThreadSafe>)",
    "insertText": "CreateHttpRequest()"
  },
  {
    "label": "SendPingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPingRequest()"
  },
  {
    "label": "ParseServerResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseServerResponse(FHttpResponsePtr Response, bool& OutValidReport)"
  },
  {
    "label": "FCrashUploadToDataRouter()",
    "kind": "Method",
    "detail": "Function (FString UrlPrefix ; } ; class FCrashUploadToDataRouter : public FCrashUploadBase { public :)",
    "insertText": "FCrashUploadToDataRouter(const FString& InDataRouterUrl)"
  },
  {
    "label": "FCrashUploadToDataRouter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCrashUploadToDataRouter()"
  }
]