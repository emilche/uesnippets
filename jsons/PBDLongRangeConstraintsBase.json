[
  {
    "label": "FPBDLongRangeConstraintsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDLongRangeConstraintsBase"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDActiveView . h \" # include \" Chaos / PBDStiffness . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" namespace Chaos::Softs { class FPBDLongRangeConstraintsBase { public :)",
    "insertText": "UE_NONCOPYABLE(FPBDLongRangeConstraintsBase)"
  },
  {
    "label": "MinTetherScale()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MinTetherScale(FSolverReal)"
  },
  {
    "label": "MaxTetherScale()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxTetherScale(FSolverReal)"
  },
  {
    "label": "FPBDLongRangeConstraintsBase()",
    "kind": "Method",
    "detail": "Function (typedef TTuple<int32,int32,FRealSingle> FTether ;)",
    "insertText": "FPBDLongRangeConstraintsBase(const FSolverParticlesRange& Particles, const TArray<TConstArrayView<TTuple<int32, int32, FRealSingle>>>& InTethers, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& ScaleMultipliers, const FSolverVec2& InStiffness = FSolverVec2::UnitVector, const FSolverVec2& InScale = FSolverVec2::UnitVector, FSolverReal MaxStiffness = FPBDStiffness::DefaultPBDMaxStiffness, FSolverReal MeshScale = (FSolverReal)1.)"
  },
  {
    "label": "FPBDLongRangeConstraintsBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPBDLongRangeConstraintsBase(const FSolverParticles& Particles, const int32 InParticleOffset, const int32 InParticleCount, const TArray<TConstArrayView<TTuple<int32, int32, FRealSingle>>>& InTethers, const TConstArrayView<FRealSingle>& StiffnessMultipliers, const TConstArrayView<FRealSingle>& ScaleMultipliers, const FSolverVec2& InStiffness = FSolverVec2::UnitVector, const FSolverVec2& InScale = FSolverVec2::UnitVector, FSolverReal MaxStiffness = FPBDStiffness::DefaultPBDMaxStiffness, FSolverReal MeshScale = (FSolverReal)1.)"
  },
  {
    "label": "FPBDLongRangeConstraintsBase()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS ~)",
    "insertText": "FPBDLongRangeConstraintsBase()"
  },
  {
    "label": "GetStiffness()",
    "kind": "Method",
    "detail": "Function (} PRAGMA_ENABLE_DEPRECATION_WARNINGS FSolverVec2)",
    "insertText": "GetStiffness()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FSolverVec2& InStiffness, const FSolverVec2& InTetherScale, FSolverReal MeshScale = (FSolverReal)1.)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "SetWeightedValue(InStiffness)"
  },
  {
    "label": "SetWeightedValue()",
    "kind": "Method",
    "detail": "Function (TetherScale .)",
    "insertText": "SetWeightedValue(InTetherScale.ClampAxes(MinTetherScale, MaxTetherScale) * MeshScale)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyProperties(const FSolverReal Dt, const int32 NumIterations)"
  },
  {
    "label": "ApplyPBDValues()",
    "kind": "Method",
    "detail": "Function (Stiffness .)",
    "insertText": "ApplyPBDValues(Dt, NumIterations)"
  },
  {
    "label": "ApplyValues()",
    "kind": "Method",
    "detail": "Function (TetherScale .)",
    "insertText": "ApplyValues()"
  },
  {
    "label": "GetTethers()",
    "kind": "Method",
    "detail": "Function (} const TArray<TConstArrayView<FTether>>&)",
    "insertText": "GetTethers()"
  },
  {
    "label": "GetStartParticle()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetStartParticle(const FTether& Tether)"
  },
  {
    "label": "GetEndIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEndIndex(const FTether& Tether)"
  },
  {
    "label": "GetEndParticle()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEndParticle(const FTether& Tether)"
  },
  {
    "label": "GetRefLength()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "GetRefLength(const FTether& Tether)"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "GetScale(const FTether& Tether)"
  },
  {
    "label": "GetTargetLength()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "GetTargetLength(const FTether& Tether)"
  },
  {
    "label": "GetMinParallelBatchSize()",
    "kind": "Method",
    "detail": "Function (} protected : int32)",
    "insertText": "GetMinParallelBatchSize()"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> FSolverVec3)",
    "insertText": "GetDelta(const SolverParticlesOrRange& Particles, const FTether& Tether, const FSolverReal InScale)"
  },
  {
    "label": "GetStartParticle()",
    "kind": "Method",
    "detail": "Function (const int32 Start =)",
    "insertText": "GetStartParticle(Tether)"
  },
  {
    "label": "GetEndParticle()",
    "kind": "Method",
    "detail": "Function (const int32 End =)",
    "insertText": "GetEndParticle(Tether)"
  },
  {
    "label": "GetRefLength()",
    "kind": "Method",
    "detail": "Function (const FSolverReal TargetLength =)",
    "insertText": "GetRefLength(Tether)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (FSolverVec3 Direction = Particles .)",
    "insertText": "P(Start) - Particles.P(End)"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Length = Direction .)",
    "insertText": "SafeNormalize()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Offset = Length - TargetLength ; return)",
    "insertText": "Offset(FSolverReal)0. ? FSolverVec3((FSolverReal)0.)"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (} ; template<SolverParticlesOrRange> void)",
    "insertText": "GetDelta(const SolverParticlesOrRange& Particles, const FTether& Tether, const FSolverReal InScale, FSolverVec3& OutDirection, FSolverReal& OutOffset)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (OutOffset =)",
    "insertText": "Max((FSolverReal)0., Length - TargetLength)"
  }
]