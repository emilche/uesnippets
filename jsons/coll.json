[
  {
    "label": "StringEnumeration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringEnumeration"
  },
  {
    "label": "CollatorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollatorFactory"
  },
  {
    "label": "CollationKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollationKey"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "ECollationStrength",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollationStrength"
  },
  {
    "label": "EComparisonResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EComparisonResult"
  },
  {
    "label": "CFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CFactory"
  },
  {
    "label": "SimpleCFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleCFactory"
  },
  {
    "label": "ICUCollatorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICUCollatorFactory"
  },
  {
    "label": "ICUCollatorService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICUCollatorService"
  },
  {
    "label": "Collator()",
    "kind": "Method",
    "detail": "Function (# ifndef COLL_H # define COLL_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_COLLATION # include \" unicode / uobject . h \" # include \" unicode / ucol . h \" # include \" unicode / unorm . h \" # include \" unicode / locid . h \" # include \" unicode / uniset . h \" # include \" unicode / umisc . h \" # include \" unicode / uiter . h \" # include \" unicode / stringpiece . h \" U_NAMESPACE_BEGIN class StringEnumeration ; # if ! UCONFIG_NO_SERVICE class CollatorFactory ; # endif class CollationKey ; class U_I18N_API Collator : public UObject { public : enum ECollationStrength { PRIMARY = UCOL_PRIMARY,SECONDARY = UCOL_SECONDARY,TERTIARY = UCOL_TERTIARY,QUATERNARY = UCOL_QUATERNARY,IDENTICAL = UCOL_IDENTICAL } ; enum EComparisonResult { LESS = UCOL_LESS,EQUAL = UCOL_EQUAL,GREATER = UCOL_GREATER } ; ~)",
    "insertText": "Collator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Collator& other)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Collator*)",
    "insertText": "clone(void)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (Collator* U_EXPORT2)",
    "insertText": "createInstance(UErrorCode& err)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (Collator* U_EXPORT2)",
    "insertText": "createInstance(const Locale& loc, UErrorCode& err)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (EComparisonResult)",
    "insertText": "compare(const UnicodeString& source, const UnicodeString& target)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compare(const UnicodeString& source, const UnicodeString& target, UErrorCode &status)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (EComparisonResult)",
    "insertText": "compare(const UnicodeString& source, const UnicodeString& target, int32_t length)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compare(const UnicodeString& source, const UnicodeString& target, int32_t length, UErrorCode &status)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (EComparisonResult)",
    "insertText": "compare(const char16_t* source, int32_t sourceLength, const char16_t* target, int32_t targetLength)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compare(const char16_t* source, int32_t sourceLength, const char16_t* target, int32_t targetLength, UErrorCode &status)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compare(UCharIterator &sIter, UCharIterator &tIter, UErrorCode &status)"
  },
  {
    "label": "compareUTF8()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "compareUTF8(const StringPiece &source, const StringPiece &target, UErrorCode &status)"
  },
  {
    "label": "getCollationKey()",
    "kind": "Method",
    "detail": "Function (CollationKey&)",
    "insertText": "getCollationKey(const UnicodeString& source, CollationKey& key, UErrorCode& status)"
  },
  {
    "label": "getCollationKey()",
    "kind": "Method",
    "detail": "Function (CollationKey&)",
    "insertText": "getCollationKey(const char16_t*source, int32_t sourceLength, CollationKey& key, UErrorCode& status)"
  },
  {
    "label": "hashCode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "hashCode(void)"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (Locale)",
    "insertText": "getLocale(ULocDataLocaleType type, UErrorCode& status)"
  },
  {
    "label": "greater()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "greater(const UnicodeString& source, const UnicodeString& target)"
  },
  {
    "label": "greaterOrEqual()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "greaterOrEqual(const UnicodeString& source, const UnicodeString& target)"
  },
  {
    "label": "equals()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "equals(const UnicodeString& source, const UnicodeString& target)"
  },
  {
    "label": "getStrength()",
    "kind": "Method",
    "detail": "Function (ECollationStrength)",
    "insertText": "getStrength(void)"
  },
  {
    "label": "setStrength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setStrength(ECollationStrength newStrength)"
  },
  {
    "label": "getReorderCodes()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getReorderCodes(int32_t *dest, int32_t destCapacity, UErrorCode& status)"
  },
  {
    "label": "setReorderCodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setReorderCodes(const int32_t* reorderCodes, int32_t reorderCodesLength, UErrorCode& status)"
  },
  {
    "label": "getEquivalentReorderCodes()",
    "kind": "Method",
    "detail": "Function (int32_t U_EXPORT2)",
    "insertText": "getEquivalentReorderCodes(int32_t reorderCode, int32_t* dest, int32_t destCapacity, UErrorCode& status)"
  },
  {
    "label": "getDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString& U_EXPORT2)",
    "insertText": "getDisplayName(const Locale& objectLocale, const Locale& displayLocale, UnicodeString& name)"
  },
  {
    "label": "getDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString& U_EXPORT2)",
    "insertText": "getDisplayName(const Locale& objectLocale, UnicodeString& name)"
  },
  {
    "label": "getAvailableLocales()",
    "kind": "Method",
    "detail": "Function (const Locale* U_EXPORT2)",
    "insertText": "getAvailableLocales(int32_t& count)"
  },
  {
    "label": "getAvailableLocales()",
    "kind": "Method",
    "detail": "Function (StringEnumeration* U_EXPORT2)",
    "insertText": "getAvailableLocales(void)"
  },
  {
    "label": "getKeywords()",
    "kind": "Method",
    "detail": "Function (StringEnumeration* U_EXPORT2)",
    "insertText": "getKeywords(UErrorCode& status)"
  },
  {
    "label": "getKeywordValues()",
    "kind": "Method",
    "detail": "Function (StringEnumeration* U_EXPORT2)",
    "insertText": "getKeywordValues(const char *keyword, UErrorCode& status)"
  },
  {
    "label": "getKeywordValuesForLocale()",
    "kind": "Method",
    "detail": "Function (StringEnumeration* U_EXPORT2)",
    "insertText": "getKeywordValuesForLocale(const char* keyword, const Locale& locale, UBool commonlyUsed, UErrorCode& status)"
  },
  {
    "label": "getFunctionalEquivalent()",
    "kind": "Method",
    "detail": "Function (Locale U_EXPORT2)",
    "insertText": "getFunctionalEquivalent(const char* keyword, const Locale& locale, UBool& isAvailable, UErrorCode& status)"
  },
  {
    "label": "registerInstance()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_SERVICE URegistryKey U_EXPORT2)",
    "insertText": "registerInstance(Collator* toAdopt, const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "registerFactory()",
    "kind": "Method",
    "detail": "Function (URegistryKey U_EXPORT2)",
    "insertText": "registerFactory(CollatorFactory* toAdopt, UErrorCode& status)"
  },
  {
    "label": "unregister()",
    "kind": "Method",
    "detail": "Function (UBool U_EXPORT2)",
    "insertText": "unregister(URegistryKey key, UErrorCode& status)"
  },
  {
    "label": "getVersion()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "getVersion(UVersionInfo info)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "setAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAttribute(UColAttribute attr, UColAttributeValue value, UErrorCode &status)"
  },
  {
    "label": "getAttribute()",
    "kind": "Method",
    "detail": "Function (UColAttributeValue)",
    "insertText": "getAttribute(UColAttribute attr, UErrorCode &status)"
  },
  {
    "label": "setMaxVariable()",
    "kind": "Method",
    "detail": "Function (Collator&)",
    "insertText": "setMaxVariable(UColReorderCode group, UErrorCode &errorCode)"
  },
  {
    "label": "getMaxVariable()",
    "kind": "Method",
    "detail": "Function (UColReorderCode)",
    "insertText": "getMaxVariable()"
  },
  {
    "label": "setVariableTop()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "setVariableTop(const char16_t *varTop, int32_t len, UErrorCode &status)"
  },
  {
    "label": "setVariableTop()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "setVariableTop(const UnicodeString &varTop, UErrorCode &status)"
  },
  {
    "label": "setVariableTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVariableTop(uint32_t varTop, UErrorCode &status)"
  },
  {
    "label": "getVariableTop()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getVariableTop(UErrorCode &status)"
  },
  {
    "label": "getTailoredSet()",
    "kind": "Method",
    "detail": "Function (UnicodeSet*)",
    "insertText": "getTailoredSet(UErrorCode &status)"
  },
  {
    "label": "safeClone()",
    "kind": "Method",
    "detail": "Function (Collator*)",
    "insertText": "safeClone(void)"
  },
  {
    "label": "getSortKey()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getSortKey(const UnicodeString& source, uint8_t* result, int32_t resultLength)"
  },
  {
    "label": "getSortKey()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getSortKey(const char16_t*source, int32_t sourceLength, uint8_t*result, int32_t resultLength)"
  },
  {
    "label": "getBound()",
    "kind": "Method",
    "detail": "Function (int32_t U_EXPORT2)",
    "insertText": "getBound(const uint8_t *source, int32_t sourceLength, UColBoundMode boundType, uint32_t noOfLevels, uint8_t *result, int32_t resultLength, UErrorCode &status)"
  },
  {
    "label": "Collator()",
    "kind": "Method",
    "detail": "Function (# ifndef)",
    "insertText": "Collator(UCollationStrength collationStrength, UNormalizationMode decompositionMode)"
  },
  {
    "label": "Collator()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "Collator(const Collator& other)"
  },
  {
    "label": "setLocales()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "setLocales(const Locale& requestedLocale, const Locale& validLocale, const Locale& actualLocale)"
  },
  {
    "label": "internalGetShortDefinitionString()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "internalGetShortDefinitionString(const char *locale, char *buffer, int32_t capacity, UErrorCode &status)"
  },
  {
    "label": "internalCompareUTF8()",
    "kind": "Method",
    "detail": "Function (UCollationResult)",
    "insertText": "internalCompareUTF8(const char *left, int32_t leftLength, const char *right, int32_t rightLength, UErrorCode &errorCode)"
  },
  {
    "label": "internalNextSortKeyPart()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "internalNextSortKeyPart(UCharIterator *iter, uint32_t state[2], uint8_t *dest, int32_t count, UErrorCode &errorCode)"
  },
  {
    "label": "fromUCollator()",
    "kind": "Method",
    "detail": "Function (# ifndef Collator*)",
    "insertText": "fromUCollator(UCollator *uc)"
  },
  {
    "label": "fromUCollator()",
    "kind": "Method",
    "detail": "Function (} const Collator*)",
    "insertText": "fromUCollator(const UCollator *uc)"
  },
  {
    "label": "toUCollator()",
    "kind": "Method",
    "detail": "Function (} UCollator*)",
    "insertText": "toUCollator()"
  },
  {
    "label": "makeInstance()",
    "kind": "Method",
    "detail": "Function (class CFactory ; class SimpleCFactory ; class ICUCollatorFactory ; class ICUCollatorService ; Collator*)",
    "insertText": "makeInstance(const Locale& desiredLocale, UErrorCode& status)"
  },
  {
    "label": "CollatorFactory()",
    "kind": "Method",
    "detail": "Function (} ; # if ! UCONFIG_NO_SERVICE class U_I18N_API CollatorFactory : public UObject { public : ~)",
    "insertText": "CollatorFactory()"
  },
  {
    "label": "visible()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "visible(void)"
  },
  {
    "label": "createCollator()",
    "kind": "Method",
    "detail": "Function (Collator*)",
    "insertText": "createCollator(const Locale& loc)"
  },
  {
    "label": "getDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getDisplayName(const Locale& objectLocale, const Locale& displayLocale, UnicodeString& result)"
  },
  {
    "label": "getSupportedIDs()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getSupportedIDs(int32_t &count, UErrorCode& status)"
  }
]