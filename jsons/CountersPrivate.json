[
  {
    "label": "TCounterData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCounterData"
  },
  {
    "label": "TCounterDataIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCounterDataIterator"
  },
  {
    "label": "FCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCounter"
  },
  {
    "label": "FCounterProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCounterProvider"
  },
  {
    "label": "TCounterDataIterator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" TraceServices / Model / Counters . h \" # include \" TraceServices / Model / Frames . h \" # define USE_VARIABLE_PAGED_ARRAY 1 # if USE_VARIABLE_PAGED_ARRAY # include \" Common / VariablePagedArray . h \" # else # include \" Common / PagedArray . h \" # endif namespace TraceServices { template<ValueType> class TCounterData ; template<ValueType> class TCounterDataIterator { public :)",
    "insertText": "TCounterDataIterator(const TCounterData<ValueType>& Outer, const TArray64<double>& FrameStartTimes) : FrameStartTimesIterator(FrameStartTimes.CreateConstIterator()) , TimestampsIterator(Outer.Timestamps.GetIterator()) , OpTypesIterator(Outer.OpTypes.GetIterator()) , OpArgumentsIterator(Outer.OpArguments.GetIterator()) , CurrentTime(0.0) , CurrentOp(ECounterOpType::Set) , CurrentOpArgument(ValueType()) , CurrentValue(ValueType())"
  },
  {
    "label": "UpdateValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const ValueType)",
    "insertText": "operator()"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (TCounterDataIterator)",
    "insertText": "Tmp(*this)"
  },
  {
    "label": "GetCurrentItem()",
    "kind": "Method",
    "detail": "Function (const double* Time = TimestampsIterator .)",
    "insertText": "GetCurrentItem()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool bIsNewFrame = false ;)",
    "insertText": "while(FrameStartTimesIterator && *FrameStartTimesIterator < *Time)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (bIsNewFrame = true ; + + FrameStartTimesIterator ; } CurrentTime =* Time ; CurrentOp = bIsNewFrame ? ECounterOpType::Set :* OpTypesIterator ; CurrentOpArgument =* OpArgumentsIterator ;)",
    "insertText": "switch(CurrentOp)"
  },
  {
    "label": "InsertOp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertOp(double Timestamp, ECounterOpType OpType, ValueType OpArgument)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 InsertionIndex ;)",
    "insertText": "if(Timestamps.Num() == 0 || Timestamps.Last() <= Timestamp)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (InsertionIndex = Timestamps .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Timestamps.First() >= Timestamp)"
  },
  {
    "label": "GetIteratorFromItem()",
    "kind": "Method",
    "detail": "Function (InsertionIndex = 0 ; } else { auto TimestampIterator = Timestamps .)",
    "insertText": "GetIteratorFromItem(Timestamps.Num() - 1)"
  },
  {
    "label": "GetCurrentPage()",
    "kind": "Method",
    "detail": "Function (auto CurrentPage = TimestampIterator .)",
    "insertText": "GetCurrentPage()"
  },
  {
    "label": "PrevPage()",
    "kind": "Method",
    "detail": "Function (CurrentPage = TimestampIterator .)",
    "insertText": "PrevPage()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(CurrentPage != nullptr)"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (uint64 PageInsertionIndex =)",
    "insertText": "LowerBound(*CurrentPage, Timestamp)"
  },
  {
    "label": "GetCurrentItemIndex()",
    "kind": "Method",
    "detail": "Function (ItemCount)",
    "insertText": "GetCurrentItemIndex()"
  },
  {
    "label": "GetCurrentPageIndex()",
    "kind": "Method",
    "detail": "Function (# else InsertionIndex = TimestampIterator .)",
    "insertText": "GetCurrentPageIndex() * Timestamps.GetPageSize()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "check(InsertionIndex <= Timestamps.Num())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} Timestamps .)",
    "insertText": "Insert(InsertionIndex)"
  },
  {
    "label": "GetIterator()",
    "kind": "Method",
    "detail": "Function (} TIterator)",
    "insertText": "GetIterator(const TArray64<double>& FrameStartTimes)"
  },
  {
    "label": "GetFirstTimestamp()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetFirstTimestamp()"
  },
  {
    "label": "GetLastTimestamp()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetLastTimestamp()"
  },
  {
    "label": "FCounter()",
    "kind": "Method",
    "detail": "Function (} private : template<IteratorValueType> class TCounterDataIterator ; # if USE_VARIABLE_PAGED_ARRAY TVariablePagedArray<double> Timestamps ; TVariablePagedArray<ECounterOpType> OpTypes ; TVariablePagedArray<ValueType> OpArguments ; # else TPagedArray<double> Timestamps ; TPagedArray<ECounterOpType> OpTypes ; TPagedArray<ValueType> OpArguments ; # endif } ; class FCounter : public ICounter,public IEditableCounter { public :)",
    "insertText": "FCounter(ILinearAllocator& Allocator, const TArray64<double>& FrameStartTimes)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetGroup()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } const TCHAR*)",
    "insertText": "GetGroup()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (Group = InGroup ; } const TCHAR*)",
    "insertText": "GetDescription()"
  },
  {
    "label": "IsFloatingPoint()",
    "kind": "Method",
    "detail": "Function (Description = InDescription ; } bool)",
    "insertText": "IsFloatingPoint()"
  },
  {
    "label": "IsResetEveryFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResetEveryFrame()"
  },
  {
    "label": "GetDisplayHint()",
    "kind": "Method",
    "detail": "Function (bIsResetEveryFrame = bInIsResetEveryFrame ; } ECounterDisplayHint)",
    "insertText": "GetDisplayHint()"
  },
  {
    "label": "EnumerateValues()",
    "kind": "Method",
    "detail": "Function (DisplayHint = InDisplayHint ; } void)",
    "insertText": "EnumerateValues(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, int64)> Callback)"
  },
  {
    "label": "EnumerateFloatValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFloatValues(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, double)> Callback)"
  },
  {
    "label": "EnumerateOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateOps(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, ECounterOpType, int64)> Callback)"
  },
  {
    "label": "EnumerateFloatOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateFloatOps(double IntervalStart, double IntervalEnd, bool bIncludeExternalBounds, TFunctionRef<void(double, ECounterOpType, double)> Callback)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(double Time, int64 Value)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(double Time, double Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(double Time, int64 Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(double Time, double Value)"
  },
  {
    "label": "FCounterProvider()",
    "kind": "Method",
    "detail": "Function (private : const TArray64<double>& FrameStartTimes ; TCounterData<int64> IntCounterData ; TCounterData<double> DoubleCounterData ; const TCHAR* Name = nullptr ; const TCHAR* Group = nullptr ; const TCHAR* Description = nullptr ; uint64 ModCount = 0 ; ECounterDisplayHint DisplayHint = CounterDisplayHint_None ; bool bIsFloatingPoint = false ; bool bIsResetEveryFrame = false ; } ; class FCounterProvider : public ICounterProvider,public IEditableCounterProvider { public :)",
    "insertText": "FCounterProvider(IAnalysisSession& Session, IFrameProvider& FrameProvider)"
  },
  {
    "label": "FCounterProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCounterProvider()"
  },
  {
    "label": "GetCounterCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCounterCount()"
  },
  {
    "label": "EnumerateCounters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateCounters(TFunctionRef<void(uint32, const ICounter&)> Callback)"
  },
  {
    "label": "ReadCounter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCounter(uint32 CounterId, TFunctionRef<void(const ICounter&)> Callback)"
  },
  {
    "label": "GetCounter()",
    "kind": "Method",
    "detail": "Function (const ICounter*)",
    "insertText": "GetCounter(IEditableCounter* EditableCounter)"
  },
  {
    "label": "CreateEditableCounter()",
    "kind": "Method",
    "detail": "Function (IEditableCounter*)",
    "insertText": "CreateEditableCounter()"
  },
  {
    "label": "AddCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCounter(const ICounter* Counter)"
  }
]