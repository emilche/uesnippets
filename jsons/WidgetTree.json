[
  {
    "label": "UWidgetTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetTree"
  },
  {
    "label": "UPanelWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPanelWidget"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Widgets / SWidget . h \" # include \" Components / Widget . h \" # include \" Components / PanelWidget . h \" # include \" Components / NamedSlotInterface . h \" # include \" Blueprint / UserWidget . h \" # include \" WidgetTree . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UMG_API virtual UWorld* GetWorld()"
  },
  {
    "label": "FindWidget()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "FindWidget(const FName& Name)"
  },
  {
    "label": "FindWidget()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "FindWidget(TSharedRef<SWidget> InWidget)"
  },
  {
    "label": "RemoveWidget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveWidget(UWidget* Widget)"
  },
  {
    "label": "FindWidgetParent()",
    "kind": "Method",
    "detail": "Function (class UPanelWidget*)",
    "insertText": "FindWidgetParent(UWidget* Widget, int32& OutChildIndex)"
  },
  {
    "label": "FindWidgetChild()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "FindWidgetChild(UPanelWidget* ParentWidget, FName ChildWidgetName, int32& OutChildIndex)"
  },
  {
    "label": "FindChildIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindChildIndex(const UPanelWidget* ParentWidget, const UWidget* ChildWidget)"
  },
  {
    "label": "GetAllWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllWidgets(TArray<UWidget*>& Widgets)"
  },
  {
    "label": "GetChildWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildWidgets(UWidget* Parent, TArray<UWidget*>& Widgets)"
  },
  {
    "label": "TryMoveWidgetToNewTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryMoveWidgetToNewTree(UWidget* Widget, UWidgetTree* DestinationTree)"
  },
  {
    "label": "ForEachWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachWidget(TFunctionRef<void(UWidget*)> Predicate)"
  },
  {
    "label": "ForEachWidgetAndDescendants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachWidgetAndDescendants(TFunctionRef<void(UWidget*)> Predicate)"
  },
  {
    "label": "ForWidgetAndChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForWidgetAndChildren(UWidget* Widget, TFunctionRef<void(UWidget*)> Predicate)"
  },
  {
    "label": "ConstructWidget()",
    "kind": "Method",
    "detail": "Function (template<WidgetT> [ [ nodiscard ] ] WidgetT*)",
    "insertText": "ConstructWidget(TSubclassOf<WidgetT> WidgetClass = WidgetT::StaticClass(), FName WidgetName = NAME_None)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(std::is_base_of_v<UWidget, WidgetT>, \"WidgetTree::ConstructWidget can only create UWidget objects.\")"
  },
  {
    "label": "GetSlotNames()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } void)",
    "insertText": "GetSlotNames(TArray<FName>& SlotNames)"
  },
  {
    "label": "GetContentForSlot()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetContentForSlot(FName SlotName)"
  },
  {
    "label": "SetContentForSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContentForSlot(FName SlotName, UWidget* Content)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  }
]