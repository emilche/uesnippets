[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "FrameCombiner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameCombiner"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FrameCombiner()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_MIXER_FRAME_COMBINER_H_ # define MODULES_AUDIO_MIXER_FRAME_COMBINER_H_ # include<memory> # include<vector> # include \" api / array_view . h \" # include \" api / audio / audio_frame . h \" # include \" modules / audio_processing / agc2 / limiter . h \" namespace webrtc { class ApmDataDumper ; class FrameCombiner { public : enum class LimiterType { kNoLimiter,kApmAgcLimiter,kApmAgc2Limiter } ;)",
    "insertText": "FrameCombiner(bool use_limiter)"
  },
  {
    "label": "FrameCombiner()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FrameCombiner()"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Combine(rtc::ArrayView<AudioFrame* const> mix_list, size_t number_of_channels, int sample_rate, size_t number_of_streams, AudioFrame* audio_frame_for_mixing)"
  },
  {
    "label": "LogMixingStats()",
    "kind": "Method",
    "detail": "Function (size_t kMaximumNumberOfChannels = 8 ; size_t kMaximumChannelSize = 4 8* 1 0 ; using MixingBuffer = std::array<std::array<float,kMaximumChannelSize>,kMaximumNumberOfChannels> ; private : void)",
    "insertText": "LogMixingStats(rtc::ArrayView<const AudioFrame* const> mix_list, int sample_rate, size_t number_of_streams)"
  }
]