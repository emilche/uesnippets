[
  {
    "label": "FLwsSendBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLwsSendBuffer"
  },
  {
    "label": "FLwsReceiveBufferBinary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLwsReceiveBufferBinary"
  },
  {
    "label": "FLwsReceiveBufferBinaryFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLwsReceiveBufferBinaryFragment"
  },
  {
    "label": "FLwsReceiveBufferText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLwsReceiveBufferText"
  },
  {
    "label": "FLwsWebSocketsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLwsWebSocketsManager"
  },
  {
    "label": "FLwsWebSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLwsWebSocket"
  },
  {
    "label": "lws_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lws_context"
  },
  {
    "label": "FPrivateToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateToken"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FClosedReason",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClosedReason"
  },
  {
    "label": "FCloseRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCloseRequest"
  },
  {
    "label": "lws",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lws"
  },
  {
    "label": "FLwsSendBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Ticker . h \" # include \" Containers / Queue . h \" # if WITH_WEBSOCKETS&& WITH_LIBWEBSOCKETS # include \" IWebSocket . h \" # if PLATFORM_WINDOWS # include \" Windows / AllowWindowsPlatformTypes . h \" # endif THIRD_PARTY_INCLUDES_START # include \" libwebsockets . h \" THIRD_PARTY_INCLUDES_END # if PLATFORM_WINDOWS # include \" Windows / HideWindowsPlatformTypes . h \" # endif struct FLwsSendBuffer {)",
    "insertText": "FLwsSendBuffer(const uint8* Data, const SIZE_T Size, const bool bInIsBinary)"
  },
  {
    "label": "GetPayloadSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPayloadSize()"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDone()"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasError()"
  },
  {
    "label": "FLwsReceiveBufferBinaryFragment()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Payload ; const int32 BytesRemaining ; } ; typedef TUniquePtr<FLwsReceiveBufferBinary> FLwsReceiveBufferBinaryPtr ; struct FLwsReceiveBufferBinaryFragment {)",
    "insertText": "FLwsReceiveBufferBinaryFragment(const uint8* Data, const int32 Size, const bool bInIsLastFragment)"
  },
  {
    "label": "FLwsReceiveBufferText()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Payload ; const bool bIsLastFragment ; } ; typedef TUniquePtr<FLwsReceiveBufferBinaryFragment> FLwsReceiveBufferBinaryFragmentPtr ; struct FLwsReceiveBufferText {)",
    "insertText": "FLwsReceiveBufferText(FString&& InText)"
  },
  {
    "label": "FLwsWebSocket()",
    "kind": "Method",
    "detail": "Function (const FString Text ; } ; typedef TUniquePtr<FLwsReceiveBufferText> FLwsReceiveBufferTextPtr ; class FLwsWebSocketsManager ; class FLwsWebSocket : public IWebSocket,public TSharedFromThis<FLwsWebSocket> { public : ~)",
    "insertText": "FLwsWebSocket()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(const int32 Code = 1000, const FString& Reason = FString())"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(const void* Data, SIZE_T Size, bool bIsBinary)"
  },
  {
    "label": "SetTextMessageMemoryLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextMessageMemoryLimit(uint64 TextMessageMemoryLimit)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FLwsWebSocket, IWebSocket::FWebSocketConnectedEvent, FWebSocketConnectedEvent)"
  },
  {
    "label": "OnConnected()",
    "kind": "Method",
    "detail": "Function (FWebSocketConnectedEvent&)",
    "insertText": "OnConnected()"
  },
  {
    "label": "OnConnectionError()",
    "kind": "Method",
    "detail": "Function (FWebSocketConnectionErrorEvent&)",
    "insertText": "OnConnectionError()"
  },
  {
    "label": "OnClosed()",
    "kind": "Method",
    "detail": "Function (FWebSocketClosedEvent&)",
    "insertText": "OnClosed()"
  },
  {
    "label": "OnMessage()",
    "kind": "Method",
    "detail": "Function (FWebSocketMessageEvent&)",
    "insertText": "OnMessage()"
  },
  {
    "label": "OnBinaryMessage()",
    "kind": "Method",
    "detail": "Function (FWebSocketBinaryMessageEvent&)",
    "insertText": "OnBinaryMessage()"
  },
  {
    "label": "OnRawMessage()",
    "kind": "Method",
    "detail": "Function (FWebSocketRawMessageEvent&)",
    "insertText": "OnRawMessage()"
  },
  {
    "label": "OnMessageSent()",
    "kind": "Method",
    "detail": "Function (FWebSocketMessageSentEvent&)",
    "insertText": "OnMessageSent()"
  },
  {
    "label": "GameThreadTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThreadTick()"
  },
  {
    "label": "GameThreadFinalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GameThreadFinalize()"
  },
  {
    "label": "LwsThreadInitialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LwsThreadInitialize(struct lws_context &LwsContext)"
  },
  {
    "label": "LwsThreadTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LwsThreadTick()"
  },
  {
    "label": "FPrivateToken()",
    "kind": "Method",
    "detail": "Function (private : struct FPrivateToken {)",
    "insertText": "FPrivateToken()"
  },
  {
    "label": "FLwsWebSocket()",
    "kind": "Method",
    "detail": "Function (} ; class FLwsWebSocketsManager ; public :)",
    "insertText": "FLwsWebSocket(FPrivateToken, const FString& Url, const TArray<FString>& Protocols, const FString& UpgradeHeader, uint64 TextMessageMemoryLimit)"
  },
  {
    "label": "ConnectInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ConnectInternal(struct lws_context &LwsContext)"
  },
  {
    "label": "SendFromQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendFromQueue()"
  },
  {
    "label": "ClearData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearData()"
  },
  {
    "label": "WriteBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteBuffer(FLwsSendBuffer& Buffer)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection StateLock ; enum class EState : uint8 { None,StartConnecting,Connecting,Connected,ClosingByRequest,Closed,Error,} ; const TCHAR*)",
    "insertText": "ToString(const EState InState)"
  },
  {
    "label": "FCloseRequest()",
    "kind": "Method",
    "detail": "Function (struct FClosedReason { FString Reason ; uint16 CloseStatus ; bool bWasClean ; } ; EState State ; FClosedReason ClosedReason ; EState LastGameThreadState ; struct FCloseRequest {)",
    "insertText": "FCloseRequest() : Code(0), Reason(nullptr)"
  }
]