[
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UPawnMovementComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPawnMovementComponent"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GameFramework / NavMovementComponent . h \" # include \" PawnMovementComponent . generated . h \" class APawn ; class UPrimitiveComponent ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (AddForce,AddTorque,AddForceAtPosition,AddLinearVelocity,AddAngularVelocity,AddVelocityAtPosition,AddLinearImpulse,AddAngularImpulse,AddImpulseAtPosition,AddAcceleration,NumActions } ;)",
    "insertText": "UCLASS(abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API virtual void SetUpdatedComponent(USceneComponent* NewUpdatedComponent)"
  },
  {
    "label": "NotifyBumpedPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyBumpedPawn(APawn* BumpedPawn)"
  },
  {
    "label": "RequestPathMove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestPathMove(const FVector& MoveInput)"
  },
  {
    "label": "OnTeleported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTeleported()"
  },
  {
    "label": "ApplyAsyncPhysicsStateAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyAsyncPhysicsStateAction(const UPrimitiveComponent* ActionComponent, const FName& BoneName, const EPhysicsStateAction ActionType, const FVector& ActionDatas, const FVector& ActionPosition = FVector::Zero())"
  },
  {
    "label": "GetController()",
    "kind": "Method",
    "detail": "Function (AController*)",
    "insertText": "GetController()"
  },
  {
    "label": "MarkForClientCameraUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkForClientCameraUpdate()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "ExecuteAsyncPhysicsStateAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteAsyncPhysicsStateAction(const UPrimitiveComponent* ActionComponent, const FName& BoneName, const FAsyncPhysicsTimestamp& Timestamp, const EPhysicsStateAction ActionType, const FVector& ActionDatas, const FVector& ActionPosition = FVector::Zero())"
  }
]