[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "TaskQueuePacedSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueuePacedSender"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "BurstyPacerFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BurstyPacerFlags"
  },
  {
    "label": "SlackedPacerFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SlackedPacerFlags"
  },
  {
    "label": "TaskQueuePacedSender()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_PACING_TASK_QUEUE_PACED_SENDER_H_ # define MODULES_PACING_TASK_QUEUE_PACED_SENDER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_factory . h \" # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / pacing / pacing_controller . h \" # include \" modules / pacing / rtp_packet_pacer . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" modules / utility / maybe_worker_thread . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / numerics / exp_filter . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Clock ; class TaskQueuePacedSender : public RtpPacketPacer,public RtpPacketSender { public : const int kNoPacketHoldback ;)",
    "insertText": "TaskQueuePacedSender(Clock* clock, PacingController::PacketSender* packet_sender, const FieldTrialsView& field_trials, TaskQueueFactory* task_queue_factory, TimeDelta max_hold_back_window, int max_hold_back_window_in_packets)"
  },
  {
    "label": "TaskQueuePacedSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TaskQueuePacedSender()"
  },
  {
    "label": "EnsureStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureStarted()"
  },
  {
    "label": "EnqueuePackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueuePackets(std::vector<std::unique_ptr<RtpPacketToSend>> packets)"
  },
  {
    "label": "CreateProbeClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateProbeClusters(std::vector<ProbeClusterConfig> probe_cluster_configs)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resume()"
  },
  {
    "label": "SetCongested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCongested(bool congested)"
  },
  {
    "label": "SetPacingRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPacingRates(DataRate pacing_rate, DataRate padding_rate)"
  },
  {
    "label": "SetAccountForAudioPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAccountForAudioPackets(bool account_for_audio)"
  },
  {
    "label": "SetIncludeOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncludeOverhead()"
  },
  {
    "label": "SetTransportOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransportOverhead(DataSize overhead_per_packet)"
  },
  {
    "label": "OldestPacketWaitTime()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "OldestPacketWaitTime()"
  },
  {
    "label": "QueueSizeData()",
    "kind": "Method",
    "detail": "Function (DataSize)",
    "insertText": "QueueSizeData()"
  },
  {
    "label": "FirstSentPacketTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<Timestamp>)",
    "insertText": "FirstSentPacketTime()"
  },
  {
    "label": "ExpectedQueueTime()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "ExpectedQueueTime()"
  },
  {
    "label": "SetQueueTimeLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQueueTimeLimit(TimeDelta limit)"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (protected : struct Stats {)",
    "insertText": "Stats() : oldest_packet_enqueue_time(Timestamp::MinusInfinity()), queue_size(DataSize::Zero()), expected_queue_time(TimeDelta::Zero())"
  },
  {
    "label": "OnStatsUpdated()",
    "kind": "Method",
    "detail": "Function (} Timestamp oldest_packet_enqueue_time ; DataSize queue_size ; TimeDelta expected_queue_time ; absl::optional<Timestamp> first_sent_packet_time ; } ; void)",
    "insertText": "OnStatsUpdated(const Stats& stats)"
  },
  {
    "label": "MaybeProcessPackets()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MaybeProcessPackets(Timestamp scheduled_process_time)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats() RTC_RUN_ON(task_queue_)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "BurstyPacerFlags()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; struct BurstyPacerFlags {)",
    "insertText": "BurstyPacerFlags(const FieldTrialsView& field_trials)"
  },
  {
    "label": "SlackedPacerFlags()",
    "kind": "Method",
    "detail": "Function (FieldTrialOptional<TimeDelta> burst ; } ; const BurstyPacerFlags bursty_pacer_flags_ ; struct SlackedPacerFlags {)",
    "insertText": "SlackedPacerFlags(const FieldTrialsView& field_trials)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (FieldTrialFlag allow_low_precision ; FieldTrialOptional<TimeDelta> max_low_precision_expected_queue_time ; FieldTrialOptional<TimeDelta> send_burst_interval ; } ; const SlackedPacerFlags slacked_pacer_flags_ ; const TimeDelta max_hold_back_window_ ; const int max_hold_back_window_in_packets_ ; PacingController pacing_controller_)",
    "insertText": "RTC_GUARDED_BY(task_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex stats_mutex_ ; Stats current_stats_)",
    "insertText": "RTC_GUARDED_BY(stats_mutex_)"
  }
]