[
  {
    "label": "counting_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "counting_iterator"
  },
  {
    "label": "tuple_util",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuple_util"
  },
  {
    "label": "make_references",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "make_references"
  },
  {
    "label": "tuplewrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tuplewrapper"
  },
  {
    "label": "zip_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "zip_iterator"
  },
  {
    "label": "transform_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "transform_iterator"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_iterators_H # define __TBB_iterators_H # include<iterator> # include<limits> # include \" tbb_config . h \" # include \" tbb_stddef . h \" # if __TBB_CPP11_PRESENT # include<type_traits> namespace tbb { template<IntType> class counting_iterator {)",
    "insertText": "__TBB_STATIC_ASSERT(std::numeric_limits<IntType>::is_integer, \"Cannot instantiate counting_iterator with a non-integer type\")"
  },
  {
    "label": "counting_iterator()",
    "kind": "Method",
    "detail": "Function (public : typedef std::make_signed<IntType>::type difference_type ; typedef IntType value_type ; typedef const IntType* pointer ; typedef const IntType& reference ; typedef std::random_access_iterator_tag iterator_category ;)",
    "insertText": "counting_iterator() : my_counter()"
  },
  {
    "label": "counting_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "counting_iterator(IntType init) : my_counter(init)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} difference_type)",
    "insertText": "operator(const counting_iterator& it)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (my_counter + = forward ; return* this ; } counting_iterator&)",
    "insertText": "operator(difference_type backward)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (counting_iterator)",
    "insertText": "it(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} counting_iterator)",
    "insertText": "operator(difference_type forward)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} counting_iterator)",
    "insertText": "operator(difference_type forward, const counting_iterator it)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (} private : IntType my_counter ; } ; } # include<tuple> # include \" internal / _template_helpers . h \" namespace tbb { namespace internal { template<size_t N> struct tuple_util { template<TupleType,DifferenceType> void)",
    "insertText": "increment(TupleType& it, DifferenceType forward)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (std::get<)",
    "insertText": "N(it)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (tuple_util<N - 1)",
    "insertText": "increment(it, forward)"
  },
  {
    "label": "check_sync()",
    "kind": "Method",
    "detail": "Function (} template<TupleType,DifferenceType> bool)",
    "insertText": "check_sync(const TupleType& it1, const TupleType& it2, DifferenceType val)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct tuple_util<0> { template<TupleType,DifferenceType> void)",
    "insertText": "increment(TupleType&, DifferenceType)"
  },
  {
    "label": "check_sync()",
    "kind": "Method",
    "detail": "Function (} template<TupleType,DifferenceType> bool)",
    "insertText": "check_sync(const TupleType&, const TupleType&, DifferenceType)"
  },
  {
    "label": "tuplewrapper()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . T> struct tuplewrapper : public std::tuple<std::enable_if<std::is_reference<T>::value,T&&>::type . . .> { typedef std::tuple<T&& . . .> base_type ;)",
    "insertText": "tuplewrapper(const base_type& in) : base_type(in)"
  },
  {
    "label": "tuplewrapper()",
    "kind": "Method",
    "detail": "Function (} # if __INTEL_COMPILER)",
    "insertText": "tuplewrapper(const tuplewrapper& rhs) : base_type(rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} tuplewrapper&)",
    "insertText": "operator(const tuplewrapper& rhs)"
  },
  {
    "label": "base_type()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "base_type(rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "swap(tuplewrapper&& a, tuplewrapper&& b)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (std::swap<)",
    "insertText": "T(a,b)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (} } ; } template<. . . Types> class zip_iterator {)",
    "insertText": "__TBB_STATIC_ASSERT(sizeof...(Types), \"Cannot instantiate zip_iterator with empty template parameter pack\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const std::size_t num_types =)",
    "insertText": "sizeof(Types)"
  },
  {
    "label": "zip_iterator()",
    "kind": "Method",
    "detail": "Function (typedef std::tuple<Types . . .> it_types ; public : typedef std::make_signed<std::size_t>::type difference_type ; typedef std::tuple<std::iterator_traits<Types>::value_type . . .> value_type ; # if __INTEL_COMPILER&& __INTEL_COMPILER<1 8 0 0&& _MSC_VER typedef std::tuple<std::iterator_traits<Types>::reference . . .> reference ; # else typedef tbb::internal::tuplewrapper<std::iterator_traits<Types>::reference . . .> reference ; # endif typedef std::tuple<std::iterator_traits<Types>::pointer . . .> pointer ; typedef std::random_access_iterator_tag iterator_category ;)",
    "insertText": "zip_iterator() : my_it()"
  },
  {
    "label": "zip_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "zip_iterator(Types... args) : my_it(std::make_tuple(args...))"
  },
  {
    "label": "zip_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "zip_iterator(const zip_iterator& input) : my_it(input.my_it)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} zip_iterator&)",
    "insertText": "operator(const zip_iterator& input)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator(difference_type i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} difference_type)",
    "insertText": "operator(const zip_iterator& it)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(internal::tuple_util<num_types>::check_sync(my_it, it.my_it, std::get<0>(my_it) - std::get<0>(it.my_it)), \"Components of zip_iterator are not synchronous\")"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (internal::tuple_util<num_types)",
    "insertText": "increment(my_it, forward)"
  },
  {
    "label": "make_zip_iterator()",
    "kind": "Method",
    "detail": "Function (} private : it_types my_it ; } ; template<. . . T> zip_iterator<T . . .>)",
    "insertText": "make_zip_iterator(T... args)"
  },
  {
    "label": "UnaryFunc()",
    "kind": "Method",
    "detail": "Function (} template<UnaryFunc,Iter> class transform_iterator { public : typedef std::iterator_traits<Iter>::value_type value_type ; typedef std::iterator_traits<Iter>::difference_type difference_type ; # if __TBB_CPP17_INVOKE_RESULT_PRESENT typedef std::invoke_result<UnaryFunc,std::iterator_traits<Iter>::reference>::type reference ; # else typedef std::result_of<)",
    "insertText": "UnaryFunc(typename std::iterator_traits<Iter>::reference)"
  },
  {
    "label": "transform_iterator()",
    "kind": "Method",
    "detail": "Function (# endif typedef std::iterator_traits<Iter>::pointer pointer ; typedef std::random_access_iterator_tag iterator_category ;)",
    "insertText": "transform_iterator(Iter it, UnaryFunc unary_func) : my_it(it), my_unary_func(unary_func)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_STATIC_ASSERT((std::is_same<typename std::iterator_traits<Iter>::iterator_category, std::random_access_iterator_tag>::value), \"Random access iterator required.\")"
  },
  {
    "label": "transform_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "transform_iterator(const transform_iterator& input) : my_it(input.my_it), my_unary_func(input.my_unary_func)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} transform_iterator&)",
    "insertText": "operator(const transform_iterator& input)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- - my_it ; return* this ; } transform_iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (my_it - = backward ; return* this ; } transform_iterator)",
    "insertText": "operator(difference_type forward, const transform_iterator& it)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const transform_iterator& it)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} Iter)",
    "insertText": "base()"
  }
]