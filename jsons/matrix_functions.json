[
  {
    "label": "processTriangularMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "processTriangularMatrix"
  },
  {
    "label": "generateTestMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generateTestMatrix"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# include \" main . h \" # include<unsupported / Eigen / MatrixFunctions> template<MatrixType,int IsComplex = NumTraits<internal::traits<MatrixType>::Scalar>::IsComplex> struct processTriangularMatrix { void)",
    "insertText": "run(MatrixType&, MatrixType&, const MatrixType&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType> struct processTriangularMatrix<MatrixType,0> { void)",
    "insertText": "run(MatrixType& m, MatrixType& T, const MatrixType& U)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index size = m .)",
    "insertText": "cols()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType,int IsComplex = NumTraits<internal::traits<MatrixType>::Scalar>::IsComplex> struct generateTestMatrix ; template<MatrixType> struct generateTestMatrix<MatrixType,0> { void)",
    "insertText": "run(MatrixType& result, typename MatrixType::Index size)"
  },
  {
    "label": "Random()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "Random(size, size)"
  },
  {
    "label": "schur()",
    "kind": "Method",
    "detail": "Function (RealSchur<MatrixType>)",
    "insertText": "schur(result)"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (MatrixType T = schur .)",
    "insertText": "matrixT()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (processTriangularMatrix<MatrixType)",
    "insertText": "run(result, T, schur.matrixU())"
  },
  {
    "label": "relerr()",
    "kind": "Method",
    "detail": "Function (} } ; template<Derived,OtherDerived> Derived::RealScalar)",
    "insertText": "relerr(const MatrixBase<Derived>& A, const MatrixBase<OtherDerived>& B)"
  }
]