[
  {
    "label": "FSparseItemInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSparseItemInfo"
  },
  {
    "label": "FItemInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FItemInfo"
  },
  {
    "label": "STreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STreeView"
  },
  {
    "label": "FSparseItemInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Styling / SlateTypes . h \" # include \" Framework / Views / TableViewTypeTraits . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Framework / Layout / Overscroll . h \" # include \" Widgets / Views / SListView . h \" # include \" Algo / Reverse . h \" # include \" Math / NumericLimits . h \" struct FSparseItemInfo {)",
    "insertText": "FSparseItemInfo(bool InIsExpanded, bool InHasExpandedChildren ) : bIsExpanded( InIsExpanded ) , bHasExpandedChildren( InHasExpandedChildren)"
  },
  {
    "label": "FItemInfo()",
    "kind": "Method",
    "detail": "Function (} bool bIsExpanded ; bool bHasExpandedChildren ; } ; struct FItemInfo {)",
    "insertText": "FItemInfo()"
  },
  {
    "label": "FItemInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FItemInfo(TBitArray<> InNeedsVerticalWire, bool InHasChildren, bool InIsLastChild, int32 InParentIndex ) : NeedsVerticalWire(InNeedsVerticalWire) , bHasChildren( InHasChildren ) , bIsLastChild( InIsLastChild ) , ParentIndex( InParentIndex)"
  },
  {
    "label": "GetNestingLevel()",
    "kind": "Method",
    "detail": "Function (} TBitArray<> NeedsVerticalWire ; int32)",
    "insertText": "GetNestingLevel()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} uint32 bHasChildren : 1 ; uint32 bIsLastChild : 1 ; int32 ParentIndex ; } ; template<ItemType> class STreeView : public SListView<ItemType> { public : using NullableItemType = TListTypeTraits<ItemType>::NullableType ; using MapKeyFuncs = TListTypeTraits<ItemType>::MapKeyFuncs ; using MapKeyFuncsSparse = TListTypeTraits<ItemType>::MapKeyFuncsSparse ; using TSparseItemMap = TMap<ItemType,FSparseItemInfo,FDefaultSetAllocator,MapKeyFuncsSparse> ; using TItemSet = TSet<TObjectPtrWrapTypeOf<ItemType>,TListTypeTraits<TObjectPtrWrapTypeOf<ItemType>>::SetKeyFuncs> ; using FOnGetChildren = TSlateDelegates<ItemType>::FOnGetChildren ; using FOnGenerateRow = TSlateDelegates<ItemType>::FOnGenerateRow ; using FOnSetExpansionRecursive = TSlateDelegates<ItemType>::FOnSetExpansionRecursive ; using FOnItemScrolledIntoView = TSlateDelegates<ItemType>::FOnItemScrolledIntoView ; using FOnSelectionChanged = TSlateDelegates<NullableItemType>::FOnSelectionChanged ; using FIsSelectableOrNavigable = TSlateDelegates<ItemType>::FIsSelectableOrNavigable ; using FOnMouseButtonClick = TSlateDelegates<ItemType>::FOnMouseButtonClick ; using FOnMouseButtonDoubleClick = TSlateDelegates<ItemType>::FOnMouseButtonDoubleClick ; using FOnExpansionChanged = TSlateDelegates<ItemType>::FOnExpansionChanged ; using FOnItemToString_Debug = TSlateDelegates<ItemType>::FOnItemToString_Debug ; using FOnWidgetToBeRemoved = SListView<ItemType>::FOnWidgetToBeRemoved ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(STreeView<ItemType> ) : _TreeViewStyle(&FAppStyle::Get().GetWidgetStyle<FTableViewStyle>(\"TreeView\")) , _OnGenerateRow() , _OnGeneratePinnedRow() , _OnGetChildren() , _OnSetExpansionRecursive() , _MaxPinnedItems(6) , _OnContextMenuOpening() , _OnItemsRebuilt() , _OnMouseButtonClick() , _OnMouseButtonDoubleClick() , _OnSelectionChanged() , _OnExpansionChanged() , _OnIsSelectableOrNavigable() , _SelectionMode(ESelectionMode::Multi) , _ClearSelectionOnClick(true) , _ExternalScrollbar() , _EnableAnimatedScrolling(false) , _ScrollbarDragFocusCause(EFocusCause::Mouse) , _ConsumeMouseWheel( EConsumeMouseWheel::WhenScrollingPossible ) , _AllowOverscroll(EAllowOverscroll::Yes) , _ScrollBarStyle(&FAppStyle::Get().GetWidgetStyle<FScrollBarStyle>(\"ScrollBar\")) , _PreventThrottling(false) , _WheelScrollMultiplier(GetGlobalScrollAmount()) , _OnItemToString_Debug() , _OnEnteredBadState() , _HandleGamepadEvents(true) , _HandleDirectionalNavigation(true) , _AllowInvisibleItemSelection(false) , _HighlightParentNodesForSelection(false) , _ReturnFocusToSelection() , _ShouldStackHierarchyHeaders(false)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (this -> _Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_STYLE_ARGUMENT(FTableViewStyle, TreeViewStyle ) SLATE_EVENT( FOnGenerateRow, OnGenerateRow ) SLATE_EVENT( FOnGenerateRow, OnGeneratePinnedRow ) SLATE_EVENT( FOnWidgetToBeRemoved, OnRowReleased ) SLATE_EVENT( FOnTableViewScrolled, OnTreeViewScrolled ) SLATE_EVENT( FOnItemScrolledIntoView, OnItemScrolledIntoView ) SLATE_EVENT( FOnGetChildren, OnGetChildren ) SLATE_EVENT( FOnSetExpansionRecursive, OnSetExpansionRecursive ) SLATE_ITEMS_SOURCE_ARGUMENT( ItemType, TreeItemsSource ) SLATE_ATTRIBUTE_DEPRECATED(float, ItemHeight, 5.5, \"The ItemHeight is only used for Tile. See ShouldArrangeAsTiles\") SLATE_ATTRIBUTE( int32, MaxPinnedItems)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FOnContextMenuOpening, OnContextMenuOpening ) SLATE_EVENT( FSimpleDelegate, OnItemsRebuilt ) SLATE_EVENT( FOnMouseButtonClick, OnMouseButtonClick) SLATE_EVENT( FOnMouseButtonDoubleClick, OnMouseButtonDoubleClick ) SLATE_EVENT( FOnSelectionChanged, OnSelectionChanged ) SLATE_EVENT( FOnExpansionChanged, OnExpansionChanged ) SLATE_EVENT( FIsSelectableOrNavigable, OnIsSelectableOrNavigable) SLATE_ATTRIBUTE( ESelectionMode::Type, SelectionMode ) SLATE_ARGUMENT( TSharedPtr<SHeaderRow>, HeaderRow ) SLATE_ARGUMENT ( bool, ClearSelectionOnClick ) SLATE_ARGUMENT( TSharedPtr<SScrollBar>, ExternalScrollbar ) SLATE_ARGUMENT( bool, EnableAnimatedScrolling) SLATE_ARGUMENT( TOptional<double>, FixedLineScrollOffset ) SLATE_ARGUMENT( EFocusCause, ScrollbarDragFocusCause ) SLATE_ARGUMENT( EConsumeMouseWheel, ConsumeMouseWheel)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(EAllowOverscroll, AllowOverscroll)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_STYLE_ARGUMENT(FScrollBarStyle, ScrollBarStyle)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, PreventThrottling ) SLATE_ARGUMENT( float, WheelScrollMultiplier)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_EVENT(FOnItemToString_Debug, OnItemToString_Debug) SLATE_EVENT(FOnTableViewBadState, OnEnteredBadState)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, HandleGamepadEvents)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, HandleDirectionalNavigation)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, AllowInvisibleItemSelection)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, HighlightParentNodesForSelection)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT(bool, ReturnFocusToSelection) SLATE_ATTRIBUTE(bool, ShouldStackHierarchyHeaders) SLATE_EVENT(FOnKeyDown, OnKeyDownHandler) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SetRootItemsSource()",
    "kind": "Method",
    "detail": "Function (this -> Clipping = InArgs . _Clipping ; this -> OnGenerateRow = InArgs . _OnGenerateRow ; this -> OnGeneratePinnedRow = InArgs . _OnGeneratePinnedRow ; this -> OnRowReleased = InArgs . _OnRowReleased ; this -> OnItemScrolledIntoView = InArgs . _OnItemScrolledIntoView ; this -> OnGetChildren = InArgs . _OnGetChildren ; this -> OnSetExpansionRecursive = InArgs . _OnSetExpansionRecursive ; this ->)",
    "insertText": "SetRootItemsSource(InArgs.MakeTreeItemsSource(this->SharedThis(this)))"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (this -> OnKeyDownHandler = InArgs . _OnKeyDownHandler ; this -> OnContextMenuOpening = InArgs . _OnContextMenuOpening ; this -> OnItemsRebuilt = InArgs . _OnItemsRebuilt ; this -> OnClick = InArgs . _OnMouseButtonClick ; this -> OnDoubleClick = InArgs . _OnMouseButtonDoubleClick ; this -> OnSelectionChanged = InArgs . _OnSelectionChanged ; this -> OnExpansionChanged = InArgs . _OnExpansionChanged ; this -> OnIsSelectableOrNavigable = InArgs . _OnIsSelectableOrNavigable ; this -> SelectionMode = InArgs . _SelectionMode ; this -> bClearSelectionOnClick = InArgs . _ClearSelectionOnClick ; this -> ConsumeMouseWheel = InArgs . _ConsumeMouseWheel ; this -> AllowOverscroll = InArgs . _AllowOverscroll ; this -> WheelScrollMultiplier = InArgs . _WheelScrollMultiplier ; this -> bEnableAnimatedScrolling = InArgs . _EnableAnimatedScrolling ; this -> FixedLineScrollOffset = InArgs . _FixedLineScrollOffset ; this -> OnItemToString_Debug = InArgs . _OnItemToString_Debug .)",
    "insertText": "IsBound() ? InArgs._OnItemToString_Debug : SListView< ItemType >::GetDefaultDebugDelegate()"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (this -> OnEnteredBadState = InArgs . _OnEnteredBadState ; this -> bHandleGamepadEvents = InArgs . _HandleGamepadEvents ; this -> bHandleDirectionalNavigation = InArgs . _HandleDirectionalNavigation ; this -> bAllowInvisibleItemSelection = InArgs . _AllowInvisibleItemSelection ; this -> bHighlightParentNodesForSelection = InArgs . _HighlightParentNodesForSelection ; this -> bReturnFocusToSelection = InArgs . _ReturnFocusToSelection ; this -> bShouldStackHierarchyHeaders = InArgs . _ShouldStackHierarchyHeaders ; this ->)",
    "insertText": "SetStyle(InArgs._TreeViewStyle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> MaxPinnedItems = InArgs . _MaxPinnedItems ; this -> DefaultMaxPinnedItems = InArgs . _MaxPinnedItems ; FString ErrorString ; {)",
    "insertText": "if(!this->OnGenerateRow.IsBound())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ErrorString + =)",
    "insertText": "TEXT(\"Please specify an OnGenerateRow. \\n\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!this->HasValidRootItemsSource())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ErrorString + =)",
    "insertText": "TEXT(\"Please specify a TreeItemsSource. \\n\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!this->OnGetChildren.IsBound())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ErrorString + =)",
    "insertText": "TEXT(\"Please specify an OnGetChildren. \\n\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(ErrorString.Len() > 0)"
  },
  {
    "label": "HAlign()",
    "kind": "Method",
    "detail": "Function (this -> ChildSlot .)",
    "insertText": "HAlign(HAlign_Center) .VAlign(VAlign_Center) [ SNew(STextBlock) .Text(FText::FromString(ErrorString))"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (} else { this ->)",
    "insertText": "ConstructChildren(0.0f, 0.0f, EListItemAlignment::LeftAligned, InArgs._HeaderRow, InArgs._ExternalScrollbar, Orient_Vertical, InArgs._OnTreeViewScrolled, InArgs._ScrollBarStyle, InArgs._PreventThrottling)"
  },
  {
    "label": "SetDragFocusCause()",
    "kind": "Method",
    "detail": "Function (this -> ScrollBar ->)",
    "insertText": "SetDragFocusCause(InArgs._ScrollbarDragFocusCause)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "AddMetadata(MakeShared<TTableViewMetadata<ItemType>>(this->SharedThis(this)))"
  },
  {
    "label": "STreeView()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "STreeView() : SListView< ItemType >( ETableViewMode::Tree ) , bTreeItemsAreDirty( true)"
  },
  {
    "label": "SetItemsSource()",
    "kind": "Method",
    "detail": "Function (SListView<ItemType)",
    "insertText": "SetItemsSource(&LinearizedItems)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} public : FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (FReply Reply = this -> OnKeyDownHandler .)",
    "insertText": "Execute(MyGeometry, InKeyEvent)"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (ItemType RangeSelectionEndItem = TListTypeTraits<ItemType)",
    "insertText": "NullableItemTypeConvertToItemType(this->SelectorItem)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 SelectionIndex = this -> LinearizedItems .)",
    "insertText": "Find(RangeSelectionEndItem)"
  },
  {
    "label": "Private_SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SetItemExpansion(RangeSelectionEndItem, false)"
  },
  {
    "label": "Private_GetNestingDepth()",
    "kind": "Method",
    "detail": "Function (} else { int32 SelectedNestingDepth =)",
    "insertText": "Private_GetNestingDepth(SelectionIndex)"
  },
  {
    "label": "NavigationSelect()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "NavigationSelect(this->LinearizedItems[SelectionIndex], InKeyEvent)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (break ; } } } } return)",
    "insertText": "Handled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InKeyEvent.GetKey() == EKeys::Right)"
  },
  {
    "label": "Private_SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SetItemExpansion(RangeSelectionEndItem, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(SelectionIndex < this->LinearizedItems.Num() - 1)"
  },
  {
    "label": "NavigationSelect()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "NavigationSelect(this->LinearizedItems[SelectionIndex + 1], InKeyEvent)"
  },
  {
    "label": "OnKeyDown_Internal()",
    "kind": "Method",
    "detail": "Function (} } return SListView<ItemType)",
    "insertText": "OnKeyDown_Internal(MyGeometry, InKeyEvent)"
  },
  {
    "label": "Private_IsItemExpanded()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "Private_IsItemExpanded(const ItemType& TheItem)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FSparseItemInfo* ItemInfo = SparseItemInfos .)",
    "insertText": "Find(TheItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bWasExpanded = false ;)",
    "insertText": "if(SparseItemInfo)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bWasExpanded = SparseItemInfo -> bIsExpanded ; SparseItemInfos .)",
    "insertText": "Add(TheItem, FSparseItemInfo(bShouldBeExpanded, SparseItemInfo->bHasExpandedChildren))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bShouldBeExpanded)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SparseItemInfos .)",
    "insertText": "Add(TheItem, FSparseItemInfo(bShouldBeExpanded, false))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bWasExpanded != bShouldBeExpanded)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnExpansionChanged .)",
    "insertText": "ExecuteIfBound(TheItem, bShouldBeExpanded)"
  },
  {
    "label": "RequestTreeRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestTreeRefresh()"
  },
  {
    "label": "Private_OnExpanderArrowShiftClicked()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Private_OnExpanderArrowShiftClicked(ItemType TheItem, bool bShouldBeExpanded)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnSetExpansionRecursive .)",
    "insertText": "Execute(TheItem, bShouldBeExpanded)"
  },
  {
    "label": "Private_DoesItemHaveChildren()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Private_DoesItemHaveChildren(int32 ItemIndexInList)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bHasChildren = false ;)",
    "insertText": "if(DenseItemInfos.IsValidIndex(ItemIndexInList))"
  },
  {
    "label": "Private_GetNestingDepth()",
    "kind": "Method",
    "detail": "Function (bHasChildren = DenseItemInfos [ ItemIndexInList ] . bHasChildren ; } return bHasChildren ; } int32)",
    "insertText": "Private_GetNestingDepth(int32 ItemIndexInList)"
  },
  {
    "label": "Private_GetWiresNeededByDepth()",
    "kind": "Method",
    "detail": "Function (} return NestingLevel ; } const TBitArray<>&)",
    "insertText": "Private_GetWiresNeededByDepth(int32 ItemIndexInList)"
  },
  {
    "label": "Private_IsLastChild()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Private_IsLastChild(int32 ItemIndexInList)"
  },
  {
    "label": "Private_UpdateParentHighlights()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Private_UpdateParentHighlights()"
  },
  {
    "label": "Private_ClearHighlightedItems()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Private_ClearHighlightedItems()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 ItemIndex = LinearizedItems .)",
    "insertText": "Find(*SelectedItemIt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(DenseItemInfos.IsValidIndex(ItemIndex))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const FItemInfo& ItemInfo = DenseItemInfos [ ItemIndex ] ; int32 ParentIndex = ItemInfo . ParentIndex ;)",
    "insertText": "while(ParentIndex != INDEX_NONE)"
  },
  {
    "label": "Private_SetItemHighlighted()",
    "kind": "Method",
    "detail": "Function (const ItemType& ParentItem = this -> LinearizedItems [ ParentIndex ] ; this ->)",
    "insertText": "Private_SetItemHighlighted(ParentItem, true)"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (const FItemInfo& ParentItemInfo = DenseItemInfos [ ParentIndex ] ; ParentIndex = ParentItemInfo . ParentIndex ; } } } } public : void)",
    "insertText": "Private_SignalSelectionChanged(ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (SListView<ItemType)",
    "insertText": "Private_SignalSelectionChanged(SelectInfo)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bTreeItemsAreDirty = false ;)",
    "insertText": "if(OnGetChildren.IsBound() && HasValidRootItemsSource())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TItemSet TempSelectedItemsMap ; TSparseItemMap TempSparseItemInfo ; TArray<FItemInfo> TempDenseItemInfos ; LinearizedItems .)",
    "insertText": "Empty()"
  },
  {
    "label": "PopulateLinearizedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateLinearizedItems(GetRootItems(), LinearizedItems, TempDenseItemInfos, TBitArray<>(), TempSelectedItemsMap, TempSparseItemInfo, true, INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (this -> SelectedItems = TempSelectedItemsMap ;)",
    "insertText": "if(!TListTypeTraits<ItemType>::IsPtrValid( this->RangeSelectionStart ) || !this->SelectedItems.Contains( TListTypeTraits<ItemType>::NullableItemTypeConvertToItemType( this->RangeSelectionStart ) ))"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (TListTypeTraits<ItemType)",
    "insertText": "ResetPtr(this->RangeSelectionStart)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (TListTypeTraits<ItemType)",
    "insertText": "ResetPtr(this->SelectorItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!TListTypeTraits<ItemType>::IsPtrValid( this->SelectorItem ) || !this->SelectedItems.Contains( TListTypeTraits<ItemType>::NullableItemTypeConvertToItemType( this->SelectorItem ) ))"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (this -> SelectorItem = this -> RangeSelectionStart ; } this ->)",
    "insertText": "Private_SignalSelectionChanged(ESelectInfo::Direct)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} SparseItemInfos =)",
    "insertText": "MoveTemp(TempSparseItemInfo)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (DenseItemInfos =)",
    "insertText": "MoveTemp(TempDenseItemInfos)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } } } SListView<ItemType)",
    "insertText": "Tick(AllottedGeometry, InCurrentTime, InDeltaTime)"
  },
  {
    "label": "PopulateLinearizedItems()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PopulateLinearizedItems(TArrayView<const ItemType> InItemsSource, TArray<ItemType>& InLinearizedItems, TArray<FItemInfo>& NewDenseItemInfos, TBitArray<> NeedsParentWire, TItemSet& OutNewSelectedItems, TSparseItemMap& NewSparseItemInfo, bool bAddingItems, int32 ParentIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NeedsParentWire .)",
    "insertText": "Add(false)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NestingDepthIndex = NeedsParentWire .)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bSawExpandedItems = false ;)",
    "insertText": "for(int32 ItemIndex = 0; ItemIndex < InItemsSource.Num(); ++ItemIndex)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (const ItemType& CurItem = InItemsSource [ ItemIndex ] ; TArray<ItemType> ChildItems ; OnGetChildren .)",
    "insertText": "Execute(InItemsSource[ItemIndex], ChildItems)"
  },
  {
    "label": "bIsLastChild()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsLastChild(ItemIndex == InItemsSource.Num() - 1)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (NeedsParentWire [ NestingDepthIndex ] = ! bIsLastChild ; const FSparseItemInfo* CurItemInfo = SparseItemInfos .)",
    "insertText": "Find(CurItem)"
  },
  {
    "label": "bIsExpanded()",
    "kind": "Method",
    "detail": "Function (bIsExpanded)",
    "insertText": "bIsExpanded(CurItemInfo == nullptr)"
  },
  {
    "label": "bHasExpandedChildren()",
    "kind": "Method",
    "detail": "Function (bHasExpandedChildren)",
    "insertText": "bHasExpandedChildren(CurItemInfo == nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InLinearizedItems .)",
    "insertText": "Add(CurItem)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewDenseItemInfos .)",
    "insertText": "Add(FItemInfo(NeedsParentWire, bHasChildren, bIsLastChild, ParentIndex))"
  },
  {
    "label": "IsItemSelected()",
    "kind": "Method",
    "detail": "Function (const bool bIsSelected = this ->)",
    "insertText": "IsItemSelected(CurItem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bIsExpanded || bHasExpandedChildren)"
  },
  {
    "label": "PopulateLinearizedItems()",
    "kind": "Method",
    "detail": "Function (const bool bAddChildItems = bAddingItems&& bIsExpanded ; bHasExpandedChildren =)",
    "insertText": "PopulateLinearizedItems(ChildItems, InLinearizedItems, NewDenseItemInfos, NeedsParentWire, OutNewSelectedItems, NewSparseItemInfo, bAddChildItems, InLinearizedItems.Num() - 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewSparseItemInfo .)",
    "insertText": "Add(CurItem, FSparseItemInfo( bIsExpanded, bHasExpandedChildren))"
  },
  {
    "label": "PopulatePinnedItems()",
    "kind": "Method",
    "detail": "Function (} bSawExpandedItems = bSawExpandedItems | | bIsExpanded | | bHasExpandedChildren ; } return bSawExpandedItems ; } int32)",
    "insertText": "PopulatePinnedItems(const TArray<ItemType>& InItemsSource, TArray< ItemType >& InPinnedItems, const STableViewBase::FReGenerateResults& Results)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 MaxPinnedItemsOverride = - 1 ;)",
    "insertText": "if(InItemsSource.IsEmpty())"
  },
  {
    "label": "StartIndex()",
    "kind": "Method",
    "detail": "Function (int32 CurrentItemIndex = StartIndex ; auto GetNonVisibleParents = [ this,& InItemsSource,)",
    "insertText": "StartIndex(TArray<ItemType>& OutParents, int32 ItemIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutParents .)",
    "insertText": "Add(InItemsSource[ParentIndex])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(Results.bGeneratedPastLastItem && Results.NewScrollOffset > 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (int32 CurrentMaxPinnedItems = this -> MaxPinnedItems .)",
    "insertText": "Get()"
  },
  {
    "label": "NumPinnedItems()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPinnedItems(this->GetNumPinnedItems() < CurrentMaxPinnedItems) ? this->GetNumPinnedItems()"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (int32 FirstItem =)",
    "insertText": "TruncToInt32(Results.NewScrollOffset - NumPinnedItems)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 MinSpaceOccupied = TNumericLimits<int32)",
    "insertText": "Max()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 MinIndex = - 1 ;)",
    "insertText": "for(int32 ItemIndex = FirstItem; ItemIndex <= LastItem; ItemIndex++)"
  },
  {
    "label": "GetNonVisibleParents()",
    "kind": "Method",
    "detail": "Function (TArray<ItemType> NonVisibleParents ;)",
    "insertText": "GetNonVisibleParents(NonVisibleParents, ItemIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 IndexOffset = ItemIndex - FirstItem ;)",
    "insertText": "if(NumParents < IndexOffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(NumParents - IndexOffset < MinSpaceOccupied && IndexOffset <= CurrentMaxPinnedItems)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinSpaceOccupied = NumParents - IndexOffset ; MinIndex = ItemIndex ; } })",
    "insertText": "if(MinIndex == -1)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(InPinnedItems)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (} else { TSharedRef<STreeView<ItemType>> This = StaticCastSharedRef<STreeView<)",
    "insertText": "ItemType(this->AsShared())"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<STableRow<ItemType>> NewTreeItemWidget =)",
    "insertText": "SNew(STableRow<ItemType>, This ) .Content() [ SNew(STextBlock) .Text( NSLOCTEXT(\"STreeView\", \"BrokenSetupMessage\", \"OnGenerateWidget() not assigned.\"))"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (bTreeItemsAreDirty = true ; SListView<ItemType)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "RebuildList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RebuildList()"
  },
  {
    "label": "SetStyle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStyle(const FTableViewStyle* InStyle)"
  },
  {
    "label": "SetBackgroundBrush()",
    "kind": "Method",
    "detail": "Function (Style = InStyle ;)",
    "insertText": "SetBackgroundBrush(Style != nullptr ? &Style->BackgroundBrush : FStyleDefaults::GetNoBrush())"
  },
  {
    "label": "SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetItemExpansion(const ItemType& InItem, bool InShouldExpandItem)"
  },
  {
    "label": "Private_SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SetItemExpansion(InItem, InShouldExpandItem)"
  },
  {
    "label": "SetSingleExpandedItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSingleExpandedItem(const ItemType& InItem)"
  },
  {
    "label": "bItemAlreadyLoneExpanded()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bItemAlreadyLoneExpanded(this->SparseItemInfos.Num() == 1) && this->IsItemExpanded(InItem)"
  },
  {
    "label": "Private_SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SetItemExpansion(InItem, true)"
  },
  {
    "label": "IsItemExpanded()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsItemExpanded(const ItemType& InItem)"
  },
  {
    "label": "SetItemsSource()",
    "kind": "Method",
    "detail": "Function (SListView<ItemType)",
    "insertText": "SetItemsSource(InListItemsSource)"
  },
  {
    "label": "SetItemsSource()",
    "kind": "Method",
    "detail": "Function (SListView<ItemType)",
    "insertText": "SetItemsSource(MoveTemp(Provider))"
  },
  {
    "label": "ClearItemsSource()",
    "kind": "Method",
    "detail": "Function (SListView<ItemType)",
    "insertText": "ClearItemsSource()"
  },
  {
    "label": "SetTreeItemsSource()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetTreeItemsSource(const TArray<ItemType>* InItemsSource)"
  },
  {
    "label": "SetRootItemsSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootItemsSource(InItemsSource)"
  },
  {
    "label": "SetRootItemsSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRootItemsSource(const TArray<ItemType>* InItemsSource)"
  },
  {
    "label": "SetRootItemsSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootItemsSource(MakeUnique<UE::Slate::ItemsSource::FArrayPointer<ItemType>>(InItemsSource))"
  },
  {
    "label": "ClearRootItemsSource()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ClearRootItemsSource()"
  },
  {
    "label": "SetRootItemsSource()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetRootItemsSource(TSharedRef<UE::Slate::Containers::TObservableArray<ItemType>> InItemsSource)"
  },
  {
    "label": "SetRootItemsSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootItemsSource(MakeUnique<UE::Slate::ItemsSource::FSharedObservableArray<ItemType>>(this->SharedThis(this), MoveTemp(InItemsSource)))"
  },
  {
    "label": "SetRootItemsSource()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetRootItemsSource(TUniquePtr<UE::Slate::ItemsSource::IItemsSource<ItemType>> Provider)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TreeViewSource =)",
    "insertText": "MoveTemp(Provider)"
  },
  {
    "label": "SetRootItemsSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRootItemsSource(TUniquePtr<UE::Slate::ItemsSource::IItemsSource<ItemType>>())"
  },
  {
    "label": "HasValidRootItemsSource()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidRootItemsSource()"
  },
  {
    "label": "GetExpandedItems()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetExpandedItems(TItemSet& ExpandedItems)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ExpandedItems .)",
    "insertText": "Add(InfoIterator.Key())"
  },
  {
    "label": "ClearExpandedItems()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ClearExpandedItems()"
  },
  {
    "label": "ReGenerateItems()",
    "kind": "Method",
    "detail": "Function (} STableViewBase::FReGenerateResults)",
    "insertText": "ReGenerateItems(const FGeometry& MyGeometry)"
  },
  {
    "label": "ReGenerateItems()",
    "kind": "Method",
    "detail": "Function (STableViewBase::FReGenerateResults Results = SListView<ItemType)",
    "insertText": "ReGenerateItems(MyGeometry)"
  },
  {
    "label": "PopulatePinnedItems()",
    "kind": "Method",
    "detail": "Function (TArray<ItemType> PinnedItems ; int32 MaxPinnedItemsOverride =)",
    "insertText": "PopulatePinnedItems(LinearizedItems, PinnedItems, Results)"
  },
  {
    "label": "ReGeneratePinnedItems()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ReGeneratePinnedItems(PinnedItems, MyGeometry, MaxPinnedItemsOverride)"
  },
  {
    "label": "ClearPinnedWidgets()",
    "kind": "Method",
    "detail": "Function (} else { this ->)",
    "insertText": "ClearPinnedWidgets()"
  }
]