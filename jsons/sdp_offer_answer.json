[
  {
    "label": "SdpOfferAnswerHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SdpOfferAnswerHandler"
  },
  {
    "label": "RemoteDescriptionOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteDescriptionOperation"
  },
  {
    "label": "ImplicitCreateSessionDescriptionObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImplicitCreateSessionDescriptionObserver"
  },
  {
    "label": "SetSessionDescriptionObserverAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SetSessionDescriptionObserverAdapter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LocalIceCredentialsToReplace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalIceCredentialsToReplace"
  },
  {
    "label": "SdpOfferAnswerHandler()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_SDP_OFFER_ANSWER_H_ # define PC_SDP_OFFER_ANSWER_H_ # include<stddef . h> # include<stdint . h> # include<functional> # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_options . h \" # include \" api / candidate . h \" # include \" api / jsep . h \" # include \" api / jsep_ice_candidate . h \" # include \" api / media_stream_interface . h \" # include \" api / media_types . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_error . h \" # include \" api / rtp_transceiver_direction . h \" # include \" api / rtp_transceiver_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / set_local_description_observer_interface . h \" # include \" api / set_remote_description_observer_interface . h \" # include \" api / uma_metrics . h \" # include \" api / video / video_bitrate_allocator_factory . h \" # include \" media / base / media_channel . h \" # include \" media / base / stream_params . h \" # include \" p2p / base / port_allocator . h \" # include \" pc / connection_context . h \" # include \" pc / data_channel_controller . h \" # include \" pc / jsep_transport_controller . h \" # include \" pc / media_session . h \" # include \" pc / media_stream_observer . h \" # include \" pc / peer_connection_internal . h \" # include \" pc / rtp_receiver . h \" # include \" pc / rtp_transceiver . h \" # include \" pc / rtp_transmission_manager . h \" # include \" pc / sdp_state_provider . h \" # include \" pc / session_description . h \" # include \" pc / stream_collection . h \" # include \" pc / transceiver_list . h \" # include \" pc / webrtc_session_description_factory . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / operations_chain . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" rtc_base / unique_id_generator . h \" # include \" rtc_base / weak_ptr . h \" namespace webrtc { class SdpOfferAnswerHandler : public SdpStateProvider { public : ~)",
    "insertText": "SdpOfferAnswerHandler()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SdpOfferAnswerHandler>)",
    "insertText": "Create(PeerConnectionSdpMethods* pc, const PeerConnectionInterface::RTCConfiguration& configuration, PeerConnectionDependencies& dependencies, ConnectionContext* context)"
  },
  {
    "label": "ResetSessionDescFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSessionDescFactory()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(signaling_thread())"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (webrtc_session_desc_factory_ .)",
    "insertText": "reset()"
  },
  {
    "label": "webrtc_session_desc_factory()",
    "kind": "Method",
    "detail": "Function (} const WebRtcSessionDescriptionFactory*)",
    "insertText": "webrtc_session_desc_factory()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close()"
  },
  {
    "label": "PrepareForShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForShutdown()"
  },
  {
    "label": "signaling_state()",
    "kind": "Method",
    "detail": "Function (PeerConnectionInterface::SignalingState)",
    "insertText": "signaling_state()"
  },
  {
    "label": "local_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "local_description()"
  },
  {
    "label": "remote_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "remote_description()"
  },
  {
    "label": "current_local_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "current_local_description()"
  },
  {
    "label": "current_remote_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "current_remote_description()"
  },
  {
    "label": "pending_local_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "pending_local_description()"
  },
  {
    "label": "pending_remote_description()",
    "kind": "Method",
    "detail": "Function (const SessionDescriptionInterface*)",
    "insertText": "pending_remote_description()"
  },
  {
    "label": "NeedsIceRestart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsIceRestart(const std::string& content_name)"
  },
  {
    "label": "IceRestartPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IceRestartPending(const std::string& content_name)"
  },
  {
    "label": "GetDtlsRole()",
    "kind": "Method",
    "detail": "Function (absl::optional<rtc::SSLRole>)",
    "insertText": "GetDtlsRole(const std::string& mid)"
  },
  {
    "label": "RestartIce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartIce()"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOffer(CreateSessionDescriptionObserver* observer, const PeerConnectionInterface::RTCOfferAnswerOptions& options)"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAnswer(CreateSessionDescriptionObserver* observer, const PeerConnectionInterface::RTCOfferAnswerOptions& options)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(std::unique_ptr<SessionDescriptionInterface> desc, rtc::scoped_refptr<SetLocalDescriptionObserverInterface> observer)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(rtc::scoped_refptr<SetLocalDescriptionObserverInterface> observer)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(SetSessionDescriptionObserver* observer, SessionDescriptionInterface* desc)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(SetSessionDescriptionObserver* observer)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteDescription(std::unique_ptr<SessionDescriptionInterface> desc, rtc::scoped_refptr<SetRemoteDescriptionObserverInterface> observer)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteDescription(SetSessionDescriptionObserver* observer, SessionDescriptionInterface* desc)"
  },
  {
    "label": "GetConfiguration()",
    "kind": "Method",
    "detail": "Function (PeerConnectionInterface::RTCConfiguration)",
    "insertText": "GetConfiguration()"
  },
  {
    "label": "SetConfiguration()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "SetConfiguration(const PeerConnectionInterface::RTCConfiguration& configuration)"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddIceCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIceCandidate(std::unique_ptr<IceCandidateInterface> candidate, std::function<void(RTCError)> callback)"
  },
  {
    "label": "RemoveIceCandidates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveIceCandidates(const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "AddLocalIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalIceCandidate(const JsepIceCandidate* candidate)"
  },
  {
    "label": "RemoveLocalIceCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLocalIceCandidates(const std::vector<cricket::Candidate>& candidates)"
  },
  {
    "label": "ShouldFireNegotiationNeededEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFireNegotiationNeededEvent(uint32_t event_id)"
  },
  {
    "label": "AddStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddStream(MediaStreamInterface* local_stream)"
  },
  {
    "label": "RemoveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStream(MediaStreamInterface* local_stream)"
  },
  {
    "label": "is_caller()",
    "kind": "Method",
    "detail": "Function (absl::optional<bool>)",
    "insertText": "is_caller()"
  },
  {
    "label": "HasNewIceCredentials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNewIceCredentials()"
  },
  {
    "label": "UpdateNegotiationNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNegotiationNeeded()"
  },
  {
    "label": "DestroyAllChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllChannels()"
  },
  {
    "label": "local_streams()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<StreamCollectionInterface>)",
    "insertText": "local_streams()"
  },
  {
    "label": "remote_streams()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<StreamCollectionInterface>)",
    "insertText": "remote_streams()"
  },
  {
    "label": "initial_offerer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initial_offerer()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const PeerConnectionInterface::RTCConfiguration& configuration, PeerConnectionDependencies& dependencies, ConnectionContext* context)"
  },
  {
    "label": "signaling_thread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "signaling_thread()"
  },
  {
    "label": "network_thread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "network_thread()"
  },
  {
    "label": "mutable_local_description()",
    "kind": "Method",
    "detail": "Function (SessionDescriptionInterface*)",
    "insertText": "mutable_local_description() RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "mutable_remote_description()",
    "kind": "Method",
    "detail": "Function (} SessionDescriptionInterface*)",
    "insertText": "mutable_remote_description() RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "ApplyLocalDescription()",
    "kind": "Method",
    "detail": "Function (} RTCError)",
    "insertText": "ApplyLocalDescription(std::unique_ptr<SessionDescriptionInterface> desc, const std::map<std::string, const cricket::ContentGroup*>& bundle_groups_by_mid)"
  },
  {
    "label": "ApplyRemoteDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRemoteDescription(std::unique_ptr<RemoteDescriptionOperation> operation)"
  },
  {
    "label": "ReplaceRemoteDescription()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "ReplaceRemoteDescription(std::unique_ptr<SessionDescriptionInterface> desc, SdpType sdp_type, std::unique_ptr<SessionDescriptionInterface>* replaced_description) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "ApplyRemoteDescriptionUpdateTransceiverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRemoteDescriptionUpdateTransceiverState(SdpType sdp_type)"
  },
  {
    "label": "PlanBUpdateSendersAndReceivers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlanBUpdateSendersAndReceivers(const cricket::ContentInfo* audio_content, const cricket::AudioContentDescription* audio_desc, const cricket::ContentInfo* video_content, const cricket::VideoContentDescription* video_desc)"
  },
  {
    "label": "DoCreateOffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoCreateOffer(const PeerConnectionInterface::RTCOfferAnswerOptions& options, rtc::scoped_refptr<CreateSessionDescriptionObserver> observer)"
  },
  {
    "label": "DoCreateAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoCreateAnswer(const PeerConnectionInterface::RTCOfferAnswerOptions& options, rtc::scoped_refptr<CreateSessionDescriptionObserver> observer)"
  },
  {
    "label": "DoSetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoSetLocalDescription(std::unique_ptr<SessionDescriptionInterface> desc, rtc::scoped_refptr<SetLocalDescriptionObserverInterface> observer)"
  },
  {
    "label": "DoSetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoSetRemoteDescription(std::unique_ptr<RemoteDescriptionOperation> operation)"
  },
  {
    "label": "SetRemoteDescriptionPostProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteDescriptionPostProcess(bool was_answer) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "ChangeSignalingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeSignalingState(PeerConnectionInterface::SignalingState signaling_state)"
  },
  {
    "label": "UpdateSessionState()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "UpdateSessionState(SdpType type, cricket::ContentSource source, const cricket::SessionDescription* description, const std::map<std::string, const cricket::ContentGroup*>& bundle_groups_by_mid)"
  },
  {
    "label": "IsUnifiedPlan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnifiedPlan() const RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnAudioTrackAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioTrackAdded(AudioTrackInterface* track, MediaStreamInterface* stream) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnAudioTrackRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioTrackRemoved(AudioTrackInterface* track, MediaStreamInterface* stream) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnVideoTrackAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoTrackAdded(VideoTrackInterface* track, MediaStreamInterface* stream) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "OnVideoTrackRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoTrackRemoved(VideoTrackInterface* track, MediaStreamInterface* stream) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "Rollback()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "Rollback(SdpType desc_type)"
  },
  {
    "label": "OnOperationsChainEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOperationsChainEmpty()"
  },
  {
    "label": "SetAssociatedRemoteStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAssociatedRemoteStreams(rtc::scoped_refptr<RtpReceiverInternal> receiver, const std::vector<std::string>& stream_ids, std::vector<rtc::scoped_refptr<MediaStreamInterface>>* added_streams, std::vector<rtc::scoped_refptr<MediaStreamInterface>>* removed_streams)"
  },
  {
    "label": "CheckIfNegotiationIsNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfNegotiationIsNeeded()"
  },
  {
    "label": "GenerateNegotiationNeededEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateNegotiationNeededEvent()"
  },
  {
    "label": "ValidateSessionDescription()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "ValidateSessionDescription(const SessionDescriptionInterface* sdesc, cricket::ContentSource source, const std::map<std::string, const cricket::ContentGroup*>& bundle_groups_by_mid) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "UpdateTransceiversAndDataChannels()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "UpdateTransceiversAndDataChannels(cricket::ContentSource source, const SessionDescriptionInterface& new_session, const SessionDescriptionInterface* old_local_description, const SessionDescriptionInterface* old_remote_description, const std::map<std::string, const cricket::ContentGroup*>& bundle_groups_by_mid)"
  },
  {
    "label": "AssociateTransceiver()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>>)",
    "insertText": "AssociateTransceiver(cricket::ContentSource source, SdpType type, size_t mline_index, const cricket::ContentInfo& content, const cricket::ContentInfo* old_local_content, const cricket::ContentInfo* old_remote_content) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "FindMediaSectionForTransceiver()",
    "kind": "Method",
    "detail": "Function (const cricket::ContentInfo*)",
    "insertText": "FindMediaSectionForTransceiver(const RtpTransceiver* transceiver, const SessionDescriptionInterface* sdesc)"
  },
  {
    "label": "UpdateTransceiverChannel()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "UpdateTransceiverChannel(rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>> transceiver, const cricket::ContentInfo& content, const cricket::ContentGroup* bundle_group) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "UpdateDataChannel()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "UpdateDataChannel(cricket::ContentSource source, const cricket::ContentInfo& content, const cricket::ContentGroup* bundle_group) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "ExpectSetLocalDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpectSetLocalDescription(SdpType type)"
  },
  {
    "label": "ExpectSetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpectSetRemoteDescription(SdpType type)"
  },
  {
    "label": "FillInMissingRemoteMids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillInMissingRemoteMids(cricket::SessionDescription* remote_description)"
  },
  {
    "label": "FindAvailableTransceiverToReceive()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>)",
    "insertText": "FindAvailableTransceiverToReceive(cricket::MediaType media_type)"
  },
  {
    "label": "GetOptionsForOffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOptionsForOffer(const PeerConnectionInterface::RTCOfferAnswerOptions& offer_answer_options, cricket::MediaSessionOptions* session_options)"
  },
  {
    "label": "GetOptionsForPlanBOffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOptionsForPlanBOffer(const PeerConnectionInterface::RTCOfferAnswerOptions& offer_answer_options, cricket::MediaSessionOptions* session_options) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "GetOptionsForUnifiedPlanOffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOptionsForUnifiedPlanOffer(const PeerConnectionInterface::RTCOfferAnswerOptions& offer_answer_options, cricket::MediaSessionOptions* session_options) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "GetOptionsForAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOptionsForAnswer(const PeerConnectionInterface::RTCOfferAnswerOptions& offer_answer_options, cricket::MediaSessionOptions* session_options)"
  },
  {
    "label": "GetOptionsForPlanBAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOptionsForPlanBAnswer(const PeerConnectionInterface::RTCOfferAnswerOptions& offer_answer_options, cricket::MediaSessionOptions* session_options) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "GetOptionsForUnifiedPlanAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOptionsForUnifiedPlanAnswer(const PeerConnectionInterface::RTCOfferAnswerOptions& offer_answer_options, cricket::MediaSessionOptions* session_options) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "SessionErrorToString()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "SessionErrorToString(SessionError error)"
  },
  {
    "label": "GetSessionErrorMsg()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetSessionErrorMsg()"
  },
  {
    "label": "session_error()",
    "kind": "Method",
    "detail": "Function (SessionError)",
    "insertText": "session_error()"
  },
  {
    "label": "RemoveRecvDirectionFromReceivingTransceiversOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRecvDirectionFromReceivingTransceiversOfType(cricket::MediaType media_type) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "AddUpToOneReceivingTransceiverOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUpToOneReceivingTransceiverOfType(cricket::MediaType media_type)"
  },
  {
    "label": "GetReceivingTransceiversOfType()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>>>)",
    "insertText": "GetReceivingTransceiversOfType(cricket::MediaType media_type) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "ProcessRemovalOfRemoteTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRemovalOfRemoteTrack(const rtc::scoped_refptr<RtpTransceiverProxyWithInternal<RtpTransceiver>> transceiver, std::vector<rtc::scoped_refptr<RtpTransceiverInterface>>* remove_list, std::vector<rtc::scoped_refptr<MediaStreamInterface>>* removed_streams)"
  },
  {
    "label": "RemoveRemoteStreamsIfEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRemoteStreamsIfEmpty(const std::vector<rtc::scoped_refptr<MediaStreamInterface>>& remote_streams, std::vector<rtc::scoped_refptr<MediaStreamInterface>>* removed_streams)"
  },
  {
    "label": "RemoveSenders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSenders(cricket::MediaType media_type)"
  },
  {
    "label": "UpdateLocalSenders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLocalSenders(const std::vector<cricket::StreamParams>& streams, cricket::MediaType media_type)"
  },
  {
    "label": "UpdateRemoteSendersList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRemoteSendersList(const std::vector<cricket::StreamParams>& streams, bool default_track_needed, cricket::MediaType media_type, StreamCollection* new_streams)"
  },
  {
    "label": "EnableSending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSending()"
  },
  {
    "label": "PushdownMediaDescription()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "PushdownMediaDescription(SdpType type, cricket::ContentSource source, const std::map<std::string, const cricket::ContentGroup*>& bundle_groups_by_mid)"
  },
  {
    "label": "PushdownTransportDescription()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "PushdownTransportDescription(cricket::ContentSource source, SdpType type)"
  },
  {
    "label": "RemoveStoppedTransceivers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStoppedTransceivers()"
  },
  {
    "label": "RemoveUnusedChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedChannels(const cricket::SessionDescription* desc)"
  },
  {
    "label": "UpdateEndedRemoteMediaStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEndedRemoteMediaStreams()"
  },
  {
    "label": "UseCandidatesInRemoteDescription()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCandidatesInRemoteDescription()"
  },
  {
    "label": "UseCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCandidate(const IceCandidateInterface* candidate)"
  },
  {
    "label": "ReadyToUseRemoteCandidate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToUseRemoteCandidate(const IceCandidateInterface* candidate, const SessionDescriptionInterface* remote_desc, bool* valid)"
  },
  {
    "label": "FindContentInfo()",
    "kind": "Method",
    "detail": "Function (RTCErrorOr<const cricket::ContentInfo*>)",
    "insertText": "FindContentInfo(const SessionDescriptionInterface* description, const IceCandidateInterface* candidate) RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "CreateChannels()",
    "kind": "Method",
    "detail": "Function (RTCError)",
    "insertText": "CreateChannels(const cricket::SessionDescription& desc)"
  },
  {
    "label": "CreateDataChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDataChannel(const std::string& mid)"
  },
  {
    "label": "DestroyDataChannelTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyDataChannelTransport(RTCError error)"
  },
  {
    "label": "GenerateMediaDescriptionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateMediaDescriptionOptions(const SessionDescriptionInterface* session_desc, RtpTransceiverDirection audio_direction, RtpTransceiverDirection video_direction, absl::optional<size_t>* audio_index, absl::optional<size_t>* video_index, absl::optional<size_t>* data_index, cricket::MediaSessionOptions* session_options)"
  },
  {
    "label": "GetMediaDescriptionOptionsForActiveData()",
    "kind": "Method",
    "detail": "Function (cricket::MediaDescriptionOptions)",
    "insertText": "GetMediaDescriptionOptionsForActiveData(const std::string& mid)"
  },
  {
    "label": "GetMediaDescriptionOptionsForRejectedData()",
    "kind": "Method",
    "detail": "Function (cricket::MediaDescriptionOptions)",
    "insertText": "GetMediaDescriptionOptionsForRejectedData(const std::string& mid)"
  },
  {
    "label": "UpdatePayloadTypeDemuxingState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdatePayloadTypeDemuxingState(cricket::ContentSource source, const std::map<std::string, const cricket::ContentGroup*>& bundle_groups_by_mid)"
  },
  {
    "label": "SetSessionError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSessionError(SessionError error, const std::string& error_desc)"
  },
  {
    "label": "AddIceCandidateInternal()",
    "kind": "Method",
    "detail": "Function (AddIceCandidateResult)",
    "insertText": "AddIceCandidateInternal(const IceCandidateInterface* candidate)"
  },
  {
    "label": "media_engine()",
    "kind": "Method",
    "detail": "Function (cricket::MediaEngineInterface*)",
    "insertText": "media_engine()"
  },
  {
    "label": "transceivers()",
    "kind": "Method",
    "detail": "Function (TransceiverList*)",
    "insertText": "transceivers()"
  },
  {
    "label": "data_channel_controller()",
    "kind": "Method",
    "detail": "Function (DataChannelController*)",
    "insertText": "data_channel_controller()"
  },
  {
    "label": "port_allocator()",
    "kind": "Method",
    "detail": "Function (cricket::PortAllocator*)",
    "insertText": "port_allocator()"
  },
  {
    "label": "rtp_manager()",
    "kind": "Method",
    "detail": "Function (RtpTransmissionManager*)",
    "insertText": "rtp_manager()"
  },
  {
    "label": "transport_controller_s()",
    "kind": "Method",
    "detail": "Function (JsepTransportController*)",
    "insertText": "transport_controller_s() RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "transport_controller_s()",
    "kind": "Method",
    "detail": "Function (const JsepTransportController*)",
    "insertText": "transport_controller_s() const RTC_RUN_ON(signaling_thread())"
  },
  {
    "label": "transport_controller_n()",
    "kind": "Method",
    "detail": "Function (JsepTransportController*)",
    "insertText": "transport_controller_n() RTC_RUN_ON(network_thread())"
  },
  {
    "label": "transport_controller_n()",
    "kind": "Method",
    "detail": "Function (const JsepTransportController*)",
    "insertText": "transport_controller_n() const RTC_RUN_ON(network_thread())"
  },
  {
    "label": "audio_options()",
    "kind": "Method",
    "detail": "Function (const cricket::AudioOptions&)",
    "insertText": "audio_options()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (PeerConnectionSdpMethods* const pc_ ; ConnectionContext* const context_ ; std::unique_ptr<WebRtcSessionDescriptionFactory> webrtc_session_desc_factory_)",
    "insertText": "RTC_GUARDED_BY(signaling_thread())"
  }
]