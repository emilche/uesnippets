[
  {
    "label": "UWorldPartitionEditorSpatialHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionEditorSpatialHash"
  },
  {
    "label": "SWorldPartitionEditorGridSpatialHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWorldPartitionEditorGridSpatialHash"
  },
  {
    "label": "FCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCell"
  },
  {
    "label": "FCellCoord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellCoord"
  },
  {
    "label": "FCellNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellNode"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / HashBuilder . h \" # include \" Templates / SubclassOf . h \" # include \" WorldPartition / WorldPartitionEditorHash . h \" # include \" WorldPartitionEditorSpatialHash . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "FCell()",
    "kind": "Method",
    "detail": "Function (struct FCell { public :)",
    "insertText": "FCell() : Bounds(ForceInitToZero)"
  },
  {
    "label": "FCellCoord()",
    "kind": "Method",
    "detail": "Function (} FBox Bounds ; TSet<FWorldPartitionHandle> Actors ; } ; struct FCellCoord {)",
    "insertText": "FCellCoord(int64 InX, int64 InY, int64 InZ, int32 InLevel) : X(InX) , Y(InY) , Z(InZ) , Level(InLevel)"
  },
  {
    "label": "GetChildIndex()",
    "kind": "Method",
    "detail": "Function (} int64 X ; int64 Y ; int64 Z ; int32 Level ; uint32)",
    "insertText": "GetChildIndex()"
  },
  {
    "label": "GetChildCellCoord()",
    "kind": "Method",
    "detail": "Function (} FCellCoord)",
    "insertText": "GetChildCellCoord(uint32 ChildIndex)"
  },
  {
    "label": "GetParentCellCoord()",
    "kind": "Method",
    "detail": "Function (} FCellCoord)",
    "insertText": "GetParentCellCoord()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCellCoord& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FCellCoord& CellCoord)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (FHashBuilder HashBuilder ; HashBuilder<<CellCoord . X<<CellCoord . Y<<CellCoord . Z<<CellCoord . Level ; return HashBuilder .)",
    "insertText": "GetHash()"
  },
  {
    "label": "GetCellCoords()",
    "kind": "Method",
    "detail": "Function (} } ; FCellCoord)",
    "insertText": "GetCellCoords(const FVector& InPos, int32 Level)"
  },
  {
    "label": "CellSizeForLevel()",
    "kind": "Method",
    "detail": "Function (const int64)",
    "insertText": "CellSizeForLevel(int64)CellSize * (1LL << Level)"
  },
  {
    "label": "GetCellBounds()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetCellBounds(const FCellCoord& InCellCoord)"
  },
  {
    "label": "CellSizeForLevel()",
    "kind": "Method",
    "detail": "Function (const int64)",
    "insertText": "CellSizeForLevel(int64)CellSize * (1LL << InCellCoord.Level)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (const FVector Min =)",
    "insertText": "FVector(static_cast<FVector::FReal>(InCellCoord.X * CellSizeForLevel), static_cast<FVector::FReal>(InCellCoord.Y * CellSizeForLevel), static_cast<FVector::FReal>(InCellCoord.Z * CellSizeForLevel))"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (const FVector Max = Min +)",
    "insertText": "FVector(static_cast<double>(CellSizeForLevel))"
  },
  {
    "label": "GetLevelForBox()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLevelForBox(const FBox& Box)"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (const FVector Extent = Box .)",
    "insertText": "GetExtent()"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (const FVector::FReal MaxLength = Extent .)",
    "insertText": "GetMax()"
  },
  {
    "label": "ForEachIntersectingCells()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ForEachIntersectingCells(const FBox& InBounds, int32 Level, TFunctionRef<void(const FCellCoord&)> InOperation)"
  },
  {
    "label": "MinCellCoords()",
    "kind": "Method",
    "detail": "Function (int32 NumCells = 0 ; FCellCoord)",
    "insertText": "MinCellCoords(GetCellCoords(InBounds.Min, Level))"
  },
  {
    "label": "MaxCellCoords()",
    "kind": "Method",
    "detail": "Function (FCellCoord)",
    "insertText": "MaxCellCoords(GetCellCoords(InBounds.Max, Level))"
  },
  {
    "label": "InOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOperation(FCellCoord(x, y, z, Level))"
  },
  {
    "label": "FCellNode()",
    "kind": "Method",
    "detail": "Function (NumCells + + ; } } } return NumCells ; } struct FCellNode {)",
    "insertText": "FCellNode() : ChildNodesMask(0)"
  },
  {
    "label": "HasChildNodes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasChildNodes()"
  },
  {
    "label": "AddChildNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChildNode(uint32 ChildIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint32 ChildMask = 1<<ChildIndex ;)",
    "insertText": "check(!(ChildNodesMask & ChildMask))"
  },
  {
    "label": "RemoveChildNode()",
    "kind": "Method",
    "detail": "Function (ChildNodesMask | = ChildMask ; } void)",
    "insertText": "RemoveChildNode(uint32 ChildIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (uint32 ChildMask = 1<<ChildIndex ;)",
    "insertText": "check(ChildNodesMask & ChildMask)"
  },
  {
    "label": "ForEachChild()",
    "kind": "Method",
    "detail": "Function (ChildNodesMask& = ~ ChildMask ; } void)",
    "insertText": "ForEachChild(TFunctionRef<void(uint32 ChildIndex)> InOperation)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 CurChildNodesMask = ChildNodesMask ;)",
    "insertText": "while(CurChildNodesMask)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (const int32 ChildIndex =)",
    "insertText": "CountTrailingZeros(CurChildNodesMask)"
  },
  {
    "label": "CurChildNodesMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurChildNodesMask(1 << ChildIndex)"
  },
  {
    "label": "InOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InOperation(ChildIndex)"
  },
  {
    "label": "UWorldPartitionEditorSpatialHash()",
    "kind": "Method",
    "detail": "Function (} } uint8 ChildNodesMask ; } ; public : ~)",
    "insertText": "UWorldPartitionEditorSpatialHash()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "SetDefaultValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultValues()"
  },
  {
    "label": "GetWorldPartitionEditorName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetWorldPartitionEditorName()"
  },
  {
    "label": "GetEditorWorldBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetEditorWorldBounds()"
  },
  {
    "label": "GetRuntimeWorldBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetRuntimeWorldBounds()"
  },
  {
    "label": "GetNonSpatialBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNonSpatialBounds()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "HashActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashActor(FWorldPartitionHandle& InActorHandle)"
  },
  {
    "label": "UnhashActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnhashActor(FWorldPartitionHandle& InActorHandle)"
  },
  {
    "label": "ForEachIntersectingCell()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA private : int32)",
    "insertText": "ForEachIntersectingCell(const FBox& Box, TFunctionRef<void(FCell*)> InOperation, int32 MinimumLevel = 0)"
  },
  {
    "label": "ForEachIntersectingCellInner()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ForEachIntersectingCellInner(const FBox& Box, const FCellCoord& CellCoord, TFunctionRef<void(FCell*)> InOperation, int32 MinimumLevel = 0)"
  }
]