[
  {
    "label": "event_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "event_base"
  },
  {
    "label": "event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "event"
  },
  {
    "label": "MessagePumpEpoll",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpEpoll"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "EpollInterestParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EpollInterestParams"
  },
  {
    "label": "EpollInterest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EpollInterest"
  },
  {
    "label": "RefCounted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCounted"
  },
  {
    "label": "MessagePumpLibevent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibevent"
  },
  {
    "label": "MessagePumpLibeventTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibeventTest"
  },
  {
    "label": "RunState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RunState"
  },
  {
    "label": "EventBaseFree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EventBaseFree"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MESSAGE_LOOP_MESSAGE_PUMP_LIBEVENT_H_ # define BASE_MESSAGE_LOOP_MESSAGE_PUMP_LIBEVENT_H_ # include<memory> # include<tuple> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / weak_ptr . h \" # include \" base / message_loop / message_pump . h \" # include \" base / message_loop / message_pump_buildflags . h \" # include \" base / message_loop / watchable_io_message_pump_posix . h \" # include \" base / threading / thread_checker . h \" # include \" third_party / libevent / event . h \" struct event_base ; struct event ; namespace base { class MessagePumpEpoll ; class BASE_EXPORT MessagePumpLibevent : public MessagePump,public WatchableIOMessagePumpPosix { public : class FdWatchController ; struct EpollInterestParams { int fd ; bool read ; bool write ; bool one_shot ; bool)",
    "insertText": "IsEqual(const EpollInterestParams& rhs)"
  },
  {
    "label": "EpollInterest()",
    "kind": "Method",
    "detail": "Function (} } ; class EpollInterest : public RefCounted<EpollInterest> { public :)",
    "insertText": "EpollInterest(FdWatchController* controller, const EpollInterestParams& params)"
  },
  {
    "label": "EpollInterest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EpollInterest(const EpollInterest&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EpollInterest&)",
    "insertText": "operator(const EpollInterest&)"
  },
  {
    "label": "controller()",
    "kind": "Method",
    "detail": "Function (FdWatchController*)",
    "insertText": "controller()"
  },
  {
    "label": "was_controller_destroyed()",
    "kind": "Method",
    "detail": "Function (active_ = active ; } bool)",
    "insertText": "was_controller_destroyed()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!controller_->was_destroyed_)"
  },
  {
    "label": "StopWatchingForControllerDestruction()",
    "kind": "Method",
    "detail": "Function (controller_ -> was_destroyed_ =& was_controller_destroyed_ ; } void)",
    "insertText": "StopWatchingForControllerDestruction()"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(controller_->was_destroyed_, &was_controller_destroyed_)"
  },
  {
    "label": "EpollInterest()",
    "kind": "Method",
    "detail": "Function (controller_ -> was_destroyed_ = nullptr ; } } private : class RefCounted<EpollInterest> ; ~)",
    "insertText": "EpollInterest()"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (FdWatchController* const controller_ ; const EpollInterestParams params_ ; bool active_ = true ; bool was_controller_destroyed_ = false ; } ; class FdWatchController : public FdWatchControllerInterface { public :)",
    "insertText": "FdWatchController(const Location& from_here)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FdWatchController(const FdWatchController&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FdWatchController&)",
    "insertText": "operator(const FdWatchController&)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FdWatchController()"
  },
  {
    "label": "StopWatchingFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopWatchingFileDescriptor()"
  },
  {
    "label": "set_watcher()",
    "kind": "Method",
    "detail": "Function (private : class MessagePumpEpoll ; class MessagePumpLibevent ; class MessagePumpLibeventTest ; void)",
    "insertText": "set_watcher(FdWatcher* watcher)"
  },
  {
    "label": "set_libevent_pump()",
    "kind": "Method",
    "detail": "Function (watcher_ = watcher ; } void)",
    "insertText": "set_libevent_pump(MessagePumpLibevent* pump)"
  },
  {
    "label": "libevent_pump()",
    "kind": "Method",
    "detail": "Function (libevent_pump_ = pump ; } MessagePumpLibevent*)",
    "insertText": "libevent_pump()"
  },
  {
    "label": "ReleaseEvent()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<event>)",
    "insertText": "ReleaseEvent()"
  },
  {
    "label": "OnFileCanReadWithoutBlocking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCanReadWithoutBlocking(int fd, MessagePumpLibevent* pump)"
  },
  {
    "label": "OnFileCanWriteWithoutBlocking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCanWriteWithoutBlocking(int fd, MessagePumpLibevent* pump)"
  },
  {
    "label": "set_epoll_pump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_epoll_pump(WeakPtr<MessagePumpEpoll> pump)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (epoll_pump_ =)",
    "insertText": "move(pump)"
  },
  {
    "label": "epoll_interest()",
    "kind": "Method",
    "detail": "Function (} const scoped_refptr<EpollInterest>&)",
    "insertText": "epoll_interest()"
  },
  {
    "label": "OnFdReadable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFdReadable()"
  },
  {
    "label": "OnFdWritable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFdWritable()"
  },
  {
    "label": "MessagePumpLibevent()",
    "kind": "Method",
    "detail": "Function (raw_ptr<FdWatcher> watcher_ = nullptr ; raw_ptr<bool> was_destroyed_ = nullptr ; std::unique_ptr<event> event_ ; raw_ptr<MessagePumpLibevent> libevent_pump_ = nullptr ; WeakPtr<MessagePumpEpoll> epoll_pump_ ; scoped_refptr<EpollInterest> epoll_interest_ ; } ;)",
    "insertText": "MessagePumpLibevent()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_MESSAGE_PUMP_EPOLL)"
  },
  {
    "label": "MessagePumpLibevent()",
    "kind": "Method",
    "detail": "Function (kUseEpoll } ;)",
    "insertText": "MessagePumpLibevent(decltype(kUseEpoll))"
  },
  {
    "label": "MessagePumpLibevent()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "MessagePumpLibevent(const MessagePumpLibevent&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MessagePumpLibevent&)",
    "insertText": "operator(const MessagePumpLibevent&)"
  },
  {
    "label": "InitializeFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFeatures()"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd, bool persistent, int mode, FdWatchController* controller, FdWatcher* delegate)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(Delegate* delegate)"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "ScheduleDelayedWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDelayedWork(const Delegate::NextWorkInfo& next_work_info)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : class MessagePumpLibeventTest ; bool)",
    "insertText": "Init()"
  },
  {
    "label": "OnLibeventNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLibeventNotification(int fd, short flags, void* context)"
  },
  {
    "label": "OnWakeup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWakeup(int socket, short flags, void* context)"
  },
  {
    "label": "RunState()",
    "kind": "Method",
    "detail": "Function (struct RunState {)",
    "insertText": "RunState(Delegate* delegate_in) : delegate(delegate_in)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif RunState* run_state_ = nullptr ; bool processed_io_events_ = false ; struct EventBaseFree { void)",
    "insertText": "operator()(event_base* e)"
  },
  {
    "label": "event_base_new()",
    "kind": "Method",
    "detail": "Function (} } ; std::unique_ptr<event_base,EventBaseFree> event_base_ {)",
    "insertText": "event_base_new()"
  }
]