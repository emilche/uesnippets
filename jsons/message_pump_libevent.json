[
  {
    "label": "event_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "event_base"
  },
  {
    "label": "event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "event"
  },
  {
    "label": "MessagePumpEpoll",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpEpoll"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "EpollInterestParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EpollInterestParams"
  },
  {
    "label": "EpollInterest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EpollInterest"
  },
  {
    "label": "RefCounted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCounted"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FdWatchController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FdWatchController"
  },
  {
    "label": "MessagePumpEpoll",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpEpoll"
  },
  {
    "label": "MessagePumpLibevent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibevent"
  },
  {
    "label": "MessagePumpLibeventTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibeventTest"
  },
  {
    "label": "MessagePumpLibeventTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibeventTest"
  },
  {
    "label": "RunState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RunState"
  },
  {
    "label": "EventBaseFree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EventBaseFree"
  },
  {
    "label": "EpollInterest()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "EpollInterest(FdWatchController* controller,\n                  const EpollInterestParams& params)"
  },
  {
    "label": "FdWatchController()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FdWatchController(const Location& from_here)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(std::unique_ptr<event> e)"
  },
  {
    "label": "ReleaseEvent()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<event>)",
    "insertText": "ReleaseEvent()"
  },
  {
    "label": "OnFileCanReadWithoutBlocking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCanReadWithoutBlocking(int fd, MessagePumpLibevent* pump)"
  },
  {
    "label": "OnFileCanWriteWithoutBlocking()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCanWriteWithoutBlocking(int fd, MessagePumpLibevent* pump)"
  },
  {
    "label": "OnFdReadable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFdReadable()"
  },
  {
    "label": "OnFdWritable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFdWritable()"
  },
  {
    "label": "InitializeFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFeatures()"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd,\n                           bool persistent,\n                           int mode,\n                           FdWatchController* controller,\n                           FdWatcher* delegate)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "OnLibeventNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLibeventNotification(int fd, short flags, void* context)"
  },
  {
    "label": "OnWakeup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWakeup(int socket, short flags, void* context)"
  }
]