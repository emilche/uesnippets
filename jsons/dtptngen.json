[
  {
    "label": "CharString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharString"
  },
  {
    "label": "Hashtable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hashtable"
  },
  {
    "label": "FormatParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatParser"
  },
  {
    "label": "DateTimeMatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateTimeMatcher"
  },
  {
    "label": "DistanceInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DistanceInfo"
  },
  {
    "label": "PatternMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PatternMap"
  },
  {
    "label": "PtnSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PtnSkeleton"
  },
  {
    "label": "SharedDateTimePatternGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedDateTimePatternGenerator"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "type"
  },
  {
    "label": "AppendItemFormatsSink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AppendItemFormatsSink"
  },
  {
    "label": "AppendItemNamesSink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AppendItemNamesSink"
  },
  {
    "label": "AvailableFormatsSink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AvailableFormatsSink"
  },
  {
    "label": "DateTimePatternGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateTimePatternGenerator"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "createInstance(UErrorCode& status)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "createInstance(const Locale& uLocale, UErrorCode& status)"
  },
  {
    "label": "internalMakeInstance()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "internalMakeInstance(const Locale& uLocale, UErrorCode& status)"
  },
  {
    "label": "createEmptyInstance()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "createEmptyInstance(UErrorCode& status)"
  },
  {
    "label": "staticGetSkeleton()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "staticGetSkeleton(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "getSkeleton()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getSkeleton(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "staticGetSkeleton()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "staticGetSkeleton(pattern, status)"
  },
  {
    "label": "staticGetBaseSkeleton()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "staticGetBaseSkeleton(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "getBaseSkeleton()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getBaseSkeleton(const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "staticGetBaseSkeleton()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "staticGetBaseSkeleton(pattern, status)"
  },
  {
    "label": "addPattern()",
    "kind": "Method",
    "detail": "Function (UDateTimePatternConflict)",
    "insertText": "addPattern(const UnicodeString& pattern,\n                                        UBool override,\n                                        UnicodeString& conflictingPattern,\n                                        UErrorCode& status)"
  },
  {
    "label": "setAppendItemFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAppendItemFormat(UDateTimePatternField field, const UnicodeString& value)"
  },
  {
    "label": "setAppendItemName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAppendItemName(UDateTimePatternField field, const UnicodeString& value)"
  },
  {
    "label": "setDateTimeFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDateTimeFormat(const UnicodeString& dateTimeFormat)"
  },
  {
    "label": "getBestPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getBestPattern(const UnicodeString& skeleton, UErrorCode& status)"
  },
  {
    "label": "getBestPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getBestPattern(const UnicodeString& skeleton,\n                                  UDateTimePatternMatchOptions options,\n                                  UErrorCode& status)"
  },
  {
    "label": "replaceFieldTypes()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "replaceFieldTypes(const UnicodeString& pattern,\n                                     const UnicodeString& skeleton,\n                                     UErrorCode& status)"
  },
  {
    "label": "replaceFieldTypes()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "replaceFieldTypes(const UnicodeString& pattern,\n                                     const UnicodeString& skeleton,\n                                     UDateTimePatternMatchOptions options,\n                                     UErrorCode& status)"
  },
  {
    "label": "setDecimal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimal(const UnicodeString& decimal)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "initData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initData(const Locale &locale, UErrorCode &status)"
  },
  {
    "label": "addCanonicalItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addCanonicalItems(UErrorCode &status)"
  },
  {
    "label": "addICUPatterns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addICUPatterns(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "hackTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "hackTimes(const UnicodeString& hackPattern, UErrorCode& status)"
  },
  {
    "label": "getCalendarTypeToUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getCalendarTypeToUse(const Locale& locale, CharString& destination, UErrorCode& err)"
  },
  {
    "label": "consumeShortTimePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "consumeShortTimePattern(const UnicodeString& shortTimePattern, UErrorCode& status)"
  },
  {
    "label": "addCLDRData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addCLDRData(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "addPatternWithSkeleton()",
    "kind": "Method",
    "detail": "Function (UDateTimePatternConflict)",
    "insertText": "addPatternWithSkeleton(const UnicodeString& pattern, const UnicodeString * skeletonToUse, UBool override, UnicodeString& conflictingPattern, UErrorCode& status)"
  },
  {
    "label": "initHashtable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initHashtable(UErrorCode& status)"
  },
  {
    "label": "setDateTimeFromCalendar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDateTimeFromCalendar(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "setDecimalSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDecimalSymbols(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "setFieldDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFieldDisplayName(UDateTimePatternField field, UDateTimePGDisplayWidth width, const UnicodeString& value)"
  },
  {
    "label": "getAppendName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAppendName(UDateTimePatternField field, UnicodeString& value)"
  },
  {
    "label": "mapSkeletonMetacharacters()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "mapSkeletonMetacharacters(const UnicodeString& patternForm, int32_t* flags, UErrorCode& status)"
  },
  {
    "label": "adjustFieldTypes()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "adjustFieldTypes(const UnicodeString& pattern, const PtnSkeleton* specifiedSkeleton, int32_t flags, UDateTimePatternMatchOptions options = UDATPG_MATCH_NO_OPTIONS)"
  },
  {
    "label": "getBestAppending()",
    "kind": "Method",
    "detail": "Function (UnicodeString)",
    "insertText": "getBestAppending(int32_t missingFields, int32_t flags, UErrorCode& status, UDateTimePatternMatchOptions options = UDATPG_MATCH_NO_OPTIONS)"
  },
  {
    "label": "setAvailableFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAvailableFormat(const UnicodeString &key, UErrorCode& status)"
  },
  {
    "label": "copyHashtable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyHashtable(Hashtable *other, UErrorCode &status)"
  },
  {
    "label": "loadAllowedHourFormatsData()",
    "kind": "Method",
    "detail": "Function (U_CALLCONV)",
    "insertText": "loadAllowedHourFormatsData(UErrorCode &status)"
  },
  {
    "label": "getAllowedHourFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAllowedHourFormats(const Locale &locale, UErrorCode &status)"
  }
]