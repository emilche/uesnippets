[
  {
    "label": "EProtocol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EProtocol"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEventHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventHeader"
  },
  {
    "label": "FAuxHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAuxHeader"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace UE { namespace Trace { # if)",
    "insertText": "defined(TRACE_PRIVATE_PROTOCOL_1)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (enum EProtocol : uint8 { Id = 1 } ; using Protocol0::EFieldType ; using Protocol0::FNewEventEvent ; enum class EEventFlags : uint8 { Important = 1<<0,MaybeHasAux = 1<<1,NoSync = 1<<2,} ; enum class EKnownEventUids : uint16 { NewEvent,User,)",
    "insertText": "Max(1 << 15)"
  }
]