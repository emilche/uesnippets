[
  {
    "label": "FSourceLocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSourceLocation"
  },
  {
    "label": "FSourceLocationImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceLocationImpl"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / Platform . h \" # include \" Templates / UnrealTemplate . h \" # ifndef UE_INCLUDE_SOURCE_LOCATION # define UE_INCLUDE_SOURCE_LOCATION ! UE_BUILD_SHIPPING # endif # if UE_INCLUDE_SOURCE_LOCATION&&)",
    "insertText": "defined(__cpp_lib_source_location)"
  },
  {
    "label": "current()",
    "kind": "Method",
    "detail": "Function (class FSourceLocation { # if UE_INCLUDE_SOURCE_LOCATION # ifdef __cpp_lib_source_location using FSourceLocationImpl = std::source_location ; # else struct FSourceLocationImpl { UE_CONSTEVAL FSourceLocationImpl)",
    "insertText": "current(const uint_least32_t InLine = __builtin_LINE(), const uint_least32_t InColumn = __builtin_COLUMN(), const char* const InFile = __builtin_FILE(), const char* const InFunction = __builtin_FUNCTION())"
  },
  {
    "label": "FSourceLocationImpl()",
    "kind": "Method",
    "detail": "Function (FSourceLocationImpl Location ; Location . Line = ; Location . Column = InColumn ; Location . FileName = InFile ; Location . FunctionName = InFunction ; return Location ; } ;)",
    "insertText": "FSourceLocationImpl()"
  },
  {
    "label": "line()",
    "kind": "Method",
    "detail": "Function (uint_least32_t)",
    "insertText": "line()"
  },
  {
    "label": "GetLine()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetLine()"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetColumn()"
  },
  {
    "label": "GetFileName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetFileName()"
  },
  {
    "label": "GetFunctionName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetFunctionName()"
  },
  {
    "label": "FSourceLocation()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FSourceLocation(FSourceLocationImpl&& In) noexcept : Impl(MoveTemp(In))"
  }
]