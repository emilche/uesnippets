[
  {
    "label": "UAnimCompositeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCompositeBase"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FRootMotionExtractionStep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootMotionExtractionStep"
  },
  {
    "label": "FAnimSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSegment"
  },
  {
    "label": "UEditorAnimSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorAnimSegment"
  },
  {
    "label": "UEditorAnimCompositeSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorAnimCompositeSegment"
  },
  {
    "label": "FAnimTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrack"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Animation / AnimSequenceBase . h \" # include \" HAL / IConsoleManager . h \" # include \" AnimCompositeBase . generated . h \" class UAnimCompositeBase ; class UAnimSequence ; struct FCompactPose ; # if WITH_EDITOR namespace UE { namespace Anim { TAutoConsoleVariable<bool> CVarOutputMontageFrameRateWarning ; } } # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FRootMotionExtractionStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRootMotionExtractionStep() : AnimSequence(nullptr) , StartPosition(0.f) , EndPosition(0.f)"
  },
  {
    "label": "FRootMotionExtractionStep()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRootMotionExtractionStep(UAnimSequence * InAnimSequence, float InStartPosition, float InEndPosition) : AnimSequence(InAnimSequence) , StartPosition(InStartPosition) , EndPosition(InEndPosition)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() PRAGMA_DISABLE_DEPRECATION_WARNINGS FAnimSegment(const FAnimSegment&)"
  },
  {
    "label": "FAnimSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimSegment(FAnimSegment&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimSegment&)",
    "insertText": "operator(const FAnimSegment&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAnimSegment&)",
    "insertText": "operator(FAnimSegment&&)"
  },
  {
    "label": "UpdateCachedPlayLength()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR class UEditorAnimSegment ; class UEditorAnimCompositeSegment ; void)",
    "insertText": "UpdateCachedPlayLength()"
  },
  {
    "label": "SetAnimReference()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "SetAnimReference(UAnimSequenceBase* InAnimReference, bool bInitialize = false)"
  },
  {
    "label": "GetAnimReference()",
    "kind": "Method",
    "detail": "Function (const TObjectPtr<UAnimSequenceBase>&)",
    "insertText": "GetAnimReference()"
  },
  {
    "label": "IsPlayLengthOutOfDate()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return AnimReference ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } # if WITH_EDITOR bool)",
    "insertText": "IsPlayLengthOutOfDate()"
  },
  {
    "label": "FAnimSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimSegment() PRAGMA_DISABLE_DEPRECATION_WARNINGS : AnimReference(nullptr) PRAGMA_ENABLE_DEPRECATION_WARNINGS , StartPos(0.f) , AnimStartTime(0.f) , AnimEndTime(0.f) , AnimPlayRate(1.f) , LoopingCount(1) , bValid(true)"
  },
  {
    "label": "GetValidPlayRate()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetValidPlayRate()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS float SeqPlayRate = AnimReference ? AnimReference -> RateScale : 1 . 0 f ; PRAGMA_ENABLE_DEPRECATION_WARNINGS float FinalPlayRate = SeqPlayRate* AnimPlayRate ;)",
    "insertText": "return(FMath::IsNearlyZero(FinalPlayRate) ? 1.f : FinalPlayRate)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetLength()"
  },
  {
    "label": "GetEndPos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetEndPos()"
  },
  {
    "label": "IsInRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInRange(float CurPos)"
  },
  {
    "label": "IsIncluded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIncluded(float InStartPos, float InEndPos)"
  },
  {
    "label": "ConvertTrackPosToAnimPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ConvertTrackPosToAnimPos(const float& TrackPosition)"
  },
  {
    "label": "GetAnimNotifiesFromTrackPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimNotifiesFromTrackPositions(const float& PreviousTrackPosition, const float& CurrentTrackPosition, FAnimNotifyContext& NotifyContext)"
  },
  {
    "label": "GetRootMotionExtractionStepsForTrackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootMotionExtractionStepsForTrackRange(TArray<FRootMotionExtractionStep> & RootMotionExtractionSteps, const float StartPosition, const float EndPosition)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=AnimTrack, EditFixedSize)"
  },
  {
    "label": "FAnimTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimTrack()"
  },
  {
    "label": "IsAdditive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdditive()"
  },
  {
    "label": "IsRotationOffsetAdditive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRotationOffsetAdditive()"
  },
  {
    "label": "GetTrackAdditiveType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTrackAdditiveType()"
  },
  {
    "label": "HasRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRootMotion()"
  },
  {
    "label": "GetRootMotionExtractionStepsForTrackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootMotionExtractionStepsForTrackRange(TArray<FRootMotionExtractionStep> & RootMotionExtractionSteps, const float StartTrackPosition, const float EndTrackPosition)"
  },
  {
    "label": "ValidateSegmentTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSegmentTimes()"
  },
  {
    "label": "IsValidToAdd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToAdd(const UAnimSequenceBase* SequenceBase, FText* OutReason = nullptr)"
  },
  {
    "label": "GetSegmentIndexAtTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSegmentIndexAtTime(float InTime)"
  },
  {
    "label": "GetSegmentAtTime()",
    "kind": "Method",
    "detail": "Function (FAnimSegment*)",
    "insertText": "GetSegmentAtTime(float InTime)"
  },
  {
    "label": "GetAnimationPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationPose(FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext)"
  },
  {
    "label": "EnableRootMotionSettingFromMontage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRootMotionSettingFromMontage(bool bInEnableRootMotion, const ERootMotionRootLock::Type InRootMotionRootLock)"
  },
  {
    "label": "GetAllAnimationSequencesReferred()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "GetAllAnimationSequencesReferred(TArray<UAnimationAsset*>& AnimationAssets, bool bRecursive)"
  },
  {
    "label": "ReplaceReferredAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceReferredAnimations(const TMap<UAnimationAsset*, UAnimationAsset*>& ReplacementMap)"
  },
  {
    "label": "CollapseAnimSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseAnimSegments()"
  },
  {
    "label": "SortAnimSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortAnimSegments()"
  },
  {
    "label": "GetAdditiveBasePose()",
    "kind": "Method",
    "detail": "Function (class UAnimSequence*)",
    "insertText": "GetAdditiveBasePose()"
  },
  {
    "label": "InvalidateRecursiveAsset()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InvalidateRecursiveAsset(class UAnimCompositeBase* CheckAsset)"
  },
  {
    "label": "ContainRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainRecursive(const TArray<UAnimCompositeBase*>& CurrentAccumulatedList)"
  },
  {
    "label": "IsNotifyAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNotifyAvailable()"
  },
  {
    "label": "GetTotalBytesUsed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTotalBytesUsed()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() virtual void PostLoad()"
  },
  {
    "label": "GetSamplingFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetSamplingFrameRate()"
  },
  {
    "label": "ExtractRootMotionFromTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractRootMotionFromTrack(const FAnimTrack &SlotAnimTrack, float StartTrackPosition, float EndTrackPosition, FRootMotionMovementParams &RootMotion)"
  },
  {
    "label": "InvalidateRecursiveAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateRecursiveAsset() PURE_VIRTUAL(UAnimCompositeBase::InvalidateRecursiveAsset,)"
  },
  {
    "label": "ContainRecursive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainRecursive(TArray<UAnimCompositeBase*>& CurrentAccumulatedList) PURE_VIRTUAL(UAnimCompositeBase::ContainRecursive, return false;)"
  },
  {
    "label": "SetCompositeLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompositeLength(float InLength) PURE_VIRTUAL(UAnimCompositeBase::SetCompositeLength,)"
  },
  {
    "label": "PopulateWithExistingModel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PopulateWithExistingModel(TScriptInterface<IAnimationDataModel> ExistingDataModel)"
  },
  {
    "label": "UpdateCommonTargetFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCommonTargetFrameRate() PURE_VIRTUAL(UAnimCompositeBase::UpdateCommonTargetFrameRate,)"
  },
  {
    "label": "GetCommonTargetFrameRate()",
    "kind": "Method",
    "detail": "Function (# endif FFrameRate)",
    "insertText": "GetCommonTargetFrameRate()"
  }
]