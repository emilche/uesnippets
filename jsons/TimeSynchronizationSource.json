[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FTimeSynchronizationOpenData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeSynchronizationOpenData"
  },
  {
    "label": "FTimeSynchronizationStartData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeSynchronizationStartData"
  },
  {
    "label": "UTimeSynchronizationSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTimeSynchronizationSource"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / Timecode . h \" # include \" Templates / SharedPointer . h \" # include \" TimeSynchronizationSource . generated . h \" # if WITH_EDITOR class SWidget ; # endif struct FTimeSynchronizationOpenData { FFrameRate SynchronizationFrameRate ; TOptional<FFrameTime> RolloverFrame ; } ; struct FTimeSynchronizationStartData { FFrameTime StartFrame ; } ;)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(EditAnywhere, Category = Synchronization)"
  },
  {
    "label": "GetVisualWidget()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR TSharedRef<SWidget>)",
    "insertText": "GetVisualWidget()"
  },
  {
    "label": "GetNewestSampleTime()",
    "kind": "Method",
    "detail": "Function (# endif FFrameTime)",
    "insertText": "GetNewestSampleTime() const PURE_VIRTUAL(UTimeSynchronizationSource::GetNewestSampleTime, return FFrameTime();) TIMEMANAGEMENT_API virtual FFrameTime GetOldestSampleTime() const PURE_VIRTUAL(UTimeSynchronizationSource::GetOldestSampleTime, return FFrameTime();) TIMEMANAGEMENT_API virtual FFrameRate GetFrameRate() const PURE_VIRTUAL(UTimeSynchronizationSource::GetFrameRate, return FFrameRate();) TIMEMANAGEMENT_API virtual bool IsReady() const PURE_VIRTUAL(UTimeSynchronizationSource::IsReady, return false;) TIMEMANAGEMENT_API virtual bool Open(const FTimeSynchronizationOpenData& OpenData) PURE_VIRTUAL(UTimeSynchronizationSource::Open, return false;) TIMEMANAGEMENT_API virtual void Start(const FTimeSynchronizationStartData& StartData) PURE_VIRTUAL(UTimeSynchronizationSource::Start, return;) TIMEMANAGEMENT_API virtual void Close() PURE_VIRTUAL(UTimeSynchronizationSource::Close, return;) TIMEMANAGEMENT_API virtual FString GetDisplayName() const PURE_VIRTUAL(UTimeSynchronizationSource::GetDisplayName, return FString();) public: FORCEINLINE static bool IsFrameBetweenWithRolloverModulus(const FFrameTime& ToCheck, const FFrameTime& LowerBound, const FFrameTime& UpperBound, const FFrameTime& RolloverModulus)"
  },
  {
    "label": "ConvertFrameTimeToTimecode()",
    "kind": "Method",
    "detail": "Function (} } FTimecode)",
    "insertText": "ConvertFrameTimeToTimecode(const FFrameTime& FrameTime, const FFrameRate& FrameRate)"
  },
  {
    "label": "AddOffsetWithRolloverModulus()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "AddOffsetWithRolloverModulus(const FFrameTime& FrameTime, const int32 Offset, const FFrameTime& RolloverModulus)"
  },
  {
    "label": "GetFrame()",
    "kind": "Method",
    "detail": "Function (const FFrameTime WithOffset = FrameTime + Offset ; const int32 RolloverFrameValue = RolloverModulus .)",
    "insertText": "GetFrame()"
  },
  {
    "label": "FindDistanceBetweenFramesWithRolloverModulus()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindDistanceBetweenFramesWithRolloverModulus(const FFrameTime& StartFrameTime, const FFrameTime& EndFrameTime, const TOptional<FFrameTime>& RolloverModulus, bool& bDidRollover)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Offset(EndFrameTime.GetFrame().Value - StartFrameTime.GetFrame().Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bDidRollover = false ;)",
    "insertText": "if(RolloverModulus.IsSet())"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(Offset < 0)"
  }
]