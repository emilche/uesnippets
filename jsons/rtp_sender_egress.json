[
  {
    "label": "RtpSenderEgress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpSenderEgress"
  },
  {
    "label": "NonPacedPacketSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonPacedPacketSender"
  },
  {
    "label": "NonPacedPacketSender()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_SENDER_EGRESS_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_SENDER_EGRESS_H_ # include<map> # include<memory> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / call / transport . h \" # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / data_rate . h \" # include \" modules / remote_bitrate_estimator / test / bwe_test_logging . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / packet_sequencer . h \" # include \" modules / rtp_rtcp / source / rtp_packet_history . h \" # include \" modules / rtp_rtcp / source / rtp_packet_to_send . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_interface . h \" # include \" modules / rtp_rtcp / source / rtp_sequence_number_map . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / task_utils / repeating_task . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RtpSenderEgress { public : class NonPacedPacketSender : public RtpPacketSender { public :)",
    "insertText": "NonPacedPacketSender(RtpSenderEgress* sender, PacketSequencer* sequencer)"
  },
  {
    "label": "NonPacedPacketSender()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NonPacedPacketSender()"
  },
  {
    "label": "EnqueuePackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueuePackets(std::vector<std::unique_ptr<RtpPacketToSend>> packets)"
  },
  {
    "label": "PrepareForSend()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PrepareForSend(RtpPacketToSend* packet)"
  },
  {
    "label": "RtpSenderEgress()",
    "kind": "Method",
    "detail": "Function (uint16_t transport_sequence_number_ ; RtpSenderEgress* const sender_ ; PacketSequencer* sequencer_ ; } ;)",
    "insertText": "RtpSenderEgress(const RtpRtcpInterface::Configuration& config, RtpPacketHistory* packet_history)"
  },
  {
    "label": "RtpSenderEgress()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpSenderEgress()"
  },
  {
    "label": "SendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPacket(RtpPacketToSend* packet, const PacedPacketInfo& pacing_info) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "Ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "Ssrc()"
  },
  {
    "label": "GetDataCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDataCounters(StreamDataCounters* rtp_stats, StreamDataCounters* rtx_stats) const RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "ForceIncludeSendPacketsInAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceIncludeSendPacketsInAllocation(bool part_of_allocation) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "MediaHasBeenSent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MediaHasBeenSent() const RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "SetMediaHasBeenSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMediaHasBeenSent(bool media_sent) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "SetTimestampOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimestampOffset(uint32_t timestamp) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "GetSentRtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<RtpSequenceNumberMap::Info>)",
    "insertText": "GetSentRtpPacketInfos(rtc::ArrayView<const uint16_t> sequence_numbers) const RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "SetFecProtectionParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecProtectionParameters(const FecProtectionParams& delta_params, const FecProtectionParams& key_params)"
  },
  {
    "label": "FetchFecPackets()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "FetchFecPackets()"
  },
  {
    "label": "OnAbortedRetransmissions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAbortedRetransmissions(rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "GetSendRatesLocked()",
    "kind": "Method",
    "detail": "Function (private : typedef std::map<int64_t,int> SendDelayMap ; RtpSendRates)",
    "insertText": "GetSendRatesLocked(int64_t now_ms) const RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "HasCorrectSsrc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCorrectSsrc(const RtpPacketToSend& packet)"
  },
  {
    "label": "AddPacketToTransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacketToTransportFeedback(uint16_t packet_id, const RtpPacketToSend& packet, const PacedPacketInfo& pacing_info)"
  },
  {
    "label": "UpdateDelayStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayStatistics(int64_t capture_time_ms, int64_t now_ms, uint32_t ssrc)"
  },
  {
    "label": "RecomputeMaxSendDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecomputeMaxSendDelay() RTC_EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "UpdateOnSendPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOnSendPacket(int packet_id, int64_t capture_time_ms, uint32_t ssrc)"
  },
  {
    "label": "SendPacketToNetwork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPacketToNetwork(const RtpPacketToSend& packet, const PacketOptions& options, const PacedPacketInfo& pacing_info)"
  },
  {
    "label": "UpdateRtpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtpStats(int64_t now_ms, uint32_t packet_ssrc, RtpPacketMediaType packet_type, RtpPacketCounter counter, size_t packet_size)"
  },
  {
    "label": "BweTestLoggingPlot()",
    "kind": "Method",
    "detail": "Function (# if BWE_TEST_LOGGING_COMPILE_TIME_ENABLE void)",
    "insertText": "BweTestLoggingPlot(int64_t now_ms, uint32_t packet_ssrc)"
  },
  {
    "label": "PeriodicUpdate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PeriodicUpdate()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase* const worker_queue_ ; RTC_NO_UNIQUE_ADDRESS SequenceChecker pacer_checker_ ; const uint32_t ssrc_ ; const absl::optional<uint32_t> rtx_ssrc_ ; const absl::optional<uint32_t> flexfec_ssrc_ ; const bool populate_network2_timestamp_ ; const bool send_side_bwe_with_overhead_ ; Clock* const clock_ ; RtpPacketHistory* const packet_history_ ; Transport* const transport_ ; RtcEventLog* const event_log_ ; # if BWE_TEST_LOGGING_COMPILE_TIME_ENABLE const bool is_audio_ ; # endif const bool need_rtp_packet_infos_ ; VideoFecGenerator* const fec_generator_)",
    "insertText": "RTC_GUARDED_BY(pacer_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool force_part_of_allocation_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (uint32_t timestamp_offset_)",
    "insertText": "RTC_GUARDED_BY(worker_queue_)"
  }
]