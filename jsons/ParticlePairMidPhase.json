[
  {
    "label": "FChaosVDDataWrapperUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDDataWrapperUtils"
  },
  {
    "label": "FCollisionConstraintAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionConstraintAllocator"
  },
  {
    "label": "FParticlePairMidPhaseCollisionKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePairMidPhaseCollisionKey"
  },
  {
    "label": "EParticlePairMidPhaseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EParticlePairMidPhaseType"
  },
  {
    "label": "FSingleShapePairCollisionDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleShapePairCollisionDetector"
  },
  {
    "label": "FParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePairMidPhase"
  },
  {
    "label": "FShapePairParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapePairParticlePairMidPhase"
  },
  {
    "label": "FLeafImplicitObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLeafImplicitObject"
  },
  {
    "label": "FGenericParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericParticlePairMidPhase"
  },
  {
    "label": "FSphereApproximationParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSphereApproximationParticlePairMidPhase"
  },
  {
    "label": "FSingleShapePairCollisionDetector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / Collision / CollisionKeys . h \" # include \" Chaos / Collision / CollisionVisitor . h \" # include \" Chaos / Collision / PBDCollisionConstraint . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" ProfilingDebugging / CsvProfiler . h \" class FChaosVDDataWrapperUtils ; namespace Chaos { namespace Private { class FCollisionConstraintAllocator ; } class FParticlePairMidPhaseCollisionKey ; enum EParticlePairMidPhaseType : int8 { Generic,ShapePair,SphereApproximation,} ; class FSingleShapePairCollisionDetector { public : using FCollisionsArray = TArray<FPBDCollisionConstraint*,TInlineAllocator<1>> ;)",
    "insertText": "FSingleShapePairCollisionDetector(FGeometryParticleHandle* InParticle0, const FPerShapeData* InShape0, FGeometryParticleHandle* InParticle1, const FPerShapeData* InShape1, const Private::FCollisionSortKey& InCollisionSortKey, const EContactShapesType InShapePairType, FParticlePairMidPhase& MidPhase)"
  },
  {
    "label": "FSingleShapePairCollisionDetector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSingleShapePairCollisionDetector(FSingleShapePairCollisionDetector&& R)"
  },
  {
    "label": "FSingleShapePairCollisionDetector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSingleShapePairCollisionDetector(const FSingleShapePairCollisionDetector& R)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSingleShapePairCollisionDetector&)",
    "insertText": "operator(const FSingleShapePairCollisionDetector& R)"
  },
  {
    "label": "FSingleShapePairCollisionDetector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSingleShapePairCollisionDetector()"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (const FPBDCollisionConstraint*)",
    "insertText": "GetConstraint()"
  },
  {
    "label": "GetParticle0()",
    "kind": "Method",
    "detail": "Function (} const FGeometryParticleHandle*)",
    "insertText": "GetParticle0()"
  },
  {
    "label": "GenerateCollision()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GenerateCollision(const FRealSingle Dt, const FRealSingle CullDistance, const FVec3f& RelativeMovement, const FCollisionContext& Context)"
  },
  {
    "label": "GenerateCollisionCCD()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GenerateCollisionCCD(const FRealSingle Dt, const FRealSingle CullDistance, const FVec3f& RelativeMovement, const bool bEnableCCDSweep, const FCollisionContext& Context)"
  },
  {
    "label": "WakeCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeCollision(const int32 SleepEpoch, const int32 CurrentEpoch)"
  },
  {
    "label": "SetCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollision(const FPBDCollisionConstraint& Constraint, const FCollisionContext& Context)"
  },
  {
    "label": "GenerateCollisionImpl()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "GenerateCollisionImpl(const FRealSingle Dt, const FRealSingle CullDistance, const FVec3f& RelativeMovement, const FCollisionContext& Context)"
  },
  {
    "label": "GenerateCollisionCCDImpl()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateCollisionCCDImpl(const FRealSingle Dt, const FRealSingle CullDistance, const FVec3f& RelativeMovement, const bool bEnableCCDSweep, const FCollisionContext& Context)"
  },
  {
    "label": "GenerateCollisionProbeImpl()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateCollisionProbeImpl(const FRealSingle Dt, const FRealSingle CullDistance, const FVec3f& RelativeMovement, const FCollisionContext& Context)"
  },
  {
    "label": "DoBoundsOverlap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoBoundsOverlap(const FRealSingle CullDistance, const FVec3f& RelativeMovement, const int32 CurrentEpoch)"
  },
  {
    "label": "CreateConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateConstraint(const FReal CullDistance, const FCollisionContext& Context)"
  },
  {
    "label": "CalculateMidPhaseType()",
    "kind": "Method",
    "detail": "Function (FParticlePairMidPhase& MidPhase ; FPBDCollisionConstraintPtr Constraint ; FGeometryParticleHandle* Particle0 ; FGeometryParticleHandle* Particle1 ; const FPerShapeData* Shape0 ; const FPerShapeData* Shape1 ; Private::FCollisionSortKey CollisionSortKey ; FRealSingle SphereBoundsCheckSize ; int32 LastUsedEpoch ; EContactShapesType ShapePairType ; Private::FImplicitBoundsTestFlags BoundsTestFlags ; } ; class FParticlePairMidPhase { public : EParticlePairMidPhaseType)",
    "insertText": "CalculateMidPhaseType(FGeometryParticleHandle* InParticle0, FGeometryParticleHandle* InParticle1)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (FParticlePairMidPhase*)",
    "insertText": "Make(FGeometryParticleHandle* InParticle0, FGeometryParticleHandle* InParticle1)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_NONCOPYABLE(FParticlePairMidPhase)"
  },
  {
    "label": "FParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParticlePairMidPhase(const EParticlePairMidPhaseType InMidPhaseType)"
  },
  {
    "label": "FParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FParticlePairMidPhase()"
  },
  {
    "label": "GetMidPhaseType()",
    "kind": "Method",
    "detail": "Function (EParticlePairMidPhaseType)",
    "insertText": "GetMidPhaseType()"
  },
  {
    "label": "CachePrefetch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CachePrefetch()"
  },
  {
    "label": "PrefetchBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrefetchBlock(this, sizeof(*this))"
  },
  {
    "label": "IsUsedSince()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsedSince(const int32 Epoch)"
  },
  {
    "label": "IsSleeping()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSleeping()"
  },
  {
    "label": "IsInConstraintGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInConstraintGraph()"
  },
  {
    "label": "DetachParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachParticle(FGeometryParticleHandle* Particle)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetModifications()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetModifications()"
  },
  {
    "label": "GenerateCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCollisions(const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "InjectCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectCollision(const FPBDCollisionConstraint& Constraint, const FCollisionContext& Context)"
  },
  {
    "label": "VisitCollisions()",
    "kind": "Method",
    "detail": "Function (template<TLambda> ECollisionVisitorResult)",
    "insertText": "VisitCollisions(const TLambda& Visitor, const ECollisionVisitorFlags VisitFlags = ECollisionVisitorFlags::VisitDefault)"
  },
  {
    "label": "VisitConstCollisions()",
    "kind": "Method",
    "detail": "Function (template<TLambda> ECollisionVisitorResult)",
    "insertText": "VisitConstCollisions(const TLambda& Visitor, const ECollisionVisitorFlags VisitFlags = ECollisionVisitorFlags::VisitDefault)"
  },
  {
    "label": "GetParticleCollisionsIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParticleCollisionsIndex(FGeometryParticleHandle* InParticle)"
  },
  {
    "label": "SetIsActive()",
    "kind": "Method",
    "detail": "Function (ParticleCollisionsIndex0 = InIndex ; } else { ParticleCollisionsIndex1 = InIndex ; } } void)",
    "insertText": "SetIsActive(bool bIsActive)"
  },
  {
    "label": "SetCCDIsActive()",
    "kind": "Method",
    "detail": "Function (Flags . bIsModified = true ; Flags . bIsActive = bIsActive ; } void)",
    "insertText": "SetCCDIsActive(bool bCCDIsActive)"
  },
  {
    "label": "SetConvexOptimizationIsActive()",
    "kind": "Method",
    "detail": "Function (Flags . bIsModified = true ; Flags . bIsCCDActive = bCCDIsActive ; } void)",
    "insertText": "SetConvexOptimizationIsActive(bool bSetConvexOptimizationIsActive)"
  },
  {
    "label": "IsCCD()",
    "kind": "Method",
    "detail": "Function (Flags . bIsModified = true ; Flags . bIsConvexOptimizationActive = bSetConvexOptimizationIsActive ; } bool)",
    "insertText": "IsCCD()"
  },
  {
    "label": "BuildDetectorsImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildDetectorsImpl()"
  },
  {
    "label": "GenerateCollisionsImpl()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateCollisionsImpl(const FRealSingle Dt, const FRealSingle CullDistance, const FVec3f& RelativeMovement, const FCollisionContext& Context)"
  },
  {
    "label": "WakeCollisionsImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeCollisionsImpl(const int32 CurrentEpoch)"
  },
  {
    "label": "InjectCollisionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectCollisionImpl(const FPBDCollisionConstraint& Constraint, const FCollisionContext& Context)"
  },
  {
    "label": "ShouldEnableCCDSweep()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEnableCCDSweep(const FReal Dt)"
  },
  {
    "label": "InitThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitThresholds()"
  },
  {
    "label": "FFlags()",
    "kind": "Method",
    "detail": "Function (union FFlags {)",
    "insertText": "FFlags() : Bits(0)"
  },
  {
    "label": "FShapePairParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (} struct { uint16 bIsActive : 1 ; uint16 bIsCCD : 1 ; uint16 bIsCCDActive : 1 ; uint16 bUseSweep : 1 ; uint16 bIsMACD : 1 ; uint16 bIsConvexOptimizationActive : 1 ; uint16 bIsSleeping : 1 ; uint16 bIsModified : 1 ; } ; uint16 Bits ; } ; EParticlePairMidPhaseType MidPhaseType ; FFlags Flags ; FGeometryParticleHandle* Particle0 ; FGeometryParticleHandle* Particle1 ; FRealSingle CullDistanceScale ; Private::FCollisionParticlePairKey ParticlePairKey ; int32 LastUsedEpoch ; int32 NumActiveConstraints ; int32 ParticleCollisionsIndex0 ; int32 ParticleCollisionsIndex1 ;::FChaosVDDataWrapperUtils ; } ; class FShapePairParticlePairMidPhase : public FParticlePairMidPhase { public : class FParticlePairMidPhase ;)",
    "insertText": "FShapePairParticlePairMidPhase()"
  },
  {
    "label": "ResetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetImpl()"
  },
  {
    "label": "TryAddShapePair()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TryAddShapePair(const FPerShapeData* Shape0, const int32 ShapeIndex0, const FPerShapeData* Shape1, const int32 ShapeIndex1)"
  },
  {
    "label": "FGenericParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (TArray<FSingleShapePairCollisionDetector,TInlineAllocator<1>> ShapePairDetectors ; } ; struct FLeafImplicitObject ; class FGenericParticlePairMidPhase : public FParticlePairMidPhase { public : class FParticlePairMidPhase ;)",
    "insertText": "FGenericParticlePairMidPhase()"
  },
  {
    "label": "GenerateCollisionsBVHBVH()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "GenerateCollisionsBVHBVH(FGeometryParticleHandle* ParticleA, const Private::FImplicitBVH* BVHA, FGeometryParticleHandle* ParticleB, const Private::FImplicitBVH* BVHB, const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "GenerateCollisionsBVHImplicitHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCollisionsBVHImplicitHierarchy(FGeometryParticleHandle* ParticleA, const Private::FImplicitBVH* BVHA, FGeometryParticleHandle* ParticleB, const FImplicitObject* RootImplicitB, const Private::FConvexOptimizer* ConvexOptimizerB, const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "GenerateCollisionsImplicitHierarchyImplicitHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCollisionsImplicitHierarchyImplicitHierarchy(FGeometryParticleHandle* ParticleA, const FImplicitObject* RootImplicitA, const Private::FConvexOptimizer* ConvexOptimizerA, FGeometryParticleHandle* ParticleB, const FImplicitObject* RootImplicitB, const Private::FConvexOptimizer* ConvexOptimizerB, const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "GenerateCollisionsBVHImplicitLeaf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCollisionsBVHImplicitLeaf(FGeometryParticleHandle* ParticleA, const Private::FImplicitBVH* BVHA, FGeometryParticleHandle* ParticleB, const FImplicitObject* ImplicitB, const FShapeInstance* ShapeInstanceB, const FRigidTransform3& RelativeTransformB, const int32 LeafObjectIndexB, const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "GenerateCollisionsImplicitLeafImplicitLeaf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateCollisionsImplicitLeafImplicitLeaf(FGeometryParticleHandle* ParticleA, const FImplicitObject* ImplicitA, const FShapeInstance* ShapeInstanceA, const FRigidTransform3 ParticleWorldTransformA, const FRigidTransform3& RelativeTransformA, const int32 LeafObjectIndexA, FGeometryParticleHandle* ParticleB, const FImplicitObject* ImplicitB, const FShapeInstance* ShapeInstanceB, const FRigidTransform3 ParticleWorldTransformB, const FRigidTransform3& RelativeTransformB, const int32 LeafObjectIndexB, const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "DoBoundsOverlap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoBoundsOverlap(const FImplicitObject* ImplicitA, const FRigidTransform3& ParticleWorldTransformA, const FRigidTransform3& ShapeRelativeTransformA, const FImplicitObject* ImplicitB, const FRigidTransform3& ParticleWorldTransformB, const FRigidTransform3& ShapeRelativeTransformB, const Private::FImplicitBoundsTestFlags BoundsTestFlags, const FRealSingle DistanceCheckSize, const FReal CullDistance)"
  },
  {
    "label": "FindOrCreateConstraint()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraint*)",
    "insertText": "FindOrCreateConstraint(FGeometryParticleHandle* InParticle0, const FImplicitObject* InImplicit0, const int32 InImplicitId0, const FShapeInstance* InShape0, const FBVHParticles* InBVHParticles0, const FRigidTransform3& InShapeRelativeTransform0, FGeometryParticleHandle* InParticle1, const FImplicitObject* InImplicit1, const int32 InImplicitId1, const FShapeInstance* InShape1, const FBVHParticles* InBVHParticles1, const FRigidTransform3& InShapeRelativeTransform1, const FReal CullDistance, const EContactShapesType ShapePairType, const bool bUseManifold, const bool bEnableSweep, const FCollisionContext& Context)"
  },
  {
    "label": "FindConstraint()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraint*)",
    "insertText": "FindConstraint(const FParticlePairMidPhaseCollisionKey& CollisionKey)"
  },
  {
    "label": "CreateConstraint()",
    "kind": "Method",
    "detail": "Function (FPBDCollisionConstraint*)",
    "insertText": "CreateConstraint(FGeometryParticleHandle* Particle0, const FImplicitObject* Implicit0, const FPerShapeData* Shape0, const FBVHParticles* BVHParticles0, const FRigidTransform3& ShapeRelativeTransform0, FGeometryParticleHandle* Particle1, const FImplicitObject* Implicit1, const FPerShapeData* Shape1, const FBVHParticles* BVHParticles1, const FRigidTransform3& ShapeRelativeTransform1, const FParticlePairMidPhaseCollisionKey& CollisionKey, const Private::FCollisionSortKey& CollisionSortKey, const FReal CullDistance, const EContactShapesType ShapePairType, const bool bInUseManifold, const FCollisionContext& Context)"
  },
  {
    "label": "ProcessNewConstraints()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ProcessNewConstraints(const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "PruneConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneConstraints(const int32 CurrentEpoch)"
  },
  {
    "label": "UpdateCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCollision(FPBDCollisionConstraint* Constraint, const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "UpdateCollisionCCD()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCollisionCCD(FPBDCollisionConstraint* Constraint, const FReal CullDistance, const FReal Dt, const FCollisionContext& Context)"
  },
  {
    "label": "FSphereApproximationParticlePairMidPhase()",
    "kind": "Method",
    "detail": "Function (TMap<uint64,FPBDCollisionConstraintPtr> Constraints ; TArray<FPBDCollisionConstraint*> NewConstraints ; } ; class FSphereApproximationParticlePairMidPhase : public FParticlePairMidPhase { public : class FParticlePairMidPhase ;)",
    "insertText": "FSphereApproximationParticlePairMidPhase()"
  },
  {
    "label": "InitSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSphere(const FGeometryParticleHandle* InParticle, FImplicitSphere3& OutSphere)"
  }
]