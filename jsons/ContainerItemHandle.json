[
  {
    "label": "TConstContainerItemHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstContainerItemHandle"
  },
  {
    "label": "TContainerItemHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TContainerItemHandle"
  },
  {
    "label": "TConstContainerItemHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" namespace Chaos { template<T_CONTAINER,T_ITEM> class TConstContainerItemHandle { public : using FContainer = T_CONTAINER ; using FItem = T_ITEM ; using FHandle = TConstContainerItemHandle<FContainer,FItem> ;)",
    "insertText": "TConstContainerItemHandle() : Container(nullptr) , Index(INDEX_NONE)"
  },
  {
    "label": "TConstContainerItemHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TConstContainerItemHandle(const T_CONTAINER& InContainer, int InIndex) : Container(&InContainer) , Index(InIndex)"
  },
  {
    "label": "TryGet()",
    "kind": "Method",
    "detail": "Function (} const FItem*)",
    "insertText": "TryGet()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } const FItem&)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FItem*)",
    "insertText": "operator()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetContainer()",
    "kind": "Method",
    "detail": "Function (Container = nullptr ; Index = INDEX_NONE ; } const FContainer*)",
    "insertText": "GetContainer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FHandle& L, const FHandle& R)"
  },
  {
    "label": "TContainerItemHandle()",
    "kind": "Method",
    "detail": "Function (} private : const FContainer* Container ; int Index ; } ; template<T_CONTAINER,T_ITEM> class TContainerItemHandle : private TConstContainerItemHandle<T_CONTAINER,T_ITEM> { public : using Base = TConstContainerItemHandle<T_CONTAINER,T_ITEM> ; using FContainer = T_CONTAINER ; using FItem = T_ITEM ; using FHandle = TContainerItemHandle<FContainer,FItem> ;)",
    "insertText": "TContainerItemHandle()"
  },
  {
    "label": "TContainerItemHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TContainerItemHandle(T_CONTAINER& InContainer, int InIndex) : Base(InContainer, InIndex)"
  },
  {
    "label": "T_ITEM()",
    "kind": "Method",
    "detail": "Function (} operator const TConstContainerItemHandle<T_CONTAINER,)",
    "insertText": "T_ITEM()"
  }
]