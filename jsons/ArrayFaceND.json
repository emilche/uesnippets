[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TArrayFaceND",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayFaceND"
  },
  {
    "label": "TArrayFaceND()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayND . h \" # include \" Chaos / UniformGrid . h \" # include \" Chaos / Vector . h \" namespace Chaos { template<class T,int d> class TArrayFaceND {)",
    "insertText": "TArrayFaceND(const TUniformGrid<FReal, d>& Grid)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (MArray .)",
    "insertText": "SetNum(d)"
  },
  {
    "label": "Counts()",
    "kind": "Method",
    "detail": "Function (const auto& Counts = Grid .)",
    "insertText": "Counts()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (MArray [ i ] = TArrayND<)",
    "insertText": "T(Counts + TVec3<int32>::AxisVector(i))"
  },
  {
    "label": "TArrayFaceND()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TArrayFaceND(const TVec3<int32>& Counts)"
  },
  {
    "label": "TArrayFaceND()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TArrayFaceND(const TArrayFaceND<T, d>& Other)"
  },
  {
    "label": "TArrayFaceND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayFaceND(TArrayFaceND<T, d>&& Other) : MArray(MoveTemp(Other.MArray))"
  },
  {
    "label": "TArrayFaceND()",
    "kind": "Method",
    "detail": "Function (} private : TArray<TArrayND<T,d>,TFixedAllocator<d>> MArray ; } ; template<class T> class TArrayFaceND<T,3> { public :)",
    "insertText": "TArrayFaceND(const TUniformGrid<FReal, 3>& Grid)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (MArray .)",
    "insertText": "SetNum(3)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (MArray [ 0 ] = TArrayND<)",
    "insertText": "T(Counts + TVec3<int32>::AxisVector(0))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (MArray [ 1 ] = TArrayND<)",
    "insertText": "T(Counts + TVec3<int32>::AxisVector(1))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (MArray [ 2 ] = TArrayND<)",
    "insertText": "T(Counts + TVec3<int32>::AxisVector(2))"
  },
  {
    "label": "TArrayFaceND()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TArrayFaceND(const TArrayFaceND<T, 3>& Other)"
  },
  {
    "label": "TArrayFaceND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TArrayFaceND(TArrayFaceND<T, 3>&& Other) : MArray(MoveTemp(Other.MArray))"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} TArrayFaceND<T,3>)",
    "insertText": "Copy()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()(const Pair<int32, TVec3<int32>>& Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()(const int32 Axis, const int32& x, const int32& y, const int32& z)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Fill(const T& Scalar)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (MArray [ 0 ] .)",
    "insertText": "Fill(Scalar)"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (} const TArrayND<T,3>&)",
    "insertText": "GetComponent(const int32 Axis)"
  }
]