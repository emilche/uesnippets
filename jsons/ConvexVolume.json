[
  {
    "label": "FOutcode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutcode"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FPoly",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoly"
  },
  {
    "label": "FOutcode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FOutcode { private : bool bInside ; bool bOutside ; public :)",
    "insertText": "FOutcode(): bInside(false), bOutside(false)"
  },
  {
    "label": "FOutcode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOutcode(bool bInInside,bool bInOutside): bInside(bInInside), bOutside(bInOutside)"
  },
  {
    "label": "SetInside()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInside(bool bNewInside)"
  },
  {
    "label": "SetOutside()",
    "kind": "Method",
    "detail": "Function (bInside = bNewInside ; } void)",
    "insertText": "SetOutside(bool bNewOutside)"
  },
  {
    "label": "GetInside()",
    "kind": "Method",
    "detail": "Function (bOutside = bNewOutside ; } bool)",
    "insertText": "GetInside()"
  },
  {
    "label": "FConvexVolume()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConvexVolume(const TArray<FPlane, TInlineAllocator<6>>& InPlanes) : Planes( InPlanes)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(void)"
  },
  {
    "label": "ClipPolygon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClipPolygon(class FPoly& Polygon)"
  },
  {
    "label": "GetBoxIntersectionOutcode()",
    "kind": "Method",
    "detail": "Function (FOutcode)",
    "insertText": "GetBoxIntersectionOutcode(const FVector& Origin,const FVector& Extent)"
  },
  {
    "label": "IntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectBox(const FVector& Origin,const FVector& Extent)"
  },
  {
    "label": "IntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectBox(const FVector& Origin,const FVector& Extent, bool& bOutFullyContained)"
  },
  {
    "label": "IntersectSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectSphere(const FVector& Origin,const float& Radius)"
  },
  {
    "label": "IntersectSphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectSphere(const FVector& Origin,const float& Radius, bool& bOutFullyContained)"
  },
  {
    "label": "IntersectTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectTriangle(const FVector& PointA, const FVector& PointB, const FVector& PointC, bool& bOutFullyContained)"
  },
  {
    "label": "IntersectLineSegment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectLineSegment(const FVector& Start, const FVector& End)"
  },
  {
    "label": "DistanceTo()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DistanceTo(const FVector& Point)"
  },
  {
    "label": "IntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectBox(const FVector& Origin,const FVector& Translation,const FVector& Extent)"
  },
  {
    "label": "IntersectPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectPoint(const FVector& Point)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FConvexVolume& ConvexVolume)"
  },
  {
    "label": "GetViewFrustumBounds()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetViewFrustumBounds(FConvexVolume& OutResult, const FMatrix& ViewProjectionMatrix, bool bUseNearPlane)"
  },
  {
    "label": "GetViewFrustumBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewFrustumBounds(FConvexVolume& OutResult, const FMatrix& ViewProjectionMatrix, bool bUseNearPlane, bool bUseFarPlane)"
  },
  {
    "label": "GetViewFrustumBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewFrustumBounds(FConvexVolume& OutResult, const FMatrix& ViewProjectionMatrix, const FPlane& InFarPlane, bool bOverrideFarPlane, bool bUseNearPlane)"
  }
]