[
  {
    "label": "applyR1()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_PBQP_REDUCTIONRULES_H # define LLVM_CODEGEN_PBQP_REDUCTIONRULES_H # include \" Graph . h \" # include \" Math . h \" # include \" Solution . h \" namespace llvm { namespace PBQP { template<GraphT> void)",
    "insertText": "applyR1(GraphT &G, typename GraphT::NodeId NId)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (typedef GraphT::NodeId NodeId ; typedef GraphT::EdgeId EdgeId ; typedef GraphT::Vector Vector ; typedef GraphT::Matrix Matrix ; typedef GraphT::RawVector RawVector ;)",
    "insertText": "assert(G.getNodeDegree(NId) == 1 && \"R1 applied to node with degree != 1.\")"
  },
  {
    "label": "adjEdgeIds()",
    "kind": "Method",
    "detail": "Function (EdgeId EId =* G .)",
    "insertText": "adjEdgeIds(NId).begin()"
  },
  {
    "label": "getEdgeOtherNodeId()",
    "kind": "Method",
    "detail": "Function (NodeId MId = G .)",
    "insertText": "getEdgeOtherNodeId(EId, NId)"
  },
  {
    "label": "getEdgeCosts()",
    "kind": "Method",
    "detail": "Function (const Matrix& ECosts = G .)",
    "insertText": "getEdgeCosts(EId)"
  },
  {
    "label": "getNodeCosts()",
    "kind": "Method",
    "detail": "Function (const Vector& XCosts = G .)",
    "insertText": "getNodeCosts(NId)"
  },
  {
    "label": "getNodeCosts()",
    "kind": "Method",
    "detail": "Function (RawVector YCosts = G .)",
    "insertText": "getNodeCosts(MId)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PBQPNum Min = ECosts [ 0 ] [ j ] + XCosts [ 0 ] ;)",
    "insertText": "for(unsigned i = 1; i < XCosts.getLength(); ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PBQPNum C = ECosts [ i ] [ j ] + XCosts [ i ] ;)",
    "insertText": "if(C < Min)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} YCosts [ j ] + = Min ; } } else {)",
    "insertText": "for(unsigned i = 0; i < YCosts.getLength(); ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PBQPNum Min = ECosts [ i ] [ 0 ] + XCosts [ 0 ] ;)",
    "insertText": "for(unsigned j = 1; j < XCosts.getLength(); ++j)"
  },
  {
    "label": "setNodeCosts()",
    "kind": "Method",
    "detail": "Function (} YCosts [ i ] + = Min ; } } G .)",
    "insertText": "setNodeCosts(MId, YCosts)"
  },
  {
    "label": "disconnectEdge()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "disconnectEdge(EId, MId)"
  },
  {
    "label": "applyR2()",
    "kind": "Method",
    "detail": "Function (} template<GraphT> void)",
    "insertText": "applyR2(GraphT &G, typename GraphT::NodeId NId)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (typedef GraphT::NodeId NodeId ; typedef GraphT::EdgeId EdgeId ; typedef GraphT::Vector Vector ; typedef GraphT::Matrix Matrix ; typedef GraphT::RawMatrix RawMatrix ;)",
    "insertText": "assert(G.getNodeDegree(NId) == 2 && \"R2 applied to node with degree != 2.\")"
  },
  {
    "label": "ZXEId()",
    "kind": "Method",
    "detail": "Function (EdgeId YXEId =* AEItr,)",
    "insertText": "ZXEId(++AEItr)"
  },
  {
    "label": "getEdgeOtherNodeId()",
    "kind": "Method",
    "detail": "Function (NodeId YNId = G .)",
    "insertText": "getEdgeOtherNodeId(YXEId, NId), ZNId = G.getEdgeOtherNodeId(ZXEId, NId)"
  },
  {
    "label": "FlipEdge1()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlipEdge1(G.getEdgeNode1Id(YXEId) == NId), FlipEdge2 = (G.getEdgeNode1Id(ZXEId) == NId)"
  },
  {
    "label": "Matrix()",
    "kind": "Method",
    "detail": "Function (const Matrix* YXECosts = FlipEdge1 ? new)",
    "insertText": "Matrix(G.getEdgeCosts(YXEId).transpose()) : &G.getEdgeCosts(YXEId)"
  },
  {
    "label": "Matrix()",
    "kind": "Method",
    "detail": "Function (const Matrix* ZXECosts = FlipEdge2 ? new)",
    "insertText": "Matrix(G.getEdgeCosts(ZXEId).transpose()) : &G.getEdgeCosts(ZXEId)"
  },
  {
    "label": "getLength()",
    "kind": "Method",
    "detail": "Function (unsigned XLen = XCosts .)",
    "insertText": "getLength(), YLen = YXECosts->getRows(), ZLen = ZXECosts->getRows()"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (RawMatrix)",
    "insertText": "Delta(YLen, ZLen)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (PBQPNum)",
    "insertText": "Min(*YXECosts)[i][0] + (*ZXECosts)"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (PBQPNum)",
    "insertText": "C(*YXECosts)[i][k] + (*ZXECosts)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Min = C ; } } Delta [ i ] [ j ] = Min ; } })",
    "insertText": "if(FlipEdge1)"
  },
  {
    "label": "findEdge()",
    "kind": "Method",
    "detail": "Function (EdgeId YZEId = G .)",
    "insertText": "findEdge(YNId, ZNId)"
  },
  {
    "label": "addEdge()",
    "kind": "Method",
    "detail": "Function (YZEId = G .)",
    "insertText": "addEdge(YNId, ZNId, Delta)"
  },
  {
    "label": "getEdgeCosts()",
    "kind": "Method",
    "detail": "Function (} else { const Matrix& YZECosts = G .)",
    "insertText": "getEdgeCosts(YZEId)"
  },
  {
    "label": "updateEdgeCosts()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "updateEdgeCosts(YZEId, Delta + YZECosts)"
  },
  {
    "label": "updateEdgeCosts()",
    "kind": "Method",
    "detail": "Function (} else { G .)",
    "insertText": "updateEdgeCosts(YZEId, Delta.transpose() + YZECosts)"
  },
  {
    "label": "disconnectEdge()",
    "kind": "Method",
    "detail": "Function (} } G .)",
    "insertText": "disconnectEdge(YXEId, YNId)"
  },
  {
    "label": "disconnectEdge()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "disconnectEdge(ZXEId, ZNId)"
  },
  {
    "label": "hasRegisterOptions()",
    "kind": "Method",
    "detail": "Function (} # ifndef NDEBUG template<VectorT> bool)",
    "insertText": "hasRegisterOptions(const VectorT &V)"
  },
  {
    "label": "getLength()",
    "kind": "Method",
    "detail": "Function (unsigned VL = V .)",
    "insertText": "getLength()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (typedef GraphBase::NodeId NodeId ; typedef GraphT::Matrix Matrix ; typedef GraphT::RawVector RawVector ; Solution s ;)",
    "insertText": "while(!stack.empty())"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (NodeId NId = stack .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (stack .)",
    "insertText": "pop_back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef NDEBUG)",
    "insertText": "if(G.getNodeMetadata(NId).wasConservativelyAllocatable()) assert(hasRegisterOptions(v) && \"A conservatively allocatable node \" \"must have available register options\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(auto EId : G.adjEdgeIds(NId))"
  },
  {
    "label": "getEdgeNode2Id()",
    "kind": "Method",
    "detail": "Function (NodeId mId = G .)",
    "insertText": "getEdgeNode2Id(EId)"
  },
  {
    "label": "getColAsVector()",
    "kind": "Method",
    "detail": "Function (v + = edgeCosts .)",
    "insertText": "getColAsVector(s.getSelection(mId))"
  },
  {
    "label": "getEdgeNode1Id()",
    "kind": "Method",
    "detail": "Function (} else { NodeId mId = G .)",
    "insertText": "getEdgeNode1Id(EId)"
  },
  {
    "label": "getRowAsVector()",
    "kind": "Method",
    "detail": "Function (v + = edgeCosts .)",
    "insertText": "getRowAsVector(s.getSelection(mId))"
  },
  {
    "label": "setSelection()",
    "kind": "Method",
    "detail": "Function (} } s .)",
    "insertText": "setSelection(NId, v.minIndex())"
  }
]