[
  {
    "label": "IRTransformLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRTransformLayer"
  },
  {
    "label": "IRTransformLayer()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_IRTRANSFORMLAYER_H # define LLVM_EXECUTIONENGINE_ORC_IRTRANSFORMLAYER_H # include \" JITSymbol . h \" namespace llvm { namespace orc { template<BaseLayerT,TransformFtor> class IRTransformLayer { public : typedef BaseLayerT::ModuleSetHandleT ModuleSetHandleT ;)",
    "insertText": "IRTransformLayer(BaseLayerT &BaseLayer, TransformFtor Transform = TransformFtor()) : BaseLayer(BaseLayer), Transform(std::move(Transform))"
  },
  {
    "label": "addModuleSet()",
    "kind": "Method",
    "detail": "Function (} template<ModuleSetT,MemoryManagerPtrT,SymbolResolverPtrT> ModuleSetHandleT)",
    "insertText": "addModuleSet(ModuleSetT Ms, MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver)"
  },
  {
    "label": "removeModuleSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeModuleSet(ModuleSetHandleT H)"
  },
  {
    "label": "removeModuleSet()",
    "kind": "Method",
    "detail": "Function (BaseLayer .)",
    "insertText": "removeModuleSet(H)"
  },
  {
    "label": "findSymbol()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbol(const std::string &Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbolIn(ModuleSetHandleT H, const std::string &Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emitAndFinalize(ModuleSetHandleT H)"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (BaseLayer .)",
    "insertText": "emitAndFinalize(H)"
  },
  {
    "label": "getTransform()",
    "kind": "Method",
    "detail": "Function (} TransformFtor&)",
    "insertText": "getTransform()"
  }
]