[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FNetConditionGroupManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConditionGroupManager"
  },
  {
    "label": "FSubObjectGroupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubObjectGroupInfo"
  },
  {
    "label": "IsSpecialNetConditionGroup()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" HAL / PlatformCrt . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectKey . h \" class FArchive ; class UObject ; namespace UE::Net { const FName NetGroupOwner ; const FName NetGroupReplay ; bool)",
    "insertText": "IsSpecialNetConditionGroup(FName NetConditionGroup)"
  },
  {
    "label": "RegisterSubObjectInGroup()",
    "kind": "Method",
    "detail": "Function (} namespace UE::Net { class FNetConditionGroupManager { public : void)",
    "insertText": "RegisterSubObjectInGroup(UObject* SubObject, FName NetConditionGroup)"
  },
  {
    "label": "RegisterSubObjectInMultipleGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSubObjectInMultipleGroups(UObject* SubObject, TArrayView<FName> NetConditionGroups)"
  },
  {
    "label": "UnregisterSubObjectFromGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSubObjectFromGroup(UObject* SubObject, FName NetConditionGroup)"
  },
  {
    "label": "UnregisterSubObjectFromMultipleGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSubObjectFromMultipleGroups(UObject* SubObject, TArrayView<FName> NetConditionGroups)"
  },
  {
    "label": "UnregisterSubObjectFromAllGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSubObjectFromAllGroups(UObject* SubObject)"
  },
  {
    "label": "GetSubObjectNetConditionGroups()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FName>)",
    "insertText": "GetSubObjectNetConditionGroups(FObjectKey SubObjectKey)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FSubObjectGroupInfo* GroupInfo = SubObjectGroupMap .)",
    "insertText": "Find(SubObjectKey)"
  },
  {
    "label": "CountBytes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CountBytes(FArchive& Ar)"
  }
]