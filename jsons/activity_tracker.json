[
  {
    "label": "PendingTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PendingTask"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "Lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lock"
  },
  {
    "label": "PlatformThreadHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PlatformThreadHandle"
  },
  {
    "label": "Process",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Process"
  },
  {
    "label": "WaitableEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WaitableEvent"
  },
  {
    "label": "ThreadActivityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadActivityTracker"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "OwningProcess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OwningProcess"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Activity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Activity"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "manages",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "manages"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ValueType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ValueType"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ActivityUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActivityUserData"
  },
  {
    "label": "MemoryHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryHeader"
  },
  {
    "label": "FieldHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FieldHeader"
  },
  {
    "label": "ReferenceRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReferenceRecord"
  },
  {
    "label": "ValueInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueInfo"
  },
  {
    "label": "manages",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "manages"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Header"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ActivityTrackerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActivityTrackerTest"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ProcessPhase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProcessPhase"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "GlobalActivityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalActivityAnalyzer"
  },
  {
    "label": "ScopedThreadActivity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedThreadActivity"
  },
  {
    "label": "ActivityTrackerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActivityTrackerTest"
  },
  {
    "label": "ThreadSafeUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadSafeUserData"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "on",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "on"
  },
  {
    "label": "ManagedActivityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ManagedActivityTracker"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Release_Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release_Initialize(ProcessId pid = 0)"
  },
  {
    "label": "SetOwningProcessIdForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwningProcessIdForTesting(ProcessId pid, int64_t stamp)"
  },
  {
    "label": "GetOwningProcessId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOwningProcessId(const void* memory,\n                                 ProcessId* out_id,\n                                 int64_t* out_stamp)"
  },
  {
    "label": "ForThread()",
    "kind": "Method",
    "detail": "Function (ActivityData)",
    "insertText": "ForThread(const PlatformThreadHandle& handle)"
  },
  {
    "label": "GetObjectReference()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "GetObjectReference()"
  },
  {
    "label": "ReleaseObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseObjectReference(Reference ref)"
  },
  {
    "label": "FillFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillFrom(Activity* activity,\n                       const void* program_counter,\n                       const void* origin,\n                       Type type,\n                       const ActivityData& data)"
  },
  {
    "label": "TypedValue()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "TypedValue()"
  },
  {
    "label": "SetOwningProcessIdForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwningProcessIdForTesting(ProcessId pid, int64_t stamp)"
  },
  {
    "label": "GetOwningProcessId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOwningProcessId(const void* memory,\n                                 ProcessId* out_id,\n                                 int64_t* out_stamp)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ActivityTrackerTest, UserDataTest)"
  },
  {
    "label": "SetReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReference(StringPiece name,\n                    ValueType type,\n                    const void* memory,\n                    size_t size)"
  },
  {
    "label": "ScopedActivity()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedActivity(ThreadActivityTracker* tracker,\n                   const void* program_counter,\n                   const void* origin,\n                   Activity::Type type,\n                   const ActivityData& data)"
  },
  {
    "label": "IsRecorded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecorded()"
  },
  {
    "label": "ChangeTypeAndData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeTypeAndData(Activity::Type type, const ActivityData& data)"
  },
  {
    "label": "PushActivity()",
    "kind": "Method",
    "detail": "Function (ActivityId)",
    "insertText": "PushActivity(const void* program_counter,\n                          const void* origin,\n                          Activity::Type type,\n                          const ActivityData& data)"
  },
  {
    "label": "ChangeActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeActivity(ActivityId id,\n                      Activity::Type type,\n                      const ActivityData& data)"
  },
  {
    "label": "PopActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopActivity(ActivityId id)"
  },
  {
    "label": "IsRecorded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecorded(ActivityId id)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ActivityUserData>)",
    "insertText": "GetUserData(\n      ActivityId id,\n      ActivityTrackerMemoryAllocator* allocator)"
  },
  {
    "label": "HasUserData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUserData(ActivityId id)"
  },
  {
    "label": "ReleaseUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseUserData(ActivityId id,\n                       ActivityTrackerMemoryAllocator* allocator)"
  },
  {
    "label": "RecordExceptionActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordExceptionActivity(const void* program_counter,\n                               const void* origin,\n                               Activity::Type type,\n                               const ActivityData& data)"
  },
  {
    "label": "GetDataVersionForTesting()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetDataVersionForTesting()"
  },
  {
    "label": "SetOwningProcessIdForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwningProcessIdForTesting(ProcessId pid, int64_t stamp)"
  },
  {
    "label": "GetOwningProcessId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOwningProcessId(const void* memory,\n                                 ProcessId* out_id,\n                                 int64_t* out_stamp)"
  },
  {
    "label": "SizeForStackDepth()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SizeForStackDepth(int stack_depth)"
  },
  {
    "label": "CalledOnValidThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalledOnValidThread()"
  },
  {
    "label": "CreateUserDataForActivity()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ActivityUserData>)",
    "insertText": "CreateUserDataForActivity(\n      Activity* activity,\n      ActivityTrackerMemoryAllocator* allocator)"
  },
  {
    "label": "ScopedThreadActivity()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedThreadActivity(const void* program_counter,\n                         const void* origin,\n                         Activity::Type type,\n                         const ActivityData& data,\n                         bool lock_allowed)"
  },
  {
    "label": "CreateWithAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWithAllocator(\n      std::unique_ptr<PersistentMemoryAllocator> allocator,\n      int stack_depth,\n      ProcessId process_id)"
  },
  {
    "label": "CreateWithFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithFile(const FilePath& file_path,\n                             size_t size,\n                             uint64_t id,\n                             StringPiece name,\n                             int stack_depth)"
  },
  {
    "label": "CreateWithLocalMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithLocalMemory(size_t size,\n                                    uint64_t id,\n                                    StringPiece name,\n                                    int stack_depth,\n                                    ProcessId process_id)"
  },
  {
    "label": "CreateWithSharedMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithSharedMemory(base::WritableSharedMemoryMapping mapping,\n                                     uint64_t id,\n                                     StringPiece name,\n                                     int stack_depth)"
  },
  {
    "label": "SetForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForTesting(std::unique_ptr<GlobalActivityTracker> tracker)"
  },
  {
    "label": "ReleaseForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<GlobalActivityTracker>)",
    "insertText": "ReleaseForTesting()"
  },
  {
    "label": "CreateTrackerForCurrentThread()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateTrackerForCurrentThread()"
  },
  {
    "label": "ReleaseTrackerForCurrentThreadForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTrackerForCurrentThreadForTesting()"
  },
  {
    "label": "SetBackgroundTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundTaskRunner(\n      const scoped_refptr<SequencedTaskRunner>& runner)"
  },
  {
    "label": "SetProcessExitCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessExitCallback(ProcessExitCallback callback)"
  },
  {
    "label": "RecordProcessLaunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProcessLaunch(ProcessId process_id,\n                           const FilePath::StringType& cmd)"
  },
  {
    "label": "RecordProcessLaunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProcessLaunch(ProcessId process_id,\n                           const FilePath::StringType& exe,\n                           const FilePath::StringType& args)"
  },
  {
    "label": "RecordProcessExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProcessExit(ProcessId process_id, int exit_code)"
  },
  {
    "label": "SetProcessPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessPhase(ProcessPhase phase)"
  },
  {
    "label": "RecordLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordLogMessage(StringPiece message)"
  },
  {
    "label": "RecordModuleInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordModuleInfo(const ModuleInfo& info)"
  },
  {
    "label": "RecordException()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordException(const void* pc, const void* origin, uint32_t code)"
  },
  {
    "label": "MarkDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDeleted()"
  },
  {
    "label": "ThreadSafeUserData()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ThreadSafeUserData(void* memory, size_t size, ProcessId pid = 0)"
  },
  {
    "label": "UpdateFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateFrom(const GlobalActivityTracker::ModuleInfo& info)"
  },
  {
    "label": "ManagedActivityTracker()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ManagedActivityTracker(PersistentMemoryAllocator::Reference mem_reference,\n                           void* base,\n                           size_t size)"
  },
  {
    "label": "ReturnTrackerMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnTrackerMemory(ManagedActivityTracker* tracker)"
  },
  {
    "label": "RecordExceptionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordExceptionImpl(const void* pc, const void* origin, uint32_t code)"
  },
  {
    "label": "OnTLSDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTLSDestroy(void* value)"
  },
  {
    "label": "CleanupAfterProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupAfterProcess(ProcessId process_id,\n                           int64_t exit_stamp,\n                           int exit_code,\n                           std::string&& command_line)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (thread_tracker_allocator_)",
    "insertText": "GUARDED_BY(thread_tracker_allocator_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (user_data_allocator_)",
    "insertText": "GUARDED_BY(user_data_allocator_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (modules_)",
    "insertText": "GUARDED_BY(modules_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (known_processes_)",
    "insertText": "GUARDED_BY(global_tracker_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (background_task_runner_)",
    "insertText": "GUARDED_BY(global_tracker_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (process_exit_callback_)",
    "insertText": "GUARDED_BY(global_tracker_lock_)"
  },
  {
    "label": "track_me()",
    "kind": "Method",
    "detail": "Function (base::debug::ScopedActivity)",
    "insertText": "track_me(0, 0xE44873CC, foo)"
  },
  {
    "label": "ChangeAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeAction(uint8_t action)"
  },
  {
    "label": "ChangeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeInfo(int32_t info)"
  },
  {
    "label": "ChangeActionAndInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeActionAndInfo(uint8_t action, int32_t info)"
  },
  {
    "label": "ScopedTaskRunActivity()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ScopedTaskRunActivity(const void* program_counter, const PendingTask& task)"
  },
  {
    "label": "ScopedLockAcquireActivity()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ScopedLockAcquireActivity(const void* program_counter,\n                            const base::internal::LockImpl* lock)"
  },
  {
    "label": "ScopedEventWaitActivity()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ScopedEventWaitActivity(const void* program_counter,\n                          const WaitableEvent* event)"
  },
  {
    "label": "ScopedThreadJoinActivity()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ScopedThreadJoinActivity(const void* program_counter,\n                           const PlatformThreadHandle* thread)"
  },
  {
    "label": "ScopedProcessWaitActivity()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ScopedProcessWaitActivity(const void* program_counter,\n                            const Process* process)"
  }
]