[
  {
    "label": "PendingTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PendingTask"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "Lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Lock"
  },
  {
    "label": "PlatformThreadHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PlatformThreadHandle"
  },
  {
    "label": "Process",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Process"
  },
  {
    "label": "WaitableEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WaitableEvent"
  },
  {
    "label": "ThreadActivityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadActivityTracker"
  },
  {
    "label": "OwningProcess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OwningProcess"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Activity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Activity"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ValueType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ValueType"
  },
  {
    "label": "ActivityUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActivityUserData"
  },
  {
    "label": "MemoryHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MemoryHeader"
  },
  {
    "label": "FieldHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FieldHeader"
  },
  {
    "label": "ReferenceRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ReferenceRecord"
  },
  {
    "label": "ValueInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueInfo"
  },
  {
    "label": "Header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Header"
  },
  {
    "label": "ActivityTrackerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActivityTrackerTest"
  },
  {
    "label": "ProcessPhase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProcessPhase"
  },
  {
    "label": "GlobalActivityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalActivityAnalyzer"
  },
  {
    "label": "ScopedThreadActivity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedThreadActivity"
  },
  {
    "label": "ThreadSafeUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadSafeUserData"
  },
  {
    "label": "ManagedActivityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ManagedActivityTracker"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_DEBUG_ACTIVITY_TRACKER_H_ # define BASE_DEBUG_ACTIVITY_TRACKER_H_ # include<atomic> # include<map> # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / compiler_specific . h \" # include \" base / dcheck_is_on . h \" # include \" base / gtest_prod_util . h \" # include \" base / location . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / shared_memory_mapping . h \" # include \" base / metrics / persistent_memory_allocator . h \" # include \" base / process / process_handle . h \" # include \" base / strings / string_piece . h \" # include \" base / strings / utf_string_conversions . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / threading / thread_local . h \" # include \" build / build_config . h \" # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "OwningProcess()",
    "kind": "Method",
    "detail": "Function (struct PendingTask ; class FilePath ; class Lock ; class PlatformThreadHandle ; class Process ; class WaitableEvent ; namespace debug { class ThreadActivityTracker ; enum : int { kActivityCallStackSize = 1 0,} ; struct OwningProcess {)",
    "insertText": "OwningProcess()"
  },
  {
    "label": "Release_Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release_Initialize(ProcessId pid = 0)"
  },
  {
    "label": "SetOwningProcessIdForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwningProcessIdForTesting(ProcessId pid, int64_t stamp)"
  },
  {
    "label": "GetOwningProcessId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOwningProcessId(const void* memory, ProcessId* out_id, int64_t* out_stamp)"
  },
  {
    "label": "ForGeneric()",
    "kind": "Method",
    "detail": "Function (uint32_t kPersistentTypeId = 0 xB1179672 + 1 ; size_t kExpectedInstanceSize = 2 4 ; std::atomic<uint32_t> data_id ; uint32_t padding ; int64_t process_id ; int64_t create_stamp ; } ; union ActivityData { struct { uint32_t id ; int32_t info ; } generic ; struct { uint64_t sequence_id ; } task ; struct { uint64_t lock_address ; } lock ; struct { uint64_t event_address ; } event ; struct { int64_t thread_id ; } thread ; struct { int64_t process_id ; } process ; struct { uint32_t code ; } exception ; ActivityData)",
    "insertText": "ForGeneric(uint32_t id, int32_t info)"
  },
  {
    "label": "ForTask()",
    "kind": "Method",
    "detail": "Function (ActivityData data ; data . generic . id = id ; data . generic . info = info ; return data ; } ActivityData)",
    "insertText": "ForTask(uint64_t sequence)"
  },
  {
    "label": "ForLock()",
    "kind": "Method",
    "detail": "Function (ActivityData data ; data . task . sequence_id = sequence ; return data ; } ActivityData)",
    "insertText": "ForLock(const void* lock)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (ActivityData data ; data . lock . lock_address = reinterpret_cast<)",
    "insertText": "uintptr_t(lock)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (ActivityData data ; data . event . event_address = reinterpret_cast<)",
    "insertText": "uintptr_t(event)"
  },
  {
    "label": "ForThread()",
    "kind": "Method",
    "detail": "Function (ActivityData)",
    "insertText": "ForThread(const int64_t id)"
  },
  {
    "label": "ForProcess()",
    "kind": "Method",
    "detail": "Function (ActivityData data ; data . thread . thread_id = id ; return data ; } ActivityData)",
    "insertText": "ForProcess(const ProcessId id)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (ActivityData data ; data . process . process_id = static_cast<)",
    "insertText": "int64_t(id)"
  },
  {
    "label": "ActivityTrackerMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (ActivityData data ; data . exception . code = code ; return data ; } } ; const ActivityData kNullActivityData ; class BASE_EXPORT ActivityTrackerMemoryAllocator { public : using Reference = PersistentMemoryAllocator::Reference ;)",
    "insertText": "ActivityTrackerMemoryAllocator(PersistentMemoryAllocator* allocator, uint32_t object_type, uint32_t object_free_type, size_t object_size, size_t cache_size, bool make_iterable)"
  },
  {
    "label": "ActivityTrackerMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivityTrackerMemoryAllocator(const ActivityTrackerMemoryAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ActivityTrackerMemoryAllocator&)",
    "insertText": "operator(const ActivityTrackerMemoryAllocator&)"
  },
  {
    "label": "ActivityTrackerMemoryAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ActivityTrackerMemoryAllocator()"
  },
  {
    "label": "GetObjectReference()",
    "kind": "Method",
    "detail": "Function (Reference)",
    "insertText": "GetObjectReference()"
  },
  {
    "label": "ReleaseObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseObjectReference(Reference ref)"
  },
  {
    "label": "GetAsObject()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "GetAsObject(Reference ref)"
  },
  {
    "label": "GetAsArray()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "GetAsArray(Reference ref, size_t count)"
  },
  {
    "label": "cache_used()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "cache_used()"
  },
  {
    "label": "TypedValue()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ActivityUserData { public : enum ValueType : uint8_t { END_OF_VALUES = 0,RAW_VALUE,RAW_VALUE_REFERENCE,STRING_VALUE,STRING_VALUE_REFERENCE,CHAR_VALUE,BOOL_VALUE,SIGNED_VALUE,UNSIGNED_VALUE,} ; class BASE_EXPORT TypedValue { public :)",
    "insertText": "TypedValue()"
  },
  {
    "label": "TypedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TypedValue(const TypedValue& other)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "type()"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (StringPiece)",
    "insertText": "GetString()"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBool()"
  },
  {
    "label": "GetChar()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "GetChar()"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetInt()"
  },
  {
    "label": "GetUint()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetUint()"
  },
  {
    "label": "GetReference()",
    "kind": "Method",
    "detail": "Function (StringPiece)",
    "insertText": "GetReference()"
  },
  {
    "label": "GetStringReference()",
    "kind": "Method",
    "detail": "Function (StringPiece)",
    "insertText": "GetStringReference()"
  },
  {
    "label": "ActivityUserData()",
    "kind": "Method",
    "detail": "Function (private : class ActivityUserData ; ValueType type_ = END_OF_VALUES ; uint64_t short_value_ ; std::string long_value_ ; StringPiece ref_value_ ; } ; using Snapshot = std::map<std::string,TypedValue> ;)",
    "insertText": "ActivityUserData()"
  },
  {
    "label": "ActivityUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivityUserData(void* memory, size_t size, ProcessId pid = 0)"
  },
  {
    "label": "ActivityUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivityUserData(const ActivityUserData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ActivityUserData&)",
    "insertText": "operator(const ActivityUserData&)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "id()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(StringPiece name, const void* memory, size_t size)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(name, RAW_VALUE, memory, size)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetString(StringPiece name, StringPiece value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(name, STRING_VALUE, value.data(), value.length())"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetString(StringPiece name, StringPiece16 value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetString(name, UTF16ToUTF8(value))"
  },
  {
    "label": "SetBool()",
    "kind": "Method",
    "detail": "Function (} std::atomic<bool>*)",
    "insertText": "SetBool(StringPiece name, bool value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (char cvalue = value ? 1 : 0 ; void* addr =)",
    "insertText": "Set(name, BOOL_VALUE, &cvalue, sizeof(cvalue))"
  },
  {
    "label": "SetChar()",
    "kind": "Method",
    "detail": "Function (} std::atomic<char>*)",
    "insertText": "SetChar(StringPiece name, char value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void* addr =)",
    "insertText": "Set(name, CHAR_VALUE, &value, sizeof(value))"
  },
  {
    "label": "SetInt()",
    "kind": "Method",
    "detail": "Function (} std::atomic<int64_t>*)",
    "insertText": "SetInt(StringPiece name, int64_t value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void* addr =)",
    "insertText": "Set(name, SIGNED_VALUE, &value, sizeof(value))"
  },
  {
    "label": "SetUint()",
    "kind": "Method",
    "detail": "Function (} std::atomic<uint64_t>*)",
    "insertText": "SetUint(StringPiece name, uint64_t value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void* addr =)",
    "insertText": "Set(name, UNSIGNED_VALUE, &value, sizeof(value))"
  },
  {
    "label": "SetReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReference(StringPiece name, const void* memory, size_t size)"
  },
  {
    "label": "SetReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReference(name, RAW_VALUE_REFERENCE, memory, size)"
  },
  {
    "label": "SetStringReference()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStringReference(StringPiece name, StringPiece value)"
  },
  {
    "label": "SetReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReference(name, STRING_VALUE_REFERENCE, value.data(), value.length())"
  },
  {
    "label": "CreateSnapshot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CreateSnapshot(Snapshot* output_snapshot)"
  },
  {
    "label": "GetBaseAddress()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetBaseAddress()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (protected : void*)",
    "insertText": "Set(StringPiece name, ValueType type, const void* memory, size_t size)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(ActivityTrackerTest, UserDataTest)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t kMemoryAlignment =)",
    "insertText": "sizeof(uint64_t)"
  },
  {
    "label": "MemoryHeader()",
    "kind": "Method",
    "detail": "Function (struct MemoryHeader {)",
    "insertText": "MemoryHeader()"
  },
  {
    "label": "FieldHeader()",
    "kind": "Method",
    "detail": "Function (OwningProcess owner ; } ; struct FieldHeader {)",
    "insertText": "FieldHeader()"
  },
  {
    "label": "ValueInfo()",
    "kind": "Method",
    "detail": "Function (std::atomic<uint8_t> type ; uint8_t name_size ; std::atomic<uint16_t> value_size ; uint16_t record_size ; } ; struct ReferenceRecord { uint64_t address ; uint64_t size ; } ; struct ValueInfo {)",
    "insertText": "ValueInfo()"
  },
  {
    "label": "ValueInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueInfo(ValueInfo&&)"
  },
  {
    "label": "SetReference()",
    "kind": "Method",
    "detail": "Function (StringPiece name ; ValueType type ; raw_ptr<void> memory ; raw_ptr<std::atomic<uint16_t>> size_ptr ; size_t extent ; } ; void)",
    "insertText": "SetReference(StringPiece name, ValueType type, const void* memory, size_t size)"
  },
  {
    "label": "ImportExistingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportExistingData()"
  },
  {
    "label": "Snapshot()",
    "kind": "Method",
    "detail": "Function (std::map<StringPiece,ValueInfo> values_ ; raw_ptr<char> memory_ ; size_t available_ ; const raw_ptr<MemoryHeader> header_ ; const uint32_t orig_data_id ; const ProcessId orig_process_id ; const int64_t orig_create_stamp ; } ; class BASE_EXPORT ThreadActivityTracker { public : using ActivityId = uint32_t ; struct Header ; struct BASE_EXPORT Snapshot {)",
    "insertText": "Snapshot()"
  },
  {
    "label": "ScopedActivity()",
    "kind": "Method",
    "detail": "Function (std::string thread_name ; int64_t create_stamp ; ProcessId process_id = 0 ; int64_t thread_id = 0 ; std::vector<Activity> activity_stack ; uint32_t activity_stack_depth = 0 ; Activity last_exception ; } ; class BASE_EXPORT ScopedActivity { public :)",
    "insertText": "ScopedActivity(ThreadActivityTracker* tracker, const void* program_counter, const void* origin, Activity::Type type, const ActivityData& data)"
  },
  {
    "label": "ScopedActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedActivity(const ScopedActivity&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedActivity&)",
    "insertText": "operator(const ScopedActivity&)"
  },
  {
    "label": "ScopedActivity()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedActivity()"
  },
  {
    "label": "IsRecorded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecorded()"
  },
  {
    "label": "ChangeTypeAndData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeTypeAndData(Activity::Type type, const ActivityData& data)"
  },
  {
    "label": "ThreadActivityTracker()",
    "kind": "Method",
    "detail": "Function (protected : const raw_ptr<ThreadActivityTracker> tracker_ ; ActivityId activity_id_ ; } ;)",
    "insertText": "ThreadActivityTracker(void* base, size_t size)"
  },
  {
    "label": "ThreadActivityTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadActivityTracker(const ThreadActivityTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadActivityTracker&)",
    "insertText": "operator(const ThreadActivityTracker&)"
  },
  {
    "label": "ThreadActivityTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadActivityTracker()"
  },
  {
    "label": "PushActivity()",
    "kind": "Method",
    "detail": "Function (ActivityId)",
    "insertText": "PushActivity(const void* program_counter, const void* origin, Activity::Type type, const ActivityData& data)"
  },
  {
    "label": "PushActivity()",
    "kind": "Method",
    "detail": "Function (ALWAYS_INLINE ActivityId)",
    "insertText": "PushActivity(const void* origin, Activity::Type type, const ActivityData& data)"
  },
  {
    "label": "ChangeActivity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ChangeActivity(ActivityId id, Activity::Type type, const ActivityData& data)"
  },
  {
    "label": "PopActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopActivity(ActivityId id)"
  },
  {
    "label": "IsRecorded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecorded(ActivityId id)"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ActivityUserData>)",
    "insertText": "GetUserData(ActivityId id, ActivityTrackerMemoryAllocator* allocator)"
  },
  {
    "label": "HasUserData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasUserData(ActivityId id)"
  },
  {
    "label": "ReleaseUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseUserData(ActivityId id, ActivityTrackerMemoryAllocator* allocator)"
  },
  {
    "label": "RecordExceptionActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordExceptionActivity(const void* program_counter, const void* origin, Activity::Type type, const ActivityData& data)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetDataVersionForTesting()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetDataVersionForTesting()"
  },
  {
    "label": "SizeForStackDepth()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SizeForStackDepth(int stack_depth)"
  },
  {
    "label": "CalledOnValidThread()",
    "kind": "Method",
    "detail": "Function (private : class ActivityTrackerTest ; bool)",
    "insertText": "CalledOnValidThread()"
  },
  {
    "label": "CreateUserDataForActivity()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<ActivityUserData>)",
    "insertText": "CreateUserDataForActivity(Activity* activity, ActivityTrackerMemoryAllocator* allocator)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif const uint32_t stack_slots_ ; bool valid_ = false ; } ; class BASE_EXPORT GlobalActivityTracker { public : enum : uint32_t { kTypeIdActivityTracker = 0 x5D7381AF + 4,kTypeIdUserDataRecord = 0 x615EDDD7 + 3,kTypeIdGlobalLogMessage = 0 x4CF434F9 + 1,kTypeIdProcessDataRecord = kTypeIdUserDataRecord + 0 x100,kTypeIdActivityTrackerFree = ~ kTypeIdActivityTracker,kTypeIdUserDataRecordFree = ~ kTypeIdUserDataRecord,kTypeIdProcessDataRecordFree = ~ kTypeIdProcessDataRecord,} ; enum ProcessPhase : int { PROCESS_PHASE_UNKNOWN = 0,PROCESS_LAUNCHED = 1,PROCESS_LAUNCH_FAILED = 2,PROCESS_EXITED_CLEANLY = 1 0,PROCESS_EXITED_WITH_CODE = 1 1,PROCESS_SHUTDOWN_STARTED = 1 0 0,PROCESS_MAIN_LOOP_STARTED = 1 0 1,} ; using ProcessExitCallback = RepeatingCallback<)",
    "insertText": "void(ProcessId process_id, int64_t exit_stamp, int exit_code, ProcessPhase exit_phase, std::string&& command_line, ActivityUserData::Snapshot&& process_data)"
  },
  {
    "label": "ModuleInfo()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT ModuleInfo {)",
    "insertText": "ModuleInfo()"
  },
  {
    "label": "ModuleInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModuleInfo(ModuleInfo&& rhs)"
  },
  {
    "label": "ModuleInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModuleInfo(const ModuleInfo& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ModuleInfo&)",
    "insertText": "operator(ModuleInfo&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ModuleInfo&)",
    "insertText": "operator(const ModuleInfo& rhs)"
  },
  {
    "label": "ScopedThreadActivity()",
    "kind": "Method",
    "detail": "Function (bool is_loaded = false ; uintptr_t address = 0 ; int64_t load_time = 0 ; size_t size = 0 ; uint32_t timestamp = 0 ; uint32_t age = 0 ; uint8_t identifier [ 1 6 ] ; std::string file ; std::string debug_file ; } ; class BASE_EXPORT ScopedThreadActivity : public ThreadActivityTracker::ScopedActivity { public :)",
    "insertText": "ScopedThreadActivity(const void* program_counter, const void* origin, Activity::Type type, const ActivityData& data, bool lock_allowed)"
  },
  {
    "label": "ScopedThreadActivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedThreadActivity(const ScopedThreadActivity&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedThreadActivity&)",
    "insertText": "operator(const ScopedThreadActivity&)"
  },
  {
    "label": "ScopedThreadActivity()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedThreadActivity()"
  },
  {
    "label": "user_data()",
    "kind": "Method",
    "detail": "Function (ActivityUserData&)",
    "insertText": "user_data()"
  },
  {
    "label": "GetOrCreateTracker()",
    "kind": "Method",
    "detail": "Function (private : ThreadActivityTracker*)",
    "insertText": "GetOrCreateTracker(bool lock_allowed)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (GlobalActivityTracker* global_tracker =)",
    "insertText": "Get()"
  },
  {
    "label": "GlobalActivityTracker()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<ActivityUserData> user_data_ ; } ;)",
    "insertText": "GlobalActivityTracker(const GlobalActivityTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GlobalActivityTracker&)",
    "insertText": "operator(const GlobalActivityTracker&)"
  },
  {
    "label": "GlobalActivityTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GlobalActivityTracker()"
  },
  {
    "label": "CreateWithAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWithAllocator(std::unique_ptr<PersistentMemoryAllocator> allocator, int stack_depth, ProcessId process_id)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_NACL) static bool CreateWithFile(const FilePath& file_path, size_t size, uint64_t id, StringPiece name, int stack_depth)"
  },
  {
    "label": "CreateWithLocalMemory()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CreateWithLocalMemory(size_t size, uint64_t id, StringPiece name, int stack_depth, ProcessId process_id)"
  },
  {
    "label": "CreateWithSharedMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWithSharedMemory(base::WritableSharedMemoryMapping mapping, uint64_t id, StringPiece name, int stack_depth)"
  },
  {
    "label": "SetForTesting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetForTesting(std::unique_ptr<GlobalActivityTracker> tracker)"
  },
  {
    "label": "ReleaseForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<GlobalActivityTracker>)",
    "insertText": "ReleaseForTesting()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "allocator()",
    "kind": "Method",
    "detail": "Function (} PersistentMemoryAllocator*)",
    "insertText": "allocator()"
  },
  {
    "label": "GetTrackerForCurrentThread()",
    "kind": "Method",
    "detail": "Function (} ThreadActivityTracker*)",
    "insertText": "GetTrackerForCurrentThread()"
  },
  {
    "label": "GetOrCreateTrackerForCurrentThread()",
    "kind": "Method",
    "detail": "Function (} ThreadActivityTracker*)",
    "insertText": "GetOrCreateTrackerForCurrentThread()"
  },
  {
    "label": "CreateTrackerForCurrentThread()",
    "kind": "Method",
    "detail": "Function (} ThreadActivityTracker*)",
    "insertText": "CreateTrackerForCurrentThread()"
  },
  {
    "label": "ReleaseTrackerForCurrentThreadForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTrackerForCurrentThreadForTesting()"
  },
  {
    "label": "SetBackgroundTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundTaskRunner(const scoped_refptr<SequencedTaskRunner>& runner)"
  },
  {
    "label": "SetProcessExitCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessExitCallback(ProcessExitCallback callback)"
  },
  {
    "label": "RecordProcessLaunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProcessLaunch(ProcessId process_id, const FilePath::StringType& cmd)"
  },
  {
    "label": "RecordProcessLaunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProcessLaunch(ProcessId process_id, const FilePath::StringType& exe, const FilePath::StringType& args)"
  },
  {
    "label": "RecordProcessExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProcessExit(ProcessId process_id, int exit_code)"
  },
  {
    "label": "RecordProcessLaunchIfEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProcessLaunchIfEnabled(ProcessId process_id, const FilePath::StringType& cmd)"
  },
  {
    "label": "RecordProcessLaunchIfEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordProcessLaunchIfEnabled(ProcessId process_id, const FilePath::StringType& exe, const FilePath::StringType& args)"
  },
  {
    "label": "RecordProcessExitIfEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordProcessExitIfEnabled(ProcessId process_id, int exit_code)"
  },
  {
    "label": "SetProcessPhase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProcessPhase(ProcessPhase phase)"
  },
  {
    "label": "SetProcessPhaseIfEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessPhaseIfEnabled(ProcessPhase phase)"
  },
  {
    "label": "RecordLogMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordLogMessage(StringPiece message)"
  },
  {
    "label": "RecordLogMessageIfEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordLogMessageIfEnabled(StringPiece message)"
  },
  {
    "label": "RecordModuleInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordModuleInfo(const ModuleInfo& info)"
  },
  {
    "label": "RecordModuleInfoIfEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordModuleInfoIfEnabled(const ModuleInfo& info)"
  },
  {
    "label": "RecordException()",
    "kind": "Method",
    "detail": "Function (} ALWAYS_INLINE void)",
    "insertText": "RecordException(const void* origin, uint32_t code)"
  },
  {
    "label": "RecordException()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordException(const void* pc, const void* origin, uint32_t code)"
  },
  {
    "label": "MarkDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDeleted()"
  },
  {
    "label": "process_id()",
    "kind": "Method",
    "detail": "Function (ProcessId)",
    "insertText": "process_id()"
  },
  {
    "label": "ThreadSafeUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadSafeUserData(const ThreadSafeUserData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadSafeUserData&)",
    "insertText": "operator(const ThreadSafeUserData&)"
  },
  {
    "label": "ThreadSafeUserData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadSafeUserData()"
  },
  {
    "label": "ModuleInfoRecord()",
    "kind": "Method",
    "detail": "Function (Lock data_lock_ ; } ; struct BASE_EXPORT ModuleInfoRecord { uint32_t kPersistentTypeId = 0 x05DB5F41 + 1 ; size_t kExpectedInstanceSize = OwningProcess::kExpectedInstanceSize + 5 6 ;)",
    "insertText": "ModuleInfoRecord()"
  },
  {
    "label": "ModuleInfoRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModuleInfoRecord(const ModuleInfoRecord&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ModuleInfoRecord&)",
    "insertText": "operator(const ModuleInfoRecord&)"
  },
  {
    "label": "DecodeTo()",
    "kind": "Method",
    "detail": "Function (OwningProcess owner ; uint64_t address ; int64_t load_time ; uint64_t size ; uint32_t timestamp ; uint32_t age ; uint8_t identifier [ 1 6 ] ; std::atomic<uint32_t> changes ; uint16_t pickle_size ; uint8_t loaded ; char pickle [ 1 ] ; bool)",
    "insertText": "DecodeTo(GlobalActivityTracker::ModuleInfo* info, size_t record_size)"
  },
  {
    "label": "CreateFrom()",
    "kind": "Method",
    "detail": "Function (ModuleInfoRecord*)",
    "insertText": "CreateFrom(const GlobalActivityTracker::ModuleInfo& info, PersistentMemoryAllocator* allocator)"
  },
  {
    "label": "UpdateFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateFrom(const GlobalActivityTracker::ModuleInfo& info)"
  },
  {
    "label": "ManagedActivityTracker()",
    "kind": "Method",
    "detail": "Function (} ; class ManagedActivityTracker : public ThreadActivityTracker { public :)",
    "insertText": "ManagedActivityTracker(PersistentMemoryAllocator::Reference mem_reference, void* base, size_t size)"
  },
  {
    "label": "ManagedActivityTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ManagedActivityTracker(const ManagedActivityTracker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ManagedActivityTracker&)",
    "insertText": "operator(const ManagedActivityTracker&)"
  },
  {
    "label": "ManagedActivityTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ManagedActivityTracker()"
  },
  {
    "label": "GlobalActivityTracker()",
    "kind": "Method",
    "detail": "Function (const PersistentMemoryAllocator::Reference mem_reference_ ; const raw_ptr<void> mem_base_ ; } ;)",
    "insertText": "GlobalActivityTracker(std::unique_ptr<PersistentMemoryAllocator> allocator, int stack_depth, ProcessId process_id)"
  },
  {
    "label": "ReturnTrackerMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnTrackerMemory(ManagedActivityTracker* tracker)"
  },
  {
    "label": "RecordExceptionImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordExceptionImpl(const void* pc, const void* origin, uint32_t code)"
  },
  {
    "label": "OnTLSDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTLSDestroy(void* value)"
  },
  {
    "label": "CleanupAfterProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupAfterProcess(ProcessId process_id, int64_t exit_stamp, int exit_code, std::string&& command_line)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PersistentMemoryAllocator> allocator_ ; const size_t stack_memory_size_ ; const ProcessId process_id_ ; ThreadLocalOwnedPointer<ThreadActivityTracker> this_thread_tracker_ ; std::atomic<int> thread_tracker_count_ ; ActivityTrackerMemoryAllocator thread_tracker_allocator_)",
    "insertText": "GUARDED_BY(thread_tracker_allocator_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock thread_tracker_allocator_lock_ ; ActivityTrackerMemoryAllocator user_data_allocator_)",
    "insertText": "GUARDED_BY(user_data_allocator_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock user_data_allocator_lock_ ; ThreadSafeUserData process_data_ ; std::map<const std::string,ModuleInfoRecord*> modules_)",
    "insertText": "GUARDED_BY(modules_lock_)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock modules_lock_ ; std::atomic<GlobalActivityTracker*> g_tracker_ ; Lock global_tracker_lock_ ; std::map<ProcessId,std::string> known_processes_)",
    "insertText": "GUARDED_BY(global_tracker_lock_)"
  },
  {
    "label": "ScopedActivity()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ScopedActivity : public GlobalActivityTracker::ScopedThreadActivity { public : ALWAYS_INLINE)",
    "insertText": "ScopedActivity(uint8_t action, uint32_t id, int32_t info) : ScopedActivity(GetProgramCounter(), action, id, info)"
  },
  {
    "label": "ScopedActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedActivity(Location from_here, uint8_t action, uint32_t id, int32_t info) : ScopedActivity(from_here.program_counter(), action, id, info)"
  },
  {
    "label": "ScopedActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedActivity() : ScopedActivity(0, 0, 0)"
  },
  {
    "label": "ChangeAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeAction(uint8_t action)"
  },
  {
    "label": "ChangeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeInfo(int32_t info)"
  },
  {
    "label": "ChangeActionAndInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeActionAndInfo(uint8_t action, int32_t info)"
  },
  {
    "label": "ScopedActivity()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ScopedActivity(const void* program_counter, uint8_t action, uint32_t id, int32_t info)"
  },
  {
    "label": "ScopedTaskRunActivity()",
    "kind": "Method",
    "detail": "Function (uint32_t id_ ; } ; class BASE_EXPORT ScopedTaskRunActivity : public GlobalActivityTracker::ScopedThreadActivity { public : ALWAYS_INLINE)",
    "insertText": "ScopedTaskRunActivity(const PendingTask& task) : ScopedTaskRunActivity(GetProgramCounter(), task)"
  },
  {
    "label": "ScopedTaskRunActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedTaskRunActivity(const ScopedTaskRunActivity&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedTaskRunActivity&)",
    "insertText": "operator(const ScopedTaskRunActivity&)"
  },
  {
    "label": "ScopedTaskRunActivity()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ScopedTaskRunActivity(const void* program_counter, const PendingTask& task)"
  },
  {
    "label": "ScopedLockAcquireActivity()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ScopedLockAcquireActivity : public GlobalActivityTracker::ScopedThreadActivity { public : ALWAYS_INLINE)",
    "insertText": "ScopedLockAcquireActivity(const base::internal::LockImpl* lock) : ScopedLockAcquireActivity(GetProgramCounter(), lock)"
  },
  {
    "label": "ScopedLockAcquireActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedLockAcquireActivity(const ScopedLockAcquireActivity&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedLockAcquireActivity&)",
    "insertText": "operator(const ScopedLockAcquireActivity&)"
  },
  {
    "label": "ScopedLockAcquireActivity()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ScopedLockAcquireActivity(const void* program_counter, const base::internal::LockImpl* lock)"
  },
  {
    "label": "ScopedEventWaitActivity()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ScopedEventWaitActivity : public GlobalActivityTracker::ScopedThreadActivity { public : ALWAYS_INLINE)",
    "insertText": "ScopedEventWaitActivity(const WaitableEvent* event) : ScopedEventWaitActivity(GetProgramCounter(), event)"
  },
  {
    "label": "ScopedEventWaitActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedEventWaitActivity(const ScopedEventWaitActivity&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedEventWaitActivity&)",
    "insertText": "operator(const ScopedEventWaitActivity&)"
  },
  {
    "label": "ScopedEventWaitActivity()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ScopedEventWaitActivity(const void* program_counter, const WaitableEvent* event)"
  },
  {
    "label": "ScopedThreadJoinActivity()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ScopedThreadJoinActivity : public GlobalActivityTracker::ScopedThreadActivity { public : ALWAYS_INLINE)",
    "insertText": "ScopedThreadJoinActivity(const PlatformThreadHandle* thread) : ScopedThreadJoinActivity(GetProgramCounter(), thread)"
  },
  {
    "label": "ScopedThreadJoinActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedThreadJoinActivity(const ScopedThreadJoinActivity&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedThreadJoinActivity&)",
    "insertText": "operator(const ScopedThreadJoinActivity&)"
  },
  {
    "label": "ScopedThreadJoinActivity()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ScopedThreadJoinActivity(const void* program_counter, const PlatformThreadHandle* thread)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} ; # if !)",
    "insertText": "BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_IOS)"
  },
  {
    "label": "ScopedProcessWaitActivity()",
    "kind": "Method",
    "detail": "Function (public : ALWAYS_INLINE)",
    "insertText": "ScopedProcessWaitActivity(const Process* process) : ScopedProcessWaitActivity(GetProgramCounter(), process)"
  },
  {
    "label": "ScopedProcessWaitActivity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedProcessWaitActivity(const ScopedProcessWaitActivity&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedProcessWaitActivity&)",
    "insertText": "operator(const ScopedProcessWaitActivity&)"
  },
  {
    "label": "ScopedProcessWaitActivity()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ScopedProcessWaitActivity(const void* program_counter, const Process* process)"
  }
]