[
  {
    "label": "FStaticMeshLODResourcesMeshAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshLODResourcesMeshAdapter"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" StaticMeshAttributes . h \" # include \" StaticMeshResources . h \" # include \" TransformTypes . h \" struct FStaticMeshLODResourcesMeshAdapter { using FIndex3i = UE::Geometry::FIndex3i ; protected : const FStaticMeshLODResources* Mesh ; FVector3d BuildScale =)",
    "insertText": "One()"
  },
  {
    "label": "FStaticMeshLODResourcesMeshAdapter()",
    "kind": "Method",
    "detail": "Function (bool bScaleNormals = false ; TArray<const FStaticMeshSection*> ValidSections ; TArray<int32> TriangleOffsetArray ; int32 NumTriangles ; protected :)",
    "insertText": "FStaticMeshLODResourcesMeshAdapter() : Mesh(nullptr) , NumTriangles(0)"
  },
  {
    "label": "FStaticMeshLODResourcesMeshAdapter()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FStaticMeshLODResourcesMeshAdapter(const FStaticMeshLODResources* MeshIn) : Mesh(MeshIn) , NumTriangles(0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TriangleOffsetArray .)",
    "insertText": "Reserve(MeshIn->Sections.Num() + 1)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ValidSections .)",
    "insertText": "Reserve(MeshIn->Sections.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TriangleOffsetArray .)",
    "insertText": "Add(NumTriangles)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NumTriangles + = Section . NumTriangles ; ValidSections .)",
    "insertText": "Add(&Section)"
  },
  {
    "label": "SetBuildScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBuildScale(const FVector3d& BuildScaleIn, bool bScaleNormalsIn)"
  },
  {
    "label": "GetSafeScaleReciprocal()",
    "kind": "Method",
    "detail": "Function (BuildScale = BuildScaleIn ; InvBuildScale = UE::Geometry::)",
    "insertText": "GetSafeScaleReciprocal(BuildScaleIn)"
  },
  {
    "label": "IsTriangle()",
    "kind": "Method",
    "detail": "Function (bScaleNormals = bScaleNormalsIn ; } bool)",
    "insertText": "IsTriangle(int32 TID)"
  },
  {
    "label": "IsVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertex(int32 VID)"
  },
  {
    "label": "MaxTriangleID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxTriangleID()"
  },
  {
    "label": "TriangleCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TriangleCount()"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VertexCount()"
  },
  {
    "label": "GetChangeStamp()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetChangeStamp()"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (int32 SectionIdx =)",
    "insertText": "UpperBound(TriangleOffsetArray, InOutIDValue)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (InOutIDValue - = TriangleOffsetArray [ SectionIdx ] ; return* ValidSections [ SectionIdx ] ; } FIndex3i)",
    "insertText": "GetTriangle(int32 IDValue)"
  },
  {
    "label": "TriangleToSection()",
    "kind": "Method",
    "detail": "Function (const FStaticMeshSection& TriSection =)",
    "insertText": "TriangleToSection(IDValue)"
  },
  {
    "label": "GetArrayView()",
    "kind": "Method",
    "detail": "Function (const FIndexArrayView IndexArrayView = Mesh -> IndexBuffer .)",
    "insertText": "GetArrayView()"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "GetVertex(int32 IDValue)"
  },
  {
    "label": "VertexPosition()",
    "kind": "Method",
    "detail": "Function (const FVector3f& Position = Mesh -> VertexBuffers . PositionVertexBuffer .)",
    "insertText": "VertexPosition(IDValue)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTriVertices(int32 IDValue, FVector3d& V0, FVector3d& V1, FVector3d& V2)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i VtxIndices =)",
    "insertText": "GetTriangle(IDValue)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (V0 =)",
    "insertText": "GetVertex(VtxIndices.A)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (V1 =)",
    "insertText": "GetVertex(VtxIndices.B)"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (V2 =)",
    "insertText": "GetVertex(VtxIndices.C)"
  },
  {
    "label": "GetTriVertices()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> void)",
    "insertText": "GetTriVertices(int32 IDValue, VectorType& V0, VectorType& V1, VectorType& V2)"
  },
  {
    "label": "HasNormals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasNormals()"
  },
  {
    "label": "IsNormal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNormal(int32 NID)"
  },
  {
    "label": "MaxNormalID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxNormalID()"
  },
  {
    "label": "NormalCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NormalCount()"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetNormal(int32 IDValue)"
  },
  {
    "label": "VertexTangentZ()",
    "kind": "Method",
    "detail": "Function (const FVector4f& Normal = Mesh -> VertexBuffers . StaticMeshVertexBuffer .)",
    "insertText": "VertexTangentZ(IDValue)"
  },
  {
    "label": "GetTriNormals()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> void)",
    "insertText": "GetTriNormals(int32 TriId, VectorType& N0, VectorType& N1, VectorType& N2)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (FIndex3i VtxIndices =)",
    "insertText": "GetTriangle(TriId)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (N0 =)",
    "insertText": "GetNormal(VtxIndices.A)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (N1 =)",
    "insertText": "GetNormal(VtxIndices.B)"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (N2 =)",
    "insertText": "GetNormal(VtxIndices.C)"
  },
  {
    "label": "GetTangentX()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetTangentX(int32 IDValue)"
  },
  {
    "label": "VertexTangentX()",
    "kind": "Method",
    "detail": "Function (const FVector4f& TangentX = Mesh -> VertexBuffers . StaticMeshVertexBuffer .)",
    "insertText": "VertexTangentX(IDValue)"
  },
  {
    "label": "GetTriTangentsX()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> void)",
    "insertText": "GetTriTangentsX(int32 TriId, VectorType& T0, VectorType& T1, VectorType& T2)"
  },
  {
    "label": "GetTangentX()",
    "kind": "Method",
    "detail": "Function (T0 =)",
    "insertText": "GetTangentX(VtxIndices.A)"
  },
  {
    "label": "GetTangentX()",
    "kind": "Method",
    "detail": "Function (T1 =)",
    "insertText": "GetTangentX(VtxIndices.B)"
  },
  {
    "label": "GetTangentX()",
    "kind": "Method",
    "detail": "Function (T2 =)",
    "insertText": "GetTangentX(VtxIndices.C)"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetTangentY(int32 IDValue)"
  },
  {
    "label": "VertexTangentY()",
    "kind": "Method",
    "detail": "Function (const FVector4f& TangentY = Mesh -> VertexBuffers . StaticMeshVertexBuffer .)",
    "insertText": "VertexTangentY(IDValue)"
  },
  {
    "label": "GetTriTangentsY()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> void)",
    "insertText": "GetTriTangentsY(int32 TriId, VectorType& T0, VectorType& T1, VectorType& T2)"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (T0 =)",
    "insertText": "GetTangentY(VtxIndices.A)"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (T1 =)",
    "insertText": "GetTangentY(VtxIndices.B)"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (T2 =)",
    "insertText": "GetTangentY(VtxIndices.C)"
  },
  {
    "label": "HasUVs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasUVs(const int32 UVLayer = 0)"
  },
  {
    "label": "NumUVLayers()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumUVLayers()"
  },
  {
    "label": "IsUV()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUV(const int32 UVId)"
  },
  {
    "label": "MaxUVID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxUVID()"
  },
  {
    "label": "UVCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "UVCount()"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (} FVector2f)",
    "insertText": "GetUV(const int32 IDValue, const int32 UVLayer)"
  },
  {
    "label": "GetTriUVs()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> void)",
    "insertText": "GetTriUVs(const int32 TriId, const int32 UVLayer, VectorType& UV0, VectorType& UV1, VectorType& UV2)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (UV0 =)",
    "insertText": "GetUV(VtxIndices.A, UVLayer)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (UV1 =)",
    "insertText": "GetUV(VtxIndices.B, UVLayer)"
  },
  {
    "label": "GetUV()",
    "kind": "Method",
    "detail": "Function (UV2 =)",
    "insertText": "GetUV(VtxIndices.C, UVLayer)"
  },
  {
    "label": "HasColors()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasColors()"
  },
  {
    "label": "IsColor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsColor(int32 ColorIndex)"
  },
  {
    "label": "MaxColorID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxColorID()"
  },
  {
    "label": "ColorCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ColorCount()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (} FColor)",
    "insertText": "GetColor(int32 IDValue)"
  },
  {
    "label": "GetTriColors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTriColors(int32 TriId, FColor& C0, FColor& C1, FColor& C2)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (C0 =)",
    "insertText": "GetColor(VtxIndices.A)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (C1 =)",
    "insertText": "GetColor(VtxIndices.B)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (C2 =)",
    "insertText": "GetColor(VtxIndices.C)"
  }
]