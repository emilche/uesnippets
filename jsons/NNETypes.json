[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NNE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NNE_API"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Class . h \" # include \" NNETypes . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "GetTensorDataTypeSizeInBytes()",
    "kind": "Method",
    "detail": "Function (None,Char,Boolean,Half,Float,Double,Int8,Int16,Int32,Int64,UInt8,UInt16,UInt32,UInt64,Complex64,Complex128,BFloat16 } ; namespace UE::NNE { int32)",
    "insertText": "GetTensorDataTypeSizeInBytes(ENNETensorDataType InType)"
  },
  {
    "label": "FSymbolicTensorShape()",
    "kind": "Method",
    "detail": "Function (class FSymbolicTensorShape { public : int32 MaxRank = 8 ; private : TArray<int32,TInlineAllocator<MaxRank>> Data ; public :)",
    "insertText": "FSymbolicTensorShape()"
  },
  {
    "label": "FSymbolicTensorShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSymbolicTensorShape(const FSymbolicTensorShape& OtherShape)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (FSymbolicTensorShape)",
    "insertText": "Make(TConstArrayView<int32> Data)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<int32>)",
    "insertText": "GetData()"
  },
  {
    "label": "IsConcrete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConcrete()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSymbolicTensorShape& OtherShape)"
  },
  {
    "label": "FTensorShape()",
    "kind": "Method",
    "detail": "Function (} ; class FTensorShape { public : int32 MaxRank = FSymbolicTensorShape::MaxRank ; private : TArray<uint32,TInlineAllocator<MaxRank>> Data ; public :)",
    "insertText": "FTensorShape()"
  },
  {
    "label": "FTensorShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTensorShape(const FTensorShape& OtherShape)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (FTensorShape)",
    "insertText": "Make(TConstArrayView<uint32> Data)"
  },
  {
    "label": "MakeFromSymbolic()",
    "kind": "Method",
    "detail": "Function (FTensorShape)",
    "insertText": "MakeFromSymbolic(const FSymbolicTensorShape& SymbolicShape)"
  },
  {
    "label": "Volume()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Volume()"
  },
  {
    "label": "IsCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWith(const FSymbolicTensorShape& SymbolicShape)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FTensorShape& OtherShape)"
  },
  {
    "label": "FTensorDesc()",
    "kind": "Method",
    "detail": "Function (} ; class FTensorDesc { private : FString Name ; ENNETensorDataType DataType ; FSymbolicTensorShape Shape ;)",
    "insertText": "FTensorDesc()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (public : FTensorDesc)",
    "insertText": "Make(const FString& Name, const FSymbolicTensorShape& Shape, ENNETensorDataType DataType)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetShape()",
    "kind": "Method",
    "detail": "Function (} const FSymbolicTensorShape&)",
    "insertText": "GetShape()"
  }
]