[
  {
    "label": "reader_writer_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "reader_writer_lock"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "scoped_lock_read",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock_read"
  },
  {
    "label": "status_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "status_t"
  },
  {
    "label": "reader_writer_lock()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_reader_writer_lock_H # define __TBB_reader_writer_lock_H # include \" tbb_thread . h \" # include \" tbb_allocator . h \" # include \" atomic . h \" namespace tbb { namespace interface5 { class reader_writer_lock : tbb::internal::no_copy { public : class scoped_lock ; class scoped_lock_read ; enum status_t { waiting_nonblocking,waiting,active,invalid } ;)",
    "insertText": "reader_writer_lock()"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_construct()"
  },
  {
    "label": "internal_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_destroy()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} class scoped_lock : tbb::internal::no_copy { public : class reader_writer_lock ;)",
    "insertText": "scoped_lock(reader_writer_lock& lock)"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_construct(lock)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t s)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* p)"
  },
  {
    "label": "deallocate_via_handler_v3()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "deallocate_via_handler_v3(p)"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_construct(reader_writer_lock&)"
  },
  {
    "label": "scoped_lock_read()",
    "kind": "Method",
    "detail": "Function (} ; class scoped_lock_read : tbb::internal::no_copy { public : class reader_writer_lock ;)",
    "insertText": "scoped_lock_read(reader_writer_lock& lock)"
  },
  {
    "label": "scoped_lock_read()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "scoped_lock_read()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (} ; void __TBB_EXPORTED_METHOD)",
    "insertText": "lock()"
  },
  {
    "label": "try_lock()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "try_lock()"
  },
  {
    "label": "lock_read()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "lock_read()"
  },
  {
    "label": "try_lock_read()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "try_lock_read()"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "unlock()"
  },
  {
    "label": "start_write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "start_write(scoped_lock *)"
  },
  {
    "label": "set_next_writer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_next_writer(scoped_lock *w)"
  },
  {
    "label": "end_write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "end_write(scoped_lock *)"
  },
  {
    "label": "is_current_writer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_current_writer()"
  },
  {
    "label": "start_read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start_read(scoped_lock_read *)"
  },
  {
    "label": "unblock_readers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unblock_readers()"
  },
  {
    "label": "end_read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "end_read()"
  }
]