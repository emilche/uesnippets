[
  {
    "label": "FAnalyticsPerfTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsPerfTracker"
  },
  {
    "label": "enabled()",
    "kind": "Method",
    "detail": "Function (When)",
    "insertText": "enabled(and -AnalyticsTrackPerf is specified on the command line, will log out analytics flush timings on a regular basis to Saved/AnalyticsTiming.csv. */\n#define ANALYTICS_PERF_TRACKING_ENABLED !UE_BUILD_SHIPPING\n#if ANALYTICS_PERF_TRACKING_ENABLED\n\n#include \"CoreMinimal.h\"\n#include \"Containers/Ticker.h\"\n#include \"Misc/OutputDeviceFile.h\"\n#include \"Misc/Paths.h\"\n#include \"Misc/LazySingleton.h\"\n#include \"HAL/PlatformTime.h\"\n\n/** Measures analytics bandwidth. Only active when -AnalyticsTrackPerf is specified on the command line. */\nstruct FAnalyticsPerfTracker : FTSTickerObjectBase\n{\n\tFAnalyticsPerfTracker()"
  },
  {
    "label": "RecordFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordFlush(uint64 Bytes, uint64 NumEvents, double TimeSec)"
  },
  {
    "label": "SetRunID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRunID(const FString& InRunID)"
  },
  {
    "label": "WindowExpired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WindowExpired(double Now)"
  },
  {
    "label": "ResetWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetWindow(double Now)"
  },
  {
    "label": "SetAnayticsETPerfTrackingRunID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnayticsETPerfTrackingRunID(const FString& RunID)"
  },
  {
    "label": "TearDownAnalyticsPerfTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDownAnalyticsPerfTracker()"
  }
]