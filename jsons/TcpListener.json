[
  {
    "label": "FTcpListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTcpListener"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Runnable . h \" # include \" IPAddress . h \" # include \" SocketSubsystem . h \" # include \" Interfaces / IPv4 / IPv4Endpoint . h \" # include \" HAL / RunnableThread . h \" # include \" Common / TcpSocketBuilder . h \")",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FOnTcpListenerConnectionAccepted, FSocket*, const FIPv4Endpoint&)"
  },
  {
    "label": "FTcpListener()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTcpListener(const FIPv4Endpoint& LocalEndpoint, const FTimespan& InSleepTime = FTimespan::FromSeconds(1), bool bInReusable = true) : bDeleteSocket(true) , Endpoint(LocalEndpoint) , SleepTime(InSleepTime) , Socket(nullptr) , bStopping(false) , bSocketReusable(bInReusable)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Thread =)",
    "insertText": "Create(this, TEXT(\"FTcpListener\"), 8 * 1024, TPri_Normal)"
  },
  {
    "label": "FTcpListener()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTcpListener(FSocket& InSocket, const FTimespan& InSleepTime = FTimespan::FromSeconds(1), bool bInReusable = true) : bDeleteSocket(false) , SleepTime(InSleepTime) , Socket(&InSocket) , bStopping(false) , bSocketReusable(bInReusable)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr> LocalAddress =)",
    "insertText": "Get(PLATFORM_SOCKETSUBSYSTEM)->CreateInternetAddr()"
  },
  {
    "label": "GetAddress()",
    "kind": "Method",
    "detail": "Function (Socket ->)",
    "insertText": "GetAddress(*LocalAddress)"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (Endpoint =)",
    "insertText": "FIPv4Endpoint(LocalAddress)"
  },
  {
    "label": "FTcpListener()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTcpListener()"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (Thread ->)",
    "insertText": "Kill(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delete Thread ; })",
    "insertText": "if(bDeleteSocket && (Socket != nullptr))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(PLATFORM_SOCKETSUBSYSTEM)->DestroySocket(Socket)"
  },
  {
    "label": "GetLocalEndpoint()",
    "kind": "Method",
    "detail": "Function (Socket = nullptr ; } } public : const FIPv4Endpoint&)",
    "insertText": "GetLocalEndpoint()"
  },
  {
    "label": "OnConnectionAccepted()",
    "kind": "Method",
    "detail": "Function (} public : FOnTcpListenerConnectionAccepted&)",
    "insertText": "OnConnectionAccepted()"
  },
  {
    "label": "FTcpSocketBuilder()",
    "kind": "Method",
    "detail": "Function (Socket =)",
    "insertText": "FTcpSocketBuilder(TEXT(\"FTcpListener server\")) .AsReusable(bSocketReusable) .BoundToEndpoint(Endpoint) .Listening(8) .WithSendBufferSize(2 * 1024 * 1024)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(Socket != nullptr)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Run()"
  },
  {
    "label": "bHasZeroSleepTime()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bHasZeroSleepTime(SleepTime == FTimespan::Zero())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool Pending = false ;)",
    "insertText": "if(Socket->WaitForPendingConnection(Pending, SleepTime))"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (FSocket* ConnectionSocket = Socket ->)",
    "insertText": "Accept(*RemoteAddress, TEXT(\"FTcpListener client\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool Accepted = false ;)",
    "insertText": "if(ConnectionAcceptedDelegate.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (Accepted = ConnectionAcceptedDelegate .)",
    "insertText": "Execute(ConnectionSocket, FIPv4Endpoint(RemoteAddress))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Accepted)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (ConnectionSocket ->)",
    "insertText": "Close()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(PLATFORM_SOCKETSUBSYSTEM)->DestroySocket(ConnectionSocket)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(bHasZeroSleepTime)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(0.f)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "Sleep(static_cast<float>(SleepTime.GetSeconds()))"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} } return 0 ; } void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (bStopping = true ; } void)",
    "insertText": "Exit()"
  }
]