[
  {
    "label": "ValueMapCallbackVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueMapCallbackVH"
  },
  {
    "label": "ValueMapIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueMapIterator"
  },
  {
    "label": "ValueMapConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueMapConstIterator"
  },
  {
    "label": "ValueMapConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueMapConfig"
  },
  {
    "label": "ExtraData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExtraData"
  },
  {
    "label": "ValueMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueMap"
  },
  {
    "label": "DenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapInfo"
  },
  {
    "label": "ValueTypeProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueTypeProxy"
  },
  {
    "label": "onRAUW()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_VALUEMAP_H # define LLVM_IR_VALUEMAP_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / IR / TrackingMDRef . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Support / Mutex . h \" # include \" llvm / Support / UniqueLock . h \" # include \" llvm / Support / type_traits . h \" # include<iterator> # include<memory> namespace llvm { template<KeyT,ValueT,Config> class ValueMapCallbackVH ; template<DenseMapT,KeyT> class ValueMapIterator ; template<DenseMapT,KeyT> class ValueMapConstIterator ; template<KeyT,MutexT = sys::Mutex> struct ValueMapConfig { typedef MutexT mutex_type ; enum { FollowRAUW = true } ; struct ExtraData { } ; template<ExtraDataT> void)",
    "insertText": "onRAUW(const ExtraDataT & , KeyT , KeyT)"
  },
  {
    "label": "onDelete()",
    "kind": "Method",
    "detail": "Function (} template<ExtraDataT> void)",
    "insertText": "onDelete(const ExtraDataT & , KeyT)"
  },
  {
    "label": "getMutex()",
    "kind": "Method",
    "detail": "Function (} template<ExtraDataT> mutex_type*)",
    "insertText": "getMutex(const ExtraDataT &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ValueMap&)",
    "insertText": "operator(const ValueMap&)"
  },
  {
    "label": "ValueMap()",
    "kind": "Method",
    "detail": "Function (public : typedef KeyT key_type ; typedef ValueT mapped_type ; typedef std::pair<KeyT,ValueT> value_type ; typedef unsigned size_type ;)",
    "insertText": "ValueMap(unsigned NumInitBuckets = 64) : Map(NumInitBuckets), Data()"
  },
  {
    "label": "ValueMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueMap(const ExtraData &Data, unsigned NumInitBuckets = 64) : Map(NumInitBuckets), Data(Data)"
  },
  {
    "label": "hasMD()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasMD()"
  },
  {
    "label": "MD()",
    "kind": "Method",
    "detail": "Function (} MDMapT&)",
    "insertText": "MD()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(size_t Size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "resize(Size)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (MDMap .)",
    "insertText": "reset()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(const KeyT &Val)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(const KeyT &Val)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (} ValueT)",
    "insertText": "lookup(const KeyT &Val)"
  },
  {
    "label": "find_as()",
    "kind": "Method",
    "detail": "Function (MapT::const_iterator I = Map .)",
    "insertText": "find_as(Val)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(const std::pair<KeyT, ValueT> &KV)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (auto MapResult = Map .)",
    "insertText": "insert(std::make_pair(Wrap(KV.first), KV.second))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(std::pair<KeyT, ValueT> &&KV)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (auto MapResult = Map .)",
    "insertText": "insert(std::make_pair(Wrap(KV.first), std::move(KV.second)))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<InputIt> void)",
    "insertText": "insert(InputIt I, InputIt E)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "erase(const KeyT &Val)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "erase(I)"
  },
  {
    "label": "FindAndConstruct()",
    "kind": "Method",
    "detail": "Function (} value_type&)",
    "insertText": "FindAndConstruct(const KeyT &Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueT&)",
    "insertText": "operator(const KeyT &Key)"
  },
  {
    "label": "isPointerIntoBucketsArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPointerIntoBucketsArray(const void *Ptr)"
  },
  {
    "label": "getPointerIntoBucketsArray()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "getPointerIntoBucketsArray()"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (} private : ValueMapCVH)",
    "insertText": "Wrap(KeyT key)"
  },
  {
    "label": "ValueMapCallbackVH()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyT,ValueT,Config> class ValueMapCallbackVH : public CallbackVH { class ValueMap<KeyT,ValueT,Config> ; struct DenseMapInfo<ValueMapCallbackVH> ; typedef ValueMap<KeyT,ValueT,Config> ValueMapT ; typedef std::remove_pointer<KeyT>::type KeySansPointerT ; ValueMapT* Map ;)",
    "insertText": "ValueMapCallbackVH(KeyT Key, ValueMapT *Map) : CallbackVH(const_cast<Value*>(static_cast<const Value*>(Key))), Map(Map)"
  },
  {
    "label": "ValueMapCallbackVH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueMapCallbackVH(Value *V) : CallbackVH(V), Map(nullptr)"
  },
  {
    "label": "Unwrap()",
    "kind": "Method",
    "detail": "Function (} public : KeyT)",
    "insertText": "Unwrap()"
  },
  {
    "label": "deleted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deleted()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (ValueMapCallbackVH)",
    "insertText": "Copy(*this)"
  },
  {
    "label": "getMutex()",
    "kind": "Method",
    "detail": "Function (Config::mutex_type* M =)",
    "insertText": "getMutex(Copy.Map->Data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unique_lock<Config::mutex_type> Guard ;)",
    "insertText": "if(M) Guard = unique_lock<typename Config::mutex_type>(*M)"
  },
  {
    "label": "onDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onDelete(Copy.Map->Data, Copy.Unwrap())"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (Copy . Map -> Map .)",
    "insertText": "erase(Copy)"
  },
  {
    "label": "allUsesReplacedWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "allUsesReplacedWith(Value *new_key)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<KeySansPointerT>(new_key) && \"Invalid RAUW on key of ValueMap<>\")"
  },
  {
    "label": "KeySansPointerT()",
    "kind": "Method",
    "detail": "Function (KeyT typed_new_key = cast<)",
    "insertText": "KeySansPointerT(new_key)"
  },
  {
    "label": "onRAUW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "onRAUW(Copy.Map->Data, Copy.Unwrap(), typed_new_key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (ValueMapT::MapT::iterator I = Copy . Map -> Map .)",
    "insertText": "find(Copy)"
  },
  {
    "label": "Target()",
    "kind": "Method",
    "detail": "Function (ValueT)",
    "insertText": "Target(std::move(I->second))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Copy . Map ->)",
    "insertText": "insert(std::make_pair(typed_new_key, std::move(Target)))"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (} } } } ; template<KeyT,ValueT,Config> struct DenseMapInfo<ValueMapCallbackVH<KeyT,ValueT,Config>> { typedef ValueMapCallbackVH<KeyT,ValueT,Config> VH ; VH)",
    "insertText": "getEmptyKey()"
  },
  {
    "label": "getTombstoneKey()",
    "kind": "Method",
    "detail": "Function (} VH)",
    "insertText": "getTombstoneKey()"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(const VH &Val)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(const KeyT &Val)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(const VH &LHS, const VH &RHS)"
  },
  {
    "label": "ValueMapIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<DenseMapT,KeyT> class ValueMapIterator { typedef DenseMapT::iterator BaseT ; typedef DenseMapT::mapped_type ValueT ; BaseT I ; public : using iterator_category = std::forward_iterator_tag ; using value_type = std::pair<KeyT,DenseMapT::mapped_type> ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "ValueMapIterator() : I()"
  },
  {
    "label": "ValueMapIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueMapIterator(BaseT I) : I(I)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} BaseT)",
    "insertText": "base()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; ValueTypeProxy)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ValueMapIterator &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + I ; return* this ; } ValueMapIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "ValueMapConstIterator()",
    "kind": "Method",
    "detail": "Function (ValueMapIterator tmp =* this ; + +* this ; return tmp ; } } ; template<DenseMapT,KeyT> class ValueMapConstIterator { typedef DenseMapT::const_iterator BaseT ; typedef DenseMapT::mapped_type ValueT ; BaseT I ; public : using iterator_category = std::forward_iterator_tag ; using value_type = std::pair<KeyT,DenseMapT::mapped_type> ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "ValueMapConstIterator() : I()"
  },
  {
    "label": "ValueMapConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueMapConstIterator(BaseT I) : I(I)"
  },
  {
    "label": "ValueMapConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueMapConstIterator(ValueMapIterator<DenseMapT, KeyT> Other) : I(Other.base())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ValueMapConstIterator &RHS)"
  }
]