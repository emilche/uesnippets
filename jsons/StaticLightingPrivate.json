[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FLightmassProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassProcessor"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FShadowMapData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapData2D"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "ULightComponentBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponentBase"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "FNodeGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeGroup"
  },
  {
    "label": "FQuantizedLightmapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedLightmapData"
  },
  {
    "label": "FSelectedLightmapSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectedLightmapSample"
  },
  {
    "label": "FLightmassStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightmassStatistics"
  },
  {
    "label": "FScopedGather",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedGather"
  },
  {
    "label": "FStaticLightingMappingSortHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingMappingSortHelper"
  },
  {
    "label": "FStaticLightingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingManager"
  },
  {
    "label": "FStaticLightingSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingSystem"
  },
  {
    "label": "LightingStage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LightingStage"
  },
  {
    "label": "FDebugStaticLightingRay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugStaticLightingRay"
  },
  {
    "label": "FDebugStaticLightingVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugStaticLightingVertex"
  },
  {
    "label": "FDebugLightingCacheRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugLightingCacheRecord"
  },
  {
    "label": "FDebugPhoton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugPhoton"
  },
  {
    "label": "FDebugOctreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugOctreeNode"
  },
  {
    "label": "FDebugVolumeLightingSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugVolumeLightingSample"
  },
  {
    "label": "FDebugLightingOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugLightingOutput"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Engine / Level . h \" # include \" StaticLighting . h \" # include \" LightingBuildOptions . h \" # include \" Templates / UniquePtr . h \" # include \" Engine / MapBuildDataRegistry . h \" # include \" StaticLightingBuildContext . h \" class FCanvas ; class FLightmassProcessor ; class FPrimitiveDrawInterface ; class FSceneView ; class FShadowMapData2D ; class UActorComponent ; class ULightComponent ; class ULightComponentBase ; class UModel ; struct FNodeGroup ; struct FQuantizedLightmapData ; struct FSelectedLightmapSample ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStaticLightingSystem, Log, All)"
  },
  {
    "label": "FScopedGather()",
    "kind": "Method",
    "detail": "Function (struct FLightmassStatistics { struct FScopedGather {)",
    "insertText": "FScopedGather(double& Statistic) : StatReference(Statistic) , StatStartTime(0.0)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (StatStartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "FScopedGather()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedGather()"
  },
  {
    "label": "FLightmassStatistics()",
    "kind": "Method",
    "detail": "Function (} double& StatReference ; double StatStartTime ; } ;)",
    "insertText": "FLightmassStatistics()"
  },
  {
    "label": "ClearAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAll()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StartupTime = 0 . 0 ; CollectTime = 0 . 0 ; PrepareLightsTime = 0 . 0 ; GatherLightingInfoTime = 0 . 0 ; ProcessingTime = 0 . 0 ; CollectLightmassSceneTime = 0 . 0 ; ExportTime = 0 . 0 ; LightmassTime = 0 . 0 ; SwarmStartupTime = 0 . 0 ; SwarmCallbackTime = 0 . 0 ; SwarmJobOpenTime = 0 . 0 ; SwarmJobCloseTime = 0 . 0 ; ImportTime = 0 . 0 ; ImportTimeInProcessing = 0 . 0 ; InvalidationTime = 0 . 0 ; ApplyTime = 0 . 0 ; ApplyTimeInProcessing = 0 . 0 ; EncodingTime = 0 . 0 ; EncodingLightmapsTime = 0 . 0 ; EncodingShadowMapsTime = 0 . 0 ; FinishingTime = 0 . 0 ; TotalTime = 0 . 0 ; ExportVisibilityDataTime = 0 . 0 ; ExportVolumetricLightmapDataTime = 0 . 0 f ; ExportLightsTime = 0 . 0 ; ExportModelsTime = 0 . 0 ; ExportStaticMeshesTime = 0 . 0 ; ExportMaterialsTime = 0 . 0 ; ExportMeshInstancesTime = 0 . 0 ; ExportLandscapeInstancesTime = 0 . 0 ; ExportMappingsTime = 0 . 0 ; Scratch0 = 0 . 0 ; Scratch1 = 0 . 0 ; Scratch2 = 0 . 0 ; Scratch3 = 0 . 0 ; } FLightmassStatistics&)",
    "insertText": "operator(const FLightmassStatistics& Other)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (StartupTime + = Other . StartupTime ; CollectTime + = Other . CollectTime ; PrepareLightsTime + = Other . PrepareLightsTime ; GatherLightingInfoTime + = Other . GatherLightingInfoTime ; ProcessingTime + = Other . ProcessingTime ; CollectLightmassSceneTime + = Other . CollectLightmassSceneTime ; ExportTime + = Other . ExportTime ; LightmassTime + = Other . LightmassTime ; SwarmStartupTime + = Other . SwarmStartupTime ; SwarmCallbackTime + = Other . SwarmCallbackTime ; SwarmJobOpenTime + = Other . SwarmJobOpenTime ; SwarmJobCloseTime + = Other . SwarmJobCloseTime ; ImportTime + = Other . ImportTime ; ImportTimeInProcessing + = Other . ImportTimeInProcessing ; InvalidationTime + = Other . InvalidationTime ; ApplyTime + = Other . ApplyTime ; ApplyTimeInProcessing + = Other . ApplyTimeInProcessing ; EncodingTime + = Other . EncodingTime ; EncodingLightmapsTime + = Other . EncodingLightmapsTime ; EncodingShadowMapsTime + = Other . EncodingShadowMapsTime ; FinishingTime + = Other . FinishingTime ; TotalTime + = Other . TotalTime ; ExportVisibilityDataTime + = Other . ExportVisibilityDataTime ; ExportVolumetricLightmapDataTime + = Other . ExportVolumetricLightmapDataTime ; ExportLightsTime + = Other . ExportLightsTime ; ExportModelsTime + = Other . ExportModelsTime ; ExportStaticMeshesTime + = Other . ExportStaticMeshesTime ; ExportMaterialsTime + = Other . ExportMaterialsTime ; ExportMeshInstancesTime + = Other . ExportMeshInstancesTime ; ExportLandscapeInstancesTime + = Other . ExportLandscapeInstancesTime ; ExportMappingsTime + = Other . ExportMappingsTime ; Scratch0 + = Other . Scratch0 ; Scratch1 + = Other . Scratch1 ; Scratch2 + = Other . Scratch2 ; Scratch3 + = Other . Scratch3 ; return* this ; } double StartupTime ; double CollectTime ; double PrepareLightsTime ; double GatherLightingInfoTime ; double ProcessingTime ; double CollectLightmassSceneTime ; double ExportTime ; double LightmassTime ; double SwarmStartupTime ; double SwarmCallbackTime ; double SwarmJobOpenTime ; double SwarmJobCloseTime ; double ImportTime ; double ImportTimeInProcessing ; double InvalidationTime ; double ApplyTime ; double ApplyTimeInProcessing ; double EncodingTime ; double EncodingLightmapsTime ; double EncodingShadowMapsTime ; double FinishingTime ; double TotalTime ; double ExportVisibilityDataTime ; double ExportVolumetricLightmapDataTime ; double ExportLightsTime ; double ExportModelsTime ; double ExportStaticMeshesTime ; double ExportMaterialsTime ; double ExportMeshInstancesTime ; double ExportLandscapeInstancesTime ; double ExportMappingsTime ; double Scratch0 ; double Scratch1 ; double Scratch2 ; double Scratch3 ; } ; struct FStaticLightingMappingSortHelper { int32 NumTexels ; TRefCountPtr<FStaticLightingMapping> Mapping ; } ; class FStaticLightingManager : public TSharedFromThis<FStaticLightingManager> { public : TSharedPtr<FStaticLightingManager>)",
    "insertText": "Get()"
  },
  {
    "label": "ProcessLightingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLightingData()"
  },
  {
    "label": "CancelLightingBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelLightingBuild()"
  },
  {
    "label": "SendProgressNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendProgressNotification()"
  },
  {
    "label": "ClearCurrentNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentNotification()"
  },
  {
    "label": "SendBuildDoneNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBuildDoneNotification(bool AutoApplyFailed)"
  },
  {
    "label": "SetNotificationText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNotificationText(FText Text)"
  },
  {
    "label": "ImportRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportRequested()"
  },
  {
    "label": "DiscardRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardRequested()"
  },
  {
    "label": "CreateStaticLightingSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateStaticLightingSystem(const FLightingBuildOptions& Options)"
  },
  {
    "label": "UpdateBuildLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuildLighting()"
  },
  {
    "label": "FailLightingBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FailLightingBuild(FText ErrorText = FText())"
  },
  {
    "label": "IsLightingBuildCurrentlyRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightingBuildCurrentlyRunning()"
  },
  {
    "label": "IsLightingBuildCurrentlyExporting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightingBuildCurrentlyExporting()"
  },
  {
    "label": "FStaticLightingManager()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FStaticLightingManager() : ActiveStaticLightingSystem(nullptr) , bBuildReflectionCapturesOnFinish(true)"
  },
  {
    "label": "FinishLightingBuild()",
    "kind": "Method",
    "detail": "Function (} class FStaticLightingSystem* ActiveStaticLightingSystem ; TArray<TUniquePtr<class FStaticLightingSystem>> StaticLightingSystems ; TWeakPtr<SNotificationItem> LightBuildNotification ; TSharedPtr<FStaticLightingManager> StaticLightingManager ; bool bBuildReflectionCapturesOnFinish ; void)",
    "insertText": "FinishLightingBuild()"
  },
  {
    "label": "DestroyStaticLightingSystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyStaticLightingSystems()"
  },
  {
    "label": "FStaticLightingSystem()",
    "kind": "Method",
    "detail": "Function (} ; class FStaticLightingSystem { public :)",
    "insertText": "FStaticLightingSystem(const FLightingBuildOptions& InOptions, FStaticLightingBuildContext&& InContext)"
  },
  {
    "label": "FStaticLightingSystem()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStaticLightingSystem()"
  },
  {
    "label": "CheckLightmassExecutableVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckLightmassExecutableVersion()"
  },
  {
    "label": "BeginLightmassProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginLightmassProcess()"
  },
  {
    "label": "UpdateLightingBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLightingBuild()"
  },
  {
    "label": "KickoffSwarm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KickoffSwarm()"
  },
  {
    "label": "FinishLightmassProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishLightmassProcess()"
  },
  {
    "label": "ApplyMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMapping(FStaticLightingTextureMapping* TextureMapping, FQuantizedLightmapData* QuantizedData, const TMap<ULightComponent*,FShadowMapData2D*>& ShadowMapData)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetLightingContext()",
    "kind": "Method",
    "detail": "Function (const FStaticLightingBuildContext&)",
    "insertText": "GetLightingContext()"
  },
  {
    "label": "IsAsyncBuilding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncBuilding()"
  },
  {
    "label": "IsAmortizedExporting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAmortizedExporting()"
  },
  {
    "label": "ShouldOperateOnLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOperateOnLevel(ULevel* InLevel)"
  },
  {
    "label": "AddBSPStaticLightingInfo()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddBSPStaticLightingInfo(ULevel* Level, bool bBuildLightingForBSP)"
  },
  {
    "label": "AddBSPStaticLightingInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBSPStaticLightingInfo(ULevel* Level, TArray<FNodeGroup*>& NodeGroupsToBuild)"
  },
  {
    "label": "AddPrimitiveStaticLightingInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitiveStaticLightingInfo(FStaticLightingPrimitiveInfo& PrimitiveInfo, bool bBuildActorLighting, bool bDeferMapping)"
  },
  {
    "label": "CreateLightmassProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateLightmassProcessor()"
  },
  {
    "label": "GatherScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherScene()"
  },
  {
    "label": "InitiateLightmassProcessor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitiateLightmassProcessor()"
  },
  {
    "label": "ReportStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportStatistics()"
  },
  {
    "label": "GatherStaticLightingInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherStaticLightingInfo(bool bRebuildDirtyGeometryForLighting, bool bForceNoPrecomputedLighting)"
  },
  {
    "label": "EncodeTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeTextures(bool bLightingSuccessful)"
  },
  {
    "label": "ApplyNewLightingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyNewLightingData(bool bSuccessful)"
  },
  {
    "label": "CompleteDeterministicMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteDeterministicMappings(class FLightmassProcessor* LightmassProcessor)"
  },
  {
    "label": "InvalidateStaticLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateStaticLighting()"
  },
  {
    "label": "CanAutoApplyLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAutoApplyLighting()"
  },
  {
    "label": "ClearBinaryDumps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBinaryDumps()"
  },
  {
    "label": "UpdateAutomaticImportanceVolumeBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAutomaticImportanceVolumeBounds(const FBox& MeshBounds)"
  },
  {
    "label": "GatherBuildDataResourcesToKeep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherBuildDataResourcesToKeep(const ULevel* Level)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (private : TArray<ULightComponentBase*> Lights ; const FLightingBuildOptions Options ; bool bBuildCanceled ; FBox LightingMeshBounds ; FBox AutomaticImportanceVolumeBounds ; TArray<TRefCountPtr<FStaticLightingMesh>> Meshes ; TArray<TRefCountPtr<FStaticLightingMapping>> Mappings ; TArray<FStaticLightingMappingSortHelper> UnSortedMappings ; FLightmassStatistics LightmassStatistics ; int32 DeterministicIndex ; int32 NextVisibilityId ; enum LightingStage { NotRunning,Startup,AmortizedExport,SwarmKickoff,AsynchronousBuilding,AutoApplyingImport,WaitingForImport,ImportRequested,Import,Finished } ; FStaticLightingSystem::LightingStage CurrentBuildStage ; FLightmassStatistics LightmassProcessStatistics ; double StartTime ; double ProcessingStartTime ; double WaitForUserAcceptStartTime ; FStaticLightingBuildContext LightingContext ; TSet<FGuid> BuildDataResourcesToKeep ; class FLightmassProcessor* LightmassProcessor ; FStaticLightingManager ; FLightmassProcessor ; } ; # if ! PLATFORM_MAC&& ! PLATFORM_LINUX # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "FDebugStaticLightingVertex()",
    "kind": "Method",
    "detail": "Function (FVector4f Start ; FVector4f End ; bool bHit ; bool bPositive ; } ; struct FDebugStaticLightingVertex {)",
    "insertText": "FDebugStaticLightingVertex()"
  },
  {
    "label": "FDebugStaticLightingVertex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugStaticLightingVertex(const FStaticLightingVertex& InVertex) : VertexNormal((FVector3f)InVertex.WorldTangentZ), VertexPosition((FVector3f)InVertex.WorldPosition)"
  },
  {
    "label": "FDebugLightingOutput()",
    "kind": "Method",
    "detail": "Function (} FVector4f VertexNormal ; FVector4f VertexPosition ; } ; struct FDebugLightingCacheRecord { bool bNearSelectedTexel ; bool bAffectsSelectedTexel ; int32 RecordId ; FDebugStaticLightingVertex Vertex ; float Radius ; } ; struct FDebugPhoton { int32 Id ; FVector4f Position ; FVector4f Direction ; FVector4f Normal ; } ; struct FDebugOctreeNode { FVector4f Center ; FVector4f Extent ; } ; struct FDebugVolumeLightingSample { FVector4f Position ; FLinearColor AverageIncidentRadiance ; } ; const int32 NumTexelCorners = 4 ; struct FDebugLightingOutput { bool bValid ; TArray<FDebugStaticLightingRay> PathRays ; TArray<FDebugStaticLightingRay> ShadowRays ; TArray<FDebugStaticLightingRay> IndirectPhotonPaths ; TArray<int32> SelectedVertexIndices ; TArray<FDebugStaticLightingVertex> Vertices ; TArray<FDebugLightingCacheRecord> CacheRecords ; TArray<FDebugPhoton> DirectPhotons ; TArray<FDebugPhoton> IndirectPhotons ; TArray<FDebugPhoton> IrradiancePhotons ; TArray<FDebugPhoton> GatheredPhotons ; TArray<FDebugPhoton> GatheredImportancePhotons ; TArray<FDebugOctreeNode> GatheredPhotonNodes ; TArray<FDebugVolumeLightingSample> VolumeLightingSamples ; TArray<FDebugStaticLightingRay> PrecomputedVisibilityRays ; bool bDirectPhotonValid ; FDebugPhoton GatheredDirectPhoton ; FVector4f TexelCorners [ NumTexelCorners ] ; bool bCornerValid [ NumTexelCorners ] ; float SampleRadius ;)",
    "insertText": "FDebugLightingOutput() : bValid(false), bDirectPhotonValid(false)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (} } ; # if ! PLATFORM_MAC&& ! PLATFORM_LINUX # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "SetDebugLightmapSample()",
    "kind": "Method",
    "detail": "Function (FDebugLightingOutput GDebugStaticLightingInfo ; void)",
    "insertText": "SetDebugLightmapSample(TArray<UActorComponent*>* Components, UModel* Model, int32 iSurf, FVector ClickLocation)"
  },
  {
    "label": "DrawStaticLightingDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStaticLightingDebugInfo(const FSceneView* View,FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawStaticLightingDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawStaticLightingDebugInfo(const FSceneView* View, FCanvas* Canvas)"
  }
]