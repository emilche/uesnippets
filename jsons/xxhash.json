[
  {
    "label": "XXH32_state_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XXH32_state_s"
  },
  {
    "label": "XXH64_state_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XXH64_state_s"
  },
  {
    "label": "XXH3_state_s",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XXH3_state_s"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__cplusplus)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif #)",
    "insertText": "if(defined(XXH_INLINE_ALL) || defined(XXH_PRIVATE_API)) \\ && !defined(XXH_INLINE_ALL_31684351384) # define XXH_INLINE_ALL_31684351384 # undef XXH_STATIC_LINKING_ONLY # define XXH_STATIC_LINKING_ONLY # undef XXH_PUBLIC_API # if defined(__GNUC__) # define XXH_PUBLIC_API static __inline __attribute__((unused)) # elif defined (__cplusplus) || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) ) # define XXH_PUBLIC_API static inline # elif defined(_MSC_VER) # define XXH_PUBLIC_API static __inline # else # define XXH_PUBLIC_API static # endif # ifdef XXH_NAMESPACE # error \"XXH_INLINE_ALL with XXH_NAMESPACE is not supported\" # endif # define XXH_NAMESPACE XXH_INLINE_ # define XXH_IPREF(Id) XXH_INLINE_ ## Id # define XXH_OK XXH_IPREF(XXH_OK) # define XXH_ERROR XXH_IPREF(XXH_ERROR) # define XXH_errorcode XXH_IPREF(XXH_errorcode) # define XXH32_canonical_t XXH_IPREF(XXH32_canonical_t) # define XXH64_canonical_t XXH_IPREF(XXH64_canonical_t) # define XXH128_canonical_t XXH_IPREF(XXH128_canonical_t) # define XXH32_state_s XXH_IPREF(XXH32_state_s) # define XXH32_state_t XXH_IPREF(XXH32_state_t) # define XXH64_state_s XXH_IPREF(XXH64_state_s) # define XXH64_state_t XXH_IPREF(XXH64_state_t) # define XXH3_state_s XXH_IPREF(XXH3_state_s) # define XXH3_state_t XXH_IPREF(XXH3_state_t) # define XXH128_hash_t XXH_IPREF(XXH128_hash_t) # undef XXHASH_H_5627135585666179 # undef XXHASH_H_STATIC_13879238742 #endif #ifndef XXHASH_H_5627135585666179 #define XXHASH_H_5627135585666179 1 #if !defined(XXH_INLINE_ALL) && !defined(XXH_PRIVATE_API) # if defined(WIN32) && defined(_MSC_VER) && (defined(XXH_IMPORT) || defined(XXH_EXPORT)) # ifdef XXH_EXPORT # define XXH_PUBLIC_API __declspec(dllexport) # elif XXH_IMPORT # define XXH_PUBLIC_API __declspec(dllimport) # endif # else # define XXH_PUBLIC_API # endif #endif #ifdef XXH_NAMESPACE # define XXH_CAT(A,B) A##B # define XXH_NAME2(A,B) XXH_CAT(A,B) # define XXH_versionNumber XXH_NAME2(XXH_NAMESPACE, XXH_versionNumber) # define XXH32 XXH_NAME2(XXH_NAMESPACE, XXH32) # define XXH32_createState XXH_NAME2(XXH_NAMESPACE, XXH32_createState) # define XXH32_freeState XXH_NAME2(XXH_NAMESPACE, XXH32_freeState) # define XXH32_reset XXH_NAME2(XXH_NAMESPACE, XXH32_reset) # define XXH32_update XXH_NAME2(XXH_NAMESPACE, XXH32_update) # define XXH32_digest XXH_NAME2(XXH_NAMESPACE, XXH32_digest) # define XXH32_copyState XXH_NAME2(XXH_NAMESPACE, XXH32_copyState) # define XXH32_canonicalFromHash XXH_NAME2(XXH_NAMESPACE, XXH32_canonicalFromHash) # define XXH32_hashFromCanonical XXH_NAME2(XXH_NAMESPACE, XXH32_hashFromCanonical) # define XXH64 XXH_NAME2(XXH_NAMESPACE, XXH64) # define XXH64_createState XXH_NAME2(XXH_NAMESPACE, XXH64_createState) # define XXH64_freeState XXH_NAME2(XXH_NAMESPACE, XXH64_freeState) # define XXH64_reset XXH_NAME2(XXH_NAMESPACE, XXH64_reset) # define XXH64_update XXH_NAME2(XXH_NAMESPACE, XXH64_update) # define XXH64_digest XXH_NAME2(XXH_NAMESPACE, XXH64_digest) # define XXH64_copyState XXH_NAME2(XXH_NAMESPACE, XXH64_copyState) # define XXH64_canonicalFromHash XXH_NAME2(XXH_NAMESPACE, XXH64_canonicalFromHash) # define XXH64_hashFromCanonical XXH_NAME2(XXH_NAMESPACE, XXH64_hashFromCanonical) # define XXH3_64bits XXH_NAME2(XXH_NAMESPACE, XXH3_64bits) # define XXH3_64bits_withSecret XXH_NAME2(XXH_NAMESPACE, XXH3_64bits_withSecret) # define XXH3_64bits_withSeed XXH_NAME2(XXH_NAMESPACE, XXH3_64bits_withSeed) # define XXH3_createState XXH_NAME2(XXH_NAMESPACE, XXH3_createState) # define XXH3_freeState XXH_NAME2(XXH_NAMESPACE, XXH3_freeState) # define XXH3_copyState XXH_NAME2(XXH_NAMESPACE, XXH3_copyState) # define XXH3_64bits_reset XXH_NAME2(XXH_NAMESPACE, XXH3_64bits_reset) # define XXH3_64bits_reset_withSeed XXH_NAME2(XXH_NAMESPACE, XXH3_64bits_reset_withSeed) # define XXH3_64bits_reset_withSecret XXH_NAME2(XXH_NAMESPACE, XXH3_64bits_reset_withSecret) # define XXH3_64bits_update XXH_NAME2(XXH_NAMESPACE, XXH3_64bits_update) # define XXH3_64bits_digest XXH_NAME2(XXH_NAMESPACE, XXH3_64bits_digest) # define XXH3_generateSecret XXH_NAME2(XXH_NAMESPACE, XXH3_generateSecret) # define XXH128 XXH_NAME2(XXH_NAMESPACE, XXH128) # define XXH3_128bits XXH_NAME2(XXH_NAMESPACE, XXH3_128bits) # define XXH3_128bits_withSeed XXH_NAME2(XXH_NAMESPACE, XXH3_128bits_withSeed) # define XXH3_128bits_withSecret XXH_NAME2(XXH_NAMESPACE, XXH3_128bits_withSecret) # define XXH3_128bits_reset XXH_NAME2(XXH_NAMESPACE, XXH3_128bits_reset) # define XXH3_128bits_reset_withSeed XXH_NAME2(XXH_NAMESPACE, XXH3_128bits_reset_withSeed) # define XXH3_128bits_reset_withSecret XXH_NAME2(XXH_NAMESPACE, XXH3_128bits_reset_withSecret) # define XXH3_128bits_update XXH_NAME2(XXH_NAMESPACE, XXH3_128bits_update) # define XXH3_128bits_digest XXH_NAME2(XXH_NAMESPACE, XXH3_128bits_digest) # define XXH128_isEqual XXH_NAME2(XXH_NAMESPACE, XXH128_isEqual) # define XXH128_cmp XXH_NAME2(XXH_NAMESPACE, XXH128_cmp) # define XXH128_canonicalFromHash XXH_NAME2(XXH_NAMESPACE, XXH128_canonicalFromHash) # define XXH128_hashFromCanonical XXH_NAME2(XXH_NAMESPACE, XXH128_hashFromCanonical) #endif #define XXH_VERSION_MAJOR 0 #define XXH_VERSION_MINOR 8 #define XXH_VERSION_RELEASE 0 #define XXH_VERSION_NUMBER (XXH_VERSION_MAJOR *100*100 + XXH_VERSION_MINOR *100 + XXH_VERSION_RELEASE) XXH_PUBLIC_API unsigned XXH_versionNumber (void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# include<stddef . h> typedef enum { XXH_OK = 0,XXH_ERROR } XXH_errorcode ; # if !)",
    "insertText": "defined(__VMS) \\ && (defined (__cplusplus) \\ || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) ))"
  },
  {
    "label": "XXH32()",
    "kind": "Method",
    "detail": "Function (# else # include<limits . h> # if UINT_MAX = = 0 xFFFFFFFFUL typedef unsigned int XXH32_hash_t ; # else # if ULONG_MAX = = 0 xFFFFFFFFUL typedef unsigned long XXH32_hash_t ; # else # error \" unsupported platform : need a 3 2 - bit type \" # endif # endif # endif XXH32_hash_t)",
    "insertText": "XXH32(const void* input, size_t length, XXH32_hash_t seed)"
  },
  {
    "label": "XXH32_createState()",
    "kind": "Method",
    "detail": "Function (typedef struct XXH32_state_s XXH32_state_t ; XXH32_state_t*)",
    "insertText": "XXH32_createState(void)"
  },
  {
    "label": "XXH32_freeState()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH32_freeState(XXH32_state_t* statePtr)"
  },
  {
    "label": "XXH32_copyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH32_copyState(XXH32_state_t* dst_state, const XXH32_state_t* src_state)"
  },
  {
    "label": "XXH32_reset()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH32_reset(XXH32_state_t* statePtr, XXH32_hash_t seed)"
  },
  {
    "label": "XXH32_update()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH32_update(XXH32_state_t* statePtr, const void* input, size_t length)"
  },
  {
    "label": "XXH32_digest()",
    "kind": "Method",
    "detail": "Function (XXH32_hash_t)",
    "insertText": "XXH32_digest(const XXH32_state_t* statePtr)"
  },
  {
    "label": "XXH32_canonicalFromHash()",
    "kind": "Method",
    "detail": "Function (typedef struct { unsigned char digest [ 4 ] ; } XXH32_canonical_t ; void)",
    "insertText": "XXH32_canonicalFromHash(XXH32_canonical_t* dst, XXH32_hash_t hash)"
  },
  {
    "label": "XXH32_hashFromCanonical()",
    "kind": "Method",
    "detail": "Function (XXH32_hash_t)",
    "insertText": "XXH32_hashFromCanonical(const XXH32_canonical_t* src)"
  },
  {
    "label": "XXH64()",
    "kind": "Method",
    "detail": "Function (# else typedef unsigned long long XXH64_hash_t ; # endif XXH64_hash_t)",
    "insertText": "XXH64(const void* input, size_t length, XXH64_hash_t seed)"
  },
  {
    "label": "XXH64_createState()",
    "kind": "Method",
    "detail": "Function (typedef struct XXH64_state_s XXH64_state_t ; XXH64_state_t*)",
    "insertText": "XXH64_createState(void)"
  },
  {
    "label": "XXH64_freeState()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH64_freeState(XXH64_state_t* statePtr)"
  },
  {
    "label": "XXH64_copyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH64_copyState(XXH64_state_t* dst_state, const XXH64_state_t* src_state)"
  },
  {
    "label": "XXH64_reset()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH64_reset(XXH64_state_t* statePtr, XXH64_hash_t seed)"
  },
  {
    "label": "XXH64_update()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH64_update(XXH64_state_t* statePtr, const void* input, size_t length)"
  },
  {
    "label": "XXH64_digest()",
    "kind": "Method",
    "detail": "Function (XXH64_hash_t)",
    "insertText": "XXH64_digest(const XXH64_state_t* statePtr)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef struct { unsigned char digest [)",
    "insertText": "sizeof(XXH64_hash_t)"
  },
  {
    "label": "XXH64_canonicalFromHash()",
    "kind": "Method",
    "detail": "Function (} XXH64_canonical_t ; void)",
    "insertText": "XXH64_canonicalFromHash(XXH64_canonical_t* dst, XXH64_hash_t hash)"
  },
  {
    "label": "XXH64_hashFromCanonical()",
    "kind": "Method",
    "detail": "Function (XXH64_hash_t)",
    "insertText": "XXH64_hashFromCanonical(const XXH64_canonical_t* src)"
  },
  {
    "label": "XXH3_64bits()",
    "kind": "Method",
    "detail": "Function (XXH64_hash_t)",
    "insertText": "XXH3_64bits(const void* data, size_t len)"
  },
  {
    "label": "XXH3_64bits_withSeed()",
    "kind": "Method",
    "detail": "Function (XXH64_hash_t)",
    "insertText": "XXH3_64bits_withSeed(const void* data, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH3_64bits_withSecret()",
    "kind": "Method",
    "detail": "Function (# define XXH3_SECRET_SIZE_MIN 1 3 6 XXH64_hash_t)",
    "insertText": "XXH3_64bits_withSecret(const void* data, size_t len, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_createState()",
    "kind": "Method",
    "detail": "Function (typedef struct XXH3_state_s XXH3_state_t ; XXH3_state_t*)",
    "insertText": "XXH3_createState(void)"
  },
  {
    "label": "XXH3_freeState()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_freeState(XXH3_state_t* statePtr)"
  },
  {
    "label": "XXH3_copyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_copyState(XXH3_state_t* dst_state, const XXH3_state_t* src_state)"
  },
  {
    "label": "XXH3_64bits_reset()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_64bits_reset(XXH3_state_t* statePtr)"
  },
  {
    "label": "XXH3_64bits_reset_withSeed()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_64bits_reset_withSeed(XXH3_state_t* statePtr, XXH64_hash_t seed)"
  },
  {
    "label": "XXH3_64bits_reset_withSecret()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_64bits_reset_withSecret(XXH3_state_t* statePtr, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_64bits_update()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_64bits_update(XXH3_state_t* statePtr, const void* input, size_t length)"
  },
  {
    "label": "XXH3_64bits_digest()",
    "kind": "Method",
    "detail": "Function (XXH64_hash_t)",
    "insertText": "XXH3_64bits_digest(const XXH3_state_t* statePtr)"
  },
  {
    "label": "XXH3_128bits()",
    "kind": "Method",
    "detail": "Function (typedef struct { XXH64_hash_t low64 ; XXH64_hash_t high64 ; } XXH128_hash_t ; XXH128_hash_t)",
    "insertText": "XXH3_128bits(const void* data, size_t len)"
  },
  {
    "label": "XXH3_128bits_withSeed()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t)",
    "insertText": "XXH3_128bits_withSeed(const void* data, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH3_128bits_withSecret()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t)",
    "insertText": "XXH3_128bits_withSecret(const void* data, size_t len, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_128bits_reset()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_128bits_reset(XXH3_state_t* statePtr)"
  },
  {
    "label": "XXH3_128bits_reset_withSeed()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_128bits_reset_withSeed(XXH3_state_t* statePtr, XXH64_hash_t seed)"
  },
  {
    "label": "XXH3_128bits_reset_withSecret()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_128bits_reset_withSecret(XXH3_state_t* statePtr, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_128bits_update()",
    "kind": "Method",
    "detail": "Function (XXH_errorcode)",
    "insertText": "XXH3_128bits_update(XXH3_state_t* statePtr, const void* input, size_t length)"
  },
  {
    "label": "XXH3_128bits_digest()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t)",
    "insertText": "XXH3_128bits_digest(const XXH3_state_t* statePtr)"
  },
  {
    "label": "XXH128_isEqual()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "XXH128_isEqual(XXH128_hash_t h1, XXH128_hash_t h2)"
  },
  {
    "label": "XXH128_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "XXH128_cmp(const void* h128_1, const void* h128_2)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef struct { unsigned char digest [)",
    "insertText": "sizeof(XXH128_hash_t)"
  },
  {
    "label": "XXH128_canonicalFromHash()",
    "kind": "Method",
    "detail": "Function (} XXH128_canonical_t ; void)",
    "insertText": "XXH128_canonicalFromHash(XXH128_canonical_t* dst, XXH128_hash_t hash)"
  },
  {
    "label": "XXH128_hashFromCanonical()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t)",
    "insertText": "XXH128_hashFromCanonical(const XXH128_canonical_t* src)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if)",
    "insertText": "defined(XXH_STATIC_LINKING_ONLY) && !defined(XXHASH_H_STATIC_13879238742)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (XXH32_hash_t total_len_32 ; XXH32_hash_t large_len ; XXH32_hash_t v1 ; XXH32_hash_t v2 ; XXH32_hash_t v3 ; XXH32_hash_t v4 ; XXH32_hash_t mem32 [ 4 ] ; XXH32_hash_t memsize ; XXH32_hash_t reserved ; } ; # ifndef XXH_NO_LONG_LONG struct XXH64_state_s { XXH64_hash_t total_len ; XXH64_hash_t v1 ; XXH64_hash_t v2 ; XXH64_hash_t v3 ; XXH64_hash_t v4 ; XXH64_hash_t mem64 [ 4 ] ; XXH32_hash_t memsize ; XXH32_hash_t reserved32 ; XXH64_hash_t reserved64 ; } ; # if)",
    "insertText": "defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L) # include <stdalign.h> # define XXH_ALIGN(n) alignas(n) #elif defined(__GNUC__) # define XXH_ALIGN(n) __attribute__ ((aligned(n))) #elif defined(_MSC_VER) # define XXH_ALIGN(n) __declspec(align(n)) #else # define XXH_ALIGN(n) #endif #if !(defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L)) \\ && defined(__GNUC__) # define XXH_ALIGN_MEMBER(align, type) type XXH_ALIGN(align) #else # define XXH_ALIGN_MEMBER(align, type) XXH_ALIGN(align)"
  },
  {
    "label": "XXH_ALIGN_MEMBER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN_MEMBER(64, XXH64_hash_t acc[8])"
  },
  {
    "label": "XXH_ALIGN_MEMBER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN_MEMBER(64, unsigned char customSecret[XXH3_SECRET_DEFAULT_SIZE])"
  },
  {
    "label": "XXH_ALIGN_MEMBER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN_MEMBER(64, unsigned char buffer[XXH3_INTERNALBUFFER_SIZE])"
  },
  {
    "label": "XXH3_INITSTATE()",
    "kind": "Method",
    "detail": "Function (XXH32_hash_t bufferedSize ; XXH32_hash_t reserved32 ; size_t nbStripesSoFar ; XXH64_hash_t totalLen ; size_t nbStripesPerBlock ; size_t secretLimit ; XXH64_hash_t seed ; XXH64_hash_t reserved64 ; const unsigned char* extSecret ; } ; # undef XXH_ALIGN_MEMBER # define)",
    "insertText": "XXH3_INITSTATE(XXH3_state_ptr)"
  },
  {
    "label": "XXH3_generateSecret()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "XXH3_generateSecret(void* secretBuffer, const void* customSeed, size_t customSeedSize)"
  },
  {
    "label": "XXH128()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t)",
    "insertText": "XXH128(const void* data, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(XXH_INLINE_ALL) || defined(XXH_PRIVATE_API) # define XXH_IMPLEMENTATION #endif #endif #if ( defined(XXH_INLINE_ALL) || defined(XXH_PRIVATE_API) \\ || defined(XXH_IMPLEMENTATION) ) && !defined(XXH_IMPLEM_13a8737387) # define XXH_IMPLEM_13a8737387 #ifndef XXH_FORCE_MEMORY_ACCESS # if !defined(__clang__) && defined(__GNUC__) && defined(__ARM_FEATURE_UNALIGNED) && defined(__ARM_ARCH) && (__ARM_ARCH == 6) # define XXH_FORCE_MEMORY_ACCESS 2 # elif !defined(__clang__) && ((defined(__INTEL_COMPILER) && !defined(_WIN32)) || \\ (defined(__GNUC__) && (defined(__ARM_ARCH) && __ARM_ARCH >= 7))) # define XXH_FORCE_MEMORY_ACCESS 1 # endif #endif #ifndef XXH_ACCEPT_NULL_INPUT_POINTER # define XXH_ACCEPT_NULL_INPUT_POINTER 0 #endif #ifndef XXH_FORCE_ALIGN_CHECK # if defined(__i386) || defined(__x86_64__) || defined(__aarch64__) \\ || defined(_M_IX86) || defined(_M_X64) || defined(_M_ARM64) # define XXH_FORCE_ALIGN_CHECK 0 # else # define XXH_FORCE_ALIGN_CHECK 1 # endif #endif #ifndef XXH_NO_INLINE_HINTS # if defined(__OPTIMIZE_SIZE__) \\ || defined(__NO_INLINE__) # define XXH_NO_INLINE_HINTS 1 # else # define XXH_NO_INLINE_HINTS 0 # endif #endif #ifndef XXH_REROLL # if defined(__OPTIMIZE_SIZE__) # define XXH_REROLL 1 # else # define XXH_REROLL 0 # endif #endif #include <stdlib.h> static void* XXH_malloc(size_t s)"
  },
  {
    "label": "XXH_free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "XXH_free(void* p)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(p)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (} # include<string . h> void*)",
    "insertText": "XXH_memcpy(void* dest, const void* src, size_t size)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (} # include<limits . h> # ifdef _MSC_VER # pragma)",
    "insertText": "warning(disable : 4127) #endif #if XXH_NO_INLINE_HINTS # if defined(__GNUC__) # define XXH_FORCE_INLINE static __attribute__((unused)) # else # define XXH_FORCE_INLINE static # endif # define XXH_NO_INLINE static #elif defined(_MSC_VER) # define XXH_FORCE_INLINE static __forceinline # define XXH_NO_INLINE static __declspec(noinline) #elif defined(__GNUC__) # define XXH_FORCE_INLINE static __inline__ __attribute__((always_inline, unused)) # define XXH_NO_INLINE static __attribute__((noinline)) #elif defined (__cplusplus) \\ || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) # define XXH_FORCE_INLINE static inline # define XXH_NO_INLINE static #else # define XXH_FORCE_INLINE static # define XXH_NO_INLINE static #endif #ifndef XXH_DEBUGLEVEL # ifdef DEBUGLEVEL # define XXH_DEBUGLEVEL DEBUGLEVEL # else # define XXH_DEBUGLEVEL 0 # endif #endif #if (XXH_DEBUGLEVEL>=1) # include <assert.h> # define XXH_ASSERT(c) assert(c) #else # define XXH_ASSERT(c) ((void)0) #endif #define XXH_STATIC_ASSERT(c)"
  },
  {
    "label": "XXH_sa()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "XXH_sa(int)(!!(c))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #if !defined (__VMS) \\ && (defined (__cplusplus) \\ || (defined (__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else typedef unsigned char xxh_u8 ; # endif typedef XXH32_hash_t xxh_u32 ; # ifdef XXH_OLD_NAMES # define BYTE xxh_u8 # define U8 xxh_u8 # define U32 xxh_u32 # endif #)",
    "insertText": "if(defined(XXH_FORCE_MEMORY_ACCESS) && (XXH_FORCE_MEMORY_ACCESS==3)) #elif (defined(XXH_FORCE_MEMORY_ACCESS) && (XXH_FORCE_MEMORY_ACCESS==2)) static xxh_u32 XXH_read32(const void* memPtr)"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "elif(defined(XXH_FORCE_MEMORY_ACCESS) && (XXH_FORCE_MEMORY_ACCESS==1))"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (xxh_u32 u32 ; })",
    "insertText": "__attribute__((packed))"
  },
  {
    "label": "XXH_read32()",
    "kind": "Method",
    "detail": "Function (# endif xxh_u32)",
    "insertText": "XXH_read32(const void* ptr)"
  },
  {
    "label": "XXH_read32()",
    "kind": "Method",
    "detail": "Function (} # else xxh_u32)",
    "insertText": "XXH_read32(const void* memPtr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (xxh_u32 val ;)",
    "insertText": "memcpy(&val, memPtr, sizeof(val))"
  },
  {
    "label": "XXH_isLittleEndian()",
    "kind": "Method",
    "detail": "Function (const union { xxh_u32 u ; xxh_u8 c [ 4 ] ; } one = { 1 } ; return one . c [ 0 ] ; } # define XXH_CPU_LITTLE_ENDIAN)",
    "insertText": "XXH_isLittleEndian() # endif #endif #define XXH_GCC_VERSION (__GNUC__ * 100 + __GNUC_MINOR__) #ifdef __has_builtin # define XXH_HAS_BUILTIN(x) __has_builtin(x) #else # define XXH_HAS_BUILTIN(x) 0 #endif #if !defined(NO_CLANG_BUILTIN) && XXH_HAS_BUILTIN(__builtin_rotateleft32) \\ && XXH_HAS_BUILTIN(__builtin_rotateleft64) # define XXH_rotl32 __builtin_rotateleft32 # define XXH_rotl64 __builtin_rotateleft64 #elif defined(_MSC_VER) # define XXH_rotl32(x,r) _rotl(x,r) # define XXH_rotl64(x,r) _rotl64(x,r) #else # define XXH_rotl32(x,r) (((x) << (r)) | ((x) >> (32 - (r)))) # define XXH_rotl64(x,r) (((x) << (r)) | ((x) >> (64 - (r)))) #endif #if defined(_MSC_VER) # define XXH_swap32 _byteswap_ulong #elif XXH_GCC_VERSION >= 403 # define XXH_swap32 __builtin_bswap32 #else static xxh_u32 XXH_swap32 (xxh_u32 x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif typedef enum { XXH_aligned,XXH_unaligned } XXH_alignment ; #)",
    "insertText": "if(defined(XXH_FORCE_MEMORY_ACCESS) && (XXH_FORCE_MEMORY_ACCESS==3)) XXH_FORCE_INLINE xxh_u32 XXH_readLE32(const void* memPtr)"
  },
  {
    "label": "bytePtr()",
    "kind": "Method",
    "detail": "Function (const xxh_u8*)",
    "insertText": "bytePtr(const xxh_u8 *)"
  },
  {
    "label": "XXH_readBE32()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE xxh_u32)",
    "insertText": "XXH_readBE32(const void* memPtr)"
  },
  {
    "label": "XXH_readLE32()",
    "kind": "Method",
    "detail": "Function (} # else XXH_FORCE_INLINE xxh_u32)",
    "insertText": "XXH_readLE32(const void* ptr)"
  },
  {
    "label": "XXH_readBE32()",
    "kind": "Method",
    "detail": "Function (} xxh_u32)",
    "insertText": "XXH_readBE32(const void* ptr)"
  },
  {
    "label": "XXH_readLE32_align()",
    "kind": "Method",
    "detail": "Function (} # endif XXH_FORCE_INLINE xxh_u32)",
    "insertText": "XXH_readLE32_align(const void* ptr, XXH_alignment align)"
  },
  {
    "label": "XXH_CPU_LITTLE_ENDIAN()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "XXH_CPU_LITTLE_ENDIAN(const xxh_u32*)ptr : XXH_swap32(*(const xxh_u32*)ptr)"
  },
  {
    "label": "XXH_versionNumber()",
    "kind": "Method",
    "detail": "Function (} } unsigned)",
    "insertText": "XXH_versionNumber(void)"
  },
  {
    "label": "XXH_rotl32()",
    "kind": "Method",
    "detail": "Function (acc + = input* XXH_PRIME32_2 ; acc =)",
    "insertText": "XXH_rotl32(acc, 13)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (acc* = XXH_PRIME32_1 ; # if)",
    "insertText": "defined(__GNUC__) && defined(__SSE4_1__) && !defined(XXH_ENABLE_AUTOVECTORIZE) __asm__(\"\" : \"+r\" (acc))"
  },
  {
    "label": "XXH32_avalanche()",
    "kind": "Method",
    "detail": "Function (# endif return acc ; } xxh_u32)",
    "insertText": "XXH32_avalanche(xxh_u32 h32)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (h32 ^ = h32>> 1 5 ; h32* = XXH_PRIME32_2 ; h32 ^ = h32>> 1 3 ; h32* = XXH_PRIME32_3 ; h32 ^ = h32>> 1 6 ;)",
    "insertText": "return(h32)"
  },
  {
    "label": "XXH_get32bits()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "XXH_get32bits(p) XXH_readLE32_align(p, align) static xxh_u32 XXH32_finalize(xxh_u32 h32, const xxh_u8* ptr, size_t len, XXH_alignment align)"
  },
  {
    "label": "h32()",
    "kind": "Method",
    "detail": "Function (# define XXH_PROCESS1 do { \\)",
    "insertText": "h32(*ptr++)"
  },
  {
    "label": "XXH_rotl32()",
    "kind": "Method",
    "detail": "Function (\\ h32 =)",
    "insertText": "XXH_rotl32(h32, 11)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0)"
  },
  {
    "label": "XXH_get32bits()",
    "kind": "Method",
    "detail": "Function (\\ h32 + =)",
    "insertText": "XXH_get32bits(ptr)"
  },
  {
    "label": "XXH_rotl32()",
    "kind": "Method",
    "detail": "Function (\\ ptr + = 4 ; \\ h32 =)",
    "insertText": "XXH_rotl32(h32, 17)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) if (XXH_REROLL)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (len& = 1 5 ;)",
    "insertText": "while(len >= 4)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (XXH_PROCESS4 ; len - = 4 ; })",
    "insertText": "while(len > 0)"
  },
  {
    "label": "XXH32_avalanche()",
    "kind": "Method",
    "detail": "Function (XXH_PROCESS1 ; - - len ; } return)",
    "insertText": "XXH32_avalanche(h32)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "switch(len&15)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XXH_ASSERT(0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* bEnd = input + len ; xxh_u32 h32 ; # if)",
    "insertText": "defined(XXH_ACCEPT_NULL_INPUT_POINTER) && (XXH_ACCEPT_NULL_INPUT_POINTER>=1) if (input==NULL)"
  },
  {
    "label": "input()",
    "kind": "Method",
    "detail": "Function (len = 0 ; bEnd =)",
    "insertText": "input(const xxh_u8*)(size_t)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "if(len>=16)"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const limit = bEnd - 1 5 ; xxh_u32 v1 = seed + XXH_PRIME32_1 + XXH_PRIME32_2 ; xxh_u32 v2 = seed + XXH_PRIME32_2 ; xxh_u32 v3 = seed + 0 ; xxh_u32 v4 = seed - XXH_PRIME32_1 ; do { v1 =)",
    "insertText": "XXH32_round(v1, XXH_get32bits(input))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (input + = 4 ; v2 =)",
    "insertText": "XXH32_round(v2, XXH_get32bits(input))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (input + = 4 ; v3 =)",
    "insertText": "XXH32_round(v3, XXH_get32bits(input))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (input + = 4 ; v4 =)",
    "insertText": "XXH32_round(v4, XXH_get32bits(input))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (input + = 4 ; })",
    "insertText": "while(input < limit)"
  },
  {
    "label": "XXH_rotl32()",
    "kind": "Method",
    "detail": "Function (h32 =)",
    "insertText": "XXH_rotl32(v1, 1) + XXH_rotl32(v2, 7) + XXH_rotl32(v3, 12) + XXH_rotl32(v4, 18)"
  },
  {
    "label": "h32()",
    "kind": "Method",
    "detail": "Function (} else { h32 = seed + XXH_PRIME32_5 ; })",
    "insertText": "h32(xxh_u32)"
  },
  {
    "label": "XXH32()",
    "kind": "Method",
    "detail": "Function (} XXH32_hash_t)",
    "insertText": "XXH32(const void* input, size_t len, XXH32_hash_t seed)"
  },
  {
    "label": "XXH32_reset()",
    "kind": "Method",
    "detail": "Function (# if 0 XXH32_state_t state ;)",
    "insertText": "XXH32_reset(&state, seed)"
  },
  {
    "label": "XXH32_update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH32_update(&state, (const xxh_u8*)input, len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(XXH_FORCE_ALIGN_CHECK)"
  },
  {
    "label": "XXH32_endian_align()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "XXH32_endian_align((const xxh_u8*)input, len, seed, XXH_unaligned)"
  },
  {
    "label": "XXH_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_free(statePtr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dstState, srcState, sizeof(*dstState))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (XXH32_state_t state ;)",
    "insertText": "memset(&state, 0, sizeof(state))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (state . v1 = seed + XXH_PRIME32_1 + XXH_PRIME32_2 ; state . v2 = seed + XXH_PRIME32_2 ; state . v3 = seed + 0 ; state . v4 = seed - XXH_PRIME32_1 ;)",
    "insertText": "memcpy(statePtr, &state, sizeof(state) - sizeof(state.reserved))"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (# else return XXH_ERROR ; # endif { const xxh_u8*)",
    "insertText": "p(const xxh_u8*)"
  },
  {
    "label": "total_len_32()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const bEnd = p + len ; state ->)",
    "insertText": "total_len_32(XXH32_hash_t)"
  },
  {
    "label": "large_len()",
    "kind": "Method",
    "detail": "Function (state ->)",
    "insertText": "large_len(XXH32_hash_t)((len>=16) | (state->total_len_32>=16))"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy((xxh_u8*)(state->mem32) + state->memsize, input, len)"
  },
  {
    "label": "memsize()",
    "kind": "Method",
    "detail": "Function (state ->)",
    "insertText": "memsize(XXH32_hash_t)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy((xxh_u8*)(state->mem32) + state->memsize, input, 16-state->memsize)"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function ({ const xxh_u32* p32 = state -> mem32 ; state -> v1 =)",
    "insertText": "XXH32_round(state->v1, XXH_readLE32(p32))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (p32 + + ; state -> v2 =)",
    "insertText": "XXH32_round(state->v2, XXH_readLE32(p32))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (p32 + + ; state -> v3 =)",
    "insertText": "XXH32_round(state->v3, XXH_readLE32(p32))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (p32 + + ; state -> v4 =)",
    "insertText": "XXH32_round(state->v4, XXH_readLE32(p32))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} p + = 1 6 - state -> memsize ; state -> memsize = 0 ; })",
    "insertText": "if(p <= bEnd-16)"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const limit = bEnd - 1 6 ; xxh_u32 v1 = state -> v1 ; xxh_u32 v2 = state -> v2 ; xxh_u32 v3 = state -> v3 ; xxh_u32 v4 = state -> v4 ; do { v1 =)",
    "insertText": "XXH32_round(v1, XXH_readLE32(p))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (p + = 4 ; v2 =)",
    "insertText": "XXH32_round(v2, XXH_readLE32(p))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (p + = 4 ; v3 =)",
    "insertText": "XXH32_round(v3, XXH_readLE32(p))"
  },
  {
    "label": "XXH32_round()",
    "kind": "Method",
    "detail": "Function (p + = 4 ; v4 =)",
    "insertText": "XXH32_round(v4, XXH_readLE32(p))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (p + = 4 ; })",
    "insertText": "while(p<=limit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state -> v1 = v1 ; state -> v2 = v2 ; state -> v3 = v3 ; state -> v4 = v4 ; })",
    "insertText": "if(p < bEnd)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy(state->mem32, p, (size_t)(bEnd-p))"
  },
  {
    "label": "memsize()",
    "kind": "Method",
    "detail": "Function (state ->)",
    "insertText": "memsize(unsigned)(bEnd-p)"
  },
  {
    "label": "XXH32_digest()",
    "kind": "Method",
    "detail": "Function (} } return XXH_OK ; } XXH32_hash_t)",
    "insertText": "XXH32_digest(const XXH32_state_t* state)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (xxh_u32 h32 ;)",
    "insertText": "if(state->large_len)"
  },
  {
    "label": "XXH_rotl32()",
    "kind": "Method",
    "detail": "Function (h32 =)",
    "insertText": "XXH_rotl32(state->v1, 1) + XXH_rotl32(state->v2, 7) + XXH_rotl32(state->v3, 12) + XXH_rotl32(state->v4, 18)"
  },
  {
    "label": "XXH32_finalize()",
    "kind": "Method",
    "detail": "Function (} else { h32 = state -> v3 + XXH_PRIME32_5 ; } h32 + = state -> total_len_32 ; return)",
    "insertText": "XXH32_finalize(h32, (const xxh_u8*)state->mem32, state->memsize, XXH_aligned)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(sizeof(XXH32_canonical_t) == sizeof(XXH32_hash_t))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst, &hash, sizeof(*dst))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # ifndef XXH_NO_LONG_LONG typedef XXH64_hash_t xxh_u64 ; # ifdef XXH_OLD_NAMES # define U64 xxh_u64 # endif # ifndef XXH_REROLL_XXH64 #)",
    "insertText": "if(defined(__ILP32__) || defined(_ILP32)) \\ || !(defined(__x86_64__) || defined(_M_X64) || defined(_M_AMD64) \\ || defined(_M_ARM64) || defined(__aarch64__) || defined(__arm64__) \\ || defined(__PPC64__) || defined(__PPC64LE__) || defined(__ppc64__) || defined(__powerpc64__) \\ || defined(__mips64__) || defined(__mips64)) \\ || (!defined(SIZE_MAX) || SIZE_MAX < ULLONG_MAX) # define XXH_REROLL_XXH64 1 # else # define XXH_REROLL_XXH64 0 # endif #endif #if (defined(XXH_FORCE_MEMORY_ACCESS) && (XXH_FORCE_MEMORY_ACCESS==3)) #elif (defined(XXH_FORCE_MEMORY_ACCESS) && (XXH_FORCE_MEMORY_ACCESS==2)) static xxh_u64 XXH_read64(const void* memPtr)"
  },
  {
    "label": "XXH_read64()",
    "kind": "Method",
    "detail": "Function (# endif xxh_u64)",
    "insertText": "XXH_read64(const void* ptr)"
  },
  {
    "label": "XXH_read64()",
    "kind": "Method",
    "detail": "Function (} # else xxh_u64)",
    "insertText": "XXH_read64(const void* memPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif #)",
    "insertText": "if(defined(XXH_FORCE_MEMORY_ACCESS) && (XXH_FORCE_MEMORY_ACCESS==3)) XXH_FORCE_INLINE xxh_u64 XXH_readLE64(const void* memPtr)"
  },
  {
    "label": "XXH_readBE64()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE xxh_u64)",
    "insertText": "XXH_readBE64(const void* memPtr)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (} # else XXH_FORCE_INLINE xxh_u64)",
    "insertText": "XXH_readLE64(const void* ptr)"
  },
  {
    "label": "XXH_readBE64()",
    "kind": "Method",
    "detail": "Function (} xxh_u64)",
    "insertText": "XXH_readBE64(const void* ptr)"
  },
  {
    "label": "XXH_readLE64_align()",
    "kind": "Method",
    "detail": "Function (} # endif XXH_FORCE_INLINE xxh_u64)",
    "insertText": "XXH_readLE64_align(const void* ptr, XXH_alignment align)"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (} const xxh_u64 XXH_PRIME64_1 = 0 x9E3779B185EBCA87ULL ; const xxh_u64 XXH_PRIME64_2 = 0 xC2B2AE3D27D4EB4FULL ; const xxh_u64 XXH_PRIME64_3 = 0 x165667B19E3779F9ULL ; const xxh_u64 XXH_PRIME64_4 = 0 x85EBCA77C2B2AE63ULL ; const xxh_u64 XXH_PRIME64_5 = 0 x27D4EB2F165667C5ULL ; # ifdef XXH_OLD_NAMES # define PRIME64_1 XXH_PRIME64_1 # define PRIME64_2 XXH_PRIME64_2 # define PRIME64_3 XXH_PRIME64_3 # define PRIME64_4 XXH_PRIME64_4 # define PRIME64_5 XXH_PRIME64_5 # endif xxh_u64)",
    "insertText": "XXH64_round(xxh_u64 acc, xxh_u64 input)"
  },
  {
    "label": "XXH_rotl64()",
    "kind": "Method",
    "detail": "Function (acc + = input* XXH_PRIME64_2 ; acc =)",
    "insertText": "XXH_rotl64(acc, 31)"
  },
  {
    "label": "XXH64_mergeRound()",
    "kind": "Method",
    "detail": "Function (acc* = XXH_PRIME64_1 ; return acc ; } xxh_u64)",
    "insertText": "XXH64_mergeRound(xxh_u64 acc, xxh_u64 val)"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (val =)",
    "insertText": "XXH64_round(0, val)"
  },
  {
    "label": "XXH64_avalanche()",
    "kind": "Method",
    "detail": "Function (acc ^ = val ; acc = acc* XXH_PRIME64_1 + XXH_PRIME64_4 ; return acc ; } xxh_u64)",
    "insertText": "XXH64_avalanche(xxh_u64 h64)"
  },
  {
    "label": "XXH_get64bits()",
    "kind": "Method",
    "detail": "Function (h64 ^ = h64>> 3 3 ; h64* = XXH_PRIME64_2 ; h64 ^ = h64>> 2 9 ; h64* = XXH_PRIME64_3 ; h64 ^ = h64>> 3 2 ; return h64 ; } # define)",
    "insertText": "XXH_get64bits(p) XXH_readLE64_align(p, align) static xxh_u64 XXH64_finalize(xxh_u64 h64, const xxh_u8* ptr, size_t len, XXH_alignment align)"
  },
  {
    "label": "h64()",
    "kind": "Method",
    "detail": "Function (# define XXH_PROCESS1_64 do { \\)",
    "insertText": "h64(*ptr++)"
  },
  {
    "label": "XXH_rotl64()",
    "kind": "Method",
    "detail": "Function (\\ h64 =)",
    "insertText": "XXH_rotl64(h64, 11)"
  },
  {
    "label": "h64()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "h64(xxh_u64)(XXH_get32bits(ptr))"
  },
  {
    "label": "XXH_rotl64()",
    "kind": "Method",
    "detail": "Function (\\ ptr + = 4 ; \\ h64 =)",
    "insertText": "XXH_rotl64(h64, 23)"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (\\ xxh_u64 const k1 =)",
    "insertText": "XXH64_round(0, XXH_get64bits(ptr))"
  },
  {
    "label": "XXH_rotl64()",
    "kind": "Method",
    "detail": "Function (\\ ptr + = 8 ; \\ h64 ^ = k1 ; \\ h64 =)",
    "insertText": "XXH_rotl64(h64,27)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) if (XXH_REROLL || XXH_REROLL_XXH64)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (len& = 3 1 ;)",
    "insertText": "while(len >= 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (XXH_PROCESS8_64 ; len - = 8 ; })",
    "insertText": "if(len >= 4)"
  },
  {
    "label": "XXH64_avalanche()",
    "kind": "Method",
    "detail": "Function (XXH_PROCESS1_64 ; - - len ; } return)",
    "insertText": "XXH64_avalanche(h64)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "switch(len & 31)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "if(len>=32)"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const limit = bEnd - 3 2 ; xxh_u64 v1 = seed + XXH_PRIME64_1 + XXH_PRIME64_2 ; xxh_u64 v2 = seed + XXH_PRIME64_2 ; xxh_u64 v3 = seed + 0 ; xxh_u64 v4 = seed - XXH_PRIME64_1 ; do { v1 =)",
    "insertText": "XXH64_round(v1, XXH_get64bits(input))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (input + = 8 ; v2 =)",
    "insertText": "XXH64_round(v2, XXH_get64bits(input))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (input + = 8 ; v3 =)",
    "insertText": "XXH64_round(v3, XXH_get64bits(input))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (input + = 8 ; v4 =)",
    "insertText": "XXH64_round(v4, XXH_get64bits(input))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (input + = 8 ; })",
    "insertText": "while(input<=limit)"
  },
  {
    "label": "XXH_rotl64()",
    "kind": "Method",
    "detail": "Function (h64 =)",
    "insertText": "XXH_rotl64(v1, 1) + XXH_rotl64(v2, 7) + XXH_rotl64(v3, 12) + XXH_rotl64(v4, 18)"
  },
  {
    "label": "XXH64_mergeRound()",
    "kind": "Method",
    "detail": "Function (h64 =)",
    "insertText": "XXH64_mergeRound(h64, v1)"
  },
  {
    "label": "XXH64_mergeRound()",
    "kind": "Method",
    "detail": "Function (h64 =)",
    "insertText": "XXH64_mergeRound(h64, v2)"
  },
  {
    "label": "XXH64_mergeRound()",
    "kind": "Method",
    "detail": "Function (h64 =)",
    "insertText": "XXH64_mergeRound(h64, v3)"
  },
  {
    "label": "XXH64_mergeRound()",
    "kind": "Method",
    "detail": "Function (h64 =)",
    "insertText": "XXH64_mergeRound(h64, v4)"
  },
  {
    "label": "h64()",
    "kind": "Method",
    "detail": "Function (} else { h64 = seed + XXH_PRIME64_5 ; })",
    "insertText": "h64(xxh_u64)"
  },
  {
    "label": "XXH64()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH64(const void* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH64_reset()",
    "kind": "Method",
    "detail": "Function (# if 0 XXH64_state_t state ;)",
    "insertText": "XXH64_reset(&state, seed)"
  },
  {
    "label": "XXH64_update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH64_update(&state, (const xxh_u8*)input, len)"
  },
  {
    "label": "XXH64_endian_align()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "XXH64_endian_align((const xxh_u8*)input, len, seed, XXH_unaligned)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (state . v1 = seed + XXH_PRIME64_1 + XXH_PRIME64_2 ; state . v2 = seed + XXH_PRIME64_2 ; state . v3 = seed + 0 ; state . v4 = seed - XXH_PRIME64_1 ;)",
    "insertText": "memcpy(statePtr, &state, sizeof(state) - sizeof(state.reserved64))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const bEnd = p + len ; state -> total_len + = len ;)",
    "insertText": "if(state->memsize + len < 32)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy(((xxh_u8*)state->mem64) + state->memsize, input, len)"
  },
  {
    "label": "memsize()",
    "kind": "Method",
    "detail": "Function (state ->)",
    "insertText": "memsize(xxh_u32)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy(((xxh_u8*)state->mem64) + state->memsize, input, 32-state->memsize)"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (state -> v1 =)",
    "insertText": "XXH64_round(state->v1, XXH_readLE64(state->mem64+0))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (state -> v2 =)",
    "insertText": "XXH64_round(state->v2, XXH_readLE64(state->mem64+1))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (state -> v3 =)",
    "insertText": "XXH64_round(state->v3, XXH_readLE64(state->mem64+2))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (state -> v4 =)",
    "insertText": "XXH64_round(state->v4, XXH_readLE64(state->mem64+3))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p + = 3 2 - state -> memsize ; state -> memsize = 0 ; })",
    "insertText": "if(p+32 <= bEnd)"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const limit = bEnd - 3 2 ; xxh_u64 v1 = state -> v1 ; xxh_u64 v2 = state -> v2 ; xxh_u64 v3 = state -> v3 ; xxh_u64 v4 = state -> v4 ; do { v1 =)",
    "insertText": "XXH64_round(v1, XXH_readLE64(p))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (p + = 8 ; v2 =)",
    "insertText": "XXH64_round(v2, XXH_readLE64(p))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (p + = 8 ; v3 =)",
    "insertText": "XXH64_round(v3, XXH_readLE64(p))"
  },
  {
    "label": "XXH64_round()",
    "kind": "Method",
    "detail": "Function (p + = 8 ; v4 =)",
    "insertText": "XXH64_round(v4, XXH_readLE64(p))"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy(state->mem64, p, (size_t)(bEnd-p))"
  },
  {
    "label": "XXH64_digest()",
    "kind": "Method",
    "detail": "Function (} } return XXH_OK ; } XXH64_hash_t)",
    "insertText": "XXH64_digest(const XXH64_state_t* state)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (xxh_u64 h64 ;)",
    "insertText": "if(state->total_len >= 32)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(sizeof(XXH64_canonical_t) == sizeof(XXH64_hash_t))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L # define XXH_RESTRICT restrict #else # define XXH_RESTRICT #endif #if (defined(__GNUC__) && (__GNUC__ >= 3)) \\ || (defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= 800)) \\ || defined(__clang__) # define XXH_likely(x) __builtin_expect(x, 1) # define XXH_unlikely(x) __builtin_expect(x, 0) #else # define XXH_likely(x) (x) # define XXH_unlikely(x) (x) #endif #if defined(__GNUC__) # if defined(__AVX2__) # include <immintrin.h> # elif defined(__SSE2__) # include <emmintrin.h> # elif defined(__ARM_NEON__) || defined(__ARM_NEON) # define inline __inline__ # include <arm_neon.h> # undef inline # endif #elif defined(_MSC_VER) # include <intrin.h> #endif #if defined(__thumb__) && !defined(__thumb2__) && defined(__ARM_ARCH_ISA_ARM) # warning \"XXH3 is highly inefficient without ARM or Thumb-2.\" #endif #define XXH_SCALAR 0 #define XXH_SSE2 1 #define XXH_AVX2 2 #define XXH_AVX512 3 #define XXH_NEON 4 #define XXH_VSX 5 #ifndef XXH_VECTOR # if defined(__AVX512F__) # define XXH_VECTOR XXH_AVX512 # elif defined(__AVX2__) # define XXH_VECTOR XXH_AVX2 # elif defined(__SSE2__) || defined(_M_AMD64) || defined(_M_X64) || (defined(_M_IX86_FP) && (_M_IX86_FP == 2)) # define XXH_VECTOR XXH_SSE2 # elif defined(__GNUC__) \\ && (defined(__ARM_NEON__) || defined(__ARM_NEON)) \\ && (defined(__LITTLE_ENDIAN__) \\ || (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)) # define XXH_VECTOR XXH_NEON # elif (defined(__PPC64__) && defined(__POWER8_VECTOR__)) \\ || (defined(__s390x__) && defined(__VEC__)) \\ && defined(__GNUC__) # define XXH_VECTOR XXH_VSX # else # define XXH_VECTOR XXH_SCALAR # endif #endif #ifndef XXH_ACC_ALIGN # if defined(XXH_X86DISPATCH) # define XXH_ACC_ALIGN 64 # elif XXH_VECTOR == XXH_SCALAR # define XXH_ACC_ALIGN 8 # elif XXH_VECTOR == XXH_SSE2 # define XXH_ACC_ALIGN 16 # elif XXH_VECTOR == XXH_AVX2 # define XXH_ACC_ALIGN 32 # elif XXH_VECTOR == XXH_NEON # define XXH_ACC_ALIGN 16 # elif XXH_VECTOR == XXH_VSX # define XXH_ACC_ALIGN 16 # elif XXH_VECTOR == XXH_AVX512 # define XXH_ACC_ALIGN 64 # endif #endif #if defined(XXH_X86DISPATCH) || XXH_VECTOR == XXH_SSE2 \\ || XXH_VECTOR == XXH_AVX2 || XXH_VECTOR == XXH_AVX512 # define XXH_SEC_ALIGN XXH_ACC_ALIGN #else # define XXH_SEC_ALIGN 8 #endif #if XXH_VECTOR == XXH_AVX2 \\ && defined(__GNUC__) && !defined(__clang__) \\ && defined(__OPTIMIZE__) && !defined(__OPTIMIZE_SIZE__) # pragma GCC push_options # pragma GCC optimize(\"-O2\") #endif #if XXH_VECTOR == XXH_NEON # if !defined(XXH_NO_VZIP_HACK) \\ && defined(__GNUC__) \\ && !defined(__aarch64__) && !defined(__arm64__) # define XXH_SPLIT_IN_PLACE(in, outLo, outHi)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ \\)",
    "insertText": "__asm__(\"vzip.32 %e0, %f0\" : \"+w\" (in))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) # else # define XXH_SPLIT_IN_PLACE(in, outLo, outHi)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) # endif #endif #if XXH_VECTOR == XXH_VSX # if defined(__s390x__) # include <s390intrin.h> # else # if defined(__GNUC__) && !defined(__APPLE_ALTIVEC__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef __vector unsigned char xxh_u8x16 ; typedef __vector unsigned xxh_u32x4 ; # ifndef XXH_VSX_BE # if)",
    "insertText": "defined(__BIG_ENDIAN__) \\ || (defined(__BYTE_ORDER__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) # define XXH_VSX_BE 1 # elif defined(__VEC_ELEMENT_REG_ORDER__) && __VEC_ELEMENT_REG_ORDER__ == __ORDER_BIG_ENDIAN__ # warning \"-maltivec=be is not recommended. Please use native endianness.\" # define XXH_VSX_BE 1 # else # define XXH_VSX_BE 0 # endif # endif # if XXH_VSX_BE # if defined(__POWER9_VECTOR__) || (defined(__clang__) && defined(__s390x__)) # define XXH_vec_revb vec_revb # else XXH_FORCE_INLINE xxh_u64x2 XXH_vec_revb(xxh_u64x2 val)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (xxh_u8x16 const vByteSwap = { 0 x07,0 x06,0 x05,0 x04,0 x03,0 x02,0 x01,0 x00,0 x0F,0 x0E,0 x0D,0 x0C,0 x0B,0 x0A,0 x09,0 x08 } ; return)",
    "insertText": "vec_perm(val, val, vByteSwap)"
  },
  {
    "label": "XXH_vec_loadu()",
    "kind": "Method",
    "detail": "Function (} # endif # endif XXH_FORCE_INLINE xxh_u64x2)",
    "insertText": "XXH_vec_loadu(const void *ptr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 ret ;)",
    "insertText": "memcpy(&ret, ptr, sizeof(xxh_u64x2))"
  },
  {
    "label": "XXH_vec_revb()",
    "kind": "Method",
    "detail": "Function (# if XXH_VSX_BE ret =)",
    "insertText": "XXH_vec_revb(ret)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif return ret ; } # if)",
    "insertText": "defined(__s390x__) # define XXH_vec_mulo vec_mulo # define XXH_vec_mule vec_mule # elif defined(__clang__) && XXH_HAS_BUILTIN(__builtin_altivec_vmuleuw) # define XXH_vec_mulo __builtin_altivec_vmulouw # define XXH_vec_mule __builtin_altivec_vmuleuw # else XXH_FORCE_INLINE xxh_u64x2 XXH_vec_mulo(xxh_u32x4 a, xxh_u32x4 b)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 result ;)",
    "insertText": "__asm__(\"vmulouw %0, %1, %2\" : \"=v\" (result) : \"v\" (a), \"v\" (b))"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 result ;)",
    "insertText": "__asm__(\"vmuleuw %0, %1, %2\" : \"=v\" (result) : \"v\" (a), \"v\" (b))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (0 xb8,0 xfe,0 x6c,0 x39,0 x23,0 xa4,0 x4b,0 xbe,0 x7c,0 x01,0 x81,0 x2c,0 xf7,0 x21,0 xad,0 x1c,0 xde,0 xd4,0 x6d,0 xe9,0 x83,0 x90,0 x97,0 xdb,0 x72,0 x40,0 xa4,0 xa4,0 xb7,0 xb3,0 x67,0 x1f,0 xcb,0 x79,0 xe6,0 x4e,0 xcc,0 xc0,0 xe5,0 x78,0 x82,0 x5a,0 xd0,0 x7d,0 xcc,0 xff,0 x72,0 x21,0 xb8,0 x08,0 x46,0 x74,0 xf7,0 x43,0 x24,0 x8e,0 xe0,0 x35,0 x90,0 xe6,0 x81,0 x3a,0 x26,0 x4c,0 x3c,0 x28,0 x52,0 xbb,0 x91,0 xc3,0 x00,0 xcb,0 x88,0 xd0,0 x65,0 x8b,0 x1b,0 x53,0 x2e,0 xa3,0 x71,0 x64,0 x48,0 x97,0 xa2,0 x0d,0 xf9,0 x4e,0 x38,0 x19,0 xef,0 x46,0 xa9,0 xde,0 xac,0 xd8,0 xa8,0 xfa,0 x76,0 x3f,0 xe3,0 x9c,0 x34,0 x3f,0 xf9,0 xdc,0 xbb,0 xc7,0 xc7,0 x0b,0 x4f,0 x1d,0 x8a,0 x51,0 xe0,0 x4b,0 xcd,0 xb4,0 x59,0 x31,0 xc8,0 x9f,0 x7e,0 xc9,0 xd9,0 x78,0 x73,0 x64,0 xea,0 xc5,0 xac,0 x83,0 x34,0 xd3,0 xeb,0 xc3,0 xc5,0 x81,0 xa0,0 xff,0 xfa,0 x13,0 x63,0 xeb,0 x17,0 x0d,0 xdd,0 x51,0 xb7,0 xf0,0 xda,0 x49,0 xd3,0 x16,0 x55,0 x26,0 x29,0 xd4,0 x68,0 x9e,0 x2b,0 x16,0 xbe,0 x58,0 x7d,0 x47,0 xa1,0 xfc,0 x8f,0 xf8,0 xb8,0 xd1,0 x7a,0 xd0,0 x31,0 xce,0 x45,0 xcb,0 x3a,0 x8f,0 x95,0 x16,0 x04,0 x28,0 xaf,0 xd7,0 xfb,0 xca,0 xbb,0 x4b,0 x40,0 x7e,} ; # ifdef XXH_OLD_NAMES # define kSecret XXH3_kSecret # endif # if)",
    "insertText": "defined(_MSC_VER) && defined(_M_IX86) # include <intrin.h> # define XXH_mult32to64(x, y) __emulu((unsigned)(x), (unsigned)(y)) #else # define XXH_mult32to64(x, y) ((xxh_u64)(xxh_u32)(x) * (xxh_u64)(xxh_u32)(y)) #endif static XXH128_hash_t XXH_mult64to128(xxh_u64 lhs, xxh_u64 rhs)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && !defined(__wasm__) \\ && defined(__SIZEOF_INT128__) \\ || (defined(_INTEGRAL_MAX_BITS) && _INTEGRAL_MAX_BITS >= 128) __uint128_t const product = (__uint128_t)lhs * (__uint128_t)"
  },
  {
    "label": "low64()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t r128 ; r128 .)",
    "insertText": "low64(xxh_u64)(product)"
  },
  {
    "label": "high64()",
    "kind": "Method",
    "detail": "Function (r128 .)",
    "insertText": "high64(xxh_u64)(product >> 64)"
  },
  {
    "label": "_umul128()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const product_low =)",
    "insertText": "_umul128(lhs, rhs, &product_high)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t r128 ; r128 . low64 = product_low ; r128 . high64 = product_high ; return r128 ; # else xxh_u64 const lo_lo =)",
    "insertText": "XXH_mult32to64(lhs & 0xFFFFFFFF, rhs & 0xFFFFFFFF)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const hi_lo =)",
    "insertText": "XXH_mult32to64(lhs >> 32, rhs & 0xFFFFFFFF)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const lo_hi =)",
    "insertText": "XXH_mult32to64(lhs & 0xFFFFFFFF, rhs >> 32)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const hi_hi =)",
    "insertText": "XXH_mult32to64(lhs >> 32, rhs >> 32)"
  },
  {
    "label": "cross()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "cross(lo_lo >> 32) + (hi_lo & 0xFFFFFFFF)"
  },
  {
    "label": "upper()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "upper(hi_lo >> 32) + (cross >> 32)"
  },
  {
    "label": "lower()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "lower(cross << 32) | (lo_lo & 0xFFFFFFFF)"
  },
  {
    "label": "XXH3_mul128_fold64()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t r128 ; r128 . low64 = lower ; r128 . high64 = upper ; return r128 ; # endif } xxh_u64)",
    "insertText": "XXH3_mul128_fold64(xxh_u64 lhs, xxh_u64 rhs)"
  },
  {
    "label": "XXH_mult64to128()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t product =)",
    "insertText": "XXH_mult64to128(lhs, rhs)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(0 <= shift && shift < 64)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_avalanche(xxh_u64 h64)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (h64 =)",
    "insertText": "XXH_xorshift64(h64, 37)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (h64* = 0 x165667919E3779F9ULL ; h64 =)",
    "insertText": "XXH_xorshift64(h64, 32)"
  },
  {
    "label": "XXH_rotl64()",
    "kind": "Method",
    "detail": "Function (h64 ^ =)",
    "insertText": "XXH_rotl64(h64, 49) ^ XXH_rotl64(h64, 24)"
  },
  {
    "label": "h64()",
    "kind": "Method",
    "detail": "Function (h64* = 0 x9FB21C651E98DF25ULL ;)",
    "insertText": "h64(h64 >> 35)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (h64* = 0 x9FB21C651E98DF25ULL ; return)",
    "insertText": "XXH_xorshift64(h64, 28)"
  },
  {
    "label": "XXH3_len_1to3_64b()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_1to3_64b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(input != NULL)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(1 <= len && len <= 3)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(secret != NULL)"
  },
  {
    "label": "combined()",
    "kind": "Method",
    "detail": "Function ({ xxh_u8 const c1 = input [ 0 ] ; xxh_u8 const c2 = input [ len>> 1 ] ; xxh_u8 const c3 = input [ len - 1 ] ; xxh_u32 const)",
    "insertText": "combined((xxh_u32)c1 << 16) | ((xxh_u32)c2 << 24) | ((xxh_u32)c3 << 0) | ((xxh_u32)len << 8)"
  },
  {
    "label": "bitflip()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflip(XXH_readLE32(secret) ^ XXH_readLE32(secret+4))"
  },
  {
    "label": "keyed()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "keyed(xxh_u64)"
  },
  {
    "label": "XXH3_len_4to8_64b()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_4to8_64b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(4 <= len && len < 8)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(xxh_u64)XXH_swap32((xxh_u32)seed)"
  },
  {
    "label": "XXH_readLE32()",
    "kind": "Method",
    "detail": "Function ({ xxh_u32 const input1 =)",
    "insertText": "XXH_readLE32(input)"
  },
  {
    "label": "XXH_readLE32()",
    "kind": "Method",
    "detail": "Function (xxh_u32 const input2 =)",
    "insertText": "XXH_readLE32(input + len - 4)"
  },
  {
    "label": "bitflip()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflip(XXH_readLE64(secret+8) ^ XXH_readLE64(secret+16))"
  },
  {
    "label": "input2()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input64 =)",
    "insertText": "input2(((xxh_u64)input1) << 32)"
  },
  {
    "label": "XXH3_rrmxmx()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const keyed = input64 ^ bitflip ; return)",
    "insertText": "XXH3_rrmxmx(keyed, len)"
  },
  {
    "label": "XXH3_len_9to16_64b()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_9to16_64b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(8 <= len && len <= 16)"
  },
  {
    "label": "bitflip1()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 const)",
    "insertText": "bitflip1(XXH_readLE64(secret+24) ^ XXH_readLE64(secret+32))"
  },
  {
    "label": "bitflip2()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflip2(XXH_readLE64(secret+40) ^ XXH_readLE64(secret+48))"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input_lo =)",
    "insertText": "XXH_readLE64(input)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input_hi =)",
    "insertText": "XXH_readLE64(input + len - 8)"
  },
  {
    "label": "XXH_swap64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const acc = len +)",
    "insertText": "XXH_swap64(input_lo) + input_hi + XXH3_mul128_fold64(input_lo, input_hi)"
  },
  {
    "label": "XXH3_len_0to16_64b()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_0to16_64b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(len <= 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "if(XXH_likely(len > 8)) return XXH3_len_9to16_64b(input, len, secret, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE xxh_u64)",
    "insertText": "XXH3_mix16B(const xxh_u8* XXH_RESTRICT input, const xxh_u8* XXH_RESTRICT secret, xxh_u64 seed64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && !defined(__clang__) \\ && defined(__i386__) && defined(__SSE2__) \\ && !defined(XXH_ENABLE_AUTOVECTORIZE) __asm__ (\"\" : \"+r\" (seed64))"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input_hi =)",
    "insertText": "XXH_readLE64(input+8)"
  },
  {
    "label": "XXH3_len_17to128_64b()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_17to128_64b(const xxh_u8* XXH_RESTRICT input, size_t len, const xxh_u8* XXH_RESTRICT secret, size_t secretSize, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(secretSize >= XXH3_SECRET_SIZE_MIN)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(16 < len && len <= 128)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 acc = len* XXH_PRIME64_1 ;)",
    "insertText": "if(len > 32)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+48, secret+96, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+len-64, secret+112, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} acc + =)",
    "insertText": "XXH3_mix16B(input+32, secret+64, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+len-48, secret+80, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} acc + =)",
    "insertText": "XXH3_mix16B(input+16, secret+32, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+len-32, secret+48, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} acc + =)",
    "insertText": "XXH3_mix16B(input+0, secret+0, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+len-16, secret+16, seed)"
  },
  {
    "label": "XXH3_len_129to240_64b()",
    "kind": "Method",
    "detail": "Function (} } # define XXH3_MIDSIZE_MAX 2 4 0 XXH_NO_INLINE XXH64_hash_t)",
    "insertText": "XXH3_len_129to240_64b(const xxh_u8* XXH_RESTRICT input, size_t len, const xxh_u8* XXH_RESTRICT secret, size_t secretSize, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(128 < len && len <= XXH3_MIDSIZE_MAX)"
  },
  {
    "label": "nbRounds()",
    "kind": "Method",
    "detail": "Function (# define XXH3_MIDSIZE_STARTOFFSET 3 # define XXH3_MIDSIZE_LASTOFFSET 1 7 { xxh_u64 acc = len* XXH_PRIME64_1 ; int const)",
    "insertText": "nbRounds(int)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i<8; i++)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+(16*i), secret+(16*i), seed)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH3_avalanche(acc)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(nbRounds >= 8)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__clang__) \\ && (defined(__ARM_NEON) || defined(__ARM_NEON__)) \\ && !defined(XXH_ENABLE_AUTOVECTORIZE) #pragma clang loop vectorize(disable) #endif for (i=8 ; i < nbRounds; i++)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc + =)",
    "insertText": "XXH3_mix16B(input+(16*i), secret+(16*(i-8)) + XXH3_MIDSIZE_STARTOFFSET, seed)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (} acc + =)",
    "insertText": "XXH3_mix16B(input + len - 16, secret + XXH3_SECRET_SIZE_MIN - XXH3_MIDSIZE_LASTOFFSET, seed)"
  },
  {
    "label": "XXH_ACC_NB()",
    "kind": "Method",
    "detail": "Function (} } # define XXH_STRIPE_LEN 6 4 # define XXH_SECRET_CONSUME_RATE 8 # define)",
    "insertText": "XXH_ACC_NB(XXH_STRIPE_LEN / sizeof(xxh_u64)) #ifdef XXH_OLD_NAMES # define STRIPE_LEN XXH_STRIPE_LEN # define ACC_NB XXH_ACC_NB #endif XXH_FORCE_INLINE void XXH_writeLE64(void* dst, xxh_u64 v64)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst, &v64, sizeof(v64))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else typedef long long xxh_i64 ; # endif #)",
    "insertText": "if(XXH_VECTOR == XXH_AVX512) || defined(XXH_X86DISPATCH) #ifndef XXH_TARGET_AVX512 # define XXH_TARGET_AVX512 #endif XXH_FORCE_INLINE XXH_TARGET_AVX512 void XXH3_accumulate_512_avx512(void* XXH_RESTRICT acc, const void* XXH_RESTRICT input, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(64) __m512i* const xacc = (__m512i *)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT((((size_t)acc) & 63) == 0)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(XXH_STRIPE_LEN == sizeof(__m512i))"
  },
  {
    "label": "_mm512_loadu_si512()",
    "kind": "Method",
    "detail": "Function ({ __m512i const data_vec =)",
    "insertText": "_mm512_loadu_si512(input)"
  },
  {
    "label": "_mm512_loadu_si512()",
    "kind": "Method",
    "detail": "Function (__m512i const key_vec =)",
    "insertText": "_mm512_loadu_si512(secret)"
  },
  {
    "label": "_mm512_xor_si512()",
    "kind": "Method",
    "detail": "Function (__m512i const data_key =)",
    "insertText": "_mm512_xor_si512(data_vec, key_vec)"
  },
  {
    "label": "_mm512_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m512i const data_key_lo =)",
    "insertText": "_mm512_shuffle_epi32(data_key, (_MM_PERM_ENUM)_MM_SHUFFLE(0, 3, 0, 1))"
  },
  {
    "label": "_mm512_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m512i const product =)",
    "insertText": "_mm512_mul_epu32(data_key, data_key_lo)"
  },
  {
    "label": "_mm512_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m512i const data_swap =)",
    "insertText": "_mm512_shuffle_epi32(data_vec, (_MM_PERM_ENUM)_MM_SHUFFLE(1, 0, 3, 2))"
  },
  {
    "label": "_mm512_add_epi64()",
    "kind": "Method",
    "detail": "Function (__m512i const sum =)",
    "insertText": "_mm512_add_epi64(*xacc, data_swap)"
  },
  {
    "label": "_mm512_add_epi64()",
    "kind": "Method",
    "detail": "Function (* xacc =)",
    "insertText": "_mm512_add_epi64(product, sum)"
  },
  {
    "label": "XXH3_scrambleAcc_avx512()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH_TARGET_AVX512 void)",
    "insertText": "XXH3_scrambleAcc_avx512(void* XXH_RESTRICT acc, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(64) __m512i* const xacc = (__m512i*)"
  },
  {
    "label": "_mm512_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m512i prime32 =)",
    "insertText": "_mm512_set1_epi32((int)XXH_PRIME32_1)"
  },
  {
    "label": "_mm512_srli_epi64()",
    "kind": "Method",
    "detail": "Function (__m512i const acc_vec =* xacc ; __m512i const shifted =)",
    "insertText": "_mm512_srli_epi64(acc_vec, 47)"
  },
  {
    "label": "_mm512_xor_si512()",
    "kind": "Method",
    "detail": "Function (__m512i const data_vec =)",
    "insertText": "_mm512_xor_si512(acc_vec, shifted)"
  },
  {
    "label": "_mm512_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m512i const prod_lo =)",
    "insertText": "_mm512_mul_epu32(data_key, prime32)"
  },
  {
    "label": "_mm512_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m512i const prod_hi =)",
    "insertText": "_mm512_mul_epu32(data_key_hi, prime32)"
  },
  {
    "label": "_mm512_add_epi64()",
    "kind": "Method",
    "detail": "Function (* xacc =)",
    "insertText": "_mm512_add_epi64(prod_lo, _mm512_slli_epi64(prod_hi, 32))"
  },
  {
    "label": "XXH3_initCustomSecret_avx512()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE XXH_TARGET_AVX512 void)",
    "insertText": "XXH3_initCustomSecret_avx512(void* XXH_RESTRICT customSecret, xxh_u64 seed64)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT((XXH_SECRET_DEFAULT_SIZE & 63) == 0)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(XXH_SEC_ALIGN == 64)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(((size_t)customSecret & 63) == 0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function ({ int const nbRounds = XXH_SECRET_DEFAULT_SIZE /)",
    "insertText": "sizeof(__m512i)"
  },
  {
    "label": "_mm512_mask_set1_epi64()",
    "kind": "Method",
    "detail": "Function (__m512i const seed =)",
    "insertText": "_mm512_mask_set1_epi64(_mm512_set1_epi64((xxh_i64)seed64), 0xAA, -(xxh_i64)seed64)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(64) const __m512i* const src = (const __m512i*)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(64) __m512i* const dest = ( __m512i*)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i < nbRounds; ++i)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (union {)",
    "insertText": "XXH_ALIGN(64)"
  },
  {
    "label": "_mm512_add_epi64()",
    "kind": "Method",
    "detail": "Function (} remote_const_void ; remote_const_void . cp = src + i ; dest [ i ] =)",
    "insertText": "_mm512_add_epi64(_mm512_stream_load_si512(remote_const_void.p), seed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } # endif #)",
    "insertText": "if(XXH_VECTOR == XXH_AVX2) || defined(XXH_X86DISPATCH) #ifndef XXH_TARGET_AVX2 # define XXH_TARGET_AVX2 #endif XXH_FORCE_INLINE XXH_TARGET_AVX2 void XXH3_accumulate_512_avx2( void* XXH_RESTRICT acc, const void* XXH_RESTRICT input, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT((((size_t)acc) & 31) == 0)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(32) __m256i* const xacc = (__m256i *)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (const __m256i* const)",
    "insertText": "xinput(const __m256i *)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (const __m256i* const)",
    "insertText": "xsecret(const __m256i *)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "for(i=0; i < XXH_STRIPE_LEN/sizeof(__m256i); i++)"
  },
  {
    "label": "_mm256_loadu_si256()",
    "kind": "Method",
    "detail": "Function (__m256i const data_vec =)",
    "insertText": "_mm256_loadu_si256(xinput+i)"
  },
  {
    "label": "_mm256_loadu_si256()",
    "kind": "Method",
    "detail": "Function (__m256i const key_vec =)",
    "insertText": "_mm256_loadu_si256(xsecret+i)"
  },
  {
    "label": "_mm256_xor_si256()",
    "kind": "Method",
    "detail": "Function (__m256i const data_key =)",
    "insertText": "_mm256_xor_si256(data_vec, key_vec)"
  },
  {
    "label": "_mm256_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m256i const data_key_lo =)",
    "insertText": "_mm256_shuffle_epi32(data_key, _MM_SHUFFLE(0, 3, 0, 1))"
  },
  {
    "label": "_mm256_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m256i const product =)",
    "insertText": "_mm256_mul_epu32(data_key, data_key_lo)"
  },
  {
    "label": "_mm256_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m256i const data_swap =)",
    "insertText": "_mm256_shuffle_epi32(data_vec, _MM_SHUFFLE(1, 0, 3, 2))"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (__m256i const sum =)",
    "insertText": "_mm256_add_epi64(xacc[i], data_swap)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "_mm256_add_epi64(product, sum)"
  },
  {
    "label": "XXH3_scrambleAcc_avx2()",
    "kind": "Method",
    "detail": "Function (} } } XXH_FORCE_INLINE XXH_TARGET_AVX2 void)",
    "insertText": "XXH3_scrambleAcc_avx2(void* XXH_RESTRICT acc, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(32) __m256i* const xacc = (__m256i*)"
  },
  {
    "label": "_mm256_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m256i prime32 =)",
    "insertText": "_mm256_set1_epi32((int)XXH_PRIME32_1)"
  },
  {
    "label": "_mm256_srli_epi64()",
    "kind": "Method",
    "detail": "Function (__m256i const acc_vec = xacc [ i ] ; __m256i const shifted =)",
    "insertText": "_mm256_srli_epi64(acc_vec, 47)"
  },
  {
    "label": "_mm256_xor_si256()",
    "kind": "Method",
    "detail": "Function (__m256i const data_vec =)",
    "insertText": "_mm256_xor_si256(acc_vec, shifted)"
  },
  {
    "label": "_mm256_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m256i const prod_lo =)",
    "insertText": "_mm256_mul_epu32(data_key, prime32)"
  },
  {
    "label": "_mm256_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m256i const prod_hi =)",
    "insertText": "_mm256_mul_epu32(data_key_hi, prime32)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "_mm256_add_epi64(prod_lo, _mm256_slli_epi64(prod_hi, 32))"
  },
  {
    "label": "XXH3_initCustomSecret_avx2()",
    "kind": "Method",
    "detail": "Function (} } } XXH_FORCE_INLINE XXH_TARGET_AVX2 void)",
    "insertText": "XXH3_initCustomSecret_avx2(void* XXH_RESTRICT customSecret, xxh_u64 seed64)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT((XXH_SECRET_DEFAULT_SIZE & 31) == 0)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT((XXH_SECRET_DEFAULT_SIZE / sizeof(__m256i)) == 6)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(XXH_SEC_ALIGN <= 64)"
  },
  {
    "label": "XXH_PREFETCH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_PREFETCH(customSecret)"
  },
  {
    "label": "_mm256_set_epi64x()",
    "kind": "Method",
    "detail": "Function ({ __m256i const seed =)",
    "insertText": "_mm256_set_epi64x(-(xxh_i64)seed64, (xxh_i64)seed64, -(xxh_i64)seed64, (xxh_i64)seed64)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(64) const __m256i* const src = (const __m256i*)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(64) __m256i* dest = ( __m256i*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) || defined(__clang__) __asm__(\"\" : \"+r\" (dest))"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (# endif dest [ 0 ] =)",
    "insertText": "_mm256_add_epi64(_mm256_stream_load_si256(src+0), seed)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (dest [ 1 ] =)",
    "insertText": "_mm256_add_epi64(_mm256_stream_load_si256(src+1), seed)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (dest [ 2 ] =)",
    "insertText": "_mm256_add_epi64(_mm256_stream_load_si256(src+2), seed)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (dest [ 3 ] =)",
    "insertText": "_mm256_add_epi64(_mm256_stream_load_si256(src+3), seed)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (dest [ 4 ] =)",
    "insertText": "_mm256_add_epi64(_mm256_stream_load_si256(src+4), seed)"
  },
  {
    "label": "_mm256_add_epi64()",
    "kind": "Method",
    "detail": "Function (dest [ 5 ] =)",
    "insertText": "_mm256_add_epi64(_mm256_stream_load_si256(src+5), seed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } # endif #)",
    "insertText": "if(XXH_VECTOR == XXH_SSE2) || defined(XXH_X86DISPATCH) #ifndef XXH_TARGET_SSE2 # define XXH_TARGET_SSE2 #endif XXH_FORCE_INLINE XXH_TARGET_SSE2 void XXH3_accumulate_512_sse2( void* XXH_RESTRICT acc, const void* XXH_RESTRICT input, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT((((size_t)acc) & 15) == 0)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(16) __m128i* const xacc = (__m128i *)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (const __m128i* const)",
    "insertText": "xinput(const __m128i *)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (const __m128i* const)",
    "insertText": "xsecret(const __m128i *)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "for(i=0; i < XXH_STRIPE_LEN/sizeof(__m128i); i++)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const data_vec =)",
    "insertText": "_mm_loadu_si128(xinput+i)"
  },
  {
    "label": "_mm_loadu_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const key_vec =)",
    "insertText": "_mm_loadu_si128(xsecret+i)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const data_key =)",
    "insertText": "_mm_xor_si128(data_vec, key_vec)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i const data_key_lo =)",
    "insertText": "_mm_shuffle_epi32(data_key, _MM_SHUFFLE(0, 3, 0, 1))"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i const product =)",
    "insertText": "_mm_mul_epu32(data_key, data_key_lo)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i const data_swap =)",
    "insertText": "_mm_shuffle_epi32(data_vec, _MM_SHUFFLE(1,0,3,2))"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i const sum =)",
    "insertText": "_mm_add_epi64(xacc[i], data_swap)"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "_mm_add_epi64(product, sum)"
  },
  {
    "label": "XXH3_scrambleAcc_sse2()",
    "kind": "Method",
    "detail": "Function (} } } XXH_FORCE_INLINE XXH_TARGET_SSE2 void)",
    "insertText": "XXH3_scrambleAcc_sse2(void* XXH_RESTRICT acc, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(16) __m128i* const xacc = (__m128i*)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i prime32 =)",
    "insertText": "_mm_set1_epi32((int)XXH_PRIME32_1)"
  },
  {
    "label": "_mm_srli_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i const acc_vec = xacc [ i ] ; __m128i const shifted =)",
    "insertText": "_mm_srli_epi64(acc_vec, 47)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const data_vec =)",
    "insertText": "_mm_xor_si128(acc_vec, shifted)"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i const prod_lo =)",
    "insertText": "_mm_mul_epu32(data_key, prime32)"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i const prod_hi =)",
    "insertText": "_mm_mul_epu32(data_key_hi, prime32)"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "_mm_add_epi64(prod_lo, _mm_slli_epi64(prod_hi, 32))"
  },
  {
    "label": "XXH3_initCustomSecret_sse2()",
    "kind": "Method",
    "detail": "Function (} } } XXH_FORCE_INLINE XXH_TARGET_SSE2 void)",
    "insertText": "XXH3_initCustomSecret_sse2(void* XXH_RESTRICT customSecret, xxh_u64 seed64)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT((XXH_SECRET_DEFAULT_SIZE & 15) == 0)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function ({ int const nbRounds = XXH_SECRET_DEFAULT_SIZE /)",
    "insertText": "sizeof(__m128i)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && defined(_M_IX86) && _MSC_VER < 1900 XXH_ALIGN(16)"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (__m128i const seed =)",
    "insertText": "_mm_load_si128((__m128i const*)seed64x2)"
  },
  {
    "label": "_mm_set_epi64x()",
    "kind": "Method",
    "detail": "Function (# else __m128i const seed =)",
    "insertText": "_mm_set_epi64x(-(xxh_i64)seed64, (xxh_i64)seed64)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (# endif int i ;)",
    "insertText": "XXH_ALIGN(64) const float* const src = (float const*)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(XXH_SEC_ALIGN) __m128i* dest = (__m128i*)"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (dest [ i ] =)",
    "insertText": "_mm_add_epi64(_mm_castps_si128(_mm_load_ps(src+i*4)), seed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } # endif #)",
    "insertText": "if(XXH_VECTOR == XXH_NEON) XXH_FORCE_INLINE void XXH3_accumulate_512_neon( void* XXH_RESTRICT acc, const void* XXH_RESTRICT input, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(16) uint64x2_t* const xacc = (uint64x2_t *)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (uint8_t const* const)",
    "insertText": "xinput(const uint8_t *)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (uint8_t const* const)",
    "insertText": "xsecret(const uint8_t *)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "for(i=0; i < XXH_STRIPE_LEN / sizeof(uint64x2_t); i++)"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t data_vec =)",
    "insertText": "vld1q_u8(xinput + (i * 16))"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t key_vec =)",
    "insertText": "vld1q_u8(xsecret + (i * 16))"
  },
  {
    "label": "vreinterpretq_u64_u8()",
    "kind": "Method",
    "detail": "Function (uint64x2_t data_key ; uint32x2_t data_key_lo,data_key_hi ; uint64x2_t const data64 =)",
    "insertText": "vreinterpretq_u64_u8(data_vec)"
  },
  {
    "label": "vextq_u64()",
    "kind": "Method",
    "detail": "Function (uint64x2_t const swapped =)",
    "insertText": "vextq_u64(data64, data64, 1)"
  },
  {
    "label": "vaddq_u64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vaddq_u64(xacc[i], swapped)"
  },
  {
    "label": "vreinterpretq_u64_u8()",
    "kind": "Method",
    "detail": "Function (data_key =)",
    "insertText": "vreinterpretq_u64_u8(veorq_u8(data_vec, key_vec))"
  },
  {
    "label": "XXH_SPLIT_IN_PLACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_SPLIT_IN_PLACE(data_key, data_key_lo, data_key_hi)"
  },
  {
    "label": "vmlal_u32()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vmlal_u32(xacc[i], data_key_lo, data_key_hi)"
  },
  {
    "label": "XXH3_scrambleAcc_neon()",
    "kind": "Method",
    "detail": "Function (} } } XXH_FORCE_INLINE void)",
    "insertText": "XXH3_scrambleAcc_neon(void* XXH_RESTRICT acc, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "xacc()",
    "kind": "Method",
    "detail": "Function ({ uint64x2_t*)",
    "insertText": "xacc(uint64x2_t*)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (uint8_t const*)",
    "insertText": "xsecret(uint8_t const*)"
  },
  {
    "label": "vdup_n_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t prime =)",
    "insertText": "vdup_n_u32(XXH_PRIME32_1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "for(i=0; i < XXH_STRIPE_LEN/sizeof(uint64x2_t); i++)"
  },
  {
    "label": "vshrq_n_u64()",
    "kind": "Method",
    "detail": "Function (uint64x2_t acc_vec = xacc [ i ] ; uint64x2_t shifted =)",
    "insertText": "vshrq_n_u64(acc_vec, 47)"
  },
  {
    "label": "veorq_u64()",
    "kind": "Method",
    "detail": "Function (uint64x2_t data_vec =)",
    "insertText": "veorq_u64(acc_vec, shifted)"
  },
  {
    "label": "veorq_u64()",
    "kind": "Method",
    "detail": "Function (uint64x2_t data_key =)",
    "insertText": "veorq_u64(data_vec, vreinterpretq_u64_u8(key_vec))"
  },
  {
    "label": "vmull_u32()",
    "kind": "Method",
    "detail": "Function ({ uint64x2_t prod_hi =)",
    "insertText": "vmull_u32(data_key_hi, prime)"
  },
  {
    "label": "vshlq_n_u64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vshlq_n_u64(prod_hi, 32)"
  },
  {
    "label": "vmlal_u32()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "vmlal_u32(xacc[i], data_key_lo, prime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } # endif #)",
    "insertText": "if(XXH_VECTOR == XXH_VSX) XXH_FORCE_INLINE void XXH3_accumulate_512_vsx( void* XXH_RESTRICT acc, const void* XXH_RESTRICT input, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "xacc()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2* const)",
    "insertText": "xacc(xxh_u64x2*)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const* const)",
    "insertText": "xinput(xxh_u64x2 const*)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const* const)",
    "insertText": "xsecret(xxh_u64x2 const*)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const v32 = { 3 2,3 2 } ; size_t i ;)",
    "insertText": "for(i = 0; i < XXH_STRIPE_LEN / sizeof(xxh_u64x2); i++)"
  },
  {
    "label": "XXH_vec_loadu()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const data_vec =)",
    "insertText": "XXH_vec_loadu(xinput + i)"
  },
  {
    "label": "XXH_vec_loadu()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const key_vec =)",
    "insertText": "XXH_vec_loadu(xsecret + i)"
  },
  {
    "label": "shuffled()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const data_key = data_vec ^ key_vec ; xxh_u32x4 const)",
    "insertText": "shuffled(xxh_u32x4)vec_rl(data_key, v32)"
  },
  {
    "label": "XXH_vec_mulo()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const product =)",
    "insertText": "XXH_vec_mulo((xxh_u32x4)data_key, shuffled)"
  },
  {
    "label": "vec_permi()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] + = product ; # ifdef __s390x__ xacc [ i ] + =)",
    "insertText": "vec_permi(data_vec, data_vec, 2)"
  },
  {
    "label": "vec_xxpermdi()",
    "kind": "Method",
    "detail": "Function (# else xacc [ i ] + =)",
    "insertText": "vec_xxpermdi(data_vec, data_vec, 2)"
  },
  {
    "label": "XXH3_scrambleAcc_vsx()",
    "kind": "Method",
    "detail": "Function (# endif } } XXH_FORCE_INLINE void)",
    "insertText": "XXH3_scrambleAcc_vsx(void* XXH_RESTRICT acc, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (const xxh_u64x2* const)",
    "insertText": "xsecret(const xxh_u64x2*)"
  },
  {
    "label": "acc_vec()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const acc_vec = xacc [ i ] ; xxh_u64x2 const data_vec =)",
    "insertText": "acc_vec(acc_vec >> v47)"
  },
  {
    "label": "XXH_vec_mule()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const data_key = data_vec ^ key_vec ; xxh_u64x2 const prod_even =)",
    "insertText": "XXH_vec_mule((xxh_u32x4)data_key, prime)"
  },
  {
    "label": "XXH_vec_mulo()",
    "kind": "Method",
    "detail": "Function (xxh_u64x2 const prod_odd =)",
    "insertText": "XXH_vec_mulo((xxh_u32x4)data_key, prime)"
  },
  {
    "label": "prod_odd()",
    "kind": "Method",
    "detail": "Function (xacc [ i ] =)",
    "insertText": "prod_odd(prod_even << v32)"
  },
  {
    "label": "XXH3_accumulate_512_scalar()",
    "kind": "Method",
    "detail": "Function (} } } # endif XXH_FORCE_INLINE void)",
    "insertText": "XXH3_accumulate_512_scalar(void* XXH_RESTRICT acc, const void* XXH_RESTRICT input, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(XXH_ACC_ALIGN) xxh_u64* const xacc = (xxh_u64*)"
  },
  {
    "label": "xinput()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const)",
    "insertText": "xinput(const xxh_u8*)"
  },
  {
    "label": "xsecret()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const)",
    "insertText": "xsecret(const xxh_u8*)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "XXH_ASSERT(((size_t)acc & (XXH_ACC_ALIGN-1)) == 0)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const data_val =)",
    "insertText": "XXH_readLE64(xinput + 8*i)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const data_key = data_val ^)",
    "insertText": "XXH_readLE64(xsecret + i*8)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (xacc [ i ^ 1 ] + = data_val ; xacc [ i ] + =)",
    "insertText": "XXH_mult32to64(data_key & 0xFFFFFFFF, data_key >> 32)"
  },
  {
    "label": "XXH3_scrambleAcc_scalar()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE void)",
    "insertText": "XXH3_scrambleAcc_scalar(void* XXH_RESTRICT acc, const void* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (size_t i ;)",
    "insertText": "XXH_ASSERT((((size_t)acc) & (XXH_ACC_ALIGN-1)) == 0)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const key64 =)",
    "insertText": "XXH_readLE64(xsecret + 8*i)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 acc64 = xacc [ i ] ; acc64 =)",
    "insertText": "XXH_xorshift64(acc64, 47)"
  },
  {
    "label": "XXH3_initCustomSecret_scalar()",
    "kind": "Method",
    "detail": "Function (acc64 ^ = key64 ; acc64* = XXH_PRIME32_1 ; xacc [ i ] = acc64 ; } } XXH_FORCE_INLINE void)",
    "insertText": "XXH3_initCustomSecret_scalar(void* XXH_RESTRICT customSecret, xxh_u64 seed64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__clang__) && defined(__aarch64__) __asm__(\"\" : \"+r\" (kSecretPtr))"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "XXH_ASSERT(kSecretPtr == XXH3_kSecret)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function ({ int const nbRounds = XXH_SECRET_DEFAULT_SIZE / 1 6 ; int i ;)",
    "insertText": "for(i=0; i < nbRounds; i++)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 lo =)",
    "insertText": "XXH_readLE64(kSecretPtr + 16*i)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 hi =)",
    "insertText": "XXH_readLE64(kSecretPtr + 16*i + 8)"
  },
  {
    "label": "XXH_writeLE64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_writeLE64((xxh_u8*)customSecret + 16*i, lo)"
  },
  {
    "label": "XXH_writeLE64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_writeLE64((xxh_u8*)customSecret + 16*i + 8, hi)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } } typedef)",
    "insertText": "void(*XXH3_f_accumulate_512)(void* XXH_RESTRICT, const void*, const void*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*XXH3_f_scrambleAcc)(void* XXH_RESTRICT, const void*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*XXH3_f_initCustomSecret)(void* XXH_RESTRICT, xxh_u64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(XXH_VECTOR == XXH_AVX512) #define XXH3_accumulate_512 XXH3_accumulate_512_avx512 #define XXH3_scrambleAcc XXH3_scrambleAcc_avx512 #define XXH3_initCustomSecret XXH3_initCustomSecret_avx512 #elif (XXH_VECTOR == XXH_AVX2) #define XXH3_accumulate_512 XXH3_accumulate_512_avx2 #define XXH3_scrambleAcc XXH3_scrambleAcc_avx2 #define XXH3_initCustomSecret XXH3_initCustomSecret_avx2 #elif (XXH_VECTOR == XXH_SSE2) #define XXH3_accumulate_512 XXH3_accumulate_512_sse2 #define XXH3_scrambleAcc XXH3_scrambleAcc_sse2 #define XXH3_initCustomSecret XXH3_initCustomSecret_sse2 #elif (XXH_VECTOR == XXH_NEON) #define XXH3_accumulate_512 XXH3_accumulate_512_neon #define XXH3_scrambleAcc XXH3_scrambleAcc_neon #define XXH3_initCustomSecret XXH3_initCustomSecret_scalar #elif (XXH_VECTOR == XXH_VSX) #define XXH3_accumulate_512 XXH3_accumulate_512_vsx #define XXH3_scrambleAcc XXH3_scrambleAcc_vsx #define XXH3_initCustomSecret XXH3_initCustomSecret_scalar #else #define XXH3_accumulate_512 XXH3_accumulate_512_scalar #define XXH3_scrambleAcc XXH3_scrambleAcc_scalar #define XXH3_initCustomSecret XXH3_initCustomSecret_scalar #endif #ifndef XXH_PREFETCH_DIST # ifdef __clang__ # define XXH_PREFETCH_DIST 320 # else # if (XXH_VECTOR == XXH_AVX512) # define XXH_PREFETCH_DIST 512 # else # define XXH_PREFETCH_DIST 384 # endif # endif #endif XXH_FORCE_INLINE void XXH3_accumulate( xxh_u64* XXH_RESTRICT acc, const xxh_u8* XXH_RESTRICT input, const xxh_u8* XXH_RESTRICT secret, size_t nbStripes, XXH3_f_accumulate_512 f_acc512)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t n ;)",
    "insertText": "for(n = 0; n < nbStripes; n++)"
  },
  {
    "label": "XXH_PREFETCH()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const in = input + n* XXH_STRIPE_LEN ;)",
    "insertText": "XXH_PREFETCH(in + XXH_PREFETCH_DIST)"
  },
  {
    "label": "f_acc512()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f_acc512(acc, in, secret + n*XXH_SECRET_CONSUME_RATE)"
  },
  {
    "label": "XXH3_hashLong_internal_loop()",
    "kind": "Method",
    "detail": "Function (} } XXH_FORCE_INLINE void)",
    "insertText": "XXH3_hashLong_internal_loop(xxh_u64* XXH_RESTRICT acc, const xxh_u8* XXH_RESTRICT input, size_t len, const xxh_u8* XXH_RESTRICT secret, size_t secretSize, XXH3_f_accumulate_512 f_acc512, XXH3_f_scrambleAcc f_scramble)"
  },
  {
    "label": "nbStripesPerBlock()",
    "kind": "Method",
    "detail": "Function (size_t const)",
    "insertText": "nbStripesPerBlock(secretSize - XXH_STRIPE_LEN)"
  },
  {
    "label": "nb_blocks()",
    "kind": "Method",
    "detail": "Function (size_t const block_len = XXH_STRIPE_LEN* nbStripesPerBlock ; size_t const)",
    "insertText": "nb_blocks(len - 1)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate(acc, input + n*block_len, secret, nbStripesPerBlock, f_acc512)"
  },
  {
    "label": "f_scramble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f_scramble(acc, secret + secretSize - XXH_STRIPE_LEN)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "XXH_ASSERT(len > XXH_STRIPE_LEN)"
  },
  {
    "label": "nbStripes()",
    "kind": "Method",
    "detail": "Function ({ size_t const)",
    "insertText": "nbStripes((len - 1) - (block_len * nb_blocks))"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(nbStripes <= (secretSize / XXH_SECRET_CONSUME_RATE))"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate(acc, input + nb_blocks*block_len, secret, nbStripes, f_acc512)"
  },
  {
    "label": "f_acc512()",
    "kind": "Method",
    "detail": "Function ({ const xxh_u8* const p = input + len - XXH_STRIPE_LEN ; # define XXH_SECRET_LASTACC_START 7)",
    "insertText": "f_acc512(acc, p, secret + secretSize - XXH_STRIPE_LEN - XXH_SECRET_LASTACC_START)"
  },
  {
    "label": "XXH3_mix2Accs()",
    "kind": "Method",
    "detail": "Function (} } } XXH_FORCE_INLINE xxh_u64)",
    "insertText": "XXH3_mix2Accs(const xxh_u64* XXH_RESTRICT acc, const xxh_u8* XXH_RESTRICT secret)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_mergeAccs(const xxh_u64* XXH_RESTRICT acc, const xxh_u8* XXH_RESTRICT secret, xxh_u64 start)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (xxh_u64 result64 = start ; size_t i = 0 ;)",
    "insertText": "for(i = 0; i < 4; i++)"
  },
  {
    "label": "XXH3_mix2Accs()",
    "kind": "Method",
    "detail": "Function (result64 + =)",
    "insertText": "XXH3_mix2Accs(acc+2*i, secret + 16*i)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__clang__) \\ && (defined(__arm__) || defined(__thumb__)) \\ && (defined(__ARM_NEON) || defined(__ARM_NEON__)) \\ && !defined(XXH_ENABLE_AUTOVECTORIZE) __asm__(\"\" : \"+r\" (result64))"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (# endif } return)",
    "insertText": "XXH3_avalanche(result64)"
  },
  {
    "label": "XXH3_hashLong_64b_internal()",
    "kind": "Method",
    "detail": "Function (} # define XXH3_INIT_ACC { XXH_PRIME32_3,XXH_PRIME64_1,XXH_PRIME64_2,XXH_PRIME64_3,\\ XXH_PRIME64_4,XXH_PRIME32_2,XXH_PRIME64_5,XXH_PRIME32_1 } XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_64b_internal(const void* XXH_RESTRICT input, size_t len, const void* XXH_RESTRICT secret, size_t secretSize, XXH3_f_accumulate_512 f_acc512, XXH3_f_scrambleAcc f_scramble)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ALIGN(XXH_ACC_ALIGN)"
  },
  {
    "label": "XXH3_hashLong_internal_loop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_hashLong_internal_loop(acc, (const xxh_u8*)input, len, (const xxh_u8*)secret, secretSize, f_acc512, f_scramble)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(sizeof(acc) == 64)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (# define XXH_SECRET_MERGEACCS_START 1 1)",
    "insertText": "XXH_ASSERT(secretSize >= sizeof(acc) + XXH_SECRET_MERGEACCS_START)"
  },
  {
    "label": "XXH3_hashLong_64b_withSecret()",
    "kind": "Method",
    "detail": "Function (} XXH_NO_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_64b_withSecret(const void* XXH_RESTRICT input, size_t len, XXH64_hash_t seed64, const xxh_u8* XXH_RESTRICT secret, size_t secretLen)"
  },
  {
    "label": "XXH3_hashLong_64b_default()",
    "kind": "Method",
    "detail": "Function (} XXH_NO_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_64b_default(const void* XXH_RESTRICT input, size_t len, XXH64_hash_t seed64, const xxh_u8* XXH_RESTRICT secret, size_t secretLen)"
  },
  {
    "label": "XXH3_hashLong_64b_withSeed_internal()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_64b_withSeed_internal(const void* input, size_t len, XXH64_hash_t seed, XXH3_f_accumulate_512 f_acc512, XXH3_f_scrambleAcc f_scramble, XXH3_f_initCustomSecret f_initSec)"
  },
  {
    "label": "XXH_ALIGN()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "XXH_ALIGN(XXH_SEC_ALIGN)"
  },
  {
    "label": "f_initSec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f_initSec(secret, seed)"
  },
  {
    "label": "XXH3_hashLong_64b_withSeed()",
    "kind": "Method",
    "detail": "Function (} } XXH_NO_INLINE XXH64_hash_t)",
    "insertText": "XXH3_hashLong_64b_withSeed(const void* input, size_t len, XXH64_hash_t seed, const xxh_u8* secret, size_t secretLen)"
  },
  {
    "label": "XXH64_hash_t()",
    "kind": "Method",
    "detail": "Function (} typedef)",
    "insertText": "XXH64_hash_t(*XXH3_hashLong64_f)(const void* XXH_RESTRICT, size_t, XXH64_hash_t, const xxh_u8* XXH_RESTRICT, size_t)"
  },
  {
    "label": "XXH3_64bits_internal()",
    "kind": "Method",
    "detail": "Function (XXH_FORCE_INLINE XXH64_hash_t)",
    "insertText": "XXH3_64bits_internal(const void* XXH_RESTRICT input, size_t len, XXH64_hash_t seed64, const void* XXH_RESTRICT secret, size_t secretLen, XXH3_hashLong64_f f_hashLong)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(secretLen >= XXH3_SECRET_SIZE_MIN)"
  },
  {
    "label": "XXH3_64bits()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_64bits(const void* input, size_t len)"
  },
  {
    "label": "XXH3_64bits_withSecret()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_64bits_withSecret(const void* input, size_t len, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_64bits_withSeed()",
    "kind": "Method",
    "detail": "Function (} XXH64_hash_t)",
    "insertText": "XXH3_64bits_withSeed(const void* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH_alignedMalloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "XXH_alignedMalloc(size_t s, size_t align)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(align <= 128 && align >= 8)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT((align & (align-1)) == 0)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(s != 0 && s < (s + align))"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function ({ xxh_u8*)",
    "insertText": "base(xxh_u8*)XXH_malloc(s + align)"
  },
  {
    "label": "align()",
    "kind": "Method",
    "detail": "Function (size_t offset =)",
    "insertText": "align((size_t)base & (align - 1))"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (xxh_u8* ptr = base + offset ;)",
    "insertText": "XXH_ASSERT((size_t)ptr % align == 0)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ptr(xxh_u8)"
  },
  {
    "label": "ptr()",
    "kind": "Method",
    "detail": "Function (xxh_u8*)",
    "insertText": "ptr(xxh_u8*)"
  },
  {
    "label": "XXH_free()",
    "kind": "Method",
    "detail": "Function (xxh_u8 offset = ptr [ - 1 ] ; xxh_u8* base = ptr - offset ;)",
    "insertText": "XXH_free(base)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (XXH3_state_t* const)",
    "insertText": "state(XXH3_state_t*)XXH_alignedMalloc(sizeof(XXH3_state_t), 64)"
  },
  {
    "label": "XXH3_INITSTATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_INITSTATE(state)"
  },
  {
    "label": "XXH_alignedFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_alignedFree(statePtr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(dst_state, src_state, sizeof(*dst_state))"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "XXH3_64bits_reset_internal(XXH3_state_t* statePtr, XXH64_hash_t seed, const void* secret, size_t secretSize)"
  },
  {
    "label": "offsetof()",
    "kind": "Method",
    "detail": "Function (size_t const initStart =)",
    "insertText": "offsetof(XXH3_state_t, bufferedSize)"
  },
  {
    "label": "offsetof()",
    "kind": "Method",
    "detail": "Function (size_t const initLength =)",
    "insertText": "offsetof(XXH3_state_t, nbStripesPerBlock)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(offsetof(XXH3_state_t, nbStripesPerBlock) > initStart)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(statePtr != NULL)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset((char*)statePtr + initStart, 0, initLength)"
  },
  {
    "label": "extSecret()",
    "kind": "Method",
    "detail": "Function (statePtr -> acc [ 0 ] = XXH_PRIME32_3 ; statePtr -> acc [ 1 ] = XXH_PRIME64_1 ; statePtr -> acc [ 2 ] = XXH_PRIME64_2 ; statePtr -> acc [ 3 ] = XXH_PRIME64_3 ; statePtr -> acc [ 4 ] = XXH_PRIME64_4 ; statePtr -> acc [ 5 ] = XXH_PRIME32_2 ; statePtr -> acc [ 6 ] = XXH_PRIME64_5 ; statePtr -> acc [ 7 ] = XXH_PRIME32_1 ; statePtr -> seed = seed ; statePtr ->)",
    "insertText": "extSecret(const unsigned char*)"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_64bits_reset_internal(statePtr, 0, XXH3_kSecret, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_64bits_reset_internal(statePtr, 0, secret, secretSize)"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_64bits_reset_internal(statePtr, seed, NULL, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(nbStripes <= nbStripesPerBlock)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(*nbStripesSoFarPtr < nbStripesPerBlock)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (size_t const nbStripesToEndofBlock = nbStripesPerBlock -* nbStripesSoFarPtr ; size_t const nbStripesAfterBlock = nbStripes - nbStripesToEndofBlock ;)",
    "insertText": "XXH3_accumulate(acc, input, secret + nbStripesSoFarPtr[0] * XXH_SECRET_CONSUME_RATE, nbStripesToEndofBlock, f_acc512)"
  },
  {
    "label": "f_scramble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f_scramble(acc, secret + secretLimit)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate(acc, input + nbStripesToEndofBlock * XXH_STRIPE_LEN, secret, nbStripesAfterBlock, f_acc512)"
  },
  {
    "label": "XXH3_accumulate()",
    "kind": "Method",
    "detail": "Function (* nbStripesSoFarPtr = nbStripesAfterBlock ; } else {)",
    "insertText": "XXH3_accumulate(acc, input, secret + nbStripesSoFarPtr[0] * XXH_SECRET_CONSUME_RATE, nbStripes, f_acc512)"
  },
  {
    "label": "XXH3_update()",
    "kind": "Method",
    "detail": "Function (* nbStripesSoFarPtr + = nbStripes ; } } XXH_FORCE_INLINE XXH_errorcode)",
    "insertText": "XXH3_update(XXH3_state_t* state, const xxh_u8* input, size_t len, XXH3_f_accumulate_512 f_acc512, XXH3_f_scrambleAcc f_scramble)"
  },
  {
    "label": "secret()",
    "kind": "Method",
    "detail": "Function (customSecret : state->extSecret)",
    "insertText": "secret(state->extSecret == NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (state -> totalLen + = len ;)",
    "insertText": "if(state->bufferedSize + len <= XXH3_INTERNALBUFFER_SIZE)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy(state->buffer + state->bufferedSize, input, len)"
  },
  {
    "label": "bufferedSize()",
    "kind": "Method",
    "detail": "Function (state ->)",
    "insertText": "bufferedSize(XXH32_hash_t)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (size_t const loadSize = XXH3_INTERNALBUFFER_SIZE - state -> bufferedSize ;)",
    "insertText": "XXH_memcpy(state->buffer + state->bufferedSize, input, loadSize)"
  },
  {
    "label": "XXH3_consumeStripes()",
    "kind": "Method",
    "detail": "Function (input + = loadSize ;)",
    "insertText": "XXH3_consumeStripes(state->acc, &state->nbStripesSoFar, state->nbStripesPerBlock, state->buffer, XXH3_INTERNALBUFFER_STRIPES, secret, state->secretLimit, f_acc512, f_scramble)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (state -> bufferedSize = 0 ; })",
    "insertText": "XXH_ASSERT(input < bEnd)"
  },
  {
    "label": "XXH3_consumeStripes()",
    "kind": "Method",
    "detail": "Function (const xxh_u8* const limit = bEnd - XXH3_INTERNALBUFFER_SIZE ; do {)",
    "insertText": "XXH3_consumeStripes(state->acc, &state->nbStripesSoFar, state->nbStripesPerBlock, input, XXH3_INTERNALBUFFER_STRIPES, secret, state->secretLimit, f_acc512, f_scramble)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (input + = XXH3_INTERNALBUFFER_SIZE ; })",
    "insertText": "while(input<limit)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(state->buffer + sizeof(state->buffer) - XXH_STRIPE_LEN, input - XXH_STRIPE_LEN, XXH_STRIPE_LEN)"
  },
  {
    "label": "XXH_memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_memcpy(state->buffer, input, (size_t)(bEnd-input))"
  },
  {
    "label": "bufferedSize()",
    "kind": "Method",
    "detail": "Function (state ->)",
    "insertText": "bufferedSize(XXH32_hash_t)(bEnd-input)"
  },
  {
    "label": "XXH3_64bits_update()",
    "kind": "Method",
    "detail": "Function (} return XXH_OK ; } XXH_errorcode)",
    "insertText": "XXH3_64bits_update(XXH3_state_t* state, const void* input, size_t len)"
  },
  {
    "label": "XXH3_digest_long()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE void)",
    "insertText": "XXH3_digest_long(XXH64_hash_t* acc, const XXH3_state_t* state, const unsigned char* secret)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(acc, state->acc, sizeof(state->acc))"
  },
  {
    "label": "nbStripes()",
    "kind": "Method",
    "detail": "Function (size_t const)",
    "insertText": "nbStripes(state->bufferedSize - 1)"
  },
  {
    "label": "XXH3_consumeStripes()",
    "kind": "Method",
    "detail": "Function (size_t nbStripesSoFar = state -> nbStripesSoFar ;)",
    "insertText": "XXH3_consumeStripes(acc, &nbStripesSoFar, state->nbStripesPerBlock, state->buffer, nbStripes, secret, state->secretLimit, XXH3_accumulate_512, XXH3_scrambleAcc)"
  },
  {
    "label": "XXH3_accumulate_512()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate_512(acc, state->buffer + state->bufferedSize - XXH_STRIPE_LEN, secret + state->secretLimit - XXH_SECRET_LASTACC_START)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (} else { xxh_u8 lastStripe [ XXH_STRIPE_LEN ] ; size_t const catchupSize = XXH_STRIPE_LEN - state -> bufferedSize ;)",
    "insertText": "XXH_ASSERT(state->bufferedSize > 0)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(lastStripe, state->buffer + sizeof(state->buffer) - catchupSize, catchupSize)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(lastStripe + catchupSize, state->buffer, state->bufferedSize)"
  },
  {
    "label": "XXH3_accumulate_512()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_accumulate_512(acc, lastStripe, secret + state->secretLimit - XXH_SECRET_LASTACC_START)"
  },
  {
    "label": "XXH3_64bits_digest()",
    "kind": "Method",
    "detail": "Function (} } XXH64_hash_t)",
    "insertText": "XXH3_64bits_digest(const XXH3_state_t* state)"
  },
  {
    "label": "XXH3_digest_long()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_digest_long(acc, state, secret)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(state->seed) return XXH3_64bits_withSeed(state->buffer, (size_t)state->totalLen, state->seed)"
  },
  {
    "label": "XXH_MIN()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "XXH_MIN(x, y) (((x) > (y)) ? (y) : (x)) XXH_PUBLIC_API void XXH3_generateSecret(void* secretBuffer, const void* customSeed, size_t customSeedSize)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(secretBuffer != NULL)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(secretBuffer, XXH3_kSecret, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (size_t const nbSegments = XXH_SECRET_DEFAULT_SIZE / segmentSize ; XXH128_canonical_t scrambler ; XXH64_hash_t seeds [ 1 2 ] ; size_t segnb ;)",
    "insertText": "XXH_ASSERT(nbSegments == 12)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(segmentSize * nbSegments == XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH128_canonicalFromHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH128_canonicalFromHash(&scrambler, XXH128(customSeed, customSeedSize, 0))"
  },
  {
    "label": "XXH_MIN()",
    "kind": "Method",
    "detail": "Function ({ size_t toFill =)",
    "insertText": "XXH_MIN(customSeedSize, sizeof(seeds))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (size_t filled = toFill ;)",
    "insertText": "memcpy(seeds, customSeed, toFill)"
  },
  {
    "label": "XXH_MIN()",
    "kind": "Method",
    "detail": "Function (toFill =)",
    "insertText": "XXH_MIN(filled, sizeof(seeds) - filled)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy((char*)seeds + filled, seeds, toFill)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (filled + = toFill ; } })",
    "insertText": "memcpy(secretBuffer, &scrambler, sizeof(scrambler))"
  },
  {
    "label": "XXH128_canonicalFromHash()",
    "kind": "Method",
    "detail": "Function (size_t const segmentStart = segnb* segmentSize ; XXH128_canonical_t segment ;)",
    "insertText": "XXH128_canonicalFromHash(&segment, XXH128(&scrambler, sizeof(scrambler), XXH_readLE64(seeds + segnb) + segnb))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy((char*)secretBuffer + segmentStart, &segment, sizeof(segment))"
  },
  {
    "label": "XXH3_len_1to3_128b()",
    "kind": "Method",
    "detail": "Function (} } } XXH_FORCE_INLINE XXH128_hash_t)",
    "insertText": "XXH3_len_1to3_128b(const xxh_u8* input, size_t len, const xxh_u8* secret, XXH64_hash_t seed)"
  },
  {
    "label": "combinedl()",
    "kind": "Method",
    "detail": "Function ({ xxh_u8 const c1 = input [ 0 ] ; xxh_u8 const c2 = input [ len>> 1 ] ; xxh_u8 const c3 = input [ len - 1 ] ; xxh_u32 const)",
    "insertText": "combinedl((xxh_u32)c1 <<16) | ((xxh_u32)c2 << 24) | ((xxh_u32)c3 << 0) | ((xxh_u32)len << 8)"
  },
  {
    "label": "XXH_rotl32()",
    "kind": "Method",
    "detail": "Function (xxh_u32 const combinedh =)",
    "insertText": "XXH_rotl32(XXH_swap32(combinedl), 13)"
  },
  {
    "label": "bitflipl()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflipl(XXH_readLE32(secret) ^ XXH_readLE32(secret+4))"
  },
  {
    "label": "bitfliph()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitfliph(XXH_readLE32(secret+8) ^ XXH_readLE32(secret+12))"
  },
  {
    "label": "keyed_lo()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "keyed_lo(xxh_u64)"
  },
  {
    "label": "keyed_hi()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "keyed_hi(xxh_u64)"
  },
  {
    "label": "XXH64_avalanche()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t h128 ; h128 . low64 =)",
    "insertText": "XXH64_avalanche(keyed_lo)"
  },
  {
    "label": "XXH64_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . high64 =)",
    "insertText": "XXH64_avalanche(keyed_hi)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(4 <= len && len <= 8)"
  },
  {
    "label": "input_lo()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const input_64 =)",
    "insertText": "input_lo((xxh_u64)input_hi << 32)"
  },
  {
    "label": "bitflip()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitflip(XXH_readLE64(secret+16) ^ XXH_readLE64(secret+24))"
  },
  {
    "label": "XXH_mult64to128()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const keyed = input_64 ^ bitflip ; XXH128_hash_t m128 =)",
    "insertText": "XXH_mult64to128(keyed, XXH_PRIME64_1 + (len << 2))"
  },
  {
    "label": "high64()",
    "kind": "Method",
    "detail": "Function (m128 .)",
    "insertText": "high64(m128.low64 << 1)"
  },
  {
    "label": "low64()",
    "kind": "Method",
    "detail": "Function (m128 .)",
    "insertText": "low64(m128.high64 >> 3)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (m128 . low64 =)",
    "insertText": "XXH_xorshift64(m128.low64, 35)"
  },
  {
    "label": "XXH_xorshift64()",
    "kind": "Method",
    "detail": "Function (m128 . low64* = 0 x9FB21C651E98DF25ULL ; m128 . low64 =)",
    "insertText": "XXH_xorshift64(m128.low64, 28)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (m128 . high64 =)",
    "insertText": "XXH3_avalanche(m128.high64)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(9 <= len && len <= 16)"
  },
  {
    "label": "bitflipl()",
    "kind": "Method",
    "detail": "Function ({ xxh_u64 const)",
    "insertText": "bitflipl(XXH_readLE64(secret+32) ^ XXH_readLE64(secret+40))"
  },
  {
    "label": "bitfliph()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const)",
    "insertText": "bitfliph(XXH_readLE64(secret+48) ^ XXH_readLE64(secret+56))"
  },
  {
    "label": "XXH_mult64to128()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t m128 =)",
    "insertText": "XXH_mult64to128(input_lo ^ input_hi ^ bitflipl, XXH_PRIME64_1)"
  },
  {
    "label": "low64()",
    "kind": "Method",
    "detail": "Function (m128 .)",
    "insertText": "low64(xxh_u64)(len - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (input_hi ^ = bitfliph ;)",
    "insertText": "if(sizeof(void *) < sizeof(xxh_u64))"
  },
  {
    "label": "high64()",
    "kind": "Method",
    "detail": "Function (m128 .)",
    "insertText": "high64(input_hi & 0xFFFFFFFF00000000ULL) + XXH_mult32to64((xxh_u32)input_hi, XXH_PRIME32_2)"
  },
  {
    "label": "XXH_mult32to64()",
    "kind": "Method",
    "detail": "Function (} else { m128 . high64 + = input_hi +)",
    "insertText": "XXH_mult32to64((xxh_u32)input_hi, XXH_PRIME32_2 - 1)"
  },
  {
    "label": "XXH_swap64()",
    "kind": "Method",
    "detail": "Function (} m128 . low64 ^ =)",
    "insertText": "XXH_swap64(m128.high64)"
  },
  {
    "label": "XXH_mult64to128()",
    "kind": "Method",
    "detail": "Function ({ XXH128_hash_t h128 =)",
    "insertText": "XXH_mult64to128(m128.low64, XXH_PRIME64_2)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . high64 + = m128 . high64* XXH_PRIME64_2 ; h128 . low64 =)",
    "insertText": "XXH3_avalanche(h128.low64)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . high64 =)",
    "insertText": "XXH3_avalanche(h128.high64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "if(len > 8) return XXH3_len_9to16_128b(input, len, secret, seed)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function ({ XXH128_hash_t h128 ; xxh_u64 const bitflipl =)",
    "insertText": "XXH_readLE64(secret+64) ^ XXH_readLE64(secret+72)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (xxh_u64 const bitfliph =)",
    "insertText": "XXH_readLE64(secret+80) ^ XXH_readLE64(secret+88)"
  },
  {
    "label": "XXH64_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . low64 =)",
    "insertText": "XXH64_avalanche(seed ^ bitflipl)"
  },
  {
    "label": "XXH64_avalanche()",
    "kind": "Method",
    "detail": "Function (h128 . high64 =)",
    "insertText": "XXH64_avalanche(seed ^ bitfliph)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc . low64 + =)",
    "insertText": "XXH3_mix16B(input_1, secret+0, seed)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (acc . low64 ^ =)",
    "insertText": "XXH_readLE64(input_2) + XXH_readLE64(input_2 + 8)"
  },
  {
    "label": "XXH3_mix16B()",
    "kind": "Method",
    "detail": "Function (acc . high64 + =)",
    "insertText": "XXH3_mix16B(input_2, secret+16, seed)"
  },
  {
    "label": "XXH_readLE64()",
    "kind": "Method",
    "detail": "Function (acc . high64 ^ =)",
    "insertText": "XXH_readLE64(input_1) + XXH_readLE64(input_1 + 8)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (acc =)",
    "insertText": "XXH128_mix32B(acc, input+48, input+len-64, secret+96, seed)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH128_mix32B(acc, input+32, input+len-48, secret+64, seed)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH128_mix32B(acc, input+16, input+len-32, secret+32, seed)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH128_mix32B(acc, input, input+len-16, secret, seed)"
  },
  {
    "label": "high64()",
    "kind": "Method",
    "detail": "Function ({ XXH128_hash_t h128 ; h128 . low64 = acc . low64 + acc . high64 ; h128 .)",
    "insertText": "high64(acc.low64 * XXH_PRIME64_1) + (acc.high64 * XXH_PRIME64_4) + ((len - seed) * XXH_PRIME64_2)"
  },
  {
    "label": "high64()",
    "kind": "Method",
    "detail": "Function (h128 .)",
    "insertText": "high64(XXH64_hash_t)0 - XXH3_avalanche(h128.high64)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ; acc . low64 = len* XXH_PRIME64_1 ; acc . high64 = 0 ;)",
    "insertText": "for(i=0; i<4; i++)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (acc =)",
    "insertText": "XXH128_mix32B(acc, input + (32 * i), input + (32 * i) + 16, secret + (32 * i), seed)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (} acc . low64 =)",
    "insertText": "XXH3_avalanche(acc.low64)"
  },
  {
    "label": "XXH3_avalanche()",
    "kind": "Method",
    "detail": "Function (acc . high64 =)",
    "insertText": "XXH3_avalanche(acc.high64)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(nbRounds >= 4)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (acc =)",
    "insertText": "XXH128_mix32B(acc, input + (32 * i), input + (32 * i) + 16, secret + XXH3_MIDSIZE_STARTOFFSET + (32 * (i - 4)), seed)"
  },
  {
    "label": "XXH128_mix32B()",
    "kind": "Method",
    "detail": "Function (} acc =)",
    "insertText": "XXH128_mix32B(acc, input + len - 16, input + len - 32, secret + XXH3_SECRET_SIZE_MIN - XXH3_MIDSIZE_LASTOFFSET - 16, 0ULL - seed)"
  },
  {
    "label": "XXH3_hashLong_internal_loop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_hashLong_internal_loop(acc, (const xxh_u8*)input, len, secret, secretSize, f_acc512, f_scramble)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function ({ XXH128_hash_t h128 ; h128 . low64 =)",
    "insertText": "XXH3_mergeAccs(acc, secret + XXH_SECRET_MERGEACCS_START, (xxh_u64)len * XXH_PRIME64_1)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function (h128 . high64 =)",
    "insertText": "XXH3_mergeAccs(acc, secret + secretSize - sizeof(acc) - XXH_SECRET_MERGEACCS_START, ~((xxh_u64)len * XXH_PRIME64_2))"
  },
  {
    "label": "XXH3_hashLong_128b_withSecret()",
    "kind": "Method",
    "detail": "Function (} XXH_NO_INLINE XXH128_hash_t)",
    "insertText": "XXH3_hashLong_128b_withSecret(const void* XXH_RESTRICT input, size_t len, XXH64_hash_t seed64, const void* XXH_RESTRICT secret, size_t secretLen)"
  },
  {
    "label": "XXH3_hashLong_128b_withSeed_internal()",
    "kind": "Method",
    "detail": "Function (} XXH_FORCE_INLINE XXH128_hash_t)",
    "insertText": "XXH3_hashLong_128b_withSeed_internal(const void* XXH_RESTRICT input, size_t len, XXH64_hash_t seed64, XXH3_f_accumulate_512 f_acc512, XXH3_f_scrambleAcc f_scramble, XXH3_f_initCustomSecret f_initSec)"
  },
  {
    "label": "f_initSec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f_initSec(secret, seed64)"
  },
  {
    "label": "XXH3_hashLong_128b_withSeed()",
    "kind": "Method",
    "detail": "Function (} } XXH_NO_INLINE XXH128_hash_t)",
    "insertText": "XXH3_hashLong_128b_withSeed(const void* input, size_t len, XXH64_hash_t seed64, const void* XXH_RESTRICT secret, size_t secretLen)"
  },
  {
    "label": "XXH128_hash_t()",
    "kind": "Method",
    "detail": "Function (} typedef)",
    "insertText": "XXH128_hash_t(*XXH3_hashLong128_f)(const void* XXH_RESTRICT, size_t, XXH64_hash_t, const void* XXH_RESTRICT, size_t)"
  },
  {
    "label": "XXH3_128bits_internal()",
    "kind": "Method",
    "detail": "Function (XXH_FORCE_INLINE XXH128_hash_t)",
    "insertText": "XXH3_128bits_internal(const void* input, size_t len, XXH64_hash_t seed64, const void* XXH_RESTRICT secret, size_t secretLen, XXH3_hashLong128_f f_hl128)"
  },
  {
    "label": "XXH3_128bits()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH3_128bits(const void* input, size_t len)"
  },
  {
    "label": "XXH3_128bits_withSecret()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH3_128bits_withSecret(const void* input, size_t len, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_128bits_withSeed()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH3_128bits_withSeed(const void* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH128()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH128(const void* input, size_t len, XXH64_hash_t seed)"
  },
  {
    "label": "XXH3_128bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "XXH3_128bits_reset_internal(XXH3_state_t* statePtr, XXH64_hash_t seed, const void* secret, size_t secretSize)"
  },
  {
    "label": "XXH3_64bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_64bits_reset_internal(statePtr, seed, secret, secretSize)"
  },
  {
    "label": "XXH3_128bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_128bits_reset_internal(statePtr, 0, XXH3_kSecret, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH3_128bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_128bits_reset_internal(statePtr, 0, secret, secretSize)"
  },
  {
    "label": "XXH3_128bits_reset_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH3_128bits_reset_internal(statePtr, seed, NULL, XXH_SECRET_DEFAULT_SIZE)"
  },
  {
    "label": "XXH3_128bits_digest()",
    "kind": "Method",
    "detail": "Function (} XXH128_hash_t)",
    "insertText": "XXH3_128bits_digest(const XXH3_state_t* state)"
  },
  {
    "label": "XXH_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_ASSERT(state->secretLimit + XXH_STRIPE_LEN >= sizeof(acc) + XXH_SECRET_MERGEACCS_START)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function ({ XXH128_hash_t h128 ; h128 . low64 =)",
    "insertText": "XXH3_mergeAccs(acc, secret + XXH_SECRET_MERGEACCS_START, (xxh_u64)state->totalLen * XXH_PRIME64_1)"
  },
  {
    "label": "XXH3_mergeAccs()",
    "kind": "Method",
    "detail": "Function (h128 . high64 =)",
    "insertText": "XXH3_mergeAccs(acc, secret + state->secretLimit + XXH_STRIPE_LEN - sizeof(acc) - XXH_SECRET_MERGEACCS_START, ~((xxh_u64)state->totalLen * XXH_PRIME64_2))"
  },
  {
    "label": "h1()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const)",
    "insertText": "h1(const XXH128_hash_t*)"
  },
  {
    "label": "h2()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t const)",
    "insertText": "h2(const XXH128_hash_t*)"
  },
  {
    "label": "hcmp()",
    "kind": "Method",
    "detail": "Function (int const)",
    "insertText": "hcmp(h1.high64 > h2.high64) - (h2.high64 > h1.high64)"
  },
  {
    "label": "XXH_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XXH_STATIC_ASSERT(sizeof(XXH128_canonical_t) == sizeof(XXH128_hash_t))"
  },
  {
    "label": "XXH_swap64()",
    "kind": "Method",
    "detail": "Function (hash . high64 =)",
    "insertText": "XXH_swap64(hash.high64)"
  },
  {
    "label": "XXH_swap64()",
    "kind": "Method",
    "detail": "Function (hash . low64 =)",
    "insertText": "XXH_swap64(hash.low64)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memcpy(dst, &hash.high64, sizeof(hash.high64))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy((char*)dst + sizeof(hash.high64), &hash.low64, sizeof(hash.low64))"
  },
  {
    "label": "XXH_readBE64()",
    "kind": "Method",
    "detail": "Function (XXH128_hash_t h ; h . high64 =)",
    "insertText": "XXH_readBE64(src)"
  },
  {
    "label": "XXH_readBE64()",
    "kind": "Method",
    "detail": "Function (h . low64 =)",
    "insertText": "XXH_readBE64(src->digest + 8)"
  }
]