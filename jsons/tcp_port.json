[
  {
    "label": "TCPConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCPConnection"
  },
  {
    "label": "TCPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCPPort"
  },
  {
    "label": "Incoming",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Incoming"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_TCP_PORT_H_ # define P2P_BASE_TCP_PORT_H_ # include<list> # include<memory> # include<string> # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" p2p / base / connection . h \" # include \" p2p / base / port . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / containers / flat_map . h \" namespace cricket { class TCPConnection ; class TCPPort : public Port { public : std::unique_ptr<TCPPort>)",
    "insertText": "Create(rtc::Thread* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, uint16_t min_port, uint16_t max_port, absl::string_view username, absl::string_view password, bool allow_listen, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "TCPPort()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCPPort()"
  },
  {
    "label": "CreateConnection()",
    "kind": "Method",
    "detail": "Function (Connection*)",
    "insertText": "CreateConnection(const Candidate& address, CandidateOrigin origin)"
  },
  {
    "label": "PrepareAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareAddress()"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(rtc::Socket::Option opt, int* value)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "SupportsProtocol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsProtocol(absl::string_view protocol)"
  },
  {
    "label": "GetProtocol()",
    "kind": "Method",
    "detail": "Function (ProtocolType)",
    "insertText": "GetProtocol()"
  },
  {
    "label": "TCPPort()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TCPPort(rtc::Thread* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, uint16_t min_port, uint16_t max_port, absl::string_view username, absl::string_view password, bool allow_listen, const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* data, size_t size, const rtc::SocketAddress& addr, const rtc::PacketOptions& options, bool payload)"
  },
  {
    "label": "OnNewConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewConnection(rtc::AsyncListenSocket* socket, rtc::AsyncPacketSocket* new_socket)"
  },
  {
    "label": "TryCreateServerSocket()",
    "kind": "Method",
    "detail": "Function (private : struct Incoming { rtc::SocketAddress addr ; rtc::AsyncPacketSocket* socket ; } ; void)",
    "insertText": "TryCreateServerSocket()"
  },
  {
    "label": "GetIncoming()",
    "kind": "Method",
    "detail": "Function (rtc::AsyncPacketSocket*)",
    "insertText": "GetIncoming(const rtc::SocketAddress& addr, bool remove = false)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t size, const rtc::SocketAddress& remote_addr, const int64_t& packet_time_us)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(rtc::AsyncPacketSocket* socket, const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "TCPConnection()",
    "kind": "Method",
    "detail": "Function (bool allow_listen_ ; std::unique_ptr<rtc::AsyncListenSocket> listen_socket_ ; webrtc::flat_map<rtc::Socket::Option,int> socket_options_ ; int error_ ; std::list<Incoming> incoming_ ; class TCPConnection ; } ; class TCPConnection : public Connection,public sigslot::has_slots<> { public :)",
    "insertText": "TCPConnection(rtc::WeakPtr<Port> tcp_port, const Candidate& candidate, rtc::AsyncPacketSocket* socket = nullptr)"
  },
  {
    "label": "TCPConnection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TCPConnection()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* data, size_t size, const rtc::PacketOptions& options)"
  },
  {
    "label": "socket()",
    "kind": "Method",
    "detail": "Function (rtc::AsyncPacketSocket*)",
    "insertText": "socket()"
  },
  {
    "label": "reconnection_timeout()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "reconnection_timeout()"
  },
  {
    "label": "OnConnectionRequestResponse()",
    "kind": "Method",
    "detail": "Function (reconnection_timeout_ = timeout_in_ms ; } protected : void)",
    "insertText": "OnConnectionRequestResponse(StunRequest* req, StunMessage* response)"
  },
  {
    "label": "MaybeReconnect()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MaybeReconnect()"
  },
  {
    "label": "CreateOutgoingTcpSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOutgoingTcpSocket()"
  },
  {
    "label": "ConnectSocketSignals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectSocketSignals(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "OnConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnect(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "OnClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClose(rtc::AsyncPacketSocket* socket, int error)"
  },
  {
    "label": "tcp_port()",
    "kind": "Method",
    "detail": "Function (TCPPort*)",
    "insertText": "tcp_port()"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(port()->GetProtocol(), PROTO_TCP)"
  }
]