[
  {
    "label": "TCPConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCPConnection"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "TCPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCPPort"
  },
  {
    "label": "Incoming",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Incoming"
  },
  {
    "label": "TCPConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCPConnection"
  },
  {
    "label": "TCPConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCPConnection"
  },
  {
    "label": "TCPPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCPPort"
  },
  {
    "label": "TCPPort()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "TCPPort(rtc::Thread* thread,\n          rtc::PacketSocketFactory* factory,\n          const rtc::Network* network,\n          uint16_t min_port,\n          uint16_t max_port,\n          absl::string_view username,\n          absl::string_view password,\n          bool allow_listen,\n          const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "OnNewConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewConnection(rtc::AsyncListenSocket* socket,\n                       rtc::AsyncPacketSocket* new_socket)"
  },
  {
    "label": "TryCreateServerSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryCreateServerSocket()"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket,\n                    const char* data,\n                    size_t size,\n                    const rtc::SocketAddress& remote_addr,\n                    const int64_t& packet_time_us)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "TCPConnection()",
    "kind": "Method",
    "detail": "Function (specified)",
    "insertText": "TCPConnection(rtc::WeakPtr<Port> tcp_port,\n                const Candidate& candidate,\n                rtc::AsyncPacketSocket* socket = nullptr)"
  },
  {
    "label": "MaybeReconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeReconnect()"
  },
  {
    "label": "CreateOutgoingTcpSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOutgoingTcpSocket()"
  },
  {
    "label": "ConnectSocketSignals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectSocketSignals(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "OnConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnect(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "OnClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClose(rtc::AsyncPacketSocket* socket, int error)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket,\n                    const char* data,\n                    size_t size,\n                    const rtc::SocketAddress& remote_addr,\n                    const int64_t& packet_time_us)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(rtc::AsyncPacketSocket* socket)"
  }
]