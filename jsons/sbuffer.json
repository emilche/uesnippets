[
  {
    "label": "msgpack_sbuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "msgpack_sbuffer"
  },
  {
    "label": "msgpack_sbuffer_init()",
    "kind": "Method",
    "detail": "Function (# ifndef MSGPACK_SBUFFER_H # define MSGPACK_SBUFFER_H # include<stdlib . h> # include<string . h> # ifdef __cplusplus \" C \" { # endif typedef struct msgpack_sbuffer { size_t size ; char* data ; size_t alloc ; } msgpack_sbuffer ; void)",
    "insertText": "msgpack_sbuffer_init(msgpack_sbuffer* sbuf)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(sbuf, 0, sizeof(msgpack_sbuffer))"
  },
  {
    "label": "msgpack_sbuffer_destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "msgpack_sbuffer_destroy(msgpack_sbuffer* sbuf)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(sbuf->data)"
  },
  {
    "label": "msgpack_sbuffer_new()",
    "kind": "Method",
    "detail": "Function (} msgpack_sbuffer*)",
    "insertText": "msgpack_sbuffer_new(void)"
  },
  {
    "label": "msgpack_sbuffer_free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "msgpack_sbuffer_free(msgpack_sbuffer* sbuf)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(sbuf)"
  },
  {
    "label": "msgpack_sbuffer_write()",
    "kind": "Method",
    "detail": "Function (} # ifndef MSGPACK_SBUFFER_INIT_SIZE # define MSGPACK_SBUFFER_INIT_SIZE 8 1 9 2 # endif int)",
    "insertText": "msgpack_sbuffer_write(void* data, const char* buf, size_t len)"
  },
  {
    "label": "sbuf()",
    "kind": "Method",
    "detail": "Function (msgpack_sbuffer*)",
    "insertText": "sbuf(msgpack_sbuffer*)"
  },
  {
    "label": "nsize()",
    "kind": "Method",
    "detail": "Function (alloc * 2 : MSGPACK_SBUFFER_INIT_SIZE)",
    "insertText": "nsize(sbuf->alloc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t tmp_nsize = nsize* 2 ;)",
    "insertText": "if(tmp_nsize <= nsize)"
  },
  {
    "label": "realloc()",
    "kind": "Method",
    "detail": "Function (nsize = sbuf -> size + len ; break ; } nsize = tmp_nsize ; } tmp =)",
    "insertText": "realloc(sbuf->data, nsize)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (sbuf -> alloc = nsize ; })",
    "insertText": "memcpy(sbuf->data + sbuf->size, buf, len)"
  },
  {
    "label": "msgpack_sbuffer_release()",
    "kind": "Method",
    "detail": "Function (sbuf -> size + = len ; return 0 ; } char*)",
    "insertText": "msgpack_sbuffer_release(msgpack_sbuffer* sbuf)"
  },
  {
    "label": "msgpack_sbuffer_clear()",
    "kind": "Method",
    "detail": "Function (char* tmp = sbuf -> data ; sbuf -> size = 0 ; sbuf -> data = NULL ; sbuf -> alloc = 0 ; return tmp ; } void)",
    "insertText": "msgpack_sbuffer_clear(msgpack_sbuffer* sbuf)"
  }
]