[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ISpatialUpscaler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialUpscaler"
  },
  {
    "label": "FInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputs"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "GetUpscaleMethod()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" OverridePassSequence . h \" # include \" PostProcess / LensDistortion . h \" enum class EUpscaleMethod : uint8 { Nearest,Bilinear,Directional,CatmullRom,Lanczos,Gaussian,SmoothStep,MAX } ; EUpscaleMethod)",
    "insertText": "GetUpscaleMethod()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (enum class EUpscaleStage { PrimaryToSecondary,PrimaryToOutput,SecondaryToOutput,MAX } ; class ISpatialUpscaler : public ISceneViewFamilyExtention { public : struct FInputs { FScreenPassRenderTarget OverrideOutput ; FScreenPassTexture SceneColor ; EUpscaleStage Stage = EUpscaleStage::MAX ; } ; const TCHAR*)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "Fork_GameThread()",
    "kind": "Method",
    "detail": "Function (ISpatialUpscaler*)",
    "insertText": "Fork_GameThread(const class FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "AddPasses()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddPasses(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FInputs& PassInputs)"
  },
  {
    "label": "AddDefaultUpscalePass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddDefaultUpscalePass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FInputs& PassInputs, EUpscaleMethod Method, FLensDistortionLUT LensDistortionLUT = FLensDistortionLUT())"
  }
]