[
  {
    "label": "Chunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chunk"
  },
  {
    "label": "ChunkConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChunkConfig"
  },
  {
    "label": "Chunk()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_CHUNK_H_ # define NET_DCSCTP_PACKET_CHUNK_CHUNK_H_ # include<stddef . h> # include<sys / types . h> # include<cstdint> # include<iterator> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / algorithm / container . h \" # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / data . h \" # include \" net / dcsctp / packet / error_cause / error_cause . h \" # include \" net / dcsctp / packet / parameter / parameter . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { class Chunk { public :)",
    "insertText": "Chunk()"
  },
  {
    "label": "Chunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chunk(Chunk&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Chunk&)",
    "insertText": "operator(Chunk&& other)"
  },
  {
    "label": "Chunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Chunk(const Chunk&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Chunk&)",
    "insertText": "operator(const Chunk&)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "DebugConvertChunkToString()",
    "kind": "Method",
    "detail": "Function (} ; std::string)",
    "insertText": "DebugConvertChunkToString(rtc::ArrayView<const uint8_t> data)"
  }
]