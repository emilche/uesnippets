[
  {
    "label": "FSceneDownsampleChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneDownsampleChain"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLensFlareInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLensFlareInputs"
  },
  {
    "label": "GetLensFlareQuality()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" class FSceneDownsampleChain ; enum class ELensFlareQuality : uint32 { Disabled,Low,High,VeryHigh,MAX } ; ELensFlareQuality)",
    "insertText": "GetLensFlareQuality()"
  },
  {
    "label": "IsLensFlaresEnabled()",
    "kind": "Method",
    "detail": "Function (struct FLensFlareInputs { const uint32 LensFlareCountMax = 8 ; FScreenPassTextureSlice Bloom ; FScreenPassTextureSlice Flare ; FRHITexture* BokehShapeTexture ; uint32 LensFlareCount = LensFlareCountMax ; TArrayView<const FLinearColor> TintColorsPerFlare ; FLinearColor TintColor ; float BokehSizePercent = 0 . 0 f ; float Intensity = 1 . 0 f ; float Threshold = 1 . 0 f ; bool bCompositeWithBloom = true ; } ; using FLensFlareOutputs = FScreenPassTexture ; bool)",
    "insertText": "IsLensFlaresEnabled(const FViewInfo& View)"
  },
  {
    "label": "AddLensFlaresPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddLensFlaresPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, FScreenPassTexture Bloom, FScreenPassTextureSlice QualitySceneDownsample, FScreenPassTextureSlice DefaultSceneDownsample)"
  }
]