[
  {
    "label": "FNotThreadSafeNotCheckedDelegateMode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotThreadSafeNotCheckedDelegateMode"
  },
  {
    "label": "FThreadSafeDelegateMode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadSafeDelegateMode"
  },
  {
    "label": "FNotThreadSafeDelegateMode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotThreadSafeDelegateMode"
  },
  {
    "label": "TDelegateAccessHandlerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDelegateAccessHandlerBase"
  },
  {
    "label": "TWriteLockedDelegateAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteLockedDelegateAllocation"
  },
  {
    "label": "FReadAccessScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadAccessScope"
  },
  {
    "label": "FWriteAccessScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteAccessScope"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" Misc / MTAccessDetector . h \" # include \" Misc / TransactionallySafeCriticalSection . h \" # include \" Misc / TransactionallySafeScopeLock . h \" # include \" Misc / ScopeLock . h \" # include \" AutoRTFM / AutoRTFM . h \" # if !)",
    "insertText": "defined(UE_DETECT_DELEGATES_RACE_CONDITIONS)"
  },
  {
    "label": "GetReadAccessScope()",
    "kind": "Method",
    "detail": "Function (struct FThreadSafeDelegateMode ; struct FNotThreadSafeDelegateMode ; template<ThreadSafetyMode> class TDelegateAccessHandlerBase ; template<ThreadSafetyMode> struct TWriteLockedDelegateAllocation ; template<> class TDelegateAccessHandlerBase<FNotThreadSafeNotCheckedDelegateMode> { struct TWriteLockedDelegateAllocation<FNotThreadSafeNotCheckedDelegateMode> ; protected : struct FReadAccessScope { } ; struct FWriteAccessScope { } ; [ [ nodiscard ] ] FReadAccessScope)",
    "insertText": "GetReadAccessScope()"
  },
  {
    "label": "FReadAccessScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReadAccessScope(const FMRSWRecursiveAccessDetector& InAccessDetector) : DestructionSentinel(FMRSWRecursiveAccessDetector::EAccessType::Reader)"
  },
  {
    "label": "AcquireReadAccess()",
    "kind": "Method",
    "detail": "Function (DestructionSentinel . Accessor =& InAccessDetector ; DestructionSentinel . Accessor ->)",
    "insertText": "AcquireReadAccess(DestructionSentinel)"
  },
  {
    "label": "FReadAccessScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FReadAccessScope()"
  },
  {
    "label": "ReleaseReadAccess()",
    "kind": "Method",
    "detail": "Function (DestructionSentinel . Accessor ->)",
    "insertText": "ReleaseReadAccess(DestructionSentinel)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} class FWriteAccessScope { public :)",
    "insertText": "UE_NONCOPYABLE(FWriteAccessScope)"
  },
  {
    "label": "FWriteAccessScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWriteAccessScope(FMRSWRecursiveAccessDetector& InAccessDetector) : DestructionSentinel(FMRSWRecursiveAccessDetector::EAccessType::Writer)"
  },
  {
    "label": "AcquireWriteAccess()",
    "kind": "Method",
    "detail": "Function (DestructionSentinel . Accessor =& InAccessDetector ; InAccessDetector .)",
    "insertText": "AcquireWriteAccess(DestructionSentinel)"
  },
  {
    "label": "FWriteAccessScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FWriteAccessScope()"
  },
  {
    "label": "FMRSWRecursiveAccessDetector()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FMRSWRecursiveAccessDetector(DestructionSentinel.Accessor)->ReleaseWriteAccess(DestructionSentinel)"
  },
  {
    "label": "GetWriteAccessScope()",
    "kind": "Method",
    "detail": "Function (} } private : FMRSWRecursiveAccessDetector::FDestructionSentinel DestructionSentinel ; } ; [ [ nodiscard ] ] FWriteAccessScope)",
    "insertText": "GetWriteAccessScope()"
  }
]