[
  {
    "label": "WaveFormatHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WaveFormatHeader"
  },
  {
    "label": "ADPCMFormatHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ADPCMFormatHeader"
  },
  {
    "label": "FADPCMAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FADPCMAudioInfo"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Audio . h \" # include \" AudioDecompress . h \" # include \" Sound / SoundWave . h \" # include \" ContentStreaming . h \" # define NUM_ADAPTATION_TABLE 1 6 # define NUM_ADAPTATION_COEFF 7 # define WAVE_FORMAT_LPCM 1 # ifndef WAVE_FORMAT_ADPCM # define WAVE_FORMAT_ADPCM 2 # endif # if PLATFORM_SUPPORTS_PRAGMA_PACK # pragma)",
    "insertText": "pack(push, 2)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (uint16 wFormatTag ; uint16 nChannels ; uint32 nSamplesPerSec ; uint32 nAvgBytesPerSec ; uint16 nBlockAlign ; uint16 wBitsPerSample ; uint16 cbSize ; } ; # if PLATFORM_SUPPORTS_PRAGMA_PACK # pragma)",
    "insertText": "pack(pop)"
  },
  {
    "label": "GetAdaptationCoefficients()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "GetAdaptationCoefficients(T(& OutAdaptationCoefficient1)[NUM_ADAPTATION_COEFF], T(& OutAdaptationCoefficient2)[NUM_ADAPTATION_COEFF])"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (T AdaptationCoefficient1 [ ] = { 2 5 6,5 1 2,0,1 9 2,2 4 0,4 6 0,3 9 2 } ; T AdaptationCoefficient2 [ ] = { 0,- 2 5 6,0,6 4,0,- 2 0 8,- 2 3 2 } ;)",
    "insertText": "Memcpy(&OutAdaptationCoefficient1, AdaptationCoefficient1, sizeof(AdaptationCoefficient1))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&OutAdaptationCoefficient2, AdaptationCoefficient2, sizeof(AdaptationCoefficient2))"
  },
  {
    "label": "ADPCMFormatHeader()",
    "kind": "Method",
    "detail": "Function (WaveFormatHeader BaseFormat ; uint16 wSamplesPerBlock ; uint16 wNumCoef ; int16 aCoef [ 2* NUM_ADAPTATION_COEFF ] ; uint32 SamplesPerChannel ;)",
    "insertText": "ADPCMFormatHeader()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(this, sizeof(ADPCMFormatHeader))"
  },
  {
    "label": "GetAdaptationCoefficients()",
    "kind": "Method",
    "detail": "Function (int16 AdaptationCoefficient1 [ NUM_ADAPTATION_COEFF ] ; int16 AdaptationCoefficient2 [ NUM_ADAPTATION_COEFF ] ;)",
    "insertText": "GetAdaptationCoefficients(AdaptationCoefficient1, AdaptationCoefficient2)"
  },
  {
    "label": "FADPCMAudioInfo()",
    "kind": "Method",
    "detail": "Function (class FADPCMAudioInfo : public ICompressedAudioInfo { public :)",
    "insertText": "FADPCMAudioInfo(void)"
  },
  {
    "label": "ReadCompressedInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCompressedInfo(const uint8* InSrcBufferData, uint32 InSrcBufferDataSize, struct FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "ReadCompressedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCompressedData(uint8* Destination, bool bLooping, uint32 BufferSize)"
  },
  {
    "label": "SeekToTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToTime(const float SeekTime)"
  },
  {
    "label": "SeekToFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToFrame(const uint32 SeekFrame)"
  },
  {
    "label": "ExpandFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandFile(uint8* DstBuffer, struct FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "EnableHalfRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableHalfRate(bool HalfRate)"
  },
  {
    "label": "GetSourceBufferSize()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetSourceBufferSize()"
  },
  {
    "label": "SupportsStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsStreaming()"
  },
  {
    "label": "StreamCompressedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StreamCompressedData(uint8* Destination, bool bLooping, uint32 BufferSize, int32& OutNumBytesStreamed)"
  },
  {
    "label": "GetCurrentChunkIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentChunkIndex()"
  },
  {
    "label": "GetFormatTag()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetFormatTag()"
  },
  {
    "label": "ProcessSeekRequest()",
    "kind": "Method",
    "detail": "Function (int32 NumConsecutiveReadFailiures ; FWaveModInfo WaveInfo ; const uint8* SrcBufferData ; uint32 SrcBufferDataSize ; uint32 UncompressedBlockSize ; uint32 CompressedBlockSize ; uint32 BlockSize ; int32 StreamBufferSize ; uint32 TotalDecodedSize ; int32 NumChannels ; int32 Format ; uint32 PreviouslyRequestedChunkIndex ; uint8* UncompressedBlockData ; uint32 CurrentUncompressedBlockSampleIndex ; uint32 CurrentChunkIndex ; uint32 CurrentChunkBufferOffset ; uint32 CurrentChunkDataSize ; uint32 TotalSamplesStreamed ; uint32 TotalSamplesPerChannel ; uint32 SamplesPerBlock ; uint32 FirstChunkSampleDataOffset ; uint32 FirstChunkSampleDataIndex ; const uint8* CurCompressedChunkData ; FAudioChunkHandle CurCompressedChunkHandle ; FCriticalSection CurCompressedChunkHandleCriticalSection ; bool bDecompressorReleased ; uint32 CurrentCompressedBlockIndex ; uint32 TotalCompressedBlocksPerChannel ; uint8 bNewSeekRequest : 1 ; uint8 bSeekPendingRead : 1 ; uint8 bSeekedFowardToNextChunk : 1 ; private : void)",
    "insertText": "ProcessSeekRequest()"
  },
  {
    "label": "SeekToFrameInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToFrameInternal(const uint32 InSeekFrame)"
  },
  {
    "label": "ResetSeekState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSeekState()"
  }
]