[
  {
    "label": "InternalStatsObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InternalStatsObserver"
  },
  {
    "label": "StatsPoller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsPoller"
  },
  {
    "label": "InternalStatsObserver()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_STATS_POLLER_H_ # define TEST_PC_E2E_STATS_POLLER_H_ # include<map> # include<string> # include<utility> # include<vector> # include \" api / peer_connection_interface . h \" # include \" api / stats / rtc_stats_collector_callback . h \" # include \" api / test / stats_observer_interface . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" test / pc / e2e / stats_provider . h \" # include \" test / pc / e2e / test_peer . h \" namespace webrtc { namespace webrtc_pc_e2e { class InternalStatsObserver : public RTCStatsCollectorCallback { public :)",
    "insertText": "InternalStatsObserver(absl::string_view pc_label, StatsProvider* peer, std::vector<StatsObserverInterface*> observers) : pc_label_(pc_label), peer_(peer), observers_(std::move(observers))"
  },
  {
    "label": "pc_label()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "pc_label()"
  },
  {
    "label": "OnStatsDelivered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStatsDelivered(const rtc::scoped_refptr<const RTCStatsReport>& report)"
  },
  {
    "label": "StatsPoller()",
    "kind": "Method",
    "detail": "Function (private : std::string pc_label_ ; StatsProvider* peer_ ; std::vector<StatsObserverInterface*> observers_ ; } ; class StatsPoller { public :)",
    "insertText": "StatsPoller(std::vector<StatsObserverInterface*> observers, std::map<std::string, StatsProvider*> peers_to_observe)"
  },
  {
    "label": "StatsPoller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatsPoller(std::vector<StatsObserverInterface*> observers, std::map<std::string, TestPeer*> peers_to_observe)"
  },
  {
    "label": "PollStatsAndNotifyObservers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollStatsAndNotifyObservers()"
  },
  {
    "label": "RegisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterParticipantInCall(absl::string_view peer_name, StatsProvider* peer)"
  },
  {
    "label": "UnregisterParticipantInCall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterParticipantInCall(absl::string_view peer_name)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : const std::vector<StatsObserverInterface*> observers_ ; webrtc::Mutex mutex_ ; std::vector<rtc::scoped_refptr<InternalStatsObserver>> pollers_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]