[
  {
    "label": "TProcessTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TProcessTimer"
  },
  {
    "label": "FStatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsCollector"
  },
  {
    "label": "TProcessTimer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / ScopeLock . h \" # include \" Common / StatsCollector . h \" namespace BuildPatchServices { template<FCyclesProvider,bool bThreadSafe = true> class TProcessTimer { public :)",
    "insertText": "TProcessTimer() : ThreadLock() , StartCycles(0) , Cycles(0) , bIsRunning(false) , bIsPaused(false)"
  },
  {
    "label": "GetSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetSeconds()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (ThreadLock .)",
    "insertText": "Lock()"
  },
  {
    "label": "CyclesToSeconds()",
    "kind": "Method",
    "detail": "Function (} double Seconds =)",
    "insertText": "CyclesToSeconds(Cycles)"
  },
  {
    "label": "CyclesToSeconds()",
    "kind": "Method",
    "detail": "Function (Seconds + =)",
    "insertText": "CyclesToSeconds(FCyclesProvider::GetCycles() - StartCycles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bThreadSafe)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (ThreadLock .)",
    "insertText": "Unlock()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} return Seconds ; } void)",
    "insertText": "Start()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bIsRunning)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsRunning = true ;)",
    "insertText": "if(!bIsPaused)"
  },
  {
    "label": "GetCycles()",
    "kind": "Method",
    "detail": "Function (StartCycles =)",
    "insertText": "GetCycles()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Stop()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bIsRunning)"
  },
  {
    "label": "SetPause()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetPause(bool bPause)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bIsPaused != bPause)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsPaused = bPause ;)",
    "insertText": "if(bIsPaused)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  }
]