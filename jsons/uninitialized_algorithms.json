[
  {
    "label": "__unreachable_sentinel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__unreachable_sentinel"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_ValueType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ValueType"
  },
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_Sentinel1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel1"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Sentinel2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel2"
  },
  {
    "label": "_Size",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Size"
  },
  {
    "label": "_Sentinel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_IterMove",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_IterMove"
  },
  {
    "label": "_Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Alloc"
  },
  {
    "label": "_BidirIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BidirIter"
  },
  {
    "label": "_Arg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Arg"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_AllocatorDestroyRangeReverse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AllocatorDestroyRangeReverse"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "_Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Type"
  },
  {
    "label": "__allocator_has_trivial_copy_construct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__allocator_has_trivial_copy_construct"
  },
  {
    "label": "_RawType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RawType"
  },
  {
    "label": "__allocator_has_trivial_move_construct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__allocator_has_trivial_move_construct"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___MEMORY_UNINITIALIZED_ALGORITHMS_H # define _LIBCPP___MEMORY_UNINITIALIZED_ALGORITHMS_H # include<__algorithm / copy . h> # include<__algorithm / move . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__iterator / reverse_iterator . h> # include<__memory / addressof . h> # include<__memory / allocator_traits . h> # include<__memory / construct_at . h> # include<__memory / pointer_traits . h> # include<__memory / voidify . h> # include<__type_traits / is_constant_evaluated . h> # include<__utility / move . h> # include<__utility / pair . h> # include<__utility / transaction . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR bool)",
    "insertText": "operator(const _Iter&, __unreachable_sentinel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __idx = __ofirst ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __ifirst != __ilast && __idx != __olast; ++__ifirst, (void)++__idx) ::new (_VSTD::__voidify(*__idx)) _ValueType(*__ifirst)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_NO_EXCEPTIONS })",
    "insertText": "catch(...)"
  },
  {
    "label": "__destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__destroy(__ofirst, __idx)"
  },
  {
    "label": "_ForwardIterator()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return pair<_InputIterator,)",
    "insertText": "_ForwardIterator(_VSTD::move(__ifirst), _VSTD::move(__idx))"
  },
  {
    "label": "uninitialized_copy()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator,class _ForwardIterator> _ForwardIterator)",
    "insertText": "uninitialized_copy(_InputIterator __ifirst, _InputIterator __ilast, _ForwardIterator __ofirst)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::value_type _ValueType ; auto __result = _VSTD::__uninitialized_copy<)",
    "insertText": "_ValueType(_VSTD::move(__ifirst), _VSTD::move(__ilast), _VSTD::move(__ofirst), __unreachable_sentinel())"
  },
  {
    "label": "__uninitialized_copy_n()",
    "kind": "Method",
    "detail": "Function (} template<class _ValueType,class _InputIterator,class _Size,class _ForwardIterator,class _Sentinel> _LIBCPP_HIDE_FROM_ABI pair<_InputIterator,_ForwardIterator>)",
    "insertText": "__uninitialized_copy_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst, _Sentinel __olast)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __idx = __ofirst ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __n > 0 && __idx != __olast; ++__ifirst, (void)++__idx, (void)--__n) ::new (_VSTD::__voidify(*__idx)) _ValueType(*__ifirst)"
  },
  {
    "label": "uninitialized_copy_n()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator,class _Size,class _ForwardIterator> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "uninitialized_copy_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::value_type _ValueType ; auto __result = _VSTD::__uninitialized_copy_n<)",
    "insertText": "_ValueType(_VSTD::move(__ifirst), __n, _VSTD::move(__ofirst), __unreachable_sentinel())"
  },
  {
    "label": "__uninitialized_fill()",
    "kind": "Method",
    "detail": "Function (} template<class _ValueType,class _ForwardIterator,class _Sentinel,class _Tp> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "__uninitialized_fill(_ForwardIterator __first, _Sentinel __last, const _Tp& __x)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __idx = __first ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __idx != __last; ++__idx) ::new (_VSTD::__voidify(*__idx)) _ValueType(__x)"
  },
  {
    "label": "__destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__destroy(__first, __idx)"
  },
  {
    "label": "uninitialized_fill()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return __idx ; } template<class _ForwardIterator,class _Tp> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::value_type)",
    "insertText": "_ValueType(void)_VSTD::__uninitialized_fill<_ValueType>(__first, __last, __x)"
  },
  {
    "label": "__uninitialized_fill_n()",
    "kind": "Method",
    "detail": "Function (} template<class _ValueType,class _ForwardIterator,class _Size,class _Tp> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "__uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __idx = __first ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __n > 0; ++__idx, (void) --__n) ::new (_VSTD::__voidify(*__idx)) _ValueType(__x)"
  },
  {
    "label": "uninitialized_fill_n()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return __idx ; } template<class _ForwardIterator,class _Size,class _Tp> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::value_type _ValueType ; return _VSTD::__uninitialized_fill_n<)",
    "insertText": "_ValueType(__first, __n, __x)"
  },
  {
    "label": "__uninitialized_default_construct()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 4 template<class _ValueType,class _ForwardIterator,class _Sentinel> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "__uninitialized_default_construct(_ForwardIterator __first, _Sentinel __last)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto __idx = __first ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __idx != __last; ++__idx) ::new (_VSTD::__voidify(*__idx))"
  },
  {
    "label": "uninitialized_default_construct()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return __idx ; } template<class _ForwardIterator> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (using _ValueType = iterator_traits<_ForwardIterator)",
    "insertText": "value_type(void)_VSTD::__uninitialized_default_construct<_ValueType>( _VSTD::move(__first), _VSTD::move(__last))"
  },
  {
    "label": "__uninitialized_default_construct_n()",
    "kind": "Method",
    "detail": "Function (} template<class _ValueType,class _ForwardIterator,class _Size> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "__uninitialized_default_construct_n(_ForwardIterator __first, _Size __n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto __idx = __first ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __n > 0; ++__idx, (void) --__n) ::new (_VSTD::__voidify(*__idx))"
  },
  {
    "label": "uninitialized_default_construct_n()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return __idx ; } template<class _ForwardIterator,class _Size> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "uninitialized_default_construct_n(_ForwardIterator __first, _Size __n)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (using _ValueType = iterator_traits<_ForwardIterator>::value_type ; return _VSTD::__uninitialized_default_construct_n<)",
    "insertText": "_ValueType(_VSTD::move(__first), __n)"
  },
  {
    "label": "__uninitialized_value_construct()",
    "kind": "Method",
    "detail": "Function (} template<class _ValueType,class _ForwardIterator,class _Sentinel> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "__uninitialized_value_construct(_ForwardIterator __first, _Sentinel __last)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto __idx = __first ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __idx != __last; ++__idx) ::new (_VSTD::__voidify(*__idx)) _ValueType()"
  },
  {
    "label": "uninitialized_value_construct()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return __idx ; } template<class _ForwardIterator> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last)"
  },
  {
    "label": "value_type()",
    "kind": "Method",
    "detail": "Function (using _ValueType = iterator_traits<_ForwardIterator)",
    "insertText": "value_type(void)_VSTD::__uninitialized_value_construct<_ValueType>( _VSTD::move(__first), _VSTD::move(__last))"
  },
  {
    "label": "__uninitialized_value_construct_n()",
    "kind": "Method",
    "detail": "Function (} template<class _ValueType,class _ForwardIterator,class _Size> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "__uninitialized_value_construct_n(_ForwardIterator __first, _Size __n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto __idx = __first ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __n > 0; ++__idx, (void) --__n) ::new (_VSTD::__voidify(*__idx)) _ValueType()"
  },
  {
    "label": "uninitialized_value_construct_n()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return __idx ; } template<class _ForwardIterator,class _Size> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "uninitialized_value_construct_n(_ForwardIterator __first, _Size __n)"
  },
  {
    "label": "__uninitialized_move()",
    "kind": "Method",
    "detail": "Function (} template<class _ValueType,class _InputIterator,class _Sentinel1,class _ForwardIterator,class _Sentinel2,class _IterMove> _LIBCPP_HIDE_FROM_ABI pair<_InputIterator,_ForwardIterator>)",
    "insertText": "__uninitialized_move(_InputIterator __ifirst, _Sentinel1 __ilast, _ForwardIterator __ofirst, _Sentinel2 __olast, _IterMove __iter_move)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto __idx = __ofirst ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __ifirst != __ilast && __idx != __olast; ++__idx, (void)++__ifirst)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(_VSTD::__voidify(*__idx)) _ValueType(__iter_move(__ifirst))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return {)",
    "insertText": "move(__ifirst), _VSTD::move(__idx)"
  },
  {
    "label": "uninitialized_move()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator,class _ForwardIterator> _LIBCPP_HIDE_FROM_ABI _ForwardIterator)",
    "insertText": "uninitialized_move(_InputIterator __ifirst, _InputIterator __ilast, _ForwardIterator __ofirst)"
  },
  {
    "label": "__iter_move()",
    "kind": "Method",
    "detail": "Function (using _ValueType = iterator_traits<_ForwardIterator>::value_type ; auto)",
    "insertText": "__iter_move(auto&& __iter) -> decltype(auto)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (} ; auto __result = _VSTD::__uninitialized_move<)",
    "insertText": "_ValueType(_VSTD::move(__ifirst), _VSTD::move(__ilast), _VSTD::move(__ofirst), __unreachable_sentinel(), __iter_move)"
  },
  {
    "label": "__uninitialized_move_n()",
    "kind": "Method",
    "detail": "Function (} template<class _ValueType,class _InputIterator,class _Size,class _ForwardIterator,class _Sentinel,class _IterMove> _LIBCPP_HIDE_FROM_ABI pair<_InputIterator,_ForwardIterator>)",
    "insertText": "__uninitialized_move_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst, _Sentinel __olast, _IterMove __iter_move)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto __idx = __ofirst ; # ifndef _LIBCPP_NO_EXCEPTIONS try { # endif)",
    "insertText": "for(; __n > 0 && __idx != __olast; ++__idx, (void)++__ifirst, --__n) ::new (_VSTD::__voidify(*__idx)) _ValueType(__iter_move(__ifirst))"
  },
  {
    "label": "uninitialized_move_n()",
    "kind": "Method",
    "detail": "Function (} template<class _InputIterator,class _Size,class _ForwardIterator> _LIBCPP_HIDE_FROM_ABI pair<_InputIterator,_ForwardIterator>)",
    "insertText": "uninitialized_move_n(_InputIterator __ifirst, _Size __n, _ForwardIterator __ofirst)"
  },
  {
    "label": "_ValueType()",
    "kind": "Method",
    "detail": "Function (} ; return _VSTD::__uninitialized_move_n<)",
    "insertText": "_ValueType(_VSTD::move(__ifirst), __n, _VSTD::move(__ofirst), __unreachable_sentinel(), __iter_move)"
  },
  {
    "label": "__allocator_destroy_multidimensional()",
    "kind": "Method",
    "detail": "Function (} template<class _Alloc,class _BidirIter,class = __enable_if_t<__is_cpp17_bidirectional_iterator<_BidirIter>::value>> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__allocator_destroy_multidimensional(_Alloc& __alloc, _BidirIter __first, _BidirIter __last)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using _ValueType = iterator_traits<_BidirIter>::value_type ;)",
    "insertText": "static_assert(is_same_v<typename allocator_traits<_Alloc>::value_type, _ValueType>, \"The allocator should already be rebound to the correct type\")"
  },
  {
    "label": "__elem_alloc()",
    "kind": "Method",
    "detail": "Function (using _Element = remove_extent_t<_ValueType> ; __allocator_traits_rebind_t<_Alloc,_Element>)",
    "insertText": "__elem_alloc(__alloc)"
  },
  {
    "label": "__allocator_destroy_multidimensional()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__allocator_destroy_multidimensional(__elem_alloc, __array, __array + extent_v<_ValueType>)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(__last != __first)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} else { do { - - __last ; allocator_traits<_Alloc)",
    "insertText": "destroy(__alloc, std::addressof(*__last))"
  },
  {
    "label": "__allocator_construct_at()",
    "kind": "Method",
    "detail": "Function (} } template<class _Alloc,class _Tp> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__allocator_construct_at(_Alloc& __alloc, _Tp* __loc)"
  },
  {
    "label": "__guard()",
    "kind": "Method",
    "detail": "Function (size_t __i = 0 ; _Tp& __array =* __loc ; __transaction)",
    "insertText": "__guard([&]() { std::__allocator_destroy_multidimensional(__elem_alloc, __array, __array + __i); })"
  },
  {
    "label": "__allocator_construct_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__allocator_construct_at(__elem_alloc, std::addressof(__array[__i]))"
  },
  {
    "label": "__complete()",
    "kind": "Method",
    "detail": "Function (} __guard .)",
    "insertText": "__complete()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} else { allocator_traits<_Alloc)",
    "insertText": "construct(__alloc, __loc)"
  },
  {
    "label": "__allocator_construct_at()",
    "kind": "Method",
    "detail": "Function (} } template<class _Alloc,class _Tp,class _Arg> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__allocator_construct_at(_Alloc& __alloc, _Tp* __loc, _Arg const& __arg)"
  },
  {
    "label": "__allocator_construct_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__allocator_construct_at(__elem_alloc, std::addressof(__array[__i]), __arg[__i])"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} else { allocator_traits<_Alloc)",
    "insertText": "construct(__alloc, __loc, __arg)"
  },
  {
    "label": "__uninitialized_allocator_fill_n()",
    "kind": "Method",
    "detail": "Function (} } template<class _Alloc,class _BidirIter,class _Tp,class _Size = iterator_traits<_BidirIter>::difference_type> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__uninitialized_allocator_fill_n(_Alloc& __alloc, _BidirIter __it, _Size __n, _Tp const& __value)"
  },
  {
    "label": "__value_alloc()",
    "kind": "Method",
    "detail": "Function (using _ValueType = iterator_traits<_BidirIter>::value_type ; __allocator_traits_rebind_t<_Alloc,_ValueType>)",
    "insertText": "__value_alloc(__alloc)"
  },
  {
    "label": "__guard()",
    "kind": "Method",
    "detail": "Function (_BidirIter __begin = __it ; __transaction)",
    "insertText": "__guard([&]() { std::__allocator_destroy_multidimensional(__value_alloc, __begin, __it); })"
  },
  {
    "label": "__allocator_construct_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__allocator_construct_at(__value_alloc, std::addressof(*__it), __value)"
  },
  {
    "label": "__uninitialized_allocator_value_construct_n()",
    "kind": "Method",
    "detail": "Function (} template<class _Alloc,class _BidirIter,class _Size = iterator_traits<_BidirIter>::difference_type> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "__uninitialized_allocator_value_construct_n(_Alloc& __alloc, _BidirIter __it, _Size __n)"
  },
  {
    "label": "__allocator_construct_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__allocator_construct_at(__value_alloc, std::addressof(*__it))"
  },
  {
    "label": "__allocator_destroy()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Alloc,class _Iter,class _Sent> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "__allocator_destroy(_Alloc& __alloc, _Iter __first, _Sent __last)"
  },
  {
    "label": "_AllocatorDestroyRangeReverse()",
    "kind": "Method",
    "detail": "Function (} template<class _Alloc,class _Iter> class _AllocatorDestroyRangeReverse { public : _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11)",
    "insertText": "_AllocatorDestroyRangeReverse(_Alloc& __alloc, _Iter& __first, _Iter& __last) : __alloc_(__alloc), __first_(__first), __last_(__last)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 void)",
    "insertText": "operator()()"
  },
  {
    "label": "__allocator_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__allocator_destroy(__alloc_, std::reverse_iterator<_Iter>(__last_), std::reverse_iterator<_Iter>(__first_))"
  },
  {
    "label": "__uninitialized_allocator_copy()",
    "kind": "Method",
    "detail": "Function (} private : _Alloc& __alloc_ ; _Iter& __first_ ; _Iter& __last_ ; } ; template<class _Alloc,class _Iter1,class _Sent1,class _Iter2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _Iter2)",
    "insertText": "__uninitialized_allocator_copy(_Alloc& __alloc, _Iter1 __first1, _Sent1 __last1, _Iter2 __first2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_NO_EXCEPTIONS auto __destruct_first = __first2 ; try { # endif)",
    "insertText": "while(__first1 != __last1)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (allocator_traits<_Alloc)",
    "insertText": "construct(__alloc, std::__to_address(__first2), *__first1)"
  },
  {
    "label": "_Iter2()",
    "kind": "Method",
    "detail": "Function (_AllocatorDestroyRangeReverse<_Alloc,)",
    "insertText": "_Iter2(__alloc, __destruct_first, __first2)()"
  },
  {
    "label": "__uninitialized_allocator_copy()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return __first2 ; } template<class _Alloc,class _Type> struct __allocator_has_trivial_copy_construct : _Not<__has_construct<_Alloc,_Type*,const _Type&>> { } ; template<class _Type> struct __allocator_has_trivial_copy_construct<allocator<_Type>,_Type> : true_type { } ; template<class _Alloc,class _Type,class _RawType = remove_const<_Type>::type,__enable_if_t<is_trivially_copy_constructible<_RawType>::value&& is_trivially_copy_assignable<_RawType>::value&& __allocator_has_trivial_copy_construct<_Alloc,_RawType>::value>* = nullptr> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _Type*)",
    "insertText": "__uninitialized_allocator_copy(_Alloc&, const _Type* __first1, const _Type* __last1, _Type* __first2)"
  },
  {
    "label": "__construct_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__construct_at(std::__to_address(__first2), *__first1)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; + + __first2 ; } return __first2 ; } else { return)",
    "insertText": "copy(__first1, __last1, const_cast<_RawType*>(__first2))"
  },
  {
    "label": "__uninitialized_allocator_move_if_noexcept()",
    "kind": "Method",
    "detail": "Function (} } template<class _Alloc,class _Iter1,class _Sent1,class _Iter2> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _Iter2)",
    "insertText": "__uninitialized_allocator_move_if_noexcept(_Alloc& __alloc, _Iter1 __first1, _Sent1 __last1, _Iter2 __first2)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_NO_EXCEPTIONS allocator_traits<_Alloc)",
    "insertText": "construct(__alloc, std::__to_address(__first2), std::move_if_noexcept(*__first1))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (# else allocator_traits<_Alloc)",
    "insertText": "construct(__alloc, std::__to_address(__first2), std::move(*__first1))"
  },
  {
    "label": "__uninitialized_allocator_move_if_noexcept()",
    "kind": "Method",
    "detail": "Function (throw ; } # endif return __first2 ; } template<class _Alloc,class _Type> struct __allocator_has_trivial_move_construct : _Not<__has_construct<_Alloc,_Type*,_Type&&>> { } ; template<class _Type> struct __allocator_has_trivial_move_construct<allocator<_Type>,_Type> : true_type { } ; # ifndef _LIBCPP_COMPILER_GCC template<class _Alloc,class _Iter1,class _Iter2,class _Type = iterator_traits<_Iter1>::value_type,class = __enable_if_t<is_trivially_move_constructible<_Type>::value&& is_trivially_move_assignable<_Type>::value&& __allocator_has_trivial_move_construct<_Alloc,_Type>::value>> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _Iter2)",
    "insertText": "__uninitialized_allocator_move_if_noexcept(_Alloc&, _Iter1 __first1, _Iter1 __last1, _Iter2 __first2)"
  },
  {
    "label": "__construct_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__construct_at(std::__to_address(__first2), std::move(*__first1))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (+ + __first1 ; + + __first2 ; } return __first2 ; } else { return)",
    "insertText": "move(__first1, __last1, __first2)"
  }
]