[
  {
    "label": "LazyEmittingLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LazyEmittingLayer"
  },
  {
    "label": "EmissionDeferredSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmissionDeferredSet"
  },
  {
    "label": "EmissionDeferredSetImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmissionDeferredSetImpl"
  },
  {
    "label": "EmissionDeferredSet()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_LAZYEMITTINGLAYER_H # define LLVM_EXECUTIONENGINE_ORC_LAZYEMITTINGLAYER_H # include \" JITSymbol . h \" # include \" llvm / ExecutionEngine / RTDyldMemoryManager . h \" # include \" llvm / IR / GlobalValue . h \" # include \" llvm / IR / Mangler . h \" # include \" llvm / IR / Module . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / ADT / StringMap . h \" # include<list> namespace llvm { namespace orc { template<BaseLayerT> class LazyEmittingLayer { public : typedef BaseLayerT::ModuleSetHandleT BaseLayerHandleT ; private : class EmissionDeferredSet { public :)",
    "insertText": "EmissionDeferredSet() : EmitState(NotEmitted)"
  },
  {
    "label": "EmissionDeferredSet()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "EmissionDeferredSet()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "find(StringRef Name, bool ExportedSymbolsOnly, BaseLayerT &B)"
  },
  {
    "label": "flagsFromGlobalValue()",
    "kind": "Method",
    "detail": "Function (std::string PName = Name ; JITSymbolFlags Flags =)",
    "insertText": "flagsFromGlobalValue(*GV)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (TargetAddress)",
    "insertText": "B()"
  },
  {
    "label": "emitToBaseLayer()",
    "kind": "Method",
    "detail": "Function (this -> EmitState = Emitting ; Handle = this ->)",
    "insertText": "emitToBaseLayer(B)"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (this -> EmitState = Emitted ; } auto Sym = B .)",
    "insertText": "findSymbolIn(Handle, PName, ExportedSymbolsOnly)"
  },
  {
    "label": "JITSymbol()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "JITSymbol(std::move(GetAddress), Flags)"
  },
  {
    "label": "findSymbolIn()",
    "kind": "Method",
    "detail": "Function (} else return nullptr ; case Emitting : return nullptr ; case Emitted : return B .)",
    "insertText": "findSymbolIn(Handle, Name, ExportedSymbolsOnly)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "llvm_unreachable(\"Invalid emit-state.\")"
  },
  {
    "label": "removeModulesFromBaseLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeModulesFromBaseLayer(BaseLayerT &BaseLayer)"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emitAndFinalize(BaseLayerT &BaseLayer)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(EmitState != Emitting && \"Cannot emitAndFinalize while already emitting\")"
  },
  {
    "label": "emitToBaseLayer()",
    "kind": "Method",
    "detail": "Function (EmitState = Emitting ; Handle =)",
    "insertText": "emitToBaseLayer(BaseLayer)"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (EmitState = Emitted ; } BaseLayer .)",
    "insertText": "emitAndFinalize(Handle)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} template<ModuleSetT,MemoryManagerPtrT,SymbolResolverPtrT> std::unique_ptr<EmissionDeferredSet>)",
    "insertText": "create(BaseLayerT &B, ModuleSetT Ms, MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver)"
  },
  {
    "label": "searchGVs()",
    "kind": "Method",
    "detail": "Function (protected : const GlobalValue*)",
    "insertText": "searchGVs(StringRef Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "emitToBaseLayer()",
    "kind": "Method",
    "detail": "Function (BaseLayerHandleT)",
    "insertText": "emitToBaseLayer(BaseLayerT &BaseLayer)"
  },
  {
    "label": "EmissionDeferredSetImpl()",
    "kind": "Method",
    "detail": "Function (private : enum { NotEmitted,Emitting,Emitted } EmitState ; BaseLayerHandleT Handle ; } ; template<ModuleSetT,MemoryManagerPtrT,SymbolResolverPtrT> class EmissionDeferredSetImpl : public EmissionDeferredSet { public :)",
    "insertText": "EmissionDeferredSetImpl(ModuleSetT Ms, MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver) : Ms(std::move(Ms)), MemMgr(std::move(MemMgr)), Resolver(std::move(Resolver))"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto VI = MangledSymbols ->)",
    "insertText": "find(Name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto GV = VI -> second ;)",
    "insertText": "if(!ExportedSymbolsOnly || GV->hasDefaultVisibility())"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (MangledSymbols .)",
    "insertText": "reset()"
  },
  {
    "label": "addGlobalValue()",
    "kind": "Method",
    "detail": "Function (} private : const GlobalValue*)",
    "insertText": "addGlobalValue(StringMap<const GlobalValue*> &Names, const GlobalValue &GV, const Mangler &Mang, StringRef SearchName, bool ExportedSymbolsOnly)"
  },
  {
    "label": "MangledNameStream()",
    "kind": "Method",
    "detail": "Function (std::string MangledName ; { raw_string_ostream)",
    "insertText": "MangledNameStream(MangledName)"
  },
  {
    "label": "getNameWithPrefix()",
    "kind": "Method",
    "detail": "Function (Mang .)",
    "insertText": "getNameWithPrefix(MangledNameStream, &GV, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MangledName == SearchName) if (!ExportedSymbolsOnly || GV.hasDefaultVisibility())"
  },
  {
    "label": "buildMangledSymbols()",
    "kind": "Method",
    "detail": "Function (Names [ MangledName ] =& GV ; return nullptr ; } const GlobalValue*)",
    "insertText": "buildMangledSymbols(StringRef SearchName, bool ExportedSymbolsOnly)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!MangledSymbols && \"Mangled symbols map already exists?\")"
  },
  {
    "label": "GlobalValue()",
    "kind": "Method",
    "detail": "Function (auto Symbols = llvm::make_unique<StringMap<const)",
    "insertText": "GlobalValue()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Mangler Mang ;)",
    "insertText": "for(const auto &V : M->globals()) if (auto GV = addGlobalValue(*Symbols, V, Mang, SearchName, ExportedSymbolsOnly))"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (} MangledSymbols =)",
    "insertText": "move(Symbols)"
  },
  {
    "label": "addModuleSet()",
    "kind": "Method",
    "detail": "Function (} template<ModuleSetT,MemoryManagerPtrT,SymbolResolverPtrT> ModuleSetHandleT)",
    "insertText": "addModuleSet(ModuleSetT Ms, MemoryManagerPtrT MemMgr, SymbolResolverPtrT Resolver)"
  },
  {
    "label": "removeModuleSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeModuleSet(ModuleSetHandleT H)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (ModuleSetList .)",
    "insertText": "erase(H)"
  },
  {
    "label": "findSymbol()",
    "kind": "Method",
    "detail": "Function (} JITSymbol)",
    "insertText": "findSymbol(const std::string &Name, bool ExportedSymbolsOnly)"
  },
  {
    "label": "emitAndFinalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "emitAndFinalize(ModuleSetHandleT H)"
  },
  {
    "label": "EDS()",
    "kind": "Method",
    "detail": "Function (typedef EmissionDeferredSetImpl<ModuleSetT,MemoryManagerPtrT,SymbolResolverPtrT> EDS ; return llvm::make_unique<)",
    "insertText": "EDS(std::move(Ms), std::move(MemMgr), std::move(Resolver))"
  }
]