[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "HistogramBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBase"
  },
  {
    "label": "HistogramSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramSamples"
  },
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "HistogramType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HistogramType"
  },
  {
    "label": "JSONVerbosityLevel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JSONVerbosityLevel"
  },
  {
    "label": "HistogramReport",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HistogramReport"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "Inconsistency",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Inconsistency"
  },
  {
    "label": "ReportActivity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReportActivity"
  },
  {
    "label": "HistogramBaseTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBaseTest"
  },
  {
    "label": "HistogramTypeToString()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_HISTOGRAM_BASE_H_ # define BASE_METRICS_HISTOGRAM_BASE_H_ # include<limits . h> # include<stddef . h> # include<stdint . h> # include<atomic> # include<memory> # include<string> # include \" base / atomicops . h \" # include \" base / base_export . h \" # include \" base / strings / string_piece . h \" # include \" base / time / time . h \" # include \" base / values . h \" namespace base { class Value ; class HistogramBase ; class HistogramSamples ; class Pickle ; class PickleIterator ; enum HistogramType { HISTOGRAM,LINEAR_HISTOGRAM,BOOLEAN_HISTOGRAM,CUSTOM_HISTOGRAM,SPARSE_HISTOGRAM,DUMMY_HISTOGRAM,} ; enum JSONVerbosityLevel { JSON_VERBOSITY_LEVEL_FULL,JSON_VERBOSITY_LEVEL_OMIT_BUCKETS,} ; std::string)",
    "insertText": "HistogramTypeToString(HistogramType type)"
  },
  {
    "label": "DeserializeHistogramInfo()",
    "kind": "Method",
    "detail": "Function (enum HistogramReport { HISTOGRAM_REPORT_CREATED = 0,HISTOGRAM_REPORT_HISTOGRAM_CREATED = 1,HISTOGRAM_REPORT_HISTOGRAM_LOOKUP = 2,HISTOGRAM_REPORT_TYPE_LOGARITHMIC = 3,HISTOGRAM_REPORT_TYPE_LINEAR = 4,HISTOGRAM_REPORT_TYPE_BOOLEAN = 5,HISTOGRAM_REPORT_TYPE_CUSTOM = 6,HISTOGRAM_REPORT_TYPE_SPARSE = 7,HISTOGRAM_REPORT_FLAG_UMA_TARGETED = 8,HISTOGRAM_REPORT_FLAG_UMA_STABILITY = 9,HISTOGRAM_REPORT_FLAG_PERSISTENT = 1 0,HISTOGRAM_REPORT_MAX = 1 1 } ; BASE_EXPORT HistogramBase*)",
    "insertText": "DeserializeHistogramInfo(base::PickleIterator* iter)"
  },
  {
    "label": "HistogramBase()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT HistogramBase { public : typedef int32_t Sample ; typedef subtle::Atomic32 AtomicCount ; typedef int32_t Count ; const Sample kSampleType_MAX ; enum Flags { kNoFlags = 0 x0,kUmaTargetedHistogramFlag = 0 x1,kUmaStabilityHistogramFlag = kUmaTargetedHistogramFlag | 0 x2,kIPCSerializationSourceFlag = 0 x10,kCallbackExists = 0 x20,kIsPersistent = 0 x40,} ; enum Inconsistency : uint32_t { NO_INCONSISTENCIES = 0 x0,RANGE_CHECKSUM_ERROR = 0 x1,BUCKET_ORDER_ERROR = 0 x2,COUNT_HIGH_ERROR = 0 x4,COUNT_LOW_ERROR = 0 x8,NEVER_EXCEEDED_VALUE = 0 x10,} ;)",
    "insertText": "HistogramBase(const char* name)"
  },
  {
    "label": "HistogramBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HistogramBase(const HistogramBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HistogramBase&)",
    "insertText": "operator(const HistogramBase&)"
  },
  {
    "label": "HistogramBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "HistogramBase()"
  },
  {
    "label": "histogram_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "histogram_name()"
  },
  {
    "label": "name_hash()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "name_hash()"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "flags()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(int32_t flags)"
  },
  {
    "label": "ClearFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFlags(int32_t flags)"
  },
  {
    "label": "GetHistogramType()",
    "kind": "Method",
    "detail": "Function (HistogramType)",
    "insertText": "GetHistogramType()"
  },
  {
    "label": "HasConstructionArguments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasConstructionArguments(Sample expected_minimum, Sample expected_maximum, size_t expected_bucket_count)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Sample value)"
  },
  {
    "label": "AddCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCount(Sample value, int count)"
  },
  {
    "label": "AddScaled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScaled(Sample value, int count, int scale)"
  },
  {
    "label": "AddKilo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKilo(Sample value, int count)"
  },
  {
    "label": "AddKiB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKiB(Sample value, int count)"
  },
  {
    "label": "AddTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTime(const TimeDelta& time)"
  },
  {
    "label": "AddTimeMillisecondsGranularity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeMillisecondsGranularity(time)"
  },
  {
    "label": "AddTimeMillisecondsGranularity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTimeMillisecondsGranularity(const TimeDelta& time)"
  },
  {
    "label": "AddTimeMicrosecondsGranularity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeMicrosecondsGranularity(const TimeDelta& time)"
  },
  {
    "label": "AddBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoolean(bool value)"
  },
  {
    "label": "AddSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSamples(const HistogramSamples& samples)"
  },
  {
    "label": "AddSamplesFromPickle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSamplesFromPickle(base::PickleIterator* iter)"
  },
  {
    "label": "SerializeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeInfo(base::Pickle* pickle)"
  },
  {
    "label": "FindCorruption()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FindCorruption(const HistogramSamples& samples)"
  },
  {
    "label": "SnapshotSamples()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotSamples()"
  },
  {
    "label": "SnapshotDelta()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotDelta()"
  },
  {
    "label": "SnapshotFinalDelta()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<HistogramSamples>)",
    "insertText": "SnapshotFinalDelta()"
  },
  {
    "label": "WriteAscii()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAscii(std::string* output)"
  },
  {
    "label": "ToGraphDict()",
    "kind": "Method",
    "detail": "Function (base::Value::Dict)",
    "insertText": "ToGraphDict()"
  },
  {
    "label": "ValidateHistogramContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateHistogramContents()"
  },
  {
    "label": "WriteJSON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteJSON(std::string* output, JSONVerbosityLevel verbosity_level)"
  },
  {
    "label": "CountAndBucketData()",
    "kind": "Method",
    "detail": "Function (protected : enum ReportActivity { HISTOGRAM_CREATED,HISTOGRAM_LOOKUP } ; struct BASE_EXPORT CountAndBucketData { Count count ; int64_t sum ; Value::List buckets ;)",
    "insertText": "CountAndBucketData(Count count, int64_t sum, Value::List buckets)"
  },
  {
    "label": "CountAndBucketData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CountAndBucketData()"
  },
  {
    "label": "CountAndBucketData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountAndBucketData(CountAndBucketData&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CountAndBucketData&)",
    "insertText": "operator(CountAndBucketData&& other)"
  },
  {
    "label": "SerializeInfoImpl()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SerializeInfoImpl(base::Pickle* pickle)"
  },
  {
    "label": "GetParameters()",
    "kind": "Method",
    "detail": "Function (Value::Dict)",
    "insertText": "GetParameters()"
  },
  {
    "label": "GetCountAndBucketData()",
    "kind": "Method",
    "detail": "Function (CountAndBucketData)",
    "insertText": "GetCountAndBucketData()"
  },
  {
    "label": "WriteAsciiBucketGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAsciiBucketGraph(double x_count, int line_length, std::string* output)"
  },
  {
    "label": "GetSimpleAsciiBucketRange()",
    "kind": "Method",
    "detail": "Function (const std::string)",
    "insertText": "GetSimpleAsciiBucketRange(Sample sample)"
  },
  {
    "label": "WriteAsciiBucketValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAsciiBucketValue(Count current, double scaled_sum, std::string* output)"
  },
  {
    "label": "FindAndRunCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndRunCallbacks(Sample sample)"
  },
  {
    "label": "GetPermanentName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetPermanentName(const std::string& name)"
  }
]