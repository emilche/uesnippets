[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "HistogramBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBase"
  },
  {
    "label": "HistogramSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramSamples"
  },
  {
    "label": "Pickle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pickle"
  },
  {
    "label": "PickleIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PickleIterator"
  },
  {
    "label": "is",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "is"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "HistogramType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HistogramType"
  },
  {
    "label": "JSONVerbosityLevel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JSONVerbosityLevel"
  },
  {
    "label": "is",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "is"
  },
  {
    "label": "HistogramReport",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HistogramReport"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "Inconsistency",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Inconsistency"
  },
  {
    "label": "ReportActivity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReportActivity"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "HistogramBaseTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBaseTest"
  },
  {
    "label": "HistogramTypeToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "HistogramTypeToString(HistogramType type)"
  },
  {
    "label": "HistogramBase()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "HistogramBase(const char* name)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags(int32_t flags)"
  },
  {
    "label": "ClearFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFlags(int32_t flags)"
  },
  {
    "label": "AddScaled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScaled(Sample value, int count, int scale)"
  },
  {
    "label": "AddKilo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKilo(Sample value, int count)"
  },
  {
    "label": "AddKiB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKiB(Sample value, int count)"
  },
  {
    "label": "AddTimeMillisecondsGranularity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeMillisecondsGranularity(const TimeDelta& time)"
  },
  {
    "label": "AddTimeMicrosecondsGranularity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeMicrosecondsGranularity(const TimeDelta& time)"
  },
  {
    "label": "AddBoolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBoolean(bool value)"
  }
]