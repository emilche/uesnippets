[
  {
    "label": "FBufferWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferWriter"
  },
  {
    "label": "FPackageStoreNameMapBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageStoreNameMapBuilder"
  },
  {
    "label": "FPackageStorePackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageStorePackage"
  },
  {
    "label": "FExportGraphNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportGraphNode"
  },
  {
    "label": "FExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExport"
  },
  {
    "label": "FUnresolvedExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnresolvedExport"
  },
  {
    "label": "FUnresolvedImport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnresolvedImport"
  },
  {
    "label": "FGraphData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphData"
  },
  {
    "label": "FExportBundleGraphNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExportBundleGraphNode"
  },
  {
    "label": "FImportedPackageRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportedPackageRef"
  },
  {
    "label": "FPackageStoreOptimizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageStoreOptimizer"
  },
  {
    "label": "FScriptObjectData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptObjectData"
  },
  {
    "label": "FCookedHeaderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookedHeaderData"
  },
  {
    "label": "SetNameMapType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Serialization / AsyncLoading2 . h \" # include \" IO / PackageStore . h \" # include \" IO / IoDispatcher . h \" # include \" UObject / PackageFileSummary . h \" # include \" UObject / UObjectMarks . h \" # include \" IO / IoContainerHeader . h \" class FBufferWriter ; class FPackageStoreNameMapBuilder { public : void)",
    "insertText": "SetNameMapType(FMappedName::EType InNameMapType)"
  },
  {
    "label": "AddName()",
    "kind": "Method",
    "detail": "Function (NameMapType = InNameMapType ; } void)",
    "insertText": "AddName(FName Name)"
  },
  {
    "label": "AddName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddName(FDisplayNameEntryId(Name))"
  },
  {
    "label": "AddName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddName(FDisplayNameEntryId DisplayId)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NameMap .)",
    "insertText": "Add(DisplayId)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 Index = NameMap .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NameIndices .)",
    "insertText": "Add(DisplayId, Index)"
  },
  {
    "label": "MarkNamesAsReferenced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkNamesAsReferenced(const TArray<FName>& Names, TArray<int32>& OutNameIndices)"
  },
  {
    "label": "DisplayId()",
    "kind": "Method",
    "detail": "Function (FDisplayNameEntryId)",
    "insertText": "DisplayId(Name)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (int32& Index = NameIndices .)",
    "insertText": "FindOrAdd(DisplayId)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} OutNameIndices .)",
    "insertText": "Add(Index - 1)"
  },
  {
    "label": "MarkNameAsReferenced()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MarkNameAsReferenced(FName Name)"
  },
  {
    "label": "MapName()",
    "kind": "Method",
    "detail": "Function (} } FMappedName)",
    "insertText": "MapName(FName Name)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (int32 Index = NameIndices .)",
    "insertText": "FindChecked(FDisplayNameEntryId(Name))"
  },
  {
    "label": "GetNameMap()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FDisplayNameEntryId>)",
    "insertText": "GetNameMap()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NameIndices .)",
    "insertText": "Empty()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} private : TMap<FDisplayNameEntryId,int32> NameIndices ; TArray<FDisplayNameEntryId> NameMap ; FMappedName::EType NameMapType = FMappedName::EType::Package ; } ; class FPackageStorePackage { public : FPackageId)",
    "insertText": "GetId()"
  },
  {
    "label": "GetNameCount()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetNameCount()"
  },
  {
    "label": "HasEditorData()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "HasEditorData()"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (} private : struct FExportGraphNode ; struct FExportGraphNode { FExportBundleEntry BundleEntry ; TArray<FExportGraphNode*> InternalDependencies ; int32 IncomingEdgeCount = 0 ; bool bIsPublic = false ; } ; struct FExport { FName ObjectName ; uint64 PublicExportHash = 0 ; FPackageObjectIndex OuterIndex ; FPackageObjectIndex ClassIndex ; FPackageObjectIndex SuperIndex ; FPackageObjectIndex TemplateIndex ; EObjectFlags ObjectFlags = RF_NoFlags ; uint64 SerialOffset =)",
    "insertText": "uint64(-1)"
  },
  {
    "label": "FImportedPackageRef()",
    "kind": "Method",
    "detail": "Function (bool bNotForClient = false ; bool bNotForServer = false ; bool bIsPublic = false ; FExportGraphNode* Nodes [ FExportBundleEntry::ExportCommandType_Count ] = { nullptr } ; } ; struct FUnresolvedExport { FString FullName ; } ; struct FUnresolvedImport { FString FullName ; FName FromPackageName ; int32 FromPackageNameLen = 0 ; bool bIsScriptImport = false ; bool bIsImportOfPackage = false ; bool bIsImportOptional = false ; } ; struct FGraphData { TArray<FExportBundleEntry> ExportBundleEntries ; TArray<FDependencyBundleHeader> DependencyBundleHeaders ; TArray<FDependencyBundleEntry> DependencyBundleEntries ; } ; struct FExportBundleGraphNode { FPackageStorePackage* Package = nullptr ; TArray<FExportGraphNode*> ExportGraphNodes ; int32 Index = - 1 ; int32 IncomingEdgeCount = 0 ; } ; struct FImportedPackageRef {)",
    "insertText": "FImportedPackageRef(FName InName) : Id(FPackageId::FromName(InName)) , Name(InName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FImportedPackageRef& Other)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FIoBuffer& ScriptObjectsBuffer)"
  },
  {
    "label": "CreateMissingPackage()",
    "kind": "Method",
    "detail": "Function (FPackageStorePackage*)",
    "insertText": "CreateMissingPackage(const FName& Name)"
  },
  {
    "label": "CreatePackageFromCookedHeader()",
    "kind": "Method",
    "detail": "Function (FPackageStorePackage*)",
    "insertText": "CreatePackageFromCookedHeader(const FName& Name, const FIoBuffer& CookedHeaderBuffer)"
  },
  {
    "label": "CreatePackageBuffer()",
    "kind": "Method",
    "detail": "Function (FIoBuffer)",
    "insertText": "CreatePackageBuffer(const FPackageStorePackage* Package, const FIoBuffer& CookedExportsBuffer)"
  },
  {
    "label": "CreatePackageStoreEntry()",
    "kind": "Method",
    "detail": "Function (FPackageStoreEntryResource)",
    "insertText": "CreatePackageStoreEntry(const FPackageStorePackage* Package, const FPackageStorePackage* OptionalSegmentPackage)"
  },
  {
    "label": "CreateScriptObjectsBuffer()",
    "kind": "Method",
    "detail": "Function (FIoBuffer)",
    "insertText": "CreateScriptObjectsBuffer()"
  },
  {
    "label": "LoadScriptObjectsBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadScriptObjectsBuffer(const FIoBuffer& ScriptObjectsBuffer)"
  },
  {
    "label": "FindScriptObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindScriptObjects(TMap<FPackageObjectIndex, FScriptObjectData>& OutScriptObjectsMap)"
  },
  {
    "label": "AppendPathForPublicExportHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendPathForPublicExportHash(UObject* Object, FStringBuilderBase& OutPath)"
  },
  {
    "label": "TryGetPublicExportHash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetPublicExportHash(FStringView PackageRelativeExportPath, uint64& OutPublicExportHash)"
  },
  {
    "label": "GetPublicExportHash()",
    "kind": "Method",
    "detail": "Function (private : struct FCookedHeaderData { FPackageFileSummary Summary ; TArray<FName> SummaryNames ; TArray<FObjectImport> ObjectImports ; TArray<FObjectExport> ObjectExports ; TArray<FPackageIndex> PreloadDependencies ; TArray<FObjectDataResource> DataResources ; TArray<FName> SoftPackageReferences ; } ; using FExportGraphEdges = TMultiMap<FPackageStorePackage::FExportGraphNode*,FPackageStorePackage::FExportGraphNode*> ; uint64)",
    "insertText": "GetPublicExportHash(FStringView PackageRelativeExportPath)"
  },
  {
    "label": "LoadCookedHeader()",
    "kind": "Method",
    "detail": "Function (FCookedHeaderData)",
    "insertText": "LoadCookedHeader(const FIoBuffer& CookedHeaderBuffer)"
  },
  {
    "label": "ResolveImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveImport(FPackageStorePackage::FUnresolvedImport* Imports, const FObjectImport* ObjectImports, int32 LocalImportIndex)"
  },
  {
    "label": "ProcessImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessImports(const FCookedHeaderData& CookedHeaderData, FPackageStorePackage* Package, TArray<FPackageStorePackage::FUnresolvedImport>& UnresolvedImports)"
  },
  {
    "label": "ResolveExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveExport(FPackageStorePackage::FUnresolvedExport* Exports, const FObjectExport* ObjectExports, const int32 LocalExportIndex, const FName& PackageName, FPackageStorePackage::FUnresolvedImport* Imports, const FObjectImport* ObjectImports)"
  },
  {
    "label": "ProcessExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExports(const FCookedHeaderData& CookedHeaderData, FPackageStorePackage* Package, FPackageStorePackage::FUnresolvedImport* Imports)"
  },
  {
    "label": "ProcessPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPreloadDependencies(const FCookedHeaderData& CookedHeaderData, FPackageStorePackage* Package)"
  },
  {
    "label": "ProcessDataResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDataResources(const FCookedHeaderData& CookedHeaderData, FPackageStorePackage* Package)"
  },
  {
    "label": "SortExportGraphNodesInLoadOrder()",
    "kind": "Method",
    "detail": "Function (TArray<FPackageStorePackage::FExportGraphNode*>)",
    "insertText": "SortExportGraphNodesInLoadOrder(FPackageStorePackage* Package, FExportGraphEdges& Edges)"
  },
  {
    "label": "CreateExportBundle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExportBundle(FPackageStorePackage* Package)"
  },
  {
    "label": "FinalizePackageHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizePackageHeader(FPackageStorePackage* Package)"
  },
  {
    "label": "FindScriptObjectsRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindScriptObjectsRecursive(TMap<FPackageObjectIndex, FScriptObjectData>& OutScriptObjectsMap, FPackageObjectIndex OuterIndex, UObject* Object)"
  },
  {
    "label": "FindScriptObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindScriptObjects()"
  }
]