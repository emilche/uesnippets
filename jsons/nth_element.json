[
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_NTH_ELEMENT_H # define _LIBCPP___ALGORITHM_NTH_ELEMENT_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / sort . h> # include<__config> # include<__debug> # include<__debug_utils / randomize_range . h> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template<class _Compare, class _RandomAccessIterator> _LIBCPP_CONSTEXPR_AFTER_CXX11 bool __nth_element_find_guard(_RandomAccessIterator& __i, _RandomAccessIterator& __j, _RandomAccessIterator __m, _Compare __comp)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (using _Ops = _IterOps<_AlgPolicy> ; typedef iterator_traits<_RandomAccessIterator>::difference_type difference_type ; const difference_type __limit = 7 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (difference_type __len = __last - __first ;)",
    "insertText": "switch(__len)"
  },
  {
    "label": "_Compare()",
    "kind": "Method",
    "detail": "Function (std::__selection_sort<_AlgPolicy,)",
    "insertText": "_Compare(__first, __last, __comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_RandomAccessIterator __i = __first ; _RandomAccessIterator __j = __lm1 ;)",
    "insertText": "if(!__comp(*__i, *__m))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(__i, __j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __n_swaps ; } else { + + __i ; __j = __last ;)",
    "insertText": "if(!__comp(*__first, *--__j))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __n_swaps ; + + __i ; break ; } + + __i ; } })",
    "insertText": "if(__i == __j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __n_swaps ; + + __i ; })",
    "insertText": "if(__nth < __i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __n_swaps ;)",
    "insertText": "if(__m == __i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __i ; } })",
    "insertText": "if(__i != __m && __comp(*__m, *__i))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(__i, __m)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __n_swaps ; })",
    "insertText": "if(__nth == __i)"
  },
  {
    "label": "__nth_element_impl()",
    "kind": "Method",
    "detail": "Function (__last = __i ; } else { __first = + + __i ; } } } template<class _AlgPolicy,class _RandomAccessIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "__nth_element_impl(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare& __comp)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__debug_randomize_range<)",
    "insertText": "_AlgPolicy(__first, __last)"
  },
  {
    "label": "_Comp_ref()",
    "kind": "Method",
    "detail": "Function (using _Comp_ref = __comp_ref_type<_Compare>::type ; std::__nth_element<_AlgPolicy,)",
    "insertText": "_Comp_ref(__first, __nth, __last, __comp)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__debug_randomize_range<)",
    "insertText": "_AlgPolicy(__first, __nth)"
  },
  {
    "label": "_AlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__debug_randomize_range<)",
    "insertText": "_AlgPolicy(++__nth, __last)"
  },
  {
    "label": "nth_element()",
    "kind": "Method",
    "detail": "Function (} } template<class _RandomAccessIterator,class _Compare> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (std::__nth_element_impl<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first), std::move(__nth), std::move(__last), __comp)"
  },
  {
    "label": "nth_element()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)"
  },
  {
    "label": "nth_element()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nth_element(std::move(__first), std::move(__nth), std::move(__last), __less<typename iterator_traits<_RandomAccessIterator>::value_type>())"
  }
]