[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "SCEV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEV"
  },
  {
    "label": "SCEVConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVConstant"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "Dependence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Dependence"
  },
  {
    "label": "DVEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DVEntry"
  },
  {
    "label": "DependenceAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DependenceAnalysis"
  },
  {
    "label": "FullDependence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FullDependence"
  },
  {
    "label": "Subscript",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Subscript"
  },
  {
    "label": "ClassificationKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ClassificationKind"
  },
  {
    "label": "CoefficientInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CoefficientInfo"
  },
  {
    "label": "BoundInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoundInfo"
  },
  {
    "label": "Constraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constraint"
  },
  {
    "label": "ConstraintKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ConstraintKind"
  },
  {
    "label": "Dependence()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_DEPENDENCEANALYSIS_H # define LLVM_ANALYSIS_DEPENDENCEANALYSIS_H # include \" llvm / ADT / SmallBitVector . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / IR / Instructions . h \" # include \" llvm / Pass . h \" namespace llvm { class AliasAnalysis ; class Loop ; class LoopInfo ; class ScalarEvolution ; class SCEV ; class SCEVConstant ; class raw_ostream ; class Dependence { public :)",
    "insertText": "Dependence(Instruction *Source, Instruction *Destination) : Src(Source), Dst(Destination), NextPredecessor(nullptr), NextSuccessor(nullptr)"
  },
  {
    "label": "Dependence()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Dependence()"
  },
  {
    "label": "DVEntry()",
    "kind": "Method",
    "detail": "Function (} struct DVEntry { enum { NONE = 0,LT = 1,EQ = 2,LE = 3,GT = 4,NE = 5,GE = 6,ALL = 7 } ; unsigned char Direction : 3 ; bool Scalar : 1 ; bool PeelFirst : 1 ; bool PeelLast : 1 ; bool Splitable : 1 ; const SCEV* Distance ;)",
    "insertText": "DVEntry() : Direction(ALL), Scalar(true), PeelFirst(false), PeelLast(false), Splitable(false), Distance(nullptr)"
  },
  {
    "label": "getSrc()",
    "kind": "Method",
    "detail": "Function (} } ; Instruction*)",
    "insertText": "getSrc()"
  },
  {
    "label": "isOutput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOutput()"
  },
  {
    "label": "isFlow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFlow()"
  },
  {
    "label": "isAnti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isAnti()"
  },
  {
    "label": "isOrdered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOrdered()"
  },
  {
    "label": "isUnordered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUnordered()"
  },
  {
    "label": "isLoopIndependent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLoopIndependent()"
  },
  {
    "label": "getNextPredecessor()",
    "kind": "Method",
    "detail": "Function (const Dependence*)",
    "insertText": "getNextPredecessor()"
  },
  {
    "label": "setNextSuccessor()",
    "kind": "Method",
    "detail": "Function (NextPredecessor = pred ; } void)",
    "insertText": "setNextSuccessor(const Dependence *succ)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (NextSuccessor = succ ; } void)",
    "insertText": "dump(raw_ostream &OS)"
  },
  {
    "label": "FullDependence()",
    "kind": "Method",
    "detail": "Function (private : Instruction* Src,* Dst ; const Dependence* NextPredecessor,* NextSuccessor ; class DependenceAnalysis ; } ; class FullDependence : public Dependence { public :)",
    "insertText": "FullDependence(Instruction *Src, Instruction *Dst, bool LoopIndependent, unsigned Levels)"
  },
  {
    "label": "FullDependence()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FullDependence()"
  },
  {
    "label": "getDistance()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getDistance(unsigned Level)"
  },
  {
    "label": "isPeelFirst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPeelFirst(unsigned Level)"
  },
  {
    "label": "isPeelLast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isPeelLast(unsigned Level)"
  },
  {
    "label": "isSplitable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSplitable(unsigned Level)"
  },
  {
    "label": "isScalar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isScalar(unsigned Level)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : unsigned short Levels ; bool LoopIndependent ; bool Consistent ; DVEntry* DV ; class DependenceAnalysis ; } ; class DependenceAnalysis : public FunctionPass { void)",
    "insertText": "operator(const DependenceAnalysis &)"
  },
  {
    "label": "DependenceAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DependenceAnalysis(const DependenceAnalysis &)"
  },
  {
    "label": "depends()",
    "kind": "Method",
    "detail": "Function (public : std::unique_ptr<Dependence>)",
    "insertText": "depends(Instruction *Src, Instruction *Dst, bool PossiblyLoopIndependent)"
  },
  {
    "label": "getSplitIteration()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getSplitIteration(const Dependence &Dep, unsigned Level)"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (private : AliasAnalysis* AA ; ScalarEvolution* SE ; LoopInfo* LI ; Function* F ; struct Subscript { const SCEV* Src ; const SCEV* Dst ; enum ClassificationKind { ZIV,SIV,RDIV,MIV,NonLinear } Classification ; SmallBitVector Loops ; SmallBitVector GroupLoops ; SmallBitVector Group ; } ; struct CoefficientInfo { const SCEV* Coeff ; const SCEV* PosPart ; const SCEV* NegPart ; const SCEV* Iterations ; } ; struct BoundInfo { const SCEV* Iterations ; const SCEV* Upper [ 8 ] ; const SCEV* Lower [ 8 ] ; unsigned char Direction ; unsigned char DirSet ; } ; class Constraint { private : enum ConstraintKind { Empty,Point,Distance,Line,Any } Kind ; ScalarEvolution* SE ; const SCEV* A ; const SCEV* B ; const SCEV* C ; const Loop* AssociatedLoop ; public : bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "getY()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getY()"
  },
  {
    "label": "getA()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getA()"
  },
  {
    "label": "getB()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getB()"
  },
  {
    "label": "getC()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getC()"
  },
  {
    "label": "getD()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getD()"
  },
  {
    "label": "getAssociatedLoop()",
    "kind": "Method",
    "detail": "Function (const Loop*)",
    "insertText": "getAssociatedLoop()"
  },
  {
    "label": "setPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPoint(const SCEV *X, const SCEV *Y, const Loop *CurrentLoop)"
  },
  {
    "label": "setLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLine(const SCEV *A, const SCEV *B, const SCEV *C, const Loop *CurrentLoop)"
  },
  {
    "label": "setDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setDistance(const SCEV *D, const Loop *CurrentLoop)"
  },
  {
    "label": "setEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEmpty()"
  },
  {
    "label": "setAny()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAny(ScalarEvolution *SE)"
  },
  {
    "label": "establishNestingLevels()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "establishNestingLevels(const Instruction *Src, const Instruction *Dst)"
  },
  {
    "label": "mapSrcLoop()",
    "kind": "Method",
    "detail": "Function (unsigned CommonLevels,SrcLevels,MaxLevels ; unsigned)",
    "insertText": "mapSrcLoop(const Loop *SrcLoop)"
  },
  {
    "label": "mapDstLoop()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "mapDstLoop(const Loop *DstLoop)"
  },
  {
    "label": "isLoopInvariant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLoopInvariant(const SCEV *Expression, const Loop *LoopNest)"
  },
  {
    "label": "unifySubscriptType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unifySubscriptType(ArrayRef<Subscript *> Pairs)"
  },
  {
    "label": "removeMatchingExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeMatchingExtensions(Subscript *Pair)"
  },
  {
    "label": "collectCommonLoops()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectCommonLoops(const SCEV *Expression, const Loop *LoopNest, SmallBitVector &Loops)"
  },
  {
    "label": "checkSrcSubscript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkSrcSubscript(const SCEV *Src, const Loop *LoopNest, SmallBitVector &Loops)"
  },
  {
    "label": "checkDstSubscript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkDstSubscript(const SCEV *Dst, const Loop *LoopNest, SmallBitVector &Loops)"
  },
  {
    "label": "isKnownPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownPredicate(ICmpInst::Predicate Pred, const SCEV *X, const SCEV *Y)"
  },
  {
    "label": "collectUpperBound()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "collectUpperBound(const Loop *l, Type *T)"
  },
  {
    "label": "collectConstantUpperBound()",
    "kind": "Method",
    "detail": "Function (const SCEVConstant*)",
    "insertText": "collectConstantUpperBound(const Loop *l, Type *T)"
  },
  {
    "label": "classifyPair()",
    "kind": "Method",
    "detail": "Function (Subscript::ClassificationKind)",
    "insertText": "classifyPair(const SCEV *Src, const Loop *SrcLoopNest, const SCEV *Dst, const Loop *DstLoopNest, SmallBitVector &Loops)"
  },
  {
    "label": "testZIV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "testZIV(const SCEV *Src, const SCEV *Dst, FullDependence &Result)"
  },
  {
    "label": "testSIV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "testSIV(const SCEV *Src, const SCEV *Dst, unsigned &Level, FullDependence &Result, Constraint &NewConstraint, const SCEV *&SplitIter)"
  },
  {
    "label": "testRDIV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "testRDIV(const SCEV *Src, const SCEV *Dst, FullDependence &Result)"
  },
  {
    "label": "testMIV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "testMIV(const SCEV *Src, const SCEV *Dst, const SmallBitVector &Loops, FullDependence &Result)"
  },
  {
    "label": "strongSIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "strongSIVtest(const SCEV *Coeff, const SCEV *SrcConst, const SCEV *DstConst, const Loop *CurrentLoop, unsigned Level, FullDependence &Result, Constraint &NewConstraint)"
  },
  {
    "label": "weakCrossingSIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "weakCrossingSIVtest(const SCEV *SrcCoeff, const SCEV *SrcConst, const SCEV *DstConst, const Loop *CurrentLoop, unsigned Level, FullDependence &Result, Constraint &NewConstraint, const SCEV *&SplitIter)"
  },
  {
    "label": "exactSIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "exactSIVtest(const SCEV *SrcCoeff, const SCEV *DstCoeff, const SCEV *SrcConst, const SCEV *DstConst, const Loop *CurrentLoop, unsigned Level, FullDependence &Result, Constraint &NewConstraint)"
  },
  {
    "label": "weakZeroSrcSIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "weakZeroSrcSIVtest(const SCEV *DstCoeff, const SCEV *SrcConst, const SCEV *DstConst, const Loop *CurrentLoop, unsigned Level, FullDependence &Result, Constraint &NewConstraint)"
  },
  {
    "label": "weakZeroDstSIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "weakZeroDstSIVtest(const SCEV *SrcCoeff, const SCEV *SrcConst, const SCEV *DstConst, const Loop *CurrentLoop, unsigned Level, FullDependence &Result, Constraint &NewConstraint)"
  },
  {
    "label": "exactRDIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "exactRDIVtest(const SCEV *SrcCoeff, const SCEV *DstCoeff, const SCEV *SrcConst, const SCEV *DstConst, const Loop *SrcLoop, const Loop *DstLoop, FullDependence &Result)"
  },
  {
    "label": "symbolicRDIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "symbolicRDIVtest(const SCEV *SrcCoeff, const SCEV *DstCoeff, const SCEV *SrcConst, const SCEV *DstConst, const Loop *SrcLoop, const Loop *DstLoop)"
  },
  {
    "label": "gcdMIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "gcdMIVtest(const SCEV *Src, const SCEV *Dst, FullDependence &Result)"
  },
  {
    "label": "banerjeeMIVtest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "banerjeeMIVtest(const SCEV *Src, const SCEV *Dst, const SmallBitVector &Loops, FullDependence &Result)"
  },
  {
    "label": "collectCoeffInfo()",
    "kind": "Method",
    "detail": "Function (CoefficientInfo*)",
    "insertText": "collectCoeffInfo(const SCEV *Subscript, bool SrcFlag, const SCEV *&Constant)"
  },
  {
    "label": "getPositivePart()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getPositivePart(const SCEV *X)"
  },
  {
    "label": "getNegativePart()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getNegativePart(const SCEV *X)"
  },
  {
    "label": "getLowerBound()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getLowerBound(BoundInfo *Bound)"
  },
  {
    "label": "getUpperBound()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getUpperBound(BoundInfo *Bound)"
  },
  {
    "label": "exploreDirections()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "exploreDirections(unsigned Level, CoefficientInfo *A, CoefficientInfo *B, BoundInfo *Bound, const SmallBitVector &Loops, unsigned &DepthExpanded, const SCEV *Delta)"
  },
  {
    "label": "testBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "testBounds(unsigned char DirKind, unsigned Level, BoundInfo *Bound, const SCEV *Delta)"
  },
  {
    "label": "findBoundsALL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findBoundsALL(CoefficientInfo *A, CoefficientInfo *B, BoundInfo *Bound, unsigned K)"
  },
  {
    "label": "findBoundsLT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findBoundsLT(CoefficientInfo *A, CoefficientInfo *B, BoundInfo *Bound, unsigned K)"
  },
  {
    "label": "findBoundsGT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findBoundsGT(CoefficientInfo *A, CoefficientInfo *B, BoundInfo *Bound, unsigned K)"
  },
  {
    "label": "findBoundsEQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findBoundsEQ(CoefficientInfo *A, CoefficientInfo *B, BoundInfo *Bound, unsigned K)"
  },
  {
    "label": "intersectConstraints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "intersectConstraints(Constraint *X, const Constraint *Y)"
  },
  {
    "label": "propagate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "propagate(const SCEV *&Src, const SCEV *&Dst, SmallBitVector &Loops, SmallVectorImpl<Constraint> &Constraints, bool &Consistent)"
  },
  {
    "label": "propagateDistance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "propagateDistance(const SCEV *&Src, const SCEV *&Dst, Constraint &CurConstraint, bool &Consistent)"
  },
  {
    "label": "propagatePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "propagatePoint(const SCEV *&Src, const SCEV *&Dst, Constraint &CurConstraint)"
  },
  {
    "label": "propagateLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "propagateLine(const SCEV *&Src, const SCEV *&Dst, Constraint &CurConstraint, bool &Consistent)"
  },
  {
    "label": "findCoefficient()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "findCoefficient(const SCEV *Expr, const Loop *TargetLoop)"
  },
  {
    "label": "zeroCoefficient()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "zeroCoefficient(const SCEV *Expr, const Loop *TargetLoop)"
  },
  {
    "label": "addToCoefficient()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "addToCoefficient(const SCEV *Expr, const Loop *TargetLoop, const SCEV *Value)"
  },
  {
    "label": "updateDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateDirection(Dependence::DVEntry &Level, const Constraint &CurConstraint)"
  },
  {
    "label": "tryDelinearize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "tryDelinearize(const SCEV *SrcSCEV, const SCEV *DstSCEV, SmallVectorImpl<Subscript> &Pair, const SCEV *ElementSize)"
  },
  {
    "label": "DependenceAnalysis()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "DependenceAnalysis() : FunctionPass(ID)"
  },
  {
    "label": "initializeDependenceAnalysisPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeDependenceAnalysisPass(*PassRegistry::getPassRegistry())"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &, const Module * = nullptr)"
  },
  {
    "label": "createDependenceAnalysisPass()",
    "kind": "Method",
    "detail": "Function (} ; FunctionPass*)",
    "insertText": "createDependenceAnalysisPass()"
  }
]