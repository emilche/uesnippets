[
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Templates / SharedPointer . h \" namespace UE { namespace Sequencer { class FViewModel ; class IPinnableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IPinnableExtension) virtual ~IPinnableExtension()"
  },
  {
    "label": "IsPinned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPinned()"
  },
  {
    "label": "SetPinned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPinned(bool bInIsPinned)"
  },
  {
    "label": "ReportPinnedParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPinnedParent(bool bInIsInPinnedBranch)"
  },
  {
    "label": "UpdateCachedPinnedState()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateCachedPinnedState(TSharedPtr<FViewModel> RootModel)"
  }
]