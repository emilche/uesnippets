[
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "TVector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVector"
  },
  {
    "label": "FitKDOPVertices3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" MathUtil . h \" # include \" Math / Vector . h \" # include \" Math / Plane . h \" # include \" VectorTypes . h \" template<FuncType> class TFunctionRef ; namespace UE { namespace Math { template<T> struct TVector ; } namespace Geometry { template<RealType> bool)",
    "insertText": "FitKDOPVertices3(TArrayView<const UE::Math::TVector<RealType>> PlaneDirections, const int32 NumPoints, TFunctionRef<UE::Math::TVector<RealType>(int32)> GetPointFunc, TFunctionRef<bool(int32)> FilterFunc, TArray<UE::Math::TVector<RealType>>& OutVertices, TArray<UE::Math::TPlane<RealType>>* OptionalOutPlanes = nullptr, RealType Epsilon = TMathUtil<RealType>::Epsilon, RealType VertexSnapDistance = (RealType)0.1, RealType Inflate = (RealType)0.1)"
  },
  {
    "label": "FitKDOPVertices3()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "FitKDOPVertices3(TArrayView<const UE::Math::TVector<RealType>> PlaneDirections, const int32 NumPoints, TFunctionRef<UE::Math::TVector<RealType>(int32)> GetPointFunc, TArray<UE::Math::TVector<RealType>>& OutVertices, TArray<UE::Math::TPlane<RealType>>* OptionalOutPlanes = nullptr, RealType Epsilon = TMathUtil<RealType>::Epsilon, RealType VertexSnapDistance = (RealType)0.1, RealType Inflate = (RealType)0.1)"
  },
  {
    "label": "FitKDOPVertices3()",
    "kind": "Method",
    "detail": "Function (} template<RealType> bool)",
    "insertText": "FitKDOPVertices3(TArrayView<const UE::Math::TVector<RealType>> PlaneDirections, const TArray<UE::Math::TVector<RealType>>& Points, TArray<UE::Math::TVector<RealType>>& OutVertices, TArray<UE::Math::TPlane<RealType>>* OptionalOutPlanes = nullptr, RealType Epsilon = TMathUtil<RealType>::Epsilon, RealType VertexSnapDistance = (RealType)0.1, RealType Inflate = (RealType)0.1)"
  }
]