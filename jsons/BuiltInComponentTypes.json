[
  {
    "label": "IMovieSceneEvaluationHook",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieSceneEvaluationHook"
  },
  {
    "label": "FCustomPropertyIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomPropertyIndex"
  },
  {
    "label": "FInitialValueIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitialValueIndex"
  },
  {
    "label": "FInstanceHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceHandle"
  },
  {
    "label": "FInterrogationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterrogationKey"
  },
  {
    "label": "FInterrogationInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterrogationInstance"
  },
  {
    "label": "FRootInstanceHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootInstanceHandle"
  },
  {
    "label": "FCachedInterpolation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedInterpolation"
  },
  {
    "label": "FFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTime"
  },
  {
    "label": "FMovieSceneBlendChannelID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBlendChannelID"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTrackInstancePropertyBindings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackInstancePropertyBindings"
  },
  {
    "label": "UMovieSceneBlenderSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneBlenderSystem"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneTrackInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrackInstance"
  },
  {
    "label": "FMovieSceneBoolChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBoolChannel"
  },
  {
    "label": "FMovieSceneByteChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneByteChannel"
  },
  {
    "label": "FMovieSceneDoubleChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneDoubleChannel"
  },
  {
    "label": "FMovieSceneFloatChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneFloatChannel"
  },
  {
    "label": "FMovieSceneIntegerChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneIntegerChannel"
  },
  {
    "label": "FMovieSceneObjectPathChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectPathChannel"
  },
  {
    "label": "FMovieSceneStringChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneStringChannel"
  },
  {
    "label": "FMovieScenePropertyBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePropertyBinding"
  },
  {
    "label": "FEasingComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEasingComponentData"
  },
  {
    "label": "FMovieSceneTrackInstanceComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackInstanceComponent"
  },
  {
    "label": "FMovieSceneEvaluationHookComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationHookComponent"
  },
  {
    "label": "FTrackInstanceInputComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackInstanceInputComponent"
  },
  {
    "label": "FSourceBoolChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceBoolChannel"
  },
  {
    "label": "FSourceByteChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceByteChannel"
  },
  {
    "label": "FSourceIntegerChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceIntegerChannel"
  },
  {
    "label": "FSourceFloatChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceFloatChannel"
  },
  {
    "label": "FSourceDoubleChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceDoubleChannel"
  },
  {
    "label": "FSourceStringChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceStringChannel"
  },
  {
    "label": "FEvaluationHookFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvaluationHookFlags"
  },
  {
    "label": "FSourceObjectPathChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceObjectPathChannel"
  },
  {
    "label": "FObjectComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectComponent"
  },
  {
    "label": "FMovieSceneBindingLifetimeComponentData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBindingLifetimeComponentData"
  },
  {
    "label": "FHierarchicalBlendTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHierarchicalBlendTarget"
  },
  {
    "label": "FEntityGroupingPolicyKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityGroupingPolicyKey"
  },
  {
    "label": "FEntityGroupID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityGroupID"
  },
  {
    "label": "FBuiltInComponentTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuiltInComponentTypes"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" EntitySystem / MovieSceneBlenderSystemTypes . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneInitialValueCache . h \" # include \" EntitySystem / MovieScenePropertyRegistry . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" Evaluation / Blending / MovieSceneBlendType . h \" # include \" Evaluation / IMovieSceneEvaluationHook . h \" # include \" Misc / Guid . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / GCObjectScopeGuard . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / ScriptInterface . h \" # include \" BuiltInComponentTypes . generated . h \" class IMovieSceneEvaluationHook ; namespace UE::MovieScene { struct FCustomPropertyIndex ; struct FInitialValueIndex ; struct FInstanceHandle ; struct FInterrogationKey ; struct FInterrogationInstance ; struct FRootInstanceHandle ; namespace Interpolation { struct FCachedInterpolation ; } } struct FFrameTime ; struct FMovieSceneBlendChannelID ; struct FMovieSceneSequenceID ; enum class EMovieSceneBlendType : uint8 ; class FTrackInstancePropertyBindings ; class UMovieSceneBlenderSystem ; class UMovieSceneSection ; class UMovieSceneTrackInstance ; struct FMovieSceneBoolChannel ; struct FMovieSceneByteChannel ; struct FMovieSceneDoubleChannel ; struct FMovieSceneFloatChannel ; struct FMovieSceneIntegerChannel ; struct FMovieSceneObjectPathChannel ; struct FMovieSceneStringChannel ; struct FMovieScenePropertyBinding ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FSourceBoolChannel()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE { namespace MovieScene { struct FSourceBoolChannel {)",
    "insertText": "FSourceBoolChannel() : Source(nullptr)"
  },
  {
    "label": "FSourceBoolChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceBoolChannel(const FMovieSceneBoolChannel* InSource) : Source(InSource)"
  },
  {
    "label": "FSourceByteChannel()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneBoolChannel* Source ; } ; struct FSourceByteChannel {)",
    "insertText": "FSourceByteChannel() : Source(nullptr)"
  },
  {
    "label": "FSourceByteChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceByteChannel(const FMovieSceneByteChannel* InSource) : Source(InSource)"
  },
  {
    "label": "FSourceIntegerChannel()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneByteChannel* Source ; } ; struct FSourceIntegerChannel {)",
    "insertText": "FSourceIntegerChannel() : Source(nullptr)"
  },
  {
    "label": "FSourceIntegerChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceIntegerChannel(const FMovieSceneIntegerChannel* InSource) : Source(InSource)"
  },
  {
    "label": "FSourceFloatChannel()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneIntegerChannel* Source ; } ; struct FSourceFloatChannel {)",
    "insertText": "FSourceFloatChannel() : Source(nullptr)"
  },
  {
    "label": "FSourceFloatChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceFloatChannel(const FMovieSceneFloatChannel* InSource) : Source(InSource)"
  },
  {
    "label": "FSourceDoubleChannel()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneFloatChannel* Source ; } ; struct FSourceDoubleChannel {)",
    "insertText": "FSourceDoubleChannel() : Source(nullptr)"
  },
  {
    "label": "FSourceDoubleChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceDoubleChannel(const FMovieSceneDoubleChannel* InSource) : Source(InSource)"
  },
  {
    "label": "FSourceStringChannel()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneDoubleChannel* Source ; } ; struct FSourceStringChannel {)",
    "insertText": "FSourceStringChannel() : Source(nullptr)"
  },
  {
    "label": "FSourceStringChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceStringChannel(const FMovieSceneStringChannel* InSource) : Source(InSource)"
  },
  {
    "label": "FSourceObjectPathChannel()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneStringChannel* Source ; } ; struct FEvaluationHookFlags { bool bHasBegun = false ; } ; struct FSourceObjectPathChannel {)",
    "insertText": "FSourceObjectPathChannel() : Source(nullptr)"
  },
  {
    "label": "FSourceObjectPathChannel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceObjectPathChannel(const FMovieSceneObjectPathChannel* InSource) : Source(InSource)"
  },
  {
    "label": "FObjectComponent()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneObjectPathChannel* Source ; } ; struct FObjectComponent {)",
    "insertText": "FObjectComponent() : ObjectPtr(nullptr)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (} FObjectComponent)",
    "insertText": "Null()"
  },
  {
    "label": "Strong()",
    "kind": "Method",
    "detail": "Function (} FObjectComponent)",
    "insertText": "Strong(UObject* InObject)"
  },
  {
    "label": "Weak()",
    "kind": "Method",
    "detail": "Function (} FObjectComponent)",
    "insertText": "Weak(UObject* InObject)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetTypeHash(In.ObjectPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "operator()"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (UObject* Object =)",
    "insertText": "GetObject()"
  },
  {
    "label": "AddReferencedObjectForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjectForComponent(FReferenceCollector* ReferenceCollector, FObjectComponent* ComponentData)"
  },
  {
    "label": "FObjectComponent()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FObjectComponent(UObject* InObject, const FObjectKey& InObjectKey) : ObjectPtr(InObject) , ObjectKey(InObjectKey)"
  },
  {
    "label": "IsStrongReference()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStrongReference()"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UObject> ObjectPtr ; FObjectKey ObjectKey ; } ; enum class EMovieSceneBindingLifetimeState : uint8 { Active,Inactive } ; struct FMovieSceneBindingLifetimeComponentData { EMovieSceneBindingLifetimeState BindingLifetimeState = EMovieSceneBindingLifetimeState::Active ; } ; using FBoundObjectResolver =)",
    "insertText": "UObject(*)(UObject*)"
  },
  {
    "label": "FHierarchicalBlendTarget()",
    "kind": "Method",
    "detail": "Function (struct FHierarchicalBlendTarget {)",
    "insertText": "FHierarchicalBlendTarget()"
  },
  {
    "label": "FHierarchicalBlendTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHierarchicalBlendTarget(const FHierarchicalBlendTarget& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FHierarchicalBlendTarget&)",
    "insertText": "operator(const FHierarchicalBlendTarget& RHS)"
  },
  {
    "label": "FHierarchicalBlendTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHierarchicalBlendTarget(FHierarchicalBlendTarget&& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FHierarchicalBlendTarget&)",
    "insertText": "operator(FHierarchicalBlendTarget&& RHS)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(int16 HBias)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "AsArray()",
    "kind": "Method",
    "detail": "Function (TArrayView<const int16>)",
    "insertText": "AsArray()"
  },
  {
    "label": "GetCapacity()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetCapacity()"
  },
  {
    "label": "GetMemory()",
    "kind": "Method",
    "detail": "Function (const void* Memory = In .)",
    "insertText": "GetMemory()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32* Data32 = static_cast<const)",
    "insertText": "uint32(Memory)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(GrowAmount%4 == 0, \"GrowAmount is not a multiple of 2 which is required for this loop to work\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < In.Capacity/4; Index += 4)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash ^ =)",
    "insertText": "HashCombine(Data32[Index+0], Data32[Index+1]) ^ HashCombine(Data32[Index+2], Data32[Index+3])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return Hash ; } } bool)",
    "insertText": "operator(const FHierarchicalBlendTarget& A, const FHierarchicalBlendTarget& B)"
  },
  {
    "label": "FreeAllocation()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "FreeAllocation()"
  },
  {
    "label": "GetAllEntries()",
    "kind": "Method",
    "detail": "Function (TArrayView<int16>)",
    "insertText": "GetAllEntries()"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grow(uint16 NewCapacity)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(8)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint16 Capacity ; int32 InlineCapacity =)",
    "insertText": "sizeof(Data) / sizeof(int16)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (uint16 GrowAmount = 1 6 u ; } ; struct FEntityGroupingPolicyKey { const FEntityGroupingPolicyKey)",
    "insertText": "Invalid()"
  },
  {
    "label": "FEntityGroupingPolicyKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEntityGroupingPolicyKey()"
  },
  {
    "label": "FEntityGroupingPolicyKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEntityGroupingPolicyKey(int32 FromIndex) : Index(FromIndex)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FEntityGroupingPolicyKey& A, const FEntityGroupingPolicyKey& B)"
  },
  {
    "label": "FEntityGroupID()",
    "kind": "Method",
    "detail": "Function (} FEntityGroupingPolicyKey PolicyKey ; int32 GroupIndex = INDEX_NONE ; EEntityGroupFlags Flags = EEntityGroupFlags::None ;)",
    "insertText": "FEntityGroupID()"
  },
  {
    "label": "FEntityGroupID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEntityGroupID(const FEntityGroupingPolicyKey InPolicyKey, int32 InGroupIndex) : PolicyKey(InPolicyKey), GroupIndex(InGroupIndex)"
  },
  {
    "label": "HasGroup()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasGroup()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FEntityGroupID& GroupID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FEntityGroupID& A, const FEntityGroupID& B)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (FComponentTypeID OldStyleSpawnable ; } Tags ; struct { TComponentTypeID<FInterrogationKey> InputKey ; TComponentTypeID<FInterrogationInstance> Instance ; TComponentTypeID<FInterrogationKey> OutputKey ; } Interrogation ; struct { FComponentTypeID CreatesEntities ; } SymbolicTags ; FComponentMask FinishedMask ; public : void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FBuiltInComponentTypes*)",
    "insertText": "Get()"
  },
  {
    "label": "GetBaseValueComponentType()",
    "kind": "Method",
    "detail": "Function (} FComponentTypeID)",
    "insertText": "GetBaseValueComponentType(const FComponentTypeID& InResultComponentType)"
  },
  {
    "label": "FBuiltInComponentTypes()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FBuiltInComponentTypes()"
  }
]