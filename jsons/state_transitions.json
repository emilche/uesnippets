[
  {
    "label": "StateTransitions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StateTransitions"
  },
  {
    "label": "StateTransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StateTransition"
  },
  {
    "label": "StateTransition()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STATE_TRANSITIONS_H_ # define BASE_STATE_TRANSITIONS_H_ # include<vector> # include \" base / check_op . h \" # include \" base / containers / contains . h \" # include \" base / no_destructor . h \" namespace base { template<State> struct StateTransitions { public : struct StateTransition {)",
    "insertText": "StateTransition(State source, std::vector<State> destinations) : source(std::move(source)), destinations(std::move(destinations))"
  },
  {
    "label": "StateTransitions()",
    "kind": "Method",
    "detail": "Function (} const State source ; const std::vector<State> destinations ; } ;)",
    "insertText": "StateTransitions(std::vector<StateTransition> state_transitions) : state_transitions(std::move(state_transitions))"
  },
  {
    "label": "GetValidTransitions()",
    "kind": "Method",
    "detail": "Function (} const std::vector<State>&)",
    "insertText": "GetValidTransitions(const State& source)"
  },
  {
    "label": "IsTransitionValid()",
    "kind": "Method",
    "detail": "Function (} const base::NoDestructor<std::vector<State>> no_transitions ; return* no_transitions ; } bool)",
    "insertText": "IsTransitionValid(const State& source, const State& destination)"
  }
]