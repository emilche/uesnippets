[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "FSessionInfoTabs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionInfoTabs"
  },
  {
    "label": "SSessionInfoWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSessionInfoWindow"
  },
  {
    "label": "SSessionInfoWindow()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / Docking / TabManager . h \" # include \" GenericPlatform / GenericPlatformMisc . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Misc / Guid . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Docking / SDockTab . h \" # include \" Widgets / Layout / SSplitter . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SOverlay . h \" # include \" Widgets / Views / SListView . h \" # include \" TraceServices / ModuleService . h \" # include \" Insights / InsightsManager . h \" class FActiveTimerHandle ; class SVerticalBox ; class SEditableTextBox ; namespace UE::Insights { struct FSessionInfoTabs { const FName SessionInfoID ; } ; class SSessionInfoWindow : public SCompoundWidget { public :)",
    "insertText": "SSessionInfoWindow()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SSessionInfoWindow)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<SDockTab>& ConstructUnderMajorTab, const TSharedPtr<SWindow>& ConstructUnderWindow)"
  },
  {
    "label": "UpdateActiveDuration()",
    "kind": "Method",
    "detail": "Function (private : EActiveTimerReturnType)",
    "insertText": "UpdateActiveDuration(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "FillMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillMenu(FMenuBuilder& MenuBuilder, const TSharedPtr<FTabManager> TabManager)"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BeginSection(TSharedPtr<SVerticalBox> InVerticalBox, const FText& InSectionName)"
  },
  {
    "label": "EndSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSection(TSharedPtr<SVerticalBox> InVerticalBox)"
  },
  {
    "label": "CreateTextBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateTextBox(const TAttribute<FText>& InText, bool bMultiLine)"
  },
  {
    "label": "AddInfoLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInfoLine(TSharedPtr<SVerticalBox> InVerticalBox, const FText& InHeader, FText(SSessionInfoWindow::* InGetTextMethodPtr)() const, EVisibility(SSessionInfoWindow::* InVisibilityMethodPtr)() const, bool bMultiLine = false)"
  },
  {
    "label": "AddSimpleInfoLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSimpleInfoLine(TSharedPtr<SVerticalBox> InVerticalBox, const TAttribute<FText>& InValue, bool bMultiLine = false)"
  },
  {
    "label": "SpawnTab_SessionInfo()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_SessionInfo(const FSpawnTabArgs& Args)"
  },
  {
    "label": "OnSessionInfoTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSessionInfoTabClosed(TSharedRef<SDockTab> TabBeingClosed)"
  },
  {
    "label": "GetSessionNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSessionNameText()"
  },
  {
    "label": "IsVisibleAppNameText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleAppNameText()"
  },
  {
    "label": "IsVisibleProjectNameText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleProjectNameText()"
  },
  {
    "label": "IsVisibleBranchText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleBranchText()"
  },
  {
    "label": "IsVisibleBuildVersionText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleBuildVersionText()"
  },
  {
    "label": "IsVisibleChangelistText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleChangelistText()"
  },
  {
    "label": "IsVisibleBuildConfigText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleBuildConfigText()"
  },
  {
    "label": "IsVisibleBuildTargetText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleBuildTargetText()"
  },
  {
    "label": "IsVisibleCommandLineText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleCommandLineText()"
  },
  {
    "label": "IsVisibleOtherMetadataText()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "IsVisibleOtherMetadataText()"
  },
  {
    "label": "GetFileSizeText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetFileSizeText()"
  },
  {
    "label": "GetStatusText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetStatusText()"
  },
  {
    "label": "GetModulesText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetModulesText()"
  }
]