[
  {
    "label": "Metadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Metadata"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "ValueAsMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueAsMetadata"
  },
  {
    "label": "TrackingMDRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrackingMDRef"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TypedTrackingMDRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypedTrackingMDRef"
  },
  {
    "label": "simplify_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "simplify_type"
  },
  {
    "label": "TrackingMDRef()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_TRACKINGMDREF_H # define LLVM_IR_TRACKINGMDREF_H # include \" llvm / IR / MetadataTracking . h \" # include \" llvm / Support / Casting . h \" namespace llvm { class Metadata ; class MDNode ; class ValueAsMetadata ; class TrackingMDRef { Metadata* MD ; public :)",
    "insertText": "TrackingMDRef() : MD(nullptr)"
  },
  {
    "label": "TrackingMDRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TrackingMDRef(Metadata *MD) : MD(MD)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "track()"
  },
  {
    "label": "TrackingMDRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TrackingMDRef(TrackingMDRef &&X) : MD(X.MD)"
  },
  {
    "label": "retrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "retrack(X)"
  },
  {
    "label": "TrackingMDRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TrackingMDRef(const TrackingMDRef &X) : MD(X.MD)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TrackingMDRef&)",
    "insertText": "operator(TrackingMDRef &&X)"
  },
  {
    "label": "untrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "untrack()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Metadata*)",
    "insertText": "operator()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (MD = nullptr ; } void)",
    "insertText": "reset(Metadata *MD)"
  },
  {
    "label": "hasTrivialDestructor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasTrivialDestructor()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TrackingMDRef &X)"
  },
  {
    "label": "retrack()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "retrack(TrackingMDRef &X)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(MD == X.MD && \"Expected values to match\")"
  },
  {
    "label": "retrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "retrack(X.MD, MD)"
  },
  {
    "label": "TypedTrackingMDRef()",
    "kind": "Method",
    "detail": "Function (X . MD = nullptr ; } } } ; template<class T> class TypedTrackingMDRef { TrackingMDRef Ref ; public :)",
    "insertText": "TypedTrackingMDRef()"
  },
  {
    "label": "TypedTrackingMDRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedTrackingMDRef(T *MD) : Ref(static_cast<Metadata *>(MD))"
  },
  {
    "label": "TypedTrackingMDRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedTrackingMDRef(TypedTrackingMDRef &&X) : Ref(std::move(X.Ref))"
  },
  {
    "label": "TypedTrackingMDRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TypedTrackingMDRef(const TypedTrackingMDRef &X) : Ref(X.Ref)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TypedTrackingMDRef&)",
    "insertText": "operator(TypedTrackingMDRef &&X)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Ref =)",
    "insertText": "move(X.Ref)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TypedTrackingMDRef &X)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset(T *MD)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (Ref .)",
    "insertText": "reset(static_cast<Metadata *>(MD))"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TypedTrackingMDRef<MDNode> TrackingMDNodeRef ; typedef TypedTrackingMDRef<ValueAsMetadata> TrackingValueAsMetadataRef ; template<> struct simplify_type<TrackingMDRef> { typedef Metadata* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(TrackingMDRef &MD)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct simplify_type<const TrackingMDRef> { typedef Metadata* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(const TrackingMDRef &MD)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct simplify_type<TypedTrackingMDRef<T>> { typedef T* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(TypedTrackingMDRef<T> &MD)"
  },
  {
    "label": "getSimplifiedValue()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct simplify_type<const TypedTrackingMDRef<T>> { typedef T* SimpleType ; SimpleType)",
    "insertText": "getSimplifiedValue(const TypedTrackingMDRef<T> &MD)"
  }
]