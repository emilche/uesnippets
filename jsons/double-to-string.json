[
  {
    "label": "DoubleToStringConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DoubleToStringConverter"
  },
  {
    "label": "Flags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Flags"
  },
  {
    "label": "DtoaMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DtoaMode"
  },
  {
    "label": "DoubleToStringConverter()",
    "kind": "Method",
    "detail": "Function (# ifndef DOUBLE_CONVERSION_DOUBLE_TO_STRING_H_ # define DOUBLE_CONVERSION_DOUBLE_TO_STRING_H_ # include \" utils . h \" namespace double_conversion { class DoubleToStringConverter { public : const int kMaxFixedDigitsBeforePoint = 6 0 ; const int kMaxFixedDigitsAfterPoint = 1 0 0 ; const int kMaxExponentialDigits = 1 2 0 ; const int kMinPrecisionDigits = 1 ; const int kMaxPrecisionDigits = 1 2 0 ; const int kBase10MaximalLength = 1 7 ; const int kBase10MaximalLengthSingle = 9 ; const int kMaxCharsEcmaScriptShortest = 2 5 ; enum Flags { NO_FLAGS = 0,EMIT_POSITIVE_EXPONENT_SIGN = 1,EMIT_TRAILING_DECIMAL_POINT = 2,EMIT_TRAILING_ZERO_AFTER_POINT = 4,UNIQUE_ZERO = 8,NO_TRAILING_ZERO = 1 6 } ;)",
    "insertText": "DoubleToStringConverter(int flags, const char* infinity_symbol, const char* nan_symbol, char exponent_character, int decimal_in_shortest_low, int decimal_in_shortest_high, int max_leading_padding_zeroes_in_precision_mode, int max_trailing_padding_zeroes_in_precision_mode, int min_exponent_width = 0) : flags_(flags), infinity_symbol_(infinity_symbol), nan_symbol_(nan_symbol), exponent_character_(exponent_character), decimal_in_shortest_low_(decimal_in_shortest_low), decimal_in_shortest_high_(decimal_in_shortest_high), max_leading_padding_zeroes_in_precision_mode_( max_leading_padding_zeroes_in_precision_mode), max_trailing_padding_zeroes_in_precision_mode_( max_trailing_padding_zeroes_in_precision_mode), min_exponent_width_(min_exponent_width)"
  },
  {
    "label": "EcmaScriptConverter()",
    "kind": "Method",
    "detail": "Function (} const DoubleToStringConverter&)",
    "insertText": "EcmaScriptConverter()"
  },
  {
    "label": "ToShortest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToShortest(double value, StringBuilder* result_builder)"
  },
  {
    "label": "ToShortestSingle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ToShortestSingle(float value, StringBuilder* result_builder)"
  },
  {
    "label": "ToFixed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ToFixed(double value, int requested_digits, StringBuilder* result_builder)"
  },
  {
    "label": "ToExponential()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToExponential(double value, int requested_digits, StringBuilder* result_builder)"
  },
  {
    "label": "ToPrecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToPrecision(double value, int precision, StringBuilder* result_builder)"
  },
  {
    "label": "DoubleToAscii()",
    "kind": "Method",
    "detail": "Function (enum DtoaMode { SHORTEST,SHORTEST_SINGLE,FIXED,PRECISION } ; void)",
    "insertText": "DoubleToAscii(double v, DtoaMode mode, int requested_digits, char* buffer, int buffer_length, bool* sign, int* length, int* point)"
  },
  {
    "label": "ToShortestIeeeNumber()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ToShortestIeeeNumber(double value, StringBuilder* result_builder, DtoaMode mode)"
  },
  {
    "label": "HandleSpecialValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSpecialValues(double value, StringBuilder* result_builder)"
  },
  {
    "label": "CreateExponentialRepresentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExponentialRepresentation(const char* decimal_digits, int length, int exponent, StringBuilder* result_builder)"
  },
  {
    "label": "CreateDecimalRepresentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDecimalRepresentation(const char* decimal_digits, int length, int decimal_point, int digits_after_point, StringBuilder* result_builder)"
  },
  {
    "label": "DOUBLE_CONVERSION_DISALLOW_IMPLICIT_CONSTRUCTORS()",
    "kind": "Method",
    "detail": "Function (const int flags_ ; const char* const infinity_symbol_ ; const char* const nan_symbol_ ; const char exponent_character_ ; const int decimal_in_shortest_low_ ; const int decimal_in_shortest_high_ ; const int max_leading_padding_zeroes_in_precision_mode_ ; const int max_trailing_padding_zeroes_in_precision_mode_ ; const int min_exponent_width_ ;)",
    "insertText": "DOUBLE_CONVERSION_DISALLOW_IMPLICIT_CONSTRUCTORS(DoubleToStringConverter)"
  }
]