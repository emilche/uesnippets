[
  {
    "label": "Block4x4Encoding_ETC1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Block4x4Encoding_ETC1"
  },
  {
    "label": "Block4x4Encoding_ETC1()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EtcBlock4x4Encoding . h \" # include \" EtcBlock4x4EncodingBits . h \" # include \" EtcDifferentialTrys . h \" # include \" EtcIndividualTrys . h \" namespace Etc { class Block4x4Encoding_ETC1 : public Block4x4Encoding { public :)",
    "insertText": "Block4x4Encoding_ETC1(void)"
  },
  {
    "label": "InitFromSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromSource(Block4x4 *a_pblockParent, ColorFloatRGBA *a_pafrgbaSource, unsigned char *a_paucEncodingBits, ErrorMetric a_errormetric)"
  },
  {
    "label": "InitFromEncodingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromEncodingBits(Block4x4 *a_pblockParent, unsigned char *a_paucEncodingBits, ColorFloatRGBA *a_pafrgbaSource, ErrorMetric a_errormetric)"
  },
  {
    "label": "PerformIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformIteration(float a_fEffort)"
  },
  {
    "label": "GetFlip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFlip(void)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(void)"
  },
  {
    "label": "GetColor1()",
    "kind": "Method",
    "detail": "Function (ColorFloatRGBA)",
    "insertText": "GetColor1(void)"
  },
  {
    "label": "PerformFirstIteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformFirstIteration(void)"
  },
  {
    "label": "CalculateMostLikelyFlip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateMostLikelyFlip(void)"
  },
  {
    "label": "TryDifferential()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDifferential(bool a_boolFlip, unsigned int a_uiRadius, int a_iGrayOffset1, int a_iGrayOffset2)"
  },
  {
    "label": "TryDifferentialHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDifferentialHalf(DifferentialTrys::Half *a_phalf)"
  },
  {
    "label": "TryIndividual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryIndividual(bool a_boolFlip, unsigned int a_uiRadius)"
  },
  {
    "label": "TryIndividualHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryIndividualHalf(IndividualTrys::Half *a_phalf)"
  },
  {
    "label": "TryDegenerates1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDegenerates1(void)"
  },
  {
    "label": "TryDegenerates2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDegenerates2(void)"
  },
  {
    "label": "TryDegenerates3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDegenerates3(void)"
  },
  {
    "label": "TryDegenerates4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryDegenerates4(void)"
  },
  {
    "label": "CalculateSelectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSelectors()"
  },
  {
    "label": "CalculateHalfOfTheSelectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateHalfOfTheSelectors(unsigned int a_uiHalf, const unsigned int *pauiPixelMapping)"
  },
  {
    "label": "CalcGrayDistance2()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcGrayDistance2(ColorFloatRGBA &r_frgbaPixel, ColorFloatRGBA &r_frgbaTarget)"
  },
  {
    "label": "fDeltaGray()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "fDeltaGray((r_frgbaPixel.fR - r_frgbaTarget.fR) + (r_frgbaPixel.fG - r_frgbaTarget.fG) + (r_frgbaPixel.fB - r_frgbaTarget.fB))"
  },
  {
    "label": "frgbaPointOnGrayLine()",
    "kind": "Method",
    "detail": "Function (ColorFloatRGBA)",
    "insertText": "frgbaPointOnGrayLine(r_frgbaTarget + fDeltaGray).ClampRGB()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (float fDR = r_frgbaPixel . fR - frgbaPointOnGrayLine . fR ; float fDG = r_frgbaPixel . fG - frgbaPointOnGrayLine . fG ; float fDB = r_frgbaPixel . fB - frgbaPointOnGrayLine . fB ;)",
    "insertText": "return(fDR*fDR) + (fDG*fDG) + (fDB*fDB)"
  },
  {
    "label": "SetEncodingBits_Selectors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEncodingBits_Selectors(void)"
  },
  {
    "label": "CalculateSourceAverages()",
    "kind": "Method",
    "detail": "Function (bool m_boolDiff ; bool m_boolFlip ; ColorFloatRGBA m_frgbaColor1 ; ColorFloatRGBA m_frgbaColor2 ; unsigned int m_uiCW1 ; unsigned int m_uiCW2 ; unsigned int m_auiSelectors [ PIXELS ] ; ColorFloatRGBA m_frgbaSourceAverageLeft ; ColorFloatRGBA m_frgbaSourceAverageRight ; ColorFloatRGBA m_frgbaSourceAverageTop ; ColorFloatRGBA m_frgbaSourceAverageBottom ; bool m_boolMostLikelyFlip ; float m_fError1 ; float m_fError2 ; bool m_boolSeverelyBentDifferentialColors ; Block4x4EncodingBits_RGB8* m_pencodingbitsRGB8 ; private : void)",
    "insertText": "CalculateSourceAverages(void)"
  }
]