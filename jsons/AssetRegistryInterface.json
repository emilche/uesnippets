[
  {
    "label": "FLinkerSave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerSave"
  },
  {
    "label": "FStructuredArchiveRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveRecord"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FArchiveCookContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchiveCookContext"
  },
  {
    "label": "FARFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARFilter"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "UAssetRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetRegistryImpl"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDependencyQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDependencyQuery"
  },
  {
    "label": "FWritePackageDataArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWritePackageDataArgs"
  },
  {
    "label": "IAssetRegistrySingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistrySingleton"
  },
  {
    "label": "FFiltering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFiltering"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "IAssetRegistryInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistryInterface"
  },
  {
    "label": "FAssetPackageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetPackageData"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS ; } class IAssetRegistry ; class UAssetRegistryImpl ; namespace UE::AssetRegistry { enum class EDependencyCategory : uint8 { Package = 0 x01,Manage = 0 x02,SearchableName = 0 x04,None = 0 x0,All = Package | Manage | SearchableName,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EDependencyCategory)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EDependencyProperty : uint8 { None = 0,PackageMask = 0 x7,Hard = 0 x1,Game = 0 x2,Build = 0 x4,SearchableNameMask = 0 x0,ManageMask = 0 x8,Direct = 0 x8,AllMask = PackageMask | SearchableNameMask | ManageMask,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EDependencyProperty)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EDependencyQuery : uint32 { NoRequirements = 0,Hard = 0 x0001,NotHard = 0 x002,Soft = NotHard,Game = 0 x004,NotGame = 0 x008,EditorOnly = NotGame,Build = 0 x010,NotBuild = 0 x020,Propagation = 0 x040,Direct = 0 x0400,NotDirect = 0 x0800,Indirect = NotDirect,PackageMask = 0 x00ff,SearchableNameMask = 0 x0000,ManageMask = 0 x0f00,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EDependencyQuery)"
  },
  {
    "label": "OnlyOnDiskAssets()",
    "kind": "Method",
    "detail": "Function (enum class ESerializationTarget : uint8 { ForGame,ForDevelopment } ; enum class EExists { DoesNotExist,Exists,Unknown,} ; enum class EEnumerateAssetsFlags : uint32 { None = 0,)",
    "insertText": "OnlyOnDiskAssets(1 << 0), AllowUnmountedPaths = (1 << 1), AllowUnfilteredArAssets = (1 << 2)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EEnumerateAssetsFlags)"
  },
  {
    "label": "FDependencyQuery()",
    "kind": "Method",
    "detail": "Function (struct FDependencyQuery { UE::AssetRegistry::EDependencyProperty Required ; UE::AssetRegistry::EDependencyProperty Excluded ; TArray<UE::AssetRegistry::EDependencyProperty,TInlineAllocator<1>> RequiredUnions ;)",
    "insertText": "FDependencyQuery()"
  },
  {
    "label": "FDependencyQuery()",
    "kind": "Method",
    "detail": "Function (Required = UE::AssetRegistry::EDependencyProperty::None ; Excluded = UE::AssetRegistry::EDependencyProperty::None ; })",
    "insertText": "FDependencyQuery(EDependencyQuery QueryFlags)"
  },
  {
    "label": "Required()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Required(!!(QueryFlags & EDependencyQuery::Game) ? UE::AssetRegistry::EDependencyProperty::Game : UE::AssetRegistry::EDependencyProperty::None) | (!!(QueryFlags & EDependencyQuery::Build) ? UE::AssetRegistry::EDependencyProperty::Build : UE::AssetRegistry::EDependencyProperty::None)"
  },
  {
    "label": "EnumRemoveFlags()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "EnumRemoveFlags(QueryFlags, EDependencyQuery::Game | EDependencyQuery::NotGame | EDependencyQuery::Build | EDependencyQuery::NotBuild)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RequiredUnions .)",
    "insertText": "Add(UE::AssetRegistry::EDependencyProperty::Game | UE::AssetRegistry::EDependencyProperty::Build)"
  },
  {
    "label": "Required()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Required(!!(QueryFlags & EDependencyQuery::Hard) ? UE::AssetRegistry::EDependencyProperty::Hard : UE::AssetRegistry::EDependencyProperty::None) | (!!(QueryFlags & EDependencyQuery::Direct) ? UE::AssetRegistry::EDependencyProperty::Direct : UE::AssetRegistry::EDependencyProperty::None)"
  },
  {
    "label": "Excluded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Excluded(!!(QueryFlags & EDependencyQuery::NotHard) ? UE::AssetRegistry::EDependencyProperty::Hard : UE::AssetRegistry::EDependencyProperty::None) | (!!(QueryFlags & EDependencyQuery::NotGame) ? UE::AssetRegistry::EDependencyProperty::Game : UE::AssetRegistry::EDependencyProperty::None) | (!!(QueryFlags & EDependencyQuery::NotBuild) ? UE::AssetRegistry::EDependencyProperty::Build : UE::AssetRegistry::EDependencyProperty::None) | (!!(QueryFlags & EDependencyQuery::NotDirect) ? UE::AssetRegistry::EDependencyProperty::Direct : UE::AssetRegistry::EDependencyProperty::None)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; struct FWritePackageDataArgs { FStructuredArchiveRecord* ParentRecord = nullptr ; const UPackage* Package = nullptr ; FLinkerSave* Linker = nullptr ; const TSet<TObjectPtr<UObject>>* ImportsUsedInGame = nullptr ; const TSet<FName>* SoftPackagesUsedInGame = nullptr ; const TArray<FName>* PackageBuildDependencies = nullptr ; bool bProceduralSave = false ; FArchiveCookContext* CookContext = nullptr ; TArray<FAssetData>* OutAssetDatas = nullptr ; } ; enum class EExtraDependencyFlags : uint32 { None = 0,Build = 0 x1,PropagateManage = 0 x2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EExtraDependencyFlags)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageData(FWritePackageDataArgs& Args)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageData(FStructuredArchiveRecord& ParentRecord, FArchiveCookContext* CookContext, const UPackage* Package, FLinkerSave* Linker, const TSet<TObjectPtr<UObject>>& ImportsUsedInGame, const TSet<FName>& SoftPackagesUsedInGame, TArray<FAssetData>* OutAssetDatas, bool bProceduralSave)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageData(FStructuredArchiveRecord& ParentRecord, bool bIsCooking, const UPackage* Package, FLinkerSave* Linker, const TSet<TObjectPtr<UObject>>& ImportsUsedInGame, const TSet<FName>& SoftPackagesUsedInGame, const ITargetPlatform* TargetPlatform, TArray<FAssetData>* OutAssetDatas)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (namespace Private { class IAssetRegistrySingleton { public : IAssetRegistry*)",
    "insertText": "Get()"
  },
  {
    "label": "ShouldSkipAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipAsset(const UObject* InAsset)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "SetSkipClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE&& WITH_EDITOR void)",
    "insertText": "SetSkipClasses(const TSet<FTopLevelAssetPath>& InSkipUncookedClasses, const TSet<FTopLevelAssetPath>& InSkipCookedClasses)"
  },
  {
    "label": "InitializeShouldSkipAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeShouldSkipAsset()"
  },
  {
    "label": "ShouldSkipAsset()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if WITH_ENGINE&& WITH_EDITOR namespace Utils { bool)",
    "insertText": "ShouldSkipAsset(const FTopLevelAssetPath& AssetClass, uint32 PackageFlags, const TSet<FTopLevelAssetPath>& InSkipUncookedClasses, const TSet<FTopLevelAssetPath>& InSkipCookedClasses)"
  },
  {
    "label": "ShouldSkipAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipAsset(const UObject* InAsset, const TSet<FTopLevelAssetPath>& InSkipUncookedClasses, const TSet<FTopLevelAssetPath>& InSkipCookedClasses)"
  },
  {
    "label": "PopulateSkipClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateSkipClasses(TSet<FTopLevelAssetPath>& OutSkipUncookedClasses, TSet<FTopLevelAssetPath>& OutSkipCookedClasses)"
  },
  {
    "label": "GetScriptPackageNameCoreUObject()",
    "kind": "Method",
    "detail": "Function (} # endif FName)",
    "insertText": "GetScriptPackageNameCoreUObject()"
  },
  {
    "label": "GetScriptPackageNameEngine()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetScriptPackageNameEngine()"
  },
  {
    "label": "GetScriptPackageNameBlueprintGraph()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetScriptPackageNameBlueprintGraph()"
  },
  {
    "label": "GetScriptPackageNameUnrealEd()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetScriptPackageNameUnrealEd()"
  },
  {
    "label": "GetClassNameObject()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetClassNameObject()"
  },
  {
    "label": "GetClassNameObjectRedirector()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetClassNameObjectRedirector()"
  },
  {
    "label": "GetClassNameBlueprintCore()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetClassNameBlueprintCore()"
  },
  {
    "label": "GetClassNameBlueprint()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetClassNameBlueprint()"
  },
  {
    "label": "GetClassNameBlueprintGeneratedClass()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetClassNameBlueprintGeneratedClass()"
  },
  {
    "label": "GetClassPathObject()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetClassPathObject()"
  },
  {
    "label": "GetClassPathObjectRedirector()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetClassPathObjectRedirector()"
  },
  {
    "label": "GetClassPathBlueprintCore()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetClassPathBlueprintCore()"
  },
  {
    "label": "GetClassPathBlueprint()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetClassPathBlueprint()"
  },
  {
    "label": "GetClassPathBlueprintGeneratedClass()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetClassPathBlueprintGeneratedClass()"
  },
  {
    "label": "GetPtr()",
    "kind": "Method",
    "detail": "Function (} namespace EAssetSetManagerResult { enum Type { DoNotSet,SetButDoNotRecurse,SetAndRecurse } ; } namespace EAssetSetManagerFlags { enum Type { IsDirectSet = 1,TargetHasExistingManager = 2,TargetHasDirectManager = 4,} ; } class IAssetRegistryInterface { public : IAssetRegistryInterface*)",
    "insertText": "GetPtr()"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependencies(FName InPackageName, TArray<FName>& OutDependencies, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::Package, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "TryGetAssetByObjectPath()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetByObjectPath(const FSoftObjectPath& ObjectPath, struct FAssetData& OutAssetData)"
  },
  {
    "label": "TryGetAssetPackageData()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetPackageData(FName PackageName, class FAssetPackageData& OutPackageData)"
  },
  {
    "label": "TryGetAssetPackageData()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetPackageData(FName PackageName, class FAssetPackageData& OutPackageData, FName& OutCorrectCasePackageName)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback, UE::AssetRegistry::EEnumerateAssetsFlags InEnumerateFlags)"
  }
]