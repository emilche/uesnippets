[
  {
    "label": "FSequencerSectionCategoryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionCategoryNode"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "TAutoRegisterViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAutoRegisterViewModelTypeID"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannelEditorData . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Internationalization / Text . h \" # include \" MVVM / Extensions / IDeletableExtension . h \" # include \" MVVM / Extensions / IGeometryExtension . h \" # include \" MVVM / Extensions / IOutlinerExtension . h \" # include \" MVVM / Extensions / IRecyclableExtension . h \" # include \" MVVM / Extensions / ITrackAreaExtension . h \" # include \" MVVM / Extensions / ITrackLaneExtension . h \" # include \" MVVM / Extensions / LinkedOutlinerExtension . h \" # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModelPtr . h \" # include \" MVVM / ViewModels / OutlinerItemModel . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" MVVM / ViewModels / ViewModelHierarchy . h \" # include \" MVVM / ViewModels / ViewModelIterators . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FSequencerSectionCategoryNode ; class SWidget ; class UMovieSceneSection ; namespace UE::Sequencer { template<T> struct TAutoRegisterViewModelTypeID ; } namespace UE { namespace Sequencer { class FCategoryModel : public FViewModel,public FLinkedOutlinerExtension,public FGeometryExtensionShim,public ITrackLaneExtension,public FLinkedOutlinerComputedSizingShim { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FCategoryModel, FViewModel, FLinkedOutlinerExtension, IGeometryExtension, ITrackLaneExtension)"
  },
  {
    "label": "FCategoryModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCategoryModel(FName InCategoryName)"
  },
  {
    "label": "IsAnimated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnimated()"
  },
  {
    "label": "GetCategoryName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCategoryName()"
  },
  {
    "label": "CreateTrackLaneView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITrackLaneWidget>)",
    "insertText": "CreateTrackLaneView(const FCreateTrackLaneViewParams& InParams)"
  },
  {
    "label": "ArrangeVirtualTrackLaneView()",
    "kind": "Method",
    "detail": "Function (FTrackLaneVirtualAlignment)",
    "insertText": "ArrangeVirtualTrackLaneView()"
  },
  {
    "label": "GetKeyBarColor()",
    "kind": "Method",
    "detail": "Function (private : FLinearColor)",
    "insertText": "GetKeyBarColor()"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (private : FViewModelListHead Children ; FName CategoryName ; } ; class FCategoryGroupModel : public FOutlinerItemModel,public ITrackAreaExtension,public ICompoundOutlinerExtension,public IDeletableExtension,public IRecyclableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FCategoryGroupModel, FOutlinerItemModel, ITrackAreaExtension, ICompoundOutlinerExtension, IDeletableExtension, IRecyclableExtension)"
  },
  {
    "label": "FCategoryGroupModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCategoryGroupModel(FName InCategoryName, const FText& InDisplayText, FGetMovieSceneTooltipText InGetGroupTooltipTextDelegate)"
  },
  {
    "label": "FCategoryGroupModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCategoryGroupModel()"
  },
  {
    "label": "GetCategories()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TWeakViewModelPtr<FCategoryModel>>)",
    "insertText": "GetCategories()"
  },
  {
    "label": "RecomputeSizing()",
    "kind": "Method",
    "detail": "Function (public : FOutlinerSizing)",
    "insertText": "RecomputeSizing()"
  },
  {
    "label": "GetOutlinerSizing()",
    "kind": "Method",
    "detail": "Function (FOutlinerSizing)",
    "insertText": "GetOutlinerSizing()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetLabelFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetLabelFont()"
  },
  {
    "label": "GetLabelToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabelToolTipText()"
  },
  {
    "label": "CreateOutlinerViewForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "CreateOutlinerViewForColumn(const FCreateOutlinerViewParams& InParams, const FName& InColumnName)"
  },
  {
    "label": "GetTrackAreaParameters()",
    "kind": "Method",
    "detail": "Function (FTrackAreaParameters)",
    "insertText": "GetTrackAreaParameters()"
  },
  {
    "label": "GetTrackAreaModelList()",
    "kind": "Method",
    "detail": "Function (FViewModelVariantIterator)",
    "insertText": "GetTrackAreaModelList()"
  },
  {
    "label": "CanDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDelete(FText* OutErrorMessage)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete()"
  },
  {
    "label": "OnRecycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRecycle()"
  },
  {
    "label": "BuildSidebarMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSidebarMenu(FMenuBuilder& MenuBuilder)"
  }
]