[
  {
    "label": "EPhysXFilterDataFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPhysXFilterDataFlags"
  },
  {
    "label": "FPhysicsFilterBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysicsFilterBuilder"
  },
  {
    "label": "ECollisionChannel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionChannel"
  },
  {
    "label": "FCollisionResponseContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseContainer"
  },
  {
    "label": "FPhysicsFilterBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineDefines . h \" # include \" PhysicsPublic . h \" # include \" Physics / PhysicsInterfaceTypes . h \" # include \" Chaos / ChaosEngineInterface . h \" enum EPhysXFilterDataFlags { EPDF_SimpleCollision = 0 x0001,EPDF_ComplexCollision = 0 x0002,EPDF_CCD = 0 x0004,EPDF_ContactNotify = 0 x0008,EPDF_StaticShape = 0 x0010,EPDF_ModifyContacts = 0 x0020,EPDF_KinematicKinematicPairs = 0 x0040,} ; enum { NumCollisionChannelBits = 5 } ; enum { NumFilterDataFlagBits = 3 2 - NumExtraFilterBits - NumCollisionChannelBits } ; struct FPhysicsFilterBuilder {)",
    "insertText": "FPhysicsFilterBuilder(TEnumAsByte<enum ECollisionChannel> InObjectType, FMaskFilter MaskFilter, const struct FCollisionResponseContainer& ResponseToChannels)"
  },
  {
    "label": "ConditionalSetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalSetFlags(EPhysXFilterDataFlags Flag, bool bEnabled)"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (Word3 | = Flag ; } } void)",
    "insertText": "GetQueryData(uint32 SourceObjectID, uint32& OutWord0, uint32& OutWord1, uint32& OutWord2, uint32& OutWord3)"
  },
  {
    "label": "GetSimData()",
    "kind": "Method",
    "detail": "Function (OutWord0 = SourceObjectID ; OutWord1 = BlockingBits ; OutWord2 = TouchingBits ; OutWord3 = Word3 ; } void)",
    "insertText": "GetSimData(uint32 BodyIndex, uint32 ComponentID, uint32& OutWord0, uint32& OutWord1, uint32& OutWord2, uint32& OutWord3)"
  },
  {
    "label": "GetCombinedData()",
    "kind": "Method",
    "detail": "Function (OutWord0 = BodyIndex ; OutWord1 = BlockingBits ; OutWord2 = ComponentID ; OutWord3 = Word3 ; } void)",
    "insertText": "GetCombinedData(uint32& OutBlockingBits, uint32& OutTouchingBits, uint32& OutObjectTypeAndFlags)"
  },
  {
    "label": "CreateShapeFilterData()",
    "kind": "Method",
    "detail": "Function (OutBlockingBits = BlockingBits ; OutTouchingBits = TouchingBits ; OutObjectTypeAndFlags = Word3 ; } private : uint32 BlockingBits ; uint32 TouchingBits ; uint32 Word3 ; } ; void)",
    "insertText": "CreateShapeFilterData(const uint8 MyChannel, const FMaskFilter MaskFilter, const int32 SourceObjectID, const FCollisionResponseContainer& ResponseToChannels, uint32 ComponentID, uint16 BodyIndex, FCollisionFilterData& OutQueryData, FCollisionFilterData& OutSimData, bool bEnableCCD, bool bEnableContactNotify, bool bStaticShape, bool bModifyContacts = false)"
  },
  {
    "label": "Builder()",
    "kind": "Method",
    "detail": "Function (FPhysicsFilterBuilder)",
    "insertText": "Builder((ECollisionChannel)MyChannel, MaskFilter, ResponseToChannels)"
  },
  {
    "label": "ConditionalSetFlags()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "ConditionalSetFlags(EPDF_CCD, bEnableCCD)"
  },
  {
    "label": "ConditionalSetFlags()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "ConditionalSetFlags(EPDF_ContactNotify, bEnableContactNotify)"
  },
  {
    "label": "ConditionalSetFlags()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "ConditionalSetFlags(EPDF_StaticShape, bStaticShape)"
  },
  {
    "label": "ConditionalSetFlags()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "ConditionalSetFlags(EPDF_ModifyContacts, bModifyContacts)"
  },
  {
    "label": "FCollisionFilterData()",
    "kind": "Method",
    "detail": "Function (OutQueryData =)",
    "insertText": "FCollisionFilterData()"
  },
  {
    "label": "GetQueryData()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "GetQueryData(SourceObjectID, OutQueryData.Word0, OutQueryData.Word1, OutQueryData.Word2, OutQueryData.Word3)"
  },
  {
    "label": "GetSimData()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "GetSimData(BodyIndex, ComponentID, OutSimData.Word0, OutSimData.Word1, OutSimData.Word2, OutSimData.Word3)"
  },
  {
    "label": "GetCollisionChannel()",
    "kind": "Method",
    "detail": "Function (} ECollisionChannel)",
    "insertText": "GetCollisionChannel(uint32 Word3)"
  },
  {
    "label": "ChannelMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ChannelMask(Word3 << NumExtraFilterBits) >> (32 - NumCollisionChannelBits)"
  },
  {
    "label": "GetCollisionChannelAndExtraFilter()",
    "kind": "Method",
    "detail": "Function (} ECollisionChannel)",
    "insertText": "GetCollisionChannelAndExtraFilter(uint32 Word3, FMaskFilter& OutMaskFilter)"
  },
  {
    "label": "GetCollisionChannel()",
    "kind": "Method",
    "detail": "Function (uint32 ChannelMask =)",
    "insertText": "GetCollisionChannel(Word3)"
  },
  {
    "label": "Word3()",
    "kind": "Method",
    "detail": "Function (OutMaskFilter =)",
    "insertText": "Word3(32 - NumExtraFilterBits)"
  },
  {
    "label": "CreateChannelAndFilter()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CreateChannelAndFilter(ECollisionChannel CollisionChannel, FMaskFilter MaskFilter)"
  },
  {
    "label": "ResultMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ResultMask(uint32(MaskFilter) << NumCollisionChannelBits) | (uint32)"
  },
  {
    "label": "Word3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Word3(0xFFFFFFFFu >> NumExtraFilterBits)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (Word3 | =)",
    "insertText": "uint32(NewMaskFilter) << (32 - NumExtraFilterBits)"
  },
  {
    "label": "ExtractSimCollisionResponseContainer()",
    "kind": "Method",
    "detail": "Function (} FCollisionResponseContainer)",
    "insertText": "ExtractSimCollisionResponseContainer(const FCollisionFilterData& InSimFilterData)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FCollisionResponseContainer CollisionResponseContainer ;)",
    "insertText": "for(int32 ChannelIndex = 0; ChannelIndex < UE_ARRAY_COUNT(CollisionResponseContainer.EnumArray); ++ChannelIndex)"
  },
  {
    "label": "ExtractQueryCollisionResponseContainer()",
    "kind": "Method",
    "detail": "Function (CollisionResponseContainer . EnumArray [ ChannelIndex ] = ECR_Block ; } else { CollisionResponseContainer . EnumArray [ ChannelIndex ] = ECR_Ignore ; } } return CollisionResponseContainer ; } FCollisionResponseContainer)",
    "insertText": "ExtractQueryCollisionResponseContainer(const FCollisionFilterData& InQueryFilterData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CollisionResponseContainer . EnumArray [ ChannelIndex ] = ECR_Block ; } else)",
    "insertText": "if((InQueryFilterData.Word2) & (1 << ChannelIndex))"
  }
]