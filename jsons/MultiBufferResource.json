[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IBufferResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBufferResource"
  },
  {
    "label": "FSingleBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSingleBuffer"
  },
  {
    "label": "FDoubleBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDoubleBuffer"
  },
  {
    "label": "FTripleBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTripleBuffer"
  },
  {
    "label": "FGuardedTripleBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGuardedTripleBuffer"
  },
  {
    "label": "ResourceTypeWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ResourceTypeWrapper"
  },
  {
    "label": "FMultiBufferFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiBufferFactory"
  },
  {
    "label": "IBufferResource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" namespace Chaos { enum class EMultiBufferMode : uint8 { Undefined = 0,Single,Double,Triple,TripleGuarded } ; template<ResourceType> class IBufferResource { public : ~)",
    "insertText": "IBufferResource()"
  },
  {
    "label": "GetBufferMode()",
    "kind": "Method",
    "detail": "Function (} EMultiBufferMode)",
    "insertText": "GetBufferMode()"
  },
  {
    "label": "AccessProducerBuffer()",
    "kind": "Method",
    "detail": "Function (ResourceType*)",
    "insertText": "AccessProducerBuffer()"
  },
  {
    "label": "GetConsumerBufferMutable()",
    "kind": "Method",
    "detail": "Function (ResourceType*)",
    "insertText": "GetConsumerBufferMutable()"
  },
  {
    "label": "GetProducerBuffer()",
    "kind": "Method",
    "detail": "Function (const ResourceType*)",
    "insertText": "GetProducerBuffer()"
  },
  {
    "label": "GetConsumerBuffer()",
    "kind": "Method",
    "detail": "Function (const ResourceType*)",
    "insertText": "GetConsumerBuffer()"
  },
  {
    "label": "FlipProducer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlipProducer()"
  },
  {
    "label": "FSingleBuffer()",
    "kind": "Method",
    "detail": "Function (} ; template<ResourceType> class FSingleBuffer final : public IBufferResource<ResourceType> { public :)",
    "insertText": "FSingleBuffer()"
  },
  {
    "label": "FDoubleBuffer()",
    "kind": "Method",
    "detail": "Function (} private : ResourceType Data ; } ; template<ResourceType> class FDoubleBuffer final : public IBufferResource<ResourceType> { public :)",
    "insertText": "FDoubleBuffer() : Data_Producer(&Data1) , Data_Consumer(&Data2)"
  },
  {
    "label": "FDoubleBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDoubleBuffer()"
  },
  {
    "label": "FTripleBuffer()",
    "kind": "Method",
    "detail": "Function (Data_Producer =& Data2 ; Data_Consumer =& Data1 ; } else { Data_Producer =& Data1 ; Data_Consumer =& Data2 ; } } private : ResourceType Data1 ; ResourceType Data2 ; ResourceType* Data_Producer ; ResourceType* Data_Consumer ; } ; template<ResourceType> class FTripleBuffer final : public IBufferResource<ResourceType> { public :)",
    "insertText": "FTripleBuffer() : WriteIndex(1) , ReadIndex(0)"
  },
  {
    "label": "FTripleBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTripleBuffer()"
  },
  {
    "label": "GetReadIndex()",
    "kind": "Method",
    "detail": "Function (int32 CurrentReadIdx =)",
    "insertText": "GetReadIndex()"
  },
  {
    "label": "GetWriteIndex()",
    "kind": "Method",
    "detail": "Function (int32 CurrentWriteIdx =)",
    "insertText": "GetWriteIndex()"
  },
  {
    "label": "FreeIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FreeIdx(CurrentReadIdx + CurrentWriteIdx)"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (ReadIndex .)",
    "insertText": "Store(CurrentWriteIdx)"
  },
  {
    "label": "Store()",
    "kind": "Method",
    "detail": "Function (WriteIndex .)",
    "insertText": "Store(FreeIdx)"
  },
  {
    "label": "FGuardedTripleBuffer()",
    "kind": "Method",
    "detail": "Function (} ResourceType Data [ 3 ] ; TAtomic<int32> WriteIndex ; TAtomic<int32> ReadIndex ; } ; template<ResourceType> class FGuardedTripleBuffer final : public IBufferResource<ResourceType> { public :)",
    "insertText": "FGuardedTripleBuffer() : ProducerThreadBuffer(&Buffers[0]) , ConsumerThreadBuffer(&Buffers[1]) , Interchange(&Buffers[2])"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (ConsumerThreadBuffer = Interchange .)",
    "insertText": "Exchange(ConsumerThreadBuffer)"
  },
  {
    "label": "PeekConsumerBuffer()",
    "kind": "Method",
    "detail": "Function (} const ResourceType*)",
    "insertText": "PeekConsumerBuffer()"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (ProducerThreadBuffer -> bValid = true ; ProducerThreadBuffer = Interchange .)",
    "insertText": "Exchange(ProducerThreadBuffer)"
  },
  {
    "label": "ResourceTypeWrapper()",
    "kind": "Method",
    "detail": "Function (ProducerThreadBuffer -> bValid = false ; } private : struct ResourceTypeWrapper {)",
    "insertText": "ResourceTypeWrapper() : Value(new ResourceType()) , bValid(false)"
  },
  {
    "label": "ResourceTypeWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ResourceTypeWrapper(const ResourceTypeWrapper&)"
  },
  {
    "label": "ResourceTypeWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResourceTypeWrapper(ResourceTypeWrapper&& Other) : Value(MoveTemp(Other.Value)) , bValid(MoveTemp(Other.bValid))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const ResourceTypeWrapper& Other)"
  },
  {
    "label": "ResourceTypeWrapper()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ResourceType> Value ; bool bValid ; } ; ResourceTypeWrapper Buffers [ 3 ] = {)",
    "insertText": "ResourceTypeWrapper(), ResourceTypeWrapper(), ResourceTypeWrapper()"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (ResourceTypeWrapper* ProducerThreadBuffer ; ResourceTypeWrapper* ConsumerThreadBuffer ; TAtomic<ResourceTypeWrapper*> Interchange ; } ; template<ResourceType> class FMultiBufferFactory { public : TUniquePtr<IBufferResource<ResourceType>>)",
    "insertText": "CreateBuffer(const EMultiBufferMode BufferMode)"
  },
  {
    "label": "ResourceType()",
    "kind": "Method",
    "detail": "Function (} break ; case EMultiBufferMode::Double : { return MakeUnique<FDoubleBuffer<)",
    "insertText": "ResourceType()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} break ; default :)",
    "insertText": "checkf(false, TEXT(\"FMultiBufferFactory Unexpected buffer mode\"))"
  }
]