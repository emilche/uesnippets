[
  {
    "label": "BitVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitVector"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "RegScavenger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegScavenger"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "VirtRegMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtRegMap"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "supports",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "supports"
  },
  {
    "label": "ID",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ID"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "may",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "may"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "IDs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDs"
  },
  {
    "label": "into",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "into"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "TargetRegisterInfoDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TargetRegisterInfoDesc"
  },
  {
    "label": "RegClassWeight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegClassWeight"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "B"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "exists",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "exists"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "iterators",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterators"
  },
  {
    "label": "associated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "associated"
  },
  {
    "label": "MCOperandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCOperandInfo"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "copy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "copy"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "per",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "per"
  },
  {
    "label": "SuperRegClassIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SuperRegClassIterator"
  },
  {
    "label": "VirtReg2IndexFunctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VirtReg2IndexFunctor"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "PrintReg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintReg"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "PrintRegUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintRegUnit"
  },
  {
    "label": "PrintVRegOrUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintVRegOrUnit"
  },
  {
    "label": "TargetRegisterInfo()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "TargetRegisterInfo(const TargetRegisterInfoDesc *ID,\n                     regclass_iterator RegClassBegin,\n                     regclass_iterator RegClassEnd,\n                     const char *const *SRINames,\n                     const unsigned *SRILaneMasks,\n                     unsigned CoveringLanes)"
  },
  {
    "label": "RUA()",
    "kind": "Method",
    "detail": "Function (MCRegUnitIterator)",
    "insertText": "RUA(regA, this)"
  },
  {
    "label": "RUB()",
    "kind": "Method",
    "detail": "Function (MCRegUnitIterator)",
    "insertText": "RUB(regB, this)"
  },
  {
    "label": "Units()",
    "kind": "Method",
    "detail": "Function (MCRegUnitIterator)",
    "insertText": "Units(Reg, this)"
  },
  {
    "label": "composeSubRegIndicesImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "composeSubRegIndicesImpl(a, b)"
  },
  {
    "label": "composeSubRegIndexLaneMaskImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "composeSubRegIndexLaneMaskImpl(IdxA, LaneMask)"
  },
  {
    "label": "dumpReg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpReg(unsigned Reg, unsigned SubRegIndex = 0,\n                      const TargetRegisterInfo* TRI = nullptr)"
  }
]