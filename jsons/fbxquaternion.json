[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "FbxQuaternion()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_MATH_QUATERNION_H_ # define _FBXSDK_CORE_MATH_QUATERNION_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / math / fbxvector4 . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxQuaternion : public FbxDouble4 { public :)",
    "insertText": "FbxQuaternion()"
  },
  {
    "label": "FbxQuaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxQuaternion(const FbxQuaternion& pV)"
  },
  {
    "label": "FbxQuaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxQuaternion(double pX, double pY, double pZ, double pW = 1.0)"
  },
  {
    "label": "FbxQuaternion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxQuaternion(const FbxVector4& pAxis, double pDegree)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion&)",
    "insertText": "operator(const FbxQuaternion& pQuaternion)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const double&)",
    "insertText": "operator(int pIndex)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAt(int pIndex, double pValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(double pX, double pY, double pZ, double pW = 1.0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion)",
    "insertText": "operator(double pValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion)",
    "insertText": "operator(const FbxQuaternion& pOther)"
  },
  {
    "label": "Product()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion)",
    "insertText": "Product(const FbxQuaternion& pOther)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Normalize()"
  },
  {
    "label": "Conjugate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Conjugate()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Inverse()"
  },
  {
    "label": "SetAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAxisAngle(const FbxVector4& pAxis, double pDegree)"
  },
  {
    "label": "Slerp()",
    "kind": "Method",
    "detail": "Function (FbxQuaternion)",
    "insertText": "Slerp(const FbxQuaternion& pOther, double pWeight)"
  },
  {
    "label": "ComposeSphericalXYZ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComposeSphericalXYZ(const FbxVector4 pEuler)"
  },
  {
    "label": "DecomposeSphericalXYZ()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "DecomposeSphericalXYZ()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FbxQuaternion & pV)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "double()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const FbxQuaternion &pQ2, const double pThreshold = FBXSDK_TOLERANCE)"
  },
  {
    "label": "GetQuaternionFromPositionToPosition()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS void)",
    "insertText": "GetQuaternionFromPositionToPosition(const FbxVector4 &pP0, const FbxVector4 &pP1)"
  }
]