[
  {
    "label": "multiplication_round_shift_sse4_1()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_X86_HIGHBD_INV_TXFM_SSE4_H_ # define VPX_VPX_DSP_X86_HIGHBD_INV_TXFM_SSE4_H_ # include<smmintrin . h> # include \" . / vpx_config . h \" # include \" vpx_dsp / x86 / highbd_inv_txfm_sse2 . h \" __m128i)",
    "insertText": "multiplication_round_shift_sse4_1(const __m128i *const in , const int c)"
  },
  {
    "label": "pair_set_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i pair_c =)",
    "insertText": "pair_set_epi32(c * 4, 0)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i t0,t1 ; t0 =)",
    "insertText": "_mm_mul_epi32(in[0], pair_c)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (t1 =)",
    "insertText": "_mm_mul_epi32(in[1], pair_c)"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (t0 =)",
    "insertText": "dct_const_round_shift_64bit(t0)"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (t1 =)",
    "insertText": "dct_const_round_shift_64bit(t1)"
  },
  {
    "label": "highbd_butterfly_sse4_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_butterfly_sse4_1(const __m128i in0, const __m128i in1, const int c0, const int c1, __m128i *const out0, __m128i *const out1)"
  },
  {
    "label": "pair_set_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i pair_c0 =)",
    "insertText": "pair_set_epi32(4 * c0, 0)"
  },
  {
    "label": "pair_set_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i pair_c1 =)",
    "insertText": "pair_set_epi32(4 * c1, 0)"
  },
  {
    "label": "extend_64bit()",
    "kind": "Method",
    "detail": "Function (__m128i temp1 [ 4 ],temp2 [ 4 ] ;)",
    "insertText": "extend_64bit(in0, temp1)"
  },
  {
    "label": "extend_64bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extend_64bit(in1, temp2)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (temp1 [ 2 ] =)",
    "insertText": "_mm_mul_epi32(temp1[0], pair_c1)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (temp1 [ 3 ] =)",
    "insertText": "_mm_mul_epi32(temp1[1], pair_c1)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (temp1 [ 0 ] =)",
    "insertText": "_mm_mul_epi32(temp1[0], pair_c0)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (temp1 [ 1 ] =)",
    "insertText": "_mm_mul_epi32(temp1[1], pair_c0)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (temp2 [ 2 ] =)",
    "insertText": "_mm_mul_epi32(temp2[0], pair_c0)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (temp2 [ 3 ] =)",
    "insertText": "_mm_mul_epi32(temp2[1], pair_c0)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (temp2 [ 0 ] =)",
    "insertText": "_mm_mul_epi32(temp2[0], pair_c1)"
  },
  {
    "label": "_mm_mul_epi32()",
    "kind": "Method",
    "detail": "Function (temp2 [ 1 ] =)",
    "insertText": "_mm_mul_epi32(temp2[1], pair_c1)"
  },
  {
    "label": "_mm_sub_epi64()",
    "kind": "Method",
    "detail": "Function (temp1 [ 0 ] =)",
    "insertText": "_mm_sub_epi64(temp1[0], temp2[0])"
  },
  {
    "label": "_mm_sub_epi64()",
    "kind": "Method",
    "detail": "Function (temp1 [ 1 ] =)",
    "insertText": "_mm_sub_epi64(temp1[1], temp2[1])"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (temp2 [ 0 ] =)",
    "insertText": "_mm_add_epi64(temp1[2], temp2[2])"
  },
  {
    "label": "_mm_add_epi64()",
    "kind": "Method",
    "detail": "Function (temp2 [ 1 ] =)",
    "insertText": "_mm_add_epi64(temp1[3], temp2[3])"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (temp1 [ 0 ] =)",
    "insertText": "dct_const_round_shift_64bit(temp1[0])"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (temp1 [ 1 ] =)",
    "insertText": "dct_const_round_shift_64bit(temp1[1])"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (temp2 [ 0 ] =)",
    "insertText": "dct_const_round_shift_64bit(temp2[0])"
  },
  {
    "label": "dct_const_round_shift_64bit()",
    "kind": "Method",
    "detail": "Function (temp2 [ 1 ] =)",
    "insertText": "dct_const_round_shift_64bit(temp2[1])"
  },
  {
    "label": "pack_4()",
    "kind": "Method",
    "detail": "Function (* out0 =)",
    "insertText": "pack_4(temp1[0], temp1[1])"
  },
  {
    "label": "pack_4()",
    "kind": "Method",
    "detail": "Function (* out1 =)",
    "insertText": "pack_4(temp2[0], temp2[1])"
  },
  {
    "label": "highbd_butterfly_cospi16_sse4_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_butterfly_cospi16_sse4_1(const __m128i in0, const __m128i in1, __m128i *const out0, __m128i *const out1)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i temp1 [ 2 ],temp2 ; temp2 =)",
    "insertText": "_mm_add_epi32(in0, in1)"
  },
  {
    "label": "extend_64bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extend_64bit(temp2, temp1)"
  },
  {
    "label": "multiplication_round_shift_sse4_1()",
    "kind": "Method",
    "detail": "Function (* out0 =)",
    "insertText": "multiplication_round_shift_sse4_1(temp1, cospi_16_64)"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (temp2 =)",
    "insertText": "_mm_sub_epi32(in0, in1)"
  },
  {
    "label": "highbd_partial_butterfly_sse4_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_partial_butterfly_sse4_1(const __m128i in, const int c0, const int c1, __m128i *const out0, __m128i *const out1)"
  },
  {
    "label": "extend_64bit()",
    "kind": "Method",
    "detail": "Function (__m128i temp [ 2 ] ;)",
    "insertText": "extend_64bit(in, temp)"
  },
  {
    "label": "multiplication_round_shift_sse4_1()",
    "kind": "Method",
    "detail": "Function (* out0 =)",
    "insertText": "multiplication_round_shift_sse4_1(temp, c0)"
  },
  {
    "label": "multiplication_round_shift_sse4_1()",
    "kind": "Method",
    "detail": "Function (* out1 =)",
    "insertText": "multiplication_round_shift_sse4_1(temp, c1)"
  },
  {
    "label": "highbd_idct4_sse4_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "highbd_idct4_sse4_1(__m128i *const io)"
  },
  {
    "label": "transpose_32bit_4x4()",
    "kind": "Method",
    "detail": "Function (__m128i temp [ 2 ],step [ 4 ] ;)",
    "insertText": "transpose_32bit_4x4(io, io)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (temp [ 0 ] =)",
    "insertText": "_mm_add_epi32(io[0], io[2])"
  },
  {
    "label": "extend_64bit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extend_64bit(temp[0], temp)"
  },
  {
    "label": "multiplication_round_shift_sse4_1()",
    "kind": "Method",
    "detail": "Function (step [ 0 ] =)",
    "insertText": "multiplication_round_shift_sse4_1(temp, cospi_16_64)"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (temp [ 0 ] =)",
    "insertText": "_mm_sub_epi32(io[0], io[2])"
  },
  {
    "label": "highbd_butterfly_sse4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "highbd_butterfly_sse4_1(io[1], io[3], cospi_24_64, cospi_8_64, &step[2], &step[3])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (io [ 0 ] =)",
    "insertText": "_mm_add_epi32(step[0], step[3])"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (io [ 1 ] =)",
    "insertText": "_mm_add_epi32(step[1], step[2])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (io [ 2 ] =)",
    "insertText": "_mm_sub_epi32(step[1], step[2])"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (io [ 3 ] =)",
    "insertText": "_mm_sub_epi32(step[0], step[3])"
  },
  {
    "label": "vpx_highbd_idct8x8_half1d_sse4_1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vpx_highbd_idct8x8_half1d_sse4_1(__m128i *const io)"
  },
  {
    "label": "vpx_highbd_idct16_4col_sse4_1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_highbd_idct16_4col_sse4_1(__m128i *const io)"
  }
]