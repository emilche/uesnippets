[
  {
    "label": "FSlateInvalidationRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationRoot"
  },
  {
    "label": "FSlateInvalidationRootList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInvalidationRootList"
  },
  {
    "label": "AddInvalidationRoot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FSlateInvalidationRoot ; class FSlateInvalidationRootList { public : int32)",
    "insertText": "AddInvalidationRoot(FSlateInvalidationRoot* InvalidationRoot)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (+ + GenerationNumber ;)",
    "insertText": "check(GenerationNumber != INDEX_NONE)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InvalidationRoots .)",
    "insertText": "Add(GenerationNumber, InvalidationRoot)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (InvalidationRoots .)",
    "insertText": "Remove(Id)"
  },
  {
    "label": "GetInvalidationRoot()",
    "kind": "Method",
    "detail": "Function (} const FSlateInvalidationRoot*)",
    "insertText": "GetInvalidationRoot(int32 UniqueId)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FSlateInvalidationRoot* const* FoundElement = InvalidationRoots .)",
    "insertText": "Find(UniqueId)"
  },
  {
    "label": "GetInvalidationRoots()",
    "kind": "Method",
    "detail": "Function (} const TMap<int32,FSlateInvalidationRoot*>&)",
    "insertText": "GetInvalidationRoots()"
  }
]