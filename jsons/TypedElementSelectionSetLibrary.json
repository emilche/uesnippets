[
  {
    "label": "UTypedElementSelectionSetLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSetLibrary"
  },
  {
    "label": "CheckForInvalidSelectionSet()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Framework / TypedElementListProxy . h \" # include \" Elements / Framework / TypedElementSelectionSet . h \" # include \" CoreMinimal . h \" # include \" UObject / Stack . h \" # include \" TypedElementSelectionSetLibrary . generated . h \" namespace UE::TypedElementFramework::Private { bool)",
    "insertText": "CheckForInvalidSelectionSet(UTypedElementSelectionSet* SelectionSet)"
  },
  {
    "label": "KismetExecutionMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KismetExecutionMessage(TEXT(\"SelectionSet is null.\"), ELogVerbosity::Error)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} return true ; } })",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintCallable, Category=\"TypedElementFramework|Selection\", meta=(ScriptMethod)) static bool SelectElementsFromList(UTypedElementSelectionSet* SelectionSet, const FScriptTypedElementListProxy ElementList, const FTypedElementSelectionOptions SelectionOptions)"
  },
  {
    "label": "KismetExecutionMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KismetExecutionMessage(TEXT(\"ElementList is in a invalid state.\"), ELogVerbosity::Error)"
  },
  {
    "label": "ConvertToScriptTypedElementList()",
    "kind": "Method",
    "detail": "Function (} FScriptTypedElementListPtr NormalizedSelection = UE::)",
    "insertText": "ConvertToScriptTypedElementList(SelectionSet->GetNormalizedSelection(NormalizationOptions))"
  },
  {
    "label": "ConvertToNativeTypedElementList()",
    "kind": "Method",
    "detail": "Function (} FTypedElementListPtr NativeList = UE::)",
    "insertText": "ConvertToNativeTypedElementList(ElementList.GetElementList())"
  }
]