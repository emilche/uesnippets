[
  {
    "label": "MultiEndCall",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiEndCall"
  },
  {
    "label": "SpeakingTurn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SpeakingTurn"
  },
  {
    "label": "SpeakingTurn()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_TEST_CONVERSATIONAL_SPEECH_MULTIEND_CALL_H_ # define MODULES_AUDIO_PROCESSING_TEST_CONVERSATIONAL_SPEECH_MULTIEND_CALL_H_ # include<stddef . h> # include<map> # include<memory> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / test / conversational_speech / timing . h \" # include \" modules / audio_processing / test / conversational_speech / wavreader_abstract_factory . h \" # include \" modules / audio_processing / test / conversational_speech / wavreader_interface . h \" namespace webrtc { namespace test { namespace conversational_speech { class MultiEndCall { public : struct SpeakingTurn {)",
    "insertText": "SpeakingTurn(absl::string_view new_speaker_name, absl::string_view new_audiotrack_file_name, size_t new_begin, size_t new_end, int gain) : speaker_name(new_speaker_name), audiotrack_file_name(new_audiotrack_file_name), begin(new_begin), end(new_end), gain(gain)"
  },
  {
    "label": "MultiEndCall()",
    "kind": "Method",
    "detail": "Function (} std::string speaker_name ; std::string audiotrack_file_name ; size_t begin ; size_t end ; int gain ; } ;)",
    "insertText": "MultiEndCall(rtc::ArrayView<const Turn> timing, absl::string_view audiotracks_path, std::unique_ptr<WavReaderAbstractFactory> wavreader_abstract_factory)"
  },
  {
    "label": "MultiEndCall()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MultiEndCall()"
  },
  {
    "label": "MultiEndCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiEndCall(const MultiEndCall&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MultiEndCall&)",
    "insertText": "operator(const MultiEndCall&)"
  },
  {
    "label": "speaker_names()",
    "kind": "Method",
    "detail": "Function (const std::set<std::string>&)",
    "insertText": "speaker_names()"
  },
  {
    "label": "CreateAudioTrackReaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAudioTrackReaders()"
  },
  {
    "label": "CheckTiming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckTiming()"
  }
]