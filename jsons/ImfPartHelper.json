[
  {
    "label": "MultiViewChannelName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MultiViewChannelName"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "getLayer()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_PARTHELPER_H # define INCLUDED_IMF_PARTHELPER_H # include \" ImfChannelList . h \" # include \" ImfExport . h \" # include \" ImfForward . h \" # include \" ImfMultiPartInputFile . h \" # include \" ImfMultiView . h \" # include \" ImfNamespace . h \" # include \" ImfStandardAttributes . h \" # include \" ImfStringVectorAttribute . h \" # include<map> # include<set> # include<string> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER struct MultiViewChannelName { public : std::string name ; std::string view ; int part_number ; std::string internal_name ; std::string)",
    "insertText": "getLayer()"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (std::size_t q = name .)",
    "insertText": "rfind('.')"
  },
  {
    "label": "getSuffix()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "getSuffix()"
  },
  {
    "label": "SplitChannels()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> int)",
    "insertText": "SplitChannels(const T& begin, const T& end, bool multipart = true, const std::string& heroView = std::string ())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i -> part_number = 0 ;)",
    "insertText": "if(i->view == \"\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } return 1 ; } else { std::map<std::string,std::set<std::string>> viewsInLayers ;)",
    "insertText": "for(T i = begin; i != end; i++)"
  },
  {
    "label": "getLayer()",
    "kind": "Method",
    "detail": "Function (viewsInLayers [ i ->)",
    "insertText": "getLayer()].insert (i->view)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} std::map<std::pair<std::string,std::string>,int> layerToPart ; int partCount = 0 ;)",
    "insertText": "for(std::map<std::string, std::set<std::string>>::const_iterator layer = viewsInLayers.begin (); layer != viewsInLayers.end (); layer++)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (bool layer_has_hero = layer -> second .)",
    "insertText": "find(heroView) != layer->second.end ()"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (layerToPart [)",
    "insertText": "make_pair(layer->first, heroView)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(std::set<std::string>::const_iterator view = layer->second.begin (); view != layer->second.end (); view++)"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (layerToPart [)",
    "insertText": "make_pair(layer->first, *view)"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (i -> internal_name = i -> name ; i -> part_number = layerToPart [)",
    "insertText": "make_pair(i->getLayer (), i->view)"
  },
  {
    "label": "GetChannelsInMultiPartFile()",
    "kind": "Method",
    "detail": "Function (} return partCount ; } } template<class T> void)",
    "insertText": "GetChannelsInMultiPartFile(const MultiPartInputFile& file, T& chans)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool has_multiview = false ; StringVector mview ;)",
    "insertText": "if(file.parts () == 1)"
  },
  {
    "label": "multiView()",
    "kind": "Method",
    "detail": "Function (mview =)",
    "insertText": "multiView(file.header (0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (has_multiview = true ; } })",
    "insertText": "for(int p = 0; p < file.parts (); p++)"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (const ChannelList& c = file .)",
    "insertText": "header(p).channels ()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string view = \" \" ;)",
    "insertText": "if(file.header (p).hasView ())"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (view = file .)",
    "insertText": "header(p).view ()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(ChannelList::ConstIterator i = c.begin (); i != c.end (); i++)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (MultiViewChannelName m ; m . name =)",
    "insertText": "string(i.name ())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m . internal_name = m . name ;)",
    "insertText": "if(has_multiview)"
  },
  {
    "label": "viewFromChannelName()",
    "kind": "Method",
    "detail": "Function (m . view =)",
    "insertText": "viewFromChannelName(m.name, mview)"
  },
  {
    "label": "removeViewName()",
    "kind": "Method",
    "detail": "Function (m . name =)",
    "insertText": "removeViewName(m.internal_name, m.view)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} else { m . view = view ; } m . part_number = p ; chans .)",
    "insertText": "push_back(m)"
  }
]