[
  {
    "label": "CFixedNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CFixedNumber() : m_iValue(0)"
  },
  {
    "label": "CFixedNumber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CFixedNumber(const CFixedNumber& cOther) : m_iValue(cOther.m_iValue)"
  },
  {
    "label": "CFixedNumber()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CFixedNumber(st_float32 fValue) : m_iValue(st_int32(fValue * m_fOneOverStep))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CFixedNumber&)",
    "insertText": "operator(const CFixedNumber& cOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_iValue = cOther . m_iValue ; return* this ; } CFixedNumber&)",
    "insertText": "operator(float fValue)"
  },
  {
    "label": "st_int32()",
    "kind": "Method",
    "detail": "Function (m_iValue =)",
    "insertText": "st_int32(fValue * m_fOneOverStep)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CFixedNumber cReturn ; cReturn . m_iValue = m_iValue - cOther . m_iValue ; return cReturn ; } CFixedNumber)",
    "insertText": "operator(void)"
  },
  {
    "label": "ToFloat()",
    "kind": "Method",
    "detail": "Function (CFixedNumber cReturn ; cReturn . m_iValue = - m_iValue ; return cReturn ; } st_float32)",
    "insertText": "ToFloat(void)"
  },
  {
    "label": "SetBitsUsedForFraction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBitsUsedForFraction(st_uint32 uiDigits)"
  },
  {
    "label": "st_float32()",
    "kind": "Method",
    "detail": "Function (m_uiBitsUsedForFraction = uiDigits ; m_fOneOverStep =)",
    "insertText": "st_float32(1 << m_uiBitsUsedForFraction)"
  },
  {
    "label": "m_fStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_fStep(1.0f / m_fOneOverStep)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CFixedVec3() : x(0.0f), y(0.0f), z(0.0f)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CFixedVec3(st_float32 _x, st_float32 _y, st_float32 _z) : x(_x), y(_y), z(_z)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CFixedVec3(st_float32 _x, st_float32 _y) : x(_x), y(_y), z(0.0f)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CFixedVec3(const st_float32 afPos[3]) : x(afPos[0]), y(afPos[1]), z(afPos[2])"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CFixedVec3(CFixedNumber _x, CFixedNumber _y, CFixedNumber _z) : x(_x), y(_y), z(_z)"
  },
  {
    "label": "CFixedVec3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CFixedVec3(CFixedNumber _x, CFixedNumber _y) : x(_x), y(_y), z(0.0f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CFixedNumber&)",
    "insertText": "operator(int nIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const CFixedVec3& vIn)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(st_float32 _x, st_float32 _y, st_float32 _z)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (x = _x ; y = _y ; z = _z ; } void)",
    "insertText": "Set(st_float32 _x, st_float32 _y)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (x = _x ; y = _y ; z = 0 . 0 f ; } void)",
    "insertText": "Set(const st_float32 afPos[3])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (x = afPos [ 0 ] ; y = afPos [ 1 ] ; z = afPos [ 2 ] ; } void)",
    "insertText": "Set(CFixedNumber _x, CFixedNumber _y, CFixedNumber _z)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (x = _x ; y = _y ; z = _z ; } void)",
    "insertText": "Set(CFixedNumber _x, CFixedNumber _y)"
  },
  {
    "label": "ToVec3()",
    "kind": "Method",
    "detail": "Function (x = _x ; y = _y ; z = 0 . 0 f ; } Vec3)",
    "insertText": "ToVec3(void)"
  }
]