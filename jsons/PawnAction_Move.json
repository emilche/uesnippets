[
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UDEPRECATED_PawnAction_Move",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_PawnAction_Move"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" Actions / PawnAction . h \" # include \" Navigation / PathFollowingComponent . h \" # include \" PawnAction_Move . generated . h \" class AAIController ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum Type : int { UsePathfinding,StraightLine,} ; })",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() protected: UPROPERTY(Category = PawnAction, EditAnywhere, BlueprintReadWrite)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "CreateAction()",
    "kind": "Method",
    "detail": "Function (UDEPRECATED_PawnAction_Move*)",
    "insertText": "CreateAction(UWorld& World, AActor* GoalActor, EPawnActionMoveMode::Type Mode)"
  },
  {
    "label": "CreateAction()",
    "kind": "Method",
    "detail": "Function (UDEPRECATED_PawnAction_Move*)",
    "insertText": "CreateAction(UWorld& World, const FVector& GoalLocation, EPawnActionMoveMode::Type Mode)"
  },
  {
    "label": "CheckAlreadyAtGoal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAlreadyAtGoal(AAIController& Controller, const FVector& TestLocation, float Radius)"
  },
  {
    "label": "CheckAlreadyAtGoal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAlreadyAtGoal(AAIController& Controller, const AActor& TestGoal, float Radius)"
  },
  {
    "label": "HandleAIMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAIMessage(UBrainComponent*, const FAIMessage&)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FNavPathSharedRef InPath)"
  },
  {
    "label": "OnPathUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPathUpdated(FNavigationPath* UpdatedPath, ENavPathEvent::Type Event)"
  },
  {
    "label": "SetAcceptableRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAcceptableRadius(float NewAcceptableRadius)"
  },
  {
    "label": "SetFinishOnOverlap()",
    "kind": "Method",
    "detail": "Function (AcceptableRadius = NewAcceptableRadius ; } void)",
    "insertText": "SetFinishOnOverlap(bool bNewFinishOnOverlap)"
  },
  {
    "label": "EnableStrafing()",
    "kind": "Method",
    "detail": "Function (bFinishOnOverlap = bNewFinishOnOverlap ; } void)",
    "insertText": "EnableStrafing(bool bNewStrafing)"
  },
  {
    "label": "EnablePathUpdateOnMoveGoalLocationChange()",
    "kind": "Method",
    "detail": "Function (bAllowStrafe = bNewStrafing ; } void)",
    "insertText": "EnablePathUpdateOnMoveGoalLocationChange(bool bEnable)"
  },
  {
    "label": "EnableGoalLocationProjectionToNavigation()",
    "kind": "Method",
    "detail": "Function (bUpdatePathToGoal = bEnable ; } void)",
    "insertText": "EnableGoalLocationProjectionToNavigation(bool bEnable)"
  },
  {
    "label": "SetAbortSubActionOnPathUpdate()",
    "kind": "Method",
    "detail": "Function (bProjectGoalToNavigation = bEnable ; } void)",
    "insertText": "SetAbortSubActionOnPathUpdate(bool bEnable)"
  },
  {
    "label": "SetFilterClass()",
    "kind": "Method",
    "detail": "Function (bAbortSubActionOnPathChange = bEnable ; } void)",
    "insertText": "SetFilterClass(TSubclassOf<UNavigationQueryFilter> NewFilterClass)"
  },
  {
    "label": "SetAllowPartialPath()",
    "kind": "Method",
    "detail": "Function (FilterClass = NewFilterClass ; } void)",
    "insertText": "SetAllowPartialPath(bool bEnable)"
  },
  {
    "label": "SetAbortSubActionOnPathUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAbortSubActionOnPathUpdate(bEnable)"
  },
  {
    "label": "ClearPath()",
    "kind": "Method",
    "detail": "Function (} protected : FNavPathSharedPtr Path ; FDelegateHandle PathObserverDelegateHandle ; FTimerHandle TimerHandle_DeferredPerformMoveAction ; FTimerHandle TimerHandle_TryToRepath ; void)",
    "insertText": "ClearPath()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Pause(const UDEPRECATED_PawnAction* PausedBy)"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resume()"
  },
  {
    "label": "OnFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinished(EPawnActionResult::Type WithResult)"
  },
  {
    "label": "PerformAbort()",
    "kind": "Method",
    "detail": "Function (EPawnActionAbortState::Type)",
    "insertText": "PerformAbort(EAIForceParam::Type ShouldForce)"
  },
  {
    "label": "IsPartialPathAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPartialPathAllowed()"
  },
  {
    "label": "RequestMove()",
    "kind": "Method",
    "detail": "Function (EPathFollowingRequestResult::Type)",
    "insertText": "RequestMove(AAIController& Controller)"
  },
  {
    "label": "PerformMoveAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformMoveAction()"
  },
  {
    "label": "DeferredPerformMoveAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredPerformMoveAction()"
  },
  {
    "label": "TryToRepath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryToRepath()"
  },
  {
    "label": "ClearPendingRepath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPendingRepath()"
  },
  {
    "label": "ClearTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTimers()"
  }
]