[
  {
    "label": "RouteEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RouteEndpoint"
  },
  {
    "label": "NetworkRoute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkRoute"
  },
  {
    "label": "RouteEndpoint()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NETWORK_ROUTE_H_ # define RTC_BASE_NETWORK_ROUTE_H_ # include<stdint . h> # include<string> # include \" rtc_base / network_constants . h \" # include \" rtc_base / strings / string_builder . h \" # include \" rtc_base / system / . h \" namespace rtc { class RouteEndpoint { public :)",
    "insertText": "RouteEndpoint()"
  },
  {
    "label": "RouteEndpoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RouteEndpoint(AdapterType adapter_type, uint16_t adapter_id, uint16_t network_id, bool uses_turn) : adapter_type_(adapter_type), adapter_id_(adapter_id), network_id_(network_id), uses_turn_(uses_turn)"
  },
  {
    "label": "RouteEndpoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RouteEndpoint(const RouteEndpoint&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RouteEndpoint&)",
    "insertText": "operator(const RouteEndpoint&)"
  },
  {
    "label": "CreateWithNetworkId()",
    "kind": "Method",
    "detail": "Function (RouteEndpoint)",
    "insertText": "CreateWithNetworkId(uint16_t network_id)"
  },
  {
    "label": "CreateWithTurn()",
    "kind": "Method",
    "detail": "Function (} RouteEndpoint)",
    "insertText": "CreateWithTurn(bool uses_turn)"
  },
  {
    "label": "adapter_type()",
    "kind": "Method",
    "detail": "Function (} AdapterType)",
    "insertText": "adapter_type()"
  },
  {
    "label": "DebugString()",
    "kind": "Method",
    "detail": "Function (private : AdapterType adapter_type_ = ADAPTER_TYPE_UNKNOWN ; uint16_t adapter_id_ = 0 ; uint16_t network_id_ = 0 ; bool uses_turn_ = false ; } ; struct NetworkRoute { bool connected = false ; RouteEndpoint local ; RouteEndpoint remote ; int last_sent_packet_id = - 1 ; int packet_overhead = 0 ; RTC_NO_INLINE std::string)",
    "insertText": "DebugString()"
  },
  {
    "label": "adapter_id()",
    "kind": "Method",
    "detail": "Function (rtc::StringBuilder oss ; oss<<\" [ connected : \"<<connected<<\" local : [ \"<<local .)",
    "insertText": "adapter_id() << \"/\" << local.network_id() << \" \" << AdapterTypeToString(local.adapter_type()) << \" turn: \" << local.uses_turn() << \" ] remote: [ \" << remote.adapter_id() << \"/\" << remote.network_id() << \" \" << AdapterTypeToString(remote.adapter_type()) << \" turn: \" << remote.uses_turn()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const NetworkRoute& other)"
  }
]