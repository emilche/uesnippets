[
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FMovingAverage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovingAverage"
  },
  {
    "label": "FPerformanceMonitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerformanceMonitor"
  },
  {
    "label": "FMovingAverage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Stats / Stats . h \" # include \" HAL / IConsoleManager . h \" # include \" TickableEditorObject . h \" # include \" Scalability . h \" class SWindow ; struct FMovingAverage {)",
    "insertText": "FMovingAverage(const int32 InSampleSize = 0, const float InSampleRateSeconds = 1.f) : CurrentSampleCount(0) , CurrentSampleAccumulator(0) , CurrentSampleStartTime(0) , SampleRateSeconds(InSampleRateSeconds) , SampleSize(InSampleSize) , SampleAverage(0) , NextSampleIndex(0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "Reserve(SampleSize)"
  },
  {
    "label": "IsReliable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReliable()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FMovingAverage()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FMovingAverage(SampleSize, SampleRateSeconds)"
  },
  {
    "label": "GetAverage()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetAverage()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(double CurrentTime, float Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentSampleStartTime = CurrentTime ; } + + CurrentSampleCount ; CurrentSampleAccumulator + = Value ;)",
    "insertText": "if(CurrentTime - CurrentSampleStartTime > SampleRateSeconds)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const float AccumulatorAverage =)",
    "insertText": "Max(CurrentSampleAccumulator / CurrentSampleCount, 5.f)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Samples [ NextSampleIndex ] = AccumulatorAverage ; } else { Samples .)",
    "insertText": "Add(AccumulatorAverage)"
  },
  {
    "label": "NextSampleIndex()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NextSampleIndex(NextSampleIndex + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float Sum = 0 . 0 ;)",
    "insertText": "for(const auto& Sample : Samples)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Sum + = Sample ; } SampleAverage = Sum / Samples .)",
    "insertText": "Num()"
  },
  {
    "label": "PercentageBelowThreshold()",
    "kind": "Method",
    "detail": "Function (CurrentSampleAccumulator = 0 . 0 f ; CurrentSampleCount = 0 ; CurrentSampleStartTime = CurrentTime ; } } float)",
    "insertText": "PercentageBelowThreshold(const float Threshold)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (+ + NumBelowThreshold ; } })",
    "insertText": "return(NumBelowThreshold / Samples.Num())"
  },
  {
    "label": "FPerformanceMonitor()",
    "kind": "Method",
    "detail": "Function (} private : int32 CurrentSampleCount ; float CurrentSampleAccumulator ; double CurrentSampleStartTime ; float SampleRateSeconds ; int32 SampleSize ; float SampleAverage ; TArray<float> Samples ; int32 NextSampleIndex ; } ; class FPerformanceMonitor : public FTickableEditorObject { public :)",
    "insertText": "FPerformanceMonitor()"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (protected : ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "ShowPerformanceWarning()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "ShowPerformanceWarning(FText MessageText)"
  },
  {
    "label": "GetAutoScalabilityQualityLevels()",
    "kind": "Method",
    "detail": "Function (Scalability::FQualityLevels)",
    "insertText": "GetAutoScalabilityQualityLevels()"
  },
  {
    "label": "WillAutoScalabilityHelp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillAutoScalabilityHelp()"
  },
  {
    "label": "AutoApplyScalability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoApplyScalability()"
  },
  {
    "label": "CancelPerformanceNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPerformanceNotification()"
  },
  {
    "label": "HidePerformanceWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HidePerformanceWarning()"
  },
  {
    "label": "ShowScalabilityDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowScalabilityDialog()"
  },
  {
    "label": "UpdateMovingAverageSamplers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMovingAverageSamplers()"
  }
]