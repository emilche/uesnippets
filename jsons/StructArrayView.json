[
  {
    "label": "FStructArrayView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructArrayView"
  },
  {
    "label": "FIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterator"
  },
  {
    "label": "FConstStructArrayView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstStructArrayView"
  },
  {
    "label": "FStructArrayView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Class . h \" # include \" StructUtils . h \" # include \" StructUtils / StructView . h \" struct FStructArrayView {)",
    "insertText": "FStructArrayView()"
  },
  {
    "label": "FStructArrayView()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "FStructArrayView(TArray<T>& InArray) : DataPtr(InArray.GetData()) , ScriptStruct(StaticStruct<typename TRemoveReference<T>::Type>()) , ElementSize(sizeof(T)) , ArrayNum(InArray.Num())"
  },
  {
    "label": "FStructArrayView()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FStructArrayView(TArrayView<T> InArrayView) : DataPtr(InArrayView.GetData()) , ScriptStruct(StaticStruct<typename TRemoveReference<T>::Type>()) , ElementSize(sizeof(T)) , ArrayNum(InArrayView.Num())"
  },
  {
    "label": "FStructArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStructArrayView(const UScriptStruct* InScriptStruct, void* InData, const uint32 InElementSize, const int32 InCount) : DataPtr(InData) , ScriptStruct(InScriptStruct) , ElementSize(InElementSize) , ArrayNum(InCount)"
  },
  {
    "label": "FStructArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStructArrayView(const UScriptStruct& InScriptStruct, void* InData, const int32 InCount) : DataPtr(InData) , ScriptStruct(&InScriptStruct) , ElementSize(InScriptStruct.GetStructureSize()) , ArrayNum(InCount)"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RangeCheck(int32 Index)"
  },
  {
    "label": "SliceRangeCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SliceRangeCheck(const int32 Index, const int32 InNum)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(const int32 Index)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RangeCheck(Index)"
  },
  {
    "label": "GetTypeSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeSize()"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetAt(const int32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FStructView)",
    "insertText": "operator(const int32 Index)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "Last(const int32 IndexFromTheEnd = 0)"
  },
  {
    "label": "Slice()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FStructArrayView)",
    "insertText": "Slice(const int32 Index, const int32 InNum)"
  },
  {
    "label": "SliceRangeCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SliceRangeCheck(Index, InNum)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FStructArrayView)",
    "insertText": "Left(const int32 Count)"
  },
  {
    "label": "LeftChop()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FStructArrayView)",
    "insertText": "LeftChop(const int32 Count)"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FStructArrayView)",
    "insertText": "Right(const int32 Count)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const int32 OutLen =)",
    "insertText": "Clamp(Count, 0, ArrayNum)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FStructArrayView)",
    "insertText": "RightChop(const int32 Count)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const int32 OutLen =)",
    "insertText": "Clamp(ArrayNum - Count, 0, ArrayNum)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] FStructArrayView)",
    "insertText": "Mid(int32 Index, int32 Count = TNumericLimits<int32>::Max())"
  },
  {
    "label": "CalcMidIndexAndCount()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "CalcMidIndexAndCount(ArrayNum, Index, Count)"
  },
  {
    "label": "LeftInline()",
    "kind": "Method",
    "detail": "Function (; } void)",
    "insertText": "LeftInline(const int32 Count)"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Left(Count)"
  },
  {
    "label": "LeftChopInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LeftChopInline(const int32 Count)"
  },
  {
    "label": "LeftChop()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "LeftChop(Count)"
  },
  {
    "label": "RightInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RightInline(const int32 Count)"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Right(Count)"
  },
  {
    "label": "RightChopInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RightChopInline(const int32 Count)"
  },
  {
    "label": "RightChop()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "RightChop(Count)"
  },
  {
    "label": "MidInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MidInline(const int32 Position, const int32 Count = TNumericLimits<int32>::Max())"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "Mid(Position, Count)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (} struct FIterator {)",
    "insertText": "FIterator(const FStructArrayView& InOwner, int32 InIndex) : Owner(&InOwner) , Index(InIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FIterator& Other)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} private : const FStructArrayView* Owner = nullptr ; int32 Index = INDEX_NONE ; } ; FIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FIterator)",
    "insertText": "end()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(const int32 Index1, const int32 Index2)"
  },
  {
    "label": "Memswap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memswap(GetDataAt(Index1), GetDataAt(Index2), ElementSize)"
  },
  {
    "label": "FConstStructArrayView()",
    "kind": "Method",
    "detail": "Function (} private : void* DataPtr = nullptr ; const UScriptStruct* ScriptStruct = nullptr ; uint32 ElementSize = 0 ; int32 ArrayNum = 0 ; } ; struct FConstStructArrayView {)",
    "insertText": "FConstStructArrayView()"
  },
  {
    "label": "FConstStructArrayView()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "FConstStructArrayView(TArray<T>& InArray) : DataPtr(InArray.GetData()) , ScriptStruct(StaticStruct<typename TRemoveReference<T>::Type>()) , ElementSize(sizeof(T)) , ArrayNum(InArray.Num())"
  },
  {
    "label": "FConstStructArrayView()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FConstStructArrayView(TArrayView<T> InArrayView) : DataPtr(InArrayView.GetData()) , ScriptStruct(StaticStruct<typename TRemoveReference<T>::Type>()) , ElementSize(sizeof(T)) , ArrayNum(InArrayView.Num())"
  },
  {
    "label": "FConstStructArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstStructArrayView(const FStructArrayView Src) : DataPtr(Src.GetData()) , ScriptStruct(Src.GetScriptStruct()) , ElementSize(Src.GetTypeSize()) , ArrayNum(Src.Num())"
  },
  {
    "label": "FConstStructArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstStructArrayView(const UScriptStruct* InScriptStruct, const void* InData, const uint32 InElementSize, const int32 InCount) : DataPtr(InData) , ScriptStruct(InScriptStruct) , ElementSize(InElementSize) , ArrayNum(InCount)"
  },
  {
    "label": "FConstStructArrayView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstStructArrayView(const UScriptStruct& InScriptStruct, const void* InData, const int32 InCount) : DataPtr(InData) , ScriptStruct(&InScriptStruct) , ElementSize(InScriptStruct.GetStructureSize()) , ArrayNum(InCount)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConstStructArrayView&)",
    "insertText": "operator(const FStructArrayView StructArrayView)"
  },
  {
    "label": "FConstStructArrayView()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FConstStructArrayView(StructArrayView)"
  },
  {
    "label": "SliceRangeCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SliceRangeCheck(int32 Index, int32 InNum)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConstStructView)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} template<T> TEnableIf<TIsConst<T>::Value,T&>::Type)",
    "insertText": "Last(int32 IndexFromTheEnd = 0)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (} struct FIterator {)",
    "insertText": "FIterator(const FConstStructArrayView& InOwner, int32 InIndex) : Owner(&InOwner) , Index(InIndex)"
  }
]