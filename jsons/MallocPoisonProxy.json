[
  {
    "label": "FMallocPoisonProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocPoisonProxy"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / UnrealMemory . h \" # if !)",
    "insertText": "defined(UE_USE_MALLOC_FILL_BYTES) #define UE_USE_MALLOC_FILL_BYTES ((UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT) && !WITH_EDITORONLY_DATA && !PLATFORM_USES_FIXED_GMalloc_CLASS && !USING_ADDRESS_SANITISER) #endif #define UE_DEBUG_FILL_FREED (0xdd) #define UE_DEBUG_FILL_NEW (0xcd)"
  },
  {
    "label": "FMallocPoisonProxy()",
    "kind": "Method",
    "detail": "Function (private : FMalloc* UsedMalloc ; public :)",
    "insertText": "FMallocPoisonProxy(FMalloc* InMalloc) : UsedMalloc(InMalloc)"
  },
  {
    "label": "InitializeStatsMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeStatsMetadata()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void* Result = UsedMalloc ->)",
    "insertText": "Malloc(Size, Alignment)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Result, UE_DEBUG_FILL_NEW, Size)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (} return Result ; } void*)",
    "insertText": "Realloc(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SIZE_T OldSize = 0 ;)",
    "insertText": "if(Ptr != nullptr && GetAllocationSize(Ptr, OldSize) && OldSize > 0 && OldSize > NewSize)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(static_cast<uint8*>(Ptr) + NewSize, UE_DEBUG_FILL_FREED, OldSize - NewSize)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (} void* Result = UsedMalloc ->)",
    "insertText": "Realloc(Ptr, NewSize, Alignment)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(static_cast<uint8*>(Result) + OldSize, UE_DEBUG_FILL_NEW, NewSize - OldSize)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} return Result ; } void)",
    "insertText": "Free(void* Ptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SIZE_T AllocSize ;)",
    "insertText": "if(LIKELY(GetAllocationSize(Ptr, AllocSize) && AllocSize > 0))"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Ptr, UE_DEBUG_FILL_FREED, AllocSize)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} UsedMalloc ->)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "QuantizeSize()",
    "kind": "Method",
    "detail": "Function (} } SIZE_T)",
    "insertText": "QuantizeSize(SIZE_T Count, uint32 Alignment)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllocatorStats(FGenericMemoryStats& out_Stats)"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "GetAllocatorStats(out_Stats)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpAllocatorStats(class FOutputDevice& Ar)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "DumpAllocatorStats(Ar)"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "ValidateHeap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateHeap()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (} # if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Trim(bool bTrimThreadCaches)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "Trim(bTrimThreadCaches)"
  },
  {
    "label": "SetupTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupTLSCachesOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUsedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUsedOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUnusedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUnusedOnCurrentThread()"
  },
  {
    "label": "ClearAndDisableTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAndDisableTLSCachesOnCurrentThread()"
  },
  {
    "label": "OnMallocInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMallocInitialized()"
  },
  {
    "label": "OnPreFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreFork()"
  },
  {
    "label": "OnPostFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostFork()"
  }
]