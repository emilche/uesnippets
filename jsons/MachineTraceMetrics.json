[
  {
    "label": "InstrItineraryData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstrItineraryData"
  },
  {
    "label": "MachineBasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBasicBlock"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MachineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoop"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "MachineRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegisterInfo"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MachineTraceMetrics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineTraceMetrics"
  },
  {
    "label": "Ensemble",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ensemble"
  },
  {
    "label": "Trace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Trace"
  },
  {
    "label": "FixedBlockInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FixedBlockInfo"
  },
  {
    "label": "LiveInReg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LiveInReg"
  },
  {
    "label": "TraceBlockInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TraceBlockInfo"
  },
  {
    "label": "InstrCycles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InstrCycles"
  },
  {
    "label": "Strategy",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Strategy"
  },
  {
    "label": "MachineTraceMetrics()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINETRACEMETRICS_H # define LLVM_CODEGEN_MACHINETRACEMETRICS_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / DenseMap . h \" # include \" llvm / CodeGen / MachineFunctionPass . h \" # include \" llvm / CodeGen / TargetSchedule . h \" namespace llvm { class InstrItineraryData ; class MachineBasicBlock ; class MachineInstr ; class MachineLoop ; class MachineLoopInfo ; class MachineRegisterInfo ; class TargetInstrInfo ; class TargetRegisterInfo ; class raw_ostream ; class MachineTraceMetrics : public MachineFunctionPass { const MachineFunction* MF ; const TargetInstrInfo* TII ; const TargetRegisterInfo* TRI ; const MachineRegisterInfo* MRI ; const MachineLoopInfo* Loops ; TargetSchedModel SchedModel ; public : class Ensemble ; class Trace ; char ID ;)",
    "insertText": "MachineTraceMetrics()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage&)"
  },
  {
    "label": "runOnMachineFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnMachineFunction(MachineFunction&)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "verifyAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyAnalysis()"
  },
  {
    "label": "FixedBlockInfo()",
    "kind": "Method",
    "detail": "Function (class Ensemble ; class Trace ; struct FixedBlockInfo { unsigned InstrCount ; bool HasCalls ;)",
    "insertText": "FixedBlockInfo() : InstrCount(~0u), HasCalls(false)"
  },
  {
    "label": "hasResources()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasResources()"
  },
  {
    "label": "getResources()",
    "kind": "Method",
    "detail": "Function (InstrCount = ~ 0 u ; } } ; const FixedBlockInfo*)",
    "insertText": "getResources(const MachineBasicBlock*)"
  },
  {
    "label": "getProcResourceCycles()",
    "kind": "Method",
    "detail": "Function (ArrayRef<unsigned>)",
    "insertText": "getProcResourceCycles(unsigned MBBNum)"
  },
  {
    "label": "LiveInReg()",
    "kind": "Method",
    "detail": "Function (struct LiveInReg { unsigned Reg ; unsigned Height ;)",
    "insertText": "LiveInReg(unsigned Reg, unsigned Height = 0) : Reg(Reg), Height(Height)"
  },
  {
    "label": "TraceBlockInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct TraceBlockInfo { const MachineBasicBlock* Pred ; const MachineBasicBlock* Succ ; unsigned Head ; unsigned Tail ; unsigned InstrDepth ; unsigned InstrHeight ;)",
    "insertText": "TraceBlockInfo() : Pred(nullptr), Succ(nullptr), InstrDepth(~0u), InstrHeight(~0u), HasValidInstrDepths(false), HasValidInstrHeights(false)"
  },
  {
    "label": "hasValidDepth()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasValidDepth()"
  },
  {
    "label": "invalidateHeight()",
    "kind": "Method",
    "detail": "Function (InstrDepth = ~ 0 u ; HasValidInstrDepths = false ; } void)",
    "insertText": "invalidateHeight()"
  },
  {
    "label": "isUsefulDominator()",
    "kind": "Method",
    "detail": "Function (InstrHeight = ~ 0 u ; HasValidInstrHeights = false ; } bool)",
    "insertText": "isUsefulDominator(const TraceBlockInfo &TBI)"
  },
  {
    "label": "getBlockNum()",
    "kind": "Method",
    "detail": "Function (} ; struct InstrCycles { unsigned Depth ; unsigned Height ; } ; class Trace { Ensemble& TE ; TraceBlockInfo& TBI ; unsigned)",
    "insertText": "getBlockNum()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream&)"
  },
  {
    "label": "getInstrCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getInstrCount()"
  },
  {
    "label": "getResourceLength()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getResourceLength(ArrayRef<const MachineBasicBlock *> Extrablocks = None, ArrayRef<const MCSchedClassDesc *> ExtraInstrs = None, ArrayRef<const MCSchedClassDesc *> RemoveInstrs = None)"
  },
  {
    "label": "getCriticalPath()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getCriticalPath()"
  },
  {
    "label": "getInstrSlack()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getInstrSlack(const MachineInstr *MI)"
  },
  {
    "label": "getPHIDepth()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPHIDepth(const MachineInstr *PHI)"
  },
  {
    "label": "isDepInTrace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDepInTrace(const MachineInstr *DefMI, const MachineInstr *UseMI)"
  },
  {
    "label": "computeTrace()",
    "kind": "Method",
    "detail": "Function (} ; class Ensemble { SmallVector<TraceBlockInfo,4> BlockInfo ; DenseMap<const MachineInstr*,InstrCycles> Cycles ; SmallVector<unsigned,0> ProcResourceDepths ; SmallVector<unsigned,0> ProcResourceHeights ; class Trace ; void)",
    "insertText": "computeTrace(const MachineBasicBlock*)"
  },
  {
    "label": "computeDepthResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeDepthResources(const MachineBasicBlock*)"
  },
  {
    "label": "computeHeightResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeHeightResources(const MachineBasicBlock*)"
  },
  {
    "label": "computeCrossBlockCriticalPath()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "computeCrossBlockCriticalPath(const TraceBlockInfo&)"
  },
  {
    "label": "computeInstrDepths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeInstrDepths(const MachineBasicBlock*)"
  },
  {
    "label": "computeInstrHeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeInstrHeights(const MachineBasicBlock*)"
  },
  {
    "label": "addLiveIns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLiveIns(const MachineInstr *DefMI, unsigned DefOp, ArrayRef<const MachineBasicBlock*> Trace)"
  },
  {
    "label": "pickTracePred()",
    "kind": "Method",
    "detail": "Function (protected : MachineTraceMetrics& MTM ; const MachineBasicBlock*)",
    "insertText": "pickTracePred(const MachineBasicBlock*)"
  },
  {
    "label": "pickTraceSucc()",
    "kind": "Method",
    "detail": "Function (const MachineBasicBlock*)",
    "insertText": "pickTraceSucc(const MachineBasicBlock*)"
  },
  {
    "label": "Ensemble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ensemble(MachineTraceMetrics*)"
  },
  {
    "label": "getLoopFor()",
    "kind": "Method",
    "detail": "Function (const MachineLoop*)",
    "insertText": "getLoopFor(const MachineBasicBlock*)"
  },
  {
    "label": "getDepthResources()",
    "kind": "Method",
    "detail": "Function (const TraceBlockInfo*)",
    "insertText": "getDepthResources(const MachineBasicBlock*)"
  },
  {
    "label": "getHeightResources()",
    "kind": "Method",
    "detail": "Function (const TraceBlockInfo*)",
    "insertText": "getHeightResources(const MachineBasicBlock*)"
  },
  {
    "label": "getProcResourceDepths()",
    "kind": "Method",
    "detail": "Function (ArrayRef<unsigned>)",
    "insertText": "getProcResourceDepths(unsigned MBBNum)"
  },
  {
    "label": "getProcResourceHeights()",
    "kind": "Method",
    "detail": "Function (ArrayRef<unsigned>)",
    "insertText": "getProcResourceHeights(unsigned MBBNum)"
  },
  {
    "label": "Ensemble()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "Ensemble()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getName()"
  },
  {
    "label": "invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidate(const MachineBasicBlock *MBB)"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verify()"
  },
  {
    "label": "getTrace()",
    "kind": "Method",
    "detail": "Function (Trace)",
    "insertText": "getTrace(const MachineBasicBlock *MBB)"
  },
  {
    "label": "getEnsemble()",
    "kind": "Method",
    "detail": "Function (} ; enum Strategy { TS_MinInstrCount,TS_NumStrategies } ; Ensemble*)",
    "insertText": "getEnsemble(Strategy)"
  },
  {
    "label": "getCycles()",
    "kind": "Method",
    "detail": "Function (private : SmallVector<FixedBlockInfo,4> BlockInfo ; SmallVector<unsigned,0> ProcResourceCycles ; Ensemble* Ensembles [ TS_NumStrategies ] ; unsigned)",
    "insertText": "getCycles(unsigned Scaled)"
  },
  {
    "label": "getLatencyFactor()",
    "kind": "Method",
    "detail": "Function (unsigned Factor = SchedModel .)",
    "insertText": "getLatencyFactor()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const MachineTraceMetrics::Trace &Tr)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (Tr .)",
    "insertText": "print(OS)"
  }
]