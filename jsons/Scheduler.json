[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "FTopNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopNode"
  },
  {
    "label": "FSchedulerTls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSchedulerTls"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Impl"
  },
  {
    "label": "FScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScheduler"
  },
  {
    "label": "FOversubscriptionScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOversubscriptionScope"
  },
  {
    "label": "FOversubscriptionTls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOversubscriptionTls"
  },
  {
    "label": "FOversubscriptionAllowedScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOversubscriptionAllowedScope"
  },
  {
    "label": "FOversubscriptionAllowedScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOversubscriptionAllowedScope"
  },
  {
    "label": "FOversubscriptionScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOversubscriptionScope"
  },
  {
    "label": "IsBusyWaiting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBusyWaiting()"
  },
  {
    "label": "GetAffinityIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAffinityIndex()"
  },
  {
    "label": "StartWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartWorkers(uint32 NumForegroundWorkers = 0, uint32 NumBackgroundWorkers = 0, FThread::EForkable IsForkable = FThread::NonForkable, EThreadPriority InWorkerPriority = EThreadPriority::TPri_Normal, EThreadPriority InBackgroundPriority = EThreadPriority::TPri_BelowNormal, uint64 InWorkerAffinity = 0, uint64 InBackgroundAffinity = 0)"
  },
  {
    "label": "StopWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWorkers(bool DrainGlobalQueue = true)"
  },
  {
    "label": "RestartWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestartWorkers(uint32 NumForegroundWorkers = 0, uint32 NumBackgroundWorkers = 0, FThread::EForkable IsForkable = FThread::NonForkable, EThreadPriority WorkerPriority = EThreadPriority::TPri_Normal, EThreadPriority BackgroundPriority = EThreadPriority::TPri_BelowNormal, uint64 InWorkerAffinity = 0, uint64 InBackgroundAffinity = 0)"
  },
  {
    "label": "TryLaunch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLaunch(FTask& Task, EQueuePreference QueuePreference = EQueuePreference::DefaultPreference, bool bWakeUpWorker = true)"
  },
  {
    "label": "TryLaunchAffinity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLaunchAffinity(FTask& Task, uint32 AffinityIndex)"
  },
  {
    "label": "BusyWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BusyWait(const TaskType& Task, bool ForceAllowBackgroundWork = false)"
  },
  {
    "label": "BusyWaitUntil()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BusyWaitUntil(Conditional&& Cond, bool ForceAllowBackgroundWork = false)"
  },
  {
    "label": "BusyWait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BusyWait(const TArrayView<const TaskType>& Tasks, bool ForceAllowBackgroundWork = false)"
  },
  {
    "label": "CreateWorker()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FThread>)",
    "insertText": "CreateWorker(uint32 WorkerId, const TCHAR* Name, bool bPermitBackgroundWork = false, FThread::EForkable IsForkable = FThread::NonForkable, Private::FWaitEvent* ExternalWorkerEvent = nullptr, FSchedulerTls::FLocalQueueType* ExternalWorkerLocalQueue = nullptr, EThreadPriority Priority = EThreadPriority::TPri_Normal, uint64 InAffinity = 0)"
  },
  {
    "label": "WorkerMain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkerMain(Private::FWaitEvent* WorkerEvent, FSchedulerTls::FLocalQueueType* ExternalWorkerLocalQueue, uint32 WaitCycles, bool bPermitBackgroundWork)"
  },
  {
    "label": "StandbyLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StandbyLoop(Private::FWaitEvent* WorkerEvent, FSchedulerTls::FLocalQueueType* ExternalWorkerLocalQueue, uint32 WaitCycles, bool bPermitBackgroundWork)"
  },
  {
    "label": "WorkerLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorkerLoop(Private::FWaitEvent* WorkerEvent, FSchedulerTls::FLocalQueueType* ExternalWorkerLocalQueue, uint32 WaitCycles, bool bPermitBackgroundWork)"
  },
  {
    "label": "LaunchInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchInternal(FTask& Task, EQueuePreference QueuePreference, bool bWakeUpWorker)"
  },
  {
    "label": "BusyWaitInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BusyWaitInternal(const FConditional& Conditional, bool ForceAllowBackgroundWork)"
  },
  {
    "label": "WakeUpWorker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WakeUpWorker(bool bBackgroundWorker)"
  },
  {
    "label": "IncrementOversubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementOversubscription()"
  },
  {
    "label": "DecrementOversubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementOversubscription()"
  },
  {
    "label": "TryExecuteTaskFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryExecuteTaskFrom(Private::FWaitEvent* WaitEvent, QueueType* Queue, Private::FOutOfWork& OutOfWork, bool bPermitBackgroundWork)"
  },
  {
    "label": "AllTasksCompleted()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AllTasksCompleted()"
  }
]