[
  {
    "label": "BinkAudioFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinkAudioFileHeader"
  },
  {
    "label": "BinkAudioBlockSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<stdint . h> typedef uint32_t uint32 ; typedef uint16_t uint16 ; typedef uint8_t uint8 ; struct BinkAudioFileHeader { uint32 tag ; uint8 version ; uint8 channels ; uint16 PADDING ; uint32 rate ; uint32 sample_count ; uint16 max_comp_space_needed ; uint16 flags ; uint32 output_file_size ; uint16 seek_table_entry_count ; uint16 blocks_per_seek_table_entry ; } ; # define BLOCK_HEADER_MAGIC 0 x9999 bool)",
    "insertText": "BinkAudioBlockSize(uint32 header_max_comp_space_needed, uint8 const* input_reservoir, uint32 input_reservoir_len, uint32* out_block_size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FrameSize = TrimmedFrameHeader& 0 xffff ; FrameHeaderSize = 8 ; })",
    "insertText": "if(FrameSize > header_max_comp_space_needed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8 const* input_buffer = input_reservoir ; uint8 const* input_end = input_reservoir + input_reservoir_len ;)",
    "insertText": "if(input_reservoir_len < 4)"
  },
  {
    "label": "FrameCheck()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FrameCheck(uint32 const*)(input_buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (input_buffer + = 4 ;)",
    "insertText": "if((FrameCheck & 0xffff) != BLOCK_HEADER_MAGIC)"
  },
  {
    "label": "TrimmedFrameHeader()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TrimmedFrameHeader(uint32 const*)(input_buffer)"
  },
  {
    "label": "input_buffer()",
    "kind": "Method",
    "detail": "Function (uint8 const*)",
    "insertText": "input_buffer(uint8 const*)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (input_buffer + = 4 ; uint32 TrimToSampleCount = ~ 0 U ; uint32 FrameBytes = FrameCheck>> 1 6 ;)",
    "insertText": "if(FrameBytes == 0xffff)"
  }
]