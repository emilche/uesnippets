[
  {
    "label": "IDataChunkConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IDataChunkConfig"
  },
  {
    "label": "IDataChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDataChunk"
  },
  {
    "label": "IDataChunk()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_CHUNK_IDATA_CHUNK_H_ # define NET_DCSCTP_PACKET_CHUNK_IDATA_CHUNK_H_ # include<stddef . h> # include<stdint . h> # include<cstdint> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / packet / chunk / data_common . h \" # include \" net / dcsctp / packet / data . h \" # include \" net / dcsctp / packet / tlv_trait . h \" namespace dcsctp { struct IDataChunkConfig : ChunkConfig { int kType = 6 4 ; size_t kHeaderSize = 2 0 ; size_t kVariableLengthAlignment = 1 ; } ; class IDataChunk : public AnyDataChunk,public TLVTrait<IDataChunkConfig> { public : int kType = IDataChunkConfig::kType ; size_t kHeaderSize = IDataChunkConfig::kHeaderSize ;)",
    "insertText": "IDataChunk(TSN tsn, StreamID stream_id, MID message_id, PPID ppid, FSN fsn, std::vector<uint8_t> payload, const Options& options) : AnyDataChunk(tsn, stream_id, SSN(0), message_id, fsn, ppid, std::move(payload), options)"
  },
  {
    "label": "IDataChunk()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IDataChunk(TSN tsn, Data&& data, bool immediate_ack) : AnyDataChunk(tsn, std::move(data), immediate_ack)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} absl::optional<IDataChunk>)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "SerializeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTo(std::vector<uint8_t>& out)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  }
]