[
  {
    "label": "SimulatedTaskQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulatedTaskQueue"
  },
  {
    "label": "SimulatedTaskQueue()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_TIME_CONTROLLER_SIMULATED_TASK_QUEUE_H_ # define TEST_TIME_CONTROLLER_SIMULATED_TASK_QUEUE_H_ # include<deque> # include<map> # include<memory> # include<vector> # include \" absl / functional / any_invocable . h \" # include \" api / units / time_delta . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" test / time_controller / simulated_time_controller . h \" namespace webrtc { class SimulatedTaskQueue : public TaskQueueBase,public sim_time_impl::SimulatedSequenceRunner { public :)",
    "insertText": "SimulatedTaskQueue(sim_time_impl::SimulatedTimeControllerImpl* handler, absl::string_view name)"
  },
  {
    "label": "SimulatedTaskQueue()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimulatedTaskQueue()"
  },
  {
    "label": "RunReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunReady(Timestamp at_time)"
  },
  {
    "label": "GetNextRunTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "GetNextRunTime()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&lock_)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTask(absl::AnyInvocable<void() &&> task, TimeDelta delay)"
  },
  {
    "label": "PostDelayedHighPrecisionTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedHighPrecisionTask(absl::AnyInvocable<void() &&> task, TimeDelta delay)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : sim_time_impl::SimulatedTimeControllerImpl* const handler_ ; char* name_ ; Mutex lock_ ; std::deque<absl::AnyInvocable<)",
    "insertText": "void() &&>> ready_tasks_ RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::map<Timestamp,std::vector<absl::AnyInvocable<)",
    "insertText": "void() &&>>> delayed_tasks_ RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Timestamp next_run_time_)",
    "insertText": "RTC_GUARDED_BY(lock_) = Timestamp::PlusInfinity()"
  }
]