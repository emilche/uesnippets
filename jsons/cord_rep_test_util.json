[
  {
    "label": "Rep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rep"
  },
  {
    "label": "AutoUnref",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoUnref"
  },
  {
    "label": "MakeSubstring()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_REP_TEST_UTIL_H_ # define ABSL_STRINGS_INTERNAL_CORD_REP_TEST_UTIL_H_ # include<cassert> # include<memory> # include<random> # include<string> # include<vector> # include \" absl / base / config . h \" # include \" absl / base / internal / raw_logging . h \" # include \" absl / strings / internal / cord_internal . h \" # include \" absl / strings / internal / cord_rep_btree . h \" # include \" absl / strings / internal / cord_rep_flat . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cordrep_testing { cord_internal::CordRepSubstring*)",
    "insertText": "MakeSubstring(size_t start, size_t len, cord_internal::CordRep* rep)"
  },
  {
    "label": "MakeFlat()",
    "kind": "Method",
    "detail": "Function (auto* sub = new cord_internal::CordRepSubstring ; sub -> tag = cord_internal::SUBSTRING ; sub -> start = start ; sub -> length = len<= 0 ? rep -> length - start + len : len ; sub -> child = rep ; return sub ; } cord_internal::CordRepFlat*)",
    "insertText": "MakeFlat(absl::string_view value)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(value.length() <= cord_internal::kMaxFlatLength)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (auto* flat = cord_internal::)",
    "insertText": "New(value.length())"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (flat -> length = value .)",
    "insertText": "length()"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(flat->Data(), value.data(), value.length())"
  },
  {
    "label": "Rep()",
    "kind": "Method",
    "detail": "Function (struct Rep : public cord_internal::CordRepExternal { std::string s ;)",
    "insertText": "Rep(absl::string_view sv) : s(sv)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (this -> tag = cord_internal::EXTERNAL ; this -> base = s .)",
    "insertText": "data()"
  },
  {
    "label": "releaser_invoker()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "releaser_invoker(cord_internal::CordRepExternal* self)"
  },
  {
    "label": "Rep()",
    "kind": "Method",
    "detail": "Function (delete static_cast<)",
    "insertText": "Rep(self)"
  },
  {
    "label": "Rep()",
    "kind": "Method",
    "detail": "Function (} ; } } ; return new)",
    "insertText": "Rep(s)"
  },
  {
    "label": "CreateRandomString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "CreateRandomString(size_t n)"
  },
  {
    "label": "ABCDEFGHIJKLMNOPQRSTUVWXYZ()",
    "kind": "Method",
    "detail": "Function (absl::string_view data = \" abcdefghijklmnopqrstuvwxyz \" \")",
    "insertText": "ABCDEFGHIJKLMNOPQRSTUVWXYZ()"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (} [ ] | \" ; std::minstd_rand rnd ; std::uniform_int_distribution<size_t>)",
    "insertText": "dist(0, data.size() - 1)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "s(n, ' ')"
  },
  {
    "label": "dist()",
    "kind": "Method",
    "detail": "Function (s [ i ] = data [)",
    "insertText": "dist(rnd)"
  },
  {
    "label": "CreateFlatsFromString()",
    "kind": "Method",
    "detail": "Function (} return s ; } std::vector<cord_internal::CordRep*>)",
    "insertText": "CreateFlatsFromString(absl::string_view data, size_t chunk_size)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(chunk_size > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<cord_internal::CordRep*> flats ;)",
    "insertText": "for(absl::string_view s = data; !s.empty(); s.remove_prefix(chunk_size))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (flats .)",
    "insertText": "push_back(MakeFlat(s.substr(0, chunk_size)))"
  },
  {
    "label": "CordRepBtreeFromFlats()",
    "kind": "Method",
    "detail": "Function (} return flats ; } cord_internal::CordRepBtree*)",
    "insertText": "CordRepBtreeFromFlats(absl::Span<cord_internal::CordRep* const> flats)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!flats.empty())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (auto* node = cord_internal::)",
    "insertText": "Create(flats[0])"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (node = cord_internal::)",
    "insertText": "Append(node, flats[i])"
  },
  {
    "label": "CordVisitReps()",
    "kind": "Method",
    "detail": "Function (} return node ; } template<Fn> void)",
    "insertText": "CordVisitReps(cord_internal::CordRep* rep, Fn&& fn)"
  },
  {
    "label": "fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fn(rep)"
  },
  {
    "label": "substring()",
    "kind": "Method",
    "detail": "Function (child)",
    "insertText": "substring()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(rep->tag == cord_internal::BTREE)"
  },
  {
    "label": "CordVisitReps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordVisitReps(edge, fn)"
  },
  {
    "label": "CordCollectRepsIf()",
    "kind": "Method",
    "detail": "Function (} } } template<Predicate> std::vector<cord_internal::CordRep*>)",
    "insertText": "CordCollectRepsIf(Predicate&& predicate, cord_internal::CordRep* rep)"
  },
  {
    "label": "CordVisitReps()",
    "kind": "Method",
    "detail": "Function (std::vector<cord_internal::CordRep*> reps ;)",
    "insertText": "CordVisitReps(rep, [&reps, &predicate](cord_internal::CordRep* rep) { if (predicate(rep)) reps.push_back(rep); })"
  },
  {
    "label": "reps()",
    "kind": "Method",
    "detail": "Function (std::vector<cord_internal::CordRep*> reps ; auto fn = [&)",
    "insertText": "reps(cord_internal::CordRep* rep)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (reps .)",
    "insertText": "push_back(rep)"
  },
  {
    "label": "CordVisitReps()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "CordVisitReps(rep, fn)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t offset = 0 ; size_t length = rep -> length ;)",
    "insertText": "while(rep->tag == cord_internal::SUBSTRING)"
  },
  {
    "label": "CordToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordToString(edge, s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(rep->tag >= cord_internal::FLAT)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (s .)",
    "insertText": "append(rep->flat()->Data() + offset, length)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(rep->tag == cord_internal::EXTERNAL)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (s .)",
    "insertText": "append(rep->external()->base + offset, length)"
  },
  {
    "label": "ABSL_RAW_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "ABSL_RAW_LOG(FATAL, \"Unsupported tag %d\", rep->tag)"
  },
  {
    "label": "CordToString()",
    "kind": "Method",
    "detail": "Function (} } std::string)",
    "insertText": "CordToString(cord_internal::CordRep* rep)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::string s ; s .)",
    "insertText": "reserve(rep->length)"
  },
  {
    "label": "CordToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CordToString(rep, s)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} template<CordRepType> CordRepType*)",
    "insertText": "Add(CordRepType* rep)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (unrefs_ .)",
    "insertText": "push_back(CordRep::Ref(rep))"
  }
]