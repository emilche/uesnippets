[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "LinkCapacityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinkCapacityTracker"
  },
  {
    "label": "RttBasedBackoff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RttBasedBackoff"
  },
  {
    "label": "SendSideBandwidthEstimation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendSideBandwidthEstimation"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "UmaState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UmaState"
  },
  {
    "label": "LinkCapacityTracker()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_SEND_SIDE_BANDWIDTH_ESTIMATION_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_SEND_SIDE_BANDWIDTH_ESTIMATION_H_ # include<stdint . h> # include<deque> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" api / network_state_predictor . h \" # include \" api / transport / network_types . h \" # include \" api / units / data_rate . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / congestion_controller / goog_cc / loss_based_bandwidth_estimation . h \" # include \" modules / congestion_controller / goog_cc / loss_based_bwe_v2 . h \" # include \" rtc_base / experiments / field_trial_parser . h \" namespace webrtc { class RtcEventLog ; class LinkCapacityTracker { public :)",
    "insertText": "LinkCapacityTracker()"
  },
  {
    "label": "UpdateDelayBasedEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayBasedEstimate(Timestamp at_time, DataRate delay_based_bitrate)"
  },
  {
    "label": "OnStartingRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartingRate(DataRate start_rate)"
  },
  {
    "label": "OnRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRateUpdate(absl::optional<DataRate> acknowledged, DataRate target, Timestamp at_time)"
  },
  {
    "label": "OnRttBackoff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttBackoff(DataRate backoff_rate, Timestamp at_time)"
  },
  {
    "label": "estimate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "estimate()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (private : FieldTrialParameter<TimeDelta> tracking_rate ; double capacity_estimate_bps_ = 0 ; Timestamp last_link_capacity_update_ =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (DataRate last_delay_based_estimate_ =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "RttBasedBackoff()",
    "kind": "Method",
    "detail": "Function (} ; class RttBasedBackoff { public :)",
    "insertText": "RttBasedBackoff(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "RttBasedBackoff()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RttBasedBackoff()"
  },
  {
    "label": "UpdatePropagationRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePropagationRtt(Timestamp at_time, TimeDelta propagation_rtt)"
  },
  {
    "label": "CorrectedRtt()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "CorrectedRtt(Timestamp at_time)"
  },
  {
    "label": "SendSideBandwidthEstimation()",
    "kind": "Method",
    "detail": "Function (FieldTrialFlag disabled_ ; FieldTrialParameter<TimeDelta> configured_limit_ ; FieldTrialParameter<double> drop_fraction_ ; FieldTrialParameter<TimeDelta> drop_interval_ ; FieldTrialParameter<DataRate> bandwidth_floor_ ; public : TimeDelta rtt_limit_ ; Timestamp last_propagation_rtt_update_ ; TimeDelta last_propagation_rtt_ ; Timestamp last_packet_sent_ ; } ; class SendSideBandwidthEstimation { public :)",
    "insertText": "SendSideBandwidthEstimation()"
  },
  {
    "label": "SendSideBandwidthEstimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendSideBandwidthEstimation(const FieldTrialsView* key_value_config, RtcEventLog* event_log)"
  },
  {
    "label": "OnRouteChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRouteChange()"
  },
  {
    "label": "target_rate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "target_rate()"
  },
  {
    "label": "loss_based_state()",
    "kind": "Method",
    "detail": "Function (LossBasedState)",
    "insertText": "loss_based_state()"
  },
  {
    "label": "fraction_loss()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "fraction_loss()"
  },
  {
    "label": "UpdateEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEstimate(Timestamp at_time)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(const SentPacket& sent_packet)"
  },
  {
    "label": "UpdateReceiverEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReceiverEstimate(Timestamp at_time, DataRate bandwidth)"
  },
  {
    "label": "UpdateDelayBasedEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayBasedEstimate(Timestamp at_time, DataRate bitrate)"
  },
  {
    "label": "UpdatePacketsLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePacketsLost(int64_t packets_lost, int64_t number_of_packets, Timestamp at_time)"
  },
  {
    "label": "UpdateRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtt(TimeDelta rtt, Timestamp at_time)"
  },
  {
    "label": "SetBitrates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitrates(absl::optional<DataRate> send_bitrate, DataRate min_bitrate, DataRate max_bitrate, Timestamp at_time)"
  },
  {
    "label": "SetSendBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendBitrate(DataRate bitrate, Timestamp at_time)"
  },
  {
    "label": "SetMinMaxBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinMaxBitrate(DataRate min_bitrate, DataRate max_bitrate)"
  },
  {
    "label": "GetMinBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMinBitrate()"
  },
  {
    "label": "SetAcknowledgedRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAcknowledgedRate(absl::optional<DataRate> acknowledged_rate, Timestamp at_time)"
  },
  {
    "label": "UpdateLossBasedEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLossBasedEstimator(const TransportPacketsFeedback& report, BandwidthUsage delay_detector_state, absl::optional<DataRate> probe_bitrate)"
  },
  {
    "label": "IsInStartPhase()",
    "kind": "Method",
    "detail": "Function (private : class GoogCcStatePrinter ; enum UmaState { kNoUpdate,kFirstDone,kDone } ; bool)",
    "insertText": "IsInStartPhase(Timestamp at_time)"
  },
  {
    "label": "UpdateUmaStatsPacketsLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUmaStatsPacketsLost(Timestamp at_time, int packets_lost)"
  },
  {
    "label": "UpdateMinHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMinHistory(Timestamp at_time)"
  },
  {
    "label": "GetUpperLimit()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "GetUpperLimit()"
  },
  {
    "label": "MaybeLogLowBitrateWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeLogLowBitrateWarning(DataRate bitrate, Timestamp at_time)"
  },
  {
    "label": "MaybeLogLossBasedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeLogLossBasedEvent(Timestamp at_time)"
  },
  {
    "label": "UpdateTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTargetBitrate(DataRate bitrate, Timestamp at_time)"
  },
  {
    "label": "ApplyTargetLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTargetLimits(Timestamp at_time)"
  },
  {
    "label": "LossBasedBandwidthEstimatorV1Enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LossBasedBandwidthEstimatorV1Enabled()"
  },
  {
    "label": "LossBasedBandwidthEstimatorV2Enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LossBasedBandwidthEstimatorV2Enabled()"
  },
  {
    "label": "LossBasedBandwidthEstimatorV1ReadyForUse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LossBasedBandwidthEstimatorV1ReadyForUse()"
  },
  {
    "label": "LossBasedBandwidthEstimatorV2ReadyForUse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LossBasedBandwidthEstimatorV2ReadyForUse()"
  }
]