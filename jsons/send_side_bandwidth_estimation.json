[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "LinkCapacityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LinkCapacityTracker"
  },
  {
    "label": "RttBasedBackoff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RttBasedBackoff"
  },
  {
    "label": "SendSideBandwidthEstimation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendSideBandwidthEstimation"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "UmaState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UmaState"
  },
  {
    "label": "LinkCapacityTracker()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "LinkCapacityTracker()"
  },
  {
    "label": "UpdateDelayBasedEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayBasedEstimate(Timestamp at_time,\n                                DataRate delay_based_bitrate)"
  },
  {
    "label": "OnStartingRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartingRate(DataRate start_rate)"
  },
  {
    "label": "OnRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRateUpdate(absl::optional<DataRate> acknowledged,\n                    DataRate target,\n                    Timestamp at_time)"
  },
  {
    "label": "OnRttBackoff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttBackoff(DataRate backoff_rate, Timestamp at_time)"
  },
  {
    "label": "RttBasedBackoff()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "RttBasedBackoff(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "UpdatePropagationRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePropagationRtt(Timestamp at_time, TimeDelta propagation_rtt)"
  },
  {
    "label": "OnRouteChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRouteChange()"
  },
  {
    "label": "UpdateEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEstimate(Timestamp at_time)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(const SentPacket& sent_packet)"
  },
  {
    "label": "UpdatePropagationRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePropagationRtt(Timestamp at_time, TimeDelta propagation_rtt)"
  },
  {
    "label": "UpdateReceiverEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReceiverEstimate(Timestamp at_time, DataRate bandwidth)"
  },
  {
    "label": "UpdateDelayBasedEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelayBasedEstimate(Timestamp at_time, DataRate bitrate)"
  },
  {
    "label": "UpdatePacketsLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePacketsLost(int64_t packets_lost,\n                         int64_t number_of_packets,\n                         Timestamp at_time)"
  },
  {
    "label": "UpdateRtt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRtt(TimeDelta rtt, Timestamp at_time)"
  },
  {
    "label": "SetBitrates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitrates(absl::optional<DataRate> send_bitrate,\n                   DataRate min_bitrate,\n                   DataRate max_bitrate,\n                   Timestamp at_time)"
  },
  {
    "label": "SetSendBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendBitrate(DataRate bitrate, Timestamp at_time)"
  },
  {
    "label": "SetMinMaxBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinMaxBitrate(DataRate min_bitrate, DataRate max_bitrate)"
  },
  {
    "label": "SetAcknowledgedRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAcknowledgedRate(absl::optional<DataRate> acknowledged_rate,\n                           Timestamp at_time)"
  },
  {
    "label": "UpdateLossBasedEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLossBasedEstimator(const TransportPacketsFeedback& report,\n                                BandwidthUsage delay_detector_state,\n                                absl::optional<DataRate> probe_bitrate)"
  },
  {
    "label": "UpdateUmaStatsPacketsLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUmaStatsPacketsLost(Timestamp at_time, int packets_lost)"
  },
  {
    "label": "UpdateMinHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMinHistory(Timestamp at_time)"
  },
  {
    "label": "MaybeLogLowBitrateWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeLogLowBitrateWarning(DataRate bitrate, Timestamp at_time)"
  },
  {
    "label": "MaybeLogLossBasedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeLogLossBasedEvent(Timestamp at_time)"
  },
  {
    "label": "UpdateTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTargetBitrate(DataRate bitrate, Timestamp at_time)"
  },
  {
    "label": "ApplyTargetLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTargetLimits(Timestamp at_time)"
  }
]