[
  {
    "label": "SVectorTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVectorTextBox"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / Input / SNumericEntryBox . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SCompoundWidget . h \" # define LOCTEXT_NAMESPACE \" VectorTextBox \" template<NumericType> class SVectorTextBox : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnNumericValueCommitted, NumericType, ETextCommit::Type)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SVectorTextBox)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FString, VisibleText_0 ) SLATE_ATTRIBUTE( FString, VisibleText_1 ) SLATE_ATTRIBUTE( FString, VisibleText_2 ) SLATE_EVENT( FOnNumericValueCommitted, OnNumericCommitted_Box_0 ) SLATE_EVENT( FOnNumericValueCommitted, OnNumericCommitted_Box_1 ) SLATE_EVENT( FOnNumericValueCommitted, OnNumericCommitted_Box_2 ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const bool bInIsRotator)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (bIsRotator = bInIsRotator ; const bool bUseRPY = false ; VisibleText_0 = InArgs . _VisibleText_0 ; VisibleText_1 = InArgs . _VisibleText_1 ; VisibleText_2 = InArgs . _VisibleText_2 ; const FLinearColor LabelClr =)",
    "insertText": "FLinearColor(1.f, 1.f, 1.f, 0.4f)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (this -> ChildSlot [)",
    "insertText": "SNew(SVerticalBox) +SVerticalBox::Slot() .AutoHeight() .Padding(0) [ SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth().Padding(2) .HAlign(HAlign_Fill) [ SNew( SNumericEntryBox<NumericType> ) .LabelVAlign(VAlign_Center) .Label() [ SNew( STextBlock ) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .Text( bIsRotator && bUseRPY ? LOCTEXT(\"VectorNodeRollValueLabel\", \"R\") : LOCTEXT(\"VectorNodeXAxisValueLabel\", \"X\") ) .ColorAndOpacity( LabelClr ) ] .Value( this, &SVectorTextBox::GetTypeInValue_0 ) .OnValueCommitted( InArgs._OnNumericCommitted_Box_0 ) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .UndeterminedString( LOCTEXT(\"MultipleValues\", \"Multiple Values\") ) .ToolTipText( bIsRotator ? LOCTEXT(\"VectorNodeRollValueLabel_ToolTip\", \"Roll value (around X)\") : LOCTEXT(\"VectorNodeXAxisValueLabel_ToolTip\", \"X value\")) .EditableTextBoxStyle( &FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>( \"Graph.VectorEditableTextBox\" )) .BorderForegroundColor( FLinearColor::White ) .BorderBackgroundColor( FLinearColor::White ) ] +SHorizontalBox::Slot() .AutoWidth().Padding(2) .HAlign(HAlign_Fill) [ SNew( SNumericEntryBox<NumericType> ) .LabelVAlign(VAlign_Center) .Label() [ SNew( STextBlock ) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .Text( bIsRotator && bUseRPY ? LOCTEXT(\"VectorNodePitchValueLabel\", \"P\") : LOCTEXT(\"VectorNodeYAxisValueLabel\", \"Y\") ) .ColorAndOpacity( LabelClr ) ] .Value( this, &SVectorTextBox::GetTypeInValue_1 ) .OnValueCommitted( InArgs._OnNumericCommitted_Box_1 ) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .UndeterminedString( LOCTEXT(\"MultipleValues\", \"Multiple Values\") ) .ToolTipText(bIsRotator ? LOCTEXT(\"VectorNodePitchValueLabel_ToolTip\", \"Pitch value (around Y)\") : LOCTEXT(\"VectorNodeYAxisValueLabel_ToolTip\", \"Y value\")) .EditableTextBoxStyle( &FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>( \"Graph.VectorEditableTextBox\" )) .BorderForegroundColor( FLinearColor::White ) .BorderBackgroundColor( FLinearColor::White ) ] +SHorizontalBox::Slot() .AutoWidth().Padding(2) .HAlign(HAlign_Fill) [ SNew( SNumericEntryBox<NumericType> ) .LabelVAlign(VAlign_Center) .Label() [ SNew( STextBlock ) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .Text( bIsRotator && bUseRPY ? LOCTEXT(\"VectorNodeYawValueLabel\", \"Y\") : LOCTEXT(\"VectorNodeZAxisValueLabel\", \"Z\") ) .ColorAndOpacity( LabelClr ) ] .Value( this, &SVectorTextBox::GetTypeInValue_2 ) .OnValueCommitted( InArgs._OnNumericCommitted_Box_2 ) .Font( FAppStyle::GetFontStyle( \"Graph.VectorEditableTextBox\" ) ) .UndeterminedString( LOCTEXT(\"MultipleValues\", \"Multiple Values\") ) .ToolTipText(bIsRotator ? LOCTEXT(\"VectorNodeYawValueLabel_Tooltip\", \"Yaw value (around Z)\") : LOCTEXT(\"VectorNodeZAxisValueLabel_ToolTip\", \"Z value\")) .EditableTextBoxStyle( &FAppStyle::GetWidgetStyle<FEditableTextBoxStyle>( \"Graph.VectorEditableTextBox\" )) .BorderForegroundColor( FLinearColor::White ) .BorderBackgroundColor( FLinearColor::White)"
  },
  {
    "label": "GetValueType()",
    "kind": "Method",
    "detail": "Function (} private : NumericType)",
    "insertText": "GetValueType(const FString& InString)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<double, NumericType>)"
  },
  {
    "label": "GetTypeInValue_0()",
    "kind": "Method",
    "detail": "Function (} else { return NumericType { } ; } } TOptional<NumericType>)",
    "insertText": "GetTypeInValue_0()"
  },
  {
    "label": "GetTypeInValue_1()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "GetTypeInValue_1()"
  },
  {
    "label": "GetTypeInValue_2()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType>)",
    "insertText": "GetTypeInValue_2()"
  }
]