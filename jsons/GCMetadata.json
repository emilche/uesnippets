[
  {
    "label": "AsmPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsmPrinter"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "GCPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GCPoint"
  },
  {
    "label": "GCRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GCRoot"
  },
  {
    "label": "GCFunctionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCFunctionInfo"
  },
  {
    "label": "GCModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GCModuleInfo"
  },
  {
    "label": "GCPoint()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_GCMETADATA_H # define LLVM_CODEGEN_GCMETADATA_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / CodeGen / GCStrategy . h \" # include \" llvm / IR / DebugLoc . h \" # include \" llvm / Pass . h \" # include<memory> namespace llvm { class AsmPrinter ; class Constant ; class MCSymbol ; struct GCPoint { GC::PointKind Kind ; MCSymbol* Label ; DebugLoc Loc ;)",
    "insertText": "GCPoint(GC::PointKind K, MCSymbol *L, DebugLoc DL) : Kind(K), Label(L), Loc(DL)"
  },
  {
    "label": "GCRoot()",
    "kind": "Method",
    "detail": "Function (} } ; struct GCRoot { int Num ; int StackOffset ; const Constant* Metadata ;)",
    "insertText": "GCRoot(int N, const Constant *MD) : Num(N), StackOffset(-1), Metadata(MD)"
  },
  {
    "label": "GCFunctionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class GCFunctionInfo { public : typedef std::vector<GCPoint>::iterator iterator ; typedef std::vector<GCRoot>::iterator roots_iterator ; typedef std::vector<GCRoot>::const_iterator live_iterator ; private : const Function& F ; GCStrategy& S ; uint64_t FrameSize ; std::vector<GCRoot> Roots ; std::vector<GCPoint> SafePoints ; public :)",
    "insertText": "GCFunctionInfo(const Function &F, GCStrategy &S)"
  },
  {
    "label": "GCFunctionInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GCFunctionInfo()"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (const Function&)",
    "insertText": "getFunction()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Roots .)",
    "insertText": "push_back(GCRoot(Num, Metadata))"
  },
  {
    "label": "removeStackRoot()",
    "kind": "Method",
    "detail": "Function (} roots_iterator)",
    "insertText": "removeStackRoot(roots_iterator position)"
  },
  {
    "label": "addSafePoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addSafePoint(GC::PointKind Kind, MCSymbol *Label, DebugLoc DL)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (SafePoints .)",
    "insertText": "emplace_back(Kind, Label, DL)"
  },
  {
    "label": "getFrameSize()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getFrameSize()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (FrameSize = S ; } iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "roots_begin()",
    "kind": "Method",
    "detail": "Function (} roots_iterator)",
    "insertText": "roots_begin()"
  },
  {
    "label": "roots_end()",
    "kind": "Method",
    "detail": "Function (} roots_iterator)",
    "insertText": "roots_end()"
  },
  {
    "label": "roots_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "roots_size()"
  },
  {
    "label": "live_begin()",
    "kind": "Method",
    "detail": "Function (} live_iterator)",
    "insertText": "live_begin(const iterator &p)"
  },
  {
    "label": "live_end()",
    "kind": "Method",
    "detail": "Function (} live_iterator)",
    "insertText": "live_end(const iterator &p)"
  },
  {
    "label": "live_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "live_size(const iterator &p)"
  },
  {
    "label": "getGCStrategy()",
    "kind": "Method",
    "detail": "Function (} } ; class GCModuleInfo : public ImmutablePass { SmallVector<std::unique_ptr<GCStrategy>,1> GCStrategyList ; StringMap<GCStrategy*> GCStrategyMap ; public : GCStrategy*)",
    "insertText": "getGCStrategy(const StringRef Name)"
  },
  {
    "label": "funcinfo_begin()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<std::unique_ptr<GCFunctionInfo>> FuncInfoVec ; FuncInfoVec::iterator)",
    "insertText": "funcinfo_begin()"
  },
  {
    "label": "funcinfo_end()",
    "kind": "Method",
    "detail": "Function (} FuncInfoVec::iterator)",
    "insertText": "funcinfo_end()"
  },
  {
    "label": "GCModuleInfo()",
    "kind": "Method",
    "detail": "Function (} private : FuncInfoVec Functions ; typedef DenseMap<const Function*,GCFunctionInfo*> finfo_map_type ; finfo_map_type FInfoMap ; public : typedef SmallVector<std::unique_ptr<GCStrategy>,1>::const_iterator iterator ; char ID ;)",
    "insertText": "GCModuleInfo()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "getFunctionInfo()",
    "kind": "Method",
    "detail": "Function (} GCFunctionInfo&)",
    "insertText": "getFunctionInfo(const Function &F)"
  }
]