[
  {
    "label": "UTimeUnitFormatStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTimeUnitFormatStyle"
  },
  {
    "label": "Hashtable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hashtable"
  },
  {
    "label": "UVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVector"
  },
  {
    "label": "TimeUnitFormatReadSink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TimeUnitFormatReadSink"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "TimeUnitFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef __TMUTFMT_H__ # define __TMUTFMT_H__ # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # ifndef # include \" unicode / unistr . h \" # include \" unicode / tmunit . h \" # include \" unicode / tmutamt . h \" # include \" unicode / measfmt . h \" # include \" unicode / numfmt . h \" # include \" unicode / plurrule . h \" enum UTimeUnitFormatStyle { UTMUTFMT_FULL_STYLE,UTMUTFMT_ABBREVIATED_STYLE,UTMUTFMT_FORMAT_STYLE_COUNT } ; typedef enum UTimeUnitFormatStyle UTimeUnitFormatStyle ; U_NAMESPACE_BEGIN class Hashtable ; class UVector ; struct TimeUnitFormatReadSink ; class U_I18N_API TimeUnitFormat : public MeasureFormat { public :)",
    "insertText": "TimeUnitFormat(UErrorCode& status)"
  },
  {
    "label": "TimeUnitFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeUnitFormat(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "TimeUnitFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeUnitFormat(const Locale& locale, UTimeUnitFormatStyle style, UErrorCode& status)"
  },
  {
    "label": "TimeUnitFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TimeUnitFormat(const TimeUnitFormat&)"
  },
  {
    "label": "TimeUnitFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TimeUnitFormat()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Format*)",
    "insertText": "clone(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeUnitFormat&)",
    "insertText": "operator(const TimeUnitFormat& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const Format& other)"
  },
  {
    "label": "setLocale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLocale(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "setNumberFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumberFormat(const NumberFormat& format, UErrorCode& status)"
  },
  {
    "label": "parseObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parseObject(const UnicodeString& source, Formattable& result, ParsePosition& pos)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (private : Hashtable* fTimeUnitToCountToPatterns [ TimeUnit::UTIMEUNIT_FIELD_COUNT ] ; UTimeUnitFormatStyle fStyle ; void)",
    "insertText": "create(UTimeUnitFormatStyle style, UErrorCode& status)"
  },
  {
    "label": "setup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setup(UErrorCode& status)"
  },
  {
    "label": "initDataMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initDataMembers(UErrorCode& status)"
  },
  {
    "label": "readFromCurrentLocale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readFromCurrentLocale(UTimeUnitFormatStyle style, const char* key, const UVector& pluralCounts, UErrorCode& status)"
  },
  {
    "label": "checkConsistency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "checkConsistency(UTimeUnitFormatStyle style, const char* key, UErrorCode& status)"
  },
  {
    "label": "searchInLocaleChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "searchInLocaleChain(UTimeUnitFormatStyle style, const char* key, const char* localeName, TimeUnit::UTimeUnitFields field, const UnicodeString&, const char*, Hashtable*, UErrorCode&)"
  },
  {
    "label": "initHash()",
    "kind": "Method",
    "detail": "Function (Hashtable*)",
    "insertText": "initHash(UErrorCode& status)"
  },
  {
    "label": "deleteHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteHash(Hashtable* htable)"
  },
  {
    "label": "copyHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyHash(const Hashtable* source, Hashtable* target, UErrorCode& status)"
  },
  {
    "label": "getTimeUnitName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getTimeUnitName(TimeUnit::UTimeUnitFields field, UErrorCode& status)"
  }
]