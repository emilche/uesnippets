[
  {
    "label": "TMovieSceneEvaluationTreeFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTreeFormatter"
  },
  {
    "label": "FLogRowItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogRowItem"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / StringFwd . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Evaluation / MovieSceneEvaluationTree . h \" # include \" Misc / StringBuilder . h \" # include \" MovieSceneFwd . h \" # include \" MovieSceneTimeHelpers . h \" # include \" Templates / Tuple . h \" # if ! NO_LOGGING template<DataType> struct TMovieSceneEvaluationTreeFormatter {)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnFormatData, const DataType&, TStringBuilder<256>&)"
  },
  {
    "label": "TMovieSceneEvaluationTreeFormatter()",
    "kind": "Method",
    "detail": "Function (const TMovieSceneEvaluationTree<DataType>& Tree ; struct FLogRowItem { int32 ParentRowItemIndex = INDEX_NONE ; const FMovieSceneEvaluationTreeNode* Node = nullptr ; int32 Width = 0 ; int32 ChildrenWidthTotal = 0 ; int32 LeftOffset = 0 ; } ; using FLogRow = TArray<FLogRowItem> ; TArray<FLogRow> LogRows ; using FDataIndex = TTuple<int32,int32> ; using FDataInfo = TTuple<int32,TRange<FFrameNumber>> ; TMap<FDataIndex,FDataInfo> DataIndices ; int32 ParentItemMargin = 8 ; FOnFormatData DataFormatter ;)",
    "insertText": "TMovieSceneEvaluationTreeFormatter(const TMovieSceneEvaluationTree<DataType>& InTree) : Tree(InTree)"
  },
  {
    "label": "LogTree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LogTree()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (LogRows .)",
    "insertText": "Reset()"
  },
  {
    "label": "BuildLogRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLogRows(INDEX_NONE, &Tree.RootNode, 0)"
  },
  {
    "label": "AccumulateWidths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateWidths()"
  },
  {
    "label": "AccumulateLeftOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateLeftOffsets()"
  },
  {
    "label": "OutputLogRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputLogRows()"
  },
  {
    "label": "OutputData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputData()"
  },
  {
    "label": "BuildLogRows()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "BuildLogRows(int32 InParentRowItemIndex, const FMovieSceneEvaluationTreeNode* InNode, int32 InDepth)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (LogRows .)",
    "insertText": "SetNum(InDepth + 1)"
  },
  {
    "label": "GetDataForSingleNode()",
    "kind": "Method",
    "detail": "Function (} FLogRow& LogRow = LogRows [ InDepth ] ; TArrayView<const DataType> NodeData = Tree .)",
    "insertText": "GetDataForSingleNode(*InNode)"
  },
  {
    "label": "GetItemMinWidth()",
    "kind": "Method",
    "detail": "Function (const int32 NodeWidth =)",
    "insertText": "GetItemMinWidth(NodeData.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 CurItemIndex = LogRow .)",
    "insertText": "Add(FLogRowItem{InParentRowItemIndex, InNode, NodeWidth})"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FMovieSceneEvaluationTreeNode> ChildNodes = Tree . ChildNodes .)",
    "insertText": "Get(InNode->ChildrenID)"
  },
  {
    "label": "BuildLogRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLogRows(CurItemIndex, &ChildNode, InDepth + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FLogRow& LogRow = LogRows [ RowIndex ] ;)",
    "insertText": "if(RowIndex > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FLogRow& ParentLogRow = LogRows [ RowIndex - 1 ] ;)",
    "insertText": "for(FLogRowItem& RowItem : LogRow)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (RowItem . Width =)",
    "insertText": "Max(RowItem.Width, RowItem.ChildrenWidthTotal + ParentItemMargin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ensure(ParentLogRow.IsValidIndex(RowItem.ParentRowItemIndex)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FLogRow& LogRow = LogRows [ RowIndex ] ; FLogRow& ParentLogRow = LogRows [ RowIndex - 1 ] ; int32 CurParentRowItemIndex = INDEX_NONE ; int32 NextLeftOffset = 0 ;)",
    "insertText": "for(int32 ItemIndex = 0; ItemIndex < LogRow.Num(); ++ItemIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FLogRowItem& ParentRowItem = ParentLogRow [ RowItem . ParentRowItemIndex ] ;)",
    "insertText": "if(RowItem.ParentRowItemIndex != CurParentRowItemIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<1 0 2 4> Builder ;)",
    "insertText": "for(const FLogRow& LogRow : LogRows)"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (const int32 CurLeftOffset = Builder .)",
    "insertText": "Len()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 IndentWidth =)",
    "insertText": "Max(0, RowItem.LeftOffset - CurLeftOffset)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "Append(TEXT(\" \"))"
  },
  {
    "label": "LexToStringAllDataIndexes()",
    "kind": "Method",
    "detail": "Function (} const FString DataString =)",
    "insertText": "LexToStringAllDataIndexes(RowItem.Node)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const int32 Padding =)",
    "insertText": "Max(0, RowItem.Width - DataString.Len() - 4)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (const int32 PaddingLeft = Padding / 2 ; const int32 PaddingRight = Padding - PaddingLeft ; Builder .)",
    "insertText": "Append(TEXT(\"[\"))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "Append(TEXT(\"=\"))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Builder .)",
    "insertText": "Append(DataString)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} Builder .)",
    "insertText": "Append(TEXT(\"]\"))"
  },
  {
    "label": "RowString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "RowString(Builder.ToString())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Dummy . DataID . EntryIndex = It . Key . template)",
    "insertText": "Get()"
  },
  {
    "label": "GetDataForSingleNode()",
    "kind": "Method",
    "detail": "Function (TArrayView<const DataType> DataView = Tree .)",
    "insertText": "GetDataForSingleNode(Dummy)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (const FDataInfo DataInfo = It . Value ; DataStringBuilder .)",
    "insertText": "Appendf(TEXT(\"%d: \"), DataInfo.template Get<0>())"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (DataStringBuilder .)",
    "insertText": "Appendf(TEXT(\"%s \"), *LexToString(DataInfo.template Get<1>()))"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (const DataType& Data = DataView [ DataIndex ] ; DataFormatter .)",
    "insertText": "Execute(Data, DataStringBuilder)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const FString DataString = DataStringBuilder .)",
    "insertText": "ToString()"
  },
  {
    "label": "LexToStringAllDataIndexes()",
    "kind": "Method",
    "detail": "Function (} } } FString)",
    "insertText": "LexToStringAllDataIndexes(const FMovieSceneEvaluationTreeNode* Node)"
  },
  {
    "label": "GetDataForSingleNode()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<6 4> DataBuilder ; TArrayView<const DataType> DataView = Tree .)",
    "insertText": "GetDataForSingleNode(*Node)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (DataBuilder .)",
    "insertText": "Append(TEXT(\",\"))"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (} const DataType& Data = DataView [ Index ] ; const FDataIndex)",
    "insertText": "Key(Node->DataID.EntryIndex, Index)"
  },
  {
    "label": "DefaultValue()",
    "kind": "Method",
    "detail": "Function (const FDataInfo)",
    "insertText": "DefaultValue(DataIndices.Num(), Node->Range)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (const FDataInfo ActualValue = DataIndices .)",
    "insertText": "FindOrAdd(Key, DefaultValue)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (DataBuilder .)",
    "insertText": "Append(LexToString(ActualValue.template Get<0>()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DataView.Num() == 0)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (DataBuilder .)",
    "insertText": "Append(TEXT(\"nil\"))"
  },
  {
    "label": "GetItemMinWidth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetItemMinWidth(int32 NumData)"
  }
]