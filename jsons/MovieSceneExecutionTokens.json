[
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "FMovieSceneExecutionTokens",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneExecutionTokens"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "FMovieSceneExecutionTokens()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Evaluation / Blending / BlendableToken . h \" # include \" Evaluation / Blending / MovieSceneBlendingAccumulator . h \" # include \" Evaluation / Blending / MovieSceneBlendingActuatorID . h \" # include \" Evaluation / MovieSceneEvaluationKey . h \" # include \" Evaluation / MovieSceneEvaluationOperand . h \" # include \" Evaluation / MovieSceneEvaluationScope . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" Evaluation / PersistentEvaluationData . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameRate . h \" # include \" Misc / FrameTime . h \" # include \" Misc / InlineValue . h \" # include \" MovieSceneExecutionToken . h \" # include \" MovieSceneFwd . h \" # include \" Templates / EnableIf . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Templates / RemoveReference . h \" # include \" Templates / UnrealTemplate . h \" class IMovieScenePlayer ; struct FMovieSceneExecutionTokens {)",
    "insertText": "FMovieSceneExecutionTokens() : Context(FMovieSceneEvaluationRange(FFrameTime(0), FFrameRate()), EMovieScenePlayerStatus::Stopped)"
  },
  {
    "label": "FMovieSceneExecutionTokens()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneExecutionTokens(const FMovieSceneExecutionTokens&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneExecutionTokens&)",
    "insertText": "operator(const FMovieSceneExecutionTokens&)"
  },
  {
    "label": "FMovieSceneExecutionTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneExecutionTokens(FMovieSceneExecutionTokens&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneExecutionTokens&)",
    "insertText": "operator(FMovieSceneExecutionTokens&&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (template<T> TEnableIf<TPointerIsConvertibleFromTo<TRemoveReference<T>::Type,const IMovieSceneExecutionToken>::Value>::Type)",
    "insertText": "Add(T&& InToken)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OrderedTokens .)",
    "insertText": "Add(FEntry(Operand, Scope, Context, Forward<T>(InToken)))"
  },
  {
    "label": "AddShared()",
    "kind": "Method",
    "detail": "Function (} template<T> TEnableIf<TPointerIsConvertibleFromTo<TRemoveReference<T>::Type,const IMovieSceneSharedExecutionToken>::Value>::Type)",
    "insertText": "AddShared(FMovieSceneSharedDataId ID, T&& InToken)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SharedTokens .)",
    "insertText": "Add(ID, MoveTemp(InToken))"
  },
  {
    "label": "FindShared()",
    "kind": "Method",
    "detail": "Function (} IMovieSceneSharedExecutionToken*)",
    "insertText": "FindShared(FMovieSceneSharedDataId ID)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (auto* Existing = SharedTokens .)",
    "insertText": "Find(ID)"
  },
  {
    "label": "GetBlendingAccumulator()",
    "kind": "Method",
    "detail": "Function (} public : FMovieSceneBlendingAccumulator&)",
    "insertText": "GetBlendingAccumulator()"
  },
  {
    "label": "BlendToken()",
    "kind": "Method",
    "detail": "Function (BlendingAccumulator .)",
    "insertText": "BlendToken(Operand, InActuatorTypeID, Scope, Context, MoveTemp(InToken))"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(const FMovieSceneContext& RootContext, IMovieScenePlayer& Player)"
  },
  {
    "label": "SetOperand()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetOperand(const FMovieSceneEvaluationOperand& InOperand)"
  },
  {
    "label": "SetCurrentScope()",
    "kind": "Method",
    "detail": "Function (Operand = InOperand ; } void)",
    "insertText": "SetCurrentScope(const FMovieSceneEvaluationScope& InScope)"
  },
  {
    "label": "SetContext()",
    "kind": "Method",
    "detail": "Function (Scope = InScope ; } void)",
    "insertText": "SetContext(const FMovieSceneContext& InContext)"
  },
  {
    "label": "GetCurrentScope()",
    "kind": "Method",
    "detail": "Function (Context = InContext ; } FMovieSceneEvaluationScope)",
    "insertText": "GetCurrentScope()"
  },
  {
    "label": "FEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEntry(FEntry&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEntry&)",
    "insertText": "operator(FEntry&&)"
  }
]