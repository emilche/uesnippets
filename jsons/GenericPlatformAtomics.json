[
  {
    "label": "MS_ALIGN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MS_ALIGN"
  },
  {
    "label": "FGenericPlatformAtomics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformAtomics"
  },
  {
    "label": "MS_ALIGN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" struct)",
    "insertText": "MS_ALIGN(16)"
  },
  {
    "label": "GCC_ALIGN()",
    "kind": "Method",
    "detail": "Function (int64 Low ; int64 High ; })",
    "insertText": "GCC_ALIGN(16)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (struct FGenericPlatformAtomics { # if 0 int32)",
    "insertText": "InterlockedIncrement(volatile int32* Value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int32*)Value, RetVal + 1, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int64 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int64*)Value, RetVal + 1, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int32*)Value, RetVal - 1, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int64 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int64*)Value, RetVal - 1, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int32*)Value, RetVal + Amount, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int64 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int64*)Value, RetVal + Amount, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int32*)Value, Exchange, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int64 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int64*)Value, Exchange, RetVal) != RetVal)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS # error must implement # else)",
    "insertText": "InterlockedExchange((int32*)Dest, (int32)Exchange)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (# endif } int8)",
    "insertText": "InterlockedCompareExchange(volatile int8* Dest,int8 Exchange,int8 Comparand)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (# error must implement } int16)",
    "insertText": "InterlockedCompareExchange(volatile int16* Dest,int16 Exchange,int16 Comparand)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (# error must implement } int32)",
    "insertText": "InterlockedCompareExchange(volatile int32* Dest,int32 Exchange,int32 Comparand)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (# error must implement } int64)",
    "insertText": "InterlockedCompareExchange(volatile int64* Dest, int64 Exchange, int64 Comparand)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (# error must implement } int32)",
    "insertText": "InterlockedAnd(volatile int32* Value, const int32 AndValue)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int32*)Value, RetVal & AndValue, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int32*)Value, RetVal | OrValue, RetVal) != RetVal)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 RetVal ; do { RetVal =* Value ; })",
    "insertText": "while(InterlockedCompareExchange((int32*)Value, RetVal ^ XorValue, RetVal) != RetVal)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int16)",
    "insertText": "AtomicRead(volatile const int16* Src)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AtomicRead(volatile const int32* Src)"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "AtomicRead(volatile const int64* Src)"
  },
  {
    "label": "InterlockedCompareExchangePointer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "InterlockedCompareExchangePointer(void*volatile* Dest,void* Exchange,void* Comperand)"
  },
  {
    "label": "InterlockedCompareExchange()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_64BITS # error must implement # else)",
    "insertText": "InterlockedCompareExchange((int32*)Dest, (int32)Exchange, (int32)Comperand)"
  },
  {
    "label": "InterlockedCompareExchange128()",
    "kind": "Method",
    "detail": "Function (# endif } # if PLATFORM_HAS_128BIT_ATOMICS bool)",
    "insertText": "InterlockedCompareExchange128(volatile FInt128* Dest, const FInt128& Exchange, FInt128* Comparand)"
  },
  {
    "label": "AtomicRead128()",
    "kind": "Method",
    "detail": "Function (# error Must implement } void)",
    "insertText": "AtomicRead128(const volatile FInt128* Src, FInt128* OutResult)"
  },
  {
    "label": "InterlockedCompareExchange128()",
    "kind": "Method",
    "detail": "Function (FInt128 Zero ; Zero . High = 0 ; Zero . Low = 0 ;* OutResult = Zero ;)",
    "insertText": "InterlockedCompareExchange128((volatile FInt128*)Src, Zero, OutResult)"
  },
  {
    "label": "CanUseCompareExchange128()",
    "kind": "Method",
    "detail": "Function (} # endif # endif bool)",
    "insertText": "CanUseCompareExchange128()"
  }
]