[
  {
    "label": "AsyncPacketSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncPacketSocket"
  },
  {
    "label": "PacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSocketFactory"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "NetworkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkManager"
  },
  {
    "label": "AsyncResolverInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncResolverInterface"
  },
  {
    "label": "StunProber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunProber"
  },
  {
    "label": "NatType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NatType"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Status"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Requester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Requester"
  },
  {
    "label": "ObserverAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverAdapter"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(const std::vector<rtc::SocketAddress>& servers,\n             bool shared_socket_mode,\n             int stun_ta_interval_ms,\n             int requests_per_ip,\n             int timeout_ms,\n             AsyncCallback finish_callback)"
  },
  {
    "label": "Prepare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Prepare(const std::vector<rtc::SocketAddress>& servers,\n               bool shared_socket_mode,\n               int stun_ta_interval_ms,\n               int requests_per_ip,\n               int timeout_ms,\n               StunProber::Observer* observer)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(StunProber::Observer* observer)"
  },
  {
    "label": "ObserverAdapter()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ObserverAdapter()"
  },
  {
    "label": "ResolveServerName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveServerName(const rtc::SocketAddress& addr)"
  },
  {
    "label": "OnServerResolved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnServerResolved(rtc::AsyncResolverInterface* resolver)"
  },
  {
    "label": "OnSocketReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketReady(rtc::AsyncPacketSocket* socket,\n                     const rtc::SocketAddress& addr)"
  },
  {
    "label": "CreateSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSockets()"
  },
  {
    "label": "should_send_next_request()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "should_send_next_request(int64_t now)"
  },
  {
    "label": "get_wake_up_interval_ms()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_wake_up_interval_ms()"
  },
  {
    "label": "SendNextRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendNextRequest()"
  },
  {
    "label": "MaybeScheduleStunRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeScheduleStunRequests()"
  },
  {
    "label": "ReportOnPrepared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportOnPrepared(StunProber::Status status)"
  },
  {
    "label": "ReportOnFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportOnFinished(StunProber::Status status)"
  }
]