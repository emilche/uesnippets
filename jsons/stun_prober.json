[
  {
    "label": "AsyncPacketSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncPacketSocket"
  },
  {
    "label": "PacketSocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketSocketFactory"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "NetworkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkManager"
  },
  {
    "label": "AsyncResolverInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncResolverInterface"
  },
  {
    "label": "StunProber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StunProber"
  },
  {
    "label": "NatType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NatType"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Status"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "Requester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Requester"
  },
  {
    "label": "ObserverAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObserverAdapter"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_STUNPROBER_STUN_PROBER_H_ # define P2P_STUNPROBER_STUN_PROBER_H_ # include<set> # include<string> # include<vector> # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" rtc_base / byte_buffer . h \" # include \" rtc_base / ip_address . h \" # include \" rtc_base / network . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread . h \" namespace rtc { class AsyncPacketSocket ; class PacketSocketFactory ; class Thread ; class NetworkManager ; class AsyncResolverInterface ; } namespace stunprober { class StunProber ; const int kMaxUdpBufferSize = 1 2 0 0 ; typedef std::function<)",
    "insertText": "void(StunProber*, int)"
  },
  {
    "label": "Observer()",
    "kind": "Method",
    "detail": "Function (enum NatType { NATTYPE_INVALID,NATTYPE_NONE,NATTYPE_UNKNOWN,NATTYPE_SYMMETRIC,NATTYPE_NON_SYMMETRIC } ; class RTC_EXPORT StunProber : public sigslot::has_slots<> { public : enum Status { SUCCESS,GENERIC_FAILURE,RESOLVE_FAILED,WRITE_FAILED,READ_FAILED,} ; class Observer { public : ~)",
    "insertText": "Observer()"
  },
  {
    "label": "OnPrepared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPrepared(StunProber* prober, StunProber::Status status)"
  },
  {
    "label": "OnFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinished(StunProber* prober, StunProber::Status status)"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (} ; struct RTC_EXPORT Stats {)",
    "insertText": "Stats()"
  },
  {
    "label": "StunProber()",
    "kind": "Method",
    "detail": "Function (int raw_num_request_sent = 0 ; int num_request_sent = 0 ; int num_response_received = 0 ; NatType nat_type = NATTYPE_INVALID ; int average_rtt_ms = - 1 ; int success_percent = 0 ; int target_request_interval_ns = 0 ; int actual_request_interval_ns = 0 ; bool shared_socket_mode = false ; std::string host_ip ; std::set<std::string> srflx_addrs ; } ;)",
    "insertText": "StunProber(rtc::PacketSocketFactory* socket_factory, rtc::Thread* thread, std::vector<const rtc::Network*> networks)"
  },
  {
    "label": "StunProber()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StunProber()"
  },
  {
    "label": "StunProber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StunProber(const StunProber&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StunProber&)",
    "insertText": "operator(const StunProber&)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(const std::vector<rtc::SocketAddress>& servers, bool shared_socket_mode, int stun_ta_interval_ms, int requests_per_ip, int timeout_ms, AsyncCallback finish_callback)"
  },
  {
    "label": "Prepare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Prepare(const std::vector<rtc::SocketAddress>& servers, bool shared_socket_mode, int stun_ta_interval_ms, int requests_per_ip, int timeout_ms, StunProber::Observer* observer)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(StunProber::Observer* observer)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(Stats* stats)"
  },
  {
    "label": "estimated_execution_time()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "estimated_execution_time()"
  },
  {
    "label": "ObserverAdapter()",
    "kind": "Method",
    "detail": "Function (} private : class Requester ; class ObserverAdapter : public Observer { public :)",
    "insertText": "ObserverAdapter()"
  },
  {
    "label": "set_callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_callback(AsyncCallback callback)"
  },
  {
    "label": "OnPrepared()",
    "kind": "Method",
    "detail": "Function (callback_ = callback ; } void)",
    "insertText": "OnPrepared(StunProber* stunprober, Status status)"
  },
  {
    "label": "OnFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinished(StunProber* stunprober, Status status)"
  },
  {
    "label": "ResolveServerName()",
    "kind": "Method",
    "detail": "Function (private : AsyncCallback callback_ ; } ; bool)",
    "insertText": "ResolveServerName(const rtc::SocketAddress& addr)"
  },
  {
    "label": "OnServerResolved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnServerResolved(rtc::AsyncResolverInterface* resolver)"
  },
  {
    "label": "OnSocketReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketReady(rtc::AsyncPacketSocket* socket, const rtc::SocketAddress& addr)"
  },
  {
    "label": "CreateSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSockets()"
  },
  {
    "label": "Done()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Done()"
  },
  {
    "label": "total_socket_required()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "total_socket_required()"
  },
  {
    "label": "should_send_next_request()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "should_send_next_request(int64_t now)"
  },
  {
    "label": "get_wake_up_interval_ms()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "get_wake_up_interval_ms()"
  },
  {
    "label": "SendNextRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendNextRequest()"
  },
  {
    "label": "MaybeScheduleStunRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeScheduleStunRequests()"
  },
  {
    "label": "ReportOnPrepared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportOnPrepared(StunProber::Status status)"
  },
  {
    "label": "ReportOnFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportOnFinished(StunProber::Status status)"
  },
  {
    "label": "CreateRequester()",
    "kind": "Method",
    "detail": "Function (Requester*)",
    "insertText": "CreateRequester()"
  }
]