[
  {
    "label": "FBitmapFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitmapFileHeader"
  },
  {
    "label": "FBitmapInfoHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitmapInfoHeader"
  },
  {
    "label": "EBitmapCompression",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBitmapCompression"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBitmapInfoHeaderV4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitmapInfoHeaderV4"
  },
  {
    "label": "FBmiColorsMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBmiColorsMask"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FBitmapFileHeader ; struct FBitmapInfoHeader ; enum EBitmapCompression { BCBI_RGB = 0,BCBI_RLE8 = 1,BCBI_RLE4 = 2,BCBI_BITFIELDS = 3,BCBI_JPEG = 4,BCBI_PNG = 5,BCBI_ALPHABITFIELDS = 6,} ; enum class EBitmapHeaderVersion : uint8 { BHV_BITMAPINFOHEADER = 0,BHV_BITMAPV2INFOHEADER = 1,BHV_BITMAPV3INFOHEADER = 2,BHV_BITMAPV4HEADER = 3,BHV_BITMAPV5HEADER = 4,BHV_INVALID = 0 xFF } ; enum class EBitmapCSType : uint32 { BCST_BLCS_CALIBRATED_RGB = 0 x00000000,BCST_LCS_sRGB = 0 x73524742,BCST_LCS_WINDOWS_COLOR_SPACE = 0 x57696E20,BCST_PROFILE_LINKED = 0 x4C494E4B,BCST_PROFILE_EMBEDDED = 0 x4D424544,} ; # pragma)",
    "insertText": "pack(push,1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint16 bfType ; uint32 bfSize ; uint16 bfReserved1 ; uint16 bfReserved2 ; uint32 bfOffBits ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FBitmapFileHeader& H)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (Ar<<H . bfType<<H . bfSize<<H . bfReserved1<<H . bfReserved2<<H . bfOffBits ; return Ar ; } } ; # pragma)",
    "insertText": "pack(pop) #pragma pack(push,1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint32 biSize ; uint32 biWidth ; int32 biHeight ; uint16 biPlanes ; uint16 biBitCount ; uint32 biCompression ; uint32 biSizeImage ; uint32 biXPelsPerMeter ; uint32 biYPelsPerMeter ; uint32 biClrUsed ; uint32 biClrImportant ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FBitmapInfoHeader& H)"
  },
  {
    "label": "GetHeaderVersion()",
    "kind": "Method",
    "detail": "Function (Ar<<H . biSize<<H . biWidth<<H . biHeight ; Ar<<H . biPlanes<<H . biBitCount ; Ar<<H . biCompression<<H . biSizeImage ; Ar<<H . biXPelsPerMeter<<H . biYPelsPerMeter ; Ar<<H . biClrUsed<<H . biClrImportant ; return Ar ; } public : EBitmapHeaderVersion)",
    "insertText": "GetHeaderVersion()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint32 biSize ; uint32 biWidth ; int32 biHeight ; uint16 biPlanes ; uint16 biBitCount ; uint32 biCompression ; uint32 biSizeImage ; uint32 biXPelsPerMeter ; uint32 biYPelsPerMeter ; uint32 biClrUsed ; uint32 biClrImportant ; uint32 biRedMask ; uint32 biGreenMask ; uint32 biBlueMask ; uint32 biAlphaMask ; uint32 biCSType ; int32 biEndPointRedX ; int32 biEndPointRedY ; int32 bibiEndPointRedZ ; int32 bibiEndPointGreenX ; int32 biEndPointGreenY ; int32 biEndPointGreenZ ; int32 biEndPointBlueX ; int32 biEndPointBlueY ; int32 biEndPointBlueZ ; uint32 biGammaRed ; uint32 biGammaGreen ; uint32 biGammaBlue ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FBitmapInfoHeaderV4& H)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (Ar<<H . biSize<<H . biWidth<<H . biHeight ; Ar<<H . biPlanes<<H . biBitCount ; Ar<<H . biCompression<<H . biSizeImage ; Ar<<H . biXPelsPerMeter<<H . biYPelsPerMeter ; Ar<<H . biClrUsed<<H . biClrImportant ; Ar<<H . biRedMask<<H . biGreenMask<<H . biBlueMask<<H . biAlphaMask ; Ar<<H . biCSType<<H . biEndPointRedX<<H . biEndPointRedY<<H . bibiEndPointRedZ ; Ar<<H . bibiEndPointGreenX<<H . biEndPointGreenY<<H . biEndPointGreenZ ; Ar<<H . biEndPointBlueX<<H . biEndPointBlueY<<H . biEndPointBlueZ ; Ar<<H . biGammaRed<<H . biGammaGreen<<H . biGammaBlue ; return Ar ; } } ; # pragma)",
    "insertText": "pack(pop) #pragma pack(push, 1)"
  }
]