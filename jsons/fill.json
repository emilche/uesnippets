[
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_RandomAccessIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RandomAccessIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_FILL_H # define _LIBCPP___ALGORITHM_FILL_H # include<__algorithm / fill_n . h> # include<__config> # include<__iterator / iterator_traits . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _ForwardIterator, class _Tp> inline _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void __fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value, forward_iterator_tag)"
  },
  {
    "label": "__fill()",
    "kind": "Method",
    "detail": "Function (} template<class _RandomAccessIterator,class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "__fill(_RandomAccessIterator __first, _RandomAccessIterator __last, const _Tp& __value, random_access_iterator_tag)"
  },
  {
    "label": "fill_n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill_n(__first, __last - __first, __value)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Tp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 void)",
    "insertText": "fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)"
  },
  {
    "label": "__fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__fill(__first, __last, __value, typename iterator_traits<_ForwardIterator>::iterator_category())"
  }
]