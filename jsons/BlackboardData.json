[
  {
    "label": "FBlackboardEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlackboardEntry"
  },
  {
    "label": "UBlackboardData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardData"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "EKeyLookupMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EKeyLookupMode"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # include \" BehaviorTree / Blackboard / BlackboardKeyType . h \" # include \" Engine / DataAsset . h \" # include \" BlackboardData . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=Blackboard)"
  },
  {
    "label": "FBlackboardEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBlackboardEntry() : KeyType(nullptr), bInstanceSynced(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBlackboardEntry& Other)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(BlueprintType, AutoExpandCategories=(Blackboard), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() DECLARE_MULTICAST_DELEGATE_OneParam(FKeyUpdate, UBlackboardData*)"
  },
  {
    "label": "HasSynchronizedKeys()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasSynchronizedKeys()"
  },
  {
    "label": "GetKeyID()",
    "kind": "Method",
    "detail": "Function (FBlackboard::FKey)",
    "insertText": "GetKeyID(const FName& KeyName)"
  },
  {
    "label": "GetKeyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetKeyName(FBlackboard::FKey KeyID)"
  },
  {
    "label": "GetKeyType()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UBlackboardKeyType>)",
    "insertText": "GetKeyType(FBlackboard::FKey KeyID)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} const FBlackboardEntry*)",
    "insertText": "GetKey(FBlackboard::FKey KeyID)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (const TArray<FBlackboardEntry>&)",
    "insertText": "GetKeys()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PropagateKeyChangesToDerivedBlackboardAssets()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PropagateKeyChangesToDerivedBlackboardAssets()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "UpdatePersistentKey()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "UpdatePersistentKey(const FName& KeyName)"
  },
  {
    "label": "InternalGetKeyID()",
    "kind": "Method",
    "detail": "Function (T* CreatedKeyType = NULL ; const FBlackboard::FKey KeyID =)",
    "insertText": "InternalGetKeyID(KeyName, DontCheckParentKeys)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FBlackboardEntry Entry ; Entry . EntryName = KeyName ; CreatedKeyType = NewObject<)",
    "insertText": "T(this)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Entry . KeyType = CreatedKeyType ; Keys .)",
    "insertText": "Add(Entry)"
  },
  {
    "label": "MarkPackageDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPackageDirty()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(KeyID != FBlackboard::InvalidKey && Parent != NULL)"
  },
  {
    "label": "KeyIndex()",
    "kind": "Method",
    "detail": "Function (const FBlackboard::FKey)",
    "insertText": "KeyIndex(int32)KeyID - (int32)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Keys .)",
    "insertText": "RemoveAt(KeyIndex)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} return CreatedKeyType ; } # if WITH_EDITOR)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FBlackboardDataChanged, UBlackboardData*)"
  },
  {
    "label": "UpdateParentKeys()",
    "kind": "Method",
    "detail": "Function (FBlackboardDataChanged OnBlackboardDataChanged ; # endif FKeyUpdate OnUpdateKeys ; void)",
    "insertText": "UpdateParentKeys()"
  },
  {
    "label": "UpdateKeyIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKeyIDs()"
  },
  {
    "label": "UpdateIfHasSynchronizedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIfHasSynchronizedKeys()"
  },
  {
    "label": "UpdateDeprecatedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDeprecatedKeys()"
  },
  {
    "label": "IsChildOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsChildOf(const UBlackboardData& OtherAsset)"
  },
  {
    "label": "IsRelatedTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelatedTo(const UBlackboardData& OtherAsset)"
  },
  {
    "label": "InternalGetKeyID()",
    "kind": "Method",
    "detail": "Function (} protected : enum EKeyLookupMode { CheckParentKeys,DontCheckParentKeys,} ; FBlackboard::FKey FirstKeyID ; FBlackboard::FKey)",
    "insertText": "InternalGetKeyID(const FName& KeyName, EKeyLookupMode LookupMode)"
  }
]