[
  {
    "label": "FGrowableAllocationBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrowableAllocationBase"
  },
  {
    "label": "FGrowableMallocBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrowableMallocBase"
  },
  {
    "label": "FGrowableMallocChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrowableMallocChunk"
  },
  {
    "label": "FFreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeEntry"
  },
  {
    "label": "TGenericGrowableAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGenericGrowableAllocator"
  },
  {
    "label": "AllocFreeCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocFreeCounts"
  },
  {
    "label": "AllocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocationInfo"
  },
  {
    "label": "ALLOCATION_HISTOGRAM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" Misc / ScopeLock . h \" # include \" ProfilingDebugging / MemoryTrace . h \" # include \" Stats / Stats . h \" # define)",
    "insertText": "ALLOCATION_HISTOGRAM(!UE_BUILD_SHIPPING && !UE_BUILD_TEST) && 1 #define ALLOCATION_HISTOGRAM_DETAILED (!UE_BUILD_SHIPPING && !UE_BUILD_TEST)"
  },
  {
    "label": "FGrowableMallocBase()",
    "kind": "Method",
    "detail": "Function (uint64 Size ; uint32 Offset ; uint32 Padding ; # if ! UE_BUILD_SHIPPING uint32 OwnerType ; # endif } ; class FGrowableMallocBase { public :)",
    "insertText": "FGrowableMallocBase() : TotalAllocated(0) , TotalWaste(0) , CurrentAllocs(0) , TotalAllocs(0)"
  },
  {
    "label": "FGrowableMallocBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGrowableMallocBase()"
  },
  {
    "label": "GetWasteApproximation()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetWasteApproximation()"
  },
  {
    "label": "CreateInternalMemory()",
    "kind": "Method",
    "detail": "Function (} protected : uint64 TotalAllocated ; uint64 TotalWaste ; uint64 CurrentAllocs ; uint64 TotalAllocs ; } ; class FGrowableMallocChunk : public FGrowableMallocBase { public : uint64)",
    "insertText": "CreateInternalMemory(uint64 Size)"
  },
  {
    "label": "DestroyInternalMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyInternalMemory()"
  },
  {
    "label": "CreateAllocationStruct()",
    "kind": "Method",
    "detail": "Function (FGrowableAllocationBase*)",
    "insertText": "CreateAllocationStruct()"
  },
  {
    "label": "DestroyAllocationStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllocationStruct(FGrowableAllocationBase* Allocation)"
  },
  {
    "label": "InitializeAllocationStruct()",
    "kind": "Method",
    "detail": "Function (delete Allocation ; } void)",
    "insertText": "InitializeAllocationStruct(FGrowableAllocationBase* Allocation)"
  },
  {
    "label": "DoesChunkContainAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChunkContainAllocation(const FGrowableAllocationBase* Allocation)"
  },
  {
    "label": "DoesChunkContainAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChunkContainAddress(const void* Address)"
  },
  {
    "label": "FGrowableMallocChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGrowableMallocChunk(uint64 InSize, uint32 Type, FCriticalSection* InCriticalSection) : MemoryType(Type) , HeapSize(InSize) , UsedMemorySize(0) , MaxFreeEntrySize(MaxFreeEntrySizeDirty) , CriticalSection(InCriticalSection)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize()"
  },
  {
    "label": "CreateInternalMemory()",
    "kind": "Method",
    "detail": "Function (HeapSize =)",
    "insertText": "CreateInternalMemory(HeapSize)"
  },
  {
    "label": "FFreeEntry()",
    "kind": "Method",
    "detail": "Function (FreeList = new)",
    "insertText": "FFreeEntry(NULL, 0, HeapSize)"
  },
  {
    "label": "FGrowableMallocChunk()",
    "kind": "Method",
    "detail": "Function (MaxFreeEntrySize = FreeList -> BlockSize ; } ~)",
    "insertText": "FGrowableMallocChunk()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "CanFitEntry()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanFitEntry(uint32 Size, uint32 Alignment)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MaxFreeEntrySize = 0 ;)",
    "insertText": "for(FFreeEntry* Entry = FreeList; Entry; Entry = Entry->Next)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxFreeEntrySize =)",
    "insertText": "Max(Entry->BlockSize, MaxFreeEntrySize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Size > MaxFreeEntrySize)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bResult = true ; break ; } } return bResult ; } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(CriticalSection)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 AlignedSize = Align<)",
    "insertText": "uint32(Size, Alignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FindEntry = Entry ; break ; } Prev = Entry ; })",
    "insertText": "if(FindEntry != NULL)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (MaxFreeEntrySize = MaxFreeEntrySizeDirty ; } UsedMemorySize + = AlignedSize ; bool bDelete ; uint32 Padding ; uint32 Offset = FindEntry ->)",
    "insertText": "Split(AlignedSize, Alignment, bDelete, Padding, MinAllocationSize)"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (Allocation -> Size = AlignedSize ; Allocation -> Padding = Padding ; Allocation -> Offset = Offset ; # if ! UE_BUILD_SHIPPING Allocation -> OwnerType = OwnerType ; # endif)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelAlloc(ELLMTracker::Default, GetAddressForTracking(Offset), Size))"
  },
  {
    "label": "MemoryTrace_Alloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Alloc(uint64(GetAddressForTracking(Offset)), Size, Alignment, EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "InitializeAllocationStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAllocationStruct(Allocation)"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (uint64 Padding = Memory -> Padding ; uint64 Size = Memory -> Size ; uint64 AllocationSize = Padding + Size ; uint32 Offset = Memory -> Offset ;)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelFree(ELLMTracker::Default, GetAddressForTracking(Offset)))"
  },
  {
    "label": "MemoryTrace_Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_Free(uint64(GetAddressForTracking(Offset)), EMemoryTraceRootHeap::SystemMemory)"
  },
  {
    "label": "DestroyAllocationStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAllocationStruct(Memory)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (UsedMemorySize - = Size ; CurrentAllocs - - ; FFreeEntry* Prev = NULL ; FFreeEntry* Entry = FreeList ;)",
    "insertText": "while(Entry && Offset > Entry->Location)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Prev = Entry ; Entry = Entry -> Next ; })",
    "insertText": "if(Entry && (Offset + Size) == Entry->Location)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (Entry -> Location - =)",
    "insertText": "uint32(AllocationSize)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Prev -> BlockSize + = Entry -> BlockSize ; Prev -> Next = Entry -> Next ; MaxFreeEntrySize =)",
    "insertText": "Max(MaxFreeEntrySize, Prev->BlockSize)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (delete Entry ; } else { MaxFreeEntrySize =)",
    "insertText": "Max(MaxFreeEntrySize, Entry->BlockSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return true ; })",
    "insertText": "if(Prev && (Prev->Location + Prev->BlockSize + Padding) == Offset)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FFreeEntry*& PrevRef = Prev ? Prev -> Next : FreeList ; PrevRef = NewFree ; MaxFreeEntrySize =)",
    "insertText": "Max(MaxFreeEntrySize, NewFree->BlockSize)"
  },
  {
    "label": "ShowFullAllocationList()",
    "kind": "Method",
    "detail": "Function (Used = UsedMemorySize ; Free = HeapSize - UsedMemorySize ; } void)",
    "insertText": "ShowFullAllocationList()"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"Full Free List:\\n\"))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TMap<uint64,uint32> FreeBlockSizeHistogram ; uint32 Count = 0 ; uint64 Total = 0 ; FFreeEntry* Entry = FreeList ;)",
    "insertText": "while(Entry)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\" Location: %d Size: %d\\n\"), Entry->Location, Entry->BlockSize)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (FreeBlockSizeHistogram .)",
    "insertText": "FindChecked(Entry->BlockSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} else { FreeBlockSizeHistogram .)",
    "insertText": "Add(Entry->BlockSize)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (} Count + + ; Total + = Entry -> BlockSize ; Entry = Entry -> Next ; })",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"Num Blocks: %d Total Size: %d\\n\"), Count, Total)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\" %d, %d\\n\"), It.Key(), It.Value())"
  },
  {
    "label": "GetAddressForTracking()",
    "kind": "Method",
    "detail": "Function (} } void*)",
    "insertText": "GetAddressForTracking(uint32 Offset)"
  },
  {
    "label": "FFreeEntry()",
    "kind": "Method",
    "detail": "Function (private : class FFreeEntry { public :)",
    "insertText": "FFreeEntry(FFreeEntry *NextEntry, uint32 InLocation, uint64 InSize) : Location(InLocation) , BlockSize(uint32(InSize)) , Next(NextEntry)"
  },
  {
    "label": "CanFit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanFit(uint64 AlignedSize, uint32 Alignment)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (uint32 AlignedLocation =)",
    "insertText": "Align(Location, Alignment)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Split(uint64 UsedSize, uint32 Alignment, bool &bDelete, uint32& Padding, uint32 MinSize)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (Padding = FreeLoc - Location ; uint64 AllocationSize = UsedSize +)",
    "insertText": "uint64(Padding)"
  },
  {
    "label": "TGenericGrowableAllocator()",
    "kind": "Method",
    "detail": "Function (bDelete = false ; } else { bDelete = true ; } return FreeLoc ; } uint32 Location ; uint32 BlockSize ; FFreeEntry* Next ; } ; public : uint32 MemoryType ; uint64 HeapSize ; uint64 UsedMemorySize ; uint32 MaxFreeEntrySize ; FFreeEntry* FreeList ; FCriticalSection* CriticalSection ; const uint32 MaxFreeEntrySizeDirty = 0 xffffffff ; } ; template<ChunkAllocatorType,GrowableAllocationBaseType> class TGenericGrowableAllocator : public FGrowableMallocBase { public :)",
    "insertText": "TGenericGrowableAllocator(uint64 InitialSize, uint32 InType, uint32 InSubAllocationAlignment, FName InStatRegionName, const FName* InOwnerTypeToStatIdMap, void* InUserData) : SubAllocationAlignment(InSubAllocationAlignment) , MemoryType(InType) , StatRegionName(InStatRegionName) , OwnerTypeToStatIdMap(InOwnerTypeToStatIdMap) , UserData(InUserData)"
  },
  {
    "label": "CreateAllocChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAllocChunk(InitialSize)"
  },
  {
    "label": "TGenericGrowableAllocator()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "TGenericGrowableAllocator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ChunkAllocatorType* Chunk = AllocChunks [ Index ] ;)",
    "insertText": "if(Chunk)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING)",
    "insertText": "if(!Chunk->IsEmpty())"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"Trying to free a non-empty chunk.\"))"
  },
  {
    "label": "DumpMemoryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMemoryInfo()"
  },
  {
    "label": "RemoveAllocChunk()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "RemoveAllocChunk(Chunk)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} } } GrowableAllocationBaseType*)",
    "insertText": "Malloc(uint32 Size, uint32 Alignment, int32 OwnerType)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (Alignment = FPlatformMath::Max<)",
    "insertText": "uint32(Alignment, SubAllocationAlignment)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&CriticalSection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const uint32 WastedSize = AlignedSize - Size ; TotalAllocated + = Size ; TotalWaste + = WastedSize ; CurrentAllocs + + ; TotalAllocs + + ;)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < AllocChunks.Num(); ChunkIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ChunkAllocatorType* Chunk = AllocChunks [ ChunkIndex ] ;)",
    "insertText": "if(Chunk && Chunk->CanFitEntry(AlignedSize, Alignment))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AvailableChunk = Chunk ; break ; } })",
    "insertText": "if(AvailableChunk == nullptr)"
  },
  {
    "label": "CreateAllocChunk()",
    "kind": "Method",
    "detail": "Function (AvailableChunk =)",
    "insertText": "CreateAllocChunk(AlignedSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} GrowableAllocationBaseType* Result = nullptr ;)",
    "insertText": "if(AvailableChunk)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(GrowableAllocationBaseType*)AvailableChunk->Malloc(AlignedSize, Alignment, SubAllocationAlignment, OwnerType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AvailableChunk == nullptr || Result == nullptr)"
  },
  {
    "label": "OutOfMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutOfMemory(AlignedSize)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (PeakAllocationsHistogram .)",
    "insertText": "FindOrAdd(AlignedSize)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (AllocationInfo& TypeAllocInfo = PerTypeAllocationInfo .)",
    "insertText": "FindOrAdd(Result->OwnerType)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TypeAllocInfo . Counts . Allocations + + ; TypeAllocInfo . TotalAllocated + = Result -> Size ; # if ALLOCATION_HISTOGRAM_DETAILED TypeAllocInfo . AllocationHistogram .)",
    "insertText": "FindOrAdd(Result->Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # endif # if STATS)",
    "insertText": "if(OwnerTypeToStatIdMap)"
  },
  {
    "label": "INC_MEMORY_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY_FName(OwnerTypeToStatIdMap[Result->OwnerType], Result->Size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} # endif return Result ; } bool)",
    "insertText": "Free(GrowableAllocationBaseType* Memory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ChunkAllocatorType* Chunk = AllocChunks [ ChunkIndex ] ;)",
    "insertText": "if(Chunk && Chunk->DoesChunkContainAllocation(Memory))"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (# if ALLOCATION_HISTOGRAM PeakAllocationsHistogram [ Memory -> Size ] - - ; AllocationInfo& TypeAllocInfo = PerTypeAllocationInfo .)",
    "insertText": "FindOrAdd(Memory->OwnerType)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY_FName(OwnerTypeToStatIdMap[Memory->OwnerType], Memory->Size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} # endif Chunk ->)",
    "insertText": "Free(Memory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentAllocs - - ;)",
    "insertText": "if(Chunk->IsEmpty())"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} return true ; } })",
    "insertText": "UE_LOG(LogCore, Fatal, TEXT(\"Tried to free invalid pointer\"))"
  },
  {
    "label": "GetAllocationInfo()",
    "kind": "Method",
    "detail": "Function (uint64 ChunkUsed = 0 ; uint64 ChunkFree = 0 ; Chunk ->)",
    "insertText": "GetAllocationInfo(ChunkUsed, ChunkFree)"
  },
  {
    "label": "DoesAllocatorContainAddress()",
    "kind": "Method",
    "detail": "Function (Used + = ChunkUsed ; Free + = ChunkFree ; Chunks + + ; } } } bool)",
    "insertText": "DoesAllocatorContainAddress(const void* Address)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ChunkAllocatorType* Chunk = AllocChunks [ ChunkIndex ] ;)",
    "insertText": "if(Chunk && Chunk->DoesChunkContainAddress(Address))"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\" Allocator has %d chunks\\n\"), AllocChunks.Num())"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\" Allocator average allocation size is %d (%lld over %lld allocs)\\n\"), (uint32)((float)TotalAllocated / (float)TotalAllocs), TotalAllocated, TotalAllocs)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\" Allocator average waste (on top of allocation) size is %d (%lld over %lld allocs)\\n\"), (uint32)((float)TotalWaste / (float)TotalAllocs), TotalWaste, TotalAllocs)"
  },
  {
    "label": "ShowFullAllocationInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowFullAllocationInfo()"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (# if ALLOCATION_HISTOGRAM)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"Total Allocations Histogram:\\n\"))"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"\\n-----------------\\nChunk %d\\n\"),ChunkIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if ALLOCATION_HISTOGRAM)",
    "insertText": "for(auto InfoIt = PerTypeAllocationInfo.CreateConstIterator(); InfoIt; ++InfoIt)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (const AllocationInfo& Info = InfoIt .)",
    "insertText": "Value()"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\" '%s': Total: %lld Allocs: %d Frees: %d\\n\"), *OwnerTypeToStatIdMap[InfoIt.Key()].ToString(), Info.TotalAllocated, Info.Counts.Allocations, Info.Counts.Frees)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\" 'OwnerType %d': %lld Allocs: %d Frees: %d\\n\"), InfoIt.Key(), Info.TotalAllocated, Info.Counts.Allocations, Info.Counts.Frees)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} # if ALLOCATION_HISTOGRAM_DETAILED)",
    "insertText": "for(auto HistoIt = Info.AllocationHistogram.CreateConstIterator(); HistoIt; ++HistoIt)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\" %d, %lld, %lld\\n\"), HistoIt.Key(), HistoIt.Value().Allocations, HistoIt.Value().Frees)"
  },
  {
    "label": "UpdateMemoryStatMaxSizes()",
    "kind": "Method",
    "detail": "Function (} # endif } # endif } private : void)",
    "insertText": "UpdateMemoryStatMaxSizes()"
  },
  {
    "label": "CreateAllocChunk()",
    "kind": "Method",
    "detail": "Function (} ChunkAllocatorType*)",
    "insertText": "CreateAllocChunk(uint64 Size)"
  },
  {
    "label": "ChunkAllocatorType()",
    "kind": "Method",
    "detail": "Function (ChunkAllocatorType* NewChunk = new)",
    "insertText": "ChunkAllocatorType(Size, MemoryType, &CriticalSection, UserData)"
  },
  {
    "label": "INC_MEMORY_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INC_MEMORY_STAT_BY_FName(StatRegionName, NewChunk->HeapSize)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 EmptyEntryIdx = AllocChunks .)",
    "insertText": "Find(NULL)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (EmptyEntryIdx = AllocChunks .)",
    "insertText": "Add(NewChunk)"
  },
  {
    "label": "RemoveAllocChunk()",
    "kind": "Method",
    "detail": "Function (# endif return NewChunk ; } void)",
    "insertText": "RemoveAllocChunk(ChunkAllocatorType* Chunk)"
  },
  {
    "label": "DEC_MEMORY_STAT_BY_FName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEC_MEMORY_STAT_BY_FName(StatRegionName, Chunk->HeapSize)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 FoundIdx = AllocChunks .)",
    "insertText": "Find(Chunk)"
  },
  {
    "label": "OutOfMemory()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "OutOfMemory(uint32 Size)"
  },
  {
    "label": "LowLevelOutputDebugStringf()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING)",
    "insertText": "LowLevelOutputDebugStringf(TEXT(\"FGrowableAllocator: OOM allocating %dbytes %fMB\"), Size, static_cast<float>(Size) / 1024.0f / 1024.0f)"
  }
]