[
  {
    "label": "FGrowableAllocationBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrowableAllocationBase"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FGrowableMallocBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrowableMallocBase"
  },
  {
    "label": "FGrowableMallocChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrowableMallocChunk"
  },
  {
    "label": "after",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "after"
  },
  {
    "label": "FFreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeEntry"
  },
  {
    "label": "TGenericGrowableAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGenericGrowableAllocator"
  },
  {
    "label": "AllocFreeCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocFreeCounts"
  },
  {
    "label": "AllocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocationInfo"
  },
  {
    "label": "FFreeEntry()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FFreeEntry(NULL, 0, HeapSize)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(CriticalSection)"
  },
  {
    "label": "InitializeAllocationStruct()",
    "kind": "Method",
    "detail": "Function (more)",
    "insertText": "InitializeAllocationStruct(Allocation)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(CriticalSection)"
  },
  {
    "label": "DestroyAllocationStruct()",
    "kind": "Method",
    "detail": "Function (object)",
    "insertText": "DestroyAllocationStruct(Memory)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (chunks)",
    "insertText": "for(int32 Index = 0; Index < AllocChunks.Num()"
  },
  {
    "label": "RemoveAllocChunk()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "RemoveAllocChunk(Chunk)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&CriticalSection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (space)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < AllocChunks.Num()"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&CriticalSection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (allocation)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < AllocChunks.Num()"
  },
  {
    "label": "RemoveAllocChunk()",
    "kind": "Method",
    "detail": "Function (memory)",
    "insertText": "RemoveAllocChunk(Chunk)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&CriticalSection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (chunks)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < AllocChunks.Num()"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&CriticalSection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (address)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < AllocChunks.Num()"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&CriticalSection)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (chunks)",
    "insertText": "for(int32 ChunkIndex = 0; ChunkIndex < AllocChunks.Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (while)",
    "insertText": "for(auto InfoIt = PerTypeAllocationInfo.CreateConstIterator()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ALLOCATION_HISTOGRAM_DETAILED)",
    "insertText": "for(auto HistoIt = Info.AllocationHistogram.CreateConstIterator()"
  },
  {
    "label": "ChunkAllocatorType()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChunkAllocatorType(Size, MemoryType, &CriticalSection, UserData)"
  },
  {
    "label": "UpdateMemoryStatMaxSizes()",
    "kind": "Method",
    "detail": "Function (STATS)",
    "insertText": "UpdateMemoryStatMaxSizes()"
  },
  {
    "label": "UpdateMemoryStatMaxSizes()",
    "kind": "Method",
    "detail": "Function (STATS)",
    "insertText": "UpdateMemoryStatMaxSizes()"
  }
]