[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Data"
  },
  {
    "label": "RtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (# ifndef API_RTP_PACKET_INFOS_H_ # define API_RTP_PACKET_INFOS_H_ # include<cstdint> # include<utility> # include<vector> # include \" api / make_ref_counted . h \" # include \" api / ref_counted_base . h \" # include \" api / rtp_packet_info . h \" # include \" api / scoped_refptr . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT RtpPacketInfos { public : using vector_type = std::vector<RtpPacketInfo> ; using value_type = vector_type::value_type ; using size_type = vector_type::size_type ; using difference_type = vector_type::difference_type ; using const_reference = vector_type::const_reference ; using const_pointer = vector_type::const_pointer ; using const_iterator = vector_type::const_iterator ; using const_reverse_iterator = vector_type::const_reverse_iterator ; using reference = const_reference ; using pointer = const_pointer ; using iterator = const_iterator ; using reverse_iterator = const_reverse_iterator ;)",
    "insertText": "RtpPacketInfos()"
  },
  {
    "label": "RtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtpPacketInfos(const vector_type& entries) : data_(Data::Create(entries))"
  },
  {
    "label": "RtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtpPacketInfos(vector_type&& entries) : data_(Data::Create(std::move(entries)))"
  },
  {
    "label": "RtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtpPacketInfos(const RtpPacketInfos& other)"
  },
  {
    "label": "RtpPacketInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpPacketInfos(RtpPacketInfos&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketInfos&)",
    "insertText": "operator(const RtpPacketInfos& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpPacketInfos&)",
    "insertText": "operator(RtpPacketInfos&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const_reference)",
    "insertText": "operator(size_type pos)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "at(size_type pos)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "back()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} private : class Data final : public rtc::RefCountedNonVirtual<Data> { public : rtc::scoped_refptr<Data>)",
    "insertText": "Create(const vector_type& entries)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<Data>)",
    "insertText": "Create(vector_type&& entries)"
  },
  {
    "label": "entries()",
    "kind": "Method",
    "detail": "Function (} const vector_type&)",
    "insertText": "entries()"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Data(vector_type&& entries) : entries_(std::move(entries))"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Data()"
  },
  {
    "label": "empty_entries()",
    "kind": "Method",
    "detail": "Function (private : const vector_type entries_ ; } ; const vector_type&)",
    "insertText": "empty_entries()"
  },
  {
    "label": "vector_type()",
    "kind": "Method",
    "detail": "Function (const vector_type& value =* new)",
    "insertText": "vector_type()"
  }
]