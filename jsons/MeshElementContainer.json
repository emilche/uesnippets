[
  {
    "label": "FMeshElementContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementContainer"
  },
  {
    "label": "FElementIDs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FElementIDs"
  },
  {
    "label": "FConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstIterator"
  },
  {
    "label": "TMeshElementContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshElementContainer"
  },
  {
    "label": "TElementIDs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TElementIDs"
  },
  {
    "label": "TConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstIterator"
  },
  {
    "label": "FMeshElementChannels",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementChannels"
  },
  {
    "label": "FMeshElementTypeWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementTypeWrapper"
  },
  {
    "label": "FMeshElementContainer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / SparseArray . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" MeshAttributeArray . h \" # include \" Misc / AssertionMacros . h \" # include \" Serialization / Archive . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" class FMeshElementContainer { public :)",
    "insertText": "FMeshElementContainer()"
  },
  {
    "label": "FMeshElementContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshElementContainer(const FMeshElementContainer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMeshElementContainer&)",
    "insertText": "operator(const FMeshElementContainer&)"
  },
  {
    "label": "FMeshElementContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshElementContainer(FMeshElementContainer&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (BitArray =)",
    "insertText": "MoveTemp(Other.BitArray)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Attributes =)",
    "insertText": "MoveTemp(Other.Attributes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NumHoles = Other . NumHoles ; Other . NumHoles = 0 ; } FMeshElementContainer&)",
    "insertText": "operator(FMeshElementContainer&& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NumHoles = Other . NumHoles ; Other . NumHoles = 0 ; } return* this ; } void)",
    "insertText": "Reset(const int32 Elements = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (BitArray .)",
    "insertText": "Empty(Elements)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Attributes .)",
    "insertText": "Initialize(0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (NumHoles = 0 ; } void)",
    "insertText": "Reserve(const int32 Elements)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (BitArray .)",
    "insertText": "Reserve(Elements)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Add()"
  },
  {
    "label": "FindAndSetFirstZeroBit()",
    "kind": "Method",
    "detail": "Function (const int32 Index = BitArray .)",
    "insertText": "FindAndSetFirstZeroBit()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NumHoles - - ; return Index ; } else { const int32 Index = BitArray .)",
    "insertText": "Add(true)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Attributes .)",
    "insertText": "Insert(Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 FirstNewIndex = BitArray .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 NumNewHoles = Index - FirstNewIndex ; BitArray .)",
    "insertText": "SetNumUninitialized(Index + 1)"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (BitArray .)",
    "insertText": "SetRange(FirstNewIndex, NumNewHoles, false)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkSlow(!BitArray[Index])"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (BitArray [ Index ] = true ; NumHoles - - ; } } void)",
    "insertText": "Remove(const int32 Index)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (BitArray [ Index ] = false ; NumHoles + + ; Attributes .)",
    "insertText": "Remove(Index)"
  },
  {
    "label": "GetArraySize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetArraySize()"
  },
  {
    "label": "GetFirstValidID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetFirstValidID()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid(const int32 Index)"
  },
  {
    "label": "GetAttributes()",
    "kind": "Method",
    "detail": "Function (} FAttributesSetBase&)",
    "insertText": "GetAttributes()"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remap(const TSparseArray<int32>& IndexRemap)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FMeshElementContainer& Container)"
  },
  {
    "label": "FElementIDs()",
    "kind": "Method",
    "detail": "Function (Ar<<Container . BitArray ; Ar<<Container . NumHoles ; Ar<<Container . Attributes ; return Ar ; } class FElementIDs { public :)",
    "insertText": "FElementIDs(const TBitArray<>& InArray) : Array(InArray)"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (} class FConstIterator { public :)",
    "insertText": "FConstIterator(TConstSetBitIterator<>&& It) : Iterator(MoveTemp(It))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConstIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FConstIterator& Lhs, const FConstIterator& Rhs)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : FConstIterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "GetElementIDs()",
    "kind": "Method",
    "detail": "Function (} private : const TBitArray<>& Array ; } ; FElementIDs)",
    "insertText": "GetElementIDs()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Insert(const ElementIDType Index)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(Index.GetValue())"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const ElementIDType Index)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Index.GetValue())"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid(const ElementIDType Index)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TMeshElementContainer& Container)"
  },
  {
    "label": "FMeshElementContainer()",
    "kind": "Method",
    "detail": "Function (Ar<<static_cast<)",
    "insertText": "FMeshElementContainer(Container)"
  },
  {
    "label": "TConstIterator()",
    "kind": "Method",
    "detail": "Function (} class TConstIterator { public :)",
    "insertText": "TConstIterator(TConstSetBitIterator<>&& It) : Iterator(MoveTemp(It))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TConstIterator& Lhs, const TConstIterator& Rhs)"
  },
  {
    "label": "FMeshElementChannels()",
    "kind": "Method",
    "detail": "Function (} } ; class FMeshElementChannels { public :)",
    "insertText": "FMeshElementChannels(const int32 NumberOfIndices = 1)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Channels .)",
    "insertText": "SetNum(NumberOfIndices)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const FMeshElementContainer&)",
    "insertText": "Get(const int32 Index = 0)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Channels .)",
    "insertText": "SetNum(NumIndices)"
  },
  {
    "label": "GetNumChannels()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumChannels()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FMeshElementTypeWrapper()",
    "kind": "Method",
    "detail": "Function (Ar<<ElementType . Channels ; return Ar ; } private : TArray<FMeshElementContainer,TInlineAllocator<1>> Channels ; } ; class FMeshElementTypeWrapper { public :)",
    "insertText": "FMeshElementTypeWrapper(const int32 NumberOfChannels = 1)"
  },
  {
    "label": "FMeshElementChannels()",
    "kind": "Method",
    "detail": "Function (Ptr = MakeUnique<)",
    "insertText": "FMeshElementChannels(NumberOfChannels)"
  },
  {
    "label": "FMeshElementTypeWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMeshElementTypeWrapper(const FMeshElementTypeWrapper& Other)"
  },
  {
    "label": "FMeshElementChannels()",
    "kind": "Method",
    "detail": "Function (Ptr = MakeUnique<)",
    "insertText": "FMeshElementChannels(*Other.Ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMeshElementTypeWrapper&)",
    "insertText": "operator(const FMeshElementTypeWrapper& Other)"
  },
  {
    "label": "Temp()",
    "kind": "Method",
    "detail": "Function (FMeshElementTypeWrapper)",
    "insertText": "Temp(Other)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(*this, Temp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMeshElementTypeWrapper&)",
    "insertText": "operator(FMeshElementTypeWrapper&&)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FMeshElementChannels*)",
    "insertText": "Get()"
  }
]