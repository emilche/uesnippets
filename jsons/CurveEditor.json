[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveModel"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IBufferedCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBufferedCurveModel"
  },
  {
    "label": "ICurveEditorExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICurveEditorExtension"
  },
  {
    "label": "ICurveEditorToolExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICurveEditorToolExtension"
  },
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "SCurveEditorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorPanel"
  },
  {
    "label": "SCurveEditorView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorView"
  },
  {
    "label": "UCurveEditorCopyBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEditorCopyBuffer"
  },
  {
    "label": "UCurveEditorCopyableCurveKeys",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEditorCopyableCurveKeys"
  },
  {
    "label": "UCurveEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEditorSettings"
  },
  {
    "label": "FCurveDrawParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveDrawParams"
  },
  {
    "label": "FCurveEditorInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorInitParams"
  },
  {
    "label": "FCurveEditorSnapMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorSnapMetrics"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" CurveDataAbstraction . h \" # include \" CurveEditorHelpers . h \" # include \" CurveEditorScreenSpace . h \" # include \" CurveEditorSelection . h \" # include \" CurveEditorSnapMetrics . h \" # include \" CurveEditorTypes . h \" # include \" CurveModel . h \" # include \" Delegates / Delegate . h \" # include \" EditorUndoClient . h \" # include \" HAL / PlatformCrt . h \" # include \" IBufferedCurveModel . h \" # include \" ICurveEditorBounds . h \" # include \" ICurveEditorDragOperation . h \" # include \" ICurveEditorModule . h \" # include \" ICurveEditorToolExtension . h \" # include \" ITimeSlider . h \" # include \" Internationalization / Text . h \" # include \" Math / Axis . h \" # include \" Math / Range . h \" # include \" Math / Vector2D . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Attribute . h \" # include \" Misc / FrameRate . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Tree / CurveEditorTree . h \" class FCurveEditor ; class FCurveEditor ; class FCurveModel ; class FUICommandList ; class IBufferedCurveModel ; class ICurveEditorExtension ; class ICurveEditorToolExtension ; class ITimeSliderController ; class SCurveEditorPanel ; class SCurveEditorView ; class UCurveEditorCopyBuffer ; class UCurveEditorCopyableCurveKeys ; class UCurveEditorSettings ; struct FCurveDrawParams ; struct FCurveEditorInitParams ; struct FCurveEditorSnapMetrics ; struct FGeometry ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSetBoolean, bool) DECLARE_MULTICAST_DELEGATE_OneParam(FOnActiveToolChanged, FCurveEditorToolID) DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnCurveArrayChanged, FCurveModel*, bool ,const FCurveEditor*)"
  },
  {
    "label": "FCurveEditor()",
    "kind": "Method",
    "detail": "Function (enum class ECurveEditorTangentTypes : int32 { InterpolationConstant = 0 x1,InterpolationLinear = 0 x2,InterpolationCubicAuto = 0 x4,InterpolationCubicUser = 0 x8,InterpolationCubicBreak = 0 x10,InterpolationCubicWeighted = 0 x20,InterpolationCubicSmartAuto = 0 x40,} ; class FCurveEditor : public FEditorUndoClient,public TSharedFromThis<FCurveEditor> { public : FCurveEditorSelection Selection ; public : TAttribute<FFrameRate> InputSnapRateAttribute ; TAttribute<TOptional<float>> FixedGridSpacingAttribute ; TAttribute<bool> InputSnapEnabledAttribute ; TAttribute<bool> OutputSnapEnabledAttribute ; FOnSetBoolean OnInputSnapEnabledChanged ; FOnSetBoolean OnOutputSnapEnabledChanged ; TAttribute<FKeyAttributes> DefaultKeyAttributes ; TAttribute<FText> GridLineLabelFormatXAttribute,GridLineLabelFormatYAttribute ; TAttribute<double> InputZoomToFitPadding ; TAttribute<double> OutputZoomToFitPadding ; FOnActiveToolChanged OnActiveToolChangedDelegate ; public :)",
    "insertText": "FCurveEditor()"
  },
  {
    "label": "FCurveEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCurveEditor(const FCurveEditor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCurveEditor&)",
    "insertText": "operator(const FCurveEditor&)"
  },
  {
    "label": "InitCurveEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCurveEditor(const FCurveEditorInitParams& InInitParams)"
  },
  {
    "label": "GetSupportedTangentTypes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSupportedTangentTypes()"
  },
  {
    "label": "SetPanel()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetPanel(TSharedPtr<SCurveEditorPanel> InPanel)"
  },
  {
    "label": "GetPanel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SCurveEditorPanel>)",
    "insertText": "GetPanel()"
  },
  {
    "label": "SetView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetView(TSharedPtr<SCurveEditorView> InPanel)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SCurveEditorView>)",
    "insertText": "GetView()"
  },
  {
    "label": "GetPanelInputSpace()",
    "kind": "Method",
    "detail": "Function (FCurveEditorScreenSpaceH)",
    "insertText": "GetPanelInputSpace()"
  },
  {
    "label": "ResetMinMaxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMinMaxes()"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ZoomToFit(EAxisList::Type Axes = EAxisList::All)"
  },
  {
    "label": "ZoomToFitAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitAll(EAxisList::Type Axes = EAxisList::All)"
  },
  {
    "label": "ZoomToFitCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitCurves(TArrayView<const FCurveModelID> CurveModelIDs, EAxisList::Type Axes = EAxisList::All)"
  },
  {
    "label": "ZoomToFitSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitSelection(EAxisList::Type Axes = EAxisList::All)"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBounds(TUniquePtr<ICurveEditorBounds>&& InBounds)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (const ICurveEditorBounds&)",
    "insertText": "GetBounds()"
  },
  {
    "label": "SetTimeSliderController()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimeSliderController(TSharedPtr<ITimeSliderController> InTimeSliderController)"
  },
  {
    "label": "GetTimeSliderController()",
    "kind": "Method",
    "detail": "Function (WeakTimeSliderController = InTimeSliderController ; } TSharedPtr<ITimeSliderController>)",
    "insertText": "GetTimeSliderController()"
  },
  {
    "label": "GetCommands()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FUICommandList>)",
    "insertText": "GetCommands()"
  },
  {
    "label": "MakeToolActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeToolActive(const FCurveEditorToolID InToolID)"
  },
  {
    "label": "GetCurrentTool()",
    "kind": "Method",
    "detail": "Function (ICurveEditorToolExtension*)",
    "insertText": "GetCurrentTool()"
  },
  {
    "label": "AddTool()",
    "kind": "Method",
    "detail": "Function (FCurveEditorToolID)",
    "insertText": "AddTool(TUniquePtr<ICurveEditorToolExtension>&& InTool)"
  },
  {
    "label": "AddAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAxis(const FName& InIdentifier, TSharedPtr<FCurveEditorAxis> InAxis)"
  },
  {
    "label": "FindAxis()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurveEditorAxis>)",
    "insertText": "FindAxis(const FName& InIdentifier)"
  },
  {
    "label": "RemoveAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAxis(const FName& InIdentifier)"
  },
  {
    "label": "ClearAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAxes()"
  },
  {
    "label": "TranslateSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedKeys(double SecondsToAdd)"
  },
  {
    "label": "TranslateSelectedKeysLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedKeysLeft()"
  },
  {
    "label": "TranslateSelectedKeysRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedKeysRight()"
  },
  {
    "label": "SnapToSelectedKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapToSelectedKey()"
  },
  {
    "label": "StepToNextKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToNextKey()"
  },
  {
    "label": "StepToPreviousKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToPreviousKey()"
  },
  {
    "label": "StepForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepForward()"
  },
  {
    "label": "StepBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepBackward()"
  },
  {
    "label": "JumpToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToStart()"
  },
  {
    "label": "JumpToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToEnd()"
  },
  {
    "label": "SetSelectionRangeStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeStart()"
  },
  {
    "label": "SetSelectionRangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeEnd()"
  },
  {
    "label": "ClearSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectionRange()"
  },
  {
    "label": "SelectAllKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllKeys()"
  },
  {
    "label": "SelectForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectForward()"
  },
  {
    "label": "SelectBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectBackward()"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNone()"
  },
  {
    "label": "InvertSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvertSelection()"
  },
  {
    "label": "ToggleExpandCollapseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpandCollapseNodes(bool bRecursive)"
  },
  {
    "label": "FindCurve()",
    "kind": "Method",
    "detail": "Function (FCurveModel*)",
    "insertText": "FindCurve(FCurveModelID CurveID)"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (FCurveModelID)",
    "insertText": "AddCurve(TUniquePtr<FCurveModel>&& InCurve)"
  },
  {
    "label": "AddCurveForTreeItem()",
    "kind": "Method",
    "detail": "Function (FCurveModelID)",
    "insertText": "AddCurveForTreeItem(TUniquePtr<FCurveModel>&& InCurve, FCurveEditorTreeItemID TreeItemID)"
  },
  {
    "label": "RemoveCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurve(FCurveModelID InCurveID)"
  },
  {
    "label": "RemoveAllCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllCurves()"
  },
  {
    "label": "IsCurvePinned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurvePinned(FCurveModelID InCurveID)"
  },
  {
    "label": "PinCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PinCurve(FCurveModelID InCurveID)"
  },
  {
    "label": "UnpinCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpinCurve(FCurveModelID InCurveID)"
  },
  {
    "label": "GetPinnedCurves()",
    "kind": "Method",
    "detail": "Function (const TSet<FCurveModelID>&)",
    "insertText": "GetPinnedCurves()"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (UCurveEditorSettings*)",
    "insertText": "GetSettings()"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (FCurveEditorSelection&)",
    "insertText": "GetSelection()"
  },
  {
    "label": "GetGridSpacing()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetGridSpacing()"
  },
  {
    "label": "GetAxisSnap()",
    "kind": "Method",
    "detail": "Function (} FCurveEditorAxisSnap)",
    "insertText": "GetAxisSnap()"
  },
  {
    "label": "GetGridLineLabelFormatXAttribute()",
    "kind": "Method",
    "detail": "Function (AxisSnapMetrics = InAxisSnap ; } TAttribute<FText>)",
    "insertText": "GetGridLineLabelFormatXAttribute()"
  },
  {
    "label": "AreBoundTransformUpdatesSuppressed()",
    "kind": "Method",
    "detail": "Function (bBoundTransformUpdatesSuppressed = bSuppress ; } bool)",
    "insertText": "AreBoundTransformUpdatesSuppressed()"
  },
  {
    "label": "GetEditedCurves()",
    "kind": "Method",
    "detail": "Function (TSet<FCurveModelID>)",
    "insertText": "GetEditedCurves()"
  },
  {
    "label": "GetDefaultKeyAttribute()",
    "kind": "Method",
    "detail": "Function (TAttribute<FKeyAttributes>)",
    "insertText": "GetDefaultKeyAttribute()"
  },
  {
    "label": "ApplyBufferedCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyBufferedCurves(const TSet<FCurveModelID>& InCurvesToApplyTo, const bool bSwapBufferCurves)"
  },
  {
    "label": "GetNumBufferedCurves()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumBufferedCurves()"
  },
  {
    "label": "GetBufferedCurves()",
    "kind": "Method",
    "detail": "Function (} const TArray<TUniquePtr<IBufferedCurveModel>>&)",
    "insertText": "GetBufferedCurves()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "GetEditorExtensions()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<ICurveEditorExtension>>)",
    "insertText": "GetEditorExtensions()"
  },
  {
    "label": "GetTreeItem()",
    "kind": "Method",
    "detail": "Function (const FCurveEditorTreeItem&)",
    "insertText": "GetTreeItem(FCurveEditorTreeItemID ItemID)"
  },
  {
    "label": "FindTreeItem()",
    "kind": "Method",
    "detail": "Function (FCurveEditorTreeItem*)",
    "insertText": "FindTreeItem(FCurveEditorTreeItemID ItemID)"
  },
  {
    "label": "GetRootTreeItems()",
    "kind": "Method",
    "detail": "Function (const TArray<FCurveEditorTreeItemID>&)",
    "insertText": "GetRootTreeItems()"
  },
  {
    "label": "GetTreeIDFromCurveID()",
    "kind": "Method",
    "detail": "Function (FCurveEditorTreeItemID)",
    "insertText": "GetTreeIDFromCurveID(FCurveModelID CurveID)"
  },
  {
    "label": "AddTreeItem()",
    "kind": "Method",
    "detail": "Function (FCurveEditorTreeItem*)",
    "insertText": "AddTreeItem(FCurveEditorTreeItemID ParentID)"
  },
  {
    "label": "RemoveTreeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTreeItem(FCurveEditorTreeItemID ItemID)"
  },
  {
    "label": "RemoveAllTreeItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllTreeItems()"
  },
  {
    "label": "SetTreeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeSelection(TArray<FCurveEditorTreeItemID>&& TreeItems)"
  },
  {
    "label": "RemoveFromTreeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromTreeSelection(TArrayView<const FCurveEditorTreeItemID> TreeItems)"
  },
  {
    "label": "GetTreeSelectionState()",
    "kind": "Method",
    "detail": "Function (ECurveEditorTreeSelectionState)",
    "insertText": "GetTreeSelectionState(FCurveEditorTreeItemID TreeItemID)"
  },
  {
    "label": "GetTreeSelection()",
    "kind": "Method",
    "detail": "Function (const TMap<FCurveEditorTreeItemID,ECurveEditorTreeSelectionState>&)",
    "insertText": "GetTreeSelection()"
  },
  {
    "label": "GetTree()",
    "kind": "Method",
    "detail": "Function (FCurveEditorTree*)",
    "insertText": "GetTree()"
  },
  {
    "label": "GetActiveCurvesSerialNumber()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetActiveCurvesSerialNumber()"
  },
  {
    "label": "IsInputSnappingEnabled()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsInputSnappingEnabled()"
  },
  {
    "label": "ToggleInputSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleInputSnapping()"
  },
  {
    "label": "IsOutputSnappingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOutputSnappingEnabled()"
  },
  {
    "label": "ToggleOutputSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOutputSnapping()"
  },
  {
    "label": "CutSelection()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CutSelection()"
  },
  {
    "label": "CopySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelection()"
  },
  {
    "label": "CanPaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPaste(const FString& TextToImport)"
  },
  {
    "label": "ImportCopyBufferFromText()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ImportCopyBufferFromText(const FString& TextToImport, TArray<UCurveEditorCopyBuffer*>& ImportedCopyBuffers)"
  },
  {
    "label": "GetTargetCurvesForPaste()",
    "kind": "Method",
    "detail": "Function (TSet<FCurveModelID>)",
    "insertText": "GetTargetCurvesForPaste()"
  },
  {
    "label": "CopyBufferCurveToCurveID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyBufferCurveToCurveID(const UCurveEditorCopyableCurveKeys* InSourceCurve, const FCurveModelID InTargetCurve, TOptional<double> InTimeOffset, const bool bInAddToSelection, const bool bInOverwriteRange)"
  },
  {
    "label": "GetChildCurveModelIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildCurveModelIDs(const FCurveEditorTreeItemID TreeItemID, TSet<FCurveModelID>& CurveModelIDs)"
  },
  {
    "label": "PasteKeys()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PasteKeys(TSet<FCurveModelID> CurveModelIDs, const bool bInOverwriteRange = false)"
  },
  {
    "label": "DeleteSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelection()"
  },
  {
    "label": "FlattenSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlattenSelection()"
  },
  {
    "label": "StraightenSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StraightenSelection()"
  },
  {
    "label": "SetRandomCurveColorsForSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRandomCurveColorsForSelected()"
  },
  {
    "label": "SetCurveColorsForSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveColorsForSelected()"
  },
  {
    "label": "CanFlattenOrStraightenSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFlattenOrStraightenSelection()"
  },
  {
    "label": "UpdateGeometry()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "UpdateGeometry(const FGeometry& CurrentGeometry)"
  },
  {
    "label": "GetGridLinesX()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GetGridLinesX(TArray<float>& MajorGridLines, TArray<float>& MinorGridLines, TArray<FText>* MajorGridLabels)"
  },
  {
    "label": "ConstructXGridLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructXGridLines(MajorGridLines, MinorGridLines, MajorGridLabels)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "SuspendBroadcast()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SuspendBroadcast()"
  },
  {
    "label": "ResumeBroadcast()",
    "kind": "Method",
    "detail": "Function (SuspendBroadcastCount + + ; } void)",
    "insertText": "ResumeBroadcast()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (SuspendBroadcastCount - - ;)",
    "insertText": "checkf(SuspendBroadcastCount >= 0, TEXT(\"Suspend/Resume broadcast mismatch Curve Editor!\"))"
  },
  {
    "label": "IsBroadcasting()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBroadcasting()"
  },
  {
    "label": "ConstructXGridLines()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConstructXGridLines(TArray<float>& MajorGridLines, TArray<float>& MinorGridLines, TArray<FText>* MajorGridLabels)"
  },
  {
    "label": "ZoomToFitInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitInternal(EAxisList::Type Axes, const TMap<FCurveModelID, FKeyHandleSet>& CurveKeySet)"
  },
  {
    "label": "ApplyBufferedCurveToTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBufferedCurveToTarget(const IBufferedCurveModel* BufferedCurve, FCurveModel* TargetCurve)"
  },
  {
    "label": "OnCustomColorsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomColorsChanged()"
  },
  {
    "label": "OnAxisSnappingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAxisSnappingChanged()"
  }
]