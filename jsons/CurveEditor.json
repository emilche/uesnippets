[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveModel"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IBufferedCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBufferedCurveModel"
  },
  {
    "label": "ICurveEditorExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICurveEditorExtension"
  },
  {
    "label": "ICurveEditorToolExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICurveEditorToolExtension"
  },
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "SCurveEditorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorPanel"
  },
  {
    "label": "SCurveEditorView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorView"
  },
  {
    "label": "UCurveEditorCopyBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEditorCopyBuffer"
  },
  {
    "label": "UCurveEditorCopyableCurveKeys",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEditorCopyableCurveKeys"
  },
  {
    "label": "UCurveEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveEditorSettings"
  },
  {
    "label": "FCurveDrawParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveDrawParams"
  },
  {
    "label": "FCurveEditorInitParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorInitParams"
  },
  {
    "label": "FCurveEditorSnapMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorSnapMetrics"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "InitCurveEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCurveEditor(const FCurveEditorInitParams& InInitParams)"
  },
  {
    "label": "GetSupportedTangentTypes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSupportedTangentTypes()"
  },
  {
    "label": "SetPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPanel(TSharedPtr<SCurveEditorPanel> InPanel)"
  },
  {
    "label": "SetView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetView(TSharedPtr<SCurveEditorView> InPanel)"
  },
  {
    "label": "ResetMinMaxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMinMaxes()"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit(EAxisList::Type Axes = EAxisList::All)"
  },
  {
    "label": "ZoomToFitAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitAll(EAxisList::Type Axes = EAxisList::All)"
  },
  {
    "label": "ZoomToFitCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitCurves(TArrayView<const FCurveModelID> CurveModelIDs, EAxisList::Type Axes = EAxisList::All)"
  },
  {
    "label": "ZoomToFitSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitSelection(EAxisList::Type Axes = EAxisList::All)"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBounds(TUniquePtr<ICurveEditorBounds>&& InBounds)"
  },
  {
    "label": "MakeToolActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeToolActive(const FCurveEditorToolID InToolID)"
  },
  {
    "label": "AddTool()",
    "kind": "Method",
    "detail": "Function (FCurveEditorToolID)",
    "insertText": "AddTool(TUniquePtr<ICurveEditorToolExtension>&& InTool)"
  },
  {
    "label": "AddAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAxis(const FName& InIdentifier, TSharedPtr<FCurveEditorAxis> InAxis)"
  },
  {
    "label": "RemoveAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAxis(const FName& InIdentifier)"
  },
  {
    "label": "ClearAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAxes()"
  },
  {
    "label": "TranslateSelectedKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedKeys(double SecondsToAdd)"
  },
  {
    "label": "TranslateSelectedKeysLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedKeysLeft()"
  },
  {
    "label": "TranslateSelectedKeysRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedKeysRight()"
  },
  {
    "label": "SnapToSelectedKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapToSelectedKey()"
  },
  {
    "label": "StepToNextKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToNextKey()"
  },
  {
    "label": "StepToPreviousKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepToPreviousKey()"
  },
  {
    "label": "StepForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepForward()"
  },
  {
    "label": "StepBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StepBackward()"
  },
  {
    "label": "JumpToStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToStart()"
  },
  {
    "label": "JumpToEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToEnd()"
  },
  {
    "label": "SetSelectionRangeStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeStart()"
  },
  {
    "label": "SetSelectionRangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeEnd()"
  },
  {
    "label": "ClearSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectionRange()"
  },
  {
    "label": "SelectAllKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllKeys()"
  },
  {
    "label": "SelectForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectForward()"
  },
  {
    "label": "SelectBackward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectBackward()"
  },
  {
    "label": "SelectNone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNone()"
  },
  {
    "label": "InvertSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvertSelection()"
  },
  {
    "label": "ToggleExpandCollapseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleExpandCollapseNodes(bool bRecursive)"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (FCurveModelID)",
    "insertText": "AddCurve(TUniquePtr<FCurveModel>&& InCurve)"
  },
  {
    "label": "AddCurveForTreeItem()",
    "kind": "Method",
    "detail": "Function (FCurveModelID)",
    "insertText": "AddCurveForTreeItem(TUniquePtr<FCurveModel>&& InCurve, FCurveEditorTreeItemID TreeItemID)"
  },
  {
    "label": "RemoveCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurve(FCurveModelID InCurveID)"
  },
  {
    "label": "RemoveAllCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllCurves()"
  },
  {
    "label": "PinCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PinCurve(FCurveModelID InCurveID)"
  },
  {
    "label": "UnpinCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpinCurve(FCurveModelID InCurveID)"
  },
  {
    "label": "AddBufferedCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBufferedCurves(const TSet<FCurveModelID>& InCurves)"
  },
  {
    "label": "ApplyBufferedCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyBufferedCurves(const TSet<FCurveModelID>& InCurvesToApplyTo, const bool bSwapBufferCurves)"
  },
  {
    "label": "RemoveTreeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTreeItem(FCurveEditorTreeItemID ItemID)"
  },
  {
    "label": "RemoveAllTreeItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllTreeItems()"
  },
  {
    "label": "SetTreeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTreeSelection(TArray<FCurveEditorTreeItemID>&& TreeItems)"
  },
  {
    "label": "RemoveFromTreeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromTreeSelection(TArrayView<const FCurveEditorTreeItemID> TreeItems)"
  },
  {
    "label": "ToggleInputSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleInputSnapping()"
  },
  {
    "label": "ToggleOutputSnapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleOutputSnapping()"
  },
  {
    "label": "CutSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelection()"
  },
  {
    "label": "CopyBufferCurveToCurveID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyBufferCurveToCurveID(const UCurveEditorCopyableCurveKeys* InSourceCurve, const FCurveModelID InTargetCurve, TOptional<double> InTimeOffset, const bool bInAddToSelection, const bool bInOverwriteRange)"
  },
  {
    "label": "PasteKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteKeys(TSet<FCurveModelID> CurveModelIDs, const bool bInOverwriteRange = false)"
  },
  {
    "label": "DeleteSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelection()"
  },
  {
    "label": "FlattenSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlattenSelection()"
  },
  {
    "label": "StraightenSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StraightenSelection()"
  },
  {
    "label": "SetRandomCurveColorsForSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRandomCurveColorsForSelected()"
  },
  {
    "label": "SetCurveColorsForSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveColorsForSelected()"
  },
  {
    "label": "UpdateGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGeometry(const FGeometry& CurrentGeometry)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "BroadcastCurveChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastCurveChanged(FCurveModel* InCurve)"
  },
  {
    "label": "ZoomToFitInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFitInternal(EAxisList::Type Axes, const TMap<FCurveModelID, FKeyHandleSet>& CurveKeySet)"
  },
  {
    "label": "ApplyBufferedCurveToTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBufferedCurveToTarget(const IBufferedCurveModel* BufferedCurve, FCurveModel* TargetCurve)"
  },
  {
    "label": "OnCustomColorsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomColorsChanged()"
  },
  {
    "label": "OnAxisSnappingChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAxisSnappingChanged()"
  }
]