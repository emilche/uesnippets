[
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "FSparseItemInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSparseItemInfo"
  },
  {
    "label": "TIsValidListItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsValidListItem"
  },
  {
    "label": "TListTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TListTypeTraits"
  },
  {
    "label": "SerializerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SerializerType"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / UObjectBase . h \" # include \" UObject / GCObject . h \" # include \" UObject / FieldPath . h \" class ITableRow ; struct FSparseItemInfo ; template<T,Enable = void> struct TIsValidListItem { enum { Value = false } ; } ; template<T> struct TIsValidListItem<TSharedRef<T,ESPMode::NotThreadSafe>> { enum { Value = true } ; } ; template<T> struct TIsValidListItem<TSharedRef<T,ESPMode::ThreadSafe>> { enum { Value = true } ; } ; template<T> struct TIsValidListItem<TSharedPtr<T,ESPMode::NotThreadSafe>> { enum { Value = true } ; } ; template<T> struct TIsValidListItem<TSharedPtr<T,ESPMode::ThreadSafe>> { enum { Value = true } ; } ; template<T,ESPMode Mode> struct TIsValidListItem<TWeakPtr<T,Mode>> { enum { Value = true } ; } ; template<T> struct TIsValidListItem<T*,TEnableIf<TPointerIsConvertibleFromTo<T,UObjectBase>::Value>::Type> { enum { Value = true } ; } ; template<T> struct TIsValidListItem<const T*,TEnableIf<TPointerIsConvertibleFromTo<T,UObjectBase>::Value>::Type> { enum { Value = true } ; } ; template<T> struct TIsValidListItem<TObjectPtr<T>> { enum { Value = true } ; } ; template<T> struct TIsValidListItem<TWeakObjectPtr<T>> { enum { Value = true } ; } ; template<T> struct TIsValidListItem<TFieldPath<T>> { enum { Value = true } ; } ; template<> struct TIsValidListItem<FName> { enum { Value = true } ; } ; template<T,Enable = void> struct TListTypeTraits {)",
    "insertText": "static_assert(TIsValidListItem<T>::Value, \"Item type T must be a UObjectBase pointer, TFieldPath, TSharedRef, TSharedPtr or FName.\")"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct TListTypeTraits<TSharedPtr<T,ESPMode::NotThreadSafe>> { public : typedef TSharedPtr<T> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TSharedPtr<T,ESPMode::NotThreadSafe>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TSharedPtr<T,ESPMode::NotThreadSafe>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TSharedPtr<T,ESPMode::NotThreadSafe>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector&, TArray< TSharedPtr<T> >&, TSet< TSharedPtr<T> >&, TMap< const U*, TSharedPtr<T> >&)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(const TSharedPtr<T>& InPtr)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPtr(TSharedPtr<T>& InPtr)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InPtr .)",
    "insertText": "Reset()"
  },
  {
    "label": "MakeNullPtr()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<T>)",
    "insertText": "MakeNullPtr()"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<T>)",
    "insertText": "NullableItemTypeConvertToItemType(const TSharedPtr<T>& InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} class SerializerType { } ; } ; template<T> struct TListTypeTraits<TSharedPtr<T,ESPMode::ThreadSafe>> { public : typedef TSharedPtr<T,ESPMode::ThreadSafe> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TSharedPtr<T,ESPMode::ThreadSafe>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TSharedPtr<T,ESPMode::ThreadSafe>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TSharedPtr<T,ESPMode::ThreadSafe>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector&, TArray< TSharedPtr<T, ESPMode::ThreadSafe> >&, TSet< TSharedPtr<T, ESPMode::ThreadSafe> >&, TMap< const U*, TSharedPtr<T, ESPMode::ThreadSafe> >& WidgetToItemMap)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(const TSharedPtr<T, ESPMode::ThreadSafe>& InPtr)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPtr(TSharedPtr<T, ESPMode::ThreadSafe>& InPtr)"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<T,ESPMode::ThreadSafe>)",
    "insertText": "NullableItemTypeConvertToItemType(const TSharedPtr<T, ESPMode::ThreadSafe>& InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} class SerializerType { } ; } ; template<T> struct TListTypeTraits<TSharedRef<T,ESPMode::NotThreadSafe>> { public : typedef TSharedPtr<T> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TSharedRef<T,ESPMode::NotThreadSafe>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TSharedRef<T,ESPMode::NotThreadSafe>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TSharedRef<T,ESPMode::NotThreadSafe>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector&, TArray< TSharedRef<T> >&, TSet< TSharedRef<T> >&, TMap< const U*, TSharedRef<T> >&)"
  },
  {
    "label": "DebugDump()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "DebugDump(TSharedRef<T> InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} class SerializerType { } ; } ; template<T> struct TListTypeTraits<TSharedRef<T,ESPMode::ThreadSafe>> { public : typedef TSharedPtr<T,ESPMode::ThreadSafe> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TSharedRef<T,ESPMode::ThreadSafe>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TSharedRef<T,ESPMode::ThreadSafe>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TSharedRef<T,ESPMode::ThreadSafe>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector&, TArray< TSharedRef<T, ESPMode::ThreadSafe> >&, TSet< TSharedRef<T, ESPMode::ThreadSafe> >&, TMap< const U*, TSharedRef<T, ESPMode::ThreadSafe> >&)"
  },
  {
    "label": "DebugDump()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "DebugDump(TSharedRef<T, ESPMode::ThreadSafe> InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} class SerializerType { } ; } ; template<T> struct TListTypeTraits<TWeakPtr<T,ESPMode::NotThreadSafe>> { public : typedef TWeakPtr<T> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TWeakPtr<T,ESPMode::NotThreadSafe>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TWeakPtr<T,ESPMode::NotThreadSafe>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TWeakPtr<T,ESPMode::NotThreadSafe>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector&, TArray< TWeakPtr<T> >&, TSet< TWeakPtr<T> >&, TMap< const U*, TWeakPtr<T> >&)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(const TWeakPtr<T>& InPtr)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPtr(TWeakPtr<T>& InPtr)"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<T>)",
    "insertText": "NullableItemTypeConvertToItemType(const TWeakPtr<T>& InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} class SerializerType { } ; } ; template<T> struct TListTypeTraits<TWeakPtr<T,ESPMode::ThreadSafe>> { public : typedef TWeakPtr<T,ESPMode::ThreadSafe> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TWeakPtr<T,ESPMode::ThreadSafe>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TWeakPtr<T,ESPMode::ThreadSafe>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TWeakPtr<T,ESPMode::ThreadSafe>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector&, TArray< TWeakPtr<T, ESPMode::ThreadSafe> >&, TSet< TWeakPtr<T, ESPMode::ThreadSafe> >&, TMap< const U*, TWeakPtr<T, ESPMode::ThreadSafe> >& WidgetToItemMap)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(const TWeakPtr<T, ESPMode::ThreadSafe>& InPtr)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPtr(TWeakPtr<T, ESPMode::ThreadSafe>& InPtr)"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (} TWeakPtr<T,ESPMode::ThreadSafe>)",
    "insertText": "NullableItemTypeConvertToItemType(const TWeakPtr<T, ESPMode::ThreadSafe>& InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} class SerializerType { } ; } ; template<T> struct TListTypeTraits<TWeakObjectPtr<T>> { public : typedef TWeakObjectPtr<T> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TWeakObjectPtr<T>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TWeakObjectPtr<T>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TWeakObjectPtr<T>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector&, TArray< TWeakObjectPtr<T> >&, TSet< TWeakObjectPtr<T> >&, TMap< const U*, TWeakObjectPtr<T> >&)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(const TWeakObjectPtr<T>& InPtr)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPtr(TWeakObjectPtr<T>& InPtr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (T* ObjPtr = InPtr .)",
    "insertText": "Get()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} class SerializerType { } ; } ; template<T> struct TListTypeTraits<TObjectPtr<T>> { public : typedef TObjectPtr<T> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TObjectPtr<T>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TObjectPtr<T>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TObjectPtr<T>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector, TArray<TObjectPtr<T>>& ItemsWithGeneratedWidgets, TSet<TObjectPtr<T>>& SelectedItems, TMap< const U*, TObjectPtr<T> >& WidgetToItemMap)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObjects(ItemsWithGeneratedWidgets)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(It.Value)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} Collector .)",
    "insertText": "AddReferencedObjects(SelectedItems)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(const TObjectPtr<T>& InPtr)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(T* InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} typedef FGCObject SerializerType ; } ; template<T> struct TListTypeTraits<const T*,TEnableIf<TPointerIsConvertibleFromTo<T,UObjectBase>::Value>::Type> { public : typedef const T* NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<const T*,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<const T*,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<const T*> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector, TArray<TObjectPtr<const T>>& ItemsWithGeneratedWidgets, TSet<TObjectPtr<const T>>& SelectedItems, TMap< const U*, TObjectPtr<const T> >& WidgetToItemMap)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(const T* InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} typedef FGCObject SerializerType ; } ; template<T> struct TListTypeTraits<TFieldPath<T>> { public : typedef TFieldPath<T> NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<TFieldPath<T>,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<TFieldPath<T>,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<TFieldPath<T>> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector, TArray< TFieldPath<T> >& ItemsWithGeneratedWidgets, TSet< TFieldPath<T> >& SelectedItems, TMap< const U*, TFieldPath<T> >& WidgetToItemMap)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (Item ->)",
    "insertText": "AddReferencedObjects(Collector)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(auto& It : WidgetToItemMap)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(TFieldPath<T>& Item : SelectedItems)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsPtrValid(const TFieldPath<T>& InPtr)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPtr(TFieldPath<T>& InPtr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} class SerializerType { } ; } ; template<> struct TListTypeTraits<FName> { public : typedef FName NullableType ; using MapKeyFuncs = TDefaultMapHashableKeyFuncs<FName,TSharedRef<ITableRow>,false> ; using MapKeyFuncsSparse = TDefaultMapHashableKeyFuncs<FName,FSparseItemInfo,false> ; using SetKeyFuncs = DefaultKeyFuncs<FName> ; template<U> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector, TArray<FName>& ItemsWithGeneratedWidgets, TSet<FName>& SelectedItems, TMap<const U*, FName>& WidgetToItemMap)"
  },
  {
    "label": "IsPtrValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPtrValid(const FName& InValue)"
  },
  {
    "label": "ResetPtr()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetPtr(FName& InValue)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (InValue =)",
    "insertText": "FName()"
  },
  {
    "label": "NullableItemTypeConvertToItemType()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "NullableItemTypeConvertToItemType(const FName& InValue)"
  }
]