[
  {
    "label": "TSubclassOfField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOfField"
  },
  {
    "label": "TIsTSubclassOfField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsTSubclassOfField"
  },
  {
    "label": "TSubclassOfField()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Field . h \" # include<type_traits> template<T> class TSubclassOfField ; template<T> struct TIsTSubclassOfField { enum { Value = false } ; } ; template<T> struct TIsTSubclassOfField<TSubclassOfField<T>> { enum { Value = true } ; } ; template<T> struct TIsTSubclassOfField<const TSubclassOfField<T>> { enum { Value = true } ; } ; template<T> struct TIsTSubclassOfField<volatile TSubclassOfField<T>> { enum { Value = true } ; } ; template<T> struct TIsTSubclassOfField<const volatile TSubclassOfField<T>> { enum { Value = true } ; } ; template<T> class TSubclassOfField { private : template<U> class TSubclassOfField ; public :)",
    "insertText": "TSubclassOfField()"
  },
  {
    "label": "TSubclassOfField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSubclassOfField(TSubclassOfField&&)"
  },
  {
    "label": "TSubclassOfField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSubclassOfField(const TSubclassOfField&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSubclassOfField&)",
    "insertText": "operator(TSubclassOfField&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSubclassOfField&)",
    "insertText": "operator(const TSubclassOfField&)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<U)",
    "insertText": "UE_REQUIRES(!TIsTSubclassOfField<std::decay_t<U>>::Value && std::is_convertible_v<U, FFieldClass*> ) > FORCEINLINE TSubclassOfField(U&& From) : Class(From)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherT)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherT*, T*>) > FORCEINLINE TSubclassOfField(const TSubclassOfField<OtherT>& Other) : Class(Other.Class)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherT)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherT*, T*>) > FORCEINLINE TSubclassOfField& operator=(const TSubclassOfField<OtherT>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Class = Other . Class ; return* this ; } TSubclassOfField&)",
    "insertText": "operator(FFieldClass* From)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (Class = From ; return* this ; } template<U)",
    "insertText": "UE_REQUIRES(!TIsTSubclassOfField<std::decay_t<U>>::Value && std::is_convertible_v<U, FFieldClass*> ) > FORCEINLINE TSubclassOfField& operator=(U&& From)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Class = From ; return* this ; } FFieldClass*)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FField* Result = nullptr ;)",
    "insertText": "if(Class)"
  },
  {
    "label": "GetDefaultObject()",
    "kind": "Method",
    "detail": "Function (Result = Class ->)",
    "insertText": "GetDefaultObject()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(T*)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Ar<<Class ; } uint32)",
    "insertText": "GetTypeHash(const TSubclassOfField& SubclassOf)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : FFieldClass* Class = nullptr ; } ; template<T> FArchive&)",
    "insertText": "operator(FArchive& Ar, TSubclassOfField<T>& SubclassOf)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (SubclassOf .)",
    "insertText": "Serialize(Ar)"
  }
]