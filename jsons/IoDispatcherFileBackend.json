[
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "FFileIoStoreCompressionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileIoStoreCompressionContext"
  },
  {
    "label": "FFileIoStoreReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreReader"
  },
  {
    "label": "FPerfectHashMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerfectHashMap"
  },
  {
    "label": "FFileIoStoreRequestTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStoreRequestTracker"
  },
  {
    "label": "FFileIoStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStore"
  },
  {
    "label": "FFileIoStoreReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IoDispatcherFileBackendTypes . h \" # include \" IO / IoDispatcher . h \" # include \" IO / IoStore . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / SpscQueue . h \" # include \" Stats / Stats . h \" # include \" Tasks / Task . h \" # include \" HAL / Runnable . h \" # include \" Misc / AES . h \" # include \" GenericPlatform / GenericPlatformFile . h \" class IMappedFileHandle ; struct FFileIoStoreCompressionContext { FFileIoStoreCompressionContext* Next = nullptr ; uint64 UncompressedBufferSize = 0 ; uint8* UncompressedBuffer = nullptr ; } ; class FFileIoStoreReader { public :)",
    "insertText": "FFileIoStoreReader(IPlatformFileIoStore& InPlatformImpl, FFileIoStoreStats& InStats)"
  },
  {
    "label": "FFileIoStoreReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFileIoStoreReader()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "Initialize(const TCHAR* InTocFilePath, int32 Order)"
  },
  {
    "label": "GetContainerInstanceId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetContainerInstanceId()"
  },
  {
    "label": "DoesChunkExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChunkExist(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "GetSizeForChunk(const FIoChunkId& ChunkId)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (const FIoOffsetAndLength*)",
    "insertText": "Resolve(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetContainerFile()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreContainerFile*)",
    "insertText": "GetContainerFile()"
  },
  {
    "label": "GetContainerId()",
    "kind": "Method",
    "detail": "Function (const FIoContainerId&)",
    "insertText": "GetContainerId()"
  },
  {
    "label": "IsSigned()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSigned()"
  },
  {
    "label": "GetEncryptionKeyGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid&)",
    "insertText": "GetEncryptionKeyGuid()"
  },
  {
    "label": "GetEncryptionKey()",
    "kind": "Method",
    "detail": "Function (ContainerFile . EncryptionKey = Key ; } const FAES::FAESKey&)",
    "insertText": "GetEncryptionKey()"
  },
  {
    "label": "ReopenAllFileHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReopenAllFileHandles()"
  },
  {
    "label": "FindChunkInternal()",
    "kind": "Method",
    "detail": "Function (private : const FIoOffsetAndLength*)",
    "insertText": "FindChunkInternal(const FIoChunkId& ChunkId)"
  },
  {
    "label": "GetTocAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTocAllocatedSize()"
  },
  {
    "label": "FFileIoStoreRequestTracker()",
    "kind": "Method",
    "detail": "Function (IPlatformFileIoStore& PlatformImpl ; FFileIoStoreStats& Stats ; struct FPerfectHashMap { TArray<int32> TocChunkHashSeeds ; TArray<FIoChunkId> TocChunkIds ; TArray<FIoOffsetAndLength> TocOffsetAndLengths ; } ; FPerfectHashMap PerfectHashMap ; TMap<FIoChunkId,FIoOffsetAndLength> TocImperfectHashMapFallback ; FFileIoStoreContainerFile ContainerFile ; FIoContainerId ContainerId ; int32 Order ; bool bClosed = false ; bool bHasPerfectHashMap = false ; TAtomic<uint32> GlobalPartitionIndex ; TAtomic<uint32> GlobalContainerInstanceId ; } ; class FFileIoStoreRequestTracker { public :)",
    "insertText": "FFileIoStoreRequestTracker(FFileIoStoreRequestAllocator& RequestAllocator, FFileIoStoreRequestQueue& RequestQueue)"
  },
  {
    "label": "FFileIoStoreRequestTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFileIoStoreRequestTracker()"
  },
  {
    "label": "FindOrAddCompressedBlock()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreCompressedBlock*)",
    "insertText": "FindOrAddCompressedBlock(FFileIoStoreBlockKey Key, bool& bOutWasAdded)"
  },
  {
    "label": "RemoveCompressedBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompressedBlock(const FFileIoStoreCompressedBlock* CompressedBlock, bool bRemoveFromCancel = false)"
  },
  {
    "label": "FindOrAddRawBlock()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreReadRequest*)",
    "insertText": "FindOrAddRawBlock(FFileIoStoreBlockKey Key, bool& bOutWasAdded)"
  },
  {
    "label": "RemoveRawBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRawBlock(const FFileIoStoreReadRequest* RawBlock, bool bRemoveFromCancel = false)"
  },
  {
    "label": "AddReadRequestsToResolvedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReadRequestsToResolvedRequest(FFileIoStoreCompressedBlock* CompressedBlock, FFileIoStoreResolvedRequest& ResolvedRequest)"
  },
  {
    "label": "AddReadRequestsToResolvedRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReadRequestsToResolvedRequest(const FFileIoStoreReadRequestList& Requests, FFileIoStoreResolvedRequest& ResolvedRequest)"
  },
  {
    "label": "CancelIoRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CancelIoRequest(FFileIoStoreResolvedRequest& ResolvedRequest)"
  },
  {
    "label": "UpdatePriorityForIoRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriorityForIoRequest(FFileIoStoreResolvedRequest& ResolvedRequest)"
  },
  {
    "label": "ReleaseIoRequestReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseIoRequestReferences(FFileIoStoreResolvedRequest& ResolvedRequest)"
  },
  {
    "label": "GetLiveReadRequestsCount()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetLiveReadRequestsCount()"
  },
  {
    "label": "FFileIoStore()",
    "kind": "Method",
    "detail": "Function (private : FFileIoStoreRequestAllocator& RequestAllocator ; FFileIoStoreRequestQueue& RequestQueue ; TMap<FFileIoStoreBlockKey,FFileIoStoreCompressedBlock*> CompressedBlocksMap ; TMap<FFileIoStoreBlockKey,FFileIoStoreReadRequest*> RawBlocksMap ; } ; class FFileIoStore final : public FRunnable,public IIoDispatcherBackend { public :)",
    "insertText": "FFileIoStore(TUniquePtr<IPlatformFileIoStore>&& PlatformImpl)"
  },
  {
    "label": "FFileIoStore()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FFileIoStore()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(TSharedRef<const FIoDispatcherBackendContext> Context)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Mount()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoContainerHeader>)",
    "insertText": "Mount(const TCHAR* InTocPath, int32 Order, const FGuid& EncryptionKeyGuid, const FAES::FAESKey& EncryptionKey)"
  },
  {
    "label": "Unmount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Unmount(const TCHAR* InTocPath)"
  },
  {
    "label": "ResolveIoRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveIoRequests(FIoRequestList Requests, FIoRequestList& OutUnresolved)"
  },
  {
    "label": "CancelIoRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelIoRequest(FIoRequestImpl* Request)"
  },
  {
    "label": "UpdatePriorityForIoRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriorityForIoRequest(FIoRequestImpl* Request)"
  },
  {
    "label": "GetCompletedIoRequests()",
    "kind": "Method",
    "detail": "Function (FIoRequestImpl*)",
    "insertText": "GetCompletedIoRequests()"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoMappedRegion>)",
    "insertText": "OpenMapped(const FIoChunkId& ChunkId, const FIoReadOptions& Options)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetThreadId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetThreadId()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "Resolve(FIoRequestImpl* Request)"
  },
  {
    "label": "OnNewPendingRequestsAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewPendingRequestsAdded()"
  },
  {
    "label": "ReadBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadBlocks(FFileIoStoreResolvedRequest& ResolvedRequest)"
  },
  {
    "label": "FreeBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeBuffer(FFileIoStoreBuffer& Buffer)"
  },
  {
    "label": "AllocCompressionContext()",
    "kind": "Method",
    "detail": "Function (FFileIoStoreCompressionContext*)",
    "insertText": "AllocCompressionContext()"
  },
  {
    "label": "FreeCompressionContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeCompressionContext(FFileIoStoreCompressionContext* CompressionContext)"
  },
  {
    "label": "ScatterBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScatterBlock(FFileIoStoreCompressedBlock* CompressedBlock, bool bIsAsync)"
  },
  {
    "label": "CompleteDispatcherRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteDispatcherRequest(FFileIoStoreResolvedRequest* ResolvedRequest)"
  },
  {
    "label": "FinalizeCompressedBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeCompressedBlock(FFileIoStoreCompressedBlock* CompressedBlock)"
  },
  {
    "label": "StopThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopThread()"
  },
  {
    "label": "CreateIoDispatcherFileBackend()",
    "kind": "Method",
    "detail": "Function (uint64 ReadBufferSize = 0 ; TSharedPtr<const FIoDispatcherBackendContext> BackendContext ; FFileIoStoreStats Stats ; FFileIoStoreBlockCache BlockCache ; FFileIoStoreBufferAllocator BufferAllocator ; FFileIoStoreRequestAllocator RequestAllocator ; FFileIoStoreRequestQueue RequestQueue ; FFileIoStoreRequestTracker RequestTracker ; TUniquePtr<IPlatformFileIoStore> PlatformImpl ; FRunnableThread* Thread = nullptr ; bool bIsMultithreaded ; TAtomic<bool> bStopRequested { false } ; FRWLock IoStoreReadersLock ; TArray<TUniquePtr<FFileIoStoreReader>> IoStoreReaders ; TArray<TUniquePtr<FFileIoStoreCompressionContext>> CompressionContexts ; TSpscQueue<UE::Tasks::FTask> DecompressionTasks ; FFileIoStoreCompressionContext* FirstFreeCompressionContext = nullptr ; FFileIoStoreCompressedBlock* ReadyForDecompressionHead = nullptr ; FFileIoStoreCompressedBlock* ReadyForDecompressionTail = nullptr ; FCriticalSection DecompressedBlocksCritical ; FFileIoStoreCompressedBlock* FirstDecompressedBlock = nullptr ; FIoRequestImpl* CompletedRequestsHead = nullptr ; FIoRequestImpl* CompletedRequestsTail = nullptr ; FDelegateHandle OversubscriptionLimitReached ; } ; TSharedRef<FFileIoStore>)",
    "insertText": "CreateIoDispatcherFileBackend()"
  }
]