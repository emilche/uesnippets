[
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / IToolTip . h \" class SToolTip : public SCompoundWidget,public IToolTip { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSetInteractiveWindowLocation, FVector2D&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SToolTip ) : _Text() , _Content() , _Font(FCoreStyle::Get().GetFontStyle(\"ToolTip.Font\")) , _TextMargin(FMargin(8.0f)) , _BorderImage(FCoreStyle::Get().GetBrush(\"ToolTip.Background\")) , _IsInteractive(false) , _OnSetInteractiveWindowLocation()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, Text) SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_ATTRIBUTE(FMargin, TextMargin) SLATE_ATTRIBUTE(const FSlateBrush*, BorderImage) SLATE_ATTRIBUTE(bool, IsInteractive) SLATE_EVENT(FOnSetInteractiveWindowLocation, OnSetInteractiveWindowLocation) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (public : TSharedRef<class SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "GetContentWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GetContentWidget()"
  },
  {
    "label": "SetContentWidget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetContentWidget(const TSharedRef<SWidget>& InContentWidget)"
  },
  {
    "label": "ResetContentWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetContentWidget()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsInteractive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractive()"
  },
  {
    "label": "OnOpening()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpening()"
  },
  {
    "label": "OnClosed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnClosed()"
  },
  {
    "label": "OnSetInteractiveWindowLocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSetInteractiveWindowLocation(FVector2D& InOutDesiredLocation)"
  },
  {
    "label": "GetTextTooltip()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetTextTooltip()"
  },
  {
    "label": "GetToolTipWrapWidth()",
    "kind": "Method",
    "detail": "Function (} public : float)",
    "insertText": "GetToolTipWrapWidth()"
  }
]