[
  {
    "label": "FAllocationItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationItem"
  },
  {
    "label": "SizeMask()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / EnumClassFlags . h \" # include \" ProfilingDebugging / MemoryTrace . h \" # include \" TraceServices / Model / AllocationsProvider . h \" namespace TraceServices { struct FAllocationItem { uint32 AlignmentBits = 8 ; uint32 AlignmentShift = 5 6 ; uint64)",
    "insertText": "SizeMask(1ULL << AlignmentShift)"
  },
  {
    "label": "UnpackSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "UnpackSize(uint64 SizeAndAlignment)"
  },
  {
    "label": "UnpackAlignment()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "UnpackAlignment(uint64 SizeAndAlignment)"
  },
  {
    "label": "PackSizeAndAlignment()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "PackSizeAndAlignment(uint64 Size, uint8 Alignment)"
  },
  {
    "label": "IsContained()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsContained(uint64 InAddress)"
  },
  {
    "label": "GetEndAddress()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetEndAddress()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAlignment()"
  },
  {
    "label": "IsHeap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHeap()"
  },
  {
    "label": "IsSwap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSwap()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} uint64 Address ; uint64 SizeAndAlignment ; uint32 StartEventIndex ; uint32 EndEventIndex ; double StartTime ; double EndTime ; uint16 AllocThreadId ; uint16 FreeThreadId ; uint32 AllocCallstackId ; uint32 FreeCallstackId ; uint32 MetadataId ; TagIdType Tag ; uint8 RootHeap ; EMemoryTraceHeapAllocationFlags Flags ; } ;)",
    "insertText": "static_assert(sizeof(FAllocationItem) == 64, \"struct FAllocationItem needs packing\")"
  }
]