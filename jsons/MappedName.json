[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FMappedName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMappedName"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNameMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNameMap"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Math / NumericLimits . h \" # include \" Misc / AssertionMacros . h \" # include \" UObject / NameBatchSerialization . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FArchive ; class FMappedName { uint32 InvalidIndex = ~)",
    "insertText": "uint32(0)"
  },
  {
    "label": "IndexMask()",
    "kind": "Method",
    "detail": "Function (uint32 IndexBits = 3 0 u ; uint32)",
    "insertText": "IndexMask(1u << IndexBits)"
  },
  {
    "label": "FMappedName()",
    "kind": "Method",
    "detail": "Function (uint32 TypeMask = ~ IndexMask ; uint32 TypeShift = IndexBits ; public : enum class EType { Package,Container,Global } ;)",
    "insertText": "FMappedName()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FMappedName)",
    "insertText": "Create(const uint32 InIndex, const uint32 InNumber, EType InType)"
  },
  {
    "label": "FromMinimalName()",
    "kind": "Method",
    "detail": "Function (} FMappedName)",
    "insertText": "FromMinimalName(const FMinimalName& MinimalName)"
  },
  {
    "label": "IsResolvedToMinimalName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsResolvedToMinimalName(const FMinimalName& MinimalName)"
  },
  {
    "label": "FromMinimalName()",
    "kind": "Method",
    "detail": "Function (const FMappedName MappedName =)",
    "insertText": "FromMinimalName(MinimalName)"
  },
  {
    "label": "SafeMinimalNameToName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "SafeMinimalNameToName(const FMinimalName& MinimalName)"
  },
  {
    "label": "ToUnresolvedMinimalName()",
    "kind": "Method",
    "detail": "Function (} FMinimalName)",
    "insertText": "ToUnresolvedMinimalName()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsGlobal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGlobal()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FMappedName& MappedName)"
  },
  {
    "label": "FMappedName()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMappedName(const uint32 InIndex, const uint32 InNumber) : Index(InIndex) , Number(InNumber)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} uint32 Index = InvalidIndex ; uint32 Number = InvalidIndex ; } ; class FNameMap { public : int32)",
    "insertText": "Num()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Load(FArchive& Ar, FMappedName::EType NameMapType)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName(const FMappedName& MappedName)"
  },
  {
    "label": "TryGetName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetName(const FMappedName& MappedName, FName& OutName)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (OutName = NameEntries [ MappedName .)",
    "insertText": "GetIndex()].ToName(MappedName.GetNumber())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} using RangedForConstIteratorType = TArray<FDisplayNameEntryId>::RangedForConstIteratorType ; RangedForConstIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} RangedForConstIteratorType)",
    "insertText": "end()"
  }
]