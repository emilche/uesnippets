[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FSegmentCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Curves / Curve . h \" # include \" Geo / GeoEnum . h \" namespace UE::CADKernel { class FSegmentCurve : public FCurve { class FEntity ; protected : FPoint StartPoint ; FPoint EndPoint ;)",
    "insertText": "FSegmentCurve(const FPoint& InStartPoint, const FPoint& InEndPoint, int8 InDimension = 3) : FCurve(InDimension) , StartPoint(InStartPoint) , EndPoint(InEndPoint)"
  },
  {
    "label": "FSegmentCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSegmentCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (Ar<<StartPoint ; Ar<<EndPoint ; } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (Evaluate<FCurvePoint,)",
    "insertText": "FPoint(Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate2DPoint(double Coordinate, FCurvePoint2D& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FPoint2D()",
    "kind": "Method",
    "detail": "Function (Evaluate<FCurvePoint2D,)",
    "insertText": "FPoint2D(Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "GetStartPoint()",
    "kind": "Method",
    "detail": "Function (} const FPoint&)",
    "insertText": "GetStartPoint()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (EndPoint = DesiredPosition ; } else { StartPoint = DesiredPosition ; } } private : template<CurvePointType,PointType> void)",
    "insertText": "Evaluate(double Coordinate, CurvePointType& OutPoint, int32 DerivativeOrder)"
  },
  {
    "label": "Tangent()",
    "kind": "Method",
    "detail": "Function (OutPoint . DerivativeOrder = DerivativeOrder ; PointType)",
    "insertText": "Tangent(EndPoint - StartPoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutPoint . Point = Tangent* Coordinate + StartPoint ;)",
    "insertText": "if(DerivativeOrder > 0)"
  }
]