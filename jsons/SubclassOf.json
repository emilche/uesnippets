[
  {
    "label": "FStructuredArchiveSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchiveSlot"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "TIsTSubclassOf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsTSubclassOf"
  },
  {
    "label": "TCallTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCallTraits"
  },
  {
    "label": "TSubclassOf()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / Class . h \" # include<type_traits> class FStructuredArchiveSlot ; template<T> class TSubclassOf ; template<T> struct TIsTSubclassOf { enum { Value = false } ; } ; template<T> struct TIsTSubclassOf<TSubclassOf<T>> { enum { Value = true } ; } ; template<T> struct TIsTSubclassOf<const TSubclassOf<T>> { enum { Value = true } ; } ; template<T> struct TIsTSubclassOf<volatile TSubclassOf<T>> { enum { Value = true } ; } ; template<T> struct TIsTSubclassOf<const volatile TSubclassOf<T>> { enum { Value = true } ; } ; template<T> class TSubclassOf { private : template<U> class TSubclassOf ; public : using ElementType = T ;)",
    "insertText": "TSubclassOf()"
  },
  {
    "label": "TSubclassOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSubclassOf(TSubclassOf&&)"
  },
  {
    "label": "TSubclassOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSubclassOf(const TSubclassOf&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSubclassOf&)",
    "insertText": "operator(TSubclassOf&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSubclassOf&)",
    "insertText": "operator(const TSubclassOf&)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<U)",
    "insertText": "UE_REQUIRES(!TIsTSubclassOf<std::decay_t<U>>::Value && std::is_convertible_v<U, UClass*> ) > FORCEINLINE TSubclassOf(U&& From) : Class(From)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherT)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherT*, T*>) > FORCEINLINE TSubclassOf(const TSubclassOf<OtherT>& Other) : Class(Other.Class)"
  },
  {
    "label": "IWYU_MARKUP_IMPLICIT_CAST()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IWYU_MARKUP_IMPLICIT_CAST(OtherT, T)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<OtherT)",
    "insertText": "UE_REQUIRES(std::is_convertible_v<OtherT*, T*>) > FORCEINLINE TSubclassOf& operator=(const TSubclassOf<OtherT>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Class = Other . Class ; return* this ; } TSubclassOf&)",
    "insertText": "operator(UClass* From)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (Class = From ; return* this ; } template<U)",
    "insertText": "UE_REQUIRES(!TIsTSubclassOf<std::decay_t<U>>::Value && std::is_convertible_v<U, UClass*> ) > FORCEINLINE TSubclassOf& operator=(U&& From)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Class = From ; return* this ; } UClass*)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UObject* Result = nullptr ;)",
    "insertText": "if(Class)"
  },
  {
    "label": "GetDefaultObject()",
    "kind": "Method",
    "detail": "Function (Result = Class ->)",
    "insertText": "GetDefaultObject()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(T*)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<Class ; } void)",
    "insertText": "Serialize(FStructuredArchiveSlot& Slot)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (Slot<<Class ; } [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(const TSubclassOf& SubclassOf)"
  },
  {
    "label": "GetGCPtr()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<UClass>&)",
    "insertText": "GetGCPtr()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (SubclassOf .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (SubclassOf .)",
    "insertText": "Serialize(Slot)"
  }
]