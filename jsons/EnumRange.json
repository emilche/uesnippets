[
  {
    "label": "NEnumRangePrivate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NEnumRangePrivate"
  },
  {
    "label": "TEnumRangeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEnumRangeTraits"
  },
  {
    "label": "TEnumRange_Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEnumRange_Impl"
  },
  {
    "label": "type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "type"
  },
  {
    "label": "TEnumContiguousIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEnumContiguousIterator"
  },
  {
    "label": "TEnumValueArrayIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEnumValueArrayIterator"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRange"
  },
  {
    "label": "TEnumRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEnumRange"
  },
  {
    "label": "ENUM_RANGE_BY_COUNT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<type_traits> # define)",
    "insertText": "ENUM_RANGE_BY_COUNT(EnumType, Count) ENUM_RANGE_BY_FIRST_AND_LAST(EnumType, 0, (std::underlying_type_t<EnumType>)(Count) - 1) #define ENUM_RANGE_BY_FIRST_AND_LAST(EnumType, First, Last)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (\\ enum { RangeType = 0 } ; \\ std::underlying_type_t<EnumType>)",
    "insertText": "Begin(std::underlying_type_t<EnumType>)(First)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (\\ std::underlying_type_t<EnumType>)",
    "insertText": "End(std::underlying_type_t<EnumType>)(Last)"
  },
  {
    "label": "ENUM_RANGE_BY_VALUES()",
    "kind": "Method",
    "detail": "Function (\\ } ; # define)",
    "insertText": "ENUM_RANGE_BY_VALUES(EnumType, ...)"
  },
  {
    "label": "GetPointer()",
    "kind": "Method",
    "detail": "Function (\\ enum { RangeType = 1 } ; \\ template<Dummy> \\ const EnumType*)",
    "insertText": "GetPointer(bool bLast)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ EnumType Values [ ] = { __VA_ARGS__ } ; \\ return bLast ? Values +)",
    "insertText": "sizeof(Values) / sizeof(EnumType)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; namespace NEnumRangePrivate { template<EnumType> struct TEnumRangeTraits { enum { RangeType = - 1 } ; } ; template<EnumType,int32 RangeType> struct TEnumRange_Impl {)",
    "insertText": "static_assert(sizeof(EnumType) == 0, \"Unknown enum type - use one of the ENUM_RANGE macros to define iteration semantics for your enum type.\")"
  },
  {
    "label": "TEnumContiguousIterator()",
    "kind": "Method",
    "detail": "Function (} ; template<EnumType> struct TEnumContiguousIterator { using IntType = std::underlying_type_t<EnumType> ;)",
    "insertText": "TEnumContiguousIterator(IntType InValue) : Value(InValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TEnumContiguousIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : IntType Value ; bool)",
    "insertText": "operator(const TEnumContiguousIterator& Lhs, const TEnumContiguousIterator& Rhs)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TEnumContiguousIterator<EnumType>)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } ; template<EnumType> struct TEnumRange_Impl<EnumType,1> { TEnumValueArrayIterator<EnumType>)",
    "insertText": "begin()"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace UE::EnumFlags::Private { template<EnumType> struct TIterator { using IntType = std::underlying_type_t<EnumType> ;)",
    "insertText": "TIterator(EnumType InFlags) : Flags(IntType(InFlags))"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (const IntType PoppedBit =)",
    "insertText": "Flags(~Flags + 1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : IntType Flags ; bool)",
    "insertText": "operator(const TIterator& Lhs, const TIterator& Rhs)"
  },
  {
    "label": "MakeFlagsRange()",
    "kind": "Method",
    "detail": "Function (} private : EnumType Flags ; } ; } template<EnumType> struct TEnumRange : NEnumRangePrivate::TEnumRange_Impl<EnumType,NEnumRangePrivate::TEnumRangeTraits<EnumType>::RangeType> { } ; template<EnumType> UE::EnumFlags::Private::TRange<EnumType>)",
    "insertText": "MakeFlagsRange(EnumType Flags)"
  }
]