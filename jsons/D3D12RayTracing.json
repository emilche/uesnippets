[
  {
    "label": "FD3D12RayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingPipelineState"
  },
  {
    "label": "FD3D12RayTracingShaderBindingTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingShaderBindingTable"
  },
  {
    "label": "FD3D12RayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingGeometry"
  },
  {
    "label": "FD3D12RayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingScene"
  },
  {
    "label": "FD3D12RayTracingCompactionRequestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RayTracingCompactionRequestHandler"
  },
  {
    "label": "FD3D12RayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12RHIPrivate . h \" # if D3D12_RHI_RAYTRACING # include \" D3D12RayTracingResources . h \" class FD3D12RayTracingPipelineState ; class FD3D12RayTracingShaderBindingTable ; class FD3D12RayTracingGeometry : public FRHIRayTracingGeometry,public FD3D12AdapterChild,public FD3D12ShaderResourceRenameListener,public FNoncopyable { public :)",
    "insertText": "FD3D12RayTracingGeometry(FRHICommandListBase& RHICmdList, FD3D12Adapter* Adapter, const FRayTracingGeometryInitializer& Initializer)"
  },
  {
    "label": "FD3D12RayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12RayTracingGeometry()"
  },
  {
    "label": "GetAccelerationStructureAddress()",
    "kind": "Method",
    "detail": "Function (FRayTracingAccelerationStructureAddress)",
    "insertText": "GetAccelerationStructureAddress(uint64 GPUIndex)"
  },
  {
    "label": "SetupHitGroupSystemParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupHitGroupSystemParameters(uint32 InGPUIndex)"
  },
  {
    "label": "TransitionBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransitionBuffers(FD3D12CommandContext& CommandContext)"
  },
  {
    "label": "UpdateResidency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResidency(FD3D12CommandContext& CommandContext)"
  },
  {
    "label": "CompactAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactAccelerationStructure(FD3D12CommandContext& CommandContext, uint32 InGPUIndex, uint64 InSizeAfterCompaction)"
  },
  {
    "label": "CreateAccelerationStructureBuildDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAccelerationStructureBuildDesc(FD3D12CommandContext& CommandContext, EAccelerationStructureBuildMode BuildMode, D3D12_GPU_VIRTUAL_ADDRESS ScratchBufferAddress, D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC& OutDesc, TArrayView<D3D12_RAYTRACING_GEOMETRY_DESC>& OutGeometryDescs)"
  },
  {
    "label": "ResourceRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResourceRenamed(FD3D12ContextArray const& Contexts, FD3D12BaseShaderResource* InRenamedResource, FD3D12ResourceLocation* InNewResourceLocation)"
  },
  {
    "label": "AllocateBufferSRVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateBufferSRVs(uint32 InGPUIndex)"
  },
  {
    "label": "RegisterAsRenameListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAsRenameListener(uint32 InGPUIndex)"
  },
  {
    "label": "UnregisterAsRenameListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAsRenameListener(uint32 InGPUIndex)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(FD3D12RayTracingGeometry& Other)"
  },
  {
    "label": "ReleaseUnderlyingResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseUnderlyingResource()"
  },
  {
    "label": "SetDirty()",
    "kind": "Method",
    "detail": "Function (bool bIsAccelerationStructureDirty [ MAX_NUM_GPUS ] = { } ; void)",
    "insertText": "SetDirty(FRHIGPUMask GPUMask, bool bState)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bIsAccelerationStructureDirty [ GPUIndex ] = bState ; } } bool)",
    "insertText": "IsDirty(uint32 GPUIndex)"
  },
  {
    "label": "FD3D12RayTracingScene()",
    "kind": "Method",
    "detail": "Function (using FRHIRayTracingGeometry::Initializer ; using FRHIRayTracingGeometry::SizeInfo ; uint32 IndicesPerPrimitive = 3 ; FBufferRHIRef NullTransformBuffer ; TRefCountPtr<FD3D12Buffer> AccelerationStructureBuffers [ MAX_NUM_GPUS ] ; bool bRegisteredAsRenameListener [ MAX_NUM_GPUS ] ; bool bHasPendingCompactionRequests [ MAX_NUM_GPUS ] ; TArray<FD3D12HitGroupSystemParameters> HitGroupSystemParameters [ MAX_NUM_GPUS ] ; TSharedPtr<FD3D12ShaderResourceView> HitGroupSystemIndexBufferSRV [ MAX_NUM_GPUS ] ; TArray<TSharedPtr<FD3D12ShaderResourceView>> HitGroupSystemSegmentVertexBufferSRVs [ MAX_NUM_GPUS ] ; FDebugName DebugName ; FName OwnerName ; TArray<D3D12_RAYTRACING_GEOMETRY_DESC,TInlineAllocator<1>> GeometryDescs ; uint64 AccelerationStructureCompactedSize = 0 ; } ; class FD3D12RayTracingScene : public FRHIRayTracingScene,public FD3D12AdapterChild,public FNoncopyable { public :)",
    "insertText": "FD3D12RayTracingScene(FD3D12Adapter* Adapter, FRayTracingSceneInitializer Initializer)"
  },
  {
    "label": "FD3D12RayTracingScene()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12RayTracingScene()"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (const FRayTracingSceneInitializer&)",
    "insertText": "GetInitializer()"
  },
  {
    "label": "ReleaseBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBuffer()"
  },
  {
    "label": "FindOrCreateShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (FRHIShaderBindingTable*)",
    "insertText": "FindOrCreateShaderBindingTable(const FRHIRayTracingPipelineState* Pipeline)"
  },
  {
    "label": "FindExistingShaderTable()",
    "kind": "Method",
    "detail": "Function (FD3D12RayTracingShaderBindingTable*)",
    "insertText": "FindExistingShaderTable(const FD3D12RayTracingPipelineState* Pipeline)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (TMap<const FD3D12RayTracingPipelineState*,TRefCountPtr<FD3D12RayTracingShaderBindingTable>> ShaderTables ; bool bBuilt = false ; private : UE::FMutex Mutex ; } ; class FD3D12RayTracingCompactionRequestHandler : FD3D12DeviceChild { public :)",
    "insertText": "UE_NONCOPYABLE(FD3D12RayTracingCompactionRequestHandler) FD3D12RayTracingCompactionRequestHandler(FD3D12Device* Device)"
  },
  {
    "label": "FD3D12RayTracingCompactionRequestHandler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12RayTracingCompactionRequestHandler()"
  },
  {
    "label": "RequestCompact()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestCompact(FD3D12RayTracingGeometry* InRTGeometry)"
  },
  {
    "label": "ReleaseRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReleaseRequest(FD3D12RayTracingGeometry* InRTGeometry)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FD3D12CommandContext& InCommandContext)"
  }
]