[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TaskTrace()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_DEBUG_TASK_TRACE_H_ # define BASE_DEBUG_TASK_TRACE_H_ # include<iosfwd> # include<string> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / debug / stack_trace . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace debug { class BASE_EXPORT TaskTrace { public :)",
    "insertText": "TaskTrace()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Print()"
  },
  {
    "label": "OutputToStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputToStream(std::ostream* os)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "AddressesForTesting()",
    "kind": "Method",
    "detail": "Function (base::span<const void* const>)",
    "insertText": "AddressesForTesting()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<StackTrace> stack_trace_ ; bool trace_overflow_ = false ; } ; BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& os, const TaskTrace& task_trace)"
  }
]