[
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FPathTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPathTree"
  },
  {
    "label": "FPathTree()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" HAL / Platform . h \" # include \" UObject / NameTypes . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" CoreMinimal . h \" # endif template<FuncType> class TFunctionRef ; class FPathTree { public :)",
    "insertText": "FPathTree()"
  },
  {
    "label": "EnsureAdditionalCapacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureAdditionalCapacity(int32 NumNewPaths)"
  },
  {
    "label": "CachePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CachePath(FName Path, TFunctionRef<void(FName)> OnPathAdded)"
  },
  {
    "label": "RemovePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePath(FName Path, TFunctionRef<void(FName)> OnPathRemoved)"
  },
  {
    "label": "PathExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PathExists(FName Path)"
  },
  {
    "label": "GetAllPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllPaths(TSet<FName>& OutPaths)"
  },
  {
    "label": "EnumerateAllPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllPaths(TFunctionRef<bool(FName)> Callback)"
  },
  {
    "label": "GetSubPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSubPaths(FName BasePath, TSet<FName>& OutPaths, bool bRecurse = true)"
  },
  {
    "label": "EnumerateSubPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateSubPaths(FName BasePath, TFunctionRef<bool(FName)> Callback, bool bRecurse = true)"
  },
  {
    "label": "NumPaths()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumPaths()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T AllocatedSize = ParentPathToChildPaths .)",
    "insertText": "GetAllocatedSize() + ChildPathToParentPath.GetAllocatedSize()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (AllocatedSize + = Pair . Value .)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "NormalizePackagePath()",
    "kind": "Method",
    "detail": "Function (} return AllocatedSize ; } FName)",
    "insertText": "NormalizePackagePath(FName In)"
  }
]