[
  {
    "label": "FDeferredMacEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredMacEvent"
  },
  {
    "label": "FMacScreen",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMacScreen"
  },
  {
    "label": "APPLICATIONCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APPLICATIONCORE_API"
  },
  {
    "label": "FGenericApplicationMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericApplicationMessageHandler"
  },
  {
    "label": "FSavedWindowOrderInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSavedWindowOrderInfo"
  },
  {
    "label": "FMacControllerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacControllerInterface"
  },
  {
    "label": "IInputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInputDevice"
  },
  {
    "label": "FMacWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMacWindow"
  },
  {
    "label": "FDeferredMacEvent()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GenericPlatform / GenericApplication . h \" # include \" Mac / MacWindow . h \" # include \" Mac / MacTextInputMethodSystem . h \" # include \" GenericPlatform / IInputInterface . h \" struct FDeferredMacEvent {)",
    "insertText": "FDeferredMacEvent() : Event(nullptr) , Window(nullptr) , Type(0) , LocationInWindow(FVector2D::ZeroVector) , ModifierFlags(0) , Timestamp(0.0) , WindowNumber(0) , Context(nullptr) , Delta(FVector2D::ZeroVector) , ScrollingDelta(FVector2D::ZeroVector) , ButtonNumber(0) , ClickCount(0) , Phase(NSEventPhaseNone) , MomentumPhase(NSEventPhaseNone) , IsDirectionInvertedFromDevice(false) , Character(0) , CharCode(0) , IsRepeat(false) , IsPrintable(false) , KeyCode(0) , NotificationName(nullptr) , DraggingPasteboard(nullptr)"
  },
  {
    "label": "FDeferredMacEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDeferredMacEvent(const FDeferredMacEvent& Other) : Event(Other.Event ? [Other.Event retain] : nullptr) , Window(Other.Window) , Type(Other.Type) , LocationInWindow(Other.LocationInWindow) , ModifierFlags(Other.ModifierFlags) , Timestamp(Other.Timestamp) , WindowNumber(Other.WindowNumber) , Context(Other.Context ? [Other.Context retain] : nullptr) , Delta(Other.Delta) , ScrollingDelta(Other.ScrollingDelta) , ButtonNumber(Other.ButtonNumber) , ClickCount(Other.ClickCount) , Phase(Other.Phase) , MomentumPhase(Other.MomentumPhase) , IsDirectionInvertedFromDevice(Other.IsDirectionInvertedFromDevice) , Character(Other.Character) , CharCode(Other.CharCode) , IsRepeat(Other.IsRepeat) , IsPrintable(Other.IsPrintable) , KeyCode(Other.KeyCode) , NotificationName(Other.NotificationName ? [Other.NotificationName retain] : nullptr) , DraggingPasteboard(Other.DraggingPasteboard ? [Other.DraggingPasteboard retain] : nullptr)"
  },
  {
    "label": "FDeferredMacEvent()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDeferredMacEvent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SCOPED_AUTORELEASE_POOL ;)",
    "insertText": "if(Event)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ([ Event release ] ; })",
    "insertText": "if(Context)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ([ Context release ] ; })",
    "insertText": "if(NotificationName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ([ NotificationName release ] ; })",
    "insertText": "if(DraggingPasteboard)"
  },
  {
    "label": "FMacScreen()",
    "kind": "Method",
    "detail": "Function ([ DraggingPasteboard release ] ; } } NSEvent* Event ; FCocoaWindow* Window ; int32 Type ; FVector2D LocationInWindow ; uint32 ModifierFlags ; NSTimeInterval Timestamp ; int32 WindowNumber ; NSGraphicsContext* Context ; FVector2D Delta ; FVector2D ScrollingDelta ; int32 ButtonNumber ; int32 ClickCount ; NSEventPhase Phase ; NSEventPhase MomentumPhase ; bool IsDirectionInvertedFromDevice ; TCHAR Character ; TCHAR CharCode ; bool IsRepeat ; bool IsPrintable ; uint32 KeyCode ; NSString* NotificationName ; NSPasteboard* DraggingPasteboard ; } ; struct FMacScreen { NSScreen* Screen ; NSRect Frame ; NSRect VisibleFrame ; NSRect FramePixels ; NSRect VisibleFramePixels ; NSEdgeInsets SafeAreaInsets ;)",
    "insertText": "FMacScreen(NSScreen* InScreen) : Screen([InScreen retain]), Frame(InScreen.frame), VisibleFrame(InScreen.visibleFrame), FramePixels(InScreen.frame), VisibleFramePixels(InScreen.visibleFrame), SafeAreaInsets(InScreen.safeAreaInsets)"
  },
  {
    "label": "FMacScreen()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMacScreen()"
  },
  {
    "label": "CreateMacApplication()",
    "kind": "Method",
    "detail": "Function ([ Screen release ] ; } } ; typedef TSharedRef<FMacScreen,ESPMode::ThreadSafe> FMacScreenRef ; class FMacApplication : public GenericApplication,public IInputInterface { public : FMacApplication*)",
    "insertText": "CreateMacApplication()"
  },
  {
    "label": "FMacApplication()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FMacApplication()"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetMessageHandler(const TSharedRef<class FGenericApplicationMessageHandler>& InMessageHandler)"
  },
  {
    "label": "SetAccessibleMessageHandler()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY void)",
    "insertText": "SetAccessibleMessageHandler(const TSharedRef<FGenericAccessibleMessageHandler>& InAccessibleMessageHandler)"
  },
  {
    "label": "OnVoiceoverEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVoiceoverEnabled()"
  },
  {
    "label": "OnVoiceoverDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVoiceoverDisabled()"
  },
  {
    "label": "PollGameDeviceState()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PollGameDeviceState(const float TimeDelta)"
  },
  {
    "label": "PumpMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PumpMessages(const float TimeDelta)"
  },
  {
    "label": "ProcessDeferredEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredEvents(const float TimeDelta)"
  },
  {
    "label": "MakeWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FGenericWindow>)",
    "insertText": "MakeWindow()"
  },
  {
    "label": "InitializeWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeWindow(const TSharedRef<FGenericWindow>& Window, const TSharedRef<FGenericWindowDefinition>& InDefinition, const TSharedPtr<FGenericWindow>& InParent, const bool bShowImmediately)"
  },
  {
    "label": "GetModifierKeys()",
    "kind": "Method",
    "detail": "Function (FModifierKeysState)",
    "insertText": "GetModifierKeys()"
  },
  {
    "label": "IsCursorDirectlyOverSlateWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCursorDirectlyOverSlateWindow()"
  },
  {
    "label": "GetWindowUnderCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericWindow>)",
    "insertText": "GetWindowUnderCursor()"
  },
  {
    "label": "SetHighPrecisionMouseMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPrecisionMouseMode(const bool Enable, const TSharedPtr<FGenericWindow>& InWindow)"
  },
  {
    "label": "IsUsingHighPrecisionMouseMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingHighPrecisionMouseMode()"
  },
  {
    "label": "GetWorkArea()",
    "kind": "Method",
    "detail": "Function (FPlatformRect)",
    "insertText": "GetWorkArea(const FPlatformRect& CurrentWindow)"
  },
  {
    "label": "GetWindowTitleAlignment()",
    "kind": "Method",
    "detail": "Function (EWindowTitleAlignment::Type)",
    "insertText": "GetWindowTitleAlignment()"
  },
  {
    "label": "SendAnalytics()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "SendAnalytics(IAnalyticsProvider* Provider)"
  },
  {
    "label": "StartScopedModalEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartScopedModalEvent()"
  },
  {
    "label": "EndScopedModalEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndScopedModalEvent()"
  },
  {
    "label": "CloseWindow()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "CloseWindow(TSharedRef<FMacWindow> Window)"
  },
  {
    "label": "DeferEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferEvent(NSObject* Object)"
  },
  {
    "label": "IsProcessingDeferredEvents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcessingDeferredEvents()"
  },
  {
    "label": "OnWindowWillResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowWillResize(TSharedRef<FMacWindow> Window)"
  },
  {
    "label": "InvalidateTextLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateTextLayout(FCocoaWindow* Window)"
  },
  {
    "label": "ResetModifierKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetModifierKeys()"
  },
  {
    "label": "IsWorkspaceSessionActive()",
    "kind": "Method",
    "detail": "Function (ModifierKeysFlags = 0 ; } bool)",
    "insertText": "IsWorkspaceSessionActive()"
  },
  {
    "label": "GetAllWindows()",
    "kind": "Method",
    "detail": "Function (bSystemModalMode = bInSystemModalMode ; } const TArray<TSharedRef<FMacWindow>>&)",
    "insertText": "GetAllWindows()"
  },
  {
    "label": "IgnoreMouseMoveDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IgnoreMouseMoveDelta()"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedExchange(&bIgnoreMouseMoveDelta, 1)"
  },
  {
    "label": "SetIsRightClickEmulationEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsRightClickEmulationEnabled(bool bEnabled)"
  },
  {
    "label": "OnWindowDidResize()",
    "kind": "Method",
    "detail": "Function (bIsRightClickEmulationEnabled = bEnabled ; } void)",
    "insertText": "OnWindowDidResize(TSharedRef<FMacWindow> Window, bool bRestoreMouseCursorLocking = false)"
  },
  {
    "label": "OnWindowChangedScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowChangedScreen(TSharedRef<FMacWindow> Window)"
  },
  {
    "label": "OnWindowOrderedFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowOrderedFront(TSharedRef<FMacWindow> Window)"
  },
  {
    "label": "OnWindowActivationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowActivationChanged(const TSharedRef<FMacWindow>& Window, const EWindowActivation ActivationType)"
  },
  {
    "label": "OnDisplayReconfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDisplayReconfiguration(CGDirectDisplayID Display, CGDisplayChangeSummaryFlags Flags, void* UserInfo)"
  },
  {
    "label": "GetInputInterface()",
    "kind": "Method",
    "detail": "Function (public : IInputInterface*)",
    "insertText": "GetInputInterface()"
  },
  {
    "label": "SetForceFeedbackChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValues(int32 ControllerId, const FForceFeedbackValues &Values)"
  },
  {
    "label": "SetHapticFeedbackValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHapticFeedbackValues(int32 ControllerId, int32 Hand, const FHapticFeedbackValues& Values)"
  },
  {
    "label": "SetLightColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightColor(int32 ControllerId, FColor Color)"
  },
  {
    "label": "ResetLightColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetLightColor(int32 ControllerId)"
  },
  {
    "label": "UpdateScreensArray()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "UpdateScreensArray()"
  },
  {
    "label": "FindScreenBySlatePosition()",
    "kind": "Method",
    "detail": "Function (FMacScreenRef)",
    "insertText": "FindScreenBySlatePosition(double X, double Y)"
  },
  {
    "label": "FindScreenByCocoaPosition()",
    "kind": "Method",
    "detail": "Function (FMacScreenRef)",
    "insertText": "FindScreenByCocoaPosition(double X, double Y)"
  },
  {
    "label": "ConvertSlatePositionToCocoa()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ConvertSlatePositionToCocoa(double X, double Y)"
  },
  {
    "label": "ConvertCocoaPositionToSlate()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ConvertCocoaPositionToSlate(double X, double Y)"
  },
  {
    "label": "ConvertSlatePositionToCGPoint()",
    "kind": "Method",
    "detail": "Function (CGPoint)",
    "insertText": "ConvertSlatePositionToCGPoint(double X, double Y)"
  },
  {
    "label": "CalculateScreenOrigin()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "CalculateScreenOrigin(NSScreen* Screen)"
  },
  {
    "label": "GetPrimaryScreenBackingScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPrimaryScreenBackingScaleFactor()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*MenuBarShutdownFuncPtr)()"
  },
  {
    "label": "TranslateKeyCodeToUniCode()",
    "kind": "Method",
    "detail": "Function (MenuBarShutdownFuncPtr MenuBarShutdownFunc ; unichar)",
    "insertText": "TranslateKeyCodeToUniCode(uint32 KeyCode, uint32 Modifier)"
  },
  {
    "label": "HandleNSEvent()",
    "kind": "Method",
    "detail": "Function (private : NSEvent*)",
    "insertText": "HandleNSEvent(NSEvent* Event)"
  },
  {
    "label": "MTContactCallback()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "MTContactCallback(void* Device, void* Data, int32 NumFingers, double TimeStamp, int32 Frame)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessEvent(const FDeferredMacEvent& Event)"
  },
  {
    "label": "ResendEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResendEvent(NSEvent* Event)"
  },
  {
    "label": "ProcessMouseMovedEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMouseMovedEvent(const FDeferredMacEvent& Event, TSharedPtr<FMacWindow> EventWindow)"
  },
  {
    "label": "ProcessMouseDownEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMouseDownEvent(const FDeferredMacEvent& Event, TSharedPtr<FMacWindow> EventWindow)"
  },
  {
    "label": "ProcessMouseUpEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessMouseUpEvent(const FDeferredMacEvent& Event, TSharedPtr<FMacWindow> EventWindow)"
  },
  {
    "label": "ProcessScrollWheelEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessScrollWheelEvent(const FDeferredMacEvent& Event, TSharedPtr<FMacWindow> EventWindow)"
  },
  {
    "label": "ProcessGestureEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessGestureEvent(const FDeferredMacEvent& Event)"
  },
  {
    "label": "ProcessKeyDownEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessKeyDownEvent(const FDeferredMacEvent& Event, TSharedPtr<FMacWindow> EventWindow)"
  },
  {
    "label": "ProcessKeyUpEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessKeyUpEvent(const FDeferredMacEvent& Event)"
  },
  {
    "label": "OnWindowDidMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowDidMove(TSharedRef<FMacWindow> Window)"
  },
  {
    "label": "OnWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnWindowDestroyed(TSharedRef<FMacWindow> DestroyedWindow)"
  },
  {
    "label": "OnWindowActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowActivated(TSharedRef<FMacWindow> Window)"
  },
  {
    "label": "OnApplicationDidBecomeActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplicationDidBecomeActive()"
  },
  {
    "label": "OnApplicationWillResignActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplicationWillResignActive()"
  },
  {
    "label": "OnWindowsReordered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowsReordered()"
  },
  {
    "label": "OnActiveSpaceDidChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveSpaceDidChange()"
  },
  {
    "label": "CacheKeyboardInputSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheKeyboardInputSource()"
  },
  {
    "label": "ConditionallyUpdateModifierKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyUpdateModifierKeys(const FDeferredMacEvent& Event)"
  },
  {
    "label": "HandleModifierChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleModifierChange(NSUInteger NewModifierFlags, NSUInteger FlagsShift, NSUInteger UEShift, EMacModifierKeys TranslatedCode)"
  },
  {
    "label": "FindEventWindow()",
    "kind": "Method",
    "detail": "Function (FCocoaWindow*)",
    "insertText": "FindEventWindow(NSEvent* CocoaEvent)"
  },
  {
    "label": "FindSlateWindowUnderCursor()",
    "kind": "Method",
    "detail": "Function (FCocoaWindow*)",
    "insertText": "FindSlateWindowUnderCursor()"
  },
  {
    "label": "GetCurrentWindowZone()",
    "kind": "Method",
    "detail": "Function (EWindowZone::Type)",
    "insertText": "GetCurrentWindowZone(const TSharedRef<FMacWindow>& Window)"
  },
  {
    "label": "IsEdgeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEdgeZone(EWindowZone::Type Zone)"
  },
  {
    "label": "IsPrintableKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrintableKey(uint32 Character)"
  },
  {
    "label": "ConvertChar()",
    "kind": "Method",
    "detail": "Function (TCHAR)",
    "insertText": "ConvertChar(TCHAR Character)"
  },
  {
    "label": "TranslateCharCode()",
    "kind": "Method",
    "detail": "Function (TCHAR)",
    "insertText": "TranslateCharCode(TCHAR CharCode, uint32 KeyCode)"
  },
  {
    "label": "CloseQueuedWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseQueuedWindows()"
  },
  {
    "label": "InvalidateTextLayouts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateTextLayouts()"
  },
  {
    "label": "RecordUsage()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RecordUsage(EGestureEvent Gesture)"
  },
  {
    "label": "OnAccessibleEventRaised()",
    "kind": "Method",
    "detail": "Function (} # endif # if WITH_ACCESSIBILITY void)",
    "insertText": "OnAccessibleEventRaised(const FAccessibleEventArgs& Args)"
  },
  {
    "label": "FSavedWindowOrderInfo()",
    "kind": "Method",
    "detail": "Function (# endif private : bool bUsingHighPrecisionMouseInput ; bool bUsingTrackpad ; EMouseButtons::Type LastPressedMouseButton ; FCriticalSection EventsMutex ; TArray<FDeferredMacEvent> DeferredEvents ; FCriticalSection WindowsMutex ; TArray<TSharedRef<FMacWindow>> Windows ; bool bIsProcessingDeferredEvents ; struct FSavedWindowOrderInfo { int32 WindowNumber ; int32 Level ;)",
    "insertText": "FSavedWindowOrderInfo(int32 InWindowNumber, int32 InLevel) : WindowNumber(InWindowNumber), Level(InLevel)"
  },
  {
    "label": "GestureUsage()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FSavedWindowOrderInfo> SavedWindowsOrder ; TSharedRef<class FMacControllerInterface> HIDInput ; TArray<TSharedPtr<class IInputDevice>> ExternalInputDevices ; bool bHasLoadedInputPlugins ; FCocoaWindow* DraggedWindow ; FCocoaWindow* WindowUnderCursor ; TSharedPtr<FMacWindow> ActiveWindow ; uint32 SystemResolutionX ; uint32 SystemResolutionY ; bool bSystemModalMode ; uint32 ModifierKeysFlags ; NSUInteger CurrentModifierFlags ; bool bIsRightClickEmulationEnabled ; bool bEmulatingRightClick ; volatile int32 bIgnoreMouseMoveDelta ; FCriticalSection WindowsToCloseMutex ; TArray<FCocoaWindow*> CocoaWindowsToClose ; TArray<TSharedRef<FMacWindow>> SlateWindowsToClose ; TArray<FCocoaWindow*> WindowsRequiringTextInvalidation ; TSharedPtr<FMacTextInputMethodSystem> TextInputMethodSystem ; bool bIsWorkspaceSessionActive ; id AppActivationObserver ; id AppDeactivationObserver ; id WorkspaceActivationObserver ; id WorkspaceDeactivationObserver ; id WorkspaceActiveSpaceChangeObserver ; id EventMonitor ; id MouseMovedEventMonitor ; # if WITH_EDITOR EGestureEvent LastGestureUsed ; int32)",
    "insertText": "GestureUsage(int32)"
  }
]