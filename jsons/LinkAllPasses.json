[
  {
    "label": "ForcePassLinking",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForcePassLinking"
  },
  {
    "label": "ForcePassLinking()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_LINKALLPASSES_H # define LLVM_LINKALLPASSES_H # include \" llvm / ADT / Statistic . h \" # include \" llvm / Analysis / AliasAnalysis . h \" # include \" llvm / Analysis / AliasSetTracker . h \" # include \" llvm / Analysis / CallPrinter . h \" # include \" llvm / Analysis / DomPrinter . h \" # include \" llvm / Analysis / IntervalPartition . h \" # include \" llvm / Analysis / Lint . h \" # include \" llvm / Analysis / Passes . h \" # include \" llvm / Analysis / PostDominators . h \" # include \" llvm / Analysis / RegionPass . h \" # include \" llvm / Analysis / RegionPrinter . h \" # include \" llvm / Analysis / ScalarEvolution . h \" # include \" llvm / CodeGen / Passes . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / IRPrintingPasses . h \" # include \" llvm / Transforms / IPO . h \" # include \" llvm / Transforms / Instrumentation . h \" # include \" llvm / Transforms / ObjCARC . h \" # include \" llvm / Transforms / Scalar . h \" # include \" llvm / Transforms / Utils / SymbolRewriter . h \" # include \" llvm / Transforms / Utils / UnifyFunctionExitNodes . h \" # include \" llvm / Transforms / Vectorize . h \" # include \" llvm / Support / Valgrind . h \" # include<cstdlib> namespace { struct ForcePassLinking {)",
    "insertText": "ForcePassLinking()"
  },
  {
    "label": "os()",
    "kind": "Method",
    "detail": "Function (std::string buf ; llvm::raw_string_ostream)",
    "insertText": "os(buf)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (llvm::)",
    "insertText": "Create(nullptr, llvm::GlobalValue::ExternalLinkage)->viewCFGOnly()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (llvm::AliasAnalysis AA ; llvm::AliasSetTracker)",
    "insertText": "X(AA)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "add(nullptr, 0, llvm::AAMDNodes())"
  }
]