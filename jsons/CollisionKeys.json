[
  {
    "label": "FCollisionParticlePairKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionParticlePairKey"
  },
  {
    "label": "FParticleIDKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleIDKey"
  },
  {
    "label": "FCollisionShapePairKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionShapePairKey"
  },
  {
    "label": "FCollisionSortKeyHashed",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionSortKeyHashed"
  },
  {
    "label": "FCollisionSortKeyNonHashed",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionSortKeyNonHashed"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "OrderIndependentHashCombine()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / ParticleHandle . h \" namespace Chaos { uint32)",
    "insertText": "OrderIndependentHashCombine(const uint32 A, const uint32 B)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "HashCombine(B, A)"
  },
  {
    "label": "AreParticlesInPreferredOrder()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "AreParticlesInPreferredOrder(const FGeometryParticleHandle* Particle0, const FGeometryParticleHandle* Particle1)"
  },
  {
    "label": "ShouldSwapParticleOrder()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldSwapParticleOrder(const bool bIsDynamicOrSleeping0, const bool bIsDynamicOrSleeping1, const bool bIsParticle0Preferred)"
  },
  {
    "label": "ShouldSwapParticleOrder()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldSwapParticleOrder(const FGeometryParticleHandle* Particle0, const FGeometryParticleHandle* Particle1)"
  },
  {
    "label": "ObjectState()",
    "kind": "Method",
    "detail": "Function (const EObjectStateType ObjectState0 = Particle0 ->)",
    "insertText": "ObjectState()"
  },
  {
    "label": "bIsDynamicOrSleeping0()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsDynamicOrSleeping0(ObjectState0 == EObjectStateType::Dynamic) || (ObjectState0 == EObjectStateType::Sleeping)"
  },
  {
    "label": "bIsDynamicOrSleeping1()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsDynamicOrSleeping1(ObjectState1 == EObjectStateType::Dynamic) || (ObjectState1 == EObjectStateType::Sleeping)"
  },
  {
    "label": "FCollisionParticlePairKey()",
    "kind": "Method",
    "detail": "Function (} namespace Private { class FCollisionParticlePairKey { public : using KeyType = uint64 ;)",
    "insertText": "FCollisionParticlePairKey()"
  },
  {
    "label": "FCollisionParticlePairKey()",
    "kind": "Method",
    "detail": "Function (Key . Key64 = 0 ; })",
    "insertText": "FCollisionParticlePairKey(const FGeometryParticleHandle* Particle0, const FGeometryParticleHandle* Particle1, const bool bSymmetric = true)"
  },
  {
    "label": "GenerateKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKey(Particle0, Particle1, bSymmetric)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetKey()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCollisionParticlePairKey& L, const FCollisionParticlePairKey& R)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Key . Key64 = 0 ;)",
    "insertText": "if((Particle0 != nullptr) && (Particle1 != nullptr))"
  },
  {
    "label": "ParticleID()",
    "kind": "Method",
    "detail": "Function (const bool bIsLocalID0 = Particle0 ->)",
    "insertText": "ParticleID()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 ID0 =)",
    "insertText": "uint32((bIsLocalID0) ? Particle0->ParticleID().LocalID : Particle0->ParticleID().GlobalID)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 ID1 =)",
    "insertText": "uint32((bIsLocalID1) ? Particle1->ParticleID().LocalID : Particle1->ParticleID().GlobalID)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Key . Key32s [ 0 ] . Key31 = ID0 ; Key . Key32s [ 0 ] . IsLocal = bIsLocalID0 ; Key . Key32s [ 1 ] . Key31 = ID1 ; Key . Key32s [ 1 ] . IsLocal = bIsLocalID1 ; } else { Key . Key32s [ 0 ] . Key31 = ID1 ; Key . Key32s [ 0 ] . IsLocal = bIsLocalID1 ; Key . Key32s [ 1 ] . Key31 = ID0 ; Key . Key32s [ 1 ] . IsLocal = bIsLocalID0 ; } } } struct FParticleIDKey { uint32 Key31 : 3 1 ; uint32 IsLocal : 1 ; } ; union FIDKey { uint64 Key64 ; FParticleIDKey Key32s [ 2 ] ; } ;)",
    "insertText": "static_assert(sizeof(FParticleID) == 8, \"FParticleID size does not match FCollisionParticlePairKey (expected 64 bits)\")"
  },
  {
    "label": "FCollisionShapePairKey()",
    "kind": "Method",
    "detail": "Function (FIDKey Key ; } ; class FCollisionShapePairKey { public :)",
    "insertText": "FCollisionShapePairKey() : Key(0)"
  },
  {
    "label": "FCollisionShapePairKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCollisionShapePairKey(const int32 InShapeID0, const int32 InShapeID1) : ShapeID0(InShapeID0) , ShapeID1(InShapeID1)"
  },
  {
    "label": "FCollisionSortKeyHashed()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCollisionSortKeyHashed(const FGeometryParticleHandle* InParticle0, const int32 InShapeID0, const FGeometryParticleHandle* InParticle1, const int32 InShapeID1)"
  },
  {
    "label": "FCollisionParticlePairKey()",
    "kind": "Method",
    "detail": "Function (FCollisionParticlePairKey ParticlePairKey =)",
    "insertText": "FCollisionParticlePairKey(InParticle0, InParticle1, false)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (ParticlesKey = ParticlePairKey .)",
    "insertText": "GetHash()"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (ShapesKey)",
    "insertText": "HashCombineFast(::GetTypeHash(InShapeID0), ::GetTypeHash(InShapeID1))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCollisionSortKeyHashed& L, const FCollisionSortKeyHashed& R)"
  },
  {
    "label": "FCollisionSortKeyNonHashed()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCollisionSortKeyNonHashed(const FGeometryParticleHandle* InParticle0, const int32 InShapeID0, const FGeometryParticleHandle* InParticle1, const int32 InShapeID1) : ParticlePairKey(InParticle0, InParticle1, false) , ShapePairKey(InShapeID0, InShapeID1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCollisionSortKeyNonHashed& L, const FCollisionSortKeyNonHashed& R)"
  },
  {
    "label": "ParticlePairLess()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ParticlePairLess(L.ParticlePairKey < R.ParticlePairKey)"
  },
  {
    "label": "ShapePairLess()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ShapePairLess(L.ShapePairKey < R.ShapePairKey)"
  },
  {
    "label": "ParticlePairNotEqual()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "ParticlePairNotEqual(L.ParticlePairKey != R.ParticlePairKey)"
  },
  {
    "label": "FCollisionParticlePairConstraintKey()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FCollisionParticlePairConstraintKey() : Key(0)"
  },
  {
    "label": "GenerateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHash(nullptr, Implicit0, 0, Simplicial0, nullptr, Implicit1, 0, Simplicial1)"
  },
  {
    "label": "FCollisionParticlePairConstraintKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCollisionParticlePairConstraintKey(const FShapeInstance* Shape0, const FImplicitObject* Implicit0, const int32 ImplicitId0, const FBVHParticles* Simplicial0, const FShapeInstance* Shape1, const FImplicitObject* Implicit1, const int32 ImplicitId1, const FBVHParticles* Simplicial1) : Key(0)"
  },
  {
    "label": "GenerateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHash(Shape0, Implicit0, ImplicitId0, Simplicial0, Shape1, Implicit1, ImplicitId1, Simplicial1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCollisionParticlePairConstraintKey& L, const FCollisionParticlePairConstraintKey& R)"
  },
  {
    "label": "Hash0()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Hash0(Implicit0 != nullptr) ? ::GetTypeHash(Implicit0) : ::GetTypeHash(Simplicial0)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash0 =)",
    "insertText": "HashCombine(Hash0, ImplicitId0)"
  },
  {
    "label": "Hash1()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Hash1(Implicit1 != nullptr) ? ::GetTypeHash(Implicit1) : ::GetTypeHash(Simplicial1)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash1 =)",
    "insertText": "HashCombine(Hash1, ImplicitId1)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Key =)",
    "insertText": "HashCombine(Hash0, Hash1)"
  }
]