[
  {
    "label": "PROPERTYEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PROPERTYEDITOR_API"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "FPanel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPanel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCopyPropertyButton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCopyPropertyButton"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AsyncDetailViewDiff . h \" # include \" DiffUtils . h \" # include \" Templates / SharedPointer . h \" # include \" IDetailsView . h \" class SDetailsSplitter : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FShouldIgnoreRow, const TWeakPtr<FDetailTreeNode>&) DECLARE_DELEGATE_RetVal_OneParam(FLinearColor, FRowHighlightColor, const TUniquePtr<FAsyncDetailViewDiff::DiffNodeType>&) DECLARE_DELEGATE_RetVal_OneParam(bool, FShouldHighlightRow, const TUniquePtr<FAsyncDetailViewDiff::DiffNodeType>&)"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSlot()"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, TSlotBase<FSlot>) SLATE_ATTRIBUTE(float, Value) SLATE_ARGUMENT(TSharedPtr<IDetailsView>, DetailsView) SLATE_ATTRIBUTE(bool, IsReadonly) SLATE_ATTRIBUTE(TSharedPtr<FAsyncDetailViewDiff>, DifferencesWithRightPanel) SLATE_EVENT(FShouldIgnoreRow, ShouldIgnoreRow) SLATE_SLOT_END_ARGS()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (struct FPanel { TSharedPtr<IDetailsView> DetailsView ; TAttribute<bool> IsReadonly ; TAttribute<TSharedPtr<FAsyncDetailViewDiff>> DiffRight ; FShouldIgnoreRow ShouldIgnoreRow ; } ; FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SDetailsSplitter)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FRowHighlightColor, RowHighlightColor) SLATE_EVENT(FShouldHighlightRow, ShouldHighlightRow) SLATE_SLOT_ARGUMENT(FSlot, Slots) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSlot(const FSlot::FSlotArguments& SlotArgs, int32 Index = INDEX_NONE)"
  },
  {
    "label": "GetPanel()",
    "kind": "Method",
    "detail": "Function (FPanel&)",
    "insertText": "GetPanel(int32 Index)"
  },
  {
    "label": "SetRowHighlightColorDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRowHighlightColorDelegate(const FRowHighlightColor& Delegate)"
  },
  {
    "label": "HighlightFromMergeResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighlightFromMergeResults(const TMap<FString, TMap<FPropertySoftPath, ETreeDiffResult>>& Highlights)"
  },
  {
    "label": "PaintPropertyConnector()",
    "kind": "Method",
    "detail": "Function (private : enum class EPropertyCopyDirection { Copy_None,CopyLeftToRight,CopyRightToLeft,} ; struct FCopyPropertyButton { TWeakPtr<FDetailTreeNode> SourceDetailsNode ; TWeakPtr<FDetailTreeNode> DestinationDetailsNode ; ETreeDiffResult DiffResult = ETreeDiffResult::Invalid ; EPropertyCopyDirection CopyDirection = EPropertyCopyDirection::Copy_None ; } ; void)",
    "insertText": "PaintPropertyConnector(FSlateWindowElementList& OutDrawElements, int32 LayerId, const FSlateRect& LeftPropertyRect, const FSlateRect& RightPropertyRect, const FLinearColor& FillColor, const FLinearColor& OutlineColor)"
  },
  {
    "label": "PaintCopyPropertyButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintCopyPropertyButton(FSlateWindowElementList& OutDrawElements, int32 LayerId, const TUniquePtr<FAsyncDetailViewDiff::DiffNodeType>& DiffNode, const FSlateRect& LeftPropertyRect, const FSlateRect& RightPropertyRect, EPropertyCopyDirection CopyDirection)"
  }
]