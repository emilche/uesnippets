[
  {
    "label": "FPBDSphericalConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSphericalConstraint"
  },
  {
    "label": "FPBDSphericalBackstopConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSphericalBackstopConstraint"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" ChaosStats . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" Chaos / Framework / Parallel . h \")",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos PBD Spherical Constraints\"), STAT_PBD_Spherical, STATGROUP_Chaos)"
  },
  {
    "label": "DECLARE_CYCLE_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT(TEXT(\"Chaos PBD Spherical Backstop Constraints\"), STAT_PBD_SphericalBackstop, STATGROUP_Chaos)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(CHAOS_SPHERICAL_ISPC_ENABLED_DEFAULT)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (# else bool bChaos_Spherical_ISPC_Enabled ; # endif namespace Chaos::Softs { class FPBDSphericalConstraint final { public : bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FPBDSphericalConstraint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDSphericalConstraint(const uint32 InParticleOffset, const uint32 InParticleCount, const TArray<FSolverVec3>& InAnimationPositions, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, FSolverReal MeshScale ) : AnimationPositions(InAnimationPositions) , SphereRadii(WeightMaps.FindRef(GetMaxDistanceString(PropertyCollection, MaxDistanceName.ToString()))) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Scale(MeshScale) , MaxDistanceBase((FSolverReal)GetLowMaxDistance(PropertyCollection, 0.f)) , MaxDistanceRange((FSolverReal)GetHighMaxDistance(PropertyCollection, 1.f) - MaxDistanceBase) , MaxDistanceIndex(PropertyCollection)"
  },
  {
    "label": "FPBDSphericalConstraint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDSphericalConstraint(const uint32 InParticleOffset, const uint32 InParticleCount, const TArray<FSolverVec3>& InAnimationPositions, const TConstArrayView<FRealSingle>& InSphereRadii ) : AnimationPositions(InAnimationPositions) , SphereRadii(InSphereRadii) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Scale((FSolverReal)1.) , MaxDistanceIndex(ForceInit)"
  },
  {
    "label": "FPBDSphericalConstraint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDSphericalConstraint()"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, FSolverReal MeshScale)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_PBD_Spherical)"
  },
  {
    "label": "ApplyHelperISPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHelperISPC(Particles, Dt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(SphereRadii.Num() == ParticleCount)"
  },
  {
    "label": "bHasMaxDistance()",
    "kind": "Method",
    "detail": "Function (bool bHasMaxDistance = true ; ApplyHelper<)",
    "insertText": "bHasMaxDistance(Particles, Dt)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetScale(FSolverReal InScale)"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (Scale = InScale ; } FSolverReal)",
    "insertText": "GetScale()"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<FSolverVec3> AnimationPositionsView = Particles .)",
    "insertText": "GetConstArrayView(AnimationPositions)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ParticleCount, [this, &Particles, Dt, &AnimationPositionsView](int32 Index) { const int32 ParticleIndex = ParticleOffset + Index; if (Particles.InvM(ParticleIndex) == 0) { return; } const FSolverReal Radius = (bHasMaxDistance ? MaxDistanceBase + MaxDistanceRange * SphereRadii[Index] : MaxDistanceBase) * Scale; const FSolverVec3& Center = AnimationPositionsView[ParticleIndex]; const FSolverVec3 CenterToParticle = Particles.P(ParticleIndex) - Center; const FSolverReal DistanceSquared = CenterToParticle.SizeSquared(); static const FSolverReal DeadZoneSquareRadius = UE_SMALL_NUMBER; if (DistanceSquared > FMath::Square(Radius) + DeadZoneSquareRadius) { const FSolverReal Distance = FMath::Sqrt(DistanceSquared); const FSolverVec3 PositionOnSphere = (Radius / Distance) * CenterToParticle; Particles.P(ParticleIndex) = Center + PositionOnSphere; } })"
  },
  {
    "label": "ApplyHelperISPC()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "ApplyHelperISPC(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (protected : const TArray<FSolverVec3>& AnimationPositions ; TConstArrayView<FRealSingle> SphereRadii ; const int32 ParticleOffset ; const int32 ParticleCount ; private : FSolverReal)",
    "insertText": "Scale(FSolverReal)"
  },
  {
    "label": "MaxDistanceBase()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxDistanceBase(FSolverReal)"
  },
  {
    "label": "MaxDistanceRange()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxDistanceRange(FSolverReal)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(MaxDistance, float)"
  },
  {
    "label": "FPBDSphericalBackstopConstraint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDSphericalBackstopConstraint(const int32 InParticleOffset, const int32 InParticleCount, const TArray<FSolverVec3>& InAnimationPositions, const TArray<FSolverVec3>& InAnimationNormals, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection, FSolverReal MeshScale ) : AnimationPositions(InAnimationPositions) , AnimationNormals(InAnimationNormals) , SphereRadii(WeightMaps.FindRef(GetBackstopRadiusString(PropertyCollection, BackstopRadiusName.ToString()))) , SphereOffsetDistances(WeightMaps.FindRef(GetBackstopDistanceString(PropertyCollection, BackstopDistanceName.ToString()))) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Scale(MeshScale) , BackstopRadiusBase((FSolverReal)FMath::Max(GetLowBackstopRadius(PropertyCollection, 0.f), 0.f)) , BackstopRadiusRange((FSolverReal)FMath::Max(GetHighBackstopRadius(PropertyCollection, 1.f), 0.f) - BackstopRadiusBase) , BackstopDistanceBase((FSolverReal)GetLowBackstopDistance(PropertyCollection, 0.f)) , BackstopDistanceRange((FSolverReal)GetHighBackstopDistance(PropertyCollection, 1.f) - BackstopDistanceBase) , bUseLegacyBackstop(GetUseLegacyBackstop(PropertyCollection, false)) , BackstopDistanceIndex(PropertyCollection) , BackstopRadiusIndex(PropertyCollection) , UseLegacyBackstopIndex(PropertyCollection)"
  },
  {
    "label": "FPBDSphericalBackstopConstraint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDSphericalBackstopConstraint(const int32 InParticleOffset, const int32 InParticleCount, const TArray<FSolverVec3>& InAnimationPositions, const TArray<FSolverVec3>& InAnimationNormals, const TConstArrayView<FRealSingle>& InSphereRadii, const TConstArrayView<FRealSingle>& InSphereOffsetDistances, const bool bInUseLegacyBackstop ) : AnimationPositions(InAnimationPositions) , AnimationNormals(InAnimationNormals) , SphereRadii(InSphereRadii) , SphereOffsetDistances(InSphereOffsetDistances) , ParticleOffset(InParticleOffset) , ParticleCount(InParticleCount) , Scale((FSolverReal)1.) , bEnabled(true) , bUseLegacyBackstop(bInUseLegacyBackstop) , BackstopDistanceIndex(ForceInit) , BackstopRadiusIndex(ForceInit) , UseLegacyBackstopIndex(ForceInit)"
  },
  {
    "label": "FPBDSphericalBackstopConstraint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDSphericalBackstopConstraint()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnabled(bool bInEnabled)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bEnabled = bInEnabled ; } bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_PBD_SphericalBackstop)"
  },
  {
    "label": "ApplyLegacyHelperISPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLegacyHelperISPC(Particles, Dt)"
  },
  {
    "label": "bHasBackstopRadius()",
    "kind": "Method",
    "detail": "Function (bool bHasBackstopDistance = true ; bool bHasBackstopRadius = true ; ApplyLegacyHelper<bHasBackstopDistance,)",
    "insertText": "bHasBackstopRadius(Particles, Dt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(SphereOffsetDistances.Num() == ParticleCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(bRealTypeCompatibleWithISPC && bChaos_Spherical_ISPC_Enabled)"
  },
  {
    "label": "GetBackstopDistance()",
    "kind": "Method",
    "detail": "Function (} FSolverReal)",
    "insertText": "GetBackstopDistance(int32 ConstraintIndex)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (} private : template<bool bHasBackstopDistance,bool bHasBackstopRadius,SolverParticlesOrRange> void)",
    "insertText": "ApplyHelper(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "GetConstArrayView()",
    "kind": "Method",
    "detail": "Function (const TConstArrayView<FSolverVec3> AnimationNormalsView = Particles .)",
    "insertText": "GetConstArrayView(AnimationNormals)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ParticleCount, [this, &Particles, Dt, &AnimationPositionsView, &AnimationNormalsView](int32 Index) { const int32 ParticleIndex = ParticleOffset + Index; if (Particles.InvM(ParticleIndex) == 0) { return; } const FSolverVec3& AnimationPosition = AnimationPositionsView[ParticleIndex]; const FSolverVec3& AnimationNormal = AnimationNormalsView[ParticleIndex]; const FSolverReal SphereOffsetDistance = (bHasBackstopDistance ? BackstopDistanceBase + BackstopDistanceRange * SphereOffsetDistances[Index] : BackstopDistanceBase) * Scale; const FSolverReal Radius = (bHasBackstopRadius ? BackstopRadiusBase + BackstopRadiusRange * SphereRadii[Index] : BackstopRadiusBase) * Scale; const FSolverVec3 Center = AnimationPosition - (Radius + SphereOffsetDistance) * AnimationNormal; const FSolverVec3 CenterToParticle = Particles.P(ParticleIndex) - Center; const FSolverReal DistanceSquared = CenterToParticle.SizeSquared(); static const FSolverReal DeadZoneSquareRadius = UE_SMALL_NUMBER; if (DistanceSquared < DeadZoneSquareRadius) { Particles.P(ParticleIndex) = AnimationPosition - SphereOffsetDistance * AnimationNormal; } else if (DistanceSquared < FMath::Square(Radius)) { const FSolverVec3 PositionOnSphere = (Radius / sqrt(DistanceSquared)) * CenterToParticle; Particles.P(ParticleIndex) = Center + PositionOnSphere; } })"
  },
  {
    "label": "ApplyLegacyHelper()",
    "kind": "Method",
    "detail": "Function (} template<bool bHasBackstopDistance,bool bHasBackstopRadius,SolverParticlesOrRange> void)",
    "insertText": "ApplyLegacyHelper(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ParticleCount, [this, &Particles, Dt, &AnimationPositionsView, &AnimationNormalsView](int32 Index) { const int32 ParticleIndex = ParticleOffset + Index; if (Particles.InvM(ParticleIndex) == 0) { return; } const FSolverVec3& AnimationPosition = AnimationPositionsView[ParticleIndex]; const FSolverVec3& AnimationNormal = AnimationNormalsView[ParticleIndex]; const FSolverReal SphereOffsetDistance = (bHasBackstopDistance ? BackstopDistanceBase + BackstopDistanceRange * SphereOffsetDistances[Index] : BackstopDistanceBase) * Scale; const FSolverReal Radius = (bHasBackstopRadius ? BackstopRadiusBase + BackstopRadiusRange * SphereRadii[Index] : BackstopRadiusBase) * Scale; const FSolverVec3 Center = AnimationPosition - SphereOffsetDistance * AnimationNormal; const FSolverVec3 CenterToParticle = Particles.P(ParticleIndex) - Center; const FSolverReal DistanceSquared = CenterToParticle.SizeSquared(); static const FSolverReal DeadZoneSquareRadius = UE_SMALL_NUMBER; if (DistanceSquared < DeadZoneSquareRadius) { Particles.P(ParticleIndex) = AnimationPosition - (SphereOffsetDistance - Radius) * AnimationNormal; } else if (DistanceSquared < FMath::Square(Radius)) { const FSolverVec3 PositionOnSphere = (Radius / sqrt(DistanceSquared)) * CenterToParticle; Particles.P(ParticleIndex) = Center + PositionOnSphere; } })"
  },
  {
    "label": "ApplyLegacyHelperISPC()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "ApplyLegacyHelperISPC(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "BackstopRadiusBase()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "BackstopRadiusBase(FSolverReal)"
  },
  {
    "label": "BackstopRadiusRange()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "BackstopRadiusRange(FSolverReal)"
  },
  {
    "label": "BackstopDistanceBase()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "BackstopDistanceBase(FSolverReal)"
  },
  {
    "label": "BackstopDistanceRange()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "BackstopDistanceRange(FSolverReal)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (bool bEnabled = true ; bool bUseLegacyBackstop = false ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(BackstopDistance, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(BackstopRadius, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(UseLegacyBackstop, bool)"
  }
]