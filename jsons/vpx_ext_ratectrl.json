[
  {
    "label": "vpx_rc_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "vpx_rc_type"
  },
  {
    "label": "vpx_rc_encodeframe_decision",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_encodeframe_decision"
  },
  {
    "label": "vpx_rc_encodeframe_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_encodeframe_info"
  },
  {
    "label": "vpx_rc_encodeframe_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_encodeframe_result"
  },
  {
    "label": "vpx_rc_status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "vpx_rc_status"
  },
  {
    "label": "vpx_rc_frame_stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_frame_stats"
  },
  {
    "label": "vpx_rc_firstpass_stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_firstpass_stats"
  },
  {
    "label": "vpx_rc_config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_config"
  },
  {
    "label": "vpx_rc_gop_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_gop_info"
  },
  {
    "label": "vpx_rc_gop_decision",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_gop_decision"
  },
  {
    "label": "vpx_rc_funcs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_rc_funcs"
  },
  {
    "label": "VPX_EXT_RATECTRL_ABI_VERSION()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_VPX_EXT_RATECTRL_H_ # define VPX_VPX_VPX_EXT_RATECTRL_H_ # ifdef __cplusplus \" C \" { # endif # include \" . / vpx_integer . h \" # define)",
    "insertText": "VPX_EXT_RATECTRL_ABI_VERSION(5)"
  },
  {
    "label": "vpx_rc_status_t()",
    "kind": "Method",
    "detail": "Function (VPX_RC_QP = 1<<0,VPX_RC_GOP = 1<<1,VPX_RC_GOP_QP = VPX_RC_QP | VPX_RC_GOP } vpx_rc_type_t ; typedef void* vpx_rc_model_t ; # define VPX_DEFAULT_Q - 1 typedef struct vpx_rc_encodeframe_decision { int q_index ; int max_frame_size ; } vpx_rc_encodeframe_decision_t ; typedef struct vpx_rc_encodeframe_info { int frame_type ; int show_index ; int coding_index ; int gop_index ; int ref_frame_coding_indexes [ 3 ] ; int ref_frame_valid_list [ 3 ] ; int gop_size ; int use_alt_ref ; } vpx_rc_encodeframe_info_t ; typedef struct vpx_rc_encodeframe_result { int64_t sse ; int64_t bit_count ; int64_t pixel_count ; int actual_encoding_qindex ; } vpx_rc_encodeframe_result_t ; typedef enum vpx_rc_status { VPX_RC_OK = 0,VPX_RC_ERROR = 1,} vpx_rc_status_t ; typedef struct vpx_rc_frame_stats { double frame ; double weight ; double intra_error ; double coded_error ; double sr_coded_error ; double frame_noise_energy ; double pcnt_inter ; double pcnt_motion ; double pcnt_second_ref ; double pcnt_neutral ; double pcnt_intra_low ; double pcnt_intra_high ; double intra_skip_pct ; double intra_smooth_pct ; double inactive_zone_rows ; double inactive_zone_cols ; double MVr ; double mvr_abs ; double MVc ; double mvc_abs ; double MVrv ; double MVcv ; double mv_in_out_count ; double duration ; double count ; } vpx_rc_frame_stats_t ; typedef struct vpx_rc_firstpass_stats { vpx_rc_frame_stats_t* frame_stats ; int num_frames ; } vpx_rc_firstpass_stats_t ; typedef struct vpx_rc_config { int frame_width ; int frame_height ; int show_frame_count ; int target_bitrate_kbps ; int frame_rate_num ; int frame_rate_den ; } vpx_rc_config_t ; typedef struct vpx_rc_gop_info { int min_gf_interval ; int max_gf_interval ; int active_min_gf_interval ; int active_max_gf_interval ; int allow_alt_ref ; int is_key_frame ; int last_gop_use_alt_ref ; int frames_since_key ; int frames_to_key ; int lag_in_frames ; int show_index ; int coding_index ; int gop_global_index ; } vpx_rc_gop_info_t ; typedef struct vpx_rc_gop_decision { int gop_coding_frames ; int use_alt_ref ; } vpx_rc_gop_decision_t ; typedef)",
    "insertText": "vpx_rc_status_t(*vpx_rc_create_model_cb_fn_t)( void *priv, const vpx_rc_config_t *ratectrl_config, vpx_rc_model_t *rate_ctrl_model_pt)"
  },
  {
    "label": "vpx_rc_status_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_rc_status_t(*vpx_rc_send_firstpass_stats_cb_fn_t)( vpx_rc_model_t rate_ctrl_model, const vpx_rc_firstpass_stats_t *first_pass_stats)"
  },
  {
    "label": "vpx_rc_status_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_rc_status_t(*vpx_rc_get_encodeframe_decision_cb_fn_t)( vpx_rc_model_t rate_ctrl_model, const vpx_rc_encodeframe_info_t *encode_frame_info, vpx_rc_encodeframe_decision_t *frame_decision)"
  },
  {
    "label": "vpx_rc_status_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_rc_status_t(*vpx_rc_update_encodeframe_result_cb_fn_t)( vpx_rc_model_t rate_ctrl_model, const vpx_rc_encodeframe_result_t *encode_frame_result)"
  },
  {
    "label": "vpx_rc_status_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_rc_status_t(*vpx_rc_get_gop_decision_cb_fn_t)( vpx_rc_model_t rate_ctrl_model, const vpx_rc_gop_info_t *gop_info, vpx_rc_gop_decision_t *gop_decision)"
  },
  {
    "label": "vpx_rc_status_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "vpx_rc_status_t(*vpx_rc_delete_model_cb_fn_t)( vpx_rc_model_t rate_ctrl_model)"
  }
]