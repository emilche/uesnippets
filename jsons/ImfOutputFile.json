[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "IMF_HIDDEN",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMF_HIDDEN"
  },
  {
    "label": "MultiPartOutputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiPartOutputFile"
  },
  {
    "label": "OutputFile()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_OUTPUT_FILE_H # define INCLUDED_IMF_OUTPUT_FILE_H # include \" ImfForward . h \" # include \" ImfGenericOutputFile . h \" # include \" ImfThreading . h \" OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class IMF_EXPORT_TYPE OutputFile : public GenericOutputFile { public : IMF_EXPORT)",
    "insertText": "OutputFile(const char fileName[], const Header& header, int numThreads = globalThreadCount ())"
  },
  {
    "label": "OutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "OutputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::OStream& os, const Header& header, int numThreads = globalThreadCount ())"
  },
  {
    "label": "OutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "OutputFile()"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "fileName()"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const Header&)",
    "insertText": "header()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(const FrameBuffer& frameBuffer)"
  },
  {
    "label": "frameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const FrameBuffer&)",
    "insertText": "frameBuffer()"
  },
  {
    "label": "writePixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writePixels(int numScanLines = 1)"
  },
  {
    "label": "currentScanLine()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "currentScanLine()"
  },
  {
    "label": "copyPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "copyPixels(InputFile& in)"
  },
  {
    "label": "copyPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "copyPixels(InputPart& in)"
  },
  {
    "label": "updatePreviewImage()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "updatePreviewImage(const PreviewRgba newPixels[])"
  },
  {
    "label": "breakScanLine()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "breakScanLine(int y, int offset, int length, char c)"
  },
  {
    "label": "OutputFile()",
    "kind": "Method",
    "detail": "Function (struct IMF_HIDDEN Data ; private : IMF_HIDDEN)",
    "insertText": "OutputFile(const OutputPartData* part)"
  },
  {
    "label": "OutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputFile(const OutputFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OutputFile&)",
    "insertText": "operator(const OutputFile&)"
  },
  {
    "label": "OutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputFile(OutputFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OutputFile&)",
    "insertText": "operator(OutputFile&&)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const Header& header)"
  }
]