[
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FAudioEffectParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioEffectParameters"
  },
  {
    "label": "FAudioEQEffect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioEQEffect"
  },
  {
    "label": "FSoundClassAdjuster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundClassAdjuster"
  },
  {
    "label": "USoundMix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundMix"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioDefines . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" SoundMix . generated . h \" class USoundClass ; struct FPropertyChangedEvent ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FAudioEffectParameters()"
  },
  {
    "label": "FAudioEffectParameters()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAudioEffectParameters()"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Interpolate(const FAudioEffectParameters& InStart, const FAudioEffectParameters& InEnd)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAudioEQEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioEQEffect() : RootTime(0.0f) , FrequencyCenter0(600.0f) , Gain0(1.0f) , Bandwidth0(1.0f) , FrequencyCenter1(1000.0f) , Gain1(1.0f) , Bandwidth1(1.0f) , FrequencyCenter2(2000.0f) , Gain2(1.0f) , Bandwidth2(1.0f) , FrequencyCenter3(10000.0f) , Gain3(1.0f) , Bandwidth3(1.0f)"
  },
  {
    "label": "ClampValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampValues()"
  },
  {
    "label": "PrintSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSettings()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, Category=SoundClassAdjuster, DisplayName = \"Sound Class\")"
  },
  {
    "label": "FSoundClassAdjuster()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundClassAdjuster() : SoundClassObject(NULL) , VolumeAdjuster(1) , PitchAdjuster(1) , LowPassFilterFrequency(MAX_FILTER_FREQUENCY) , bApplyToChildren(false) , VoiceCenterChannelVolumeAdjuster(1)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(BlueprintType, hidecategories=object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=EQ, AssetRegistrySearchable)"
  },
  {
    "label": "CausesPassiveDependencyLoop()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "CausesPassiveDependencyLoop(TArray<USoundClass*>& ProblemClasses)"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (# endif protected : FString)",
    "insertText": "GetDesc(void)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "CheckForDependencyLoop()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "CheckForDependencyLoop(USoundClass* SoundClass, TArray<USoundClass*>& ProblemClasses, bool CheckChildren)"
  }
]