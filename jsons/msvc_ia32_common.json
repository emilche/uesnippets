[
  {
    "label": "cpu_ctl_env",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cpu_ctl_env"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_machine_msvc_ia32_common_H)"
  },
  {
    "label": "supported()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # define __TBB_machine_msvc_ia32_common_H # include<intrin . h> # if ! _M_X64 | | __INTEL_COMPILER # define __TBB_X86_MSVC_INLINE_ASM_AVAILABLE 1 # else # define __TBB_X86_MSVC_INLINE_ASM_AVAILABLE 0 # define __TBB_NO_X86_MSVC_INLINE_ASM_MSG \" The compiler being used is not)",
    "insertText": "supported(outdated?)\" #endif #if _M_X64 #define __TBB_r(reg_name) r##reg_name #define __TBB_W(name)"
  },
  {
    "label": "__TBB_r()",
    "kind": "Method",
    "detail": "Function (namespace internal { namespace msvc_intrinsics { typedef __int64 word ; } } } # else # define)",
    "insertText": "__TBB_r(reg_name) e##reg_name #define __TBB_W(name)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMICS()",
    "kind": "Method",
    "detail": "Function (namespace internal { namespace msvc_intrinsics { typedef long word ; } } } # endif # if __TBB_MSVC_PART_WORD_INTERLOCKED_INTRINSICS_PRESENT # define)",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMICS(S,B,T,U) \\ __pragma(intrinsic( _InterlockedCompareExchange##B )) \\ static inline T __TBB_machine_cmpswp##S ( volatile void * ptr, U value, U comparand)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (\\ return _InterlockedCompareExchange # #)",
    "insertText": "B((T*)ptr, value, comparand)"
  },
  {
    "label": "__pragma()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "__pragma(intrinsic( _InterlockedExchangeAdd##B )) \\ static inline T __TBB_machine_fetchadd##S ( volatile void * ptr, U addend)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (\\ return _InterlockedExchangeAdd # #)",
    "insertText": "B((T*)ptr, addend)"
  },
  {
    "label": "__pragma()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "__pragma(intrinsic( _InterlockedExchange##B )) \\ static inline T __TBB_machine_fetchstore##S ( volatile void * ptr, U value)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (\\ return _InterlockedExchange # #)",
    "insertText": "B((T*)ptr, value)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMICS()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMICS(1,8,char,__int8) __TBB_MACHINE_DEFINE_ATOMICS(2,16,short,__int16) __TBB_MACHINE_DEFINE_ATOMICS(4,,long,__int32) #if __TBB_WORDSIZE==8 __TBB_MACHINE_DEFINE_ATOMICS(8,64,__int64,__int64) #endif #undef __TBB_MACHINE_DEFINE_ATOMICS #endif #if _MSC_VER>=1300 || __INTEL_COMPILER>=1100 #pragma intrinsic(_ReadWriteBarrier) #pragma intrinsic(_mm_mfence) #define __TBB_compiler_fence() _ReadWriteBarrier() #define __TBB_full_memory_fence() _mm_mfence() #elif __TBB_X86_MSVC_INLINE_ASM_AVAILABLE #define __TBB_compiler_fence()"
  },
  {
    "label": "__TBB_full_memory_fence()",
    "kind": "Method",
    "detail": "Function (__asm nop } # define)",
    "insertText": "__TBB_full_memory_fence()"
  },
  {
    "label": "__TBB_control_consistency_helper()",
    "kind": "Method",
    "detail": "Function (__asm mfence } # else # error Unsupported compiler ; define __TBB_ { control,acquire,release } _consistency_helper to support it # endif # define)",
    "insertText": "__TBB_control_consistency_helper() __TBB_compiler_fence() #define __TBB_acquire_consistency_helper() __TBB_compiler_fence() #define __TBB_release_consistency_helper() __TBB_compiler_fence() #if (_MSC_VER>=1300) || (__INTEL_COMPILER) #pragma intrinsic(_mm_pause)"
  },
  {
    "label": "pause()",
    "kind": "Method",
    "detail": "Function (namespace internal { namespace msvc_intrinsics { void)",
    "insertText": "pause(uintptr_t delay)"
  },
  {
    "label": "__TBB_Pause()",
    "kind": "Method",
    "detail": "Function (} } } } # define)",
    "insertText": "__TBB_Pause(V) tbb::internal::msvc_intrinsics::pause(V) #define __TBB_SINGLE_PAUSE _mm_pause()"
  },
  {
    "label": "__TBB_r()",
    "kind": "Method",
    "detail": "Function (_asm { mov)",
    "insertText": "__TBB_r(ax), delay __TBB_L1: pause add __TBB_r(ax)"
  },
  {
    "label": "__TBB_Pause()",
    "kind": "Method",
    "detail": "Function (} } } } # define)",
    "insertText": "__TBB_Pause(V) tbb::internal::msvc_inline_asm::pause(V) #define __TBB_SINGLE_PAUSE __asm pause #endif #if (_MSC_VER>=1400 && !__INTEL_COMPILER) || (__INTEL_COMPILER>=1200) #pragma intrinsic(__TBB_W(_BitScanReverse))"
  },
  {
    "label": "lg_bsr()",
    "kind": "Method",
    "detail": "Function (namespace internal { namespace msvc_intrinsics { uintptr_t)",
    "insertText": "lg_bsr(uintptr_t i)"
  },
  {
    "label": "__TBB_W()",
    "kind": "Method",
    "detail": "Function (unsigned long j ;)",
    "insertText": "__TBB_W(_BitScanReverse)( &j, i)"
  },
  {
    "label": "__TBB_r()",
    "kind": "Method",
    "detail": "Function (uintptr_t j ; __asm { bsr)",
    "insertText": "__TBB_r(ax), i mov j, __TBB_r(ax)"
  },
  {
    "label": "__TBB_Log2()",
    "kind": "Method",
    "detail": "Function (} } } } # define)",
    "insertText": "__TBB_Log2(V) tbb::internal::msvc_inline_asm::lg_bsr(V) #endif #if _MSC_VER>=1400 #pragma intrinsic(__TBB_W(_InterlockedOr)) #pragma intrinsic(__TBB_W(_InterlockedAnd))"
  },
  {
    "label": "lock_or()",
    "kind": "Method",
    "detail": "Function (namespace internal { namespace msvc_intrinsics { void)",
    "insertText": "lock_or(volatile void *operand, intptr_t addend)"
  },
  {
    "label": "__TBB_W()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_W(_InterlockedOr)((volatile word*)operand, addend)"
  },
  {
    "label": "lock_and()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "lock_and(volatile void *operand, intptr_t addend)"
  },
  {
    "label": "__TBB_W()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_W(_InterlockedAnd)((volatile word*)operand, addend)"
  },
  {
    "label": "__TBB_AtomicOR()",
    "kind": "Method",
    "detail": "Function (} } } } # define)",
    "insertText": "__TBB_AtomicOR(P,V) tbb::internal::msvc_intrinsics::lock_or(P,V) #define __TBB_AtomicAND(P,V) tbb::internal::msvc_intrinsics::lock_and(P,V)"
  },
  {
    "label": "lock_or()",
    "kind": "Method",
    "detail": "Function (namespace internal { namespace msvc_inline_asm { void)",
    "insertText": "lock_or(volatile void *operand, __int32 addend)"
  },
  {
    "label": "lock_and()",
    "kind": "Method",
    "detail": "Function (__asm { mov eax,addend mov edx,[ operand ] lock or [ edx ],eax } } void)",
    "insertText": "lock_and(volatile void *operand, __int32 addend)"
  },
  {
    "label": "__TBB_AtomicOR()",
    "kind": "Method",
    "detail": "Function (__asm { mov eax,addend mov edx,[ operand ] lock and [ edx ],eax } } } } } # define)",
    "insertText": "__TBB_AtomicOR(P,V) tbb::internal::msvc_inline_asm::lock_or(P,V) #define __TBB_AtomicAND(P,V) tbb::internal::msvc_inline_asm::lock_and(P,V) #endif #pragma intrinsic(__rdtsc)"
  },
  {
    "label": "__TBB_machine_time_stamp()",
    "kind": "Method",
    "detail": "Function (namespace internal { typedef uint64_t machine_tsc_t ; } } tbb::internal::machine_tsc_t)",
    "insertText": "__TBB_machine_time_stamp()"
  },
  {
    "label": "__TBB_time_stamp()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "__TBB_time_stamp() __TBB_machine_time_stamp()"
  },
  {
    "label": "__TBB_get_cpu_ctl_env()",
    "kind": "Method",
    "detail": "Function (namespace internal { class cpu_ctl_env ; } } # if __TBB_X86_MSVC_INLINE_ASM_AVAILABLE void)",
    "insertText": "__TBB_get_cpu_ctl_env(tbb::internal::cpu_ctl_env* ctl)"
  },
  {
    "label": "__TBB_r()",
    "kind": "Method",
    "detail": "Function (__asm { __asm mov)",
    "insertText": "__TBB_r(ax), ctl __asm stmxcsr [__TBB_r(ax)] __asm fstcw [__TBB_r(ax)+4] } } inline void __TBB_set_cpu_ctl_env ( const tbb::internal::cpu_ctl_env* ctl)"
  },
  {
    "label": "__TBB_r()",
    "kind": "Method",
    "detail": "Function (__asm { __asm mov)",
    "insertText": "__TBB_r(ax), ctl __asm ldmxcsr [__TBB_r(ax)] __asm fldcw [__TBB_r(ax)"
  },
  {
    "label": "__TBB_get_cpu_ctl_env()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "__TBB_get_cpu_ctl_env(tbb::internal::cpu_ctl_env*)"
  },
  {
    "label": "__TBB_set_cpu_ctl_env()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "__TBB_set_cpu_ctl_env(const tbb::internal::cpu_ctl_env*)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif namespace tbb { namespace internal { class cpu_ctl_env { private : int mxcsr ; short x87cw ; const int MXCSR_CONTROL_MASK = ~ 0 x3f ; public : bool)",
    "insertText": "operator(const cpu_ctl_env& ctl)"
  },
  {
    "label": "__TBB_get_cpu_ctl_env()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_get_cpu_ctl_env(this)"
  },
  {
    "label": "set_env()",
    "kind": "Method",
    "detail": "Function (mxcsr& = MXCSR_CONTROL_MASK ; } void)",
    "insertText": "set_env()"
  },
  {
    "label": "__TBB_set_cpu_ctl_env()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_set_cpu_ctl_env(this)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (} } ; } } # if ! __TBB_WIN8UI_SUPPORT \" C \")",
    "insertText": "__declspec(dllimport) int __stdcall SwitchToThread( void)"
  },
  {
    "label": "__TBB_Yield()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TBB_Yield() SwitchToThread() extern \"C\" __declspec(dllimport) void __stdcall Sleep( unsigned long)"
  },
  {
    "label": "__TBB_Sleep()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TBB_Sleep(v) Sleep( v ) #else #include<thread> #include<chrono> #define __TBB_Yield() std::this_thread::yield() #define __TBB_Sleep(v) std::this_thread::sleep_for( std::chrono::milliseconds(v))"
  },
  {
    "label": "__TBB_machine_try_lock_elided()",
    "kind": "Method",
    "detail": "Function (__int8 __TBB_EXPORTED_FUNC)",
    "insertText": "__TBB_machine_try_lock_elided(volatile void* ptr)"
  },
  {
    "label": "__TBB_machine_unlock_elided()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "__TBB_machine_unlock_elided(volatile void* ptr)"
  },
  {
    "label": "__TBB_machine_try_lock_elided_cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_machine_try_lock_elided_cancel()"
  },
  {
    "label": "__TBB_machine_transaction_conflict_abort()",
    "kind": "Method",
    "detail": "Function (__TBB_SINGLE_PAUSE ; } # if __TBB_TSX_INTRINSICS_PRESENT # define __TBB_machine_is_in_transaction _xtest # define __TBB_machine_begin_transaction _xbegin # define __TBB_machine_end_transaction _xend # define)",
    "insertText": "__TBB_machine_transaction_conflict_abort() _xabort(0xFF) #else __int8 __TBB_EXPORTED_FUNC __TBB_machine_is_in_transaction()"
  },
  {
    "label": "__TBB_machine_begin_transaction()",
    "kind": "Method",
    "detail": "Function (unsigned __int32 __TBB_EXPORTED_FUNC)",
    "insertText": "__TBB_machine_begin_transaction()"
  },
  {
    "label": "__TBB_machine_end_transaction()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "__TBB_machine_end_transaction()"
  },
  {
    "label": "__TBB_machine_transaction_conflict_abort()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_FUNC)",
    "insertText": "__TBB_machine_transaction_conflict_abort()"
  }
]