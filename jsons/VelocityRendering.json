[
  {
    "label": "FPrimitiveSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneInfo"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FStaticMeshBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshBatch"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FPrimitiveViewRelevance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveViewRelevance"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVelocityRendering",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVelocityRendering"
  },
  {
    "label": "FVelocityMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVelocityMeshProcessor"
  },
  {
    "label": "FOpaqueVelocityMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpaqueVelocityMeshProcessor"
  },
  {
    "label": "FTranslucentVelocityMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTranslucentVelocityMeshProcessor"
  },
  {
    "label": "GetMeshPassFromVelocityPass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHI . h \" # include \" HitProxies . h \" # include \" RendererInterface . h \" # include \" DepthRendering . h \" class FPrimitiveSceneInfo ; class FPrimitiveSceneProxy ; class FScene ; class FStaticMeshBatch ; class FViewInfo ; struct FPrimitiveViewRelevance ; enum class EVelocityPass : uint32 { Opaque = 0,Translucent,Count } ; EMeshPass::Type)",
    "insertText": "GetMeshPassFromVelocityPass(EVelocityPass VelocityPass)"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (struct FVelocityRendering { EPixelFormat)",
    "insertText": "GetFormat(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "GetCreateFlags()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags)",
    "insertText": "GetCreateFlags(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "GetRenderTargetDesc()",
    "kind": "Method",
    "detail": "Function (FRDGTextureDesc)",
    "insertText": "GetRenderTargetDesc(EShaderPlatform ShaderPlatform, FIntPoint Extent, const bool bRequireMultiView = false)"
  },
  {
    "label": "IsVelocityPassSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVelocityPassSupported(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "DepthPassCanOutputVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DepthPassCanOutputVelocity(ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "BasePassCanOutputVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BasePassCanOutputVelocity(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "IsParallelVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParallelVelocity(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "FVelocityMeshProcessor()",
    "kind": "Method",
    "detail": "Function (} ; class FVelocityMeshProcessor : public FMeshPassProcessor { public :)",
    "insertText": "FVelocityMeshProcessor(EMeshPass::Type MeshPassType, const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FSceneView* InViewIfDynamicMeshCommand, const FMeshPassProcessorRenderState& InPassDrawRenderState, FMeshPassDrawListContext* InDrawListContext)"
  },
  {
    "label": "PrimitiveHasVelocityForView()",
    "kind": "Method",
    "detail": "Function (FMeshPassProcessorRenderState PassDrawRenderState ; bool)",
    "insertText": "PrimitiveHasVelocityForView(const FViewInfo& View, const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Process(const FMeshBatch& MeshBatch, uint64 BatchElementMask, int32 StaticMeshId, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT MaterialResource, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode)"
  },
  {
    "label": "CollectPSOInitializersInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollectPSOInitializersInternal(const FSceneTexturesConfig& SceneTexturesConfig, const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FMaterial& RESTRICT MaterialResource, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "FOpaqueVelocityMeshProcessor()",
    "kind": "Method",
    "detail": "Function (protected : EDepthDrawingMode EarlyZPassMode = DDM_None ; } ; class FOpaqueVelocityMeshProcessor : public FSceneRenderingAllocatorObject<FOpaqueVelocityMeshProcessor>,public FVelocityMeshProcessor { public :)",
    "insertText": "FOpaqueVelocityMeshProcessor(const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FSceneView* InViewIfDynamicMeshCommand, const FMeshPassProcessorRenderState& InPassDrawRenderState, FMeshPassDrawListContext* InDrawListContext, EDepthDrawingMode InEarlyZPassMode)"
  },
  {
    "label": "PrimitiveCanHaveVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrimitiveCanHaveVelocity(EShaderPlatform ShaderPlatform, const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "PrimitiveCanHaveVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrimitiveCanHaveVelocity(EShaderPlatform ShaderPlatform, bool bDrawVelocity, bool bHasStaticLighting)"
  },
  {
    "label": "PrimitiveHasVelocityForFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrimitiveHasVelocityForFrame(const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "TryAddMeshBatch()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryAddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial* Material)"
  },
  {
    "label": "AddMeshBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId = -1)"
  },
  {
    "label": "CollectPSOInitializers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOInitializers(const FSceneTexturesConfig& SceneTexturesConfig, const FMaterial& Material, const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FPSOPrecacheParams& PreCacheParams, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "FTranslucentVelocityMeshProcessor()",
    "kind": "Method",
    "detail": "Function (} ; class FTranslucentVelocityMeshProcessor : public FSceneRenderingAllocatorObject<FTranslucentVelocityMeshProcessor>,public FVelocityMeshProcessor { public :)",
    "insertText": "FTranslucentVelocityMeshProcessor(const FScene* Scene, ERHIFeatureLevel::Type FeatureLevel, const FSceneView* InViewIfDynamicMeshCommand, const FMeshPassProcessorRenderState& InPassDrawRenderState, FMeshPassDrawListContext* InDrawListContext)"
  }
]