[
  {
    "label": "FChunkCacheWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkCacheWorker"
  },
  {
    "label": "FFileIoStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileIoStore"
  },
  {
    "label": "FFilePackageStoreBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilePackageStoreBackend"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IAsyncReadFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAsyncReadFileHandle"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "FPakFileDirectoryVisitorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakFileDirectoryVisitorBase"
  },
  {
    "label": "FIoContainerHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoContainerHeader"
  },
  {
    "label": "FPakChunkSignatureCheckFailedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakChunkSignatureCheckFailedData"
  },
  {
    "label": "FPakInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakInfo"
  },
  {
    "label": "FPakCompressedBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakCompressedBlock"
  },
  {
    "label": "FPakEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakEntry"
  },
  {
    "label": "FPakEntryLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakEntryLocation"
  },
  {
    "label": "FPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakFile"
  },
  {
    "label": "FSharedPakReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedPakReader"
  },
  {
    "label": "FPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakFile"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FPakEntryPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakEntryPair"
  },
  {
    "label": "FPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakFile"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopedPakDirectoryIndexAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedPakDirectoryIndexAccess"
  },
  {
    "label": "FArchiveAndLastAccessTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchiveAndLastAccessTime"
  },
  {
    "label": "FPakPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakPlatformFile"
  },
  {
    "label": "FChunkCacheWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChunkCacheWorker"
  },
  {
    "label": "IMappedFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMappedFileHandle"
  },
  {
    "label": "FRefCountBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRefCountBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ContainerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerType"
  },
  {
    "label": "FBaseIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseIterator"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FPakEntryIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakEntryIterator"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "FFilenameIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilenameIterator"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FIndexSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexSettings"
  },
  {
    "label": "ContainerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerType"
  },
  {
    "label": "ContainerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerType"
  },
  {
    "label": "FPakNoEncryption",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakNoEncryption"
  },
  {
    "label": "FPakReaderPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakReaderPolicy"
  },
  {
    "label": "FPakFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakFileHandle"
  },
  {
    "label": "FPakPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakPlatformFile"
  },
  {
    "label": "FPakListEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakListEntry"
  },
  {
    "label": "FPakListDeferredEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakListDeferredEntry"
  },
  {
    "label": "FPakSignatureFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakSignatureFile"
  },
  {
    "label": "FPakSigningFailureHandlerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakSigningFailureHandlerData"
  },
  {
    "label": "FPakSignatureFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakSignatureFile"
  },
  {
    "label": "FPakSignatureFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakSignatureFile"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (PAKFILE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogPakFile, Log, All)"
  },
  {
    "label": "ComputePakChunkHash()",
    "kind": "Method",
    "detail": "Function (TPakChunkHash)",
    "insertText": "ComputePakChunkHash(const void* InData, int64 InDataSizeInBytes)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LexToString(InHash)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (method)",
    "insertText": "for(uint8 Index = 0; Index < CompressionMethods.Num()"
  },
  {
    "label": "GetFlag()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetFlag(Flag_Encrypted)"
  },
  {
    "label": "GetFlag()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetFlag(Flag_Deleted)"
  },
  {
    "label": "VerifyPakEntriesMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerifyPakEntriesMatch(const FPakEntry& FileEntryA, const FPakEntry& FileEntryB)"
  },
  {
    "label": "FPakEntryLocation()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FPakEntryLocation()"
  },
  {
    "label": "FPakEntryLocation()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FPakEntryLocation(Offset)"
  },
  {
    "label": "FPakEntryLocation()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FPakEntryLocation(-ListIndex - 1)"
  },
  {
    "label": "FSharedPakReader()",
    "kind": "Method",
    "detail": "Function (PAKFILE_API)",
    "insertText": "FSharedPakReader(FArchive* InArchive, FPakFile* InPakFile)"
  },
  {
    "label": "FSharedPakReader()",
    "kind": "Method",
    "detail": "Function (PAKFILE_API)",
    "insertText": "FSharedPakReader(FSharedPakReader&& Other)"
  },
  {
    "label": "RecreatePakReaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreatePakReaders(IPlatformFile* LowerLevel)"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (FFilenameIterator)",
    "insertText": "It(*this)"
  },
  {
    "label": "FPakFile()",
    "kind": "Method",
    "detail": "Function (PAKFILE_API)",
    "insertText": "FPakFile(const TCHAR* Filename, bool bIsSigned)"
  },
  {
    "label": "FPakFile()",
    "kind": "Method",
    "detail": "Function (PAKFILE_API)",
    "insertText": "FPakFile(IPlatformFile* LowerLevel, const TCHAR* Filename, bool bIsSigned, bool bLoadIndex = true)"
  },
  {
    "label": "FPakFile()",
    "kind": "Method",
    "detail": "Function (PAKFILE_API)",
    "insertText": "FPakFile(FArchive* Archive)"
  },
  {
    "label": "GetSharedReader()",
    "kind": "Method",
    "detail": "Function (FSharedPakReader)",
    "insertText": "GetSharedReader(IPlatformFile* LowerLevel)"
  },
  {
    "label": "ReturnSharedReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnSharedReader(FArchive* SharedReader)"
  },
  {
    "label": "ReleaseOldReaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOldReaders(double MaxAgeSeconds)"
  },
  {
    "label": "FindPrunedDirectoryInternal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FindPrunedDirectoryInternal(RelativePathFromMount)"
  },
  {
    "label": "ScopeAccess()",
    "kind": "Method",
    "detail": "Function (FScopedPakDirectoryIndexAccess)",
    "insertText": "ScopeAccess(*this)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Check()"
  },
  {
    "label": "HashPath()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "HashPath(const TCHAR* RelativePathFromMount, uint64 Seed, int32 PakFileVersion)"
  },
  {
    "label": "EncodePakEntriesIntoIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodePakEntriesIntoIndex(int32 InNumEntries, const ReadNextEntryFunction& InReadNextEntry, const TCHAR* InPakFilename, const FPakInfo& InPakInfo, const FString& MountPoint,\n\t\tint32& OutNumEncodedEntries, int32& OutNumDeletedEntries, uint64* OutPathHashSeed,\n\t\tFDirectoryIndex* OutDirectoryIndex, FPathHashIndex* OutPathHashIndex, TArray<uint8>& OutEncodedPakEntries, TArray<FPakEntry>& OutNonEncodableEntries, TMap<uint64, FString>* InOutCollisionDetection,\n\t\tint32 PakFileVersion)"
  },
  {
    "label": "GetPakEntry()",
    "kind": "Method",
    "detail": "Function (EFindResult)",
    "insertText": "GetPakEntry(const FPakEntryLocation& FPakEntryLocation, FPakEntry* OutEntry, const TArray<uint8>& EncodedPakEntries, const TArray<FPakEntry>& Files, const FPakInfo& Info)"
  },
  {
    "label": "PruneDirectoryIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneDirectoryIndex(FDirectoryIndex& InOutDirectoryIndex, FDirectoryIndex* PrunedDirectoryIndex, const FString& MountPoint)"
  },
  {
    "label": "IsPakKeepFullDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPakKeepFullDirectory()"
  },
  {
    "label": "IsPakWritePathHashIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPakWritePathHashIndex()"
  },
  {
    "label": "IsPakWriteFullDirectoryIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPakWriteFullDirectoryIndex()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FArchive& Reader, bool bLoadIndex = true)"
  },
  {
    "label": "LoadIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadIndex(FArchive& Reader)"
  },
  {
    "label": "IsPakValidatePruning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPakValidatePruning()"
  },
  {
    "label": "IsPakDelayPruning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPakDelayPruning()"
  },
  {
    "label": "AddEntryToIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntryToIndex(const FString& Filename, const FPakEntryLocation& EntryLocation, const FString& MountPoint, uint64 PathHashSeed,\n\t\tFDirectoryIndex* DirectoryIndex, FPathHashIndex* PathHashIndex, TMap<uint64, FString>* CollisionDetection, int32 PakFileVersion)"
  },
  {
    "label": "EncodePakEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncodePakEntry(FArchive& Ar, const FPakEntry& InPakEntry, const FPakInfo& InInfo)"
  },
  {
    "label": "DecodePakEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecodePakEntry(const uint8* SourcePtr, FPakEntry& OutEntry, const FPakInfo& InInfo)"
  },
  {
    "label": "LoadIndexInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadIndexInternal(FArchive& Reader)"
  },
  {
    "label": "LoadLegacyIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadLegacyIndex(FArchive& Reader)"
  },
  {
    "label": "DecryptAndValidateIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecryptAndValidateIndex(FArchive& Reader, TArray<uint8>& IndexData, FSHAHash& InExpectedHash, FSHAHash& OutActualHash)"
  },
  {
    "label": "AddSpecialFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpecialFile(const FPakEntry& Entry, const FString& Filename)"
  },
  {
    "label": "ReadInternal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ReadInternal(Destination, BytesToRead, Offset)"
  },
  {
    "label": "ScopedLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopedLock(&PakListCritical)"
  },
  {
    "label": "DirectoryExistsInPrunedPakFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExistsInPrunedPakFiles(const TCHAR* Directory)"
  },
  {
    "label": "GetPakOrderFromPakFilePath()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPakOrderFromPakFilePath(const FString& PakFilePath)"
  },
  {
    "label": "HandleUnmountPakDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleUnmountPakDelegate(const FString& PakFilePath)"
  },
  {
    "label": "FindPakFilesInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPakFilesInDirectory(IPlatformFile* LowLevelFile, const TCHAR* Directory, const FString& WildCard, TArray<FString>& OutPakFiles)"
  },
  {
    "label": "FindAllPakFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAllPakFiles(IPlatformFile* LowLevelFile, const TArray<FString>& PakFolders, const FString& WildCard, TArray<FString>& OutPakFiles)"
  },
  {
    "label": "IsNonPakFilenameAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonPakFilenameAllowed(const FString& InFilename)"
  },
  {
    "label": "RegisterEncryptionKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEncryptionKey(const FGuid& InEncryptionKeyGuid, const FAES::FAESKey& InKey)"
  },
  {
    "label": "IsPakFileInstalled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPakFileInstalled(const FString& InFilename)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"PakFile\")"
  },
  {
    "label": "SetMountStartupPaksWildCard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMountStartupPaksWildCard(const FString& WildCard)"
  },
  {
    "label": "ScopedLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopedLock(&PakListCritical)"
  },
  {
    "label": "ScopedLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopedLock(&PakListCritical)"
  },
  {
    "label": "CheckIfPakFilesExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfPakFilesExist(IPlatformFile* LowLevelFile, const TArray<FString>& PakFolders)"
  },
  {
    "label": "GetPakFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPakFolders(const TCHAR* CmdLine, TArray<FString>& OutPakFolders)"
  },
  {
    "label": "GetPakEncryptionKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPakEncryptionKey(FAES::FAESKey& OutKey, const FGuid& InEncryptionKeyGuid)"
  },
  {
    "label": "GetPakSignatureFile()",
    "kind": "Method",
    "detail": "Function (ESPMode::ThreadSafe>)",
    "insertText": "GetPakSignatureFile(const TCHAR* InFilename)"
  },
  {
    "label": "RemoveCachedPakSignaturesFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCachedPakSignaturesFile(const TCHAR* InFilename)"
  },
  {
    "label": "FPakPlatformFile()",
    "kind": "Method",
    "detail": "Function (PAKFILE_API)",
    "insertText": "FPakPlatformFile()"
  },
  {
    "label": "OptimizeMemoryUsageForMountedPaks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OptimizeMemoryUsageForMountedPaks()"
  },
  {
    "label": "Mount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Mount(const TCHAR* InPakFilename, uint32 PakOrder, const TCHAR* InPath = nullptr, bool bLoadIndex = true, FPakListEntry* OutPakListEntry = nullptr)"
  },
  {
    "label": "Unmount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Unmount(const TCHAR* InPakFilename)"
  },
  {
    "label": "MountAllPakFiles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MountAllPakFiles(const TArray<FString>& PakFolders)"
  },
  {
    "label": "MountAllPakFiles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MountAllPakFiles(const TArray<FString>& PakFolders, const FString& WildCard)"
  },
  {
    "label": "ReloadPakReaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReloadPakReaders()"
  },
  {
    "label": "MakeUniquePakFilesForTheseFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUniquePakFilesForTheseFiles(const TArray<TArray<FString>>& InFiles)"
  },
  {
    "label": "FindFileInPakFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindFileInPakFiles(TArray<FPakListEntry>& Paks, const TCHAR* Filename,\n\t\tTRefCountPtr<FPakFile>* OutPakFile, FPakEntry* OutEntry = nullptr)"
  },
  {
    "label": "FindFileInPakFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindFileInPakFiles(const TCHAR* Filename, TRefCountPtr<FPakFile>* OutPakFile = nullptr,\n\t\tFPakEntry* OutEntry = nullptr)"
  },
  {
    "label": "ScopeAccess()",
    "kind": "Method",
    "detail": "Function (FPakFile::FScopedPakDirectoryIndexAccess)",
    "insertText": "ScopeAccess(*PakFile)"
  },
  {
    "label": "DirectoryIt()",
    "kind": "Method",
    "detail": "Function (FPakDirectory::TConstIterator)",
    "insertText": "DirectoryIt(*PakDirectory)"
  },
  {
    "label": "RelativeFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RelativeFilename(Filename)"
  },
  {
    "label": "BroadcastPakChunkSignatureCheckFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPakChunkSignatureCheckFailure(const FPakChunkSignatureCheckFailedData& InData)"
  },
  {
    "label": "BroadcastPakPrincipalSignatureTableCheckFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPakPrincipalSignatureTableCheckFailure(const FString& InFilename)"
  },
  {
    "label": "BroadcastPakMasterSignatureTableCheckFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPakMasterSignatureTableCheckFailure(const FString& InFilename)"
  },
  {
    "label": "GetPrunedFilenamesInChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrunedFilenamesInChunk(const FString& InPakFilename, const TArray<int32>& InChunkIDs, TArray<FString>& OutFileList)"
  },
  {
    "label": "GetPrunedFilenamesInPakFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrunedFilenamesInPakFile(const FString& InPakFilename, TArray<FString>& OutFileList)"
  },
  {
    "label": "GetFilenamesFromIostoreContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilenamesFromIostoreContainer(const FString& InContainerName, TArray<FString>& OutFileList)"
  },
  {
    "label": "GetFilenamesFromIostoreByBlockIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFilenamesFromIostoreByBlockIndex(const FString& InContainerName, const TArray<int32>& InBlockIndex, TArray<FString>& OutFileList)"
  },
  {
    "label": "ReleaseOldReaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOldReaders()"
  },
  {
    "label": "HandlePakListCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePakListCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleMountCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMountCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleUnmountCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUnmountCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePakCorruptCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePakCorruptCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleReloadPakReadersCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReloadPakReadersCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "TrackPak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackPak(const TCHAR* Filename, const FPakEntry* PakEntry)"
  },
  {
    "label": "IterateDirectoryInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryInternal(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor, bool bRecursive)"
  },
  {
    "label": "IterateDirectoryInPakFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryInPakFiles(const TCHAR* Directory,\n\t\tUE::PakFile::Private::FPakFileDirectoryVisitorBase& Visitor, bool bRecursive,\n\t\tTSet<FString>& FilesVisitedInPak)"
  },
  {
    "label": "IterateDirectoryStatInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatInternal(const TCHAR* Directory,\n\t\tIPlatformFile::FDirectoryStatVisitor& Visitor, bool bRecursive)"
  },
  {
    "label": "FindFilesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFilesInternal(TArray<FString>& FoundFiles,\n\t\tconst TCHAR* Directory, const TCHAR* FileExtension, bool bRecursive)"
  },
  {
    "label": "ComputeCurrentPrincipalHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ComputeCurrentPrincipalHash()"
  }
]