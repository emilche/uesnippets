[
  {
    "label": "FHazardPointerCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHazardPointerCollection"
  },
  {
    "label": "FHazardDeleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHazardDeleter"
  },
  {
    "label": "THazardPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THazardPointer"
  },
  {
    "label": "FTlsData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTlsData"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "alignas"
  },
  {
    "label": "THazardDeleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THazardDeleter"
  },
  {
    "label": "FHazardRecordChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHazardRecordChunk"
  },
  {
    "label": "FPseudo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPseudo"
  },
  {
    "label": "FHazardDeleter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformMemory . h \" # include \" HAL / PlatformTLS . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / AssertionMacros . h \" # include<atomic> class FHazardPointerCollection ; namespace HazardPointer_Impl { class FHazardDeleter { class::FHazardPointerCollection ; protected : void* Pointer ;)",
    "insertText": "FHazardDeleter(void* InPointer) : Pointer(InPointer)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Delete()"
  },
  {
    "label": "FHazardDeleter()",
    "kind": "Method",
    "detail": "Function (} ; public :)",
    "insertText": "FHazardDeleter(const FHazardDeleter& Other)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(this, &Other, sizeof(FHazardDeleter))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FHazardDeleter&)",
    "insertText": "operator(const FHazardDeleter& Other)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} ReclamationList .)",
    "insertText": "Empty()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} } ; class)",
    "insertText": "alignas(PLATFORM_CACHE_LINE_SIZE * 2)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (class FHazardPointerCollection ; template<,bool> class THazardPointer ; uintptr_t FreeHazardEntry = ~)",
    "insertText": "uintptr_t(0)"
  },
  {
    "label": "FHazardRecord()",
    "kind": "Method",
    "detail": "Function (std::atomic<uintptr_t> Hazard { FreeHazardEntry } ; # ifdef _MSC_VER public :)",
    "insertText": "FHazardRecord()"
  },
  {
    "label": "GetHazard()",
    "kind": "Method",
    "detail": "Function (# endif void*)",
    "insertText": "GetHazard()"
  },
  {
    "label": "SetHazard()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] void*)",
    "insertText": "SetHazard(void* InHazard)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Hazard .)",
    "insertText": "store(reinterpret_cast<uintptr_t>(InHazard), std::memory_order_release)"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_thread_fence(std::memory_order_seq_cst)"
  },
  {
    "label": "Retire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Retire()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Hazard .)",
    "insertText": "store(0, std::memory_order_release)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (Hazard .)",
    "insertText": "store(FreeHazardEntry, std::memory_order_release)"
  },
  {
    "label": "THazardDeleter()",
    "kind": "Method",
    "detail": "Function (} } ; template<D> class THazardDeleter final : public HazardPointer_Impl::FHazardDeleter { public :)",
    "insertText": "THazardDeleter(D* InPointer) : HazardPointer_Impl::FHazardDeleter(reinterpret_cast<void*>(InPointer))"
  },
  {
    "label": "D()",
    "kind": "Method",
    "detail": "Function (D* Ptr = reinterpret_cast<)",
    "insertText": "D(Pointer)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (delete Ptr ; } } ; uint32 HazardChunkSize = 3 2 ; struct FHazardRecordChunk { FHazardRecord Records [ HazardChunkSize ] = { } ; std::atomic<FHazardRecordChunk*> Next { nullptr } ; void* operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} void operator)",
    "insertText": "delete(void* Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "Collect()",
    "kind": "Method",
    "detail": "Function (} } ; FHazardRecordChunk Head ; FCriticalSection AllTlsVariablesCS ; FCriticalSection HazardRecordBlocksCS ; TArray<FTlsData*> AllTlsVariables ; TArray<FHazardRecordChunk*> HazardRecordBlocks ; uint32 CollectablesTlsSlot = FPlatformTLS::InvalidTlsSlot ; std::atomic_uint TotalNumHazardRecords { HazardChunkSize } ; void)",
    "insertText": "Collect(TArray<HazardPointer_Impl::FHazardDeleter>& Collectables)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(const HazardPointer_Impl::FHazardDeleter& Deleter, int32 CollectLimit)"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (template<bool Cached> FHazardRecord*)",
    "insertText": "Grow()"
  },
  {
    "label": "FHazardPointerCollection()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FHazardPointerCollection()"
  },
  {
    "label": "AllocTlsSlot()",
    "kind": "Method",
    "detail": "Function (CollectablesTlsSlot =)",
    "insertText": "AllocTlsSlot()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (template<bool Cached> FHazardRecord*)",
    "insertText": "Acquire()"
  },
  {
    "label": "GetThreadId()",
    "kind": "Method",
    "detail": "Function (struct FPseudo { uint32)",
    "insertText": "GetThreadId()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (std::atomic_uint counter { 0 } ; uint32 value = counter .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "value((value >> 16) ^ value)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "value(value >> 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif FHazardRecordChunk* p =& Head ;)",
    "insertText": "if(Cached)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (p = p -> Next .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (uintptr_t Nullptr = 0 ; uintptr_t FreeEntry = FHazardRecord::FreeHazardEntry ; uint64)",
    "insertText": "i(StartIndex + idx)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TestCondition : ; })",
    "insertText": "while(p)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} template<D> void)",
    "insertText": "Delete(D* Pointer, int32 CollectLimit = -1)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete(THazardDeleter<D>(Pointer), CollectLimit)"
  },
  {
    "label": "THazardPointer()",
    "kind": "Method",
    "detail": "Function (} } } ; template<H,bool Cached = false> class THazardPointer {)",
    "insertText": "THazardPointer(const THazardPointer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (THazardPointer&)",
    "insertText": "operator(const THazardPointer&)"
  },
  {
    "label": "THazardPointer()",
    "kind": "Method",
    "detail": "Function (std::atomic<H*>* Hazard = nullptr ; FHazardPointerCollection::FHazardRecord* Record = nullptr ; public :)",
    "insertText": "THazardPointer(THazardPointer&& Other) : Hazard(Other.Hazard), Record(Other.Record)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Other . Hazard = nullptr ; Other . Record = nullptr ; } THazardPointer&)",
    "insertText": "operator(THazardPointer&& Other)"
  },
  {
    "label": "THazardPointer()",
    "kind": "Method",
    "detail": "Function (} Hazard = Other . Hazard ; Record = Other . Record ; Other . Hazard = nullptr ; Other . Record = nullptr ; return* this ; } public :)",
    "insertText": "THazardPointer()"
  },
  {
    "label": "THazardPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THazardPointer(std::atomic<H*>& InHazard, FHazardPointerCollection& Collection) : Hazard(&InHazard), Record(Collection.Acquire<Cached>())"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Record = nullptr ; Hazard = nullptr ; } H*)",
    "insertText": "Get()"
  },
  {
    "label": "HazardPointer()",
    "kind": "Method",
    "detail": "Function (H* HazardPointer ; do {)",
    "insertText": "HazardPointer(H*)Record->SetHazard(Hazard->load(std::memory_order_acquire))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(HazardPointer != Hazard->load(std::memory_order_acquire))"
  }
]