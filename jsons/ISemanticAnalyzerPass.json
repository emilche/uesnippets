[
  {
    "label": "ISemanticAnalyzerPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISemanticAnalyzerPass"
  },
  {
    "label": "ULANG_FEATURE_ID_DECL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / CompilerPasses / CompilerTypes . h \" # include \" uLang / Toolchain / ModularFeature . h \" # include \" uLang / Syntax / VstNode . h \" # include \" uLang / Common / Containers / SharedPointer . h \" namespace uLang { class ISemanticAnalyzerPass : public TModularFeature<ISemanticAnalyzerPass> {)",
    "insertText": "ULANG_FEATURE_ID_DECL(ISemanticAnalyzerPass)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize(const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp(void)"
  },
  {
    "label": "ProcessVst()",
    "kind": "Method",
    "detail": "Function (TSRef<CSemanticProgram>)",
    "insertText": "ProcessVst(const Verse::Vst::Project& Vst, const ESemanticPass Pass)"
  }
]