[
  {
    "label": "FIOAccessNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOAccessNull"
  },
  {
    "label": "FIOManagerNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOManagerNull"
  },
  {
    "label": "FParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParams"
  },
  {
    "label": "FIOManagerNull()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Async / ManualResetEvent . h \" # include \" EventLoop / IEventLoop . h \" # include \" EventLoop / IEventLoopIOManager . h \" # include \" Misc / Timespan . h \" namespace UE::EventLoop { class FIOAccessNull final : public FNoncopyable { public : } ; class FIOManagerNull final : public IIOManager { public : using FIOAccess = FIOAccessNull ; struct FParams { } ;)",
    "insertText": "FIOManagerNull(IEventLoop& EventLoop, FParams&& Params)"
  },
  {
    "label": "FIOManagerNull()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FIOManagerNull()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Notify()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Poll(FTimespan WaitTime)"
  },
  {
    "label": "WaitFor()",
    "kind": "Method",
    "detail": "Function (Event .)",
    "insertText": "WaitFor(FMonotonicTimeSpan::FromSeconds(WaitTime.GetTotalSeconds()))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Event .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetIOAccess()",
    "kind": "Method",
    "detail": "Function (} FIOAccess&)",
    "insertText": "GetIOAccess()"
  }
]