[
  {
    "label": "FTextToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextToken"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITextFilterExpressionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextFilterExpressionContext"
  },
  {
    "label": "FBasicStringFilterExpressionContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBasicStringFilterExpressionContext"
  },
  {
    "label": "FFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunction"
  },
  {
    "label": "TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TYPE"
  },
  {
    "label": "FTextFilterExpressionEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterExpressionEvaluator"
  },
  {
    "label": "TestBasicStringExpression()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" Misc / ExpressionParser . h \" # include \" Misc / ExpressionParserTypes . h \" # include \" Misc / Optional . h \" # include \" Misc / TextFilterUtils . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" class FTextToken ; enum class ETextFilterExpressionType : uint8 { Invalid,Empty,BasicString,Complex,} ; enum class ETextFilterExpressionEvaluatorMode : uint8 { BasicString,Complex,} ; class ITextFilterExpressionContext { public : bool)",
    "insertText": "TestBasicStringExpression(const FTextFilterString& InValue, const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "TestComplexExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestComplexExpression(const FName& InKey, const FTextFilterString& InValue, const ETextFilterComparisonOperation InComparisonOperation, const ETextFilterTextComparisonMode InTextComparisonMode)"
  },
  {
    "label": "ITextFilterExpressionContext()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "ITextFilterExpressionContext()"
  },
  {
    "label": "FBasicStringFilterExpressionContext()",
    "kind": "Method",
    "detail": "Function (} } ; class FBasicStringFilterExpressionContext : public ITextFilterExpressionContext { public :)",
    "insertText": "FBasicStringFilterExpressionContext(FString&& InTestString) : TestString(InTestString)"
  },
  {
    "label": "FBasicStringFilterExpressionContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBasicStringFilterExpressionContext(const FString& InTestString) : TestString(InTestString)"
  },
  {
    "label": "FTextToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextToken(const FTextToken& Other) : String(Other.String) , TextComparisonMode(Other.TextComparisonMode) , InvertResult(Other.InvertResult)"
  },
  {
    "label": "FTextToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTextToken(FTextToken&& Other) : String(MoveTemp(Other.String)) , TextComparisonMode(Other.TextComparisonMode) , InvertResult(Other.InvertResult)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FTextToken&)",
    "insertText": "operator(const FTextToken& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (String = Other . String ; TextComparisonMode = Other . TextComparisonMode ; InvertResult = Other . InvertResult ; return* this ; } FTextToken&)",
    "insertText": "operator(FTextToken&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (String =)",
    "insertText": "MoveTemp(Other.String)"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (TextComparisonMode = Other . TextComparisonMode ; InvertResult = Other . InvertResult ; return* this ; } const FTextFilterString&)",
    "insertText": "GetString()"
  },
  {
    "label": "EvaluateAsComplexExpression()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EvaluateAsComplexExpression(const ITextFilterExpressionContext* InContext, const FTextFilterString& InKey, const ETextFilterComparisonOperation InComparisonOperation)"
  },
  {
    "label": "TestComplexExpression()",
    "kind": "Method",
    "detail": "Function (const bool bMatched = InContext ->)",
    "insertText": "TestComplexExpression(InKey.AsName(), String, InComparisonOperation, TextComparisonMode)"
  },
  {
    "label": "GetTextComparisonMode()",
    "kind": "Method",
    "detail": "Function (} ETextFilterTextComparisonMode)",
    "insertText": "GetTextComparisonMode()"
  },
  {
    "label": "DEFINE_EXPRESSION_NODE_TYPE()",
    "kind": "Method",
    "detail": "Function (\\ struct TYPE \\ { \\ int32 MonikerCount = MONIKER_COUNT ; \\ const TCHAR* Monikers [ MonikerCount ] ; \\ } ; \\ } \\)",
    "insertText": "DEFINE_EXPRESSION_NODE_TYPE(TextFilterExpressionParser::TYPE, __VA_ARGS__) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FSubExpressionStart, 1, 0x0E7E1BC9, 0xF0B94D5D, 0x80F44D45, 0x85A082AA) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FSubExpressionEnd, 1, 0x5E10956D, 0x2E17411F, 0xB6469E22, 0xB5E56E6C) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FEqual, 3, 0x32457EFC, 0x4928406F, 0xBD78D943, 0x633797D1) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FNotEqual, 2, 0x8F445A19, 0xF33443D9, 0x90D6DC85, 0xB0C5D071) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FLess, 1, 0xB85E222B, 0x47E24E1F, 0xBC5A384D, 0x2FF471E1) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FLessOrEqual, 2, 0x8C0A46B0, 0x8DAA4E2B, 0xA7FE4A23, 0xEF215918) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FGreater, 1, 0x6A6247F4, 0xFD78467F, 0xA6AC1244, 0x0A31E0A5) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FGreaterOrEqual, 2, 0x09D75C5E, 0xA29A4194, 0x8E8E5278, 0xC84365FD) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FOr, 4, 0xF4778B51, 0xF535414D, 0x9C0EB5F2, 0x2F2B0FD4) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FAnd, 4, 0x7511397A, 0x02D24DC2, 0x86729800, 0xF454C320) DEFINE_TEXT_EXPRESSION_OPERATOR_NODE(FNot, 3, 0x03D78990, 0x41D04E26, 0x8E98AD2F, 0x74667868) DEFINE_EXPRESSION_NODE_TYPE(TextFilterExpressionParser::FTextToken, 0x09E49538, 0x633545E3, 0x84B5644F, 0x1F11628F)"
  },
  {
    "label": "DEFINE_EXPRESSION_NODE_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_EXPRESSION_NODE_TYPE(TextFilterExpressionParser::FFunction, 0x084E6214, 0x032FFA48, 0x9245ABF1, 0x9E248F1A)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# undef DEFINE_TEXT_EXPRESSION_OPERATOR_NODE)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FTokenFunctionHandler, const FTextFilterString&)"
  },
  {
    "label": "FTextFilterExpressionEvaluator()",
    "kind": "Method",
    "detail": "Function (class FTextFilterExpressionEvaluator { public :)",
    "insertText": "FTextFilterExpressionEvaluator(const ETextFilterExpressionEvaluatorMode InMode)"
  },
  {
    "label": "FTextFilterExpressionEvaluator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFilterExpressionEvaluator(const FTextFilterExpressionEvaluator& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTextFilterExpressionEvaluator&)",
    "insertText": "operator(const FTextFilterExpressionEvaluator& Other)"
  },
  {
    "label": "FTextFilterExpressionEvaluator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTextFilterExpressionEvaluator()"
  },
  {
    "label": "GetFilterType()",
    "kind": "Method",
    "detail": "Function (ETextFilterExpressionType)",
    "insertText": "GetFilterType()"
  },
  {
    "label": "GetFilterText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterText()"
  },
  {
    "label": "SetFilterText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetFilterText(const FText& InFilterText)"
  },
  {
    "label": "GetFilterErrorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterErrorText()"
  },
  {
    "label": "GetFilterExpressionTokens()",
    "kind": "Method",
    "detail": "Function (const TArray<FExpressionToken>&)",
    "insertText": "GetFilterExpressionTokens()"
  },
  {
    "label": "TestTextFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestTextFilter(const ITextFilterExpressionContext& InContext)"
  },
  {
    "label": "AddFunctionTokenCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFunctionTokenCallback(FString InFunctionName, FTokenFunctionHandler InCallback)"
  },
  {
    "label": "SetupGrammar()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetupGrammar()"
  },
  {
    "label": "ConstructExpressionParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructExpressionParser()"
  },
  {
    "label": "EvaluateCompiledExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EvaluateCompiledExpression(const ExpressionParser::CompileResultType& InCompiledResult, const ITextFilterExpressionContext& InContext, FText* OutErrorText)"
  }
]