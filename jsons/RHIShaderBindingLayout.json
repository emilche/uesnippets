[
  {
    "label": "FRHIUniformBufferShaderBindingLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIUniformBufferShaderBindingLayout"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHIShaderBindingLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderBindingLayout"
  },
  {
    "label": "FRHIUniformBufferShaderBindingLayout()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Containers / StaticArray . h \" # include \" Misc / Optional . h \" # include \" RHIDefinitions . h \" struct FRHIUniformBufferShaderBindingLayout { FString LayoutName ; union { struct { uint32 RegisterSpace : 4 ; uint32 CBVResourceIndex : 6 ; uint32 BaseSRVResourceIndex : 8 ; uint32 BaseUAVResourceIndex : 8 ; uint32 BaseSamplerResourceIndex : 6 ; } ; uint32 Flags ; } ;)",
    "insertText": "FRHIUniformBufferShaderBindingLayout() : Flags(0)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRHIUniformBufferShaderBindingLayout& Entry)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Entry.LayoutName)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Entry.Flags))"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (Ar<<F . LayoutName ; Ar<<F . Flags ; return Ar ; } } ; enum class EShaderBindingLayoutFlags : uint8 { None = 0,AllowMeshShaders = 1<<0,InputAssembler = 1<<1,BindlessResources = 1<<2,BindlessSamplers = 1<<3,RootConstants = 1<<4,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EShaderBindingLayoutFlags)"
  },
  {
    "label": "FRHIShaderBindingLayout()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FRHIShaderBindingLayout()"
  },
  {
    "label": "FRHIShaderBindingLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIShaderBindingLayout(EShaderBindingLayoutFlags InFlags, TConstArrayView<FRHIUniformBufferShaderBindingLayout> InUniformBufferEntries) : Flags(InFlags)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumUniformBufferEntries = InUniformBufferEntries .)",
    "insertText": "Num()"
  },
  {
    "label": "ComputeHash()",
    "kind": "Method",
    "detail": "Function (UniformBufferEntries [ Index ] = InUniformBufferEntries [ Index ] ; })",
    "insertText": "ComputeHash()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Flags))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(NumUniformBufferEntries))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(UniformBufferEntries))"
  }
]