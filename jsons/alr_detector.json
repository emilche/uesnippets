[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "AlrDetectorConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AlrDetectorConfig"
  },
  {
    "label": "AlrDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlrDetector"
  },
  {
    "label": "GoogCcStatePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GoogCcStatePrinter"
  },
  {
    "label": "Parser()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_GOOG_CC_ALR_DETECTOR_H_ # define MODULES_CONGESTION_CONTROLLER_GOOG_CC_ALR_DETECTOR_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include \" absl / types / optional . h \" # include \" api / field_trials_view . h \" # include \" modules / pacing / interval_budget . h \" # include \" rtc_base / experiments / alr_experiment . h \" # include \" rtc_base / experiments / struct_parameters_parser . h \" namespace webrtc { class RtcEventLog ; struct AlrDetectorConfig { double bandwidth_usage_ratio = 0 . 6 5 ; double start_budget_level_ratio = 0 . 8 0 ; double stop_budget_level_ratio = 0 . 5 0 ; std::unique_ptr<StructParametersParser>)",
    "insertText": "Parser()"
  },
  {
    "label": "AlrDetector()",
    "kind": "Method",
    "detail": "Function (} ; class AlrDetector { public :)",
    "insertText": "AlrDetector(AlrDetectorConfig config, RtcEventLog* event_log)"
  },
  {
    "label": "AlrDetector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlrDetector(const FieldTrialsView* key_value_config)"
  },
  {
    "label": "AlrDetector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AlrDetector(const FieldTrialsView* key_value_config, RtcEventLog* event_log)"
  },
  {
    "label": "AlrDetector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AlrDetector()"
  },
  {
    "label": "OnBytesSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBytesSent(size_t bytes_sent, int64_t send_time_ms)"
  },
  {
    "label": "SetEstimatedBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEstimatedBitrate(int bitrate_bps)"
  },
  {
    "label": "GetApplicationLimitedRegionStartTime()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "GetApplicationLimitedRegionStartTime()"
  }
]