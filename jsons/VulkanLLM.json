[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VulkanMisc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / LowLevelMemTracker . h \" # include \" VulkanConfiguration . h \" # if ENABLE_LOW_LEVEL_MEM_TRACKER # if VULKAN_USE_LLM enum class ELLMTagVulkan : LLM_TAG_TYPE {)",
    "insertText": "VulkanMisc(LLM_TAG_TYPE)"
  },
  {
    "label": "LLM_TRACK_VULKAN_HIGH_LEVEL_ALLOC()",
    "kind": "Method",
    "detail": "Function (uint64 GVulkanLLMAllocationID ; # define)",
    "insertText": "LLM_TRACK_VULKAN_HIGH_LEVEL_ALLOC(AllocObj, Size)"
  },
  {
    "label": "SetLLMTrackerID()",
    "kind": "Method",
    "detail": "Function (AllocObj .)",
    "insertText": "SetLLMTrackerID(0xDEAD | (++GVulkanLLMAllocationID << 16))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().OnLowLevelAlloc(ELLMTracker::Default, (void*)AllocObj.GetLLMTrackerID(), Size, (ELLMTag)ELLMTagVulkan::VulkanMisc)"
  },
  {
    "label": "LLM_TRACK_VULKAN_HIGH_LEVEL_FREE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "LLM_TRACK_VULKAN_HIGH_LEVEL_FREE(AllocObj)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().OnLowLevelFree(ELLMTracker::Default, (void*)AllocObj.GetLLMTrackerID())"
  },
  {
    "label": "LLM_TRACK_VULKAN_SPARE_MEMORY_GPU()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "LLM_TRACK_VULKAN_SPARE_MEMORY_GPU(Size)"
  },
  {
    "label": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPED_PAUSE_TRACKING_WITH_ENUM_AND_AMOUNT((ELLMTag)ELLMTagVulkan::VulkanSpareMemoryGPU, Size, ELLMTracker::Default, ELLMAllocType::None)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} # define LLM_TRACK_VULKAN_HIGH_LEVEL_ALLOCATION)",
    "insertText": "static_assert((int32)ELLMTagVulkan::Count <= (int32)ELLMTag::PlatformTagEnd, \"too many ELLMTagVulkan tags\")"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (namespace VulkanLLM { void)",
    "insertText": "Initialize()"
  },
  {
    "label": "VulkanMisc()",
    "kind": "Method",
    "detail": "Function (} # else enum class ELLMTagVulkan : LLM_TAG_TYPE {)",
    "insertText": "VulkanMisc(LLM_TAG_TYPE)ELLMTag::RHIMisc, VulkanUniformBuffers = (LLM_TAG_TYPE)ELLMTag::RHIMisc, VulkanBuffers = (LLM_TAG_TYPE)ELLMTag::RHIMisc, VulkanTextures = (LLM_TAG_TYPE)ELLMTag::Textures, VulkanRenderTargets = (LLM_TAG_TYPE)ELLMTag::RHIMisc, VulkanSpareMemoryGPU = (LLM_TAG_TYPE)ELLMTag::RHIMisc, VulkanShaders = (LLM_TAG_TYPE)ELLMTag::Shaders, VulkanFrameTemp = (LLM_TAG_TYPE)ELLMTag::RHIMisc, VulkanStagingBuffers = (LLM_TAG_TYPE)ELLMTag::RHIMisc, VulkanDriverMemoryCPU = (LLM_TAG_TYPE)ELLMTag::RHIMisc, VulkanDriverMemoryGPU = (LLM_TAG_TYPE)ELLMTag::RHIMisc, Count = (LLM_TAG_TYPE)"
  },
  {
    "label": "LLM_TRACK_VULKAN_HIGH_LEVEL_ALLOC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "LLM_TRACK_VULKAN_HIGH_LEVEL_ALLOC(...) #define LLM_TRACK_VULKAN_HIGH_LEVEL_FREE(...) #define LLM_TRACK_VULKAN_SPARE_MEMORY_GPU(...) #endif #define LLM_SCOPE_VULKAN(Tag) LLM_SCOPE((ELLMTag)Tag) #define LLM_PLATFORM_SCOPE_VULKAN(Tag) LLM_PLATFORM_SCOPE((ELLMTag)Tag) static_assert((int32)ELLMTagVulkan::Count == (int32)ELLMTag::PlatformTagStart + 11, \"There needs to be a 1 to 1 mapping between VulkanTag and Translation\")"
  }
]