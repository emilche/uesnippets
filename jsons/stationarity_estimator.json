[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "SpectrumBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SpectrumBuffer"
  },
  {
    "label": "StationarityEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StationarityEstimator"
  },
  {
    "label": "NoiseSpectrum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoiseSpectrum"
  },
  {
    "label": "StationarityEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_STATIONARITY_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_STATIONARITY_ESTIMATOR_H_ # include<stddef . h> # include<array> # include<atomic> # include<memory> # include \" api / array_view . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / reverb_model . h \" # include \" rtc_base / checks . h \" namespace webrtc { class ApmDataDumper ; struct SpectrumBuffer ; class StationarityEstimator { public :)",
    "insertText": "StationarityEstimator()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "UpdateNoiseEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNoiseEstimator(rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> spectrum)"
  },
  {
    "label": "UpdateStationarityFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStationarityFlags(const SpectrumBuffer& spectrum_buffer, rtc::ArrayView<const float> render_reverb_contribution_spectrum, int idx_current, int num_lookahead)"
  },
  {
    "label": "IsBandStationary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBandStationary(size_t band)"
  },
  {
    "label": "IsBlockStationary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBlockStationary()"
  },
  {
    "label": "GetStationarityPowerBand()",
    "kind": "Method",
    "detail": "Function (private : int kWindowLength = 1 3 ; float)",
    "insertText": "GetStationarityPowerBand(size_t k)"
  },
  {
    "label": "EstimateBandStationarity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EstimateBandStationarity(const SpectrumBuffer& spectrum_buffer, rtc::ArrayView<const float> average_reverb, const std::array<int, kWindowLength>& indexes, size_t band)"
  },
  {
    "label": "AreAllBandsStationary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllBandsStationary()"
  },
  {
    "label": "UpdateHangover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHangover()"
  },
  {
    "label": "SmoothStationaryPerFreq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmoothStationaryPerFreq()"
  },
  {
    "label": "NoiseSpectrum()",
    "kind": "Method",
    "detail": "Function (class NoiseSpectrum { public :)",
    "insertText": "NoiseSpectrum()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> spectrum)"
  },
  {
    "label": "Spectrum()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const float>)",
    "insertText": "Spectrum()"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(band, noise_spectrum_.size())"
  },
  {
    "label": "UpdateBandBySmoothing()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateBandBySmoothing(float power_band, float power_band_noise, float alpha)"
  }
]