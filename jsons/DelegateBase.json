[
  {
    "label": "TMulticastDelegateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMulticastDelegateBase"
  },
  {
    "label": "TDelegateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDelegateBase"
  },
  {
    "label": "FDefaultDelegateUserPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefaultDelegateUserPolicy"
  },
  {
    "label": "FDefaultTSDelegateUserPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDefaultTSDelegateUserPolicy"
  },
  {
    "label": "FNotThreadSafeNotCheckedDelegateUserPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotThreadSafeNotCheckedDelegateUserPolicy"
  },
  {
    "label": "FDelegateAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelegateAllocation"
  },
  {
    "label": "TWriteLockedDelegateAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TWriteLockedDelegateAllocation"
  },
  {
    "label": "TBaseUFunctionDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseUFunctionDelegateInstance"
  },
  {
    "label": "TBaseSPMethodDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseSPMethodDelegateInstance"
  },
  {
    "label": "TBaseSPLambdaDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseSPLambdaDelegateInstance"
  },
  {
    "label": "TBaseRawMethodDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseRawMethodDelegateInstance"
  },
  {
    "label": "TBaseUObjectMethodDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseUObjectMethodDelegateInstance"
  },
  {
    "label": "TBaseStaticDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseStaticDelegateInstance"
  },
  {
    "label": "TBaseFunctorDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseFunctorDelegateInstance"
  },
  {
    "label": "TWeakBaseFunctorDelegateInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TWeakBaseFunctorDelegateInstance"
  },
  {
    "label": "FWriteLockedDelegateAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWriteLockedDelegateAllocation"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Math / UnrealMathUtility . h \" # include \" UObject / NameTypes . h \" # include \" Delegates / DelegateAccessHandler . h \" # include \" Delegates / DelegateInstancesImplFwd . h \" # include \" Delegates / DelegateSettings . h \" # include \" Delegates / IDelegateInstance . h \" # if !)",
    "insertText": "defined(_WIN32) || defined(_WIN64) || (defined(ALLOW_DELEGATE_INLINE_ALLOCATORS_ON_WIN32) && ALLOW_DELEGATE_INLINE_ALLOCATORS_ON_WIN32)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(NUM_DELEGATE_INLINE_BYTES)"
  },
  {
    "label": "NUM_DELEGATE_INLINE_BYTES()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "NUM_DELEGATE_INLINE_BYTES(NUM_DELEGATE_INLINE_BYTES % 16) != 0 #error NUM_DELEGATE_INLINE_BYTES must be a multiple of 16 #else using FDelegateAllocatorType = TInlineAllocator<(NUM_DELEGATE_INLINE_BYTES / 16)"
  },
  {
    "label": "ALIAS_TEMPLATE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (# endif # else using FAlignedInlineDelegateType = TAlignedBytes<1 6,8> ; using FDelegateAllocatorType = FHeapAllocator ; # endif template<UserPolicy> class TMulticastDelegateBase ; template<UserPolicy> class TDelegateBase ;)",
    "insertText": "ALIAS_TEMPLATE_TYPE_LAYOUT(template<typename ElementType>, FDelegateAllocatorType::ForElementType<ElementType>, void*)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (struct FDefaultDelegateUserPolicy { using FDelegateInstanceExtras = IDelegateInstance ; using FThreadSafetyMode = # if UE_DETECT_DELEGATES_RACE_CONDITIONS FNotThreadSafeDelegateMode ; # else FNotThreadSafeNotCheckedDelegateMode ; # endif using FDelegateExtras = TDelegateBase<FThreadSafetyMode> ; using FMulticastDelegateExtras = TMulticastDelegateBase<FDefaultDelegateUserPolicy> ; } ; struct FDefaultTSDelegateUserPolicy { using FDelegateInstanceExtras = IDelegateInstance ; using FThreadSafetyMode = FThreadSafeDelegateMode ; using FDelegateExtras = TDelegateBase<FThreadSafetyMode> ; using FMulticastDelegateExtras = TMulticastDelegateBase<FDefaultTSDelegateUserPolicy> ; } ; struct FNotThreadSafeNotCheckedDelegateUserPolicy { using FDelegateInstanceExtras = IDelegateInstance ; using FThreadSafetyMode = FNotThreadSafeNotCheckedDelegateMode ; using FDelegateExtras = TDelegateBase<FThreadSafetyMode> ; using FMulticastDelegateExtras = TMulticastDelegateBase<FNotThreadSafeNotCheckedDelegateUserPolicy> ; } ; struct FDelegateAllocation { FDelegateAllocatorType::ForElementType<FAlignedInlineDelegateType> DelegateAllocator ; int32 DelegateSize = 0 ; } ; template<ThreadSafetyMode> struct TWriteLockedDelegateAllocation ; template<ThreadSafetyMode> void* operator)",
    "insertText": "new(size_t Size, const TWriteLockedDelegateAllocation<ThreadSafetyMode>& LockedAllocation)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (template<ThreadSafetyMode> struct TWriteLockedDelegateAllocation {)",
    "insertText": "UE_NONCOPYABLE(TWriteLockedDelegateAllocation) friend void* operator new<ThreadSafetyMode>(size_t Size, const TWriteLockedDelegateAllocation<ThreadSafetyMode>& LockedAllocation)"
  },
  {
    "label": "TWriteLockedDelegateAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TWriteLockedDelegateAllocation(TDelegateBase<ThreadSafetyMode>& Delegate) : WriteScope(Delegate.GetWriteAccessScope()) , Allocation(Delegate)"
  },
  {
    "label": "TDelegateBase()",
    "kind": "Method",
    "detail": "Function (} private : TDelegateAccessHandlerBase<ThreadSafetyMode>::FWriteAccessScope WriteScope ; FDelegateAllocation& Allocation ; } ; template<ThreadSafetyMode> class TDelegateBase : public TDelegateAccessHandlerBase<ThreadSafetyMode>,private FDelegateAllocation { struct TWriteLockedDelegateAllocation<ThreadSafetyMode> ; private : using Super = TDelegateAccessHandlerBase<ThreadSafetyMode> ; template<> class TMulticastDelegateBase ; template<> class TDelegateBase ; template<class,,,. . .> class TBaseUFunctionDelegateInstance ; template<bool,class,ESPMode,,,. . .> class TBaseSPMethodDelegateInstance ; template<,ESPMode,,,,. . .> class TBaseSPLambdaDelegateInstance ; template<bool,class,,,. . .> class TBaseRawMethodDelegateInstance ; template<bool,class,,,. . .> class TBaseUObjectMethodDelegateInstance ; template<,,. . .> class TBaseStaticDelegateInstance ; template<,,,. . .> class TBaseFunctorDelegateInstance ; template<,,,,. . .> class TWeakBaseFunctorDelegateInstance ; class FWriteLockedDelegateAllocation ; protected : using Super::FReadAccessScope ; using Super::GetReadAccessScope ; using Super::FWriteAccessScope ; using Super::GetWriteAccessScope ;)",
    "insertText": "TDelegateBase()"
  },
  {
    "label": "Unbind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unbind()"
  },
  {
    "label": "TDelegateBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDelegateBase(TDelegateBase&& Other)"
  },
  {
    "label": "MoveConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveConstruct(MoveTemp(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TDelegateBase&)",
    "insertText": "operator(TDelegateBase&& Other)"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAssign(MoveTemp(Other))"
  },
  {
    "label": "GetWriteAccessScope()",
    "kind": "Method",
    "detail": "Function (FWriteAccessScope WriteScope =)",
    "insertText": "GetWriteAccessScope()"
  },
  {
    "label": "UnbindUnchecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindUnchecked()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetReadAccessScope()",
    "kind": "Method",
    "detail": "Function (FReadAccessScope ReadScope =)",
    "insertText": "GetReadAccessScope()"
  },
  {
    "label": "TryGetBoundFunctionName()",
    "kind": "Method",
    "detail": "Function (} # if USE_DELEGATE_TRYGETBOUNDFUNCTIONNAME FName)",
    "insertText": "TryGetBoundFunctionName()"
  },
  {
    "label": "GetDelegateInstanceProtected()",
    "kind": "Method",
    "detail": "Function (const IDelegateInstance* DelegateInstance =)",
    "insertText": "GetDelegateInstanceProtected()"
  },
  {
    "label": "GetUObject()",
    "kind": "Method",
    "detail": "Function (} # endif class UObject*)",
    "insertText": "GetUObject()"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "GetObjectForTimerManager()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetObjectForTimerManager()"
  },
  {
    "label": "GetBoundProgramCounterForTimerManager()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetBoundProgramCounterForTimerManager()"
  },
  {
    "label": "IsBoundToObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBoundToObject(void const* InUserObject)"
  },
  {
    "label": "IsCompactable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompactable()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} FDelegateHandle)",
    "insertText": "GetHandle()"
  },
  {
    "label": "MoveConstruct()",
    "kind": "Method",
    "detail": "Function (} private : template<OtherThreadSafetyMode> void)",
    "insertText": "MoveConstruct(TDelegateBase<OtherThreadSafetyMode>&& Other)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (DelegateAllocator .)",
    "insertText": "MoveToEmpty(Other.DelegateAllocator)"
  },
  {
    "label": "MoveAssign()",
    "kind": "Method",
    "detail": "Function (DelegateSize = Other . DelegateSize ; Other . DelegateSize = 0 ; } template<OtherThreadSafetyMode> void)",
    "insertText": "MoveAssign(TDelegateBase<OtherThreadSafetyMode>&& Other)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (DelegateAllocator .)",
    "insertText": "MoveToEmpty(OtherDelegateAllocator)"
  },
  {
    "label": "IDelegateInstance()",
    "kind": "Method",
    "detail": "Function (Ptr -> ~)",
    "insertText": "IDelegateInstance()"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (DelegateAllocator .)",
    "insertText": "ResizeAllocation(0, 0, sizeof(FAlignedInlineDelegateType))"
  },
  {
    "label": "DelegateAllocate()",
    "kind": "Method",
    "detail": "Function (DelegateSize = 0 ; } } using FDelegateAllocation::DelegateAllocator ; using FDelegateAllocation::DelegateSize ; } ; namespace UE::Core::Private { void*)",
    "insertText": "DelegateAllocate(size_t Size, FDelegateAllocation& Allocation)"
  }
]