[
  {
    "label": "OutgoingDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutgoingDirectory"
  },
  {
    "label": "PseudoDir",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PseudoDir"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ScopedServiceBinding()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FUCHSIA_SCOPED_SERVICE_BINDING_H_ # define BASE_FUCHSIA_SCOPED_SERVICE_BINDING_H_ # include<utility> # include<lib / fidl / cpp / binding . h> # include<lib / fidl / cpp / binding_set . h> # include<lib / fidl / cpp / interface_request . h> # include<lib / zx / channel . h> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / fuchsia / scoped_service_publisher . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace sys { class OutgoingDirectory ; } namespace vfs { class PseudoDir ; } namespace base { template<Interface> class BASE_EXPORT ScopedServiceBinding { public :)",
    "insertText": "ScopedServiceBinding(sys::OutgoingDirectory* outgoing_directory, Interface* impl, base::StringPiece name = Interface::Name_) : publisher_(outgoing_directory, bindings_.GetHandler(impl), name)"
  },
  {
    "label": "ScopedServiceBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedServiceBinding(vfs::PseudoDir* pseudo_dir, Interface* impl, base::StringPiece name = Interface::Name_) : publisher_(pseudo_dir, bindings_.GetHandler(impl), name)"
  },
  {
    "label": "ScopedServiceBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedServiceBinding(const ScopedServiceBinding&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedServiceBinding&)",
    "insertText": "operator(const ScopedServiceBinding&)"
  },
  {
    "label": "ScopedServiceBinding()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedServiceBinding()"
  },
  {
    "label": "SetOnLastClientCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnLastClientCallback(base::RepeatingClosure on_last_client_callback)"
  },
  {
    "label": "set_empty_set_handler()",
    "kind": "Method",
    "detail": "Function (bindings_ .)",
    "insertText": "set_empty_set_handler([callback = std::move(on_last_client_callback)] { callback.Run(); })"
  },
  {
    "label": "has_clients()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_clients()"
  },
  {
    "label": "ScopedSingleClientServiceBinding()",
    "kind": "Method",
    "detail": "Function (} private : fidl::BindingSet<Interface> bindings_ ; ScopedServicePublisher<Interface> publisher_ ; } ; enum class ScopedServiceBindingPolicy { kPreferNew,kPreferExisting,kConnectOnce } ; template<Interface,ScopedServiceBindingPolicy Policy = ScopedServiceBindingPolicy::kPreferNew> class BASE_EXPORT ScopedSingleClientServiceBinding { public :)",
    "insertText": "ScopedSingleClientServiceBinding(sys::OutgoingDirectory* outgoing_directory, Interface* impl, base::StringPiece name = Interface::Name_) : binding_(impl)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (publisher_ .)",
    "insertText": "emplace(outgoing_directory, fit::bind_member(this, &ScopedSingleClientServiceBinding::BindClient), name)"
  },
  {
    "label": "set_error_handler()",
    "kind": "Method",
    "detail": "Function (binding_ .)",
    "insertText": "set_error_handler(fit::bind_member( this, &ScopedSingleClientServiceBinding::OnBindingEmpty))"
  },
  {
    "label": "ScopedSingleClientServiceBinding()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedSingleClientServiceBinding(const ScopedSingleClientServiceBinding&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSingleClientServiceBinding&)",
    "insertText": "operator(const ScopedSingleClientServiceBinding&)"
  },
  {
    "label": "ScopedSingleClientServiceBinding()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSingleClientServiceBinding()"
  },
  {
    "label": "events()",
    "kind": "Method",
    "detail": "Function (Interface::EventSender_&)",
    "insertText": "events()"
  },
  {
    "label": "SetOnLastClientCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOnLastClientCallback(base::OnceClosure on_last_client_callback)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (on_last_client_callback_ =)",
    "insertText": "move(on_last_client_callback)"
  },
  {
    "label": "BindClient()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "BindClient(fidl::InterfaceRequest<Interface> request)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (publisher_ .)",
    "insertText": "reset()"
  },
  {
    "label": "OnBindingEmpty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnBindingEmpty(zx_status_t status)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(on_last_client_callback_).Run()"
  }
]