[
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FIGESEntity104",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIGESEntity104"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FHyperbolaCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Curves / Curve . h \" namespace UE::CADKernel { class FHyperbolaCurve : public FCurve { class FIGESEntity104 ; class FEntity ; class FEntity ; protected : FMatrixH Matrix ; double SemiMajorAxis ; double SemiImaginaryAxis ;)",
    "insertText": "FHyperbolaCurve(const FMatrixH& InMatrix, double InSemiAxis, double InSemiImagAxis, const FLinearBoundary& InBounds, int8 InDimension = 3) : FCurve(InBounds, InDimension) , Matrix(InMatrix) , SemiMajorAxis(InSemiAxis) , SemiImaginaryAxis(InSemiImagAxis)"
  },
  {
    "label": "FHyperbolaCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHyperbolaCurve()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (Ar<<Matrix ; Ar<<SemiMajorAxis ; Ar<<SemiImaginaryAxis ; } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (# endif ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluatePoint(double Coordinate, FCurvePoint& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FPoint()",
    "kind": "Method",
    "detail": "Function (Evaluate<FCurvePoint,)",
    "insertText": "FPoint(Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate2DPoint(double Coordinate, FCurvePoint2D& OutPoint, int32 DerivativeOrder = 0)"
  },
  {
    "label": "FPoint2D()",
    "kind": "Method",
    "detail": "Function (Evaluate<FCurvePoint2D,)",
    "insertText": "FPoint2D(Coordinate, OutPoint, DerivativeOrder)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} private : template<CurvePointType,PointType> void)",
    "insertText": "Evaluate(double Coordinate, CurvePointType& OutPoint, int32 DerivativeOrder)"
  },
  {
    "label": "cosh()",
    "kind": "Method",
    "detail": "Function (OutPoint . DerivativeOrder = DerivativeOrder ; const double CosHUCoord =)",
    "insertText": "cosh(Coordinate)"
  },
  {
    "label": "sinh()",
    "kind": "Method",
    "detail": "Function (const double SinHUCoord =)",
    "insertText": "sinh(Coordinate)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function ({ PointType)",
    "insertText": "Result(SemiMajorAxis * CosHUCoord, SemiImaginaryAxis * SinHUCoord)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (OutPoint . Point = Matrix .)",
    "insertText": "Multiply(Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DerivativeOrder > 0)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FPoint)",
    "insertText": "Result(SemiMajorAxis * SinHUCoord, SemiImaginaryAxis * CosHUCoord)"
  },
  {
    "label": "MultiplyVector()",
    "kind": "Method",
    "detail": "Function (OutPoint . Gradient = Matrix .)",
    "insertText": "MultiplyVector(Result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DerivativeOrder > 1)"
  }
]