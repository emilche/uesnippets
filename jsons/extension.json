[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FormatRawSinkImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatRawSinkImpl"
  },
  {
    "label": "FormatSinkImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatSinkImpl"
  },
  {
    "label": "FormatConversionCharInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FormatConversionCharInternal"
  },
  {
    "label": "FormatConversionSpecImplFriend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FormatConversionSpecImplFriend"
  },
  {
    "label": "FormatConversionSpecImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FormatConversionSpecImpl"
  },
  {
    "label": "str_format_internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "str_format_internal"
  },
  {
    "label": "FormatConversionCharSetInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FormatConversionCharSetInternal"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_STR_FORMAT_EXTENSION_H_ # define ABSL_STRINGS_INTERNAL_STR_FORMAT_EXTENSION_H_ # include<limits . h> # include<cstddef> # include<cstdint> # include<cstring> # include<ostream> # include \" absl / base / config . h \" # include \" absl / base / port . h \" # include \" absl / meta / type_traits . h \" # include \" absl / strings / internal / str_format / output . h \" # include \" absl / strings / string_view . h \" namespace absl { ABSL_NAMESPACE_BEGIN enum class FormatConversionChar : uint8_t ; enum class FormatConversionCharSet : uint64_t ; namespace str_format_internal { class FormatRawSinkImpl { public : template<T,)",
    "insertText": "decltype(str_format_internal::InvokeFlush( std::declval<T*>(), string_view()))* = nullptr> FormatRawSinkImpl(T* raw) : sink_(raw), write_(&FormatRawSinkImpl::Flush<T>)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(string_view s)"
  },
  {
    "label": "write_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "write_(sink_, s)"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (} template<T> FormatRawSinkImpl)",
    "insertText": "Extract(T s)"
  },
  {
    "label": "InvokeFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeFlush(static_cast<T*>(r), s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} void* sink_ ;)",
    "insertText": "void(*write_)(void*, string_view)"
  },
  {
    "label": "FormatSinkImpl()",
    "kind": "Method",
    "detail": "Function (} ; class FormatSinkImpl { public :)",
    "insertText": "FormatSinkImpl(FormatRawSinkImpl raw) : raw_(raw)"
  },
  {
    "label": "FormatSinkImpl()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FormatSinkImpl()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (raw_ .)",
    "insertText": "Write(string_view(buf_, static_cast<size_t>(pos_ - buf_)))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (pos_ = buf_ ; } void)",
    "insertText": "Append(size_t n, char c)"
  },
  {
    "label": "raw_append()",
    "kind": "Method",
    "detail": "Function (size_ + = n ; auto)",
    "insertText": "raw_append(size_t count)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(pos_, c, count)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (pos_ + = count ; } ;)",
    "insertText": "while(n > Avail())"
  },
  {
    "label": "Avail()",
    "kind": "Method",
    "detail": "Function (n - =)",
    "insertText": "Avail()"
  },
  {
    "label": "raw_append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "raw_append(Avail())"
  },
  {
    "label": "raw_append()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "raw_append(n)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(string_view v)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t n = v .)",
    "insertText": "size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_ + = n ;)",
    "insertText": "if(n >= Avail())"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (raw_ .)",
    "insertText": "Write(v)"
  },
  {
    "label": "Wrap()",
    "kind": "Method",
    "detail": "Function (template<T> T)",
    "insertText": "Wrap()"
  },
  {
    "label": "Extract()",
    "kind": "Method",
    "detail": "Function (} template<T> FormatSinkImpl*)",
    "insertText": "Extract(T* s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FormatRawSinkImpl raw_ ; size_t size_ = 0 ; char* pos_ = buf_ ; char buf_ [ 1 0 2 4 ] ; } ; enum class Flags : uint8_t { kBasic = 0,kLeft = 1<<0,kShowPos = 1<<1,kSignCol = 1<<2,kAlt = 1<<3,kZero = 1<<4,kNonBasic = 1<<5,} ; Flags)",
    "insertText": "operator(Flags a, Flags b)"
  },
  {
    "label": "FlagsContains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FlagsContains(Flags haystack, Flags needle)"
  },
  {
    "label": "FlagsToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "FlagsToString(Flags v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, Flags v)"
  },
  {
    "label": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_(X_VAL, X_SEP) \\ \\ X_VAL(c) X_SEP X_VAL(s) X_SEP \\ \\ X_VAL(d) X_SEP X_VAL(i) X_SEP X_VAL(o) X_SEP \\ X_VAL(u) X_SEP X_VAL(x) X_SEP X_VAL(X) X_SEP \\ \\ X_VAL(f) X_SEP X_VAL(F) X_SEP X_VAL(e) X_SEP X_VAL(E) X_SEP \\ X_VAL(g) X_SEP X_VAL(G) X_SEP X_VAL(a) X_SEP X_VAL(A) X_SEP \\ \\ X_VAL(n) X_SEP X_VAL(p) X_SEP X_VAL(v)"
  },
  {
    "label": "ABSL_INTERNAL_X_VAL()",
    "kind": "Method",
    "detail": "Function (private : enum class Enum : uint8_t { c,s,d,i,o,u,x,X,f,F,e,E,g,G,a,A,n,p,v,kNone } ; public : # define)",
    "insertText": "ABSL_INTERNAL_X_VAL(id) \\ static constexpr FormatConversionChar id = \\ static_cast<FormatConversionChar>(Enum::id)"
  },
  {
    "label": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_(ABSL_INTERNAL_X_VAL, ) #undef ABSL_INTERNAL_X_VAL static constexpr FormatConversionChar kNone = static_cast<FormatConversionChar>(Enum::kNone)"
  },
  {
    "label": "FormatConversionCharFromChar()",
    "kind": "Method",
    "detail": "Function (} ; FormatConversionChar)",
    "insertText": "FormatConversionCharFromChar(char c)"
  },
  {
    "label": "ABSL_INTERNAL_X_VAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "ABSL_INTERNAL_X_VAL(id)"
  },
  {
    "label": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_(ABSL_INTERNAL_X_VAL,)"
  },
  {
    "label": "FormatConversionCharIsUpper()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FormatConversionCharIsUpper(FormatConversionChar c)"
  },
  {
    "label": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_()",
    "kind": "Method",
    "detail": "Function (\\ return # e [ 0 ] ; # define ABSL_INTERNAL_X_SEP)",
    "insertText": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_(ABSL_INTERNAL_X_VAL, ABSL_INTERNAL_X_SEP)"
  },
  {
    "label": "FormatConversionCharToChar()",
    "kind": "Method",
    "detail": "Function (char c =)",
    "insertText": "FormatConversionCharToChar(v)"
  },
  {
    "label": "has_show_pos_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_show_pos_flag()"
  },
  {
    "label": "has_sign_col_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_sign_col_flag()"
  },
  {
    "label": "has_alt_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_alt_flag()"
  },
  {
    "label": "has_zero_flag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has_zero_flag()"
  },
  {
    "label": "conversion_char()",
    "kind": "Method",
    "detail": "Function (} FormatConversionChar)",
    "insertText": "conversion_char()"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (conv_ = c ; } int)",
    "insertText": "width()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} private : struct str_format_internal::FormatConversionSpecImplFriend ; FormatConversionChar conv_ = FormatConversionCharInternal::kNone ; Flags flags_ ; int width_ ; int precision_ ; } ; struct FormatConversionSpecImplFriend final { void)",
    "insertText": "SetFlags(Flags f, FormatConversionSpecImpl* conv)"
  },
  {
    "label": "SetConversionChar()",
    "kind": "Method",
    "detail": "Function (conv -> flags_ = f ; } void)",
    "insertText": "SetConversionChar(FormatConversionChar c, FormatConversionSpecImpl* conv)"
  },
  {
    "label": "SetWidth()",
    "kind": "Method",
    "detail": "Function (conv -> conv_ = c ; } void)",
    "insertText": "SetWidth(int w, FormatConversionSpecImpl* conv)"
  },
  {
    "label": "SetPrecision()",
    "kind": "Method",
    "detail": "Function (conv -> width_ = w ; } void)",
    "insertText": "SetPrecision(int p, FormatConversionSpecImpl* conv)"
  },
  {
    "label": "FlagsToString()",
    "kind": "Method",
    "detail": "Function (conv -> precision_ = p ; } std::string)",
    "insertText": "FlagsToString(const FormatConversionSpecImpl& spec)"
  },
  {
    "label": "FormatConversionCharSetUnion()",
    "kind": "Method",
    "detail": "Function (} } ; FormatConversionCharSet)",
    "insertText": "FormatConversionCharSetUnion(FormatConversionCharSet a)"
  },
  {
    "label": "FormatConversionCharToConvInt()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "FormatConversionCharToConvInt(FormatConversionChar c)"
  },
  {
    "label": "FormatConversionCharToConvInt()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "FormatConversionCharToConvInt(char conv)"
  },
  {
    "label": "FormatConversionCharToConvValue()",
    "kind": "Method",
    "detail": "Function (} FormatConversionCharSet)",
    "insertText": "FormatConversionCharToConvValue(char conv)"
  },
  {
    "label": "ABSL_INTERNAL_CHAR_SET_CASE()",
    "kind": "Method",
    "detail": "Function (} struct FormatConversionCharSetInternal { # define)",
    "insertText": "ABSL_INTERNAL_CHAR_SET_CASE(c) \\ static constexpr FormatConversionCharSet c = \\ FormatConversionCharToConvValue(#c[0])"
  },
  {
    "label": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_CONVERSION_CHARS_EXPAND_(ABSL_INTERNAL_CHAR_SET_CASE, ) #undef ABSL_INTERNAL_CHAR_SET_CASE static constexpr FormatConversionCharSet kStar = FormatConversionCharToConvValue('*')"
  },
  {
    "label": "FormatConversionCharSetUnion()",
    "kind": "Method",
    "detail": "Function (FormatConversionCharSet kIntegral =)",
    "insertText": "FormatConversionCharSetUnion(d, i, u, o, x, X)"
  },
  {
    "label": "FormatConversionCharSetUnion()",
    "kind": "Method",
    "detail": "Function (FormatConversionCharSet kFloating =)",
    "insertText": "FormatConversionCharSetUnion(a, e, f, g, A, E, F, G)"
  },
  {
    "label": "FormatConversionCharSetUnion()",
    "kind": "Method",
    "detail": "Function (FormatConversionCharSet kNumeric =)",
    "insertText": "FormatConversionCharSetUnion(kIntegral, kFloating)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FormatConversionCharSet kPointer = p ; } ; FormatConversionCharSet)",
    "insertText": "operator(FormatConversionCharSet a, FormatConversionCharSet b)"
  },
  {
    "label": "ToFormatConversionCharSet()",
    "kind": "Method",
    "detail": "Function (} FormatConversionCharSet)",
    "insertText": "ToFormatConversionCharSet(char c)"
  },
  {
    "label": "ToFormatConversionCharSet()",
    "kind": "Method",
    "detail": "Function (} FormatConversionCharSet)",
    "insertText": "ToFormatConversionCharSet(FormatConversionCharSet c)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(FormatConversionCharSet set, char c)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(FormatConversionCharSet set, FormatConversionCharSet c)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(FormatConversionCharSet set, FormatConversionChar c)"
  },
  {
    "label": "Excess()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Excess(size_t used, size_t capacity)"
  }
]