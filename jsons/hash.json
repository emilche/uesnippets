[
  {
    "label": "HashState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HashState"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "PiecewiseCombiner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PiecewiseCombiner"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "is_hashable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_hashable"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "MyHashState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyHashState"
  },
  {
    "label": "HashStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HashStateBase"
  },
  {
    "label": "CombineUnorderedCallback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CombineUnorderedCallback"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "is_uniquely_represented",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_uniquely_represented"
  },
  {
    "label": "is_uniquely_represented",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_uniquely_represented"
  },
  {
    "label": "is_uniquely_represented",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_uniquely_represented"
  },
  {
    "label": "is_uniquely_represented",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_uniquely_represented"
  },
  {
    "label": "values",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "values"
  },
  {
    "label": "VariantVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariantVisitor"
  },
  {
    "label": "HashSelect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashSelect"
  },
  {
    "label": "State",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "State"
  },
  {
    "label": "UniquelyRepresentedProbe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UniquelyRepresentedProbe"
  },
  {
    "label": "HashValueProbe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashValueProbe"
  },
  {
    "label": "LegacyHashProbe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LegacyHashProbe"
  },
  {
    "label": "StdHashProbe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StdHashProbe"
  },
  {
    "label": "Probe",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Probe"
  },
  {
    "label": "is_hashable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_hashable"
  },
  {
    "label": "ABSL_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_DLL"
  },
  {
    "label": "MixingHashState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MixingHashState"
  },
  {
    "label": "absl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "absl"
  },
  {
    "label": "AggregateBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AggregateBarrier"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "PoisonedHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PoisonedHash"
  },
  {
    "label": "HashImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashImpl"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Hash"
  },
  {
    "label": "add_buffer()",
    "kind": "Method",
    "detail": "Function (H)",
    "insertText": "add_buffer(H state, const unsigned char* data, size_t size)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (H)",
    "insertText": "finalize(H state)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (H)",
    "insertText": "combine_contiguous(H state, const unsigned char*, size_t)"
  },
  {
    "label": "RunCombineUnordered()",
    "kind": "Method",
    "detail": "Function (H)",
    "insertText": "RunCombineUnordered(H state, CombinerT combiner)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (H)",
    "insertText": "combine(H state, const T& value, const Ts&... values)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (H)",
    "insertText": "combine_contiguous(H state, const T* data, size_t size)"
  },
  {
    "label": "combine_unordered()",
    "kind": "Method",
    "detail": "Function (H)",
    "insertText": "combine_unordered(H state, I begin, I end)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (__cpp_lib_has_unique_object_representations)",
    "insertText": "static_assert(std::has_unique_object_representations<T C::*>::value)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (State)",
    "insertText": "combine_contiguous(State hash_state, const unsigned char*,\n                                    size_t)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (std::true_type)",
    "insertText": "Test(int)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (std::false_type)",
    "insertText": "Test(char)"
  },
  {
    "label": "CombineContiguousImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "CombineContiguousImpl(uint64_t state,\n                                        const unsigned char* first, size_t len,\n                                        std::integral_constant<int, 4>\n                                        /* sizeof_size_t */)"
  },
  {
    "label": "CombineContiguousImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "CombineContiguousImpl(uint64_t state,\n                                        const unsigned char* first, size_t len,\n                                        std::integral_constant<int, 8>\n                                        /* sizeof_size_t */)"
  },
  {
    "label": "CombineLargeContiguousImpl32()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "CombineLargeContiguousImpl32(uint64_t state,\n                                               const unsigned char* first,\n                                               size_t len)"
  },
  {
    "label": "CombineLargeContiguousImpl64()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "CombineLargeContiguousImpl64(uint64_t state,\n                                               const unsigned char* first,\n                                               size_t len)"
  },
  {
    "label": "LowLevelHashImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "LowLevelHashImpl(const unsigned char* data, size_t len)"
  },
  {
    "label": "LowLevelHashImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LowLevelHashImpl(data, len)"
  },
  {
    "label": "CombineLargeContiguousImpl32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CombineLargeContiguousImpl32(state, first, len)"
  },
  {
    "label": "Mix()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Mix(state, v)"
  },
  {
    "label": "CombineLargeContiguousImpl64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CombineLargeContiguousImpl64(state, first, len)"
  },
  {
    "label": "Mix()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Mix(state, v)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (buffer)",
    "insertText": "memcpy(buf_ + position_, data, size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (remainder)",
    "insertText": "memcpy(buf_, data, size)"
  }
]