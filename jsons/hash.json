[
  {
    "label": "HashState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HashState"
  },
  {
    "label": "CombineUnorderedInvoker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CombineUnorderedInvoker"
  },
  {
    "label": "HashOf()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_HASH_HASH_H_ # define ABSL_HASH_HASH_H_ # include<tuple> # include<utility> # include \" absl / functional / function_ref . h \" # include \" absl / hash / internal / hash . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<T> using Hash = absl::hash_internal::Hash<T> ; template<int& . . . ExplicitArgumentBarrier,. . . Types> size_t)",
    "insertText": "HashOf(const Types&... values)"
  },
  {
    "label": "tie()",
    "kind": "Method",
    "detail": "Function (auto tuple =)",
    "insertText": "tie(values...)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} class HashState : public hash_internal::HashStateBase<HashState> { public : template<T> HashState)",
    "insertText": "Create(T* state)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (HashState s ; s .)",
    "insertText": "Init(state)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HashState&)",
    "insertText": "operator(const HashState&)"
  },
  {
    "label": "HashState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashState(HashState&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HashState&)",
    "insertText": "operator(HashState&&)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (using HashState::HashStateBase::combine ; HashState)",
    "insertText": "combine_contiguous(HashState hash_state, const unsigned char* first, size_t size)"
  },
  {
    "label": "combine_contiguous_()",
    "kind": "Method",
    "detail": "Function (hash_state .)",
    "insertText": "combine_contiguous_(hash_state.state_, first, size)"
  },
  {
    "label": "CombineContiguousImpl()",
    "kind": "Method",
    "detail": "Function (class HashState::HashStateBase ; template<T> void)",
    "insertText": "CombineContiguousImpl(void* p, const unsigned char* first, size_t size)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T& state =* static_cast<)",
    "insertText": "T(p)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (state =)",
    "insertText": "combine_contiguous(std::move(state), first, size)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "Init(T* state)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (state_ = state ; combine_contiguous_ =& CombineContiguousImpl<T> ; run_combine_unordered_ =& RunCombineUnorderedImpl<T> ; } template<HS> struct CombineUnorderedInvoker { template<T,ConsumerT> void)",
    "insertText": "operator()(T inner_state, ConsumerT inner_cb)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "f(HashState::Create(&inner_state), [&](HashState& inner_erased) { inner_cb(inner_erased.Real<T>()); })"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} absl::FunctionRef<)",
    "insertText": "void(HS, absl::FunctionRef<void(HS&)>)"
  },
  {
    "label": "RunCombineUnorderedImpl()",
    "kind": "Method",
    "detail": "Function (} ; template<T> HashState)",
    "insertText": "RunCombineUnorderedImpl(HashState state, absl::FunctionRef<void(HashState, absl::FunctionRef<void(HashState&)>)> f)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T& real_state = state . Real<)",
    "insertText": "T()"
  },
  {
    "label": "RunCombineUnordered()",
    "kind": "Method",
    "detail": "Function (real_state =)",
    "insertText": "RunCombineUnordered(std::move(real_state), CombineUnorderedInvoker<HashState>{f})"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (auto* run = state . run_combine_unordered_ ; return)",
    "insertText": "run(std::move(state), std::ref(combiner))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(HashState* state)"
  },
  {
    "label": "Real()",
    "kind": "Method",
    "detail": "Function (state_ = state -> state_ ; combine_contiguous_ = state -> combine_contiguous_ ; run_combine_unordered_ = state -> run_combine_unordered_ ; } template<T> T&)",
    "insertText": "Real()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} void* state_ ;)",
    "insertText": "void(*combine_contiguous_)(void*, const unsigned char*, size_t)"
  },
  {
    "label": "HashState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashState(*run_combine_unordered_)( HashState state, absl::FunctionRef<void(HashState, absl::FunctionRef<void(HashState&)>)>)"
  }
]mbine()",
    "kind": "Method",
    "detail": "Function (H)",
    "insertText": "combine(H state)"
  },
  {
    "label": "combine_unordered()",
    "kind": "Method",
    "detail": "Function (template<I> H)",
    "insertText": "combine_unordered(H state, I begin, I end)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using AbslInternalPiecewiseCombiner = PiecewiseCombiner ; template<T> using is_hashable = absl::hash_internal::is_hashable<T> ; private : template<I> struct CombineUnorderedCallback { I begin ; I end ; template<InnerH,ElementStateConsumer> void)",
    "insertText": "operator()(InnerH inner_state, ElementStateConsumer cb)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (inner_state =)",
    "insertText": "combine(std::move(inner_state), *begin)"
  },
  {
    "label": "cb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cb(inner_state)"
  },
  {
    "label": "hash_bytes()",
    "kind": "Method",
    "detail": "Function (} } } ; } ; template<T,Enable = void> struct is_uniquely_represented : std::false_type { } ; template<> struct is_uniquely_represented<unsigned char> : std::true_type { } ; template<Integral> struct is_uniquely_represented<Integral,std::enable_if<std::is_integral<Integral>::value>::type> : std::true_type { } ; template<> struct is_uniquely_represented<bool> : std::false_type { } ; template<H,T> H)",
    "insertText": "hash_bytes(H hash_state, const T& value)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const unsigned char* start = reinterpret_cast<const unsigned)",
    "insertText": "char(&value)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,B> std::enable_if<std::is_same<B,bool>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, B value)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Enum> std::enable_if<std::is_enum<Enum>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, Enum e)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Float> std::enable_if<std::is_same<Float,float>::value | | std::is_same<Float,double>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, Float value)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,LongDouble> std::enable_if<std::is_same<LongDouble,long double>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, LongDouble value)"
  },
  {
    "label": "fpclassify()",
    "kind": "Method",
    "detail": "Function (const int category =)",
    "insertText": "fpclassify(value)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (break ; case FP_NAN : case FP_ZERO : default : break ; case FP_NORMAL : case FP_SUBNORMAL : int exp ; auto mantissa = static_cast<)",
    "insertText": "double(std::frexp(value, &exp))"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (hash_state =)",
    "insertText": "combine(std::move(hash_state), mantissa, exp)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(std::move(hash_state), category)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T> H)",
    "insertText": "AbslHashValue(H hash_state, T* ptr)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (auto v = reinterpret_cast<)",
    "insertText": "uintptr_t(ptr)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValue(H hash_state, std::nullptr_t)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T,C> H)",
    "insertText": "AbslHashValue(H hash_state, T C::* ptr)"
  },
  {
    "label": "salient_ptm_size()",
    "kind": "Method",
    "detail": "Function (std::size_t)",
    "insertText": "salient_ptm_size(std::size_t n)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) if (alignof(T C::*) == alignof(int))"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (# endif return n ; # endif } ; return)",
    "insertText": "combine_contiguous(std::move(hash_state), reinterpret_cast<unsigned char*>(&ptr), salient_ptm_size(sizeof ptr))"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T1,T2> std::enable_if<is_hashable<T1>::value&& is_hashable<T2>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::pair<T1, T2>& p)"
  },
  {
    "label": "hash_tuple()",
    "kind": "Method",
    "detail": "Function (} template<H,Tuple,size_t . . . Is> H)",
    "insertText": "hash_tuple(H hash_state, const Tuple& t, absl::index_sequence<Is...>)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} template<H,. . . Ts> # if)",
    "insertText": "defined(_MSC_VER) H #else typename std::enable_if<absl::conjunction<is_hashable<Ts>...>::value, H>::type #endif AbslHashValue(H hash_state, const std::tuple<Ts...>& t)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T,D> H)",
    "insertText": "AbslHashValue(H hash_state, const std::unique_ptr<T, D>& ptr)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T> H)",
    "insertText": "AbslHashValue(H hash_state, const std::shared_ptr<T>& ptr)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValue(H hash_state, absl::string_view str)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<Char,Alloc,H,= absl::enable_if_t<std::is_same<Char,wchar_t>::value | | std::is_same<Char,char16_t>::value | | std::is_same<Char,char32_t>::value>> H)",
    "insertText": "AbslHashValue(H hash_state, const std::basic_string<Char, std::char_traits<Char>, Alloc>& str)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T,size_t N> std::enable_if<is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::array<T, N>& array)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T,Allocator> std::enable_if<is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::deque<T, Allocator>& deque)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (hash_state =)",
    "insertText": "combine(std::move(hash_state), t)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(std::move(hash_state), deque.size())"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T,Allocator> std::enable_if<is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::forward_list<T, Allocator>& list)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t size = 0 ;)",
    "insertText": "for(const T& t : list)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (+ + size ; } return)",
    "insertText": "combine(std::move(hash_state), size)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T,Allocator> std::enable_if<is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::list<T, Allocator>& list)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(std::move(hash_state), list.size())"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T,Allocator> std::enable_if<is_hashable<T>::value&& ! std::is_same<T,bool>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::vector<T, Allocator>& vector)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(ABSL_IS_BIG_ENDIAN) && \\ (defined(__GLIBCXX__) || defined(__GLIBCPP__)) template <typename H, typename T, typename Allocator> typename std::enable_if<is_hashable<T>::value && std::is_same<T, bool>::value, H>::type AbslHashValue(H hash_state, const std::vector<T, Allocator>& vector)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (H::AbslInternalPiecewiseCombiner combiner ;)",
    "insertText": "for(const auto& i : vector)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (unsigned char c = static_cast<unsigned)",
    "insertText": "char(i)"
  },
  {
    "label": "add_buffer()",
    "kind": "Method",
    "detail": "Function (hash_state = combiner .)",
    "insertText": "add_buffer(std::move(hash_state), &c, sizeof(c))"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(combiner.finalize(std::move(hash_state)), vector.size())"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} # endif template<H,Key,T,Compare,Allocator> std::enable_if<is_hashable<Key>::value&& is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::map<Key, T, Compare, Allocator>& map)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(std::move(hash_state), map.size())"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Key,T,Compare,Allocator> std::enable_if<is_hashable<Key>::value&& is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::multimap<Key, T, Compare, Allocator>& map)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Key,Compare,Allocator> std::enable_if<is_hashable<Key>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::set<Key, Compare, Allocator>& set)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(std::move(hash_state), set.size())"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Key,Compare,Allocator> std::enable_if<is_hashable<Key>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::multiset<Key, Compare, Allocator>& set)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Key,Hash,KeyEqual,Alloc> std::enable_if<is_hashable<Key>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::unordered_set<Key, Hash, KeyEqual, Alloc>& s)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Key,Hash,KeyEqual,Alloc> std::enable_if<is_hashable<Key>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::unordered_multiset<Key, Hash, KeyEqual, Alloc>& s)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Key,T,Hash,KeyEqual,Alloc> std::enable_if<is_hashable<Key>::value&& is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::unordered_map<Key, T, Hash, KeyEqual, Alloc>& s)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,Key,T,Hash,KeyEqual,Alloc> std::enable_if<is_hashable<Key>::value&& is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const std::unordered_multimap<Key, T, Hash, KeyEqual, Alloc>& s)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T> std::enable_if<is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, std::reference_wrapper<T> opt)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H,T> std::enable_if<is_hashable<T>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const absl::optional<T>& opt)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<H> struct VariantVisitor { H&& hash_state ; template<T> H)",
    "insertText": "operator()(const T& t)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} } ; template<H,. . . T> std::enable_if<conjunction<is_hashable<T> . . .>::value,H>::type)",
    "insertText": "AbslHashValue(H hash_state, const absl::variant<T...>& v)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (hash_state =)",
    "insertText": "visit(VariantVisitor<H>{std::move(hash_state)}, v)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(std::move(hash_state), v.index())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(ABSL_IS_BIG_ENDIAN) && \\ (defined(__GLIBCXX__) || defined(__GLIBCPP__)) template <typename H, size_t N> H AbslHashValue(H hash_state, const std::bitset<N>& set)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (H::AbslInternalPiecewiseCombiner combiner ;)",
    "insertText": "for(int i = 0; i < N; i++)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (unsigned char c = static_cast<unsigned)",
    "insertText": "char(set[i])"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "combine(combiner.finalize(std::move(hash_state)), N)"
  },
  {
    "label": "hash_range_or_bytes()",
    "kind": "Method",
    "detail": "Function (} # endif template<H,T> std::enable_if<is_uniquely_represented<T>::value,H>::type)",
    "insertText": "hash_range_or_bytes(H hash_state, const T* data, size_t size)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (const auto* bytes = reinterpret_cast<const unsigned)",
    "insertText": "char(data)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (hash_state =)",
    "insertText": "combine(std::move(hash_state), *data)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} return hash_state ; } # if)",
    "insertText": "defined(ABSL_INTERNAL_LEGACY_HASH_NAMESPACE)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (private : struct State : HashStateBase<State> { State)",
    "insertText": "combine_contiguous(State hash_state, const unsigned char*, size_t)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (absl::enable_if_t<is_uniquely_represented<T>::value, H>)",
    "insertText": "Invoke(H state, const T& value)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} } ; struct HashValueProbe { template<H,T> auto)",
    "insertText": "Invoke(H state, const T& value) -> absl::enable_if_t< std::is_same<H, decltype(AbslHashValue(std::move(state), value))"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} } ; struct LegacyHashProbe { # if ABSL_HASH_INTERNAL_SUPPORT_LEGACY_HASH_ template<H,T> auto)",
    "insertText": "Invoke(H state, const T& value) -> absl::enable_if_t< std::is_convertible< decltype(ABSL_INTERNAL_LEGACY_HASH_NAMESPACE::hash<T>()(value))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<Hash,T> struct Probe : Hash { private : template<H,=)",
    "insertText": "decltype(H::Invoke( std::declval<State>(), std::declval<const T&>()))> static std::true_type Test(int)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (template<U> std::false_type)",
    "insertText": "Test(char)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (public : bool value =)",
    "insertText": "decltype(Test<Hash>(0))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; public : template<T> using Apply = absl::disjunction<Probe<UniquelyRepresentedProbe,T>,Probe<HashValueProbe,T>,Probe<LegacyHashProbe,T>,Probe<StdHashProbe,T>,std::false_type> ; } ; template<T> struct is_hashable : std::integral_constant<bool,HashSelect::template Apply<T>::value> { } ; class ABSL_DLL MixingHashState : public HashStateBase<MixingHashState> { # ifdef ABSL_HAVE_INTRINSIC_INT128 using uint128 = __uint128_t ; # else using uint128 = absl::uint128 ; # endif uint64_t kMul =)",
    "insertText": "sizeof(size_t)"
  },
  {
    "label": "MixingHashState()",
    "kind": "Method",
    "detail": "Function (0 xcc9e2d51 } : uint64_t { 0 x9ddfea08eb382d69 } ; template<T> using IntegralFastPath = conjunction<std::is_integral<T>,is_uniquely_represented<T>> ; public :)",
    "insertText": "MixingHashState(MixingHashState&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MixingHashState&)",
    "insertText": "operator(MixingHashState&&)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (MixingHashState)",
    "insertText": "combine_contiguous(MixingHashState hash_state, const unsigned char* first, size_t size)"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (} using MixingHashState::HashStateBase::combine_contiguous ; template<T,absl::enable_if_t<IntegralFastPath<T>::value,int> = 0> size_t)",
    "insertText": "hash(T value)"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (} template<T,absl::enable_if_t<! IntegralFastPath<T>::value,int> = 0> size_t)",
    "insertText": "hash(const T& value)"
  },
  {
    "label": "MixingHashState()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "MixingHashState() : state_(Seed())"
  },
  {
    "label": "RunCombineUnordered()",
    "kind": "Method",
    "detail": "Function (} class MixingHashState::HashStateBase ; template<CombinerT> MixingHashState)",
    "insertText": "RunCombineUnordered(MixingHashState state, CombinerT combiner)"
  },
  {
    "label": "combiner()",
    "kind": "Method",
    "detail": "Function (uint64_t unordered_state = 0 ;)",
    "insertText": "combiner(MixingHashState{}, [&](MixingHashState& inner_state) { auto element_state = inner_state.state_; unordered_state += element_state; if (unordered_state < element_state) { ++unordered_state; } inner_state = MixingHashState{}; })"
  },
  {
    "label": "MixingHashState()",
    "kind": "Method",
    "detail": "Function (} class absl::HashState ;)",
    "insertText": "MixingHashState(const MixingHashState&)"
  },
  {
    "label": "MixingHashState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixingHashState(uint64_t state) : state_(state)"
  },
  {
    "label": "CombineContiguousImpl()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "CombineContiguousImpl(uint64_t state, const unsigned char* first, size_t len, std::integral_constant<int, 4>)"
  },
  {
    "label": "CombineContiguousImpl()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "CombineContiguousImpl(uint64_t state, const unsigned char* first, size_t len, std::integral_constant<int, 8>)"
  },
  {
    "label": "CombineLargeContiguousImpl32()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "CombineLargeContiguousImpl32(uint64_t state, const unsigned char* first, size_t len)"
  },
  {
    "label": "CombineLargeContiguousImpl64()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "CombineLargeContiguousImpl64(uint64_t state, const unsigned char* first, size_t len)"
  },
  {
    "label": "Read9To16()",
    "kind": "Method",
    "detail": "Function (std::pair<uint64_t,uint64_t>)",
    "insertText": "Read9To16(const unsigned char* p, size_t len)"
  },
  {
    "label": "UnalignedLoad64()",
    "kind": "Method",
    "detail": "Function (uint64_t low_mem = absl::)",
    "insertText": "UnalignedLoad64(p)"
  },
  {
    "label": "UnalignedLoad64()",
    "kind": "Method",
    "detail": "Function (uint64_t high_mem = absl::)",
    "insertText": "UnalignedLoad64(p + len - 8)"
  },
  {
    "label": "most_significant()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_IS_LITTLE_ENDIAN uint64_t most_significant = high_mem ; uint64_t least_significant = low_mem ; # else uint64_t most_significant = low_mem ; uint64_t least_significant = high_mem ; # endif return { least_significant,)",
    "insertText": "most_significant(128 - len * 8)"
  },
  {
    "label": "Read4To8()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "Read4To8(const unsigned char* p, size_t len)"
  },
  {
    "label": "UnalignedLoad32()",
    "kind": "Method",
    "detail": "Function (uint32_t low_mem = absl::)",
    "insertText": "UnalignedLoad32(p)"
  },
  {
    "label": "UnalignedLoad32()",
    "kind": "Method",
    "detail": "Function (uint32_t high_mem = absl::)",
    "insertText": "UnalignedLoad32(p + len - 4)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_IS_LITTLE_ENDIAN uint32_t most_significant = high_mem ; uint32_t least_significant = low_mem ; # else uint32_t most_significant = low_mem ; uint32_t least_significant = high_mem ; # endif)",
    "insertText": "return(static_cast<uint64_t>(most_significant) << (len - 4) * 8)"
  },
  {
    "label": "Read1To3()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "Read1To3(const unsigned char* p, size_t len)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (unsigned char mem0 = p [ 0 ] ; unsigned char mem1 = p [ len / 2 ] ; unsigned char mem2 = p [ len - 1 ] ; # ifdef ABSL_IS_LITTLE_ENDIAN unsigned char significant2 = mem2 ; unsigned char significant1 = mem1 ; unsigned char significant0 = mem0 ; # else unsigned char significant2 = mem0 ; unsigned char significant1 = mem1 ; unsigned char significant0 = mem2 ; # endif return static_cast<)",
    "insertText": "uint32_t(significant0 | (significant1 << (len / 2 * 8)) | (significant2 << ((len - 1) * 8)))"
  },
  {
    "label": "Mix()",
    "kind": "Method",
    "detail": "Function (} ABSL_ATTRIBUTE_ALWAYS_INLINE uint64_t)",
    "insertText": "Mix(uint64_t state, uint64_t v)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (MultType m = state + v ; m* = kMul ; return static_cast<)",
    "insertText": "uint64_t(m ^ (m >> (sizeof(m) * 8 / 2)))"
  },
  {
    "label": "LowLevelHashImpl()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "LowLevelHashImpl(const unsigned char* data, size_t len)"
  },
  {
    "label": "Hash64()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_ALWAYS_INLINE uint64_t)",
    "insertText": "Hash64(const unsigned char* data, size_t len)"
  },
  {
    "label": "LowLevelHashImpl()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_HAVE_INTRINSIC_INT128 return)",
    "insertText": "LowLevelHashImpl(data, len)"
  },
  {
    "label": "CityHash64()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "CityHash64(reinterpret_cast<const char*>(data), len)"
  },
  {
    "label": "Seed()",
    "kind": "Method",
    "detail": "Function (# endif } ABSL_ATTRIBUTE_ALWAYS_INLINE uint64_t)",
    "insertText": "Seed()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(!defined(__clang__) || __clang_major__ > 11) && \\ !defined(__apple_build_version__) return static_cast<uint64_t>(reinterpret_cast<uintptr_t>(&kSeed))"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (# else return static_cast<)",
    "insertText": "uint64_t(reinterpret_cast<uintptr_t>(kSeed))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t v ;)",
    "insertText": "if(len > 8)"
  },
  {
    "label": "CityHash32()",
    "kind": "Method",
    "detail": "Function (} v =)",
    "insertText": "CityHash32(reinterpret_cast<const char*>(first), len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(len >= 4)"
  },
  {
    "label": "Read4To8()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "Read4To8(first, len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(len > 0)"
  },
  {
    "label": "Read1To3()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "Read1To3(first, len)"
  },
  {
    "label": "Mix()",
    "kind": "Method",
    "detail": "Function (} else { return state ; } return)",
    "insertText": "Mix(state, v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t v ;)",
    "insertText": "if(len > 16)"
  },
  {
    "label": "Hash64()",
    "kind": "Method",
    "detail": "Function (} v =)",
    "insertText": "Hash64(first, len)"
  },
  {
    "label": "Read9To16()",
    "kind": "Method",
    "detail": "Function (auto p =)",
    "insertText": "Read9To16(first, len)"
  },
  {
    "label": "Mix()",
    "kind": "Method",
    "detail": "Function (state =)",
    "insertText": "Mix(state, p.first)"
  },
  {
    "label": "PoisonedHash()",
    "kind": "Method",
    "detail": "Function (} struct AggregateBarrier { } ; struct PoisonedHash : private AggregateBarrier {)",
    "insertText": "PoisonedHash()"
  },
  {
    "label": "PoisonedHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PoisonedHash(const PoisonedHash&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PoisonedHash&)",
    "insertText": "operator(const PoisonedHash&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct HashImpl { size_t)",
    "insertText": "operator()(const T& value)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (} template<H> template<T> H HashStateBase<H)",
    "insertText": "combine_contiguous(H state, const T* data, size_t size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buf_ + position_, data, size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (position_ + = size ; return state ; })",
    "insertText": "if(position_ != 0)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buf_ + position_, data, bytes_needed)"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (state =)",
    "insertText": "combine_contiguous(std::move(state), buf_, PiecewiseChunkSize())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (data + = bytes_needed ; size - = bytes_needed ; })",
    "insertText": "while(size >= PiecewiseChunkSize())"
  },
  {
    "label": "combine_contiguous()",
    "kind": "Method",
    "detail": "Function (state =)",
    "insertText": "combine_contiguous(std::move(state), data, PiecewiseChunkSize())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memcpy(buf_, data, size)"
  }
]