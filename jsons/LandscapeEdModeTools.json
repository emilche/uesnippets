[
  {
    "label": "FNoiseParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNoiseParameter"
  },
  {
    "label": "Accessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Accessor"
  },
  {
    "label": "TLandscapeEditCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLandscapeEditCache"
  },
  {
    "label": "FHeightmapAccessorTool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeightmapAccessorTool"
  },
  {
    "label": "FLandscapeHeightCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeHeightCache"
  },
  {
    "label": "FXYOffsetmapAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FXYOffsetmapAccessor"
  },
  {
    "label": "FLandscapeXYOffsetCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeXYOffsetCache"
  },
  {
    "label": "FAlphamapAccessorTool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAlphamapAccessorTool"
  },
  {
    "label": "FLandscapeAlphaCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeAlphaCache"
  },
  {
    "label": "FLandscapeVisCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeVisCache"
  },
  {
    "label": "ToolTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ToolTarget"
  },
  {
    "label": "FLandscapeLayerDataCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeLayerDataCache"
  },
  {
    "label": "FFullWeightmapAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFullWeightmapAccessor"
  },
  {
    "label": "FLandscapeFullWeightCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeFullWeightCache"
  },
  {
    "label": "FDatamapAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDatamapAccessor"
  },
  {
    "label": "FLandscapeDataCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeDataCache"
  },
  {
    "label": "FHeightmapToolTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeightmapToolTarget"
  },
  {
    "label": "FWeightmapToolTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWeightmapToolTarget"
  },
  {
    "label": "FLandscapeToolStrokeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeToolStrokeBase"
  },
  {
    "label": "TStrokeClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStrokeClass"
  },
  {
    "label": "FLandscapeToolBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeToolBase"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FNoiseParameter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / GCObject . h \" # include \" LandscapeProxy . h \" # include \" LandscapeToolInterface . h \" # include \" LandscapeEdMode . h \" # include \" LandscapeEditTypes . h \" # include \" EditorViewportClient . h \" # include \" LandscapeEdit . h \" # include \" LandscapeComponent . h \" # include \" LandscapeDataAccess . h \" # include \" LandscapeHeightfieldCollisionComponent . h \" # include \" InstancedFoliageActor . h \" # include \" AI / NavigationSystemBase . h \" # include \" Landscape . h \" # include \" LandscapeEditorPrivate . h \" # include \" Logging / LogMacros . h \" # include \" VisualLogger / VisualLogger . h \" struct FNoiseParameter { float Base ; float NoiseScale ; float NoiseAmount ;)",
    "insertText": "FNoiseParameter()"
  },
  {
    "label": "FNoiseParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNoiseParameter(float InBase, float InScale, float InAmount) : Base(InBase), NoiseScale(InScale), NoiseAmount(InAmount)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Sample(int32 X, int32 Y)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (float Noise = 0 . 0 f ; X =)",
    "insertText": "Abs(X)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "Abs(Y)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float OctaveShift = static_cast<)",
    "insertText": "float(1 << Octave)"
  },
  {
    "label": "PerlinNoise2D()",
    "kind": "Method",
    "detail": "Function (float OctaveScale = OctaveShift / NoiseScale ; Noise + =)",
    "insertText": "PerlinNoise2D(X * OctaveScale, Y * OctaveScale)"
  },
  {
    "label": "TestGreater()",
    "kind": "Method",
    "detail": "Function (} } return Base + Noise* NoiseAmount ; } bool)",
    "insertText": "TestGreater(int32 X, int32 Y, float TestValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float ParameterValue = Base ;)",
    "insertText": "if(NoiseScale > DELTA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float OctaveAmplitude = NoiseAmount / OctaveShift ;)",
    "insertText": "if(TestValue > ParameterValue + OctaveAmplitude)"
  },
  {
    "label": "TestLess()",
    "kind": "Method",
    "detail": "Function (} } } return TestValue> = ParameterValue ; } bool)",
    "insertText": "TestLess(int32 X, int32 Y, float TestValue)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : const int32 Permutations [ 2 5 6 ] ; bool)",
    "insertText": "operator(const FNoiseParameter& SrcNoise)"
  },
  {
    "label": "Fade()",
    "kind": "Method",
    "detail": "Function (Base = SrcNoise . Base ; NoiseScale = SrcNoise . NoiseScale ; NoiseAmount = SrcNoise . NoiseAmount ; } float)",
    "insertText": "Fade(float T)"
  },
  {
    "label": "Grad()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Grad(int32 Hash, float X, float Y)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (int32 H = Hash& 1 5 ; float U = H<8 | | H = = 1 2 | | H = = 1 3 ? X : Y,V = H<4 | | H = = 1 2 | | H = = 1 3 ? Y : 0 ;)",
    "insertText": "return((H & 1) == 0 ? U : -U) + ((H & 2) == 0 ? V : -V)"
  },
  {
    "label": "PerlinNoise2D()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "PerlinNoise2D(float X, float Y)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (int32 TruncX =)",
    "insertText": "TruncToInt(X), TruncY = FMath::TruncToInt(Y)"
  },
  {
    "label": "Fade()",
    "kind": "Method",
    "detail": "Function (float FracX = X - TruncX,FracY = Y - TruncY ; float U =)",
    "insertText": "Fade(FracX), V = Fade(FracY)"
  },
  {
    "label": "Permutations()",
    "kind": "Method",
    "detail": "Function (int32 A = Permutations [ IntX ] + IntY,AA = Permutations [ A& 2 5 5 ],AB =)",
    "insertText": "Permutations(A + 1) & 255], B = Permutations[(IntX + 1) & 255] + IntY, BA = Permutations[B & 255], BB = Permutations[(B + 1)"
  },
  {
    "label": "LowPassFilter()",
    "kind": "Method",
    "detail": "Function (} } ; # if WITH_KISSFFT # include \" tools / kiss_fftnd . h \" # endif template<DataType> void)",
    "insertText": "LowPassFilter(int32 X1, int32 Y1, int32 X2, int32 Y2, FLandscapeBrushData& BrushInfo, TArray<DataType>& Data, const float DetailScale, const float ApplyRatio = 1.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_KISSFFT int32 FFTWidth = X2 - X1 - 1 ; int32 FFTHeight = Y2 - Y1 - 1 ;)",
    "insertText": "if(FFTWidth <= 1 && FFTHeight <= 1)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (kiss_fft_cpx*)",
    "insertText": "buf(kiss_fft_cpx *)KISS_FFT_MALLOC(sizeof(kiss_fft_cpx) * Dims[0] * Dims[1])"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (kiss_fft_cpx*)",
    "insertText": "out(kiss_fft_cpx *)KISS_FFT_MALLOC(sizeof(kiss_fft_cpx) * Dims[0] * Dims[1])"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const TArray<DataType>::ElementType* DataScanline = Data .)",
    "insertText": "GetData() + (Y - Y1) * (X2 - X1 + 1) + (0 - X1)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (kiss_fft_cpx* BufScanline =)",
    "insertText": "buf(Y - (Y1 + 1)) * Dims[1] + (0 - (X1 + 1))"
  },
  {
    "label": "kiss_fftnd()",
    "kind": "Method",
    "detail": "Function (BufScanline [ X ] . r = DataScanline [ X ] ; BufScanline [ X ] . i = 0 ; } })",
    "insertText": "kiss_fftnd(stf, buf, out)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 CenterPos [ 2 ] = { Dims [ 0 ]>> 1,Dims [ 1 ]>> 1 } ;)",
    "insertText": "for(int32 Y = 0; Y < Dims[0]; Y++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float DistFromCenter ;)",
    "insertText": "for(int32 X = 0; X < Dims[1]; X++)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (DistFromCenter = static_cast<)",
    "insertText": "float(X*X + Y*Y)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} else { DistFromCenter = static_cast<)",
    "insertText": "float((X - Dims[1])*(X - Dims[1]) + Y*Y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(X < CenterPos[1])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (DistFromCenter = static_cast<)",
    "insertText": "float(X*X + (Y - Dims[0])*(Y - Dims[0]))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} else { DistFromCenter = static_cast<)",
    "insertText": "float((X - Dims[1])*(X - Dims[1]) + (Y - Dims[0])*(Y - Dims[0]))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} } float Ratio = 1 . 0 f - DetailScale ; float Dist = FMath::Min<)",
    "insertText": "float((Dims[0] * Ratio)*(Dims[0] * Ratio), (Dims[1] * Ratio)*(Dims[1] * Ratio))"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (float Filter = 1 . 0)",
    "insertText": "f(1.0f + DistFromCenter / Dist)"
  },
  {
    "label": "CA_SUPPRESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CA_SUPPRESS(6385)"
  },
  {
    "label": "kiss_fftnd()",
    "kind": "Method",
    "detail": "Function (out [ X + Y* Dims [ 1 ] ] . r* = Filter ; out [ X + Y* Dims [ 1 ] ] . i* = Filter ; } })",
    "insertText": "kiss_fftnd(sti, out, buf)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float Scale = static_cast<)",
    "insertText": "float(Dims[0] * Dims[1])"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 BrushX1 = FMath::Max<)",
    "insertText": "int32(BrushInfo.GetBounds().Min.X, X1 + 1)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 BrushY1 = FMath::Max<)",
    "insertText": "int32(BrushInfo.GetBounds().Min.Y, Y1 + 1)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 BrushX2 = FMath::Min<)",
    "insertText": "int32(BrushInfo.GetBounds().Max.X, X2)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 BrushY2 = FMath::Min<)",
    "insertText": "int32(BrushInfo.GetBounds().Max.Y, Y2)"
  },
  {
    "label": "GetDataPtr()",
    "kind": "Method",
    "detail": "Function (const float* BrushScanline = BrushInfo .)",
    "insertText": "GetDataPtr(FIntPoint(0, Y))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float BrushValue = BrushScanline [ X ] ;)",
    "insertText": "if(BrushValue > 0.0f)"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (DataScanline [ X ] = static_cast<)",
    "insertText": "DataType(FMath::Lerp(static_cast<float>(DataScanline[X]), BufScanline[X].r / Scale, BrushValue * ApplyRatio))"
  },
  {
    "label": "KISS_FFT_FREE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "KISS_FFT_FREE(stf)"
  },
  {
    "label": "KISS_FFT_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KISS_FFT_FREE(sti)"
  },
  {
    "label": "KISS_FFT_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KISS_FFT_FREE(buf)"
  },
  {
    "label": "KISS_FFT_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KISS_FFT_FREE(out)"
  },
  {
    "label": "TLandscapeEditCache()",
    "kind": "Method",
    "detail": "Function (# endif } template<class Accessor,AccessorType> struct TLandscapeEditCache { public : typedef AccessorType DataType ; typedef Accessor AccessorClass ; Accessor DataAccess ;)",
    "insertText": "TLandscapeEditCache(const FLandscapeToolTarget& InTarget) : DataAccess(InTarget) , LandscapeInfo(InTarget.LandscapeInfo)"
  },
  {
    "label": "CacheData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CacheData(int32 X1, int32 Y1, int32 X2, int32 Y2, bool bCacheOriginalData = false)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(TLandscapeEditCache_CacheData)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (int32 ValidX1 = X1 ; int32 ValidY1 = Y1 ; int32 ValidX2 = X2 ; int32 ValidY2 = Y2 ; DataAccess .)",
    "insertText": "GetData(ValidX1, ValidY1, ValidX2, ValidY2, CachedData)"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (bIsValid = false ; return ; } } else { DataAccess .)",
    "insertText": "GetDataFast(X1, Y1, X2, Y2, CachedData)"
  },
  {
    "label": "VisualizeLandscapeRegion()",
    "kind": "Method",
    "detail": "Function (} CachedX1 = X1 ; CachedY1 = Y1 ; CachedX2 = X2 ; CachedY2 = Y2 ;)",
    "insertText": "VisualizeLandscapeRegion(CachedX1, CachedY1, CachedX2, CachedY2, FColor::Red, FString::Printf(TEXT(\"Cache Data (X1:%i, Y1:%i, X2:%i, Y2:%i)\"), CachedX1, CachedY1, CachedX2, CachedY2))"
  },
  {
    "label": "bCacheOriginalData()",
    "kind": "Method",
    "detail": "Function (OriginalData = CachedData ; } bIsValid = true ; } else { auto ExtendCache = [ this,)",
    "insertText": "bCacheOriginalData(const int32 InX1, const int32 InY1, const int32 InX2, const int32 InY2)"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (} else { DataAccess .)",
    "insertText": "GetDataFast(InX1, InY1, InX2, InY2, CachedData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bCacheOriginalData)"
  },
  {
    "label": "CacheOriginalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheOriginalData(InX1, InY1, InX2, InY2)"
  },
  {
    "label": "VisualizeLandscapeRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisualizeLandscapeRegion(InX1, InY1, InX2, InY2, FColor::Purple, FString::Printf(TEXT(\"Cache Original Data (X1:%i, Y1:%i, X2:%i, Y2:%i)\"), InX1, InY1, InX2, InY2), 10.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ; bool bCacheExtended = false ;)",
    "insertText": "if(X1 < CachedX1)"
  },
  {
    "label": "ExtendCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendCache(X1, CachedY1, CachedX1 - 1, CachedY2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CachedX1 = X1 ; bCacheExtended = true ; })",
    "insertText": "if(X2 > CachedX2)"
  },
  {
    "label": "ExtendCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendCache(CachedX2 + 1, CachedY1, X2, CachedY2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CachedX2 = X2 ; bCacheExtended = true ; })",
    "insertText": "if(Y1 < CachedY1)"
  },
  {
    "label": "ExtendCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendCache(CachedX1, Y1, CachedX2, CachedY1 - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CachedY1 = Y1 ; bCacheExtended = true ; })",
    "insertText": "if(Y2 > CachedY2)"
  },
  {
    "label": "ExtendCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendCache(CachedX1, CachedY2 + 1, CachedX2, Y2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CachedY2 = Y2 ; bCacheExtended = true ; })",
    "insertText": "if(bCacheExtended)"
  },
  {
    "label": "GetValueRef()",
    "kind": "Method",
    "detail": "Function (} } } AccessorType*)",
    "insertText": "GetValueRef(int32 LandscapeX, int32 LandscapeY)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetValue(float LandscapeX, float LandscapeY)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (int32 X =)",
    "insertText": "FloorToInt(LandscapeX)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (int32 Y =)",
    "insertText": "FloorToInt(LandscapeY)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (AccessorType* P00 = CachedData .)",
    "insertText": "Find(FIntPoint(X, Y))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (AccessorType* P10 = CachedData .)",
    "insertText": "Find(FIntPoint(X + 1, Y))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (AccessorType* P01 = CachedData .)",
    "insertText": "Find(FIntPoint(X, Y + 1))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (AccessorType* P11 = CachedData .)",
    "insertText": "Find(FIntPoint(X + 1, Y + 1))"
  },
  {
    "label": "P00()",
    "kind": "Method",
    "detail": "Function (float V00 = P00 ?*)",
    "insertText": "P00(P10 ? *P10 : (P01 ? *P01 : (P11 ? *P11 : 0.0f)))"
  },
  {
    "label": "P10()",
    "kind": "Method",
    "detail": "Function (float V10 = P10 ?*)",
    "insertText": "P10(P00 ? *P00 : (P11 ? *P11 : (P01 ? *P01 : 0.0f)))"
  },
  {
    "label": "P01()",
    "kind": "Method",
    "detail": "Function (float V01 = P01 ?*)",
    "insertText": "P01(P00 ? *P00 : (P11 ? *P11 : (P10 ? *P10 : 0.0f)))"
  },
  {
    "label": "P11()",
    "kind": "Method",
    "detail": "Function (float V11 = P11 ?*)",
    "insertText": "P11(P10 ? *P10 : (P01 ? *P01 : (P00 ? *P00 : 0.0f)))"
  },
  {
    "label": "GetNormal()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetNormal(int32 X, int32 Y)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector Vert00 =)",
    "insertText": "FVector(0.0f, 0.0f, V00)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector Vert01 =)",
    "insertText": "FVector(0.0f, 1.0f, V01)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector Vert10 =)",
    "insertText": "FVector(1.0f, 0.0f, V10)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (FVector Vert11 =)",
    "insertText": "FVector(1.0f, 1.0f, V11)"
  },
  {
    "label": "FaceNormal1()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FaceNormal1((Vert00 - Vert10) ^ (Vert10 - Vert11)).GetSafeNormal()"
  },
  {
    "label": "FaceNormal2()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FaceNormal2((Vert11 - Vert01) ^ (Vert01 - Vert00)).GetSafeNormal()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(int32 LandscapeX, int32 LandscapeY, AccessorType Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CachedData .)",
    "insertText": "Add(FIntPoint(LandscapeX, LandscapeY), Forward<AccessorType>(Value))"
  },
  {
    "label": "IsZeroValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsZeroValue(const FVector& Value)"
  },
  {
    "label": "IsZeroValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsZeroValue(const FVector2D& Value)"
  },
  {
    "label": "IsZeroValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsZeroValue(const uint16& Value)"
  },
  {
    "label": "FIntRect()",
    "kind": "Method",
    "detail": "Function (} using FPrepareRegionForCachingFunction = TFunction<)",
    "insertText": "FIntRect(const FIntRect& NewCacheBounds)"
  },
  {
    "label": "GetDataAndCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDataAndCache(int32 X1, int32 Y1, int32 X2, int32 Y2, TArray<AccessorType>& OutData, FPrepareRegionForCachingFunction PrepareRegionForCaching)"
  },
  {
    "label": "VisualizeLandscapeRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisualizeLandscapeRegion(X1, Y1, X2, Y2, FColor::Blue, TEXT(\"CacheDataRequest\"))"
  },
  {
    "label": "NewCacheBounds()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "NewCacheBounds(bIsValid ? FMath::Min(X1, CachedX1) : X1, bIsValid ? FMath::Min(Y1, CachedY1) : Y1, bIsValid ? FMath::Max(X2, CachedX2) : X2, bIsValid ? FMath::Max(Y2, CachedY2) : Y2)"
  },
  {
    "label": "PrepareRegionForCaching()",
    "kind": "Method",
    "detail": "Function (NewCacheBounds =)",
    "insertText": "PrepareRegionForCaching(NewCacheBounds)"
  },
  {
    "label": "CacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheData(NewCacheBounds.Min.X, NewCacheBounds.Min.Y, NewCacheBounds.Max.X, NewCacheBounds.Max.Y)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensure(HasCachedData(X1, Y1, X2, Y2))"
  },
  {
    "label": "GetCachedData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCachedData(int32 X1, int32 Y1, int32 X2, int32 Y2, TArray<AccessorType>& OutData)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(TLandscapeEditCache_GetCachedData)"
  },
  {
    "label": "XSize()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "XSize(1 + X2 - X1)"
  },
  {
    "label": "YSize()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "YSize(1 + Y2 - Y1)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (const int32 NumSamples = XSize* YSize ; OutData .)",
    "insertText": "Empty(NumSamples)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "AddUninitialized(NumSamples)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bHasNonZero = false ;)",
    "insertText": "for(int32 Y = Y1; Y <= Y2; Y++)"
  },
  {
    "label": "YOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "YOffset(Y - Y1)"
  },
  {
    "label": "YOffset()",
    "kind": "Method",
    "detail": "Function (const int32 XYOffset =)",
    "insertText": "YOffset(X - X1)"
  },
  {
    "label": "GetValueRef()",
    "kind": "Method",
    "detail": "Function (AccessorType* Ptr =)",
    "insertText": "GetValueRef(X, Y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutData [ XYOffset ] =* Ptr ;)",
    "insertText": "if(!IsZeroValue(*Ptr))"
  },
  {
    "label": "XYOffset()",
    "kind": "Method",
    "detail": "Function (bHasNonZero = true ; } } else { OutData [)",
    "insertText": "XYOffset(AccessorType)"
  },
  {
    "label": "SetCachedData()",
    "kind": "Method",
    "detail": "Function (} } } return bHasNonZero ; } void)",
    "insertText": "SetCachedData(int32 X1, int32 Y1, int32 X2, int32 Y2, TArray<AccessorType>& Data, ELandscapeLayerPaintingRestriction PaintingRestriction = ELandscapeLayerPaintingRestriction::None, bool bUpdateData = true)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(TLandscapeEditCache_SetCachedData)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(X, Y, Data[(X - X1) + (Y - Y1)*(1 + X2 - X1)])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bUpdateData)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (DataAccess .)",
    "insertText": "SetData(X1, Y1, X2, Y2, Data.GetData(), PaintingRestriction)"
  },
  {
    "label": "GetOriginalData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetOriginalData(int32 X1, int32 Y1, int32 X2, int32 Y2, TArray<AccessorType>& OutOriginalData)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(TLandscapeEditCache_GetOriginalData)"
  },
  {
    "label": "NumSamples()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumSamples(1 + X2 - X1)*(1 + Y2 - Y1)"
  },
  {
    "label": "OutOriginalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutOriginalData(X - X1) + (Y - Y1) * (1 + X2 - X1)] = Ptr ? *Ptr : (AccessorType)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Flush()"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(TLandscapeEditCache_Flush)"
  },
  {
    "label": "CacheOriginalData()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "CacheOriginalData(int32 X1, int32 Y1, int32 X2, int32 Y2)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint Key =)",
    "insertText": "FIntPoint(X, Y)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (AccessorType* Ptr = CachedData .)",
    "insertText": "Find(Key)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OriginalData .)",
    "insertText": "Add(Key, *Ptr)"
  },
  {
    "label": "VisualizeLandscapeRegion()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "VisualizeLandscapeRegion(int32 InX1, int32 InY1, int32 InX2, int32 InY2, const FColor& InColor, const FString& InDescription, double InZOffset = 0.0f)"
  },
  {
    "label": "GetLandscapeProxy()",
    "kind": "Method",
    "detail": "Function (ALandscapeProxy* LandscapeProxy = LandscapeInfo ->)",
    "insertText": "GetLandscapeProxy()"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform& LandscapeTransform = LandscapeProxy ->)",
    "insertText": "GetTransform()"
  },
  {
    "label": "ZOffset()",
    "kind": "Method",
    "detail": "Function (double BaseZOffset = 1 0 . 0 ; FVector)",
    "insertText": "ZOffset(0.0, 0.0, BaseZOffset + InZOffset)"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (ZOffset / = LandscapeTransform .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (FTransform WorldTransformForVisLog =)",
    "insertText": "FTransform(ZOffset)"
  },
  {
    "label": "UE_VLOG_OBOX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_VLOG_OBOX(LandscapeProxy, LogLandscapeTools, Log, FBox(FVector(InX1, InY1, 0.0) - FVector(0.5, 0.5, 0.0), FVector(InX2, InY2, 0.0) + FVector(0.5, 0.5, 0.0)), WorldTransformForVisLog.ToMatrixWithScale(), InColor, TEXT(\"%s\"), *InDescription)"
  },
  {
    "label": "FHeightmapAccessorTool()",
    "kind": "Method",
    "detail": "Function (} TMap<FIntPoint,AccessorType> CachedData ; TMap<FIntPoint,AccessorType> OriginalData ; TWeakObjectPtr<ULandscapeInfo> LandscapeInfo ; bool bIsValid = false ; int32 CachedX1 = INDEX_NONE ; int32 CachedY1 = INDEX_NONE ; int32 CachedX2 = INDEX_NONE ; int32 CachedY2 = INDEX_NONE ; } ; template<bool bInUseInterp> struct FHeightmapAccessorTool : public FHeightmapAccessor<bInUseInterp> {)",
    "insertText": "FHeightmapAccessorTool(const FLandscapeToolTarget& InTarget) : FHeightmapAccessor<bInUseInterp>(InTarget.LandscapeInfo.Get())"
  },
  {
    "label": "ClampValue()",
    "kind": "Method",
    "detail": "Function (} } ; struct FLandscapeHeightCache : public TLandscapeEditCache<FHeightmapAccessorTool<true>,uint16> { uint16)",
    "insertText": "ClampValue(int32 Value)"
  },
  {
    "label": "FLandscapeHeightCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeHeightCache(const FLandscapeToolTarget& InTarget) : TLandscapeEditCache<FHeightmapAccessorTool<true>, uint16>(InTarget)"
  },
  {
    "label": "FXYOffsetmapAccessor()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool bInUseInterp> struct FXYOffsetmapAccessor { enum { bUseInterp = bInUseInterp } ;)",
    "insertText": "FXYOffsetmapAccessor(ULandscapeInfo* InLandscapeInfo)"
  },
  {
    "label": "FLandscapeEditDataInterface()",
    "kind": "Method",
    "detail": "Function (LandscapeInfo = InLandscapeInfo ; LandscapeEdit = new)",
    "insertText": "FLandscapeEditDataInterface(InLandscapeInfo)"
  },
  {
    "label": "FXYOffsetmapAccessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXYOffsetmapAccessor(const FLandscapeToolTarget& InTarget) : FXYOffsetmapAccessor(InTarget.LandscapeInfo.Get())"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetData(int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, FVector>& Data)"
  },
  {
    "label": "GetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit ->)",
    "insertText": "GetXYOffsetData(X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "GetHeightData()",
    "kind": "Method",
    "detail": "Function (TMap<FIntPoint,uint16> NewHeights ; LandscapeEdit ->)",
    "insertText": "GetHeightData(X1, Y1, X2, Y2, NewHeights)"
  },
  {
    "label": "GetLocalHeight()",
    "kind": "Method",
    "detail": "Function (Value -> Z =)",
    "insertText": "GetLocalHeight(static_cast<uint16>(NewHeights.FindRef(FIntPoint(X, Y))))"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "GetDataFast(int32 X1, int32 Y1, int32 X2, int32 Y2, TMap<FIntPoint, FVector>& Data)"
  },
  {
    "label": "GetXYOffsetDataFast()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit ->)",
    "insertText": "GetXYOffsetDataFast(X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "SetData(int32 X1, int32 Y1, int32 X2, int32 Y2, const FVector* Data, ELandscapeLayerPaintingRestriction PaintingRestriction = ELandscapeLayerPaintingRestriction::None)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSet<ULandscapeComponent*> Components ;)",
    "insertText": "if(LandscapeInfo && LandscapeEdit->GetComponentsInRegion(X1, Y1, X2, Y2, &Components))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ChangedComponents .)",
    "insertText": "Append(Components)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (TArray<uint16> NewHeights ; NewHeights .)",
    "insertText": "AddZeroed((Y2 - Y1 + 1) * (X2 - X1 + 1))"
  },
  {
    "label": "X1()",
    "kind": "Method",
    "detail": "Function (NewHeights [ X -)",
    "insertText": "X1(Y - Y1) * (X2 - X1 + 1)] = LandscapeDataAccess::GetTexHeight(static_cast<float>(Data[(X - X1 + (Y - Y1) * (X2 - X1 + 1))].Z))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } bool bUpdateFoliage = false ; bool bUpdateNormals = false ;)",
    "insertText": "if(!LandscapeEdit->HasLandscapeLayersContent())"
  },
  {
    "label": "InvalidateGeneratedComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGeneratedComponentData(Components)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bUpdateNormals = true ;)",
    "insertText": "for(ULandscapeComponent* Component : Components)"
  },
  {
    "label": "GetCollisionComponent()",
    "kind": "Method",
    "detail": "Function (ULandscapeHeightfieldCollisionComponent* CollisionComponent = Component ->)",
    "insertText": "GetCollisionComponent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bUpdateFoliage = true ; break ; } } })",
    "insertText": "if(bUpdateFoliage)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TArray<ULandscapeHeightfieldCollisionComponent*> CollisionComponents ; CollisionComponents .)",
    "insertText": "Empty(Components.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CollisionComponents .)",
    "insertText": "Add(Component->GetCollisionComponent())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PreUpdateLocalBoxes .)",
    "insertText": "Add(FBox(FVector((float)X1, (float)Y1, Component->CachedLocalBox.Min.Z), FVector((float)X2, (float)Y2, Component->CachedLocalBox.Max.Z)))"
  },
  {
    "label": "SetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (} LandscapeEdit ->)",
    "insertText": "SetXYOffsetData(X1, Y1, X2, Y2, Data, 0)"
  },
  {
    "label": "SetHeightData()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit ->)",
    "insertText": "SetHeightData(X1, Y1, X2, Y2, NewHeights.GetData(), 0, bUpdateNormals)"
  },
  {
    "label": "SnapFoliageInstances()",
    "kind": "Method",
    "detail": "Function (ULandscapeHeightfieldCollisionComponent* CollisionComponent = CollisionComponents [ Index ] ; CollisionComponent ->)",
    "insertText": "SnapFoliageInstances(PreUpdateLocalBoxes[Index].TransformBy(LandscapeInfo->GetLandscapeProxy()->LandscapeActorToWorld().ToMatrixWithScale()).ExpandBy(1.0f))"
  },
  {
    "label": "FXYOffsetmapAccessor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXYOffsetmapAccessor()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (delete LandscapeEdit ; LandscapeEdit = NULL ;)",
    "insertText": "for(TSet<ULandscapeComponent*>::TConstIterator It(ChangedComponents); It; ++It)"
  },
  {
    "label": "FLandscapeXYOffsetCache()",
    "kind": "Method",
    "detail": "Function (} } private : ULandscapeInfo* LandscapeInfo ; FLandscapeEditDataInterface* LandscapeEdit ; TSet<ULandscapeComponent*> ChangedComponents ; } ; template<bool bInUseInterp> struct FLandscapeXYOffsetCache : public TLandscapeEditCache<FXYOffsetmapAccessor<bInUseInterp>,FVector> {)",
    "insertText": "FLandscapeXYOffsetCache(const FLandscapeToolTarget& InTarget) : TLandscapeEditCache<FXYOffsetmapAccessor<bInUseInterp>, FVector>(InTarget)"
  },
  {
    "label": "FAlphamapAccessorTool()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool bInUseInterp,bool bInUseTotalNormalize> struct FAlphamapAccessorTool : public FAlphamapAccessor<bInUseInterp,bInUseTotalNormalize> {)",
    "insertText": "FAlphamapAccessorTool(ULandscapeInfo* InLandscapeInfo, ULandscapeLayerInfoObject* InLayerInfo) : FAlphamapAccessor<bInUseInterp, bInUseTotalNormalize>(InLandscapeInfo, InLayerInfo)"
  },
  {
    "label": "FAlphamapAccessorTool()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAlphamapAccessorTool(const FLandscapeToolTarget& InTarget) : FAlphamapAccessor<bInUseInterp, bInUseTotalNormalize>(InTarget.LandscapeInfo.Get(), InTarget.LayerInfo.Get())"
  },
  {
    "label": "FLandscapeAlphaCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeAlphaCache(const FLandscapeToolTarget& InTarget) : TLandscapeEditCache<FAlphamapAccessorTool<true, false>, uint8>(InTarget)"
  },
  {
    "label": "FLandscapeVisCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeVisCache(const FLandscapeToolTarget& InTarget) : TLandscapeEditCache<FAlphamapAccessorTool<false, false>, uint8>(InTarget)"
  },
  {
    "label": "FLandscapeLayerDataCache()",
    "kind": "Method",
    "detail": "Function (} } ; template<class ToolTarget> class FLandscapeLayerDataCache { public :)",
    "insertText": "FLandscapeLayerDataCache(const FLandscapeToolTarget& InTarget, typename ToolTarget::CacheClass& Cache) : LandscapeInfo(nullptr) , Landscape(nullptr) , EditingLayerGuid() , EditingLayerIndex(MAX_uint8) , bIsInitialized(false) , bCombinedLayerOperation(false) , bVisibilityChanged(false) , bTargetIsHeightmap(InTarget.TargetType == ELandscapeToolTargetType::Heightmap) , CacheUpToEditingLayer(Cache) , CacheBottomLayers(InTarget)"
  },
  {
    "label": "SetCacheEditingLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCacheEditingLayer(const FGuid& InEditLayerGUID)"
  },
  {
    "label": "SetEditLayer()",
    "kind": "Method",
    "detail": "Function (CacheUpToEditingLayer . DataAccess .)",
    "insertText": "SetEditLayer(InEditLayerGUID)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (EditingLayerGuid = InEditLayerGUID ; } void)",
    "insertText": "Initialize(ULandscapeInfo* InLandscapeInfo, bool InCombinedLayerOperation)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (LandscapeInfo = InLandscapeInfo ; Landscape = LandscapeInfo ? LandscapeInfo -> LandscapeActor .)",
    "insertText": "Get()"
  },
  {
    "label": "HasLayersContent()",
    "kind": "Method",
    "detail": "Function (bCombinedLayerOperation = Landscape&& Landscape ->)",
    "insertText": "HasLayersContent()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 I = 0 ;)",
    "insertText": "for(const FLandscapeLayer& CurrentLayer : Landscape->GetLayers())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BackupLayerVisibility .)",
    "insertText": "Add(CurrentLayer.bVisible)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (EditingLayerIndex = I ; } + + I ; })",
    "insertText": "check(EditingLayerIndex < Landscape->GetLayerCount())"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} bIsInitialized = true ; } } void)",
    "insertText": "Read(int32 X1, int32 Y1, int32 X2, int32 Y2, TArray<typename ToolTarget::CacheClass::DataType>& Data)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NewLayerVisibility .)",
    "insertText": "Add((I > EditingLayerIndex) ? false : CurrentLayer.bVisible)"
  },
  {
    "label": "OnCacheUpdating()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "OnCacheUpdating(const FIntRect& NewCacheBounds)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (ComponentSizeQuads)",
    "insertText": "X(FMath::FloorToInt((float)NewCacheBounds.Min.X / LandscapeInfo->ComponentSizeQuads))"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (ComponentSizeQuads)",
    "insertText": "Y(FMath::FloorToInt((float)NewCacheBounds.Min.Y / LandscapeInfo->ComponentSizeQuads))"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (ComponentSizeQuads)",
    "insertText": "X(FMath::CeilToInt((float)NewCacheBounds.Max.X / LandscapeInfo->ComponentSizeQuads))"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (ComponentSizeQuads)",
    "insertText": "Y(FMath::CeilToInt((float)NewCacheBounds.Max.Y / LandscapeInfo->ComponentSizeQuads))"
  },
  {
    "label": "GetComponentsInRegion()",
    "kind": "Method",
    "detail": "Function (TSet<ULandscapeComponent*> AffectedComponents ; LandscapeInfo ->)",
    "insertText": "GetComponentsInRegion(DesiredCacheBounds.Min.X, DesiredCacheBounds.Min.Y, DesiredCacheBounds.Max.X, DesiredCacheBounds.Max.Y, AffectedComponents)"
  },
  {
    "label": "SynchronousUpdateComponentVisibilityForHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronousUpdateComponentVisibilityForHeight(AffectedComponents, NewLayerVisibility)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (VisibilityChangedComponents .)",
    "insertText": "Append(AffectedComponents)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} return DesiredCacheBounds ; } ; FGuid PreviousLayerGUID = EditingLayerGuid .)",
    "insertText": "GetValue()"
  },
  {
    "label": "SetCacheEditingLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheEditingLayer(FGuid())"
  },
  {
    "label": "GetDataAndCache()",
    "kind": "Method",
    "detail": "Function (CacheUpToEditingLayer .)",
    "insertText": "GetDataAndCache(X1, Y1, X2, Y2, Data, OnCacheUpdating)"
  },
  {
    "label": "GetDataAndCache()",
    "kind": "Method",
    "detail": "Function (NewLayerVisibility [ EditingLayerIndex ] = false ; CacheBottomLayers .)",
    "insertText": "GetDataAndCache(X1, Y1, X2, Y2, BottomLayersData, OnCacheUpdating)"
  },
  {
    "label": "SetCacheEditingLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCacheEditingLayer(PreviousLayerGUID)"
  },
  {
    "label": "CacheData()",
    "kind": "Method",
    "detail": "Function (} else { CacheUpToEditingLayer .)",
    "insertText": "CacheData(X1, Y1, X2, Y2)"
  },
  {
    "label": "GetCachedData()",
    "kind": "Method",
    "detail": "Function (CacheUpToEditingLayer .)",
    "insertText": "GetCachedData(X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Write(int32 X1, int32 Y1, int32 X2, int32 Y2, TArray<typename ToolTarget::CacheClass::DataType>& Data, ELandscapeLayerPaintingRestriction PaintingRestriction = ELandscapeLayerPaintingRestriction::None)"
  },
  {
    "label": "GetLayerAlpha()",
    "kind": "Method",
    "detail": "Function (const float Alpha = Landscape ->)",
    "insertText": "GetLayerAlpha(EditingLayerIndex, bTargetIsHeightmap)"
  },
  {
    "label": "InverseAlpha()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "InverseAlpha(Alpha != 0.f)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TArray<ToolTarget::CacheClass::DataType> DataContribution ; DataContribution .)",
    "insertText": "Empty(Data.Num())"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (DataContribution .)",
    "insertText": "AddUninitialized(Data.Num())"
  },
  {
    "label": "Contribution()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Contribution(LandscapeDataAccess::GetLocalHeight(Data[i]) - LandscapeDataAccess::GetLocalHeight(BottomLayersData[i]))"
  },
  {
    "label": "DataType()",
    "kind": "Method",
    "detail": "Function (DataContribution [ i ] = static_cast<ToolTarget::)",
    "insertText": "DataType(LandscapeDataAccess::GetTexHeight(Contribution))"
  },
  {
    "label": "GetEditLayer()",
    "kind": "Method",
    "detail": "Function (} FGuid CacheAccessorLayerGuid = CacheUpToEditingLayer . DataAccess .)",
    "insertText": "GetEditLayer()"
  },
  {
    "label": "SetLayersVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayersVisibility(BackupLayerVisibility)"
  },
  {
    "label": "SetCachedData()",
    "kind": "Method",
    "detail": "Function (CacheUpToEditingLayer .)",
    "insertText": "SetCachedData(X1, Y1, X2, Y2, Data, PaintingRestriction, false)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (CacheUpToEditingLayer . DataAccess .)",
    "insertText": "SetData(X1, Y1, X2, Y2, DataContribution.GetData(), PaintingRestriction)"
  },
  {
    "label": "SynchronousUpdateHeightmapForComponents()",
    "kind": "Method",
    "detail": "Function (const bool bUpdateCollision = true ; const bool bIntermediateRender = false ;)",
    "insertText": "SynchronousUpdateHeightmapForComponents(VisibilityChangedComponents, bUpdateCollision, bIntermediateRender)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (VisibilityChangedComponents .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetCachedData()",
    "kind": "Method",
    "detail": "Function (bVisibilityChanged = false ; } } else { CacheUpToEditingLayer .)",
    "insertText": "SetCachedData(X1, Y1, X2, Y2, Data, PaintingRestriction)"
  },
  {
    "label": "SynchronousUpdateHeightmapForComponents()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "SynchronousUpdateHeightmapForComponents(const TSet<ULandscapeComponent*>& InComponents, bool bUpdateCollision, bool bIntermediateRender)"
  },
  {
    "label": "RequestHeightmapUpdate()",
    "kind": "Method",
    "detail": "Function (const bool bUpdateAll = false ; Component ->)",
    "insertText": "RequestHeightmapUpdate(bUpdateAll, bUpdateCollision)"
  },
  {
    "label": "ForceUpdateLayersContent()",
    "kind": "Method",
    "detail": "Function (} Landscape ->)",
    "insertText": "ForceUpdateLayersContent(bIntermediateRender)"
  },
  {
    "label": "SetLayersVisibility()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetLayersVisibility(const TArray<bool>& InLayerVisibility)"
  },
  {
    "label": "SetLayerVisibility()",
    "kind": "Method",
    "detail": "Function (Landscape ->)",
    "insertText": "SetLayerVisibility(i, InLayerVisibility[i], true)"
  },
  {
    "label": "SynchronousUpdateComponentVisibilityForHeight()",
    "kind": "Method",
    "detail": "Function (bVisibilityChanged = true ; } } } } ; void)",
    "insertText": "SynchronousUpdateComponentVisibilityForHeight(const TSet<ULandscapeComponent*>& InComponents, const TArray<bool>& InLayerVisibility)"
  },
  {
    "label": "SetLayersVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayersVisibility(InLayerVisibility)"
  },
  {
    "label": "SynchronousUpdateHeightmapForComponents()",
    "kind": "Method",
    "detail": "Function (const bool bUpdateCollision = false ; const bool bIntermediateRender = true ;)",
    "insertText": "SynchronousUpdateHeightmapForComponents(InComponents, bUpdateCollision, bIntermediateRender)"
  },
  {
    "label": "FFullWeightmapAccessor()",
    "kind": "Method",
    "detail": "Function (} ; ULandscapeInfo* LandscapeInfo ; ALandscape* Landscape ; TOptional<FGuid> EditingLayerGuid ; uint8 EditingLayerIndex ; TArray<bool> BackupLayerVisibility ; TArray<ToolTarget::CacheClass::DataType> BottomLayersData ; bool bIsInitialized ; bool bCombinedLayerOperation ; bool bVisibilityChanged ; bool bTargetIsHeightmap ; TSet<ULandscapeComponent*> VisibilityChangedComponents ; ToolTarget::CacheClass& CacheUpToEditingLayer ; ToolTarget::CacheClass CacheBottomLayers ; } ; template<bool bInUseInterp> struct FFullWeightmapAccessor { enum { bUseInterp = bInUseInterp } ;)",
    "insertText": "FFullWeightmapAccessor(ULandscapeInfo* InLandscapeInfo) : LandscapeInfo(InLandscapeInfo) , LandscapeEdit(InLandscapeInfo)"
  },
  {
    "label": "FFullWeightmapAccessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFullWeightmapAccessor(const FLandscapeToolTarget& InTarget) : FFullWeightmapAccessor(InTarget.LandscapeInfo.Get())"
  },
  {
    "label": "FFullWeightmapAccessor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFullWeightmapAccessor()"
  },
  {
    "label": "RecreateCollision()",
    "kind": "Method",
    "detail": "Function (CollisionComponent ->)",
    "insertText": "RecreateCollision()"
  },
  {
    "label": "UpdateComponentData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentData(*CollisionComponent)"
  },
  {
    "label": "SetEditLayer()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "SetEditLayer(const FGuid& InEditLayerGUID)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetData(int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, TArray<uint8>>& Data)"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataFast(int32 X1, int32 Y1, int32 X2, int32 Y2, TMap<FIntPoint, TArray<uint8>>& Data)"
  },
  {
    "label": "GetWeightDataFast()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit .)",
    "insertText": "GetWeightDataFast(NULL, X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetData(int32 X1, int32 Y1, int32 X2, int32 Y2, const uint8* Data, ELandscapeLayerPaintingRestriction PaintingRestriction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSet<ULandscapeComponent*> Components ;)",
    "insertText": "if(LandscapeEdit.GetComponentsInRegion(X1, Y1, X2, Y2, &Components))"
  },
  {
    "label": "SetAlphaData()",
    "kind": "Method",
    "detail": "Function (} LandscapeEdit .)",
    "insertText": "SetAlphaData(DirtyLayerInfos, X1, Y1, X2, Y2, Data, 0, PaintingRestriction)"
  },
  {
    "label": "FLandscapeFullWeightCache()",
    "kind": "Method",
    "detail": "Function (} TSet<ULandscapeLayerInfoObject*> DirtyLayerInfos ; private : ULandscapeInfo* LandscapeInfo ; FLandscapeEditDataInterface LandscapeEdit ; TSet<ULandscapeComponent*> ModifiedComponents ; } ; struct FLandscapeFullWeightCache : public TLandscapeEditCache<FFullWeightmapAccessor<false>,TArray<uint8>> {)",
    "insertText": "FLandscapeFullWeightCache(const FLandscapeToolTarget& InTarget) : TLandscapeEditCache<FFullWeightmapAccessor<false>, TArray<uint8>>(InTarget)"
  },
  {
    "label": "GetCachedData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCachedData(int32 X1, int32 Y1, int32 X2, int32 Y2, TArray<uint8>& OutData, int32 ArraySize)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (OutData [ XYOffset +)",
    "insertText": "Z(*Ptr)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "Memzero((void*)&OutData[XYOffset], (SIZE_T)ArraySize)"
  },
  {
    "label": "SetCachedData()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "SetCachedData(int32 X1, int32 Y1, int32 X2, int32 Y2, TArray<uint8>& Data, int32 ArraySize, ELandscapeLayerPaintingRestriction PaintingRestriction)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Value ; Value .)",
    "insertText": "Empty(ArraySize)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "AddUninitialized(ArraySize)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (Value [ Z ] =)",
    "insertText": "Data((X - X1) + (Y - Y1)*(1 + X2 - X1))"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetValue(X, Y, MoveTemp(Value))"
  },
  {
    "label": "AddDirtyLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDirtyLayer(ULandscapeLayerInfoObject* LayerInfo)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DataAccess . DirtyLayerInfos .)",
    "insertText": "Add(LayerInfo)"
  },
  {
    "label": "FDatamapAccessor()",
    "kind": "Method",
    "detail": "Function (} } ; template<bool bInUseInterp> struct FDatamapAccessor { enum { bUseInterp = bInUseInterp } ;)",
    "insertText": "FDatamapAccessor(ULandscapeInfo* InLandscapeInfo) : LandscapeEdit(InLandscapeInfo)"
  },
  {
    "label": "FDatamapAccessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDatamapAccessor(const FLandscapeToolTarget& InTarget) : FDatamapAccessor(InTarget.LandscapeInfo.Get())"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetData(int32& X1, int32& Y1, int32& X2, int32& Y2, TMap<FIntPoint, uint8>& Data)"
  },
  {
    "label": "GetSelectData()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit .)",
    "insertText": "GetSelectData(X1, Y1, X2, Y2, Data)"
  },
  {
    "label": "GetDataFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataFast(const int32 X1, const int32 Y1, const int32 X2, const int32 Y2, TMap<FIntPoint, uint8>& Data)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetData(int32 X1, int32 Y1, int32 X2, int32 Y2, const uint8* Data, ELandscapeLayerPaintingRestriction PaintingRestriction = ELandscapeLayerPaintingRestriction::None)"
  },
  {
    "label": "SetSelectData()",
    "kind": "Method",
    "detail": "Function (LandscapeEdit .)",
    "insertText": "SetSelectData(X1, Y1, X2, Y2, Data, 0)"
  },
  {
    "label": "FLandscapeDataCache()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeDataCache(const FLandscapeToolTarget& InTarget) : TLandscapeEditCache<FDatamapAccessor<false>, uint8>(InTarget)"
  },
  {
    "label": "StrengthMultiplier()",
    "kind": "Method",
    "detail": "Function (} } ; struct FHeightmapToolTarget { typedef FLandscapeHeightCache CacheClass ; const ELandscapeToolTargetType TargetType = ELandscapeToolTargetType::Heightmap ; float)",
    "insertText": "StrengthMultiplier(ULandscapeInfo* LandscapeInfo, float BrushRadius)"
  },
  {
    "label": "ToWorldMatrix()",
    "kind": "Method",
    "detail": "Function (} return 5 . 0 f* LANDSCAPE_INV_ZSCALE ; } FMatrix)",
    "insertText": "ToWorldMatrix(ULandscapeInfo* LandscapeInfo)"
  },
  {
    "label": "FTranslationMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix Result =)",
    "insertText": "FTranslationMatrix(FVector(0, 0, -LandscapeDataAccess::MidValue))"
  },
  {
    "label": "FScaleMatrix()",
    "kind": "Method",
    "detail": "Function (Result* =)",
    "insertText": "FScaleMatrix(FVector(1.0f, 1.0f, LANDSCAPE_ZSCALE) * LandscapeInfo->DrawScale)"
  },
  {
    "label": "FScaleMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix Result =)",
    "insertText": "FScaleMatrix(FVector(1.0f, 1.0f, LANDSCAPE_INV_ZSCALE) / (LandscapeInfo->DrawScale))"
  },
  {
    "label": "FTranslationMatrix()",
    "kind": "Method",
    "detail": "Function (Result* =)",
    "insertText": "FTranslationMatrix(FVector(0, 0, LandscapeDataAccess::MidValue))"
  },
  {
    "label": "SetEditLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEditLayer(const FGuid& EditLayerGUID)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(LandscapeInfo)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "FLandscapeToolBase()",
    "kind": "Method",
    "detail": "Function (} protected : FEdModeLandscape* EdMode = nullptr ; const FLandscapeToolTarget& Target ; TObjectPtr<ULandscapeInfo> LandscapeInfo = nullptr ; } ; template<class TStrokeClass> class FLandscapeToolBase : public FLandscapeTool { using Super = FLandscapeTool ; public :)",
    "insertText": "FLandscapeToolBase(FEdModeLandscape* InEdMode) : LastInteractorPosition(FVector2D::ZeroVector) , TimeSinceLastInteractorMove(0.0f) , EdMode(InEdMode) , bCanToolBeActivated(true) , ToolStroke()"
  },
  {
    "label": "ShouldUpdateEditingLayer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUpdateEditingLayer()"
  },
  {
    "label": "GetBeginToolContentUpdateFlag()",
    "kind": "Method",
    "detail": "Function (} ELandscapeLayerUpdateMode)",
    "insertText": "GetBeginToolContentUpdateFlag()"
  },
  {
    "label": "GetTickToolContentUpdateFlag()",
    "kind": "Method",
    "detail": "Function (bool bUpdateHeightmap = this -> EdMode -> CurrentToolTarget . TargetType = = ELandscapeToolTargetType::Heightmap ; return bUpdateHeightmap ? ELandscapeLayerUpdateMode::Update_Heightmap_Editing : ELandscapeLayerUpdateMode::Update_Weightmap_Editing ; } ELandscapeLayerUpdateMode)",
    "insertText": "GetTickToolContentUpdateFlag()"
  },
  {
    "label": "GetEndToolContentUpdateFlag()",
    "kind": "Method",
    "detail": "Function (} ELandscapeLayerUpdateMode)",
    "insertText": "GetEndToolContentUpdateFlag()"
  },
  {
    "label": "BeginTool()",
    "kind": "Method",
    "detail": "Function (bool bUpdateHeightmap = this -> EdMode -> CurrentToolTarget . TargetType = = ELandscapeToolTargetType::Heightmap ; return bUpdateHeightmap ? ELandscapeLayerUpdateMode::Update_Heightmap_All : ELandscapeLayerUpdateMode::Update_Weightmap_All ; } bool)",
    "insertText": "BeginTool(FEditorViewportClient* ViewportClient, const FLandscapeToolTarget& InTarget, const FVector& InHitLocation)"
  },
  {
    "label": "TRACE_BOOKMARK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_BOOKMARK(TEXT(\"BeginTool - %s\"), GetToolName())"
  },
  {
    "label": "GetLandscape()",
    "kind": "Method",
    "detail": "Function (ALandscape* Landscape = this -> EdMode ->)",
    "insertText": "GetLandscape()"
  },
  {
    "label": "RequestLayersContentUpdate()",
    "kind": "Method",
    "detail": "Function (Landscape ->)",
    "insertText": "RequestLayersContentUpdate(GetBeginToolContentUpdateFlag())"
  },
  {
    "label": "SetEditingLayer()",
    "kind": "Method",
    "detail": "Function (Landscape ->)",
    "insertText": "SetEditingLayer(this->EdMode->GetCurrentLayerGuid())"
  },
  {
    "label": "SetGrassUpdateEnabled()",
    "kind": "Method",
    "detail": "Function (} Landscape ->)",
    "insertText": "SetGrassUpdateEnabled(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ensure(InteractorPositions.Num() == 0))"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (InteractorPositions .)",
    "insertText": "Empty(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ensure(!IsToolActive()))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ToolStroke .)",
    "insertText": "Emplace(EdMode, ViewportClient, InTarget)"
  },
  {
    "label": "SetEditLayer()",
    "kind": "Method",
    "detail": "Function (ToolStroke ->)",
    "insertText": "SetEditLayer(this->EdMode->GetCurrentLayerGuid())"
  },
  {
    "label": "BeginStroke()",
    "kind": "Method",
    "detail": "Function (EdMode -> CurrentBrush ->)",
    "insertText": "BeginStroke(static_cast<float>(InHitLocation.X), static_cast<float>(InHitLocation.Y), this)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (} LastInteractorPosition =)",
    "insertText": "FVector2D(InHitLocation)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (InteractorPositions .)",
    "insertText": "Emplace(LastInteractorPosition, ViewportClient ? IsModifierPressed(ViewportClient) : false)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (TimeSinceLastInteractorMove = 0 . 0 f ; ToolStroke ->)",
    "insertText": "Apply(ViewportClient, EdMode->CurrentBrush, EdMode->UISettings, InteractorPositions)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (ViewportClient ->)",
    "insertText": "Invalidate(false, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(TStrokeClass::UseContinuousApply && TimeSinceLastInteractorMove >= 0.25f)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (InteractorPositions .)",
    "insertText": "Emplace(LastInteractorPosition, IsModifierPressed(ViewportClient))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} TimeSinceLastInteractorMove + = DeltaTime ;)",
    "insertText": "if(ShouldUpdateEditingLayer())"
  },
  {
    "label": "RequestLayersContentUpdate()",
    "kind": "Method",
    "detail": "Function (Landscape ->)",
    "insertText": "RequestLayersContentUpdate(GetTickToolContentUpdateFlag())"
  },
  {
    "label": "EndTool()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "EndTool(FEditorViewportClient* ViewportClient)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ToolStroke .)",
    "insertText": "Reset()"
  },
  {
    "label": "EndStroke()",
    "kind": "Method",
    "detail": "Function (EdMode -> CurrentBrush ->)",
    "insertText": "EndStroke()"
  },
  {
    "label": "UpdateLayerUsageInformation()",
    "kind": "Method",
    "detail": "Function (EdMode ->)",
    "insertText": "UpdateLayerUsageInformation(&EdMode->CurrentToolTarget.LayerInfo)"
  },
  {
    "label": "RequestLayersContentUpdate()",
    "kind": "Method",
    "detail": "Function (Landscape ->)",
    "insertText": "RequestLayersContentUpdate(GetEndToolContentUpdateFlag())"
  },
  {
    "label": "SetEditingLayer()",
    "kind": "Method",
    "detail": "Function (Landscape ->)",
    "insertText": "SetEditingLayer()"
  },
  {
    "label": "SetGrassUpdateEnabled()",
    "kind": "Method",
    "detail": "Function (} Landscape ->)",
    "insertText": "SetGrassUpdateEnabled(true)"
  },
  {
    "label": "TRACE_BOOKMARK()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRACE_BOOKMARK(TEXT(\"EndTool - %s\"), GetToolName())"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MouseMove(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector HitLocation ;)",
    "insertText": "if(EdMode->LandscapeMouseTrace(ViewportClient, x, y, HitLocation))"
  },
  {
    "label": "MouseMove()",
    "kind": "Method",
    "detail": "Function (EdMode -> CurrentBrush ->)",
    "insertText": "MouseMove(static_cast<float>(HitLocation.X), static_cast<float>(HitLocation.Y))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsToolActive())"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (LastInteractorPosition =)",
    "insertText": "FVector2D(HitLocation)"
  },
  {
    "label": "NewPosition()",
    "kind": "Method",
    "detail": "Function (} TimeSinceLastInteractorMove = 0 . 0 f ; } } } else { const FVector2D)",
    "insertText": "NewPosition(x, y)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (LastInteractorPosition =)",
    "insertText": "FVector2D(NewPosition)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (InteractorPositions .)",
    "insertText": "Emplace(LastInteractorPosition, IsModifierPressed())"
  },
  {
    "label": "IsToolActive()",
    "kind": "Method",
    "detail": "Function (} TimeSinceLastInteractorMove = 0 . 0 f ; } return true ; } bool)",
    "insertText": "IsToolActive()"
  },
  {
    "label": "SetCanToolBeActivated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCanToolBeActivated(bool Value)"
  },
  {
    "label": "CanToolBeActivated()",
    "kind": "Method",
    "detail": "Function (bCanToolBeActivated = Value ; } bool)",
    "insertText": "CanToolBeActivated()"
  }
]