[
  {
    "label": "spin_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "spin_mutex"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "spin_mutex()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_spin_mutex_H # define __TBB_spin_mutex_H # include<cstddef> # include<new> # include \" aligned_space . h \" # include \" tbb_stddef . h \" # include \" tbb_machine . h \" # include \" tbb_profiling . h \" # include \" internal / _mutex_padding . h \" namespace tbb { class spin_mutex : internal::mutex_copy_deprecated_and_disabled { __TBB_atomic_flag flag ; public :)",
    "insertText": "spin_mutex() : flag(0)"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS)",
    "insertText": "internal_construct()"
  },
  {
    "label": "internal_acquire()",
    "kind": "Method",
    "detail": "Function (# endif } class scoped_lock : internal::no_copy { private : spin_mutex* my_mutex ; __TBB_Flag my_unlock_value ; void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_acquire(spin_mutex& m)"
  },
  {
    "label": "internal_try_acquire()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_try_acquire(spin_mutex& m)"
  },
  {
    "label": "internal_release()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_release()"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (class spin_mutex ; public :)",
    "insertText": "scoped_lock() : my_mutex(NULL), my_unlock_value(0)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "scoped_lock(spin_mutex& m ) : my_unlock_value(0)"
  },
  {
    "label": "suppress_unused_warning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "suppress_unused_warning(my_unlock_value)"
  },
  {
    "label": "internal_acquire()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS | | TBB_USE_ASSERT my_mutex = NULL ;)",
    "insertText": "internal_acquire(m)"
  },
  {
    "label": "__TBB_LockByte()",
    "kind": "Method",
    "detail": "Function (# else my_mutex =& m ;)",
    "insertText": "__TBB_LockByte(m.flag)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "acquire(spin_mutex& m)"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "try_acquire(spin_mutex& m)"
  },
  {
    "label": "internal_try_acquire()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS | | TBB_USE_ASSERT return)",
    "insertText": "internal_try_acquire(m)"
  },
  {
    "label": "__TBB_TryLockByte()",
    "kind": "Method",
    "detail": "Function (# else bool result =)",
    "insertText": "__TBB_TryLockByte(m.flag)"
  },
  {
    "label": "__TBB_UnlockByte()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__TBB_UnlockByte(my_mutex->flag)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (my_mutex = NULL ; # endif } ~)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (const bool is_rw_mutex = false ; const bool is_recursive_mutex = false ; const bool is_fair_mutex = false ; void)",
    "insertText": "lock()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS aligned_space<scoped_lock> tmp ;)",
    "insertText": "new(tmp.begin()) scoped_lock(*this)"
  },
  {
    "label": "__TBB_LockByte()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__TBB_LockByte(flag)"
  },
  {
    "label": "try_lock()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "try_lock()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS aligned_space<scoped_lock> tmp ;)",
    "insertText": "return(new(tmp.begin()) scoped_lock)->internal_try_acquire(*this)"
  },
  {
    "label": "__TBB_TryLockByte()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__TBB_TryLockByte(flag)"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "unlock()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_THREADING_TOOLS aligned_space<scoped_lock> tmp ; scoped_lock& s =* tmp .)",
    "insertText": "begin()"
  },
  {
    "label": "__TBB_UnlockByte()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__TBB_UnlockByte(flag)"
  },
  {
    "label": "__TBB_DEFINE_PROFILING_SET_NAME()",
    "kind": "Method",
    "detail": "Function (# endif } class scoped_lock ; } ;)",
    "insertText": "__TBB_DEFINE_PROFILING_SET_NAME(spin_mutex) } #if ( __TBB_x86_32 || __TBB_x86_64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(__TBB_x86_32 || __TBB_x86_64)"
  }
]