[
  {
    "label": "concurrent_unordered_map_traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_map_traits"
  },
  {
    "label": "Type1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type1"
  },
  {
    "label": "Type2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type2"
  },
  {
    "label": "concurrent_unordered_multimap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_multimap"
  },
  {
    "label": "concurrent_unordered_map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_unordered_map"
  },
  {
    "label": "concurrent_unordered_map_traits()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_concurrent_unordered_map_H # define __TBB_concurrent_unordered_map_H # include \" internal / _concurrent_unordered_impl . h \" namespace tbb { namespace interface5 { template<Key,T,Hash_compare,Allocator,bool Allow_multimapping> class concurrent_unordered_map_traits { protected : typedef std::pair<const Key,T> value_type ; typedef Key key_type ; typedef Hash_compare hash_compare ; typedef tbb::internal::allocator_rebind<Allocator,value_type>::type allocator_type ; # if __TBB_UNORDERED_NODE_HANDLE_PRESENT typedef tbb::internal::node_handle<key_type,value_type,internal::split_ordered_list<value_type,allocator_type>::node,allocator_type> node_type ; # endif enum { allow_multimapping = Allow_multimapping } ;)",
    "insertText": "concurrent_unordered_map_traits() : my_hash_compare()"
  },
  {
    "label": "concurrent_unordered_map_traits()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_map_traits(const hash_compare& hc) : my_hash_compare(hc)"
  },
  {
    "label": "get_key()",
    "kind": "Method",
    "detail": "Function (} template<class Type1,class Type2> const Key&)",
    "insertText": "get_key(const std::pair<Type1, Type2>& value)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (} hash_compare my_hash_compare ; } ; template<Key,T,Hasher,Key_equality,Allocator> class concurrent_unordered_multimap ; template<Key,T,Hasher = tbb::tbb_hash<Key>,Key_equality = std::equal_to<Key>,Allocator = tbb::tbb_allocator<std::pair<const Key,T>>> class concurrent_unordered_map : public internal::concurrent_unordered_base<concurrent_unordered_map_traits<Key,T,internal::hash_compare<Key,Hasher,Key_equality>,Allocator,false>> { typedef internal::hash_compare<Key,Hasher,Key_equality> hash_compare ; typedef concurrent_unordered_map_traits<Key,T,hash_compare,Allocator,false> traits_type ; typedef internal::concurrent_unordered_base<traits_type> base_type ; # if __TBB_EXTRA_DEBUG public : # endif using traits_type::allow_multimapping ; public : using base_type::end ; using base_type::find ; using base_type::insert ; typedef Key key_type ; typedef base_type::value_type value_type ; typedef T mapped_type ; typedef Hasher hasher ; typedef Key_equality key_equal ; typedef hash_compare key_compare ; typedef base_type::allocator_type allocator_type ; typedef base_type::pointer pointer ; typedef base_type::const_pointer const_pointer ; typedef base_type::reference reference ; typedef base_type::const_reference const_reference ; typedef base_type::size_type size_type ; typedef base_type::difference_type difference_type ; typedef base_type::iterator iterator ; typedef base_type::const_iterator const_iterator ; typedef base_type::iterator local_iterator ; typedef base_type::const_iterator const_local_iterator ; # if __TBB_UNORDERED_NODE_HANDLE_PRESENT typedef base_type::node_type node_type ; # endif)",
    "insertText": "concurrent_unordered_map(size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_map(size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_map(size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_map(const Allocator& a) : base_type(base_type::initial_bucket_number, key_compare(), a)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_map(Iterator first, Iterator last, size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(first, last)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_map(Iterator first, Iterator last, size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_map(Iterator first, Iterator last, size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_INITIALIZER_LISTS_PRESENT)",
    "insertText": "concurrent_unordered_map(std::initializer_list<value_type> il, size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(il.begin(),il.end())"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_map(std::initializer_list<value_type> il, size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(il.begin(), il.end())"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_map(std::initializer_list<value_type> il, size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP11_RVALUE_REF_PRESENT&& ! __TBB_IMPLICIT_MOVE_PRESENT)",
    "insertText": "concurrent_unordered_map(const concurrent_unordered_map& table) : base_type(table)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_unordered_map&)",
    "insertText": "operator(const concurrent_unordered_map& table)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_map(concurrent_unordered_map&& table) : base_type(std::move(table))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_unordered_map&)",
    "insertText": "operator(concurrent_unordered_map&& table)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "concurrent_unordered_map(concurrent_unordered_map&& table, const Allocator& a) : base_type(std::move(table), a)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_UNORDERED_NODE_HANDLE_PRESENT template<Hash,Equality> void)",
    "insertText": "merge(concurrent_unordered_map<Key, T, Hash, Equality, Allocator>& source)"
  },
  {
    "label": "internal_merge()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_merge(source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<Hash,Equality> void)",
    "insertText": "merge(concurrent_unordered_map<Key, T, Hash, Equality, Allocator>&& source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<Hash,Equality> void)",
    "insertText": "merge(concurrent_unordered_multimap<Key, T, Hash, Equality, Allocator>& source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<Hash,Equality> void)",
    "insertText": "merge(concurrent_unordered_multimap<Key, T, Hash, Equality, Allocator>&& source)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "concurrent_unordered_map(const concurrent_unordered_map& table, const Allocator& a) : base_type(table, a)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} mapped_type&)",
    "insertText": "operator(const key_type& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator where =)",
    "insertText": "find(key)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (where =)",
    "insertText": "insert(std::pair<key_type, mapped_type>(key, mapped_type()))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return((*where).second)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} mapped_type&)",
    "insertText": "at(const key_type& key)"
  },
  {
    "label": "throw_exception()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "throw_exception(tbb::internal::eid_invalid_key)"
  },
  {
    "label": "conditional_t()",
    "kind": "Method",
    "detail": "Function (} } ; # if __TBB_CPP17_DEDUCTION_GUIDES_PRESENT namespace internal { using namespace tbb::internal ; template<template<. . .> Map,Key,Element,. . . Args> using cu_map_t = Map<Key,Element,)",
    "insertText": "conditional_t(sizeof...(Args)>0) && !is_allocator_v< pack_element_t<0, Args...> >, pack_element_t<0, Args...>, tbb_hash<Key> >, std::conditional_t< (sizeof...(Args)>1) && !is_allocator_v< pack_element_t<1, Args...> >, pack_element_t<1, Args...>, std::equal_to<Key> >, std::conditional_t< (sizeof...(Args)>0) && is_allocator_v< pack_element_t<sizeof...(Args)-1, Args...> >, pack_element_t<sizeof...(Args)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (internal::cu_map_t<concurrent_unordered_map, internal::iterator_key_t<I>, internal::iterator_mapped_t<I>>)",
    "insertText": "concurrent_unordered_map(I, I)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (internal::cu_map_t<concurrent_unordered_map, internal::iterator_key_t<I>, internal::iterator_mapped_t<I>, Args...>)",
    "insertText": "concurrent_unordered_map(I, I, size_t, Args...)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (internal::cu_map_t<concurrent_unordered_map, Key, Element>)",
    "insertText": "concurrent_unordered_map(std::initializer_list<std::pair<const Key, Element>>)"
  },
  {
    "label": "concurrent_unordered_map()",
    "kind": "Method",
    "detail": "Function (internal::cu_map_t<concurrent_unordered_map, Key, Element, Args...>)",
    "insertText": "concurrent_unordered_map(std::initializer_list<std::pair<const Key, Element>>, size_t, Args...)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (# endif template<Key,T,Hasher = tbb::tbb_hash<Key>,Key_equality = std::equal_to<Key>,Allocator = tbb::tbb_allocator<std::pair<const Key,T>>> class concurrent_unordered_multimap : public internal::concurrent_unordered_base<concurrent_unordered_map_traits<Key,T,internal::hash_compare<Key,Hasher,Key_equality>,Allocator,true>> { typedef internal::hash_compare<Key,Hasher,Key_equality> hash_compare ; typedef concurrent_unordered_map_traits<Key,T,hash_compare,Allocator,true> traits_type ; typedef internal::concurrent_unordered_base<traits_type> base_type ; # if __TBB_EXTRA_DEBUG public : # endif using traits_type::allow_multimapping ; public : using base_type::insert ; typedef Key key_type ; typedef base_type::value_type value_type ; typedef T mapped_type ; typedef Hasher hasher ; typedef Key_equality key_equal ; typedef hash_compare key_compare ; typedef base_type::allocator_type allocator_type ; typedef base_type::pointer pointer ; typedef base_type::const_pointer const_pointer ; typedef base_type::reference reference ; typedef base_type::const_reference const_reference ; typedef base_type::size_type size_type ; typedef base_type::difference_type difference_type ; typedef base_type::iterator iterator ; typedef base_type::const_iterator const_iterator ; typedef base_type::iterator local_iterator ; typedef base_type::const_iterator const_local_iterator ; # if __TBB_UNORDERED_NODE_HANDLE_PRESENT typedef base_type::node_type node_type ; # endif)",
    "insertText": "concurrent_unordered_multimap(size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multimap(size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multimap(size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multimap(const Allocator& a) : base_type(base_type::initial_bucket_number, key_compare(), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_multimap(Iterator first, Iterator last, size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets,key_compare(a_hasher,a_keyeq), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_multimap(Iterator first, Iterator last, size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (} template<Iterator>)",
    "insertText": "concurrent_unordered_multimap(Iterator first, Iterator last, size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_INITIALIZER_LISTS_PRESENT)",
    "insertText": "concurrent_unordered_multimap(std::initializer_list<value_type> il, size_type n_of_buckets = base_type::initial_bucket_number, const hasher& a_hasher = hasher(), const key_equal& a_keyeq = key_equal(), const allocator_type& a = allocator_type()) : base_type(n_of_buckets, key_compare(a_hasher, a_keyeq), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multimap(std::initializer_list<value_type> il, size_type n_of_buckets, const allocator_type& a) : base_type(n_of_buckets, key_compare(hasher(), key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multimap(std::initializer_list<value_type> il, size_type n_of_buckets, const hasher& a_hasher, const allocator_type& a) : base_type(n_of_buckets, key_compare(a_hasher, key_equal()), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP11_RVALUE_REF_PRESENT&& ! __TBB_IMPLICIT_MOVE_PRESENT)",
    "insertText": "concurrent_unordered_multimap(const concurrent_unordered_multimap& table) : base_type(table)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_unordered_multimap&)",
    "insertText": "operator(const concurrent_unordered_multimap& table)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_unordered_multimap(concurrent_unordered_multimap&& table) : base_type(std::move(table))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_unordered_multimap&)",
    "insertText": "operator(concurrent_unordered_multimap&& table)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP11_RVALUE_REF_PRESENT)",
    "insertText": "concurrent_unordered_multimap(concurrent_unordered_multimap&& table, const Allocator& a) : base_type(std::move(table), a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "concurrent_unordered_multimap(const concurrent_unordered_multimap& table, const Allocator& a) : base_type(table, a)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (internal::cu_map_t<concurrent_unordered_multimap, internal::iterator_key_t<I>, internal::iterator_mapped_t<I>>)",
    "insertText": "concurrent_unordered_multimap(I, I)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (internal::cu_map_t<concurrent_unordered_multimap, internal::iterator_key_t<I>, internal::iterator_mapped_t<I>, Args...>)",
    "insertText": "concurrent_unordered_multimap(I, I, size_t, Args...)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (internal::cu_map_t<concurrent_unordered_multimap, Key, Element>)",
    "insertText": "concurrent_unordered_multimap(std::initializer_list<std::pair<const Key, Element>>)"
  },
  {
    "label": "concurrent_unordered_multimap()",
    "kind": "Method",
    "detail": "Function (internal::cu_map_t<concurrent_unordered_multimap, Key, Element, Args...>)",
    "insertText": "concurrent_unordered_multimap(std::initializer_list<std::pair<const Key, Element>>, size_t, Args...)"
  }
]