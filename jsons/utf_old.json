[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __UTF_OLD_H__ # define __UTF_OLD_H__ # ifndef U_HIDE_OBSOLETE_UTF_OLD_H # define U_HIDE_OBSOLETE_UTF_OLD_H 0 # endif # if !)",
    "insertText": "defined(U_HIDE_DEPRECATED_API)"
  },
  {
    "label": "UTF_IS_ERROR()",
    "kind": "Method",
    "detail": "Function (# endif # define UTF_SIZE 1 6 # define UTF_SAFE # undef UTF_UNSAFE # undef UTF_STRICT # define UTF8_ERROR_VALUE_1 0 x15 # define UTF8_ERROR_VALUE_2 0 x9f # define UTF_ERROR_VALUE 0 xffff # define)",
    "insertText": "UTF_IS_ERROR(c) \\ (((c)&0xfffe)==0xfffe || (c)==UTF8_ERROR_VALUE_1 || (c)==UTF8_ERROR_VALUE_2) #define UTF_IS_VALID(c) \\ (UTF_IS_UNICODE_CHAR(c) && \\ (c)!=UTF8_ERROR_VALUE_1 && (c)!=UTF8_ERROR_VALUE_2) #define UTF_IS_SURROGATE(uchar) (((uchar)&0xfffff800)==0xd800) #define UTF_IS_UNICODE_NONCHAR(c) \\ ((c)>=0xfdd0 && \\ ((uint32_t)(c)<=0xfdef || ((c)&0xfffe)==0xfffe) && \\ (uint32_t)(c)<=0x10ffff) #define UTF_IS_UNICODE_CHAR(c) \\ ((uint32_t)(c)<0xd800 || \\ ((uint32_t)(c)>0xdfff && \\ (uint32_t)(c)<=0x10ffff && \\ !UTF_IS_UNICODE_NONCHAR(c))) #ifdef U_UTF8_IMPL #elif defined(U_STATIC_IMPLEMENTATION) || defined(U_COMMON_IMPLEMENTATION)"
  },
  {
    "label": "UTF8_COUNT_TRAIL_BYTES()",
    "kind": "Method",
    "detail": "Function (# else U_CFUNC U_IMPORT const uint8_t utf8_countTrailBytes [ ] ; # endif # define)",
    "insertText": "UTF8_COUNT_TRAIL_BYTES(leadByte) (utf8_countTrailBytes[(uint8_t)leadByte]) #define UTF8_MASK_LEAD_BYTE(leadByte, countTrailBytes) ((leadByte)&=(1<<(6-(countTrailBytes)))-1) #define UTF8_IS_SINGLE(uchar) (((uchar)&0x80)==0) #define UTF8_IS_LEAD(uchar) ((uint8_t)((uchar)-0xc0)<0x3e) #define UTF8_IS_TRAIL(uchar) (((uchar)&0xc0)==0x80) #define UTF8_NEED_MULTIPLE_UCHAR(c) ((uint32_t)(c)>0x7f) #if 1 # define UTF8_CHAR_LENGTH(c) \\ ((uint32_t)(c)<=0x7f ? 1 : \\ ((uint32_t)(c)<=0x7ff ? 2 : \\ ((uint32_t)((c)-0x10000)>0xfffff ? 3 : 4) \\ ) \\ ) #else # define UTF8_CHAR_LENGTH(c) \\ ((uint32_t)(c)<=0x7f ? 1 : \\ ((uint32_t)(c)<=0x7ff ? 2 : \\ ((uint32_t)(c)<=0xffff ? 3 : \\ ((uint32_t)(c)<=0x10ffff ? 4 : \\ ((uint32_t)(c)<=0x3ffffff ? 5 : \\ ((uint32_t)(c)<=0x7fffffff ? 6 : 3) \\ ) \\ ) \\ ) \\ ) \\ ) #endif #define UTF8_MAX_CHAR_LENGTH 4 #define UTF8_ARRAY_SIZE(size) ((5*(size))/2) #define UTF8_GET_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "_utf8_get_char_unsafe_index()",
    "kind": "Method",
    "detail": "Function (\\ int32_t)",
    "insertText": "_utf8_get_char_unsafe_index(int32_t)(i)"
  },
  {
    "label": "UTF8_SET_CHAR_START_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UTF8_SET_CHAR_START_UNSAFE(s, _utf8_get_char_unsafe_index)"
  },
  {
    "label": "UTF8_NEXT_CHAR_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UTF8_NEXT_CHAR_UNSAFE(s, _utf8_get_char_unsafe_index, c)"
  },
  {
    "label": "UTF8_GET_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF8_GET_CHAR_SAFE(s, start, i, length, c, strict)"
  },
  {
    "label": "_utf8_get_char_safe_index()",
    "kind": "Method",
    "detail": "Function (\\ int32_t)",
    "insertText": "_utf8_get_char_safe_index(int32_t)(i)"
  },
  {
    "label": "UTF8_SET_CHAR_START_SAFE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UTF8_SET_CHAR_START_SAFE(s, start, _utf8_get_char_safe_index)"
  },
  {
    "label": "UTF8_NEXT_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UTF8_NEXT_CHAR_SAFE(s, _utf8_get_char_safe_index, length, c, strict)"
  },
  {
    "label": "UTF8_NEXT_CHAR_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF8_NEXT_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((uint8_t)((c)-0xc0)<0x35)"
  },
  {
    "label": "UTF8_COUNT_TRAIL_BYTES()",
    "kind": "Method",
    "detail": "Function (\\ uint8_t __count =)",
    "insertText": "UTF8_COUNT_TRAIL_BYTES(c)"
  },
  {
    "label": "UTF8_MASK_LEAD_BYTE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UTF8_MASK_LEAD_BYTE(c, __count)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "switch(__count)"
  },
  {
    "label": "case()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "case(c)=((c)<<6)|((s)[(i)++]&0x3f)"
  },
  {
    "label": "UTF8_APPEND_CHAR_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ \\ break ; \\ } \\ } \\ } # define)",
    "insertText": "UTF8_APPEND_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((uint32_t)(c)<=0x7f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "if((uint32_t)(c)<=0x7ff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\)",
    "insertText": "if((uint32_t)(c)<=0xffff)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else(s)[(i)++]=(uint8_t)(((c)>>18)|0xf0)"
  },
  {
    "label": "UTF8_FWD_1_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF8_FWD_1_UNSAFE(s, i)"
  },
  {
    "label": "UTF8_FWD_N_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF8_FWD_N_UNSAFE(s, i, n)"
  },
  {
    "label": "__N()",
    "kind": "Method",
    "detail": "Function (\\ int32_t)",
    "insertText": "__N(n)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "while(__N>0)"
  },
  {
    "label": "UTF8_SET_CHAR_START_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ - - __N ; \\ } \\ } # define)",
    "insertText": "UTF8_SET_CHAR_START_UNSAFE(s, i)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "while(UTF8_IS_TRAIL((s)[i]))"
  },
  {
    "label": "UTF8_NEXT_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (} \\ } # define)",
    "insertText": "UTF8_NEXT_CHAR_SAFE(s, i, length, c, strict)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((c)>=0x80)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF8_IS_LEAD(c))"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else(c)"
  },
  {
    "label": "UTF8_APPEND_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "UTF8_APPEND_CHAR_SAFE(s, i, length, c)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else(i)=utf8_appendCharSafeBody(s, (int32_t)(i), (int32_t)(length), c, NULL)"
  },
  {
    "label": "UTF8_FWD_1_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF8_FWD_1_SAFE(s, i, length) U8_FWD_1(s, i, length) #define UTF8_FWD_N_SAFE(s, i, length, n) U8_FWD_N(s, i, length, n) #define UTF8_SET_CHAR_START_SAFE(s, start, i) U8_SET_CP_START(s, start, i) #define UTF8_PREV_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF8_IS_TRAIL(c))"
  },
  {
    "label": "__shift()",
    "kind": "Method",
    "detail": "Function (\\ uint8_t __b,__count = 1,)",
    "insertText": "__shift(c)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "for(;;)"
  },
  {
    "label": "__b()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "__b(s)[--(i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(__b>=0xc0)"
  },
  {
    "label": "UTF8_MASK_LEAD_BYTE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UTF8_MASK_LEAD_BYTE(__b, __count)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ break ; \\ })",
    "insertText": "else(c)|=(UChar32)(__b&0x3f)"
  },
  {
    "label": "UTF8_BACK_1_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ + + __count ; \\ __shift + = 6 ; \\ } \\ } \\ } \\ } # define)",
    "insertText": "UTF8_BACK_1_UNSAFE(s, i)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "while(UTF8_IS_TRAIL((s)[--(i)]))"
  },
  {
    "label": "UTF8_BACK_N_UNSAFE()",
    "kind": "Method",
    "detail": "Function (} \\ } # define)",
    "insertText": "UTF8_BACK_N_UNSAFE(s, i, n)"
  },
  {
    "label": "UTF8_SET_CHAR_LIMIT_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ - - __N ; \\ } \\ } # define)",
    "insertText": "UTF8_SET_CHAR_LIMIT_UNSAFE(s, i)"
  },
  {
    "label": "UTF8_PREV_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF8_PREV_CHAR_SAFE(s, start, i, c, strict)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((c)<=0xbf)"
  },
  {
    "label": "UTF8_BACK_1_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "UTF8_BACK_1_SAFE(s, start, i) U8_BACK_1(s, start, i) #define UTF8_BACK_N_SAFE(s, start, i, n) U8_BACK_N(s, start, i, n) #define UTF8_SET_CHAR_LIMIT_SAFE(s, start, i, length) U8_SET_CP_LIMIT(s, start, i, length) #define UTF_IS_FIRST_SURROGATE(uchar) (((uchar)&0xfffffc00)==0xd800) #define UTF_IS_SECOND_SURROGATE(uchar) (((uchar)&0xfffffc00)==0xdc00) #define UTF_IS_SURROGATE_FIRST(c) (((c)&0x400)==0) #define UTF_SURROGATE_OFFSET ((0xd800<<10UL)+0xdc00-0x10000) #define UTF16_GET_PAIR_VALUE(first, second) \\ (((first)<<10UL)+(second)-UTF_SURROGATE_OFFSET) #define UTF_FIRST_SURROGATE(supplementary) (UChar)(((supplementary)>>10)+0xd7c0) #define UTF_SECOND_SURROGATE(supplementary) (UChar)(((supplementary)&0x3ff)|0xdc00) #define UTF16_LEAD(supplementary) UTF_FIRST_SURROGATE(supplementary) #define UTF16_TRAIL(supplementary) UTF_SECOND_SURROGATE(supplementary) #define UTF16_IS_SINGLE(uchar) !UTF_IS_SURROGATE(uchar) #define UTF16_IS_LEAD(uchar) UTF_IS_FIRST_SURROGATE(uchar) #define UTF16_IS_TRAIL(uchar) UTF_IS_SECOND_SURROGATE(uchar) #define UTF16_NEED_MULTIPLE_UCHAR(c) ((uint32_t)(c)>0xffff) #define UTF16_CHAR_LENGTH(c) ((uint32_t)(c)<=0xffff ? 1 : 2) #define UTF16_MAX_CHAR_LENGTH 2 #define UTF16_ARRAY_SIZE(size) (size) #define UTF16_GET_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF_IS_SURROGATE(c))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF_IS_SURROGATE_FIRST(c))"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else(c)=UTF16_GET_PAIR_VALUE((s)[(i)-1], (c))"
  },
  {
    "label": "UTF16_GET_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } # define)",
    "insertText": "UTF16_GET_CHAR_SAFE(s, start, i, length, c, strict)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((i)+1<(length) && UTF_IS_SECOND_SURROGATE(__c2=(s)[(i)+1]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ } else)",
    "insertText": "if(strict)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } else { \\)",
    "insertText": "if((i)-1>=(start) && UTF_IS_FIRST_SURROGATE(__c2=(s)[(i)-1]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\ } else)",
    "insertText": "if((strict) && !UTF_IS_UNICODE_CHAR(c))"
  },
  {
    "label": "UTF16_NEXT_CHAR_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_NEXT_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF_IS_FIRST_SURROGATE(c))"
  },
  {
    "label": "UTF16_APPEND_CHAR_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_APPEND_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else(s)[(i)++]=(uint16_t)(((c)>>10)+0xd7c0)"
  },
  {
    "label": "UTF16_FWD_1_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_FWD_1_UNSAFE(s, i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF_IS_FIRST_SURROGATE((s)[(i)++]))"
  },
  {
    "label": "UTF16_FWD_N_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_FWD_N_UNSAFE(s, i, n)"
  },
  {
    "label": "UTF16_SET_CHAR_START_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ - - __N ; \\ } \\ } # define)",
    "insertText": "UTF16_SET_CHAR_START_UNSAFE(s, i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF_IS_SECOND_SURROGATE((s)[i]))"
  },
  {
    "label": "UTF16_NEXT_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_NEXT_CHAR_SAFE(s, i, length, c, strict)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ uint16_t __c2 ; \\)",
    "insertText": "if((i)<(length) && UTF_IS_SECOND_SURROGATE(__c2=(s)[(i)]))"
  },
  {
    "label": "UTF16_APPEND_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_APPEND_CHAR_SAFE(s, i, length, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else)",
    "insertText": "if((uint32_t)(c)<=0x10ffff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((i)+1<(length))"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "else(s)[(i)"
  },
  {
    "label": "UTF16_FWD_1_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_FWD_1_SAFE(s, i, length) U16_FWD_1(s, i, length) #define UTF16_FWD_N_SAFE(s, i, length, n) U16_FWD_N(s, i, length, n) #define UTF16_SET_CHAR_START_SAFE(s, start, i) U16_SET_CP_START(s, start, i) #define UTF16_PREV_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF_IS_SECOND_SURROGATE(c))"
  },
  {
    "label": "UTF16_BACK_1_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_BACK_1_UNSAFE(s, i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF_IS_SECOND_SURROGATE((s)[--(i)]))"
  },
  {
    "label": "UTF16_BACK_N_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_BACK_N_UNSAFE(s, i, n)"
  },
  {
    "label": "UTF16_SET_CHAR_LIMIT_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ - - __N ; \\ } \\ } # define)",
    "insertText": "UTF16_SET_CHAR_LIMIT_UNSAFE(s, i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UTF_IS_FIRST_SURROGATE((s)[(i)-1]))"
  },
  {
    "label": "UTF16_PREV_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_PREV_CHAR_SAFE(s, start, i, c, strict)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ uint16_t __c2 ; \\)",
    "insertText": "if((i)>(start) && UTF_IS_FIRST_SURROGATE(__c2=(s)[(i)-1]))"
  },
  {
    "label": "UTF16_BACK_1_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF16_BACK_1_SAFE(s, start, i) U16_BACK_1(s, start, i) #define UTF16_BACK_N_SAFE(s, start, i, n) U16_BACK_N(s, start, i, n) #define UTF16_SET_CHAR_LIMIT_SAFE(s, start, i, length) U16_SET_CP_LIMIT(s, start, i, length) #define UTF32_IS_SAFE(c, strict) \\ (!(strict) ? \\ (uint32_t)(c)<=0x10ffff : \\ UTF_IS_UNICODE_CHAR(c)) #define UTF32_IS_SINGLE(uchar) 1 #define UTF32_IS_LEAD(uchar) 0 #define UTF32_IS_TRAIL(uchar) 0 #define UTF32_NEED_MULTIPLE_UCHAR(c) 0 #define UTF32_CHAR_LENGTH(c) 1 #define UTF32_MAX_CHAR_LENGTH 1 #define UTF32_ARRAY_SIZE(size) (size) #define UTF32_GET_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "UTF32_GET_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_GET_CHAR_SAFE(s, start, i, length, c, strict)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!UTF32_IS_SAFE(c, strict))"
  },
  {
    "label": "UTF32_NEXT_CHAR_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF32_NEXT_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "UTF32_APPEND_CHAR_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_APPEND_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "UTF32_FWD_1_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_FWD_1_UNSAFE(s, i)"
  },
  {
    "label": "UTF32_FWD_N_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_FWD_N_UNSAFE(s, i, n)"
  },
  {
    "label": "UTF32_SET_CHAR_START_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_SET_CHAR_START_UNSAFE(s, i)"
  },
  {
    "label": "UTF32_NEXT_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_NEXT_CHAR_SAFE(s, i, length, c, strict)"
  },
  {
    "label": "UTF32_APPEND_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF32_APPEND_CHAR_SAFE(s, i, length, c)"
  },
  {
    "label": "UTF32_FWD_1_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF32_FWD_1_SAFE(s, i, length)"
  },
  {
    "label": "UTF32_FWD_N_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_FWD_N_SAFE(s, i, length, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(((i)+=(n))>(length))"
  },
  {
    "label": "UTF32_SET_CHAR_START_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF32_SET_CHAR_START_SAFE(s, start, i)"
  },
  {
    "label": "UTF32_PREV_CHAR_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_PREV_CHAR_UNSAFE(s, i, c)"
  },
  {
    "label": "UTF32_BACK_1_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_BACK_1_UNSAFE(s, i)"
  },
  {
    "label": "UTF32_BACK_N_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_BACK_N_UNSAFE(s, i, n)"
  },
  {
    "label": "UTF32_SET_CHAR_LIMIT_UNSAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_SET_CHAR_LIMIT_UNSAFE(s, i)"
  },
  {
    "label": "UTF32_PREV_CHAR_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_PREV_CHAR_SAFE(s, start, i, c, strict)"
  },
  {
    "label": "UTF32_BACK_1_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF32_BACK_1_SAFE(s, start, i)"
  },
  {
    "label": "UTF32_BACK_N_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "UTF32_BACK_N_SAFE(s, start, i, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if((i)<(start))"
  },
  {
    "label": "UTF32_SET_CHAR_LIMIT_SAFE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # define)",
    "insertText": "UTF32_SET_CHAR_LIMIT_SAFE(s, i, length)"
  }
]