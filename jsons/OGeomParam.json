[
  {
    "label": "TRAITS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRAITS"
  },
  {
    "label": "OTypedGeomParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OTypedGeomParam"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_OGeomParam_h # define Alembic_AbcGeom_OGeomParam_h # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / GeometryScope . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { template<class TRAITS> class OTypedGeomParam { public : typedef TRAITS::value_type value_type ; typedef OTypedArrayProperty<TRAITS> prop_type ; class Sample { public : typedef Sample this_type ;)",
    "insertText": "Sample() : m_scope( kUnknownScope)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sample(const Abc::TypedArraySample<TRAITS> &iVals, GeometryScope iScope ) : m_vals( iVals ) , m_scope( iScope)"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Sample(const Abc::TypedArraySample<TRAITS> &iVals, const Abc::UInt32ArraySample &iIndices, GeometryScope iScope ) : m_vals( iVals ) , m_indices( iIndices ) , m_scope ( iScope)"
  },
  {
    "label": "setVals()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setVals(const Abc::TypedArraySample<TRAITS> &iVals)"
  },
  {
    "label": "getVals()",
    "kind": "Method",
    "detail": "Function (m_vals = iVals ; } const Abc::TypedArraySample<TRAITS>&)",
    "insertText": "getVals()"
  },
  {
    "label": "getIndices()",
    "kind": "Method",
    "detail": "Function (m_indices = iIndices ; } const Abc::UInt32ArraySample&)",
    "insertText": "getIndices()"
  },
  {
    "label": "getScope()",
    "kind": "Method",
    "detail": "Function (m_scope = iScope ; } GeometryScope)",
    "insertText": "getScope()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (m_vals .)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (m_scope = kUnknownScope ; } bool)",
    "insertText": "valid()"
  },
  {
    "label": "getInterpretation()",
    "kind": "Method",
    "detail": "Function (protected : Abc::TypedArraySample<TRAITS> m_vals ; Abc::UInt32ArraySample m_indices ; GeometryScope m_scope ; } ; typedef OTypedGeomParam<TRAITS> this_type ; typedef this_type::Sample sample_type ; const char*)",
    "insertText": "getInterpretation()"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "matches(const AbcA::PropertyHeader &iHeader, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(iHeader.isArray())"
  },
  {
    "label": "OTypedGeomParam()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "OTypedGeomParam() : m_isIndexed(false) , m_scope(kUnknownScope)"
  },
  {
    "label": "OTypedGeomParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OTypedGeomParam(OCompoundProperty iParent, const std::string &iName, bool iIsIndexed, GeometryScope iScope, size_t iArrayExtent, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument() ) : m_name( iName ) , m_isIndexed( iIsIndexed ) , m_scope( iScope)"
  },
  {
    "label": "OTypedGeomParam()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "OTypedGeomParam(iParent.getPtr(), iName, iIsIndexed, iScope, iArrayExtent, iArg0, iArg1, iArg2)"
  },
  {
    "label": "OTypedGeomParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OTypedGeomParam(AbcA::CompoundPropertyWriterPtr iParent, const std::string &iName, bool iIsIndexed, GeometryScope iScope, size_t iArrayExtent, const Argument &iArg0 = Argument(), const Argument &iArg1 = Argument(), const Argument &iArg2 = Argument() ) : m_name( iName ) , m_isIndexed( iIsIndexed ) , m_scope( iScope)"
  },
  {
    "label": "args()",
    "kind": "Method",
    "detail": "Function (Arguments)",
    "insertText": "args(Abc::GetErrorHandlerPolicy( iParent ))"
  },
  {
    "label": "setInto()",
    "kind": "Method",
    "detail": "Function (iArg0 .)",
    "insertText": "setInto(args)"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (AbcA::MetaData md = args .)",
    "insertText": "getMetaData()"
  },
  {
    "label": "SetGeometryScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometryScope(md, iScope)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (md .)",
    "insertText": "set(\"isGeomParam\", \"true\")"
  },
  {
    "label": "podName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "podName(Alembic::Util::PODName( TRAITS::dataType().getPod() ))"
  },
  {
    "label": "dataType()",
    "kind": "Method",
    "detail": "Function (size_t extent =)",
    "insertText": "dataType().getExtent()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (md .)",
    "insertText": "set(\"podName\", podName)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (std::ostringstream extentStrm ; extentStrm<<extent ; std::string extentStr = extentStrm .)",
    "insertText": "str()"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (md .)",
    "insertText": "set(\"podExtent\", extentStr)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (md .)",
    "insertText": "set(\"arrayExtent\", arrayExtentStr)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (md .)",
    "insertText": "set(\"interpretation\", TRAITS::interpretation())"
  },
  {
    "label": "getErrorHandlerPolicy()",
    "kind": "Method",
    "detail": "Function (Abc::ErrorHandler::Policy ehp = args .)",
    "insertText": "getErrorHandlerPolicy()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (AbcA::TimeSamplingPtr tsPtr = args .)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getTimeSamplingIndex()",
    "kind": "Method",
    "detail": "Function (uint32_t tsIndex = args .)",
    "insertText": "getTimeSamplingIndex()"
  },
  {
    "label": "GetCompoundPropertyWriterPtr()",
    "kind": "Method",
    "detail": "Function (AbcA::CompoundPropertyWriterPtr parent =)",
    "insertText": "GetCompoundPropertyWriterPtr(iParent)"
  },
  {
    "label": "getObject()",
    "kind": "Method",
    "detail": "Function (tsIndex = parent ->)",
    "insertText": "getObject()->getArchive()->addTimeSampling(*tsPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_isIndexed)"
  },
  {
    "label": "OCompoundProperty()",
    "kind": "Method",
    "detail": "Function (m_cprop =)",
    "insertText": "OCompoundProperty(iParent, iName, md, ehp)"
  },
  {
    "label": "prop_type()",
    "kind": "Method",
    "detail": "Function (m_valProp =)",
    "insertText": "prop_type(m_cprop, \".vals\", md, ehp, tsIndex)"
  },
  {
    "label": "OUInt32ArrayProperty()",
    "kind": "Method",
    "detail": "Function (m_indicesProperty =)",
    "insertText": "OUInt32ArrayProperty(m_cprop, \".indices\", tsIndex)"
  },
  {
    "label": "prop_type()",
    "kind": "Method",
    "detail": "Function (} else { m_valProp =)",
    "insertText": "prop_type(iParent, iName, md, ehp, tsIndex)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "set(const sample_type &iSamp)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"OTypedGeomParam::set()\")"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (m_valProp .)",
    "insertText": "set(iSamp.getVals())"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (m_indicesProperty .)",
    "insertText": "set(iSamp.getIndices())"
  },
  {
    "label": "SetPropUsePrevIfNull()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "SetPropUsePrevIfNull(m_valProp, iSamp.getVals())"
  },
  {
    "label": "SetPropUsePrevIfNull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropUsePrevIfNull(m_indicesProperty, iSamp.getIndices())"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END_RESET()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END_RESET()"
  },
  {
    "label": "setFromPrevious()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFromPrevious()"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"OTypedGeomParam::setFromPrevious()\")"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END()"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"OTypedGeomParam::setTimeSampling( uint32_t )\")"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (m_valProp .)",
    "insertText": "setTimeSampling(iIndex)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTimeSampling(AbcA::TimeSamplingPtr iTime)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"OTypedGeomParam::setTimeSampling( TimeSamplingPtr )\")"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (uint32_t tsIndex = m_valProp .)",
    "insertText": "getParent().getObject().getArchive().addTimeSampling( *iTime)"
  },
  {
    "label": "setTimeSampling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTimeSampling(tsIndex)"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"OTypedGeomParam::getNumSamples()\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { return 0 ; } } else {)",
    "insertText": "if(m_valProp)"
  },
  {
    "label": "isIndexed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isIndexed()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (} const std::string&)",
    "insertText": "getName()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(this_type::valid())"
  },
  {
    "label": "getValueProperty()",
    "kind": "Method",
    "detail": "Function (m_scope = kUnknownScope ; m_isIndexed = false ; } prop_type)",
    "insertText": "getValueProperty()"
  }
]