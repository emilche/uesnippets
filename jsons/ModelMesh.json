[
  {
    "label": "FCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCriterion"
  },
  {
    "label": "FDatabase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatabase"
  },
  {
    "label": "FEdgeMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdgeMesh"
  },
  {
    "label": "FFaceMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFaceMesh"
  },
  {
    "label": "FMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMesh"
  },
  {
    "label": "FPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPoint"
  },
  {
    "label": "FSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSession"
  },
  {
    "label": "FVertexMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexMesh"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FModelMesh()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADEntity . h \" # include \" Core / EntityGeom . h \" # include \" Core / Session . h \" # include \" Core / Types . h \" # include \" Mesh / Structure / Mesh . h \" namespace UE::CADKernel { class FCriterion ; class FDatabase ; class FEdgeMesh ; class FFaceMesh ; class FMesh ; class FPoint ; class FSession ; class FVertexMesh ; class FModelMesh : public FEntityGeom { FEntity ; TArray<TSharedPtr<FCriterion>> Criteria ; TArray<TArray<FPoint>*> GlobalPointCloud ; FIdent LastIdUsed ; TArray<FVertexMesh*> VertexMeshes ; TArray<FEdgeMesh*> EdgeMeshes ; TArray<FFaceMesh*> FaceMeshes ; bool QuadAnalyse = false ; double MinSize = DOUBLE_SMALL_NUMBER ; double MaxSize = HUGE_VALUE ; double MaxAngle = DOUBLE_PI ; double Sag = HUGE_VALUE ;)",
    "insertText": "FModelMesh() : FEntityGeom() , LastIdUsed(0)"
  },
  {
    "label": "GetFaceCount()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "GetFaceCount()"
  },
  {
    "label": "GetVertexCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVertexCount()"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "SpawnIdentOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnIdentOnEntities((TArray<FEntity*>&) EdgeMeshes, Database)"
  },
  {
    "label": "SpawnIdentOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnIdentOnEntities((TArray<FEntity*>&) FaceMeshes, Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities((TArray<FEntity*>&) VertexMeshes)"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities((TArray<FEntity*>&) EdgeMeshes)"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities((TArray<FEntity*>&) FaceMeshes)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (} ; EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (VertexMeshes .)",
    "insertText": "Add(&Mesh)"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMesh(FEdgeMesh& Mesh)"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMesh(FFaceMesh& Mesh)"
  },
  {
    "label": "RegisterCoordinates()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterCoordinates(TArray<FPoint>& Coordinates, int32& OutStartVertexId, int32& OutIndex)"
  },
  {
    "label": "OutIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutIndex(int32)GlobalPointCloud.Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutStartVertexId = LastIdUsed ; GlobalPointCloud .)",
    "insertText": "Add(&Coordinates)"
  },
  {
    "label": "LastIdUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LastIdUsed(int32)Coordinates.Num()"
  },
  {
    "label": "GetMeshOfVertexNodeId()",
    "kind": "Method",
    "detail": "Function (} const FVertexMesh*)",
    "insertText": "GetMeshOfVertexNodeId(const int32 Id)"
  },
  {
    "label": "GetNodeCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNodeCoordinates(TArray<FPoint>& NodeCoordinates)"
  },
  {
    "label": "GetNodeCoordinates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNodeCoordinates(TArray<FVector3f>& NodeCoordinates)"
  },
  {
    "label": "GetMeshes()",
    "kind": "Method",
    "detail": "Function (const TArray<FMesh*>&)",
    "insertText": "GetMeshes()"
  },
  {
    "label": "GetFaceMeshes()",
    "kind": "Method",
    "detail": "Function (const TArray<FFaceMesh*>&)",
    "insertText": "GetFaceMeshes()"
  }
]