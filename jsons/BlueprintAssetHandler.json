[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "IBlueprintAssetHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBlueprintAssetHandler"
  },
  {
    "label": "FBlueprintAssetHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintAssetHandler"
  },
  {
    "label": "IBlueprintAssetHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / TopLevelAssetPath . h \" class FText ; class UBlueprint ; class UClass ; class UObject ; struct FAssetData ; class IBlueprintAssetHandler { public : ~)",
    "insertText": "IBlueprintAssetHandler()"
  },
  {
    "label": "RetrieveBlueprint()",
    "kind": "Method",
    "detail": "Function (} UBlueprint*)",
    "insertText": "RetrieveBlueprint(UObject* InAsset)"
  },
  {
    "label": "AssetContainsBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssetContainsBlueprint(const FAssetData& InAssetData)"
  },
  {
    "label": "GetRegisteredClassNames()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FTopLevelAssetPath>)",
    "insertText": "GetRegisteredClassNames()"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterHandler(ClassPathName, MakeUnique<HandlerType>())"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterHandler(FTopLevelAssetPath ClassPathName, TUniquePtr<IBlueprintAssetHandler>&& InHandler)"
  },
  {
    "label": "FindHandler()",
    "kind": "Method",
    "detail": "Function (const IBlueprintAssetHandler*)",
    "insertText": "FindHandler(const UClass* InClass)"
  },
  {
    "label": "FBlueprintAssetHandler()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FBlueprintAssetHandler()"
  }
]