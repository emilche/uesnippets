[
  {
    "label": "FbxLayerElementArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxLayerElementArray"
  },
  {
    "label": "FbxLayerContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxLayerContainer"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "EMappingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMappingMode"
  },
  {
    "label": "EReferenceMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EReferenceMode"
  },
  {
    "label": "ELockAccessStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELockAccessStatus"
  },
  {
    "label": "ELockMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELockMode"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FbxLayerElementArrayReadLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FbxLayerElementArrayReadLock"
  },
  {
    "label": "FbxLayerElementUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxLayerElementUserData"
  },
  {
    "label": "FbxLayerElementArrayTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxLayerElementArrayTemplate"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "FbxLayerElementTemplate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxLayerElementTemplate"
  },
  {
    "label": "LayerElementArrayProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LayerElementArrayProxy"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_GEOMETRY_LAYER_H_ # define _FBXSDK_SCENE_GEOMETRY_LAYER_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / fbxdatatypes . h> # include<fbxsdk / core / fbxstream . h> # include<fbxsdk / scene / shading / fbxsurfacematerial . h> # include<fbxsdk / scene / shading / fbxtexture . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxLayerElementArray ; class FbxLayerContainer ; class FBXSDK_DLL FbxLayerElement { public : enum EType { eUnknown,eNormal,eBiNormal,eTangent,eMaterial,ePolygonGroup,eUV,eVertexColor,eSmoothing,eVertexCrease,eEdgeCrease,eHole,eUserData,eVisibility,eTextureDiffuse,eTextureDiffuseFactor,eTextureEmissive,eTextureEmissiveFactor,eTextureAmbient,eTextureAmbientFactor,eTextureSpecular,eTextureSpecularFactor,eTextureShininess,eTextureNormalMap,eTextureBump,eTextureTransparency,eTextureTransparencyFactor,eTextureReflection,eTextureReflectionFactor,eTextureDisplacement,eTextureDisplacementVector,eTypeCount } ; const int sTypeTextureStartIndex =)",
    "insertText": "int(eTextureDiffuse)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int sTypeTextureEndIndex =)",
    "insertText": "int(eTypeCount)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int sTypeTextureCount = sTypeTextureEndIndex - sTypeTextureStartIndex + 1 ; const int sTypeNonTextureStartIndex =)",
    "insertText": "int(eNormal)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int sTypeNonTextureEndIndex =)",
    "insertText": "int(eVisibility)"
  },
  {
    "label": "SetMappingMode()",
    "kind": "Method",
    "detail": "Function (const int sTypeNonTextureCount = sTypeNonTextureEndIndex - sTypeNonTextureStartIndex + 1 ; const char* const sTextureNames [ ] ; const char* const sTextureUVNames [ ] ; const char* const sNonTextureNames [ ] ; const FbxDataType sTextureDataTypes [ ] ; const char* const sTextureChannelNames [ ] ; enum EMappingMode { eNone,eByControlPoint,eByPolygonVertex,eByPolygon,eByEdge,eAllSame } ; enum EReferenceMode { eDirect,eIndex,eIndexToDirect } ; void)",
    "insertText": "SetMappingMode(EMappingMode pMappingMode)"
  },
  {
    "label": "SetReferenceMode()",
    "kind": "Method",
    "detail": "Function (mMappingMode = pMappingMode ; } void)",
    "insertText": "SetReferenceMode(EReferenceMode pReferenceMode)"
  },
  {
    "label": "GetMappingMode()",
    "kind": "Method",
    "detail": "Function (mReferenceMode = pReferenceMode ; } EMappingMode)",
    "insertText": "GetMappingMode()"
  },
  {
    "label": "FbxString()",
    "kind": "Method",
    "detail": "Function (mName =)",
    "insertText": "FbxString(pName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FbxLayerElement& pOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FbxLayerElement&)",
    "insertText": "operator(FbxLayerElement const& pOther)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (mMappingMode = pOther . mMappingMode ; mReferenceMode = pOther . mReferenceMode ; return* this ; } void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Clear()"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (mType = pType ; } const FbxLayerContainer*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "DecRefCount()",
    "kind": "Method",
    "detail": "Function (mRefCount + + ; } int)",
    "insertText": "DecRefCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mRefCount - - ;)",
    "insertText": "if(mRefCount < 0)"
  },
  {
    "label": "FbxLayerElement()",
    "kind": "Method",
    "detail": "Function (mRefCount = 0 ; } return mRefCount ; } protected :)",
    "insertText": "FbxLayerElement() : mMappingMode(eNone) , mReferenceMode(eDirect) , mName(\"\") , mOwner(NULL) , mRefCount(0)"
  },
  {
    "label": "FbxLayerElement()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FbxLayerElement()"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (} EMappingMode mMappingMode ; EReferenceMode mReferenceMode ; FbxString mName ; const FbxDataType* mType ; FbxLayerContainer* mOwner ; int mRefCount ; void)",
    "insertText": "Destruct()"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(this)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetOwner(FbxLayerContainer* pOwner, int pInstance = 0)"
  },
  {
    "label": "FBXSDK_FRIEND_NEW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBXSDK_FRIEND_NEW()"
  },
  {
    "label": "MemorySize()",
    "kind": "Method",
    "detail": "Function (public : int)",
    "insertText": "MemorySize()"
  },
  {
    "label": "ContentReadFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContentReadFrom(const FbxStream& pStream)"
  },
  {
    "label": "FbxTypeOf()",
    "kind": "Method",
    "detail": "Function (class FbxLayerContainer ; # endif } ; class FBXSDK_DLL LockAccessStatus { public : enum ELockAccessStatus { eSuccess,eUnsupportedDTConversion,eCorruptedCopyback,eBadValue,eLockMismatch,eNoWriteLock,eNoReadLock,eNotOwner,eDirectLockExist } ; } ; typedef FbxHandle* FbxRefPtr ; typedef FbxLayerElementArray* FbxLayerElementArrayPtr ; typedef FbxSurfaceMaterial* FbxSurfaceMaterialPtr ; typedef FbxTexture* FbxTexturePtr ; EFbxType)",
    "insertText": "FbxTypeOf(const FbxRefPtr&)"
  },
  {
    "label": "FbxLayerElementArray()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FbxLayerElementArray()"
  },
  {
    "label": "ClearStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStatus()"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (mStatus = LockAccessStatus::eSuccess ; } LockAccessStatus::ELockAccessStatus)",
    "insertText": "GetStatus()"
  },
  {
    "label": "ReadLock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReadLock()"
  },
  {
    "label": "ReadUnlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReadUnlock()"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteLock()"
  },
  {
    "label": "WriteUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUnlock()"
  },
  {
    "label": "ReadWriteLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadWriteLock()"
  },
  {
    "label": "ReadWriteUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadWriteUnlock()"
  },
  {
    "label": "GetLocked()",
    "kind": "Method",
    "detail": "Function (enum ELockMode { eReadLock = 1,eWriteLock = 2,eReadWriteLock = 3 } ; void*)",
    "insertText": "GetLocked(ELockMode pLockMode, EFbxType pDataType)"
  },
  {
    "label": "GetLocked()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetLocked(ELockMode pLockMode=eReadWriteLock)"
  },
  {
    "label": "GetLocked()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetLocked(T*, ELockMode pLockMode=eReadWriteLock)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (T v ;)",
    "insertText": "return(T*)GetLocked(pLockMode, FbxTypeOf(v))"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release(void** pDataPtr, EFbxType pDataType)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(void** pDataPtr)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release(pDataPtr, mDataType)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "Release(T** pDataPtr, T* dummy)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (T*** voidPtr =& pDataPtr ;)",
    "insertText": "Release((void**)*voidPtr, FbxTypeOf(*dummy))"
  },
  {
    "label": "GetStride()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetStride()"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCount()"
  },
  {
    "label": "SetCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCount(int pCount)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(int pItemCount)"
  },
  {
    "label": "AddMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMultiple(int pItemCount)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Add(const void* pItem, EFbxType pValueType)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InsertAt(int pIndex, const void* pItem, EFbxType pValueType)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAt(int pIndex, const void* pItem, EFbxType pValueType)"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLast(const void* pItem, EFbxType pValueType)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(int pIndex, void** pItem, EFbxType pValueType)"
  },
  {
    "label": "RemoveLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLast(void** pItem, EFbxType pValueType)"
  },
  {
    "label": "RemoveIt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveIt(void** pItem, EFbxType pValueType)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAt(int pIndex, void** pItem, EFbxType pValueType)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFirst(void** pItem, EFbxType pValueType)"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLast(void** pItem, EFbxType pValueType)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Find(const void* pItem, EFbxType pValueType)"
  },
  {
    "label": "FindAfter()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindAfter(int pAfterIndex, const void* pItem, EFbxType pValueType)"
  },
  {
    "label": "FindBefore()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindBefore(int pBeforeIndex, const void* pItem, EFbxType pValueType)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEqual(const FbxLayerElementArray& pArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (template<class T> int)",
    "insertText": "Add(T const& pItem)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (} template<class T> int)",
    "insertText": "InsertAt(int pIndex, T const& pItem)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "SetAt(int pIndex, T const& pItem)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAt(pIndex, (const void*)&pItem, FbxTypeOf(pItem))"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "SetLast(T const& pItem)"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLast((const void*)&pItem, FbxTypeOf(pItem))"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "RemoveAt(int pIndex, T* pItem)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (T** voidPtr =& pItem ;)",
    "insertText": "RemoveAt(pIndex, (void**)voidPtr, FbxTypeOf(*pItem))"
  },
  {
    "label": "RemoveLast()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "RemoveLast(T* pItem)"
  },
  {
    "label": "RemoveLast()",
    "kind": "Method",
    "detail": "Function (T** voidPtr =& pItem ;)",
    "insertText": "RemoveLast((void**)voidPtr, FbxTypeOf(*pItem))"
  },
  {
    "label": "RemoveIt()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "RemoveIt(T* pItem)"
  },
  {
    "label": "RemoveIt()",
    "kind": "Method",
    "detail": "Function (T** voidPtr =& pItem ; return)",
    "insertText": "RemoveIt((void**)voidPtr, FbxTypeOf(*pItem))"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "GetAt(int pIndex, T* pItem)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (T** voidPtr =& pItem ; return)",
    "insertText": "GetAt(pIndex, (void**)voidPtr, FbxTypeOf(*pItem))"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "GetFirst(T* pItem)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (T** voidPtr =& pItem ; return)",
    "insertText": "GetFirst((void**)voidPtr, FbxTypeOf(*pItem))"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "GetLast(T* pItem)"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (T** voidPtr =& pItem ; return)",
    "insertText": "GetLast((void**)voidPtr, FbxTypeOf(*pItem))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} template<class T> int)",
    "insertText": "Find(T const& pItem)"
  },
  {
    "label": "FindAfter()",
    "kind": "Method",
    "detail": "Function (} template<class T> int)",
    "insertText": "FindAfter(int pAfterIndex, T const& pItem)"
  },
  {
    "label": "FindBefore()",
    "kind": "Method",
    "detail": "Function (} template<class T> int)",
    "insertText": "FindBefore(int pBeforeIndex, T const& pItem)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "CopyTo(FbxArray<T>& pDst)"
  },
  {
    "label": "SetStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStatus(LockAccessStatus::eUnsupportedDTConversion)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (pDst .)",
    "insertText": "SetAt(i, src)"
  },
  {
    "label": "SetStatus()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "SetStatus(LockAccessStatus::eSuccess)"
  },
  {
    "label": "GetDataPtr()",
    "kind": "Method",
    "detail": "Function (} protected : void*)",
    "insertText": "GetDataPtr()"
  },
  {
    "label": "GetReference()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetReference(int pIndex, EFbxType pValueType)"
  },
  {
    "label": "GetReferenceTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReferenceTo(int pIndex, void** pRef, EFbxType pValueType)"
  },
  {
    "label": "SetStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStatus(LockAccessStatus::ELockAccessStatus pVal)"
  },
  {
    "label": "FbxLayerElementArray()",
    "kind": "Method",
    "detail": "Function (mStatus = pVal)",
    "insertText": "FbxLayerElementArray(this)"
  },
  {
    "label": "SetImplementation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetImplementation(void* pImplementation)"
  },
  {
    "label": "GetImplementation()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetImplementation()"
  },
  {
    "label": "FbxLayerElementArrayReadLock()",
    "kind": "Method",
    "detail": "Function (EFbxType mDataType ; private : LockAccessStatus::ELockAccessStatus mStatus ; int mReadLockCount ; bool mWriteLock ; void* mImplementation ; size_t mStride ; int mDirectLockOn ; bool mDirectAccessOn ; FbxArray<void*> mConvertedData ; } ; template<T> struct FbxLayerElementArrayReadLock {)",
    "insertText": "FbxLayerElementArrayReadLock(FbxLayerElementArray& pArray) : mArray(pArray)"
  },
  {
    "label": "GetLocked()",
    "kind": "Method",
    "detail": "Function (mLockedData = mArray .)",
    "insertText": "GetLocked((T*)NULL, FbxLayerElementArray::eReadLock)"
  },
  {
    "label": "FbxLayerElementArrayReadLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FbxLayerElementArrayReadLock()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (mArray .)",
    "insertText": "Release((void **) &mLockedData)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} } const T*)",
    "insertText": "GetData()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Add(T const &pItem)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "InsertAt(int pIndex, T const &pItem)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAt(int pIndex, T const &pItem)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAt(pIndex, pItem)"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLast(T const &pItem)"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLast(pItem)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "RemoveAt(int pIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (T lValue ;)",
    "insertText": "RemoveAt(pIndex, &lValue)"
  },
  {
    "label": "RemoveLast()",
    "kind": "Method",
    "detail": "Function (T lValue ;)",
    "insertText": "RemoveLast(&lValue)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetAt(int pIndex)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (T lValue ;)",
    "insertText": "GetAt(pIndex, &lValue)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (T lValue ;)",
    "insertText": "GetFirst(&lValue)"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (T lValue ;)",
    "insertText": "GetLast(&lValue)"
  },
  {
    "label": "FindAfter()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "FindAfter(int pAfterIndex, T const &pItem)"
  },
  {
    "label": "FindBefore()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "FindBefore(int pBeforeIndex, T const &pItem)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "operator(int pIndex)"
  },
  {
    "label": "SetStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStatus(LockAccessStatus::eNoWriteLock)"
  },
  {
    "label": "SetCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCount(pArrayTemplate.GetCount())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FbxLayerElementArrayTemplate<T>&)",
    "insertText": "operator(const FbxLayerElementArrayTemplate<T>& pArrayTemplate)"
  },
  {
    "label": "AsReference()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } private : class FbxLayerElementUserData ; T&)",
    "insertText": "AsReference(int pIndex)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (T*)",
    "insertText": "v(T*)FbxLayerElementArray::GetReference(pIndex, mDataType)"
  },
  {
    "label": "RemapIndexArrayTo()",
    "kind": "Method",
    "detail": "Function (} T dummy ; } ; FBXSDK_DLL int)",
    "insertText": "RemapIndexArrayTo(FbxLayerElement* pLayerEl, FbxLayerElement::EMappingMode pNewMapping, FbxLayerElementArrayTemplate<int>* pIndexArray)"
  },
  {
    "label": "GetDirectArray()",
    "kind": "Method",
    "detail": "Function (template<class Type> class FbxLayerElementTemplate : public FbxLayerElement { public : FbxLayerElementArrayTemplate<Type>&)",
    "insertText": "GetDirectArray()"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mReferenceMode == FbxLayerElement::eDirect || mReferenceMode == FbxLayerElement::eIndexToDirect)"
  },
  {
    "label": "runtime_error()",
    "kind": "Method",
    "detail": "Function (throw)",
    "insertText": "runtime_error(\"FbxLayerElementArrayTemplate - mDirectArray is NULL\")"
  },
  {
    "label": "GetIndexArray()",
    "kind": "Method",
    "detail": "Function (} return* mDirectArray ; } FbxLayerElementArrayTemplate<int>&)",
    "insertText": "GetIndexArray()"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mReferenceMode == FbxLayerElement::eIndex || mReferenceMode == FbxLayerElement::eIndexToDirect)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ret(mDirectArray->GetStatus() == LockAccessStatus::eSuccess)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ret(mIndexArray->GetStatus() == LockAccessStatus::eSuccess)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool ret = true ;)",
    "insertText": "if(pOther.GetReferenceMode() == FbxLayerElement::eDirect || pOther.GetReferenceMode() == FbxLayerElement::eIndexToDirect)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ret = false ; })",
    "insertText": "if(ret && !mDirectArray->IsEqual(directArray))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ret)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ret = false ; })",
    "insertText": "if(ret && !mIndexArray->IsEqual(indexArray))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(ret == false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FbxLayerElementTemplate&)",
    "insertText": "operator(FbxLayerElementTemplate const& pOther)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mDirectArray != NULL)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(mIndexArray != NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* mDirectArray = directArray ; })",
    "insertText": "if(pOther.GetReferenceMode() == FbxLayerElement::eIndex || pOther.GetReferenceMode() == FbxLayerElement::eIndexToDirect)"
  },
  {
    "label": "myself()",
    "kind": "Method",
    "detail": "Function (* mIndexArray = indexArray ; } FbxLayerElement*)",
    "insertText": "myself(FbxLayerElement*)"
  },
  {
    "label": "myOther()",
    "kind": "Method",
    "detail": "Function (FbxLayerElement*)",
    "insertText": "myOther(FbxLayerElement*)"
  },
  {
    "label": "RemapIndexTo()",
    "kind": "Method",
    "detail": "Function (* myself =* myOther ; return* this ; } int)",
    "insertText": "RemapIndexTo(FbxLayerElement::EMappingMode pNewMapping)"
  },
  {
    "label": "FbxLayerElementTemplate()",
    "kind": "Method",
    "detail": "Function (} # ifndef DOXYGEN_SHOULD_SKIP_THIS protected :)",
    "insertText": "FbxLayerElementTemplate()"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(mDirectArray)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(mIndexArray)"
  },
  {
    "label": "AllocateArrays()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AllocateArrays()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (mDirectArray = FbxNew<FbxLayerElementArrayTemplate<)",
    "insertText": "Type(mType->GetType())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (mIndexArray = FbxNew<FbxLayerElementArrayTemplate<)",
    "insertText": "int(FbxIntDT.GetType())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size(mDirectArray->GetCount()*sizeof(Type))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size(mIndexArray->GetCount()*sizeof(int))"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (s = pStream .)",
    "insertText": "Write(&count, sizeof(int))"
  },
  {
    "label": "GetLocked()",
    "kind": "Method",
    "detail": "Function (a = mDirectArray ->)",
    "insertText": "GetLocked()"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(a != NULL)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (v = count*)",
    "insertText": "sizeof(Type)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (s = pStream .)",
    "insertText": "Write(a, v)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (mDirectArray ->)",
    "insertText": "Release(&a)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (v = count*)",
    "insertText": "sizeof(int)"
  },
  {
    "label": "ContentWriteTo()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "ContentWriteTo(pStream)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (void* a ; int s,v ; int count = 0 ; s = pStream .)",
    "insertText": "Read(&count, sizeof(int))"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (mDirectArray ->)",
    "insertText": "Resize(count)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (s = pStream .)",
    "insertText": "Read(a, v)"
  },
  {
    "label": "ContentReadFrom()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "ContentReadFrom(pStream)"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (} typedef Type ArrayElementType ; typedef FbxLayerElementArrayTemplate<Type> DirectArrayType ; typedef FbxLayerElementArrayTemplate<int> IndexArrayType ; FbxLayerElementArrayTemplate<Type>* mDirectArray ; FbxLayerElementArrayTemplate<int>* mIndexArray ; # endif } ; # define)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(classDesc) \\ FBXSDK_FRIEND_NEW()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (\\ Fbx # # classDesc*)",
    "insertText": "Create(FbxLayerContainer* pOwner, const char* pName)"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (class FBXSDK_DLL FbxLayerElementNormal : public FbxLayerElementTemplate<FbxVector4> { public :)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementNormal)"
  },
  {
    "label": "FbxLayerElementNormal()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FbxLayerElementNormal()"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (} ; class FBXSDK_DLL FbxLayerElementBinormal : public FbxLayerElementTemplate<FbxVector4> { public :)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementBinormal)"
  },
  {
    "label": "FbxLayerElementBinormal()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FbxLayerElementBinormal()"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (} ; class FBXSDK_DLL FbxLayerElementTangent : public FbxLayerElementTemplate<FbxVector4> { public :)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementTangent)"
  },
  {
    "label": "FbxLayerElementTangent()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FbxLayerElementTangent()"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (} ; class FBXSDK_DLL FbxLayerElementMaterial : public FbxLayerElementTemplate<FbxSurfaceMaterial*> { public : typedef FbxLayerElementTemplate<FbxSurfaceMaterial*> ParentClass ;)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementMaterial)"
  },
  {
    "label": "LayerElementArrayProxy()",
    "kind": "Method",
    "detail": "Function (class LayerElementArrayProxy : public FbxLayerElementArrayTemplate<FbxSurfaceMaterial*> { public : typedef FbxLayerElementArrayTemplate<FbxSurfaceMaterial*> ParentClass ;)",
    "insertText": "LayerElementArrayProxy(EFbxType pType)"
  },
  {
    "label": "SetContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContainer(FbxLayerContainer* pContainer, int pInstance = 0)"
  },
  {
    "label": "SetInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInstance(int pInstance)"
  },
  {
    "label": "SetOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwner(mOwner, pInstance)"
  },
  {
    "label": "FbxLayerElementMaterial()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "FbxLayerElementMaterial()"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (} class FbxLayerContainer ; # endif } ; class FBXSDK_DLL FbxLayerElementPolygonGroup : public FbxLayerElementTemplate<int> { public :)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementPolygonGroup)"
  },
  {
    "label": "FbxLayerElementPolygonGroup()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FbxLayerElementPolygonGroup()"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (} ; class FBXSDK_DLL FbxLayerElementUV : public FbxLayerElementTemplate<FbxVector2> { public :)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementUV)"
  },
  {
    "label": "FbxLayerElementUV()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FbxLayerElementUV()"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (} ; class FBXSDK_DLL FbxLayerElementVertexColor : public FbxLayerElementTemplate<FbxColor> { public :)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementVertexColor)"
  },
  {
    "label": "FbxLayerElementVertexColor()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FbxLayerElementVertexColor()"
  },
  {
    "label": "FbxGetDirectArray()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> FbxLayerElementArrayTemplate<T>&)",
    "insertText": "FbxGetDirectArray(FbxLayerElementUserData *pLayerElement, int pIndex, bool* pStatus = NULL)"
  },
  {
    "label": "FbxGetDirectArray()",
    "kind": "Method",
    "detail": "Function (template<class T> FbxLayerElementArrayTemplate<T> const&)",
    "insertText": "FbxGetDirectArray(FbxLayerElementUserData const *pLayerElement, int pIndex, bool* pStatus = NULL)"
  },
  {
    "label": "FbxGetDirectArray()",
    "kind": "Method",
    "detail": "Function (template<class T> FbxLayerElementArrayTemplate<T>&)",
    "insertText": "FbxGetDirectArray(FbxLayerElementUserData *pLayerElement, const char* pName, bool* pStatus = NULL)"
  },
  {
    "label": "FbxGetDirectArray()",
    "kind": "Method",
    "detail": "Function (template<class T> FbxLayerElementArrayTemplate<T> const&)",
    "insertText": "FbxGetDirectArray(FbxLayerElementUserData const *pLayerElement, const char* pName, bool* pStatus = NULL)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementUserData*)",
    "insertText": "Create(FbxLayerContainer* pOwner, const char* pName, int pId, FbxArray<FbxDataType>& pDataTypes, FbxArray<const char*>& pDataNames)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementUserData*)",
    "insertText": "Create(FbxLayerContainer* pOwner, FbxLayerElementUserData const& pOther)"
  },
  {
    "label": "GetDirectArrayVoid()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementArrayTemplate<void*>*)",
    "insertText": "GetDirectArrayVoid(int pIndex, bool* pStatus = NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(pStatus)"
  },
  {
    "label": "FBX_ASSERT_NOW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_NOW(\"Index out of bounds\")"
  },
  {
    "label": "GetDirectArrayVoid()",
    "kind": "Method",
    "detail": "Function (} } FbxLayerElementArrayTemplate<void*>*)",
    "insertText": "GetDirectArrayVoid(const char* pName, bool* pStatus = NULL)"
  },
  {
    "label": "lName()",
    "kind": "Method",
    "detail": "Function (FbxString)",
    "insertText": "lName(pName)"
  },
  {
    "label": "GetDataType()",
    "kind": "Method",
    "detail": "Function (} FbxDataType)",
    "insertText": "GetDataType(int pIndex)"
  },
  {
    "label": "GetDataName()",
    "kind": "Method",
    "detail": "Function (} return FbxUndefinedDT ; } const char*)",
    "insertText": "GetDataName(int pIndex)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxInt : FbxGetDirectArray<)",
    "insertText": "int(this,i).Resize( pSize)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxFloat : FbxGetDirectArray<)",
    "insertText": "float(this,i).Resize( pSize)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxDouble : FbxGetDirectArray<)",
    "insertText": "double(this,i).Resize( pSize)"
  },
  {
    "label": "FBX_ASSERT_NOW()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "FBX_ASSERT_NOW(\"unknown type\")"
  },
  {
    "label": "RemoveFromAllDirectArrays()",
    "kind": "Method",
    "detail": "Function (break ; } } } void)",
    "insertText": "RemoveFromAllDirectArrays(int pIndex)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxInt : FbxGetDirectArray<)",
    "insertText": "int(this,i).RemoveAt( pIndex)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxFloat : FbxGetDirectArray<)",
    "insertText": "float(this,i).RemoveAt( pIndex)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxDouble : FbxGetDirectArray<)",
    "insertText": "double(this,i).RemoveAt( pIndex)"
  },
  {
    "label": "GetArrayCount()",
    "kind": "Method",
    "detail": "Function (break ; } } } int)",
    "insertText": "GetArrayCount(int pIndex)"
  },
  {
    "label": "FBX_ASSERT_NOW()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "FBX_ASSERT_NOW(\"Unknown type\")"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (break ; } } return - 1 ; } int)",
    "insertText": "GetId()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FbxLayerElementUserData&)",
    "insertText": "operator(FbxLayerElementUserData const& pOther)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (mId = pOther . mId ; mDataTypes = pOther . mDataTypes ; mDataNames .)",
    "insertText": "Resize(pOther.mDataNames.GetCount())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxInt : FbxGetDirectArray<)",
    "insertText": "int(this, i) = FbxGetDirectArray<int>(&pOther, i)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxFloat : FbxGetDirectArray<)",
    "insertText": "float(this, i) = FbxGetDirectArray<float>(&pOther, i)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxDouble : FbxGetDirectArray<)",
    "insertText": "double(this, i) = FbxGetDirectArray<double>(&pOther, i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(( mReferenceMode == FbxLayerElement::eIndex || mReferenceMode == FbxLayerElement::eIndexToDirect) && ( pOther.GetReferenceMode() == FbxLayerElement::eIndex || pOther.GetReferenceMode() == FbxLayerElement::eIndexToDirect))"
  },
  {
    "label": "GetIndexArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIndexArray() = pOther.GetIndexArray()"
  },
  {
    "label": "GetDirectArray()",
    "kind": "Method",
    "detail": "Function (int i ; const int lCount =)",
    "insertText": "GetDirectArray().GetCount()"
  },
  {
    "label": "GetDirectArray()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementArray** directArray = NULL ; directArray =)",
    "insertText": "GetDirectArray().GetLocked(directArray)"
  },
  {
    "label": "GetDirectArray()",
    "kind": "Method",
    "detail": "Function (} FbxLayerElementArray*** ptr =& directArray ;)",
    "insertText": "GetDirectArray().Release((void**)ptr)"
  },
  {
    "label": "FBX_SAFE_DELETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_SAFE_DELETE(mDataNames[i])"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size + =)",
    "insertText": "sizeof(mId)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size + =)",
    "insertText": "sizeof(mDataTypes[i])"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "size(mDataNames.GetCount() * sizeof(FbxString*))"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pDataTypes.GetCount() == pDataNames.GetCount())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (mDataNames .)",
    "insertText": "Add(FbxNew< FbxString >( pDataNames[i] ))"
  },
  {
    "label": "FbxLayerElementUserData()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FbxLayerElementUserData(FbxLayerElementUserData const& pOther ) : mId(pOther.mId), mDataTypes(pOther.mDataTypes)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (mDataNames .)",
    "insertText": "Add(FbxNew<FbxString>(*(pOther.mDataNames[lIndex])))"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetType(&FbxLayerElementUserDataDT)"
  },
  {
    "label": "FbxLayerElementUserData()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FbxLayerElementUserData()"
  },
  {
    "label": "GetDirectArray()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "GetDirectArray().Resize( mDataTypes.GetCount())"
  },
  {
    "label": "GetDirectArray()",
    "kind": "Method",
    "detail": "Function (FbxHandle** dst = NULL ; dst =)",
    "insertText": "GetDirectArray().GetLocked(dst)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxInt : dst [)",
    "insertText": "i(FbxHandle*)FbxNew< FbxLayerElementArrayTemplate<int> >(mDataTypes[i].GetType())"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxFloat : dst [)",
    "insertText": "i(FbxHandle*)FbxNew< FbxLayerElementArrayTemplate<float> >(mDataTypes[i].GetType())"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (break ; case eFbxDouble : dst [)",
    "insertText": "i(FbxHandle*)FbxNew< FbxLayerElementArrayTemplate<double> >(mDataTypes[i].GetType())"
  },
  {
    "label": "FBX_ASSERT_NOW()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "FBX_ASSERT_NOW(\"Trying to assign an unknown type\")"
  },
  {
    "label": "FbxGetDirectArray()",
    "kind": "Method",
    "detail": "Function (} } } int mId ; FbxArray<FbxDataType> mDataTypes ; FbxArray<FbxString*> mDataNames ; # endif } ; template<class T> FbxLayerElementArrayTemplate<T>&)",
    "insertText": "FbxGetDirectArray(FbxLayerElementUserData *pLayerElement,int pIndex, bool* pStatus)"
  },
  {
    "label": "FbxGetDirectArray()",
    "kind": "Method",
    "detail": "Function (} template<class T> FbxLayerElementArrayTemplate<T> const&)",
    "insertText": "FbxGetDirectArray(FbxLayerElementUserData const *pLayerElement, int pIndex, bool* pStatus)"
  },
  {
    "label": "FbxGetDirectArray()",
    "kind": "Method",
    "detail": "Function (} template<class T> FbxLayerElementArrayTemplate<T>&)",
    "insertText": "FbxGetDirectArray(FbxLayerElementUserData *pLayerElement,const char* pName, bool* pStatus)"
  },
  {
    "label": "FbxGetDirectArray()",
    "kind": "Method",
    "detail": "Function (} template<class T> FbxLayerElementArrayTemplate<T> const&)",
    "insertText": "FbxGetDirectArray(FbxLayerElementUserData const *pLayerElement, const char* pName, bool* pStatus)"
  },
  {
    "label": "SetReferenceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReferenceMode(FbxLayerElement::EReferenceMode pMode)"
  },
  {
    "label": "FBX_ASSERT_NOW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_NOW(\"Smoothing layer elements must be direct mapped\")"
  },
  {
    "label": "FBX_ASSERT_NOW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_NOW(\"Crease layer elements must be direct mapped\")"
  },
  {
    "label": "FBX_ASSERT_NOW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_NOW(\"hole layer elements must be direct mapped\")"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (mReferenceMode = FbxLayerElement::eDirect ; } # endif } ; class FBXSDK_DLL FbxLayerElementVisibility : public FbxLayerElementTemplate<bool> { public :)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementVisibility)"
  },
  {
    "label": "FbxLayerElementVisibility()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS protected :)",
    "insertText": "FbxLayerElementVisibility()"
  },
  {
    "label": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FBXSDK_DLL FbxLayerElementTexture : public FbxLayerElementTemplate<FbxTexture*> { public :)",
    "insertText": "FBXSDK_LAYER_ELEMENT_CREATE_DECLARE(LayerElementTexture)"
  },
  {
    "label": "SetBlendMode()",
    "kind": "Method",
    "detail": "Function (enum EBlendMode { eTranslucent,eAdd,eModulate,eModulate2,eOver,eNormal,eDissolve,eDarken,eColorBurn,eLinearBurn,eDarkerColor,eLighten,eScreen,eColorDodge,eLinearDodge,eLighterColor,eSoftLight,eHardLight,eVividLight,eLinearLight,ePinLight,eHardMix,eDifference,eExclusion,eSubtract,eDivide,eHue,eSaturation,eColor,eLuminosity,eOverlay,eBlendModeCount } ; void)",
    "insertText": "SetBlendMode(EBlendMode pBlendMode)"
  },
  {
    "label": "SetAlpha()",
    "kind": "Method",
    "detail": "Function (mBlendMode = pBlendMode ; } void)",
    "insertText": "SetAlpha(double pAlpha)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size + =)",
    "insertText": "sizeof(mBlendMode)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size + =)",
    "insertText": "sizeof(mAlpha)"
  },
  {
    "label": "GetNormals()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementNormal*)",
    "insertText": "GetNormals()"
  },
  {
    "label": "GetTangents()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementTangent*)",
    "insertText": "GetTangents()"
  },
  {
    "label": "GetBinormals()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementBinormal*)",
    "insertText": "GetBinormals()"
  },
  {
    "label": "GetMaterials()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementMaterial*)",
    "insertText": "GetMaterials()"
  },
  {
    "label": "GetPolygonGroups()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementPolygonGroup*)",
    "insertText": "GetPolygonGroups()"
  },
  {
    "label": "GetUVs()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementUV*)",
    "insertText": "GetUVs(FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "GetUVSetCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetUVSetCount()"
  },
  {
    "label": "GetUVSetChannels()",
    "kind": "Method",
    "detail": "Function (FbxArray<FbxLayerElement::EType>)",
    "insertText": "GetUVSetChannels()"
  },
  {
    "label": "GetUVSets()",
    "kind": "Method",
    "detail": "Function (FbxArray<const FbxLayerElementUV*>)",
    "insertText": "GetUVSets()"
  },
  {
    "label": "GetVertexColors()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementVertexColor*)",
    "insertText": "GetVertexColors()"
  },
  {
    "label": "GetSmoothing()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementSmoothing*)",
    "insertText": "GetSmoothing()"
  },
  {
    "label": "GetVertexCrease()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementCrease*)",
    "insertText": "GetVertexCrease()"
  },
  {
    "label": "GetEdgeCrease()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementCrease*)",
    "insertText": "GetEdgeCrease()"
  },
  {
    "label": "GetHole()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementHole*)",
    "insertText": "GetHole()"
  },
  {
    "label": "GetUserData()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementUserData*)",
    "insertText": "GetUserData()"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementVisibility*)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "GetTextures()",
    "kind": "Method",
    "detail": "Function (FbxLayerElementTexture*)",
    "insertText": "GetTextures(FbxLayerElement::EType pType)"
  },
  {
    "label": "SetTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextures(FbxLayerElement::EType pType, FbxLayerElementTexture* pTextures)"
  },
  {
    "label": "GetLayerElementOfType()",
    "kind": "Method",
    "detail": "Function (FbxLayerElement*)",
    "insertText": "GetLayerElementOfType(FbxLayerElement::EType pType, bool pIsUV=false)"
  },
  {
    "label": "SetNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNormals(FbxLayerElementNormal* pNormals)"
  },
  {
    "label": "SetBinormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBinormals(FbxLayerElementBinormal* pBinormals)"
  },
  {
    "label": "SetTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangents(FbxLayerElementTangent* pTangents)"
  },
  {
    "label": "SetMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterials(FbxLayerElementMaterial* pMaterials)"
  },
  {
    "label": "SetPolygonGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolygonGroups(FbxLayerElementPolygonGroup* pPolygonGroups)"
  },
  {
    "label": "SetUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUVs(FbxLayerElementUV* pUVs, FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "SetVertexColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexColors(FbxLayerElementVertexColor* pVertexColors)"
  },
  {
    "label": "SetSmoothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSmoothing(FbxLayerElementSmoothing* pSmoothing)"
  },
  {
    "label": "SetVertexCrease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexCrease(FbxLayerElementCrease* pCrease)"
  },
  {
    "label": "SetEdgeCrease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEdgeCrease(FbxLayerElementCrease* pCrease)"
  },
  {
    "label": "SetHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHole(FbxLayerElementHole* pHole)"
  },
  {
    "label": "SetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserData(FbxLayerElementUserData* pUserData)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibility(FbxLayerElementVisibility* pVisibility)"
  },
  {
    "label": "SetLayerElementOfType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerElementOfType(FbxLayerElement* pLayerElement, FbxLayerElement::EType pType, bool pIsUV=false)"
  },
  {
    "label": "CreateLayerElementOfType()",
    "kind": "Method",
    "detail": "Function (FbxLayerElement*)",
    "insertText": "CreateLayerElementOfType(FbxLayerElement::EType pType, bool pIsUV=false)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clone(FbxLayer const& pSrcLayer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS protected : FbxLayer&)",
    "insertText": "operator(FbxLayer const& pSrcLayer)"
  },
  {
    "label": "FbxLayer()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FbxLayer(FbxLayerContainer& pOwner)"
  },
  {
    "label": "FbxLayer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FbxLayer()"
  },
  {
    "label": "ContentWriteTo()",
    "kind": "Method",
    "detail": "Function (FbxLayerContainer& mOwner ; FbxLayerElement* mNonTexturesArray [ FbxLayerElement::sTypeNonTextureCount ] ; FbxLayerElementUV* mUVsArray [ FbxLayerElement::sTypeTextureCount ] ; FbxLayerElementTexture* mTexturesArray [ FbxLayerElement::sTypeTextureCount ] ; class FbxLayerContainer ; public : bool)",
    "insertText": "ContentWriteTo(FbxStream& pStream)"
  },
  {
    "label": "MemoryUsage()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "MemoryUsage()"
  },
  {
    "label": "FBXSDK_FOR_EACH_TEXTURE()",
    "kind": "Method",
    "detail": "Function (# endif } ; # define)",
    "insertText": "FBXSDK_FOR_EACH_TEXTURE(lLayerIndex) for((lLayerIndex)=0;(lLayerIndex)<FbxLayerElement::sTypeTextureCount;(lLayerIndex)++) #define FBXSDK_FOR_EACH_NON_TEXTURE(lLayerIndex) for((lLayerIndex)=0;(lLayerIndex)<FbxLayerElement::sTypeNonTextureCount;(lLayerIndex)++) #define FBXSDK_TEXTURE_INDEX(ElementType) (int(ElementType)-FbxLayerElement::sTypeTextureStartIndex) #define FBXSDK_TEXTURE_TYPE(TextureIndex) (FbxLayerElement::EType((TextureIndex)+FbxLayerElement::sTypeTextureStartIndex)) #define FBXSDK_NON_TEXTURE_INDEX(ElementType) (int(ElementType)-FbxLayerElement::sTypeNonTextureStartIndex) #define FBXSDK_NON_TEXTURE_TYPE(Index) (FbxLayerElement::EType((Index)+FbxLayerElement::sTypeNonTextureStartIndex))"
  }
]