[
  {
    "label": "SSLCertChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertChain"
  },
  {
    "label": "SSLCertificate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertificate"
  },
  {
    "label": "KeyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "KeyType"
  },
  {
    "label": "RSAParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RSAParams"
  },
  {
    "label": "ECCurve",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECCurve"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SSLIdentityParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SSLIdentityParams"
  },
  {
    "label": "KeyParams()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SSL_IDENTITY_H_ # define RTC_BASE_SSL_IDENTITY_H_ # include<stdint . h> # include<ctime> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { class SSLCertChain ; class SSLCertificate ; enum KeyType { KT_RSA,KT_ECDSA,KT_LAST,KT_DEFAULT = KT_ECDSA } ; const int kRsaDefaultModSize = 1 0 2 4 ; const int kRsaDefaultExponent = 0 x10001 ; const int kRsaMinModSize = 1 0 2 4 ; const int kRsaMaxModSize = 8 1 9 2 ; const int kDefaultCertificateLifetimeInSeconds = 6 0* 6 0* 2 4* 3 0 ; const int kCertificateWindowInSeconds = - 6 0* 6 0* 2 4 ; struct RSAParams { unsigned int mod_size ; unsigned int pub_exp ; } ; enum ECCurve { EC_NIST_P256,EC_LAST } ; class RTC_EXPORT KeyParams { public :)",
    "insertText": "KeyParams(KeyType key_type = KT_DEFAULT)"
  },
  {
    "label": "RSA()",
    "kind": "Method",
    "detail": "Function (KeyParams)",
    "insertText": "RSA(int mod_size = kRsaDefaultModSize, int pub_exp = kRsaDefaultExponent)"
  },
  {
    "label": "ECDSA()",
    "kind": "Method",
    "detail": "Function (KeyParams)",
    "insertText": "ECDSA(ECCurve curve = EC_NIST_P256)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "rsa_params()",
    "kind": "Method",
    "detail": "Function (RSAParams)",
    "insertText": "rsa_params()"
  },
  {
    "label": "ec_curve()",
    "kind": "Method",
    "detail": "Function (ECCurve)",
    "insertText": "ec_curve()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (KeyType)",
    "insertText": "type()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (struct SSLIdentityParams { std::string common_name ; time_t not_before ; time_t not_after ; KeyParams key_params ; } ; class RTC_EXPORT SSLIdentity { public : std::unique_ptr<SSLIdentity>)",
    "insertText": "Create(absl::string_view common_name, const KeyParams& key_param, time_t certificate_lifetime)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "Create(absl::string_view common_name, const KeyParams& key_param)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "Create(absl::string_view common_name, KeyType key_type)"
  },
  {
    "label": "CreateForTest()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CreateForTest(const SSLIdentityParams& params)"
  },
  {
    "label": "CreateFromPEMStrings()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CreateFromPEMStrings(absl::string_view private_key, absl::string_view certificate)"
  },
  {
    "label": "CreateFromPEMChainStrings()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CreateFromPEMChainStrings(absl::string_view private_key, absl::string_view certificate_chain)"
  },
  {
    "label": "SSLIdentity()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSLIdentity()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<SSLIdentity>)",
    "insertText": "Clone()"
  },
  {
    "label": "certificate()",
    "kind": "Method",
    "detail": "Function (} const SSLCertificate&)",
    "insertText": "certificate()"
  },
  {
    "label": "cert_chain()",
    "kind": "Method",
    "detail": "Function (const SSLCertChain&)",
    "insertText": "cert_chain()"
  },
  {
    "label": "PrivateKeyToPEMString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "PrivateKeyToPEMString()"
  },
  {
    "label": "PublicKeyToPEMString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "PublicKeyToPEMString()"
  },
  {
    "label": "PemToDer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PemToDer(absl::string_view pem_type, absl::string_view pem_string, std::string* der)"
  },
  {
    "label": "DerToPem()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DerToPem(absl::string_view pem_type, const unsigned char* data, size_t length)"
  },
  {
    "label": "CloneInternal()",
    "kind": "Method",
    "detail": "Function (protected : std::unique_ptr<SSLIdentity>)",
    "insertText": "CloneInternal()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const SSLIdentity& a, const SSLIdentity& b)"
  },
  {
    "label": "ASN1TimeToSec()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ASN1TimeToSec(const unsigned char* s, size_t length, bool long_format)"
  }
]