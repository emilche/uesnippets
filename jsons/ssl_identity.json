[
  {
    "label": "SSLCertChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertChain"
  },
  {
    "label": "SSLCertificate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertificate"
  },
  {
    "label": "KeyType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "KeyType"
  },
  {
    "label": "RSAParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RSAParams"
  },
  {
    "label": "ECCurve",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECCurve"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "without",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "without"
  },
  {
    "label": "SSLIdentityParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SSLIdentityParams"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "KeyParams()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "KeyParams(KeyType key_type = KT_DEFAULT)"
  },
  {
    "label": "RSA()",
    "kind": "Method",
    "detail": "Function (KeyParams)",
    "insertText": "RSA(int mod_size = kRsaDefaultModSize,\n                       int pub_exp = kRsaDefaultExponent)"
  },
  {
    "label": "ECDSA()",
    "kind": "Method",
    "detail": "Function (KeyParams)",
    "insertText": "ECDSA(ECCurve curve = EC_NIST_P256)"
  },
  {
    "label": "IntKeyTypeFamilyToKeyType()",
    "kind": "Method",
    "detail": "Function (KeyType)",
    "insertText": "IntKeyTypeFamilyToKeyType(int key_type_family)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "Create(absl::string_view common_name,\n                                             const KeyParams& key_param,\n                                             time_t certificate_lifetime)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "Create(absl::string_view common_name,\n                                             const KeyParams& key_param)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "Create(absl::string_view common_name,\n                                             KeyType key_type)"
  },
  {
    "label": "CreateForTest()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CreateForTest(\n      const SSLIdentityParams& params)"
  },
  {
    "label": "CreateFromPEMStrings()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CreateFromPEMStrings(\n      absl::string_view private_key,\n      absl::string_view certificate)"
  },
  {
    "label": "CreateFromPEMChainStrings()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CreateFromPEMChainStrings(\n      absl::string_view private_key,\n      absl::string_view certificate_chain)"
  },
  {
    "label": "CloneInternal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CloneInternal()"
  },
  {
    "label": "PemToDer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PemToDer(absl::string_view pem_type,\n                       absl::string_view pem_string,\n                       std::string* der)"
  },
  {
    "label": "DerToPem()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DerToPem(absl::string_view pem_type,\n                              const unsigned char* data,\n                              size_t length)"
  },
  {
    "label": "ASN1TimeToSec()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ASN1TimeToSec(const unsigned char* s, size_t length, bool long_format)"
  }
]