[
  {
    "label": "LevelSetFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetFilter"
  },
  {
    "label": "Filter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Filter"
  },
  {
    "label": "Avg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Avg"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVELSETFILTER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVELSETFILTER_HAS_BEEN_INCLUDED # include \" LevelSetTracker . h \" # include \" Interpolation . h \" # include<algorithm> # include<functional> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridT,MaskT = GridT::template ValueConverter<float>::Type,InterruptT = util::NullInterrupter> class LevelSetFilter : public LevelSetTracker<GridT,InterruptT> { public : using BaseType = LevelSetTracker<GridT,InterruptT> ; using GridType = GridT ; using MaskType = MaskT ; using TreeType = GridType::TreeType ; using ValueType = TreeType::ValueType ; using AlphaType = MaskType::ValueType ;)",
    "insertText": "static_assert(std::is_floating_point<AlphaType>::value, \"LevelSetFilter requires a mask grid with floating-point values\")"
  },
  {
    "label": "LevelSetFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelSetFilter(GridType& grid, InterruptT* interrupt = nullptr) : BaseType(grid, interrupt) , mMinMask(0) , mMaxMask(1) , mInvertMask(false)"
  },
  {
    "label": "LevelSetFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LevelSetFilter()"
  },
  {
    "label": "minMask()",
    "kind": "Method",
    "detail": "Function (} AlphaType)",
    "insertText": "minMask()"
  },
  {
    "label": "isMaskInverted()",
    "kind": "Method",
    "detail": "Function (mMinMask = min ; mMaxMask = max ; } bool)",
    "insertText": "isMaskInverted()"
  },
  {
    "label": "meanCurvature()",
    "kind": "Method",
    "detail": "Function (mInvertMask = invert ; } void)",
    "insertText": "meanCurvature(const MaskType* mask = nullptr)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Filter)",
    "insertText": "f(this, mask)"
  },
  {
    "label": "meanCurvature()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "meanCurvature()"
  },
  {
    "label": "laplacian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "laplacian(const MaskType* mask = nullptr)"
  },
  {
    "label": "laplacian()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "laplacian()"
  },
  {
    "label": "gaussian()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "gaussian(int width = 1, const MaskType* mask = nullptr)"
  },
  {
    "label": "gaussian()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "gaussian(width)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "offset(ValueType offset, const MaskType* mask = nullptr)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "offset(offset)"
  },
  {
    "label": "median()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "median(int width = 1, const MaskType* mask = nullptr)"
  },
  {
    "label": "median()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "median(width)"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "mean(int width = 1, const MaskType* mask = nullptr)"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "mean(width)"
  },
  {
    "label": "LevelSetFilter()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LevelSetFilter(const LevelSetFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LevelSetFilter&)",
    "insertText": "operator(const LevelSetFilter&)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (struct Filter { using LeafT = TreeType::LeafNodeType ; using VoxelIterT = LeafT::ValueOnIter ; using VoxelCIterT = LeafT::ValueOnCIter ; using BufferT = tree::LeafManager<TreeType>::BufferType ; using LeafRange = tree::LeafManager<TreeType>::LeafRange ; using LeafIterT = LeafRange::Iterator ; using AlphaMaskT = tools::AlphaMask<GridT,MaskT> ;)",
    "insertText": "Filter(LevelSetFilter* parent, const MaskType* mask) : mParent(parent), mMask(mask)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Filter(const Filter&)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Filter()"
  },
  {
    "label": "box()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "box(int width)"
  },
  {
    "label": "median()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "median(int width)"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mean(int width)"
  },
  {
    "label": "gaussian()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gaussian(int width)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offset(ValueType value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(const LeafRange& r)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "cook(bool swap)"
  },
  {
    "label": "getGrainSize()",
    "kind": "Method",
    "detail": "Function (const int n = mParent ->)",
    "insertText": "getGrainSize()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(mParent->leafs().leafRange(n), *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(mParent->leafs().leafRange())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(swap) mParent->leafs().swapLeafBuffer(1, n==0)"
  },
  {
    "label": "Avg()",
    "kind": "Method",
    "detail": "Function (} template<size_t Axis> struct Avg {)",
    "insertText": "Avg(const GridT& grid, Int32 w) : acc(grid.tree()), width(w), frac(1/ValueType(2*w+1))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueType)",
    "insertText": "operator()(Coord xyz)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ValueType sum = zeroVal<)",
    "insertText": "ValueType()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Int32& i = xyz [ Axis ],j = i + width ;)",
    "insertText": "for(i -= width; i <= j; ++i) sum += acc.getValue(xyz)"
  },
  {
    "label": "boxXImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boxXImpl(const LeafRange& r, Int32 w)"
  },
  {
    "label": "Avg()",
    "kind": "Method",
    "detail": "Function (this -> boxImpl<)",
    "insertText": "Avg(r,w)"
  },
  {
    "label": "boxZImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "boxZImpl(const LeafRange& r, Int32 w)"
  },
  {
    "label": "boxYImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "boxYImpl(const LeafRange& r, Int32 w)"
  },
  {
    "label": "medianImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "medianImpl(const LeafRange&, int)"
  },
  {
    "label": "meanCurvatureImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "meanCurvatureImpl(const LeafRange&)"
  },
  {
    "label": "laplacianImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "laplacianImpl(const LeafRange&)"
  },
  {
    "label": "offsetImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offsetImpl(const LeafRange&, ValueType)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (LevelSetFilter* mParent ; const MaskType* mMask ; std::function<)",
    "insertText": "void(Filter*, const LeafRange&)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "startInterrupter(\"Median-value flow of level set\")"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "leafs().rebuildAuxBuffers(1, mParent->getGrainSize()==0)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Filter::medianImpl, std::placeholders::_1, std::placeholders::_2, std::max(1, width))"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(true)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "track()"
  },
  {
    "label": "endInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "endInterrupter()"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "startInterrupter(\"Mean-value flow of level set\")"
  },
  {
    "label": "box()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "box(width)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "startInterrupter(\"Gaussian flow of level set\")"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (width =)",
    "insertText": "max(1, width)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Filter::boxXImpl, std::placeholders::_1, std::placeholders::_2, width)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Filter::boxYImpl, std::placeholders::_1, std::placeholders::_2, width)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Filter::boxZImpl, std::placeholders::_1, std::placeholders::_2, width)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "startInterrupter(\"Mean-curvature flow of level set\")"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Filter::meanCurvatureImpl, std::placeholders::_1, std::placeholders::_2)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "startInterrupter(\"Laplacian flow of level set\")"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Filter::laplacianImpl, std::placeholders::_1, std::placeholders::_2)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "startInterrupter(\"Offsetting level set\")"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "leafs().removeAuxBuffers()"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (const ValueType CFL =)",
    "insertText": "ValueType(0.5) * mParent->voxelSize(), offset = openvdb::math::Abs(value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (ValueType dist = 0 . 0 ;)",
    "insertText": "while(offset-dist > ValueType(0.001)*CFL && mParent->checkInterrupter())"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const ValueType delta = openvdb::)",
    "insertText": "Min(offset-dist, CFL)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (dist + = delta ; mTask =)",
    "insertText": "bind(&Filter::offsetImpl, std::placeholders::_1, std::placeholders::_2, copysign(delta, value))"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(false)"
  },
  {
    "label": "meanCurvatureImpl()",
    "kind": "Method",
    "detail": "Function (} template<GridT,MaskT,InterruptT> void LevelSetFilter<GridT,MaskT,InterruptT>::)",
    "insertText": "meanCurvatureImpl(const LeafRange& range)"
  },
  {
    "label": "checkInterrupter()",
    "kind": "Method",
    "detail": "Function (mParent ->)",
    "insertText": "checkInterrupter()"
  },
  {
    "label": "voxelSize()",
    "kind": "Method",
    "detail": "Function (const ValueType dx = mParent ->)",
    "insertText": "voxelSize(), dt = math::Pow2(dx) / ValueType(3.0)"
  },
  {
    "label": "stencil()",
    "kind": "Method",
    "detail": "Function (math::CurvatureStencil<GridType>)",
    "insertText": "stencil(mParent->grid(), dx)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (AlphaMaskT::FloatType a,b ; AlphaMaskT)",
    "insertText": "alpha(mParent->grid(), *mMask, mParent->minMask(), mParent->maxMask(), mParent->isMaskInverted())"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (ValueType* buffer = leafIter .)",
    "insertText": "buffer(1).data()"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (stencil .)",
    "insertText": "moveTo(iter)"
  },
  {
    "label": "meanCurvatureNormGrad()",
    "kind": "Method",
    "detail": "Function (const ValueType phi0 =* iter,phi1 = phi0 + dt* stencil .)",
    "insertText": "meanCurvatureNormGrad()"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (buffer [ iter .)",
    "insertText": "pos()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "for(LeafIterT leafIter=range.begin(); leafIter; ++leafIter)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (buffer [ iter .)",
    "insertText": "pos()] = *iter + dt*stencil.meanCurvatureNormGrad()"
  },
  {
    "label": "laplacianImpl()",
    "kind": "Method",
    "detail": "Function (} } } } template<GridT,MaskT,InterruptT> void LevelSetFilter<GridT,MaskT,InterruptT>::)",
    "insertText": "laplacianImpl(const LeafRange& range)"
  },
  {
    "label": "voxelSize()",
    "kind": "Method",
    "detail": "Function (const ValueType dx = mParent ->)",
    "insertText": "voxelSize(), dt = math::Pow2(dx) / ValueType(6.0)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (buffer [ iter .)",
    "insertText": "pos()] = *iter + dt*stencil.laplacian()"
  },
  {
    "label": "offsetImpl()",
    "kind": "Method",
    "detail": "Function (} } } } template<GridT,MaskT,InterruptT> void LevelSetFilter<GridT,MaskT,InterruptT>::)",
    "insertText": "offsetImpl(const LeafRange& range, ValueType offset)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "setValue(*iter + offset)"
  },
  {
    "label": "medianImpl()",
    "kind": "Method",
    "detail": "Function (} } } } template<GridT,MaskT,InterruptT> void LevelSetFilter<GridT,MaskT,InterruptT>::)",
    "insertText": "medianImpl(const LeafRange& range, int width)"
  },
  {
    "label": "stencil()",
    "kind": "Method",
    "detail": "Function (math::DenseStencil<GridType>)",
    "insertText": "stencil(mParent->grid(), width)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (buffer [ iter .)",
    "insertText": "pos()] = b * (*iter) + a * stencil.median()"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (buffer [ iter .)",
    "insertText": "pos()] = stencil.median()"
  },
  {
    "label": "boxImpl()",
    "kind": "Method",
    "detail": "Function (} } } } template<GridT,MaskT,InterruptT> template<AvgT> void LevelSetFilter<GridT,MaskT,InterruptT>::)",
    "insertText": "boxImpl(const LeafRange& range, Int32 w)"
  },
  {
    "label": "avg()",
    "kind": "Method",
    "detail": "Function (AvgT)",
    "insertText": "avg(mParent->grid(), w)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const Coord xyz = iter .)",
    "insertText": "getCoord()"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (buffer [ iter .)",
    "insertText": "pos()] = avg(iter.getCoord())"
  }
]