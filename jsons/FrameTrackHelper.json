[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FDrawContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDrawContext"
  },
  {
    "label": "FFrameTrackViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameTrackViewport"
  },
  {
    "label": "FFrameTrackSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTrackSample"
  },
  {
    "label": "FFrameTrackSeries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTrackSeries"
  },
  {
    "label": "FTimerFrameStatsTrackSeries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimerFrameStatsTrackSeries"
  },
  {
    "label": "FFrameTrackSeriesBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameTrackSeriesBuilder"
  },
  {
    "label": "FFrameTrackDrawHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFrameTrackDrawHelper"
  },
  {
    "label": "FFrameTrackSample()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Styling / WidgetStyle . h \" enum class ESlateDrawEffect : uint8 ; class FSlateWindowElementList ; struct FGeometry ; struct FSlateBrush ; namespace TraceServices { struct FFrame ; } namespace UE::Insights { class FDrawContext ; } namespace UE::Insights::TimingProfiler { class FFrameTrackViewport ; struct FFrameTrackSample { int32 NumFrames ; double TotalDuration ; double StartTime ; double EndTime ; int32 LargestFrameIndex ; double LargestFrameStartTime ; double LargestFrameDuration ;)",
    "insertText": "FFrameTrackSample() : NumFrames(0) , TotalDuration(0.0) , StartTime(DBL_MAX) , EndTime(-DBL_MAX) , LargestFrameIndex(0) , LargestFrameStartTime(0.0) , LargestFrameDuration(0.0)"
  },
  {
    "label": "FFrameTrackSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFrameTrackSample(const FFrameTrackSample&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameTrackSample&)",
    "insertText": "operator(const FFrameTrackSample&)"
  },
  {
    "label": "FFrameTrackSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFrameTrackSample(FFrameTrackSample&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameTrackSample&)",
    "insertText": "operator(FFrameTrackSample&&)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FFrameTrackSample& Other)"
  },
  {
    "label": "FFrameTrackSeries()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EFrameTrackSeriesType : uint32 { Frame,TimerFrameStats } ; struct FFrameTrackSeries { int32 FrameType ; EFrameTrackSeriesType Type ; bool bIsVisible ; int32 NumAggregatedFrames ; TArray<FFrameTrackSample> Samples ; FLinearColor Color ; FText Name ;)",
    "insertText": "FFrameTrackSeries(int32 InFrameType, EFrameTrackSeriesType InType) : FrameType(InFrameType) , Type(InType) , bIsVisible(true) , NumAggregatedFrames(0) , Samples()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FTimerFrameStatsTrackSeries()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTimerFrameStatsTrackSeries : public FFrameTrackSeries {)",
    "insertText": "FTimerFrameStatsTrackSeries(int32 InFrameType, uint32 InTimerId) : FFrameTrackSeries(InFrameType, EFrameTrackSeriesType::TimerFrameStats) , TimerId(InTimerId)"
  },
  {
    "label": "FFrameTrackSeriesBuilder()",
    "kind": "Method",
    "detail": "Function (} uint32 TimerId ; } ; class FFrameTrackSeriesBuilder { public :)",
    "insertText": "FFrameTrackSeriesBuilder(FFrameTrackSeries& InSeries, const FFrameTrackViewport& InViewport)"
  },
  {
    "label": "FFrameTrackSeriesBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFrameTrackSeriesBuilder(const FFrameTrackSeriesBuilder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameTrackSeriesBuilder&)",
    "insertText": "operator(const FFrameTrackSeriesBuilder&)"
  },
  {
    "label": "AddFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFrame(const TraceServices::FFrame& Frame)"
  },
  {
    "label": "GetNumAddedFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAddedFrames()"
  },
  {
    "label": "FFrameTrackDrawHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFrameTrackDrawHelper(const FFrameTrackDrawHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FFrameTrackDrawHelper&)",
    "insertText": "operator(const FFrameTrackDrawHelper&)"
  },
  {
    "label": "SetThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThresholds(double InUpperThresholdTime, double InLowerThresholdTime)"
  },
  {
    "label": "DrawBackground()",
    "kind": "Method",
    "detail": "Function (UpperThresholdTime = InUpperThresholdTime ; LowerThresholdTime = InLowerThresholdTime ; } void)",
    "insertText": "DrawBackground()"
  },
  {
    "label": "DrawCached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCached(const FFrameTrackSeries& Series)"
  },
  {
    "label": "DrawHoveredSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHoveredSample(const FFrameTrackSample& Sample)"
  },
  {
    "label": "DrawHighlightedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHighlightedInterval(const FFrameTrackSeries& Series, const double StartTime, const double EndTime)"
  },
  {
    "label": "FrameTypeToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "FrameTypeToString(int32 FrameType)"
  },
  {
    "label": "FrameTypeToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FrameTypeToText(int32 FrameType)"
  },
  {
    "label": "GetColor32ByFrameType()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetColor32ByFrameType(int32 FrameType)"
  },
  {
    "label": "GetColorByFrameType()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetColorByFrameType(int32 FrameType)"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFrames()"
  }
]