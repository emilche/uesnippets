[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SdpVideoFormat()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_CODECS_SDP_VIDEO_FORMAT_H_ # define API_VIDEO_CODECS_SDP_VIDEO_FORMAT_H_ # include<map> # include<string> # include \" absl / container / inlined_vector . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / video_codecs / scalability_mode . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { struct RTC_EXPORT SdpVideoFormat { using Parameters = std::map<std::string,std::string> ;)",
    "insertText": "SdpVideoFormat(const std::string& name)"
  },
  {
    "label": "SdpVideoFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SdpVideoFormat(const std::string& name, const Parameters& parameters)"
  },
  {
    "label": "SdpVideoFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SdpVideoFormat(const std::string& name, const Parameters& parameters, const absl::InlinedVector<ScalabilityMode, kScalabilityModeCount>& scalability_modes)"
  },
  {
    "label": "SdpVideoFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SdpVideoFormat(const SdpVideoFormat&)"
  },
  {
    "label": "SdpVideoFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SdpVideoFormat(SdpVideoFormat&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SdpVideoFormat&)",
    "insertText": "operator(const SdpVideoFormat&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SdpVideoFormat&)",
    "insertText": "operator(SdpVideoFormat&&)"
  },
  {
    "label": "SdpVideoFormat()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SdpVideoFormat()"
  },
  {
    "label": "IsSameCodec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSameCodec(const SdpVideoFormat& other)"
  },
  {
    "label": "IsCodecInList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCodecInList(rtc::ArrayView<const webrtc::SdpVideoFormat> formats)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "operator(const SdpVideoFormat& a, const SdpVideoFormat& b)"
  },
  {
    "label": "FuzzyMatchSdpVideoFormat()",
    "kind": "Method",
    "detail": "Function (} std::string name ; Parameters parameters ; absl::InlinedVector<ScalabilityMode,kScalabilityModeCount> scalability_modes ; } ; absl::optional<SdpVideoFormat>)",
    "insertText": "FuzzyMatchSdpVideoFormat(rtc::ArrayView<const SdpVideoFormat> supported_formats, const SdpVideoFormat& format)"
  }
]