[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FEditorPromotionTestUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorPromotionTestUtilities"
  },
  {
    "label": "FindFirstWidgetByClass()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "FindFirstWidgetByClass(TSharedRef<SWidget> InParent, const FName& InWidgetType)"
  },
  {
    "label": "GetGamePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGamePath()"
  },
  {
    "label": "GetEditorKeybinding()",
    "kind": "Method",
    "detail": "Function (FInputChord)",
    "insertText": "GetEditorKeybinding(const FString& CommandContext, const FString& Command)"
  },
  {
    "label": "GetOrSetUICommand()",
    "kind": "Method",
    "detail": "Function (FInputChord)",
    "insertText": "GetOrSetUICommand(const FString& Context, const FString& Command)"
  },
  {
    "label": "SendCommandToCurrentEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendCommandToCurrentEditor(const FInputChord& InChord, const FName& WidgetTypeToFocus)"
  },
  {
    "label": "GetPropertyByName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPropertyByName(UObject* TargetObject, const FString& InVariableName)"
  },
  {
    "label": "SetPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropertyByName(UObject* TargetObject, const FString& InVariableName, const FString& NewValueString)"
  },
  {
    "label": "StartPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPIE(bool bSimulateInEditor)"
  },
  {
    "label": "EndPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPIE()"
  },
  {
    "label": "TakeScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeScreenshot(const FString& ScreenshotName, const FAutomationScreenshotOptions& Options, bool bUseTopWindow = false)"
  }
]