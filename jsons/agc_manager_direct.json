[
  {
    "label": "MonoAgc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MonoAgc"
  },
  {
    "label": "GainControl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GainControl"
  },
  {
    "label": "AgcManagerDirect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AgcManagerDirect"
  },
  {
    "label": "AgcManagerDirectTestHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AgcManagerDirectTestHelper"
  },
  {
    "label": "AgcManagerDirect()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC_AGC_MANAGER_DIRECT_H_ # define MODULES_AUDIO_PROCESSING_AGC_AGC_MANAGER_DIRECT_H_ # include<atomic> # include<memory> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" modules / audio_processing / agc / agc . h \" # include \" modules / audio_processing / agc2 / clipping_predictor . h \" # include \" modules / audio_processing / audio_buffer . h \" # include \" modules / audio_processing / include / audio_processing . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" # include \" rtc_base / gtest_prod_util . h \" namespace webrtc { class MonoAgc ; class GainControl ; class AgcManagerDirect final { public :)",
    "insertText": "AgcManagerDirect(int num_capture_channels, const AudioProcessing::Config::GainController1::AnalogGainController& analog_config)"
  },
  {
    "label": "AgcManagerDirect()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AgcManagerDirect()"
  },
  {
    "label": "AgcManagerDirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AgcManagerDirect(const AgcManagerDirect&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AgcManagerDirect&)",
    "insertText": "operator(const AgcManagerDirect&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "SetupDigitalGainControl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDigitalGainControl(GainControl& gain_control)"
  },
  {
    "label": "set_stream_analog_level()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_stream_analog_level(int level)"
  },
  {
    "label": "AnalyzePreProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzePreProcess(const AudioBuffer& audio_buffer)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(const AudioBuffer& audio_buffer, absl::optional<float> speech_probability, absl::optional<float> speech_level_dbfs)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(const AudioBuffer& audio_buffer)"
  },
  {
    "label": "recommended_analog_level()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "recommended_analog_level()"
  },
  {
    "label": "voice_probability()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "voice_probability()"
  },
  {
    "label": "num_channels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "num_channels()"
  },
  {
    "label": "clipping_predictor_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "clipping_predictor_enabled()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectTest, AgcMinMicLevelExperimentDefault)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectTest, AgcMinMicLevelExperimentDisabled)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectTest, AgcMinMicLevelExperimentOutOfRangeAbove)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectTest, AgcMinMicLevelExperimentOutOfRangeBelow)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectTest, AgcMinMicLevelExperimentEnabled50)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectTest, AgcMinMicLevelExperimentEnabledAboveStartupLevel)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectParametrizedTest, ClippingParametersVerified)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectParametrizedTest, DisableClippingPredictorDoesNotLowerVolume)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectParametrizedTest, UsedClippingPredictionsProduceLowerAnalogLevels)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectParametrizedTest, UnusedClippingPredictionsProduceEqualAnalogLevels)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectParametrizedTest, EmptyRmsErrorOverrideHasNoEffect)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(AgcManagerDirectParametrizedTest, NonEmptyRmsErrorOverrideHasEffect)"
  },
  {
    "label": "AgcManagerDirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AgcManagerDirect(const AudioProcessing::Config::GainController1::AnalogGainController& analog_config, Agc* agc)"
  },
  {
    "label": "AggregateChannelLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AggregateChannelLevels()"
  },
  {
    "label": "MonoAgc()",
    "kind": "Method",
    "detail": "Function (const bool analog_controller_enabled_ ; const absl::optional<int> min_mic_level_override_ ; std::unique_ptr<ApmDataDumper> data_dumper_ ; std::atomic<int> instance_counter_ ; const int num_capture_channels_ ; const bool disable_digital_adaptive_ ; int frames_since_clipped_ ; int recommended_input_volume_ = 0 ; bool capture_output_used_ ; int channel_controlling_gain_ = 0 ; const int clipped_level_step_ ; const float clipped_ratio_threshold_ ; const int clipped_wait_frames_ ; std::vector<std::unique_ptr<MonoAgc>> channel_agcs_ ; std::vector<absl::optional<int>> new_compressions_to_set_ ; const std::unique_ptr<ClippingPredictor> clipping_predictor_ ; const bool use_clipping_predictor_step_ ; float clipping_rate_log_ ; int clipping_rate_log_counter_ ; } ; class MonoAgc { public :)",
    "insertText": "MonoAgc(ApmDataDumper* data_dumper, int clipped_level_min, bool disable_digital_adaptive, int min_mic_level)"
  },
  {
    "label": "MonoAgc()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MonoAgc()"
  },
  {
    "label": "MonoAgc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MonoAgc(const MonoAgc&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MonoAgc&)",
    "insertText": "operator(const MonoAgc&)"
  },
  {
    "label": "HandleCaptureOutputUsedChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCaptureOutputUsedChange(bool capture_output_used)"
  },
  {
    "label": "HandleClipping()",
    "kind": "Method",
    "detail": "Function (recommended_input_volume_ = level ; } void)",
    "insertText": "HandleClipping(int clipped_level_step)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(rtc::ArrayView<const int16_t> audio, absl::optional<int> rms_error_override)"
  },
  {
    "label": "ActivateLogging()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ActivateLogging()"
  },
  {
    "label": "new_compression()",
    "kind": "Method",
    "detail": "Function (log_to_histograms_ = true ; } absl::optional<int>)",
    "insertText": "new_compression()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (agc_ .)",
    "insertText": "reset(agc)"
  },
  {
    "label": "min_mic_level()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "min_mic_level()"
  },
  {
    "label": "SetMaxLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxLevel(int level)"
  },
  {
    "label": "CheckVolumeAndReset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CheckVolumeAndReset()"
  },
  {
    "label": "UpdateGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGain(int rms_error_db)"
  },
  {
    "label": "UpdateCompressor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCompressor()"
  }
]