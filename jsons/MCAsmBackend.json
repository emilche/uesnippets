[
  {
    "label": "MCAsmLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmLayout"
  },
  {
    "label": "MCAssembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAssembler"
  },
  {
    "label": "MCELFObjectTargetWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCELFObjectTargetWriter"
  },
  {
    "label": "MCFixupKindInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MCFixupKindInfo"
  },
  {
    "label": "MCFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFragment"
  },
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "MCRelaxableFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRelaxableFragment"
  },
  {
    "label": "MCObjectWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCObjectWriter"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCValue"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MCAsmBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmBackend"
  },
  {
    "label": "MCAsmBackend()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCASMBACKEND_H # define LLVM_MC_MCASMBACKEND_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / MC / MCDirectives . h \" # include \" llvm / MC / MCDwarf . h \" # include \" llvm / MC / MCFixup . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / ErrorHandling . h \" namespace llvm { class MCAsmLayout ; class MCAssembler ; class MCELFObjectTargetWriter ; struct MCFixupKindInfo ; class MCFragment ; class MCInst ; class MCRelaxableFragment ; class MCObjectWriter ; class MCSection ; class MCValue ; class raw_ostream ; class MCAsmBackend {)",
    "insertText": "MCAsmBackend(const MCAsmBackend &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCAsmBackend &)"
  },
  {
    "label": "MCAsmBackend()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "MCAsmBackend()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "createObjectWriter()",
    "kind": "Method",
    "detail": "Function (} MCObjectWriter*)",
    "insertText": "createObjectWriter(raw_pwrite_stream &OS)"
  },
  {
    "label": "createELFObjectTargetWriter()",
    "kind": "Method",
    "detail": "Function (MCELFObjectTargetWriter*)",
    "insertText": "createELFObjectTargetWriter()"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"createELFObjectTargetWriter is not supported by asm \" \"backend\")"
  },
  {
    "label": "hasDataInCodeSupport()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasDataInCodeSupport()"
  },
  {
    "label": "getFixupKindInfo()",
    "kind": "Method",
    "detail": "Function (const MCFixupKindInfo&)",
    "insertText": "getFixupKindInfo(MCFixupKind Kind)"
  },
  {
    "label": "processFixupValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "processFixupValue(const MCAssembler &Asm, const MCAsmLayout &Layout, const MCFixup &Fixup, const MCFragment *DF, const MCValue &Target, uint64_t &Value, bool &IsResolved)"
  },
  {
    "label": "applyFixup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "applyFixup(const MCFixup &Fixup, char *Data, unsigned DataSize, uint64_t Value, bool IsPCRel)"
  },
  {
    "label": "mayNeedRelaxation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "mayNeedRelaxation(const MCInst &Inst)"
  },
  {
    "label": "fixupNeedsRelaxationAdvanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fixupNeedsRelaxationAdvanced(const MCFixup &Fixup, bool Resolved, uint64_t Value, const MCRelaxableFragment *DF, const MCAsmLayout &Layout)"
  },
  {
    "label": "fixupNeedsRelaxation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "fixupNeedsRelaxation(const MCFixup &Fixup, uint64_t Value, const MCRelaxableFragment *DF, const MCAsmLayout &Layout)"
  },
  {
    "label": "relaxInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "relaxInstruction(const MCInst &Inst, MCInst &Res)"
  },
  {
    "label": "getMinimumNopSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getMinimumNopSize()"
  },
  {
    "label": "handleAssemblerFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleAssemblerFlag(MCAssemblerFlag Flag)"
  },
  {
    "label": "generateCompactUnwindEncoding()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "generateCompactUnwindEncoding(ArrayRef<MCCFIInstruction>)"
  }
]