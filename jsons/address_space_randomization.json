[
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_ADDRESS_SPACE_RANDOMIZATION_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_ADDRESS_SPACE_RANDOMIZATION_H_ # include<cstdint> # include \" base / allocator / partition_allocator / page_allocator_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" build / build_config . h \" namespace partition_alloc {)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) uintptr_t GetRandomPageBase()"
  },
  {
    "label": "AslrAddress()",
    "kind": "Method",
    "detail": "Function (namespace internal { PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "AslrAddress(uintptr_t mask)"
  },
  {
    "label": "AslrMask()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "AslrMask(uintptr_t bits)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(ARCH_CPU_64_BITS) #if defined(MEMORY_TOOL_REPLACES_ALLOCATOR) PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "ASLROffset()",
    "kind": "Method",
    "detail": "Function (} PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ASLROffset()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_WIN) constexpr PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "ASLRMaskBefore8_10()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ASLRMaskBefore8_10()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) #if defined(ARCH_CPU_X86_64) constexpr PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(ARCH_CPU_ARM64) #if BUILDFLAG(IS_ANDROID) constexpr PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_LINUX) PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "ASLRMask()",
    "kind": "Method",
    "detail": "Function (} # else PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ASLRMask()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # elif)",
    "insertText": "defined(ARCH_CPU_PPC64) #if BUILDFLAG(IS_AIX) constexpr PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(ARCH_CPU_BIG_ENDIAN) constexpr PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # elif)",
    "insertText": "defined(ARCH_CPU_S390X) constexpr PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "defined(ARCH_CPU_S390) constexpr PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(IS_SOLARIS) constexpr PA_ALWAYS_INLINE uintptr_t ASLROffset()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # elif)",
    "insertText": "BUILDFLAG(IS_AIX) constexpr PA_ALWAYS_INLINE uintptr_t ASLROffset()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # endif # endif # elif)",
    "insertText": "defined(ARCH_CPU_32_BITS) constexpr PA_ALWAYS_INLINE uintptr_t ASLRMask()"
  }
]