[
  {
    "label": "PrintVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrintVisitor"
  },
  {
    "label": "EqVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EqVisitor"
  },
  {
    "label": "ExpandVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExpandVisitor"
  },
  {
    "label": "Info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Info"
  },
  {
    "label": "TypeSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeSet"
  },
  {
    "label": "Insert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Insert"
  },
  {
    "label": "C",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C"
  },
  {
    "label": "MakeTypeSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakeTypeSet"
  },
  {
    "label": "ContainerAsVector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ContainerAsVector"
  },
  {
    "label": "DefaultEquals",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultEquals"
  },
  {
    "label": "VerifyTypeImplementsAbslHashCorrectly()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_HASH_HASH_TESTING_H_ # define ABSL_HASH_HASH_TESTING_H_ # include<initializer_list> # include<tuple> # include<type_traits> # include<vector> # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / hash / internal / spy_hash_state . h \" # include \" absl / meta / type_traits . h \" # include \" absl / strings / str_cat . h \" # include \" absl / types / variant . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<int& . . . ExplicitBarrier,Container> ABSL_MUST_USE_RESULT testing::AssertionResult)",
    "insertText": "VerifyTypeImplementsAbslHashCorrectly(const Container& values)"
  },
  {
    "label": "VerifyTypeImplementsAbslHashCorrectly()",
    "kind": "Method",
    "detail": "Function (template<int& . . . ExplicitBarrier,Container,Eq> ABSL_MUST_USE_RESULT testing::AssertionResult)",
    "insertText": "VerifyTypeImplementsAbslHashCorrectly(const Container& values, Eq equals)"
  },
  {
    "label": "VerifyTypeImplementsAbslHashCorrectly()",
    "kind": "Method",
    "detail": "Function (template<int& . . .,T> ABSL_MUST_USE_RESULT testing::AssertionResult)",
    "insertText": "VerifyTypeImplementsAbslHashCorrectly(std::initializer_list<T> values)"
  },
  {
    "label": "VerifyTypeImplementsAbslHashCorrectly()",
    "kind": "Method",
    "detail": "Function (template<int& . . .,T,Eq> ABSL_MUST_USE_RESULT testing::AssertionResult)",
    "insertText": "VerifyTypeImplementsAbslHashCorrectly(std::initializer_list<T> values, Eq equals)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace hash_internal { struct PrintVisitor { size_t index ; template<T> std::string)",
    "insertText": "operator()(const T* value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<Eq> struct EqVisitor { Eq eq ; template<T,U> bool)",
    "insertText": "operator()(const T* t, const U* u)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (using V = Container::value_type ; struct Info { const V& value ; size_t index ; std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (} SpyHashState)",
    "insertText": "expand()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } ; using EqClass = std::vector<Info> ; std::vector<EqClass> classes ; size_t i = 0 ;)",
    "insertText": "for(const auto& value : values)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EqClass* c = nullptr ;)",
    "insertText": "for(auto& eqclass : classes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (c =& eqclass ; break ; } })",
    "insertText": "if(c == nullptr)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (classes .)",
    "insertText": "emplace_back()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (c =& classes .)",
    "insertText": "back()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} c ->)",
    "insertText": "push_back({value, i})"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + i ;)",
    "insertText": "if(auto error = c->back().expand().error())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(classes.size() < 2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const auto& c : classes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(v.expand() != expected)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(const auto& c2 : classes)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> struct TypeSet { template<U,bool = disjunction<std::is_same<T,U> . . .>::value> struct Insert { using type = TypeSet<U,T . . .> ; } ; template<U> struct Insert<U,true> { using type = TypeSet ; } ; template<template<. . .> class C> using apply = C<T . . .> ; } ; template<. . . T> struct MakeTypeSet : TypeSet<> { } ; template<T,. . . Ts> struct MakeTypeSet<T,Ts . . .> : MakeTypeSet<Ts . . .>::template Insert<T>::type { } ; template<. . . T> using VariantForTypes = MakeTypeSet<const std::decay<T>::type* . . .>::template apply<absl::variant> ; template<Container> struct ContainerAsVector { using V = absl::variant<const Container::value_type*> ; using Out = std::vector<V> ; Out)",
    "insertText": "Do(const Container& values)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Out out ;)",
    "insertText": "for(const auto& v : values) out.push_back(&v)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (} Out)",
    "insertText": "Do(const std::tuple<T...>& values)"
  },
  {
    "label": "Do()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct ContainerAsVector<std::tuple<>> { std::vector<VariantForTypes<int>>)",
    "insertText": "Do(std::tuple<>)"
  }
]