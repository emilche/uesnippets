[
  {
    "label": "FAutomationFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationFilter"
  },
  {
    "label": "FAutomationGroupFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationGroupFilter"
  },
  {
    "label": "FAutomatedTestFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomatedTestFilter"
  },
  {
    "label": "FAutomationTestPresetManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutomationTestPresetManager"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "SAutomationWindowCommandBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAutomationWindowCommandBar"
  },
  {
    "label": "SCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCheckBox"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "FAutomationTestPreset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationTestPreset"
  },
  {
    "label": "TTextFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTextFilter"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SAutomationWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAutomationWindow"
  },
  {
    "label": "IAutomationReport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAutomationReport"
  },
  {
    "label": "FAutomationOutputMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAutomationOutputMessage"
  },
  {
    "label": "Checked()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" IAutomationReport . h \" # include \" ISessionManager . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Input / SComboBox . h \" # include \" SAutomationGraphicalResultBox . h \" # include \" Widgets / Views / STreeView . h \" # if WITH_EDITOR # include \" AssetRegistry / IAssetRegistry . h \" # endif class FAutomationFilter ; class FAutomationGroupFilter ; struct FAutomatedTestFilter ; class FAutomationTestPresetManager ; class FUICommandList ; class SAutomationWindowCommandBar ; class SCheckBox ; class SEditableTextBox ; struct FAutomationTestPreset ; template<ItemType> class TTextFilter ; namespace AutomationTestWindowConstants { const FName)",
    "insertText": "Checked(TEXT(\"Checked\"))"
  },
  {
    "label": "Skipped()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Skipped(TEXT(\"Skipped\"))"
  },
  {
    "label": "SkippedOptions()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "SkippedOptions(TEXT(\"SkippedOptions\"))"
  },
  {
    "label": "Title()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Title(TEXT(\"Name\"))"
  },
  {
    "label": "SmokeTest()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "SmokeTest(TEXT(\"SmokeTest\"))"
  },
  {
    "label": "RequiredDeviceCount()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "RequiredDeviceCount(TEXT(\"RequiredDeviceCount\"))"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Status(TEXT(\"Status\"))"
  },
  {
    "label": "Timing()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Timing(TEXT(\"Timing\"))"
  },
  {
    "label": "FAutomationOutputMessage()",
    "kind": "Method",
    "detail": "Function (} namespace EAutomationTestBackgroundStyle { enum Type { Unknown,Editor,Game,} ; } class SAutomationWindow : public SCompoundWidget { typedef TTextFilter<const TSharedPtr<class IAutomationReport>&> AutomationReportTextFilter ; struct FAutomationOutputMessage { FName Style ; FString Text ;)",
    "insertText": "FAutomationOutputMessage(const FString& InText, const FName& InStyle) : Style(InStyle) , Text(InText)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAutomationWindow)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: SAutomationWindow()"
  },
  {
    "label": "SAutomationWindow()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SAutomationWindow()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, const IAutomationControllerManagerRef& AutomationController, const TSharedRef<ISessionManager>& InSessionManager)"
  },
  {
    "label": "IsAutomationControllerIdle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutomationControllerIdle()"
  },
  {
    "label": "SaveExpandedTestNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "SaveExpandedTestNames(TSet<TSharedPtr<IAutomationReport>> ExpandedItems)"
  },
  {
    "label": "ExpandItemsInList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandItemsInList(TSharedPtr<STreeView<TSharedPtr<IAutomationReport>>> InTestTable, TSharedPtr<IAutomationReport> InReport, TArray<FString> ItemsToExpand)"
  },
  {
    "label": "AreMultipleRowsSelected()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "AreMultipleRowsSelected()"
  },
  {
    "label": "ChangeTheSelectionToThisRow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ChangeTheSelectionToThisRow(TSharedPtr< IAutomationReport > ThisRow)"
  },
  {
    "label": "IsRowSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRowSelected(TSharedPtr< IAutomationReport > ThisRow)"
  },
  {
    "label": "SetAllSelectedTestsChecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllSelectedTestsChecked(bool InChecked)"
  },
  {
    "label": "IsAnySelectedRowEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnySelectedRowEnabled()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& InGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleItemCheckBoxCheckedStateChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleItemCheckBoxCheckedStateChanged(TSharedPtr< IAutomationReport > TestStatus)"
  },
  {
    "label": "HandleItemCheckBoxIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleItemCheckBoxIsEnabled()"
  },
  {
    "label": "HandleMainContentIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMainContentIsEnabled()"
  },
  {
    "label": "CreateCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCommands()"
  },
  {
    "label": "MakeAutomationWindowToolBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutomationWindowToolBar(const TSharedRef<FUICommandList>& InCommandList, TSharedPtr<class SAutomationWindow> InLevelEditor)"
  },
  {
    "label": "MakeAutomationWindowToolBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutomationWindowToolBar(const TSharedRef<FUICommandList>& InCommandList)"
  },
  {
    "label": "MakeAutomationFilterToolBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutomationFilterToolBar(const TSharedRef<FUICommandList>& InCommandList, TSharedPtr<class SAutomationWindow> InLevelEditor)"
  },
  {
    "label": "MakeAutomationFilterToolBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAutomationFilterToolBar(const TSharedRef<FUICommandList>& InCommandList)"
  },
  {
    "label": "GenerateTestsOptionsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateTestsOptionsMenuContent(TWeakPtr<class SAutomationWindow> InAutomationWindow)"
  },
  {
    "label": "GenerateTestsOptionsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateTestsOptionsMenuContent()"
  },
  {
    "label": "GenerateGroupOptionsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateGroupOptionsMenuContent(TWeakPtr<class SAutomationWindow> InAutomationWindow)"
  },
  {
    "label": "GenerateGroupOptionsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateGroupOptionsMenuContent()"
  },
  {
    "label": "GeneratePresetsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GeneratePresetsMenuContent(TWeakPtr<class SAutomationWindow> InAutomationWindow)"
  },
  {
    "label": "GeneratePresetsMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GeneratePresetsMenuContent()"
  },
  {
    "label": "GenerateTestHistoryMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateTestHistoryMenuContent(TWeakPtr<class SAutomationWindow> InAutomationWindow)"
  },
  {
    "label": "GenerateTestHistoryMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateTestHistoryMenuContent()"
  },
  {
    "label": "GenerateRequestedFilterComboItem()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateRequestedFilterComboItem(TSharedPtr<FString> InItem)"
  },
  {
    "label": "GenerateGroupComboItem()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateGroupComboItem(TSharedPtr<FString> InItem)"
  },
  {
    "label": "PopulateReportSearchStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateReportSearchStrings(const TSharedPtr< IAutomationReport >& Report, OUT TArray< FString >& OutSearchStrings)"
  },
  {
    "label": "OnExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExpansionChanged(TSharedPtr<IAutomationReport> InItem, bool bExpanded)"
  },
  {
    "label": "ExpandSingleItemSubgroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandSingleItemSubgroups(TSharedPtr<IAutomationReport> InItem, bool bExpanded)"
  },
  {
    "label": "OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildren(TSharedPtr<IAutomationReport> InItem, TArray<TSharedPtr<IAutomationReport> >& OutItems)"
  },
  {
    "label": "OnTestExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestExpansionRecursive(TSharedPtr<IAutomationReport> InTreeNode, bool bInIsItemExpanded)"
  },
  {
    "label": "OnTestSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestSelectionChanged(TSharedPtr<IAutomationReport> Selection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "UpdateTestLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTestLog(TSharedPtr<IAutomationReport> Selection)"
  },
  {
    "label": "HeaderCheckboxStateChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeaderCheckboxStateChange(ECheckBoxState InCheckboxState)"
  },
  {
    "label": "RebuildPlatformIcons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildPlatformIcons()"
  },
  {
    "label": "CreateDeviceTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "CreateDeviceTooltip(int32 ClusterIndex)"
  },
  {
    "label": "ClearAutomationUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAutomationUI()"
  },
  {
    "label": "OnGenerateWidgetForTest()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateWidgetForTest(TSharedPtr<IAutomationReport> InItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnGenerateWidgetForLog()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateWidgetForLog(TSharedPtr<FAutomationOutputMessage> Message, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnGetNumEnabledTestsString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetNumEnabledTestsString()"
  },
  {
    "label": "OnGetNumDevicesInClusterString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetNumDevicesInClusterString(const int32 ClusterIndex)"
  },
  {
    "label": "OnRefreshTestCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefreshTestCallback()"
  },
  {
    "label": "FindWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindWorkers()"
  },
  {
    "label": "ListTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListTests()"
  },
  {
    "label": "RunTests()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RunTests()"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "IsDeveloperDirectoryIncluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeveloperDirectoryIncluded()"
  },
  {
    "label": "OnToggleDeveloperDirectoryIncluded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleDeveloperDirectoryIncluded()"
  },
  {
    "label": "IsExcludedTestsFilterOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExcludedTestsFilterOn()"
  },
  {
    "label": "OnToggleExcludedTestsFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleExcludedTestsFilter()"
  },
  {
    "label": "IsSmokeTestFilterOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSmokeTestFilterOn()"
  },
  {
    "label": "OnToggleSmokeTestFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSmokeTestFilter()"
  },
  {
    "label": "IsWarningFilterOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWarningFilterOn()"
  },
  {
    "label": "OnToggleWarningFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleWarningFilter()"
  },
  {
    "label": "IsErrorFilterOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsErrorFilterOn()"
  },
  {
    "label": "OnToggleErrorFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleErrorFilter()"
  },
  {
    "label": "IsSendAnalyticsCheckBoxChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsSendAnalyticsCheckBoxChecked()"
  },
  {
    "label": "HandleSendAnalyticsBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSendAnalyticsBoxCheckStateChanged(ECheckBoxState CheckBoxState)"
  },
  {
    "label": "KeepPIEOpenCheckBoxChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "KeepPIEOpenCheckBoxChecked()"
  },
  {
    "label": "HandleKeepPIEOpenBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeepPIEOpenBoxCheckStateChanged(ECheckBoxState CheckBoxState)"
  },
  {
    "label": "AutoExpandSingleItemSubgroupsCheckBoxChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "AutoExpandSingleItemSubgroupsCheckBoxChecked()"
  },
  {
    "label": "HandleAutoExpandSingleItemSubgroupsCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAutoExpandSingleItemSubgroupsCheckStateChanged(ECheckBoxState CheckBoxState)"
  },
  {
    "label": "IsDeviceGroupCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsDeviceGroupCheckBoxIsChecked(const int32 DeviceGroupFlag)"
  },
  {
    "label": "HandleDeviceGroupCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeviceGroupCheckStateChanged(ECheckBoxState CheckBoxState, const int32 DeviceGroupFlag)"
  },
  {
    "label": "HandlePresetCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePresetCheckStateChanged(ECheckBoxState CheckBoxState, const int32 EntryIndex, TSharedPtr<TArray<TSharedPtr<SCheckBox>>> CheckBoxes)"
  },
  {
    "label": "OnChangeRepeatCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeRepeatCount(int32 InNewValue)"
  },
  {
    "label": "GetRepeatCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRepeatCount()"
  },
  {
    "label": "UpdateTestListBackgroundStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTestListBackgroundStyle()"
  },
  {
    "label": "GetSmallIconExtension()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSmallIconExtension()"
  },
  {
    "label": "GetLargeToolBarVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLargeToolBarVisibility()"
  },
  {
    "label": "GetRunAutomationIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetRunAutomationIcon()"
  },
  {
    "label": "GetRunAutomationLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRunAutomationLabel()"
  },
  {
    "label": "GetTestBackgroundBorderImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetTestBackgroundBorderImage()"
  },
  {
    "label": "ExpandTreeView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandTreeView(TSharedPtr< IAutomationReport > InReport, const bool ShouldExpand)"
  },
  {
    "label": "HandleAutomationHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleAutomationHighlightText()"
  },
  {
    "label": "HandleSelectSessionOverlayVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleSelectSessionOverlayVisibility()"
  },
  {
    "label": "HandleSessionManagerCanSelectSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionManagerCanSelectSession(const TSharedPtr<ISessionInfo>& Session, bool& CanSelect)"
  },
  {
    "label": "HandleSessionManagerSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionManagerSelectionChanged(const TSharedPtr<ISessionInfo>& SelectedSession)"
  },
  {
    "label": "HandleSessionManagerInstanceChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionManagerInstanceChanged()"
  },
  {
    "label": "IsAutomationRunButtonEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutomationRunButtonEnabled()"
  },
  {
    "label": "OnTestAvailableCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestAvailableCallback(EAutomationControllerModuleState::Type InAutomationControllerState)"
  },
  {
    "label": "OnTestsCompleteCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestsCompleteCallback()"
  },
  {
    "label": "CopyLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyLog()"
  },
  {
    "label": "HandleAutomationListContextMenuOpening()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TSharedPtr<SWidget>)",
    "insertText": "HandleAutomationListContextMenuOpening()"
  },
  {
    "label": "RunSelectedTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunSelectedTests()"
  },
  {
    "label": "FindTestReportsForCurrentEditorLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTestReportsForCurrentEditorLevel(TArray<TSharedPtr<IAutomationReport>>& OutLevelReports)"
  },
  {
    "label": "CanExecuteRunLevelTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteRunLevelTest()"
  },
  {
    "label": "OnRunLevelTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRunLevelTest()"
  },
  {
    "label": "ScrollToTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToTest(TSharedPtr<IAutomationReport> InReport)"
  },
  {
    "label": "ExpandToTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandToTest(TSharedPtr<IAutomationReport> InRoot, TSharedPtr<IAutomationReport> InReport)"
  },
  {
    "label": "HandleSavePresetClicked()",
    "kind": "Method",
    "detail": "Function (# endif FReply)",
    "insertText": "HandleSavePresetClicked()"
  },
  {
    "label": "OnNewPresetClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewPresetClicked()"
  },
  {
    "label": "OnRemovePresetClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemovePresetClicked()"
  },
  {
    "label": "OnRenamePresetClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenamePresetClicked()"
  },
  {
    "label": "IsSaveButtonEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSaveButtonEnabled()"
  },
  {
    "label": "HandlePresetComboVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandlePresetComboVisibility()"
  },
  {
    "label": "HandlePresetTextVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandlePresetTextVisibility()"
  },
  {
    "label": "HandleGroupsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "HandleGroupsVisibility()"
  },
  {
    "label": "HandlePresetTextCommited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePresetTextCommited(const FText& CommittedText, ETextCommit::Type CommitType)"
  },
  {
    "label": "HandleRequesteFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRequesteFilterChanged(TSharedPtr<FString> Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "HandleGroupChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGroupChanged(TSharedPtr<FString> Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "ExpandEnabledTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandEnabledTests(TSharedPtr< IAutomationReport > InReport)"
  },
  {
    "label": "GetPresetComboText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPresetComboText()"
  },
  {
    "label": "GetRequestedFilterComboText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRequestedFilterComboText()"
  },
  {
    "label": "GetGroupComboText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGroupComboText()"
  },
  {
    "label": "HandleCommandBarCopyLogClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleCommandBarCopyLogClicked()"
  },
  {
    "label": "HandleLogListSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLogListSelectionChanged(TSharedPtr<FAutomationOutputMessage> InItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetTestLogVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTestLogVisibility()"
  },
  {
    "label": "GetTestGraphVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTestGraphVisibility()"
  },
  {
    "label": "HandleResultDisplayTypeStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleResultDisplayTypeStateChanged(ECheckBoxState NewRadioState, EAutomationGrapicalDisplayType::Type NewDisplayType)"
  },
  {
    "label": "HandleResultDisplayTypeIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleResultDisplayTypeIsChecked(EAutomationGrapicalDisplayType::Type InDisplayType)"
  },
  {
    "label": "GetTestsUpdatingThrobberVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTestsUpdatingThrobberVisibility()"
  }
]