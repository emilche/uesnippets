[
  {
    "label": "FT_StrokerRec_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FT_StrokerRec_"
  },
  {
    "label": "FT_Stroker_LineJoin_",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FT_Stroker_LineJoin_"
  },
  {
    "label": "FT_Stroker_LineCap_",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FT_Stroker_LineCap_"
  },
  {
    "label": "FT_StrokerBorder_",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FT_StrokerBorder_"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef __FT_STROKE_H__ # define __FT_STROKE_H__ # include<ft2build . h> # include FT_OUTLINE_H # include FT_GLYPH_H FT_BEGIN_HEADER typedef struct FT_StrokerRec_* FT_Stroker ; typedef enum FT_Stroker_LineJoin_ { FT_STROKER_LINEJOIN_ROUND = 0,FT_STROKER_LINEJOIN_BEVEL = 1,FT_STROKER_LINEJOIN_MITER_VARIABLE = 2,FT_STROKER_LINEJOIN_MITER = FT_STROKER_LINEJOIN_MITER_VARIABLE,FT_STROKER_LINEJOIN_MITER_FIXED = 3 } FT_Stroker_LineJoin ; typedef enum FT_Stroker_LineCap_ { FT_STROKER_LINECAP_BUTT = 0,FT_STROKER_LINECAP_ROUND,FT_STROKER_LINECAP_SQUARE } FT_Stroker_LineCap ; typedef enum FT_StrokerBorder_ { FT_STROKER_BORDER_LEFT = 0,FT_STROKER_BORDER_RIGHT } FT_StrokerBorder ;)",
    "insertText": "FT_EXPORT(FT_StrokerBorder ) FT_Outline_GetInsideBorder( FT_Outline* outline)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_StrokerBorder ) FT_Outline_GetOutsideBorder( FT_Outline* outline)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_New( FT_Library library, FT_Stroker *astroker)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(void ) FT_Stroker_Set( FT_Stroker stroker, FT_Fixed radius, FT_Stroker_LineCap line_cap, FT_Stroker_LineJoin line_join, FT_Fixed miter_limit)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(void ) FT_Stroker_Rewind( FT_Stroker stroker)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_ParseOutline( FT_Stroker stroker, FT_Outline* outline, FT_Bool opened)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_BeginSubPath( FT_Stroker stroker, FT_Vector* to, FT_Bool open)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_EndSubPath( FT_Stroker stroker)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_LineTo( FT_Stroker stroker, FT_Vector* to)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_ConicTo( FT_Stroker stroker, FT_Vector* control, FT_Vector* to)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_CubicTo( FT_Stroker stroker, FT_Vector* control1, FT_Vector* control2, FT_Vector* to)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_GetBorderCounts( FT_Stroker stroker, FT_StrokerBorder border, FT_UInt *anum_points, FT_UInt *anum_contours)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(void ) FT_Stroker_ExportBorder( FT_Stroker stroker, FT_StrokerBorder border, FT_Outline* outline)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Stroker_GetCounts( FT_Stroker stroker, FT_UInt *anum_points, FT_UInt *anum_contours)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(void ) FT_Stroker_Export( FT_Stroker stroker, FT_Outline* outline)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(void ) FT_Stroker_Done( FT_Stroker stroker)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Glyph_Stroke( FT_Glyph *pglyph, FT_Stroker stroker, FT_Bool destroy)"
  },
  {
    "label": "FT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FT_EXPORT(FT_Error ) FT_Glyph_StrokeBorder( FT_Glyph *pglyph, FT_Stroker stroker, FT_Bool inside, FT_Bool destroy)"
  }
]