[
  {
    "label": "jpgd_status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "jpgd_status"
  },
  {
    "label": "jpeg_decoder_stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "jpeg_decoder_stream"
  },
  {
    "label": "jpeg_decoder_file_stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "jpeg_decoder_file_stream"
  },
  {
    "label": "jpeg_decoder_mem_stream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "jpeg_decoder_mem_stream"
  },
  {
    "label": "jpeg_decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "jpeg_decoder"
  },
  {
    "label": "huff_tables",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "huff_tables"
  },
  {
    "label": "coeff_buf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "coeff_buf"
  },
  {
    "label": "mem_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "mem_block"
  },
  {
    "label": "decompress_jpeg_image_from_memory()",
    "kind": "Method",
    "detail": "Function (# ifndef JPEG_DECODER_H # define JPEG_DECODER_H # include<stdlib . h> # include<stdio . h> # include<setjmp . h> # include<assert . h> # include<stdint . h> # define JPGD_NORETURN UE_NORETURN # define JPGD_HUFF_TREE_MAX_LENGTH 5 1 2 # define JPGD_HUFF_CODE_SIZE_MAX_LENGTH 2 5 6 namespace jpgd { typedef unsigned char uint8 ; typedef signed short int16 ; typedef unsigned short uint16 ; typedef unsigned int uint ; typedef signed int int32 ; unsigned char*)",
    "insertText": "decompress_jpeg_image_from_memory(const unsigned char* pSrc_data, int src_data_size, int* width, int* height, int* actual_comps, int req_comps, int format, uint32_t flags = 0)"
  },
  {
    "label": "decompress_jpeg_image_from_file()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "decompress_jpeg_image_from_file(const char* pSrc_filename, int* width, int* height, int* actual_comps, int req_comps, uint32_t flags = 0)"
  },
  {
    "label": "jpeg_decoder_stream()",
    "kind": "Method",
    "detail": "Function (enum jpgd_status { JPGD_SUCCESS = 0,JPGD_FAILED = - 1,JPGD_DONE = 1,JPGD_BAD_DHT_COUNTS = - 2 5 6,JPGD_BAD_DHT_INDEX,JPGD_BAD_DHT_MARKER,JPGD_BAD_DQT_MARKER,JPGD_BAD_DQT_TABLE,JPGD_BAD_PRECISION,JPGD_BAD_HEIGHT,JPGD_BAD_WIDTH,JPGD_TOO_MANY_COMPONENTS,JPGD_BAD_SOF_LENGTH,JPGD_BAD_VARIABLE_MARKER,JPGD_BAD_DRI_LENGTH,JPGD_BAD_SOS_LENGTH,JPGD_BAD_SOS_COMP_ID,JPGD_W_EXTRA_BYTES_BEFORE_MARKER,JPGD_NO_ARITHMITIC_SUPPORT,JPGD_UNEXPECTED_MARKER,JPGD_NOT_JPEG,JPGD_UNSUPPORTED_MARKER,JPGD_BAD_DQT_LENGTH,JPGD_TOO_MANY_BLOCKS,JPGD_UNDEFINED_QUANT_TABLE,JPGD_UNDEFINED_HUFF_TABLE,JPGD_NOT_SINGLE_SCAN,JPGD_UNSUPPORTED_COLORSPACE,JPGD_UNSUPPORTED_SAMP_FACTORS,JPGD_DECODE_ERROR,JPGD_BAD_RESTART_MARKER,JPGD_BAD_SOS_SPECTRAL,JPGD_BAD_SOS_SUCCESSIVE,JPGD_STREAM_READ,JPGD_NOTENOUGHMEM,JPGD_TOO_MANY_SCANS } ; class jpeg_decoder_stream { public :)",
    "insertText": "jpeg_decoder_stream()"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "read(uint8* pBuf, int max_bytes_to_read, bool* pEOF_flag)"
  },
  {
    "label": "jpeg_decoder_file_stream()",
    "kind": "Method",
    "detail": "Function (} ; class jpeg_decoder_file_stream : public jpeg_decoder_stream {)",
    "insertText": "jpeg_decoder_file_stream(const jpeg_decoder_file_stream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (jpeg_decoder_file_stream&)",
    "insertText": "operator(const jpeg_decoder_file_stream&)"
  },
  {
    "label": "jpeg_decoder_file_stream()",
    "kind": "Method",
    "detail": "Function (FILE* m_pFile ; bool m_eof_flag,m_error_flag ; public :)",
    "insertText": "jpeg_decoder_file_stream()"
  },
  {
    "label": "open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "open(const char* Pfilename)"
  },
  {
    "label": "close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "close()"
  },
  {
    "label": "jpeg_decoder_mem_stream()",
    "kind": "Method",
    "detail": "Function (} ; class jpeg_decoder_mem_stream : public jpeg_decoder_stream { const uint8* m_pSrc_data ; uint m_ofs,m_size ; public :)",
    "insertText": "jpeg_decoder_mem_stream() : m_pSrc_data(NULL), m_ofs(0), m_size(0)"
  },
  {
    "label": "jpeg_decoder_mem_stream()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "jpeg_decoder_mem_stream(const uint8* pSrc_data, uint size) : m_pSrc_data(pSrc_data), m_ofs(0), m_size(size)"
  },
  {
    "label": "jpeg_decoder_mem_stream()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "jpeg_decoder_mem_stream()"
  },
  {
    "label": "open()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "open(const uint8* pSrc_data, uint size)"
  },
  {
    "label": "decompress_jpeg_image_from_stream()",
    "kind": "Method",
    "detail": "Function (} ; unsigned char*)",
    "insertText": "decompress_jpeg_image_from_stream(jpeg_decoder_stream* pStream, int* width, int* height, int* actual_comps, int req_comps, uint32_t flags = 0)"
  },
  {
    "label": "jpeg_decoder()",
    "kind": "Method",
    "detail": "Function (enum { JPGD_IN_BUF_SIZE = 8 1 9 2,JPGD_MAX_BLOCKS_PER_MCU = 1 0,JPGD_MAX_HUFF_TABLES = 8,JPGD_MAX_QUANT_TABLES = 4,JPGD_MAX_COMPONENTS = 4,JPGD_MAX_COMPS_IN_SCAN = 4,JPGD_MAX_BLOCKS_PER_ROW = 1 6 3 8 4,JPGD_MAX_HEIGHT = 3 2 7 6 8,JPGD_MAX_WIDTH = 3 2 7 6 8 } ; typedef int16 jpgd_quant_t ; typedef int16 jpgd_block_coeff_t ; class jpeg_decoder { public : enum { cFlagBoxChromaFiltering = 1,cFlagDisableSIMD = 2 } ;)",
    "insertText": "jpeg_decoder(jpeg_decoder_stream* pStream, uint32_t flags = 0)"
  },
  {
    "label": "jpeg_decoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "jpeg_decoder()"
  },
  {
    "label": "begin_decoding()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "begin_decoding()"
  },
  {
    "label": "decode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "decode(const void** pScan_line, uint* pScan_line_len)"
  },
  {
    "label": "get_error_code()",
    "kind": "Method",
    "detail": "Function (jpgd_status)",
    "insertText": "get_error_code()"
  },
  {
    "label": "get_total_bytes_read()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "get_total_bytes_read()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (jpeg_decoder&)",
    "insertText": "operator(const jpeg_decoder&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*pDecode_block_func)(jpeg_decoder*, int, int, int)"
  },
  {
    "label": "check_sample_buf_ofs()",
    "kind": "Method",
    "detail": "Function (struct huff_tables { bool ac_table ; uint look_up [ 2 5 6 ] ; uint look_up2 [ 2 5 6 ] ; uint8 code_size [ JPGD_HUFF_CODE_SIZE_MAX_LENGTH ] ; uint tree [ JPGD_HUFF_TREE_MAX_LENGTH ] ; } ; struct coeff_buf { uint8* pData ; int block_num_x,block_num_y ; int block_len_x,block_len_y ; int block_size ; } ; struct mem_block { mem_block* m_pNext ; size_t m_used_count ; size_t m_size ; char m_data [ 1 ] ; } ; jmp_buf m_jmp_state ; uint32_t m_flags ; mem_block* m_pMem_blocks ; int m_image_x_size ; int m_image_y_size ; jpeg_decoder_stream* m_pStream ; int m_progressive_flag ; uint8 m_huff_ac [ JPGD_MAX_HUFF_TABLES ] ; uint8* m_huff_num [ JPGD_MAX_HUFF_TABLES ] ; uint8* m_huff_val [ JPGD_MAX_HUFF_TABLES ] ; jpgd_quant_t* m_quant [ JPGD_MAX_QUANT_TABLES ] ; int m_scan_type ; int m_comps_in_frame ; int m_comp_h_samp [ JPGD_MAX_COMPONENTS ] ; int m_comp_v_samp [ JPGD_MAX_COMPONENTS ] ; int m_comp_quant [ JPGD_MAX_COMPONENTS ] ; int m_comp_ident [ JPGD_MAX_COMPONENTS ] ; int m_comp_h_blocks [ JPGD_MAX_COMPONENTS ] ; int m_comp_v_blocks [ JPGD_MAX_COMPONENTS ] ; int m_comps_in_scan ; int m_comp_list [ JPGD_MAX_COMPS_IN_SCAN ] ; int m_comp_dc_tab [ JPGD_MAX_COMPONENTS ] ; int m_comp_ac_tab [ JPGD_MAX_COMPONENTS ] ; int m_spectral_start ; int m_spectral_end ; int m_successive_low ; int m_successive_high ; int m_max_mcu_x_size ; int m_max_mcu_y_size ; int m_blocks_per_mcu ; int m_max_blocks_per_row ; int m_mcus_per_row,m_mcus_per_col ; int m_mcu_org [ JPGD_MAX_BLOCKS_PER_MCU ] ; int m_total_lines_left ; int m_mcu_lines_left ; int m_num_buffered_scanlines ; int m_real_dest_bytes_per_scan_line ; int m_dest_bytes_per_scan_line ; int m_dest_bytes_per_pixel ; huff_tables* m_pHuff_tabs [ JPGD_MAX_HUFF_TABLES ] ; coeff_buf* m_dc_coeffs [ JPGD_MAX_COMPONENTS ] ; coeff_buf* m_ac_coeffs [ JPGD_MAX_COMPONENTS ] ; int m_eob_run ; int m_block_y_mcu [ JPGD_MAX_COMPONENTS ] ; uint8* m_pIn_buf_ofs ; int m_in_buf_left ; int m_tem_flag ; uint8 m_in_buf_pad_start [ 6 4 ] ; uint8 m_in_buf [ JPGD_IN_BUF_SIZE + 1 2 8 ] ; uint8 m_in_buf_pad_end [ 6 4 ] ; int m_bits_left ; uint m_bit_buf ; int m_restart_interval ; int m_restarts_left ; int m_next_restart_num ; int m_max_mcus_per_row ; int m_max_blocks_per_mcu ; int m_max_mcus_per_col ; uint m_last_dc_val [ JPGD_MAX_COMPONENTS ] ; jpgd_block_coeff_t* m_pMCU_coefficients ; int m_mcu_block_max_zag [ JPGD_MAX_BLOCKS_PER_MCU ] ; uint8* m_pSample_buf ; uint8* m_pSample_buf_prev ; int m_crr [ 2 5 6 ] ; int m_cbb [ 2 5 6 ] ; int m_crg [ 2 5 6 ] ; int m_cbg [ 2 5 6 ] ; uint8* m_pScan_line_0 ; uint8* m_pScan_line_1 ; jpgd_status m_error_code ; int m_total_bytes_read ; bool m_ready_flag ; bool m_eof_flag ; bool m_sample_buf_prev_valid ; bool m_has_sse2 ; int)",
    "insertText": "check_sample_buf_ofs(int ofs)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ofs >= 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ofs < m_max_blocks_per_row * 64)"
  },
  {
    "label": "stop_decoding()",
    "kind": "Method",
    "detail": "Function (JPGD_NORETURN void)",
    "insertText": "stop_decoding(jpgd_status status)"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "alloc(size_t n, bool zero = false)"
  },
  {
    "label": "alloc_aligned()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "alloc_aligned(size_t nSize, uint32_t align = 16, bool zero = false)"
  },
  {
    "label": "word_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "word_clear(void* p, uint16 c, uint n)"
  },
  {
    "label": "prep_in_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prep_in_buffer()"
  },
  {
    "label": "read_dht_marker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read_dht_marker()"
  },
  {
    "label": "read_dqt_marker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read_dqt_marker()"
  },
  {
    "label": "read_sof_marker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read_sof_marker()"
  },
  {
    "label": "skip_variable_marker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "skip_variable_marker()"
  },
  {
    "label": "read_dri_marker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read_dri_marker()"
  },
  {
    "label": "read_sos_marker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "read_sos_marker()"
  },
  {
    "label": "next_marker()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "next_marker()"
  },
  {
    "label": "process_markers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "process_markers()"
  },
  {
    "label": "locate_soi_marker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "locate_soi_marker()"
  },
  {
    "label": "locate_sof_marker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "locate_sof_marker()"
  },
  {
    "label": "locate_sos_marker()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "locate_sos_marker()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(jpeg_decoder_stream* pStream, uint32_t flags)"
  },
  {
    "label": "create_look_ups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "create_look_ups()"
  },
  {
    "label": "fix_in_buffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fix_in_buffer()"
  },
  {
    "label": "transform_mcu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transform_mcu(int mcu_row)"
  },
  {
    "label": "coeff_buf_open()",
    "kind": "Method",
    "detail": "Function (coeff_buf*)",
    "insertText": "coeff_buf_open(int block_num_x, int block_num_y, int block_len_x, int block_len_y)"
  },
  {
    "label": "coeff_buf_getp()",
    "kind": "Method",
    "detail": "Function (jpgd_block_coeff_t*)",
    "insertText": "coeff_buf_getp(coeff_buf* cb, int block_x, int block_y)"
  },
  {
    "label": "load_next_row()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "load_next_row()"
  },
  {
    "label": "decode_next_row()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_next_row()"
  },
  {
    "label": "make_huff_table()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_huff_table(int index, huff_tables* pH)"
  },
  {
    "label": "check_quant_tables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "check_quant_tables()"
  },
  {
    "label": "check_huff_tables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "check_huff_tables()"
  },
  {
    "label": "calc_mcu_block_order()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "calc_mcu_block_order()"
  },
  {
    "label": "init_scan()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "init_scan()"
  },
  {
    "label": "init_frame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_frame()"
  },
  {
    "label": "process_restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "process_restart()"
  },
  {
    "label": "decode_scan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_scan(pDecode_block_func decode_block_func)"
  },
  {
    "label": "init_progressive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_progressive()"
  },
  {
    "label": "init_sequential()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init_sequential()"
  },
  {
    "label": "decode_start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_start()"
  },
  {
    "label": "decode_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_init(jpeg_decoder_stream* pStream, uint32_t flags)"
  },
  {
    "label": "H2V2Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "H2V2Convert()"
  },
  {
    "label": "H2V2ConvertFiltered()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "H2V2ConvertFiltered()"
  },
  {
    "label": "H2V1Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "H2V1Convert()"
  },
  {
    "label": "H2V1ConvertFiltered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "H2V1ConvertFiltered()"
  },
  {
    "label": "H1V2Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "H1V2Convert()"
  },
  {
    "label": "H1V2ConvertFiltered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "H1V2ConvertFiltered()"
  },
  {
    "label": "H1V1Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "H1V1Convert()"
  },
  {
    "label": "gray_convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gray_convert()"
  },
  {
    "label": "find_eoi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "find_eoi()"
  },
  {
    "label": "get_char()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "get_char()"
  },
  {
    "label": "get_char()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "get_char(bool* pPadding_flag)"
  },
  {
    "label": "stuff_char()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stuff_char(uint8 q)"
  },
  {
    "label": "get_octet()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "get_octet()"
  },
  {
    "label": "get_bits()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "get_bits(int num_bits)"
  },
  {
    "label": "get_bits_no_markers()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "get_bits_no_markers(int numbits)"
  },
  {
    "label": "huff_decode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "huff_decode(huff_tables* pH)"
  },
  {
    "label": "huff_decode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "huff_decode(huff_tables* pH, int& extrabits)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "clamp(int i)"
  },
  {
    "label": "decode_next_mcu_row()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "decode_next_mcu_row()"
  },
  {
    "label": "decode_block_dc_first()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_block_dc_first(jpeg_decoder* pD, int component_id, int block_x, int block_y)"
  },
  {
    "label": "decode_block_dc_refine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_block_dc_refine(jpeg_decoder* pD, int component_id, int block_x, int block_y)"
  },
  {
    "label": "decode_block_ac_first()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_block_ac_first(jpeg_decoder* pD, int component_id, int block_x, int block_y)"
  },
  {
    "label": "decode_block_ac_refine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decode_block_ac_refine(jpeg_decoder* pD, int component_id, int block_x, int block_y)"
  }
]