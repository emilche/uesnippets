[
  {
    "label": "MinElementBy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Impl / RangePointerType . h \" # include \" Templates / IdentityFunctor . h \" # include \" Templates / Invoke . h \" # include \" Templates / Less . h \" # include \" Templates / UnrealTemplate . h \" namespace AlgoImpl { template<RangeType,ProjectionType,PredicateType> TRangePointerType<RangeType>::Type)",
    "insertText": "MinElementBy(RangeType& Range, ProjectionType Proj, PredicateType Pred)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TRangePointerType<RangeType>::Type Result = nullptr ;)",
    "insertText": "for(auto& Elem : Range)"
  },
  {
    "label": "MinElement()",
    "kind": "Method",
    "detail": "Function (Result =& Elem ; } } return Result ; } } namespace Algo { template<RangeType> auto)",
    "insertText": "MinElement(RangeType& Range) -> decltype(AlgoImpl::MinElementBy(Range, FIdentityFunctor(), TLess<>()))"
  },
  {
    "label": "MinElement()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ComparatorType> auto)",
    "insertText": "MinElement(RangeType& Range, ComparatorType Comp) -> decltype(AlgoImpl::MinElementBy(Range, FIdentityFunctor(), MoveTemp(Comp)))"
  },
  {
    "label": "MinElementBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType> auto)",
    "insertText": "MinElementBy(RangeType& Range, ProjectionType Proj) -> decltype(AlgoImpl::MinElementBy(Range, MoveTemp(Proj), TLess<>()))"
  },
  {
    "label": "MinElementBy()",
    "kind": "Method",
    "detail": "Function (} template<RangeType,ProjectionType,ComparatorType> auto)",
    "insertText": "MinElementBy(RangeType& Range, ProjectionType Proj, ComparatorType Comp) -> decltype(AlgoImpl::MinElementBy(Range, MoveTemp(Proj), MoveTemp(Comp)))"
  }
]