[
  {
    "label": "FMovingWindowAverageFast",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovingWindowAverageFast"
  },
  {
    "label": "FMovingWindowAverageFast()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / StaticArray . h \" template<T,int32 ArraySize> class FMovingWindowAverageFast { public :)",
    "insertText": "FMovingWindowAverageFast() : TotalValues(static_cast<T>(0)) , AverageValue(static_cast<T>(0)) , RemoveNextIdx(0) , NumValuesUsed(0)"
  },
  {
    "label": "PushValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushValue(T Value)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T ValueRemoved = static_cast<)",
    "insertText": "T(0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T NumItemsPrev = static_cast<)",
    "insertText": "T(NumValuesUsed)"
  },
  {
    "label": "RemoveNextIdx()",
    "kind": "Method",
    "detail": "Function (ValueRemoved = ValuesArray [ RemoveNextIdx ] ; ValuesArray [ RemoveNextIdx ] = Value ;)",
    "insertText": "RemoveNextIdx(RemoveNextIdx + 1)"
  },
  {
    "label": "GetAverage()",
    "kind": "Method",
    "detail": "Function (TotalValues = TotalValues - ValueRemoved + Value ; AverageValue = TotalValues / MovingWindowItemsNumCur ; } T)",
    "insertText": "GetAverage()"
  }
]