[
  {
    "label": "Packet1cd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Packet1cd"
  },
  {
    "label": "Packet2cf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Packet2cf"
  },
  {
    "label": "packet_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "packet_traits"
  },
  {
    "label": "unpacket_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unpacket_traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COMPLEX32_ALTIVEC_H # define EIGEN_COMPLEX32_ALTIVEC_H namespace Eigen { namespace internal { # if !)",
    "insertText": "defined(__ARCH__) || (defined(__ARCH__) && __ARCH__ >= 12)"
  },
  {
    "label": "p2ul_CONJ_XOR1()",
    "kind": "Method",
    "detail": "Function (0 x00000000,0 x80000000,0 x00000000,0 x80000000 } ; # endif Packet2ul)",
    "insertText": "p2ul_CONJ_XOR1(Packet2ul) vec_sld((Packet4ui) p2d_ZERO_, (Packet4ui) p2l_ZERO, 8)"
  },
  {
    "label": "p2ul_CONJ_XOR2()",
    "kind": "Method",
    "detail": "Function (Packet2ul)",
    "insertText": "p2ul_CONJ_XOR2(Packet2ul) vec_sld((Packet4ui) p2l_ZERO, (Packet4ui) p2d_ZERO_, 8)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (struct Packet1cd { EIGEN_STRONG_INLINE)",
    "insertText": "Packet1cd()"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE)",
    "insertText": "Packet1cd(const Packet2d& a) : v(a)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (} Packet2d v ; } ; struct Packet2cf { EIGEN_STRONG_INLINE)",
    "insertText": "Packet2cf()"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE)",
    "insertText": "Packet2cf(const Packet4f& a) : v(a)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(__ARCH__) || (defined(__ARCH__) && __ARCH__ < 12)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (Packet4f v ; Packet1cd cd [ 2 ] ; } ; # else Packet4f v ; # endif } ; template<> struct packet_traits<std::complex<float>> : default_packet_traits { typedef Packet2cf type ; typedef Packet2cf half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 2,HasHalfPacket = 0,HasAdd = 1,HasSub = 1,HasMul = 1,HasDiv = 1,HasNegate = 1,HasAbs = 0,HasAbs2 = 0,HasMin = 0,HasMax = 0,HasBlend = 1,HasSetLinear = 0 } ; } ; template<> struct packet_traits<std::complex<double>> : default_packet_traits { typedef Packet1cd type ; typedef Packet1cd half ; enum { Vectorizable = 1,AlignedOnScalar = 1,size = 1,HasHalfPacket = 0,HasAdd = 1,HasSub = 1,HasMul = 1,HasDiv = 1,HasNegate = 1,HasAbs = 0,HasAbs2 = 0,HasMin = 0,HasMax = 0,HasSetLinear = 0 } ; } ; template<> struct unpacket_traits<Packet2cf> { typedef std::complex<float> type ; enum { size = 2,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; typedef Packet2cf half ; } ; template<> struct unpacket_traits<Packet1cd> { typedef std::complex<double> type ; enum { size = 1,alignment = Aligned16,vectorizable = true,masked_load_available = false,masked_store_available = false } ; typedef Packet1cd half ; } ; EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet2cf,2>& kernel)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (template<> EIGEN_STRONG_INLINE Packet1cd pload<)",
    "insertText": "Packet1cd(const std::complex<double>* from)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_LOAD return)",
    "insertText": "Packet1cd(pload<Packet2d>((const double*)from))"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_UNALIGNED_LOAD return)",
    "insertText": "Packet1cd(ploadu<Packet2d>((const double*)from))"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstore<std::complex<)",
    "insertText": "double(std::complex<double> * to, const Packet1cd& from)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_STORE)",
    "insertText": "pstore((double*)to, from.v)"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_UNALIGNED_STORE)",
    "insertText": "pstoreu((double*)to, from.v)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet1cd pset1<)",
    "insertText": "Packet1cd(const std::complex<double>& from)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC Packet1cd pgather<std::complex<double>,)",
    "insertText": "Packet1cd(const std::complex<double>* from, Index stride EIGEN_UNUSED)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC void pscatter<std::complex<double>,)",
    "insertText": "Packet1cd(std::complex<double>* to, const Packet1cd& from, Index stride EIGEN_UNUSED)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (pstore<std::complex<)",
    "insertText": "double(to, from)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet1cd padd<)",
    "insertText": "Packet1cd(const Packet1cd& a, const Packet1cd& b)"
  },
  {
    "label": "pnegate()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet1cd)",
    "insertText": "pnegate(const Packet1cd& a)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet1cd)",
    "insertText": "pconj(const Packet1cd& a)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (Packet2d a_re,a_im,v1,v2 ; a_re =)",
    "insertText": "vec_perm(a.v, a.v, p16uc_PSET64_HI)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (a_im =)",
    "insertText": "vec_perm(a.v, a.v, p16uc_PSET64_LO)"
  },
  {
    "label": "vec_madd()",
    "kind": "Method",
    "detail": "Function (v1 =)",
    "insertText": "vec_madd(a_re, b.v, p2d_ZERO)"
  },
  {
    "label": "vec_madd()",
    "kind": "Method",
    "detail": "Function (v2 =)",
    "insertText": "vec_madd(a_im, b.v, p2d_ZERO)"
  },
  {
    "label": "v2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v2(Packet2d) vec_sld((Packet4ui)v2, (Packet4ui)v2, 8)"
  },
  {
    "label": "v2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v2(Packet2d) vec_xor((Packet2d)v2, (Packet2d) p2ul_CONJ_XOR1)"
  },
  {
    "label": "pcmp_eq()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet1cd)",
    "insertText": "pcmp_eq(const Packet1cd& a, const Packet1cd& b)"
  },
  {
    "label": "vec_cmpeq()",
    "kind": "Method",
    "detail": "Function (Packet2d eq =)",
    "insertText": "vec_cmpeq(a.v, b.v)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (Packet2d tmp = { eq [ 1 ],eq [ 0 ] } ;)",
    "insertText": "return(Packet1cd)pand<Packet2d>(eq, tmp)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void prefetch<std::complex<)",
    "insertText": "double(const std::complex<double> * addr)"
  },
  {
    "label": "EIGEN_ZVECTOR_PREFETCH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ZVECTOR_PREFETCH(addr)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE std::complex<double> pfirst<)",
    "insertText": "Packet1cd(const Packet1cd& a)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (std::complex<double> EIGEN_ALIGN16 res ; pstore<std::complex<)",
    "insertText": "double(&res, a)"
  },
  {
    "label": "EIGEN_MAKE_CONJ_HELPER_CPLX_REAL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet1cd,Packet2d) template<> EIGEN_STRONG_INLINE Packet1cd pdiv<Packet1cd>(const Packet1cd& a, const Packet1cd& b)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet1cd res =)",
    "insertText": "pmul(a,pconj(b))"
  },
  {
    "label": "vec_madd()",
    "kind": "Method",
    "detail": "Function (Packet2d s =)",
    "insertText": "vec_madd(b.v, b.v, p2d_ZERO_)"
  },
  {
    "label": "pcplxflip()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Packet1cd)",
    "insertText": "pcplxflip(const Packet1cd& x)"
  },
  {
    "label": "ptranspose()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE void)",
    "insertText": "ptranspose(PacketBlock<Packet1cd,2>& kernel)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (Packet2d tmp =)",
    "insertText": "vec_perm(kernel.packet[0].v, kernel.packet[1].v, p16uc_TRANSPOSE64_HI)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 1 ] . v =)",
    "insertText": "vec_perm(kernel.packet[0].v, kernel.packet[1].v, p16uc_TRANSPOSE64_LO)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (kernel . packet [ 0 ] . v = tmp ; } template<> EIGEN_STRONG_INLINE Packet2cf pload<)",
    "insertText": "Packet2cf(const std::complex<float>* from)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_LOAD return)",
    "insertText": "Packet2cf(pload<Packet4f>((const float*)from))"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_UNALIGNED_LOAD return)",
    "insertText": "Packet2cf(ploadu<Packet4f>((const float*)from))"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void pstore<std::complex<)",
    "insertText": "float(std::complex<float> * to, const Packet2cf& from)"
  },
  {
    "label": "pstore()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_ALIGNED_STORE)",
    "insertText": "pstore((float*)to, from.v)"
  },
  {
    "label": "pstoreu()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEBUG_UNALIGNED_STORE)",
    "insertText": "pstoreu((float*)to, from.v)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE std::complex<float> pfirst<)",
    "insertText": "Packet2cf(const Packet2cf& a)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (std::complex<float> EIGEN_ALIGN16 res [ 2 ] ; pstore<std::complex<)",
    "insertText": "float(res, a)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (Packet2cf res ; res . cd [ 0 ] =)",
    "insertText": "Packet1cd(vec_ld2f((const float *)&from))"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (res . cd [ 1 ] = res . cd [ 0 ] ; return res ; } # else template<> EIGEN_STRONG_INLINE Packet2cf pset1<)",
    "insertText": "Packet2cf(const std::complex<float>& from)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Packet2cf res ;)",
    "insertText": "if((std::ptrdiff_t(&from) % 16) == 0) res.v = pload<Packet4f>((const float *)&from)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (res . v =)",
    "insertText": "vec_perm(res.v, res.v, p16uc_PSET64_HI)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (std::complex<float> EIGEN_ALIGN16 af [ 2 ] ; af [ 0 ] = from [ 0* stride ] ; af [ 1 ] = from [ 1* stride ] ; return pload<)",
    "insertText": "Packet2cf(af)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC void pscatter<std::complex<float>,)",
    "insertText": "Packet2cf(std::complex<float>* to, const Packet2cf& from, Index stride)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (std::complex<float> EIGEN_ALIGN16 af [ 2 ] ; pstore<std::complex<)",
    "insertText": "float((std::complex<float> *) af, from)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (to [ 0* stride ] = af [ 0 ] ; to [ 1* stride ] = af [ 1 ] ; } template<> EIGEN_STRONG_INLINE Packet2cf padd<)",
    "insertText": "Packet2cf(const Packet2cf& a, const Packet2cf& b)"
  },
  {
    "label": "pnegate()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2cf)",
    "insertText": "pnegate(const Packet2cf& a)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE void prefetch<std::complex<)",
    "insertText": "float(const std::complex<float> * addr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(__ARCH__) || (defined(__ARCH__) && __ARCH__ < 12) template<> EIGEN_STRONG_INLINE Packet2cf pcmp_eq(const Packet2cf& a, const Packet2cf& b)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (Packet4f eq = pcmp_eq<)",
    "insertText": "Packet4f(a.v, b.v)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2cf res ; Packet2d tmp1 = { eq . v4f [ 0 ] [ 1 ],eq . v4f [ 0 ] [ 0 ] } ; Packet2d tmp2 = { eq . v4f [ 1 ] [ 1 ],eq . v4f [ 1 ] [ 0 ] } ; res . v . v4f [ 0 ] = pand<)",
    "insertText": "Packet2d(eq.v4f[0], tmp1)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (res . v . v4f [ 1 ] = pand<)",
    "insertText": "Packet2d(eq.v4f[1], tmp2)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (Packet2cf res ; res . v . v4f [ 0 ] =)",
    "insertText": "pconj(Packet1cd(reinterpret_cast<Packet2d>(a.v.v4f[0])))"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (res . v . v4f [ 1 ] =)",
    "insertText": "pconj(Packet1cd(reinterpret_cast<Packet2d>(a.v.v4f[1])))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet2cf res ; res . v . v4f [ 0 ] =)",
    "insertText": "pmul(Packet1cd(reinterpret_cast<Packet2d>(a.v.v4f[0])), Packet1cd(reinterpret_cast<Packet2d>(b.v.v4f[0])))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (res . v . v4f [ 1 ] =)",
    "insertText": "pmul(Packet1cd(reinterpret_cast<Packet2d>(a.v.v4f[1])), Packet1cd(reinterpret_cast<Packet2d>(b.v.v4f[1])))"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (std::complex<float> res ; Packet1cd b = padd<)",
    "insertText": "Packet1cd(a.cd[0], a.cd[1])"
  },
  {
    "label": "vec_st2f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vec_st2f(b.v, (float*)&res)"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (Packet2cf res ; res . cd [ 0 ] = pdiv<)",
    "insertText": "Packet1cd(a.cd[0], b.cd[0])"
  },
  {
    "label": "Packet1cd()",
    "kind": "Method",
    "detail": "Function (res . cd [ 1 ] = pdiv<)",
    "insertText": "Packet1cd(a.cd[1], b.cd[1])"
  },
  {
    "label": "pcplxflip()",
    "kind": "Method",
    "detail": "Function (Packet2cf res ; res . cd [ 0 ] =)",
    "insertText": "pcplxflip(x.cd[0])"
  },
  {
    "label": "pcplxflip()",
    "kind": "Method",
    "detail": "Function (res . cd [ 1 ] =)",
    "insertText": "pcplxflip(x.cd[1])"
  },
  {
    "label": "pblend()",
    "kind": "Method",
    "detail": "Function (Packet1cd tmp = kernel . packet [ 0 ] . cd [ 1 ] ; kernel . packet [ 0 ] . cd [ 1 ] = kernel . packet [ 1 ] . cd [ 0 ] ; kernel . packet [ 1 ] . cd [ 0 ] = tmp ; } template<> EIGEN_STRONG_INLINE Packet2cf)",
    "insertText": "pblend(const Selector<2>& ifPacket, const Packet2cf& thenPacket, const Packet2cf& elsePacket)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (Packet2cf result ; const Selector<4> ifPacket4 = { ifPacket . select [ 0 ],ifPacket . select [ 0 ],ifPacket . select [ 1 ],ifPacket . select [ 1 ] } ; result . v = pblend<)",
    "insertText": "Packet4f(ifPacket4, thenPacket.v, elsePacket.v)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (Packet4f tmp = { eq [ 1 ],eq [ 0 ],eq [ 3 ],eq [ 2 ] } ;)",
    "insertText": "return(Packet2cf)pand<Packet4f>(eq, tmp)"
  },
  {
    "label": "pconj()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2cf)",
    "insertText": "pconj(const Packet2cf& a)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (Packet4f a_re,a_im,prod,prod_im ; a_re =)",
    "insertText": "vec_perm(a.v, a.v, p16uc_PSET32_WODD)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (a_im =)",
    "insertText": "vec_perm(a.v, a.v, p16uc_PSET32_WEVEN)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (prod_im = a_im* b . v ; prod_im = pxor<)",
    "insertText": "Packet4f(prod_im, reinterpret_cast<Packet4f>(p4ui_CONJ_XOR))"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (prod_im =)",
    "insertText": "vec_perm(prod_im, prod_im, p16uc_COMPLEX32_REV)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (prod = pmadd<)",
    "insertText": "Packet4f(a_re, b.v, prod_im)"
  },
  {
    "label": "preverse()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2cf)",
    "insertText": "preverse(const Packet2cf& a)"
  },
  {
    "label": "vec_perm()",
    "kind": "Method",
    "detail": "Function (Packet4f rev_a ; rev_a =)",
    "insertText": "vec_perm(a.v, a.v, p16uc_COMPLEX32_REV2)"
  },
  {
    "label": "vec_sld()",
    "kind": "Method",
    "detail": "Function (Packet4f b ; b =)",
    "insertText": "vec_sld(a.v, a.v, 8)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (b = padd<)",
    "insertText": "Packet4f(a.v, b)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (prod = pmul<)",
    "insertText": "Packet2cf(a, Packet2cf(b))"
  },
  {
    "label": "EIGEN_MAKE_CONJ_HELPER_CPLX_REAL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(Packet2cf,Packet4f) template<> EIGEN_STRONG_INLINE Packet2cf pdiv<Packet2cf>(const Packet2cf& a, const Packet2cf& b)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet2cf res =)",
    "insertText": "pmul(a, pconj(b))"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (Packet4f s = pmul<)",
    "insertText": "Packet4f(b.v, b.v)"
  },
  {
    "label": "Packet2cf()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_STRONG_INLINE Packet2cf pcplxflip<)",
    "insertText": "Packet2cf(const Packet2cf& x)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (Packet2cf result ; result . v = reinterpret_cast<)",
    "insertText": "Packet4f(pblend<Packet2d>(ifPacket, reinterpret_cast<Packet2d>(thenPacket.v), reinterpret_cast<Packet2d>(elsePacket.v)))"
  }
]