[
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "DbgDeclareInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DbgDeclareInst"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "MDOperand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDOperand"
  },
  {
    "label": "Metadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Metadata"
  },
  {
    "label": "ConstantAsMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantAsMetadata"
  },
  {
    "label": "MDTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDTuple"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "NamedMDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NamedMDNode"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "ShaderModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderModel"
  },
  {
    "label": "DxilSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignature"
  },
  {
    "label": "DxilEntrySignature",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilEntrySignature"
  },
  {
    "label": "DxilSignatureElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSignatureElement"
  },
  {
    "label": "DxilModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilModule"
  },
  {
    "label": "DxilResourceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilResourceBase"
  },
  {
    "label": "DxilCBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilCBuffer"
  },
  {
    "label": "DxilResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilResource"
  },
  {
    "label": "DxilSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSampler"
  },
  {
    "label": "DxilTypeSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilTypeSystem"
  },
  {
    "label": "DxilStructAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilStructAnnotation"
  },
  {
    "label": "DxilFieldAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilFieldAnnotation"
  },
  {
    "label": "DxilPayloadAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilPayloadAnnotation"
  },
  {
    "label": "DxilPayloadFieldAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilPayloadFieldAnnotation"
  },
  {
    "label": "DxilTemplateArgAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilTemplateArgAnnotation"
  },
  {
    "label": "DxilFunctionAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilFunctionAnnotation"
  },
  {
    "label": "DxilParameterAnnotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilParameterAnnotation"
  },
  {
    "label": "RootSignatureHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootSignatureHandle"
  },
  {
    "label": "DxilFunctionProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilFunctionProps"
  },
  {
    "label": "DxilSubobjects",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSubobjects"
  },
  {
    "label": "DxilSubobject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilSubobject"
  },
  {
    "label": "DxilCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilCounters"
  },
  {
    "label": "DxilDIArrayDim",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilDIArrayDim"
  },
  {
    "label": "DxilMDHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilMDHelper"
  },
  {
    "label": "ExtraPropertyHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExtraPropertyHelper"
  },
  {
    "label": "DxilExtraPropertyHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilExtraPropertyHelper"
  },
  {
    "label": "ExtraPropertyHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilConstants . h \" # include \" dxc / DXIL / DxilFunctionProps . h \" # include \" llvm / ADT / ArrayRef . h \" # include<memory> # include<string> # include<vector> namespace llvm { class LLVMContext ; class Module ; class Function ; class Instruction ; class DbgDeclareInst ; class Value ; class MDOperand ; class Metadata ; class ConstantAsMetadata ; class MDTuple ; class MDNode ; class NamedMDNode ; class GlobalVariable ; class StringRef ; class Type ; } namespace hlsl { class ShaderModel ; class DxilSignature ; struct DxilEntrySignature ; class DxilSignatureElement ; class DxilModule ; class DxilResourceBase ; class DxilCBuffer ; class DxilResource ; class DxilSampler ; class DxilTypeSystem ; class DxilStructAnnotation ; class DxilFieldAnnotation ; class DxilPayloadAnnotation ; class DxilPayloadFieldAnnotation ; class DxilTemplateArgAnnotation ; class DxilFunctionAnnotation ; class DxilParameterAnnotation ; class RootSignatureHandle ; struct DxilFunctionProps ; class DxilSubobjects ; class DxilSubobject ; struct DxilCounters ; struct DxilDIArrayDim { unsigned StrideInBits ; unsigned NumElements ; } ; class DxilMDHelper { public : const char kDxilVersionMDName [ ] ; const unsigned kDxilVersionNumFields = 2 ; const unsigned kDxilVersionMajorIdx = 0 ; const unsigned kDxilVersionMinorIdx = 1 ; const char kDxilShaderModelMDName [ ] ; const unsigned kDxilShaderModelNumFields = 3 ; const unsigned kDxilShaderModelTypeIdx = 0 ; const unsigned kDxilShaderModelMajorIdx = 1 ; const unsigned kDxilShaderModelMinorIdx = 2 ; const char kDxilIntermediateOptionsMDName [ ] ; const unsigned kDxilIntermediateOptionsFlags = 0 ; const char kDxilCountersMDName [ ] ; const char kDxilEntryPointsMDName [ ] ; const char kDxilRootSignatureMDName [ ] ; const char kDxilViewIdStateMDName [ ] ; const char kDxilSubobjectsMDName [ ] ; const char kDxilSourceContentsMDName [ ] ; const char kDxilSourceDefinesMDName [ ] ; const char kDxilSourceMainFileNameMDName [ ] ; const char kDxilSourceArgsMDName [ ] ; const char kDxilDxcBindingTableMDName [ ] ; const unsigned kDxilDxcBindingTableResourceName = 0 ; const unsigned kDxilDxcBindingTableResourceClass = 1 ; const unsigned kDxilDxcBindingTableResourceIndex = 2 ; const unsigned kDxilDxcBindingTableResourceSpace = 3 ; const char kDxilSourceContentsOldMDName [ ] ; const char kDxilSourceDefinesOldMDName [ ] ; const char kDxilSourceMainFileNameOldMDName [ ] ; const char kDxilSourceArgsOldMDName [ ] ; const unsigned kDxilEntryPointNumFields = 5 ; const unsigned kDxilEntryPointFunction = 0 ; const unsigned kDxilEntryPointName = 1 ; const unsigned kDxilEntryPointSignatures = 2 ; const unsigned kDxilEntryPointResources = 3 ; const unsigned kDxilEntryPointProperties = 4 ; const unsigned kDxilNumSignatureFields = 3 ; const unsigned kDxilInputSignature = 0 ; const unsigned kDxilOutputSignature = 1 ; const unsigned kDxilPatchConstantSignature = 2 ; const unsigned kDxilSignatureElementNumFields = 1 1 ; const unsigned kDxilSignatureElementID = 0 ; const unsigned kDxilSignatureElementName = 1 ; const unsigned kDxilSignatureElementType = 2 ; const unsigned kDxilSignatureElementSystemValue = 3 ; const unsigned kDxilSignatureElementIndexVector = 4 ; const unsigned kDxilSignatureElementInterpMode = 5 ; const unsigned kDxilSignatureElementRows = 6 ; const unsigned kDxilSignatureElementCols = 7 ; const unsigned kDxilSignatureElementStartRow = 8 ; const unsigned kDxilSignatureElementStartCol = 9 ; const unsigned kDxilSignatureElementNameValueList = 1 0 ; const unsigned kDxilSignatureElementOutputStreamTag = 0 ; const unsigned kHLSignatureElementGlobalSymbolTag = 1 ; const unsigned kDxilSignatureElementDynIdxCompMaskTag = 2 ; const unsigned kDxilSignatureElementUsageCompMaskTag = 3 ; const char kDxilResourcesMDName [ ] ; const unsigned kDxilNumResourceFields = 4 ; const unsigned kDxilResourceSRVs = 0 ; const unsigned kDxilResourceUAVs = 1 ; const unsigned kDxilResourceCBuffers = 2 ; const unsigned kDxilResourceSamplers = 3 ; const unsigned kDxilResourceBaseNumFields = 6 ; const unsigned kDxilResourceBaseID = 0 ; const unsigned kDxilResourceBaseVariable = 1 ; const unsigned kDxilResourceBaseName = 2 ; const unsigned kDxilResourceBaseSpaceID = 3 ; const unsigned kDxilResourceBaseLowerBound = 4 ; const unsigned kDxilResourceBaseRangeSize = 5 ; const unsigned kDxilSRVNumFields = 9 ; const unsigned kDxilSRVShape = 6 ; const unsigned kDxilSRVSampleCount = 7 ; const unsigned kDxilSRVNameValueList = 8 ; const unsigned kDxilUAVNumFields = 1 1 ; const unsigned kDxilUAVShape = 6 ; const unsigned kDxilUAVGloballyCoherent = 7 ; const unsigned kDxilUAVCounter = 8 ; const unsigned kDxilUAVRasterizerOrderedView = 9 ; const unsigned kDxilUAVNameValueList = 1 0 ; const unsigned kDxilCBufferNumFields = 8 ; const unsigned kDxilCBufferSizeInBytes = 6 ; const unsigned kDxilCBufferNameValueList = 7 ; const unsigned kHLCBufferIsTBufferTag = 0 ; const unsigned kDxilSamplerNumFields = 8 ; const unsigned kDxilSamplerType = 6 ; const unsigned kDxilSamplerNameValueList = 7 ; const unsigned kDxilTypedBufferElementTypeTag = 0 ; const unsigned kDxilStructuredBufferElementStrideTag = 1 ; const unsigned kDxilSamplerFeedbackKindTag = 2 ; const unsigned kDxilAtomic64UseTag = 3 ; const char kDxilTypeSystemMDName [ ] ; const char kDxilTypeSystemHelperVariablePrefix [ ] ; const unsigned kDxilTypeSystemStructTag = 0 ; const unsigned kDxilTypeSystemFunctionTag = 1 ; const unsigned kDxilFieldAnnotationSNormTag = 0 ; const unsigned kDxilFieldAnnotationUNormTag = 1 ; const unsigned kDxilFieldAnnotationMatrixTag = 2 ; const unsigned kDxilFieldAnnotationCBufferOffsetTag = 3 ; const unsigned kDxilFieldAnnotationSemanticStringTag = 4 ; const unsigned kDxilFieldAnnotationInterpolationModeTag = 5 ; const unsigned kDxilFieldAnnotationFieldNameTag = 6 ; const unsigned kDxilFieldAnnotationCompTypeTag = 7 ; const unsigned kDxilFieldAnnotationPreciseTag = 8 ; const unsigned kDxilFieldAnnotationCBUsedTag = 9 ; const unsigned kDxilFieldAnnotationResPropTag = 1 0 ; const unsigned kDxilFieldAnnotationBitFieldsTag = 1 1 ; const unsigned kDxilFieldAnnotationBitFieldWidthTag = 1 2 ; const unsigned kDxilFieldAnnotationVectorSizeTag = 1 3 ; const unsigned kDxilPayloadAnnotationStructTag = 0 ; const unsigned kDxilPayloadFieldAnnotationAccessTag = 0 ; const unsigned kDxilTemplateArgumentsTag = 0 ; const unsigned kDxilTemplateArgTypeTag = 0 ; const unsigned kDxilTemplateArgIntegralTag = 1 ; const unsigned kDxilTemplateArgValue = 1 ; const char kDxilControlFlowHintMDName [ ] ; const char kDxilPreciseAttributeMDName [ ] ; const char kDxilNonUniformAttributeMDName [ ] ; const char kDxilVariableDebugLayoutMDName [ ] ; const char kDxilTempAllocaMDName [ ] ; const char kDxilValidatorVersionMDName [ ] ; const char kDxilDxrPayloadAnnotationsMDName [ ] ; const unsigned kDxilShaderFlagsTag = 0 ; const unsigned kDxilGSStateTag = 1 ; const unsigned kDxilDSStateTag = 2 ; const unsigned kDxilHSStateTag = 3 ; const unsigned kDxilNumThreadsTag = 4 ; const unsigned kDxilAutoBindingSpaceTag = 5 ; const unsigned kDxilRayPayloadSizeTag = 6 ; const unsigned kDxilRayAttribSizeTag = 7 ; const unsigned kDxilShaderKindTag = 8 ; const unsigned kDxilMSStateTag = 9 ; const unsigned kDxilASStateTag = 1 0 ; const unsigned kDxilWaveSizeTag = 1 1 ; const unsigned kDxilEntryRootSigTag = 1 2 ; const unsigned kDxilNodeLaunchTypeTag = 1 3 ; const unsigned kDxilNodeIsProgramEntryTag = 1 4 ; const unsigned kDxilNodeIdTag = 1 5 ; const unsigned kDxilNodeLocalRootArgumentsTableIndexTag = 1 6 ; const unsigned kDxilShareInputOfTag = 1 7 ; const unsigned kDxilNodeDispatchGridTag = 1 8 ; const unsigned kDxilNodeMaxRecursionDepthTag = 1 9 ; const unsigned kDxilNodeInputsTag = 2 0 ; const unsigned kDxilNodeOutputsTag = 2 1 ; const unsigned kDxilNodeMaxDispatchGridTag = 2 2 ; const unsigned kDxilRangedWaveSizeTag = 2 3 ; const unsigned kDxilNodeOutputIDTag = 0 ; const unsigned kDxilNodeIOFlagsTag = 1 ; const unsigned kDxilNodeRecordTypeTag = 2 ; const unsigned kDxilNodeMaxRecordsTag = 3 ; const unsigned kDxilNodeMaxRecordsSharedWithTag = 4 ; const unsigned kDxilNodeOutputArraySizeTag = 5 ; const unsigned kDxilNodeAllowSparseNodesTag = 6 ; const unsigned kDxilNodeRecordSizeTag = 0 ; const unsigned kDxilNodeSVDispatchGridTag = 1 ; const unsigned kDxilNodeRecordAlignmentTag = 2 ; const unsigned kDxilGSStateNumFields = 5 ; const unsigned kDxilGSStateInputPrimitive = 0 ; const unsigned kDxilGSStateMaxVertexCount = 1 ; const unsigned kDxilGSStateActiveStreamMask = 2 ; const unsigned kDxilGSStateOutputStreamTopology = 3 ; const unsigned kDxilGSStateGSInstanceCount = 4 ; const unsigned kDxilDSStateNumFields = 2 ; const unsigned kDxilDSStateTessellatorDomain = 0 ; const unsigned kDxilDSStateInputControlPointCount = 1 ; const unsigned kDxilHSStateNumFields = 7 ; const unsigned kDxilHSStatePatchConstantFunction = 0 ; const unsigned kDxilHSStateInputControlPointCount = 1 ; const unsigned kDxilHSStateOutputControlPointCount = 2 ; const unsigned kDxilHSStateTessellatorDomain = 3 ; const unsigned kDxilHSStateTessellatorPartitioning = 4 ; const unsigned kDxilHSStateTessellatorOutputPrimitive = 5 ; const unsigned kDxilHSStateMaxTessellationFactor = 6 ; const unsigned kDxilMSStateNumFields = 5 ; const unsigned kDxilMSStateNumThreads = 0 ; const unsigned kDxilMSStateMaxVertexCount = 1 ; const unsigned kDxilMSStateMaxPrimitiveCount = 2 ; const unsigned kDxilMSStateOutputTopology = 3 ; const unsigned kDxilMSStatePayloadSizeInBytes = 4 ; const unsigned kDxilASStateNumFields = 2 ; const unsigned kDxilASStateNumThreads = 0 ; const unsigned kDxilASStatePayloadSizeInBytes = 1 ; public : class ExtraPropertyHelper { public :)",
    "insertText": "ExtraPropertyHelper(llvm::Module *pModule)"
  },
  {
    "label": "ExtraPropertyHelper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ExtraPropertyHelper()"
  },
  {
    "label": "EmitSRVProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmitSRVProperties(const DxilResource &SRV, std::vector<llvm::Metadata *> &MDVals)"
  },
  {
    "label": "LoadSRVProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSRVProperties(const llvm::MDOperand &MDO, DxilResource &SRV)"
  },
  {
    "label": "EmitUAVProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitUAVProperties(const DxilResource &UAV, std::vector<llvm::Metadata *> &MDVals)"
  },
  {
    "label": "LoadUAVProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadUAVProperties(const llvm::MDOperand &MDO, DxilResource &UAV)"
  },
  {
    "label": "EmitCBufferProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitCBufferProperties(const DxilCBuffer &CB, std::vector<llvm::Metadata *> &MDVals)"
  },
  {
    "label": "LoadCBufferProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCBufferProperties(const llvm::MDOperand &MDO, DxilCBuffer &CB)"
  },
  {
    "label": "EmitSamplerProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSamplerProperties(const DxilSampler &S, std::vector<llvm::Metadata *> &MDVals)"
  },
  {
    "label": "LoadSamplerProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSamplerProperties(const llvm::MDOperand &MDO, DxilSampler &S)"
  },
  {
    "label": "EmitSignatureElementProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSignatureElementProperties(const DxilSignatureElement &SE, std::vector<llvm::Metadata *> &MDVals)"
  },
  {
    "label": "LoadSignatureElementProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSignatureElementProperties(const llvm::MDOperand &MDO, DxilSignatureElement &SE)"
  },
  {
    "label": "DxilMDHelper()",
    "kind": "Method",
    "detail": "Function (protected : llvm::LLVMContext& m_Ctx ; llvm::Module* m_pModule ; public : unsigned m_ValMajor,m_ValMinor ; unsigned m_MinValMajor,m_MinValMinor ; bool m_bExtraMetadata ; } ; public :)",
    "insertText": "DxilMDHelper(llvm::Module *pModule, std::unique_ptr<ExtraPropertyHelper> EPH)"
  },
  {
    "label": "DxilMDHelper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DxilMDHelper()"
  },
  {
    "label": "SetShaderModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderModel(const ShaderModel *pSM)"
  },
  {
    "label": "GetShaderModel()",
    "kind": "Method",
    "detail": "Function (const ShaderModel*)",
    "insertText": "GetShaderModel()"
  },
  {
    "label": "EmitDxilVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilVersion(unsigned Major, unsigned Minor)"
  },
  {
    "label": "LoadDxilVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilVersion(unsigned &Major, unsigned &Minor)"
  },
  {
    "label": "EmitValidatorVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitValidatorVersion(unsigned Major, unsigned Minor)"
  },
  {
    "label": "LoadValidatorVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadValidatorVersion(unsigned &Major, unsigned &Minor)"
  },
  {
    "label": "EmitDxilShaderModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilShaderModel(const ShaderModel *pSM)"
  },
  {
    "label": "LoadDxilShaderModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilShaderModel(const ShaderModel *&pSM)"
  },
  {
    "label": "EmitDxilIntermediateOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilIntermediateOptions(uint32_t flags)"
  },
  {
    "label": "LoadDxilIntermediateOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilIntermediateOptions(uint32_t &flags)"
  },
  {
    "label": "EmitDxilEntryPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilEntryPoints(std::vector<llvm::MDNode *> &MDEntries)"
  },
  {
    "label": "UpdateDxilEntryPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDxilEntryPoints(std::vector<llvm::MDNode *> &MDEntries)"
  },
  {
    "label": "GetDxilEntryPoints()",
    "kind": "Method",
    "detail": "Function (const llvm::NamedMDNode*)",
    "insertText": "GetDxilEntryPoints()"
  },
  {
    "label": "EmitDxilEntryPointTuple()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilEntryPointTuple(llvm::Function *pFunc, const std::string &Name, llvm::MDTuple *pSignatures, llvm::MDTuple *pResources, llvm::MDTuple *pProperties)"
  },
  {
    "label": "GetDxilEntryPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDxilEntryPoint(const llvm::MDNode *MDO, llvm::Function *&pFunc, std::string &Name, const llvm::MDOperand *&pSignatures, const llvm::MDOperand *&pResources, const llvm::MDOperand *&pProperties)"
  },
  {
    "label": "EmitDxilSignatures()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilSignatures(const DxilEntrySignature &EntrySig)"
  },
  {
    "label": "LoadDxilSignatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilSignatures(const llvm::MDOperand &MDO, DxilEntrySignature &EntrySig)"
  },
  {
    "label": "EmitSignatureMetadata()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitSignatureMetadata(const DxilSignature &Sig)"
  },
  {
    "label": "EmitRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitRootSignature(std::vector<uint8_t> &SerializedRootSignature)"
  },
  {
    "label": "LoadSignatureMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSignatureMetadata(const llvm::MDOperand &MDO, DxilSignature &Sig)"
  },
  {
    "label": "EmitSignatureElement()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitSignatureElement(const DxilSignatureElement &SE)"
  },
  {
    "label": "LoadSignatureElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSignatureElement(const llvm::MDOperand &MDO, DxilSignatureElement &SE)"
  },
  {
    "label": "LoadRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadRootSignature(std::vector<uint8_t> &SerializedRootSignature)"
  },
  {
    "label": "EmitDxilResourceTuple()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilResourceTuple(llvm::MDTuple *pSRVs, llvm::MDTuple *pUAVs, llvm::MDTuple *pCBuffers, llvm::MDTuple *pSamplers)"
  },
  {
    "label": "EmitDxilResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilResources(llvm::MDTuple *pDxilResourceTuple)"
  },
  {
    "label": "UpdateDxilResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDxilResources(llvm::MDTuple *pDxilResourceTuple)"
  },
  {
    "label": "GetDxilResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDxilResources(const llvm::MDOperand &MDO, const llvm::MDTuple *&pSRVs, const llvm::MDTuple *&pUAVs, const llvm::MDTuple *&pCBuffers, const llvm::MDTuple *&pSamplers)"
  },
  {
    "label": "EmitDxilResourceBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilResourceBase(const DxilResourceBase &R, llvm::Metadata *ppMDVals[])"
  },
  {
    "label": "LoadDxilResourceBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilResourceBase(const llvm::MDOperand &MDO, DxilResourceBase &R)"
  },
  {
    "label": "EmitDxilSRV()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilSRV(const DxilResource &SRV)"
  },
  {
    "label": "LoadDxilSRV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilSRV(const llvm::MDOperand &MDO, DxilResource &SRV)"
  },
  {
    "label": "EmitDxilUAV()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilUAV(const DxilResource &UAV)"
  },
  {
    "label": "LoadDxilUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilUAV(const llvm::MDOperand &MDO, DxilResource &UAV)"
  },
  {
    "label": "EmitDxilCBuffer()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilCBuffer(const DxilCBuffer &CB)"
  },
  {
    "label": "LoadDxilCBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilCBuffer(const llvm::MDOperand &MDO, DxilCBuffer &CB)"
  },
  {
    "label": "EmitDxilSampler()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilSampler(const DxilSampler &S)"
  },
  {
    "label": "LoadDxilSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilSampler(const llvm::MDOperand &MDO, DxilSampler &S)"
  },
  {
    "label": "GetResourceClass()",
    "kind": "Method",
    "detail": "Function (const llvm::MDOperand&)",
    "insertText": "GetResourceClass(llvm::MDNode *MD, DXIL::ResourceClass &RC)"
  },
  {
    "label": "EmitDxilTypeSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilTypeSystem(DxilTypeSystem &TypeSystem, std::vector<llvm::GlobalVariable *> &LLVMUsed)"
  },
  {
    "label": "LoadDxilTypeSystemNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilTypeSystemNode(const llvm::MDTuple &MDT, DxilTypeSystem &TypeSystem)"
  },
  {
    "label": "LoadDxilTypeSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilTypeSystem(DxilTypeSystem &TypeSystem)"
  },
  {
    "label": "EmitDxilStructAnnotation()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitDxilStructAnnotation(const DxilStructAnnotation &SA)"
  },
  {
    "label": "LoadDxilStructAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilStructAnnotation(const llvm::MDOperand &MDO, DxilStructAnnotation &SA)"
  },
  {
    "label": "EmitDxilFieldAnnotation()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitDxilFieldAnnotation(const DxilFieldAnnotation &FA)"
  },
  {
    "label": "LoadDxilFieldAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilFieldAnnotation(const llvm::MDOperand &MDO, DxilFieldAnnotation &FA)"
  },
  {
    "label": "EmitDxilFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitDxilFunctionAnnotation(const DxilFunctionAnnotation &FA)"
  },
  {
    "label": "LoadDxilFunctionAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilFunctionAnnotation(const llvm::MDOperand &MDO, DxilFunctionAnnotation &FA)"
  },
  {
    "label": "EmitDxilParamAnnotation()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitDxilParamAnnotation(const DxilParameterAnnotation &PA)"
  },
  {
    "label": "LoadDxilParamAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilParamAnnotation(const llvm::MDOperand &MDO, DxilParameterAnnotation &PA)"
  },
  {
    "label": "EmitDxilParamAnnotations()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitDxilParamAnnotations(const DxilFunctionAnnotation &FA)"
  },
  {
    "label": "LoadDxilParamAnnotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilParamAnnotations(const llvm::MDOperand &MDO, DxilFunctionAnnotation &FA)"
  },
  {
    "label": "EmitDxilTemplateArgAnnotation()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitDxilTemplateArgAnnotation(const DxilTemplateArgAnnotation &annotation)"
  },
  {
    "label": "LoadDxilTemplateArgAnnotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilTemplateArgAnnotation(const llvm::MDOperand &MDO, DxilTemplateArgAnnotation &annotation)"
  },
  {
    "label": "EmitDxrPayloadAnnotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxrPayloadAnnotations(DxilTypeSystem &TypeSystem)"
  },
  {
    "label": "EmitDxrPayloadStructAnnotation()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitDxrPayloadStructAnnotation(const DxilPayloadAnnotation &SA)"
  },
  {
    "label": "EmitDxrPayloadFieldAnnotation()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitDxrPayloadFieldAnnotation(const DxilPayloadFieldAnnotation &FA, llvm::Type *fieldType)"
  },
  {
    "label": "LoadDxrPayloadAnnotationNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxrPayloadAnnotationNode(const llvm::MDTuple &MDT, DxilTypeSystem &TypeSystem)"
  },
  {
    "label": "LoadDxrPayloadAnnotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxrPayloadAnnotations(DxilTypeSystem &TypeSystem)"
  },
  {
    "label": "LoadDxrPayloadFieldAnnoations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxrPayloadFieldAnnoations(const llvm::MDOperand &MDO, DxilPayloadAnnotation &SA)"
  },
  {
    "label": "LoadDxrPayloadFieldAnnoation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxrPayloadFieldAnnoation(const llvm::MDOperand &MDO, DxilPayloadFieldAnnotation &FA)"
  },
  {
    "label": "LoadDxrPayloadAccessQualifiers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxrPayloadAccessQualifiers(const llvm::MDOperand &MDO, DxilPayloadFieldAnnotation &FA)"
  },
  {
    "label": "SerializeNodeProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeNodeProps(llvm::SmallVectorImpl<llvm::Metadata *> &MDVals, unsigned &valIdx, const hlsl::DxilFunctionProps *props)"
  },
  {
    "label": "DeserializeNodeProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeNodeProps(const llvm::MDTuple *pProps, unsigned &idx, hlsl::DxilFunctionProps *props)"
  },
  {
    "label": "EmitDxilFunctionProps()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilFunctionProps(const hlsl::DxilFunctionProps *props, const llvm::Function *F)"
  },
  {
    "label": "LoadDxilFunctionProps()",
    "kind": "Method",
    "detail": "Function (const llvm::Function*)",
    "insertText": "LoadDxilFunctionProps(const llvm::MDTuple *pProps, hlsl::DxilFunctionProps *props)"
  },
  {
    "label": "EmitDxilEntryProperties()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilEntryProperties(uint64_t rawShaderFlag, const hlsl::DxilFunctionProps &props, uint32_t autoBindingSpace)"
  },
  {
    "label": "LoadDxilEntryProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilEntryProperties(const llvm::MDOperand &MDO, uint64_t &rawShaderFlag, hlsl::DxilFunctionProps &props, uint32_t &autoBindingSpace)"
  },
  {
    "label": "EmitDxilViewIdState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilViewIdState(std::vector<unsigned> &SerializedState)"
  },
  {
    "label": "LoadDxilViewIdState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilViewIdState(std::vector<unsigned> &SerializedState)"
  },
  {
    "label": "EmitControlFlowHints()",
    "kind": "Method",
    "detail": "Function (llvm::MDNode*)",
    "insertText": "EmitControlFlowHints(llvm::LLVMContext &Ctx, std::vector<DXIL::ControlFlowHint> &hints)"
  },
  {
    "label": "GetControlFlowHintMask()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetControlFlowHintMask(const llvm::Instruction *I)"
  },
  {
    "label": "HasControlFlowHintToPreventFlatten()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasControlFlowHintToPreventFlatten(const llvm::Instruction *I)"
  },
  {
    "label": "EmitSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitSubobjects(const DxilSubobjects &Subobjects)"
  },
  {
    "label": "LoadSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSubobjects(DxilSubobjects &Subobjects)"
  },
  {
    "label": "EmitSubobject()",
    "kind": "Method",
    "detail": "Function (llvm::Metadata*)",
    "insertText": "EmitSubobject(const DxilSubobject &obj)"
  },
  {
    "label": "LoadSubobject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSubobject(const llvm::MDNode &MDO, DxilSubobjects &Subobjects)"
  },
  {
    "label": "HasExtraMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExtraMetadata()"
  },
  {
    "label": "LoadDxilCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilCounters(DxilCounters &counters)"
  },
  {
    "label": "EmitDxilGSState()",
    "kind": "Method",
    "detail": "Function (private : llvm::MDTuple*)",
    "insertText": "EmitDxilGSState(DXIL::InputPrimitive Primitive, unsigned MaxVertexCount, unsigned ActiveStreamMask, DXIL::PrimitiveTopology StreamPrimitiveTopology, unsigned GSInstanceCount)"
  },
  {
    "label": "LoadDxilGSState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilGSState(const llvm::MDOperand &MDO, DXIL::InputPrimitive &Primitive, unsigned &MaxVertexCount, unsigned &ActiveStreamMask, DXIL::PrimitiveTopology &StreamPrimitiveTopology, unsigned &GSInstanceCount)"
  },
  {
    "label": "EmitDxilDSState()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilDSState(DXIL::TessellatorDomain Domain, unsigned InputControlPointCount)"
  },
  {
    "label": "LoadDxilDSState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilDSState(const llvm::MDOperand &MDO, DXIL::TessellatorDomain &Domain, unsigned &InputControlPointCount)"
  },
  {
    "label": "EmitDxilHSState()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilHSState(llvm::Function *pPatchConstantFunction, unsigned InputControlPointCount, unsigned OutputControlPointCount, DXIL::TessellatorDomain TessDomain, DXIL::TessellatorPartitioning TessPartitioning, DXIL::TessellatorOutputPrimitive TessOutputPrimitive, float MaxTessFactor)"
  },
  {
    "label": "LoadDxilHSState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilHSState(const llvm::MDOperand &MDO, llvm::Function *&pPatchConstantFunction, unsigned &InputControlPointCount, unsigned &OutputControlPointCount, DXIL::TessellatorDomain &TessDomain, DXIL::TessellatorPartitioning &TessPartitioning, DXIL::TessellatorOutputPrimitive &TessOutputPrimitive, float &MaxTessFactor)"
  },
  {
    "label": "EmitDxilMSState()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilMSState(const unsigned *NumThreads, unsigned MaxVertexCount, unsigned MaxPrimitiveCount, DXIL::MeshOutputTopology OutputTopology, unsigned payloadSizeInBytes)"
  },
  {
    "label": "LoadDxilMSState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilMSState(const llvm::MDOperand &MDO, unsigned *NumThreads, unsigned &MaxVertexCount, unsigned &MaxPrimitiveCount, DXIL::MeshOutputTopology &OutputTopology, unsigned &payloadSizeInBytes)"
  },
  {
    "label": "EmitDxilASState()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilASState(const unsigned *NumThreads, unsigned payloadSizeInBytes)"
  },
  {
    "label": "LoadDxilASState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilASState(const llvm::MDOperand &MDO, unsigned *NumThreads, unsigned &payloadSizeInBytes)"
  },
  {
    "label": "EmitDxilNodeIOState()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilNodeIOState(const NodeIOProperties &Node)"
  },
  {
    "label": "EmitDxilNodeRecordType()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "EmitDxilNodeRecordType(const NodeRecordType &RecordType)"
  },
  {
    "label": "LoadDxilNodeIOState()",
    "kind": "Method",
    "detail": "Function (hlsl::NodeIOProperties)",
    "insertText": "LoadDxilNodeIOState(const llvm::MDOperand &MDO)"
  },
  {
    "label": "LoadDxilNodeRecordType()",
    "kind": "Method",
    "detail": "Function (hlsl::NodeRecordType)",
    "insertText": "LoadDxilNodeRecordType(const llvm::MDOperand &MDO)"
  },
  {
    "label": "EmitDxilNodeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilNodeState(std::vector<llvm::Metadata *> &MDVals, const DxilFunctionProps &props)"
  },
  {
    "label": "AddCounterIfNonZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCounterIfNonZero(uint32_t value, llvm::StringRef name, std::vector<llvm::Metadata *> &MDVals)"
  },
  {
    "label": "LoadCounterMD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadCounterMD(const llvm::MDOperand &MDName, const llvm::MDOperand &MDValue, DxilCounters &counters)"
  },
  {
    "label": "IsKnownNamedMetaData()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsKnownNamedMetaData(const llvm::NamedMDNode &Node)"
  },
  {
    "label": "IsKnownMetadataID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKnownMetadataID(llvm::LLVMContext &Ctx, unsigned ID)"
  },
  {
    "label": "GetKnownMetadataIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKnownMetadataIDs(llvm::LLVMContext &Ctx, llvm::SmallVectorImpl<unsigned> *pIDs)"
  },
  {
    "label": "combineDxilMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combineDxilMetadata(llvm::Instruction *K, const llvm::Instruction *J)"
  },
  {
    "label": "Int32ToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "Int32ToConstMD(int32_t v, llvm::LLVMContext &Ctx)"
  },
  {
    "label": "Int32ToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "Int32ToConstMD(int32_t v)"
  },
  {
    "label": "Uint32ToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "Uint32ToConstMD(unsigned v, llvm::LLVMContext &Ctx)"
  },
  {
    "label": "Uint32ToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "Uint32ToConstMD(unsigned v)"
  },
  {
    "label": "Uint64ToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "Uint64ToConstMD(uint64_t v, llvm::LLVMContext &Ctx)"
  },
  {
    "label": "Uint64ToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "Uint64ToConstMD(uint64_t v)"
  },
  {
    "label": "Int8ToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "Int8ToConstMD(int8_t v)"
  },
  {
    "label": "Uint8ToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "Uint8ToConstMD(uint8_t v)"
  },
  {
    "label": "BoolToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "BoolToConstMD(bool v, llvm::LLVMContext &Ctx)"
  },
  {
    "label": "BoolToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "BoolToConstMD(bool v)"
  },
  {
    "label": "FloatToConstMD()",
    "kind": "Method",
    "detail": "Function (llvm::ConstantAsMetadata*)",
    "insertText": "FloatToConstMD(float v)"
  },
  {
    "label": "ConstMDToInt32()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "ConstMDToInt32(const llvm::MDOperand &MDO)"
  },
  {
    "label": "ConstMDToUint32()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "ConstMDToUint32(const llvm::MDOperand &MDO)"
  },
  {
    "label": "ConstMDToUint64()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "ConstMDToUint64(const llvm::MDOperand &MDO)"
  },
  {
    "label": "ConstMDToInt8()",
    "kind": "Method",
    "detail": "Function (int8_t)",
    "insertText": "ConstMDToInt8(const llvm::MDOperand &MDO)"
  },
  {
    "label": "ConstMDToUint8()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "ConstMDToUint8(const llvm::MDOperand &MDO)"
  },
  {
    "label": "ConstMDToBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConstMDToBool(const llvm::MDOperand &MDO)"
  },
  {
    "label": "ConstMDToFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ConstMDToFloat(const llvm::MDOperand &MDO)"
  },
  {
    "label": "StringMDToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "StringMDToString(const llvm::MDOperand &MDO)"
  },
  {
    "label": "StringMDToStringRef()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "StringMDToStringRef(const llvm::MDOperand &MDO)"
  },
  {
    "label": "ValueMDToValue()",
    "kind": "Method",
    "detail": "Function (llvm::Value*)",
    "insertText": "ValueMDToValue(const llvm::MDOperand &MDO)"
  },
  {
    "label": "Uint32VectorToConstMDTuple()",
    "kind": "Method",
    "detail": "Function (llvm::MDTuple*)",
    "insertText": "Uint32VectorToConstMDTuple(const std::vector<unsigned> &Vec)"
  },
  {
    "label": "ConstMDTupleToUint32Vector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstMDTupleToUint32Vector(llvm::MDTuple *pTupleMD, std::vector<unsigned> &Vec)"
  },
  {
    "label": "IsMarkedPrecise()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMarkedPrecise(const llvm::Instruction *inst)"
  },
  {
    "label": "MarkPrecise()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPrecise(llvm::Instruction *inst)"
  },
  {
    "label": "IsMarkedNonUniform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMarkedNonUniform(const llvm::Instruction *inst)"
  },
  {
    "label": "MarkNonUniform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkNonUniform(llvm::Instruction *inst)"
  },
  {
    "label": "GetVariableDebugLayout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVariableDebugLayout(llvm::DbgDeclareInst *inst, unsigned &StartOffsetInBits, std::vector<DxilDIArrayDim> &ArrayDims)"
  },
  {
    "label": "SetVariableDebugLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVariableDebugLayout(llvm::DbgDeclareInst *inst, unsigned StartOffsetInBits, const std::vector<DxilDIArrayDim> &ArrayDims)"
  },
  {
    "label": "CopyMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyMetadata(llvm::Instruction &I, llvm::Instruction &SrcInst, llvm::ArrayRef<unsigned> WL = llvm::ArrayRef<unsigned>())"
  },
  {
    "label": "DxilExtraPropertyHelper()",
    "kind": "Method",
    "detail": "Function (private : llvm::LLVMContext& m_Ctx ; llvm::Module* m_pModule ; const ShaderModel* m_pSM ; std::unique_ptr<ExtraPropertyHelper> m_ExtraPropertyHelper ; unsigned m_ValMajor,m_ValMinor ; unsigned m_MinValMajor,m_MinValMinor ; bool m_bExtraMetadata ; } ; class DxilExtraPropertyHelper : public DxilMDHelper::ExtraPropertyHelper { public :)",
    "insertText": "DxilExtraPropertyHelper(llvm::Module *pModule)"
  },
  {
    "label": "DxilExtraPropertyHelper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DxilExtraPropertyHelper()"
  }
]