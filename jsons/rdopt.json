[
  {
    "label": "RDCOST()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP8_ENCODER_RDOPT_H_ # define VPX_VP8_ENCODER_RDOPT_H_ # include \" . / vpx_config . h \" # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "RDCOST(RM, DM, R, D) (((128 + (R) * (RM)) >> 8) + (DM) * (D)) void vp8cx_initialize_me_consts(VP8_COMP *cpi, int QIndex)"
  },
  {
    "label": "vp8_auto_select_speed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_auto_select_speed(VP8_COMP *cpi)"
  },
  {
    "label": "insertsortmv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertsortmv(int arr[], int len)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i,j,k ;)",
    "insertText": "for(i = 1; i <= len - 1; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int temp ; temp = arr [ i ] ;)",
    "insertText": "for(k = i; k > j; k--)"
  },
  {
    "label": "insertsortsad()",
    "kind": "Method",
    "detail": "Function (arr [ j ] = temp ; } } } } void)",
    "insertText": "insertsortsad(int arr[], int idx[], int len)"
  },
  {
    "label": "vp8_initialize_rd_consts()",
    "kind": "Method",
    "detail": "Function (arr [ k ] = arr [ k - 1 ] ; idx [ k ] = idx [ k - 1 ] ; } arr [ j ] = temp ; idx [ j ] = tempi ; } } } } void)",
    "insertText": "vp8_initialize_rd_consts(VP8_COMP *cpi, MACROBLOCK *x, int Qvalue)"
  },
  {
    "label": "vp8_rd_pick_inter_mode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_rd_pick_inter_mode(VP8_COMP *cpi, MACROBLOCK *x, int recon_yoffset, int recon_uvoffset, int *returnrate, int *returndistortion, int *returnintra, int mb_row, int mb_col)"
  },
  {
    "label": "vp8_rd_pick_intra_mode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_rd_pick_intra_mode(MACROBLOCK *x, int *rate)"
  },
  {
    "label": "get_plane_pointers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plane_pointers(const YV12_BUFFER_CONFIG *fb, unsigned char *plane[3], unsigned int recon_yoffset, unsigned int recon_uvoffset)"
  },
  {
    "label": "get_predictor_pointers()",
    "kind": "Method",
    "detail": "Function (plane [ 0 ] = fb -> y_buffer + recon_yoffset ; plane [ 1 ] = fb -> u_buffer + recon_uvoffset ; plane [ 2 ] = fb -> v_buffer + recon_uvoffset ; } void)",
    "insertText": "get_predictor_pointers(const VP8_COMP *cpi, unsigned char *plane[4][3], unsigned int recon_yoffset, unsigned int recon_uvoffset)"
  },
  {
    "label": "get_plane_pointers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plane_pointers(&cpi->common.yv12_fb[cpi->common.lst_fb_idx], plane[LAST_FRAME], recon_yoffset, recon_uvoffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(cpi->ref_frame_flags & VP8_GOLD_FRAME)"
  },
  {
    "label": "get_plane_pointers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plane_pointers(&cpi->common.yv12_fb[cpi->common.gld_fb_idx], plane[GOLDEN_FRAME], recon_yoffset, recon_uvoffset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(cpi->ref_frame_flags & VP8_ALTR_FRAME)"
  },
  {
    "label": "get_plane_pointers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get_plane_pointers(&cpi->common.yv12_fb[cpi->common.alt_fb_idx], plane[ALTREF_FRAME], recon_yoffset, recon_uvoffset)"
  },
  {
    "label": "get_reference_search_order()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "get_reference_search_order(const VP8_COMP *cpi, int ref_frame_map[4])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i = 0 ; ref_frame_map [ i + + ] = INTRA_FRAME ;)",
    "insertText": "if(cpi->ref_frame_flags & VP8_LAST_FRAME)"
  },
  {
    "label": "vp8_mv_pred()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "vp8_mv_pred(VP8_COMP *cpi, MACROBLOCKD *xd, const MODE_INFO *here, int_mv *mvp, int refframe, int *ref_frame_sign_bias, int *sr, int near_sadidx[])"
  },
  {
    "label": "vp8_cal_sad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_cal_sad(VP8_COMP *cpi, MACROBLOCKD *xd, MACROBLOCK *x, int recon_yoffset, int near_sadidx[])"
  },
  {
    "label": "VP8_UVSSE()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "VP8_UVSSE(MACROBLOCK *x)"
  },
  {
    "label": "vp8_cost_mv_ref()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp8_cost_mv_ref(MB_PREDICTION_MODE m, const int near_mv_ref_ct[4])"
  },
  {
    "label": "vp8_set_mbmode_and_mvs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp8_set_mbmode_and_mvs(MACROBLOCK *x, MB_PREDICTION_MODE mb, int_mv *mv)"
  }
]