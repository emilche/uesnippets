[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "SparseMultiSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseMultiSet"
  },
  {
    "label": "SMSNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SMSNode"
  },
  {
    "label": "iterator_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator_base"
  },
  {
    "label": "SparseMultiSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseMultiSet"
  },
  {
    "label": "ValIndexOf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValIndexOf(Val)"
  },
  {
    "label": "sparseIndex()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sparseIndex(N.Data)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (iterator_base)",
    "insertText": "I(*this)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (iterator_base)",
    "insertText": "I(*this)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, SMSNode::INVALID, SMSNode::INVALID)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(this, SMSNode::INVALID, SMSNode::INVALID)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, i, Idx)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "find(Key)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, NodeIdx, Idx)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, NodeIdx, Idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (unlinked)",
    "insertText": "assert(N.Next == SMSNode::INVALID && \"Singleton has next?\")"
  }
]