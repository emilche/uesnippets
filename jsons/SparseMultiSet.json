[
  {
    "label": "SparseMultiSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseMultiSet"
  },
  {
    "label": "SMSNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SMSNode"
  },
  {
    "label": "iterator_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator_base"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SPARSEMULTISET_H # define LLVM_ADT_SPARSEMULTISET_H # include \" llvm / ADT / SparseSet . h \" namespace llvm { template<ValueT,KeyFunctorT = llvm::identity<unsigned>,SparseT = uint8_t> class SparseMultiSet {)",
    "insertText": "static_assert(std::numeric_limits<SparseT>::is_integer && !std::numeric_limits<SparseT>::is_signed, \"SparseT must be an unsigned integer type\")"
  },
  {
    "label": "SMSNode()",
    "kind": "Method",
    "detail": "Function (struct SMSNode { const unsigned INVALID = ~ 0 U ; ValueT Data ; unsigned Prev ; unsigned Next ;)",
    "insertText": "SMSNode(ValueT D, unsigned P, unsigned N) : Data(D), Prev(P), Next(N)"
  },
  {
    "label": "isTail()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTail()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ValIndexOf(Val) < Universe && \"Invalid key in set. Did object mutate?\")"
  },
  {
    "label": "sparseIndex()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "sparseIndex(const SMSNode &N)"
  },
  {
    "label": "SparseMultiSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseMultiSet(const SparseMultiSet&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SparseMultiSet&)",
    "insertText": "operator(const SparseMultiSet&)"
  },
  {
    "label": "isHead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isHead(const SMSNode &D)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(D.isValid() && \"Invalid node for head\")"
  },
  {
    "label": "isSingleton()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSingleton(const SMSNode &N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N.isValid() && \"Invalid node for singleton\")"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Dense .)",
    "insertText": "push_back(SMSNode(V, Prev, Next))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} unsigned Idx = FreelistIdx ; unsigned NextFree = Dense [ Idx ] . Next ;)",
    "insertText": "assert(Dense[Idx].isTombstone() && \"Non-tombstone free?\")"
  },
  {
    "label": "SMSNode()",
    "kind": "Method",
    "detail": "Function (Dense [ Idx ] =)",
    "insertText": "SMSNode(V, Prev, Next)"
  },
  {
    "label": "makeTombstone()",
    "kind": "Method",
    "detail": "Function (FreelistIdx = NextFree ; - - NumFree ; return Idx ; } void)",
    "insertText": "makeTombstone(unsigned Idx)"
  },
  {
    "label": "SparseMultiSet()",
    "kind": "Method",
    "detail": "Function (Dense [ Idx ] . Prev = SMSNode::INVALID ; Dense [ Idx ] . Next = FreelistIdx ; FreelistIdx = Idx ; + + NumFree ; } public : typedef ValueT value_type ; typedef ValueT& reference ; typedef const ValueT& const_reference ; typedef ValueT* pointer ; typedef const ValueT* const_pointer ; typedef unsigned size_type ;)",
    "insertText": "SparseMultiSet() : Sparse(nullptr), Universe(0), FreelistIdx(SMSNode::INVALID), NumFree(0)"
  },
  {
    "label": "SparseMultiSet()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SparseMultiSet()"
  },
  {
    "label": "setUniverse()",
    "kind": "Method",
    "detail": "Function (delete [ ] Sparse ; } void)",
    "insertText": "setUniverse(unsigned U)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(empty() && \"Can only resize universe on an empty map\")"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (delete [ ] Sparse ; Sparse = new SparseT [ U ] ;)",
    "insertText": "memset(Sparse, 0, U * sizeof(SparseT))"
  },
  {
    "label": "iterator_base()",
    "kind": "Method",
    "detail": "Function (Universe = U ; } template<SMSPtrTy> class iterator_base { class SparseMultiSet ; public : using iterator_category = std::bidirectional_iterator_tag ; using value_type = ValueT ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; private : SMSPtrTy SMS ; unsigned Idx ; unsigned SparseIdx ;)",
    "insertText": "iterator_base(SMSPtrTy P, unsigned I, unsigned SI) : SMS(P), Idx(I), SparseIdx(SI)"
  },
  {
    "label": "isEnd()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEnd()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < SMS->Dense.size() && \"Out of range, non-INVALID Idx?\")"
  },
  {
    "label": "setNext()",
    "kind": "Method",
    "detail": "Function (SMS -> Dense [ Idx ] . Prev = P ; } void)",
    "insertText": "setNext(unsigned N)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SMS -> Dense [ Idx ] . Next = N ; } public : reference)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isKeyed() && SMS->sparseIndex(SMS->Dense[Idx].Data) == SparseIdx && \"Dereferencing iterator of invalid key or index\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const iterator_base &RHS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((isEnd() || SparseIdx == RHS.SparseIdx) && \"Same dense entry, but different keys?\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isKeyed() && \"Decrementing an invalid iterator\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((isEnd() || !SMS->isHead(SMS->Dense[Idx])) && \"Decrementing head of list\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isEnd() && isKeyed() && \"Incrementing an invalid/end iterator\")"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (Idx =)",
    "insertText": "Next()"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (iterator_base)",
    "insertText": "I(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- -* this ; return I ; } iterator_base)",
    "insertText": "operator(int)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (+ +* this ; return I ; } } ; typedef iterator_base<SparseMultiSet*> iterator ; typedef iterator_base<const SparseMultiSet*> const_iterator ; typedef std::pair<iterator,iterator> RangePair ; iterator)",
    "insertText": "end()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NumFree <= Dense.size() && \"Out-of-bounds free entries\")"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "findIndex()",
    "kind": "Method",
    "detail": "Function (NumFree = 0 ; FreelistIdx = SMSNode::INVALID ; } iterator)",
    "insertText": "findIndex(unsigned Idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < Universe && \"Key out of range\")"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const unsigned Stride = std::numeric_limits<SparseT)",
    "insertText": "max()"
  },
  {
    "label": "sparseIndex()",
    "kind": "Method",
    "detail": "Function (const unsigned FoundIdx =)",
    "insertText": "sparseIndex(Dense[i])"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(const KeyT &Key)"
  },
  {
    "label": "SparseMultiSet()",
    "kind": "Method",
    "detail": "Function (iterator I = const_cast<)",
    "insertText": "SparseMultiSet(this)->findIndex(KeyIndexOf(Key))"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(const KeyT &Key)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned Ret = 0 ;)",
    "insertText": "for(const_iterator It = find(Key); It != end(); ++It)"
  },
  {
    "label": "getHead()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "getHead(const KeyT &Key)"
  },
  {
    "label": "getTail()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "getTail(const KeyT &Key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator I =)",
    "insertText": "find(Key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator B =)",
    "insertText": "find(K)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (iterator E =)",
    "insertText": "iterator(this, SMSNode::INVALID, B.SparseIdx)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "insert(const ValueT &Val)"
  },
  {
    "label": "sparseIndex()",
    "kind": "Method",
    "detail": "Function (unsigned Idx =)",
    "insertText": "sparseIndex(Val)"
  },
  {
    "label": "findIndex()",
    "kind": "Method",
    "detail": "Function (iterator I =)",
    "insertText": "findIndex(Idx)"
  },
  {
    "label": "addValue()",
    "kind": "Method",
    "detail": "Function (unsigned NodeIdx =)",
    "insertText": "addValue(Val, SMSNode::INVALID, SMSNode::INVALID)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (Sparse [ Idx ] = NodeIdx ; Dense [ NodeIdx ] . Prev = NodeIdx ; return)",
    "insertText": "iterator(this, NodeIdx, Idx)"
  },
  {
    "label": "Prev()",
    "kind": "Method",
    "detail": "Function (} unsigned HeadIdx = I . Idx ; unsigned TailIdx = I .)",
    "insertText": "Prev()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "erase(iterator I)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I.isKeyed() && !I.isEnd() && !Dense[I.Idx].isTombstone() && \"erasing invalid/end/tombstone iterator\")"
  },
  {
    "label": "unlink()",
    "kind": "Method",
    "detail": "Function (iterator NextI =)",
    "insertText": "unlink(Dense[I.Idx])"
  },
  {
    "label": "makeTombstone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeTombstone(I.Idx)"
  },
  {
    "label": "unlink()",
    "kind": "Method",
    "detail": "Function (} private : iterator)",
    "insertText": "unlink(const SMSNode &N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N.Next == SMSNode::INVALID && \"Singleton has next?\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(isHead(N))"
  },
  {
    "label": "sparseIndex()",
    "kind": "Method",
    "detail": "Function (Sparse [)",
    "insertText": "sparseIndex(N)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (Dense [ N . Next ] . Prev = N . Prev ; return)",
    "insertText": "iterator(this, N.Next, ValIndexOf(N.Data))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(N.isTail())"
  },
  {
    "label": "findIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findIndex(sparseIndex(N)).setPrev(N.Prev)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (Dense [ N . Prev ] . Next = N . Next ; iterator)",
    "insertText": "I(this, N.Prev, ValIndexOf(N.Data))"
  }
]