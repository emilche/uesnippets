[
  {
    "label": "TGenericWindowsTargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGenericWindowsTargetPlatformSettings"
  },
  {
    "label": "FStaticMeshLODSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshLODSettings"
  },
  {
    "label": "TGenericWindowsTargetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Common / TargetPlatformSettingsBase . h \" # include \" Misc / ConfigCacheIni . h \" # if WITH_ENGINE # include \" StaticMeshResources . h \" # include \" RHI . h \" # include \" DataDrivenShaderPlatformInfo . h \" # endif # include \" HAL / IConsoleManager . h \" # define LOCTEXT_NAMESPACE \" TGenericWindowsTargetPlatformSettings \" template<TProperties> class TGenericWindowsTargetPlatformSettings : public TTargetPlatformSettingsBase<TProperties> { public : typedef TTargetPlatformSettingsBase<TProperties> TSuper ;)",
    "insertText": "TGenericWindowsTargetPlatformSettings()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE TextureLODSettings = nullptr ; StaticMeshLODSettings .)",
    "insertText": "Initialize(this)"
  },
  {
    "label": "GetAllTargetedShaderFormats()",
    "kind": "Method",
    "detail": "Function (TArray<FName> TargetedShaderFormats ;)",
    "insertText": "GetAllTargetedShaderFormats(TargetedShaderFormats)"
  },
  {
    "label": "NAME_PCD3D_SM6()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_PCD3D_SM6(TEXT(\"PCD3D_SM6\"))"
  },
  {
    "label": "NAME_PCD3D_SM5()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_PCD3D_SM5(TEXT(\"PCD3D_SM5\"))"
  },
  {
    "label": "NAME_VULKAN_SM5()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_VULKAN_SM5(TEXT(\"SF_VULKAN_SM5\"))"
  },
  {
    "label": "NAME_VULKAN_SM6()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_VULKAN_SM6(TEXT(\"SF_VULKAN_SM6\"))"
  },
  {
    "label": "NAME_PCD3D_ES3_1()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_PCD3D_ES3_1(TEXT(\"PCD3D_ES31\"))"
  },
  {
    "label": "NAME_SF_VULKAN_ES31()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_SF_VULKAN_ES31(TEXT(\"SF_VULKAN_ES31\"))"
  },
  {
    "label": "NAME_OPENGL_150_ES3_1()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_OPENGL_150_ES3_1(TEXT(\"GLSL_150_ES31\"))"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bRequiresEncodedHDRReflectionCaptures = TargetedShaderFormats .)",
    "insertText": "Contains(NAME_SF_VULKAN_ES31) || TargetedShaderFormats.Contains(NAME_OPENGL_150_ES3_1) || TargetedShaderFormats.Contains(NAME_PCD3D_ES3_1)"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (# endif } public : bool)",
    "insertText": "SupportsFeature(ETargetPlatformFeatures Feature)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Feature == ETargetPlatformFeatures::ShouldSplitPaksIntoSmallerSizes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Feature == ETargetPlatformFeatures::CanCookPackages)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Feature == ETargetPlatformFeatures::MobileRendering)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bCachedSupportsMobileRendering = false ; # if WITH_ENGINE bool bHasCachedValue = false ;)",
    "insertText": "if(!bHasCachedValue)"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (bCachedSupportsMobileRendering = true ; break ; } } bHasCachedValue = true ; } # endif return bCachedSupportsMobileRendering ; } return)",
    "insertText": "SupportsFeature(Feature)"
  },
  {
    "label": "GetAllPossibleShaderFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllPossibleShaderFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "NAME_VULKAN_ES31()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NAME_VULKAN_ES31(TEXT(\"SF_VULKAN_ES31\"))"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_PCD3D_SM5)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_PCD3D_SM6)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_VULKAN_ES31)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_OPENGL_150_ES3_1)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_VULKAN_SM5)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_VULKAN_SM6)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(NAME_PCD3D_ES3_1)"
  },
  {
    "label": "GetAllTargetedShaderFormatsInternal()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllTargetedShaderFormatsInternal(TArrayView<TCHAR const*> RelevantSettings, TArray<FName>& OutFormats)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FString> TargetedShaderFormats ;)",
    "insertText": "for(const TCHAR* Name : RelevantSettings)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (TArray<FString> NewTargetedShaderFormats ; GConfig ->)",
    "insertText": "GetArray(TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\"), Name, NewTargetedShaderFormats, GEngineIni)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (TargetedShaderFormats .)",
    "insertText": "AddUnique(NewShaderFormat)"
  },
  {
    "label": "GetAllPossibleShaderFormats()",
    "kind": "Method",
    "detail": "Function (} } TArray<FName> PossibleShaderFormats ;)",
    "insertText": "GetAllPossibleShaderFormats(PossibleShaderFormats)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString ShaderFormat = TargetedShaderFormats [ ShaderFormatIdx ] ;)",
    "insertText": "if(PossibleShaderFormats.Contains(FName(*ShaderFormat)) == false)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (TargetedShaderFormats .)",
    "insertText": "RemoveAt(ShaderFormatIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(const FString& ShaderFormat : TargetedShaderFormats)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(FName(*ShaderFormat))"
  },
  {
    "label": "GetAllTargetedShaderFormats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllTargetedShaderFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (TCHAR const* RelevantSettings [ ] = {)",
    "insertText": "TEXT(\"TargetedRHIs\"), TEXT(\"D3D12TargetedShaderFormats\"), TEXT(\"D3D11TargetedShaderFormats\"), TEXT(\"VulkanTargetedShaderFormats\")"
  },
  {
    "label": "GetAllTargetedShaderFormatsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllTargetedShaderFormatsInternal(RelevantSettings, OutFormats)"
  },
  {
    "label": "GetRayTracingShaderFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetRayTracingShaderFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (TCHAR const* RelevantSettings [ ] = {)",
    "insertText": "TEXT(\"VulkanTargetedShaderFormats\")"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "AddUnique(FName(TEXT(\"PCD3D_SM6\")))"
  },
  {
    "label": "GetReflectionCaptureFormats()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_ENGINE void)",
    "insertText": "GetReflectionCaptureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "Add(FName(TEXT(\"EncodedHDR\")))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} OutFormats .)",
    "insertText": "Add(FName(TEXT(\"FullHDR\")))"
  },
  {
    "label": "GetShaderFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderFormatModuleHints(TArray<FName>& OutModuleNames)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"ShaderFormatD3D\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"ShaderFormatOpenGL\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"VulkanShaderFormat\"))"
  },
  {
    "label": "GetStaticMeshLODSettings()",
    "kind": "Method",
    "detail": "Function (} const class FStaticMeshLODSettings&)",
    "insertText": "GetStaticMeshLODSettings()"
  },
  {
    "label": "UsesDistanceFields()",
    "kind": "Method",
    "detail": "Function (TextureLODSettings = InTextureLODSettings ; } # endif bool)",
    "insertText": "UsesDistanceFields()"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool bEnableDistanceFields = false ; GConfig ->)",
    "insertText": "GetBool(TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\"), TEXT(\"bEnableDistanceFields\"), bEnableDistanceFields, GEngineIni)"
  },
  {
    "label": "UsesRayTracing()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesRayTracing()"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool bEnableRayTracing = false ; GConfig ->)",
    "insertText": "GetBool(TEXT(\"/Script/WindowsTargetPlatform.WindowsTargetSettings\"), TEXT(\"bEnableRayTracing\"), bEnableRayTracing, GEngineIni)"
  }
]