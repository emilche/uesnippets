[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___CONCEPTS_SWAPPABLE_H # define _LIBCPP___CONCEPTS_SWAPPABLE_H # include<__concepts / assignable . h> # include<__concepts / class_or_enum . h> # include<__concepts / common_reference_with . h> # include<__concepts / constructible . h> # include<__config> # include<__utility / exchange . h> # include<__utility / forward . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (namespace __swap { template<class _Tp> void)",
    "insertText": "swap(_Tp&, _Tp&)"
  },
  {
    "label": "__unqualified_swappable_with()",
    "kind": "Method",
    "detail": "Function (template<class _Tp,class _Up> concept)",
    "insertText": "__unqualified_swappable_with(__class_or_enum<remove_cvref_t<_Tp>> || __class_or_enum<remove_cvref_t<_Up>>) && requires(_Tp&& __t, _Up&& __u)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u))"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (} ; struct __fn ; template<class _Tp,class _Up,size_t _Size> concept __swappable_arrays = ! __unqualified_swappable_with<)",
    "insertText": "_Tp(&)[_Size], _Up(&)[_Size]> && extent_v<_Tp> == extent_v<_Up> && requires(_Tp(& __t)[_Size], _Up(& __u)[_Size], const __fn& __swap)"
  },
  {
    "label": "__swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__swap(__t[0], __u[0])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp> concept __exchangeable = ! __unqualified_swappable_with<_Tp&,_Tp&>&& move_constructible<_Tp>&& assignable_from<_Tp&,_Tp> ; struct __fn { template<class _Tp,class _Up> requires __unqualified_swappable_with<_Tp,_Up> void)",
    "insertText": "operator()(_Tp&& __t, _Up&& __u) const noexcept(noexcept(swap(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Up>(__u))))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up,size_t _Size> requires __swappable_arrays<_Tp,_Up,_Size> void)",
    "insertText": "operator()(_Tp(& __t)[_Size], _Up(& __u)[_Size]) const noexcept(noexcept((*this)(*__t, *__u)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<__exchangeable _Tp> void)",
    "insertText": "operator()(_Tp& __x, _Tp& __y) const noexcept(is_nothrow_move_constructible_v<_Tp> && is_nothrow_move_assignable_v<_Tp>)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (__y =)",
    "insertText": "exchange(__x, _VSTD::move(__y))"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace __cpo { auto swap = __swap::__fn { } ; } } template<class _Tp> concept swappable =)",
    "insertText": "requires(_Tp& __a, _Tp& __b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(__a, __b)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp,class _Up> concept swappable_with = common_reference_with<_Tp,_Up>&&)",
    "insertText": "requires(_Tp&& __t, _Up&& __u)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(_VSTD::forward<_Tp>(__t), _VSTD::forward<_Tp>(__t))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(_VSTD::forward<_Up>(__u), _VSTD::forward<_Up>(__u))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(_VSTD::forward<_Up>(__u), _VSTD::forward<_Tp>(__t))"
  }
]