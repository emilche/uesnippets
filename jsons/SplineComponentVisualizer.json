[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SSplineGeneratorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSplineGeneratorPanel"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "USplineComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineComponent"
  },
  {
    "label": "USplineMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMetadata"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "COMPONENTVISUALIZERS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COMPONENTVISUALIZERS_API"
  },
  {
    "label": "HSplineVisProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HSplineVisProxy"
  },
  {
    "label": "HSplineKeyProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HSplineKeyProxy"
  },
  {
    "label": "HSplineSegmentProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HSplineSegmentProxy"
  },
  {
    "label": "HSplineTangentHandleProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HSplineTangentHandleProxy"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ComponentVisualizer . h \" # include \" Components / SplineComponent . h \" # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Engine / EngineBaseTypes . h \" # include \" GenericPlatform / ICursor . h \" # include \" HitProxies . h \" # include \" InputCoreTypes . h \" # include \" Math / Axis . h \" # include \" Math / Box . h \" # include \" Math / InterpCurvePoint . h \" # include \" Math / Matrix . h \" # include \" Math / Quat . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / GCObject . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" SplineComponentVisualizer . generated . h \" class AActor ; class FCanvas ; class FEditorViewportClient ; class FMenuBuilder ; class FPrimitiveDrawInterface ; class FProperty ; class FSceneView ; class FUICommandList ; class FViewport ; class SSplineGeneratorPanel ; class SWidget ; class SWindow ; class UActorComponent ; class USplineComponent ; class USplineMetadata ; struct FConvexVolume ; struct FViewportClick ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (None,Leave,Arrive } ;)",
    "insertText": "UCLASS(Transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: int32 GetVerifiedLastKeyIndexSelected(const int32 InNumSplinePoints)"
  },
  {
    "label": "GetVerifiedSelectedTangentHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVerifiedSelectedTangentHandle(const int32 InNumSplinePoints, int32& OutSelectedTangentHandle, ESelectedTangentHandle& OutSelectedTangentHandleType)"
  },
  {
    "label": "GetSplinePropertyPath()",
    "kind": "Method",
    "detail": "Function (const FComponentPropertyPath)",
    "insertText": "GetSplinePropertyPath()"
  },
  {
    "label": "GetSelectedKeys()",
    "kind": "Method",
    "detail": "Function (SplinePropertyPath = InSplinePropertyPath ; } const TSet<int32>&)",
    "insertText": "GetSelectedKeys()"
  },
  {
    "label": "GetSelectedSegmentIndex()",
    "kind": "Method",
    "detail": "Function (LastKeyIndexSelected = InLastKeyIndexSelected ; } int32)",
    "insertText": "GetSelectedSegmentIndex()"
  },
  {
    "label": "GetSelectedTangentHandle()",
    "kind": "Method",
    "detail": "Function (SelectedSegmentIndex = InSelectedSegmentIndex ; } int32)",
    "insertText": "GetSelectedTangentHandle()"
  },
  {
    "label": "GetSelectedTangentHandleType()",
    "kind": "Method",
    "detail": "Function (SelectedTangentHandle = InSelectedTangentHandle ; } ESelectedTangentHandle)",
    "insertText": "GetSelectedTangentHandleType()"
  },
  {
    "label": "GetSelectedSplinePosition()",
    "kind": "Method",
    "detail": "Function (SelectedTangentHandleType = InSelectedTangentHandle ; } FVector)",
    "insertText": "GetSelectedSplinePosition()"
  },
  {
    "label": "GetCachedRotation()",
    "kind": "Method",
    "detail": "Function (SelectedSplinePosition = InSelectedSplinePosition ; } FQuat)",
    "insertText": "GetCachedRotation()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CachedRotation = InCachedRotation ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "ClearSelectedSegmentIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedSegmentIndex()"
  },
  {
    "label": "ClearSelectedTangentHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedTangentHandle()"
  },
  {
    "label": "IsSplinePointSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSplinePointSelected(const int32 InIndex)"
  },
  {
    "label": "DECLARE_HIT_PROXY()",
    "kind": "Method",
    "detail": "Function (} ; struct HSplineVisProxy : public HComponentVisProxy {)",
    "insertText": "DECLARE_HIT_PROXY()"
  },
  {
    "label": "HSplineVisProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HSplineVisProxy(const UActorComponent* InComponent) : HComponentVisProxy(InComponent, HPP_Wireframe)"
  },
  {
    "label": "GetMouseCursor()",
    "kind": "Method",
    "detail": "Function (} EMouseCursor::Type)",
    "insertText": "GetMouseCursor()"
  },
  {
    "label": "HSplineKeyProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HSplineKeyProxy(const UActorComponent* InComponent, int32 InKeyIndex) : HSplineVisProxy(InComponent) , KeyIndex(InKeyIndex)"
  },
  {
    "label": "HSplineSegmentProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HSplineSegmentProxy(const UActorComponent* InComponent, int32 InSegmentIndex) : HSplineVisProxy(InComponent) , SegmentIndex(InSegmentIndex)"
  },
  {
    "label": "HSplineTangentHandleProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HSplineTangentHandleProxy(const UActorComponent* InComponent, int32 InKeyIndex, bool bInArriveTangent) : HSplineVisProxy(InComponent) , KeyIndex(InKeyIndex) , bArriveTangent(bInArriveTangent)"
  },
  {
    "label": "FSplineComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSplineComponentVisualizer()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "ShouldShowForSelectedSubcomponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowForSelectedSubcomponents(const UActorComponent* Component)"
  },
  {
    "label": "DrawVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVisualization(const UActorComponent* Component, const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "VisProxyHandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VisProxyHandleClick(FEditorViewportClient* InViewportClient, HComponentVisProxy* VisProxy, const FViewportClick& Click)"
  },
  {
    "label": "DrawVisualizationHUD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVisualizationHUD(const UActorComponent* Component, const FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "EndEditing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEditing()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetLocation(const FEditorViewportClient* ViewportClient, FVector& OutLocation)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(const FEditorViewportClient* ViewportClient, FMatrix& OutMatrix)"
  },
  {
    "label": "HandleInputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputDelta(FEditorViewportClient* ViewportClient, FViewport* Viewport, FVector& DeltaTranslate, FRotator& DeltaRotate, FVector& DeltaScale)"
  },
  {
    "label": "HandleInputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "HandleModifiedClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleModifiedClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "HandleBoxSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBoxSelect(const FBox& InBox, FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "HandleFrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFrustumSelect(const FConvexVolume& InFrustum, FEditorViewportClient* InViewportClient, FViewport* InViewport)"
  },
  {
    "label": "HasFocusOnSelectionBoundingBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFocusOnSelectionBoundingBox(FBox& OutBoundingBox)"
  },
  {
    "label": "HandleSnapTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSnapTo(const bool bInAlign, const bool bInUseLineTrace, const bool bInUseBounds, const bool bInUsePivot, AActor* InDestination)"
  },
  {
    "label": "TrackingStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackingStopped(FEditorViewportClient* InViewportClient, bool bInDidMove)"
  },
  {
    "label": "GetEditedComponent()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "GetEditedComponent()"
  },
  {
    "label": "GenerateContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GenerateContextMenu()"
  },
  {
    "label": "IsVisualizingArchetype()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisualizingArchetype()"
  },
  {
    "label": "GenerateContextMenuSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateContextMenuSections(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "GetEditedSplineComponent()",
    "kind": "Method",
    "detail": "Function (USplineComponent*)",
    "insertText": "GetEditedSplineComponent()"
  },
  {
    "label": "HandleSelectFirstLastSplinePoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleSelectFirstLastSplinePoint(USplineComponent* InSplineComponent, bool bFirstPoint)"
  },
  {
    "label": "HandleSelectAllSplinePoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSelectAllSplinePoints(USplineComponent* InSplineComponent)"
  },
  {
    "label": "OnSelectPrevNextSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectPrevNextSplinePoint(bool bNextPoint, bool bAddToSelection)"
  },
  {
    "label": "SetCachedRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedRotation(const FQuat& NewRotation)"
  },
  {
    "label": "IsAnySelectedKeyIndexOutOfRange()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsAnySelectedKeyIndexOutOfRange(const USplineComponent* Comp)"
  },
  {
    "label": "IsSingleKeySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSingleKeySelected()"
  },
  {
    "label": "AreMultipleKeysSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMultipleKeysSelected()"
  },
  {
    "label": "AreKeysSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreKeysSelected()"
  },
  {
    "label": "SelectSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSplinePoint(int32 SelectIndex, bool bAddToSelection)"
  },
  {
    "label": "TransformSelectedTangent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformSelectedTangent(EPropertyChangeType::Type InPropertyChangeType, const FVector& InDeltaTranslate)"
  },
  {
    "label": "TransformSelectedKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TransformSelectedKeys(EPropertyChangeType::Type InPropertyChangeType, const FVector& InDeltaTranslate, const FRotator& InDeltaRotate = FRotator::ZeroRotator, const FVector& InDeltaScale = FVector::ZeroVector)"
  },
  {
    "label": "ChangeSelectionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeSelectionState(int32 Index, bool bIsCtrlHeld)"
  },
  {
    "label": "DuplicateKeyForAltDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DuplicateKeyForAltDrag(const FVector& InDrag)"
  },
  {
    "label": "UpdateDuplicateKeyForAltDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateDuplicateKeyForAltDrag(const FVector& InDrag)"
  },
  {
    "label": "FindNearest()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "FindNearest(const FVector& InLocalPos, int32 InSegmentStartIndex, FVector& OutSplinePos, FVector& OutSplineTangent)"
  },
  {
    "label": "SplitSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitSegment(const FVector& InWorldPos, int32 InSegmentIndex, bool bCopyFromSegmentBeginIndex = true)"
  },
  {
    "label": "UpdateSplitSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSplitSegment(const FVector& InDrag)"
  },
  {
    "label": "AddSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSegment(const FVector& InWorldPos, bool bAppend)"
  },
  {
    "label": "UpdateAddSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAddSegment(const FVector& InWorldPos)"
  },
  {
    "label": "ResetAllowDuplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllowDuplication()"
  },
  {
    "label": "SnapKeysToLastSelectedAxisPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapKeysToLastSelectedAxisPosition(const EAxis::Type InAxis, TArray<int32> InSnapKeys)"
  },
  {
    "label": "SnapKeyToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapKeyToActor(const AActor* InActor, const ESplineComponentSnapMode SnapMode)"
  },
  {
    "label": "SnapKeyToTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapKeyToTransform(const ESplineComponentSnapMode InSnapMode, const FVector& InWorldPos, const FVector& InWorldUpVector, const FVector& InWorldForwardVector, const FVector& InScale, const USplineMetadata* InCopySplineMetadata = nullptr, const int32 InCopySplineMetadataKey = 0)"
  },
  {
    "label": "SetSnapToActorMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSnapToActorMode(const bool bInIsSnappingToActor, const ESplineComponentSnapMode InSnapMode = ESplineComponentSnapMode::Snap)"
  },
  {
    "label": "GetSnapToActorMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSnapToActorMode(ESplineComponentSnapMode& OutSnapMode)"
  },
  {
    "label": "ResetTempModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTempModes()"
  },
  {
    "label": "UpdateSelectedSplineComponent()",
    "kind": "Method",
    "detail": "Function (const USplineComponent*)",
    "insertText": "UpdateSelectedSplineComponent(HComponentVisProxy* VisProxy)"
  },
  {
    "label": "OnDeleteKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteKey()"
  },
  {
    "label": "CanDeleteKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteKey()"
  },
  {
    "label": "OnDuplicateKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDuplicateKey()"
  },
  {
    "label": "IsKeySelectionValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeySelectionValid()"
  },
  {
    "label": "OnAddKeyToSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddKeyToSegment()"
  },
  {
    "label": "CanAddKeyToSegment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddKeyToSegment()"
  },
  {
    "label": "OnSnapKeyToNearestSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSnapKeyToNearestSplinePoint(ESplineComponentSnapMode InSnapMode)"
  },
  {
    "label": "OnSnapKeyToActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSnapKeyToActor(const ESplineComponentSnapMode InSnapMode)"
  },
  {
    "label": "OnSnapAllToAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSnapAllToAxis(EAxis::Type InAxis)"
  },
  {
    "label": "OnSnapSelectedToAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSnapSelectedToAxis(EAxis::Type InAxis)"
  },
  {
    "label": "OnStraightenKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStraightenKey(int32 Direction)"
  },
  {
    "label": "StraightenKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StraightenKey(int32 KeyToStraighten, int32 KeyToStraightenToward)"
  },
  {
    "label": "OnToggleSnapTangentAdjustment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleSnapTangentAdjustment()"
  },
  {
    "label": "IsSnapTangentAdjustment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSnapTangentAdjustment()"
  },
  {
    "label": "OnLockAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLockAxis(EAxis::Type InAxis)"
  },
  {
    "label": "IsLockAxisSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLockAxisSet(EAxis::Type InAxis)"
  },
  {
    "label": "OnResetToAutomaticTangent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetToAutomaticTangent(EInterpCurveMode Mode)"
  },
  {
    "label": "CanResetToAutomaticTangent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResetToAutomaticTangent(EInterpCurveMode Mode)"
  },
  {
    "label": "OnSetKeyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetKeyType(EInterpCurveMode Mode)"
  },
  {
    "label": "IsKeyTypeSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKeyTypeSet(EInterpCurveMode Mode)"
  },
  {
    "label": "OnSetVisualizeRollAndScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetVisualizeRollAndScale()"
  },
  {
    "label": "IsVisualizingRollAndScale()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisualizingRollAndScale()"
  },
  {
    "label": "OnSetDiscontinuousSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetDiscontinuousSpline()"
  },
  {
    "label": "IsDiscontinuousSpline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDiscontinuousSpline()"
  },
  {
    "label": "OnToggleClosedLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleClosedLoop()"
  },
  {
    "label": "IsClosedLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClosedLoop()"
  },
  {
    "label": "OnResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetToDefault()"
  },
  {
    "label": "CanResetToDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResetToDefault()"
  },
  {
    "label": "OnSelectFirstLastSplinePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectFirstLastSplinePoint(bool bFirstPoint)"
  },
  {
    "label": "OnSelectAllSplinePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectAllSplinePoints()"
  },
  {
    "label": "CanSelectSplinePoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectSplinePoints()"
  },
  {
    "label": "GenerateSelectSplinePointsSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSelectSplinePointsSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GenerateSplinePointTypeSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSplinePointTypeSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GenerateTangentTypeSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateTangentTypeSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GenerateSnapAlignSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSnapAlignSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "GenerateLockAxisSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateLockAxisSubMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "SetEditedSplineComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditedSplineComponent(const USplineComponent* InSplineComponent)"
  },
  {
    "label": "CreateSplineGeneratorPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSplineGeneratorPanel()"
  },
  {
    "label": "OnDeselectedInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeselectedInEditor(TObjectPtr<USplineComponent> SplineComponent)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  }
]