[
  {
    "label": "Subtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Subtractor"
  },
  {
    "label": "FilterMisadjustmentEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilterMisadjustmentEstimator"
  },
  {
    "label": "Subtractor()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_SUBTRACTOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_SUBTRACTOR_H_ # include<math . h> # include<stddef . h> # include<array> # include<vector> # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / adaptive_fir_filter . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / aec3_fft . h \" # include \" modules / audio_processing / aec3 / aec_state . h \" # include \" modules / audio_processing / aec3 / block . h \" # include \" modules / audio_processing / aec3 / coarse_filter_update_gain . h \" # include \" modules / audio_processing / aec3 / echo_path_variability . h \" # include \" modules / audio_processing / aec3 / refined_filter_update_gain . h \" # include \" modules / audio_processing / aec3 / render_buffer . h \" # include \" modules / audio_processing / aec3 / render_signal_analyzer . h \" # include \" modules / audio_processing / aec3 / subtractor_output . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" # include \" rtc_base / checks . h \" namespace webrtc { class Subtractor { public :)",
    "insertText": "Subtractor(const EchoCanceller3Config& config, size_t num_render_channels, size_t num_capture_channels, ApmDataDumper* data_dumper, Aec3Optimization optimization)"
  },
  {
    "label": "Subtractor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Subtractor()"
  },
  {
    "label": "Subtractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subtractor(const Subtractor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Subtractor&)",
    "insertText": "operator(const Subtractor&)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(const RenderBuffer& render_buffer, const Block& capture, const RenderSignalAnalyzer& render_signal_analyzer, const AecState& aec_state, rtc::ArrayView<SubtractorOutput> outputs)"
  },
  {
    "label": "HandleEchoPathChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEchoPathChange(const EchoPathVariability& echo_path_variability)"
  },
  {
    "label": "ExitInitialState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitInitialState()"
  },
  {
    "label": "FilterFrequencyResponses()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::vector<std::array<float,kFftLengthBy2Plus1>>>&)",
    "insertText": "FilterFrequencyResponses()"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (data_dumper_ ->)",
    "insertText": "DumpRaw(\"aec3_subtractor_h_refined\", rtc::ArrayView<const float>( refined_impulse_responses_[0].data(), GetTimeDomainLength( refined_filters_[0]->max_filter_size_partitions())))"
  },
  {
    "label": "RTC_DCHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GT(coarse_impulse_responses_.size(), 0)"
  },
  {
    "label": "DumpRaw()",
    "kind": "Method",
    "detail": "Function (data_dumper_ ->)",
    "insertText": "DumpRaw(\"aec3_subtractor_h_coarse\", rtc::ArrayView<const float>( coarse_impulse_responses_[0].data(), GetTimeDomainLength( coarse_filter_[0]->max_filter_size_partitions())))"
  },
  {
    "label": "DumpFilter()",
    "kind": "Method",
    "detail": "Function (} refined_filters_ [ 0 ] ->)",
    "insertText": "DumpFilter(\"aec3_subtractor_H_refined\")"
  },
  {
    "label": "DumpFilter()",
    "kind": "Method",
    "detail": "Function (coarse_filter_ [ 0 ] ->)",
    "insertText": "DumpFilter(\"aec3_subtractor_H_coarse\")"
  },
  {
    "label": "FilterMisadjustmentEstimator()",
    "kind": "Method",
    "detail": "Function (} private : class FilterMisadjustmentEstimator { public :)",
    "insertText": "FilterMisadjustmentEstimator()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const SubtractorOutput& output)"
  },
  {
    "label": "GetMisadjustment()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMisadjustment()"
  },
  {
    "label": "RTC_DCHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GT(inv_misadjustment_, 0.0f)"
  },
  {
    "label": "IsAdjustmentNeeded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAdjustmentNeeded()"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dump(ApmDataDumper* data_dumper)"
  }
]