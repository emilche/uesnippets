[
  {
    "label": "SimulatedSequenceRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulatedSequenceRunner"
  },
  {
    "label": "SimulatedTimeControllerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulatedTimeControllerImpl"
  },
  {
    "label": "TokenTaskQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TokenTaskQueue"
  },
  {
    "label": "GlobalSimulatedTimeController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalSimulatedTimeController"
  },
  {
    "label": "SimulatedSequenceRunner()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_TIME_CONTROLLER_SIMULATED_TIME_CONTROLLER_H_ # define TEST_TIME_CONTROLLER_SIMULATED_TIME_CONTROLLER_H_ # include<list> # include<memory> # include<unordered_set> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / sequence_checker . h \" # include \" api / test / time_controller . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / fake_clock . h \" # include \" rtc_base / platform_thread_types . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / synchronization / yield_policy . h \" namespace webrtc { namespace sim_time_impl { class SimulatedSequenceRunner { public : ~)",
    "insertText": "SimulatedSequenceRunner()"
  },
  {
    "label": "GetNextRunTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "GetNextRunTime()"
  },
  {
    "label": "RunReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunReady(Timestamp at_time)"
  },
  {
    "label": "GetAsTaskQueue()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase*)",
    "insertText": "GetAsTaskQueue()"
  },
  {
    "label": "SimulatedTimeControllerImpl()",
    "kind": "Method",
    "detail": "Function (} ; class SimulatedTimeControllerImpl : public TaskQueueFactory,public rtc::YieldInterface { public :)",
    "insertText": "SimulatedTimeControllerImpl(Timestamp start_time)"
  },
  {
    "label": "SimulatedTimeControllerImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimulatedTimeControllerImpl()"
  },
  {
    "label": "CreateTaskQueue()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<TaskQueueBase,TaskQueueDeleter>)",
    "insertText": "CreateTaskQueue(absl::string_view name, Priority priority) const RTC_LOCKS_EXCLUDED(time_lock_)"
  },
  {
    "label": "YieldExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "YieldExecution() RTC_LOCKS_EXCLUDED(time_lock_, lock_)"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::Thread>)",
    "insertText": "CreateThread(const std::string& name, std::unique_ptr<rtc::SocketServer> socket_server) RTC_LOCKS_EXCLUDED(time_lock_, lock_)"
  },
  {
    "label": "RunReadyRunners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunReadyRunners() RTC_LOCKS_EXCLUDED(time_lock_, lock_)"
  },
  {
    "label": "CurrentTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "CurrentTime() const RTC_LOCKS_EXCLUDED(time_lock_)"
  },
  {
    "label": "NextRunTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "NextRunTime() const RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceTime(Timestamp target_time) RTC_LOCKS_EXCLUDED(time_lock_)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(SimulatedSequenceRunner* runner) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(SimulatedSequenceRunner* runner) RTC_LOCKS_EXCLUDED(lock_)"
  },
  {
    "label": "StartYield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartYield(TaskQueueBase* yielding_from)"
  },
  {
    "label": "StopYield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopYield(TaskQueueBase* yielding_from)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (private : const rtc::PlatformThreadId thread_id_ ; const std::unique_ptr<rtc::Thread> dummy_thread_ = rtc::)",
    "insertText": "Create()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex time_lock_ ; Timestamp current_time_)",
    "insertText": "RTC_GUARDED_BY(time_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex lock_ ; std::vector<SimulatedSequenceRunner*> runners_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (std::unordered_set<TaskQueueBase*> yielded_ ; } ; } class TokenTaskQueue : public TaskQueueBase { public : using CurrentTaskQueueSetter = TaskQueueBase::CurrentTaskQueueSetter ; void)",
    "insertText": "Delete()"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostTask(absl::AnyInvocable<void() &&>)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostDelayedTask(absl::AnyInvocable<void() &&> , TimeDelta)"
  },
  {
    "label": "PostDelayedHighPrecisionTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostDelayedHighPrecisionTask(absl::AnyInvocable<void() &&> , TimeDelta)"
  },
  {
    "label": "GlobalSimulatedTimeController()",
    "kind": "Method",
    "detail": "Function (} } ; class GlobalSimulatedTimeController : public TimeController { public :)",
    "insertText": "GlobalSimulatedTimeController(Timestamp start_time)"
  },
  {
    "label": "GlobalSimulatedTimeController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GlobalSimulatedTimeController()"
  },
  {
    "label": "GetClock()",
    "kind": "Method",
    "detail": "Function (Clock*)",
    "insertText": "GetClock()"
  },
  {
    "label": "GetTaskQueueFactory()",
    "kind": "Method",
    "detail": "Function (TaskQueueFactory*)",
    "insertText": "GetTaskQueueFactory()"
  },
  {
    "label": "CreateThread()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<rtc::Thread>)",
    "insertText": "CreateThread(const std::string& name, std::unique_ptr<rtc::SocketServer> socket_server)"
  },
  {
    "label": "GetMainThread()",
    "kind": "Method",
    "detail": "Function (rtc::Thread*)",
    "insertText": "GetMainThread()"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceTime(TimeDelta duration)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(sim_time_impl::SimulatedSequenceRunner* runner)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(sim_time_impl::SimulatedSequenceRunner* runner)"
  }
]