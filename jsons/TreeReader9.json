[
  {
    "label": "Vec2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vec2"
  },
  {
    "label": "Vec3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vec3"
  },
  {
    "label": "Vec4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vec4"
  },
  {
    "label": "SVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SVertex"
  },
  {
    "label": "SDrawCall",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDrawCall"
  },
  {
    "label": "SBone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBone"
  },
  {
    "label": "CLod",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CLod"
  },
  {
    "label": "CMaterialMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMaterialMap"
  },
  {
    "label": "CMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMaterial"
  },
  {
    "label": "CBillboardInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBillboardInfo"
  },
  {
    "label": "CCollisionObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCollisionObject"
  },
  {
    "label": "CWindConfigCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CWindConfigCommon"
  },
  {
    "label": "CWindConfigSDK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CWindConfigSDK"
  },
  {
    "label": "CBranch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CBranch"
  },
  {
    "label": "CRipple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CRipple"
  },
  {
    "label": "CTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTree"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DataBuffer . h \" # ifdef ST_SETS_PACKING_INTERNALLY # pragma)",
    "insertText": "pack(push, 4)"
  },
  {
    "label": "Vertices()",
    "kind": "Method",
    "detail": "Function (namespace GameEngine9 { struct Vec2 { st_float32 x,y ; } ; struct Vec3 { st_float32 x,y,z ; } ; struct Vec4 { st_float32 x,y,z,w ; } ; struct SVertex { Vec3 m_vAnchor ; Vec3 m_vOffset ; Vec3 m_vLodOffset ; Vec3 m_vNormal ; Vec3 m_vTangent ; Vec3 m_vBinormal ; Vec2 m_vTexCoord ; Vec2 m_vLightmapTexCoord ; Vec3 m_vColor ; st_float32 m_fAmbientOcclusion ; st_float32 m_fBlendWeight ; Vec3 m_vBranchWind1 ; Vec3 m_vBranchWind2 ; st_float32 m_fRippleWeight ; st_bool m_bCameraFacing ; st_uint32 m_uiBoneID ; } ; struct SDrawCall { st_uint32 m_uiMaterialIndex ; st_bool m_bContainsFacingGeometry ; st_uint32 m_uiIndexStart ; st_uint32 m_uiIndexCount ; } ; struct SBone { st_uint32 m_uiID ; st_uint32 m_uiParentID ; Vec3 m_vStart ; Vec3 m_vEnd ; float m_fRadius ; } ; class CLod : public CTable { public : ST_INLINE CArray<SVertex>)",
    "insertText": "Vertices(void)"
  },
  {
    "label": "Indices()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<st_uint32>)",
    "insertText": "Indices(void)"
  },
  {
    "label": "DrawCalls()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<SDrawCall>)",
    "insertText": "DrawCalls(void)"
  },
  {
    "label": "Used()",
    "kind": "Method",
    "detail": "Function (} } ; class CMaterialMap : public CTable { public : ST_INLINE st_bool)",
    "insertText": "Used(void)"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CString)",
    "insertText": "Path(void)"
  },
  {
    "label": "Color()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE Vec4)",
    "insertText": "Color(void)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} } ; class CMaterial : public CTable { public : ST_INLINE CString)",
    "insertText": "Name(void)"
  },
  {
    "label": "TwoSided()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "TwoSided(void)"
  },
  {
    "label": "FlipNormalsOnBackside()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "FlipNormalsOnBackside(void)"
  },
  {
    "label": "Billboard()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "Billboard(void)"
  },
  {
    "label": "Maps()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CTableArray<CMaterialMap>)",
    "insertText": "Maps(void)"
  },
  {
    "label": "LastLodIsBillboard()",
    "kind": "Method",
    "detail": "Function (} } ; class CBillboardInfo : public CTable { public : ST_INLINE st_bool)",
    "insertText": "LastLodIsBillboard(void)"
  },
  {
    "label": "IncludesTopDown()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "IncludesTopDown(void)"
  },
  {
    "label": "SideViewCount()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_uint32)",
    "insertText": "SideViewCount(void)"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (} } ; class CCollisionObject : public CTable { public : ST_INLINE Vec3)",
    "insertText": "Position(void)"
  },
  {
    "label": "Position2()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE Vec3)",
    "insertText": "Position2(void)"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE float)",
    "insertText": "Radius(void)"
  },
  {
    "label": "UserData()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CString)",
    "insertText": "UserData(void)"
  },
  {
    "label": "StrengthResponse()",
    "kind": "Method",
    "detail": "Function (} } ; class CWindConfigCommon : public CTable { public : ST_INLINE st_float32)",
    "insertText": "StrengthResponse(void)"
  },
  {
    "label": "DirectionResponse()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "DirectionResponse(void)"
  },
  {
    "label": "GustFrequency()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GustFrequency(void)"
  },
  {
    "label": "GustStrengthMin()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GustStrengthMin(void)"
  },
  {
    "label": "GustStrengthMax()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GustStrengthMax(void)"
  },
  {
    "label": "GustDurationMin()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GustDurationMin(void)"
  },
  {
    "label": "GustDurationMax()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GustDurationMax(void)"
  },
  {
    "label": "GustRiseScalar()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GustRiseScalar(void)"
  },
  {
    "label": "GustFallScalar()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "GustFallScalar(void)"
  },
  {
    "label": "CurrentStrength()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "CurrentStrength(void)"
  },
  {
    "label": "Bend()",
    "kind": "Method",
    "detail": "Function (} } ; class CWindConfigSDK : public CTable { public : class CBranch : public CTable { public : ST_INLINE CArray<st_float32>)",
    "insertText": "Bend(void)"
  },
  {
    "label": "Oscillation()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<st_float32>)",
    "insertText": "Oscillation(void)"
  },
  {
    "label": "Speed()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<st_float32>)",
    "insertText": "Speed(void)"
  },
  {
    "label": "Turbulence()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<st_float32>)",
    "insertText": "Turbulence(void)"
  },
  {
    "label": "Flexibility()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<st_float32>)",
    "insertText": "Flexibility(void)"
  },
  {
    "label": "Independence()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "Independence(void)"
  },
  {
    "label": "Planar()",
    "kind": "Method",
    "detail": "Function (} } ; class CRipple : public CTable { public : ST_INLINE CArray<st_float32>)",
    "insertText": "Planar(void)"
  },
  {
    "label": "Directional()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<st_float32>)",
    "insertText": "Directional(void)"
  },
  {
    "label": "Shimmer()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "Shimmer(void)"
  },
  {
    "label": "Common()",
    "kind": "Method",
    "detail": "Function (} } ; ST_INLINE CWindConfigCommon)",
    "insertText": "Common(void)"
  },
  {
    "label": "Shared()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CBranch)",
    "insertText": "Shared(void)"
  },
  {
    "label": "Branch1()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CBranch)",
    "insertText": "Branch1(void)"
  },
  {
    "label": "Branch2()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CBranch)",
    "insertText": "Branch2(void)"
  },
  {
    "label": "Ripple()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CRipple)",
    "insertText": "Ripple(void)"
  },
  {
    "label": "SharedStartHeight()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "SharedStartHeight(void)"
  },
  {
    "label": "Branch1StretchLimit()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "Branch1StretchLimit(void)"
  },
  {
    "label": "Branch2StretchLimit()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_float32)",
    "insertText": "Branch2StretchLimit(void)"
  },
  {
    "label": "DoShared()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "DoShared(void)"
  },
  {
    "label": "DoBranch1()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "DoBranch1(void)"
  },
  {
    "label": "DoBranch2()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "DoBranch2(void)"
  },
  {
    "label": "DoRipple()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "DoRipple(void)"
  },
  {
    "label": "DoShimmer()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "DoShimmer(void)"
  },
  {
    "label": "VersionMajor()",
    "kind": "Method",
    "detail": "Function (} } ; class CTree : public CReader { public : ST_INLINE st_uint32)",
    "insertText": "VersionMajor(void)"
  },
  {
    "label": "VersionMinor()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_uint32)",
    "insertText": "VersionMinor(void)"
  },
  {
    "label": "Lods()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CTableArray<CLod>)",
    "insertText": "Lods(void)"
  },
  {
    "label": "BillboardInfo()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CBillboardInfo)",
    "insertText": "BillboardInfo(void)"
  },
  {
    "label": "CollisionObjects()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CTableArray<CCollisionObject>)",
    "insertText": "CollisionObjects(void)"
  },
  {
    "label": "Materials()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CTableArray<CMaterial>)",
    "insertText": "Materials(void)"
  },
  {
    "label": "LightmapSize()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_uint32)",
    "insertText": "LightmapSize(void)"
  },
  {
    "label": "TexturePacker()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CString)",
    "insertText": "TexturePacker(void)"
  },
  {
    "label": "Wind()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CWindConfigSDK)",
    "insertText": "Wind(void)"
  },
  {
    "label": "Bones()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<SBone>)",
    "insertText": "Bones(void)"
  },
  {
    "label": "FileToken()",
    "kind": "Method",
    "detail": "Function (} protected : ST_INLINE const st_char*)",
    "insertText": "FileToken(void)"
  }
]