[
  {
    "label": "FScopedLambda",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedLambda"
  },
  {
    "label": "SanitizeName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" namespace UE::Interchange { void)",
    "insertText": "SanitizeName(FString& OutName, bool bIsJoint = false)"
  },
  {
    "label": "MakeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MakeName(const FString& InName, bool bIsJoint = false)"
  },
  {
    "label": "FScopedLambda()",
    "kind": "Method",
    "detail": "Function (class FScopedLambda { public :)",
    "insertText": "FScopedLambda(TFunction<void(void)>&& Lambda) : _Lambda(Lambda)"
  },
  {
    "label": "FScopedLambda()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedLambda()"
  },
  {
    "label": "_Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Lambda()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } private : TFunction<)",
    "insertText": "void(void)"
  }
]