[
  {
    "label": "BinaryWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryWriter"
  },
  {
    "label": "StackBinaryWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StackBinaryWriter"
  },
  {
    "label": "BinaryReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinaryReader"
  },
  {
    "label": "StackBinaryReader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StackBinaryReader"
  },
  {
    "label": "WriteByte()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaHash . h \" # include \" UbaStringBuffer . h \" namespace uba { struct BinaryWriter { void)",
    "insertText": "WriteByte(u8 value)"
  },
  {
    "label": "WriteBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBytes(const void* data, u64 size)"
  },
  {
    "label": "WriteU16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteU16(u16 value)"
  },
  {
    "label": "WriteU32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteU32(u32 value)"
  },
  {
    "label": "WriteU64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteU64(u64 value)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(const tchar* str)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(const tchar* str, u64 len)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(const StringView& str)"
  },
  {
    "label": "WriteStringf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringf(const tchar* format, ...)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(const TString& str)"
  },
  {
    "label": "WriteStringKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringKey(const StringKey& g)"
  },
  {
    "label": "WriteGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteGuid(const Guid& g)"
  },
  {
    "label": "WriteCasKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCasKey(const CasKey& casKey)"
  },
  {
    "label": "Write7BitEncoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write7BitEncoded(u64 value)"
  },
  {
    "label": "WriteBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBool(bool value)"
  },
  {
    "label": "WriteByte()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteByte(value ? 1 : 0)"
  },
  {
    "label": "WriteUtf8String()",
    "kind": "Method",
    "detail": "Function (} template<CharType> void)",
    "insertText": "WriteUtf8String(const CharType* str, u64 len)"
  },
  {
    "label": "AllocWrite()",
    "kind": "Method",
    "detail": "Function (u8*)",
    "insertText": "AllocWrite(u64 bytes)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetPosition()"
  },
  {
    "label": "GetCapacityLeft()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "GetCapacityLeft()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} u8*)",
    "insertText": "GetData()"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (u64 offset =)",
    "insertText": "u64(m_pos - m_begin)"
  },
  {
    "label": "BinaryWriter()",
    "kind": "Method",
    "detail": "Function (m_begin = newData ; m_pos = newData + offset ; m_end = newData + newCapacity ; })",
    "insertText": "BinaryWriter(u8* data, u64 offset = 0, u64 capacity = InvalidValue)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (m_begin = data ; m_pos = data + offset ; m_end = data + capacity ; } void)",
    "insertText": "Flush(bool waitOnResponse = true)"
  },
  {
    "label": "BinaryWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BinaryWriter()"
  },
  {
    "label": "StackBinaryWriter()",
    "kind": "Method",
    "detail": "Function (private : u8* m_begin ; u8* m_pos ; u8* m_end ; } ; template<u32 Capacity> struct StackBinaryWriter : BinaryWriter {)",
    "insertText": "StackBinaryWriter() : BinaryWriter(buffer, 0, Capacity)"
  },
  {
    "label": "ReadBytes()",
    "kind": "Method",
    "detail": "Function (} u8 buffer [ Capacity ] ; } ; struct BinaryReader { void)",
    "insertText": "ReadBytes(void* data, u64 size)"
  },
  {
    "label": "ReadByte()",
    "kind": "Method",
    "detail": "Function (u8)",
    "insertText": "ReadByte()"
  },
  {
    "label": "ReadU16()",
    "kind": "Method",
    "detail": "Function (u16)",
    "insertText": "ReadU16()"
  },
  {
    "label": "ReadU32()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "ReadU32()"
  },
  {
    "label": "ReadU64()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "ReadU64()"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "ReadString(tchar* str, u64 strCapacity)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadString(StringBufferBase& out)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (TString)",
    "insertText": "ReadString()"
  },
  {
    "label": "SkipString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipString()"
  },
  {
    "label": "ReadStringKey()",
    "kind": "Method",
    "detail": "Function (StringKey)",
    "insertText": "ReadStringKey()"
  },
  {
    "label": "ReadGuid()",
    "kind": "Method",
    "detail": "Function (Guid)",
    "insertText": "ReadGuid()"
  },
  {
    "label": "ReadCasKey()",
    "kind": "Method",
    "detail": "Function (CasKey)",
    "insertText": "ReadCasKey()"
  },
  {
    "label": "ReadBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBool()"
  },
  {
    "label": "Read7BitEncoded()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "Read7BitEncoded()"
  },
  {
    "label": "ReadUtf8Char()",
    "kind": "Method",
    "detail": "Function (template<CharType> CharType)",
    "insertText": "ReadUtf8Char()"
  },
  {
    "label": "PeekU32()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "PeekU32()"
  },
  {
    "label": "PeekU64()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "PeekU64()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Skip(u64 size)"
  },
  {
    "label": "GetLeft()",
    "kind": "Method",
    "detail": "Function (} u64)",
    "insertText": "GetLeft()"
  },
  {
    "label": "SetPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPosition(u64 pos)"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (m_pos = m_begin + pos ; } void)",
    "insertText": "SetSize(u64 size)"
  },
  {
    "label": "GetPositionData()",
    "kind": "Method",
    "detail": "Function (m_end = m_begin + size ; } const u8*)",
    "insertText": "GetPositionData()"
  },
  {
    "label": "BinaryReader()",
    "kind": "Method",
    "detail": "Function (m_begin = data ; m_pos = data + offset ; m_end = data + size ; })",
    "insertText": "BinaryReader()"
  },
  {
    "label": "InternalReadString()",
    "kind": "Method",
    "detail": "Function (protected : u64)",
    "insertText": "InternalReadString(tchar* str, u64 charLen)"
  },
  {
    "label": "StackBinaryReader()",
    "kind": "Method",
    "detail": "Function (const u8* m_begin ; const u8* m_pos ; const u8* m_end ; } ; template<u32 Capacity> struct StackBinaryReader : BinaryReader {)",
    "insertText": "StackBinaryReader() : BinaryReader(buffer, 0, Capacity)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (* buffer = 0 ; } StackBinaryReader&)",
    "insertText": "Reset()"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (m_pos = m_begin ; m_end = buffer + Capacity ; return* this ; } u8 buffer [ Capacity ] ; } ; # define)",
    "insertText": "UBA_ASSERT_WRITE(size) UBA_ASSERTF(m_pos + size <= m_end, TC(\"BinaryWriter overflow. Written: %llu, Capacity: %llu, Trying to write: %llu\"), u64(m_pos - m_begin), u64(m_end - m_begin), u64(size)) #define UBA_ASSERT_READ(size) UBA_ASSERTF(m_pos + size <= m_end, TC(\"BinaryReader overflow. Read: %llu, Size: %llu, Trying to read: %llu\"), u64(m_pos - m_begin), u64(m_end - m_begin), u64(size)) void BinaryWriter::WriteByte(u8 value)"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(1)"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_pos, data, size)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(str)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(str, u64(TStrlen(str)))"
  },
  {
    "label": "GetUtf8WrittenBytes()",
    "kind": "Method",
    "detail": "Function (} template<CharType> u64)",
    "insertText": "GetUtf8WrittenBytes(const CharType* str, u64 strlen)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (u64 actualBytes = 0 ;)",
    "insertText": "for(const CharType* i = str, *e = str + strlen; i != e; ++i)"
  },
  {
    "label": "u16()",
    "kind": "Method",
    "detail": "Function (u16 c =)",
    "insertText": "u16(*i)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (u8 count = 0 ; do { + + count ; value>> = 7 ; })",
    "insertText": "while(value > 0)"
  },
  {
    "label": "GetUtf8WrittenBytes()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS u64 actualBytes =)",
    "insertText": "GetUtf8WrittenBytes(str, len)"
  },
  {
    "label": "Get7BitEncodedCount()",
    "kind": "Method",
    "detail": "Function (# else u64 actualBytes = len ; # endif return)",
    "insertText": "Get7BitEncodedCount(len)"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(GetUtf8WrittenBytes(str, len))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int c =* i ;)",
    "insertText": "if(c < 128) *m_pos++ = u8(c)"
  },
  {
    "label": "u8()",
    "kind": "Method",
    "detail": "Function (* m_pos + + =)",
    "insertText": "u8(c / 64 + 192)"
  },
  {
    "label": "u8()",
    "kind": "Method",
    "detail": "Function (* m_pos + + =)",
    "insertText": "u8(c % 64 + 128)"
  },
  {
    "label": "u8()",
    "kind": "Method",
    "detail": "Function (} else {* m_pos + + =)",
    "insertText": "u8(c / 4096 + 224)"
  },
  {
    "label": "u8()",
    "kind": "Method",
    "detail": "Function (* m_pos + + =)",
    "insertText": "u8((c / 64) % 64 + 128)"
  },
  {
    "label": "u8()",
    "kind": "Method",
    "detail": "Function (* m_pos + + =)",
    "insertText": "u8((c % 64) + 128)"
  },
  {
    "label": "Write7BitEncoded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write7BitEncoded(len)"
  },
  {
    "label": "WriteUtf8String()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUtf8String(str, len)"
  },
  {
    "label": "WriteBytes()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "WriteBytes(str, len)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(str.data, str.count)"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (va_list arg ;)",
    "insertText": "va_start(arg, format)"
  },
  {
    "label": "Tvsprintf_s()",
    "kind": "Method",
    "detail": "Function (tchar buffer [ 1 0 2 4 ] ; int done =)",
    "insertText": "Tvsprintf_s(buffer, 1024, format, arg)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(done >= 0)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(arg)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(buffer)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(str.c_str(), str.size())"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(16)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (u64*)",
    "insertText": "v(u64*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (m_pos + =)",
    "insertText": "sizeof(u64)"
  },
  {
    "label": "WriteStringKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteStringKey(const StringKey& key)"
  },
  {
    "label": "WriteCasKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteCasKey(const CasKey& key)"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(20)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (m_pos + =)",
    "insertText": "sizeof(u64) * 2 + sizeof(u32)"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(sizeof(u32))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (m_pos + =)",
    "insertText": "sizeof(u32)"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(sizeof(u16))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (m_pos + =)",
    "insertText": "sizeof(u16)"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(sizeof(u64))"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(Get7BitEncodedCount(value))"
  },
  {
    "label": "UBA_ASSERT_WRITE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_WRITE(bytes)"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(size)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(data, m_pos, size)"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(sizeof(u8))"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(sizeof(u16))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (u16)",
    "insertText": "value(u16*)"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(sizeof(u32))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "value(u32*)"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(sizeof(u64))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "value(u64*)"
  },
  {
    "label": "UBA_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERTF(charLen < strCapacity - 1, TC(\"Strlen: %llu, Capacity: %llu\"), charLen, strCapacity)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS tchar* it = str ; u64 left = charLen ;)",
    "insertText": "while(left--)"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u8 a =* m_pos + + ;)",
    "insertText": "if(a <= 127)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u8 b =* m_pos + + ;)",
    "insertText": "if(a >= 192 && a <= 223)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "it(a-192)*64 + (b-128)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u8 c =* m_pos + + ;)",
    "insertText": "if(a >= 224 && a <= 239)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "it(a-224)*4096 + (b-128)*64 + (c-128)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(a >= 240 && a <= 253)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(false)"
  },
  {
    "label": "tchar()",
    "kind": "Method",
    "detail": "Function (* it + + =)",
    "insertText": "tchar(~0)"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (}* it = 0 ; return)",
    "insertText": "u64(it - str)"
  },
  {
    "label": "ReadBytes()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "ReadBytes(str, charLen)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (out . count + =)",
    "insertText": "u32(ReadString(out.data + out.count, (out.capacity - out.count)))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "resize(len)"
  },
  {
    "label": "InternalReadString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalReadString((tchar*)res.data(), len)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Skip(len)"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(sizeof(Guid))"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (u64 g [ 2 ] ;)",
    "insertText": "g(u64*)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "g((u64*)m_pos)"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(sizeof(StringKey))"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (StringKey k ; k .)",
    "insertText": "a(u64*)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (k .)",
    "insertText": "b((u64*)m_pos)"
  },
  {
    "label": "UBA_ASSERT_READ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT_READ(sizeof(CasKey))"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (k .)",
    "insertText": "c((u32*)m_pos)"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (u8 value =* m_pos + + ; hasMoreBytes = value& 0 x80 ; result | =)",
    "insertText": "u64(value & 0x7f) << (byteIndex * 7)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + byteIndex ; })",
    "insertText": "while(hasMoreBytes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u8 a =* m_pos + + ;)",
    "insertText": "if(a <= 127) return CharType(a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u8 b =* m_pos + + ;)",
    "insertText": "if(a >= 192 && a <= 223) return CharType((a-192)*64 + (b-128))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u8 c =* m_pos + + ;)",
    "insertText": "if(a >= 224 && a <= 239) return CharType((a-224)*4096 + (b-128)*64 + (c-128))"
  }
]