[
  {
    "label": "TAttributeBlendOperator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttributeBlendOperator"
  },
  {
    "label": "FNonBlendableAttributeBlendOperator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNonBlendableAttributeBlendOperator"
  },
  {
    "label": "Accumulate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AttributeBlendData . h \" # include \" Animation / AttributeTraits . h \" # include \" Animation / IAttributeBlendOperator . h \" # include \" Animation / CustomAttributes . h \" # include \" Templates / EnableIf . h \" # include \" HAL / Platform . h \" namespace UE { namespace Anim { template<AttributeType> class TAttributeBlendOperator : public IAttributeBlendOperator { public : void)",
    "insertText": "Accumulate(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (Accumulate_Internal<)",
    "insertText": "AttributeType(BlendData, OutAttributes)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Interpolate(const void* FromData, const void* ToData, float Alpha, void* InOutData)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (Interpolate_Internal<)",
    "insertText": "AttributeType(FromData, ToData, Alpha, InOutData)"
  },
  {
    "label": "Override()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Override(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "Blend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Blend(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "BlendPerBone()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlendPerBone(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "ConvertToAdditive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConvertToAdditive(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAdditiveAttributes)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (ConvertToAdditive_Internal<)",
    "insertText": "AttributeType(BlendData, OutAdditiveAttributes)"
  },
  {
    "label": "Blend_Internal()",
    "kind": "Method",
    "detail": "Function (} protected : template<Type> TEnableIf<TAttributeTypeTraits<Type>::IsBlendable,void>::Type)",
    "insertText": "Blend_Internal(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachAttributeSet<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TAttributeSetIterator<AttributeType>& It) -> void { const FAttributeId& Identifier = It.GetIdentifier(); const ECustomAttributeBlendType BlendType = Attributes::GetAttributeBlendType(Identifier); AttributeType* OutAttributePtr = OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = (*OutAttributePtr); if (BlendType == ECustomAttributeBlendType::Override) { OutAttribute = It.GetHighestWeightedValue(); } else { while (It.Next()) { const AttributeType& Attribute = It.GetValue(); const float AttributeWeight = It.GetWeight(); if (It.GetIndex() == 0) { OutAttribute = Attribute; OutAttribute = Attribute.Multiply(AttributeWeight); } else { OutAttribute.Accumulate(Attribute, AttributeWeight, It.GetAdditiveType()); } } if constexpr (UE::Anim::TAttributeTypeTraits<AttributeType>::RequiresNormalization) { OutAttribute.Normalize(); } } })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const AttributeType& Attribute = It.GetValue(); const float AttributeWeight = It.GetWeight(); const FAttributeId& Identifier = It.GetIdentifier(); const ECustomAttributeBlendType BlendType = Attributes::GetAttributeBlendType(Identifier); AttributeType* OutAttributePtr = OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = (*OutAttributePtr); if (BlendType == ECustomAttributeBlendType::Override) { OutAttribute = Attribute; } else { OutAttribute = Attribute.Multiply(AttributeWeight); } if constexpr (UE::Anim::TAttributeTypeTraits<AttributeType>::RequiresNormalization) { OutAttribute.Normalize(); } } })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachAttributeSet<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TAttributeSetIterator<AttributeType>& It) -> void { const FAttributeId& Identifier = It.GetIdentifier(); const ECustomAttributeBlendType BlendType = Attributes::GetAttributeBlendType(Identifier); OutAttributes->Add<AttributeType>(Identifier, It.GetHighestWeightedValue()); })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const FAttributeId& Identifier = It.GetIdentifier(); OutAttributes->Add<AttributeType>(Identifier, It.GetValue()); } })"
  },
  {
    "label": "BlendPerBone_Internal()",
    "kind": "Method",
    "detail": "Function (} template<Type> TEnableIf<TAttributeTypeTraits<Type>::IsBlendable,void>::Type)",
    "insertText": "BlendPerBone_Internal(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachAttributeSet<)",
    "insertText": "AttributeType([this, OutAttributes](typename FAttributeBlendData::template TAttributeSetIterator<AttributeType>& It) -> void { const FAttributeId& Identifier = It.GetIdentifier(); const ECustomAttributeBlendType BlendType = Attributes::GetAttributeBlendType(Identifier); const int32 ExistingIndex = OutAttributes->IndexOfByKey<AttributeType>(Identifier); AttributeType* OutAttributePtr = OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = *OutAttributePtr; if (BlendType == ECustomAttributeBlendType::Override) { OutAttribute = It.GetHighestBoneWeightedValue(); } else { while (It.Next()) { const float AttributeWeight = It.GetBoneWeight(); const AttributeType& Attribute = It.GetValue(); if (FAnimWeight::IsFullWeight(AttributeWeight)) { OutAttribute = Attribute; break; } else { if (It.GetIndex() == 0 && ExistingIndex == INDEX_NONE) { OutAttribute = Attribute.Multiply(AttributeWeight); } else { OutAttribute.Accumulate(Attribute, AttributeWeight, It.GetAdditiveType()); } } } if constexpr (UE::Anim::TAttributeTypeTraits<AttributeType>::RequiresNormalization) { OutAttribute.Normalize(); } } })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAttributes->IndexOfByKey<AttributeType>(Identifier); const float AttributeWeight = It.GetBoneWeight(); AttributeType* OutAttributePtr = OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = *OutAttributePtr; const ECustomAttributeBlendType BlendType = Attributes::GetAttributeBlendType(Identifier); if (BlendType == ECustomAttributeBlendType::Override) { OutAttribute = It.GetValue(); } else { const AttributeType& Attribute = It.GetValue(); if (ExistingIndex == INDEX_NONE) { OutAttribute = Attribute.Multiply(AttributeWeight); } else { OutAttribute.Accumulate(Attribute, AttributeWeight, It.GetAdditiveType()); } } if constexpr (UE::Anim::TAttributeTypeTraits<AttributeType>::RequiresNormalization) { OutAttribute.Normalize(); } } })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachAttributeSet<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TAttributeSetIterator<AttributeType>& It) -> void { const FAttributeId& Identifier = It.GetIdentifier(); AttributeType* OutAttribute = OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType::StaticStruct()->CopyScriptStruct(OutAttribute, &It.GetHighestBoneWeightedValue()); })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAttributes->IndexOfByKey<AttributeType>(Identifier); const float BoneWeight = It.GetBoneWeight(); if (FAnimWeight::IsRelevant(BoneWeight) || ExistingIndex == INDEX_NONE) { AttributeType* OutAttributePtr = OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = *OutAttributePtr; const AttributeType& Attribute = It.GetValue(); const bool bHighestWeight = It.IsHighestBoneWeighted(); if (bHighestWeight || ExistingIndex == INDEX_NONE) { AttributeType::StaticStruct()->CopyScriptStruct(OutAttributePtr, &Attribute); } } } })"
  },
  {
    "label": "Override_Internal()",
    "kind": "Method",
    "detail": "Function (} template<Type> TEnableIf<TAttributeTypeTraits<Type>::IsBlendable,void>::Type)",
    "insertText": "Override_Internal(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const AttributeType& Attribute = It.GetValue(); const FAttributeId& Identifier = It.GetIdentifier(); AttributeType& OutAttribute = *OutAttributes->FindOrAdd<AttributeType>(Identifier); const float AttributeWeight = It.GetWeight(); OutAttribute = Attribute.Multiply(AttributeWeight); if constexpr (UE::Anim::TAttributeTypeTraits<AttributeType>::RequiresNormalization) { OutAttribute.Normalize(); } } })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const AttributeType& Attribute = It.GetValue(); const FAttributeId& Identifier = It.GetIdentifier(); AttributeType& OutAttribute = *OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType::StaticStruct()->CopyScriptStruct(&OutAttribute, &Attribute); } })"
  },
  {
    "label": "Accumulate_Internal()",
    "kind": "Method",
    "detail": "Function (} template<Type> TEnableIf<TAttributeTypeTraits<Type>::IsBlendable,void>::Type)",
    "insertText": "Accumulate_Internal(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAttributes)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const AttributeType& Attribute = It.GetValue(); const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAttributes->IndexOfByKey<AttributeType>(Identifier); AttributeType* OutAttributePtr = OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = *OutAttributePtr; const float AttributeWeight = It.GetWeight(); if (ExistingIndex != INDEX_NONE) { OutAttribute.Accumulate(Attribute, AttributeWeight, It.GetAdditiveType()); } else { OutAttribute = Attribute.Multiply(AttributeWeight); } if constexpr (UE::Anim::TAttributeTypeTraits<AttributeType>::RequiresNormalization) { OutAttribute.Normalize(); } } })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const AttributeType& Attribute = It.GetValue(); const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAttributes->IndexOfByKey<AttributeType>(Identifier); AttributeType* OutAttributePtr = OutAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = *OutAttributePtr; const float AttributeWeight = It.GetWeight(); if (ExistingIndex == INDEX_NONE || AttributeWeight > 0.5f) { AttributeType::StaticStruct()->CopyScriptStruct(OutAttributePtr, &Attribute); } } })"
  },
  {
    "label": "ConvertToAdditive_Internal()",
    "kind": "Method",
    "detail": "Function (} template<Type> TEnableIf<TAttributeTypeTraits<Type>::IsBlendable,void>::Type)",
    "insertText": "ConvertToAdditive_Internal(const FAttributeBlendData& BlendData, FStackAttributeContainer* OutAdditiveAttributes)"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAdditiveAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const AttributeType& Attribute = It.GetValue(); const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAdditiveAttributes->IndexOfByKey<AttributeType>(Identifier); AttributeType* OutAttributePtr = OutAdditiveAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = *OutAttributePtr; OutAttribute.MakeAdditive(Attribute); if constexpr (UE::Anim::TAttributeTypeTraits<AttributeType>::RequiresNormalization) { OutAttribute.Normalize(); } } })"
  },
  {
    "label": "AttributeType()",
    "kind": "Method",
    "detail": "Function (BlendData . ForEachUniqueAttribute<)",
    "insertText": "AttributeType([OutAdditiveAttributes](typename FAttributeBlendData::template TSingleIterator<AttributeType>& It) -> void { while (It.Next()) { const AttributeType& Attribute = It.GetValue(); const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAdditiveAttributes->IndexOfByKey<AttributeType>(Identifier); AttributeType* OutAttributePtr = OutAdditiveAttributes->FindOrAdd<AttributeType>(Identifier); AttributeType& OutAttribute = *OutAttributePtr; const float AttributeWeight = It.GetWeight(); if (ExistingIndex == INDEX_NONE) { AttributeType::StaticStruct()->CopyScriptStruct(OutAttributePtr, &Attribute); } } })"
  },
  {
    "label": "Interpolate_Internal()",
    "kind": "Method",
    "detail": "Function (} template<Type> TEnableIf<TAttributeTypeTraits<Type>::IsBlendable&& ! TAttributeTypeTraits<AttributeType>::StepInterpolate,void>::Type)",
    "insertText": "Interpolate_Internal(const void* FromData, const void* ToData, float Alpha, void* InOutData)"
  },
  {
    "label": "TypedFrom()",
    "kind": "Method",
    "detail": "Function (const AttributeType&)",
    "insertText": "TypedFrom(const AttributeType*)"
  },
  {
    "label": "TypedTo()",
    "kind": "Method",
    "detail": "Function (const AttributeType&)",
    "insertText": "TypedTo(const AttributeType*)"
  },
  {
    "label": "Output()",
    "kind": "Method",
    "detail": "Function (AttributeType&)",
    "insertText": "Output(AttributeType*)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (Output = TypedFrom ; Output .)",
    "insertText": "Interpolate(TypedTo, Alpha)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (Output .)",
    "insertText": "Normalize()"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (const void* CopySource = Alpha> 0 . 5 f ? ToData : FromData ;)",
    "insertText": "StaticStruct()->CopyScriptStruct(InOutData, CopySource)"
  },
  {
    "label": "FNonBlendableAttributeBlendOperator()",
    "kind": "Method",
    "detail": "Function (} } ; class FNonBlendableAttributeBlendOperator : public IAttributeBlendOperator { public :)",
    "insertText": "FNonBlendableAttributeBlendOperator(const UScriptStruct* InScriptStruct) : ScriptStructPtr(InScriptStruct)"
  },
  {
    "label": "ForEachUniqueAttribute()",
    "kind": "Method",
    "detail": "Function (BlendData .)",
    "insertText": "ForEachUniqueAttribute([&, OutAttributes](FAttributeBlendData::TSingleRawIterator& It) -> void { while (It.Next()) { const uint8* Attribute= It.GetValuePtr(); const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAttributes->IndexOfByKey(ScriptStructPtr.Get(), Identifier); uint8* OutAttributePtr = OutAttributes->FindOrAdd(ScriptStructPtr.Get(), Identifier); const float AttributeWeight = It.GetWeight(); if (ExistingIndex == INDEX_NONE || AttributeWeight > 0.5f) { ScriptStructPtr.Get()->CopyScriptStruct(OutAttributePtr, Attribute); } } })"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const void* CopySource = Alpha> 0 . 5 f ? ToData : FromData ; ScriptStructPtr .)",
    "insertText": "Get()->CopyScriptStruct(InOutData, CopySource)"
  },
  {
    "label": "ForEachUniqueAttribute()",
    "kind": "Method",
    "detail": "Function (BlendData .)",
    "insertText": "ForEachUniqueAttribute([&, OutAttributes](FAttributeBlendData::TSingleRawIterator& It) -> void { while (It.Next()) { const uint8* Attribute = It.GetValuePtr(); const FAttributeId& Identifier = It.GetIdentifier(); uint8* OutAttribute = OutAttributes->FindOrAdd(ScriptStructPtr.Get(),Identifier); ScriptStructPtr.Get()->CopyScriptStruct(OutAttribute, Attribute); } })"
  },
  {
    "label": "ForEachAttributeSet()",
    "kind": "Method",
    "detail": "Function (BlendData .)",
    "insertText": "ForEachAttributeSet([&, OutAttributes](FAttributeBlendData::TAttributeSetRawIterator& It) -> void { const FAttributeId& Identifier = It.GetIdentifier(); const ECustomAttributeBlendType BlendType = Attributes::GetAttributeBlendType(Identifier); uint8* OutAttribute = OutAttributes->Add(ScriptStructPtr.Get(), Identifier); ScriptStructPtr.Get()->CopyScriptStruct(OutAttribute, It.GetHighestWeightedValue()); })"
  },
  {
    "label": "ForEachUniqueAttribute()",
    "kind": "Method",
    "detail": "Function (BlendData .)",
    "insertText": "ForEachUniqueAttribute([&, OutAttributes](FAttributeBlendData::TSingleRawIterator& It) -> void { while (It.Next()) { const FAttributeId& Identifier = It.GetIdentifier(); uint8* OutAttribute = OutAttributes->Add(ScriptStructPtr.Get(), Identifier); ScriptStructPtr.Get()->CopyScriptStruct(OutAttribute, It.GetValuePtr()); } })"
  },
  {
    "label": "ForEachAttributeSet()",
    "kind": "Method",
    "detail": "Function (BlendData .)",
    "insertText": "ForEachAttributeSet([&, OutAttributes](FAttributeBlendData::TAttributeSetRawIterator& It) -> void { const FAttributeId& Identifier = It.GetIdentifier(); uint8* OutAttribute = OutAttributes->FindOrAdd(ScriptStructPtr.Get(), Identifier); ScriptStructPtr.Get()->CopyScriptStruct(OutAttribute, It.GetHighestBoneWeightedValue()); })"
  },
  {
    "label": "ForEachUniqueAttribute()",
    "kind": "Method",
    "detail": "Function (BlendData .)",
    "insertText": "ForEachUniqueAttribute([&, OutAttributes](FAttributeBlendData::TSingleRawIterator& It) -> void { while (It.Next()) { const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAttributes->IndexOfByKey(ScriptStructPtr.Get() ,Identifier); const float BoneWeight = It.GetBoneWeight(); if (FAnimWeight::IsRelevant(BoneWeight) || ExistingIndex == INDEX_NONE) { uint8* OutAttributePtr = OutAttributes->FindOrAdd(ScriptStructPtr.Get(), Identifier); const uint8* Attribute = It.GetValuePtr(); const bool bHighestWeight = It.IsHighestBoneWeighted(); if (bHighestWeight || ExistingIndex == INDEX_NONE) { ScriptStructPtr.Get()->CopyScriptStruct(OutAttributePtr, Attribute); } } } })"
  },
  {
    "label": "ForEachUniqueAttribute()",
    "kind": "Method",
    "detail": "Function (BlendData .)",
    "insertText": "ForEachUniqueAttribute([&, OutAdditiveAttributes](FAttributeBlendData::TSingleRawIterator& It) -> void { while (It.Next()) { const uint8* Attribute = It.GetValuePtr(); const FAttributeId& Identifier = It.GetIdentifier(); const int32 ExistingIndex = OutAdditiveAttributes->IndexOfByKey(ScriptStructPtr.Get(), Identifier); uint8* OutAttributePtr = OutAdditiveAttributes->FindOrAdd(ScriptStructPtr.Get(),Identifier); const float AttributeWeight = It.GetWeight(); if (ExistingIndex == INDEX_NONE) { ScriptStructPtr.Get()->CopyScriptStruct(OutAttributePtr, &Attribute); } } })"
  }
]