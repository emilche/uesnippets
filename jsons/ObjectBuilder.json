[
  {
    "label": "TObjectBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObjectBuilder"
  },
  {
    "label": "TPropType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropType"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Build . h \" # if WITH_AUTOMATION_WORKER # include \" Containers / Array . h \" # include \" UObject / UObjectBaseUtility . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / Package . h \" # include \" Components / SpawnHelper . h \")",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(LogObjectBuilder, Log, Log)"
  },
  {
    "label": "TObjectBuilder()",
    "kind": "Method",
    "detail": "Function (template<TUObject> class TObjectBuilder final { public :)",
    "insertText": "TObjectBuilder(UObject* InOwner = static_cast<UObject*>(GetTransientPackage())) : Object(NewObject<TUObject>(InOwner))"
  },
  {
    "label": "TObjectBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TObjectBuilder(FSpawnHelper& Spawner, UClass* Clazz = nullptr) : Object(nullptr)"
  },
  {
    "label": "TUObject()",
    "kind": "Method",
    "detail": "Function (FActorSpawnParameters DeferredConstructionParams ; DeferredConstructionParams . bDeferConstruction = true ; Object =& Spawner . SpawnActor<)",
    "insertText": "TUObject(DeferredConstructionParams, Clazz)"
  },
  {
    "label": "SetParam()",
    "kind": "Method",
    "detail": "Function (} template<T> TObjectBuilder<TUObject>&)",
    "insertText": "SetParam(const FName& InPropertyName, T InValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using Raw = std::decay_t<T> ;)",
    "insertText": "if(!Object)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (* TypeMatched = InValue ; } else {)",
    "insertText": "UE_LOG(LogObjectBuilder, Error, TEXT(\"Container type mismatch: Could not cast from %s to %s\"), *Property->GetCPPType(nullptr, 0), *GetTypeName<Raw>())"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } ; if)",
    "insertText": "constexpr(TIsArray<Raw>::Value)"
  },
  {
    "label": "TrySet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrySet(FindFProperty<FArrayProperty>(Object->GetClass(), InPropertyName))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TIsTMap<Raw>::Value)"
  },
  {
    "label": "TrySet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrySet(FindFProperty<FMapProperty>(Object->GetClass(), InPropertyName))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TIsTSet<Raw>::Value)"
  },
  {
    "label": "TrySet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrySet(FindFProperty<FSetProperty>(Object->GetClass(), InPropertyName))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(auto Property = FindFProperty<FProperty>(Object->GetClass(), InPropertyName))"
  },
  {
    "label": "SetValue_InContainer()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "SetValue_InContainer(Object, &InValue)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogObjectBuilder, Error, TEXT(\"Type mismatch: Tried to set %s property %s on object %s to a %s\"), *Property->GetCPPType(nullptr, 0), *InPropertyName.ToString(), *Object->GetName(), *this->template GetTypeName<Raw>())"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "UE_LOG(LogObjectBuilder, Error, TEXT(\"Failed to find %s property %s on object %s, check type and Property name are correct\"), *GetTypeName<Raw>(), *InPropertyName.ToString(), *Object->GetName())"
  },
  {
    "label": "Spawn()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } template<T = TUObject> T&)",
    "insertText": "Spawn(FTransform InTransform = FTransform::Identity)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto* DefaultObject = NewObject<)",
    "insertText": "T()"
  },
  {
    "label": "FinishSpawning()",
    "kind": "Method",
    "detail": "Function (Object ->)",
    "insertText": "FinishSpawning(InTransform)"
  },
  {
    "label": "AddComponentTo()",
    "kind": "Method",
    "detail": "Function (} auto& ObjectRef =* Object ; Object = nullptr ; return ObjectRef ; } template<TComponent,T = TUObject> TObjectBuilder<TUObject>&)",
    "insertText": "AddComponentTo(TComponent* InComponentToAdd = nullptr)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (Component ->)",
    "insertText": "Rename(nullptr, Object)"
  },
  {
    "label": "TComponent()",
    "kind": "Method",
    "detail": "Function (} else { Component = NewObject<)",
    "insertText": "TComponent(Object)"
  },
  {
    "label": "RegisterComponent()",
    "kind": "Method",
    "detail": "Function (} Component ->)",
    "insertText": "RegisterComponent()"
  },
  {
    "label": "SetChildActorClass()",
    "kind": "Method",
    "detail": "Function (Component ->)",
    "insertText": "SetChildActorClass(TChildActorType::StaticClass())"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (using Raw = std::decay_t<T> ; if)",
    "insertText": "constexpr(std::is_pointer_v<T> && std::is_base_of_v<UObject, std::remove_pointer_t<Raw>>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else if)",
    "insertText": "constexpr(TIsTObjectPtr<Raw>::Value)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else if)",
    "insertText": "constexpr(TIsTArray<Raw>::Value)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (using Key = Raw::KeyInitType ; using Value = Raw::ValueInitType ; return IsCompatibleWith<)",
    "insertText": "Key(*AsProperty->KeyProp) && IsCompatibleWith<Value>(*AsProperty->ValueProp)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else if)",
    "insertText": "constexpr(TIsEnum<Raw>::Value)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else if)",
    "insertText": "constexpr(std::is_base_of_v<UObject, Raw>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else if)",
    "insertText": "constexpr(std::is_same_v<FVector, Raw>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else if)",
    "insertText": "constexpr(std::is_same_v<FStructProperty, typename TPropType<Raw>::Value>)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { using PropType = TPropType<Raw>::Value ;)",
    "insertText": "if(auto AsProperty = CastField<PropType>(&Prop))"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} } return false ; } template<T> FString)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (using Raw = std::decay_t<T> ; if)",
    "insertText": "constexpr(std::is_pointer_v<Raw> && std::is_base_of_v<UObject, std::remove_pointer_t<Raw>>)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (using PtrType = Raw::ElementType ; return)",
    "insertText": "Printf(TEXT(\"TObjectPtr<%s>\"), *GetTypeName<PtrType>())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (using ElementType = Raw::ElementType ; return)",
    "insertText": "Printf(TEXT(\"TArray<%s>\"), *GetTypeName<ElementType>())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (using ElementType = Raw::ElementType ; return)",
    "insertText": "Printf(TEXT(\"TSet<%s>\"), *GetTypeName<ElementType>())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (using Key = Raw::KeyInitType ; using Value = Raw::ValueInitType ; return)",
    "insertText": "Printf(TEXT(\"TMap<%s, %s>\"), *GetTypeName<Key>(), *GetTypeName<Value>())"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} else { return TNameOf<Raw)",
    "insertText": "GetName()"
  }
]