[
  {
    "label": "NetworkControleUpdateCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkControleUpdateCache"
  },
  {
    "label": "LoggingNetworkControllerFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoggingNetworkControllerFactory"
  },
  {
    "label": "CallClientFakeAudio",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallClientFakeAudio"
  },
  {
    "label": "CallClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallClient"
  },
  {
    "label": "Scenario",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scenario"
  },
  {
    "label": "CallClientPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallClientPair"
  },
  {
    "label": "SendVideoStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendVideoStream"
  },
  {
    "label": "VideoStreamPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamPair"
  },
  {
    "label": "ReceiveVideoStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveVideoStream"
  },
  {
    "label": "SendAudioStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendAudioStream"
  },
  {
    "label": "ReceiveAudioStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveAudioStream"
  },
  {
    "label": "AudioStreamPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioStreamPair"
  },
  {
    "label": "NetworkNodeTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkNodeTransport"
  },
  {
    "label": "NetworkControleUpdateCache()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_CALL_CLIENT_H_ # define TEST_SCENARIO_CALL_CLIENT_H_ # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" api / rtc_event_log / rtc_event_log . h \" # include \" api / test / time_controller . h \" # include \" api / units / data_rate . h \" # include \" call / call . h \" # include \" modules / audio_device / include / test_audio_device . h \" # include \" modules / congestion_controller / goog_cc / test / goog_cc_printer . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" test / logging / log_writer . h \" # include \" test / network / network_emulation . h \" # include \" test / scenario / column_printer . h \" # include \" test / scenario / network_node . h \" # include \" test / scenario / scenario_config . h \" namespace webrtc { namespace test { class NetworkControleUpdateCache : public NetworkControllerInterface { public :)",
    "insertText": "NetworkControleUpdateCache(std::unique_ptr<NetworkControllerInterface> controller)"
  },
  {
    "label": "OnNetworkAvailability()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnNetworkAvailability(NetworkAvailability msg)"
  },
  {
    "label": "OnNetworkRouteChange()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnNetworkRouteChange(NetworkRouteChange msg)"
  },
  {
    "label": "OnProcessInterval()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnProcessInterval(ProcessInterval msg)"
  },
  {
    "label": "OnRemoteBitrateReport()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnRemoteBitrateReport(RemoteBitrateReport msg)"
  },
  {
    "label": "OnRoundTripTimeUpdate()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnRoundTripTimeUpdate(RoundTripTimeUpdate msg)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnSentPacket(SentPacket msg)"
  },
  {
    "label": "OnReceivedPacket()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnReceivedPacket(ReceivedPacket msg)"
  },
  {
    "label": "OnStreamsConfig()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnStreamsConfig(StreamsConfig msg)"
  },
  {
    "label": "OnTargetRateConstraints()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnTargetRateConstraints(TargetRateConstraints msg)"
  },
  {
    "label": "OnTransportLossReport()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnTransportLossReport(TransportLossReport msg)"
  },
  {
    "label": "OnTransportPacketsFeedback()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnTransportPacketsFeedback(TransportPacketsFeedback msg)"
  },
  {
    "label": "OnNetworkStateEstimate()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "OnNetworkStateEstimate(NetworkStateEstimate msg)"
  },
  {
    "label": "update_state()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "update_state()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (private : NetworkControlUpdate)",
    "insertText": "Update(NetworkControlUpdate update)"
  },
  {
    "label": "LoggingNetworkControllerFactory()",
    "kind": "Method",
    "detail": "Function (const std::unique_ptr<NetworkControllerInterface> controller_ ; NetworkControlUpdate update_state_ ; } ; class LoggingNetworkControllerFactory : public NetworkControllerFactoryInterface { public :)",
    "insertText": "LoggingNetworkControllerFactory(LogWriterFactoryInterface* log_writer_factory, TransportControllerConfig config)"
  },
  {
    "label": "LoggingNetworkControllerFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LoggingNetworkControllerFactory()"
  },
  {
    "label": "LoggingNetworkControllerFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggingNetworkControllerFactory(const LoggingNetworkControllerFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LoggingNetworkControllerFactory&)",
    "insertText": "operator(const LoggingNetworkControllerFactory&)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<NetworkControllerInterface>)",
    "insertText": "Create(NetworkControllerConfig config)"
  },
  {
    "label": "GetProcessInterval()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetProcessInterval()"
  },
  {
    "label": "LogCongestionControllerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogCongestionControllerStats(Timestamp at_time)"
  },
  {
    "label": "SetRemoteBitrateEstimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteBitrateEstimate(RemoteBitrateReport msg)"
  },
  {
    "label": "GetUpdate()",
    "kind": "Method",
    "detail": "Function (NetworkControlUpdate)",
    "insertText": "GetUpdate()"
  },
  {
    "label": "CallClient()",
    "kind": "Method",
    "detail": "Function (private : GoogCcDebugFactory goog_cc_factory_ ; NetworkControllerFactoryInterface* cc_factory_ = nullptr ; bool print_cc_state_ = false ; NetworkControleUpdateCache* last_controller_ = nullptr ; } ; struct CallClientFakeAudio { rtc::scoped_refptr<AudioProcessing> apm ; rtc::scoped_refptr<TestAudioDeviceModule> fake_audio_device ; rtc::scoped_refptr<AudioState> audio_state ; } ; class CallClient : public EmulatedNetworkReceiverInterface { public :)",
    "insertText": "CallClient(TimeController* time_controller, std::unique_ptr<LogWriterFactoryInterface> log_writer_factory, CallClientConfig config)"
  },
  {
    "label": "CallClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CallClient()"
  },
  {
    "label": "CallClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallClient(const CallClient&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallClient&)",
    "insertText": "operator(const CallClient&)"
  },
  {
    "label": "StatsPrinter()",
    "kind": "Method",
    "detail": "Function (ColumnPrinter)",
    "insertText": "StatsPrinter()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (Call::Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "send_bandwidth()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "send_bandwidth()"
  },
  {
    "label": "target_rate()",
    "kind": "Method",
    "detail": "Function (} DataRate)",
    "insertText": "target_rate()"
  },
  {
    "label": "stable_target_rate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "stable_target_rate()"
  },
  {
    "label": "padding_rate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "padding_rate()"
  },
  {
    "label": "UpdateBitrateConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBitrateConstraints(const BitrateConstraints& constraints)"
  },
  {
    "label": "SetRemoteBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteBitrate(DataRate bitrate)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(EmulatedIpPacket packet)"
  },
  {
    "label": "GetLogWriter()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtcEventLogOutput>)",
    "insertText": "GetLogWriter(std::string name)"
  },
  {
    "label": "SendTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendTask(std::function<void()> task)"
  },
  {
    "label": "GetNextVideoSsrc()",
    "kind": "Method",
    "detail": "Function (private : class Scenario ; class CallClientPair ; class SendVideoStream ; class VideoStreamPair ; class ReceiveVideoStream ; class SendAudioStream ; class ReceiveAudioStream ; class AudioStreamPair ; class NetworkNodeTransport ; uint32_t)",
    "insertText": "GetNextVideoSsrc()"
  },
  {
    "label": "GetNextVideoLocalSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetNextVideoLocalSsrc()"
  },
  {
    "label": "GetNextAudioSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetNextAudioSsrc()"
  },
  {
    "label": "GetNextAudioLocalSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetNextAudioLocalSsrc()"
  },
  {
    "label": "GetNextRtxSsrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetNextRtxSsrc()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "Bind(EmulatedEndpoint* endpoint)"
  },
  {
    "label": "UnBind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnBind()"
  },
  {
    "label": "CallClientPair()",
    "kind": "Method",
    "detail": "Function (TimeController* const time_controller_ ; Clock* clock_ ; const std::unique_ptr<LogWriterFactoryInterface> log_writer_factory_ ; std::unique_ptr<RtcEventLog> event_log_ ; LoggingNetworkControllerFactory network_controller_factory_ ; CallClientFakeAudio fake_audio_setup_ ; std::unique_ptr<Call> call_ ; std::unique_ptr<NetworkNodeTransport> transport_ ; std::vector<std::pair<EmulatedEndpoint*,uint16_t>> endpoints_ ; int next_video_ssrc_index_ = 0 ; int next_video_local_ssrc_index_ = 0 ; int next_rtx_ssrc_index_ = 0 ; int next_audio_ssrc_index_ = 0 ; int next_audio_local_ssrc_index_ = 0 ; std::map<uint32_t,MediaType> ssrc_media_types_ ; TaskQueueForTest task_queue_ ; const FieldTrialBasedConfig field_trials_ ; } ; class CallClientPair { public : ~)",
    "insertText": "CallClientPair()"
  },
  {
    "label": "CallClientPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallClientPair(const CallClientPair&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallClientPair&)",
    "insertText": "operator(const CallClientPair&)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (CallClient*)",
    "insertText": "first()"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (} std::pair<CallClient*,CallClient*>)",
    "insertText": "reverse()"
  },
  {
    "label": "CallClientPair()",
    "kind": "Method",
    "detail": "Function (} private : class Scenario ;)",
    "insertText": "CallClientPair(CallClient* first, CallClient* second) : first_(first), second_(second)"
  }
]