[
  {
    "label": "FReplicationStateHeaderAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationStateHeaderAccessor"
  },
  {
    "label": "FReplicationStateHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationStateHeader"
  },
  {
    "label": "FReplicationStateHeader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Net / Core / NetHandle / NetHandle . h \" namespace UE::Net { namespace Private { struct FReplicationStateHeaderAccessor ; } struct FReplicationStateHeader {)",
    "insertText": "FReplicationStateHeader() : NetHandleId(0), bInitStateIsDirty(0), bStateIsDirty(0)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "GetNetHandleId()",
    "kind": "Method",
    "detail": "Function (namespace Private { struct FReplicationStateHeaderAccessor { uint32)",
    "insertText": "GetNetHandleId(const FReplicationStateHeader& Header)"
  },
  {
    "label": "MarkStateDirty()",
    "kind": "Method",
    "detail": "Function (Header . bInitStateIsDirty = true ; } void)",
    "insertText": "MarkStateDirty(FReplicationStateHeader& Header)"
  },
  {
    "label": "ClearAllStateIsDirty()",
    "kind": "Method",
    "detail": "Function (Header . bStateIsDirty = true ; } void)",
    "insertText": "ClearAllStateIsDirty(FReplicationStateHeader& Header)"
  },
  {
    "label": "SetNetHandleId()",
    "kind": "Method",
    "detail": "Function (Header . bInitStateIsDirty = false ; Header . bStateIsDirty = false ; } void)",
    "insertText": "SetNetHandleId(FReplicationStateHeader& Header, FNetHandle NetHandle)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (Header . NetHandleId = NetHandle .)",
    "insertText": "GetId()"
  }
]