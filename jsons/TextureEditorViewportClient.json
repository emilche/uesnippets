[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "ITextureEditorToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextureEditorToolkit"
  },
  {
    "label": "STextureEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextureEditorViewport"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FTextureEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureEditorViewportClient"
  },
  {
    "label": "FTextureErrorLogger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureErrorLogger"
  },
  {
    "label": "FTextureEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" UObject / GCObject . h \" # include \" UnrealClient . h \" # include \" ViewportClient . h \" class FCanvas ; class ITextureEditorToolkit ; class STextureEditorViewport ; class UTexture2D ; class FTextureEditorViewportClient : public FViewportClient,public FGCObject { public :)",
    "insertText": "FTextureEditorViewportClient(TWeakPtr<ITextureEditorToolkit> InTextureEditor, TWeakPtr<STextureEditorViewport> InTextureEditorViewport)"
  },
  {
    "label": "FTextureEditorViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTextureEditorViewportClient()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FViewport* Viewport, FCanvas* Canvas)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& InEventArgs)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FViewport* Viewport, FInputDeviceId DeviceId, FKey Key, float Delta, float DeltaTime, int32 NumSamples = 1, bool bGamepad = false)"
  },
  {
    "label": "InputGesture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputGesture(FViewport* Viewport, EGestureEvent GestureType, const FVector2D& GestureDelta, bool bIsDirectionInvertedFromDevice)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "ModifyCheckerboardTextureColors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCheckerboardTextureColors()"
  },
  {
    "label": "GetDisplayedResolution()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayedResolution()"
  },
  {
    "label": "GetViewportVerticalScrollBarRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewportVerticalScrollBarRatio()"
  },
  {
    "label": "GetViewportHorizontalScrollBarRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetViewportHorizontalScrollBarRatio()"
  },
  {
    "label": "UpdateScrollBars()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateScrollBars()"
  },
  {
    "label": "GetViewportScrollBarPositions()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetViewportScrollBarPositions()"
  },
  {
    "label": "DestroyCheckerboardTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCheckerboardTexture()"
  },
  {
    "label": "ShouldUseMousePanning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseMousePanning(FViewport* Viewport)"
  }
]