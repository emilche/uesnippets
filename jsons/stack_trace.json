[
  {
    "label": "_EXCEPTION_POINTERS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_EXCEPTION_POINTERS"
  },
  {
    "label": "_CONTEXT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_CONTEXT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "EnableInProcessStackDumping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableInProcessStackDumping()"
  },
  {
    "label": "GetStackEnd()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetStackEnd()"
  },
  {
    "label": "StackTrace()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "StackTrace(size_t count)"
  },
  {
    "label": "WillSymbolizeToStreamForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WillSymbolizeToStreamForTesting()"
  },
  {
    "label": "InitTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTrace(const _CONTEXT* context_record)"
  },
  {
    "label": "CollectStackTrace()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CollectStackTrace(void** trace, size_t count)"
  },
  {
    "label": "TraceStackFramePointers()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "TraceStackFramePointers(const void** out_trace,\n                        size_t max_depth,\n                        size_t skip_initial,\n                        bool enable_scanning = kEnableScanningByDefault)"
  },
  {
    "label": "TraceStackFramePointersFromBuffer()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "TraceStackFramePointersFromBuffer(\n    uintptr_t fp,\n    uintptr_t stack_end,\n    const void** out_trace,\n    size_t max_depth,\n    size_t skip_initial,\n    bool enable_scanning = kEnableScanningByDefault)"
  },
  {
    "label": "ScopedStackFrameLinker()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedStackFrameLinker(void* fp, void* parent_fp)"
  }
]