[
  {
    "label": "FSubstr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstr"
  },
  {
    "label": "TCharArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCharArray"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Delegates / IntegerSequence . h \" # if)",
    "insertText": "defined(_MSC_VER) && !defined(__clang__) #define SIG __FUNCSIG__ #define SIG_STARTCHAR '<' #define SIG_ENDCHAR '>' #pragma warning(push) #pragma warning(disable : 4503)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FSubstr { const char* Ptr ; uint32 Length ; char)",
    "insertText": "operator(uint32 Index)"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (} FSubstr)",
    "insertText": "PopBack(int Num = 1)"
  },
  {
    "label": "PopFrontAll()",
    "kind": "Method",
    "detail": "Function (} FSubstr)",
    "insertText": "PopFrontAll(char Ch)"
  },
  {
    "label": "PopFrontAllNot()",
    "kind": "Method",
    "detail": "Function (} FSubstr)",
    "insertText": "PopFrontAllNot(char Ch)"
  },
  {
    "label": "PopBackAll()",
    "kind": "Method",
    "detail": "Function (} FSubstr)",
    "insertText": "PopBackAll(char Ch)"
  },
  {
    "label": "PopBackAllNot()",
    "kind": "Method",
    "detail": "Function (} FSubstr)",
    "insertText": "PopBackAllNot(char Ch)"
  },
  {
    "label": "GetTypeSubstr()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> FSubstr)",
    "insertText": "GetTypeSubstr()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<uint32 NumChars> struct TCharArray { TCHAR Array [ NumChars + 1 ] ; } ; template<T,uint32 . . . Indices> TCharArray<)",
    "insertText": "sizeof(Indices)> TypeSubstrToCharArray(TIntegerSequence<uint32, Indices...>)"
  },
  {
    "label": "GetGeneratedTypeName()",
    "kind": "Method",
    "detail": "Function (} } # endif template<T> const TCHAR*)",
    "insertText": "GetGeneratedTypeName()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto Result = UETypeName_Private::TypeSubstrToCharArray<)",
    "insertText": "T(TMakeIntegerSequence<uint32, UETypeName_Private::GetTypeSubstr<T>().Len()>())"
  }
]