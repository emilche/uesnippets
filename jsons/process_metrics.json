[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "IoCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IoCounters"
  },
  {
    "label": "PageFaultCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PageFaultCounts"
  },
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ThreadTimeInState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadTimeInState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROCESS_PROCESS_METRICS_H_ # define BASE_PROCESS_PROCESS_METRICS_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include \" base / base_export . h \" # include \" base / gtest_prod_util . h \" # include \" base / memory / raw_ptr . h \" # include \" base / process / process_handle . h \" # include \" base / strings / string_piece . h \" # include \" base / time / time . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_APPLE) #include <mach/mach.h> #include \"base/process/port_provider_mac.h\" #if !BUILDFLAG(IS_IOS) #include <mach/mach_vm.h> #endif #endif #if BUILDFLAG(IS_WIN) #include \"base/win/scoped_handle.h\" #include \"base/win/windows_types.h\" #endif #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) || \\ BUILDFLAG(IS_AIX)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (class Value ; struct IoCounters ; # if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID)"
  },
  {
    "label": "TimeValToMicroseconds()",
    "kind": "Method",
    "detail": "Function (int64_t minor ; int64_t major ; } ; # endif BASE_EXPORT int64_t)",
    "insertText": "TimeValToMicroseconds(const struct timeval& tv)"
  },
  {
    "label": "ProcessMetrics()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ProcessMetrics { public :)",
    "insertText": "ProcessMetrics(const ProcessMetrics&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProcessMetrics&)",
    "insertText": "operator(const ProcessMetrics&)"
  },
  {
    "label": "ProcessMetrics()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProcessMetrics()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_MAC) static std::unique_ptr<ProcessMetrics> CreateProcessMetrics( ProcessHandle process)"
  },
  {
    "label": "CreateProcessMetrics()",
    "kind": "Method",
    "detail": "Function (# else std::unique_ptr<ProcessMetrics>)",
    "insertText": "CreateProcessMetrics(ProcessHandle process, PortProvider* port_provider)"
  },
  {
    "label": "CreateCurrentProcessMetrics()",
    "kind": "Method",
    "detail": "Function (# endif std::unique_ptr<ProcessMetrics>)",
    "insertText": "CreateCurrentProcessMetrics()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) BASE_EXPORT size_t GetResidentSetSize()"
  },
  {
    "label": "GetPlatformIndependentCPUUsage()",
    "kind": "Method",
    "detail": "Function (# endif [ [ nodiscard ] ] double)",
    "insertText": "GetPlatformIndependentCPUUsage(TimeDelta cumulative_cpu)"
  },
  {
    "label": "GetPlatformIndependentCPUUsage()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] double)",
    "insertText": "GetPlatformIndependentCPUUsage()"
  },
  {
    "label": "GetCumulativeCPUUsage()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TimeDelta)",
    "insertText": "GetCumulativeCPUUsage()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) [[nodiscard]] double GetPreciseCPUUsage(TimeDelta cumulative_cpu)"
  },
  {
    "label": "GetPreciseCPUUsage()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] double)",
    "insertText": "GetPreciseCPUUsage()"
  },
  {
    "label": "GetPreciseCumulativeCPUUsage()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] TimeDelta)",
    "insertText": "GetPreciseCumulativeCPUUsage()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) || \\ BUILDFLAG(IS_AIX)"
  },
  {
    "label": "GetCumulativeCPUUsagePerThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCumulativeCPUUsagePerThread(CPUUsagePerThread&)"
  },
  {
    "label": "GetPerThreadCumulativeCPUTimeInState()",
    "kind": "Method",
    "detail": "Function (struct ThreadTimeInState { PlatformThreadId thread_id ; CPU::CoreType core_type ; uint32_t cluster_core_index ; uint64_t core_frequency_khz ; TimeDelta cumulative_cpu_time ; } ; using TimeInStatePerThread = std::vector<ThreadTimeInState> ; bool)",
    "insertText": "GetPerThreadCumulativeCPUTimeInState(TimeInStatePerThread&)"
  },
  {
    "label": "ParseProcTimeInState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseProcTimeInState(const std::string& content, PlatformThreadId tid, TimeInStatePerThread& time_in_state_per_thread)"
  },
  {
    "label": "GetIdleWakeupsPerSecond()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "GetIdleWakeupsPerSecond()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_APPLE) int GetPackageIdleWakeupsPerSecond()"
  },
  {
    "label": "GetEnergyImpact()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetEnergyImpact()"
  },
  {
    "label": "GetIOCounters()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "GetIOCounters(IoCounters* io_counters)"
  },
  {
    "label": "GetCumulativeDiskUsageInBytes()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetCumulativeDiskUsageInBytes()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) int GetOpenFdCount()"
  },
  {
    "label": "GetOpenFdSoftLimit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOpenFdSoftLimit()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) uint64_t GetVmSwapBytes()"
  },
  {
    "label": "GetPageFaultCounts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPageFaultCounts(PageFaultCounts* counts)"
  },
  {
    "label": "GetMallocUsage()",
    "kind": "Method",
    "detail": "Function (# endif size_t)",
    "insertText": "GetMallocUsage()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : # if !)",
    "insertText": "BUILDFLAG(IS_MAC) explicit ProcessMetrics(ProcessHandle process)"
  },
  {
    "label": "ProcessMetrics()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "ProcessMetrics(ProcessHandle process, PortProvider* port_provider)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || \\ BUILDFLAG(IS_AIX) int CalculateIdleWakeupsPerSecond(uint64_t absolute_idle_wakeups)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_APPLE) int CalculatePackageIdleWakeupsPerSecond( uint64_t absolute_package_idle_wakeups)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) || \\ BUILDFLAG(IS_AIX) CPU::CoreType GetCoreType(uint32_t core_index)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# else ProcessHandle process_ ; # endif TimeTicks last_cpu_time_ ; # if !)",
    "insertText": "BUILDFLAG(IS_FREEBSD) || !BUILDFLAG(IS_POSIX)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (TimeDelta last_precise_cumulative_cpu_ ; # endif # if)",
    "insertText": "BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || \\ BUILDFLAG(IS_AIX)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (uint64_t last_absolute_idle_wakeups_ ; # endif # if)",
    "insertText": "BUILDFLAG(IS_APPLE)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (uint64_t last_absolute_package_idle_wakeups_ ; double last_energy_impact_ ; uint64_t last_energy_impact_time_ ; # endif # if)",
    "insertText": "BUILDFLAG(IS_MAC) mach_port_t TaskForPid(ProcessHandle process)"
  },
  {
    "label": "GetSystemCommitCharge()",
    "kind": "Method",
    "detail": "Function (raw_ptr<PortProvider> port_provider_ ; # endif } ; BASE_EXPORT size_t)",
    "insertText": "GetSystemCommitCharge()"
  },
  {
    "label": "GetMaxFds()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "GetMaxFds()"
  },
  {
    "label": "GetHandleLimit()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "GetHandleLimit()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_POSIX) BASE_EXPORT void IncreaseFdLimitTo(unsigned int max_descriptors)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) || BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_LINUX) || \\ BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_AIX) || \\ BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "SystemMemoryInfoKB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SystemMemoryInfoKB()"
  },
  {
    "label": "SystemMemoryInfoKB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SystemMemoryInfoKB(const SystemMemoryInfoKB& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SystemMemoryInfoKB&)",
    "insertText": "operator(const SystemMemoryInfoKB& other)"
  },
  {
    "label": "ToValue()",
    "kind": "Method",
    "detail": "Function (Value)",
    "insertText": "ToValue()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (int swap_free = 0 ; # endif # if)",
    "insertText": "BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || \\ BUILDFLAG(IS_AIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (int cached = 0 ; int active_anon = 0 ; int inactive_anon = 0 ; int active_file = 0 ; int inactive_file = 0 ; int dirty = 0 ; int reclaimable = 0 ; # endif # if)",
    "insertText": "BUILDFLAG(IS_CHROMEOS)"
  },
  {
    "label": "GetSystemMemoryInfo()",
    "kind": "Method",
    "detail": "Function (int file_backed = 0 ; int purgeable = 0 ; # endif } ; BASE_EXPORT bool)",
    "insertText": "GetSystemMemoryInfo(SystemMemoryInfoKB* meminfo)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_ANDROID) || \\ BUILDFLAG(IS_AIX) BASE_EXPORT int ParseProcStatCPU(StringPiece input)"
  },
  {
    "label": "GetNumberOfThreads()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT int64_t)",
    "insertText": "GetNumberOfThreads(ProcessHandle process)"
  },
  {
    "label": "ParseProcMeminfo()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT const char kProcSelfExe [ ] ; BASE_EXPORT bool)",
    "insertText": "ParseProcMeminfo(StringPiece input, SystemMemoryInfoKB* meminfo)"
  },
  {
    "label": "GetVmStatInfo()",
    "kind": "Method",
    "detail": "Function (uint64_t pswpin = 0 ; uint64_t pswpout = 0 ; uint64_t pgmajfault = 0 ; uint64_t oom_kill = 0 ; } ; BASE_EXPORT bool)",
    "insertText": "GetVmStatInfo(VmStatInfo* vmstat)"
  },
  {
    "label": "ParseProcVmstat()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ParseProcVmstat(StringPiece input, VmStatInfo* vmstat)"
  },
  {
    "label": "SystemDiskInfo()",
    "kind": "Method",
    "detail": "Function (struct BASE_EXPORT SystemDiskInfo {)",
    "insertText": "SystemDiskInfo()"
  },
  {
    "label": "SystemDiskInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SystemDiskInfo(const SystemDiskInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SystemDiskInfo&)",
    "insertText": "operator(const SystemDiskInfo&)"
  },
  {
    "label": "IsValidDiskName()",
    "kind": "Method",
    "detail": "Function (uint64_t reads = 0 ; uint64_t reads_merged = 0 ; uint64_t sectors_read = 0 ; uint64_t read_time = 0 ; uint64_t writes = 0 ; uint64_t writes_merged = 0 ; uint64_t sectors_written = 0 ; uint64_t write_time = 0 ; uint64_t io = 0 ; uint64_t io_time = 0 ; uint64_t weighted_io_time = 0 ; } ; BASE_EXPORT bool)",
    "insertText": "IsValidDiskName(StringPiece candidate)"
  },
  {
    "label": "GetSystemDiskInfo()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetSystemDiskInfo(SystemDiskInfo* diskinfo)"
  },
  {
    "label": "GetUserCpuTimeSinceBoot()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT TimeDelta)",
    "insertText": "GetUserCpuTimeSinceBoot()"
  },
  {
    "label": "SwapInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapInfo() : num_reads(0), num_writes(0), compr_data_size(0), orig_data_size(0), mem_used_total(0)"
  },
  {
    "label": "ParseZramMmStat()",
    "kind": "Method",
    "detail": "Function (uint64_t num_reads = 0 ; uint64_t num_writes = 0 ; uint64_t compr_data_size = 0 ; uint64_t orig_data_size = 0 ; uint64_t mem_used_total = 0 ; } ; BASE_EXPORT bool)",
    "insertText": "ParseZramMmStat(StringPiece mm_stat_data, SwapInfo* swap_info)"
  },
  {
    "label": "ParseZramStat()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ParseZramStat(StringPiece stat_data, SwapInfo* swap_info)"
  },
  {
    "label": "GetSwapInfo()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "GetSwapInfo(SwapInfo* swap_info)"
  },
  {
    "label": "GetGraphicsMemoryInfo()",
    "kind": "Method",
    "detail": "Function (int gpu_objects = - 1 ; int64_t gpu_memory_size = - 1 ; } ; BASE_EXPORT bool)",
    "insertText": "GetGraphicsMemoryInfo(GraphicsMemoryInfoKB* gpu_meminfo)"
  },
  {
    "label": "SystemPerformanceInfo()",
    "kind": "Method",
    "detail": "Function (# endif struct BASE_EXPORT SystemPerformanceInfo {)",
    "insertText": "SystemPerformanceInfo()"
  },
  {
    "label": "SystemPerformanceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SystemPerformanceInfo(const SystemPerformanceInfo& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SystemPerformanceInfo&)",
    "insertText": "operator(const SystemPerformanceInfo& other)"
  },
  {
    "label": "GetSystemPerformanceInfo()",
    "kind": "Method",
    "detail": "Function (uint64_t idle_time = 0 ; uint64_t read_transfer_count = 0 ; uint64_t write_transfer_count = 0 ; uint64_t other_transfer_count = 0 ; uint64_t read_operation_count = 0 ; uint64_t write_operation_count = 0 ; uint64_t other_operation_count = 0 ; uint64_t pagefile_pages_written = 0 ; uint64_t pagefile_pages_write_ios = 0 ; uint64_t available_pages = 0 ; uint64_t pages_read = 0 ; uint64_t page_read_ios = 0 ; } ; BASE_EXPORT bool)",
    "insertText": "GetSystemPerformanceInfo(SystemPerformanceInfo* info)"
  },
  {
    "label": "SystemMetrics()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT SystemMetrics { public :)",
    "insertText": "SystemMetrics()"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (SystemMetrics)",
    "insertText": "Sample()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(SystemMetricsTest, SystemMetrics)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if)",
    "insertText": "BUILDFLAG(IS_MAC)"
  },
  {
    "label": "GetTopInfo()",
    "kind": "Method",
    "detail": "Function (Finished,Error,Success } ; BASE_EXPORT MachVMRegionResult)",
    "insertText": "GetTopInfo(mach_port_t task, mach_vm_size_t* size, mach_vm_address_t* address, vm_region_top_info_data_t* info)"
  },
  {
    "label": "GetBasicInfo()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT MachVMRegionResult)",
    "insertText": "GetBasicInfo(mach_port_t task, mach_vm_size_t* size, mach_vm_address_t* address, vm_region_basic_info_64* info)"
  }
]