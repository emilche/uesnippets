[
  {
    "label": "SquareGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SquareGenerator"
  },
  {
    "label": "Square",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Square"
  },
  {
    "label": "YuvFileGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "YuvFileGenerator"
  },
  {
    "label": "NV12FileGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NV12FileGenerator"
  },
  {
    "label": "SlideGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SlideGenerator"
  },
  {
    "label": "ScrollingImageFrameGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScrollingImageFrameGenerator"
  },
  {
    "label": "SquareGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_FRAME_GENERATOR_H_ # define TEST_FRAME_GENERATOR_H_ # include<memory> # include<string> # include<vector> # include \" api / scoped_refptr . h \" # include \" api / test / frame_generator_interface . h \" # include \" api / video / i420_buffer . h \" # include \" api / video / nv12_buffer . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_frame_buffer . h \" # include \" api / video / video_source_interface . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / random . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { namespace test { class SquareGenerator : public FrameGeneratorInterface { public :)",
    "insertText": "SquareGenerator(int width, int height, OutputType type, int num_squares)"
  },
  {
    "label": "ChangeResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeResolution(size_t width, size_t height)"
  },
  {
    "label": "NextFrame()",
    "kind": "Method",
    "detail": "Function (VideoFrameData)",
    "insertText": "NextFrame()"
  },
  {
    "label": "CreateI420Buffer()",
    "kind": "Method",
    "detail": "Function (private : rtc::scoped_refptr<I420Buffer>)",
    "insertText": "CreateI420Buffer(int width, int height)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (class Square { public :)",
    "insertText": "Square(int width, int height, int seed)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(const rtc::scoped_refptr<VideoFrameBuffer>& frame_buffer)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Random random_generator_ ; int x_ ; int y_ ; const int length_ ; const uint8_t yuv_y_ ; const uint8_t yuv_u_ ; const uint8_t yuv_v_ ; const uint8_t yuv_a_ ; } ; Mutex mutex_ ; const OutputType type_ ; int width_)",
    "insertText": "RTC_GUARDED_BY(&mutex_)"
  },
  {
    "label": "YuvFileGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class YuvFileGenerator : public FrameGeneratorInterface { public :)",
    "insertText": "YuvFileGenerator(std::vector<FILE*> files, size_t width, size_t height, int frame_repeat_count)"
  },
  {
    "label": "YuvFileGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "YuvFileGenerator()"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_WARNING)"
  },
  {
    "label": "ReadNextFrame()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "ReadNextFrame()"
  },
  {
    "label": "NV12FileGenerator()",
    "kind": "Method",
    "detail": "Function (size_t file_index_ ; size_t frame_index_ ; const std::vector<FILE*> files_ ; const size_t width_ ; const size_t height_ ; const size_t frame_size_ ; const std::unique_ptr<uint8_t [ ]> frame_buffer_ ; const int frame_display_count_ ; int current_display_count_ ; rtc::scoped_refptr<I420Buffer> last_read_buffer_ ; } ; class NV12FileGenerator : public FrameGeneratorInterface { public :)",
    "insertText": "NV12FileGenerator(std::vector<FILE*> files, size_t width, size_t height, int frame_repeat_count)"
  },
  {
    "label": "NV12FileGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NV12FileGenerator()"
  },
  {
    "label": "SlideGenerator()",
    "kind": "Method",
    "detail": "Function (size_t file_index_ ; size_t frame_index_ ; const std::vector<FILE*> files_ ; const size_t width_ ; const size_t height_ ; const size_t frame_size_ ; const std::unique_ptr<uint8_t [ ]> frame_buffer_ ; const int frame_display_count_ ; int current_display_count_ ; rtc::scoped_refptr<NV12Buffer> last_read_buffer_ ; } ; class SlideGenerator : public FrameGeneratorInterface { public :)",
    "insertText": "SlideGenerator(int width, int height, int frame_repeat_count)"
  },
  {
    "label": "GenerateNewFrame()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "GenerateNewFrame()"
  },
  {
    "label": "ScrollingImageFrameGenerator()",
    "kind": "Method",
    "detail": "Function (const int width_ ; const int height_ ; const int frame_display_count_ ; int current_display_count_ ; Random random_generator_ ; rtc::scoped_refptr<I420Buffer> buffer_ ; } ; class ScrollingImageFrameGenerator : public FrameGeneratorInterface { public :)",
    "insertText": "ScrollingImageFrameGenerator(Clock* clock, const std::vector<FILE*>& files, size_t source_width, size_t source_height, size_t target_width, size_t target_height, int64_t scroll_time_ms, int64_t pause_time_ms)"
  },
  {
    "label": "ScrollingImageFrameGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScrollingImageFrameGenerator()"
  },
  {
    "label": "UpdateSourceFrame()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "UpdateSourceFrame(size_t frame_num)"
  },
  {
    "label": "CropSourceToScrolledImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CropSourceToScrolledImage(double scroll_factor)"
  }
]