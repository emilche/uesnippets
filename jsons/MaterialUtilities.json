[
  {
    "label": "ALandscapeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeProxy"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UMaterialInstanceConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceConstant"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "UTextureRenderTarget2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureRenderTarget2D"
  },
  {
    "label": "UMaterialOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialOptions"
  },
  {
    "label": "FMaterialProxySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialProxySettings"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FMaterialUpdateContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUpdateContext"
  },
  {
    "label": "FSkeletalMeshLODRenderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalMeshLODRenderData"
  },
  {
    "label": "FBakeOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakeOutput"
  },
  {
    "label": "FMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshData"
  },
  {
    "label": "FMaterialData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionInfo"
  },
  {
    "label": "FFlattenMaterial",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlattenMaterial"
  },
  {
    "label": "MATERIALUTILITIES_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MATERIALUTILITIES_API"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMaterialMergeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialMergeData"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FPrimitiveComponentId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveComponentId"
  },
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FRawMeshExt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawMeshExt"
  },
  {
    "label": "FMeshProxySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshProxySettings"
  },
  {
    "label": "EErrorType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EErrorType"
  },
  {
    "label": "FError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FError"
  },
  {
    "label": "FInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstance"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Algo / AnyOf . h \" # include \" UObject / ObjectMacros . h \" # include \" Misc / Guid . h \" # include \" SceneTypes . h \" # include \" Modules / ModuleInterface . h \" # include \" Engine / TextureStreamingTypes . h \" # include \" Engine / Texture . h \" # include \" LightMap . h \" # include \" ShadowMap . h \" # include \" ImageUtils . h \" # include \" MaterialUtilities . generated . h \" class ALandscapeProxy ; class Error ; class ULandscapeComponent ; class UMaterial ; class UMaterialInstanceConstant ; class UMaterialInterface ; class UTexture2D ; class UTextureRenderTarget2D ; class UMaterialOptions ; struct FMaterialProxySettings ; struct FMeshDescription ; class FMaterialUpdateContext ; class FSkeletalMeshLODRenderData ; struct FBakeOutput ; struct FMeshData ; struct FMaterialData ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FSectionInfo()",
    "kind": "Method",
    "detail": "Function (Diffuse,Metallic,Specular,Roughness,Anisotropy,Normal,Tangent,Opacity,Emissive,SubSurface,OpacityMask,AmbientOcclusion = 1 6,NumFlattenMaterialProperties } ; struct FSectionInfo {)",
    "insertText": "FSectionInfo() : Material(nullptr), MaterialSlotName(NAME_None), MaterialIndex(INDEX_NONE), StartIndex(INDEX_NONE), EndIndex(INDEX_NONE), bProcessed(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class UMaterialInterface* Material ; FName MaterialSlotName ; TArray<FName> EnabledProperties ; int32 MaterialIndex ; int32 StartIndex ; int32 EndIndex ; bool bProcessed ; bool)",
    "insertText": "operator(const FSectionInfo& Other)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (Size =)",
    "insertText": "FIntPoint(ForceInitToZero)"
  },
  {
    "label": "HasData()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasData()"
  },
  {
    "label": "ReleaseData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseData()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "Empty()"
  },
  {
    "label": "FillAlphaValues()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FillAlphaValues(const uint8 InAlphaValue)"
  },
  {
    "label": "DoesPropertyContainData()",
    "kind": "Method",
    "detail": "Function (Sample . A = InAlphaValue ; } } } const bool)",
    "insertText": "DoesPropertyContainData(const EFlattenMaterialProperties Property)"
  },
  {
    "label": "IsPropertyConstant()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "IsPropertyConstant(const EFlattenMaterialProperties Property)"
  },
  {
    "label": "ShouldGenerateDataForProperty()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "ShouldGenerateDataForProperty(const EFlattenMaterialProperties Property)"
  },
  {
    "label": "GetPropertySize()",
    "kind": "Method",
    "detail": "Function (} const FIntPoint)",
    "insertText": "GetPropertySize(const EFlattenMaterialProperties Property)"
  },
  {
    "label": "SetPropertySize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPropertySize(const EFlattenMaterialProperties Property, const FIntPoint& InSize)"
  },
  {
    "label": "GetSizesEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSizesEntry(Property)"
  },
  {
    "label": "GetPropertySamples()",
    "kind": "Method",
    "detail": "Function (} TArray<FColor>&)",
    "insertText": "GetPropertySamples(const EFlattenMaterialProperties Property)"
  },
  {
    "label": "GetSizesEntry()",
    "kind": "Method",
    "detail": "Function (} FGuid MaterialId ; FIntPoint RenderSize ; bool bTwoSided ; bool bIsThinSurface ; bool bDitheredLODTransition ; EBlendMode BlendMode ; float EmissiveScale ; int32 UVChannel ; private : FIntPoint&)",
    "insertText": "GetSizesEntry(const EFlattenMaterialProperties Property)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "Index(uint32)"
  },
  {
    "label": "GetSamplesEntry()",
    "kind": "Method",
    "detail": "Function (} TArray<FColor>&)",
    "insertText": "GetSamplesEntry(const EFlattenMaterialProperties Property)"
  },
  {
    "label": "PropertySizes()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "PropertySizes(uint32)"
  },
  {
    "label": "PropertySamples()",
    "kind": "Method",
    "detail": "Function (TArray<FColor>)",
    "insertText": "PropertySamples(uint32)"
  },
  {
    "label": "FExportMaterialProxyCache()",
    "kind": "Method",
    "detail": "Function (} ; struct FExportMaterialProxyCache { class FMaterialRenderProxy* Proxies [ MP_MAX ] ;)",
    "insertText": "FExportMaterialProxyCache()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "FMaterialMergeData()",
    "kind": "Method",
    "detail": "Function (} ; struct FMaterialMergeData { FExportMaterialProxyCache* ProxyCache ; class UMaterialInterface* Material ; const struct FMeshDescription* Mesh ; const FSkeletalMeshLODRenderData* LODData ; int32 MaterialIndex ; FBox2D TexcoordBounds ; const TArray<FVector2D>& TexCoords ; FLightMapRef LightMap ; FShadowMapRef ShadowMap ; FUniformBufferRHIRef Buffer ; int32 LightMapIndex ; float EmissiveScale ;)",
    "insertText": "FMaterialMergeData(UMaterialInterface* InMaterial, const FMeshDescription* InMesh, const FSkeletalMeshLODRenderData* InLODData, int32 InMaterialIndex, FBox2D InTexcoordBounds, const TArray<FVector2D>& InTexCoords) : ProxyCache(nullptr) , Material(InMaterial) , Mesh(InMesh) , LODData(InLODData) , MaterialIndex(InMaterialIndex) , TexcoordBounds(InTexcoordBounds) , TexCoords(InTexCoords) , LightMapIndex(1) , EmissiveScale(0.0f)"
  },
  {
    "label": "FMaterialMergeData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMaterialMergeData()"
  },
  {
    "label": "StartupModule()",
    "kind": "Method",
    "detail": "Function (delete ProxyCache ; } } } ; class UMaterialInterface ; class UMaterial ; class UTexture2D ; class UTextureRenderTarget2D ; class UWorld ; class ALandscapeProxy ; class ULandscapeComponent ; class FPrimitiveComponentId ; class UMaterialInstanceConstant ; struct FMaterialMergeData ; struct FMeshDescription ; namespace UE::Geometry { class FDynamicMesh3 ; } class FMaterialUtilities : public IModuleInterface { public : void)",
    "insertText": "StartupModule()"
  },
  {
    "label": "ShutdownModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownModule()"
  },
  {
    "label": "FindMaxTextureSize()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "FindMaxTextureSize(UMaterialInterface* InMaterialInterface, FIntPoint MinimumSize = FIntPoint(1, 1))"
  },
  {
    "label": "SupportsExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsExport(bool bIsOpaque, EMaterialProperty InMaterialProperty)"
  },
  {
    "label": "ExportLandscapeMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportLandscapeMaterial(const ALandscapeProxy* InLandscape, FFlattenMaterial& OutFlattenMaterial)"
  },
  {
    "label": "ExportLandscapeMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportLandscapeMaterial(const ALandscapeProxy* InLandscape, const TSet<FPrimitiveComponentId>& HiddenPrimitives, FFlattenMaterial& OutFlattenMaterial)"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "CreateTexture(UPackage* Outer, const FString& AssetLongName, FIntPoint Size, const TArray<FColor>& Samples, TextureCompressionSettings CompressionSettings, TextureGroup LODGroup, EObjectFlags Flags, bool bSRGB, const FGuid& SourceGuidHash = FGuid())"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "CreateTexture(UPackage* Outer, const FString& AssetLongName, FIntPoint Size, const TArray<FColor>& Samples, const FCreateTexture2DParameters& CreateParams, EObjectFlags Flags)"
  },
  {
    "label": "CreateMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterial*)",
    "insertText": "CreateMaterial(const FFlattenMaterial& InFlattenMaterial, UPackage* InOuter, const FString& BaseName, EObjectFlags Flags, const struct FMaterialProxySettings& MaterialProxySettings, TArray<UObject*>& OutGeneratedAssets, const TextureGroup& InTextureGroup = TEXTUREGROUP_World)"
  },
  {
    "label": "CreateInstancedMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInstanceConstant*)",
    "insertText": "CreateInstancedMaterial(UMaterialInterface* BaseMaterial, UPackage* InOuter, const FString& BaseName, EObjectFlags Flags)"
  },
  {
    "label": "ExportBaseColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExportBaseColor(ULandscapeComponent* LandscapeComponent, int32 TextureSize, TArray<FColor>& OutSamples)"
  },
  {
    "label": "CreateFlattenMaterialWithSettings()",
    "kind": "Method",
    "detail": "Function (FFlattenMaterial)",
    "insertText": "CreateFlattenMaterialWithSettings(const FMaterialProxySettings& InMaterialLODSettings)"
  },
  {
    "label": "AnalyzeMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeMaterial(class UMaterialInterface* InMaterial, const struct FMaterialProxySettings& InMaterialSettings, int32& OutNumTexCoords, bool& OutRequiresVertexData)"
  },
  {
    "label": "AnalyzeMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeMaterial(class UMaterialInterface* InMaterial, const TArray<EMaterialProperty>& Properties, int32& OutNumTexCoords, bool& OutRequiresVertexData)"
  },
  {
    "label": "RemapUniqueMaterialIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapUniqueMaterialIndices(const TArray<struct FSectionInfo>& InSections, const TArray<struct FRawMeshExt>& InMeshData, const TMap<FIntPoint, TArray<int32> >& InMaterialMap, const FMaterialProxySettings& InMaterialProxySettings, const bool bBakeVertexData, const bool bMergeMaterials, TArray<bool>& OutMeshShouldBakeVertexData, TMap<FIntPoint, TArray<int32> >& OutMaterialMap, TArray<struct FSectionInfo>& OutSections)"
  },
  {
    "label": "OptimizeFlattenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OptimizeFlattenMaterial(FFlattenMaterial& InFlattenMaterial)"
  },
  {
    "label": "ResizeFlattenMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeFlattenMaterial(FFlattenMaterial& InFlattenMaterial, const struct FMeshProxySettings& InMeshProxySettings)"
  },
  {
    "label": "OptimizeSampleArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OptimizeSampleArray(TArray<FColor>& InSamples, FIntPoint& InSampleSize)"
  },
  {
    "label": "FExportErrorManager()",
    "kind": "Method",
    "detail": "Function (class FExportErrorManager { public :)",
    "insertText": "FExportErrorManager(ERHIFeatureLevel::Type InFeatureLevel) : FeatureLevel(InFeatureLevel)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (} enum EErrorType { EET_IncohorentValues,EET_NoValues } ; void)",
    "insertText": "Register(const UMaterialInterface* Material, FName TextureName, int32 RegisterIndex, EErrorType ErrorType)"
  },
  {
    "label": "OutputToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputToLog()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct FError { const FMaterial* Material ; int32 RegisterIndex ; EErrorType ErrorType ; bool)",
    "insertText": "operator(const FError& Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} ; struct FInstance { const UMaterialInterface* Material ; FName TextureName ; } ; uint32)",
    "insertText": "GetTypeHash(const FError& Error)"
  },
  {
    "label": "ExportMaterialUVDensities()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type FeatureLevel ; TMap<FError,TArray<FInstance>> ErrorInstances ; } ; bool)",
    "insertText": "ExportMaterialUVDensities(UMaterialInterface* InMaterial, EMaterialQualityLevel::Type QualityLevel, ERHIFeatureLevel::Type FeatureLevel, FExportErrorManager& OutErrors)"
  },
  {
    "label": "DetermineMaterialImportance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineMaterialImportance(const TArray<UMaterialInterface*>& InMaterials, TArray<float>& OutImportance)"
  },
  {
    "label": "GeneratedBinnedTextureSquares()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeneratedBinnedTextureSquares(const FVector2D DestinationSize, TArray<float>& InTexureWeights, TArray<FBox2D>& OutGeneratedBoxes)"
  },
  {
    "label": "CreateProxyMaterialAndTextures()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "CreateProxyMaterialAndTextures(UPackage* OuterPackage, const FString& AssetName, const FBakeOutput& BakeOutput, const FMeshData& MeshData, const FMaterialData& MaterialData, UMaterialOptions* Options)"
  },
  {
    "label": "CreateProxyMaterialAndTextures()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "CreateProxyMaterialAndTextures(const FString& PackageName, const FString& AssetName, const FBakeOutput& BakeOutput, const FMeshData& MeshData, const FMaterialData& MaterialData, UMaterialOptions* Options)"
  },
  {
    "label": "CreateFlattenMaterialInstance()",
    "kind": "Method",
    "detail": "Function (UMaterialInstanceConstant*)",
    "insertText": "CreateFlattenMaterialInstance(UPackage* InOuter, const FMaterialProxySettings& InMaterialProxySettings, UMaterialInterface* InBaseMaterial, const FFlattenMaterial& FlattenMaterial, const FString& AssetBasePath, const FString& AssetBaseName, TArray<UObject*>& OutAssetsToSync, FMaterialUpdateContext* MaterialUpdateContext = nullptr)"
  },
  {
    "label": "ComputeRequiredTexelDensityFromScreenSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeRequiredTexelDensityFromScreenSize(const float InScreenSize, float InWorldSpaceRadius)"
  },
  {
    "label": "ComputeRequiredTexelDensityFromDrawDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeRequiredTexelDensityFromDrawDistance(const float InDrawDistance, float InWorldSpaceRadius)"
  },
  {
    "label": "GetTextureSizeFromTargetTexelDensity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextureSizeFromTargetTexelDensity(const FMeshDescription& InMesh, float InTargetTexelDensity)"
  },
  {
    "label": "GetTextureSizeFromTargetTexelDensity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextureSizeFromTargetTexelDensity(const UE::Geometry::FDynamicMesh3& Mesh, float TargetTexelDensity)"
  },
  {
    "label": "GetTextureSizeFromTargetTexelDensity()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextureSizeFromTargetTexelDensity(double InMesh3DArea, double InMeshUVArea, double InTargetTexelDensity)"
  },
  {
    "label": "IsValidFlattenMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidFlattenMaterial(const UMaterialInterface* InBaseMaterial)"
  },
  {
    "label": "GetFlattenMaterialTextureName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFlattenMaterialTextureName(EFlattenMaterialProperties InProperty, UMaterialInterface* InBaseMaterial)"
  },
  {
    "label": "CreateRenderTarget()",
    "kind": "Method",
    "detail": "Function (private : UTextureRenderTarget2D*)",
    "insertText": "CreateRenderTarget(bool bInForceLinearGamma, bool bNormalMap, EPixelFormat InPixelFormat, FIntPoint& InTargetSize)"
  },
  {
    "label": "ClearRenderTargetPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRenderTargetPool()"
  },
  {
    "label": "OnPreGarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreGarbageCollect()"
  }
]