[
  {
    "label": "AnalysisResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnalysisResult"
  },
  {
    "label": "ResultsContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ResultsContainer"
  },
  {
    "label": "Cluster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Cluster"
  },
  {
    "label": "AnalysisResult()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_TOOLS_FRAME_ANALYZER_VIDEO_QUALITY_ANALYSIS_H_ # define RTC_TOOLS_FRAME_ANALYZER_VIDEO_QUALITY_ANALYSIS_H_ # include<stdio . h> # include<string> # include<vector> # include \" api / scoped_refptr . h \" # include \" api / test / metrics / metrics_logger . h \" # include \" api / video / video_frame_buffer . h \" # include \" rtc_tools / video_file_reader . h \" namespace webrtc { namespace test { struct AnalysisResult {)",
    "insertText": "AnalysisResult()"
  },
  {
    "label": "AnalysisResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AnalysisResult(int frame_number, double psnr_value, double ssim_value) : frame_number(frame_number), psnr_value(psnr_value), ssim_value(ssim_value)"
  },
  {
    "label": "ResultsContainer()",
    "kind": "Method",
    "detail": "Function (} int frame_number ; double psnr_value ; double ssim_value ; } ; struct ResultsContainer {)",
    "insertText": "ResultsContainer()"
  },
  {
    "label": "RunAnalysis()",
    "kind": "Method",
    "detail": "Function (std::vector<AnalysisResult> frames ; int max_repeated_frames = 0 ; int max_skipped_frames = 0 ; int total_skipped_frames = 0 ; int decode_errors_ref = 0 ; int decode_errors_test = 0 ; } ; std::vector<AnalysisResult>)",
    "insertText": "RunAnalysis(const rtc::scoped_refptr<webrtc::test::Video>& reference_video, const rtc::scoped_refptr<webrtc::test::Video>& test_video, const std::vector<size_t>& test_frame_indices)"
  },
  {
    "label": "PrintAnalysisResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintAnalysisResults(const std::string& label, ResultsContainer& results, MetricsLogger& logger)"
  },
  {
    "label": "CalculateFrameClusters()",
    "kind": "Method",
    "detail": "Function (struct Cluster { size_t index ; int number_of_repeated_frames ; } ; std::vector<Cluster>)",
    "insertText": "CalculateFrameClusters(const std::vector<size_t>& indices)"
  },
  {
    "label": "GetMaxRepeatedFrames()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaxRepeatedFrames(const std::vector<Cluster>& clusters)"
  },
  {
    "label": "GetMaxSkippedFrames()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMaxSkippedFrames(const std::vector<Cluster>& clusters)"
  },
  {
    "label": "GetTotalNumberOfSkippedFrames()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTotalNumberOfSkippedFrames(const std::vector<Cluster>& clusters)"
  }
]