[
  {
    "label": "blocked_rangeNd_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blocked_rangeNd_impl"
  },
  {
    "label": "blocked_rangeNd_impl()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_blocked_rangeNd_H # define __TBB_blocked_rangeNd_H # if ! TBB_PREVIEW_BLOCKED_RANGE_ND # error Set TBB_PREVIEW_BLOCKED_RANGE_ND to include blocked_rangeNd . h # endif # include \" tbb_config . h \" # if __TBB_CPP11_PRESENT&& __TBB_CPP11_ARRAY_PRESENT&& __TBB_CPP11_TEMPLATE_ALIASES_PRESENT # include \" internal / _template_helpers . h \" # include<array> # include<algorithm> # include<type_traits> # include \" tbb / blocked_range . h \" namespace tbb { namespace internal { template<Value,unsigned int N,= make_index_sequence<N>> class blocked_rangeNd_impl ; template<Value,unsigned int N,std::size_t . . . Is> class blocked_rangeNd_impl<Value,N,index_sequence<Is . . .>> { public : using value_type = Value ; private : template<std::size_t> using dim_type_helper = tbb::blocked_range<value_type> ; public :)",
    "insertText": "blocked_rangeNd_impl()"
  },
  {
    "label": "blocked_rangeNd_impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "blocked_rangeNd_impl(const dim_type_helper<Is>&... args)"
  },
  {
    "label": "ndims()",
    "kind": "Method",
    "detail": "Function ({ args . . . } } { } unsigned int)",
    "insertText": "ndims()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(dimension < N, \"out of bound\")"
  },
  {
    "label": "is_divisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_divisible()"
  },
  {
    "label": "blocked_rangeNd_impl()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES const bool is_splittable_in_proportion = true ;)",
    "insertText": "blocked_rangeNd_impl(blocked_rangeNd_impl& r, proportional_split proportion) : my_dims(r.my_dims)"
  },
  {
    "label": "blocked_rangeNd_impl()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "blocked_rangeNd_impl(blocked_rangeNd_impl& r, split proportion) : my_dims(r.my_dims)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "__TBB_STATIC_ASSERT(N != 0, \"zero dimensional blocked_rangeNd can't be constructed\")"
  },
  {
    "label": "do_split()",
    "kind": "Method",
    "detail": "Function (std::array<tbb::blocked_range<value_type>,N> my_dims ; template<split_type> void)",
    "insertText": "do_split(blocked_rangeNd_impl& r, split_type proportion)"
  },
  {
    "label": "__TBB_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_STATIC_ASSERT((is_same_type<split_type, split>::value || is_same_type<split_type, proportional_split>::value), \"type of split object is incorrect\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(r.is_divisible(), \"can't split not divisible range\")"
  },
  {
    "label": "max_element()",
    "kind": "Method",
    "detail": "Function (auto my_it =)",
    "insertText": "max_element(my_dims.begin(), my_dims.end(), [](const tbb::blocked_range<value_type>& first, const tbb::blocked_range<value_type>& second) { return (first.size() * second.grainsize() < second.size() * first.grainsize()); })"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto r_it = r . my_dims .)",
    "insertText": "begin() + (my_it - my_dims.begin())"
  },
  {
    "label": "do_split()",
    "kind": "Method",
    "detail": "Function (my_it -> my_begin = tbb::blocked_range<value_type)",
    "insertText": "do_split(*r_it, proportion)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!(my_it->my_begin < r_it->my_end) && !(r_it->my_end < my_it->my_begin), \"blocked_range has been split incorrectly\")"
  }
]