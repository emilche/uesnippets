[
  {
    "label": "TransmissionControlBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransmissionControlBlock"
  },
  {
    "label": "TransmissionControlBlock()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_SOCKET_TRANSMISSION_CONTROL_BLOCK_H_ # define NET_DCSCTP_SOCKET_TRANSMISSION_CONTROL_BLOCK_H_ # include<cstdint> # include<functional> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / functional / bind_front . h \" # include \" absl / strings / string_view . h \" # include \" api / task_queue / task_queue_base . h \" # include \" net / dcsctp / common / sequence_numbers . h \" # include \" net / dcsctp / packet / chunk / cookie_echo_chunk . h \" # include \" net / dcsctp / packet / sctp_packet . h \" # include \" net / dcsctp / public / dcsctp_options . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / rx / data_tracker . h \" # include \" net / dcsctp / rx / reassembly_queue . h \" # include \" net / dcsctp / socket / capabilities . h \" # include \" net / dcsctp / socket / context . h \" # include \" net / dcsctp / socket / heartbeat_handler . h \" # include \" net / dcsctp / socket / packet_sender . h \" # include \" net / dcsctp / socket / stream_reset_handler . h \" # include \" net / dcsctp / timer / timer . h \" # include \" net / dcsctp / tx / retransmission_error_counter . h \" # include \" net / dcsctp / tx / retransmission_queue . h \" # include \" net / dcsctp / tx / retransmission_timeout . h \" # include \" net / dcsctp / tx / send_queue . h \" namespace dcsctp { class TransmissionControlBlock : public Context { public :)",
    "insertText": "TransmissionControlBlock(TimerManager& timer_manager, absl::string_view log_prefix, const DcSctpOptions& options, const Capabilities& capabilities, DcSctpSocketCallbacks& callbacks, SendQueue& send_queue, VerificationTag my_verification_tag, TSN my_initial_tsn, VerificationTag peer_verification_tag, TSN peer_initial_tsn, size_t a_rwnd, TieTag tie_tag, PacketSender& packet_sender, std::function<bool()> is_connection_established)"
  },
  {
    "label": "is_connection_established()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_connection_established()"
  },
  {
    "label": "my_initial_tsn()",
    "kind": "Method",
    "detail": "Function (} TSN)",
    "insertText": "my_initial_tsn()"
  },
  {
    "label": "current_rto()",
    "kind": "Method",
    "detail": "Function (DurationMs)",
    "insertText": "current_rto()"
  },
  {
    "label": "IncrementTxErrorCounter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IncrementTxErrorCounter(absl::string_view reason)"
  },
  {
    "label": "ClearTxErrorCounter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearTxErrorCounter()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (tx_error_counter_ .)",
    "insertText": "Clear()"
  },
  {
    "label": "PacketBuilder()",
    "kind": "Method",
    "detail": "Function (} SctpPacket::Builder)",
    "insertText": "PacketBuilder()"
  },
  {
    "label": "HasTooManyTxErrors()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTooManyTxErrors()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Send(SctpPacket::Builder& builder)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (packet_sender_ .)",
    "insertText": "Send(builder)"
  },
  {
    "label": "data_tracker()",
    "kind": "Method",
    "detail": "Function (} DataTracker&)",
    "insertText": "data_tracker()"
  },
  {
    "label": "current_srtt()",
    "kind": "Method",
    "detail": "Function (} DurationMs)",
    "insertText": "current_srtt()"
  },
  {
    "label": "my_verification_tag()",
    "kind": "Method",
    "detail": "Function (} VerificationTag)",
    "insertText": "my_verification_tag()"
  },
  {
    "label": "MaybeSendForwardTsn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSendForwardTsn(SctpPacket::Builder& builder, TimeMs now)"
  },
  {
    "label": "SetCookieEchoChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCookieEchoChunk(CookieEchoChunk chunk)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (cookie_echo_chunk_ =)",
    "insertText": "move(chunk)"
  },
  {
    "label": "ClearCookieEchoChunk()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearCookieEchoChunk()"
  },
  {
    "label": "has_cookie_echo_chunk()",
    "kind": "Method",
    "detail": "Function (cookie_echo_chunk_ = absl::nullopt ; } bool)",
    "insertText": "has_cookie_echo_chunk()"
  },
  {
    "label": "MaybeSendFastRetransmit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MaybeSendFastRetransmit()"
  },
  {
    "label": "SendBufferedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBufferedPackets(SctpPacket::Builder& builder, TimeMs now)"
  },
  {
    "label": "SendBufferedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBufferedPackets(TimeMs now)"
  },
  {
    "label": "builder()",
    "kind": "Method",
    "detail": "Function (SctpPacket::Builder)",
    "insertText": "builder(peer_verification_tag_, options_)"
  },
  {
    "label": "SendBufferedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBufferedPackets(builder, now)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "GetHandoverReadiness()",
    "kind": "Method",
    "detail": "Function (HandoverReadinessStatus)",
    "insertText": "GetHandoverReadiness()"
  },
  {
    "label": "AddHandoverState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHandoverState(DcSctpSocketHandoverState& state)"
  },
  {
    "label": "RestoreFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromState(const DcSctpSocketHandoverState& handover_state)"
  },
  {
    "label": "OnRtxTimerExpiry()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<DurationMs>)",
    "insertText": "OnRtxTimerExpiry()"
  },
  {
    "label": "OnDelayedAckTimerExpiry()",
    "kind": "Method",
    "detail": "Function (absl::optional<DurationMs>)",
    "insertText": "OnDelayedAckTimerExpiry()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const std::string log_prefix_ ; const DcSctpOptions options_ ; TimerManager& timer_manager_ ; const Capabilities capabilities_ ; DcSctpSocketCallbacks& callbacks_ ; const std::unique_ptr<Timer> t3_rtx_ ; const std::unique_ptr<Timer> delayed_ack_timer_ ; const VerificationTag my_verification_tag_ ; const TSN my_initial_tsn_ ; const VerificationTag peer_verification_tag_ ; const TSN peer_initial_tsn_ ; const TieTag tie_tag_ ; const std::function<)",
    "insertText": "bool()"
  },
  {
    "label": "TimeMs()",
    "kind": "Method",
    "detail": "Function (PacketSender& packet_sender_ ; TimeMs limit_forward_tsn_until_ =)",
    "insertText": "TimeMs(0)"
  }
]