[
  {
    "label": "ABrush",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABrush"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "AGameModeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameModeBase"
  },
  {
    "label": "AGameStateBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameStateBase"
  },
  {
    "label": "APhysicsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APhysicsVolume"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "AServerStreamingLevelsVisibility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AServerStreamingLevelsVisibility"
  },
  {
    "label": "AWorldDataLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldDataLayers"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerManager"
  },
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FConstPawnIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConstPawnIterator"
  },
  {
    "label": "FRegisterComponentContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegisterComponentContext"
  },
  {
    "label": "FTimerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimerManager"
  },
  {
    "label": "FWorldInGamePerformanceTrackers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldInGamePerformanceTrackers"
  },
  {
    "label": "IInterface_PostProcessVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IInterface_PostProcessVolume"
  },
  {
    "label": "UAISystemBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISystemBase"
  },
  {
    "label": "UChaosEventRelay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChaosEventRelay"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UDemoNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDemoNetDriver"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UMaterialParameterCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialParameterCollection"
  },
  {
    "label": "UMaterialParameterCollectionInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialParameterCollectionInstance"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "UNavigationSystemBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemBase"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FPhysScene_Chaos",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysScene_Chaos"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FUniqueNetIdRepl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueNetIdRepl"
  },
  {
    "label": "FEncryptionKeyResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEncryptionKeyResponse"
  },
  {
    "label": "FParticlePerfStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticlePerfStats"
  },
  {
    "label": "TOctree2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOctree2"
  },
  {
    "label": "TActorIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorIterator"
  },
  {
    "label": "UWorldProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldProxy"
  },
  {
    "label": "ENGINE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ENGINE_API"
  },
  {
    "label": "FSeamlessTravelHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSeamlessTravelHandler"
  },
  {
    "label": "FStartPhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStartPhysicsTickFunction"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FEndPhysicsTickFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEndPhysicsTickFunction"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "UChildActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChildActorComponent"
  },
  {
    "label": "UPackageMapClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMapClient"
  },
  {
    "label": "UNetActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetActorFactory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FActorsInitializedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorsInitializedParams"
  },
  {
    "label": "FWorldCachedViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldCachedViewInfo"
  },
  {
    "label": "FWorldPartitionEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionEvents"
  },
  {
    "label": "ULayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULayer"
  },
  {
    "label": "UThumbnailInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UThumbnailInfo"
  },
  {
    "label": "ULineBatchComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULineBatchComponent"
  },
  {
    "label": "AGameNetworkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AGameNetworkManager"
  },
  {
    "label": "UPhysicsCollisionHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsCollisionHandler"
  },
  {
    "label": "AParticleEventManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AParticleEventManager"
  },
  {
    "label": "UAvoidanceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAvoidanceManager"
  },
  {
    "label": "FHierarchicalLODBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHierarchicalLODBuilder"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UPhysicsFieldComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPhysicsFieldComponent"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FLatentActionManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLatentActionManager"
  },
  {
    "label": "FFXSystemInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFXSystemInterface"
  },
  {
    "label": "AAudioVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAudioVolume"
  },
  {
    "label": "UWorldComposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldComposition"
  },
  {
    "label": "UContentBundleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UContentBundleManager"
  },
  {
    "label": "FWorldNotifyStreamingLevelLoading",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldNotifyStreamingLevelLoading"
  },
  {
    "label": "FHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHitResult"
  },
  {
    "label": "FOverlapResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlapResult"
  },
  {
    "label": "ALevelScriptActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALevelScriptActor"
  },
  {
    "label": "UPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlayer"
  },
  {
    "label": "UChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UChannel"
  },
  {
    "label": "FInBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInBunch"
  },
  {
    "label": "FReverbSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReverbSettings"
  },
  {
    "label": "FInteriorSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInteriorSettings"
  },
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameFramework / Actor . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Online / CoreOnlineFwd . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" UObject / Class . h \" # include \" Delegates / IDelegateInstance . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" GameTime . h \" # include \" CollisionQueryParams . h \" # include \" WorldCollision . h \" # include \" GameFramework / UpdateLevelVisibilityLevelInfo . h \" # include \" EngineDefines . h \" # include \" Engine / PendingNetGame . h \" # include \" Engine / LatentActionManager . h \" # include \" Physics / PhysicsInterfaceDeclares . h \" # include \" Particles / WorldPSCPool . h \" # include \" Containers / SortedMap . h \" # include \" AudioDeviceHandle . h \" # include \" Subsystems / WorldSubsystem . h \" # include \" Subsystems / SubsystemCollection . h \" # include \" CollisionProfile . h \" # include \" RHIFeatureLevel . h \" # include \" Engine / WorldInitializationValues . h \" # include \" World . generated . h \" class ABrush ; class ACameraActor ; class AController ; class AGameModeBase ; class AGameStateBase ; class APhysicsVolume ; class APlayerController ; class AServerStreamingLevelsVisibility ; class AWorldDataLayers ; class AWorldSettings ; class UWorldPartition ; class UDataLayerManager ; class Error ; class FConstPawnIterator ; class FRegisterComponentContext ; class FTimerManager ; class FWorldInGamePerformanceTrackers ; class IInterface_PostProcessVolume ; class UAISystemBase ; class UChaosEventRelay ; class UCanvas ; class UDemoNetDriver ; class UGameViewportClient ; class ULevel ; class ULevelStreaming ; class ULocalPlayer ; class UMaterialParameterCollection ; class UMaterialParameterCollectionInstance ; class UModel ; class UNavigationSystemBase ; class UNetConnection ; class UNetDriver ; class UPrimitiveComponent ; class UTexture2D ; class FPhysScene_Chaos ; class FSceneView ; struct FUniqueNetIdRepl ; struct FEncryptionKeyResponse ; struct FParticlePerfStats ; template<,> class TOctree2 ; template<ActorType> class TActorIterator ; typedef TArray<TWeakObjectPtr<AController>>::TConstIterator FConstControllerIterator ; typedef TArray<TWeakObjectPtr<APlayerController>>::TConstIterator FConstPlayerControllerIterator ; typedef TArray<TWeakObjectPtr<ACameraActor>>::TConstIterator FConstCameraActorIterator ; typedef TArray<ULevel*>::TConstIterator FConstLevelIterator ; typedef TArray<TWeakObjectPtr<APhysicsVolume>>::TConstIterator FConstPhysicsVolumeIterator ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSpawn, Warning, All)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnActorSpawned, AActor*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnActorDestroyed, AActor*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPostRegisterAllActorComponents, AActor*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnPreUnregisterAllActorComponents, AActor*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnActorRemovedFromWorld, AActor*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnFeatureLevelChanged, ERHIFeatureLevel::Type)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnMovieSceneSequenceTick, float)"
  },
  {
    "label": "UWorldProxy()",
    "kind": "Method",
    "detail": "Function (class UWorldProxy { public :)",
    "insertText": "UWorldProxy() : World(NULL)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} UWorld*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (World = InWorld ; return* this ; } UWorldProxy&)",
    "insertText": "operator(const UWorldProxy& InProxy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (World = InProxy . World ; return* this ; } bool)",
    "insertText": "operator(const UWorldProxy& Other)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnWorldRegisteredToAudioDevice OnWorldRegisteredToAudioDevice ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnWorldUnregisteredWithAudioDevice, const UWorld* , Audio::FDeviceId)"
  },
  {
    "label": "CopyWorldData()",
    "kind": "Method",
    "detail": "Function (FOnWorldUnregisteredWithAudioDevice OnWorldUnregisteredWithAudioDevice ; } ; class FSeamlessTravelHandler { private : FURL PendingTravelURL ; UObject* LoadedPackage ; UWorld* CurrentWorld ; UWorld* LoadedWorld ; bool bTransitionInProgress ; bool bSwitchedToDefaultMap ; bool bPauseAtMidpoint ; bool bNeedCancelCleanUp ; FName WorldContextHandle ; double SeamlessTravelStartTime = 0 . 0 ; void)",
    "insertText": "CopyWorldData()"
  },
  {
    "label": "SeamlessTravelLoadCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeamlessTravelLoadCallback(const FName& PackageName, UPackage* LevelPackage, EAsyncLoadingResult::Type Result)"
  },
  {
    "label": "SetHandlerLoadedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHandlerLoadedData(UObject* InLevelPackage, UWorld* InLoadedWorld)"
  },
  {
    "label": "StartLoadingMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartLoadingMap(FString MapPackageToLoadFrom)"
  },
  {
    "label": "StartLoadingDestination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartLoadingDestination()"
  },
  {
    "label": "FSeamlessTravelHandler()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSeamlessTravelHandler() : PendingTravelURL(NoInit) , LoadedPackage(NULL) , CurrentWorld(NULL) , LoadedWorld(NULL) , bTransitionInProgress(false) , bSwitchedToDefaultMap(false) , bPauseAtMidpoint(false) , bNeedCancelCleanUp(false)"
  },
  {
    "label": "StartTravel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartTravel(UWorld* InCurrentWorld, const FURL& InURL)"
  },
  {
    "label": "GetDestinationMapName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDestinationMapName()"
  },
  {
    "label": "GetLoadedWorld()",
    "kind": "Method",
    "detail": "Function (} const UWorld*)",
    "insertText": "GetLoadedWorld()"
  },
  {
    "label": "SetPauseAtMidpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPauseAtMidpoint(bool bNowPaused)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "Tick()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FLevelViewportInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLevelViewportInfo() : CamPosition(FVector::ZeroVector) , CamRotation(FRotator::ZeroRotator) , CamOrthoZoom(DEFAULT_ORTHOZOOM) , CamUpdated(false)"
  },
  {
    "label": "FLevelViewportInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLevelViewportInfo(const FVector& InCamPosition, const FRotator& InCamRotation, float InCamOrthoZoom) : CamPosition(InCamPosition) , CamRotation(InCamRotation) , CamOrthoZoom(InCamOrthoZoom) , CamUpdated(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FLevelViewportInfo& I)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<I . CamPosition ; Ar<<I . CamRotation ; Ar<<I . CamOrthoZoom ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (I . CamUpdated = true ;)",
    "insertText": "if(I.CamOrthoZoom < MIN_ORTHOZOOM || I.CamOrthoZoom > MAX_ORTHOZOOM)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "ExecuteTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteTick(float DeltaTime, enum ELevelTick TickType, ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "DiagnosticMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DiagnosticMessage()"
  },
  {
    "label": "DiagnosticContext()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "DiagnosticContext(bool bDetailed)"
  },
  {
    "label": "FActorSpawnParameters()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FEndPhysicsTickFunction> : public TStructOpsTypeTraitsBase2<FEndPhysicsTickFunction> { enum { WithCopy = false } ; } ; struct FActorSpawnParameters {)",
    "insertText": "FActorSpawnParameters()"
  },
  {
    "label": "IsRemoteOwned()",
    "kind": "Method",
    "detail": "Function (FName Name ; AActor* Template ; AActor* Owner ; APawn* Instigator ; class ULevel* OverrideLevel ; # if WITH_EDITOR class UPackage* OverridePackage ; FGuid OverrideActorGuid ; # endif class UChildActorComponent* OverrideParentComponent ; ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingOverride ; ESpawnActorScaleMethod TransformScaleMethod = ESpawnActorScaleMethod::MultiplyWithRoot ; private : class UPackageMapClient ; # if UE_WITH_IRIS class UNetActorFactory ; # endif uint8 bRemoteOwned : 1 ; public : bool)",
    "insertText": "IsRemoteOwned()"
  },
  {
    "label": "MakeUniqueActorName()",
    "kind": "Method",
    "detail": "Function (} ; struct FActorSpawnUtils { FName)",
    "insertText": "MakeUniqueActorName(ULevel* Level, const UClass* Class, FName BaseName, bool bGloballyUnique)"
  },
  {
    "label": "IsGloballyUniqueName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGloballyUniqueName(FName Name)"
  },
  {
    "label": "GetBaseName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetBaseName(FName Name)"
  },
  {
    "label": "FActorsInitializedParams()",
    "kind": "Method",
    "detail": "Function (} ; struct FActorsInitializedParams {)",
    "insertText": "FActorsInitializedParams(UWorld* InWorld, bool InResetTime) : World(InWorld), ResetTime(InResetTime)"
  },
  {
    "label": "FWorldAsyncTraceState()",
    "kind": "Method",
    "detail": "Function (} UWorld* World ; bool ResetTime ; } ; struct FWorldAsyncTraceState {)",
    "insertText": "FWorldAsyncTraceState()"
  },
  {
    "label": "FAsyncPreRegisterDDCRequest()",
    "kind": "Method",
    "detail": "Function (} AsyncTraceData DataBuffer [ 2 ] ; int32 CurrentFrame ; } ; # if WITH_EDITOR class FAsyncPreRegisterDDCRequest { FString DDCKey ; uint32 Handle ; public :)",
    "insertText": "FAsyncPreRegisterDDCRequest(const FString& InKey, uint32 InHandle) : DDCKey(InKey) , Handle(InHandle)"
  },
  {
    "label": "FAsyncPreRegisterDDCRequest()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAsyncPreRegisterDDCRequest()"
  },
  {
    "label": "PollAsynchronousCompletion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollAsynchronousCompletion()"
  },
  {
    "label": "WaitAsynchronousCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitAsynchronousCompletion()"
  },
  {
    "label": "GetAsynchronousResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAsynchronousResults(TArray<uint8>& OutData)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetKey()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FLevelCollection()"
  },
  {
    "label": "FLevelCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLevelCollection(const FLevelCollection&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLevelCollection&)",
    "insertText": "operator(const FLevelCollection&)"
  },
  {
    "label": "FLevelCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLevelCollection(FLevelCollection&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLevelCollection&)",
    "insertText": "operator(FLevelCollection&& Other)"
  },
  {
    "label": "FLevelCollection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLevelCollection()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (ELevelCollectionType)",
    "insertText": "GetType()"
  },
  {
    "label": "GetGameState()",
    "kind": "Method",
    "detail": "Function (CollectionType = InType ; } AGameStateBase*)",
    "insertText": "GetGameState()"
  },
  {
    "label": "GetNetDriver()",
    "kind": "Method",
    "detail": "Function (GameState = InGameState ; } UNetDriver*)",
    "insertText": "GetNetDriver()"
  },
  {
    "label": "GetDemoNetDriver()",
    "kind": "Method",
    "detail": "Function (NetDriver = InNetDriver ; } UDemoNetDriver*)",
    "insertText": "GetDemoNetDriver()"
  },
  {
    "label": "GetLevels()",
    "kind": "Method",
    "detail": "Function (DemoNetDriver = InDemoNetDriver ; } const TSet<TObjectPtr<ULevel>>&)",
    "insertText": "GetLevels()"
  },
  {
    "label": "RemoveLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevel(ULevel* const Level)"
  },
  {
    "label": "SetPersistentLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPersistentLevel(ULevel* const Level)"
  },
  {
    "label": "GetPersistentLevel()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "GetPersistentLevel()"
  },
  {
    "label": "FScopedLevelCollectionContextSwitch()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FLevelCollection> : public TStructOpsTypeTraitsBase2<FLevelCollection> { enum { WithCopy = false } ; } ; class FScopedLevelCollectionContextSwitch { public :)",
    "insertText": "FScopedLevelCollectionContextSwitch(const FLevelCollection* const InLevelCollection, UWorld* const InWorld)"
  },
  {
    "label": "FScopedLevelCollectionContextSwitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedLevelCollectionContextSwitch(int32 InLevelCollectionIndex, UWorld* const InWorld)"
  },
  {
    "label": "FScopedLevelCollectionContextSwitch()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedLevelCollectionContextSwitch()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FStreamingLevelsToConsider() : StreamingLevelsBeingConsidered(0)"
  },
  {
    "label": "Add_Internal()",
    "kind": "Method",
    "detail": "Function (enum class EProcessReason : uint8 { Add,Reevaluate } ; TSortedMap<TObjectPtr<ULevelStreaming>,EProcessReason> LevelsToProcess ; int32 StreamingLevelsBeingConsidered ; void)",
    "insertText": "Add_Internal(ULevelStreaming* StreamingLevel, bool bGuaranteedNotInContainer)"
  },
  {
    "label": "GetStreamingLevels()",
    "kind": "Method",
    "detail": "Function (public : const TArray<TObjectPtr<ULevelStreaming>>&)",
    "insertText": "GetStreamingLevels()"
  },
  {
    "label": "BeginConsideration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginConsideration()"
  },
  {
    "label": "EndConsideration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndConsideration()"
  },
  {
    "label": "AreStreamingLevelsBeingConsidered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreStreamingLevelsBeingConsidered()"
  },
  {
    "label": "Add_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add_Internal(StreamingLevel, false)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Remove(ULevelStreaming* StreamingLevel)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(int32 Index)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(ULevelStreaming* StreamingLevel)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Reevaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reevaluate(ULevelStreaming* StreamingLevel)"
  },
  {
    "label": "BroadcastWorldPartitionInitialized()",
    "kind": "Method",
    "detail": "Function (} ; struct FWorldCachedViewInfo { FMatrix ViewMatrix ; FMatrix ProjectionMatrix ; FMatrix ViewProjectionMatrix ; FMatrix ViewToWorld ; } ; struct FWorldPartitionEvents { UWorldPartition ; private : void)",
    "insertText": "BroadcastWorldPartitionInitialized(UWorld* InWorld, UWorldPartition* InWorldPartition)"
  },
  {
    "label": "BroadcastWorldPartitionUninitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastWorldPartitionUninitialized(UWorld* InWorld, UWorldPartition* InWorldPartition)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(customConstructor, config=Engine)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() ~UWorld()"
  },
  {
    "label": "SupportsMakingVisibleTransactionRequests()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "SupportsMakingVisibleTransactionRequests()"
  },
  {
    "label": "SupportsMakingInvisibleTransactionRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsMakingInvisibleTransactionRequests()"
  },
  {
    "label": "GetServerStreamingLevelsVisibility()",
    "kind": "Method",
    "detail": "Function (const AServerStreamingLevelsVisibility*)",
    "insertText": "GetServerStreamingLevelsVisibility()"
  },
  {
    "label": "HasStreamingLevelsToConsider()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasStreamingLevelsToConsider()"
  },
  {
    "label": "GetCurrentLevelPendingVisibility()",
    "kind": "Method",
    "detail": "Function (} ULevel*)",
    "insertText": "GetCurrentLevelPendingVisibility()"
  },
  {
    "label": "AddStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStreamingLevels(TArrayView<ULevelStreaming* const> StreamingLevelsToAdd)"
  },
  {
    "label": "AddUniqueStreamingLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniqueStreamingLevel(ULevelStreaming* StreamingLevelToAdd)"
  },
  {
    "label": "AddUniqueStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUniqueStreamingLevels(TArrayView<ULevelStreaming* const> StreamingLevelsToAdd)"
  },
  {
    "label": "SetStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamingLevels(TArray<ULevelStreaming*>&& StreamingLevels)"
  },
  {
    "label": "SetStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamingLevels(TArrayView<ULevelStreaming* const> StreamingLevels)"
  },
  {
    "label": "RemoveStreamingLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveStreamingLevel(ULevelStreaming* StreamingLevelToRemove)"
  },
  {
    "label": "RemoveStreamingLevelAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveStreamingLevelAt(int32 IndexToRemove)"
  },
  {
    "label": "RemoveStreamingLevels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveStreamingLevels(TArrayView<ULevelStreaming* const> StreamingLevelsToRemove)"
  },
  {
    "label": "ClearStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearStreamingLevels()"
  },
  {
    "label": "UpdateStreamingLevelShouldBeConsidered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingLevelShouldBeConsidered(ULevelStreaming* StreamingLevelToConsider)"
  },
  {
    "label": "UpdateStreamingLevelPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStreamingLevelPriority(ULevelStreaming* StreamingLevel)"
  },
  {
    "label": "PopulateStreamingLevelsToConsider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateStreamingLevelsToConsider()"
  },
  {
    "label": "GetIsInBlockTillLevelStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsInBlockTillLevelStreamingCompleted()"
  },
  {
    "label": "CanAddLoadedLevelToWorld()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanAddLoadedLevelToWorld(ULevel* Level)"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (bool bAllowDeferredPhysicsStateCreation ; public : PRAGMA_DISABLE_DEPRECATION_WARNINGS ERHIFeatureLevel::Type)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "SetBegunPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBegunPlay(bool bHasBegunPlay)"
  },
  {
    "label": "GetBegunPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBegunPlay()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UWorld, FOnBeginPlay, bool)"
  },
  {
    "label": "GetOnBeginPlayEvent()",
    "kind": "Method",
    "detail": "Function (FOnBeginPlay&)",
    "insertText": "GetOnBeginPlayEvent()"
  },
  {
    "label": "ConditionallyCreateDefaultLevelCollections()",
    "kind": "Method",
    "detail": "Function (int32 ActiveLevelCollectionIndex ; void)",
    "insertText": "ConditionallyCreateDefaultLevelCollections()"
  },
  {
    "label": "SetNavigationSystem()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetNavigationSystem(UNavigationSystemBase* InNavigationSystem)"
  },
  {
    "label": "SetCurrentLevel()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA bool)",
    "insertText": "SetCurrentLevel(class ULevel* InLevel)"
  },
  {
    "label": "GetCurrentLevel()",
    "kind": "Method",
    "detail": "Function (# endif class ULevel*)",
    "insertText": "GetCurrentLevel()"
  },
  {
    "label": "GetBlueprintObjectsBeingDebugged()",
    "kind": "Method",
    "detail": "Function (TMap<FName,EWorldType::Type> WorldTypePreLoadMap ; # if WITH_EDITOR typedef TMap<TWeakObjectPtr<class UBlueprint>,TWeakObjectPtr<UObject>> FBlueprintToDebuggedObjectMap ; const FBlueprintToDebuggedObjectMap&)",
    "insertText": "GetBlueprintObjectsBeingDebugged()"
  },
  {
    "label": "InitializeSubsystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSubsystems()"
  },
  {
    "label": "PostInitializeSubsystems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeSubsystems()"
  },
  {
    "label": "ChangeFeatureLevel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ChangeFeatureLevel(ERHIFeatureLevel::Type InFeatureLevel, bool bShowSlowProgressDialog = true, bool bForceUpdate = false)"
  },
  {
    "label": "ShaderPlatformChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShaderPlatformChanged()"
  },
  {
    "label": "RecreateScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateScene(ERHIFeatureLevel::Type InFeatureLevel, bool bBroadcastChange = true)"
  },
  {
    "label": "PurgeScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeScene()"
  },
  {
    "label": "RestoreScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreScene()"
  },
  {
    "label": "OnAddExtraObjectsToDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddExtraObjectsToDelete(const TArray<UObject*>& InObjectsToDelete, TSet<UObject*>& OutSecondaryObjects)"
  },
  {
    "label": "SetShouldTick()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetShouldTick(const bool bInShouldTick)"
  },
  {
    "label": "ShouldTick()",
    "kind": "Method",
    "detail": "Function (bShouldTick = bInShouldTick ; } bool)",
    "insertText": "ShouldTick()"
  },
  {
    "label": "ResetAsyncTrace()",
    "kind": "Method",
    "detail": "Function (FWorldAsyncTraceState AsyncTraceState ; # if WITH_EDITOR FBlueprintToDebuggedObjectMap BlueprintObjectsBeingDebugged ; # endif FOnActorSpawned OnActorSpawned ; FOnActorSpawned OnActorPreSpawnInitialization ; FOnActorDestroyed OnActorDestroyed ; FOnPostRegisterAllActorComponents OnPostRegisterAllActorComponents ; FOnPreUnregisterAllActorComponents OnPreUnregisterAllActorComponents ; FOnActorRemovedFromWorld OnActorRemovedFromWorld ; void)",
    "insertText": "ResetAsyncTrace()"
  },
  {
    "label": "WaitForAllAsyncTraceTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAllAsyncTraceTasks()"
  },
  {
    "label": "FinishAsyncTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAsyncTrace()"
  },
  {
    "label": "RepairSingletonActorOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepairSingletonActorOfClass(TSubclassOf<AActor> ActorClass)"
  },
  {
    "label": "RepairSingletonActorOfClass()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "RepairSingletonActorOfClass()"
  },
  {
    "label": "RepairSingletonActorOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepairSingletonActorOfClass(T::StaticClass())"
  },
  {
    "label": "RepairWorldSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RepairWorldSettings()"
  },
  {
    "label": "RepairSingletonActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepairSingletonActors()"
  },
  {
    "label": "RepairStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepairStreamingLevels()"
  },
  {
    "label": "RepairChaosActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepairChaosActors()"
  },
  {
    "label": "RepairDefaultBrush()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RepairDefaultBrush()"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"Public access to TickDispatchEvent has been deprecated - use OnTickDispatch() instead.\") TMulticastDelegate<void(float)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"Public access to PostTickDispatchEvent has been deprecated - use OnPostTickDispatch() instead.\") TMulticastDelegate<void()"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"Public access to PreTickFlushEvent has been deprecated - use OnPreTickFlush() instead.\") TMulticastDelegate<void(float)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"Public access to TickFlushEvent has been deprecated - use OnTickFlush() instead.\") TMulticastDelegate<void(float)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"Public access to PostTickFlushEvent has been deprecated - use OnPostTickFlush() instead.\") TMulticastDelegate<void()"
  },
  {
    "label": "BroadcastTickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastTickDispatch(float DeltaTime)"
  },
  {
    "label": "BroadcastPostTickDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPostTickDispatch()"
  },
  {
    "label": "BroadcastPreTickFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPreTickFlush(float DeltaTime)"
  },
  {
    "label": "BroadcastTickFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastTickFlush(float DeltaTime)"
  },
  {
    "label": "BroadcastPostTickFlush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPostTickFlush(float DeltaTime)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(UWorld, FOnLevelsChangedEvent)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (FOnLevelsChangedEvent LevelsChangedEvent ;)",
    "insertText": "DECLARE_EVENT(UWorld, FOnAllLevelsChangedEvent)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnAllLevelsChangedEvent AllLevelsChangedEvent ;)",
    "insertText": "DECLARE_EVENT_OneParam(UWorld, FWorldPartitionInitializedEvent, UWorldPartition*)"
  },
  {
    "label": "BroadcastWorldPartitionInitialized()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionInitializedEvent OnWorldPartitionInitializedEvent ; void)",
    "insertText": "BroadcastWorldPartitionInitialized(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnWorldPartitionInitializedEvent .)",
    "insertText": "Broadcast(InWorldPartition)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(UWorld, FWorldPartitionUninitializedEvent, UWorldPartition*)"
  },
  {
    "label": "BroadcastWorldPartitionUninitialized()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionUninitializedEvent OnWorldPartitionUninitializedEvent ; void)",
    "insertText": "BroadcastWorldPartitionUninitialized(UWorldPartition* InWorldPartition)"
  },
  {
    "label": "BroadcastSelectedLevelsChanged()",
    "kind": "Method",
    "detail": "Function (} FWorldPartitionEvents ; # if WITH_EDITOR void)",
    "insertText": "BroadcastSelectedLevelsChanged()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA)",
    "insertText": "DECLARE_EVENT(UWorld, FOnSelectedLevelsChangedEvent)"
  },
  {
    "label": "GetShouldForceUnloadStreamingLevels()",
    "kind": "Method",
    "detail": "Function (uint32 bBroadcastSelectionChange : 1 ; FOnFeatureLevelChanged OnFeatureLevelChanged ; # endif FOnMovieSceneSequenceTick MovieSceneSequenceTick ; public : FURL URL ; class FFXSystemInterface* FXSystem ; FStartPhysicsTickFunction StartPhysicsTickFunction ; FEndPhysicsTickFunction EndPhysicsTickFunction ; int32 PlayerNum ; int32 StreamingVolumeUpdateDelay ; bool)",
    "insertText": "GetShouldForceUnloadStreamingLevels()"
  },
  {
    "label": "GetShouldForceVisibleStreamingLevels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShouldForceVisibleStreamingLevels()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "DebugDrawSceneQueries()",
    "kind": "Method",
    "detail": "Function (bool bDebugDrawAllTraceTags ; bool)",
    "insertText": "DebugDrawSceneQueries(const FName& UsedTraceTag)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "DECLARE_EVENT_TwoParams(UWorld, FOnBeginPostProcessSettings, FVector, FSceneView*)"
  },
  {
    "label": "InsertPostProcessVolume()",
    "kind": "Method",
    "detail": "Function (FOnBeginPostProcessSettings OnBeginPostProcessSettings ; void)",
    "insertText": "InsertPostProcessVolume(IInterface_PostProcessVolume* InVolume)"
  },
  {
    "label": "RemovePostProcessVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePostProcessVolume(IInterface_PostProcessVolume* InVolume)"
  },
  {
    "label": "AddPostProcessingSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPostProcessingSettings(FVector ViewLocation, FSceneView* SceneView)"
  },
  {
    "label": "HasMarkedObjectsPendingKill()",
    "kind": "Method",
    "detail": "Function (EFlushLevelStreamingType FlushLevelStreamingType ; TEnumAsByte<ETravelType> NextTravelType ; private : uint16 NumStreamingLevelsBeingLoaded ; struct FWorldNotifyStreamingLevelLoading ; public : FString NextURL ; TArray<FName> PreparingLevelNames ; FName CommittedPersistentLevelName ; # if ! UE_BUILD_SHIPPING | | WITH_EDITOR uint32 NumLightingUnbuiltObjects ; uint32 NumUnbuiltReflectionCaptures ; int32 NumTextureStreamingUnbuiltComponents ; int32 NumTextureStreamingDirtyResources ; # endif bool)",
    "insertText": "HasMarkedObjectsPendingKill()"
  },
  {
    "label": "LineTraceTestByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceTestByChannel(const FVector& Start,const FVector& End,ECollisionChannel TraceChannel, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "LineTraceTestByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceTestByObjectType(const FVector& Start,const FVector& End,const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "LineTraceTestByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceTestByProfile(const FVector& Start, const FVector& End, FName ProfileName, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "LineTraceSingleByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceSingleByChannel(struct FHitResult& OutHit,const FVector& Start,const FVector& End,ECollisionChannel TraceChannel,const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "LineTraceSingleByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceSingleByObjectType(struct FHitResult& OutHit,const FVector& Start,const FVector& End,const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "LineTraceSingleByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceSingleByProfile(struct FHitResult& OutHit, const FVector& Start, const FVector& End, FName ProfileName, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "LineTraceMultiByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceMultiByChannel(TArray<struct FHitResult>& OutHits,const FVector& Start,const FVector& End,ECollisionChannel TraceChannel,const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "LineTraceMultiByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceMultiByObjectType(TArray<struct FHitResult>& OutHits,const FVector& Start,const FVector& End,const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "LineTraceMultiByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineTraceMultiByProfile(TArray<struct FHitResult>& OutHits, const FVector& Start, const FVector& End, FName ProfileName, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "SweepTestByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepTestByChannel(const FVector& Start, const FVector& End, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "SweepTestByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepTestByObjectType(const FVector& Start, const FVector& End, const FQuat& Rot, const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "SweepTestByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepTestByProfile(const FVector& Start, const FVector& End, const FQuat& Rot, FName ProfileName, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params)"
  },
  {
    "label": "SweepSingleByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepSingleByChannel(struct FHitResult& OutHit, const FVector& Start, const FVector& End, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "SweepSingleByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepSingleByObjectType(struct FHitResult& OutHit, const FVector& Start, const FVector& End, const FQuat& Rot, const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "SweepSingleByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepSingleByProfile(struct FHitResult& OutHit, const FVector& Start, const FVector& End, const FQuat& Rot, FName ProfileName, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "SweepMultiByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepMultiByChannel(TArray<struct FHitResult>& OutHits, const FVector& Start, const FVector& End, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "SweepMultiByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepMultiByObjectType(TArray<struct FHitResult>& OutHits, const FVector& Start, const FVector& End, const FQuat& Rot, const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "SweepMultiByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SweepMultiByProfile(TArray<FHitResult>& OutHits, const FVector& Start, const FVector& End, const FQuat& Rot, FName ProfileName, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "OverlapBlockingTestByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapBlockingTestByChannel(const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "OverlapAnyTestByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapAnyTestByChannel(const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "OverlapAnyTestByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapAnyTestByObjectType(const FVector& Pos, const FQuat& Rot, const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "OverlapBlockingTestByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapBlockingTestByProfile(const FVector& Pos, const FQuat& Rot, FName ProfileName, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "OverlapAnyTestByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapAnyTestByProfile(const FVector& Pos, const FQuat& Rot, FName ProfileName, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "OverlapMultiByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapMultiByChannel(TArray<struct FOverlapResult>& OutOverlaps, const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam)"
  },
  {
    "label": "OverlapMultiByObjectType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapMultiByObjectType(TArray<struct FOverlapResult>& OutOverlaps, const FVector& Pos, const FQuat& Rot, const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "OverlapMultiByProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapMultiByProfile(TArray<struct FOverlapResult>& OutOverlaps, const FVector& Pos, const FQuat& Rot, FName ProfileName, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam)"
  },
  {
    "label": "ComponentSweepMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentSweepMulti(TArray<struct FHitResult>& OutHits, class UPrimitiveComponent* PrimComp, const FVector& Start, const FVector& End, const FQuat& Rot, const FComponentQueryParams& Params)"
  },
  {
    "label": "ComponentSweepMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentSweepMulti(TArray<struct FHitResult>& OutHits, class UPrimitiveComponent* PrimComp, const FVector& Start, const FVector& End, const FRotator& Rot, const FComponentQueryParams& Params)"
  },
  {
    "label": "ComponentSweepMultiByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentSweepMultiByChannel(TArray<struct FHitResult>& OutHits, class UPrimitiveComponent* PrimComp, const FVector& Start, const FVector& End, const FQuat& Rot, ECollisionChannel TraceChannel, const FComponentQueryParams& Params)"
  },
  {
    "label": "ComponentSweepMultiByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentSweepMultiByChannel(TArray<struct FHitResult>& OutHits, class UPrimitiveComponent* PrimComp, const FVector& Start, const FVector& End, const FRotator& Rot, ECollisionChannel TraceChannel, const FComponentQueryParams& Params)"
  },
  {
    "label": "ComponentOverlapMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapMulti(TArray<struct FOverlapResult>& OutOverlaps, const class UPrimitiveComponent* PrimComp, const FVector& Pos, const FQuat& Rot, const FComponentQueryParams& Params = FComponentQueryParams::DefaultComponentQueryParams, const FCollisionObjectQueryParams& ObjectQueryParams=FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "ComponentOverlapMulti()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapMulti(TArray<struct FOverlapResult>& OutOverlaps, const class UPrimitiveComponent* PrimComp, const FVector& Pos, const FRotator& Rot, const FComponentQueryParams& Params = FComponentQueryParams::DefaultComponentQueryParams, const FCollisionObjectQueryParams& ObjectQueryParams=FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "ComponentOverlapMultiByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapMultiByChannel(TArray<struct FOverlapResult>& OutOverlaps, const class UPrimitiveComponent* PrimComp, const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FComponentQueryParams& Params = FComponentQueryParams::DefaultComponentQueryParams, const FCollisionObjectQueryParams& ObjectQueryParams=FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "ComponentOverlapMultiByChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComponentOverlapMultiByChannel(TArray<struct FOverlapResult>& OutOverlaps, const class UPrimitiveComponent* PrimComp, const FVector& Pos, const FRotator& Rot, ECollisionChannel TraceChannel, const FComponentQueryParams& Params = FComponentQueryParams::DefaultComponentQueryParams, const FCollisionObjectQueryParams& ObjectQueryParams=FCollisionObjectQueryParams::DefaultObjectQueryParam)"
  },
  {
    "label": "AsyncLineTraceByChannel()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncLineTraceByChannel(EAsyncTraceType InTraceType, const FVector& Start,const FVector& End, ECollisionChannel TraceChannel, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam, const FTraceDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "AsyncLineTraceByObjectType()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncLineTraceByObjectType(EAsyncTraceType InTraceType, const FVector& Start,const FVector& End, const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FTraceDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "AsyncLineTraceByProfile()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncLineTraceByProfile(EAsyncTraceType InTraceType, const FVector& Start, const FVector& End, FName ProfileName, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FTraceDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "AsyncSweepByChannel()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncSweepByChannel(EAsyncTraceType InTraceType, const FVector& Start, const FVector& End, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam, const FTraceDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "AsyncSweepByObjectType()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncSweepByObjectType(EAsyncTraceType InTraceType, const FVector& Start, const FVector& End, const FQuat& Rot, const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FTraceDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "AsyncSweepByProfile()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncSweepByProfile(EAsyncTraceType InTraceType, const FVector& Start, const FVector& End, const FQuat& Rot, FName ProfileName, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FTraceDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "AsyncOverlapByChannel()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncOverlapByChannel(const FVector& Pos, const FQuat& Rot, ECollisionChannel TraceChannel, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FCollisionResponseParams& ResponseParam = FCollisionResponseParams::DefaultResponseParam, const FOverlapDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "AsyncOverlapByObjectType()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncOverlapByObjectType(const FVector& Pos, const FQuat& Rot, const FCollisionObjectQueryParams& ObjectQueryParams, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FOverlapDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "AsyncOverlapByProfile()",
    "kind": "Method",
    "detail": "Function (FTraceHandle)",
    "insertText": "AsyncOverlapByProfile(const FVector& Pos, const FQuat& Rot, FName ProfileName, const FCollisionShape& CollisionShape, const FCollisionQueryParams& Params = FCollisionQueryParams::DefaultQueryParam, const FOverlapDelegate* InDelegate = nullptr, uint32 UserData = 0)"
  },
  {
    "label": "QueryTraceData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryTraceData(const FTraceHandle& Handle, FTraceDatum& OutData)"
  },
  {
    "label": "QueryOverlapData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryOverlapData(const FTraceHandle& Handle, FOverlapDatum& OutData)"
  },
  {
    "label": "IsTraceHandleValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTraceHandleValid(const FTraceHandle& Handle, bool bOverlapTrace)"
  },
  {
    "label": "GetCollisionProfileChannelAndResponseParams()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "GetCollisionProfileChannelAndResponseParams(FName ProfileName, ECollisionChannel& CollisionChannel, FCollisionResponseParams& ResponseParams)"
  },
  {
    "label": "GetNavigationSystem()",
    "kind": "Method",
    "detail": "Function (public : UNavigationSystemBase*)",
    "insertText": "GetNavigationSystem()"
  },
  {
    "label": "GetNumControllers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumControllers()"
  },
  {
    "label": "GetPlayerControllerIterator()",
    "kind": "Method",
    "detail": "Function (FConstPlayerControllerIterator)",
    "insertText": "GetPlayerControllerIterator()"
  },
  {
    "label": "GetNumPlayerControllers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPlayerControllers()"
  },
  {
    "label": "GetFirstPlayerController()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetFirstPlayerController()"
  },
  {
    "label": "GetFirstLocalPlayerFromController()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetFirstLocalPlayerFromController()"
  },
  {
    "label": "RegisterAutoActivateCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAutoActivateCamera(ACameraActor* CameraActor, int32 PlayerIndex)"
  },
  {
    "label": "GetAutoActivateCameraIterator()",
    "kind": "Method",
    "detail": "Function (FConstCameraActorIterator)",
    "insertText": "GetAutoActivateCameraIterator()"
  },
  {
    "label": "GetGameViewport()",
    "kind": "Method",
    "detail": "Function (UGameViewportClient*)",
    "insertText": "GetGameViewport()"
  },
  {
    "label": "GetDefaultBrush()",
    "kind": "Method",
    "detail": "Function (public : ABrush*)",
    "insertText": "GetDefaultBrush()"
  },
  {
    "label": "AreActorsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreActorsInitialized()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (using FActorsInitializedParams =::FActorsInitializedParams ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldInitializedActors, const FActorsInitializedParams&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FOnWorldInitializedActors OnActorsInitialized ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnWorldBeginPlay)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FOnWorldBeginPlay OnWorldBeginPlay ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnMatchStarting)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FOnMatchStarting OnWorldMatchStarting ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnWorldPreBeginPlay)"
  },
  {
    "label": "HasBegunPlay()",
    "kind": "Method",
    "detail": "Function (FOnWorldPreBeginPlay OnWorldPreBeginPlay ; bool)",
    "insertText": "HasBegunPlay()"
  },
  {
    "label": "GetDeltaSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDeltaSeconds()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (FGameTime)",
    "insertText": "GetTime()"
  },
  {
    "label": "CreatePhysicsScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePhysicsScene(const AWorldSettings* Settings = nullptr)"
  },
  {
    "label": "GetPhysicsScene()",
    "kind": "Method",
    "detail": "Function (FPhysScene*)",
    "insertText": "GetPhysicsScene()"
  },
  {
    "label": "GetDefaultPhysicsVolume()",
    "kind": "Method",
    "detail": "Function (APhysicsVolume*)",
    "insertText": "GetDefaultPhysicsVolume()"
  },
  {
    "label": "HasDefaultPhysicsVolume()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasDefaultPhysicsVolume()"
  },
  {
    "label": "RemovePhysicsVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePhysicsVolume(APhysicsVolume* Volume)"
  },
  {
    "label": "GetNonDefaultPhysicsVolumeIterator()",
    "kind": "Method",
    "detail": "Function (FConstPhysicsVolumeIterator)",
    "insertText": "GetNonDefaultPhysicsVolumeIterator()"
  },
  {
    "label": "GetNonDefaultPhysicsVolumeCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNonDefaultPhysicsVolumeCount()"
  },
  {
    "label": "SetAllowDeferredPhysicsStateCreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowDeferredPhysicsStateCreation(bool bAllow)"
  },
  {
    "label": "GetAllowDeferredPhysicsStateCreation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowDeferredPhysicsStateCreation()"
  },
  {
    "label": "GetLevelScriptActor()",
    "kind": "Method",
    "detail": "Function (class ALevelScriptActor*)",
    "insertText": "GetLevelScriptActor(class ULevel* OwnerLevel=NULL)"
  },
  {
    "label": "GetWorldSettings()",
    "kind": "Method",
    "detail": "Function (AWorldSettings*)",
    "insertText": "GetWorldSettings(bool bCheckStreamingPersistent = false, bool bChecked = true)"
  },
  {
    "label": "GetWorldDataLayers()",
    "kind": "Method",
    "detail": "Function (AWorldDataLayers*)",
    "insertText": "GetWorldDataLayers()"
  },
  {
    "label": "SetWorldDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldDataLayers(AWorldDataLayers* NewWorldDataLayers)"
  },
  {
    "label": "GetDebugDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugDisplayName()"
  },
  {
    "label": "GetWorldPartition()",
    "kind": "Method",
    "detail": "Function (UWorldPartition*)",
    "insertText": "GetWorldPartition()"
  },
  {
    "label": "IsPartitionedWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPartitionedWorld()"
  },
  {
    "label": "IsPartitionedWorld()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPartitionedWorld(const UWorld* InWorld)"
  },
  {
    "label": "OnWorldPartitionInitialized()",
    "kind": "Method",
    "detail": "Function (} return false ; } FWorldPartitionInitializedEvent&)",
    "insertText": "OnWorldPartitionInitialized()"
  },
  {
    "label": "GetGravityZ()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGravityZ()"
  },
  {
    "label": "GetDefaultGravityZ()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDefaultGravityZ()"
  },
  {
    "label": "GetMapName()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetMapName()"
  },
  {
    "label": "RequiresHitProxies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresHitProxies()"
  },
  {
    "label": "RemoveController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveController(AController* Controller)"
  },
  {
    "label": "AddNetworkActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNetworkActor(AActor* Actor)"
  },
  {
    "label": "RemoveNetworkActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNetworkActor(AActor* Actor)"
  },
  {
    "label": "AddOnActorSpawnedHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnActorSpawnedHandler(const FOnActorSpawned::FDelegate& InHandler)"
  },
  {
    "label": "RemoveOnActorSpawnedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnActorSpawnedHandler(FDelegateHandle InHandle)"
  },
  {
    "label": "AddOnActorPreSpawnInitialization()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnActorPreSpawnInitialization(const FOnActorSpawned::FDelegate& InHandler)"
  },
  {
    "label": "RemoveOnActorPreSpawnInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnActorPreSpawnInitialization(FDelegateHandle InHandle)"
  },
  {
    "label": "AddOnActorDestroyedHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnActorDestroyedHandler(const FOnActorDestroyed::FDelegate& InHandler)"
  },
  {
    "label": "RemoveOnActorDestroyedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnActorDestroyedHandler(FDelegateHandle InHandle)"
  },
  {
    "label": "AddOnPostRegisterAllActorComponentsHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnPostRegisterAllActorComponentsHandler(const FOnPostRegisterAllActorComponents::FDelegate& InHandler)"
  },
  {
    "label": "RemoveOnPostRegisterAllActorComponentsHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnPostRegisterAllActorComponentsHandler(FDelegateHandle InHandle)"
  },
  {
    "label": "NotifyPostRegisterAllActorComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostRegisterAllActorComponents(AActor* Actor)"
  },
  {
    "label": "AddOnPreUnregisterAllActorComponentsHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnPreUnregisterAllActorComponentsHandler(const FOnPreUnregisterAllActorComponents::FDelegate& InHandler)"
  },
  {
    "label": "RemoveOnPreUnregisterAllActorComponentsHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnPreUnregisterAllActorComponentsHandler(FDelegateHandle InHandle)"
  },
  {
    "label": "NotifyPreUnregisterAllActorComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreUnregisterAllActorComponents(AActor* Actor)"
  },
  {
    "label": "AddOnActorRemovedFromWorldHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnActorRemovedFromWorldHandler(const FOnActorRemovedFromWorld::FDelegate& InHandler)"
  },
  {
    "label": "RemoveOnActorRemovedFromWorldHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnActorRemovedFromWorldHandler(FDelegateHandle InHandle)"
  },
  {
    "label": "ContainsActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsActor(AActor* Actor)"
  },
  {
    "label": "AllowAudioPlayback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowAudioPlayback()"
  },
  {
    "label": "AddMovieSceneSequenceTickHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddMovieSceneSequenceTickHandler(const FOnMovieSceneSequenceTick::FDelegate& InHandler)"
  },
  {
    "label": "RemoveMovieSceneSequenceTickHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMovieSceneSequenceTickHandler(FDelegateHandle InHandle)"
  },
  {
    "label": "IsMovieSceneSequenceTickHandlerBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovieSceneSequenceTickHandlerBound()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "PreDuplicate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PreDuplicate(FObjectDuplicationParameters& DupParams)"
  },
  {
    "label": "PreSaveRoot()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSaveRoot(FObjectPreSaveRootContext ObjectSaveContext)"
  },
  {
    "label": "PostSaveRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSaveRoot(FObjectPostSaveRootContext ObjectSaveContext)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetId()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "IsDataValid()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR EDataValidationResult)",
    "insertText": "IsDataValid(FDataValidationContext& Context)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rename(const TCHAR* NewName = NULL, UObject* NewOuter = NULL, ERenameFlags Flags = REN_None)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "GetExtendedAssetRegistryTagsForSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExtendedAssetRegistryTagsForSave(const ITargetPlatform* TargetPlatform, TArray<FAssetRegistryTag>& OutTags)"
  },
  {
    "label": "ThreadedPostLoadAssetRegistryTagsOverride()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ThreadedPostLoadAssetRegistryTagsOverride(FPostLoadAssetRegistryTagsContext& Context)"
  },
  {
    "label": "IsNameStableForNetworking()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsNameStableForNetworking()"
  },
  {
    "label": "ResolveSubobject()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ResolveSubobject(const TCHAR* SubObjectPath, UObject*& OutObject, bool bLoadIfExists)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "ClearWorldComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearWorldComponents()"
  },
  {
    "label": "UpdateWorldComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWorldComponents(bool bRerunConstructionScripts, bool bCurrentLevelOnly, FRegisterComponentContext* Context = nullptr)"
  },
  {
    "label": "UpdateCullDistanceVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCullDistanceVolumes(AActor* ActorToUpdate = nullptr, UPrimitiveComponent* ComponentToUpdate = nullptr)"
  },
  {
    "label": "CleanupWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupWorld(bool bSessionEnded = true, bool bCleanupResources = true, UWorld* NewWorld = nullptr)"
  },
  {
    "label": "InvalidateModelGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateModelGeometry(ULevel* InLevel)"
  },
  {
    "label": "InvalidateModelSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateModelSurface(bool bCurrentLevelOnly)"
  },
  {
    "label": "CommitModelSurfaces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitModelSurfaces()"
  },
  {
    "label": "InvalidateAllSkyCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAllSkyCaptures()"
  },
  {
    "label": "UpdateAllSkyCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllSkyCaptures()"
  },
  {
    "label": "GetActiveLightingScenario()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "GetActiveLightingScenario()"
  },
  {
    "label": "PropagateLightingScenarioChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateLightingScenarioChange()"
  },
  {
    "label": "AddToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToWorld(ULevel* Level, const FTransform& LevelTransform = FTransform::Identity, bool bConsiderTimeLimit = true, FNetLevelVisibilityTransactionId TransactionId = FNetLevelVisibilityTransactionId(), ULevelStreaming* OwningLevelStreaming = nullptr)"
  },
  {
    "label": "RemoveFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromWorld(ULevel* Level, bool bAllowIncrementalRemoval = false, FNetLevelVisibilityTransactionId TransactionId = FNetLevelVisibilityTransactionId(), ULevelStreaming* OwningLevelStreaming = nullptr)"
  },
  {
    "label": "UpdateLevelStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelStreaming()"
  },
  {
    "label": "ReleasePhysicsScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePhysicsScene()"
  },
  {
    "label": "FlushLevelStreaming()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "FlushLevelStreaming(EFlushLevelStreamingType FlushType = EFlushLevelStreamingType::Full)"
  },
  {
    "label": "TriggerStreamingDataRebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerStreamingDataRebuild()"
  },
  {
    "label": "ConditionallyBuildStreamingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyBuildStreamingData()"
  },
  {
    "label": "IsVisibilityRequestPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisibilityRequestPending()"
  },
  {
    "label": "AreAlwaysLoadedLevelsLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAlwaysLoadedLevelsLoaded()"
  },
  {
    "label": "AsyncLoadAlwaysLoadedLevelsForSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncLoadAlwaysLoadedLevelsForSeamlessTravel()"
  },
  {
    "label": "AllowLevelLoadRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowLevelLoadRequests()"
  },
  {
    "label": "SetupParameterCollectionInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupParameterCollectionInstances()"
  },
  {
    "label": "AddParameterCollectionInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParameterCollectionInstance(class UMaterialParameterCollection* Collection, bool bUpdateScene)"
  },
  {
    "label": "GetParameterCollectionInstance()",
    "kind": "Method",
    "detail": "Function (UMaterialParameterCollectionInstance*)",
    "insertText": "GetParameterCollectionInstance(const UMaterialParameterCollection* Collection)"
  },
  {
    "label": "UpdateParameterCollectionInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateParameterCollectionInstances(bool bUpdateInstanceUniformBuffers, bool bRecreateUniformBuffer)"
  },
  {
    "label": "OnPostGC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostGC()"
  },
  {
    "label": "CreateParameterCollectionInstance()",
    "kind": "Method",
    "detail": "Function (private : UMaterialParameterCollectionInstance*)",
    "insertText": "CreateParameterCollectionInstance(int32 ExistingIndex, UMaterialParameterCollection* Collection, bool bUpdateScene)"
  },
  {
    "label": "HasAsyncLevelRequests()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAsyncLevelRequests()"
  },
  {
    "label": "FlushAsyncLevelRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAsyncLevelRequests()"
  },
  {
    "label": "GetCanvasForRenderingToTarget()",
    "kind": "Method",
    "detail": "Function (public : UCanvas*)",
    "insertText": "GetCanvasForRenderingToTarget()"
  },
  {
    "label": "GetCanvasForDrawMaterialToRenderTarget()",
    "kind": "Method",
    "detail": "Function (UCanvas*)",
    "insertText": "GetCanvasForDrawMaterialToRenderTarget()"
  },
  {
    "label": "InitWorld()",
    "kind": "Method",
    "detail": "Function (using InitializationValues = FWorldInitializationValues ; void)",
    "insertText": "InitWorld(const FWorldInitializationValues IVS = FWorldInitializationValues())"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "CreateWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "CreateWorld(const EWorldType::Type InWorldType, bool bInformEngineOfWorld, FName WorldName = NAME_None, UPackage* InWorldPackage = NULL, bool bAddToRoot = true, ERHIFeatureLevel::Type InFeatureLevel = ERHIFeatureLevel::Num, const InitializationValues* InIVS = nullptr, bool bInSkipInitWorld = false)"
  },
  {
    "label": "DestroyWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyWorld(bool bInformEngineOfWorld, UWorld* NewWorld = nullptr)"
  },
  {
    "label": "IsBeingCleanedUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBeingCleanedUp()"
  },
  {
    "label": "CleanupActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupActors()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (public : TMulticastDelegateRegistration<)",
    "insertText": "void(float)>& OnTickDispatch()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TMulticastDelegateRegistration<)",
    "insertText": "void()>& OnPostTickDispatch()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TMulticastDelegateRegistration<)",
    "insertText": "void(float)>& OnPreTickFlush()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TMulticastDelegateRegistration<)",
    "insertText": "void(float)>& OnTickFlush()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TMulticastDelegateRegistration<)",
    "insertText": "void()>& OnPostTickFlush()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(ELevelTick TickType, float DeltaSeconds)"
  },
  {
    "label": "SetupPhysicsTickFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupPhysicsTickFunctions(float DeltaSeconds)"
  },
  {
    "label": "RunTickGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTickGroup(ETickingGroup Group, bool bBlockTillComplete)"
  },
  {
    "label": "MarkActorComponentForNeededEndOfFrameUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkActorComponentForNeededEndOfFrameUpdate(UActorComponent* Component, bool bForceGameThread)"
  },
  {
    "label": "ClearActorComponentEndOfFrameUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearActorComponentEndOfFrameUpdate(UActorComponent* Component)"
  },
  {
    "label": "UpdateActorComponentEndOfFrameUpdateState()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "UpdateActorComponentEndOfFrameUpdateState(UActorComponent* Component)"
  },
  {
    "label": "SetMaterialParameterCollectionInstanceNeedsUpdate()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetMaterialParameterCollectionInstanceNeedsUpdate()"
  },
  {
    "label": "HasEndOfFrameUpdates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEndOfFrameUpdates()"
  },
  {
    "label": "SendAllEndOfFrameUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendAllEndOfFrameUpdates()"
  },
  {
    "label": "FlushDeferredParameterCollectionInstanceUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDeferredParameterCollectionInstanceUpdates()"
  },
  {
    "label": "TickNetClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickNetClient(float DeltaSeconds)"
  },
  {
    "label": "ProcessLevelStreamingVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessLevelStreamingVolumes(FVector* OverrideViewLocation=NULL)"
  },
  {
    "label": "BlockTillLevelStreamingCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockTillLevelStreamingCompleted()"
  },
  {
    "label": "ModifyLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyLevel(ULevel* Level)"
  },
  {
    "label": "EnsureCollisionTreeIsBuilt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCollisionTreeIsBuilt()"
  },
  {
    "label": "OnSelectedLevelsChanged()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FOnSelectedLevelsChangedEvent&)",
    "insertText": "OnSelectedLevelsChanged()"
  },
  {
    "label": "DeSelectLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeSelectLevel(ULevel* InLevel)"
  },
  {
    "label": "IsLevelSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelSelected(ULevel* InLevel)"
  },
  {
    "label": "SetSelectedLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedLevels(const TArray<class ULevel*>& InLevels)"
  },
  {
    "label": "GetNumSelectedLevels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSelectedLevels()"
  },
  {
    "label": "GetSelectedLevel()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "GetSelectedLevel(int32 InLevelIndex)"
  },
  {
    "label": "GetSelectedLevels()",
    "kind": "Method",
    "detail": "Function (TArray<TObjectPtr<class ULevel>>&)",
    "insertText": "GetSelectedLevels()"
  },
  {
    "label": "ShrinkLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkLevel()"
  },
  {
    "label": "AddOnFeatureLevelChangedHandler()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddOnFeatureLevelChangedHandler(const FOnFeatureLevelChanged::FDelegate& InHandler)"
  },
  {
    "label": "RemoveOnFeatureLevelChangedHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOnFeatureLevelChangedHandler(FDelegateHandle InHandle)"
  },
  {
    "label": "GetLevelIterator()",
    "kind": "Method",
    "detail": "Function (# endif FConstLevelIterator)",
    "insertText": "GetLevelIterator()"
  },
  {
    "label": "GetLevel()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "GetLevel(int32 InLevelIndex)"
  },
  {
    "label": "ContainsLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsLevel(ULevel* InLevel)"
  },
  {
    "label": "GetNumLevels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumLevels()"
  },
  {
    "label": "AddLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddLevel(ULevel* InLevel)"
  },
  {
    "label": "RemoveLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLevel(ULevel* InLevel)"
  },
  {
    "label": "FindOrAddCollectionForLevelStreaming()",
    "kind": "Method",
    "detail": "Function (FLevelCollection&)",
    "insertText": "FindOrAddCollectionForLevelStreaming(const ULevelStreaming* Level)"
  },
  {
    "label": "FindOrAddCollectionByType()",
    "kind": "Method",
    "detail": "Function (FLevelCollection&)",
    "insertText": "FindOrAddCollectionByType(const ELevelCollectionType InType)"
  },
  {
    "label": "FindOrAddCollectionByType_Index()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindOrAddCollectionByType_Index(const ELevelCollectionType InType)"
  },
  {
    "label": "FindCollectionByType()",
    "kind": "Method",
    "detail": "Function (FLevelCollection*)",
    "insertText": "FindCollectionByType(const ELevelCollectionType InType)"
  },
  {
    "label": "FindCollectionIndexByType()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindCollectionIndexByType(const ELevelCollectionType InType)"
  },
  {
    "label": "GetActiveLevelCollection()",
    "kind": "Method",
    "detail": "Function (const FLevelCollection*)",
    "insertText": "GetActiveLevelCollection()"
  },
  {
    "label": "GetActiveLevelCollectionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetActiveLevelCollectionIndex()"
  },
  {
    "label": "GetLevelCollections()",
    "kind": "Method",
    "detail": "Function (const TArray<FLevelCollection>&)",
    "insertText": "GetLevelCollections()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog)"
  },
  {
    "label": "CleanupWorldInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CleanupWorldInternal(bool bSessionEnded, bool bCleanupResources, bool bWorldChanged)"
  },
  {
    "label": "HandleTraceTagCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTraceTagCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleFlushPersistentDebugLinesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFlushPersistentDebugLinesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleLogActorCountsCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleLogActorCountsCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDemoRecordCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDemoRecordCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDemoPlayCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDemoPlayCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDemoStopCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDemoStopCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDemoScrubCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDemoScrubCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDemoPauseCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDemoPauseCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDemoSpeedCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDemoSpeedCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDemoCheckpointCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDemoCheckpointCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "DestroyDemoNetDriver()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DestroyDemoNetDriver()"
  },
  {
    "label": "ClearDemoNetDriver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDemoNetDriver()"
  },
  {
    "label": "ClearNetDriver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNetDriver(UNetDriver* Driver)"
  },
  {
    "label": "IsPlayingReplay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingReplay()"
  },
  {
    "label": "IsRecordingReplay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecordingReplay()"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Listen(FURL& InURL)"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "IsCameraMoveable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCameraMoveable()"
  },
  {
    "label": "EditorDestroyActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EditorDestroyActor(AActor* Actor, bool bShouldModifyLevel)"
  },
  {
    "label": "DestroyActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroyActor(AActor* Actor, bool bNetForce=false, bool bShouldModifyLevel=true)"
  },
  {
    "label": "RemoveActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActor(AActor* Actor, bool bShouldModifyLevel)"
  },
  {
    "label": "SpawnActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "SpawnActor(UClass* InClass, FVector const* Location=NULL, FRotator const* Rotation=NULL, const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "SpawnActor(UClass* Class, FTransform const* Transform, const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActorAbsolute()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "SpawnActorAbsolute(UClass* Class, FTransform const& AbsoluteTransform, const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActor()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "SpawnActor(const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActor()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "SpawnActor(FVector const& Location, FRotator const& Rotation, const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActor()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "SpawnActor(UClass* Class, const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActor()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "SpawnActor(UClass* Class, FVector const& Location, FRotator const& Rotation, const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActor()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "SpawnActor(UClass* Class, FTransform const& Transform,const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActorAbsolute()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "SpawnActorAbsolute(FVector const& AbsoluteLocation, FRotator const& AbsoluteRotation, const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActorAbsolute()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "SpawnActorAbsolute(UClass* Class, FTransform const& Transform,const FActorSpawnParameters& SpawnParameters = FActorSpawnParameters())"
  },
  {
    "label": "SpawnActorDeferred()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "SpawnActorDeferred(UClass* Class, FTransform const& Transform, AActor* Owner = nullptr, APawn* Instigator = nullptr, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::Undefined, ESpawnActorScaleMethod TransformScaleMethod = ESpawnActorScaleMethod::MultiplyWithRoot)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} FActorSpawnParameters SpawnInfo ; SpawnInfo . SpawnCollisionHandlingOverride = CollisionHandlingOverride ; SpawnInfo . TransformScaleMethod = TransformScaleMethod ; SpawnInfo . Owner = Owner ; SpawnInfo . Instigator = Instigator ; SpawnInfo . bDeferConstruction = true ;)",
    "insertText": "return(Class != nullptr) ? Cast<T>(SpawnActor(Class, &Transform, SpawnInfo))"
  },
  {
    "label": "GetAuthGameMode()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetAuthGameMode()"
  },
  {
    "label": "GetGameStateChecked()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetGameStateChecked()"
  },
  {
    "label": "CopyGameState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyGameState(AGameModeBase* FromGameMode, AGameStateBase* FromGameState)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UWorld, FOnGameStateSetEvent, AGameStateBase*)"
  },
  {
    "label": "SpawnBrush()",
    "kind": "Method",
    "detail": "Function (FOnGameStateSetEvent GameStateSetEvent ; ABrush*)",
    "insertText": "SpawnBrush()"
  },
  {
    "label": "SpawnPlayActor()",
    "kind": "Method",
    "detail": "Function (APlayerController*)",
    "insertText": "SpawnPlayActor(class UPlayer* Player, ENetRole RemoteRole, const FURL& InURL, const FUniqueNetIdRepl& UniqueId, FString& Error, uint8 InNetPlayerIndex = 0)"
  },
  {
    "label": "FindTeleportSpot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTeleportSpot(const AActor* TestActor, FVector& PlaceLocation, FRotator PlaceRotation)"
  },
  {
    "label": "EncroachingBlockingGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncroachingBlockingGeometry(const AActor* TestActor, FVector TestLocation, FRotator TestRotation, FVector* ProposedAdjustment = NULL)"
  },
  {
    "label": "StartPhysicsSim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPhysicsSim()"
  },
  {
    "label": "FinishPhysicsSim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPhysicsSim()"
  },
  {
    "label": "SetGameMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetGameMode(const FURL& InURL)"
  },
  {
    "label": "InitializeActorsForPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeActorsForPlay(const FURL& InURL, bool bResetTime = true, FRegisterComponentContext* Context = nullptr)"
  },
  {
    "label": "BeginTearingDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTearingDown()"
  },
  {
    "label": "BeginPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPlay()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndPlay(EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "DestroySwappedPC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DestroySwappedPC(UNetConnection* Connection)"
  },
  {
    "label": "NotifyAcceptingConnection()",
    "kind": "Method",
    "detail": "Function (EAcceptConnection::Type)",
    "insertText": "NotifyAcceptingConnection()"
  },
  {
    "label": "NotifyAcceptedConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAcceptedConnection(class UNetConnection* Connection)"
  },
  {
    "label": "NotifyAcceptingChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyAcceptingChannel(class UChannel* Channel)"
  },
  {
    "label": "NotifyControlMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyControlMessage(UNetConnection* Connection, uint8 MessageType, class FInBunch& Bunch)"
  },
  {
    "label": "PreLoginCheckError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreLoginCheckError(UNetConnection* Connection, const FString& ErrorMsg)"
  },
  {
    "label": "PreLoginComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreLoginComplete(const FString& ErrorMsg, TWeakObjectPtr<UNetConnection> WeakConnection)"
  },
  {
    "label": "PreLoginCompleteSplit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreLoginCompleteSplit(const FString& ErrorMsg, TWeakObjectPtr<UNetConnection> WeakConnection, FUniqueNetIdRepl SplitRequestUniqueIdRepl, FString SplitRequestURL)"
  },
  {
    "label": "WelcomePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WelcomePlayer(UNetConnection* Connection)"
  },
  {
    "label": "IsNetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNetMode(ENetMode Mode)"
  },
  {
    "label": "InternalGetNetMode()",
    "kind": "Method",
    "detail": "Function (private : ENetMode)",
    "insertText": "InternalGetNetMode()"
  },
  {
    "label": "AttemptDeriveFromURL()",
    "kind": "Method",
    "detail": "Function (ENetMode)",
    "insertText": "AttemptDeriveFromURL()"
  },
  {
    "label": "InternalGetDefaultPhysicsVolume()",
    "kind": "Method",
    "detail": "Function (APhysicsVolume*)",
    "insertText": "InternalGetDefaultPhysicsVolume()"
  },
  {
    "label": "InternalUpdateStreamingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalUpdateStreamingState()"
  },
  {
    "label": "SetPlayInEditorInitialNetMode()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR public : void)",
    "insertText": "SetPlayInEditorInitialNetMode(ENetMode InNetMode)"
  },
  {
    "label": "SetNetDriver()",
    "kind": "Method",
    "detail": "Function (PlayInEditorNetMode = InNetMode ; bAllowAudioPlayback = bAllowAudioPlayback&& PlayInEditorNetMode ! = NM_DedicatedServer ; } private : ENetMode PlayInEditorNetMode ; # endif public : void)",
    "insertText": "SetNetDriver(UNetDriver* NewDriver)"
  },
  {
    "label": "IsRecordingClientReplay()",
    "kind": "Method",
    "detail": "Function (NetDriver = NewDriver ; } bool)",
    "insertText": "IsRecordingClientReplay()"
  },
  {
    "label": "IsPlayingClientReplay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingClientReplay()"
  },
  {
    "label": "DelayStreamingVolumeUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DelayStreamingVolumeUpdates(int32 InFrameDelay)"
  },
  {
    "label": "TransferBlueprintDebugReferences()",
    "kind": "Method",
    "detail": "Function (StreamingVolumeUpdateDelay = InFrameDelay ; } void)",
    "insertText": "TransferBlueprintDebugReferences(UWorld* NewWorld)"
  },
  {
    "label": "NotifyOfBlueprintDebuggingAssociation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyOfBlueprintDebuggingAssociation(class UBlueprint* Blueprint, UObject* DebugObject)"
  },
  {
    "label": "BroadcastLevelsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastLevelsChanged()"
  },
  {
    "label": "OnLevelsChanged()",
    "kind": "Method",
    "detail": "Function (FOnLevelsChangedEvent&)",
    "insertText": "OnLevelsChanged()"
  },
  {
    "label": "GetActorCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetActorCount()"
  },
  {
    "label": "GetAudioSettings()",
    "kind": "Method",
    "detail": "Function (public : class AAudioVolume*)",
    "insertText": "GetAudioSettings(const FVector& ViewLocation, struct FReverbSettings* OutReverbSettings, struct FInteriorSettings* OutInteriorSettings)"
  },
  {
    "label": "SetAudioDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioDevice(const FAudioDeviceHandle& InHandle)"
  },
  {
    "label": "GetAudioDevice()",
    "kind": "Method",
    "detail": "Function (FAudioDeviceHandle)",
    "insertText": "GetAudioDevice()"
  },
  {
    "label": "GetAudioDeviceRaw()",
    "kind": "Method",
    "detail": "Function (class FAudioDevice*)",
    "insertText": "GetAudioDeviceRaw()"
  },
  {
    "label": "GetLocalURL()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalURL()"
  },
  {
    "label": "IsPlayInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInEditor()"
  },
  {
    "label": "IsPlayInPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInPreview()"
  },
  {
    "label": "IsPlayInMobilePreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInMobilePreview()"
  },
  {
    "label": "IsPlayInVulkanPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInVulkanPreview()"
  },
  {
    "label": "IsGameWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGameWorld()"
  },
  {
    "label": "IsEditorWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorWorld()"
  },
  {
    "label": "IsPreviewWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreviewWorld()"
  },
  {
    "label": "UsesGameHiddenFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesGameHiddenFlags()"
  },
  {
    "label": "GetAddressURL()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAddressURL()"
  },
  {
    "label": "LoadSecondaryLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadSecondaryLevels(bool bForce = false, TSet<FName>* PackageNamesToSkip = nullptr)"
  },
  {
    "label": "GetLevelStreamingForPackageName()",
    "kind": "Method",
    "detail": "Function (ULevelStreaming*)",
    "insertText": "GetLevelStreamingForPackageName(FName PackageName)"
  },
  {
    "label": "RefreshStreamingLevels()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RefreshStreamingLevels()"
  },
  {
    "label": "RefreshStreamingLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshStreamingLevels(const TArray<class ULevelStreaming*>& InLevelsToRefresh)"
  },
  {
    "label": "IsRefreshingStreamingLevels()",
    "kind": "Method",
    "detail": "Function (private : bool bIsRefreshingStreamingLevels ; public : bool)",
    "insertText": "IsRefreshingStreamingLevels()"
  },
  {
    "label": "ServerTravel()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ServerTravel(const FString& InURL, bool bAbsolute = false, bool bShouldSkipGameNotify = false)"
  },
  {
    "label": "SeamlessTravel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeamlessTravel(const FString& InURL, bool bAbsolute = false)"
  },
  {
    "label": "IsInSeamlessTravel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSeamlessTravel()"
  },
  {
    "label": "SetSeamlessTravelMidpointPause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSeamlessTravelMidpointPause(bool bNowPaused)"
  },
  {
    "label": "GetDetailMode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDetailMode()"
  },
  {
    "label": "PrepareMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareMapChange(const TArray<FName>& LevelNames)"
  },
  {
    "label": "IsPreparingMapChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreparingMapChange()"
  },
  {
    "label": "IsMapChangeReady()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMapChangeReady()"
  },
  {
    "label": "CancelPendingMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPendingMapChange()"
  },
  {
    "label": "CommitMapChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitMapChange()"
  },
  {
    "label": "SetMapNeedsLightingFullyRebuilt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMapNeedsLightingFullyRebuilt(int32 InNumLightingUnbuiltObjects, int32 InNumUnbuiltReflectionCaptures)"
  },
  {
    "label": "GetTimerManager()",
    "kind": "Method",
    "detail": "Function (FTimerManager&)",
    "insertText": "GetTimerManager()"
  },
  {
    "label": "GetLatentActionManager()",
    "kind": "Method",
    "detail": "Function (FLatentActionManager&)",
    "insertText": "GetLatentActionManager()"
  },
  {
    "label": "GetSubsystemBase()",
    "kind": "Method",
    "detail": "Function (UWorldSubsystem*)",
    "insertText": "GetSubsystemBase(TSubclassOf<UWorldSubsystem> SubsystemClass)"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem()"
  },
  {
    "label": "GetSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TSubsystemClass*)",
    "insertText": "GetSubsystem(const UWorld* World)"
  },
  {
    "label": "HasSubsystem()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<TSubsystemClass> bool)",
    "insertText": "HasSubsystem()"
  },
  {
    "label": "HasSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> bool)",
    "insertText": "HasSubsystem(const UWorld* World)"
  },
  {
    "label": "GetSubsystemArrayCopy()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> TArray<TSubsystemClass*>)",
    "insertText": "GetSubsystemArrayCopy()"
  },
  {
    "label": "ForEachSubsystem()",
    "kind": "Method",
    "detail": "Function (} template<TSubsystemClass> void)",
    "insertText": "ForEachSubsystem(TFunctionRef<void(TSubsystemClass*)> Operation)"
  },
  {
    "label": "SetGameInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGameInstance(UGameInstance* NewGI)"
  },
  {
    "label": "GetGameInstance()",
    "kind": "Method",
    "detail": "Function (OwningGameInstance = NewGI ; } UGameInstance*)",
    "insertText": "GetGameInstance()"
  },
  {
    "label": "GetGameInstanceChecked()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetGameInstanceChecked()"
  },
  {
    "label": "IsNavigationRebuilt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNavigationRebuilt()"
  },
  {
    "label": "RequestNewWorldOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestNewWorldOrigin(FIntVector InNewOriginLocation)"
  },
  {
    "label": "SetNewWorldOrigin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNewWorldOrigin(FIntVector InNewOriginLocation)"
  },
  {
    "label": "NavigateTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateTo(FIntVector InLocation)"
  },
  {
    "label": "UpdateConstraintActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConstraintActors()"
  },
  {
    "label": "GetLightMapsAndShadowMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightMapsAndShadowMaps(ULevel* Level, TArray<UTexture2D*>& OutLightMapsAndShadowMaps, bool bForceLazyLoad = true)"
  },
  {
    "label": "RenameToPIEWorld()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RenameToPIEWorld(int32 PIEInstanceID)"
  },
  {
    "label": "RemapCompiledScriptActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemapCompiledScriptActor(FString& Str)"
  },
  {
    "label": "IsInstanced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanced()"
  },
  {
    "label": "GetSoftObjectPathMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftObjectPathMapping(FString& OutSourceWorldPath, FString& OutRemappedWorldPath)"
  },
  {
    "label": "ConvertToPIEPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToPIEPackageName(const FString& PackageName, int32 PIEInstanceID)"
  },
  {
    "label": "StripPIEPrefixFromPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "StripPIEPrefixFromPackageName(const FString& PackageName, const FString& Prefix)"
  },
  {
    "label": "BuildPIEPackagePrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BuildPIEPackagePrefix(int32 PIEInstanceID)"
  },
  {
    "label": "GetDuplicatedWorldForPIE()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetDuplicatedWorldForPIE(UWorld* InWorld, UPackage* InPIEackage, int32 PIEInstanceID)"
  },
  {
    "label": "DuplicateWorldForPIE()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "DuplicateWorldForPIE(const FString& PackageName, UWorld* OwningWorld)"
  },
  {
    "label": "RemovePIEPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "RemovePIEPrefix(const FString &Source, int32* OutPIEInstanceID = nullptr)"
  },
  {
    "label": "FindWorldInPackage()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "FindWorldInPackage(UPackage* Package)"
  },
  {
    "label": "IsWorldOrWorldExternalPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWorldOrWorldExternalPackage(UPackage* Package)"
  },
  {
    "label": "FollowWorldRedirectorInPackage()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "FollowWorldRedirectorInPackage(UPackage* Package, UObjectRedirector** OptionalOutRedirector = nullptr)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FObjectSubsystemCollection<UWorldSubsystem> SubsystemCollection ; } ; class UWorldProxy GWorld ; class FWorldDelegates { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FWorldInitializationEvent, UWorld* , const UWorld::InitializationValues)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FWorldCleanupEvent, UWorld* , bool , bool)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FWorldEvent, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (typedef TMap<UObject*,UObject*> FReplacementMap ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_FourParams(FWorldPostDuplicateEvent, UWorld* , bool , FReplacementMap& , TArray<UObject*>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_FiveParams()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_FiveParams(FWorldPreRenameEvent, UWorld* , const TCHAR* , UObject* , ERenameFlags , bool&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FWorldPostRenameEvent, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FWorldCurrentLevelChangedEvent, ULevel* , ULevel* , UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnLevelChanged, ULevel*, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FWorldGetAssetTagsWithContext, const UWorld*, FAssetRegistryTagsContext)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FWorldGetAssetTags, const UWorld*, TArray<UObject::FAssetRegistryTag>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnWorldTickStart, UWorld*, ELevelTick, float)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (FOnWorldTickStart OnWorldTickStart ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnWorldTickEnd, UWorld*, ELevelTick, float)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (FOnWorldTickEnd OnWorldTickEnd ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnWorldPreActorTick, UWorld* , ELevelTick , float)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (FOnWorldPreActorTick OnWorldPreActorTick ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnWorldPostActorTick, UWorld* , ELevelTick , float)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnWorldPostActorTick OnWorldPostActorTick ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldPreSendAllEndOfFrameUpdates, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnWorldPreSendAllEndOfFrameUpdates OnWorldPreSendAllEndOfFrameUpdates ; FWorldEvent OnPostWorldCreation ; FWorldInitializationEvent OnPreWorldInitialization ; FWorldInitializationEvent OnPostWorldInitialization ; # if WITH_EDITOR FWorldPreRenameEvent OnPreWorldRename ; FWorldPostRenameEvent OnPostWorldRename ; FWorldCurrentLevelChangedEvent OnCurrentLevelChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldPIEStarted, UGameInstance*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnWorldPIEStarted OnPIEStarted ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldPIEReady, UGameInstance*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnWorldPIEStarted OnPIEReady ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldPIEMapCreated, UGameInstance*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnWorldPIEMapCreated OnPIEMapCreated ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldPIEMapReady, UGameInstance*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnWorldPIEMapReady OnPIEMapReady ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnWorldPIEEnded, UGameInstance*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnWorldPIEEnded OnPIEEnded ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FWorldCollectSaveReferencesEvent, UWorld*, FArchive&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (FWorldCollectSaveReferencesEvent OnCollectSaveReferences ; # endif FWorldPostDuplicateEvent OnPostDuplicate ; FWorldCleanupEvent OnWorldCleanup ; FWorldCleanupEvent OnPostWorldCleanup ; FWorldEvent OnPreWorldFinishDestroy ; FOnLevelChanged LevelAddedToWorld ; FOnLevelChanged PreLevelRemovedFromWorld ; FOnLevelChanged LevelRemovedFromWorld ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_FourParams(FLevelOffsetEvent, ULevel*, UWorld*, const FVector&, bool)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FLevelOffsetEvent PostApplyLevelOffset ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FLevelTransformEvent, ULevel*, const FTransform&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FRefreshLevelScriptActionsEvent, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FRefreshLevelScriptActionsEvent RefreshLevelScriptActions ; # endif UWorld::FOnWorldInitializedActors OnWorldInitializedActors ; FWorldEvent OnWorldBeginTearDown ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnSeamlessTravelStart, UWorld*, const FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnSeamlessTravelStart OnSeamlessTravelStart ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSeamlessTravelTransition, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnSeamlessTravelTransition OnSeamlessTravelTransition ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnNetDriverCreated, UWorld*, UNetDriver*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnNetDriverCreated OnNetDriverCreated ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnCopyWorldData, UWorld*, UWorld*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnCopyWorldData OnCopyWorldData ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FGameInstanceEvent, UGameInstance*)"
  },
  {
    "label": "FWorldDelegates()",
    "kind": "Method",
    "detail": "Function (FGameInstanceEvent OnStartGameInstance ; private :)",
    "insertText": "FWorldDelegates()"
  },
  {
    "label": "Started()",
    "kind": "Method",
    "detail": "Function (} } ; struct FWorldNotifyStreamingLevelLoading { private : void)",
    "insertText": "Started(UWorld* World)"
  },
  {
    "label": "Finished()",
    "kind": "Method",
    "detail": "Function (+ + World -> NumStreamingLevelsBeingLoaded ; } void)",
    "insertText": "Finished(UWorld* World)"
  },
  {
    "label": "GetTimeSeconds()",
    "kind": "Method",
    "detail": "Function (- - World -> NumStreamingLevelsBeingLoaded ; } } ULevelStreaming ; } ; double)",
    "insertText": "GetTimeSeconds()"
  },
  {
    "label": "TimeSince()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "TimeSince(double Time)"
  },
  {
    "label": "CreateConstIterator()",
    "kind": "Method",
    "detail": "Function (auto Result = NonDefaultPhysicsVolumeList .)",
    "insertText": "CreateConstIterator()"
  },
  {
    "label": "ComponentOverlapMulti()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ComponentOverlapMulti(TArray<struct FOverlapResult>& OutOverlaps, const class UPrimitiveComponent* PrimComp, const FVector& Pos, const FRotator& Rot, const FComponentQueryParams& Params, const FCollisionObjectQueryParams& ObjectQueryParams)"
  },
  {
    "label": "ComponentOverlapMultiByChannel()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ComponentOverlapMultiByChannel(TArray<struct FOverlapResult>& OutOverlaps, const class UPrimitiveComponent* PrimComp, const FVector& Pos, const FRotator& Rot, ECollisionChannel TraceChannel, const FComponentQueryParams& Params , const FCollisionObjectQueryParams& ObjectQueryParams)"
  },
  {
    "label": "GetNetMode()",
    "kind": "Method",
    "detail": "Function (} ENetMode)",
    "insertText": "GetNetMode()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "if(Mode == NM_DedicatedServer)"
  },
  {
    "label": "IsRunningDedicatedServer()",
    "kind": "Method",
    "detail": "Function (} else { return !)",
    "insertText": "IsRunningDedicatedServer() && (InternalGetNetMode() == Mode)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(ENetMode NetMode)"
  }
]