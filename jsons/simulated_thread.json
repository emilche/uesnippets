[
  {
    "label": "SimulatedThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulatedThread"
  },
  {
    "label": "SimulatedMainThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimulatedMainThread"
  },
  {
    "label": "SimulatedThread()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_TIME_CONTROLLER_SIMULATED_THREAD_H_ # define TEST_TIME_CONTROLLER_SIMULATED_THREAD_H_ # include<memory> # include \" rtc_base / synchronization / mutex . h \" # include \" test / time_controller / simulated_time_controller . h \" namespace webrtc { class SimulatedThread : public rtc::Thread,public sim_time_impl::SimulatedSequenceRunner { public : using CurrentThreadSetter = CurrentThreadSetter ;)",
    "insertText": "SimulatedThread(sim_time_impl::SimulatedTimeControllerImpl* handler, absl::string_view name, std::unique_ptr<rtc::SocketServer> socket_server)"
  },
  {
    "label": "SimulatedThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimulatedThread()"
  },
  {
    "label": "RunReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunReady(Timestamp at_time)"
  },
  {
    "label": "GetNextRunTime()",
    "kind": "Method",
    "detail": "Function (Timestamp)",
    "insertText": "GetNextRunTime()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (MutexLock)",
    "insertText": "lock(&lock_)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTask(absl::AnyInvocable<void() &&> task, TimeDelta delay)"
  },
  {
    "label": "PostDelayedHighPrecisionTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedHighPrecisionTask(absl::AnyInvocable<void() &&> task, TimeDelta delay)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : sim_time_impl::SimulatedTimeControllerImpl* const handler_ ; char* name_ ; Mutex lock_ ; Timestamp next_run_time_)",
    "insertText": "RTC_GUARDED_BY(lock_) = Timestamp::PlusInfinity()"
  },
  {
    "label": "SimulatedMainThread()",
    "kind": "Method",
    "detail": "Function (} ; class SimulatedMainThread : public SimulatedThread { public :)",
    "insertText": "SimulatedMainThread(sim_time_impl::SimulatedTimeControllerImpl* handler)"
  },
  {
    "label": "SimulatedMainThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SimulatedMainThread()"
  }
]