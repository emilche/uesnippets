[
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Sent1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "_Sent2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent2"
  },
  {
    "label": "_ConstTimeDistance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_ConstTimeDistance"
  },
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Proj1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj1"
  },
  {
    "label": "_Proj2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj2"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "_ForwardIterator1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator1"
  },
  {
    "label": "_Sentinel1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sentinel1"
  },
  {
    "label": "_ForwardIterator2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator2"
  },
  {
    "label": "_BinaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryPredicate"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_IS_PERMUTATION_H # define _LIBCPP___ALGORITHM_IS_PERMUTATION_H # include<__algorithm / comp . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / concepts . h> # include<__iterator / distance . h> # include<__iterator / iterator_traits . h> # include<__iterator / next . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__is_permutation_impl()",
    "kind": "Method",
    "detail": "Function (} ; # if _LIBCPP_STD_VER> 1 7 template<class _Iter1,class _Sent1,class _Iter2,class _Sent2> struct _ConstTimeDistance<_Iter1,_Sent1,_Iter2,_Sent2,__enable_if_t<sized_sentinel_for<_Sent1,_Iter1>&& sized_sentinel_for<_Sent2,_Iter2>>> : true_type { } ; # else template<class _Iter1,class _Iter2> struct _ConstTimeDistance<_Iter1,_Iter1,_Iter2,_Iter2,__enable_if_t<is_same<iterator_traits<_Iter1>::iterator_category,random_access_iterator_tag>::value&& is_same<iterator_traits<_Iter2>::iterator_category,random_access_iterator_tag>::value>> : true_type { } ; # endif template<class _AlgPolicy,class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Proj1,class _Proj2,class _Pred> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "__is_permutation_impl(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred&& __pred, _Proj1&& __proj1, _Proj2&& __proj2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (using _D1 = __iter_diff_t<_Iter1> ;)",
    "insertText": "for(auto __i = __first1; __i != __last1; ++__i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto __match = __first1 ;)",
    "insertText": "for(; __match != __i; ++__match)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__match == __i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_D1 __c2 = 0 ;)",
    "insertText": "for(auto __j = __first2; __j != __last2; ++__j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__c2 == 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_D1 __c1 = 1 ;)",
    "insertText": "for(auto __j = _IterOps<_AlgPolicy>::next(__i); __j != __last1; ++__j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__c1 != __c2)"
  },
  {
    "label": "__is_permutation()",
    "kind": "Method",
    "detail": "Function (} } return true ; } template<class _AlgPolicy,class _ForwardIterator1,class _Sentinel1,class _ForwardIterator2,class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "__is_permutation(_ForwardIterator1 __first1, _Sentinel1 __last1, _ForwardIterator2 __first2, _BinaryPredicate&& __pred)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__first1 == __last1)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (using _D1 = __iter_diff_t<_ForwardIterator1> ; _D1 __l1 = _IterOps<_AlgPolicy)",
    "insertText": "distance(__first1, __last1)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (auto __last2 = _IterOps<_AlgPolicy)",
    "insertText": "next(__first2, __l1)"
  },
  {
    "label": "__is_permutation()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Proj1,class _Proj2,class _Pred> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "__is_permutation(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred&& __pred, _Proj1&& __proj1, _Proj2&& __proj2, false_type)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (using _D2 = __iter_diff_t<_Iter2> ; _D2 __l2 = _IterOps<_AlgPolicy)",
    "insertText": "distance(__first2, __last2)"
  },
  {
    "label": "__is_permutation()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Proj1,class _Proj2,class _Pred> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "__is_permutation(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred&& __pred, _Proj1&& __proj1, _Proj2&& __proj2, true_type)"
  },
  {
    "label": "__is_permutation()",
    "kind": "Method",
    "detail": "Function (} template<class _AlgPolicy,class _Iter1,class _Sent1,class _Iter2,class _Sent2,class _Proj1,class _Proj2,class _Pred> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "__is_permutation(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred&& __pred, _Proj1&& __proj1, _Proj2&& __proj2)"
  },
  {
    "label": "is_permutation()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator1,class _ForwardIterator2,class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred)"
  },
  {
    "label": "is_permutation()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator1,class _ForwardIterator2> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)"
  },
  {
    "label": "is_permutation()",
    "kind": "Method",
    "detail": "Function (using __v1 = __iter_value_type<_ForwardIterator1> ; using __v2 = __iter_value_type<_ForwardIterator2> ; return)",
    "insertText": "is_permutation(__first1, __last1, __first2, __equal_to<__v1, __v2>())"
  },
  {
    "label": "is_permutation()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 1 template<class _ForwardIterator1,class _ForwardIterator2> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)"
  },
  {
    "label": "_ClassicAlgPolicy()",
    "kind": "Method",
    "detail": "Function (using __v1 = __iter_value_type<_ForwardIterator1> ; using __v2 = __iter_value_type<_ForwardIterator2> ; return std::__is_permutation<)",
    "insertText": "_ClassicAlgPolicy(std::move(__first1), std::move(__last1), std::move(__first2), std::move(__last2), __equal_to<__v1, __v2>(), __identity(), __identity())"
  },
  {
    "label": "is_permutation()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator1,class _ForwardIterator2,class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 bool)",
    "insertText": "is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)"
  }
]