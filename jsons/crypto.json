[
  {
    "label": "crypto_ex_data_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "crypto_ex_data_st"
  },
  {
    "label": "crypto_threadid_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "crypto_threadid_st"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "CRYPTO_THREAD_lock_new()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_CRYPTO_H # define HEADER_CRYPTO_H # include<stdlib . h> # include<time . h> # include<openssl / e_os2 . h> # ifndef OPENSSL_NO_STDIO # include<stdio . h> # endif # include<openssl / safestack . h> # include<openssl / opensslv . h> # include<openssl / ossl_typ . h> # include<openssl / opensslconf . h> # include<openssl / cryptoerr . h> # ifdef CHARSET_EBCDIC # include<openssl / ebcdic . h> # endif # include<openssl / symhacks . h> # if OPENSSL_API_COMPAT<0 x10100000L # include<openssl / opensslv . h> # endif # ifdef __cplusplus \" C \" { # endif # if OPENSSL_API_COMPAT<0 x10100000L # define SSLeay OpenSSL_version_num # define SSLeay_version OpenSSL_version # define SSLEAY_VERSION_NUMBER OPENSSL_VERSION_NUMBER # define SSLEAY_VERSION OPENSSL_VERSION # define SSLEAY_CFLAGS OPENSSL_CFLAGS # define SSLEAY_BUILT_ON OPENSSL_BUILT_ON # define SSLEAY_PLATFORM OPENSSL_PLATFORM # define SSLEAY_DIR OPENSSL_DIR typedef struct { int dummy ; } CRYPTO_dynlock ; # endif typedef void CRYPTO_RWLOCK ; CRYPTO_RWLOCK*)",
    "insertText": "CRYPTO_THREAD_lock_new(void)"
  },
  {
    "label": "CRYPTO_THREAD_read_lock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)"
  },
  {
    "label": "CRYPTO_THREAD_write_lock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)"
  },
  {
    "label": "CRYPTO_THREAD_unlock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)"
  },
  {
    "label": "CRYPTO_THREAD_lock_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)"
  },
  {
    "label": "CRYPTO_atomic_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (# define CRYPTO_MEM_CHECK_OFF 0 x0 # define CRYPTO_MEM_CHECK_ON 0 x1 # define CRYPTO_MEM_CHECK_ENABLE 0 x2 # define CRYPTO_MEM_CHECK_DISABLE 0 x3 struct crypto_ex_data_st {)",
    "insertText": "STACK_OF(void)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DEFINE_STACK_OF(void) # define CRYPTO_EX_INDEX_SSL 0 # define CRYPTO_EX_INDEX_SSL_CTX 1 # define CRYPTO_EX_INDEX_SSL_SESSION 2 # define CRYPTO_EX_INDEX_X509 3 # define CRYPTO_EX_INDEX_X509_STORE 4 # define CRYPTO_EX_INDEX_X509_STORE_CTX 5 # define CRYPTO_EX_INDEX_DH 6 # define CRYPTO_EX_INDEX_DSA 7 # define CRYPTO_EX_INDEX_EC_KEY 8 # define CRYPTO_EX_INDEX_RSA 9 # define CRYPTO_EX_INDEX_ENGINE 10 # define CRYPTO_EX_INDEX_UI 11 # define CRYPTO_EX_INDEX_BIO 12 # define CRYPTO_EX_INDEX_APP 13 # define CRYPTO_EX_INDEX_UI_METHOD 14 # define CRYPTO_EX_INDEX_DRBG 15 # define CRYPTO_EX_INDEX__COUNT 16 #define OPENSSL_malloc_init() while(0) continue int CRYPTO_mem_ctrl(int mode)"
  },
  {
    "label": "OPENSSL_malloc()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "OPENSSL_malloc(num) \\ CRYPTO_malloc(num, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_zalloc(num) \\ CRYPTO_zalloc(num, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_realloc(addr, num) \\ CRYPTO_realloc(addr, num, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_clear_realloc(addr, old_num, num) \\ CRYPTO_clear_realloc(addr, old_num, num, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_clear_free(addr, num) \\ CRYPTO_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_free(addr) \\ CRYPTO_free(addr, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_memdup(str, s) \\ CRYPTO_memdup((str), s, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_strdup(str) \\ CRYPTO_strdup(str, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_strndup(str, n) \\ CRYPTO_strndup(str, n, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_secure_malloc(num) \\ CRYPTO_secure_malloc(num, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_secure_zalloc(num) \\ CRYPTO_secure_zalloc(num, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_secure_free(addr) \\ CRYPTO_secure_free(addr, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_secure_clear_free(addr, num) \\ CRYPTO_secure_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_secure_actual_size(ptr) \\ CRYPTO_secure_actual_size(ptr) size_t OPENSSL_strlcpy(char *dst, const char *src, size_t siz)"
  },
  {
    "label": "OPENSSL_strlcat()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "OPENSSL_strlcat(char *dst, const char *src, size_t siz)"
  },
  {
    "label": "OPENSSL_strnlen()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "OPENSSL_strnlen(const char *str, size_t maxlen)"
  },
  {
    "label": "OPENSSL_buf2hexstr()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "OPENSSL_buf2hexstr(const unsigned char *buffer, long len)"
  },
  {
    "label": "OPENSSL_hexstr2buf()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "OPENSSL_hexstr2buf(const char *str, long *len)"
  },
  {
    "label": "OPENSSL_hexchar2int()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OPENSSL_hexchar2int(unsigned char c)"
  },
  {
    "label": "OPENSSL_MALLOC_MAX_NELEMS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "OPENSSL_MALLOC_MAX_NELEMS(type) (((1U<<(sizeof(int)*8-1))-1)/sizeof(type)) unsigned long OpenSSL_version_num(void)"
  },
  {
    "label": "OpenSSL_version()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "OpenSSL_version(int type)"
  },
  {
    "label": "OPENSSL_issetugid()",
    "kind": "Method",
    "detail": "Function (# define OPENSSL_VERSION 0 # define OPENSSL_CFLAGS 1 # define OPENSSL_BUILT_ON 2 # define OPENSSL_PLATFORM 3 # define OPENSSL_DIR 4 # define OPENSSL_ENGINES_DIR 5 int)",
    "insertText": "OPENSSL_issetugid(void)"
  },
  {
    "label": "CRYPTO_EX_new()",
    "kind": "Method",
    "detail": "Function (typedef void)",
    "insertText": "CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx, long argl, void *argp)"
  },
  {
    "label": "CRYPTO_EX_free()",
    "kind": "Method",
    "detail": "Function (typedef void)",
    "insertText": "CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx, long argl, void *argp)"
  },
  {
    "label": "CRYPTO_EX_dup()",
    "kind": "Method",
    "detail": "Function (typedef int)",
    "insertText": "CRYPTO_EX_dup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from, void *from_d, int idx, long argl, void *argp)"
  },
  {
    "label": "CRYPTO_get_ex_new_index()",
    "kind": "Method",
    "detail": "Function (__owur int)",
    "insertText": "CRYPTO_get_ex_new_index(int class_index, long argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)"
  },
  {
    "label": "CRYPTO_free_ex_index()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_free_ex_index(int class_index, int idx)"
  },
  {
    "label": "CRYPTO_new_ex_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)"
  },
  {
    "label": "CRYPTO_dup_ex_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from)"
  },
  {
    "label": "CRYPTO_free_ex_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)"
  },
  {
    "label": "CRYPTO_set_ex_data()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)"
  },
  {
    "label": "CRYPTO_get_ex_data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx)"
  },
  {
    "label": "CRYPTO_cleanup_all_ex_data()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define)",
    "insertText": "CRYPTO_cleanup_all_ex_data() while(0) continue # define CRYPTO_num_locks() (1) # define CRYPTO_set_locking_callback(func) # define CRYPTO_get_locking_callback() (NULL) # define CRYPTO_set_add_lock_callback(func) # define CRYPTO_get_add_lock_callback() (NULL)"
  },
  {
    "label": "CRYPTO_THREADID_set_numeric()",
    "kind": "Method",
    "detail": "Function (int dummy ; } CRYPTO_THREADID ; # define)",
    "insertText": "CRYPTO_THREADID_set_numeric(id, val) # define CRYPTO_THREADID_set_pointer(id, ptr) # define CRYPTO_THREADID_set_callback(threadid_func) (0) # define CRYPTO_THREADID_get_callback() (NULL) # define CRYPTO_THREADID_current(id) # define CRYPTO_THREADID_cmp(a, b) (-1) # define CRYPTO_THREADID_cpy(dest, src) # define CRYPTO_THREADID_hash(id) (0UL) # if OPENSSL_API_COMPAT < 0x10000000L # define CRYPTO_set_id_callback(func) # define CRYPTO_get_id_callback() (NULL) # define CRYPTO_thread_id() (0UL) # endif # define CRYPTO_set_dynlock_create_callback(dyn_create_function) # define CRYPTO_set_dynlock_lock_callback(dyn_lock_function) # define CRYPTO_set_dynlock_destroy_callback(dyn_destroy_function) # define CRYPTO_get_dynlock_create_callback() (NULL) # define CRYPTO_get_dynlock_lock_callback() (NULL) # define CRYPTO_get_dynlock_destroy_callback() (NULL) # endif int CRYPTO_set_mem_functions( void *(*m) (size_t, const char *, int), void *(*r) (void *, size_t, const char *, int), void (*f) (void *, const char *, int))"
  },
  {
    "label": "CRYPTO_set_mem_debug()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_set_mem_debug(int flag)"
  },
  {
    "label": "CRYPTO_get_mem_functions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_get_mem_functions(void *(**m) (size_t, const char *, int), void *(**r) (void *, size_t, const char *, int), void (**f) (void *, const char *, int))"
  },
  {
    "label": "CRYPTO_malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_malloc(size_t num, const char *file, int line)"
  },
  {
    "label": "CRYPTO_zalloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_zalloc(size_t num, const char *file, int line)"
  },
  {
    "label": "CRYPTO_memdup()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_memdup(const void *str, size_t siz, const char *file, int line)"
  },
  {
    "label": "CRYPTO_strdup()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "CRYPTO_strdup(const char *str, const char *file, int line)"
  },
  {
    "label": "CRYPTO_strndup()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "CRYPTO_strndup(const char *str, size_t s, const char *file, int line)"
  },
  {
    "label": "CRYPTO_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_free(void *ptr, const char *file, int line)"
  },
  {
    "label": "CRYPTO_clear_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line)"
  },
  {
    "label": "CRYPTO_realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_realloc(void *addr, size_t num, const char *file, int line)"
  },
  {
    "label": "CRYPTO_clear_realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num, const char *file, int line)"
  },
  {
    "label": "CRYPTO_secure_malloc_init()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_secure_malloc_init(size_t sz, int minsize)"
  },
  {
    "label": "CRYPTO_secure_malloc_done()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_secure_malloc_done(void)"
  },
  {
    "label": "CRYPTO_secure_malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_secure_malloc(size_t num, const char *file, int line)"
  },
  {
    "label": "CRYPTO_secure_zalloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_secure_zalloc(size_t num, const char *file, int line)"
  },
  {
    "label": "CRYPTO_secure_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_secure_free(void *ptr, const char *file, int line)"
  },
  {
    "label": "CRYPTO_secure_clear_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_secure_clear_free(void *ptr, size_t num, const char *file, int line)"
  },
  {
    "label": "CRYPTO_secure_allocated()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_secure_allocated(const void *ptr)"
  },
  {
    "label": "CRYPTO_secure_malloc_initialized()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_secure_malloc_initialized(void)"
  },
  {
    "label": "CRYPTO_secure_actual_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CRYPTO_secure_actual_size(void *ptr)"
  },
  {
    "label": "CRYPTO_secure_used()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "CRYPTO_secure_used(void)"
  },
  {
    "label": "OPENSSL_cleanse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENSSL_cleanse(void *ptr, size_t len)"
  },
  {
    "label": "OPENSSL_mem_debug_push()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_CRYPTO_MDEBUG # define)",
    "insertText": "OPENSSL_mem_debug_push(info) \\ CRYPTO_mem_debug_push(info, OPENSSL_FILE, OPENSSL_LINE) # define OPENSSL_mem_debug_pop() \\ CRYPTO_mem_debug_pop() int CRYPTO_mem_debug_push(const char *info, const char *file, int line)"
  },
  {
    "label": "CRYPTO_mem_debug_pop()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_mem_debug_pop(void)"
  },
  {
    "label": "CRYPTO_get_alloc_counts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount)"
  },
  {
    "label": "CRYPTO_mem_debug_malloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_mem_debug_malloc(void *addr, size_t num, int flag, const char *file, int line)"
  },
  {
    "label": "CRYPTO_mem_debug_realloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num, int flag, const char *file, int line)"
  },
  {
    "label": "CRYPTO_mem_debug_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CRYPTO_mem_debug_free(void *addr, int flag, const char *file, int line)"
  },
  {
    "label": "CRYPTO_mem_leaks_cb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_mem_leaks_cb(int (*cb) (const char *str, size_t len, void *u), void *u)"
  },
  {
    "label": "CRYPTO_mem_leaks_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO int)",
    "insertText": "CRYPTO_mem_leaks_fp(FILE *)"
  },
  {
    "label": "CRYPTO_mem_leaks()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "CRYPTO_mem_leaks(BIO *bio)"
  },
  {
    "label": "OPENSSL_die()",
    "kind": "Method",
    "detail": "Function (# endif ossl_noreturn void)",
    "insertText": "OPENSSL_die(const char *assertion, const char *file, int line)"
  },
  {
    "label": "OpenSSLDie()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define)",
    "insertText": "OpenSSLDie(f,l,a) OPENSSL_die((a),(f),(l)) # endif # define OPENSSL_assert(e) \\ (void)((e) ? 0 : (OPENSSL_die(\"assertion failed: \" #e, OPENSSL_FILE, OPENSSL_LINE), 1)) int OPENSSL_isservice(void)"
  },
  {
    "label": "FIPS_mode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FIPS_mode(void)"
  },
  {
    "label": "FIPS_mode_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FIPS_mode_set(int r)"
  },
  {
    "label": "OPENSSL_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENSSL_init(void)"
  },
  {
    "label": "OPENSSL_fork_prepare()",
    "kind": "Method",
    "detail": "Function (# ifdef OPENSSL_SYS_UNIX void)",
    "insertText": "OPENSSL_fork_prepare(void)"
  },
  {
    "label": "OPENSSL_fork_parent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENSSL_fork_parent(void)"
  },
  {
    "label": "OPENSSL_fork_child()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENSSL_fork_child(void)"
  },
  {
    "label": "OPENSSL_gmtime()",
    "kind": "Method",
    "detail": "Function (# endif struct tm*)",
    "insertText": "OPENSSL_gmtime(const time_t *timer, struct tm *result)"
  },
  {
    "label": "OPENSSL_gmtime_adj()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OPENSSL_gmtime_adj(struct tm *tm, int offset_day, long offset_sec)"
  },
  {
    "label": "OPENSSL_gmtime_diff()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OPENSSL_gmtime_diff(int *pday, int *psec, const struct tm *from, const struct tm *to)"
  },
  {
    "label": "CRYPTO_memcmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len)"
  },
  {
    "label": "OPENSSL_INIT_ENGINE_ALL_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# define OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS 0 x00000001L # define OPENSSL_INIT_LOAD_CRYPTO_STRINGS 0 x00000002L # define OPENSSL_INIT_ADD_ALL_CIPHERS 0 x00000004L # define OPENSSL_INIT_ADD_ALL_DIGESTS 0 x00000008L # define OPENSSL_INIT_NO_ADD_ALL_CIPHERS 0 x00000010L # define OPENSSL_INIT_NO_ADD_ALL_DIGESTS 0 x00000020L # define OPENSSL_INIT_LOAD_CONFIG 0 x00000040L # define OPENSSL_INIT_NO_LOAD_CONFIG 0 x00000080L # define OPENSSL_INIT_ASYNC 0 x00000100L # define OPENSSL_INIT_ENGINE_RDRAND 0 x00000200L # define OPENSSL_INIT_ENGINE_DYNAMIC 0 x00000400L # define OPENSSL_INIT_ENGINE_OPENSSL 0 x00000800L # define OPENSSL_INIT_ENGINE_CRYPTODEV 0 x00001000L # define OPENSSL_INIT_ENGINE_CAPI 0 x00002000L # define OPENSSL_INIT_ENGINE_PADLOCK 0 x00004000L # define OPENSSL_INIT_ENGINE_AFALG 0 x00008000L # define OPENSSL_INIT_ATFORK 0 x00020000L # define OPENSSL_INIT_NO_ATEXIT 0 x00080000L # define)",
    "insertText": "OPENSSL_INIT_ENGINE_ALL_BUILTIN(OPENSSL_INIT_ENGINE_RDRAND | OPENSSL_INIT_ENGINE_DYNAMIC \\ | OPENSSL_INIT_ENGINE_CRYPTODEV | OPENSSL_INIT_ENGINE_CAPI | \\ OPENSSL_INIT_ENGINE_PADLOCK) void OPENSSL_cleanup(void)"
  },
  {
    "label": "OPENSSL_init_crypto()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)"
  },
  {
    "label": "OPENSSL_atexit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OPENSSL_atexit(void (*handler)(void))"
  },
  {
    "label": "OPENSSL_thread_stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENSSL_thread_stop(void)"
  },
  {
    "label": "OPENSSL_INIT_new()",
    "kind": "Method",
    "detail": "Function (OPENSSL_INIT_SETTINGS*)",
    "insertText": "OPENSSL_INIT_new(void)"
  },
  {
    "label": "OPENSSL_INIT_set_config_filename()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO int)",
    "insertText": "OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings, const char *config_filename)"
  },
  {
    "label": "OPENSSL_INIT_set_config_file_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings, unsigned long flags)"
  },
  {
    "label": "OPENSSL_INIT_set_config_appname()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings, const char *config_appname)"
  },
  {
    "label": "OPENSSL_INIT_free()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) # if defined(_WIN32) # if defined(BASETYPES) || defined(_WINDEF_H)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef DWORD CRYPTO_THREAD_ID ; typedef LONG CRYPTO_ONCE ; # define CRYPTO_ONCE_STATIC_INIT 0 # endif # else # include<pthread . h> typedef pthread_once_t CRYPTO_ONCE ; typedef pthread_key_t CRYPTO_THREAD_LOCAL ; typedef pthread_t CRYPTO_THREAD_ID ; # define CRYPTO_ONCE_STATIC_INIT PTHREAD_ONCE_INIT # endif # endif # if !)",
    "insertText": "defined(CRYPTO_ONCE_STATIC_INIT)"
  },
  {
    "label": "CRYPTO_THREAD_run_once()",
    "kind": "Method",
    "detail": "Function (typedef unsigned int CRYPTO_THREAD_LOCAL ; typedef unsigned int CRYPTO_THREAD_ID ; # define CRYPTO_ONCE_STATIC_INIT 0 # endif int)",
    "insertText": "CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))"
  },
  {
    "label": "CRYPTO_THREAD_init_local()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))"
  },
  {
    "label": "CRYPTO_THREAD_get_local()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)"
  },
  {
    "label": "CRYPTO_THREAD_set_local()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)"
  },
  {
    "label": "CRYPTO_THREAD_cleanup_local()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)"
  },
  {
    "label": "CRYPTO_THREAD_get_current_id()",
    "kind": "Method",
    "detail": "Function (CRYPTO_THREAD_ID)",
    "insertText": "CRYPTO_THREAD_get_current_id(void)"
  },
  {
    "label": "CRYPTO_THREAD_compare_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)"
  }
]