[
  {
    "label": "FDurationTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDurationTimer"
  },
  {
    "label": "FScopedDurationTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedDurationTimer"
  },
  {
    "label": "FAutoScopedDurationTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoScopedDurationTimer"
  },
  {
    "label": "TScopedDurationThreadSafeTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScopedDurationThreadSafeTimer"
  },
  {
    "label": "FScopedDurationTimeLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedDurationTimeLogger"
  },
  {
    "label": "FScopedSwitchedDurationTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedSwitchedDurationTimer"
  },
  {
    "label": "FScopedSwitchedCountedDurationTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedSwitchedCountedDurationTimer"
  },
  {
    "label": "Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Func"
  },
  {
    "label": "FScopedDurationTimeCustomLogger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedDurationTimeCustomLogger"
  },
  {
    "label": "FDurationTimer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Containers / StringFwd . h \" # include \" CoreGlobals . h \" # include \" HAL / PlatformTime . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Misc / OutputDeviceRedirector . h \" # include \" HAL / ThreadSafeCounter64 . h \" class FDurationTimer { public :)",
    "insertText": "FDurationTimer(double& AccumulatorIn) : StartTime(FPlatformTime::Seconds()) , Accumulator(AccumulatorIn)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Start()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (StartTime =)",
    "insertText": "Seconds()"
  },
  {
    "label": "Accumulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulator(StopTime - StartTime)"
  },
  {
    "label": "FScopedDurationTimer()",
    "kind": "Method",
    "detail": "Function (StartTime = StopTime ; return StopTime ; } protected : double StartTime ; double& Accumulator ; } ; class FScopedDurationTimer : public FDurationTimer { public :)",
    "insertText": "FScopedDurationTimer(double& AccumulatorIn) : FDurationTimer(AccumulatorIn)"
  },
  {
    "label": "FScopedDurationTimer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedDurationTimer()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "FAutoScopedDurationTimer()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutoScopedDurationTimer : public FScopedDurationTimer { public :)",
    "insertText": "FAutoScopedDurationTimer() : FScopedDurationTimer(AccumulatorValue) , AccumulatorValue(0)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTime()"
  },
  {
    "label": "TScopedDurationThreadSafeTimer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TScopedDurationThreadSafeTimer()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Counter .)",
    "insertText": "Add(FPlatformTime::Cycles() - StartCycles)"
  },
  {
    "label": "FScopedDurationTimeLogger()",
    "kind": "Method",
    "detail": "Function (} private : ThreadSafeCounterClass& Counter ; int32 StartCycles ; } ; typedef TScopedDurationThreadSafeTimer<FThreadSafeCounter> FScopedDurationThreadSafeTimer ; typedef TScopedDurationThreadSafeTimer<FThreadSafeCounter64> FScopedDurationThreadSafeTimer64 ; class FScopedDurationTimeLogger { public :)",
    "insertText": "FScopedDurationTimeLogger(FString InMsg = TEXT(\"Scoped action\"), FOutputDevice* InDevice = GLog) : Msg (MoveTemp(InMsg)) , Device (InDevice) , Accumulator(0.0) , Timer (Accumulator)"
  },
  {
    "label": "FScopedDurationTimeLogger()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedDurationTimeLogger()"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Device ->)",
    "insertText": "Logf(TEXT(\"%s: %f secs\"), *Msg, Accumulator)"
  },
  {
    "label": "FScopedSwitchedDurationTimer()",
    "kind": "Method",
    "detail": "Function (} private : FString Msg ; FOutputDevice* Device ; double Accumulator ; FDurationTimer Timer ; } ; class FScopedSwitchedDurationTimer { public :)",
    "insertText": "FScopedSwitchedDurationTimer(double& AccumulatorIn, bool bDoFunctionalityIn) : StartTime(bDoFunctionalityIn ? FPlatformTime::Seconds() : 0) , Accumulator(AccumulatorIn) , bDoFunctionality(bDoFunctionalityIn)"
  },
  {
    "label": "FScopedSwitchedDurationTimer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedSwitchedDurationTimer()"
  },
  {
    "label": "Accumulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Accumulator(FPlatformTime::Seconds() - StartTime)"
  },
  {
    "label": "FScopedDurationTimeCustomLogger()",
    "kind": "Method",
    "detail": "Function (+ + CountAccumlatorIn ; } } } ; template<class Func> class FScopedDurationTimeCustomLogger { public :)",
    "insertText": "FScopedDurationTimeCustomLogger(const TCHAR* InTitle, double& InTotalTime, Func InLogFunc) : Title(InTitle) , LogFunc(InLogFunc) , LocalTime(-FPlatformTime::Seconds()) , TotalTime(InTotalTime)"
  },
  {
    "label": "LogFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogFunc(*FString::Printf(TEXT(\"%s started...\"), InTitle))"
  },
  {
    "label": "FScopedDurationTimeCustomLogger()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedDurationTimeCustomLogger()"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (TotalTime + = LocalTime ; TStringBuilder<1 0 2 4> Msg ; Msg .)",
    "insertText": "Appendf(TEXT(\"%s took %s\"), *Title, *FPlatformTime::PrettyTime(LocalTime))"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (Msg .)",
    "insertText": "Appendf(TEXT(\" (total: %s)\"), *FPlatformTime::PrettyTime(TotalTime))"
  },
  {
    "label": "LogFunc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LogFunc(Msg.ToString())"
  },
  {
    "label": "UE_SCOPED_TIMER()",
    "kind": "Method",
    "detail": "Function (} private : FString Title ; Func LogFunc ; double LocalTime ; double& TotalTime ; } ; # if NO_LOGGING # define)",
    "insertText": "UE_SCOPED_TIMER(Title, Category, Verbosity) #else #define UE_SCOPED_TIMER(Title, Category, Verbosity) \\ static double UE_SCOPED_TIMER_COMBINE(ScopedTimerTotal_,__LINE__)"
  }
]