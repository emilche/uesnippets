[
  {
    "label": "LowPrecisionTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LowPrecisionTimer"
  },
  {
    "label": "MetronomeSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MetronomeSource"
  },
  {
    "label": "TimerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimerBase"
  },
  {
    "label": "WebRtcTaskQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcTaskQueue"
  },
  {
    "label": "ThreadWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadWrapper"
  },
  {
    "label": "AlsaPcmOutputStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlsaPcmOutputStream"
  },
  {
    "label": "AlsaPcmInputStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AlsaPcmInputStream"
  },
  {
    "label": "FakeAudioWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeAudioWorker"
  },
  {
    "label": "DelayTimerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayTimerBase"
  },
  {
    "label": "DelayedTaskManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayedTaskManager"
  },
  {
    "label": "DeadlineTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeadlineTimer"
  },
  {
    "label": "MetronomeTimer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MetronomeTimer"
  },
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "TimeTicks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeTicks"
  },
  {
    "label": "PostDelayedTaskPassKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PostDelayedTaskPassKey"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "blink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blink"
  },
  {
    "label": "PostDelayedTaskPassKeyForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PostDelayedTaskPassKeyForTesting"
  },
  {
    "label": "webrtc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "webrtc"
  },
  {
    "label": "media",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "media"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "CurrentHandleOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrentHandleOverride"
  },
  {
    "label": "PostDelayedTaskPassKey()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCED_TASK_RUNNER_H_ # define BASE_TASK_SEQUENCED_TASK_RUNNER_H_ # include<memory> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / task / delay_policy . h \" # include \" base / task / delayed_task_handle . h \" # include \" base / task / sequenced_task_runner_helpers . h \" # include \" base / task / task_runner . h \" # include \" base / types / pass_key . h \" namespace blink { class LowPrecisionTimer ; class MetronomeSource ; class TimerBase ; class WebRtcTaskQueue ; } namespace webrtc { class ThreadWrapper ; } namespace media { class AlsaPcmOutputStream ; class AlsaPcmInputStream ; class FakeAudioWorker ; } namespace base { namespace internal { class DelayTimerBase ; class DelayedTaskManager ; } class DeadlineTimer ; class MetronomeTimer ; class TimeDelta ; class TimeTicks ; namespace subtle { class PostDelayedTaskPassKey { private :)",
    "insertText": "PostDelayedTaskPassKey()"
  },
  {
    "label": "PostNonNestableTask()",
    "kind": "Method",
    "detail": "Function (} class base::internal::DelayTimerBase ; class base::internal::DelayedTaskManager ; class base::DeadlineTimer ; class base::MetronomeTimer ; class blink::LowPrecisionTimer ; class blink::MetronomeSource ; class blink::TimerBase ; class blink::WebRtcTaskQueue ; class PostDelayedTaskPassKeyForTesting ; class webrtc::ThreadWrapper ; class media::AlsaPcmOutputStream ; class media::AlsaPcmInputStream ; class media::FakeAudioWorker ; } ; class PostDelayedTaskPassKeyForTesting : public PostDelayedTaskPassKey { } ; } class BASE_EXPORT SequencedTaskRunner : public TaskRunner { public : bool)",
    "insertText": "PostNonNestableTask(const Location& from_here, OnceClosure task)"
  },
  {
    "label": "PostNonNestableDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostNonNestableDelayedTask(const Location& from_here, OnceClosure task, base::TimeDelta delay)"
  },
  {
    "label": "PostCancelableDelayedTask()",
    "kind": "Method",
    "detail": "Function (DelayedTaskHandle)",
    "insertText": "PostCancelableDelayedTask(subtle::PostDelayedTaskPassKey, const Location& from_here, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "PostCancelableDelayedTaskAt()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] DelayedTaskHandle)",
    "insertText": "PostCancelableDelayedTaskAt(subtle::PostDelayedTaskPassKey, const Location& from_here, OnceClosure task, TimeTicks delayed_run_time, subtle::DelayPolicy delay_policy)"
  },
  {
    "label": "PostDelayedTaskAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTaskAt(subtle::PostDelayedTaskPassKey, const Location& from_here, OnceClosure task, TimeTicks delayed_run_time, subtle::DelayPolicy delay_policy)"
  },
  {
    "label": "DeleteSoon()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "DeleteSoon(const Location& from_here, const T* object)"
  },
  {
    "label": "DeleteSoon()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "DeleteSoon(const Location& from_here, std::unique_ptr<T> object)"
  },
  {
    "label": "ReleaseSoon()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "ReleaseSoon(const Location& from_here, scoped_refptr<T>&& object)"
  },
  {
    "label": "DeleteOrReleaseSoonInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteOrReleaseSoonInternal(from_here, &ReleaseHelper<T>::DoRelease, object.release())"
  },
  {
    "label": "RunsTasksInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RunsTasksInCurrentSequence()"
  },
  {
    "label": "GetCurrentDefault()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] const scoped_refptr<SequencedTaskRunner>&)",
    "insertText": "GetCurrentDefault()"
  },
  {
    "label": "HasCurrentDefault()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "HasCurrentDefault()"
  },
  {
    "label": "CurrentDefaultHandle()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT CurrentDefaultHandle { public :)",
    "insertText": "CurrentDefaultHandle(scoped_refptr<SequencedTaskRunner> task_runner)"
  },
  {
    "label": "CurrentDefaultHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentDefaultHandle(const CurrentDefaultHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurrentDefaultHandle&)",
    "insertText": "operator(const CurrentDefaultHandle&)"
  },
  {
    "label": "CurrentDefaultHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CurrentDefaultHandle()"
  },
  {
    "label": "SequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (private : class SequencedTaskRunner ; class CurrentHandleOverride ; scoped_refptr<SequencedTaskRunner> task_runner_ ; } ; protected : ~)",
    "insertText": "SequencedTaskRunner()"
  },
  {
    "label": "SetCurrentDefaultHandleTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentDefaultHandleTaskRunner(CurrentDefaultHandle& current_default, scoped_refptr<SequencedTaskRunner> task_runner)"
  },
  {
    "label": "DeleteOrReleaseSoonInternal()",
    "kind": "Method",
    "detail": "Function (current_default . task_runner_ = task_runner ; } private : bool)",
    "insertText": "DeleteOrReleaseSoonInternal(const Location& from_here, void (*deleter)(const void*), const void* object)"
  },
  {
    "label": "OnTaskRunnerDeleter()",
    "kind": "Method",
    "detail": "Function (} ; struct BASE_EXPORT OnTaskRunnerDeleter {)",
    "insertText": "OnTaskRunnerDeleter(scoped_refptr<SequencedTaskRunner> task_runner)"
  },
  {
    "label": "OnTaskRunnerDeleter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "OnTaskRunnerDeleter()"
  },
  {
    "label": "OnTaskRunnerDeleter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTaskRunnerDeleter(OnTaskRunnerDeleter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OnTaskRunnerDeleter&)",
    "insertText": "operator(OnTaskRunnerDeleter&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "operator()(const T* ptr)"
  }
]