[
  {
    "label": "MockDesktopCapturerCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MockDesktopCapturerCallback"
  },
  {
    "label": "MockDesktopCapturerCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_MOCK_DESKTOP_CAPTURER_CALLBACK_H_ # define MODULES_DESKTOP_CAPTURE_MOCK_DESKTOP_CAPTURER_CALLBACK_H_ # include<memory> # include \" modules / desktop_capture / desktop_capturer . h \" # include \" test / gmock . h \" namespace webrtc { class MockDesktopCapturerCallback : public DesktopCapturer::Callback { public :)",
    "insertText": "MockDesktopCapturerCallback()"
  },
  {
    "label": "MockDesktopCapturerCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MockDesktopCapturerCallback(const MockDesktopCapturerCallback&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MockDesktopCapturerCallback&)",
    "insertText": "operator(const MockDesktopCapturerCallback&)"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, OnCaptureResultPtr, (DesktopCapturer::Result result, std::unique_ptr<DesktopFrame>* frame))"
  },
  {
    "label": "OnCaptureResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCaptureResult(DesktopCapturer::Result result, std::unique_ptr<DesktopFrame> frame)"
  }
]