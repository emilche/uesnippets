[
  {
    "label": "EchoEmulatingCapturer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EchoEmulatingCapturer"
  },
  {
    "label": "EchoEmulatingRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EchoEmulatingRenderer"
  },
  {
    "label": "EchoEmulatingCapturer()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ECHO_ECHO_EMULATION_H_ # define TEST_PC_E2E_ECHO_ECHO_EMULATION_H_ # include<atomic> # include<deque> # include<memory> # include<vector> # include \" api / test / pclf / media_configuration . h \" # include \" modules / audio_device / include / test_audio_device . h \" # include \" rtc_base / swap_queue . h \" namespace webrtc { namespace webrtc_pc_e2e { class EchoEmulatingCapturer : public TestAudioDeviceModule::Capturer { public :)",
    "insertText": "EchoEmulatingCapturer(std::unique_ptr<TestAudioDeviceModule::Capturer> capturer, EchoEmulationConfig config)"
  },
  {
    "label": "OnAudioRendered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAudioRendered(rtc::ArrayView<const int16_t> data)"
  },
  {
    "label": "SamplingFrequency()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SamplingFrequency()"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "NumChannels()"
  },
  {
    "label": "Capture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Capture(rtc::BufferT<int16_t>* buffer)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<TestAudioDeviceModule::Capturer> delegate_ ; const EchoEmulationConfig config_ ; SwapQueue<std::vector<int16_t>> renderer_queue_ ; SequenceChecker renderer_thread_ ; std::vector<int16_t> queue_input_)",
    "insertText": "RTC_GUARDED_BY(renderer_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (SequenceChecker capturer_thread_ ; std::vector<int16_t> queue_output_)",
    "insertText": "RTC_GUARDED_BY(capturer_thread_)"
  },
  {
    "label": "EchoEmulatingRenderer()",
    "kind": "Method",
    "detail": "Function (} ; class EchoEmulatingRenderer : public TestAudioDeviceModule::Renderer { public :)",
    "insertText": "EchoEmulatingRenderer(std::unique_ptr<TestAudioDeviceModule::Renderer> renderer, EchoEmulatingCapturer* echo_emulating_capturer)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Render(rtc::ArrayView<const int16_t> data)"
  }
]