[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "ConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstIterator"
  },
  {
    "label": "DeepFrameBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeepFrameBuffer"
  },
  {
    "label": "DeepSlice()",
    "kind": "Method",
    "detail": "Function (# ifndef IMFDEEPFRAMEBUFFER_H_ # define IMFDEEPFRAMEBUFFER_H_ # include \" ImfForward . h \" # include \" ImfFrameBuffer . h \" OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER struct IMF_EXPORT_TYPE DeepSlice : public Slice { int sampleStride ; IMF_EXPORT)",
    "insertText": "DeepSlice(PixelType type = HALF, char* base = 0, size_t xStride = 0, size_t yStride = 0, size_t sampleStride = 0, int xSampling = 1, int ySampling = 1, double fillValue = 0.0, bool xTileCoords = false, bool yTileCoords = false)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} ; class IMF_EXPORT_TYPE DeepFrameBuffer { public : IMF_EXPORT void)",
    "insertText": "insert(const char name[], const DeepSlice& slice)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "insert(const std::string& name, const DeepSlice& slice)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT DeepSlice&)",
    "insertText": "operator(const char name[])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT DeepSlice&)",
    "insertText": "operator(const std::string& name)"
  },
  {
    "label": "findSlice()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT DeepSlice*)",
    "insertText": "findSlice(const char name[])"
  },
  {
    "label": "findSlice()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT DeepSlice*)",
    "insertText": "findSlice(const std::string& name)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef std::map<Name,DeepSlice> SliceMap ; class Iterator ; class ConstIterator ; IMF_EXPORT Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "end()"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "find(const char name[])"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "find(const std::string& name)"
  },
  {
    "label": "insertSampleCountSlice()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "insertSampleCountSlice(const Slice& slice)"
  },
  {
    "label": "getSampleCountSlice()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const Slice&)",
    "insertText": "getSampleCountSlice()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (private : SliceMap _map ; Slice _sampleCounts ; } ; class IMF_EXPORT_TYPE DeepFrameBuffer::Iterator { public : IMF_EXPORT)",
    "insertText": "Iterator()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "Iterator(const DeepFrameBuffer::SliceMap::iterator& i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "name()"
  },
  {
    "label": "slice()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT DeepSlice&)",
    "insertText": "slice()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (private : class DeepFrameBuffer::ConstIterator ; DeepFrameBuffer::SliceMap::iterator _i ; } ; class IMF_EXPORT_TYPE DeepFrameBuffer::ConstIterator { public : IMF_EXPORT)",
    "insertText": "ConstIterator()"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "ConstIterator(const DeepFrameBuffer::SliceMap::const_iterator& i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "ConstIterator(const DeepFrameBuffer::Iterator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "operator(const ConstIterator&, const ConstIterator&)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (DeepFrameBuffer::SliceMap::const_iterator _i ; } ; DeepFrameBuffer::)",
    "insertText": "Iterator() : _i ()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} DeepFrameBuffer::)",
    "insertText": "Iterator(const DeepFrameBuffer::SliceMap::iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} DeepFrameBuffer::)",
    "insertText": "ConstIterator(const DeepFrameBuffer::SliceMap::const_iterator& i) : _i (i)"
  },
  {
    "label": "ConstIterator()",
    "kind": "Method",
    "detail": "Function (} DeepFrameBuffer::)",
    "insertText": "ConstIterator(const DeepFrameBuffer::Iterator& other) : _i (other._i)"
  }
]