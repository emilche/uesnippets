[
  {
    "label": "FTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLayout"
  },
  {
    "label": "FSyntaxHighlighterTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSyntaxHighlighterTextLayoutMarshaller"
  },
  {
    "label": "FRichTextSyntaxHighlighterTextLayoutMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRichTextSyntaxHighlighterTextLayoutMarshaller"
  },
  {
    "label": "FSyntaxTextStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSyntaxTextStyle"
  },
  {
    "label": "FSyntaxHighlighterTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateGlobals . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # if WITH_FANCY_TEXT # include \" Framework / Text / PlainTextLayoutMarshaller . h \" # include \" Framework / Text / SyntaxTokenizer . h \" # endif class FTextLayout ; # if WITH_FANCY_TEXT class FSyntaxHighlighterTextLayoutMarshaller : public FPlainTextLayoutMarshaller { public : ~)",
    "insertText": "FSyntaxHighlighterTextLayoutMarshaller()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const FString& SourceString, FTextLayout& TargetTextLayout)"
  },
  {
    "label": "RequiresLiveUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresLiveUpdate()"
  },
  {
    "label": "EnableSyntaxHighlighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSyntaxHighlighting(const bool bEnable)"
  },
  {
    "label": "IsSyntaxHighlightingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSyntaxHighlightingEnabled()"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ParseTokens(const FString& SourceString, FTextLayout& TargetTextLayout, TArray<ISyntaxTokenizer::FTokenizedLine> TokenizedLines)"
  },
  {
    "label": "FSyntaxHighlighterTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSyntaxHighlighterTextLayoutMarshaller(TSharedPtr< ISyntaxTokenizer > InTokenizer)"
  },
  {
    "label": "FSyntaxTextStyle()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISyntaxTokenizer> Tokenizer ; bool bSyntaxHighlightingEnabled ; } ; class FRichTextSyntaxHighlighterTextLayoutMarshaller : public FSyntaxHighlighterTextLayoutMarshaller { public : struct FSyntaxTextStyle {)",
    "insertText": "FSyntaxTextStyle() : NormalTextStyle(FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"SyntaxHighlight.Normal\")) , NodeTextStyle(FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"SyntaxHighlight.Node\")) , NodeAttributeKeyTextStyle(FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"SyntaxHighlight.NodeAttributeKey\")) , NodeAttribueAssignmentTextStyle(FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"SyntaxHighlight.NodeAttribueAssignment\")) , NodeAttributeValueTextStyle(FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"SyntaxHighlight.NodeAttributeValue\"))"
  },
  {
    "label": "FSyntaxTextStyle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSyntaxTextStyle(const FTextBlockStyle& InNormalTextStyle, const FTextBlockStyle& InNodeTextStyle, const FTextBlockStyle& InNodeAttributeKeyTextStyle, const FTextBlockStyle& InNodeAttribueAssignmentTextStyle, const FTextBlockStyle& InNodeAttributeValueTextStyle) : NormalTextStyle(InNormalTextStyle) , NodeTextStyle(InNodeTextStyle) , NodeAttributeKeyTextStyle(InNodeAttributeKeyTextStyle) , NodeAttribueAssignmentTextStyle(InNodeAttribueAssignmentTextStyle) , NodeAttributeValueTextStyle(InNodeAttributeValueTextStyle)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FTextBlockStyle NormalTextStyle ; FTextBlockStyle NodeTextStyle ; FTextBlockStyle NodeAttributeKeyTextStyle ; FTextBlockStyle NodeAttribueAssignmentTextStyle ; FTextBlockStyle NodeAttributeValueTextStyle ; } ; TSharedRef<FRichTextSyntaxHighlighterTextLayoutMarshaller>)",
    "insertText": "Create(const FSyntaxTextStyle& InSyntaxTextStyle)"
  },
  {
    "label": "FRichTextSyntaxHighlighterTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRichTextSyntaxHighlighterTextLayoutMarshaller()"
  },
  {
    "label": "FRichTextSyntaxHighlighterTextLayoutMarshaller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRichTextSyntaxHighlighterTextLayoutMarshaller(TSharedPtr< ISyntaxTokenizer > InTokenizer, const FSyntaxTextStyle& InSyntaxTextStyle)"
  }
]