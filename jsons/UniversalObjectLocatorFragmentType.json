[
  {
    "label": "IPayloadDebugging",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPayloadDebugging"
  },
  {
    "label": "IFragmentTypeDebuggingAssistant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IFragmentTypeDebuggingAssistant"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFragmentType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFragmentType"
  },
  {
    "label": "TFragmentType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFragmentType"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / AsciiSet . h \" # include \" Misc / StringBuilder . h \" # include \" Containers / PagedArray . h \" # include \" Containers / StringView . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / Class . h \" # include \" UniversalObjectLocatorFwd . h \" # include \" UniversalObjectLocatorResolveParams . h \" # include \" UniversalObjectLocatorFragmentDebugging . h \" namespace UE::UniversalObjectLocator { struct IPayloadDebugging ; struct IFragmentTypeDebuggingAssistant ; enum class EFragmentTypeFlags : uint8 { None,CanBeLoaded = 1<<0,LoadedByDefault = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EFragmentTypeFlags)"
  },
  {
    "label": "ResolvePayload()",
    "kind": "Method",
    "detail": "Function (FResolveResult)",
    "insertText": "ResolvePayload(const void* Payload, const FResolveParams& Params)"
  },
  {
    "label": "InitializePayload()",
    "kind": "Method",
    "detail": "Function (FInitializeResult)",
    "insertText": "InitializePayload(void* Payload, const FInitializeParams& InParams)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(const void* Payload, FStringBuilderBase& OutStringBuilder)"
  },
  {
    "label": "TryParseString()",
    "kind": "Method",
    "detail": "Function (FParseStringResult)",
    "insertText": "TryParseString(void* Payload, FStringView InString, const FParseStringParams& Params)"
  },
  {
    "label": "ComputePriority()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ComputePriority(const UObject* Object, const UObject* Context)"
  },
  {
    "label": "FResolveResult()",
    "kind": "Method",
    "detail": "Function (using FResolveCallback =)",
    "insertText": "FResolveResult(*)(const void* , const FResolveParams&)"
  },
  {
    "label": "FInitializeResult()",
    "kind": "Method",
    "detail": "Function (using FInitializeCallback =)",
    "insertText": "FInitializeResult(*)(void* , const FInitializeParams&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FToString =)",
    "insertText": "void(*)(const void* , FStringBuilderBase&)"
  },
  {
    "label": "FParseStringResult()",
    "kind": "Method",
    "detail": "Function (using FTryParseString =)",
    "insertText": "FParseStringResult(*)(void* , FStringView , const FParseStringParams&)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (using FPriorityCallback =)",
    "insertText": "uint32(*)(const UObject* , const UObject*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# if UE_UNIVERSALOBJECTLOCATOR_DEBUG using FFragmentDebugInitializer =)",
    "insertText": "void(*)(void*)"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (# endif struct { FInitializeCallback Initialize ; FResolveCallback Resolve ; FToString ToString ; FTryParseString TryParseString ; } InstanceBindings ; struct { FPriorityCallback Priority ; # if UE_UNIVERSALOBJECTLOCATOR_DEBUG FFragmentDebugInitializer FragmentDebugInitializer ; # endif } StaticBindings ; TObjectPtr<const UScriptStruct> PayloadType ; FText DisplayText ; FName FragmentTypeID ; FName PrimaryEditorType ; EFragmentTypeFlags Flags ; UScriptStruct*)",
    "insertText": "GetStruct()"
  }
]