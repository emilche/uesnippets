[
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanQueue"
  },
  {
    "label": "FVulkanCmdBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCmdBuffer"
  },
  {
    "label": "FVulkanTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTexture"
  },
  {
    "label": "FVulkanResourceMultiBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanResourceMultiBuffer"
  },
  {
    "label": "FVulkanLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanLayout"
  },
  {
    "label": "FVulkanOcclusionQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanOcclusionQuery"
  },
  {
    "label": "FVulkanCommandBufferManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandBufferManager"
  },
  {
    "label": "FRHITransientHeapAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientHeapAllocation"
  },
  {
    "label": "FVulkanPendingBufferLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanPendingBufferLock"
  },
  {
    "label": "FVulkanView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanView"
  },
  {
    "label": "FVulkanViewableResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanViewableResource"
  },
  {
    "label": "FVulkanShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanShaderResourceView"
  },
  {
    "label": "FVulkanUnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanUnorderedAccessView"
  },
  {
    "label": "FDeviceMemoryAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeviceMemoryAllocation"
  },
  {
    "label": "FVulkanVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanVertexDeclaration"
  },
  {
    "label": "FGfxPipelineDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGfxPipelineDesc"
  },
  {
    "label": "FVulkanShaderModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanShaderModule"
  },
  {
    "label": "FVulkanShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanShader"
  },
  {
    "label": "FSpirvCode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpirvCode"
  },
  {
    "label": "FSpirvContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpirvContainer"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FVulkanComputeShaderState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputeShaderState"
  },
  {
    "label": "FVulkanComputePipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipeline"
  },
  {
    "label": "FVulkanShaderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanShaderFactory"
  },
  {
    "label": "TVulkanBaseShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVulkanBaseShader"
  },
  {
    "label": "FVulkanRayTracingShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingShader"
  },
  {
    "label": "FVulkanBoundShaderState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanBoundShaderState"
  },
  {
    "label": "FVulkanCpuReadbackBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanCpuReadbackBuffer"
  },
  {
    "label": "FInvalidatedState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInvalidatedState"
  },
  {
    "label": "FTypedBufferView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedBufferView"
  },
  {
    "label": "FStructuredBufferView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructuredBufferView"
  },
  {
    "label": "FAccelerationStructureView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccelerationStructureView"
  },
  {
    "label": "FTextureView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureView"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "FVulkanLinkedView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanLinkedView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FImageCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImageCreateInfo"
  },
  {
    "label": "FRHICommandSetInitialImageState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandSetInitialImageState"
  },
  {
    "label": "FVulkanQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanQueryPool"
  },
  {
    "label": "FVulkanOcclusionQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanOcclusionQueryPool"
  },
  {
    "label": "EState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EState"
  },
  {
    "label": "FVulkanTimingQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTimingQueryPool"
  },
  {
    "label": "FCmdBufferFence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCmdBufferFence"
  },
  {
    "label": "FVulkanRenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderQuery"
  },
  {
    "label": "FVulkanTimingQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTimingQuery"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FBufferAlloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBufferAlloc"
  },
  {
    "label": "FRHICommandMultiBufferUnlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandMultiBufferUnlock"
  },
  {
    "label": "FVulkanUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanUniformBuffer"
  },
  {
    "label": "FVulkanVertexInputStateInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanVertexInputStateInfo"
  },
  {
    "label": "FVulkanPendingGfxState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPendingGfxState"
  },
  {
    "label": "FPackedUniformBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackedUniformBuffers"
  },
  {
    "label": "FVulkanStagingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanStagingBuffer"
  },
  {
    "label": "FVulkanGPUFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGPUFence"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TVulkanResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVulkanResourceTraits"
  },
  {
    "label": "FVulkanRayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingScene"
  },
  {
    "label": "FVulkanRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingGeometry"
  },
  {
    "label": "FVulkanRayTracingShaderTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingShaderTable"
  },
  {
    "label": "FVulkanRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingPipelineState"
  },
  {
    "label": "UETextureDimensionToVkImageViewType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VulkanPlatform . h \" # include \" VulkanConfiguration . h \" # include \" VulkanState . h \" # include \" VulkanUtil . h \" # include \" BoundShaderStateCache . h \" # include \" VulkanShaderResources . h \" # include \" VulkanMemory . h \" # include \" Misc / ScopeRWLock . h \" # include \" IVulkanDynamicRHI . h \" class FVulkanDevice ; class FVulkanQueue ; class FVulkanCmdBuffer ; class FVulkanTexture ; class FVulkanResourceMultiBuffer ; class FVulkanLayout ; class FVulkanOcclusionQuery ; class FVulkanCommandBufferManager ; struct FRHITransientHeapAllocation ; struct FVulkanPendingBufferLock ; class FVulkanView ; class FVulkanViewableResource ; class FVulkanShaderResourceView ; class FVulkanUnorderedAccessView ; namespace VulkanRHI { class FDeviceMemoryAllocation ; } enum { NUM_OCCLUSION_QUERIES_PER_POOL = 4 0 9 6,NUM_TIMESTAMP_QUERIES_PER_POOL = 1 0 2 4,} ; VkFormat GVulkanBufferFormat [ PF_MAX ] ; VkImageViewType)",
    "insertText": "UETextureDimensionToVkImageViewType(ETextureDimension Dimension)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInitializer(FVertexDeclarationElementList& Out)"
  },
  {
    "label": "EmptyCache()",
    "kind": "Method",
    "detail": "Function (Out = Elements ; return true ; } void)",
    "insertText": "EmptyCache()"
  },
  {
    "label": "GetPrecachePSOHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPrecachePSOHash()"
  },
  {
    "label": "FVulkanShaderModule()",
    "kind": "Method",
    "detail": "Function (Device = DeviceIn ; } ~)",
    "insertText": "FVulkanShaderModule()"
  },
  {
    "label": "GetVkShaderModule()",
    "kind": "Method",
    "detail": "Function (VkShaderModule&)",
    "insertText": "GetVkShaderModule()"
  },
  {
    "label": "PurgeShaderModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PurgeShaderModules()"
  },
  {
    "label": "GetOrCreateHandle()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FVulkanShaderModule>)",
    "insertText": "GetOrCreateHandle()"
  },
  {
    "label": "GetOrCreateHandle()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FVulkanShaderModule>)",
    "insertText": "GetOrCreateHandle(const FVulkanLayout* Layout, uint32 LayoutHash)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&VulkanShaderModulesMapCS)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FVulkanShaderModule>* Found = ShaderModules .)",
    "insertText": "Find(LayoutHash)"
  },
  {
    "label": "GetOrCreateHandle()",
    "kind": "Method",
    "detail": "Function (} TRefCountPtr<FVulkanShaderModule>)",
    "insertText": "GetOrCreateHandle(const FGfxPipelineDesc& Desc, const FVulkanLayout* Layout, uint32 LayoutHash)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (LayoutHash =)",
    "insertText": "HashCombine(LayoutHash, 1)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "Snprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Snprintf(Name, NameLength, \"main_%0.8x_%0.8x\", SpirvContainer.GetSizeBytes(), CodeHeader.SpirvCRC)"
  },
  {
    "label": "GetCodeHeader()",
    "kind": "Method",
    "detail": "Function (} const FVulkanShaderHeader&)",
    "insertText": "GetCodeHeader()"
  },
  {
    "label": "FSpirvCode()",
    "kind": "Method",
    "detail": "Function (CodeView = UncompressedCode ; })",
    "insertText": "FSpirvCode(TArrayView<uint32> UncompressedCodeView) : CodeView(UncompressedCodeView)"
  },
  {
    "label": "GetCodeView()",
    "kind": "Method",
    "detail": "Function (} TArrayView<uint32> CodeView ; TArray<uint32> UncompressedCode ; public : TArrayView<uint32>)",
    "insertText": "GetCodeView()"
  },
  {
    "label": "GetPatchedSpirvCode()",
    "kind": "Method",
    "detail": "Function (} FSpirvCode)",
    "insertText": "GetPatchedSpirvCode(const FGfxPipelineDesc& Desc, const FVulkanLayout* Layout)"
  },
  {
    "label": "IsCompressed()",
    "kind": "Method",
    "detail": "Function (TArray<FUniformBufferStaticSlot>& StaticSlots ; protected : # if UE_BUILD_DEBUG | | UE_BUILD_DEVELOPMENT FString DebugEntryPoint ; # endif uint64 ShaderKey ; FVulkanShaderHeader CodeHeader ; TMap<uint32,TRefCountPtr<FVulkanShaderModule>> ShaderModules ; const EShaderFrequency Frequency ; protected : class FSpirvContainer { class FVulkanShader ; TArray<uint8> SpirvCode ; int32 UncompressedSizeBytes = - 1 ; public : bool)",
    "insertText": "IsCompressed()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, class FVulkanShader::FSpirvContainer& SpirvContainer)"
  },
  {
    "label": "PatchSpirvInputAttachments()",
    "kind": "Method",
    "detail": "Function (FSpirvCode)",
    "insertText": "PatchSpirvInputAttachments(FSpirvCode& SpirvCode)"
  },
  {
    "label": "GetSpirvCode()",
    "kind": "Method",
    "detail": "Function (FSpirvCode)",
    "insertText": "GetSpirvCode(const FSpirvContainer& Container)"
  },
  {
    "label": "CreateHandle()",
    "kind": "Method",
    "detail": "Function (protected : FVulkanDevice* Device ; TRefCountPtr<FVulkanShaderModule>)",
    "insertText": "CreateHandle(const FVulkanLayout* Layout, uint32 LayoutHash)"
  },
  {
    "label": "CreateHandle()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FVulkanShaderModule>)",
    "insertText": "CreateHandle(const FGfxPipelineDesc& Desc, const FVulkanLayout* Layout, uint32 LayoutHash)"
  },
  {
    "label": "NeedsSpirvInputAttachmentPatching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsSpirvInputAttachmentPatching(const FGfxPipelineDesc& Desc)"
  },
  {
    "label": "FVulkanShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanShader(FVulkanDevice* InDevice, EShaderFrequency InFrequency, FVulkanShaderHeader&& InCodeHeader, FSpirvContainer&& InSpirvContainer, uint64 InShaderKey, TArray<FUniformBufferStaticSlot>& InStaticSlots)"
  },
  {
    "label": "TVulkanBaseShader()",
    "kind": "Method",
    "detail": "Function (class FVulkanCommandListContext ; class FVulkanPipelineStateCacheManager ; class FVulkanComputeShaderState ; class FVulkanComputePipeline ; class FVulkanShaderFactory ; } ; template<BaseResourceType,EShaderFrequency ShaderType> class TVulkanBaseShader : public BaseResourceType,public FVulkanShader { private :)",
    "insertText": "TVulkanBaseShader(FVulkanDevice* InDevice, FShaderResourceTable&& InSRT, FVulkanShaderHeader&& InCodeHeader, FSpirvContainer&& InSpirvContainer, uint64 InShaderKey) : BaseResourceType() , FVulkanShader(InDevice, ShaderType, MoveTemp(InCodeHeader), MoveTemp(InSpirvContainer), InShaderKey, BaseResourceType::StaticSlots)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (BaseResourceType::ShaderResourceTable =)",
    "insertText": "MoveTemp(InSRT)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} class FVulkanShaderFactory ; public : enum { StaticFrequency = ShaderType } ; uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "FVulkanRayTracingShader()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TVulkanBaseShader<FRHIVertexShader,SF_Vertex> FVulkanVertexShader ; typedef TVulkanBaseShader<FRHIPixelShader,SF_Pixel> FVulkanPixelShader ; typedef TVulkanBaseShader<FRHIComputeShader,SF_Compute> FVulkanComputeShader ; typedef TVulkanBaseShader<FRHIGeometryShader,SF_Geometry> FVulkanGeometryShader ; typedef TVulkanBaseShader<FRHIMeshShader,SF_Mesh> FVulkanMeshShader ; typedef TVulkanBaseShader<FRHIAmplificationShader,SF_Amplification> FVulkanTaskShader ; class FVulkanRayTracingShader : public FRHIRayTracingShader,public FVulkanShader { private :)",
    "insertText": "FVulkanRayTracingShader(FVulkanDevice* InDevice, EShaderFrequency InFrequency, FShaderResourceTable&& InSRT, FVulkanShaderHeader&& InCodeHeader, FSpirvContainer&& InSpirvContainer, uint64 InShaderKey) : FRHIRayTracingShader(InFrequency) , FVulkanShader(InDevice, InFrequency, MoveTemp(InCodeHeader), MoveTemp(InSpirvContainer), InShaderKey, FRHIRayTracingShader::StaticSlots)"
  },
  {
    "label": "GetOrCreateHandle()",
    "kind": "Method",
    "detail": "Function (} FSpirvContainer AnyHitSpirvContainer ; FSpirvContainer IntersectionSpirvContainer ; class FVulkanShaderFactory ; public : const uint32 MainModuleIdentifier = 0 ; const uint32 ClosestHitModuleIdentifier = MainModuleIdentifier ; const uint32 AnyHitModuleIdentifier = 1 ; const uint32 IntersectionModuleIdentifier = 2 ; TRefCountPtr<FVulkanShaderModule>)",
    "insertText": "GetOrCreateHandle(uint32 ModuleIdentifier)"
  },
  {
    "label": "FVulkanShaderFactory()",
    "kind": "Method",
    "detail": "Function (} } ; class FVulkanShaderFactory { public : ~)",
    "insertText": "FVulkanShaderFactory()"
  },
  {
    "label": "CreateShader()",
    "kind": "Method",
    "detail": "Function (template<ShaderType> ShaderType*)",
    "insertText": "CreateShader(TArrayView<const uint8> Code, FVulkanDevice* Device)"
  },
  {
    "label": "LookupShader()",
    "kind": "Method",
    "detail": "Function (template<ShaderType> ShaderType*)",
    "insertText": "LookupShader(uint64 ShaderKey)"
  },
  {
    "label": "ScopedLock()",
    "kind": "Method",
    "detail": "Function (FRWScopeLock)",
    "insertText": "ScopedLock(RWLock[ShaderType::StaticFrequency], SLT_ReadOnly)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FVulkanShader* const* FoundShaderPtr = ShaderMap [ ShaderType::StaticFrequency ] .)",
    "insertText": "Find(ShaderKey)"
  },
  {
    "label": "CreateRayTracingShader()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } template<EShaderFrequency ShaderFrequency> FVulkanRayTracingShader*)",
    "insertText": "CreateRayTracingShader(TArrayView<const uint8> Code, FVulkanDevice* Device)"
  },
  {
    "label": "LookupGfxShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LookupGfxShaders(const uint64 InShaderKeys[ShaderStage::NumGraphicsStages], FVulkanShader* OutShaders[ShaderStage::NumGraphicsStages])"
  },
  {
    "label": "OnDeleteShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteShader(const FVulkanShader& Shader)"
  },
  {
    "label": "FVulkanBoundShaderState()",
    "kind": "Method",
    "detail": "Function (private : FRWLock RWLock [ SF_NumFrequencies ] ; TMap<uint64,FVulkanShader*> ShaderMap [ SF_NumFrequencies ] ; } ; class FVulkanBoundShaderState : public FRHIBoundShaderState { public :)",
    "insertText": "FVulkanBoundShaderState(FRHIVertexDeclaration* InVertexDeclarationRHI, FRHIVertexShader* InVertexShaderRHI, FRHIPixelShader* InPixelShaderRHI, FRHIGeometryShader* InGeometryShaderRHI)"
  },
  {
    "label": "FVulkanBoundShaderState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanBoundShaderState()"
  },
  {
    "label": "GetPixelShader()",
    "kind": "Method",
    "detail": "Function (} FVulkanPixelShader*)",
    "insertText": "GetPixelShader()"
  },
  {
    "label": "GetMeshShader()",
    "kind": "Method",
    "detail": "Function (} FVulkanMeshShader*)",
    "insertText": "GetMeshShader()"
  },
  {
    "label": "GetTaskShader()",
    "kind": "Method",
    "detail": "Function (} FVulkanTaskShader*)",
    "insertText": "GetTaskShader()"
  },
  {
    "label": "GetGeometryShader()",
    "kind": "Method",
    "detail": "Function (} FVulkanGeometryShader*)",
    "insertText": "GetGeometryShader()"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} const FVulkanShader*)",
    "insertText": "GetShader(ShaderStage::EStage Stage)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# endif default : break ; })",
    "insertText": "checkf(0, TEXT(\"Invalid Shader Frequency %d\"), (int32)Stage)"
  },
  {
    "label": "FVulkanView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanView(FVulkanDevice& InDevice, VkDescriptorType InDescriptorType)"
  },
  {
    "label": "FVulkanView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanView()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "GetViewType()",
    "kind": "Method",
    "detail": "Function (EType)",
    "insertText": "GetViewType()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetTypedBufferView()",
    "kind": "Method",
    "detail": "Function (} FTypedBufferView const&)",
    "insertText": "GetTypedBufferView()"
  },
  {
    "label": "GetTextureView()",
    "kind": "Method",
    "detail": "Function (} FTextureView const&)",
    "insertText": "GetTextureView()"
  },
  {
    "label": "GetStructuredBufferView()",
    "kind": "Method",
    "detail": "Function (} FStructuredBufferView const&)",
    "insertText": "GetStructuredBufferView()"
  },
  {
    "label": "GetAccelerationStructureView()",
    "kind": "Method",
    "detail": "Function (} FAccelerationStructureView const&)",
    "insertText": "GetAccelerationStructureView()"
  },
  {
    "label": "InitAsTypedBufferView()",
    "kind": "Method",
    "detail": "Function (} FVulkanView*)",
    "insertText": "InitAsTypedBufferView(FVulkanResourceMultiBuffer* Buffer , EPixelFormat Format , uint32 InOffset , uint32 InSize)"
  },
  {
    "label": "InitAsTextureView()",
    "kind": "Method",
    "detail": "Function (FVulkanView*)",
    "insertText": "InitAsTextureView(VkImage InImage , VkImageViewType ViewType , VkImageAspectFlags AspectFlags , EPixelFormat UEFormat , VkFormat Format , uint32 FirstMip , uint32 NumMips , uint32 ArraySliceIndex , uint32 NumArraySlices , bool bUseIdentitySwizzle = false , VkImageUsageFlags ImageUsageFlags = 0 , VkSamplerYcbcrConversion SamplerYcbcrConversion = nullptr)"
  },
  {
    "label": "InitAsStructuredBufferView()",
    "kind": "Method",
    "detail": "Function (FVulkanView*)",
    "insertText": "InitAsStructuredBufferView(FVulkanResourceMultiBuffer* Buffer , uint32 InOffset , uint32 InSize)"
  },
  {
    "label": "InitAsAccelerationStructureView()",
    "kind": "Method",
    "detail": "Function (FVulkanView*)",
    "insertText": "InitAsAccelerationStructureView(FVulkanResourceMultiBuffer* Buffer , uint32 Offset , uint32 Size)"
  },
  {
    "label": "FVulkanView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanView(FVulkanView &&)"
  },
  {
    "label": "FVulkanView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanView(FVulkanView const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVulkanView&)",
    "insertText": "operator(FVulkanView &&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVulkanView&)",
    "insertText": "operator(FVulkanView const&)"
  },
  {
    "label": "GetBindlessHandle()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "GetBindlessHandle()"
  },
  {
    "label": "FVulkanLinkedView()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanLinkedView()"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink()"
  },
  {
    "label": "UpdateView()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "UpdateView()"
  },
  {
    "label": "FVulkanViewableResource()",
    "kind": "Method",
    "detail": "Function (} ; class FVulkanViewableResource { public : ~)",
    "insertText": "FVulkanViewableResource()"
  },
  {
    "label": "HasLinkedViews()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasLinkedViews()"
  },
  {
    "label": "FVulkanTexture()",
    "kind": "Method",
    "detail": "Function (private : FVulkanShaderResourceView ; FVulkanUnorderedAccessView ; FVulkanLinkedView* LinkedViews = nullptr ; } ; enum class EImageOwnerType : uint8 { None,LocalOwner,ExternalOwner,Aliased } ; class FVulkanTexture : public FRHITexture,public FVulkanEvictable,public FVulkanViewableResource { public :)",
    "insertText": "FVulkanTexture(FRHICommandListBase* RHICmdList, FVulkanDevice& InDevice, const FRHITextureCreateDesc& InCreateDesc, const FRHITransientHeapAllocation* InTransientHeapAllocation)"
  },
  {
    "label": "FVulkanTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanTexture(FVulkanDevice& InDevice, const FRHITextureCreateDesc& InCreateDesc, const FRHITransientHeapAllocation* InTransientHeapAllocation) : FVulkanTexture(nullptr, InDevice, InCreateDesc, InTransientHeapAllocation)"
  },
  {
    "label": "FVulkanTexture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVulkanTexture(FVulkanDevice& InDevice, const FRHITextureCreateDesc& InCreateDesc, VkImage InImage, const FVulkanRHIExternalImageDeleteCallbackInfo& InExternalImageDeleteCallbackInfo)"
  },
  {
    "label": "FVulkanTexture()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_ANDROID)",
    "insertText": "FVulkanTexture(FVulkanDevice& InDevice, const FRHITextureCreateDesc& InCreateDesc, const AHardwareBuffer_Desc& HardwareBufferDesc, AHardwareBuffer* HardwareBuffer)"
  },
  {
    "label": "FVulkanTexture()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FVulkanTexture(FVulkanDevice& InDevice, const FRHITextureCreateDesc& InCreateDesc, FTextureRHIRef& SrcTextureRHI)"
  },
  {
    "label": "FVulkanTexture()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanTexture()"
  },
  {
    "label": "AliasTextureResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AliasTextureResources(FTextureRHIRef& SrcTextureRHI)"
  },
  {
    "label": "OnLayoutTransition()",
    "kind": "Method",
    "detail": "Function (FVulkanView* DefaultView = nullptr ; FVulkanView* PartialView = nullptr ; FTextureRHIRef AliasedTexture ; void)",
    "insertText": "OnLayoutTransition(FVulkanCommandListContext& Context, VkImageLayout NewLayout)"
  },
  {
    "label": "DumpMemory()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "DumpMemory(T Callback)"
  },
  {
    "label": "GetSizeXYZ()",
    "kind": "Method",
    "detail": "Function (const FIntVector SizeXYZ =)",
    "insertText": "GetSizeXYZ()"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(TEXT(\"FVulkanTexture\"), GetName(), this, static_cast<FRHIResource*>(this), SizeXYZ.X, SizeXYZ.Y, SizeXYZ.Z, StorageFormat)"
  },
  {
    "label": "CanMove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanMove()"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Move(FVulkanDevice& Device, FVulkanCommandListContext& Context, VulkanRHI::FVulkanAllocation& NewAllocation)"
  },
  {
    "label": "GetEvictableTexture()",
    "kind": "Method",
    "detail": "Function (FVulkanTexture*)",
    "insertText": "GetEvictableTexture()"
  },
  {
    "label": "GetNativeResource()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNativeResource()"
  },
  {
    "label": "GetTextureBaseRHI()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetTextureBaseRHI()"
  },
  {
    "label": "GenerateImageCreateInfo()",
    "kind": "Method",
    "detail": "Function (} struct FImageCreateInfo { VkImageCreateInfo ImageCreateInfo ; VkImageFormatListCreateInfoKHR ImageFormatListCreateInfo ; VkExternalMemoryImageCreateInfoKHR ExternalMemImageCreateInfo ; TArray<VkFormat,TInlineAllocator<2>> FormatsUsed ; } ; void)",
    "insertText": "GenerateImageCreateInfo(FImageCreateInfo& OutImageCreateInfo, FVulkanDevice& InDevice, const FRHITextureDesc& InDesc, VkFormat* OutStorageFormat = nullptr, VkFormat* OutViewFormat = nullptr, bool bForceLinearTexture = false)"
  },
  {
    "label": "DestroySurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySurface()"
  },
  {
    "label": "InvalidateMappedMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateMappedMemory()"
  },
  {
    "label": "GetMappedPointer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetMappedPointer()"
  },
  {
    "label": "GetMemorySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemorySize()"
  },
  {
    "label": "GetMipOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMipOffset(uint32 MipIndex, uint32& Offset)"
  },
  {
    "label": "GetMipSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMipSize(uint32 MipIndex, uint32& MipBytes)"
  },
  {
    "label": "GetTiling()",
    "kind": "Method",
    "detail": "Function (} VkImageTiling)",
    "insertText": "GetTiling()"
  },
  {
    "label": "ErrorInvalidViewType()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "ErrorInvalidViewType()"
  },
  {
    "label": "GetFullAspectMask()",
    "kind": "Method",
    "detail": "Function (VkImageAspectFlags)",
    "insertText": "GetFullAspectMask()"
  },
  {
    "label": "IsImageOwner()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsImageOwner()"
  },
  {
    "label": "SupportsSampling()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsSampling()"
  },
  {
    "label": "GetDefaultLayout()",
    "kind": "Method",
    "detail": "Function (} VkImageLayout)",
    "insertText": "GetDefaultLayout()"
  },
  {
    "label": "GetAllocationOffset()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetAllocationOffset()"
  },
  {
    "label": "InternalLockWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalLockWrite(FVulkanCommandListContext& Context, FVulkanTexture* Surface, const VkBufferImageCopy& Region, VulkanRHI::FStagingBuffer* StagingBuffer)"
  },
  {
    "label": "GetCpuReadbackBuffer()",
    "kind": "Method",
    "detail": "Function (const FVulkanCpuReadbackBuffer*)",
    "insertText": "GetCpuReadbackBuffer()"
  },
  {
    "label": "SetInitialImageState()",
    "kind": "Method",
    "detail": "Function (FVulkanDevice* Device ; VkImage Image ; VkImageUsageFlags ImageUsageFlags ; VkFormat StorageFormat ; VkFormat ViewFormat ; VkMemoryPropertyFlags MemProps ; VkMemoryRequirements MemoryRequirements ; FVulkanRHIExternalImageDeleteCallbackInfo ExternalImageDeleteCallbackInfo ; private : void)",
    "insertText": "SetInitialImageState(FVulkanCommandListContext& Context, VkImageLayout InitialLayout, bool bClear, const FClearValueBinding& ClearValueBinding, bool bIsTransientResource)"
  },
  {
    "label": "InternalMoveSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalMoveSurface(FVulkanDevice& InDevice, FVulkanCommandListContext& Context, VulkanRHI::FVulkanAllocation& DestAllocation, VkImageLayout OriginalLayout)"
  },
  {
    "label": "FVulkanQueryPool()",
    "kind": "Method",
    "detail": "Function (VkImageTiling Tiling ; VulkanRHI::FVulkanAllocation Allocation ; VkImageAspectFlags FullAspectMask ; VkImageAspectFlags PartialAspectMask ; FVulkanCpuReadbackBuffer* CpuReadbackBuffer ; VkImageLayout DefaultLayout ; struct FRHICommandSetInitialImageState ; protected : EImageOwnerType ImageOwnerType ; } ; class FVulkanQueryPool : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FVulkanQueryPool(FVulkanDevice* InDevice, FVulkanCommandBufferManager* CommandBufferManager, uint32 InMaxQueries, VkQueryType InQueryType, bool bInShouldAddReset = true)"
  },
  {
    "label": "FVulkanQueryPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanQueryPool()"
  },
  {
    "label": "GetMaxQueries()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMaxQueries()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (AcquiredIndices .)",
    "insertText": "AddZeroed(Align(InMaxQueries, 64) / 64)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (AllocatedQueries .)",
    "insertText": "AddZeroed(InMaxQueries)"
  },
  {
    "label": "AcquireIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AcquireIndex(FVulkanOcclusionQuery* Query)"
  },
  {
    "label": "Mask()",
    "kind": "Method",
    "detail": "Function (const uint32 Index = NumUsedQueries ; const uint32 Word = Index / 6 4 ; const uint32 Bit = Index % 6 4 ; const uint64)",
    "insertText": "Mask(uint64)1 << (uint64)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (const uint64& WordValue = AcquiredIndices [ Word ] ; AcquiredIndices [ Word ] = WordValue | Mask ; + + NumUsedQueries ;)",
    "insertText": "ensure(AllocatedQueries[Index] == nullptr)"
  },
  {
    "label": "ReleaseIndex()",
    "kind": "Method",
    "detail": "Function (AllocatedQueries [ Index ] = Query ; return Index ; } void)",
    "insertText": "ReleaseIndex(uint32 Index)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (const uint64& WordValue = AcquiredIndices [ Word ] ;)",
    "insertText": "ensure((WordValue & Mask) == Mask)"
  },
  {
    "label": "WordValue()",
    "kind": "Method",
    "detail": "Function (AcquiredIndices [ Word ] =)",
    "insertText": "WordValue(~Mask)"
  },
  {
    "label": "EndBatch()",
    "kind": "Method",
    "detail": "Function (AllocatedQueries [ Index ] = nullptr ; } void)",
    "insertText": "EndBatch(FVulkanCmdBuffer* InCmdBuffer)"
  },
  {
    "label": "SetFence()",
    "kind": "Method",
    "detail": "Function (State = EState::RHIT_PostEndBatch ;)",
    "insertText": "SetFence(InCmdBuffer)"
  },
  {
    "label": "CanBeReused()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanBeReused()"
  },
  {
    "label": "TryGetResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetResults(bool bWait)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "Reset(FVulkanCmdBuffer* InCmdBuffer, uint32 InFrameNumber)"
  },
  {
    "label": "IsStalePool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStalePool()"
  },
  {
    "label": "FlushAllocatedQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAllocatedQueries()"
  },
  {
    "label": "InternalTryGetResults()",
    "kind": "Method",
    "detail": "Function (enum EState { Undefined,RHIT_PostBeginBatch,RHIT_PostEndBatch,RT_PostGetResults,} ; EState State = Undefined ; uint32 FreedFrameNumber = UINT32_MAX ; protected : uint32 NumUsedQueries = 0 ; TArray<FVulkanOcclusionQuery*> AllocatedQueries ; TArray<uint64> AcquiredIndices ; bool)",
    "insertText": "InternalTryGetResults(bool bWait)"
  },
  {
    "label": "SetFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFence(FVulkanCmdBuffer* InCmdBuffer)"
  },
  {
    "label": "FVulkanTimingQueryPool()",
    "kind": "Method",
    "detail": "Function (FVulkanCmdBuffer* CmdBuffer = nullptr ; uint64 FenceCounter = UINT64_MAX ; uint32 FrameNumber = UINT32_MAX ; } ; class FVulkanTimingQueryPool : public FVulkanQueryPool { public :)",
    "insertText": "FVulkanTimingQueryPool(FVulkanDevice* InDevice, FVulkanCommandBufferManager* CommandBufferManager, uint32 InBufferSize) : FVulkanQueryPool(InDevice, CommandBufferManager, InBufferSize * 2, VK_QUERY_TYPE_TIMESTAMP, false) , BufferSize(InBufferSize)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (TimestampListHandles .)",
    "insertText": "AddZeroed(InBufferSize * 2)"
  },
  {
    "label": "FVulkanRenderQuery()",
    "kind": "Method",
    "detail": "Function (} uint32 CurrentTimestamp = 0 ; uint32 NumIssuedTimestamps = 0 ; const uint32 BufferSize ; struct FCmdBufferFence { FVulkanCmdBuffer* CmdBuffer ; uint64 FenceCounter ; uint64 FrameCount = UINT64_MAX ; uint32 Attempts = 0 ; } ; TArray<FCmdBufferFence> TimestampListHandles ; VulkanRHI::FStagingBuffer* ResultsBuffer = nullptr ; uint64* MappedPointer = nullptr ; } ; class FVulkanRenderQuery : public FRHIRenderQuery { public :)",
    "insertText": "FVulkanRenderQuery(ERenderQueryType InType) : QueryType(InType)"
  },
  {
    "label": "FVulkanRenderQuery()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanRenderQuery()"
  },
  {
    "label": "FVulkanOcclusionQuery()",
    "kind": "Method",
    "detail": "Function (} const ERenderQueryType QueryType ; uint64 Result = 0 ; uint32 IndexInPool = UINT32_MAX ; } ; class FVulkanOcclusionQuery : public FVulkanRenderQuery { public :)",
    "insertText": "FVulkanOcclusionQuery()"
  },
  {
    "label": "ReleaseFromPool()",
    "kind": "Method",
    "detail": "Function (enum class EState { Undefined,RHI_PostBegin,RHI_PostEnd,RT_GotResults,FlushedFromPoolHadResults,} ; FVulkanOcclusionQueryPool* Pool = nullptr ; void)",
    "insertText": "ReleaseFromPool()"
  },
  {
    "label": "FVulkanTimingQuery()",
    "kind": "Method",
    "detail": "Function (EState State = EState::Undefined ; } ; class FVulkanTimingQuery : public FVulkanRenderQuery { public :)",
    "insertText": "FVulkanTimingQuery()"
  },
  {
    "label": "FVulkanResourceMultiBuffer()",
    "kind": "Method",
    "detail": "Function (FVulkanTimingQueryPool* Pool = nullptr ; } ; class FVulkanResourceMultiBuffer : public FRHIBuffer,public VulkanRHI::FDeviceChild,public FVulkanViewableResource { public :)",
    "insertText": "FVulkanResourceMultiBuffer(FVulkanDevice* InDevice, FRHIBufferDesc const& InBufferDesc, FRHIResourceCreateInfo& CreateInfo, class FRHICommandListBase* InRHICmdList = nullptr, const FRHITransientHeapAllocation* InTransientHeapAllocation = nullptr)"
  },
  {
    "label": "FVulkanResourceMultiBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanResourceMultiBuffer()"
  },
  {
    "label": "GetCurrentAllocation()",
    "kind": "Method",
    "detail": "Function (const VulkanRHI::FVulkanAllocation&)",
    "insertText": "GetCurrentAllocation()"
  },
  {
    "label": "IsVolatile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVolatile()"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetOffset()"
  },
  {
    "label": "GetCurrentSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetCurrentSize()"
  },
  {
    "label": "GetDeviceAddress()",
    "kind": "Method",
    "detail": "Function (} VkDeviceAddress)",
    "insertText": "GetDeviceAddress()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Lock(FRHICommandListBase& RHICmdList, EResourceLockMode LockMode, uint32 Size, uint32 Offset)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeOwnership(FVulkanResourceMultiBuffer& Other)"
  },
  {
    "label": "ReleaseOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseOwnership()"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(TEXT(\"FVulkanResourceMultiBuffer\"), FName(), this, 0, GetCurrentSize(), 1, 1, VK_FORMAT_UNDEFINED)"
  },
  {
    "label": "UEToVKBufferUsageFlags()",
    "kind": "Method",
    "detail": "Function (} VkBufferUsageFlags)",
    "insertText": "UEToVKBufferUsageFlags(FVulkanDevice* InDevice, EBufferUsageFlags InUEUsage, bool bZeroSize)"
  },
  {
    "label": "AllocateMemory()",
    "kind": "Method",
    "detail": "Function (struct FBufferAlloc { VulkanRHI::FVulkanAllocation Alloc ; void* HostPtr = nullptr ; VkDeviceAddress DeviceAddress = 0 ; } ; protected : void)",
    "insertText": "AllocateMemory(FBufferAlloc& OutAlloc)"
  },
  {
    "label": "FVulkanUniformBuffer()",
    "kind": "Method",
    "detail": "Function (VkBufferUsageFlags BufferUsageFlags ; enum class ELockStatus : uint8 { Unlocked,Locked,PersistentMapping,} LockStatus = ELockStatus::Unlocked ; FBufferAlloc CurrentBufferAlloc ; uint32 LockCounter = 0 ; class FVulkanCommandListContext ; struct FRHICommandMultiBufferUnlock ; } ; class FVulkanUniformBuffer : public FRHIUniformBuffer { public :)",
    "insertText": "FVulkanUniformBuffer(FVulkanDevice& Device, const FRHIUniformBufferLayout* InLayout, const void* Contents, EUniformBufferUsage InUsage, EUniformBufferValidation Validation)"
  },
  {
    "label": "FVulkanUniformBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanUniformBuffer()"
  },
  {
    "label": "GetResourceTable()",
    "kind": "Method",
    "detail": "Function (const TArray<TRefCountPtr<FRHIResource>>&)",
    "insertText": "GetResourceTable()"
  },
  {
    "label": "UpdateResourceTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResourceTable(FRHIResource** Resources, int32 ResourceNum)"
  },
  {
    "label": "GetBufferHandle()",
    "kind": "Method",
    "detail": "Function (VkBuffer)",
    "insertText": "GetBufferHandle()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (NewAlloc .)",
    "insertText": "Swap(Allocation)"
  },
  {
    "label": "IsUniformView()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUniformView()"
  },
  {
    "label": "SetupUniformBufferView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupUniformBufferView()"
  },
  {
    "label": "FVulkanUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (public : FVulkanDevice* Device ; VulkanRHI::FVulkanAllocation Allocation ; EUniformBufferUsage Usage ; FRHIDescriptorHandle BindlessHandle ; VkDeviceAddress CachedDeviceAddress = 0 ; FRHIShaderResourceView* UniformViewSRV ; } ; class FVulkanUnorderedAccessView final : public FRHIUnorderedAccessView,public FVulkanLinkedView { public :)",
    "insertText": "FVulkanUnorderedAccessView(FRHICommandListBase& RHICmdList, FVulkanDevice& InDevice, FRHIViewableResource* InResource, FRHIViewDesc const& InViewDesc)"
  },
  {
    "label": "GetBaseResource()",
    "kind": "Method",
    "detail": "Function (FVulkanViewableResource*)",
    "insertText": "GetBaseResource()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear(TRHICommandList_RecursiveHazardous<FVulkanCommandListContext>& RHICmdList, const void* ClearValue, bool bFloat)"
  },
  {
    "label": "FVulkanShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} ; class FVulkanShaderResourceView final : public FRHIShaderResourceView,public FVulkanLinkedView { public :)",
    "insertText": "FVulkanShaderResourceView(FRHICommandListBase& RHICmdList, FVulkanDevice& InDevice, FRHIViewableResource* InResource, FRHIViewDesc const& InViewDesc)"
  },
  {
    "label": "FVulkanVertexInputStateInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class FVulkanVertexInputStateInfo { public :)",
    "insertText": "FVulkanVertexInputStateInfo()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Generate(FVulkanVertexDeclaration* VertexDeclaration, uint32 VertexHeaderInOutAttributeMask)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetHash()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (protected : VkPipelineVertexInputStateCreateInfo Info ; uint32 Hash ; uint32 BindingsNum ; uint32 BindingsMask ; TMap<uint32,uint32> BindingToStream ; TMap<uint32,uint32> StreamToBinding ; VkVertexInputBindingDescription Bindings [ MaxVertexElementCount ] ; uint32 AttributesNum ; VkVertexInputAttributeDescription Attributes [ MaxVertexElementCount ] ; class FVulkanPendingGfxState ; class FVulkanPipelineStateCacheManager ; } ; class FPackedUniformBuffers { public : typedef TArray<uint8> FPackedBuffer ; void)",
    "insertText": "Init(const FVulkanShaderHeader& InCodeHeader, uint32& OutPackedUniformBufferStagingMask)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (PackedUniformBuffers .)",
    "insertText": "AddUninitialized(InCodeHeader.PackedGlobalsSize)"
  },
  {
    "label": "SetPackedGlobalParameter()",
    "kind": "Method",
    "detail": "Function (OutPackedUniformBufferStagingMask = 1 ; } else { OutPackedUniformBufferStagingMask = 0 ; } } void)",
    "insertText": "SetPackedGlobalParameter(uint32 ByteOffset, uint32 NumBytes, const void* RESTRICT NewValue, uint32& InOutPackedUniformBufferStagingDirty)"
  },
  {
    "label": "RawDst()",
    "kind": "Method",
    "detail": "Function (uint32* RESTRICT)",
    "insertText": "RawDst(uint32*)(PackedUniformBuffers.GetData() + ByteOffset)"
  },
  {
    "label": "RawSrc()",
    "kind": "Method",
    "detail": "Function (uint32* RESTRICT)",
    "insertText": "RawSrc(uint32*)"
  },
  {
    "label": "RawSrc()",
    "kind": "Method",
    "detail": "Function (uint32* RESTRICT RawSrcEnd =)",
    "insertText": "RawSrc(NumBytes >> 2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool bChanged = false ;)",
    "insertText": "while(RawSrc != RawSrcEnd)"
  },
  {
    "label": "CopyAndReturnNotEqual()",
    "kind": "Method",
    "detail": "Function (bChanged | =)",
    "insertText": "CopyAndReturnNotEqual(*RawDst++, *RawSrc++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bChanged)"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (InOutPackedUniformBufferStagingDirty = 1 ; } } const FPackedBuffer&)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "FVulkanStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVulkanStagingBuffer()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Lock(uint32 Offset, uint32 NumBytes)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "FVulkanGPUFence()",
    "kind": "Method",
    "detail": "Function (private : VulkanRHI::FStagingBuffer* StagingBuffer = nullptr ; uint32 QueuedNumBytes = 0 ; FVulkanDevice* Device ; } ; class FVulkanGPUFence : public FRHIGPUFence { public :)",
    "insertText": "FVulkanGPUFence(FName InName) : FRHIGPUFence(InName)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Poll()"
  },
  {
    "label": "GetCmdBuffer()",
    "kind": "Method",
    "detail": "Function (FVulkanCmdBuffer*)",
    "insertText": "GetCmdBuffer()"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} template<TRHIType> const TVulkanResourceTraits<TRHIType>::TConcreteType*)",
    "insertText": "ResourceCast(const TRHIType* Resource)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (} FVulkanTexture*)",
    "insertText": "ResourceCast(FRHITexture* Texture)"
  }
]