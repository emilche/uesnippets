[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "halfFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "halfFunction"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "halfFunction()",
    "kind": "Method",
    "detail": "Function (# ifndef _HALF_FUNCTION_H_ # define _HALF_FUNCTION_H_ # include \" half . h \" # include \" ImathConfig . h \" # ifndef IMATH_HAVE_LARGE_STACK # include<string . h> # else # endif # include<float . h> template<class T> class halfFunction { public : template<class Function>)",
    "insertText": "halfFunction(Function f, half domainMin = -HALF_MAX, half domainMax = HALF_MAX, T defaultValue = 0, T posInfValue = 0, T negInfValue = 0, T nanValue = 0)"
  },
  {
    "label": "halfFunction()",
    "kind": "Method",
    "detail": "Function (# ifndef IMATH_HAVE_LARGE_STACK ~)",
    "insertText": "halfFunction()"
  },
  {
    "label": "halfFunction()",
    "kind": "Method",
    "detail": "Function (delete [ ] _lut ; })",
    "insertText": "halfFunction(const halfFunction&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (halfFunction&)",
    "insertText": "operator(const halfFunction&)"
  },
  {
    "label": "halfFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "halfFunction(halfFunction&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (halfFunction&)",
    "insertText": "operator(halfFunction&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif T)",
    "insertText": "operator() (half x)"
  },
  {
    "label": "halfFunction()",
    "kind": "Method",
    "detail": "Function (private : # ifdef IMATH_HAVE_LARGE_STACK T _lut [ 1<<1 6 ] ; # else T* _lut ; # endif } ; template<class T> template<class Function> halfFunction<T)",
    "insertText": "halfFunction(Function f, half domainMin, half domainMax, T defaultValue, T posInfValue, T negInfValue, T nanValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# ifndef IMATH_HAVE_LARGE_STACK _lut = new T [ 1<<1 6 ] ; # endif)",
    "insertText": "for(int i = 0; i < (1 << 16); i++)"
  },
  {
    "label": "setBits()",
    "kind": "Method",
    "detail": "Function (half x ; x .)",
    "insertText": "setBits(i)"
  }
]