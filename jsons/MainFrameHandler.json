[
  {
    "label": "FMainFrameHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMainFrameHandler"
  },
  {
    "label": "StaticGetApplicationTitle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleManager . h \" # include \" Widgets / SWindow . h \" # include \" UnrealEdMisc . h \" # include \" Misc / App . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Framework / Docking / TabManager . h \" # include \" Framework / Docking / LayoutService . h \" # include \" EngineGlobals . h \" # include \" InterchangeManager . h \" # include \" Interfaces / IMainFrameModule . h \" # include \" Editor / UnrealEdEngine . h \" # include \" EditorModeManager . h \" # include \" EditorModes . h \" # include \" FileHelpers . h \" # include \" UnrealEdGlobals . h \" # include \" LevelEditor . h \" # include \" IAssetViewport . h \" # include \" MainFrameLog . h \" # include \" Editor / EditorPerProjectUserSettings . h \" # include \" Misc / MessageDialog . h \" # include \" Subsystems / AssetEditorSubsystem . h \" # define LOCTEXT_NAMESPACE \" MainFrameHandler \" const FText)",
    "insertText": "StaticGetApplicationTitle(const bool bIncludeGameName)"
  },
  {
    "label": "ShutDownEditor()",
    "kind": "Method",
    "detail": "Function (class FMainFrameHandler : public TSharedFromThis<FMainFrameHandler> { public : void)",
    "insertText": "ShutDownEditor(TSharedRef<SDockTab> TabBeingClosed)"
  },
  {
    "label": "ShutDownEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutDownEditor()"
  },
  {
    "label": "CanCloseTab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCloseTab()"
  },
  {
    "label": "CanCloseEditor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCloseEditor()"
  },
  {
    "label": "IMainFrameModule()",
    "kind": "Method",
    "detail": "Function (IMainFrameModule& MainFrameModule = FModuleManager::LoadModuleChecked<)",
    "insertText": "IMainFrameModule(TEXT(\"MainFrame\"))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().LeaveDebuggingMode()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (GEngine -> DeferredCommands .)",
    "insertText": "AddUnique(TEXT(\"CLOSE_SLATE_MAINFRAME\"))"
  },
  {
    "label": "GLevelEditorModeTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GLevelEditorModeTools().DeactivateMode(FBuiltinEditorModes::EM_Level)"
  },
  {
    "label": "GLevelEditorModeTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GLevelEditorModeTools().DeactivateMode(FBuiltinEditorModes::EM_StreamingLevel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bOkToExit = false ; } { TSet<TSharedRef<SDockTab>> TabsToIgnore ;)",
    "insertText": "if(MainTabPtr.IsValid())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TabsToIgnore .)",
    "insertText": "Add(MainTabPtr.Pin().ToSharedRef())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} bOkToExit = bOkToExit&&)",
    "insertText": "Get()->CanCloseManager(TabsToIgnore)"
  },
  {
    "label": "ExecuteCanCloseEditorDelegates()",
    "kind": "Method",
    "detail": "Function (} bOkToExit = bOkToExit&& MainFrameModule .)",
    "insertText": "ExecuteCanCloseEditorDelegates()"
  },
  {
    "label": "SaveDirtyPackages()",
    "kind": "Method",
    "detail": "Function (bool bHadPackagesToSave = false ; { const bool bPromptUserToSave = true ; const bool bSaveMapPackages = true ; const bool bSaveContentPackages = true ; const bool bFastSave = false ; const bool bNotifyNoPackagesSaved = false ; const bool bCanBeDeclined = true ; bOkToExit = bOkToExit&&)",
    "insertText": "SaveDirtyPackages(bPromptUserToSave, bSaveMapPackages, bSaveContentPackages, bFastSave, bNotifyNoPackagesSaved, bCanBeDeclined, &bHadPackagesToSave)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const bool bPromptedForExit = bHadPackagesToSave | | !)",
    "insertText": "Get().GetPendingProjectName().IsEmpty()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ClearPendingProjectName()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().AllowSavingLayoutOnClose(true)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ForceDeletePreferences(false)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ClearConfigRestoreFilenames()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bOkToExit && !bPromptedForExit && GetDefault<UEditorPerProjectUserSettings>()->bConfirmEditorClose)"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (const EAppReturnType::Type Response =)",
    "insertText": "Open(EAppMsgCategory::Info, EAppMsgType::YesNo, LOCTEXT(\"ConfirmClose\", \"Are you sure you want to close the Unreal Editor?\"), LOCTEXT(\"ConfirmCloseTitle\", \"Close Editor\"))"
  },
  {
    "label": "bOkToExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bOkToExit(Response == EAppReturnType::Yes)"
  },
  {
    "label": "CloseRootWindowOverride()",
    "kind": "Method",
    "detail": "Function (} } return bOkToExit ; } } void)",
    "insertText": "CloseRootWindowOverride(const TSharedRef<SWindow>& WindowBeingClosed)"
  },
  {
    "label": "OnMainFrameGenerated()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnMainFrameGenerated(const TSharedPtr<SDockTab>& MainTab, const TSharedRef<SWindow>& InRootWindow)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FGlobalTabmanager> GlobalTabManager =)",
    "insertText": "Get()"
  },
  {
    "label": "SetMainTab()",
    "kind": "Method",
    "detail": "Function (GlobalTabManager ->)",
    "insertText": "SetMainTab(MainTab.ToSharedRef())"
  },
  {
    "label": "SetOnPersistLayout()",
    "kind": "Method",
    "detail": "Function (} GlobalTabManager ->)",
    "insertText": "SetOnPersistLayout(FTabManager::FOnPersistLayout::CreateRaw(this, &FMainFrameHandler::HandleTabManagerPersistLayout))"
  },
  {
    "label": "SetApplicationTitle()",
    "kind": "Method",
    "detail": "Function (const bool bIncludeGameName = true ; GlobalTabManager ->)",
    "insertText": "SetApplicationTitle(MainFrameModule.GetApplicationTitle( bIncludeGameName ))"
  },
  {
    "label": "SetRequestDestroyWindowOverride()",
    "kind": "Method",
    "detail": "Function (InRootWindow ->)",
    "insertText": "SetRequestDestroyWindowOverride(FRequestDestroyWindowOverride::CreateRaw( this, &FMainFrameHandler::CloseRootWindowOverride ))"
  },
  {
    "label": "EnableTabClosedDelegate()",
    "kind": "Method",
    "detail": "Function (MainTabPtr = MainTab ; RootWindowPtr = InRootWindow ;)",
    "insertText": "EnableTabClosedDelegate()"
  },
  {
    "label": "ShowMainFrameWindow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowMainFrameWindow(TSharedRef<SWindow> Window, const bool bStartImmersive, const bool bStartPIE)"
  },
  {
    "label": "GetParentWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow>)",
    "insertText": "GetParentWindow()"
  },
  {
    "label": "SetMainTab()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMainTab(const TSharedRef<SDockTab>& MainTab)"
  },
  {
    "label": "DisableTabClosedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableTabClosedDelegate()"
  },
  {
    "label": "HandleTabManagerPersistLayout()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleTabManagerPersistLayout(const TSharedRef<FTabManager::FLayout>& LayoutToSave)"
  },
  {
    "label": "SaveToConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveToConfig(GEditorLayoutIni, LayoutToSave)"
  }
]