[
  {
    "label": "RefCountedString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RefCountedString"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "ProcessMemoryDump",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessMemoryDump"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ObjectType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ObjectType"
  },
  {
    "label": "ObjectCountAndSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ObjectCountAndSize"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(ObjectType object_type,\n           size_t allocated_size_in_bytes,\n           size_t resident_size_in_bytes)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(ObjectType object_type, size_t allocated_size_in_bytes)"
  },
  {
    "label": "AddString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddString(const std::string& str)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddValue(const Value& value)"
  },
  {
    "label": "AddRefCountedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRefCountedString(const RefCountedString& str)"
  },
  {
    "label": "AddSelf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelf()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const TraceEventMemoryOverhead& other)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternal(ObjectType object_type,\n                   size_t count,\n                   size_t allocated_size_in_bytes,\n                   size_t resident_size_in_bytes)"
  }
]