[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SctpTransportInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SctpTransportInternal"
  },
  {
    "label": "SctpTransportInternal()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_SCTP_SCTP_TRANSPORT_INTERNAL_H_ # define MEDIA_SCTP_SCTP_TRANSPORT_INTERNAL_H_ # include<memory> # include<string> # include<vector> # include \" api / transport / data_channel_transport_interface . h \" # include \" media / base / media_channel . h \" # include \" p2p / base / packet_transport_internal . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / thread . h \" namespace cricket { int kSctpSendBufferSize = 2 5 6* 1 0 2 4 ; uint16_t kMaxSctpStreams = 1 0 2 4 ; uint16_t kMaxSctpSid = kMaxSctpStreams - 1 ; uint16_t kMinSctpSid = 0 ; const int kSctpDefaultPort = 5 0 0 0 ; enum class SctpErrorCauseCode : uint16_t { kInvalidStreamIdentifier = 1,kMissingMandatoryParameter = 2,kStaleCookieError = 3,kOutOfResource = 4,kUnresolvableAddress = 5,kUnrecognizedChunkType = 6,kInvalidMandatoryParameter = 7,kUnrecognizedParameters = 8,kNoUserData = 9,kCookieReceivedWhileShuttingDown = 1 0,kRestartWithNewAddresses = 1 1,kUserInitiatedAbort = 1 2,kProtocolViolation = 1 3,} ; class SctpTransportInternal { public : ~)",
    "insertText": "SctpTransportInternal()"
  },
  {
    "label": "SetOnConnectedCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOnConnectedCallback(std::function<void()> callback)"
  },
  {
    "label": "SetDataChannelSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataChannelSink(webrtc::DataChannelSink* sink)"
  },
  {
    "label": "SetDtlsTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDtlsTransport(rtc::PacketTransportInternal* transport)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(int local_sctp_port, int remote_sctp_port, int max_message_size)"
  },
  {
    "label": "OpenStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenStream(int sid)"
  },
  {
    "label": "ResetStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetStream(int sid)"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendData(int sid, const webrtc::SendDataParams& params, const rtc::CopyOnWriteBuffer& payload, SendDataResult* result = nullptr)"
  },
  {
    "label": "ReadyToSendData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToSendData()"
  },
  {
    "label": "max_message_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "max_message_size()"
  },
  {
    "label": "max_outbound_streams()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "max_outbound_streams()"
  },
  {
    "label": "max_inbound_streams()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "max_inbound_streams()"
  },
  {
    "label": "set_debug_name_for_testing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_debug_name_for_testing(const char* debug_name)"
  }
]