[
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FKeyPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyPosition"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" CurveEditorTypes . h \" # include \" Curves / RichCurve . h \" # include \" Math / TransformCalculus2D . h \" # include \" CurveDataAbstraction . generated . h \" struct FSlateBrush ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FKeyPosition() : InputValue(0.0), OutputValue(0.0)"
  },
  {
    "label": "FKeyPosition()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKeyPosition(double Input, double Output) : InputValue(Input), OutputValue(Output)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (} FKeyPosition)",
    "insertText": "Transform(const FTransform2d& InTransform)"
  },
  {
    "label": "Point()",
    "kind": "Method",
    "detail": "Function (FVector2d)",
    "insertText": "Point(InputValue, OutputValue)"
  },
  {
    "label": "TransformPoint()",
    "kind": "Method",
    "detail": "Function (Point = InTransform .)",
    "insertText": "TransformPoint(Point)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FKeyAttributes()"
  },
  {
    "label": "HasArriveTangent()",
    "kind": "Method",
    "detail": "Function (bHasArriveTangent = 0 ; bHasLeaveTangent = 0 ; bHasInterpMode = 0 ; bHasTangentMode = 0 ; bHasTangentWeightMode = 0 ; bHasArriveTangentWeight = 0 ; bHasLeaveTangentWeight = 0 ; ArriveTangent = 0 . 0 f ; LeaveTangent = 0 . 0 f ; InterpMode = RCIM_Linear ; TangentMode = RCTM_Auto ; TangentWeightMode = RCTWM_WeightedNone ; ArriveTangentWeight = 0 . 0 f ; LeaveTangentWeight = 0 . 0 f ; } bool)",
    "insertText": "HasArriveTangent()"
  },
  {
    "label": "SetLeaveTangent()",
    "kind": "Method",
    "detail": "Function (bHasArriveTangent = 1 ; ArriveTangent = InArriveTangent ; return* this ; } FKeyAttributes&)",
    "insertText": "SetLeaveTangent(float InLeaveTangent)"
  },
  {
    "label": "SetInterpMode()",
    "kind": "Method",
    "detail": "Function (bHasLeaveTangent = 1 ; LeaveTangent = InLeaveTangent ; return* this ; } FKeyAttributes&)",
    "insertText": "SetInterpMode(ERichCurveInterpMode InInterpMode)"
  },
  {
    "label": "SetTangentMode()",
    "kind": "Method",
    "detail": "Function (bHasInterpMode = 1 ; InterpMode = InInterpMode ; return* this ; } FKeyAttributes&)",
    "insertText": "SetTangentMode(ERichCurveTangentMode InTangentMode)"
  },
  {
    "label": "SetTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (bHasTangentMode = 1 ; TangentMode = InTangentMode ; return* this ; } FKeyAttributes&)",
    "insertText": "SetTangentWeightMode(ERichCurveTangentWeightMode InTangentWeightMode)"
  },
  {
    "label": "SetArriveTangentWeight()",
    "kind": "Method",
    "detail": "Function (bHasTangentWeightMode = 1 ; TangentWeightMode = InTangentWeightMode ; return* this ; } FKeyAttributes&)",
    "insertText": "SetArriveTangentWeight(float InArriveTangentWeight)"
  },
  {
    "label": "SetLeaveTangentWeight()",
    "kind": "Method",
    "detail": "Function (bHasArriveTangentWeight = 1 ; ArriveTangentWeight = InArriveTangentWeight ; return* this ; } FKeyAttributes&)",
    "insertText": "SetLeaveTangentWeight(float InLeaveTangentWeight)"
  },
  {
    "label": "UnsetArriveTangent()",
    "kind": "Method",
    "detail": "Function (bHasLeaveTangentWeight = 1 ; LeaveTangentWeight = InLeaveTangentWeight ; return* this ; } void)",
    "insertText": "UnsetArriveTangent()"
  },
  {
    "label": "UnsetLeaveTangent()",
    "kind": "Method",
    "detail": "Function (bHasArriveTangent = 0 ; } void)",
    "insertText": "UnsetLeaveTangent()"
  },
  {
    "label": "UnsetInterpMode()",
    "kind": "Method",
    "detail": "Function (bHasLeaveTangent = 0 ; } void)",
    "insertText": "UnsetInterpMode()"
  },
  {
    "label": "UnsetTangentMode()",
    "kind": "Method",
    "detail": "Function (bHasInterpMode = 0 ; } void)",
    "insertText": "UnsetTangentMode()"
  },
  {
    "label": "UnsetTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (bHasTangentMode = 0 ; } void)",
    "insertText": "UnsetTangentWeightMode()"
  },
  {
    "label": "UnsetArriveTangentWeight()",
    "kind": "Method",
    "detail": "Function (bHasTangentWeightMode = 0 ; } void)",
    "insertText": "UnsetArriveTangentWeight()"
  },
  {
    "label": "UnsetLeaveTangentWeight()",
    "kind": "Method",
    "detail": "Function (bHasArriveTangentWeight = 0 ; } void)",
    "insertText": "UnsetLeaveTangentWeight()"
  },
  {
    "label": "MaskCommon()",
    "kind": "Method",
    "detail": "Function (bHasLeaveTangentWeight = 0 ; } FKeyAttributes)",
    "insertText": "MaskCommon(const FKeyAttributes& A, const FKeyAttributes& B)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FKeyAttributes NewAttributes ;)",
    "insertText": "if(A.bHasArriveTangent && B.bHasArriveTangent && A.ArriveTangent == B.ArriveTangent)"
  },
  {
    "label": "SetArriveTangent()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetArriveTangent(A.ArriveTangent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(A.bHasLeaveTangent && B.bHasLeaveTangent && A.LeaveTangent == B.LeaveTangent)"
  },
  {
    "label": "SetLeaveTangent()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetLeaveTangent(A.LeaveTangent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(A.bHasInterpMode && B.bHasInterpMode && A.InterpMode == B.InterpMode)"
  },
  {
    "label": "SetInterpMode()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetInterpMode(A.InterpMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(A.bHasTangentMode && B.bHasTangentMode && A.TangentMode == B.TangentMode)"
  },
  {
    "label": "SetTangentMode()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetTangentMode(A.TangentMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(A.bHasTangentWeightMode && B.bHasTangentWeightMode && A.TangentWeightMode == B.TangentWeightMode)"
  },
  {
    "label": "SetTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetTangentWeightMode(A.TangentWeightMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(A.bHasArriveTangentWeight && B.bHasArriveTangentWeight && A.ArriveTangentWeight == B.ArriveTangentWeight)"
  },
  {
    "label": "SetArriveTangentWeight()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetArriveTangentWeight(A.ArriveTangentWeight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(A.bHasLeaveTangentWeight && B.bHasLeaveTangentWeight && A.LeaveTangentWeight == B.LeaveTangentWeight)"
  },
  {
    "label": "SetLeaveTangentWeight()",
    "kind": "Method",
    "detail": "Function (NewAttributes .)",
    "insertText": "SetLeaveTangentWeight(A.LeaveTangentWeight)"
  }
]