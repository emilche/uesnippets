[
  {
    "label": "EGL_DEFAULT_DISPLAY()",
    "kind": "Method",
    "detail": "Function (# ifndef __egl_h_ # define __egl_h_ # include<EGL / eglplatform . h> # ifdef __cplusplus \" C \" { # endif typedef unsigned int EGLBoolean ; typedef unsigned int EGLenum ; typedef void* EGLConfig ; typedef void* EGLContext ; typedef void* EGLDisplay ; typedef void* EGLSurface ; typedef void* EGLClientBuffer ; # define EGL_VERSION_1_0 1 # define EGL_VERSION_1_1 1 # define EGL_VERSION_1_2 1 # define EGL_VERSION_1_3 1 # define EGL_VERSION_1_4 1 # define EGL_FALSE 0 # define EGL_TRUE 1 # define)",
    "insertText": "EGL_DEFAULT_DISPLAY((EGLNativeDisplayType)0) #define EGL_NO_CONTEXT ((EGLContext)0) #define EGL_NO_DISPLAY ((EGLDisplay)0) #define EGL_NO_SURFACE ((EGLSurface)0) #define EGL_DONT_CARE ((EGLint)-1) #define EGL_SUCCESS 0x3000 #define EGL_NOT_INITIALIZED 0x3001 #define EGL_BAD_ACCESS 0x3002 #define EGL_BAD_ALLOC 0x3003 #define EGL_BAD_ATTRIBUTE 0x3004 #define EGL_BAD_CONFIG 0x3005 #define EGL_BAD_CONTEXT 0x3006 #define EGL_BAD_CURRENT_SURFACE 0x3007 #define EGL_BAD_DISPLAY 0x3008 #define EGL_BAD_MATCH 0x3009 #define EGL_BAD_NATIVE_PIXMAP 0x300A #define EGL_BAD_NATIVE_WINDOW 0x300B #define EGL_BAD_PARAMETER 0x300C #define EGL_BAD_SURFACE 0x300D #define EGL_CONTEXT_LOST 0x300E #define EGL_BUFFER_SIZE 0x3020 #define EGL_ALPHA_SIZE 0x3021 #define EGL_BLUE_SIZE 0x3022 #define EGL_GREEN_SIZE 0x3023 #define EGL_RED_SIZE 0x3024 #define EGL_DEPTH_SIZE 0x3025 #define EGL_STENCIL_SIZE 0x3026 #define EGL_CONFIG_CAVEAT 0x3027 #define EGL_CONFIG_ID 0x3028 #define EGL_LEVEL 0x3029 #define EGL_MAX_PBUFFER_HEIGHT 0x302A #define EGL_MAX_PBUFFER_PIXELS 0x302B #define EGL_MAX_PBUFFER_WIDTH 0x302C #define EGL_NATIVE_RENDERABLE 0x302D #define EGL_NATIVE_VISUAL_ID 0x302E #define EGL_NATIVE_VISUAL_TYPE 0x302F #define EGL_SAMPLES 0x3031 #define EGL_SAMPLE_BUFFERS 0x3032 #define EGL_SURFACE_TYPE 0x3033 #define EGL_TRANSPARENT_TYPE 0x3034 #define EGL_TRANSPARENT_BLUE_VALUE 0x3035 #define EGL_TRANSPARENT_GREEN_VALUE 0x3036 #define EGL_TRANSPARENT_RED_VALUE 0x3037 #define EGL_NONE 0x3038 #define EGL_BIND_TO_TEXTURE_RGB 0x3039 #define EGL_BIND_TO_TEXTURE_RGBA 0x303A #define EGL_MIN_SWAP_INTERVAL 0x303B #define EGL_MAX_SWAP_INTERVAL 0x303C #define EGL_LUMINANCE_SIZE 0x303D #define EGL_ALPHA_MASK_SIZE 0x303E #define EGL_COLOR_BUFFER_TYPE 0x303F #define EGL_RENDERABLE_TYPE 0x3040 #define EGL_MATCH_NATIVE_PIXMAP 0x3041 #define EGL_CONFORMANT 0x3042 #define EGL_SLOW_CONFIG 0x3050 #define EGL_NON_CONFORMANT_CONFIG 0x3051 #define EGL_TRANSPARENT_RGB 0x3052 #define EGL_RGB_BUFFER 0x308E #define EGL_LUMINANCE_BUFFER 0x308F #define EGL_NO_TEXTURE 0x305C #define EGL_TEXTURE_RGB 0x305D #define EGL_TEXTURE_RGBA 0x305E #define EGL_TEXTURE_2D 0x305F #define EGL_PBUFFER_BIT 0x0001 #define EGL_PIXMAP_BIT 0x0002 #define EGL_WINDOW_BIT 0x0004 #define EGL_VG_COLORSPACE_LINEAR_BIT 0x0020 #define EGL_VG_ALPHA_FORMAT_PRE_BIT 0x0040 #define EGL_MULTISAMPLE_RESOLVE_BOX_BIT 0x0200 #define EGL_SWAP_BEHAVIOR_PRESERVED_BIT 0x0400 #define EGL_OPENGL_ES_BIT 0x0001 #define EGL_OPENVG_BIT 0x0002 #define EGL_OPENGL_ES2_BIT 0x0004 #define EGL_OPENGL_BIT 0x0008 #define EGL_VENDOR 0x3053 #define EGL_VERSION 0x3054 #define EGL_EXTENSIONS 0x3055 #define EGL_CLIENT_APIS 0x308D #define EGL_HEIGHT 0x3056 #define EGL_WIDTH 0x3057 #define EGL_LARGEST_PBUFFER 0x3058 #define EGL_TEXTURE_FORMAT 0x3080 #define EGL_TEXTURE_TARGET 0x3081 #define EGL_MIPMAP_TEXTURE 0x3082 #define EGL_MIPMAP_LEVEL 0x3083 #define EGL_RENDER_BUFFER 0x3086 #define EGL_VG_COLORSPACE 0x3087 #define EGL_VG_ALPHA_FORMAT 0x3088 #define EGL_HORIZONTAL_RESOLUTION 0x3090 #define EGL_VERTICAL_RESOLUTION 0x3091 #define EGL_PIXEL_ASPECT_RATIO 0x3092 #define EGL_SWAP_BEHAVIOR 0x3093 #define EGL_MULTISAMPLE_RESOLVE 0x3099 #define EGL_BACK_BUFFER 0x3084 #define EGL_SINGLE_BUFFER 0x3085 #define EGL_VG_COLORSPACE_sRGB 0x3089 #define EGL_VG_COLORSPACE_LINEAR 0x308A #define EGL_VG_ALPHA_FORMAT_NONPRE 0x308B #define EGL_VG_ALPHA_FORMAT_PRE 0x308C #define EGL_DISPLAY_SCALING 10000 #define EGL_UNKNOWN ((EGLint)-1) #define EGL_BUFFER_PRESERVED 0x3094 #define EGL_BUFFER_DESTROYED 0x3095 #define EGL_OPENVG_IMAGE 0x3096 #define EGL_CONTEXT_CLIENT_TYPE 0x3097 #define EGL_CONTEXT_CLIENT_VERSION 0x3098 #define EGL_MULTISAMPLE_RESOLVE_DEFAULT 0x309A #define EGL_MULTISAMPLE_RESOLVE_BOX 0x309B #define EGL_OPENGL_ES_API 0x30A0 #define EGL_OPENVG_API 0x30A1 #define EGL_OPENGL_API 0x30A2 #define EGL_DRAW 0x3059 #define EGL_READ 0x305A #define EGL_CORE_NATIVE_ENGINE 0x305B #define EGL_COLORSPACE EGL_VG_COLORSPACE #define EGL_ALPHA_FORMAT EGL_VG_ALPHA_FORMAT #define EGL_COLORSPACE_sRGB EGL_VG_COLORSPACE_sRGB #define EGL_COLORSPACE_LINEAR EGL_VG_COLORSPACE_LINEAR #define EGL_ALPHA_FORMAT_NONPRE EGL_VG_ALPHA_FORMAT_NONPRE #define EGL_ALPHA_FORMAT_PRE EGL_VG_ALPHA_FORMAT_PRE EGLAPI EGLint EGLAPIENTRY eglGetError(void)"
  },
  {
    "label": "eglGetDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLDisplay EGLAPIENTRY)",
    "insertText": "eglGetDisplay(EGLNativeDisplayType display_id)"
  },
  {
    "label": "eglInitialize()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)"
  },
  {
    "label": "eglTerminate()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglTerminate(EGLDisplay dpy)"
  },
  {
    "label": "eglQueryString()",
    "kind": "Method",
    "detail": "Function (EGLAPI const char* EGLAPIENTRY)",
    "insertText": "eglQueryString(EGLDisplay dpy, EGLint name)"
  },
  {
    "label": "eglGetConfigs()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetConfigs(EGLDisplay dpy, EGLConfig *configs, EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "eglChooseConfig()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list, EGLConfig *configs, EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "eglGetConfigAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglCreateWindowSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePbufferSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePixmapSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroySurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroySurface(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglQuerySurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQuerySurface(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglBindAPI()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglBindAPI(EGLenum api)"
  },
  {
    "label": "eglQueryAPI()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLenum EGLAPIENTRY)",
    "insertText": "eglQueryAPI(void)"
  },
  {
    "label": "eglWaitClient()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglWaitClient(void)"
  },
  {
    "label": "eglReleaseThread()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglReleaseThread(void)"
  },
  {
    "label": "eglCreatePbufferFromClientBuffer()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglCreatePbufferFromClientBuffer(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "eglSurfaceAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value)"
  },
  {
    "label": "eglBindTexImage()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "eglReleaseTexImage()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "eglSwapInterval()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapInterval(EGLDisplay dpy, EGLint interval)"
  },
  {
    "label": "eglCreateContext()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLContext EGLAPIENTRY)",
    "insertText": "eglCreateContext(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyContext()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglDestroyContext(EGLDisplay dpy, EGLContext ctx)"
  },
  {
    "label": "eglMakeCurrent()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglMakeCurrent(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx)"
  },
  {
    "label": "eglGetCurrentContext()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLContext EGLAPIENTRY)",
    "insertText": "eglGetCurrentContext(void)"
  },
  {
    "label": "eglGetCurrentSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLSurface EGLAPIENTRY)",
    "insertText": "eglGetCurrentSurface(EGLint readdraw)"
  },
  {
    "label": "eglGetCurrentDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLDisplay EGLAPIENTRY)",
    "insertText": "eglGetCurrentDisplay(void)"
  },
  {
    "label": "eglQueryContext()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglQueryContext(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglWaitGL()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglWaitGL(void)"
  },
  {
    "label": "eglWaitNative()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglWaitNative(EGLint engine)"
  },
  {
    "label": "eglSwapBuffers()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglCopyBuffers()",
    "kind": "Method",
    "detail": "Function (EGLAPI EGLBoolean EGLAPIENTRY)",
    "insertText": "eglCopyBuffers(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*__eglMustCastToProperFunctionPointerType)(void)"
  },
  {
    "label": "eglGetProcAddress()",
    "kind": "Method",
    "detail": "Function (EGLAPI __eglMustCastToProperFunctionPointerType EGLAPIENTRY)",
    "insertText": "eglGetProcAddress(const char *procname)"
  }
]