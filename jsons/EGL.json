[
  {
    "label": "blocks",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "blocks"
  },
  {
    "label": "eglGetError()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetError(void)"
  },
  {
    "label": "eglGetDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetDisplay(EGLNativeDisplayType display_id)"
  },
  {
    "label": "eglInitialize()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglInitialize(EGLDisplay dpy, EGLint *major, EGLint *minor)"
  },
  {
    "label": "eglTerminate()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglTerminate(EGLDisplay dpy)"
  },
  {
    "label": "eglQueryString()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryString(EGLDisplay dpy, EGLint name)"
  },
  {
    "label": "eglGetConfigs()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetConfigs(EGLDisplay dpy, EGLConfig *configs,\n\t\t\t EGLint config_size, EGLint *num_config)"
  },
  {
    "label": "eglChooseConfig()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglChooseConfig(EGLDisplay dpy, const EGLint *attrib_list,\n\t\t\t   EGLConfig *configs, EGLint config_size,\n\t\t\t   EGLint *num_config)"
  },
  {
    "label": "eglGetConfigAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetConfigAttrib(EGLDisplay dpy, EGLConfig config,\n\t\t\t      EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglCreateWindowSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateWindowSurface(EGLDisplay dpy, EGLConfig config,\n\t\t\t\t  EGLNativeWindowType win,\n\t\t\t\t  const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePbufferSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePbufferSurface(EGLDisplay dpy, EGLConfig config,\n\t\t\t\t   const EGLint *attrib_list)"
  },
  {
    "label": "eglCreatePixmapSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePixmapSurface(EGLDisplay dpy, EGLConfig config,\n\t\t\t\t  EGLNativePixmapType pixmap,\n\t\t\t\t  const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroySurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroySurface(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglQuerySurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQuerySurface(EGLDisplay dpy, EGLSurface surface,\n\t\t\t   EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglBindAPI()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglBindAPI(EGLenum api)"
  },
  {
    "label": "eglQueryAPI()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryAPI(void)"
  },
  {
    "label": "eglWaitClient()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglWaitClient(void)"
  },
  {
    "label": "eglReleaseThread()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglReleaseThread(void)"
  },
  {
    "label": "eglCreatePbufferFromClientBuffer()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreatePbufferFromClientBuffer(\n\t      EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer,\n\t      EGLConfig config, const EGLint *attrib_list)"
  },
  {
    "label": "eglSurfaceAttrib()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSurfaceAttrib(EGLDisplay dpy, EGLSurface surface,\n\t\t\t    EGLint attribute, EGLint value)"
  },
  {
    "label": "eglBindTexImage()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglBindTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "eglReleaseTexImage()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglReleaseTexImage(EGLDisplay dpy, EGLSurface surface, EGLint buffer)"
  },
  {
    "label": "eglSwapInterval()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSwapInterval(EGLDisplay dpy, EGLint interval)"
  },
  {
    "label": "eglCreateContext()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCreateContext(EGLDisplay dpy, EGLConfig config,\n\t\t\t    EGLContext share_context,\n\t\t\t    const EGLint *attrib_list)"
  },
  {
    "label": "eglDestroyContext()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglDestroyContext(EGLDisplay dpy, EGLContext ctx)"
  },
  {
    "label": "eglMakeCurrent()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglMakeCurrent(EGLDisplay dpy, EGLSurface draw,\n\t\t\t  EGLSurface read, EGLContext ctx)"
  },
  {
    "label": "eglGetCurrentContext()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetCurrentContext(void)"
  },
  {
    "label": "eglGetCurrentSurface()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetCurrentSurface(EGLint readdraw)"
  },
  {
    "label": "eglGetCurrentDisplay()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetCurrentDisplay(void)"
  },
  {
    "label": "eglQueryContext()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglQueryContext(EGLDisplay dpy, EGLContext ctx,\n\t\t\t   EGLint attribute, EGLint *value)"
  },
  {
    "label": "eglWaitGL()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglWaitGL(void)"
  },
  {
    "label": "eglWaitNative()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglWaitNative(EGLint engine)"
  },
  {
    "label": "eglSwapBuffers()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglSwapBuffers(EGLDisplay dpy, EGLSurface surface)"
  },
  {
    "label": "eglCopyBuffers()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglCopyBuffers(EGLDisplay dpy, EGLSurface surface,\n\t\t\t  EGLNativePixmapType target)"
  },
  {
    "label": "eglGetProcAddress()",
    "kind": "Method",
    "detail": "Function (EGLAPIENTRY)",
    "insertText": "eglGetProcAddress(const char *procname)"
  }
]