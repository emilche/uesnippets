[
  {
    "label": "ChannelBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChannelBuffer"
  },
  {
    "label": "IFChannelBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IFChannelBuffer"
  },
  {
    "label": "ChannelBuffer()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_AUDIO_CHANNEL_BUFFER_H_ # define COMMON_AUDIO_CHANNEL_BUFFER_H_ # include<string . h> # include<memory> # include<vector> # include \" api / array_view . h \" # include \" common_audio / include / audio_util . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / gtest_prod_util . h \" namespace webrtc { template<T> class ChannelBuffer { public :)",
    "insertText": "ChannelBuffer(size_t num_frames, size_t num_channels, size_t num_bands = 1) : data_(new T[num_frames * num_channels]()), channels_(new T*[num_channels * num_bands]), bands_(new T*[num_channels * num_bands]), num_frames_(num_frames), num_frames_per_band_(num_frames / num_bands), num_allocated_channels_(num_channels), num_channels_(num_channels), num_bands_(num_bands), bands_view_(num_allocated_channels_, std::vector<rtc::ArrayView<T>>(num_bands_)), channels_view_( num_bands_, std::vector<rtc::ArrayView<T>>(num_allocated_channels_))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto* bands_view = const_cast<std::vector<std::vector<rtc::ArrayView<)",
    "insertText": "T(&bands_view_)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (auto* channels_view = const_cast<std::vector<std::vector<rtc::ArrayView<)",
    "insertText": "T(&channels_view_)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (channels_ [ band* num_allocated_channels_ + ch ] = channels_view_ [ band ] [ ch ] .)",
    "insertText": "data()"
  },
  {
    "label": "channels()",
    "kind": "Method",
    "detail": "Function (bands_ [ ch* num_bands_ + band ] = channels_ [ band* num_allocated_channels_ + ch ] ; } } } const T* const*)",
    "insertText": "channels(size_t band = 0)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(band, num_bands_)"
  },
  {
    "label": "const()",
    "kind": "Method",
    "detail": "Function (const ChannelBuffer<T>* t = this ; return const_cast<T*)",
    "insertText": "const(t->channels(band))"
  },
  {
    "label": "channels_view()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const rtc::ArrayView<T>>)",
    "insertText": "channels_view(size_t band = 0)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(channel, num_channels_)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(channel, 0)"
  },
  {
    "label": "const()",
    "kind": "Method",
    "detail": "Function (const ChannelBuffer<T>* t = this ; return const_cast<T*)",
    "insertText": "const(t->bands(channel))"
  },
  {
    "label": "bands_view()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const rtc::ArrayView<T>>)",
    "insertText": "bands_view(size_t channel)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(start_frame, num_frames_)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const ChannelBuffer<T>* t = this ; return const_cast<)",
    "insertText": "T(t->Slice(slice, start_frame))"
  },
  {
    "label": "num_frames()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "num_frames()"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(num_channels, num_allocated_channels_)"
  },
  {
    "label": "SetDataForTesting()",
    "kind": "Method",
    "detail": "Function (num_channels_ = num_channels ; } void)",
    "insertText": "SetDataForTesting(const T* data, size_t size)"
  },
  {
    "label": "RTC_CHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_EQ(size, this->size())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(data_.get(), data, size * sizeof(*data))"
  },
  {
    "label": "IFChannelBuffer()",
    "kind": "Method",
    "detail": "Function (} private : std::unique_ptr<T [ ]> data_ ; std::unique_ptr<T* [ ]> channels_ ; std::unique_ptr<T* [ ]> bands_ ; const size_t num_frames_ ; const size_t num_frames_per_band_ ; const size_t num_allocated_channels_ ; size_t num_channels_ ; const size_t num_bands_ ; const std::vector<std::vector<rtc::ArrayView<T>>> bands_view_ ; const std::vector<std::vector<rtc::ArrayView<T>>> channels_view_ ; } ; class IFChannelBuffer { public :)",
    "insertText": "IFChannelBuffer(size_t num_frames, size_t num_channels, size_t num_bands = 1)"
  },
  {
    "label": "IFChannelBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IFChannelBuffer()"
  },
  {
    "label": "ibuf()",
    "kind": "Method",
    "detail": "Function (ChannelBuffer<int16_t>*)",
    "insertText": "ibuf()"
  },
  {
    "label": "fbuf()",
    "kind": "Method",
    "detail": "Function (ChannelBuffer<float>*)",
    "insertText": "fbuf()"
  },
  {
    "label": "ibuf_const()",
    "kind": "Method",
    "detail": "Function (const ChannelBuffer<int16_t>*)",
    "insertText": "ibuf_const()"
  },
  {
    "label": "fbuf_const()",
    "kind": "Method",
    "detail": "Function (const ChannelBuffer<float>*)",
    "insertText": "fbuf_const()"
  },
  {
    "label": "num_frames_per_band()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "num_frames_per_band()"
  },
  {
    "label": "num_channels()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "num_channels()"
  },
  {
    "label": "set_num_channels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_num_channels(size_t num_channels)"
  },
  {
    "label": "set_num_channels()",
    "kind": "Method",
    "detail": "Function (ibuf_ .)",
    "insertText": "set_num_channels(num_channels)"
  },
  {
    "label": "num_bands()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "num_bands()"
  },
  {
    "label": "RefreshF()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RefreshF()"
  },
  {
    "label": "RefreshI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshI()"
  }
]