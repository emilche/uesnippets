[
  {
    "label": "None",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "None"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "TemplateSel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TemplateSel"
  },
  {
    "label": "Bind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Bind"
  },
  {
    "label": "Templates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Templates"
  },
  {
    "label": "Types",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Types"
  },
  {
    "label": "ProxyTypeList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProxyTypeList"
  },
  {
    "label": "is_proxy_type_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_proxy_type_list"
  },
  {
    "label": "GenerateTypeList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GenerateTypeList"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_ # define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_ # include \" gtest / internal / gtest - port . h \" # if GTEST_HAS_CXXABI_H_ # include<cxxabi . h> # elif)",
    "insertText": "defined(__HP_aCC)"
  },
  {
    "label": "CanonicalizeForStdLibVersioning()",
    "kind": "Method",
    "detail": "Function (namespace internal { std::string)",
    "insertText": "CanonicalizeForStdLibVersioning(std::string s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const char prefix [ ] = \" std::__ \" ;)",
    "insertText": "if(s.compare(0, strlen(prefix), prefix) == 0)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (std::string::size_type end = s .)",
    "insertText": "find(\"::\", strlen(prefix))"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (s .)",
    "insertText": "erase(strlen(\"std\"), end - strlen(\"std\"))"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (} } return s ; } # if GTEST_HAS_RTTI std::string)",
    "insertText": "GetTypeName(const std::type_info& type)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (const char* const name = type .)",
    "insertText": "name()"
  },
  {
    "label": "__cxa_demangle()",
    "kind": "Method",
    "detail": "Function (# if GTEST_HAS_CXXABI_H_ using abi::__cxa_demangle ; # endif char* const readable_name =)",
    "insertText": "__cxa_demangle(name, nullptr, nullptr, &status)"
  },
  {
    "label": "name_str()",
    "kind": "Method",
    "detail": "Function (const std::string)",
    "insertText": "name_str(status == 0 ? readable_name : name)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free(readable_name)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (# else return name ; # endif } # endif template<T> std::string)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (# if GTEST_HAS_RTTI return)",
    "insertText": "GetTypeName(typeid(T))"
  },
  {
    "label": "GTEST_BIND_()",
    "kind": "Method",
    "detail": "Function (# else return \"<type> \" ; # endif } struct None { } ; # define GTEST_TEMPLATE_ \\ template<T> \\ class template<GTEST_TEMPLATE_ Tmpl> struct TemplateSel { template<T> struct Bind { typedef Tmpl<T> type ; } ; } ; # define)",
    "insertText": "GTEST_BIND_(TmplSel, T)"
  }
]