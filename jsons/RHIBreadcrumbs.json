[
  {
    "label": "FRHIBreadcrumbData_Location",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBreadcrumbData_Location"
  },
  {
    "label": "FRHIBreadcrumbData_Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBreadcrumbData_Stats"
  },
  {
    "label": "FRHIBreadcrumbData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBreadcrumbData"
  },
  {
    "label": "FRHIBreadcrumb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBreadcrumb"
  },
  {
    "label": "FRHIBreadcrumbAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBreadcrumbAllocator"
  },
  {
    "label": "FRHIBreadcrumbRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBreadcrumbRange"
  },
  {
    "label": "FRHIBreadcrumbState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBreadcrumbState"
  },
  {
    "label": "FPipeline",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipeline"
  },
  {
    "label": "FDevice",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDevice"
  },
  {
    "label": "FQueueID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueueID"
  },
  {
    "label": "FRHIBreadcrumbNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBreadcrumbNode"
  },
  {
    "label": "FCrashContextExtendedWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrashContextExtendedWriter"
  },
  {
    "label": "FRHIBreadcrumbList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBreadcrumbList"
  },
  {
    "label": "FRHIBreadcrumbAllocatorArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBreadcrumbAllocatorArray"
  },
  {
    "label": "TRHIBreadcrumb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRHIBreadcrumb"
  },
  {
    "label": "FResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResult"
  },
  {
    "label": "FIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterator"
  },
  {
    "label": "FOuter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOuter"
  },
  {
    "label": "FBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuffer"
  },
  {
    "label": "TRHIBreadcrumbValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRHIBreadcrumbValue"
  },
  {
    "label": "FConvert",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvert"
  },
  {
    "label": "FStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStorage"
  },
  {
    "label": "FRHIBreadcrumbNodeRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBreadcrumbNodeRef"
  },
  {
    "label": "FRHIBreadcrumbEventManual",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBreadcrumbEventManual"
  },
  {
    "label": "FRHIBreadcrumbEventScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBreadcrumbEventScope"
  },
  {
    "label": "WITH_RHI_BREADCRUMBS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Build . h \" # include \" Misc / MemStack . h \" # include \" HAL / Platform . h \" # include \" Templates / SharedPointer . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" GenericPlatform / GenericPlatformCrashContext . h \" # include \" RHIFwd . h \" # include \" RHIPipeline . h \" # include \" MultiGPU . h \" # ifndef WITH_RHI_BREADCRUMBS # define)",
    "insertText": "WITH_RHI_BREADCRUMBS((UE_BUILD_DEBUG || UE_BUILD_DEVELOPMENT) || WITH_PROFILEGPU) #endif #define RHI_BREADCRUMBS_EMIT_CPU (WITH_RHI_BREADCRUMBS && CPUPROFILERTRACE_ENABLED && 1) #define RHI_BREADCRUMBS_EMIT_LOCATION (WITH_RHI_BREADCRUMBS && (CPUPROFILERTRACE_ENABLED || GPUPROFILERTRACE_ENABLED) && 1)"
  },
  {
    "label": "FRHIBreadcrumbData_Location()",
    "kind": "Method",
    "detail": "Function (# if RHI_BREADCRUMBS_EMIT_LOCATION ANSICHAR const* File ; uint32 Line ; # endif)",
    "insertText": "FRHIBreadcrumbData_Location(ANSICHAR const* File, uint32 Line) #if RHI_BREADCRUMBS_EMIT_LOCATION : File(File) , Line(Line)"
  },
  {
    "label": "FRHIBreadcrumbData_Stats()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHIBreadcrumbData_Stats { # if STATS TStatId StatId { } ; # endif # if CSV_PROFILER_STATS FName CsvStat = NAME_None ; # endif)",
    "insertText": "FRHIBreadcrumbData_Stats(TStatId InStatId, FName InCsvStat)"
  },
  {
    "label": "ShouldComputeStat()",
    "kind": "Method",
    "detail": "Function (# if STATS StatId = InStatId ; # endif # if CSV_PROFILER_STATS CsvStat = InCsvStat ; # endif } bool)",
    "insertText": "ShouldComputeStat()"
  },
  {
    "label": "IsValidStat()",
    "kind": "Method",
    "detail": "Function (# if STATS return StatId .)",
    "insertText": "IsValidStat()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# elif CSV_PROFILER_STATS return CsvStat ! = NAME_None ; # else return false ; # endif } bool)",
    "insertText": "operator(FRHIBreadcrumbData_Stats const& RHS)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# if STATS return StatId = = RHS . StatId ; # elif CSV_PROFILER_STATS return CsvStat = = RHS . CsvStat ; # else return true ; # endif } uint32)",
    "insertText": "GetTypeHash(FRHIBreadcrumbData_Stats const& Stats)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# if STATS return)",
    "insertText": "GetTypeHash(Stats.StatId)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# elif CSV_PROFILER_STATS return)",
    "insertText": "GetTypeHash(Stats.CsvStat)"
  },
  {
    "label": "FRHIBreadcrumbData()",
    "kind": "Method",
    "detail": "Function (# else return 0 ; # endif } } ; class FRHIBreadcrumbData : public FRHIBreadcrumbData_Location,public FRHIBreadcrumbData_Stats { public :)",
    "insertText": "FRHIBreadcrumbData(ANSICHAR const* File, uint32 Line, TStatId StatId, FName CsvStat) : FRHIBreadcrumbData_Location(File, Line) , FRHIBreadcrumbData_Stats(StatId, CsvStat)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIBreadcrumb ; class FRHIBreadcrumbAllocator ; struct FRHIBreadcrumbRange ; struct FRHIBreadcrumbState { struct FPipeline { uint32 MarkerIn = 0,MarkerOut = 0 ; } ; struct FDevice { TRHIPipelineArray<FPipeline> Pipelines ; } ; TStaticArray<FDevice,MAX_NUM_GPUS> Devices { InPlace } ; struct FQueueID { uint32 DeviceIndex ; ERHIPipeline Pipeline ; bool)",
    "insertText": "operator(FQueueID const& RHS)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(FQueueID const& ID)"
  },
  {
    "label": "DumpActiveBreadcrumbs()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "DumpActiveBreadcrumbs(TMap<FQueueID, TArray<FRHIBreadcrumbRange>> const& QueueRanges)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} ; struct FRHIBreadcrumbNode { FRHIBreadcrumb const& Name ; private : FRHIBreadcrumbNode* Parent = Sentinel ; FRHIBreadcrumbNode* ListLink = nullptr ; TStaticArray<FRHIBreadcrumbNode*,)",
    "insertText": "uint32(ERHIPipeline::Num)"
  },
  {
    "label": "ERHIPipeline()",
    "kind": "Method",
    "detail": "Function (InPlace,nullptr } ; public : FRHIBreadcrumbAllocator* const Allocator = nullptr ; # if DO_CHECK std::atomic<std::underlying_type_t<ERHIPipeline>> BeginPipes = std::underlying_type_t<)",
    "insertText": "ERHIPipeline(ERHIPipeline::None)"
  },
  {
    "label": "FRHIBreadcrumbNode()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FRHIBreadcrumbNode(FRHIBreadcrumbAllocator& Allocator, FRHIBreadcrumb const& Name) : Name(Name) , Allocator(&Allocator)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} FRHIBreadcrumbNode*)",
    "insertText": "GetParent()"
  },
  {
    "label": "GetNextPtr()",
    "kind": "Method",
    "detail": "Function (} FRHIBreadcrumbNode* const&)",
    "insertText": "GetNextPtr(ERHIPipeline Pipeline)"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParent(FRHIBreadcrumbNode* Node)"
  },
  {
    "label": "BeginCPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCPU()"
  },
  {
    "label": "EndCPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCPU()"
  },
  {
    "label": "WalkIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WalkIn(FRHIBreadcrumbNode* Node)"
  },
  {
    "label": "WalkOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WalkOut(FRHIBreadcrumbNode* Node)"
  },
  {
    "label": "WriteCrashData()",
    "kind": "Method",
    "detail": "Function (# if WITH_ADDITIONAL_CRASH_CONTEXTS void)",
    "insertText": "WriteCrashData(struct FCrashContextExtendedWriter& Writer, const TCHAR* ThreadName)"
  },
  {
    "label": "GetFullPath()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetFullPath()"
  },
  {
    "label": "FindCommonAncestor()",
    "kind": "Method",
    "detail": "Function (FRHIBreadcrumbNode const*)",
    "insertText": "FindCommonAncestor(FRHIBreadcrumbNode const* Node0, FRHIBreadcrumbNode const* Node1)"
  },
  {
    "label": "GetLevel()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetLevel(FRHIBreadcrumbNode const* Node)"
  },
  {
    "label": "FRHIBreadcrumbNode()",
    "kind": "Method",
    "detail": "Function (FRHIBreadcrumbNode* const Sentinel ; private :)",
    "insertText": "FRHIBreadcrumbNode()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (FRHIBreadcrumbNode SentinelNode ; struct FRHIBreadcrumbList ; } ; class FRHIBreadcrumbAllocatorArray : public TArray<TSharedRef<class FRHIBreadcrumbAllocator>,TInlineAllocator<2>> { public : void)",
    "insertText": "AddUnique(FRHIBreadcrumbAllocator* Allocator)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} ; class FRHIBreadcrumbAllocator : public TSharedFromThis<FRHIBreadcrumbAllocator> { template<. . .> class TRHIBreadcrumb ; FRHIBreadcrumbNode ; FMemStackBase Inner ; FRHIBreadcrumbAllocatorArray Parents ; template<TType,. . . TArgs> TType*)",
    "insertText": "Alloc(TArgs&&... Args)"
  },
  {
    "label": "GetParents()",
    "kind": "Method",
    "detail": "Function (} public : FRHIBreadcrumbAllocatorArray const&)",
    "insertText": "GetParents()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc(uint32 Size, uint32 Align)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} struct FRHIBreadcrumbList { FRHIBreadcrumbNode* First = nullptr ; FRHIBreadcrumbNode* Last = nullptr ; void)",
    "insertText": "Append(FRHIBreadcrumbNode* Node)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (First = Node ; })",
    "insertText": "if(Last)"
  },
  {
    "label": "IterateAndUnlink()",
    "kind": "Method",
    "detail": "Function (Last -> ListLink = Node ; } Last = Node ; } [ [ nodiscard ] ] auto)",
    "insertText": "IterateAndUnlink()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (struct FResult { FRHIBreadcrumbNode* First ; auto)",
    "insertText": "begin()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FIterator { FRHIBreadcrumbNode* Current ; FRHIBreadcrumbNode* Next ; FIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Current = Next ;)",
    "insertText": "if(Current)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Next = Current -> ListLink ; Current -> ListLink = nullptr ; } else { Next = nullptr ; } return* this ; } bool)",
    "insertText": "operator(std::nullptr_t)"
  },
  {
    "label": "FRHIBreadcrumbRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIBreadcrumbRange(FRHIBreadcrumbNode* SingleNode) : First(SingleNode) , Last(SingleNode)"
  },
  {
    "label": "FRHIBreadcrumbRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIBreadcrumbRange(FRHIBreadcrumbNode* First, FRHIBreadcrumbNode* Last) : First(First) , Last(Last)"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertAfter(FRHIBreadcrumbRange const& Other, FRHIBreadcrumbNode* Prev, ERHIPipeline Pipeline)"
  },
  {
    "label": "GetNextPtr()",
    "kind": "Method",
    "detail": "Function (Other . Last ->)",
    "insertText": "GetNextPtr(Pipeline)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (First = Other . First ;)",
    "insertText": "if(!Last)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Last = Other . Last ; } } else {)",
    "insertText": "check(First)"
  },
  {
    "label": "Enumerate()",
    "kind": "Method",
    "detail": "Function (Last = Other . Last ; } } } auto)",
    "insertText": "Enumerate(ERHIPipeline Pipeline)"
  },
  {
    "label": "FOuter()",
    "kind": "Method",
    "detail": "Function (class FOuter { FRHIBreadcrumbRange const Range ; ERHIPipeline const Pipeline ; public :)",
    "insertText": "FOuter(FRHIBreadcrumbRange const& Range, ERHIPipeline Pipeline) : Range(Range) , Pipeline(Pipeline)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (Current = Next ; } return* this ; } } ; return FIterator { Range . First,Range . Last # if DO_CHECK,Range . First # endif,Pipeline } ; } std::nullptr_t)",
    "insertText": "end()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(FRHIBreadcrumbRange const& Range)"
  },
  {
    "label": "FRHIBreadcrumb()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIBreadcrumb { std::atomic<uint32> NextID ; protected :)",
    "insertText": "FRHIBreadcrumb(FRHIBreadcrumbData&& Data) : ID(NextID.fetch_add(1, std::memory_order_relaxed) | 0x80000000) , Data(Data)"
  },
  {
    "label": "FRHIBreadcrumb()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIBreadcrumb(FRHIBreadcrumb const&)"
  },
  {
    "label": "FRHIBreadcrumb()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIBreadcrumb(FRHIBreadcrumb&&)"
  },
  {
    "label": "CreateTraceMarkers()",
    "kind": "Method",
    "detail": "Function (public : uint32 const ID ; FRHIBreadcrumbData const Data ; # if RHI_BREADCRUMBS_EMIT_CPU uint32 const CPUTraceMarkerID = 0 ; # endif void)",
    "insertText": "CreateTraceMarkers()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RHI_BREADCRUMBS_EMIT_CPU)",
    "insertText": "if(TRACE_CPUPROFILER_EVENT_MANUAL_IS_ENABLED())"
  },
  {
    "label": "GetTCHAR()",
    "kind": "Method",
    "detail": "Function (FBuffer Buffer ; TCHAR const* Str =)",
    "insertText": "GetTCHAR(Buffer)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "uint32(CPUTraceMarkerID) = FCpuProfilerTrace::OutputDynamicEventType(Str #if RHI_BREADCRUMBS_EMIT_LOCATION , Data.File, Data.Line #endif)"
  },
  {
    "label": "GetTCHAR()",
    "kind": "Method",
    "detail": "Function (} # endif } struct FBuffer { TCHAR Data [ 1 2 8 ] ; } ; TCHAR const*)",
    "insertText": "GetTCHAR(FBuffer& Storage)"
  },
  {
    "label": "GetTCHARNoFormat()",
    "kind": "Method",
    "detail": "Function (TCHAR const*)",
    "insertText": "GetTCHARNoFormat()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Parent = Node ;)",
    "insertText": "if(Parent && Parent != FRHIBreadcrumbNode::Sentinel && Parent->Allocator != Allocator)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Allocator -> Parents .)",
    "insertText": "AddUnique(Parent->Allocator)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if RHI_BREADCRUMBS_EMIT_CPU)",
    "insertText": "if(Name.CPUTraceMarkerID)"
  },
  {
    "label": "OutputBeginEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputBeginEvent(Name.CPUTraceMarkerID)"
  },
  {
    "label": "OutputEndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputEndEvent()"
  },
  {
    "label": "Recurse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Recurse(FRHIBreadcrumbNode* Current, auto& Recurse)"
  },
  {
    "label": "Recurse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Recurse(Current->GetParent(), Recurse)"
  },
  {
    "label": "Recurse()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "Recurse(Node, Recurse)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } # endif } template<T> struct TRHIBreadcrumbValue {)",
    "insertText": "static_assert(!(std::is_same_v<T, TCHAR*> || std::is_same_v<T, TCHAR const*>), \"Do not use raw TCHAR pointers with RHI breadcrumbs. Pass the FString, FName, or string literal instead.\")"
  },
  {
    "label": "TRHIBreadcrumbValue()",
    "kind": "Method",
    "detail": "Function (T Value ;)",
    "insertText": "TRHIBreadcrumbValue(T const& Value) : Value(Value)"
  },
  {
    "label": "FConvert()",
    "kind": "Method",
    "detail": "Function (} struct FConvert { T const& Inner ;)",
    "insertText": "FConvert(TRHIBreadcrumbValue const& Value) : Inner(Value.Value)"
  },
  {
    "label": "TRHIBreadcrumbValue()",
    "kind": "Method",
    "detail": "Function (} } ; } ; template<size_t N> struct TRHIBreadcrumbValue<TCHAR [ N ]> { TCHAR const* Value ;)",
    "insertText": "TRHIBreadcrumbValue(TCHAR const* Value) : Value(Value)"
  },
  {
    "label": "TRHIBreadcrumbValue()",
    "kind": "Method",
    "detail": "Function (} } ; } ; template<> struct TRHIBreadcrumbValue<FName> { FName Value ;)",
    "insertText": "TRHIBreadcrumbValue(FName const& Value) : Value(Value)"
  },
  {
    "label": "FConvert()",
    "kind": "Method",
    "detail": "Function (} struct FConvert { TCHAR Inner [ 1 2 8 ] ;)",
    "insertText": "FConvert(TRHIBreadcrumbValue const& Name)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Name . Value .)",
    "insertText": "ToString(Inner)"
  },
  {
    "label": "TRHIBreadcrumbValue()",
    "kind": "Method",
    "detail": "Function (} } ; } ; template<> struct TRHIBreadcrumbValue<FDebugName> { FDebugName Value ;)",
    "insertText": "TRHIBreadcrumbValue(FDebugName const& Value) : Value(Value)"
  },
  {
    "label": "TRHIBreadcrumbValue()",
    "kind": "Method",
    "detail": "Function (} } ; } ; template<> struct TRHIBreadcrumbValue<FString> { TCHAR Buffer [ 1 2 8 ] ;)",
    "insertText": "TRHIBreadcrumbValue(FString const& Value)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Strncpy(Buffer, *Value, UE_ARRAY_COUNT(Buffer))"
  },
  {
    "label": "FConvert()",
    "kind": "Method",
    "detail": "Function (} struct FConvert { TCHAR const* Inner ;)",
    "insertText": "FConvert(TRHIBreadcrumbValue const& String) : Inner(String.Buffer)"
  },
  {
    "label": "ToStringImpl()",
    "kind": "Method",
    "detail": "Function (} } ; } ; template<. . . TArgs> class TRHIBreadcrumb final : public FRHIBreadcrumb { FRHIBreadcrumbAllocator ; TCHAR const* FormatString ; std::tuple<TRHIBreadcrumbValue<TArgs> . . .> Values ; template<size_t . . . Indices> void)",
    "insertText": "ToStringImpl(FBuffer& Buffer, std::index_sequence<Indices...>)"
  },
  {
    "label": "Indices()",
    "kind": "Method",
    "detail": "Function (std::tuple<TRHIBreadcrumbValue<TArgs>::FConvert . . .> Converted { std::get<)",
    "insertText": "Indices(Values)"
  },
  {
    "label": "Snprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Snprintf(Buffer.Data , UE_ARRAY_COUNT(Buffer.Data) , reinterpret_cast<TCHAR const(&)[1]>(*FormatString) , (std::get<Indices>(Converted).Inner)...)"
  },
  {
    "label": "TRHIBreadcrumb()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRHIBreadcrumb(TRHIBreadcrumb const& Other)"
  },
  {
    "label": "TRHIBreadcrumb()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TRHIBreadcrumb(FRHIBreadcrumbData&& Data, TCHAR const* FormatString, TArgs const&... Args) : FRHIBreadcrumb(MoveTemp(Data)) , FormatString(FormatString) , Values(Args...)"
  },
  {
    "label": "GetTCHAR()",
    "kind": "Method",
    "detail": "Function (} TCHAR const*)",
    "insertText": "GetTCHAR(FBuffer& Buffer)"
  },
  {
    "label": "ToStringImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStringImpl(Buffer, std::make_index_sequence<sizeof...(TArgs)>{})"
  },
  {
    "label": "TRHIBreadcrumb()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TRHIBreadcrumb(FRHIBreadcrumbData&& Data, TCHAR const* StringLiteral) : FRHIBreadcrumb(MoveTemp(Data)) , StringLiteral(StringLiteral)"
  },
  {
    "label": "GetTCHAR()",
    "kind": "Method",
    "detail": "Function (} TCHAR const*)",
    "insertText": "GetTCHAR(FBuffer&)"
  },
  {
    "label": "FStorage()",
    "kind": "Method",
    "detail": "Function (struct FStorage { TRHIBreadcrumb<std::decay_t<TArgs> . . .> Name ; FRHIBreadcrumbNode Node ;)",
    "insertText": "FStorage(FRHIBreadcrumbAllocator& Allocator, FRHIBreadcrumbData&& Data, TCHAR const(&FormatString)[N], TArgs&&... Args) : Name(MoveTemp(Data), FormatString, Forward<TArgs>(Args)...) , Node(Allocator, Name)"
  },
  {
    "label": "FStorage()",
    "kind": "Method",
    "detail": "Function (Node)",
    "insertText": "FStorage(*this, MoveTemp(Data), FormatString, Forward<TArgs>(Args)...)"
  },
  {
    "label": "FRHIBreadcrumbNodeRef()",
    "kind": "Method",
    "detail": "Function (} class FRHIBreadcrumbNodeRef { private : FRHIBreadcrumbNode* Node = nullptr ; TSharedPtr<FRHIBreadcrumbAllocator> AllocatorRef ; public :)",
    "insertText": "FRHIBreadcrumbNodeRef()"
  },
  {
    "label": "FRHIBreadcrumbNodeRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIBreadcrumbNodeRef(FRHIBreadcrumbNode* Node) : Node(Node)"
  },
  {
    "label": "AsShared()",
    "kind": "Method",
    "detail": "Function (AllocatorRef = Node -> Allocator ->)",
    "insertText": "AsShared()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End(FRHIComputeCommandList& RHICmdList)"
  },
  {
    "label": "FRHIBreadcrumbEventManual()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHIBreadcrumbEventManual()"
  },
  {
    "label": "FRHIBreadcrumbEventScope()",
    "kind": "Method",
    "detail": "Function (} ; class FRHIBreadcrumbEventScope { FRHIComputeCommandList& RHICmdList ; FRHIBreadcrumbNode* const Node ; ERHIPipeline const Pipeline ;)",
    "insertText": "FRHIBreadcrumbEventScope(FRHIBreadcrumbEventScope const&)"
  },
  {
    "label": "FRHIBreadcrumbEventScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIBreadcrumbEventScope(FRHIBreadcrumbEventScope&&)"
  },
  {
    "label": "FRHIBreadcrumbEventScope()",
    "kind": "Method",
    "detail": "Function (template<size_t N,. . . TArgs>)",
    "insertText": "FRHIBreadcrumbEventScope(FRHIComputeCommandList& InRHICmdList, FRHIBreadcrumbData&& Data, ERHIPipeline InPipeline, bool bCondition, TCHAR const(&FormatString)[N], TArgs&&... Args)"
  },
  {
    "label": "FRHIBreadcrumbEventScope()",
    "kind": "Method",
    "detail": "Function (public : template<size_t N,. . . TArgs>)",
    "insertText": "FRHIBreadcrumbEventScope(FRHIComputeCommandList& InRHICmdList, FRHIBreadcrumbData&& Data, bool bCondition, TCHAR const(&FormatString)[N], TArgs&&... Args)"
  },
  {
    "label": "FRHIBreadcrumbEventScope()",
    "kind": "Method",
    "detail": "Function (template<size_t N,. . . TArgs>)",
    "insertText": "FRHIBreadcrumbEventScope(IRHIComputeContext& InRHIContext, FRHIBreadcrumbData&& Data, bool bCondition, TCHAR const(&FormatString)[N], TArgs&&... Args)"
  },
  {
    "label": "FRHIBreadcrumbEventScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRHIBreadcrumbEventScope()"
  }
]