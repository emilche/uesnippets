[
  {
    "label": "EmulatedNetworkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmulatedNetworkManager"
  },
  {
    "label": "EmulatedNetworkManager()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_NETWORK_EMULATED_NETWORK_MANAGER_H_ # define TEST_NETWORK_EMULATED_NETWORK_MANAGER_H_ # include<functional> # include<memory> # include<vector> # include \" api / sequence_checker . h \" # include \" api / test / network_emulation_manager . h \" # include \" api / test / time_controller . h \" # include \" rtc_base / ip_address . h \" # include \" rtc_base / network . h \" # include \" rtc_base / socket_server . h \" # include \" rtc_base / thread . h \" # include \" test / network / network_emulation . h \" namespace webrtc { namespace test { class EmulatedNetworkManager : public rtc::NetworkManagerBase,public sigslot::has_slots<>,public EmulatedNetworkManagerInterface { public :)",
    "insertText": "EmulatedNetworkManager(TimeController* time_controller, TaskQueueForTest* task_queue, EndpointsContainer* endpoints_container)"
  },
  {
    "label": "EnableEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableEndpoint(EmulatedEndpointImpl* endpoint)"
  },
  {
    "label": "DisableEndpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableEndpoint(EmulatedEndpointImpl* endpoint)"
  },
  {
    "label": "StartUpdating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartUpdating()"
  },
  {
    "label": "StopUpdating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopUpdating()"
  },
  {
    "label": "GetAnyAddressNetworks()",
    "kind": "Method",
    "detail": "Function (std::vector<const rtc::Network*>)",
    "insertText": "GetAnyAddressNetworks()"
  },
  {
    "label": "network_manager()",
    "kind": "Method",
    "detail": "Function (} rtc::NetworkManager*)",
    "insertText": "network_manager()"
  },
  {
    "label": "endpoints()",
    "kind": "Method",
    "detail": "Function (} std::vector<EmulatedEndpoint*>)",
    "insertText": "endpoints()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetStats(std::function<void(std::unique_ptr<EmulatedNetworkStats>)> stats_callback)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(std::function<void(EmulatedNetworkStats)> stats_callback)"
  },
  {
    "label": "UpdateNetworksOnce()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateNetworksOnce()"
  },
  {
    "label": "MaybeSignalNetworksChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSignalNetworksChanged()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TaskQueueForTest* const task_queue_ ; const EndpointsContainer* const endpoints_container_ ; std::unique_ptr<rtc::Thread> network_thread_ ; std::unique_ptr<rtc::PacketSocketFactory> packet_socket_factory_ ; bool sent_first_update_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  }
]