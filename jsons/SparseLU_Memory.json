[
  {
    "label": "LUnumTempV()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSELU_MEMORY # define EIGEN_SPARSELU_MEMORY namespace Eigen { namespace internal { enum { LUNoMarker = 3 } ; enum { emptyIdxLU = - 1 } ; Index)",
    "insertText": "LUnumTempV(Index& m, Index& w, Index& t, Index& b)"
  },
  {
    "label": "LUTempSpace()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> Index)",
    "insertText": "LUTempSpace(Index&m, Index& w)"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,StorageIndex> template<VectorType> Index SparseLUImpl<Scalar,StorageIndex)",
    "insertText": "expand(VectorType& vec, Index& length, Index nbElts, Index keep_prev, Index& num_expansions)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float alpha = 1 . 5 ; Index new_len ;)",
    "insertText": "if(num_expansions == 0 || keep_prev)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VectorType old_vec ;)",
    "insertText": "if(nbElts > 0 ) old_vec = vec.segment(0,nbElts)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_EXCEPTIONS try # endif { vec .)",
    "insertText": "resize(new_len)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_EXCEPTIONS)",
    "insertText": "catch(std::bad_alloc& ) #else if(!vec.size())"
  },
  {
    "label": "new_len()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new_len(std::max)(length+1,Index(alpha * length))"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_EXCEPTIONS)",
    "insertText": "catch(std::bad_alloc& ) #else if (!vec.size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (tries + = 1 ;)",
    "insertText": "if(tries > 10)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(!vec.size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(nbElts > 0) vec.segment(0, nbElts)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (length = new_len ;)",
    "insertText": "if(num_expansions)"
  },
  {
    "label": "nzlumax()",
    "kind": "Method",
    "detail": "Function (Index& num_expansions = glu . num_expansions ; num_expansions = 0 ; glu . nzumax = glu .)",
    "insertText": "nzlumax(std::min)(fillratio * (annz+1) / n, m)"
  },
  {
    "label": "nzlmax()",
    "kind": "Method",
    "detail": "Function (glu .)",
    "insertText": "nzlmax(std::max)(Index(4), fillratio) * (annz+1)"
  },
  {
    "label": "tempSpace()",
    "kind": "Method",
    "detail": "Function (Index tempSpace ;)",
    "insertText": "tempSpace(2*panel_size + 4 + LUNoMarker) * m * sizeof(Index) + (panel_size + 1) * m * sizeof(Scalar)"
  },
  {
    "label": "estimated_size()",
    "kind": "Method",
    "detail": "Function (Index estimated_size ;)",
    "insertText": "estimated_size(5 * n + 5) * sizeof(Index) + tempSpace + (glu.nzlmax + glu.nzumax) * sizeof(Index) + (glu.nzlumax+glu.nzumax) * sizeof(Scalar)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (glu . supno .)",
    "insertText": "resize(n+1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (glu . nzlumax / = 2 ; glu . nzumax / = 2 ; glu . nzlmax / = 2 ;)",
    "insertText": "if(glu.nzlumax < annz)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(!glu.lusup.size() || !glu.ucol.size() || !glu.lsub.size() || !glu.usub.size())"
  },
  {
    "label": "memXpand()",
    "kind": "Method",
    "detail": "Function (+ + num_expansions ; return 0 ; } template<Scalar,StorageIndex> template<VectorType> Index SparseLUImpl<Scalar,StorageIndex)",
    "insertText": "memXpand(VectorType& vec, Index& maxlen, Index nbElts, MemType memtype, Index& num_expansions)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index failed_size ;)",
    "insertText": "if(memtype == USUB) failed_size = this->expand<VectorType>(vec, maxlen, nbElts, 1, num_expansions)"
  }
]