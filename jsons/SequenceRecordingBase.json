[
  {
    "label": "ULevelSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelSequence"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "SEQUENCERECORDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERECORDER_API"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" SequenceRecordingBase . generated . h \" class ULevelSequence ; class UMovieScene ;)",
    "insertText": "UCLASS(abstract)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual bool StartRecording(class ULevelSequence* CurrentSequence = nullptr, float CurrentSequenceTime = 0.0f, const FString& BaseAssetPath = FString(), const FString& SessionName = FString()) PURE_VIRTUAL(USequenceRecordingBase::StartRecording, return false;)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopRecording(class ULevelSequence* CurrentSequence = nullptr, float CurrentSequenceTime = 0.0f) PURE_VIRTUAL(USequenceRecordingBase::StopRecording, return false;)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(ULevelSequence* CurrentSequence = nullptr, float CurrentSequenceTime = 0.0f) PURE_VIRTUAL(USequenceRecordingBase::Tick,)"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording() const PURE_VIRTUAL(USequenceRecordingBase::IsRecording, return false;)"
  },
  {
    "label": "GetObjectToRecord()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObjectToRecord() const PURE_VIRTUAL(USequenceRecordingBase::GetObjectToRecord, return nullptr;)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive() const PURE_VIRTUAL(USequenceRecordingBase::IsActive, return false;)"
  }
]