[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__make_signed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__make_signed"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_MAKE_SIGNED_H # define _LIBCPP___TYPE_TRAITS_MAKE_SIGNED_H # include<__config> # include<__type_traits / apply_cv . h> # include<__type_traits / is_enum . h> # include<__type_traits / is_integral . h> # include<__type_traits / nat . h> # include<__type_traits / remove_cv . h> # include<__type_traits / type_list . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (template<class _Tp,bool = is_integral<_Tp>::value | | is_enum<_Tp>::value> struct __make_signed { } ; template<class _Tp> struct __make_signed<_Tp,true> { typedef __find_first<__signed_types,)",
    "insertText": "sizeof(_Tp)"
  }
]