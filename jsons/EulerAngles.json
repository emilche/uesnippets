[
  {
    "label": "_System",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_System"
  },
  {
    "label": "EulerAngles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EulerAngles"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "System",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "System"
  },
  {
    "label": "Other",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Other"
  },
  {
    "label": "eulerangles_assign_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eulerangles_assign_impl"
  },
  {
    "label": "AlphaAxisVector()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_EULERANGLESCLASS_H # define EIGEN_EULERANGLESCLASS_H namespace Eigen { template<_Scalar,class _System> class EulerAngles : public RotationBase<EulerAngles<_Scalar,_System>,3> { public : typedef RotationBase<EulerAngles<_Scalar,_System>,3> Base ; typedef _Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef _System System ; typedef Matrix<Scalar,3,3> Matrix3 ; typedef Matrix<Scalar,3,1> Vector3 ; typedef Quaternion<Scalar> QuaternionType ; typedef AngleAxis<Scalar> AngleAxisType ; Vector3)",
    "insertText": "AlphaAxisVector()"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (const Vector3& u =)",
    "insertText": "Unit(System::AlphaAxisAbs - 1)"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (const Vector3& u =)",
    "insertText": "Unit(System::BetaAxisAbs - 1)"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (const Vector3& u =)",
    "insertText": "Unit(System::GammaAxisAbs - 1)"
  },
  {
    "label": "EulerAngles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EulerAngles(const Scalar& alpha, const Scalar& beta, const Scalar& gamma) : m_angles(alpha, beta, gamma)"
  },
  {
    "label": "EulerAngles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EulerAngles(const Scalar* data) : m_angles(data)"
  },
  {
    "label": "EulerAngles()",
    "kind": "Method",
    "detail": "Function (} template<Derived>)",
    "insertText": "EulerAngles(const MatrixBase<Derived>& other)"
  },
  {
    "label": "EulerAngles()",
    "kind": "Method",
    "detail": "Function (* this = other ; } template<Derived>)",
    "insertText": "EulerAngles(const RotationBase<Derived, 3>& rot)"
  },
  {
    "label": "CalcEulerAngles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcEulerAngles(*this, rot.toRotationMatrix())"
  },
  {
    "label": "angles()",
    "kind": "Method",
    "detail": "Function (} const Vector3&)",
    "insertText": "angles()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EulerAngles res ; res . m_angles = - m_angles ; return res ; } EulerAngles)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class Derived> EulerAngles&)",
    "insertText": "operator(const MatrixBase<Derived>& other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<Scalar, typename Derived::Scalar>::value), YOU_MIXED_DIFFERENT_NUMERIC_TYPES__YOU_NEED_TO_USE_THE_CAST_METHOD_OF_MATRIXBASE_TO_CAST_NUMERIC_TYPES_EXPLICITLY) internal::eulerangles_assign_impl<System, Derived>::run(*this, other.derived())"
  },
  {
    "label": "toRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} Matrix3)",
    "insertText": "toRotationMatrix()"
  },
  {
    "label": "QuaternionType()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "QuaternionType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::ostream&)",
    "insertText": "operator(std::ostream& s, const EulerAngles<Scalar, System>& eulerAngles)"
  },
  {
    "label": "angles()",
    "kind": "Method",
    "detail": "Function (s<<eulerAngles .)",
    "insertText": "angles().transpose()"
  },
  {
    "label": "angles()",
    "kind": "Method",
    "detail": "Function (EulerAngles<NewScalarType,System> e ; e .)",
    "insertText": "angles() = angles().template cast<NewScalarType>()"
  },
  {
    "label": "EIGEN_EULER_ANGLES_TYPEDEFS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EIGEN_EULER_ANGLES_TYPEDEFS(SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(XYZ, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(XYX, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(XZY, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(XZX, SCALAR_TYPE, SCALAR_POSTFIX) \\ \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(YZX, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(YZY, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(YXZ, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(YXY, SCALAR_TYPE, SCALAR_POSTFIX) \\ \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(ZXY, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(ZXZ, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(ZYX, SCALAR_TYPE, SCALAR_POSTFIX) \\ EIGEN_EULER_ANGLES_SINGLE_TYPEDEF(ZYZ, SCALAR_TYPE, SCALAR_POSTFIX) EIGEN_EULER_ANGLES_TYPEDEFS(float, f) EIGEN_EULER_ANGLES_TYPEDEFS(double, d)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<_Scalar,class _System> struct traits<EulerAngles<_Scalar,_System>> { typedef _Scalar Scalar ; } ; template<class System,class Other> struct eulerangles_assign_impl<System,Other,3,3> { typedef Other::Scalar Scalar ; void)",
    "insertText": "run(EulerAngles<Scalar, System>& e, const Other& m)"
  },
  {
    "label": "CalcEulerAngles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcEulerAngles(e, m)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<class System,class Other> struct eulerangles_assign_impl<System,Other,3,1> { typedef Other::Scalar Scalar ; void)",
    "insertText": "run(EulerAngles<Scalar, System>& e, const Other& vec)"
  }
]