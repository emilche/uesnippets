[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSequencerPlayerBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerPlayerBase"
  },
  {
    "label": "TType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TType"
  },
  {
    "label": "FRootMotionOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootMotionOverride"
  },
  {
    "label": "FAnimSequencerData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSequencerData"
  },
  {
    "label": "FSequencerPlayerAnimSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerPlayerAnimSequence"
  },
  {
    "label": "FAnimSequencerInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSequencerInstanceProxy"
  },
  {
    "label": "FAnimNode_ApplyAdditive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_ApplyAdditive"
  },
  {
    "label": "FAnimNode_MultiWayBlend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_MultiWayBlend"
  },
  {
    "label": "FAnimNode_PoseSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_PoseSnapshot"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimInstanceProxy . h \" # include \" AnimNodes / AnimNode_SequenceEvaluator . h \" # include \" AnimNodes / AnimNode_ApplyAdditive . h \" # include \" AnimNodes / AnimNode_MultiWayBlend . h \" # include \" AnimNodes / AnimNode_PoseSnapshot . h \" # include \" AnimNodes / AnimNode_Mirror . h \" # include \" AnimSequencerInstanceProxy . generated . h \")",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "FSequencerPlayerBase()",
    "kind": "Method",
    "detail": "Function (SwapRootBone_Component,SwapRootBone_Actor,SwapRootBone_None } ; struct FSequencerPlayerBase { public :)",
    "insertText": "FSequencerPlayerBase() : PoseIndex(INDEX_NONE) , bAdditive(false)"
  },
  {
    "label": "IsOfType()",
    "kind": "Method",
    "detail": "Function (} template<class TType> bool)",
    "insertText": "IsOfType()"
  },
  {
    "label": "FSequencerPlayerBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSequencerPlayerBase()"
  },
  {
    "label": "IsOfTypeImpl()",
    "kind": "Method",
    "detail": "Function (} public : int32 PoseIndex ; bool bAdditive ; protected : bool)",
    "insertText": "IsOfTypeImpl(const FName& Type)"
  },
  {
    "label": "FAnimSequencerData()",
    "kind": "Method",
    "detail": "Function (} ; bool bBlendFirstChildOfRoot ; int32 ChildBoneIndex ; FTransform RootMotion ; FTransform PreviousTransform ; } ; struct FAnimSequencerData {)",
    "insertText": "FAnimSequencerData(UAnimSequenceBase* InAnimSequence, int32 InSequenceId, const TOptional<FRootMotionOverride>& InRootMotion, float InFromPosition, float InToPosition, float InWeight, bool bInFireNotifies, ESwapRootBone InSwapRootBone, TOptional<FTransform> InInitialTransform, UMirrorDataTable* InMirrorDataTable) : AnimSequence(InAnimSequence) , SequenceId(InSequenceId) , RootMotion(InRootMotion) , FromPosition(InFromPosition) , ToPosition(InToPosition) , Weight(InWeight) , bFireNotifies(bInFireNotifies) , SwapRootBone(InSwapRootBone) , InitialTransform(InInitialTransform) , MirrorDataTable(InMirrorDataTable)"
  },
  {
    "label": "SEQUENCER_INSTANCE_PLAYER_TYPE()",
    "kind": "Method",
    "detail": "Function (} UAnimSequenceBase* AnimSequence ; int32 SequenceId ; const TOptional<FRootMotionOverride>& RootMotion ; float FromPosition ; float ToPosition ; float Weight ; bool bFireNotifies ; ESwapRootBone SwapRootBone ; TOptional<FTransform> InitialTransform ; UMirrorDataTable* MirrorDataTable ; } ; # define)",
    "insertText": "SEQUENCER_INSTANCE_PLAYER_TYPE(TYPE, BASE) \\ static const FName& GetTypeId()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Type(TEXT(#TYPE))"
  },
  {
    "label": "SEQUENCER_INSTANCE_PLAYER_TYPE()",
    "kind": "Method",
    "detail": "Function (} struct FSequencerPlayerAnimSequence : public FSequencerPlayerBase {)",
    "insertText": "SEQUENCER_INSTANCE_PLAYER_TYPE(FSequencerPlayerAnimSequence, FSequencerPlayerBase)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (FAnimNode_SequenceEvaluator_Standalone PlayerNode ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: FAnimSequencerInstanceProxy()"
  },
  {
    "label": "FAnimSequencerInstanceProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimSequencerInstanceProxy(UAnimInstance* InAnimInstance) : FAnimInstanceProxy(InAnimInstance)"
  },
  {
    "label": "FAnimSequencerInstanceProxy()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAnimSequencerInstanceProxy()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(FPoseContext& Output)"
  },
  {
    "label": "PostEvaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEvaluate(UAnimInstance* InAnimInstance)"
  },
  {
    "label": "UpdateAnimationNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimationNode(const FAnimationUpdateContext& InContext)"
  },
  {
    "label": "UpdateAnimTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimTrack(UAnimSequenceBase* InAnimSequence, uint32 SequenceId, float InPosition, float Weight, bool bFireNotifies)"
  },
  {
    "label": "UpdateAnimTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimTrack(UAnimSequenceBase* InAnimSequence, uint32 SequenceId, TOptional<float> InFromPosition, float InToPosition, float Weight, bool bFireNotifies)"
  },
  {
    "label": "UpdateAnimTrackWithRootMotion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAnimTrackWithRootMotion(const FAnimSequencerData& InAnimSequencerData)"
  },
  {
    "label": "ResetNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNodes()"
  },
  {
    "label": "ResetPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPose()"
  },
  {
    "label": "ConstructNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructNodes()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UAnimInstance* InAnimInstance, FReferenceCollector& Collector)"
  },
  {
    "label": "UpdateAnimTrack()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateAnimTrack(UAnimSequenceBase* InAnimSequence, uint32 SequenceId, const TOptional<FRootMotionOverride>& RootMomtionOverride, TOptional<float> InFromPosition, float InToPosition, float Weight, bool bFireNotifies, UMirrorDataTable* InMirrorDataTable)"
  },
  {
    "label": "FindPlayer()",
    "kind": "Method",
    "detail": "Function (template<Type> Type*)",
    "insertText": "FindPlayer(uint32 SequenceId)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (FSequencerPlayerBase* Player = SequencerToPlayerMap .)",
    "insertText": "FindRef(SequenceId)"
  },
  {
    "label": "InitAnimTrack()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } struct FAnimNode_ApplyAdditive SequencerRootNode ; struct FAnimNode_MultiWayBlend FullBodyBlendNode ; struct FAnimNode_MultiWayBlend AdditiveBlendNode ; struct FAnimNode_PoseSnapshot SnapshotNode ; TMap<uint32,FSequencerPlayerBase*> SequencerToPlayerMap ; TMap<uint32,FAnimNode_Mirror_Standalone*> SequencerToMirrorMap ; TOptional<FRootMotionOverride> RootMotionOverride ; void)",
    "insertText": "InitAnimTrack(UAnimSequenceBase* InAnimSequence, uint32 SequenceId)"
  },
  {
    "label": "EnsureAnimTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureAnimTrack(UAnimSequenceBase* InAnimSequence, uint32 SequenceId)"
  },
  {
    "label": "ClearSequencePlayerAndMirrorMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSequencePlayerAndMirrorMaps()"
  }
]