[
  {
    "label": "compute_inverse_size4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "compute_inverse_size4"
  },
  {
    "label": "StorageOrdersMatch()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_INVERSE_SIZE_4_H # define EIGEN_INVERSE_SIZE_4_H namespace Eigen { namespace internal { template<MatrixType,ResultType> struct compute_inverse_size4<Architecture::Target,float,MatrixType,ResultType> { enum { MatrixAlignment = traits<MatrixType>::Alignment,ResultAlignment = traits<ResultType>::Alignment,)",
    "insertText": "StorageOrdersMatch(MatrixType::Flags & RowMajorBit) == (ResultType::Flags & RowMajorBit)"
  },
  {
    "label": "conditional()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "conditional(MatrixType::Flags & LinearAccessBit)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(const MatrixType &mat, ResultType &result)"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (ActualMatrixType)",
    "insertText": "matrix(mat)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const float* data = matrix .)",
    "insertText": "data()"
  },
  {
    "label": "innerStride()",
    "kind": "Method",
    "detail": "Function (const Index stride = matrix .)",
    "insertText": "innerStride()"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (Packet4f _L1 = ploadt<Packet4f,)",
    "insertText": "MatrixAlignment(data)"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (Packet4f _L2 = ploadt<Packet4f,)",
    "insertText": "MatrixAlignment(data + stride*4)"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (Packet4f _L3 = ploadt<Packet4f,)",
    "insertText": "MatrixAlignment(data + stride*8)"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (Packet4f _L4 = ploadt<Packet4f,)",
    "insertText": "MatrixAlignment(data + stride*12)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Packet4f A,B,C,D ;)",
    "insertText": "if(!StorageOrdersMatch)"
  },
  {
    "label": "vec4f_unpacklo()",
    "kind": "Method",
    "detail": "Function (A =)",
    "insertText": "vec4f_unpacklo(_L1, _L2)"
  },
  {
    "label": "vec4f_unpacklo()",
    "kind": "Method",
    "detail": "Function (B =)",
    "insertText": "vec4f_unpacklo(_L3, _L4)"
  },
  {
    "label": "vec4f_unpackhi()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "vec4f_unpackhi(_L1, _L2)"
  },
  {
    "label": "vec4f_unpackhi()",
    "kind": "Method",
    "detail": "Function (D =)",
    "insertText": "vec4f_unpackhi(_L3, _L4)"
  },
  {
    "label": "vec4f_movelh()",
    "kind": "Method",
    "detail": "Function (} else { A =)",
    "insertText": "vec4f_movelh(_L1, _L2)"
  },
  {
    "label": "vec4f_movehl()",
    "kind": "Method",
    "detail": "Function (B =)",
    "insertText": "vec4f_movehl(_L2, _L1)"
  },
  {
    "label": "vec4f_movelh()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "vec4f_movelh(_L3, _L4)"
  },
  {
    "label": "vec4f_movehl()",
    "kind": "Method",
    "detail": "Function (D =)",
    "insertText": "vec4f_movehl(_L4, _L3)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (} Packet4f AB,DC ; AB =)",
    "insertText": "pmul(vec4f_swizzle2(A, A, 3, 3, 0, 0), B)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (AB =)",
    "insertText": "psub(AB, pmul(vec4f_swizzle2(A, A, 1, 1, 2, 2), vec4f_swizzle2(B, B, 2, 3, 0, 1)))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (DC =)",
    "insertText": "pmul(vec4f_swizzle2(D, D, 3, 3, 0, 0), C)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (DC =)",
    "insertText": "psub(DC, pmul(vec4f_swizzle2(D, D, 1, 1, 2, 2), vec4f_swizzle2(C, C, 2, 3, 0, 1)))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f dA,dB,dC,dD ; dA =)",
    "insertText": "pmul(vec4f_swizzle2(A, A, 3, 3, 1, 1), A)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (dA =)",
    "insertText": "psub(dA, vec4f_movehl(dA, dA))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (dB =)",
    "insertText": "pmul(vec4f_swizzle2(B, B, 3, 3, 1, 1), B)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (dB =)",
    "insertText": "psub(dB, vec4f_movehl(dB, dB))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (dC =)",
    "insertText": "pmul(vec4f_swizzle2(C, C, 3, 3, 1, 1), C)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (dC =)",
    "insertText": "psub(dC, vec4f_movehl(dC, dC))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (dD =)",
    "insertText": "pmul(vec4f_swizzle2(D, D, 3, 3, 1, 1), D)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (dD =)",
    "insertText": "psub(dD, vec4f_movehl(dD, dD))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f d,d1,d2 ; d =)",
    "insertText": "pmul(vec4f_swizzle2(DC, DC, 0, 2, 1, 3), AB)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "padd(d, vec4f_movehl(d, d))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "padd(d, vec4f_swizzle2(d, d, 1, 0, 0, 0))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (d1 =)",
    "insertText": "pmul(dA, dD)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (d2 =)",
    "insertText": "pmul(dB, dC)"
  },
  {
    "label": "vec4f_duplane()",
    "kind": "Method",
    "detail": "Function (Packet4f det =)",
    "insertText": "vec4f_duplane(psub(padd(d1, d2), d), 0)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (Packet4f rd =)",
    "insertText": "pdiv(pset1<Packet4f>(1.0f), det)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f iA,iB,iC,iD ; iD =)",
    "insertText": "pmul(vec4f_swizzle2(C, C, 0, 0, 2, 2), vec4f_movelh(AB, AB))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (iD =)",
    "insertText": "padd(iD, pmul(vec4f_swizzle2(C, C, 1, 1, 3, 3), vec4f_movehl(AB, AB)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iD =)",
    "insertText": "psub(pmul(D, vec4f_duplane(dA, 0)), iD)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iA =)",
    "insertText": "pmul(vec4f_swizzle2(B, B, 0, 0, 2, 2), vec4f_movelh(DC, DC))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (iA =)",
    "insertText": "padd(iA, pmul(vec4f_swizzle2(B, B, 1, 1, 3, 3), vec4f_movehl(DC, DC)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iA =)",
    "insertText": "psub(pmul(A, vec4f_duplane(dD, 0)), iA)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iB =)",
    "insertText": "pmul(D, vec4f_swizzle2(AB, AB, 3, 0, 3, 0))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iB =)",
    "insertText": "psub(iB, pmul(vec4f_swizzle2(D, D, 1, 0, 3, 2), vec4f_swizzle2(AB, AB, 2, 1, 2, 1)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iB =)",
    "insertText": "psub(pmul(C, vec4f_duplane(dB, 0)), iB)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iC =)",
    "insertText": "pmul(A, vec4f_swizzle2(DC, DC, 3, 0, 3, 0))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iC =)",
    "insertText": "psub(iC, pmul(vec4f_swizzle2(A, A, 1, 0, 3, 2), vec4f_swizzle2(DC, DC, 2, 1, 2, 1)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iC =)",
    "insertText": "psub(pmul(B, vec4f_duplane(dC, 0)), iC)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float sign_mask [ 4 ] = { 0 . 0 f,numext::bit_cast<)",
    "insertText": "float(0x80000000u), numext::bit_cast<float>(0x80000000u)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (const Packet4f p4f_sign_PNNP = ploadu<)",
    "insertText": "Packet4f(sign_mask)"
  },
  {
    "label": "pxor()",
    "kind": "Method",
    "detail": "Function (rd =)",
    "insertText": "pxor(rd, p4f_sign_PNNP)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iA =)",
    "insertText": "pmul(iA, rd)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iB =)",
    "insertText": "pmul(iB, rd)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iC =)",
    "insertText": "pmul(iC, rd)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iD =)",
    "insertText": "pmul(iD, rd)"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (Index res_stride = result .)",
    "insertText": "outerStride()"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<float,Packet4f,)",
    "insertText": "ResultAlignment(res + 0, vec4f_swizzle2(iA, iB, 3, 1, 3, 1))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<float,Packet4f,)",
    "insertText": "ResultAlignment(res + res_stride, vec4f_swizzle2(iA, iB, 2, 0, 2, 0))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<float,Packet4f,)",
    "insertText": "ResultAlignment(res + 2 * res_stride, vec4f_swizzle2(iC, iD, 3, 1, 3, 1))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<float,Packet4f,)",
    "insertText": "ResultAlignment(res + 3 * res_stride, vec4f_swizzle2(iC, iD, 2, 0, 2, 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ; #)",
    "insertText": "if(defined EIGEN_VECTORIZE_NEON && !(EIGEN_ARCH_ARM64 && !EIGEN_APPLE_DOUBLE_NEON_BUG))"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (A1 = ploadt<Packet2d,)",
    "insertText": "MatrixAlignment(data + stride*0)"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (B1 = ploadt<Packet2d,)",
    "insertText": "MatrixAlignment(data + stride*2)"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (B2 = ploadt<Packet2d,)",
    "insertText": "MatrixAlignment(data + stride*6)"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (D1 = ploadt<Packet2d,)",
    "insertText": "MatrixAlignment(data + stride*10)"
  },
  {
    "label": "MatrixAlignment()",
    "kind": "Method",
    "detail": "Function (D2 = ploadt<Packet2d,)",
    "insertText": "MatrixAlignment(data + stride*14)"
  },
  {
    "label": "vec2d_unpacklo()",
    "kind": "Method",
    "detail": "Function (temp = A1 ; A1 =)",
    "insertText": "vec2d_unpacklo(A1, A2)"
  },
  {
    "label": "vec2d_unpackhi()",
    "kind": "Method",
    "detail": "Function (A2 =)",
    "insertText": "vec2d_unpackhi(temp, A2)"
  },
  {
    "label": "vec2d_unpacklo()",
    "kind": "Method",
    "detail": "Function (temp = C1 ; C1 =)",
    "insertText": "vec2d_unpacklo(C1, C2)"
  },
  {
    "label": "vec2d_unpackhi()",
    "kind": "Method",
    "detail": "Function (C2 =)",
    "insertText": "vec2d_unpackhi(temp, C2)"
  },
  {
    "label": "vec2d_unpacklo()",
    "kind": "Method",
    "detail": "Function (temp = B1 ; B1 =)",
    "insertText": "vec2d_unpacklo(B1, B2)"
  },
  {
    "label": "vec2d_unpackhi()",
    "kind": "Method",
    "detail": "Function (B2 =)",
    "insertText": "vec2d_unpackhi(temp, B2)"
  },
  {
    "label": "vec2d_unpacklo()",
    "kind": "Method",
    "detail": "Function (temp = D1 ; D1 =)",
    "insertText": "vec2d_unpacklo(D1, D2)"
  },
  {
    "label": "vec2d_unpackhi()",
    "kind": "Method",
    "detail": "Function (D2 =)",
    "insertText": "vec2d_unpackhi(temp, D2)"
  },
  {
    "label": "vec2d_swizzle2()",
    "kind": "Method",
    "detail": "Function (} Packet2d dA,dB,dC,dD ; dA =)",
    "insertText": "vec2d_swizzle2(A2, A2, 1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (dA =)",
    "insertText": "pmul(A1, dA)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (dA =)",
    "insertText": "psub(dA, vec2d_duplane(dA, 1))"
  },
  {
    "label": "vec2d_swizzle2()",
    "kind": "Method",
    "detail": "Function (dB =)",
    "insertText": "vec2d_swizzle2(B2, B2, 1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (dB =)",
    "insertText": "pmul(B1, dB)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (dB =)",
    "insertText": "psub(dB, vec2d_duplane(dB, 1))"
  },
  {
    "label": "vec2d_swizzle2()",
    "kind": "Method",
    "detail": "Function (dC =)",
    "insertText": "vec2d_swizzle2(C2, C2, 1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (dC =)",
    "insertText": "pmul(C1, dC)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (dC =)",
    "insertText": "psub(dC, vec2d_duplane(dC, 1))"
  },
  {
    "label": "vec2d_swizzle2()",
    "kind": "Method",
    "detail": "Function (dD =)",
    "insertText": "vec2d_swizzle2(D2, D2, 1)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (dD =)",
    "insertText": "pmul(D1, dD)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (dD =)",
    "insertText": "psub(dD, vec2d_duplane(dD, 1))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet2d DC1,DC2,AB1,AB2 ; AB1 =)",
    "insertText": "pmul(B1, vec2d_duplane(A2, 1))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (AB2 =)",
    "insertText": "pmul(B2, vec2d_duplane(A1, 0))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (AB1 =)",
    "insertText": "psub(AB1, pmul(B2, vec2d_duplane(A1, 1)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (AB2 =)",
    "insertText": "psub(AB2, pmul(B1, vec2d_duplane(A2, 0)))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (DC1 =)",
    "insertText": "pmul(C1, vec2d_duplane(D2, 1))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (DC2 =)",
    "insertText": "pmul(C2, vec2d_duplane(D1, 0))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (DC1 =)",
    "insertText": "psub(DC1, pmul(C2, vec2d_duplane(D1, 1)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (DC2 =)",
    "insertText": "psub(DC2, pmul(C1, vec2d_duplane(D2, 0)))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet2d d1,d2 ; Packet2d det ; Packet2d rd ; d1 =)",
    "insertText": "pmul(AB1, vec2d_swizzle2(DC1, DC2, 0))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (d2 =)",
    "insertText": "pmul(AB2, vec2d_swizzle2(DC1, DC2, 3))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (rd =)",
    "insertText": "padd(d1, d2)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (rd =)",
    "insertText": "padd(rd, vec2d_duplane(rd, 1))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (det =)",
    "insertText": "psub(det, rd)"
  },
  {
    "label": "vec2d_duplane()",
    "kind": "Method",
    "detail": "Function (det =)",
    "insertText": "vec2d_duplane(det, 0)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (rd =)",
    "insertText": "pdiv(pset1<Packet2d>(1.0), det)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet2d iA1,iA2,iB1,iB2,iC1,iC2,iD1,iD2 ; iD1 =)",
    "insertText": "pmul(AB1, vec2d_duplane(C1, 0))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iD2 =)",
    "insertText": "pmul(AB1, vec2d_duplane(C2, 0))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (iD1 =)",
    "insertText": "padd(iD1, pmul(AB2, vec2d_duplane(C1, 1)))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (iD2 =)",
    "insertText": "padd(iD2, pmul(AB2, vec2d_duplane(C2, 1)))"
  },
  {
    "label": "vec2d_duplane()",
    "kind": "Method",
    "detail": "Function (dA =)",
    "insertText": "vec2d_duplane(dA, 0)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iD1 =)",
    "insertText": "psub(pmul(D1, dA), iD1)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iD2 =)",
    "insertText": "psub(pmul(D2, dA), iD2)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iA1 =)",
    "insertText": "pmul(DC1, vec2d_duplane(B1, 0))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iA2 =)",
    "insertText": "pmul(DC1, vec2d_duplane(B2, 0))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (iA1 =)",
    "insertText": "padd(iA1, pmul(DC2, vec2d_duplane(B1, 1)))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (iA2 =)",
    "insertText": "padd(iA2, pmul(DC2, vec2d_duplane(B2, 1)))"
  },
  {
    "label": "vec2d_duplane()",
    "kind": "Method",
    "detail": "Function (dD =)",
    "insertText": "vec2d_duplane(dD, 0)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iA1 =)",
    "insertText": "psub(pmul(A1, dD), iA1)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iA2 =)",
    "insertText": "psub(pmul(A2, dD), iA2)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iB1 =)",
    "insertText": "pmul(D1, vec2d_swizzle2(AB2, AB1, 1))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iB2 =)",
    "insertText": "pmul(D2, vec2d_swizzle2(AB2, AB1, 1))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iB1 =)",
    "insertText": "psub(iB1, pmul(vec2d_swizzle2(D1, D1, 1), vec2d_swizzle2(AB2, AB1, 2)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iB2 =)",
    "insertText": "psub(iB2, pmul(vec2d_swizzle2(D2, D2, 1), vec2d_swizzle2(AB2, AB1, 2)))"
  },
  {
    "label": "vec2d_duplane()",
    "kind": "Method",
    "detail": "Function (dB =)",
    "insertText": "vec2d_duplane(dB, 0)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iB1 =)",
    "insertText": "psub(pmul(C1, dB), iB1)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iB2 =)",
    "insertText": "psub(pmul(C2, dB), iB2)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iC1 =)",
    "insertText": "pmul(A1, vec2d_swizzle2(DC2, DC1, 1))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (iC2 =)",
    "insertText": "pmul(A2, vec2d_swizzle2(DC2, DC1, 1))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iC1 =)",
    "insertText": "psub(iC1, pmul(vec2d_swizzle2(A1, A1, 1), vec2d_swizzle2(DC2, DC1, 2)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iC2 =)",
    "insertText": "psub(iC2, pmul(vec2d_swizzle2(A2, A2, 1), vec2d_swizzle2(DC2, DC1, 2)))"
  },
  {
    "label": "vec2d_duplane()",
    "kind": "Method",
    "detail": "Function (dC =)",
    "insertText": "vec2d_duplane(dC, 0)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iC1 =)",
    "insertText": "psub(pmul(B1, dC), iC1)"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (iC2 =)",
    "insertText": "psub(pmul(B2, dC), iC2)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double sign_mask1 [ 2 ] = { 0 . 0,numext::bit_cast<)",
    "insertText": "double(0x8000000000000000ull)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (const Packet2d sign_PN = ploadu<)",
    "insertText": "Packet2d(sign_mask1)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (const Packet2d sign_NP = ploadu<)",
    "insertText": "Packet2d(sign_mask2)"
  },
  {
    "label": "pxor()",
    "kind": "Method",
    "detail": "Function (d1 =)",
    "insertText": "pxor(rd, sign_PN)"
  },
  {
    "label": "pxor()",
    "kind": "Method",
    "detail": "Function (d2 =)",
    "insertText": "pxor(rd, sign_NP)"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResultAlignment(res + 0, pmul(vec2d_swizzle2(iA2, iA1, 3), d1))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResultAlignment(res + res_stride, pmul(vec2d_swizzle2(iA2, iA1, 0), d2))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResultAlignment(res + 2, pmul(vec2d_swizzle2(iB2, iB1, 3), d1))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResultAlignment(res + res_stride + 2, pmul(vec2d_swizzle2(iB2, iB1, 0), d2))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResultAlignment(res + 2 * res_stride, pmul(vec2d_swizzle2(iC2, iC1, 3), d1))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResultAlignment(res + 3 * res_stride, pmul(vec2d_swizzle2(iC2, iC1, 0), d2))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResultAlignment(res + 2 * res_stride + 2, pmul(vec2d_swizzle2(iD2, iD1, 3), d1))"
  },
  {
    "label": "ResultAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResultAlignment(res + 3 * res_stride + 2, pmul(vec2d_swizzle2(iD2, iD1, 0), d2))"
  }
]