[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Range",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Range"
  },
  {
    "label": "_Rp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Rp"
  },
  {
    "label": "_Ep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Ep"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_CONCEPTS_H # define _LIBCPP___RANGES_CONCEPTS_H # include<__concepts / constructible . h> # include<__concepts / movable . h> # include<__concepts / same_as . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iter_move . h> # include<__iterator / iterator_traits . h> # include<__iterator / readable_traits . h> # include<__ranges / access . h> # include<__ranges / data . h> # include<__ranges / enable_borrowed_range . h> # include<__ranges / enable_view . h> # include<__ranges / size . h> # include<initializer_list> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (template<class _Tp> concept range =)",
    "insertText": "requires(_Tp& __t)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "begin(__t)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "end(__t)"
  },
  {
    "label": "_Range()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp> concept input_range = range<_Tp>&& input_iterator<iterator_t<_Tp>> ; template<class _Range> concept borrowed_range = range<)",
    "insertText": "_Range(is_lvalue_reference_v<_Range> || enable_borrowed_range<remove_cvref_t<_Range>>)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<range _Rp> using sentinel_t =)",
    "insertText": "decltype(ranges::end(declval<_Rp&>()))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size(__t)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<sized_range _Rp> using range_size_t =)",
    "insertText": "decltype(ranges::size(declval<_Rp&>()))"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (same_as<add_pointer_t<range_reference_t<_Tp>>>)",
    "insertText": "data(__t)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp> concept common_range = range<_Tp>&& same_as<iterator_t<_Tp>,sentinel_t<_Tp>> ; template<class _Tp> bool __is_std_initializer_list = false ; template<class _Ep> bool __is_std_initializer_list<initializer_list<_Ep>> = true ; template<class _Tp> concept viewable_range = range<)",
    "insertText": "_Tp((view<remove_cvref_t<_Tp>> && constructible_from<remove_cvref_t<_Tp>, _Tp>) || (!view<remove_cvref_t<_Tp>> && (is_lvalue_reference_v<_Tp> || (movable<remove_reference_t<_Tp>> && !__is_std_initializer_list<remove_cvref_t<_Tp>>))))"
  }
]