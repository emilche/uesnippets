[
  {
    "label": "Node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Node"
  },
  {
    "label": "Snippet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Snippet"
  },
  {
    "label": "Package",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Package"
  },
  {
    "label": "Project",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Project"
  },
  {
    "label": "SBuildContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBuildContext"
  },
  {
    "label": "SProgramContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SProgramContext"
  },
  {
    "label": "CUTF8StringView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CUTF8StringView"
  },
  {
    "label": "CSemanticProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticProgram"
  },
  {
    "label": "SIntraSemInjectArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SIntraSemInjectArgs"
  },
  {
    "label": "FeatureType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FeatureType"
  },
  {
    "label": "TApiLayerInjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TApiLayerInjection"
  },
  {
    "label": "IPreParseInjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPreParseInjection"
  },
  {
    "label": "IPostParseInjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPostParseInjection"
  },
  {
    "label": "IPreSemAnalysisInjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPreSemAnalysisInjection"
  },
  {
    "label": "IIntraSemAnalysisInjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IIntraSemAnalysisInjection"
  },
  {
    "label": "IPostSemAnalysisInjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPostSemAnalysisInjection"
  },
  {
    "label": "IPreTranslateInjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPreTranslateInjection"
  },
  {
    "label": "IPreLinkInjection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPreLinkInjection"
  },
  {
    "label": "SIntraSemInjectArgs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Toolchain / ModularFeature . h \" # include \" uLang / CompilerPasses / SemanticAnalyzerPassUtils . h \" # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Semantics / SemanticProgram . h \" namespace Verse { namespace Vst { struct Node ; struct Snippet ; struct Package ; struct Project ; } } namespace uLang { struct SBuildContext ; struct SProgramContext ; class CUTF8StringView ; class CSemanticProgram ; struct SIntraSemInjectArgs {)",
    "insertText": "SIntraSemInjectArgs(const TSRef<CSemanticProgram>& Program) : _Program(Program)"
  },
  {
    "label": "Ingest()",
    "kind": "Method",
    "detail": "Function (} const TSRef<CSemanticProgram>& _Program ; ESemanticPass _InjectionPass = ESemanticPass::SemanticPass_Invalid ; } ; template<class FeatureType,. . . InjectionArgsType> class TApiLayerInjection : public TModularFeature<FeatureType> { public : bool)",
    "insertText": "Ingest(InjectionArgsType... Args, const SBuildContext& BuildParams)"
  },
  {
    "label": "ULANG_FEATURE_ID_DECL()",
    "kind": "Method",
    "detail": "Function (} ; class IPreParseInjection : public TApiLayerInjection<IPreParseInjection,const CUTF8StringView&> {)",
    "insertText": "ULANG_FEATURE_ID_DECL(IPreParseInjection)"
  },
  {
    "label": "ULANG_FEATURE_ID_DECL()",
    "kind": "Method",
    "detail": "Function (} ; class IPostParseInjection : public TApiLayerInjection<IPostParseInjection,const TSRef<Verse::Vst::Snippet>&> {)",
    "insertText": "ULANG_FEATURE_ID_DECL(IPostParseInjection)"
  },
  {
    "label": "ULANG_FEATURE_ID_DECL()",
    "kind": "Method",
    "detail": "Function (} ; class IPreSemAnalysisInjection : public TApiLayerInjection<IPreSemAnalysisInjection,const TSRef<Verse::Vst::Project>&,const SProgramContext&> {)",
    "insertText": "ULANG_FEATURE_ID_DECL(IPreSemAnalysisInjection)"
  },
  {
    "label": "ULANG_FEATURE_ID_DECL()",
    "kind": "Method",
    "detail": "Function (} ; class IIntraSemAnalysisInjection : public TApiLayerInjection<IIntraSemAnalysisInjection,const SIntraSemInjectArgs&,const SProgramContext&> {)",
    "insertText": "ULANG_FEATURE_ID_DECL(IIntraSemAnalysisInjection)"
  },
  {
    "label": "ULANG_FEATURE_ID_DECL()",
    "kind": "Method",
    "detail": "Function (} ; class IPostSemAnalysisInjection : public TApiLayerInjection<IPostSemAnalysisInjection,const TSRef<CSemanticProgram>&,const SProgramContext&> {)",
    "insertText": "ULANG_FEATURE_ID_DECL(IPostSemAnalysisInjection)"
  },
  {
    "label": "ULANG_FEATURE_ID_DECL()",
    "kind": "Method",
    "detail": "Function (} ; class IPreTranslateInjection : public TApiLayerInjection<IPreTranslateInjection,const TSRef<CSemanticProgram>&,const SProgramContext&> {)",
    "insertText": "ULANG_FEATURE_ID_DECL(IPreTranslateInjection)"
  },
  {
    "label": "ULANG_FEATURE_ID_DECL()",
    "kind": "Method",
    "detail": "Function (} ; class IPreLinkInjection : public TApiLayerInjection<IPreLinkInjection,const SProgramContext&> {)",
    "insertText": "ULANG_FEATURE_ID_DECL(IPreLinkInjection)"
  }
]