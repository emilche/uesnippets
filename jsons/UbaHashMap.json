[
  {
    "label": "HashMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashMap"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "HashMap2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashMap2"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace uba { template<Key,Value> struct HashMap { struct Entry { Key key ; u32 next ; } ; void)",
    "insertText": "Init(MemoryBlock& memory, u64 maxSize)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (u32 v =)",
    "insertText": "u32(maxSize)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (v - - ; v | = v>> 1 ; v | = v>> 2 ; v | = v>> 4 ; v | = v>> 8 ; v | = v>> 1 6 ; v + + ; u32 lookupSize = v ; mask = lookupSize - 1 ; nextAvailableEntry = 1 ;)",
    "insertText": "lookup(u32*)memory.Allocate(lookupSize*sizeof(u32), 1, TC(\"\"))"
  },
  {
    "label": "entries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "entries(Entry*)memory.Allocate((maxSize+1)*sizeof(Entry), alignof(Entry), TC(\"\"))"
  },
  {
    "label": "values()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "values(Value*)memory.Allocate((maxSize+1)*sizeof(Value), alignof(Value), TC(\"\"))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} Value&)",
    "insertText": "Insert(const Key& key)"
  },
  {
    "label": "Key()",
    "kind": "Method",
    "detail": "Function (u32 index = std::hash<)",
    "insertText": "Key()(key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u32 entryIndex = lookup [ index ] ;)",
    "insertText": "if(entryIndex == 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (entryIndex = nextAvailableEntry + + ; lookup [ index ] = entryIndex ; Entry& entry = entries [ entryIndex ] ; entry . key = key ; entry . next = ~ 0 u ; return values [ entryIndex ] ; })",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Entry& entry = entries [ entryIndex ] ;)",
    "insertText": "if(entry.key == key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (entryIndex = entry . next ; continue ; } u32 newEntryIndex = entry . next = nextAvailableEntry + + ; Entry& newEntry = entries [ newEntryIndex ] ; newEntry . key = key ; newEntry . next = ~ 0 u ; return values [ newEntryIndex ] ; } } Value*)",
    "insertText": "Find(const Key& key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (entryIndex = entry -> next ;)",
    "insertText": "if(entryIndex == ~0u)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (entry = entries + entryIndex ; } } const Key*)",
    "insertText": "GetKey(Value* value)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (u32 pos =)",
    "insertText": "u32(value - values)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (auto& entry = entries [ pos ] ;)",
    "insertText": "if(entry.next == 0)"
  },
  {
    "label": "ValuesBegin()",
    "kind": "Method",
    "detail": "Function (prevNext =& entry -> next ; entry = entries + entryIndex ; } } Value*)",
    "insertText": "ValuesBegin()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (entry = entries + entryIndex ; } } u32)",
    "insertText": "Size()"
  }
]