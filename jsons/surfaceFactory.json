[
  {
    "label": "SurfaceFactoryCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SurfaceFactoryCache"
  },
  {
    "label": "FaceTopology",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FaceTopology"
  },
  {
    "label": "FaceSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FaceSurface"
  },
  {
    "label": "SurfaceFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SurfaceFactory"
  },
  {
    "label": "Options",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Options"
  },
  {
    "label": "SurfaceSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SurfaceSet"
  },
  {
    "label": "Options()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_BFR_SURFACE_FACTORY_H # define OPENSUBDIV3_BFR_SURFACE_FACTORY_H # include \" . . / version . h \" # include \" . . / bfr / surface . h \" # include \" . . / bfr / surfaceFactoryMeshAdapter . h \" # include \" . . / sdc / options . h \" # include \" . . / sdc / types . h \" # include<cstdint> namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Bfr { class SurfaceFactoryCache ; class FaceTopology ; class FaceSurface ; class SurfaceFactory : public SurfaceFactoryMeshAdapter { public : class Options { public :)",
    "insertText": "Options() : _dfltFVarID(-1), _externCache(0), _enableCache(true), _approxLevelSmooth(2), _approxLevelSharp(6)"
  },
  {
    "label": "SetDefaultFVarID()",
    "kind": "Method",
    "detail": "Function (} Options&)",
    "insertText": "SetDefaultFVarID(FVarID id)"
  },
  {
    "label": "GetDefaultFVarID()",
    "kind": "Method",
    "detail": "Function (FVarID)",
    "insertText": "GetDefaultFVarID()"
  },
  {
    "label": "IsCachingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachingEnabled()"
  },
  {
    "label": "GetExternalCache()",
    "kind": "Method",
    "detail": "Function (SurfaceFactoryCache*)",
    "insertText": "GetExternalCache()"
  },
  {
    "label": "GetApproxLevelSmooth()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetApproxLevelSmooth()"
  },
  {
    "label": "GetApproxLevelSharp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetApproxLevelSharp()"
  },
  {
    "label": "GetSchemeType()",
    "kind": "Method",
    "detail": "Function (Sdc::SchemeType)",
    "insertText": "GetSchemeType()"
  },
  {
    "label": "GetFaceParameterization()",
    "kind": "Method",
    "detail": "Function (Parameterization)",
    "insertText": "GetFaceParameterization(Index faceIndex)"
  },
  {
    "label": "InitVertexSurface()",
    "kind": "Method",
    "detail": "Function (public : template<REAL> bool)",
    "insertText": "InitVertexSurface(Index faceIndex, Surface<REAL> * surface)"
  },
  {
    "label": "InitVaryingSurface()",
    "kind": "Method",
    "detail": "Function (template<REAL> bool)",
    "insertText": "InitVaryingSurface(Index faceIndex, Surface<REAL> * surface)"
  },
  {
    "label": "InitFaceVaryingSurface()",
    "kind": "Method",
    "detail": "Function (template<REAL> bool)",
    "insertText": "InitFaceVaryingSurface(Index faceIndex, Surface<REAL> * surface)"
  },
  {
    "label": "InitFaceVaryingSurface()",
    "kind": "Method",
    "detail": "Function (template<REAL> bool)",
    "insertText": "InitFaceVaryingSurface(Index faceIndex, Surface<REAL> * surface, FVarID fvarID)"
  },
  {
    "label": "InitSurfaces()",
    "kind": "Method",
    "detail": "Function (template<REAL> bool)",
    "insertText": "InitSurfaces(Index faceIndex, Surface<REAL> * vtxSurface, Surface<REAL> * fvarSurfaces, FVarID const fvarIDs[] = 0, int fvarCount = 0, Surface<REAL> * varSurface = 0)"
  },
  {
    "label": "CreateVertexSurface()",
    "kind": "Method",
    "detail": "Function (template<REAL = float> Surface<REAL>*)",
    "insertText": "CreateVertexSurface(Index faceIndex)"
  },
  {
    "label": "CreateVaryingSurface()",
    "kind": "Method",
    "detail": "Function (template<REAL = float> Surface<REAL>*)",
    "insertText": "CreateVaryingSurface(Index faceIndex)"
  },
  {
    "label": "CreateFaceVaryingSurface()",
    "kind": "Method",
    "detail": "Function (template<REAL = float> Surface<REAL>*)",
    "insertText": "CreateFaceVaryingSurface(Index faceIndex)"
  },
  {
    "label": "CreateFaceVaryingSurface()",
    "kind": "Method",
    "detail": "Function (template<REAL = float> Surface<REAL>*)",
    "insertText": "CreateFaceVaryingSurface(Index faceIndex, FVarID id)"
  },
  {
    "label": "SurfaceFactory()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SurfaceFactory(Sdc::SchemeType schemeType, Sdc::Options const & schemeOptions, Options const & limitOptions)"
  },
  {
    "label": "setInternalCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInternalCache(SurfaceFactoryCache * cache)"
  },
  {
    "label": "SurfaceFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SurfaceFactory(SurfaceFactory const &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SurfaceFactory&)",
    "insertText": "operator(SurfaceFactory const &)"
  },
  {
    "label": "setSubdivisionOptions()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "setSubdivisionOptions(Sdc::SchemeType, Sdc::Options const & options)"
  },
  {
    "label": "setFactoryOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFactoryOptions(Options const & factoryOptions)"
  },
  {
    "label": "faceHasLimitSimple()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "faceHasLimitSimple(Index faceIndex, int faceSize)"
  },
  {
    "label": "faceHasLimitNeighborhood()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "faceHasLimitNeighborhood(Index faceIndex)"
  },
  {
    "label": "faceHasLimitNeighborhood()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "faceHasLimitNeighborhood(FaceTopology const & faceTopology)"
  },
  {
    "label": "populateAllSurfaces()",
    "kind": "Method",
    "detail": "Function (class SurfaceSet ; bool)",
    "insertText": "populateAllSurfaces(Index faceIndex, SurfaceSet * sSetPtr)"
  },
  {
    "label": "populateLinearSurfaces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "populateLinearSurfaces(Index faceIndex, SurfaceSet * sSetPtr)"
  },
  {
    "label": "populateNonLinearSurfaces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "populateNonLinearSurfaces(Index faceIndex, SurfaceSet * sSetPtr)"
  },
  {
    "label": "initSurfaces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initSurfaces(Index faceIndex, internal::SurfaceData * vtxSurface, internal::SurfaceData * varSurface, internal::SurfaceData * fvarSurfaces, int fvarCount, FVarID const fvarIDs[])"
  },
  {
    "label": "isFaceNeighborhoodRegular()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFaceNeighborhoodRegular(Index faceIndex, FVarID const * fvarPtrOrVtx, Index indices[])"
  },
  {
    "label": "initFaceNeighborhoodTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initFaceNeighborhoodTopology(Index faceIndex, FaceTopology * topology)"
  },
  {
    "label": "gatherFaceNeighborhoodTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "gatherFaceNeighborhoodTopology(Index faceIndex, FaceTopology * topology)"
  },
  {
    "label": "gatherFaceNeighborhoodIndices()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "gatherFaceNeighborhoodIndices(Index faceIndex, FaceTopology const & topology, FVarID const * fvarPtrOrVtx, Index indices[])"
  },
  {
    "label": "assignLinearSurface()",
    "kind": "Method",
    "detail": "Function (typedef internal::SurfaceData SurfaceType ; void)",
    "insertText": "assignLinearSurface(SurfaceType * surfacePtr, Index faceIndex, FVarID const * fvarPtrOrVtx)"
  },
  {
    "label": "assignRegularSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignRegularSurface(SurfaceType * surfacePtr, Index const surfacePatchPoints[])"
  },
  {
    "label": "assignRegularSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignRegularSurface(SurfaceType * surfacePtr, FaceSurface const & surfaceDescription)"
  },
  {
    "label": "assignIrregularSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignIrregularSurface(SurfaceType * surfacePtr, FaceSurface const & surfaceDescription)"
  },
  {
    "label": "copyNonLinearSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyNonLinearSurface(SurfaceType * surfacePtr, SurfaceType const & surfaceSource, FaceSurface const & surfaceDescription)"
  },
  {
    "label": "EnableCaching()",
    "kind": "Method",
    "detail": "Function (_dfltFVarID = id ; return* this ; } SurfaceFactory::Options& SurfaceFactory::)",
    "insertText": "EnableCaching(bool on)"
  },
  {
    "label": "SetExternalCache()",
    "kind": "Method",
    "detail": "Function (_enableCache = on ; return* this ; } SurfaceFactory::Options& SurfaceFactory::)",
    "insertText": "SetExternalCache(SurfaceFactoryCache * c)"
  },
  {
    "label": "SetApproxLevelSmooth()",
    "kind": "Method",
    "detail": "Function (_externCache = c ; return* this ; } SurfaceFactory::Options& SurfaceFactory::)",
    "insertText": "SetApproxLevelSmooth(int level)"
  },
  {
    "label": "_approxLevelSmooth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_approxLevelSmooth(unsigned char)"
  },
  {
    "label": "_approxLevelSharp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_approxLevelSharp(unsigned char)"
  },
  {
    "label": "InitVaryingSurface()",
    "kind": "Method",
    "detail": "Function (} template<REAL> bool)",
    "insertText": "InitVaryingSurface(Index face, Surface<REAL> * s)"
  },
  {
    "label": "InitFaceVaryingSurface()",
    "kind": "Method",
    "detail": "Function (} template<REAL> bool)",
    "insertText": "InitFaceVaryingSurface(Index face, Surface<REAL> * s, FVarID fvarID)"
  },
  {
    "label": "InitFaceVaryingSurface()",
    "kind": "Method",
    "detail": "Function (} template<REAL> bool)",
    "insertText": "InitFaceVaryingSurface(Index face, Surface<REAL> * s)"
  },
  {
    "label": "InitSurfaces()",
    "kind": "Method",
    "detail": "Function (} template<REAL> bool)",
    "insertText": "InitSurfaces(Index faceIndex, Surface<REAL> * vtxSurface, Surface<REAL> * fvarSurfaces, FVarID const fvarIDs[], int fvarCount, Surface<REAL> * varSurface)"
  },
  {
    "label": "fvarSurfaces()",
    "kind": "Method",
    "detail": "Function (bool useDfltFVarID =)",
    "insertText": "fvarSurfaces(fvarIDs == 0) && (fvarCount == 0)"
  },
  {
    "label": "REAL()",
    "kind": "Method",
    "detail": "Function (Surface<REAL>* s = new Surface<)",
    "insertText": "REAL()"
  },
  {
    "label": "CreateFaceVaryingSurface()",
    "kind": "Method",
    "detail": "Function (delete s ; return 0 ; } template<REAL> Surface<REAL>*)",
    "insertText": "CreateFaceVaryingSurface(Index faceIndex, FVarID fvarID)"
  },
  {
    "label": "CreateFaceVaryingSurface()",
    "kind": "Method",
    "detail": "Function (delete s ; return 0 ; } template<REAL> Surface<REAL>*)",
    "insertText": "CreateFaceVaryingSurface(Index face)"
  }
]