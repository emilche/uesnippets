[
  {
    "label": "recursive_mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "recursive_mutex"
  },
  {
    "label": "scoped_lock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "scoped_lock"
  },
  {
    "label": "state_t",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "state_t"
  },
  {
    "label": "recursive_mutex()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_recursive_mutex_H # define __TBB_recursive_mutex_H # if _WIN32 | | _WIN64 # include \" machine / windows_api . h \" # else # include<pthread . h> # endif # include<new> # include \" aligned_space . h \" # include \" tbb_stddef . h \" # include \" tbb_profiling . h \" namespace tbb { class recursive_mutex : internal::mutex_copy_deprecated_and_disabled { public :)",
    "insertText": "recursive_mutex()"
  },
  {
    "label": "internal_construct()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT | | TBB_USE_THREADING_TOOLS)",
    "insertText": "internal_construct()"
  },
  {
    "label": "InitializeCriticalSectionEx()",
    "kind": "Method",
    "detail": "Function (# else # if _WIN32 | | _WIN64)",
    "insertText": "InitializeCriticalSectionEx(&impl, 4000, 0)"
  },
  {
    "label": "pthread_mutexattr_init()",
    "kind": "Method",
    "detail": "Function (# else pthread_mutexattr_t mtx_attr ; int error_code =)",
    "insertText": "pthread_mutexattr_init(&mtx_attr)"
  },
  {
    "label": "pthread_mutexattr_settype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutexattr_settype(&mtx_attr, PTHREAD_MUTEX_RECURSIVE)"
  },
  {
    "label": "pthread_mutex_init()",
    "kind": "Method",
    "detail": "Function (error_code =)",
    "insertText": "pthread_mutex_init(&impl, &mtx_attr)"
  },
  {
    "label": "pthread_mutexattr_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutexattr_destroy(&mtx_attr)"
  },
  {
    "label": "internal_destroy()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT)",
    "insertText": "internal_destroy()"
  },
  {
    "label": "DeleteCriticalSection()",
    "kind": "Method",
    "detail": "Function (# else # if _WIN32 | | _WIN64)",
    "insertText": "DeleteCriticalSection(&impl)"
  },
  {
    "label": "pthread_mutex_destroy()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "pthread_mutex_destroy(&impl)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (# endif # endif } ; class scoped_lock ; class scoped_lock ; class scoped_lock : internal::no_copy { public :)",
    "insertText": "scoped_lock() : my_mutex(NULL)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "scoped_lock(recursive_mutex& mutex)"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT my_mutex =& mutex ; # endif)",
    "insertText": "acquire(mutex)"
  },
  {
    "label": "scoped_lock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "scoped_lock()"
  },
  {
    "label": "acquire()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "acquire(recursive_mutex& mutex)"
  },
  {
    "label": "internal_acquire()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT)",
    "insertText": "internal_acquire(mutex)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (# else my_mutex =& mutex ; mutex .)",
    "insertText": "lock()"
  },
  {
    "label": "try_acquire()",
    "kind": "Method",
    "detail": "Function (# endif } bool)",
    "insertText": "try_acquire(recursive_mutex& mutex)"
  },
  {
    "label": "internal_try_acquire()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT return)",
    "insertText": "internal_try_acquire(mutex)"
  },
  {
    "label": "try_lock()",
    "kind": "Method",
    "detail": "Function (# else bool result = mutex .)",
    "insertText": "try_lock()"
  },
  {
    "label": "internal_release()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT)",
    "insertText": "internal_release()"
  },
  {
    "label": "unlock()",
    "kind": "Method",
    "detail": "Function (# else my_mutex ->)",
    "insertText": "unlock()"
  },
  {
    "label": "internal_acquire()",
    "kind": "Method",
    "detail": "Function (my_mutex = NULL ; # endif } private : recursive_mutex* my_mutex ; void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_acquire(recursive_mutex& m)"
  },
  {
    "label": "internal_try_acquire()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_try_acquire(recursive_mutex& m)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT aligned_space<scoped_lock> tmp ;)",
    "insertText": "new(tmp.begin()) scoped_lock(*this)"
  },
  {
    "label": "EnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (# else # if _WIN32 | | _WIN64)",
    "insertText": "EnterCriticalSection(&impl)"
  },
  {
    "label": "pthread_mutex_lock()",
    "kind": "Method",
    "detail": "Function (# else int error_code =)",
    "insertText": "pthread_mutex_lock(&impl)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT aligned_space<scoped_lock> tmp ;)",
    "insertText": "return(new(tmp.begin()) scoped_lock)->internal_try_acquire(*this)"
  },
  {
    "label": "TryEnterCriticalSection()",
    "kind": "Method",
    "detail": "Function (# else # if _WIN32 | | _WIN64 return)",
    "insertText": "TryEnterCriticalSection(&impl)"
  },
  {
    "label": "pthread_mutex_trylock()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "pthread_mutex_trylock(&impl)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT aligned_space<scoped_lock> tmp ; scoped_lock& s =* tmp .)",
    "insertText": "begin()"
  },
  {
    "label": "LeaveCriticalSection()",
    "kind": "Method",
    "detail": "Function (# else # if _WIN32 | | _WIN64)",
    "insertText": "LeaveCriticalSection(&impl)"
  },
  {
    "label": "pthread_mutex_unlock()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "pthread_mutex_unlock(&impl)"
  },
  {
    "label": "native_handle()",
    "kind": "Method",
    "detail": "Function (# endif # endif } # if _WIN32 | | _WIN64 typedef LPCRITICAL_SECTION native_handle_type ; # else typedef pthread_mutex_t* native_handle_type ; # endif native_handle_type)",
    "insertText": "native_handle()"
  }
]