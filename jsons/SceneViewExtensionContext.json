[
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "ISceneViewExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneViewExtension"
  },
  {
    "label": "FSceneViewExtensionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewExtensionContext"
  },
  {
    "label": "FSceneViewExtensionIsActiveFunctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneViewExtensionIsActiveFunctor"
  },
  {
    "label": "GetRTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SceneInterface . h \" # include \" UnrealClient . h \" # include \" ViewportClient . h \" # include \" Engine / Engine . h \" # include \" SceneViewExtensionContext . generated . h \" class FViewport ; class ISceneViewExtension ; class FViewport ; struct FSceneViewExtensionContext { private : FName)",
    "insertText": "GetRTTI()"
  },
  {
    "label": "FSceneViewExtensionContext()",
    "kind": "Method",
    "detail": "Function (} public : FViewport* Viewport = nullptr ; FSceneInterface* Scene = nullptr ; bool bStereoEnabled = false ;)",
    "insertText": "FSceneViewExtensionContext() : Viewport(nullptr), Scene(nullptr)"
  },
  {
    "label": "FSceneViewExtensionContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneViewExtensionContext(FViewport* InViewport) : Viewport(InViewport)"
  },
  {
    "label": "FSceneViewExtensionContext()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneViewExtensionContext(FSceneInterface* InScene) : Scene(InScene)"
  },
  {
    "label": "FSceneViewExtensionContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSceneViewExtensionContext()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(const FSceneViewExtensionContext&& Other)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (} UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Scene != nullptr)"
  },
  {
    "label": "IsStereoSupported()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } bool)",
    "insertText": "IsStereoSupported()"
  },
  {
    "label": "IsHMDSupported()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHMDSupported()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FSceneViewExtensionIsActiveFunctor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FSceneViewExtensionIsActiveFunctor() : Guid(FGuid::NewGuid())"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "GetGuid()"
  },
  {
    "label": "IsActiveFunction()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "IsActiveFunction(SceneViewExtension, Context)"
  }
]