[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "USplineMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USplineMeshComponent"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "HSplineMeshVisProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HSplineMeshVisProxy"
  },
  {
    "label": "HSplineMeshKeyProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HSplineMeshKeyProxy"
  },
  {
    "label": "HSplineMeshTangentHandleProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HSplineMeshTangentHandleProxy"
  },
  {
    "label": "COMPONENTVISUALIZERS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COMPONENTVISUALIZERS_API"
  },
  {
    "label": "ESelectedTangentHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ESelectedTangentHandle"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "DECLARE_HIT_PROXY()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ComponentVisualizer . h \" # include \" CoreMinimal . h \" # include \" Engine / EngineBaseTypes . h \" # include \" HitProxies . h \" # include \" InputCoreTypes . h \" # include \" Math / InterpCurve . h \" # include \" Math / Matrix . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathSSE . h \" # include \" Templates / SharedPointer . h \" class AActor ; class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class SWidget ; class UActorComponent ; class USplineMeshComponent ; struct FViewportClick ; struct HSplineMeshVisProxy : public HComponentVisProxy {)",
    "insertText": "DECLARE_HIT_PROXY()"
  },
  {
    "label": "HSplineMeshVisProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HSplineMeshVisProxy(const UActorComponent* InComponent) : HComponentVisProxy(InComponent, HPP_Wireframe)"
  },
  {
    "label": "HSplineMeshKeyProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HSplineMeshKeyProxy(const UActorComponent* InComponent, int32 InKeyIndex) : HSplineMeshVisProxy(InComponent) , KeyIndex(InKeyIndex)"
  },
  {
    "label": "HSplineMeshTangentHandleProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HSplineMeshTangentHandleProxy(const UActorComponent* InComponent, int32 InKeyIndex, bool bInArriveTangent) : HSplineMeshVisProxy(InComponent) , KeyIndex(InKeyIndex) , bArriveTangent(bInArriveTangent)"
  },
  {
    "label": "FSplineMeshComponentVisualizer()",
    "kind": "Method",
    "detail": "Function (} int32 KeyIndex ; bool bArriveTangent ; } ; class FSplineMeshComponentVisualizer : public FComponentVisualizer { public :)",
    "insertText": "FSplineMeshComponentVisualizer()"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "DrawVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVisualization(const UActorComponent* Component, const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "VisProxyHandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VisProxyHandleClick(FEditorViewportClient* InViewportClient, HComponentVisProxy* VisProxy, const FViewportClick& Click)"
  },
  {
    "label": "EndEditing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEditing()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetLocation(const FEditorViewportClient* ViewportClient, FVector& OutLocation)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(const FEditorViewportClient* ViewportClient, FMatrix& OutMatrix)"
  },
  {
    "label": "HandleInputDelta()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputDelta(FEditorViewportClient* ViewportClient, FViewport* Viewport, FVector& DeltaTranslate, FRotator& DeltaRotate, FVector& DeltaScale)"
  },
  {
    "label": "HandleInputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleInputKey(FEditorViewportClient* ViewportClient, FViewport* Viewport, FKey Key, EInputEvent Event)"
  },
  {
    "label": "GenerateContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GenerateContextMenu()"
  },
  {
    "label": "GetEditedSplineMeshComponent()",
    "kind": "Method",
    "detail": "Function (USplineMeshComponent*)",
    "insertText": "GetEditedSplineMeshComponent()"
  },
  {
    "label": "GetSpline()",
    "kind": "Method",
    "detail": "Function (protected : FInterpCurveVector)",
    "insertText": "GetSpline(const USplineMeshComponent* SplineMeshComp)"
  },
  {
    "label": "NotifyComponentModified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyComponentModified()"
  }
]