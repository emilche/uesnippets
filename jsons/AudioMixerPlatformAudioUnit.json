[
  {
    "label": "FMixerPlatformAudioUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerPlatformAudioUnit"
  },
  {
    "label": "FMixerPlatformAudioUnit()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioMixer . h \" # include \" DSP / Dsp . h \" # include<AudioToolbox / AudioToolbox . h> # include<AudioUnit / AudioUnit . h> namespace Audio { class FMixerPlatformAudioUnit : public IAudioMixerPlatformInterface { public :)",
    "insertText": "FMixerPlatformAudioUnit()"
  },
  {
    "label": "GetPlatformApi()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlatformApi()"
  },
  {
    "label": "InitializeHardware()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitializeHardware()"
  },
  {
    "label": "CheckAudioDeviceChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAudioDeviceChange()"
  },
  {
    "label": "TeardownHardware()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TeardownHardware()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetNumOutputDevices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNumOutputDevices(uint32& OutNumOutputDevices)"
  },
  {
    "label": "GetOutputDeviceInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetOutputDeviceInfo(const uint32 InDeviceIndex, FAudioPlatformDeviceInfo& OutInfo)"
  },
  {
    "label": "GetDefaultOutputDeviceIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultOutputDeviceIndex(uint32& OutDefaultDeviceIndex)"
  },
  {
    "label": "OpenAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenAudioStream(const FAudioMixerOpenStreamParams& Params)"
  },
  {
    "label": "CloseAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseAudioStream()"
  },
  {
    "label": "StartAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartAudioStream()"
  },
  {
    "label": "StopAudioStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StopAudioStream()"
  },
  {
    "label": "MoveAudioStreamToNewAudioDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveAudioStreamToNewAudioDevice(const FString& InNewDeviceId)"
  },
  {
    "label": "GetPlatformDeviceInfo()",
    "kind": "Method",
    "detail": "Function (FAudioPlatformDeviceInfo)",
    "insertText": "GetPlatformDeviceInfo()"
  },
  {
    "label": "SubmitBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitBuffer(const uint8* Buffer)"
  },
  {
    "label": "GetDefaultDeviceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefaultDeviceName()"
  },
  {
    "label": "GetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (FAudioPlatformSettings)",
    "insertText": "GetPlatformSettings()"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFrames(const int32 InNumReqestedFrames)"
  },
  {
    "label": "ResumeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeContext()"
  },
  {
    "label": "SuspendContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuspendContext()"
  },
  {
    "label": "DisablePCMAudioCaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DisablePCMAudioCaching()"
  },
  {
    "label": "DecrementSuspendCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementSuspendCounter()"
  },
  {
    "label": "GrowCircularBufferIfNeeded()",
    "kind": "Method",
    "detail": "Function (private : AudioStreamBasicDescription OutputFormat ; bool bSuspended ; bool bInitialized ; bool bInCallback ; AUGraph AudioUnitGraph ; AUNode OutputNode ; AudioUnit OutputUnit ; uint8* SubmittedBufferPtr ; int32 SubmittedBytes = 0 ; int32 RemainingBytesInCurrentSubmittedBuffer ; int32 BytesPerSubmittedBuffer ; double GraphSampleRate ; bool bSupportsBackgroundAudio ; void)",
    "insertText": "GrowCircularBufferIfNeeded(const int32 InNumSamplesPerRenderCallback, const int32 InNumSamplesPerDeviceCallback)"
  },
  {
    "label": "PerformCallback()",
    "kind": "Method",
    "detail": "Function (Audio::TCircularAudioBuffer<int8> CircularOutputBuffer ; int32 NumSamplesPerRenderCallback ; int32 NumSamplesPerDeviceCallback ; bool bInternalPlatformSettingsInitialized { false } ; FAudioPlatformSettings InternalPlatformSettings ; bool)",
    "insertText": "PerformCallback(AudioBufferList* OutputBufferData)"
  },
  {
    "label": "HandleError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleError(const TCHAR* InLogOutput, bool bTeardown = true)"
  },
  {
    "label": "AudioRenderCallback()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "AudioRenderCallback(void* RefCon, AudioUnitRenderActionFlags* ActionFlags, const AudioTimeStamp* TimeStamp, UInt32 BusNumber, UInt32 NumFrames, AudioBufferList* IOData)"
  }
]