[
  {
    "label": "TriangleMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangleMeshType"
  },
  {
    "label": "TFastWindingTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFastWindingTree"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNegativeSpaceSampleSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNegativeSpaceSampleSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSphereCovering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSphereCovering"
  },
  {
    "label": "FConvexDecomposition3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvexDecomposition3"
  },
  {
    "label": "FPreprocessMeshOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreprocessMeshOptions"
  },
  {
    "label": "FConvexPart",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexPart"
  },
  {
    "label": "FMergeSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMergeSettings"
  },
  {
    "label": "FConvexPart",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexPart"
  },
  {
    "label": "FProximity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProximity"
  },
  {
    "label": "AddNegativeSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNegativeSpace(const TFastWindingTree<FDynamicMesh3>& Spatial, const FNegativeSpaceSampleSettings& Settings, bool bHasFlippedTriangles)"
  },
  {
    "label": "AddNegativeSpace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AddNegativeSpace(Spatial, Settings, true)"
  },
  {
    "label": "InitializeProximityFromDecompositionBoundingBoxOverlaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeProximityFromDecompositionBoundingBoxOverlaps(double BoundsExpandByMinDimFactor, double BoundsExpandByMaxDimFactor, double MinBoundsExpand)"
  },
  {
    "label": "InitializeFromMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromMesh(const FDynamicMesh3& SourceMesh, bool bMergeEdges)"
  },
  {
    "label": "InitializeFromMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromMesh(const FDynamicMesh3& SourceMesh, const FPreprocessMeshOptions& Options)"
  },
  {
    "label": "InitializeFromIndexMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromIndexMesh(TArrayView<const FVector3f> Vertices, TArrayView<const FIntVector> Faces, bool bMergeEdges, int32 FaceVertexOffset = 0)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute(int32 NumOutputHulls, int32 NumAdditionalSplits = 10, double ErrorTolerance = 0.0, double MinThicknessTolerance = 0, int32 MaxOutputHulls = -1, bool bOnlySplitIfNegativeSpaceCovered = false)"
  },
  {
    "label": "SplitWorst()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SplitWorst(bool bCanSkipUnreliableGeoVolumes = false, double ErrorTolerance = 0.0, bool bOnlySplitIfNegativeSpaceCovered = false, double MinSplitSizeInWorldSpace = -1)"
  },
  {
    "label": "MergeBest()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MergeBest(int32 TargetNumParts, double ErrorTolerance = 0, double MinThicknessTolerance = 0, bool bAllowCompact = true, bool bRequireHullTriangles = false, int32 MaxOutputHulls = -1,\n\t\tconst FSphereCovering* OptionalNegativeSpace = nullptr, const FTransform* OptionalTransformIntoNegativeSpace = nullptr)"
  },
  {
    "label": "MergeBest()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MergeBest(const FMergeSettings& Settings)"
  },
  {
    "label": "ComputeHullPlanes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHullPlanes()"
  },
  {
    "label": "ComputeHull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeHull(bool bComputePlanes = true)"
  },
  {
    "label": "ComputeStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeStats()"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact()"
  },
  {
    "label": "InitializeFromInternalGeo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromInternalGeo(const FConvexDecomposition3::FPreprocessMeshOptions& Preprocess, FTransformSRT3d& TransformOut)"
  },
  {
    "label": "DeleteProximity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteProximity(TArray<int32>&& ToRemove, bool bDeleteMapReferences)"
  },
  {
    "label": "UpdateProximitiesAfterSplit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProximitiesAfterSplit(int32 SplitIdx, int32 NewIdxStart, FPlane3d CutPlane, int32 SecondSideIdxStart, double OrigHullVolume)"
  },
  {
    "label": "FixHullOverlapsInNegativeSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixHullOverlapsInNegativeSpace(double NegativeSpaceTolerance = UE_DOUBLE_KINDA_SMALL_NUMBER, double NegativeSpaceMinRadius = UE_DOUBLE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "ConvexPartVsSphereOverlap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvexPartVsSphereOverlap(const FConvexPart& Part, FVector3d Center, double Radius, const FTransform* TransformIntoSphereSpace = nullptr, double* OutDistanceSq = nullptr)"
  },
  {
    "label": "InitNegativeSpaceConvexPartMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitNegativeSpaceConvexPartMapping()"
  },
  {
    "label": "SplitWorstHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitWorstHelper(bool bCanSkipUnreliableGeoVolumes, double ErrorTolerance, bool bOnlySplitIfNegativeSpaceCovered, double MinSplitSizeInWorldSpace)"
  }
]