[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "RTPHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTPHeader"
  },
  {
    "label": "RemoteBitrateEstimatorSingleStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteBitrateEstimatorSingleStream"
  },
  {
    "label": "Detector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Detector"
  },
  {
    "label": "RemoteBitrateEstimatorSingleStream()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_BITRATE_ESTIMATOR_SINGLE_STREAM_H_ # define MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_BITRATE_ESTIMATOR_SINGLE_STREAM_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<memory> # include<vector> # include \" api / transport / field_trial_based_config . h \" # include \" api / units / data_rate . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" modules / remote_bitrate_estimator / aimd_rate_control . h \" # include \" modules / remote_bitrate_estimator / include / remote_bitrate_estimator . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Clock ; struct RTPHeader ; class RemoteBitrateEstimatorSingleStream : public RemoteBitrateEstimator { public :)",
    "insertText": "RemoteBitrateEstimatorSingleStream(RemoteBitrateObserver* observer, Clock* clock)"
  },
  {
    "label": "RemoteBitrateEstimatorSingleStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteBitrateEstimatorSingleStream()"
  },
  {
    "label": "RemoteBitrateEstimatorSingleStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteBitrateEstimatorSingleStream(const RemoteBitrateEstimatorSingleStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RemoteBitrateEstimatorSingleStream&)",
    "insertText": "operator(const RemoteBitrateEstimatorSingleStream&)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacket(int64_t arrival_time_ms, size_t payload_size, const RTPHeader& header)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "Process()"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t avg_rtt_ms, int64_t max_rtt_ms)"
  },
  {
    "label": "RemoveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStream(uint32_t ssrc)"
  },
  {
    "label": "LatestEstimate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "LatestEstimate()"
  },
  {
    "label": "UpdateEstimate()",
    "kind": "Method",
    "detail": "Function (private : struct Detector ; typedef std::map<uint32_t,Detector*> SsrcOveruseEstimatorMap ; void)",
    "insertText": "UpdateEstimate(int64_t time_now) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetSsrcs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSsrcs(std::vector<uint32_t>* ssrcs) const RTC_SHARED_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "GetRemoteRate()",
    "kind": "Method",
    "detail": "Function (AimdRateControl*)",
    "insertText": "GetRemoteRate() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; const FieldTrialBasedConfig field_trials_ ; SsrcOveruseEstimatorMap overuse_detectors_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]