[
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "UBlackboardKeyType_Name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardKeyType_Name"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BehaviorTree / Blackboard / BlackboardKeyType . h \" # include \" BlackboardKeyType_Name . generated . h \" class UBlackboardComponent ;)",
    "insertText": "UCLASS(EditInlineNew, meta=(DisplayName=\"Name\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const FDataType InvalidValue ; FName)",
    "insertText": "GetValue(const UBlackboardKeyType_Name* KeyOb, const uint8* RawData)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetValue(UBlackboardKeyType_Name* KeyOb, uint8* RawData, const FName& Value)"
  },
  {
    "label": "CompareValues()",
    "kind": "Method",
    "detail": "Function (EBlackboardCompare::Type)",
    "insertText": "CompareValues(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, const UBlackboardKeyType* OtherKeyOb, const uint8* OtherMemoryBlock)"
  },
  {
    "label": "InitializeMemory()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitializeMemory(UBlackboardComponent& OwnerComp, uint8* MemoryBlock)"
  },
  {
    "label": "DescribeValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeValue(const UBlackboardComponent& OwnerComp, const uint8* RawData)"
  },
  {
    "label": "TestTextOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestTextOperation(const UBlackboardComponent& OwnerComp, const uint8* MemoryBlock, ETextKeyOperation::Type Op, const FString& OtherString)"
  }
]