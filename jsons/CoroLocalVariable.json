[
  {
    "label": "FPromise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPromise"
  },
  {
    "label": "FCoroLocal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoroLocal"
  },
  {
    "label": "FCoroLocalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoroLocalVariable"
  },
  {
    "label": "FCoroLocalState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoroLocalState"
  },
  {
    "label": "TCoroLocalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCoroLocalVariable"
  },
  {
    "label": "TCoroLocal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCoroLocal"
  },
  {
    "label": "FCoroLocalVariable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / UniquePtr . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" # include \" CoroutineHandle . h \" # if WITH_CPP_COROUTINES namespace CoroTask_Detail { class FPromise ; struct FCoroLocal { } ; class FCoroLocalVariable { public : ~)",
    "insertText": "FCoroLocalVariable()"
  },
  {
    "label": "FCoroLocalState()",
    "kind": "Method",
    "detail": "Function (} ; } ; class FCoroLocalState { public :)",
    "insertText": "FCoroLocalState(const CoroTask_Detail::FPromise& InTaskOwner) : TaskOwner(InTaskOwner)"
  },
  {
    "label": "GetCoroLocalState()",
    "kind": "Method",
    "detail": "Function (} ; FCoroLocalState&)",
    "insertText": "GetCoroLocalState()"
  },
  {
    "label": "SetCoroLocalState()",
    "kind": "Method",
    "detail": "Function (FCoroLocalState*)",
    "insertText": "SetCoroLocalState(FCoroLocalState*)"
  },
  {
    "label": "GenerateCoroId()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GenerateCoroId()"
  },
  {
    "label": "IsCoroLaunchedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCoroLaunchedTask()"
  },
  {
    "label": "TCoroLocalVariable()",
    "kind": "Method",
    "detail": "Function (const CoroTask_Detail::FPromise& TaskOwner ; using TlsDictionaryType = Experimental::TRobinHoodHashMap<const FCoroLocal*,TUniquePtr<FCoroLocalVariable>> ; TlsDictionaryType CoroLocalStorage ; } ; template<ValueType> class TCoroLocalVariable final : public FCoroLocalVariable { ValueType Value ; public :)",
    "insertText": "TCoroLocalVariable(const ValueType& DefaultValue) : Value(DefaultValue)"
  },
  {
    "label": "TCoroLocalVariable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCoroLocalVariable()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "GetValue()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<CoroTask_Detail::FCoroLocalVariable>& Variable =* ClsDict .)",
    "insertText": "FindOrAdd(this, TUniquePtr<VariableType>())"
  },
  {
    "label": "VariableType()",
    "kind": "Method",
    "detail": "Function (Variable = MakeUnique<)",
    "insertText": "VariableType(DefaultValue)"
  },
  {
    "label": "VariableType()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "VariableType(Variable.Get())->GetValue()"
  },
  {
    "label": "TCoroLocal()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TCoroLocal()"
  },
  {
    "label": "TCoroLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TCoroLocal(ValueType&& InDefaultValue) : DefaultValue(MoveTemp(InDefaultValue))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueType*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TCoroLocal&)",
    "insertText": "operator(const ValueType& Other)"
  }
]