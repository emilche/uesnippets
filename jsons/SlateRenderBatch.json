[
  {
    "label": "FSlateElementBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementBatch"
  },
  {
    "label": "FSlateDrawLayerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawLayerHandle"
  },
  {
    "label": "ICustomSlateElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICustomSlateElement"
  },
  {
    "label": "FSlateRenderDataHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderDataHandle"
  },
  {
    "label": "FSlateDataPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDataPayload"
  },
  {
    "label": "FSlateRenderBatchParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateRenderBatchParams"
  },
  {
    "label": "FSlateRenderBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderBatch"
  },
  {
    "label": "IsBatchableWith()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderingCommon . h \" # include \" Layout / Clipping . h \" # include \" Templates / UnrealTemplate . h \" # include<type_traits> class FSlateElementBatch ; class FSlateDrawLayerHandle ; class ICustomSlateElement ; class FSlateRenderDataHandle ; struct FSlateDataPayload ; struct FSlateRenderBatchParams { int32 Layer ; FShaderParams ShaderParams ; const FSlateShaderResource* Resource = nullptr ; ESlateDrawPrimitive PrimitiveType ; ESlateShader ShaderType ; ESlateDrawEffect DrawEffects ; ESlateBatchDrawFlag DrawFlags ; int8 SceneIndex ; const FSlateClippingState* ClippingState = nullptr ; bool)",
    "insertText": "IsBatchableWith(const FSlateRenderBatchParams& Other)"
  },
  {
    "label": "ReserveVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveVertices(uint32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (SourceVertices ->)",
    "insertText": "Reserve(SourceVertices->Num() + Num)"
  },
  {
    "label": "ReserveIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveIndices(uint32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (SourceIndices ->)",
    "insertText": "Reserve(SourceIndices->Num() + Num)"
  },
  {
    "label": "AddVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddVertex(FSlateVertex&& Vertex)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (const int32 Index = SourceVertices ->)",
    "insertText": "AddUninitialized(1)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(SourceVertices->GetData()+Index) FSlateVertex(Forward<FSlateVertex>(Vertex))"
  },
  {
    "label": "AddIndex()",
    "kind": "Method",
    "detail": "Function (+ + NumVertices ; } void)",
    "insertText": "AddIndex(SlateIndex Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SourceIndices ->)",
    "insertText": "Add(Index)"
  },
  {
    "label": "EmplaceVertex()",
    "kind": "Method",
    "detail": "Function (+ + NumIndices ; } void)",
    "insertText": "EmplaceVertex(FSlateVertex&& Vertex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (SourceVertices ->)",
    "insertText": "Emplace(Vertex)"
  },
  {
    "label": "EmplaceIndex()",
    "kind": "Method",
    "detail": "Function (+ + NumVertices ; } void)",
    "insertText": "EmplaceIndex(SlateIndex Index)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (SourceIndices ->)",
    "insertText": "Emplace(Index)"
  },
  {
    "label": "AddVertices()",
    "kind": "Method",
    "detail": "Function (+ + NumIndices ; } void)",
    "insertText": "AddVertices(const TArray<FSlateVertex>& InVertices)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (SourceVertices ->)",
    "insertText": "Append(InVertices)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumVertices + = InVertices .)",
    "insertText": "Num()"
  },
  {
    "label": "AddIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddIndices(const TArray<SlateIndex>& InIndices)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (SourceIndices ->)",
    "insertText": "Append(InIndices)"
  },
  {
    "label": "AddVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddVertices(TArray<FSlateVertex>&& InVertices)"
  },
  {
    "label": "AddIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddIndices(TArray<SlateIndex>&& InIndices)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumVertices()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} public : FShaderParams ShaderParams ; FVector2f DynamicOffset ; const FSlateClippingState* ClippingState ; const FSlateShaderResource* ShaderResource ; ISlateUpdatableInstanceBufferRenderProxy* InstanceData ; FSlateVertexArray* SourceVertices ; FSlateIndexArray* SourceIndices ; ICustomSlateElement* CustomDrawer ; int32 LayerId ; int32 VertexOffset ; int32 IndexOffset ; int32 NumVertices ; int32 NumIndices ; int32 NextBatchIndex ; int32 InstanceCount ; int32 InstanceOffset ; int8 SceneIndex ; ESlateBatchDrawFlag DrawFlags ; ESlateShader ShaderType ; ESlateDrawPrimitive DrawPrimitiveType ; ESlateDrawEffect DrawEffects ; ESlatePostRT CachedUsedPostBuffers ; uint8 bIsMergable : 1 ; uint8 bIsMerged : 1 ; } ;)",
    "insertText": "static_assert(TIsTriviallyCopyConstructible<FSlateRenderBatch>::Value == true, \"FSlateRenderBatch must be mem copyable\")"
  }
]