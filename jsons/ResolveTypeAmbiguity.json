[
  {
    "label": "MIX_SIGNED_INTS_2_ARGS_ACTUAL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / IsFloatingPoint . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Templates / IsSigned . h \" # include \" Templates / IsIntegral . h \" # include \" Templates / Requires . h \" # define)",
    "insertText": "MIX_SIGNED_INTS_2_ARGS_ACTUAL(Func, OptionalMarkup) \\ template < \\ typename Arg1, \\ typename Arg2 \\ UE_REQUIRES( \\ !std::is_same_v<Arg1, Arg2> && \\ std::is_signed_v<Arg1> && std::is_integral_v<Arg1> && \\ std::is_signed_v<Arg2> && std::is_integral_v<Arg2> \\ ) \\ > \\ static OptionalMarkup FORCEINLINE auto Func(Arg1 X, Arg2 Y) -> decltype(X * Y)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using ArgType =)",
    "insertText": "decltype(X * Y)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "Func((ArgType)X, (ArgType)Y)"
  },
  {
    "label": "MIX_SIGNED_INTS_2_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MIX_SIGNED_INTS_2_ARGS(Func) MIX_SIGNED_INTS_2_ARGS_ACTUAL(Func,) #define MIX_SIGNED_INTS_2_ARGS_CONSTEXPR(Func) MIX_SIGNED_INTS_2_ARGS_ACTUAL(Func, constexpr) #define MIX_SIGNED_TYPES_3_ARGS_ACTUAL(Func, OptionalMarkup) \\ template < \\ typename Arg1, \\ typename Arg2, \\ typename Arg3 \\ UE_REQUIRES( \\ ( \\ !std::is_same_v<Arg1, Arg2>> || \\ !std::is_same_v<Arg2, Arg3>> || \\ !std::is_same_v<Arg1, Arg3>> \\ ) && \\ std::is_signed_v<Arg1> && std::is_integral_v<Arg1> && \\ std::is_signed_v<Arg2> && std::is_integral_v<Arg2> && \\ std::is_signed_v<Arg3> && std::is_integral_v<Arg3> \\ ) \\ > \\ static OptionalMarkup FORCEINLINE auto Func(Arg1 X, Arg2 Y, Arg3 Z) -> decltype(X * Y * Z)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using ArgType =)",
    "insertText": "decltype(X * Y * Z)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "Func((ArgType)X, (ArgType)Y, (ArgType)Z)"
  },
  {
    "label": "MIX_SIGNED_INTS_3_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MIX_SIGNED_INTS_3_ARGS(Func) MIX_SIGNED_INTS_3_ARGS_ACTUAL(Func,) #define MIX_SIGNED_INTS_3_ARGS_CONSTEXPR(Func) MIX_SIGNED_INTS_3_ARGS_ACTUAL(Func, constexpr) #define MIX_FLOATS_2_ARGS(Func) \\ template < \\ typename Arg1, \\ typename Arg2 \\ UE_REQUIRES((std::is_floating_point_v<Arg1> || std::is_floating_point_v<Arg2>) && !std::is_same_v<Arg1, Arg2>) \\ > \\ static FORCEINLINE auto Func(Arg1 X, Arg2 Y) -> decltype(X * Y)"
  },
  {
    "label": "MIX_FLOATS_3_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MIX_FLOATS_3_ARGS(Func) \\ template < \\ typename Arg1, \\ typename Arg2, \\ typename Arg3 \\ UE_REQUIRES( \\ (std::is_floating_point_v<Arg1> || std::is_floating_point_v<Arg2> || std::is_floating_point_v<Arg3>) && \\ (!std::is_same_v<Arg1, Arg2> || !std::is_same_v<Arg2, Arg3> || !std::is_same_v<Arg1, Arg3>) \\ ) \\ > \\ static FORCEINLINE auto Func(Arg1 X, Arg2 Y, Arg3 Z) -> decltype(X * Y * Z)"
  },
  {
    "label": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS(Func) \\ MIX_FLOATS_2_ARGS(Func)"
  },
  {
    "label": "RESOLVE_FLOAT_AMBIGUITY_3_ARGS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RESOLVE_FLOAT_AMBIGUITY_3_ARGS(Func) \\ MIX_FLOATS_3_ARGS(Func)"
  },
  {
    "label": "MIX_FLOATS_TO_TYPE_2_ARGS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "MIX_FLOATS_TO_TYPE_2_ARGS(Func, ReturnType) \\ template < \\ typename Arg1, \\ typename Arg2 \\ UE_REQUIRES( \\ (std::is_floating_point_v<Arg1> || std::is_floating_point_v<Arg2>) && \\ !std::is_same_v<Arg1, Arg2> \\ ) \\ > \\ static FORCEINLINE ReturnType Func(Arg1 X, Arg2 Y)"
  },
  {
    "label": "MIX_FLOATS_TO_TYPE_3_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "MIX_FLOATS_TO_TYPE_3_ARGS(Func, ReturnType) \\ template < \\ typename Arg1, \\ typename Arg2, \\ typename Arg3 \\ UE_REQUIRES( \\ (std::is_floating_point_v<Arg1> || std::is_floating_point_v<Arg2> || std::is_floating_point_v<Arg3>) && \\ (!std::is_same_v<Arg1, Arg2> || !std::is_same_v<Arg1, Arg3> || !std::is_same_v<Arg2, Arg3>) \\ ) \\ > \\ static FORCEINLINE ReturnType Func(Arg1 X, Arg2 Y, Arg3 Z)"
  },
  {
    "label": "RESOLVE_FLOAT_TO_TYPE_AMBIGUITY_2_ARGS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "RESOLVE_FLOAT_TO_TYPE_AMBIGUITY_2_ARGS(Func, ReturnType) \\ MIX_FLOATS_TO_TYPE_2_ARGS(Func, ReturnType)"
  },
  {
    "label": "RESOLVE_FLOAT_TO_TYPE_AMBIGUITY_3_ARGS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RESOLVE_FLOAT_TO_TYPE_AMBIGUITY_3_ARGS(Func, ReturnType) \\ MIX_FLOATS_TO_TYPE_3_ARGS(Func, ReturnType)"
  }
]