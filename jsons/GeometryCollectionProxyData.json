[
  {
    "label": "FTransformDynamicCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransformDynamicCollection"
  },
  {
    "label": "FGeometryDynamicCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryDynamicCollection"
  },
  {
    "label": "FInitialVelocityFacade",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitialVelocityFacade"
  },
  {
    "label": "FGeometryCollectionDynamicStateFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionDynamicStateFacade"
  },
  {
    "label": "FGeometryCollectionResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionResults"
  },
  {
    "label": "FState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FState"
  },
  {
    "label": "FStateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStateData"
  },
  {
    "label": "FPositionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPositionData"
  },
  {
    "label": "FVelocityData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVelocityData"
  },
  {
    "label": "FDamageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDamageData"
  },
  {
    "label": "FTransformDynamicCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransformDynamicCollection(TSharedPtr<const FGeometryCollection> InRestCollection)"
  },
  {
    "label": "FTransformDynamicCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransformDynamicCollection(FTransformDynamicCollection&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTransformDynamicCollection&)",
    "insertText": "operator(const FTransformDynamicCollection&)"
  },
  {
    "label": "FTransformDynamicCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTransformDynamicCollection(FTransformDynamicCollection&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTransformDynamicCollection&)",
    "insertText": "operator(FTransformDynamicCollection&&)"
  },
  {
    "label": "GetTransform()",
    "kind": "Method",
    "detail": "Function (const FTransform3f&)",
    "insertText": "GetTransform(int32 Index)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(int32 Index, const FTransform3f& Transform)"
  },
  {
    "label": "GetNumTransforms()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTransforms()"
  },
  {
    "label": "ResetInitialTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetInitialTransforms()"
  },
  {
    "label": "GetHasParent()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<bool>&)",
    "insertText": "GetHasParent()"
  },
  {
    "label": "GetHasParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHasParent(int32 Index)"
  },
  {
    "label": "SetHasParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasParent(int32 Index, bool Value)"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParent(int32 Index)"
  },
  {
    "label": "HasChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChildren(int32 Index)"
  },
  {
    "label": "IterateThroughChildren()",
    "kind": "Method",
    "detail": "Function (template<Lambda> void)",
    "insertText": "IterateThroughChildren(int32 Index, Lambda&& LambdaIt)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TSet<int32>& Children = RestCollectionShared -> Children [ Index ] ;)",
    "insertText": "for(const int32 Child : Children)"
  },
  {
    "label": "LambdaIt()",
    "kind": "Method",
    "detail": "Function (bool bContinue =)",
    "insertText": "LambdaIt(Child)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FGeometryCollection> RestCollectionShared ; private : TManagedArray<bool> HasParent ; TManagedArray<FTransform3f> Transform ; bool bTransformHasChanged ; void)",
    "insertText": "Construct()"
  },
  {
    "label": "InitializeTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTransforms()"
  },
  {
    "label": "FGeometryDynamicCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeometryDynamicCollection(TSharedPtr<const FGeometryCollection> InRestCollection)"
  },
  {
    "label": "FGeometryDynamicCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeometryDynamicCollection(FGeometryDynamicCollection&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGeometryDynamicCollection&)",
    "insertText": "operator(const FGeometryDynamicCollection&)"
  },
  {
    "label": "FGeometryDynamicCollection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeometryDynamicCollection(FGeometryDynamicCollection&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGeometryDynamicCollection&)",
    "insertText": "operator(FGeometryDynamicCollection&&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (TManagedArray<bool> Active ; TManagedArray<uint8> DynamicState ;)",
    "insertText": "static_assert(sizeof(EObjectStateTypeEnum) <= sizeof(uint8))"
  },
  {
    "label": "GetInitialLevels()",
    "kind": "Method",
    "detail": "Function (public : const TManagedArrayAccessor<int32>)",
    "insertText": "GetInitialLevels()"
  },
  {
    "label": "GetInternalClusterParentTypeAttribute()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<uint8>&)",
    "insertText": "GetInternalClusterParentTypeAttribute()"
  },
  {
    "label": "GetLinearVelocitiesAttribute()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<FVector3f>*)",
    "insertText": "GetLinearVelocitiesAttribute()"
  },
  {
    "label": "GetAnimateTransformAttribute()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<bool>*)",
    "insertText": "GetAnimateTransformAttribute()"
  },
  {
    "label": "FInitialVelocityFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInitialVelocityFacade(const FGeometryDynamicCollection& DynamicCollection)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(const FVector3f& InitialLinearVelocity, const FVector3f& InitialAngularVelocity)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const FGeometryDynamicCollection& SourceCollection)"
  },
  {
    "label": "GetInitialVelocityFacade()",
    "kind": "Method",
    "detail": "Function (TManagedArrayAccessor<FVector3f> InitialLinearVelocityAttribute ; TManagedArrayAccessor<FVector3f> InitialAngularVelocityAttribute ; } ; FInitialVelocityFacade)",
    "insertText": "GetInitialVelocityFacade()"
  },
  {
    "label": "CopyInitialVelocityAttributesFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyInitialVelocityAttributesFrom(const FGeometryDynamicCollection& SourceCollection)"
  },
  {
    "label": "FGeometryCollectionDynamicStateFacade()",
    "kind": "Method",
    "detail": "Function (private : TManagedArray<uint8> InternalClusterParentType ; TManagedArray<FVector3f>* OptionalLinearVelocityAttribute ; TManagedArray<FVector3f>* OptionalAngularVelocityAttribute ; TManagedArray<bool>* OptionalAnimateTransformAttribute ; } ; class FGeometryCollectionDynamicStateFacade { public :)",
    "insertText": "FGeometryCollectionDynamicStateFacade(FGeometryDynamicCollection& InCollection)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive(int32 TransformIndex)"
  },
  {
    "label": "IsDynamicOrSleeping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicOrSleeping(int32 TransformIndex)"
  },
  {
    "label": "IsSleeping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSleeping(int32 TransformIndex)"
  },
  {
    "label": "HasChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChildren(int32 TransformIndex)"
  },
  {
    "label": "HasBrokenOff()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBrokenOff(int32 TransformIndex)"
  },
  {
    "label": "HasInternalClusterParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInternalClusterParent(int32 TransformIndex)"
  },
  {
    "label": "HasDynamicInternalClusterParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDynamicInternalClusterParent(int32 TransformIndex)"
  },
  {
    "label": "HasClusterUnionParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClusterUnionParent(int32 TransformIndex)"
  },
  {
    "label": "FGeometryCollectionResults()",
    "kind": "Method",
    "detail": "Function (private : TManagedArrayAccessor<bool> ActiveAttribute ; TManagedArrayAccessor<uint8> DynamicStateAttribute ; TManagedArrayAccessor<uint8> InternalClusterParentTypeAttribute ; FGeometryDynamicCollection& DynamicCollection ; } ; class FGeometryCollectionResults : public FRefCountedObject { public :)",
    "insertText": "FGeometryCollectionResults()"
  },
  {
    "label": "GetNumEntries()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumEntries()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "InitArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitArrays(const FGeometryDynamicCollection& Collection)"
  },
  {
    "label": "NumElements()",
    "kind": "Method",
    "detail": "Function (const int32 NumTransforms = Collection .)",
    "insertText": "NumElements(FGeometryCollection::TransformGroup)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ModifiedTransformIndices .)",
    "insertText": "Init(false, NumTransforms)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(Damages.Num() != NumTransforms)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Damages .)",
    "insertText": "SetNumUninitialized(NumTransforms)"
  },
  {
    "label": "SetDamages()",
    "kind": "Method",
    "detail": "Function (} # endif } using FEntryIndex = int32 ; struct FState { uint16 DynamicState : 8 ; uint16 DisabledState : 1 ; uint16 HasDecayed : 1 ; uint16 HasInternalClusterParent : 1 ; uint16 DynamicInternalClusterParent : 1 ; uint16 HasClusterUnionParent : 1 ; } ; struct FStateData { int32 TransformIndex ; int32 InternalClusterUniqueIdx ; bool HasParent ; FState State ; } ; struct FPositionData { Chaos::FVec3 ParticleX ; Chaos::FRotation3 ParticleR ; } ; struct FVelocityData { Chaos::FVec3f ParticleV ; Chaos::FVec3f ParticleW ; } ; # if WITH_EDITORONLY_DATA struct FDamageData { float Damage = 0 ; float DamageThreshold = 0 ; } ; void)",
    "insertText": "SetDamages(int32 TransformIndex, const FDamageData& DamageData)"
  },
  {
    "label": "GetDamages()",
    "kind": "Method",
    "detail": "Function (Damages [ TransformIndex ] = DamageData ; } const FDamageData&)",
    "insertText": "GetDamages(int32 TransformIndex)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (} return INDEX_NONE ; } const FStateData&)",
    "insertText": "GetState(FEntryIndex EntryIndex)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (SolverDt = SolverDtIn ; } void)",
    "insertText": "SetState(int32 EntryIndex, const FStateData& StateData)"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (States [ EntryIndex ] = StateData ; } FEntryIndex)",
    "insertText": "AddEntry(int32 TransformIndex)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (ModifiedTransformIndices [ TransformIndex ] = true ; const FEntryIndex EntryIndex = States .)",
    "insertText": "AddDefaulted()"
  },
  {
    "label": "SetVelocities()",
    "kind": "Method",
    "detail": "Function (Positions [ EntryIndex ] = PositionData ; } void)",
    "insertText": "SetVelocities(FEntryIndex EntryIndex, const FVelocityData& VelocityData)"
  },
  {
    "label": "GetModifiedTransformIndices()",
    "kind": "Method",
    "detail": "Function (Velocities [ EntryIndex ] = VelocityData ; } const TBitArray<>&)",
    "insertText": "GetModifiedTransformIndices()"
  }
]