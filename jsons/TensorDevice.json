[
  {
    "label": "TensorDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorDevice"
  },
  {
    "label": "TensorAsyncDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorAsyncDevice"
  },
  {
    "label": "TensorDevice()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_DEVICE_H # define EIGEN_CXX11_TENSOR_TENSOR_DEVICE_H namespace Eigen { template<ExpressionType,DeviceType> class TensorDevice { public :)",
    "insertText": "TensorDevice(const DeviceType& device, ExpressionType& expression) : m_device(device), m_expression(expression)"
  },
  {
    "label": "EIGEN_DEFAULT_COPY_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_DEFAULT_COPY_CONSTRUCTOR(TensorDevice) template<typename OtherDerived> EIGEN_STRONG_INLINE TensorDevice& operator=(const OtherDerived& other)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (typedef TensorAssignOp<ExpressionType,const OtherDerived> Assign ; Assign)",
    "insertText": "assign(m_expression, other)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::TensorExecutor<const Assign,DeviceType)",
    "insertText": "run(assign, m_device)"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (typedef OtherDerived::Scalar Scalar ; typedef TensorCwiseBinaryOp<internal::scalar_sum_op<Scalar>,const ExpressionType,const OtherDerived> Sum ; Sum)",
    "insertText": "sum(m_expression, other)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (typedef TensorAssignOp<ExpressionType,const Sum> Assign ; Assign)",
    "insertText": "assign(m_expression, sum)"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (typedef OtherDerived::Scalar Scalar ; typedef TensorCwiseBinaryOp<internal::scalar_difference_op<Scalar>,const ExpressionType,const OtherDerived> Difference ; Difference)",
    "insertText": "difference(m_expression, other)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (typedef TensorAssignOp<ExpressionType,const Difference> Assign ; Assign)",
    "insertText": "assign(m_expression, difference)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_STRONG_INLINE TensorAsyncDevice&)",
    "insertText": "operator(const OtherDerived& other)"
  },
  {
    "label": "m_done()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_done()"
  },
  {
    "label": "runAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runAsync(assign, m_device, std::move(m_done))"
  }
]