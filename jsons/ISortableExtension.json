[
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "FViewModelChildren",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelChildren"
  },
  {
    "label": "FViewModelListHead",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelListHead"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSortingKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" MVVM / ViewModelTypeID . h \" # include \" Templates / SharedPointer . h \" namespace UE { namespace Sequencer { class FViewModel ; struct FViewModelChildren ; struct FViewModelListHead ; struct FSortingKey { int8 Priority = 0 ; FText DisplayName ; int32 CustomOrder = - 1 ;)",
    "insertText": "FSortingKey()"
  },
  {
    "label": "PrioritizeBy()",
    "kind": "Method",
    "detail": "Function (} FSortingKey&)",
    "insertText": "PrioritizeBy(int8 InOffset)"
  },
  {
    "label": "DeprioritizeBy()",
    "kind": "Method",
    "detail": "Function (Priority - = InOffset ; return* this ; } FSortingKey&)",
    "insertText": "DeprioritizeBy(int8 InOffset)"
  },
  {
    "label": "ComparePriorityFirst()",
    "kind": "Method",
    "detail": "Function (Priority + = InOffset ; return* this ; } bool)",
    "insertText": "ComparePriorityFirst(const FSortingKey& A, const FSortingKey& B)"
  },
  {
    "label": "CompareCustomOrderFirst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareCustomOrderFirst(const FSortingKey& A, const FSortingKey& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSortingKey& A, const FSortingKey& B)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ESortingMode { PriorityFirst,CustomOrderFirst,Default = CustomOrderFirst } ; class ISortableExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(ISortableExtension) virtual ~ISortableExtension()"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SortChildren()"
  },
  {
    "label": "GetSortingKey()",
    "kind": "Method",
    "detail": "Function (FSortingKey)",
    "insertText": "GetSortingKey()"
  },
  {
    "label": "SetCustomOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomOrder(int32 InCustomOrder)"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortChildren(TSharedPtr<FViewModel> ParentModel, ESortingMode SortingMode)"
  },
  {
    "label": "SortChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortChildren(FViewModelChildren& Children, ESortingMode SortingMode)"
  }
]