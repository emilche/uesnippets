[
  {
    "label": "Vector4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vector4"
  },
  {
    "label": "Matrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Matrix"
  },
  {
    "label": "Image",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Image"
  },
  {
    "label": "Filter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Filter"
  },
  {
    "label": "Kernel1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Kernel1"
  },
  {
    "label": "Kernel2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Kernel2"
  },
  {
    "label": "PolyphaseKernel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PolyphaseKernel"
  },
  {
    "label": "FloatImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatImage"
  },
  {
    "label": "WrapMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WrapMode"
  },
  {
    "label": "FloatImage()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_IMAGE_FLOATIMAGE_H # define NV_IMAGE_FLOATIMAGE_H # include<nvimage / nvimage . h> # include<nvmath / Vector . h> # include<nvcore / Debug . h> # include<nvcore / Containers . h> # include<stdlib . h> namespace nv { class Vector4 ; class Matrix ; class Image ; class Filter ; class Kernel1 ; class Kernel2 ; class PolyphaseKernel ; class FloatImage { public : enum WrapMode { WrapMode_Clamp,WrapMode_Repeat,WrapMode_Mirror } ;)",
    "insertText": "FloatImage()"
  },
  {
    "label": "FloatImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FloatImage(const Image * img)"
  },
  {
    "label": "initFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFrom(const Image * img)"
  },
  {
    "label": "createImage()",
    "kind": "Method",
    "detail": "Function (Image*)",
    "insertText": "createImage(uint base_component = 0, uint num = 4)"
  },
  {
    "label": "createImageGammaCorrect()",
    "kind": "Method",
    "detail": "Function (Image*)",
    "insertText": "createImageGammaCorrect(float gamma = 2.2f)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocate(uint c, uint w, uint h)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear(float f=0.0f)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalize(uint base_component)"
  },
  {
    "label": "packNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "packNormals(uint base_component)"
  },
  {
    "label": "expandNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "expandNormals(uint base_component)"
  },
  {
    "label": "scaleBias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scaleBias(uint base_component, uint num, float scale, float add)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clamp(float low, float high)"
  },
  {
    "label": "toLinear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toLinear(uint base_component, uint num, float gamma = 2.2f)"
  },
  {
    "label": "toGamma()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toGamma(uint base_component, uint num, float gamma = 2.2f)"
  },
  {
    "label": "exponentiate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exponentiate(uint base_component, uint num, float power)"
  },
  {
    "label": "fastDownSample()",
    "kind": "Method",
    "detail": "Function (FloatImage*)",
    "insertText": "fastDownSample()"
  },
  {
    "label": "downSample()",
    "kind": "Method",
    "detail": "Function (FloatImage*)",
    "insertText": "downSample(const Filter & filter, WrapMode wm)"
  },
  {
    "label": "downSample()",
    "kind": "Method",
    "detail": "Function (FloatImage*)",
    "insertText": "downSample(const Filter & filter, WrapMode wm, uint alpha)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (FloatImage*)",
    "insertText": "resize(const Filter & filter, uint w, uint h, WrapMode wm)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (FloatImage*)",
    "insertText": "resize(const Filter & filter, uint w, uint h, WrapMode wm, uint alpha)"
  },
  {
    "label": "applyKernel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "applyKernel(const Kernel2 * k, int x, int y, uint c, WrapMode wm)"
  },
  {
    "label": "applyKernelVertical()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "applyKernelVertical(const Kernel1 * k, int x, int y, uint c, WrapMode wm)"
  },
  {
    "label": "applyKernelHorizontal()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "applyKernelHorizontal(const Kernel1 * k, int x, int y, uint c, WrapMode wm)"
  },
  {
    "label": "applyKernelVertical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyKernelVertical(const PolyphaseKernel & k, int x, uint c, WrapMode wm, float * output)"
  },
  {
    "label": "applyKernelHorizontal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyKernelHorizontal(const PolyphaseKernel & k, int y, uint c, WrapMode wm, float * output)"
  },
  {
    "label": "applyKernelVertical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyKernelVertical(const PolyphaseKernel & k, int x, uint c, uint a, WrapMode wm, float * output)"
  },
  {
    "label": "applyKernelHorizontal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "applyKernelHorizontal(const PolyphaseKernel & k, int y, uint c, uint a, WrapMode wm, float * output)"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "width()"
  },
  {
    "label": "channel()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "channel(uint c)"
  },
  {
    "label": "scanline()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "scanline(uint y, uint c)"
  },
  {
    "label": "setPixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPixel(float f, uint x, uint y, uint c)"
  },
  {
    "label": "addPixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPixel(float f, uint x, uint y, uint c)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "pixel(uint x, uint y, uint c)"
  },
  {
    "label": "setPixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPixel(float f, uint idx)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "pixel(uint idx)"
  },
  {
    "label": "sampleNearest()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sampleNearest(float x, float y, int c, WrapMode wm)"
  },
  {
    "label": "sampleLinear()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sampleLinear(float x, float y, int c, WrapMode wm)"
  },
  {
    "label": "sampleNearestClamp()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sampleNearestClamp(float x, float y, int c)"
  },
  {
    "label": "sampleNearestRepeat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sampleNearestRepeat(float x, float y, int c)"
  },
  {
    "label": "sampleNearestMirror()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sampleNearestMirror(float x, float y, int c)"
  },
  {
    "label": "sampleLinearClamp()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sampleLinearClamp(float x, float y, int c)"
  },
  {
    "label": "sampleLinearRepeat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sampleLinearRepeat(float x, float y, int c)"
  },
  {
    "label": "sampleLinearMirror()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "sampleLinearMirror(float x, float y, int c)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (FloatImage*)",
    "insertText": "clone()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (public : uint)",
    "insertText": "index(uint x, uint y)"
  },
  {
    "label": "indexClamp()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "indexClamp(int x, int y)"
  },
  {
    "label": "indexRepeat()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "indexRepeat(int x, int y)"
  },
  {
    "label": "indexMirror()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "indexMirror(int x, int y)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "index(int x, int y, WrapMode wm)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(m_mem != NULL)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(c < m_componentNum)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(y < m_height)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(x < m_width)"
  },
  {
    "label": "m_mem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_mem(c * m_height + y)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(idx < m_count)"
  },
  {
    "label": "repeat_remainder()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "repeat_remainder(int a, int b)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "abs(x)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "abs(m_width + m_width - x - 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_height == 1)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "abs(y)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "abs(m_height + m_height - y - 2)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "index(x, y)"
  }
]