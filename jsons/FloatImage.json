[
  {
    "label": "Vector4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vector4"
  },
  {
    "label": "Matrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Matrix"
  },
  {
    "label": "Image",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Image"
  },
  {
    "label": "Filter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Filter"
  },
  {
    "label": "Kernel1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Kernel1"
  },
  {
    "label": "Kernel2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Kernel2"
  },
  {
    "label": "PolyphaseKernel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PolyphaseKernel"
  },
  {
    "label": "FloatImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatImage"
  },
  {
    "label": "WrapMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WrapMode"
  },
  {
    "label": "FloatImage()",
    "kind": "Method",
    "detail": "Function (NVIMAGE_API)",
    "insertText": "FloatImage()"
  },
  {
    "label": "FloatImage()",
    "kind": "Method",
    "detail": "Function (NVIMAGE_API)",
    "insertText": "FloatImage(const Image * img)"
  },
  {
    "label": "initFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initFrom(const Image * img)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocate(uint c, uint w, uint h)"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear(float f=0.0f)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalize(uint base_component)"
  },
  {
    "label": "packNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "packNormals(uint base_component)"
  },
  {
    "label": "expandNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "expandNormals(uint base_component)"
  },
  {
    "label": "scaleBias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scaleBias(uint base_component, uint num, float scale, float add)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clamp(uint base_component, uint num)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clamp(float low, float high)"
  },
  {
    "label": "toLinear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toLinear(uint base_component, uint num, float gamma = 2.2f)"
  },
  {
    "label": "toGamma()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "toGamma(uint base_component, uint num, float gamma = 2.2f)"
  },
  {
    "label": "exponentiate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "exponentiate(uint base_component, uint num, float power)"
  },
  {
    "label": "setPixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPixel(float f, uint x, uint y, uint c)"
  },
  {
    "label": "addPixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addPixel(float f, uint x, uint y, uint c)"
  },
  {
    "label": "setPixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPixel(float f, uint idx)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "index(x, y)"
  },
  {
    "label": "indexClamp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "indexClamp(x, y)"
  },
  {
    "label": "indexRepeat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "indexRepeat(x, y)"
  },
  {
    "label": "indexMirror()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "indexMirror(x, y)"
  }
]