[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "AssociatedThreadId()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_ASSOCIATED_THREAD_ID_H_ # define BASE_TASK_SEQUENCE_MANAGER_ASSOCIATED_THREAD_ID_H_ # include<atomic> # include<memory> # include \" base / base_export . h \" # include \" base / memory / ref_counted . h \" # include \" base / sequence_checker . h \" # include \" base / threading / platform_thread . h \" # include \" base / threading / thread_checker . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace sequence_manager { namespace internal { class BASE_EXPORT AssociatedThreadId : public base::RefCountedThreadSafe<AssociatedThreadId> { public :)",
    "insertText": "AssociatedThreadId()"
  },
  {
    "label": "THREAD_CHECKER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "THREAD_CHECKER(thread_checker)"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker)"
  },
  {
    "label": "CreateUnbound()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<AssociatedThreadId>)",
    "insertText": "CreateUnbound()"
  },
  {
    "label": "CreateBound()",
    "kind": "Method",
    "detail": "Function (} scoped_refptr<AssociatedThreadId>)",
    "insertText": "CreateBound()"
  },
  {
    "label": "BindToCurrentThread()",
    "kind": "Method",
    "detail": "Function (associated_thread ->)",
    "insertText": "BindToCurrentThread()"
  },
  {
    "label": "GetBoundThreadId()",
    "kind": "Method",
    "detail": "Function (absl::optional<PlatformThreadId>)",
    "insertText": "GetBoundThreadId()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (auto thread_id = thread_id_ .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "IsBoundToCurrentThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBoundToCurrentThread()"
  }
]