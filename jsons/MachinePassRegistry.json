[
  {
    "label": "MachinePassRegistryListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachinePassRegistryListener"
  },
  {
    "label": "MachinePassRegistryNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachinePassRegistryNode"
  },
  {
    "label": "MachinePassRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachinePassRegistry"
  },
  {
    "label": "RegistryClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegistryClass"
  },
  {
    "label": "RegisterPassParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisterPassParser"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEPASSREGISTRY_H # define LLVM_CODEGEN_MACHINEPASSREGISTRY_H # include \" llvm / CodeGen / Passes . h \" # include \" llvm / Support / CommandLine . h \" namespace llvm { typedef)",
    "insertText": "void(*MachinePassCtor)()"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (class MachinePassRegistryListener { void)",
    "insertText": "anchor()"
  },
  {
    "label": "MachinePassRegistryListener()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MachinePassRegistryListener()"
  },
  {
    "label": "NotifyAdd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyAdd(const char *N, MachinePassCtor C, const char *D)"
  },
  {
    "label": "NotifyRemove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyRemove(const char *N)"
  },
  {
    "label": "MachinePassRegistryNode()",
    "kind": "Method",
    "detail": "Function (} ; class MachinePassRegistryNode { private : MachinePassRegistryNode* Next ; const char* Name ; const char* Description ; MachinePassCtor Ctor ; public :)",
    "insertText": "MachinePassRegistryNode(const char *N, const char *D, MachinePassCtor C) : Next(nullptr) , Name(N) , Description(D) , Ctor(C)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (} MachinePassRegistryNode*)",
    "insertText": "getNext()"
  },
  {
    "label": "getList()",
    "kind": "Method",
    "detail": "Function (Next = N ; } } ; class MachinePassRegistry { private : MachinePassRegistryNode* List ; MachinePassCtor Default ; MachinePassRegistryListener* Listener ; public : MachinePassRegistryNode*)",
    "insertText": "getList()"
  },
  {
    "label": "setDefault()",
    "kind": "Method",
    "detail": "Function (Default = C ; } void)",
    "insertText": "setDefault(StringRef Name)"
  },
  {
    "label": "setListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setListener(MachinePassRegistryListener *L)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Listener = L ; } void)",
    "insertText": "Add(MachinePassRegistryNode *Node)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(MachinePassRegistryNode *Node)"
  },
  {
    "label": "RegisterPassParser()",
    "kind": "Method",
    "detail": "Function (} ; template<class RegistryClass> class RegisterPassParser : public MachinePassRegistryListener,public cl::parser<RegistryClass::FunctionPassCtor> { public :)",
    "insertText": "RegisterPassParser(cl::Option &O) : cl::parser<typename RegistryClass::FunctionPassCtor>(O)"
  },
  {
    "label": "RegisterPassParser()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RegisterPassParser()"
  },
  {
    "label": "setListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setListener(nullptr)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "initialize()"
  },
  {
    "label": "addLiteralOption()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "addLiteralOption(Node->getName(), (typename RegistryClass::FunctionPassCtor)Node->getCtor(), Node->getDescription())"
  },
  {
    "label": "setListener()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "setListener(this)"
  },
  {
    "label": "addLiteralOption()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "addLiteralOption(N, (typename RegistryClass::FunctionPassCtor)C, D)"
  },
  {
    "label": "removeLiteralOption()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "removeLiteralOption(N)"
  }
]