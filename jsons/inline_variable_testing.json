[
  {
    "label": "Foo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Foo"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_INTERNAL_INLINE_VARIABLE_TESTING_H_ # define ABSL_BASE_INTERNAL_INLINE_VARIABLE_TESTING_H_ # include \" absl / base / internal / inline_variable . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace inline_variable_testing_internal { struct Foo { int value = 5 ; } ;)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(Foo, inline_variable_foo, {})"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(Foo, other_inline_variable_foo, {})"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(int, inline_variable_int, 5)"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(int, other_inline_variable_int, 5)"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(void(*)(), inline_variable_fun_ptr, nullptr)"
  },
  {
    "label": "get_foo_a()",
    "kind": "Method",
    "detail": "Function (const Foo&)",
    "insertText": "get_foo_a()"
  },
  {
    "label": "get_foo_b()",
    "kind": "Method",
    "detail": "Function (const Foo&)",
    "insertText": "get_foo_b()"
  },
  {
    "label": "get_int_a()",
    "kind": "Method",
    "detail": "Function (const int&)",
    "insertText": "get_int_a()"
  },
  {
    "label": "get_int_b()",
    "kind": "Method",
    "detail": "Function (const int&)",
    "insertText": "get_int_b()"
  }
]