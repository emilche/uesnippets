[
  {
    "label": "BitstreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitstreamReader"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_BITSTREAM_READER_H_ # define RTC_BASE_BITSTREAM_READER_H_ # include<stdint . h> # include \" absl / base / attributes . h \" # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / safe_conversions . h \" namespace webrtc { class BitstreamReader { public :)",
    "insertText": "BitstreamReader(rtc::ArrayView<const uint8_t> bytes ABSL_ATTRIBUTE_LIFETIME_BOUND)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BitstreamReader(absl::string_view bytes ABSL_ATTRIBUTE_LIFETIME_BOUND)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BitstreamReader(const BitstreamReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BitstreamReader&)",
    "insertText": "operator(const BitstreamReader&)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BitstreamReader()"
  },
  {
    "label": "RemainingBitCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RemainingBitCount()"
  },
  {
    "label": "Ok()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Ok()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "ConsumeBits()",
    "kind": "Method",
    "detail": "Function (remaining_bits_ = - 1 ; } void)",
    "insertText": "ConsumeBits(int bits)"
  },
  {
    "label": "ReadBit()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT int)",
    "insertText": "ReadBit()"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (ABSL_MUST_USE_RESULT uint64_t)",
    "insertText": "ReadBits(int bits)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (template<T,std::enable_if<std::is_unsigned<T>::value&& ! std::is_same<T,bool>::value&&)",
    "insertText": "sizeof(T) <= 8>::type* = nullptr> ABSL_MUST_USE_RESULT T Read()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} template<T,std::enable_if<std::is_same<T,bool>::value>::type* = nullptr> ABSL_MUST_USE_RESULT bool)",
    "insertText": "Read()"
  },
  {
    "label": "ReadNonSymmetric()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ReadNonSymmetric(uint32_t num_values)"
  },
  {
    "label": "ReadExponentialGolomb()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ReadExponentialGolomb()"
  },
  {
    "label": "ReadSignedExponentialGolomb()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReadSignedExponentialGolomb()"
  },
  {
    "label": "set_last_read_is_verified()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "set_last_read_is_verified(bool value)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (const uint8_t* bytes_ ; int remaining_bits_ ; bool last_read_is_verified_ = true ; } ;)",
    "insertText": "BitstreamReader(rtc::ArrayView<const uint8_t> bytes) : bytes_(bytes.data()), remaining_bits_(bytes.size() * 8)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitstreamReader(absl::string_view bytes) : bytes_(reinterpret_cast<const uint8_t*>(bytes.data())), remaining_bits_(bytes.size() * 8)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(last_read_is_verified_)"
  },
  {
    "label": "set_last_read_is_verified()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_last_read_is_verified(true)"
  }
]