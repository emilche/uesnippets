[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Data"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCoreAbstract_ScalarSample_h # define Alembic_AbcCoreAbstract_ScalarSample_h # include<Alembic / Util / Export . h> # include<Alembic / AbcCoreAbstract / Foundation . h> # include<Alembic / AbcCoreAbstract / DataType . h> namespace Alembic { namespace AbcCoreAbstract { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT ScalarSample : public Alembic::Util::totally_ordered<ScalarSample> { public : class Data { public : ~)",
    "insertText": "Data()"
  },
  {
    "label": "setToDefault()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setToDefault()"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFrom(const void *iData)"
  },
  {
    "label": "equalTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equalTo(const void *iData)"
  },
  {
    "label": "equalEpsilon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "equalEpsilon(const void *iData, double iEpsilon)"
  },
  {
    "label": "lessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "lessThan(const void *iData)"
  },
  {
    "label": "getData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "getData()"
  },
  {
    "label": "ScalarSample()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "ScalarSample(const DataType &iDataType)"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (m_data ->)",
    "insertText": "copyFrom(iData)"
  },
  {
    "label": "getDataType()",
    "kind": "Method",
    "detail": "Function (} const DataType&)",
    "insertText": "getDataType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const void *iRhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ScalarSample &iRhs)"
  },
  {
    "label": "equalWithRelAbsError()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equalWithRelAbsError(const void *iRhs, double iRelAbsError)"
  },
  {
    "label": "equalWithRelAbsError()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "equalWithRelAbsError(const ScalarSample &iRhs, double iRelAbsError)"
  }
]