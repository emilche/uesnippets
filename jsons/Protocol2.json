[
  {
    "label": "EProtocol",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EProtocol"
  },
  {
    "label": "FEventHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventHeader"
  },
  {
    "label": "FEventHeaderSync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventHeaderSync"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace UE { namespace Trace { # if)",
    "insertText": "defined(TRACE_PRIVATE_PROTOCOL_2)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (enum EProtocol : uint8 { Id = 2 } ; using Protocol1::EFieldType ; using Protocol1::FNewEventEvent ; using Protocol1::EEventFlags ; using Protocol1::EKnownEventUids ; using Protocol1::FAuxHeader ; struct FEventHeader { uint16 Uid ; uint16 Size ; } ; # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (uint16 SerialLow ; uint8 SerialHigh ; uint8 EventData [ ] ; } ; # pragma)",
    "insertText": "pack(pop) static_assert(sizeof(FEventHeaderSync) == 7, \"Packing assumption doesn't hold\")"
  }
]