[
  {
    "label": "FNetCullDistanceOverrides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetCullDistanceOverrides"
  },
  {
    "label": "FWorldLocations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldLocations"
  },
  {
    "label": "FRepTagFindInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepTagFindInfo"
  },
  {
    "label": "or",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "or"
  },
  {
    "label": "FNetObjectGridFilterProfile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetObjectGridFilterProfile"
  },
  {
    "label": "UNetObjectGridFilterConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetObjectGridFilterConfig"
  },
  {
    "label": "UNetObjectGridFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetObjectGridFilter"
  },
  {
    "label": "FObjectLocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectLocationInfo"
  },
  {
    "label": "FCellBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellBox"
  },
  {
    "label": "FPerObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerObjectInfo"
  },
  {
    "label": "FCellCoord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellCoord"
  },
  {
    "label": "FCellObjects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellObjects"
  },
  {
    "label": "FCellAndTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellAndTimestamp"
  },
  {
    "label": "FPerConnectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerConnectionInfo"
  },
  {
    "label": "FNetGridFilterStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetGridFilterStats"
  },
  {
    "label": "FDebugUpdateCellInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugUpdateCellInfo"
  },
  {
    "label": "UNetObjectGridWorldLocFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetObjectGridWorldLocFilter"
  },
  {
    "label": "AddCellInfoForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCellInfoForObject(const FObjectLocationInfo& ObjectInfo, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "RemoveCellInfoForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCellInfoForObject(const FObjectLocationInfo& ObjectInfo)"
  },
  {
    "label": "UpdateCellInfoForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCellInfoForObject(const FObjectLocationInfo& ObjectInfo, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "AllocObjectInfo()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AllocObjectInfo()"
  },
  {
    "label": "FreeObjectInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeObjectInfo(uint32 Index)"
  },
  {
    "label": "UpdatePositionAndCullDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePositionAndCullDistance(const FObjectLocationInfo& ObjectLocationInfo, FPerObjectInfo& PerObjectInfo, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "CalculateCellBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateCellBox(const FPerObjectInfo& PerObjectInfo, FCellBox& OutCellBox)"
  },
  {
    "label": "CalculateCellCoord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateCellCoord(FCellCoord& OutCoord, const FVector& Pos)"
  },
  {
    "label": "AreCellsDisjoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreCellsDisjoint(const FCellBox& A, const FCellBox& B)"
  },
  {
    "label": "DoesCellContainCoord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesCellContainCoord(const FCellBox& Cell, const FCellCoord& Coord)"
  }
]