[
  {
    "label": "FNetCullDistanceOverrides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetCullDistanceOverrides"
  },
  {
    "label": "FWorldLocations",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldLocations"
  },
  {
    "label": "FRepTagFindInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepTagFindInfo"
  },
  {
    "label": "FNetObjectGridFilterProfile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetObjectGridFilterProfile"
  },
  {
    "label": "UNetObjectGridFilterConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetObjectGridFilterConfig"
  },
  {
    "label": "UNetObjectGridFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetObjectGridFilter"
  },
  {
    "label": "FObjectLocationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectLocationInfo"
  },
  {
    "label": "FCellBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellBox"
  },
  {
    "label": "FPerObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerObjectInfo"
  },
  {
    "label": "FCellCoord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellCoord"
  },
  {
    "label": "FCellObjects",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellObjects"
  },
  {
    "label": "FCellAndTimestamp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellAndTimestamp"
  },
  {
    "label": "FPerConnectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerConnectionInfo"
  },
  {
    "label": "FNetGridFilterStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetGridFilterStats"
  },
  {
    "label": "FDebugUpdateCellInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugUpdateCellInfo"
  },
  {
    "label": "UNetObjectGridWorldLocFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetObjectGridWorldLocFilter"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Iris / ReplicationSystem / Filtering / NetObjectFilter . h \" # include \" Iris / IrisConfig . h \" # include \" Net / Core / NetBitArray . h \" # include \" Containers / ChunkedArray . h \" # include \" Math / Vector . h \" # include \" UObject / StrongObjectPtr . h \" # include \" NetObjectGridFilter . generated . h \" namespace UE::Net { class FNetCullDistanceOverrides ; class FWorldLocations ; struct FRepTagFindInfo ; })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FName Key)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(Config)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(abstract)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() protected: IRISCORE_API virtual void OnInit(const FNetObjectFilterInitParams&)"
  },
  {
    "label": "OnDeinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeinit()"
  },
  {
    "label": "OnMaxInternalNetRefIndexIncreased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaxInternalNetRefIndexIncreased(uint32 NewMaxInternalIndex)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnection(uint32 ConnectionId)"
  },
  {
    "label": "RemoveConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConnection(uint32 ConnectionId)"
  },
  {
    "label": "AddObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddObject(uint32 ObjectIndex, FNetObjectFilterAddObjectParams&)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObject(uint32 ObjectIndex, const FNetObjectFilteringInfo&)"
  },
  {
    "label": "PreFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreFilter(FNetObjectPreFilteringParams&)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Filter(FNetObjectFilteringParams&)"
  },
  {
    "label": "PostFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostFilter(FNetObjectPostFilteringParams&)"
  },
  {
    "label": "PrintDebugInfoForObject()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "PrintDebugInfoForObject(const FDebugInfoParams& Params, uint32 ObjectIndex)"
  },
  {
    "label": "IsUsingWorldLocations()",
    "kind": "Method",
    "detail": "Function (protected : struct FObjectLocationInfo : public FNetObjectFilteringInfo { bool)",
    "insertText": "IsUsingWorldLocations()"
  },
  {
    "label": "IsUsingLocationInState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingLocationInState()"
  },
  {
    "label": "SetLocationStateOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLocationStateOffset(uint16 Offset)"
  },
  {
    "label": "GetLocationStateOffset()",
    "kind": "Method",
    "detail": "Function (Data [ 0 ] = Offset ; } uint16)",
    "insertText": "GetLocationStateOffset()"
  },
  {
    "label": "GetLocationStateIndex()",
    "kind": "Method",
    "detail": "Function (Data [ 1 ] = Index ; } uint16)",
    "insertText": "GetLocationStateIndex()"
  },
  {
    "label": "GetInfoIndex()",
    "kind": "Method",
    "detail": "Function (Data [ 2 ] = Index& 6 5 5 3 5 U ; Data [ 3 ] = Index>> 1 6 U ; } uint32)",
    "insertText": "GetInfoIndex()"
  },
  {
    "label": "AddCellInfoForObject()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "AddCellInfoForObject(const FObjectLocationInfo& ObjectInfo, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "RemoveCellInfoForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCellInfoForObject(const FObjectLocationInfo& ObjectInfo)"
  },
  {
    "label": "UpdateCellInfoForObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCellInfoForObject(const FObjectLocationInfo& ObjectInfo, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : enum : unsigned { ObjectInfosChunkSize = 6 4* 1 0 2 4,InvalidStateIndex = 6 5 5 3 5 U,InvalidStateOffset = 6 5 5 3 5 U,} ; struct FCellBox { int32 MinX = 0 ; int32 MaxX = 0 ; int32 MinY = 0 ; int32 MaxY = 0 ; bool)",
    "insertText": "operator(const FCellBox&)"
  },
  {
    "label": "GetCullDistance()",
    "kind": "Method",
    "detail": "Function (} ; struct FPerObjectInfo { FVector Position = FVector::ZeroVector ; FCellBox CellBox = { } ; uint32 ObjectIndex = 0 U ; uint16 FrameCountBeforeCulling = 0 U ; float)",
    "insertText": "GetCullDistance()"
  },
  {
    "label": "SetCullDistanceSq()",
    "kind": "Method",
    "detail": "Function (CullDistance = Distance ; CullDistanceSq = Distance* Distance ; } void)",
    "insertText": "SetCullDistanceSq(float DistanceSq)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (CullDistance =)",
    "insertText": "Sqrt(DistanceSq)"
  },
  {
    "label": "UpdateObjectInfo()",
    "kind": "Method",
    "detail": "Function (CullDistanceSq = DistanceSq ; } private : float CullDistance = 0 . 0 f ; float CullDistanceSq = 0 . 0 f ; } ; void)",
    "insertText": "UpdateObjectInfo(FPerObjectInfo& PerObjectInfo, const FObjectLocationInfo& ObjectLocationInfo, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "BuildObjectInfo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "BuildObjectInfo(uint32 ObjectIndex, FNetObjectFilterAddObjectParams& Params)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : struct FCellCoord { int32 X ; int32 Y ; private : bool)",
    "insertText": "operator(const FCellCoord& A, const FCellCoord& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FCellCoord& Coords)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCellObjects { TSet<uint32> ObjectIndices ; } ; struct FCellAndTimestamp { FCellCoord Cell ; uint32 Timestamp ; private : bool)",
    "insertText": "operator(const FCellAndTimestamp& A, const FCellAndTimestamp& B)"
  },
  {
    "label": "FNetGridFilterStats()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPerConnectionInfo { TArray<FCellAndTimestamp,TInlineAllocator<3 2>> RecentCells ; TMap<uint32,uint16> RecentObjectFrameCount ; } ; struct FNetGridFilterStats {)",
    "insertText": "FNetGridFilterStats()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "AllocObjectInfo()",
    "kind": "Method",
    "detail": "Function (} uint64 CullTestingTimeInCycles = 0 ; uint32 CullTestedObjects = 0 ; } ; private : uint32)",
    "insertText": "AllocObjectInfo()"
  },
  {
    "label": "FreeObjectInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeObjectInfo(uint32 Index)"
  },
  {
    "label": "UpdatePositionAndCullDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePositionAndCullDistance(const FObjectLocationInfo& ObjectLocationInfo, FPerObjectInfo& PerObjectInfo, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "CalculateCellBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateCellBox(const FPerObjectInfo& PerObjectInfo, FCellBox& OutCellBox)"
  },
  {
    "label": "CalculateCellCoord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateCellCoord(FCellCoord& OutCoord, const FVector& Pos)"
  },
  {
    "label": "GetFrameCountBeforeCulling()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetFrameCountBeforeCulling(FName ProfileName)"
  },
  {
    "label": "AreCellsDisjoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreCellsDisjoint(const FCellBox& A, const FCellBox& B)"
  },
  {
    "label": "DoesCellContainCoord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesCellContainCoord(const FCellBox& Cell, const FCellCoord& Coord)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (TStrongObjectPtr<UNetObjectGridFilterConfig> Config ; TArray<FPerConnectionInfo> PerConnectionInfos ; TChunkedArray<FPerObjectInfo,ObjectInfosChunkSize> ObjectInfos ; UE::Net::FNetBitArray AssignedObjectInfoIndices ; # if UE_NET_IRIS_CSV_STATS FNetGridFilterStats Stats ; # endif TMap<FCellCoord,FCellObjects> Cells ; uint32 FrameIndex = 0 ; struct FDebugUpdateCellInfo { FCellCoord Coord ; FCellBox NewCellBox ; FCellBox PrevCellBox ; SIZE_T CellsSize ; FVector ObjectPosition ; float ObjectCullDistance ; } ; FDebugUpdateCellInfo DebugUpdateCellInfo ; const UE::Net::FNetCullDistanceOverrides* NetCullDistanceOverrides = nullptr ; } ;)",
    "insertText": "UCLASS(transient, MinimalAPI)"
  },
  {
    "label": "UpdateObjectInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateObjectInfo(FPerObjectInfo& PerObjectInfo, const UNetObjectGridFilter::FObjectLocationInfo& ObjectLocationInfo, const UE::Net::FReplicationInstanceProtocol* InstanceProtocol)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : const UE::Net::FWorldLocations* WorldLocations = nullptr ; } ; bool UNetObjectGridFilter::)",
    "insertText": "operator(const UNetObjectGridFilter::FCellBox& Other)"
  }
]