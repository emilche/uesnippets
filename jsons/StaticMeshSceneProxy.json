[
  {
    "label": "FLocalVertexFactoryUniformShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalVertexFactoryUniformShaderParameters"
  },
  {
    "label": "FRawStaticIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRawStaticIndexBuffer"
  },
  {
    "label": "FStaticMeshVertexFactories",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshVertexFactories"
  },
  {
    "label": "FStaticMeshSceneProxyDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticMeshSceneProxyDesc"
  },
  {
    "label": "FTextureResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureResource"
  },
  {
    "label": "FStaticMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshSceneProxy"
  },
  {
    "label": "FLODInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLODInfo"
  },
  {
    "label": "FSectionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionInfo"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / StaticMeshComponent . h \" # include \" PrimitiveSceneProxy . h \" # include \" RayTracingInstance . h \" # include \" SceneManagement . h \" # include \" RayTracingGeometry . h \" class FLocalVertexFactoryUniformShaderParameters ; class FRawStaticIndexBuffer ; struct FStaticMeshVertexFactories ; using FStaticMeshVertexFactoriesArray = TArray<FStaticMeshVertexFactories> ; struct FStaticMeshSceneProxyDesc ; class FTextureResource ; class FStaticMeshSceneProxy : public FPrimitiveSceneProxy { public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FStaticMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStaticMeshSceneProxy(UStaticMeshComponent* Component, bool bForceLODsShareStaticLighting)"
  },
  {
    "label": "FStaticMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStaticMeshSceneProxy(const FStaticMeshSceneProxyDesc& InDesc, bool bForceLODsShareStaticLighting)"
  },
  {
    "label": "FStaticMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStaticMeshSceneProxy()"
  },
  {
    "label": "GetNumMeshBatches()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumMeshBatches()"
  },
  {
    "label": "GetMeshElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMeshElement(int32 LODIndex, int32 BatchIndex, int32 ElementIndex, uint8 InDepthPriorityGroup, bool bUseSelectionOutline, bool bAllowPreCulledIndices, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "CreateRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderThreadResources(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "DestroyRenderThreadResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderThreadResources()"
  },
  {
    "label": "GetWireframeMeshElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWireframeMeshElement(int32 LODIndex, int32 BatchIndex, const FMaterialRenderProxy* WireframeRenderProxy, uint8 InDepthPriorityGroup, bool bAllowPreCulledIndices, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "GetCollisionMeshElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCollisionMeshElement(int32 LODIndex, int32 BatchIndex, int32 ElementIndex, uint8 InDepthPriorityGroup, const FMaterialRenderProxy* RenderProxy, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "SetEvaluateWorldPositionOffsetInRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEvaluateWorldPositionOffsetInRayTracing(FRHICommandListBase& RHICmdList, bool NewValue)"
  },
  {
    "label": "GetCurrentFirstLODIdx_RenderThread()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetCurrentFirstLODIdx_RenderThread()"
  },
  {
    "label": "GetDesiredLODLevel_RenderThread()",
    "kind": "Method",
    "detail": "Function (} FDesiredLODLevel)",
    "insertText": "GetDesiredLODLevel_RenderThread(const FSceneView* View)"
  },
  {
    "label": "GetLightMapCoordinateIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLightMapCoordinateIndex()"
  },
  {
    "label": "GetInstanceWorldPositionOffsetDisableDistance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInstanceWorldPositionOffsetDisableDistance(float& OutWPODisableDistance)"
  },
  {
    "label": "SetMeshElementGeometrySource()",
    "kind": "Method",
    "detail": "Function (protected : uint32)",
    "insertText": "SetMeshElementGeometrySource(int32 LODIndex, int32 ElementIndex, bool bWireframe, bool bUseInversedIndices, bool bAllowPreCulledIndices, const FVertexFactory* VertexFactory, FMeshBatch& OutMeshElement)"
  },
  {
    "label": "SetMeshElementScreenSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshElementScreenSize(int32 LODIndex, bool bDitheredLODTransition, FMeshBatch& OutMeshBatch)"
  },
  {
    "label": "ShouldRenderBackFaces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderBackFaces()"
  },
  {
    "label": "IsReversedCullingNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReversedCullingNeeded(bool bUseReversedIndices)"
  },
  {
    "label": "IsCollisionView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCollisionView(const FEngineShowFlags& EngineShowFlags, bool& bDrawSimpleCollision, bool& bDrawComplexCollision)"
  },
  {
    "label": "GetCurrentFirstLODIdx_Internal()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "GetCurrentFirstLODIdx_Internal()"
  },
  {
    "label": "OnEvaluateWorldPositionOffsetChanged_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEvaluateWorldPositionOffsetChanged_RenderThread()"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR HHitProxy*)",
    "insertText": "CreateHitProxies(UPrimitiveComponent* Component, TArray<TRefCountPtr<HHitProxy> >& OutHitProxies)"
  },
  {
    "label": "CreateHitProxies()",
    "kind": "Method",
    "detail": "Function (HHitProxy*)",
    "insertText": "CreateHitProxies(IPrimitiveComponent* ComponentInterface, TArray<TRefCountPtr<HHitProxy> >& OutHitProxies)"
  },
  {
    "label": "DrawStaticElements()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DrawStaticElements(FStaticPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GetLOD()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLOD(const FSceneView* View)"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "CanBeOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeOccluded()"
  },
  {
    "label": "AllowInstanceCullingOcclusionQueries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowInstanceCullingOcclusionQueries()"
  },
  {
    "label": "GetLightRelevance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightRelevance(const FLightSceneProxy* LightSceneProxy, bool& bDynamic, bool& bRelevant, bool& bLightMapped, bool& bShadowMapped)"
  },
  {
    "label": "GetDistanceFieldAtlasData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDistanceFieldAtlasData(const FDistanceFieldVolumeData*& OutDistanceFieldData, float& SelfShadowBias)"
  },
  {
    "label": "HasDistanceFieldRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDistanceFieldRepresentation()"
  },
  {
    "label": "StaticMeshHasPendingStreaming()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticMeshHasPendingStreaming()"
  },
  {
    "label": "HasDynamicIndirectShadowCasterRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDynamicIndirectShadowCasterRepresentation()"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemoryFootprint(void)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "GetMeshDescription()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetMeshDescription(int32 LODIndex, TArray<FMeshBatch>& OutMeshElements)"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetMeshCardRepresentation()",
    "kind": "Method",
    "detail": "Function (const FCardRepresentationData*)",
    "insertText": "GetMeshCardRepresentation()"
  },
  {
    "label": "IsCullingReversedByComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCullingReversedByComponent()"
  },
  {
    "label": "GetDynamicRayTracingInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicRayTracingInstances(FRayTracingInstanceCollector& Collector)"
  },
  {
    "label": "HasRayTracingRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRayTracingRepresentation()"
  },
  {
    "label": "IsRayTracingRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingRelevant()"
  },
  {
    "label": "IsStaticLightingAllowed()",
    "kind": "Method",
    "detail": "Function (const bool bAllowStaticLighting =)",
    "insertText": "IsStaticLightingAllowed()"
  },
  {
    "label": "HasViewDependentDPG()",
    "kind": "Method",
    "detail": "Function (const bool bIsStaticInstance = ! bDynamicRayTracingGeometry ; return bIsStaticInstance&& !)",
    "insertText": "HasViewDependentDPG() && !(bAllowStaticLighting && HasStaticLighting() && !HasValidSettingsForStaticLighting())"
  },
  {
    "label": "GetRayTracingGeometryGroupHandle()",
    "kind": "Method",
    "detail": "Function (} RayTracing::GeometryGroupHandle)",
    "insertText": "GetRayTracingGeometryGroupHandle()"
  },
  {
    "label": "GetLCIs()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetLCIs(FLCIArray& LCIs)"
  },
  {
    "label": "GetPrimitiveDistance()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "GetPrimitiveDistance(int32 LODIndex, int32 SectionIndex, const FVector& ViewOrigin, float& PrimitiveDistance)"
  },
  {
    "label": "GetMeshUVDensities()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMeshUVDensities(int32 LODIndex, int32 SectionIndex, FVector4& WorldUVDensities)"
  },
  {
    "label": "GetMaterialTextureScales()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaterialTextureScales(int32 LODIndex, int32 SectionIndex, const FMaterialRenderProxy* MaterialRenderProxy, FVector4f* OneOverScales, FIntVector4* UVChannelIndices)"
  },
  {
    "label": "GetLightMapResolution()",
    "kind": "Method",
    "detail": "Function (# endif # if STATICMESH_ENABLE_DEBUG_RENDERING int32)",
    "insertText": "GetLightMapResolution()"
  },
  {
    "label": "FLODInfo()",
    "kind": "Method",
    "detail": "Function (} UMaterialInterface* Material ; # if WITH_EDITOR bool bSelected ; HHitProxy* HitProxy ; # endif # if WITH_EDITORONLY_DATA int32 MaterialIndex ; # endif int32 FirstPreCulledIndex ; int32 NumPreCulledTriangles ; } ; TArray<FSectionInfo,TInlineAllocator<1>> Sections ; FColorVertexBuffer* OverrideColorVertexBuffer ; TUniformBufferRef<FLocalVertexFactoryUniformShaderParameters> OverrideColorVFUniformBuffer ; const FRawStaticIndexBuffer* PreCulledIndexBuffer ;)",
    "insertText": "FLODInfo(const FStaticMeshSceneProxyDesc& InProxyDesc, const FStaticMeshVertexFactoriesArray& InLODVertexFactories, int32 InLODIndex, int32 InClampedMinLOD, bool bLODsShareStaticLighting)"
  },
  {
    "label": "UsesMeshModifyingMaterials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesMeshModifyingMaterials()"
  },
  {
    "label": "CreateDynamicRayTracingGeometries()",
    "kind": "Method",
    "detail": "Function (private : TArray<FGuid> IrrelevantLights ; bool bUsesMeshModifyingMaterials ; } ; FStaticMeshRenderData* RenderData ; TArray<FLODInfo> LODs ; const FDistanceFieldVolumeData* DistanceFieldData ; const FCardRepresentationData* CardRepresentationData ; UMaterialInterface* OverlayMaterial ; float OverlayMaterialMaxDrawDistance ; # if RHI_RAYTRACING void)",
    "insertText": "CreateDynamicRayTracingGeometries(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseDynamicRayTracingGeometries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDynamicRayTracingGeometries()"
  },
  {
    "label": "FUintVector2()",
    "kind": "Method",
    "detail": "Function (bool bSupportRayTracing : 1 ; bool bDynamicRayTracingGeometry : 1 ; bool bNeedsDynamicRayTracingGeometries : 1 ; TArray<FRayTracingGeometry,TInlineAllocator<MAX_MESH_LOD_COUNT>> DynamicRayTracingGeometries ; TArray<FMeshBatch> CachedRayTracingMaterials ; int16 CachedRayTracingMaterialsLODIndex = INDEX_NONE ; RayTracing::GeometryGroupHandle RayTracingGeometryGroupHandle = INDEX_NONE ; # endif int32 ForcedLodModel ; int32 ClampedMinLOD ; uint32 bCastShadow : 1 ; uint32 bReverseCulling : 1 ; uint32 MeshPaintTextureCoordinateIndex : 2 ; FMaterialRelevance MaterialRelevance ; float WPODisableDistance ; # if WITH_EDITORONLY_DATA float StreamingDistanceMultiplier ; float StreamingTransformScale ; TArray<uint32> MaterialStreamingRelativeBoxes ; int32 SectionIndexPreview ; int32 MaterialIndexPreview ; bool bPerSectionSelection ; # endif private : const UStaticMesh* StaticMesh ; FTextureResource* MeshPaintTextureResource = nullptr ; FUintVector2 MeshPaintTextureDescriptor =)",
    "insertText": "FUintVector2(0, 0)"
  },
  {
    "label": "GetScreenSize()",
    "kind": "Method",
    "detail": "Function (# if STATICMESH_ENABLE_DEBUG_RENDERING UObject* Owner ; int32 LightMapResolution ; UBodySetup* BodySetup ; ECollisionTraceFlag CollisionTraceFlag ; FCollisionResponseContainer CollisionResponse ; int32 LODForCollision ; uint32 bDrawMeshCollisionIfComplex : 1 ; uint32 bDrawMeshCollisionIfSimple : 1 ; protected : uint8 HierarchicalLODIndex ; # endif public : float)",
    "insertText": "GetScreenSize(int32 LODIndex)"
  },
  {
    "label": "GetLODMask()",
    "kind": "Method",
    "detail": "Function (FLODMask)",
    "insertText": "GetLODMask(const FSceneView* View)"
  },
  {
    "label": "AddSpeedTreeWind()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddSpeedTreeWind()"
  },
  {
    "label": "RemoveSpeedTreeWind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpeedTreeWind()"
  }
]