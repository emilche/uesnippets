[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SBoxPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBoxPanel"
  },
  {
    "label": "TSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlot"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlot"
  },
  {
    "label": "FScopedWidgetSlotArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedWidgetSlotArguments"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SStackBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SStackBox"
  },
  {
    "label": "FDragAndDropVerticalBoxOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragAndDropVerticalBoxOp"
  },
  {
    "label": "SDragAndDropVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDragAndDropVerticalBox"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Layout / Visibility . h \" # include \" Types / SlateStructs . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SlotBase . h \" # include \" Widgets / SWidget . h \" # include \" Layout / BasicLayoutWidgetSlot . h \" # include \" Layout / Children . h \" # include \" Widgets / SPanel . h \" # include \" Layout / ArrangedChildren . h \" # include \" Input / DragAndDrop . h \" # include \" Rendering / DrawElements . h \" # include \" Styling / SlateBrush . h \" class FArrangedChildren ; class SBoxPanel : public SPanel {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SBoxPanel, SPanel, SLATECORE_API)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(TSlot, TBasicLayoutWidgetSlot<SlotType>) SLATE_ARGUMENT(TOptional<FSizeParam>, SizeParam)"
  },
  {
    "label": "SLATE_SLOT_END_ARGS()",
    "kind": "Method",
    "detail": "Function (TAttribute<float> _MaxSize ;)",
    "insertText": "SLATE_SLOT_END_ARGS() protected: TSlot() : TBasicLayoutWidgetSlot<SlotType>(HAlign_Fill, VAlign_Fill) , SizeRule(FSizeParam::SizeRule_Stretch) , SizeValue(*this, 1.f) , ShrinkSizeValue(*this, 1.f) , MinSize(*this, 0.0f) , MaxSize(*this, 0.0f)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TBasicLayoutWidgetSlot<SlotType)",
    "insertText": "Construct(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "SetMinSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinSize(MoveTemp(InArgs._MinSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._MaxSize.IsSet())"
  },
  {
    "label": "SetMaxSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSize(MoveTemp(InArgs._MaxSize))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InArgs._SizeParam.IsSet())"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeParam(MoveTemp(InArgs._SizeParam.GetValue()))"
  },
  {
    "label": "RegisterAttributes()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RegisterAttributes(FSlateWidgetSlotAttributeInitializer& AttributeInitializer)"
  },
  {
    "label": "RegisterAttributes()",
    "kind": "Method",
    "detail": "Function (TBasicLayoutWidgetSlot<SlotType)",
    "insertText": "RegisterAttributes(AttributeInitializer)"
  },
  {
    "label": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME(TSlot<SlotType>, AttributeInitializer, \"Slot.MinSize\", MinSize, EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME(TSlot<SlotType>, AttributeInitializer, \"Slot.MaxSize\", MaxSize, EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME(TSlot<SlotType>, AttributeInitializer, \"Slot.SizeValue\", SizeValue, EInvalidateWidgetReason::Layout) .UpdatePrerequisite(\"Slot.MinSize\") .UpdatePrerequisite(\"Slot.MaxSize\")"
  },
  {
    "label": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ADD_SLOT_ATTRIBUTE_DEFINITION_WITH_NAME(TSlot<SlotType>, AttributeInitializer, \"Slot.ShrinkSizeValue\", ShrinkSizeValue, EInvalidateWidgetReason::Layout) .UpdatePrerequisite(\"Slot.MinSize\") .UpdatePrerequisite(\"Slot.MaxSize\")"
  },
  {
    "label": "GetSizeRule()",
    "kind": "Method",
    "detail": "Function (} FSizeParam::ESizeRule)",
    "insertText": "GetSizeRule()"
  },
  {
    "label": "GetShrinkSizeValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetShrinkSizeValue()"
  },
  {
    "label": "GetMinSize()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMinSize()"
  },
  {
    "label": "GetMaxSize()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetMaxSize()"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetSizeParam(FSizeParam InSizeParam)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SizeRule = InSizeParam . SizeRule ;)",
    "insertText": "if(SizeRule == FSizeParam::SizeRule_StretchContent)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (ShrinkSizeValue .)",
    "insertText": "Assign(*this, MoveTemp(InSizeParam.ShrinkValue))"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} else { ShrinkSizeValue .)",
    "insertText": "Assign(*this, InSizeParam.Value)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } else { ShrinkSizeValue .)",
    "insertText": "Set(*this, 1.f)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} SizeValue .)",
    "insertText": "Assign(*this, MoveTemp(InSizeParam.Value))"
  },
  {
    "label": "SetSizeToAuto()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSizeToAuto()"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeParam(FAuto())"
  },
  {
    "label": "SetSizeToStretch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSizeToStretch(TAttribute<float> InStretchCoefficient)"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeParam(FStretch(MoveTemp(InStretchCoefficient)))"
  },
  {
    "label": "SetSizeToStretchContent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSizeToStretchContent(TAttribute<float> InStretchCoefficient, TAttribute<float> InShrinkStretchCoefficient = TAttribute<float>())"
  },
  {
    "label": "SetSizeParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeParam(FStretchContent(MoveTemp(InStretchCoefficient), MoveTemp(InShrinkStretchCoefficient)))"
  },
  {
    "label": "SetMinSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinSize(TAttribute<float> InMinSize)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (MinSize .)",
    "insertText": "Assign(*this, MoveTemp(InMinSize))"
  },
  {
    "label": "SetMaxSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxSize(TAttribute<float> InMaxSize)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (MaxSize .)",
    "insertText": "Assign(*this, MoveTemp(InMaxSize))"
  },
  {
    "label": "FScopedWidgetSlotArguments()",
    "kind": "Method",
    "detail": "Function (} private : FSizeParam::ESizeRule SizeRule ; TBasicLayoutWidgetSlot<SlotType>::template TSlateSlotAttribute<float> SizeValue ; TBasicLayoutWidgetSlot<SlotType>::template TSlateSlotAttribute<float> ShrinkSizeValue ; TBasicLayoutWidgetSlot<SlotType>::template TSlateSlotAttribute<float> MinSize ; TBasicLayoutWidgetSlot<SlotType>::template TSlateSlotAttribute<float> MaxSize ; } ; public : class FSlot : public TSlot<FSlot> { } ; protected : template<SlotType> struct FScopedWidgetSlotArguments : public SlotType::FSlotArguments { public :)",
    "insertText": "FScopedWidgetSlotArguments(TUniquePtr<SlotType> InSlot, TPanelChildren<FSlot>& InChildren, int32 InIndex) : SlotType::FSlotArguments(MoveTemp(InSlot)) , Children(InChildren) , Index(InIndex)"
  },
  {
    "label": "FScopedWidgetSlotArguments()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScopedWidgetSlotArguments()"
  },
  {
    "label": "FScopedWidgetSlotArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedWidgetSlotArguments(const FScopedWidgetSlotArguments&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedWidgetSlotArguments&)",
    "insertText": "operator(const FScopedWidgetSlotArguments&)"
  },
  {
    "label": "FScopedWidgetSlotArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedWidgetSlotArguments(FScopedWidgetSlotArguments&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopedWidgetSlotArguments&)",
    "insertText": "operator(FScopedWidgetSlotArguments&&)"
  },
  {
    "label": "FSlotArguments()",
    "kind": "Method",
    "detail": "Function (SBoxPanel::FSlot::FSlotArguments* SelfAsBaseSlot = static_cast<SBoxPanel::)",
    "insertText": "FSlotArguments(static_cast<FSlotBase::FSlotArguments*>(this))"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "AddSlot(MoveTemp(*SelfAsBaseSlot))"
  },
  {
    "label": "InsertSlot()",
    "kind": "Method",
    "detail": "Function (} else { Children .)",
    "insertText": "InsertSlot(MoveTemp(*SelfAsBaseSlot), Index)"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (} } } private : TPanelChildren<FSlot>& Children ; int32 Index ; } ; public : int32)",
    "insertText": "RemoveSlot(const TSharedRef<SWidget>& SlotWidget)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "NumSlots()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumSlots()"
  },
  {
    "label": "IsValidSlotIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidSlotIndex(int32 Index)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "SBoxPanel()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SBoxPanel()"
  },
  {
    "label": "SBoxPanel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SBoxPanel(EOrientation InOrientation)"
  },
  {
    "label": "SetOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOrientation(EOrientation InOrientation)"
  },
  {
    "label": "GetOrientation()",
    "kind": "Method",
    "detail": "Function (EOrientation)",
    "insertText": "GetOrientation()"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, SBoxPanel::TSlot<FSlot>) FSlotArguments& AutoWidth()"
  },
  {
    "label": "FAuto()",
    "kind": "Method",
    "detail": "Function (_SizeParam =)",
    "insertText": "FAuto()"
  },
  {
    "label": "FillWidth()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "FillWidth(TAttribute<float> InStretchCoefficient)"
  },
  {
    "label": "FStretch()",
    "kind": "Method",
    "detail": "Function (_SizeParam =)",
    "insertText": "FStretch(MoveTemp(InStretchCoefficient))"
  },
  {
    "label": "FillContentWidth()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "FillContentWidth(TAttribute<float> InStretchCoefficient, TAttribute<float> InShrinkStretchCoefficient = TAttribute<float>())"
  },
  {
    "label": "FStretchContent()",
    "kind": "Method",
    "detail": "Function (_SizeParam =)",
    "insertText": "FStretchContent(MoveTemp(InStretchCoefficient), MoveTemp(InShrinkStretchCoefficient))"
  },
  {
    "label": "MinWidth()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "MinWidth(TAttribute<float> InMinWidth)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (_MinSize =)",
    "insertText": "MoveTemp(InMinWidth)"
  },
  {
    "label": "MaxWidth()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "MaxWidth(TAttribute<float> InMaxWidth)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (_MaxSize =)",
    "insertText": "MoveTemp(InMaxWidth)"
  },
  {
    "label": "SLATE_SLOT_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_END_ARGS() void SetAutoWidth()"
  },
  {
    "label": "SetFillWidth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFillWidth(TAttribute<float> InStretchCoefficient)"
  },
  {
    "label": "SetSizeToStretch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeToStretch(MoveTemp(InStretchCoefficient))"
  },
  {
    "label": "SetFillContentWidth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFillContentWidth(TAttribute<float> InStretchCoefficient, TAttribute<float> InShrinkStretchCoefficient = TAttribute<float>())"
  },
  {
    "label": "SetSizeToStretchContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSizeToStretchContent(MoveTemp(InStretchCoefficient), MoveTemp(InShrinkStretchCoefficient))"
  },
  {
    "label": "SetMinWidth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinWidth(TAttribute<float> InMinWidth)"
  },
  {
    "label": "SetMinSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinSize(MoveTemp(InMinWidth))"
  },
  {
    "label": "SetMaxWidth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxWidth(TAttribute<float> InMaxWidth)"
  },
  {
    "label": "SetMaxSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSize(MoveTemp(InMaxWidth))"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (} } ; FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_BEGIN_ARGS(SHorizontalBox)"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(SHorizontalBox::FSlot, Slots) SLATE_END_ARGS()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (FScopedWidgetSlotArguments)",
    "insertText": "AddSlot()"
  },
  {
    "label": "InsertSlot()",
    "kind": "Method",
    "detail": "Function (} FScopedWidgetSlotArguments)",
    "insertText": "InsertSlot(int32 Index = INDEX_NONE)"
  },
  {
    "label": "GetSlot()",
    "kind": "Method",
    "detail": "Function (} FSlot&)",
    "insertText": "GetSlot(int32 SlotIndex)"
  },
  {
    "label": "SetCanTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanTick(false)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (bCanSupportFocus = false ; } void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (} ; class SVerticalBox : public SBoxPanel {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SVerticalBox, SBoxPanel, SLATECORE_API)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, SBoxPanel::TSlot<FSlot>) FSlotArguments& AutoHeight()"
  },
  {
    "label": "FillHeight()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "FillHeight(TAttribute<float> InStretchCoefficient)"
  },
  {
    "label": "FillContentHeight()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "FillContentHeight(TAttribute<float> InStretchCoefficient, TAttribute<float> InShrinkStretchCoefficient = TAttribute<float>())"
  },
  {
    "label": "MinHeight()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "MinHeight(TAttribute<float> InMinHeight)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (_MinSize =)",
    "insertText": "MoveTemp(InMinHeight)"
  },
  {
    "label": "MaxHeight()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "MaxHeight(TAttribute<float> InMaxHeight)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (_MaxSize =)",
    "insertText": "MoveTemp(InMaxHeight)"
  },
  {
    "label": "SLATE_SLOT_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_END_ARGS() void SetAutoHeight()"
  },
  {
    "label": "SetFillHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFillHeight(TAttribute<float> InStretchCoefficient)"
  },
  {
    "label": "SetFillContentHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFillContentHeight(TAttribute<float> InStretchCoefficient, TAttribute<float> InShrinkStretchCoefficient = TAttribute<float>())"
  },
  {
    "label": "SetMinHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinHeight(TAttribute<float> InMinHeight)"
  },
  {
    "label": "SetMinSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinSize(MoveTemp(InMinHeight))"
  },
  {
    "label": "SetMaxHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxHeight(TAttribute<float> InMaxHeight)"
  },
  {
    "label": "SetMaxSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSize(MoveTemp(InMaxHeight))"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_BEGIN_ARGS(SVerticalBox)"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(SVerticalBox::FSlot, Slots) SLATE_END_ARGS()"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (} ; class SStackBox : public SBoxPanel {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SStackBox, SBoxPanel, SLATECORE_API)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_SLOT_BEGIN_ARGS(FSlot, SBoxPanel::TSlot<FSlot>) FSlotArguments& AutoSize()"
  },
  {
    "label": "FillSize()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "FillSize(TAttribute<float> InStretchCoefficient)"
  },
  {
    "label": "FillContentSize()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "FillContentSize(TAttribute<float> InStretchCoefficient, TAttribute<float> InShrinkStretchCoefficient = TAttribute<float>())"
  },
  {
    "label": "MinSize()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "MinSize(TAttribute<float> InMinHeight)"
  },
  {
    "label": "MaxSize()",
    "kind": "Method",
    "detail": "Function (} FSlotArguments&)",
    "insertText": "MaxSize(TAttribute<float> InMaxHeight)"
  },
  {
    "label": "SLATE_SLOT_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_BEGIN_ARGS(SStackBox)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_ARGUMENT(EOrientation, Orientation) SLATE_SLOT_ARGUMENT(SStackBox::FSlot, Slots) SLATE_END_ARGS()"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (using SBoxPanel::SetOrientation ; using SBoxPanel::GetOrientation ; } ; class FDragAndDropVerticalBoxOp : public FDragDropOperation { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FDragAndDropVerticalBoxOp, FDragDropOperation)"
  },
  {
    "label": "FDragAndDropVerticalBoxOp()",
    "kind": "Method",
    "detail": "Function (SVerticalBox::FSlot* SlotBeingDragged ; ~)",
    "insertText": "FDragAndDropVerticalBoxOp()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_FourParams()",
    "kind": "Method",
    "detail": "Function (} } ; class SDragAndDropVerticalBox : public SVerticalBox { public : enum class EItemDropZone { AboveItem,BelowItem } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_FourParams(FReply, FOnDragAndDropVerticalBoxDragDetected, const FGeometry&, const FPointerEvent&, int32, SVerticalBox::FSlot*) DECLARE_DELEGATE_OneParam(FOnDragAndDropVerticalBoxDragEnter, FDragDropEvent const&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnDragAndDropVerticalBoxDragLeave, FDragDropEvent const&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FReply, FOnDragAndDropVerticalBoxDrop, FDragDropEvent const&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(TOptional<EItemDropZone>, FOnCanAcceptDrop, const FDragDropEvent&, SDragAndDropVerticalBox::EItemDropZone, SVerticalBox::FSlot*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_FourParams(FReply, FOnAcceptDrop, const FDragDropEvent&, SDragAndDropVerticalBox::EItemDropZone, int32, SVerticalBox::FSlot*)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SDragAndDropVerticalBox)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnCanAcceptDrop, OnCanAcceptDrop) SLATE_EVENT(FOnAcceptDrop, OnAcceptDrop) SLATE_EVENT(FOnDragAndDropVerticalBoxDragDetected, OnDragDetected) SLATE_EVENT(FOnDragAndDropVerticalBoxDragEnter, OnDragEnter) SLATE_EVENT(FOnDragAndDropVerticalBoxDragLeave, OnDragLeave) SLATE_EVENT(FOnDragAndDropVerticalBoxDrop, OnDrop) SLATE_END_ARGS() SLATECORE_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetDropIndicator_Above()",
    "kind": "Method",
    "detail": "Function (SDragAndDropVerticalBox&)",
    "insertText": "SetDropIndicator_Above(const FSlateBrush& InValue)"
  },
  {
    "label": "SetDropIndicator_Below()",
    "kind": "Method",
    "detail": "Function (DropIndicator_Above = InValue ; return* this ; } SDragAndDropVerticalBox&)",
    "insertText": "SetDropIndicator_Below(const FSlateBrush& InValue)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (DropIndicator_Below = InValue ; return* this ; } FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(FGeometry const& MyGeometry, FDragDropEvent const& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(FDragDropEvent const& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ZoneFromPointerPosition()",
    "kind": "Method",
    "detail": "Function (private : FOnCanAcceptDrop OnCanAcceptDrop ; FOnAcceptDrop OnAcceptDrop ; TOptional<EItemDropZone> ItemDropZone ; FOnDragAndDropVerticalBoxDragDetected OnDragDetected_Handler ; FOnDragAndDropVerticalBoxDragEnter OnDragEnter_Handler ; FOnDragAndDropVerticalBoxDragLeave OnDragLeave_Handler ; FOnDragAndDropVerticalBoxDrop OnDrop_Handler ; FSlateBrush DropIndicator_Above ; FSlateBrush DropIndicator_Below ; FVector2f CurrentDragOperationScreenSpaceLocation ; int32 CurrentDragOverSlotIndex ; EItemDropZone)",
    "insertText": "ZoneFromPointerPosition(FVector2f LocalPointerPos, const FGeometry& CurrentGeometry, const FGeometry& StartGeometry)"
  }
]