[
  {
    "label": "PA_COMPONENT_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_COMPONENT_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_REF_COUNT_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_PARTITION_REF_COUNT_H_ # include<atomic> # include<cstdint> # include \" base / allocator / partition_allocator / dangling_raw_ptr_checks . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / immediate_crash . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_check . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / allocator / partition_allocator / partition_alloc_constants . h \" # include \" base / allocator / partition_allocator / partition_alloc_forward . h \" # include \" base / allocator / partition_allocator / tagging . h \" # include \" build / build_config . h \" namespace partition_alloc::internal { # if)",
    "insertText": "BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) class PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (public : # if)",
    "insertText": "BUILDFLAG(ENABLE_DANGLING_RAW_PTR_CHECKS)"
  },
  {
    "label": "PartitionRefCount()",
    "kind": "Method",
    "detail": "Function (CountType kMemoryHeldByAllocatorBit = 0 x0000 ' 0 0 0 0 ' 0 0 0 0 ' 0 0 0 1 ; CountType kPtrCountMask = 0 x0000 ' 0 0 0 0 ' FFFF ' FFFE ; CountType kUnprotectedPtrCountMask = 0 xFFFF ' FFFC ' 0 0 0 0 ' 0 0 0 0 ; CountType kDanglingRawPtrDetectedBit = 0 x0000 ' 0 0 0 1 ' 0 0 0 0 ' 0 0 0 0 ; CountType kNeedsMac11MallocSizeHackBit = 0 x0000 ' 0 0 0 2 ' 0 0 0 0 ' 0 0 0 0 ; CountType kPtrInc = 0 x0000 ' 0 0 0 0 ' 0 0 0 0 ' 0 0 0 2 ; CountType kUnprotectedPtrInc = 0 x0000 ' 0 0 0 4 ' 0 0 0 0 ' 0 0 0 0 ; # else using CountType = uint32_t ; CountType kMemoryHeldByAllocatorBit = 0 x0000 ' 0 0 0 1 ; CountType kPtrCountMask = 0 x7FFF ' FFFE ; CountType kUnprotectedPtrCountMask = 0 x0000 ' 0 0 0 0 ; CountType kDanglingRawPtrDetectedBit = 0 x0000 ' 0 0 0 0 ; CountType kNeedsMac11MallocSizeHackBit = 0 x8000 ' 0 0 0 0 ; CountType kPtrInc = 0 x0000 ' 0 0 0 2 ; # endif)",
    "insertText": "PartitionRefCount(bool needs_mac11_malloc_size_hack)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE void)",
    "insertText": "Acquire()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (CountType old_count = count_ .)",
    "insertText": "fetch_add(kPtrInc, std::memory_order_relaxed)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK((old_count & kPtrCountMask) != kPtrCountMask)"
  },
  {
    "label": "AcquireFromUnprotectedPtr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "AcquireFromUnprotectedPtr()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_DANGLING_RAW_PTR_CHECKS) CheckCookieIfSupported()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (CountType old_count = count_ .)",
    "insertText": "fetch_add(kUnprotectedPtrInc, std::memory_order_relaxed)"
  },
  {
    "label": "PA_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_CHECK((old_count & kUnprotectedPtrCountMask) != kUnprotectedPtrCountMask)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (# endif } PA_ALWAYS_INLINE bool)",
    "insertText": "Release()"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (CountType old_count = count_ .)",
    "insertText": "fetch_sub(kPtrInc, std::memory_order_release)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(old_count & kPtrCountMask)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(ENABLE_DANGLING_RAW_PTR_CHECKS) if (PA_UNLIKELY((old_count & kDanglingRawPtrDetectedBit) == kDanglingRawPtrDetectedBit))"
  },
  {
    "label": "DanglingRawPtrReleased()",
    "kind": "Method",
    "detail": "Function (partition_alloc::)",
    "insertText": "DanglingRawPtrReleased(reinterpret_cast<uintptr_t>(this))"
  },
  {
    "label": "ReleaseCommon()",
    "kind": "Method",
    "detail": "Function (} # endif return)",
    "insertText": "ReleaseCommon(old_count - kPtrInc)"
  },
  {
    "label": "ReleaseFromUnprotectedPtr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "ReleaseFromUnprotectedPtr()"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (CountType old_count = count_ .)",
    "insertText": "fetch_sub(kUnprotectedPtrInc, std::memory_order_release)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(old_count & kUnprotectedPtrCountMask)"
  },
  {
    "label": "ReleaseFromAllocator()",
    "kind": "Method",
    "detail": "Function (# endif } PA_ALWAYS_INLINE bool)",
    "insertText": "ReleaseFromAllocator()"
  },
  {
    "label": "fetch_and()",
    "kind": "Method",
    "detail": "Function (CountType old_count = count_ .)",
    "insertText": "fetch_and(~kMemoryHeldByAllocatorBit, std::memory_order_release)"
  },
  {
    "label": "atomic_thread_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "atomic_thread_fence(std::memory_order_acquire)"
  },
  {
    "label": "ClearCookieIfSupported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCookieIfSupported()"
  },
  {
    "label": "fetch_or()",
    "kind": "Method",
    "detail": "Function (count_ .)",
    "insertText": "fetch_or(kDanglingRawPtrDetectedBit, std::memory_order_relaxed)"
  },
  {
    "label": "DanglingRawPtrDetected()",
    "kind": "Method",
    "detail": "Function (partition_alloc::)",
    "insertText": "DanglingRawPtrDetected(reinterpret_cast<uintptr_t>(this))"
  },
  {
    "label": "IsAliveWithNoKnownRefs()",
    "kind": "Method",
    "detail": "Function (} # endif return false ; } PA_ALWAYS_INLINE bool)",
    "insertText": "IsAliveWithNoKnownRefs()"
  },
  {
    "label": "IsAlive()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "IsAlive()"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (bool alive = count_ .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "UnretainedDanglingRawPtrDetected()",
    "kind": "Method",
    "detail": "Function (partition_alloc::)",
    "insertText": "UnretainedDanglingRawPtrDetected(reinterpret_cast<uintptr_t>(this))"
  },
  {
    "label": "InitalizeForGwpAsan()",
    "kind": "Method",
    "detail": "Function (} } PA_ALWAYS_INLINE void)",
    "insertText": "InitalizeForGwpAsan()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_REF_COUNT_CHECK_COOKIE) brp_cookie_ = CalculateCookie()"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (# endif count_ .)",
    "insertText": "store(kPtrInc | kMemoryHeldByAllocatorBit, std::memory_order_release)"
  },
  {
    "label": "CanBeReusedByGwpAsan()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "CanBeReusedByGwpAsan()"
  },
  {
    "label": "NeedsMac11MallocSizeHack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsMac11MallocSizeHack()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(PA_REF_COUNT_STORE_REQUESTED_SIZE) PA_ALWAYS_INLINE void SetRequestedSize(size_t size)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (requested_size_ = static_cast<)",
    "insertText": "uint32_t(size)"
  },
  {
    "label": "requested_size()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uint32_t)",
    "insertText": "requested_size()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_REF_COUNT_CHECK_COOKIE) PA_CHECK(brp_cookie_ == CalculateCookie())"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_REF_COUNT_CHECK_COOKIE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif } # if)",
    "insertText": "defined(PA_REF_COUNT_CHECK_COOKIE) PA_ALWAYS_INLINE uint32_t CalculateCookie()"
  },
  {
    "label": "DoubleFreeOrCorruptionDetected()",
    "kind": "Method",
    "detail": "Function (} # endif [ [ noreturn ] ] PA_NOINLINE PA_NOT_TAIL_CALLED void)",
    "insertText": "DoubleFreeOrCorruptionDetected(CountType count)"
  },
  {
    "label": "PA_DEBUG_DATA_ON_STACK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DEBUG_DATA_ON_STACK(\"refcount\", count)"
  },
  {
    "label": "PA_NO_CODE_FOLDING()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_NO_CODE_FOLDING()"
  },
  {
    "label": "PA_IMMEDIATE_CRASH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_IMMEDIATE_CRASH()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (volatile uint32_t brp_cookie_ ; # endif # if)",
    "insertText": "defined(PA_REF_COUNT_STORE_REQUESTED_SIZE)"
  },
  {
    "label": "PartitionRefCount()",
    "kind": "Method",
    "detail": "Function (# endif } ; PA_ALWAYS_INLINE)",
    "insertText": "PartitionRefCount(bool use_mac11_hack) : count_(kMemoryHeldByAllocatorBit | (use_mac11_hack ? kNeedsMac11MallocSizeHackBit : 0)) #if defined(PA_REF_COUNT_CHECK_COOKIE) , brp_cookie_(CalculateCookie())"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(PUT_REF_COUNT_IN_PREVIOUS_SLOT) static_assert(kAlignment % alignof(PartitionRefCount) == 0, \"kAlignment must be multiples of alignof(PartitionRefCount).\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t kInSlotRefCountBufferSize =)",
    "insertText": "sizeof(PartitionRefCount)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (size_t kPartitionRefCountOffsetAdjustment = 0 ; size_t kPartitionPastAllocationAdjustment = 0 ; # if)",
    "insertText": "BUILDFLAG(ENABLE_DANGLING_RAW_PTR_CHECKS) #if defined(PA_REF_COUNT_CHECK_COOKIE) || \\ defined(PA_REF_COUNT_STORE_REQUESTED_SIZE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else size_t kPartitionRefCountSizeShift = 3 ; # endif # else # if)",
    "insertText": "defined(PA_REF_COUNT_CHECK_COOKIE) && \\ defined(PA_REF_COUNT_STORE_REQUESTED_SIZE)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(PA_REF_COUNT_CHECK_COOKIE) || \\ defined(PA_REF_COUNT_STORE_REQUESTED_SIZE)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# else size_t kPartitionRefCountSizeShift = 2 ; # endif # endif)",
    "insertText": "static_assert((1 << kPartitionRefCountSizeShift) == sizeof(PartitionRefCount))"
  },
  {
    "label": "GetPartitionRefCountIndexMultiplierShift()",
    "kind": "Method",
    "detail": "Function (PAGE_ALLOCATOR_CONSTANTS_DECLARE_CONSTEXPR PA_ALWAYS_INLINE size_t)",
    "insertText": "GetPartitionRefCountIndexMultiplierShift()"
  },
  {
    "label": "PartitionRefCountPointer()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE PartitionRefCount*)",
    "insertText": "PartitionRefCountPointer(uintptr_t slot_start)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) CheckThatSlotOffsetIsZero(slot_start)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(PA_LIKELY(slot_start & SystemPageOffsetMask()))"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) PA_CHECK(refcount_address % alignof(PartitionRefCount) == 0)"
  },
  {
    "label": "PartitionRefCount()",
    "kind": "Method",
    "detail": "Function (# endif return static_cast<)",
    "insertText": "PartitionRefCount(TagAddr(refcount_address))"
  },
  {
    "label": "PartitionRefCount()",
    "kind": "Method",
    "detail": "Function (} else { PartitionRefCount* bitmap_base = reinterpret_cast<)",
    "insertText": "PartitionRefCount((slot_start & kSuperPageBaseMask) + SystemPageSize() * 2)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "index((slot_start & kSuperPageOffsetMask) >> SystemPageShift()) << GetPartitionRefCountIndexMultiplierShift()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) PA_CHECK(sizeof(PartitionRefCount) * index <= SystemPageSize())"
  },
  {
    "label": "PartitionRefCount()",
    "kind": "Method",
    "detail": "Function (# endif return static_cast<)",
    "insertText": "PartitionRefCount(TagAddr(slot_start))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "static_assert(sizeof(PartitionRefCount) <= kInSlotRefCountBufferSize, \"PartitionRefCount should fit into the in-slot buffer.\")"
  }
]