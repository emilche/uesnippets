[
  {
    "label": "Sig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sig"
  },
  {
    "label": "AnyInvocable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnyInvocable"
  },
  {
    "label": "StorageProperty",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StorageProperty"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsAnyInvocable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsAnyInvocable"
  },
  {
    "label": "ReturnType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnType"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "ForwardedParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForwardedParameter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "QualTRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualTRef"
  },
  {
    "label": "IsInPlaceType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsInPlaceType"
  },
  {
    "label": "QualDecayedTRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QualDecayedTRef"
  },
  {
    "label": "TypedConversionConstruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypedConversionConstruct"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "TrivialDeleter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TrivialDeleter"
  },
  {
    "label": "CoreImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoreImpl"
  },
  {
    "label": "IsCompatibleAnyInvocable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsCompatibleAnyInvocable"
  },
  {
    "label": "ConversionConstruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConversionConstruct"
  },
  {
    "label": "UnwrapStdReferenceWrapperImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnwrapStdReferenceWrapperImpl"
  },
  {
    "label": "ABSL_INTERNAL_NOEXCEPT_SPEC()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FUNCTIONAL_INTERNAL_ANY_INVOCABLE_H_ # define ABSL_FUNCTIONAL_INTERNAL_ANY_INVOCABLE_H_ # include<cassert> # include<cstddef> # include<cstring> # include<functional> # include<initializer_list> # include<memory> # include<new> # include<type_traits> # include<utility> # include \" absl / base / config . h \" # include \" absl / base / internal / invoke . h \" # include \" absl / base / macros . h \" # include \" absl / meta / type_traits . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN # if ABSL_INTERNAL_CPLUSPLUS_LANG> = 2 0 1 7 0 3 L # define)",
    "insertText": "ABSL_INTERNAL_NOEXCEPT_SPEC(noex) noexcept(noex) #else #define ABSL_INTERNAL_NOEXCEPT_SPEC(noex)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (namespace internal_any_invocable { enum StorageProperty : std::size_t { kAlignment =)",
    "insertText": "alignof(std::max_align_t), kStorageSize = sizeof(void*)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (template<class T> struct IsAnyInvocable : std::false_type { } ; template<class Sig> struct IsAnyInvocable<AnyInvocable<Sig>> : std::true_type { } ; template<class T> using IsStoredLocally = std::integral_constant<bool,)",
    "insertText": "sizeof(T) <= kStorageSize && alignof(T) <= kAlignment && kAlignment % alignof(T)"
  },
  {
    "label": "InvokeR()",
    "kind": "Method",
    "detail": "Function (template<class T> using RemoveCVRef = std::remove_cv<std::remove_reference<T>::type>::type ; template<class ReturnType,class F,class . . . P,= absl::enable_if_t<std::is_void<ReturnType>::value>> void)",
    "insertText": "InvokeR(F&& f, P&&... args)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (absl::)",
    "insertText": "invoke(std::forward<F>(f), std::forward<P>(args)...)"
  },
  {
    "label": "ForwardImpl()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "ForwardImpl(std::true_type)"
  },
  {
    "label": "ForwardImpl()",
    "kind": "Method",
    "detail": "Function (template<T> T&&)",
    "insertText": "ForwardImpl(std::false_type)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class T> struct ForwardedParameter { using type =)",
    "insertText": "decltype(( ForwardImpl<T>)(std::integral_constant<bool, std::is_scalar<T>::value>()))"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> using ForwardedParameterType = ForwardedParameter<T>::type ; enum class FunctionToCall : bool { relocate_from_to,dispose } ; union TypeErasedState { struct { void* target ; std::size_t size ; } remote ;)",
    "insertText": "alignas(kAlignment)"
  },
  {
    "label": "ObjectInLocalStorage()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> T&)",
    "insertText": "ObjectInLocalStorage(TypeErasedState* const state)"
  },
  {
    "label": "launder()",
    "kind": "Method",
    "detail": "Function (# if ABSL_INTERNAL_CPLUSPLUS_LANG> = 2 0 1 7 0 3 L return*)",
    "insertText": "launder(reinterpret_cast<T*>(&state->storage))"
  },
  {
    "label": "ABSL_HAVE_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "ABSL_HAVE_BUILTIN(__builtin_launder) return *__builtin_launder(reinterpret_cast<T*>(&state->storage))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else # if !)",
    "insertText": "defined(__clang__) && defined(__GNUC__) #pragma GCC diagnostic ignored \"-Wstrict-aliasing\" #pragma GCC diagnostic push #endif return *reinterpret_cast<T*>(&state->storage)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang__) && defined(__GNUC__) #pragma GCC diagnostic pop #endif #endif } using ManagerType = void(FunctionToCall , TypeErasedState* , TypeErasedState* ) ABSL_INTERNAL_NOEXCEPT_SPEC(true)"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (template<bool SigIsNoexcept,class ReturnType,class . . . P> using InvokerType =)",
    "insertText": "ReturnType(TypeErasedState*, ForwardedParameterType<P>...) ABSL_INTERNAL_NOEXCEPT_SPEC(SigIsNoexcept)"
  },
  {
    "label": "EmptyManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyManager(FunctionToCall , TypeErasedState* , TypeErasedState*)"
  },
  {
    "label": "LocalManagerTrivial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LocalManagerTrivial(FunctionToCall , TypeErasedState* const from, TypeErasedState* const to)"
  },
  {
    "label": "LocalManagerNontrivial()",
    "kind": "Method",
    "detail": "Function (* to =* from ; } template<class T> void)",
    "insertText": "LocalManagerNontrivial(FunctionToCall operation, TypeErasedState* const from, TypeErasedState* const to)"
  },
  {
    "label": "from_object()",
    "kind": "Method",
    "detail": "Function (T&)",
    "insertText": "from_object(ObjectInLocalStorage<T>)(from)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (ABSL_FALLTHROUGH_INTENDED ; case FunctionToCall::dispose : from_object . ~)",
    "insertText": "T()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using RawT = RemoveCVRef<QualTRef> ;)",
    "insertText": "static_assert(IsStoredLocally<RawT>::value, \"Target object must be in local storage in order to be invoked from it.\")"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (auto&)",
    "insertText": "f(ObjectInLocalStorage<RawT>)(state)"
  },
  {
    "label": "RemoteManagerTrivial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoteManagerTrivial(FunctionToCall operation, TypeErasedState* const from, TypeErasedState* const to)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (# else::operator)",
    "insertText": "delete(from->remote.target)"
  },
  {
    "label": "RemoteManagerNontrivial()",
    "kind": "Method",
    "detail": "Function (# endif return ; } ABSL_INTERNAL_UNREACHABLE ; } template<class T> void)",
    "insertText": "RemoteManagerNontrivial(FunctionToCall operation, TypeErasedState* const from, TypeErasedState* const to)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using RawT = RemoveCVRef<QualTRef> ;)",
    "insertText": "static_assert(!IsStoredLocally<RawT>::value, \"Target object must be in remote storage in order to be \" \"invoked from it.\")"
  },
  {
    "label": "RawT()",
    "kind": "Method",
    "detail": "Function (auto& f =* static_cast<)",
    "insertText": "RawT(state->remote.target)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} template<class T> struct IsInPlaceType : std::false_type { } ; template<class T> struct IsInPlaceType<absl::in_place_type_t<T>> : std::true_type { } ; template<class QualDecayedTRef> struct TypedConversionConstruct { } ; template<class Sig> class Impl { } ; # if)",
    "insertText": "defined(__cpp_sized_deallocation)"
  },
  {
    "label": "TrivialDeleter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TrivialDeleter(std::size_t size) : size_(size)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(void* target)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (::operator)",
    "insertText": "delete(target, size_)"
  },
  {
    "label": "TrivialDeleter()",
    "kind": "Method",
    "detail": "Function (} private : std::size_t size_ ; } ; # else class TrivialDeleter { public :)",
    "insertText": "TrivialDeleter(std::size_t)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (::operator)",
    "insertText": "delete(target)"
  },
  {
    "label": "IsCompatibleConversion()",
    "kind": "Method",
    "detail": "Function (} } ; # endif template<bool SigIsNoexcept,class ReturnType,class . . . P> class CoreImpl ; bool)",
    "insertText": "IsCompatibleConversion(void*, void*)"
  },
  {
    "label": "CoreImpl()",
    "kind": "Method",
    "detail": "Function (} enum class TargetType : int { kPointer = 0,kCompatibleAnyInvocable = 1,kIncompatibleAnyInvocable = 2,kOther = 3,} ; template<class QualDecayedTRef,class F>)",
    "insertText": "CoreImpl(TypedConversionConstruct<QualDecayedTRef>, F&& f)"
  },
  {
    "label": "kTargetType()",
    "kind": "Method",
    "detail": "Function (using DecayedT = RemoveCVRef<QualDecayedTRef> ; TargetType)",
    "insertText": "kTargetType(std::is_pointer<DecayedT>::value || std::is_member_pointer<DecayedT>::value)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (Initialize<static_cast<)",
    "insertText": "int(kTargetType), QualDecayedTRef>( std::forward<F>(f))"
  },
  {
    "label": "CoreImpl()",
    "kind": "Method",
    "detail": "Function (} template<class QualTRef,class . . . Args>)",
    "insertText": "CoreImpl(absl::in_place_type_t<QualTRef>, Args&&... args)"
  },
  {
    "label": "QualTRef()",
    "kind": "Method",
    "detail": "Function (InitializeStorage<)",
    "insertText": "QualTRef(std::forward<Args>(args)...)"
  },
  {
    "label": "CoreImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CoreImpl(CoreImpl&& other)"
  },
  {
    "label": "manager_()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "manager_(FunctionToCall::relocate_from_to, &other.state_, &state_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (manager_ = other . manager_ ; invoker_ = other . invoker_ ; other . manager_ = EmptyManager ; other . invoker_ = nullptr ; } CoreImpl&)",
    "insertText": "operator(CoreImpl&& other)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "CoreImpl()",
    "kind": "Method",
    "detail": "Function (manager_ = other . manager_ ; invoker_ = other . invoker_ ; other . manager_ = EmptyManager ; other . invoker_ = nullptr ; return* this ; } ~)",
    "insertText": "CoreImpl()"
  },
  {
    "label": "manager_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "manager_(FunctionToCall::dispose, &state_, &state_)"
  },
  {
    "label": "HasValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValue()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (manager_ = EmptyManager ; invoker_ = nullptr ; } template<int target_type,class QualDecayedTRef,class F,absl::enable_if_t<target_type = = 0,int> = 0> void)",
    "insertText": "Initialize(F&& f)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang__) && defined(__GNUC__) #pragma GCC diagnostic ignored \"-Wpragmas\" #pragma GCC diagnostic ignored \"-Waddress\" #pragma GCC diagnostic ignored \"-Wnonnull-compare\" #pragma GCC diagnostic push #endif if (static_cast<RemoveCVRef<QualDecayedTRef>>(f) == nullptr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang__) && defined(__GNUC__)"
  },
  {
    "label": "QualDecayedTRef()",
    "kind": "Method",
    "detail": "Function (invoker_ = nullptr ; return ; } InitializeStorage<)",
    "insertText": "QualDecayedTRef(std::forward<F>(f))"
  },
  {
    "label": "manager_()",
    "kind": "Method",
    "detail": "Function (f .)",
    "insertText": "manager_(FunctionToCall::relocate_from_to, &f.state_, &state_)"
  },
  {
    "label": "InitializeStorage()",
    "kind": "Method",
    "detail": "Function (} template<class QualTRef,class . . . Args,= absl::enable_if_t<IsStoredLocally<RemoveCVRef<QualTRef>>::value>> void)",
    "insertText": "InitializeStorage(Args&&... args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (using RawT = RemoveCVRef<QualTRef>)",
    "insertText": "new(static_cast<void*>(&state_.storage)) RawT(std::forward<Args>(args)...)"
  },
  {
    "label": "RawT()",
    "kind": "Method",
    "detail": "Function (invoker_ = LocalInvoker<SigIsNoexcept,ReturnType,QualTRef,P . . .> ; InitializeLocalManager<)",
    "insertText": "RawT()"
  },
  {
    "label": "InitializeLocalManager()",
    "kind": "Method",
    "detail": "Function (invoker_ = RemoteInvoker<SigIsNoexcept,ReturnType,QualTRef,P . . .> ; } template<class T,= absl::enable_if_t<std::is_trivially_copyable<T>::value>> void)",
    "insertText": "InitializeLocalManager()"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (manager_ = LocalManagerNontrivial<T> ; } template<class T> using HasTrivialRemoteStorage = std::integral_constant<bool,std::is_trivially_destructible<T>::value&&)",
    "insertText": "alignof(T)"
  },
  {
    "label": "InitializeRemoteManager()",
    "kind": "Method",
    "detail": "Function (template<class T,class . . . Args,= absl::enable_if_t<HasTrivialRemoteStorage<T>::value>> void)",
    "insertText": "InitializeRemoteManager(Args&&... args)"
  },
  {
    "label": "uninitialized_target()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<void,TrivialDeleter>)",
    "insertText": "uninitialized_target(::operator new(sizeof(T)), TrivialDeleter(sizeof(T)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(uninitialized_target.get()) T(std::forward<Args>(args)...)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (state_ . remote . target = uninitialized_target .)",
    "insertText": "release()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (state_ . remote . size =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (state_ . remote . target =::new)",
    "insertText": "T(std::forward<Args>(args)...)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (manager_ = RemoteManagerNontrivial<T> ; } template<Other> struct IsCompatibleAnyInvocable { bool value = false ; } ; template<Sig> struct IsCompatibleAnyInvocable<AnyInvocable<Sig>> { bool)",
    "insertText": "value(IsCompatibleConversion)(static_cast< typename AnyInvocable<Sig>::CoreImpl*>( nullptr), static_cast<CoreImpl*>(nullptr))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; TypeErasedState state_ ; ManagerType* manager_ ; InvokerType<SigIsNoexcept,ReturnType,P . . .>* invoker_ ; } ; struct ConversionConstruct { } ; template<class T> struct UnwrapStdReferenceWrapperImpl { using type = T ; } ; template<class T> struct UnwrapStdReferenceWrapperImpl<std::reference_wrapper<T>> { using type = T& ; } ; template<class T> using UnwrapStdReferenceWrapper = UnwrapStdReferenceWrapperImpl<T>::type ; template<class . . . T> using TrueAlias = std::integral_constant<bool,)",
    "insertText": "sizeof(absl::void_t<T...>*)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_NOEXCEPT_CONSTRAINT()",
    "kind": "Method",
    "detail": "Function (template<class Sig,class F,class = absl::enable_if_t<! std::is_same<RemoveCVRef<F>,AnyInvocable<Sig>>::value>> using CanConvert = TrueAlias<absl::enable_if_t<! IsInPlaceType<RemoveCVRef<F>>::value>,absl::enable_if_t<Impl<Sig>::template CallIsValid<F>::value>,absl::enable_if_t<Impl<Sig>::template CallIsNoexceptIfSigIsNoexcept<F>::value>,absl::enable_if_t<std::is_constructible<absl::decay_t<F>,F>::value>> ; template<class Sig,class F,class . . . Args> using CanEmplace = TrueAlias<absl::enable_if_t<Impl<Sig>::template CallIsValid<F>::value>,absl::enable_if_t<Impl<Sig>::template CallIsNoexceptIfSigIsNoexcept<F>::value>,absl::enable_if_t<std::is_constructible<absl::decay_t<F>,Args . . .>::value>> ; template<class Sig,class F,class = absl::enable_if_t<! std::is_same<RemoveCVRef<F>,AnyInvocable<Sig>>::value>> using CanAssign = TrueAlias<absl::enable_if_t<Impl<Sig>::template CallIsValid<F>::value>,absl::enable_if_t<Impl<Sig>::template CallIsNoexceptIfSigIsNoexcept<F>::value>,absl::enable_if_t<std::is_constructible<absl::decay_t<F>,F>::value>> ; template<class Sig,class F> using CanAssignReferenceWrapper = TrueAlias<absl::enable_if_t<Impl<Sig>::template CallIsValid<std::reference_wrapper<F>>::value>,absl::enable_if_t<Impl<Sig>::template CallIsNoexceptIfSigIsNoexcept<std::reference_wrapper<F>>::value>> ; # define)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_NOEXCEPT_CONSTRAINT(inv_quals, noex) \\ ABSL_INTERNAL_ANY_INVOCABLE_NOEXCEPT_CONSTRAINT_##noex(inv_quals) #define ABSL_INTERNAL_ANY_INVOCABLE_NOEXCEPT_CONSTRAINT_true(inv_quals) \\ absl::enable_if_t<absl::disjunction< \\ std::is_nothrow_invocable_r< \\ ReturnType, UnwrapStdReferenceWrapper<absl::decay_t<F>> inv_quals, \\ P...>, \\ std::conjunction< \\ std::is_nothrow_invocable< \\ UnwrapStdReferenceWrapper<absl::decay_t<F>> inv_quals, P...>, \\ std::is_same< \\ ReturnType, \\ absl::base_internal::invoke_result_t< \\ UnwrapStdReferenceWrapper<absl::decay_t<F>> inv_quals, \\ P...>>>>::value> #define ABSL_INTERNAL_ANY_INVOCABLE_NOEXCEPT_CONSTRAINT_false(inv_quals) #define ABSL_INTERNAL_ANY_INVOCABLE_IMPL_(cv, ref, inv_quals, noex) \\ template <class ReturnType, class... P> \\ class Impl<ReturnType(P...) cv ref ABSL_INTERNAL_NOEXCEPT_SPEC(noex)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_NOEXCEPT_CONSTRAINT()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ \\ using Core = CoreImpl<noex,ReturnType,P . . .> ; \\ \\ \\ template<class F> \\ using CallIsValid = TrueAlias<absl::enable_if_t<absl::disjunction<\\ absl::base_internal::is_invocable_r<ReturnType,\\ absl::decay_t<F> inv_quals,P . . .>,\\ std::is_same<ReturnType,\\ absl::base_internal::invoke_result_t<\\ absl::decay_t<F> inv_quals,P . . .>>>::value>> ; \\ \\ \\ template<class F> \\ using CallIsNoexceptIfSigIsNoexcept = \\ TrueAlias<)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_NOEXCEPT_CONSTRAINT(inv_quals, \\ noex)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\)",
    "insertText": "Impl()"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ \\ \\ template<class F> \\)",
    "insertText": "Impl(ConversionConstruct, F&& f) \\ : Core(TypedConversionConstruct< \\ typename std::decay<F>::type inv_quals>(), \\ std::forward<F>(f))"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} \\ \\ \\ template<class T,class . . . Args> \\)",
    "insertText": "Impl(absl::in_place_type_t<T>, Args&&... args) \\ : Core(absl::in_place_type<absl::decay_t<T> inv_quals>, \\ std::forward<Args>(args)...)"
  },
  {
    "label": "ExtractInvoker()",
    "kind": "Method",
    "detail": "Function (} \\ \\ InvokerType<noex,ReturnType,P . . .>*)",
    "insertText": "ExtractInvoker()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ using QualifiedTestType = int cv ref ; \\ auto* invoker = this -> invoker_ ; \\)",
    "insertText": "if(!std::is_const<QualifiedTestType>::value && \\ std::is_rvalue_reference<QualifiedTestType>::value)"
  },
  {
    "label": "ABSL_HARDENING_ASSERT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_HARDENING_ASSERT([this]() { \\ \\ const_cast<Impl*>(this)->invoker_ = \\ [](TypeErasedState*, \\ ForwardedParameterType<P>...) noexcept(noex) -> ReturnType { \\ ABSL_HARDENING_ASSERT(false && \"AnyInvocable use-after-move\"); \\ std::terminate(); \\ }; \\ return this->HasValue(); \\ }())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return invoker ; \\ } \\ \\ \\ ReturnType)",
    "insertText": "operator()(P... args) cv ref noexcept(noex)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "assert(this->invoker_ != nullptr)"
  },
  {
    "label": "ExtractInvoker()",
    "kind": "Method",
    "detail": "Function (\\ return this ->)",
    "insertText": "ExtractInvoker()( \\ const_cast<TypeErasedState*>(&this->state_), \\ static_cast<ForwardedParameterType<P>>(args)...)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } # if ABSL_INTERNAL_CPLUSPLUS_LANG> = 2 0 1 7 0 3 L # define)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL(cv, ref, inv_quals) \\ ABSL_INTERNAL_ANY_INVOCABLE_IMPL_(cv, ref, inv_quals, false)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL_(cv, ref, inv_quals, true) #else #define ABSL_INTERNAL_ANY_INVOCABLE_IMPL(cv, ref, inv_quals) \\ ABSL_INTERNAL_ANY_INVOCABLE_IMPL_(cv, ref, inv_quals, false) #endif ABSL_INTERNAL_ANY_INVOCABLE_IMPL(, , &)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL(const, , const&)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL(, &, &)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL(const, &, const&)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL(, &&, &&)"
  },
  {
    "label": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_ANY_INVOCABLE_IMPL(const, &&, const&&)"
  }
]