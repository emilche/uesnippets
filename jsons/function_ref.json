[
  {
    "label": "ForwardT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForwardT"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_FUNCTIONAL_INTERNAL_FUNCTION_REF_H_ # define ABSL_FUNCTIONAL_INTERNAL_FUNCTION_REF_H_ # include<cassert> # include<functional> # include<type_traits> # include \" absl / base / internal / invoke . h \" # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace functional_internal { union VoidPtr { const void* obj ;)",
    "insertText": "void(*fun)()"
  },
  {
    "label": "PassByValue()",
    "kind": "Method",
    "detail": "Function (} ; template<T> bool)",
    "insertText": "PassByValue()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} template<T> struct ForwardT : std::conditional<PassByValue<)",
    "insertText": "T()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,. . . Args> using Invoker =)",
    "insertText": "R(*)(VoidPtr, typename ForwardT<Args>::type...)"
  },
  {
    "label": "InvokeObject()",
    "kind": "Method",
    "detail": "Function (template<Obj,R,. . . Args> R)",
    "insertText": "InvokeObject(VoidPtr ptr, typename ForwardT<Args>::type... args)"
  },
  {
    "label": "Obj()",
    "kind": "Method",
    "detail": "Function (auto o = static_cast<const)",
    "insertText": "Obj(ptr.obj)"
  },
  {
    "label": "InvokeFunction()",
    "kind": "Method",
    "detail": "Function (} template<Fun,R,. . . Args> R)",
    "insertText": "InvokeFunction(VoidPtr ptr, typename ForwardT<Args>::type... args)"
  },
  {
    "label": "Fun()",
    "kind": "Method",
    "detail": "Function (auto f = reinterpret_cast<)",
    "insertText": "Fun(ptr.fun)"
  },
  {
    "label": "AssertNonNull()",
    "kind": "Method",
    "detail": "Function (} template<Sig> void)",
    "insertText": "AssertNonNull(const std::function<Sig>& f)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(f != nullptr)"
  },
  {
    "label": "AssertNonNull()",
    "kind": "Method",
    "detail": "Function (} template<F> void)",
    "insertText": "AssertNonNull(const F&)"
  },
  {
    "label": "AssertNonNull()",
    "kind": "Method",
    "detail": "Function (} template<F,C> void)",
    "insertText": "AssertNonNull(F C::*f)"
  }
]