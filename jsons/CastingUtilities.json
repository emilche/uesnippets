[
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ImplicitObject . h \" # include \" Chaos / ImplicitObjectScaled . h \" # include \" Chaos / ImplicitObjectTransformed . h \" # include \" Chaos / ImplicitObjectUnion . h \" # include \" Chaos / Sphere . h \" # include \" Chaos / Capsule . h \" # include \" Chaos / Convex . h \" # include \" Chaos / TriangleMeshImplicitObject . h \" # include \" Chaos / Box . h \" namespace Chaos { namespace Utilities { template<Lambda>)",
    "insertText": "decltype(auto) CastHelper(const FImplicitObject& Geom, const Lambda& Func)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const EImplicitObjectType Type = Geom .)",
    "insertText": "GetType()"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::Box : { return)",
    "insertText": "Func(Geom.template GetObjectChecked<TBox<FReal, 3>>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::Capsule : { return)",
    "insertText": "Func(Geom.template GetObjectChecked<FCapsule>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::Convex : { return)",
    "insertText": "Func(Geom.template GetObjectChecked<FConvex>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsScaled | ImplicitObjectType::Sphere : { return)",
    "insertText": "Func(Geom.template GetObjectChecked<TImplicitObjectScaled<TSphere<FReal, 3>>>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsScaled | ImplicitObjectType::Box : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectScaled<TBox<FReal, 3>>>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsScaled | ImplicitObjectType::Capsule : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectScaled<FCapsule>>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsScaled | ImplicitObjectType::Convex : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectScaled<FConvex>>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsInstanced | ImplicitObjectType::Sphere : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectInstanced<TSphere<FReal, 3>>>().GetInstancedObject()->template GetObjectChecked<TSphere<FReal, 3>>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsInstanced | ImplicitObjectType::Box : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectInstanced<TBox<FReal, 3>>>().GetInstancedObject()->template GetObjectChecked<TBox<FReal, 3>>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsInstanced | ImplicitObjectType::Capsule : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectInstanced<FCapsule>>().GetInstancedObject()->template GetObjectChecked<FCapsule>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsInstanced | ImplicitObjectType::Convex : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectInstanced<FConvex>>().GetInstancedObject()->template GetObjectChecked<FConvex>())"
  },
  {
    "label": "ImplicitObjectTransformed()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::Transformed : { const auto&)",
    "insertText": "ImplicitObjectTransformed(Geom.template GetObjectChecked<TImplicitObjectTransformed<FReal, 3>>())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} default :)",
    "insertText": "check(false)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Func(Geom.template GetObjectChecked<TSphere<FReal, 3>>())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<Lambda>)",
    "insertText": "decltype(auto) CastHelper(const FImplicitObject& Geom, const FRigidTransform3& TM, const Lambda& Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsInstanced | ImplicitObjectType::Box : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectInstanced<TBox<FReal, 3>>>().GetInstancedObject()->template GetObjectChecked<TBox<FReal, 3>>(), TM)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsInstanced | ImplicitObjectType::Capsule : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectInstanced<FCapsule>>().GetInstancedObject()->template GetObjectChecked<FCapsule>(), TM)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} case ImplicitObjectType::IsInstanced | ImplicitObjectType::Convex : { return)",
    "insertText": "Func(Geom.template GetObjectChecked< TImplicitObjectInstanced<FConvex>>().GetInstancedObject()->template GetObjectChecked<FConvex>(), TM)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Func(Geom.template GetObjectChecked<TSphere<FReal, 3>>(), TM)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<Lambda>)",
    "insertText": "decltype(auto) CastHelperNoUnwrap(const FImplicitObject& Geom, const FRigidTransform3& TM, const Lambda& Func)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<Lambda>)",
    "insertText": "decltype(auto) CastHelperNoUnwrap(const FImplicitObject& Geom, const FRigidTransform3& TM0, const FRigidTransform3& TM1, const Lambda& Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Func(Geom.template GetObjectChecked<TSphere<FReal, 3>>(), TM0, TM1)"
  },
  {
    "label": "ImplicitChildHelper()",
    "kind": "Method",
    "detail": "Function (} const FImplicitObject*)",
    "insertText": "ImplicitChildHelper(const FImplicitObject* ImplicitObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectScaled<FConvex>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectScaled<TBox<FReal, 3>>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectScaled<FCapsule>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectScaled<TSphere<FReal, 3>>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectScaled<FTriangleMeshImplicitObject>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectInstanced<FConvex>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectInstanced<TBox<FReal, 3>>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectInstanced<FCapsule>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectInstanced<TSphere<FReal, 3>>::StaticType())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ImplicitType == TImplicitObjectInstanced<FTriangleMeshImplicitObject>::StaticType())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } template<T,Lambda>)",
    "insertText": "decltype(auto) CastWrapped(const FImplicitObject& A, const Lambda& Func)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const TImplicitObjectInstanced<T>* InstancedImplicit = A.template GetObject<TImplicitObjectInstanced<T>>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(const T* RawImplicit = A.template GetObject<T>())"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "Func((T*)nullptr)"
  },
  {
    "label": "VisitConcreteObjectsImpl()",
    "kind": "Method",
    "detail": "Function (} } template<Lambda,bool bRootObject> void)",
    "insertText": "VisitConcreteObjectsImpl(const FImplicitObject& Geom, const Lambda& Func, int32 RootObjectIndex)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (VisitConcreteObjectsImpl<Lambda,)",
    "insertText": "false(*Object, Func, RootObjectIndex)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(bRootObject)"
  },
  {
    "label": "CastHelper()",
    "kind": "Method",
    "detail": "Function (+ + RootObjectIndex ; } } } else {)",
    "insertText": "CastHelper(Geom, [&Func, RootObjectIndex](const auto& Concrete) { Func(Concrete, RootObjectIndex); })"
  },
  {
    "label": "VisitConcreteObjects()",
    "kind": "Method",
    "detail": "Function (} } template<Lambda> void)",
    "insertText": "VisitConcreteObjects(const FImplicitObject& Geom, const Lambda& Func)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (VisitConcreteObjectsImpl<Lambda,)",
    "insertText": "true(Geom, Func, 0)"
  }
]