[
  {
    "label": "CSGOperation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CSGOperation"
  },
  {
    "label": "BuildPrimarySegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuildPrimarySegment"
  },
  {
    "label": "ProcessInternalNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessInternalNodes"
  },
  {
    "label": "ProcessInternalNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessInternalNodes"
  },
  {
    "label": "ProcessLeafNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessLeafNodes"
  },
  {
    "label": "ProcessLeafNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessLeafNodes"
  },
  {
    "label": "BuildPrimarySegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuildPrimarySegment"
  },
  {
    "label": "BuildSecondarySegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuildSecondarySegment"
  },
  {
    "label": "ProcessInternalNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessInternalNodes"
  },
  {
    "label": "ProcessInternalNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessInternalNodes"
  },
  {
    "label": "ProcessLeafNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessLeafNodes"
  },
  {
    "label": "ProcessLeafNodes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessLeafNodes"
  },
  {
    "label": "BuildSecondarySegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuildSecondarySegment"
  },
  {
    "label": "GridOrTreeConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GridOrTreeConstructor"
  },
  {
    "label": "GridOrTreeConstructor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GridOrTreeConstructor"
  },
  {
    "label": "CopyOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyOp"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "CompReplaceOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompReplaceOp"
  },
  {
    "label": "csgUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "csgUnion(GridOrTreeT& a, GridOrTreeT& b, bool prune = true)"
  },
  {
    "label": "csgIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "csgIntersection(GridOrTreeT& a, GridOrTreeT& b, bool prune = true)"
  },
  {
    "label": "csgDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "csgDifference(GridOrTreeT& a, GridOrTreeT& b, bool prune = true)"
  },
  {
    "label": "csgUnionCopy()",
    "kind": "Method",
    "detail": "Function (GridOrTreeT::Ptr)",
    "insertText": "csgUnionCopy(const GridOrTreeT& a, const GridOrTreeT& b)"
  },
  {
    "label": "csgIntersectionCopy()",
    "kind": "Method",
    "detail": "Function (GridOrTreeT::Ptr)",
    "insertText": "csgIntersectionCopy(const GridOrTreeT& a, const GridOrTreeT& b)"
  },
  {
    "label": "csgDifferenceCopy()",
    "kind": "Method",
    "detail": "Function (GridOrTreeT::Ptr)",
    "insertText": "csgDifferenceCopy(const GridOrTreeT& a, const GridOrTreeT& b)"
  },
  {
    "label": "compMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compMax(GridOrTreeT& a, GridOrTreeT& b)"
  },
  {
    "label": "compMin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compMin(GridOrTreeT& a, GridOrTreeT& b)"
  },
  {
    "label": "compSum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compSum(GridOrTreeT& a, GridOrTreeT& b)"
  },
  {
    "label": "compMul()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compMul(GridOrTreeT& a, GridOrTreeT& b)"
  },
  {
    "label": "compDiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compDiv(GridOrTreeT& a, GridOrTreeT& b)"
  },
  {
    "label": "compReplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compReplace(GridOrTreeT& a, const GridOrTreeT& b)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "zero(0)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ProcessInternalNodes)",
    "insertText": "op(internalNodes, *mRhsTree, *mSegment, leafNodes)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ProcessLeafNodes)",
    "insertText": "op(leafNodes, *mRhsTree, *mSegment)"
  },
  {
    "label": "rhsAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "rhsAcc(*mRhsTree)"
  },
  {
    "label": "outputAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "outputAcc(*mOutputTree)"
  },
  {
    "label": "rhsAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "rhsAcc(*mRhsTree)"
  },
  {
    "label": "outputAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "outputAcc(*mOutputTree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ProcessInternalNodes)",
    "insertText": "op(internalNodes, *mLhsTree, *mSegment, leafNodes)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (ProcessLeafNodes)",
    "insertText": "op(leafNodes, *mLhsTree, *mSegment)"
  },
  {
    "label": "lhsAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "lhsAcc(*mLhsTree)"
  },
  {
    "label": "outputAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "outputAcc(*mOutputTree)"
  },
  {
    "label": "LeafNodeType()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "LeafNodeType(*tmpLeafNodes[i])"
  },
  {
    "label": "lhsAcc()",
    "kind": "Method",
    "detail": "Function (TreeType>)",
    "insertText": "lhsAcc(*mLhsTree)"
  },
  {
    "label": "outputAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeType>)",
    "insertText": "outputAcc(*mOutputTree)"
  },
  {
    "label": "LeafNodeType()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "LeafNodeType(rhsNode)"
  },
  {
    "label": "primary()",
    "kind": "Method",
    "detail": "Function (Operation>)",
    "insertText": "primary(lhs, rhs)"
  },
  {
    "label": "secondary()",
    "kind": "Method",
    "detail": "Function (Operation>)",
    "insertText": "secondary(lhs, rhs)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeT>)",
    "insertText": "acc(dstTree)"
  },
  {
    "label": "transferLeafNodes()",
    "kind": "Method",
    "detail": "Function (src)",
    "insertText": "transferLeafNodes(srcTree, dstTree, overlapping)"
  },
  {
    "label": "transferLeafNodes()",
    "kind": "Method",
    "detail": "Function (src)",
    "insertText": "transferLeafNodes(srcTree, dstTree, overlapping)"
  },
  {
    "label": "transferLeafNodes()",
    "kind": "Method",
    "detail": "Function (src)",
    "insertText": "transferLeafNodes(srcTree, dstTree, overlapping)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeT>)",
    "insertText": "acc(*aTree)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (nodes)",
    "insertText": "foreach(iter, op, /*threaded=*/false)"
  },
  {
    "label": "nodeManager()",
    "kind": "Method",
    "detail": "Function (tree::DynamicNodeManager<TreeT>)",
    "insertText": "nodeManager(aTree)"
  },
  {
    "label": "nodeManager()",
    "kind": "Method",
    "detail": "Function (tree::DynamicNodeManager<TreeT>)",
    "insertText": "nodeManager(aTree)"
  },
  {
    "label": "nodeManager()",
    "kind": "Method",
    "detail": "Function (tree::DynamicNodeManager<TreeT>)",
    "insertText": "nodeManager(aTree)"
  }
]