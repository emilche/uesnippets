[
  {
    "label": "FCurveEditorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorTree"
  },
  {
    "label": "FCurveEditorFilterStates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorFilterStates"
  },
  {
    "label": "FCurveEditorTreeItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorTreeItem"
  },
  {
    "label": "FCurveEditorTreeItemID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorTreeItemID"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "FCurveEditorTreeTextFilterToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorTreeTextFilterToken"
  },
  {
    "label": "FCurveEditorTreeTextFilterTerm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorTreeTextFilterTerm"
  },
  {
    "label": "FMatchResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMatchResult"
  },
  {
    "label": "FCurveEditorTreeFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" Misc / CString . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" class FCurveEditorTree ; struct FCurveEditorFilterStates ; struct FCurveEditorTreeItem ; struct FCurveEditorTreeItemID ; enum class ECurveEditorTreeFilterState : uint8 ; enum class ECurveEditorTreeFilterType : uint32 { Text,CUSTOM_START,First = Text,} ; struct FCurveEditorTreeFilter {)",
    "insertText": "FCurveEditorTreeFilter(ECurveEditorTreeFilterType InFilterType, int32 InFilterPass) : FilterType(InFilterType) , FilterPass(InFilterPass) , bExpandToMatchedItems(true)"
  },
  {
    "label": "FCurveEditorTreeFilter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCurveEditorTreeFilter()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} ECurveEditorTreeFilterType)",
    "insertText": "GetType()"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (protected : ECurveEditorTreeFilterType FilterType ; int32 FilterPass ; bool bExpandToMatchedItems : 1 ; } ; struct FCurveEditorTreeTextFilterToken { FString Token ; bool)",
    "insertText": "Match(const TCHAR* InString)"
  },
  {
    "label": "FMatchResult()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCurveEditorTreeTextFilterTerm { struct FMatchResult {)",
    "insertText": "FMatchResult() : bMatched(false)"
  },
  {
    "label": "FMatchResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMatchResult(TArrayView<const FCurveEditorTreeTextFilterToken> InRemainingTokens) : RemainingTokens(InRemainingTokens) , bMatched(true)"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (} FMatchResult)",
    "insertText": "Match(FStringView InString)"
  },
  {
    "label": "IsAnyMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnyMatch()"
  },
  {
    "label": "IsTotalMatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTotalMatch()"
  },
  {
    "label": "FCurveEditorTreeTextFilter()",
    "kind": "Method",
    "detail": "Function (TArray<FCurveEditorTreeTextFilterToken,TInlineAllocator<1>> ChildToParentTokens ; } ; struct FCurveEditorTreeTextFilter : FCurveEditorTreeFilter { FText InputText ; const int32 DefaultPass = 1 0 0 0 ;)",
    "insertText": "FCurveEditorTreeTextFilter() : FCurveEditorTreeFilter(ECurveEditorTreeFilterType::Text, DefaultPass)"
  },
  {
    "label": "AssignFromText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignFromText(const FString& FilterString)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetTerms()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FCurveEditorTreeTextFilterTerm>)",
    "insertText": "GetTerms()"
  }
]