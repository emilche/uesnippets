[
  {
    "label": "FSlotEvaluationPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlotEvaluationPose"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimCurveTypes . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AttributesRuntime . h \" # include \" BonePose . h \" # include \" AnimSlotEvaluationPose . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FSlotEvaluationPose()",
    "kind": "Method",
    "detail": "Function (FCompactPose Pose ; FBlendedCurve Curve ; UE::Anim::FStackAttributeContainer Attributes ;)",
    "insertText": "FSlotEvaluationPose() : AdditiveType(AAT_None) , Weight(0.0f)"
  },
  {
    "label": "FSlotEvaluationPose()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlotEvaluationPose(float InWeight, EAdditiveAnimationType InAdditiveType) : AdditiveType(InAdditiveType) , Weight(InWeight)"
  },
  {
    "label": "FSlotEvaluationPose()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlotEvaluationPose(FSlotEvaluationPose&& InEvaluationPose) : AdditiveType(InEvaluationPose.AdditiveType) , Weight(InEvaluationPose.Weight)"
  },
  {
    "label": "MoveBonesFrom()",
    "kind": "Method",
    "detail": "Function (Pose .)",
    "insertText": "MoveBonesFrom(InEvaluationPose.Pose)"
  },
  {
    "label": "MoveFrom()",
    "kind": "Method",
    "detail": "Function (Curve .)",
    "insertText": "MoveFrom(InEvaluationPose.Curve)"
  },
  {
    "label": "MoveFrom()",
    "kind": "Method",
    "detail": "Function (Attributes .)",
    "insertText": "MoveFrom(InEvaluationPose.Attributes)"
  },
  {
    "label": "FSlotEvaluationPose()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlotEvaluationPose(const FSlotEvaluationPose& InEvaluationPose)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSlotEvaluationPose&)",
    "insertText": "operator(const FSlotEvaluationPose& InEvaluationPose)"
  }
]