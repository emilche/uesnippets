[
  {
    "label": "FIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndexBuffer"
  },
  {
    "label": "FLightCacheInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightCacheInterface"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FPrimitiveUniformShaderParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveUniformShaderParameters"
  },
  {
    "label": "FVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactory"
  },
  {
    "label": "FInstanceDynamicData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceDynamicData"
  },
  {
    "label": "FInstanceSceneData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceSceneData"
  },
  {
    "label": "FMaterialShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderParameters"
  },
  {
    "label": "FRenderBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderBounds"
  },
  {
    "label": "TUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUniformBuffer"
  },
  {
    "label": "EPrimitiveIdMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPrimitiveIdMode"
  },
  {
    "label": "FMeshBatchElementDynamicIndexBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchElementDynamicIndexBuffer"
  },
  {
    "label": "FMeshBatchDynamicPrimitiveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchDynamicPrimitiveData"
  },
  {
    "label": "FMeshBatchElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchElement"
  },
  {
    "label": "FSplineMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineMeshSceneProxy"
  },
  {
    "label": "FMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatch"
  },
  {
    "label": "FUniformBufferValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformBufferValue"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ArrayView . h \" # include \" EngineDefines . h \" # include \" Engine / EngineTypes . h \" # include \" GPUSceneWriter . h \" # include \" HitProxies . h \" # include \" RHIDefinitions . h \" # include \" SceneDefinitions . h \" # include \" VT / RuntimeVirtualTextureEnum . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_3 # include \" InstanceUniformShaderParameters . h \" # endif # define USE_MESH_BATCH_VALIDATION ! UE_BUILD_SHIPPING class FIndexBuffer ; class FLightCacheInterface ; class FMaterial ; class FMaterialRenderProxy ; class FPrimitiveSceneProxy ; class FPrimitiveUniformShaderParameters ; class FVertexFactory ; struct FInstanceDynamicData ; struct FInstanceSceneData ; struct FMaterialShaderParameters ; struct FRenderBounds ; template<TBufferStruct> class TUniformBuffer ; enum EPrimitiveIdMode { PrimID_FromPrimitiveSceneInfo = 0,PrimID_DynamicPrimitiveShaderData = 1,PrimID_ForceZero = 2,PrimID_Num = 4,PrimID_NumBits = 2,} ; int32 GPrimIDDynamicFlag = 1<<3 1 ; struct FMeshBatchElementDynamicIndexBuffer { FIndexBuffer* IndexBuffer = nullptr ; uint32 FirstIndex : 2 4 ; uint32 PrimitiveType : PT_NumBits ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetPayloadDataFlags()",
    "kind": "Method",
    "detail": "Function (struct FMeshBatchDynamicPrimitiveData { TConstArrayView<FInstanceSceneData> InstanceSceneData ; TConstArrayView<FInstanceDynamicData> InstanceDynamicData ; TConstArrayView<FRenderBounds> InstanceLocalBounds ; TConstArrayView<float> InstanceCustomData ; FGPUSceneWriteDelegate DataWriterGPU ; EGPUSceneGPUWritePass DataWriterGPUPass = EGPUSceneGPUWritePass::None ; uint16 PayloadDataFlags = 0 ; uint32 NumInstanceCustomDataFloats = 0 ; void)",
    "insertText": "SetPayloadDataFlags(uint16 Flags, bool bValue)"
  },
  {
    "label": "EnableInstanceDynamicData()",
    "kind": "Method",
    "detail": "Function (PayloadDataFlags | = Flags ; } else { PayloadDataFlags& = ~ Flags ; } } void)",
    "insertText": "EnableInstanceDynamicData(bool bEnable)"
  },
  {
    "label": "SetPayloadDataFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadDataFlags(INSTANCE_SCENE_DATA_FLAG_HAS_DYNAMIC_DATA, bEnable)"
  },
  {
    "label": "EnableInstanceSkinningData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableInstanceSkinningData(bool bEnable)"
  },
  {
    "label": "SetPayloadDataFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadDataFlags(INSTANCE_SCENE_DATA_FLAG_HAS_SKINNING_DATA, bEnable)"
  },
  {
    "label": "EnableInstanceLocalBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableInstanceLocalBounds(bool bEnable)"
  },
  {
    "label": "SetPayloadDataFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadDataFlags(INSTANCE_SCENE_DATA_FLAG_HAS_LOCAL_BOUNDS, bEnable)"
  },
  {
    "label": "SetNumInstanceCustomDataFloats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumInstanceCustomDataFloats(uint32 NumFloats)"
  },
  {
    "label": "SetPayloadDataFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadDataFlags(INSTANCE_SCENE_DATA_FLAG_HAS_CUSTOM_DATA, NumFloats > 0)"
  },
  {
    "label": "GetPayloadFloat4Stride()",
    "kind": "Method",
    "detail": "Function (NumInstanceCustomDataFloats = NumFloats ; } uint32)",
    "insertText": "GetPayloadFloat4Stride()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Total = 0 ;)",
    "insertText": "if(PayloadDataFlags & INSTANCE_SCENE_DATA_FLAG_HAS_LOCAL_BOUNDS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Total + = 2 ; } else)",
    "insertText": "if(PayloadDataFlags & (INSTANCE_SCENE_DATA_FLAG_HAS_HIERARCHY_OFFSET | INSTANCE_SCENE_DATA_FLAG_HAS_SKINNING_DATA))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Total + = 1 ; })",
    "insertText": "if(PayloadDataFlags & INSTANCE_SCENE_DATA_FLAG_HAS_DYNAMIC_DATA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Total + = 2 ; } else { Total + = 3 ; } })",
    "insertText": "if(PayloadDataFlags & INSTANCE_SCENE_DATA_FLAG_HAS_EDITOR_DATA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Total + = 1 ; })",
    "insertText": "if(PayloadDataFlags & INSTANCE_SCENE_DATA_FLAG_HAS_LIGHTSHADOW_UV_BIAS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Total + = 1 ; })",
    "insertText": "if(PayloadDataFlags & INSTANCE_SCENE_DATA_FLAG_HAS_CUSTOM_DATA)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (Total + =)",
    "insertText": "DivideAndRoundUp(NumInstanceCustomDataFloats, 4u)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} return Total ; } void)",
    "insertText": "Validate(uint32 NumInstances)"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK const bool bGPUWrite = DataWriterGPU .)",
    "insertText": "IsBound()"
  },
  {
    "label": "GetNumPrimitives()",
    "kind": "Method",
    "detail": "Function (} # endif } } ; struct FMeshBatchElement { FRHIUniformBuffer* PrimitiveUniformBuffer ; const TUniformBuffer<FPrimitiveUniformShaderParameters>* PrimitiveUniformBufferResource ; FUniformBufferRHIRef LooseParametersUniformBuffer ; const FIndexBuffer* IndexBuffer ; FMeshBatchElementDynamicIndexBuffer DynamicIndexBuffer ; union { uint32* InstanceRuns ; const class FSplineMeshSceneProxy* SplineMeshSceneProxy ; } ; const void* UserData ; void* VertexFactoryUserData ; FRHIBuffer* IndirectArgsBuffer ; uint32 IndirectArgsOffset ; EPrimitiveIdMode PrimitiveIdMode : PrimID_NumBits + 1 ; uint32 FirstIndex ; uint32 NumPrimitives ; uint32 NumInstances ; uint32 BaseVertexIndex ; uint32 MinVertexIndex ; uint32 MaxVertexIndex ; int32 UserIndex ; float MinScreenSize ; float MaxScreenSize ; uint32 InstancedLODIndex : 4 ; uint32 InstancedLODRange : 4 ; uint32 bUserDataIsColorVertexBuffer : 1 ; uint32 bIsSplineProxy : 1 ; uint32 bIsInstanceRuns : 1 ; uint32 bForceInstanceCulling : 1 ; uint32 bPreserveInstanceOrder : 1 ; uint32 bFetchInstanceCountFromScene : 1 ; # if UE_ENABLE_DEBUG_DRAWING int32 VisualizeElementIndex : 8 ; FColor SkinCacheDebugColor = FColor::White ; # endif const FMeshBatchDynamicPrimitiveData* DynamicPrimitiveData ; uint32 DynamicPrimitiveIndex ; uint32 DynamicPrimitiveInstanceSceneDataOffset ; int32)",
    "insertText": "GetNumPrimitives()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ;)",
    "insertText": "for(uint32 Run = 0; Run < NumInstances; Run++)"
  },
  {
    "label": "NumPrimitives()",
    "kind": "Method",
    "detail": "Function (Count + =)",
    "insertText": "NumPrimitives(InstanceRuns[Run * 2 + 1] - InstanceRuns[Run * 2] + 1)"
  },
  {
    "label": "FMeshBatchElement()",
    "kind": "Method",
    "detail": "Function (} return Count ; } else { return NumPrimitives* NumInstances ; } })",
    "insertText": "FMeshBatchElement() : PrimitiveUniformBuffer(nullptr) , PrimitiveUniformBufferResource(nullptr) , IndexBuffer(nullptr) , InstanceRuns(nullptr) , UserData(nullptr) , VertexFactoryUserData(nullptr) , IndirectArgsBuffer(nullptr) , IndirectArgsOffset(0) , PrimitiveIdMode(PrimID_FromPrimitiveSceneInfo) , NumInstances(1) , BaseVertexIndex(0) , UserIndex(-1) , MinScreenSize(0.0f) , MaxScreenSize(1.0f) , InstancedLODIndex(0) , InstancedLODRange(0) , bUserDataIsColorVertexBuffer(false) , bIsSplineProxy(false) , bIsInstanceRuns(false) , bForceInstanceCulling(false) , bPreserveInstanceOrder(false) , bFetchInstanceCountFromScene(false) #if UE_ENABLE_DEBUG_DRAWING , VisualizeElementIndex(INDEX_NONE) #endif , DynamicPrimitiveData(nullptr) , DynamicPrimitiveIndex(INDEX_NONE) , DynamicPrimitiveInstanceSceneDataOffset(INDEX_NONE)"
  },
  {
    "label": "IsHairStrandsGeometrySupported()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "IsHairStrandsGeometrySupported(const EShaderPlatform Platform)"
  },
  {
    "label": "IsCompatibleWithHairStrands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWithHairStrands(const FMaterial* Material, const ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "IsCompatibleWithHairStrands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleWithHairStrands(EShaderPlatform Platform, const FMaterialShaderParameters& Parameters)"
  },
  {
    "label": "IsTranslucent()",
    "kind": "Method",
    "detail": "Function (struct FMeshBatch { TArray<FMeshBatchElement,TInlineAllocator<1>> Elements ; const FVertexFactory* VertexFactory ; const FMaterialRenderProxy* MaterialRenderProxy ; const FLightCacheInterface* LCI ; FHitProxyId BatchHitProxyId ; float TessellationDisablingShadowMapMeshSize ; int32 SegmentIndex ; uint16 MeshIdInPrimitive ; int8 LODIndex ; uint32 ReverseCulling : 1 ; uint32 bDisableBackfaceCulling : 1 ; uint32 CastShadow : 1 ; uint32 bUseForMaterial : 1 ; uint32 bUseForDepthPass : 1 ; uint32 bUseAsOccluder : 1 ; uint32 bWireframe : 1 ; uint32 Type : PT_NumBits ; uint32 DepthPriorityGroup : SDPG_NumBits ; uint32 bCanApplyViewModeOverrides : 1 ; uint32 bUseWireframeSelectionColoring : 1 ; uint32 bUseSelectionOutline : 1 ; uint32 bSelectable : 1 ; uint32 bDitheredLODTransition : 1 ; uint32 bRenderToVirtualTexture : 1 ; uint32 RuntimeVirtualTextureMaterialType : RuntimeVirtualTexture::MaterialType_NumBits ; uint32 bOverlayMaterial : 1 ; # if RHI_RAYTRACING uint32 CastRayTracedShadow : 1 ; # endif uint32 bViewDependentArguments : 1 ; uint32 bUseForWaterInfoTextureDepth : 1 ; uint32 bUseForLumenSurfaceCacheCapture : 1 ; # if UE_ENABLE_DEBUG_DRAWING int8 VisualizeHLODIndex ; int8 VisualizeLODIndex ; # endif bool)",
    "insertText": "IsTranslucent(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "IsDecal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDecal(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "IsDualBlend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDualBlend(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "UseForHairStrands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseForHairStrands(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "IsMasked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMasked(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ;)",
    "insertText": "for(int32 ElementIdx = 0; ElementIdx < Elements.Num(); ++ElementIdx)"
  },
  {
    "label": "HasAnyDrawCalls()",
    "kind": "Method",
    "detail": "Function (} return Count ; } bool)",
    "insertText": "HasAnyDrawCalls()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (# if USE_MESH_BATCH_VALIDATION bool)",
    "insertText": "Validate(const FPrimitiveSceneProxy* SceneProxy, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "AddDefaulted()"
  }
]