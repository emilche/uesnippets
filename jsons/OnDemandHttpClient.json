[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHttpClientConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHttpClientConfig"
  },
  {
    "label": "FHttpClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHttpClient"
  },
  {
    "label": "FRequestParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestParams"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" IO / Http / Client . h \" # include \" IO / IoBuffer . h \" # include \" IO / IoOffsetLength . h \" # include \" IO / IoStatus . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" namespace UE::IoStore { enum class EHttpRedirects { Disabled,Follow } ; struct FHttpClientConfig { TArray<FString> Endpoints ; int32 PrimaryEndpoint = 0 ; int32 MaxConnectionCount = 8 ; int32 MaxRetryCount = 1 ; int32 ReceiveBufferSize = - 1 ; bool bChangeEndpointAfterSuccessfulRetry = true ; } ; class FHttpClient { public : using FGetCallback = TFunction<)",
    "insertText": "void(TIoStatusOr<FIoBuffer>, uint64 DurationMs)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FHttpClient>)",
    "insertText": "Create(FHttpClientConfig&& ClientConfig)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FHttpClient>)",
    "insertText": "Create(const FString& Endpoint)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(FAnsiStringView Url, const FIoOffsetAndLength& Range, FGetCallback&& Callback)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get(FAnsiStringView Url, FGetCallback&& Callback)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(int32 WaitTimeMs, uint32 MaxKiBPerSecond)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick()"
  },
  {
    "label": "GetEndpoint()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEndpoint()"
  },
  {
    "label": "IsUsingPrimaryEndpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingPrimaryEndpoint()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoBuffer>)",
    "insertText": "Get(FStringView Url, uint32 RetryCount, EHttpRedirects Redirects)"
  },
  {
    "label": "FHttpClient()",
    "kind": "Method",
    "detail": "Function (private : struct FRequestParams { FString Url ; FIoOffsetAndLength Range ; FGetCallback Callback ; int32 Attempt = 0 ; int32 Endpoint = INDEX_NONE ; } ;)",
    "insertText": "FHttpClient(FHttpClientConfig&& ClientConfig)"
  },
  {
    "label": "RetryRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetryRequest(FRequestParams&& Params, bool bNextEndpoint)"
  },
  {
    "label": "IssueRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueRequest(FRequestParams&& Params)"
  },
  {
    "label": "CreateConnection()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<HTTP::FConnectionPool>)",
    "insertText": "CreateConnection(const FStringView& HostAddr)"
  },
  {
    "label": "EnsureConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureConnection(int32 Connection)"
  },
  {
    "label": "GetEndpointUrl()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetEndpointUrl(int32 Endpoint)"
  }
]