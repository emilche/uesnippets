[
  {
    "label": "TScaleGridIndexer3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TScaleGridIndexer3"
  },
  {
    "label": "TShiftGridIndexer3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TShiftGridIndexer3"
  },
  {
    "label": "TBoundsGridIndexer3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBoundsGridIndexer3"
  },
  {
    "label": "TScaleGridIndexer3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" IntVectorTypes . h \" # include \" BoxTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TScaleGridIndexer3 { RealType CellSize ;)",
    "insertText": "TScaleGridIndexer3() : CellSize((RealType)1)"
  },
  {
    "label": "TScaleGridIndexer3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TScaleGridIndexer3(RealType CellSize) : CellSize(CellSize)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "ToGrid(const TVector<RealType>& P)"
  },
  {
    "label": "FromGrid()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "FromGrid(const FVector3i& GridPoint)"
  },
  {
    "label": "TShiftGridIndexer3()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TScaleGridIndexer3<float> FScaleGridIndexer3f ; typedef TScaleGridIndexer3<double> FScaleGridIndexer3d ; template<RealType> struct TShiftGridIndexer3 { RealType CellSize ; TVector<RealType> Origin ;)",
    "insertText": "TShiftGridIndexer3() : CellSize((RealType)1), Origin(TVector<RealType>::Zero())"
  },
  {
    "label": "TShiftGridIndexer3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TShiftGridIndexer3(const TVector<RealType>& origin, RealType cellSize) : CellSize(cellSize), Origin(origin)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "ToGrid(const TVector<RealType>& point)"
  },
  {
    "label": "FromGrid()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "FromGrid(const FVector3i& gridpoint)"
  },
  {
    "label": "FromGrid()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "FromGrid(const TVector<RealType>& RealGridPoint)"
  },
  {
    "label": "TBoundsGridIndexer3()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TShiftGridIndexer3<float> FShiftGridIndexer3f ; typedef TShiftGridIndexer3<double> FShiftGridIndexer3d ; template<RealType> struct TBoundsGridIndexer3 : public TShiftGridIndexer3<RealType> { using TShiftGridIndexer3<RealType>::CellSize ; using TShiftGridIndexer3<RealType>::Origin ; TVector<RealType> BoundsMax ;)",
    "insertText": "TBoundsGridIndexer3(const TAxisAlignedBox3<RealType>& Bounds, RealType CellSize) : TShiftGridIndexer3<RealType>(Bounds.Min, CellSize), BoundsMax(Bounds.Max)"
  },
  {
    "label": "GridResolution()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "GridResolution()"
  },
  {
    "label": "CeilInt()",
    "kind": "Method",
    "detail": "Function (const RealType InvCellSize = 1 . 0 / CellSize ; const TVector<RealType> Extents = BoundsMax - Origin ; return)",
    "insertText": "CeilInt(Extents * InvCellSize)"
  },
  {
    "label": "CeilInt()",
    "kind": "Method",
    "detail": "Function (} FVector3i)",
    "insertText": "CeilInt(const TVector<RealType>& V)"
  }
]