[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "MachineDominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineDominatorTree"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "RegisterClassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisterClassInfo"
  },
  {
    "label": "ScheduleDAGInstrs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGInstrs"
  },
  {
    "label": "SchedDFSResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedDFSResult"
  },
  {
    "label": "ScheduleHazardRecognizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleHazardRecognizer"
  },
  {
    "label": "MachineSchedContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineSchedContext"
  },
  {
    "label": "MachineSchedRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineSchedRegistry"
  },
  {
    "label": "ScheduleDAGMI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGMI"
  },
  {
    "label": "MachineSchedPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineSchedPolicy"
  },
  {
    "label": "MachineSchedStrategy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineSchedStrategy"
  },
  {
    "label": "ScheduleDAGMutation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGMutation"
  },
  {
    "label": "ScheduleDAGMI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGMI"
  },
  {
    "label": "ScheduleDAGMILive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGMILive"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "ReadyQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReadyQueue"
  },
  {
    "label": "SchedRemainder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SchedRemainder"
  },
  {
    "label": "SchedBoundary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedBoundary"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "maintains",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "maintains"
  },
  {
    "label": "GenericSchedulerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericSchedulerBase"
  },
  {
    "label": "CandReason",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CandReason"
  },
  {
    "label": "CandPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CandPolicy"
  },
  {
    "label": "SchedResourceDelta",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SchedResourceDelta"
  },
  {
    "label": "SchedCandidate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SchedCandidate"
  },
  {
    "label": "GenericScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericScheduler"
  },
  {
    "label": "PostGenericScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PostGenericScheduler"
  },
  {
    "label": "CustomMachineScheduler()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "CustomMachineScheduler(C)"
  },
  {
    "label": "CustomMachineScheduler()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "CustomMachineScheduler(C)"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "anchor()"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "anchor()"
  },
  {
    "label": "canAddEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canAddEdge(SUnit *SuccSU, SUnit *PredSU)"
  },
  {
    "label": "addEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addEdge(SUnit *SuccSU, const SDep &PredDep)"
  },
  {
    "label": "moveInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveInstruction(MachineInstr *MI, MachineBasicBlock::iterator InsertPos)"
  },
  {
    "label": "postprocessDAG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "postprocessDAG()"
  },
  {
    "label": "initQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initQueues(ArrayRef<SUnit*> TopRoots, ArrayRef<SUnit*> BotRoots)"
  },
  {
    "label": "updateQueues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateQueues(SUnit *SU, bool IsTopNode)"
  },
  {
    "label": "placeDebugValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "placeDebugValues()"
  },
  {
    "label": "checkSchedLimit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkSchedLimit()"
  },
  {
    "label": "findRootsAndBiasEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findRootsAndBiasEdges(SmallVectorImpl<SUnit*> &TopRoots,\n                             SmallVectorImpl<SUnit*> &BotRoots)"
  },
  {
    "label": "releaseSucc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseSucc(SUnit *SU, SDep *SuccEdge)"
  },
  {
    "label": "releaseSuccessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseSuccessors(SUnit *SU)"
  },
  {
    "label": "releasePred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releasePred(SUnit *SU, SDep *PredEdge)"
  },
  {
    "label": "releasePredecessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releasePredecessors(SUnit *SU)"
  },
  {
    "label": "computeDFSResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeDFSResult()"
  },
  {
    "label": "computeCyclicCriticalPath()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "computeCyclicCriticalPath()"
  },
  {
    "label": "buildDAGWithRegPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildDAGWithRegPressure()"
  },
  {
    "label": "scheduleMI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scheduleMI(SUnit *SU, bool IsTopNode)"
  },
  {
    "label": "initRegPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initRegPressure()"
  },
  {
    "label": "updatePressureDiffs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updatePressureDiffs(ArrayRef<unsigned> LiveUses)"
  },
  {
    "label": "updateScheduledPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateScheduledPressure(const SUnit *SU,\n                               const std::vector<unsigned> &NewMaxPressure)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(ScheduleDAGMI *DAG, const TargetSchedModel *SchedModel)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(ScheduleDAGMI *dag, const TargetSchedModel *smodel,\n            SchedRemainder *rem)"
  },
  {
    "label": "getResourceCount()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getResourceCount(ZoneCritResIdx)"
  },
  {
    "label": "getLatencyStallCycles()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getLatencyStallCycles(SUnit *SU)"
  },
  {
    "label": "getNextResourceCycle()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNextResourceCycle(unsigned PIdx, unsigned Cycles)"
  },
  {
    "label": "checkHazard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkHazard(SUnit *SU)"
  },
  {
    "label": "findMaxLatency()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "findMaxLatency(ArrayRef<SUnit*> ReadySUs)"
  },
  {
    "label": "getOtherResourceCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getOtherResourceCount(unsigned &OtherCritIdx)"
  },
  {
    "label": "releaseNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseNode(SUnit *SU, unsigned ReadyCycle)"
  },
  {
    "label": "releaseTopNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseTopNode(SUnit *SU)"
  },
  {
    "label": "releaseBottomNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseBottomNode(SUnit *SU)"
  },
  {
    "label": "bumpCycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bumpCycle(unsigned NextCycle)"
  },
  {
    "label": "incExecutedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "incExecutedResources(unsigned PIdx, unsigned Count)"
  },
  {
    "label": "countResource()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "countResource(unsigned PIdx, unsigned Cycles, unsigned ReadyCycle)"
  },
  {
    "label": "bumpNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bumpNode(SUnit *SU)"
  },
  {
    "label": "releasePending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releasePending()"
  },
  {
    "label": "removeReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeReady(SUnit *SU)"
  },
  {
    "label": "dumpScheduledState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpScheduledState()"
  },
  {
    "label": "initResourceDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initResourceDelta(const ScheduleDAGMI *DAG,\n                           const TargetSchedModel *SchedModel)"
  },
  {
    "label": "setPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPolicy(CandPolicy &Policy, bool IsPostRA, SchedBoundary &CurrZone,\n                 SchedBoundary *OtherZone)"
  },
  {
    "label": "traceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "traceCandidate(const SchedCandidate &Cand)"
  },
  {
    "label": "checkAcyclicLatency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "checkAcyclicLatency()"
  },
  {
    "label": "tryCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tryCandidate(SchedCandidate &Cand,\n                    SchedCandidate &TryCand,\n                    SchedBoundary &Zone,\n                    const RegPressureTracker &RPTracker,\n                    RegPressureTracker &TempTracker)"
  },
  {
    "label": "pickNodeFromQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pickNodeFromQueue(SchedBoundary &Zone,\n                         const RegPressureTracker &RPTracker,\n                         SchedCandidate &Candidate)"
  },
  {
    "label": "reschedulePhysRegCopies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reschedulePhysRegCopies(SUnit *SU, bool isTop)"
  },
  {
    "label": "tryCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tryCandidate(SchedCandidate &Cand, SchedCandidate &TryCand)"
  },
  {
    "label": "pickNodeFromQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pickNodeFromQueue(SchedCandidate &Cand)"
  }
]