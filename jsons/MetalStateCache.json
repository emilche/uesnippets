[
  {
    "label": "FMetalGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalGraphicsPipelineState"
  },
  {
    "label": "FMetalComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalComputeShader"
  },
  {
    "label": "FMetalQueryBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalQueryBuffer"
  },
  {
    "label": "FMetalDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalDevice"
  },
  {
    "label": "EMetalPipelineFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalPipelineFlags"
  },
  {
    "label": "EMetalRenderFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMetalRenderFlags"
  },
  {
    "label": "FMetalStateCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalStateCache"
  },
  {
    "label": "ShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderType"
  },
  {
    "label": "FMetalBufferBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalBufferBinding"
  },
  {
    "label": "FMetalBufferBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalBufferBindings"
  },
  {
    "label": "FMetalTextureBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalTextureBindings"
  },
  {
    "label": "FMetalSamplerBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalSamplerBindings"
  },
  {
    "label": "FMetalRenderPassDescriptorPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRenderPassDescriptorPool"
  },
  {
    "label": "FMetalStateCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" MetalRHIPrivate . h \" # include \" MetalPipeline . h \" # include \" MetalResources . h \" # include \" MetalState . h \" # include \" MetalUniformBuffer . h \" # include \" Shaders / MetalShaderParameterCache . h \" class FMetalGraphicsPipelineState ; class FMetalComputeShader ; class FMetalQueryBuffer ; class FMetalDevice ; enum EMetalPipelineFlags { EMetalPipelineFlagPipelineState = 1<<0,EMetalPipelineFlagComputeShader = 1<<5,EMetalPipelineFlagRasterMask = 0 xF,EMetalPipelineFlagComputeMask = 0 x30,EMetalPipelineFlagMask = 0 x3F } ; enum EMetalRenderFlags { EMetalRenderFlagViewport = 1<<0,EMetalRenderFlagFrontFacingWinding = 1<<1,EMetalRenderFlagCullMode = 1<<2,EMetalRenderFlagDepthBias = 1<<3,EMetalRenderFlagScissorRect = 1<<4,EMetalRenderFlagTriangleFillMode = 1<<5,EMetalRenderFlagBlendColor = 1<<6,EMetalRenderFlagDepthStencilState = 1<<7,EMetalRenderFlagStencilReferenceValue = 1<<8,EMetalRenderFlagVisibilityResultMode = 1<<9,EMetalRenderFlagDepthClipMode = 1<<1 0,EMetalRenderFlagMask = 0 x3FF } ; class FMetalStateCache { public :)",
    "insertText": "FMetalStateCache(FMetalDevice& Device, bool const bInImmediate)"
  },
  {
    "label": "FMetalStateCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalStateCache()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScissorRect(bool const bEnable, MTL::ScissorRect const& Rect)"
  },
  {
    "label": "SetBlendFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendFactor(FLinearColor const& InBlendFactor)"
  },
  {
    "label": "SetStencilRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStencilRef(uint32 const InStencilRef)"
  },
  {
    "label": "SetComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComputeShader(FMetalComputeShader* InComputeShader)"
  },
  {
    "label": "SetRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRenderPassInfo(FRHIRenderPassInfo const& InRenderTargets, FMetalQueryBuffer* QueryBuffer)"
  },
  {
    "label": "InvalidateRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateRenderTargets(void)"
  },
  {
    "label": "SetRenderTargetsActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetsActive(bool const bActive)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewport(const MTL::Viewport& InViewport)"
  },
  {
    "label": "SetViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewports(const MTL::Viewport InViewport[], uint32 Count)"
  },
  {
    "label": "SetVertexStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertexStream(uint32 const Index, FMetalBufferPtr Buffer, FMetalBufferData* Bytes, uint32 const Offset, uint32 const Length)"
  },
  {
    "label": "SetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphicsPipelineState(FMetalGraphicsPipelineState* State)"
  },
  {
    "label": "BindUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindUniformBuffer(EMetalShaderStages const Freq, uint32 const BufferIndex, FRHIUniformBuffer* BufferRHI)"
  },
  {
    "label": "SetVisibilityResultMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibilityResultMode(MTL::VisibilityResultMode const Mode, NS::UInteger const Offset)"
  },
  {
    "label": "SetShaderBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma mark - Public Shader Resource Mutators - void)",
    "insertText": "SetShaderBuffer(EMetalShaderStages const Frequency , FMetalBufferPtr Buffer , FMetalBufferData* const Bytes , NS::UInteger const Offset , NS::UInteger const Length , NS::UInteger const Index , MTL::ResourceUsage const Usage , EPixelFormat const Format = PF_Unknown , NS::UInteger const ElementRowPitch = 0 , TArray<TTuple<MTL::Resource*, MTL::ResourceUsage>> ReferencedResources = {})"
  },
  {
    "label": "SetShaderBuffer()",
    "kind": "Method",
    "detail": "Function (# if METAL_RHI_RAYTRACING void)",
    "insertText": "SetShaderBuffer(EMetalShaderStages const Frequency, MTL::AccelerationStructure* AccelerationStructure, NS::UInteger const Index, TArray<TTuple<MTL::Resource*, MTL::ResourceUsage>> BLAS)"
  },
  {
    "label": "CacheOrSkipResourceResidencyUpdate()",
    "kind": "Method",
    "detail": "Function (# endif # if METAL_USE_METAL_SHADER_CONVERTER void)",
    "insertText": "CacheOrSkipResourceResidencyUpdate(MTL::Resource* InResource, EMetalShaderStages const Frequency, bool bReadOnly, bool bForceUseResource = false)"
  },
  {
    "label": "IRMakeSRVResident()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRMakeSRVResident(EMetalShaderStages const Frequency, FMetalShaderResourceView* SRV)"
  },
  {
    "label": "IRMakeUAVResident()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRMakeUAVResident(EMetalShaderStages const Frequency, FMetalUnorderedAccessView* UAV)"
  },
  {
    "label": "IRMakeTextureResident()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRMakeTextureResident(EMetalShaderStages const Frequency, MTL::Texture* Texture)"
  },
  {
    "label": "IRForwardBindlessParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRForwardBindlessParameters(EMetalShaderStages const Frequency, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "IRBindUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRBindUniformBuffer(EMetalShaderStages const Frequency, int32 Index, FMetalUniformBuffer* UB)"
  },
  {
    "label": "IRBindPackedUniforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRBindPackedUniforms(EMetalShaderStages const Frequency, int32 Index, uint8 const* Bytes, const uint32 Size, FMetalBufferPtr& Buffer)"
  },
  {
    "label": "IRSideUploadToBuffer()",
    "kind": "Method",
    "detail": "Function (FMetalBufferPtr)",
    "insertText": "IRSideUploadToBuffer(void const* Content, uint64 Size)"
  },
  {
    "label": "GetOrCreateBackingBufferCopy()",
    "kind": "Method",
    "detail": "Function (FMetalBufferPtr)",
    "insertText": "GetOrCreateBackingBufferCopy(FMetalUniformBuffer* UB)"
  },
  {
    "label": "IRBindResourcesToEncoder()",
    "kind": "Method",
    "detail": "Function (template<class ShaderType,EMetalShaderStages Frequency,MTL::FunctionType FunctionType> void)",
    "insertText": "IRBindResourcesToEncoder(ShaderType Shader, FMetalCommandEncoder* Encoder)"
  },
  {
    "label": "IRMapVertexBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IRMapVertexBuffers(MTL::RenderCommandEncoder* Encoder, bool bBindForMeshShaders = false)"
  },
  {
    "label": "SetShaderTexture()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetShaderTexture(EMetalShaderStages const Frequency, MTL::Texture* Texture, NS::UInteger const Index, MTL::ResourceUsage const Usage)"
  },
  {
    "label": "SetShaderSamplerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderSamplerState(EMetalShaderStages const Frequency, FMetalSamplerState* const Sampler, NS::UInteger const Index)"
  },
  {
    "label": "SetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderResourceView(EMetalShaderStages ShaderStage, uint32 BindIndex, FMetalShaderResourceView* SRV)"
  },
  {
    "label": "SetShaderUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderUnorderedAccessView(EMetalShaderStages ShaderStage, uint32 BindIndex, FMetalUnorderedAccessView* UAV)"
  },
  {
    "label": "SetStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStateDirty(void)"
  },
  {
    "label": "SetShaderBufferDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderBufferDirty(EMetalShaderStages const Frequency, NS::UInteger const Index)"
  },
  {
    "label": "SetRenderStoreActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderStoreActions(FMetalCommandEncoder& CommandEncoder, bool const bConditionalSwitch)"
  },
  {
    "label": "SetRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderState(FMetalCommandEncoder& CommandEncoder)"
  },
  {
    "label": "CommitRenderResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitRenderResources(FMetalCommandEncoder* Raster)"
  },
  {
    "label": "CommitComputeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeResources(FMetalCommandEncoder* Compute)"
  },
  {
    "label": "CommitResourceTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitResourceTable(EMetalShaderStages const Frequency, MTL::FunctionType const Type, FMetalCommandEncoder& CommandEncoder)"
  },
  {
    "label": "StartRenderPass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartRenderPass(const FRHIRenderPassInfo& Info, FMetalQueryBuffer* QueryBuffer)"
  },
  {
    "label": "GetShaderParameters()",
    "kind": "Method",
    "detail": "Function (FMetalShaderParameterCache&)",
    "insertText": "GetShaderParameters(EMetalShaderStages const Stage)"
  },
  {
    "label": "GetHasValidRenderTarget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetHasValidRenderTarget()"
  },
  {
    "label": "GetRenderTargetArraySize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRenderTargetArraySize()"
  },
  {
    "label": "HasValidDepthStencilSurface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasValidDepthStencilSurface()"
  },
  {
    "label": "GetRenderPassDescriptor()",
    "kind": "Method",
    "detail": "Function (} MTL::RenderPassDescriptor*)",
    "insertText": "GetRenderPassDescriptor(void)"
  },
  {
    "label": "GetPrimitiveType()",
    "kind": "Method",
    "detail": "Function (EPrimitiveType)",
    "insertText": "GetPrimitiveType()"
  },
  {
    "label": "GetVisibilityResultMode()",
    "kind": "Method",
    "detail": "Function (MTL::VisibilityResultMode)",
    "insertText": "GetVisibilityResultMode()"
  },
  {
    "label": "SetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComputePipelineState(FMetalCommandEncoder& CommandEncoder)"
  },
  {
    "label": "FlushVisibilityResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushVisibilityResults(FMetalCommandEncoder& CommandEncoder)"
  },
  {
    "label": "DiscardRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardRenderTargets(bool Depth, bool Stencil, uint32 ColorBitMask)"
  },
  {
    "label": "ReleaseDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDescriptor(MTL::RenderPassDescriptor* Desc)"
  },
  {
    "label": "ClearPreviousComputeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPreviousComputeState()"
  },
  {
    "label": "ConditionalUpdateBackBuffer()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ConditionalUpdateBackBuffer(FMetalSurface& Surface)"
  },
  {
    "label": "SetDepthStencilState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepthStencilState(FMetalDepthStencilState* InDepthStencilState)"
  },
  {
    "label": "SetRasterizerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRasterizerState(FMetalRasterizerState* InRasterizerState)"
  },
  {
    "label": "SetResourcesFromTables()",
    "kind": "Method",
    "detail": "Function (template<class ShaderType> void)",
    "insertText": "SetResourcesFromTables(ShaderType Shader, CrossCompiler::EShaderStage ShaderStage)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewport(uint32 Index, const MTL::Viewport& InViewport)"
  },
  {
    "label": "SetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScissorRect(uint32 Index, bool const bEnable, MTL::ScissorRect const& Rect)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Validate()"
  },
  {
    "label": "ValidateFunctionBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateFunctionBindings(FMetalShaderPipeline* Pipeline, EMetalShaderFrequency Frequency)"
  },
  {
    "label": "EnsureTextureAndType()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EnsureTextureAndType(EMetalShaderStages Stage, uint32 Index, const TMap<uint8, uint8>& TexTypes)"
  },
  {
    "label": "FMetalBufferBinding()",
    "kind": "Method",
    "detail": "Function (private : # pragma mark - Private Type Declarations - struct FMetalBufferBinding {)",
    "insertText": "FMetalBufferBinding() : Bytes(nullptr), Offset(0), Length(0), Usage((MTL::ResourceUsage)0)"
  },
  {
    "label": "FMetalBufferBindings()",
    "kind": "Method",
    "detail": "Function (} { } FMetalBufferPtr Buffer = nullptr ; FMetalBufferData* Bytes ; NS::UInteger Offset ; NS::UInteger Length ; NS::UInteger ElementRowPitch ; MTL::ResourceUsage Usage ; # if METAL_RHI_RAYTRACING MTL::AccelerationStructure* AccelerationStructure ; # endif TArray<TTuple<MTL::Resource*,MTL::ResourceUsage>> ReferencedResources ; } ; struct FMetalBufferBindings {)",
    "insertText": "FMetalBufferBindings() : Bound(0)"
  },
  {
    "label": "FMetalTextureBindings()",
    "kind": "Method",
    "detail": "Function (} FMetalBufferBinding Buffers [ ML_MaxBuffers ] ; EPixelFormat Formats [ ML_MaxBuffers ] ; uint32 Bound ; } ; struct FMetalTextureBindings {)",
    "insertText": "FMetalTextureBindings() : Bound(0)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Usage)"
  },
  {
    "label": "FMetalSamplerBindings()",
    "kind": "Method",
    "detail": "Function (} MTL::Texture* Textures [ ML_MaxTextures ] ; MTL::ResourceUsage Usage [ ML_MaxTextures ] ; FMetalTextureMask Bound ; } ; struct FMetalSamplerBindings {)",
    "insertText": "FMetalSamplerBindings() : Bound(0)"
  },
  {
    "label": "FMetalRenderPassDescriptorPool()",
    "kind": "Method",
    "detail": "Function (} MTL::SamplerState* Samplers [ ML_MaxSamplers ] ; uint16 Bound ; } ; private : FMetalDevice& Device ; FMetalShaderParameterCache ShaderParameters [ EMetalShaderStages::Num ] ; uint32 SampleCount ; TSet<TRefCountPtr<FRHIUniformBuffer>> ActiveUniformBuffers ; FRHIUniformBuffer* BoundUniformBuffers [ EMetalShaderStages::Num ] [ ML_MaxBuffers ] ; uint32 DirtyUniformBuffers [ EMetalShaderStages::Num ] ; FMetalBufferBinding VertexBuffers [ MaxVertexElementCount ] ; FMetalBufferBindings ShaderBuffers [ EMetalShaderStages::Num ] ; FMetalTextureBindings ShaderTextures [ EMetalShaderStages::Num ] ; FMetalSamplerBindings ShaderSamplers [ EMetalShaderStages::Num ] ; MTL::StoreAction ColorStore [ MaxSimultaneousRenderTargets ] ; MTL::StoreAction DepthStore ; MTL::StoreAction StencilStore ; # if METAL_USE_METAL_SHADER_CONVERTER uint32 TopLevelABNumEntry = 1 6 ; TMap<FMetalBuffer*,FMetalBufferPtr> UniformBufferVAs ; uint64 CBVTable [ EMetalShaderStages::Num ] [ TopLevelABNumEntry ] ; IRRuntimeVertexBuffer VertexBufferVAs [ 3 1 ] ; TStaticArray<TSet<MTL::Heap*>,EMetalShaderStages::Num> HeapsUsedByStage ; TStaticArray<TSet<MTL::Resource*>,EMetalShaderStages::Num> RWResourcesByStage ; TStaticArray<TSet<MTL::Resource*>,EMetalShaderStages::Num> ROResourcesByStage ; TArray<FMetalBufferPtr> TemporaryBuffers ; # endif FMetalQueryBuffer* VisibilityResults ; MTL::VisibilityResultMode VisibilityMode ; NS::UInteger VisibilityOffset ; NS::UInteger VisibilityWritten ; TRefCountPtr<FMetalDepthStencilState> DepthStencilState ; TRefCountPtr<FMetalRasterizerState> RasterizerState ; TRefCountPtr<FMetalGraphicsPipelineState> GraphicsPSO ; TRefCountPtr<FMetalComputeShader> ComputeShader ; TRefCountPtr<FMetalComputeShader> PreviousComputeShader ; uint32 StencilRef ; FLinearColor BlendFactor ; CGSize FrameBufferSize ; uint32 RenderTargetArraySize ; MTL::Viewport Viewport [ ML_MaxViewports ] ; MTL::ScissorRect Scissor [ ML_MaxViewports ] ; uint32 ActiveViewports ; uint32 ActiveScissors ; FRHIRenderPassInfo RenderPassInfo ; FTextureRHIRef ColorTargets [ MaxSimultaneousRenderTargets ] ; FTextureRHIRef ResolveTargets [ MaxSimultaneousRenderTargets ] ; FTextureRHIRef DepthStencilSurface ; FTextureRHIRef DepthStencilResolve ; MTL::RenderPassDescriptor* RenderPassDesc ; uint32 RasterBits ; uint8 PipelineBits ; bool bIsRenderTargetActive ; bool bHasValidRenderTarget ; bool bHasValidColorTarget ; bool bImmediate ; } ; class FMetalRenderPassDescriptorPool { public :)",
    "insertText": "FMetalRenderPassDescriptorPool()"
  },
  {
    "label": "CreateDescriptor()",
    "kind": "Method",
    "detail": "Function (} MTL::RenderPassDescriptor*)",
    "insertText": "CreateDescriptor()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (MTL::RenderPassDescriptor* Desc = Cache .)",
    "insertText": "Pop()"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (Desc = MTL::)",
    "insertText": "alloc()->init()"
  },
  {
    "label": "colorAttachments()",
    "kind": "Method",
    "detail": "Function (MTL::RenderPassColorAttachmentDescriptorArray* Attachments = Desc ->)",
    "insertText": "colorAttachments()"
  },
  {
    "label": "object()",
    "kind": "Method",
    "detail": "Function (MTL::RenderPassColorAttachmentDescriptor* Color = Attachments ->)",
    "insertText": "object(i)"
  },
  {
    "label": "setTexture()",
    "kind": "Method",
    "detail": "Function (Color ->)",
    "insertText": "setTexture(nullptr)"
  },
  {
    "label": "setResolveTexture()",
    "kind": "Method",
    "detail": "Function (Color ->)",
    "insertText": "setResolveTexture(nullptr)"
  },
  {
    "label": "setStoreAction()",
    "kind": "Method",
    "detail": "Function (Color ->)",
    "insertText": "setStoreAction(MTL::StoreActionStore)"
  },
  {
    "label": "depthAttachment()",
    "kind": "Method",
    "detail": "Function (} MTL::RenderPassDepthAttachmentDescriptor* Depth = Desc ->)",
    "insertText": "depthAttachment()"
  },
  {
    "label": "stencilAttachment()",
    "kind": "Method",
    "detail": "Function (MTL::RenderPassStencilAttachmentDescriptor* Stencil = Desc ->)",
    "insertText": "stencilAttachment()"
  },
  {
    "label": "setVisibilityResultBuffer()",
    "kind": "Method",
    "detail": "Function (Desc ->)",
    "insertText": "setVisibilityResultBuffer(nullptr)"
  },
  {
    "label": "setRenderTargetArrayLength()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_MAC Desc ->)",
    "insertText": "setRenderTargetArrayLength(1)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (# endif Cache .)",
    "insertText": "Push(Desc)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FMetalRenderPassDescriptorPool&)",
    "insertText": "Get()"
  }
]