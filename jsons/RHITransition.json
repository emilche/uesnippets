[
  {
    "label": "FRHISubresourceRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHISubresourceRange"
  },
  {
    "label": "FRHICommitResourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommitResourceInfo"
  },
  {
    "label": "FRHITransitionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransitionInfo"
  },
  {
    "label": "FRHIResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIResource"
  },
  {
    "label": "FRHIViewableResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIViewableResource"
  },
  {
    "label": "FRHITexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITexture"
  },
  {
    "label": "FRHIBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBuffer"
  },
  {
    "label": "FRHIUnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIUnorderedAccessView"
  },
  {
    "label": "FRHIRayTracingAccelerationStructure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingAccelerationStructure"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHITransientAliasingOverlap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientAliasingOverlap"
  },
  {
    "label": "FRHITransientAliasingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransientAliasingInfo"
  },
  {
    "label": "FRHITransitionCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransitionCreateInfo"
  },
  {
    "label": "FRHITrackedAccessInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITrackedAccessInfo"
  },
  {
    "label": "FRHITransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITransition"
  },
  {
    "label": "FRHIComputeCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeCommandList"
  },
  {
    "label": "FRHICommandBeginTransitions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandBeginTransitions"
  },
  {
    "label": "FRHICommandEndTransitions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandEndTransitions"
  },
  {
    "label": "FRHICommandResourceTransition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICommandResourceTransition"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Misc / Optional . h \" # include \" RHIDefinitions . h \" # include \" RHIAccess . h \" # include \" RHIPipeline . h \" # include \" RHIValidationCommon . h \" uint64 GRHITransitionPrivateData_SizeInBytes ; uint64 GRHITransitionPrivateData_AlignInBytes ; struct FRHISubresourceRange { const uint32 kDepthPlaneSlice = 0 ; const uint32 kStencilPlaneSlice = 1 ; const uint32 kAllSubresources = TNumericLimits<uint32)",
    "insertText": "Max()"
  },
  {
    "label": "FRHISubresourceRange()",
    "kind": "Method",
    "detail": "Function (uint32 MipIndex = kAllSubresources ; uint32 ArraySlice = kAllSubresources ; uint32 PlaneSlice = kAllSubresources ;)",
    "insertText": "FRHISubresourceRange()"
  },
  {
    "label": "FRHISubresourceRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHISubresourceRange(uint32 InMipIndex, uint32 InArraySlice, uint32 InPlaneSlice) : MipIndex(InMipIndex) , ArraySlice(InArraySlice) , PlaneSlice(InPlaneSlice)"
  },
  {
    "label": "IsAllMips()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAllMips()"
  },
  {
    "label": "IgnoreDepthPlane()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IgnoreDepthPlane()"
  },
  {
    "label": "FRHICommitResourceInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHICommitResourceInfo { uint64 SizeInBytes = 0 ;)",
    "insertText": "FRHICommitResourceInfo(uint64 InSizeInBytes) : SizeInBytes(InSizeInBytes)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHITransitionInfo : public FRHISubresourceRange { union { class FRHIResource* Resource = nullptr ; class FRHIViewableResource* ViewableResource ; class FRHITexture* Texture ; class FRHIBuffer* Buffer ; class FRHIUnorderedAccessView* UAV ; class FRHIRayTracingAccelerationStructure* BVH ; } ; enum class EType : uint8 { Unknown,Texture,Buffer,UAV,BVH,} Type = EType::Unknown ; ERHIAccess AccessBefore = ERHIAccess::Unknown ; ERHIAccess AccessAfter = ERHIAccess::Unknown ; EResourceTransitionFlags Flags = EResourceTransitionFlags::None ; TOptional<FRHICommitResourceInfo> CommitInfo ;)",
    "insertText": "FRHITransitionInfo()"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITransitionInfo(class FRHITexture* InTexture, ERHIAccess InPreviousState, ERHIAccess InNewState, EResourceTransitionFlags InFlags = EResourceTransitionFlags::None, uint32 InMipIndex = kAllSubresources, uint32 InArraySlice = kAllSubresources, uint32 InPlaneSlice = kAllSubresources) : FRHISubresourceRange(InMipIndex, InArraySlice, InPlaneSlice) , Texture(InTexture) , Type(EType::Texture) , AccessBefore(InPreviousState) , AccessAfter(InNewState) , Flags(InFlags)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransitionInfo(class FRHIUnorderedAccessView* InUAV, ERHIAccess InPreviousState, ERHIAccess InNewState, EResourceTransitionFlags InFlags = EResourceTransitionFlags::None) : UAV(InUAV) , Type(EType::UAV) , AccessBefore(InPreviousState) , AccessAfter(InNewState) , Flags(InFlags)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransitionInfo(class FRHIBuffer* InRHIBuffer, ERHIAccess InPreviousState, ERHIAccess InNewState, EResourceTransitionFlags InFlags = EResourceTransitionFlags::None) : Buffer(InRHIBuffer) , Type(EType::Buffer) , AccessBefore(InPreviousState) , AccessAfter(InNewState) , Flags(InFlags)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransitionInfo(class FRHIBuffer* InRHIBuffer, ERHIAccess InPreviousState, ERHIAccess InNewState, FRHICommitResourceInfo InCommitInfo) : Buffer(InRHIBuffer) , Type(EType::Buffer) , AccessBefore(InPreviousState) , AccessAfter(InNewState) , CommitInfo(InCommitInfo)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransitionInfo(class FRHIRayTracingAccelerationStructure* InBVH, ERHIAccess InPreviousState, ERHIAccess InNewState, EResourceTransitionFlags InFlags = EResourceTransitionFlags::None) : BVH(InBVH) , Type(EType::BVH) , AccessBefore(InPreviousState) , AccessAfter(InNewState) , Flags(InFlags)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransitionInfo(class FRHITexture* InTexture, ERHIAccess InNewState) : Texture(InTexture) , Type(EType::Texture) , AccessAfter(InNewState)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransitionInfo(class FRHIUnorderedAccessView* InUAV, ERHIAccess InNewState) : UAV(InUAV) , Type(EType::UAV) , AccessAfter(InNewState)"
  },
  {
    "label": "FRHITransitionInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransitionInfo(class FRHIBuffer* InRHIBuffer, ERHIAccess InNewState) : Buffer(InRHIBuffer) , Type(EType::Buffer) , AccessAfter(InNewState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FRHITransitionInfo const& RHS)"
  },
  {
    "label": "FRHITransientAliasingOverlap()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHITransientAliasingOverlap { union { class FRHIResource* Resource = nullptr ; class FRHITexture* Texture ; class FRHIBuffer* Buffer ; } ; enum class EType : uint8 { Texture,Buffer } Type = EType::Texture ;)",
    "insertText": "FRHITransientAliasingOverlap()"
  },
  {
    "label": "FRHITransientAliasingOverlap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITransientAliasingOverlap(FRHIResource* InResource, EType InType) : Resource(InResource) , Type(InType)"
  },
  {
    "label": "FRHITransientAliasingOverlap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransientAliasingOverlap(FRHITexture* InTexture) : Texture(InTexture) , Type(EType::Texture)"
  },
  {
    "label": "FRHITransientAliasingOverlap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITransientAliasingOverlap(FRHIBuffer* InBuffer) : Buffer(InBuffer) , Type(EType::Buffer)"
  },
  {
    "label": "IsTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTexture()"
  },
  {
    "label": "FRHITransientAliasingInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHITransientAliasingInfo { union { class FRHIResource* Resource = nullptr ; class FRHITexture* Texture ; class FRHIBuffer* Buffer ; } ; TArrayView<const FRHITransientAliasingOverlap> Overlaps ; enum class EType : uint8 { Texture,Buffer } Type = EType::Texture ; enum class EAction : uint8 { Acquire,Discard } Action = EAction::Acquire ;)",
    "insertText": "FRHITransientAliasingInfo()"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (FRHITransientAliasingInfo)",
    "insertText": "Acquire(class FRHITexture* Texture, TArrayView<const FRHITransientAliasingOverlap> InOverlaps)"
  },
  {
    "label": "Acquire()",
    "kind": "Method",
    "detail": "Function (FRHITransientAliasingInfo Info ; Info . Texture = Texture ; Info . Overlaps = InOverlaps ; Info . Type = EType::Texture ; Info . Action = EAction::Acquire ; return Info ; } FRHITransientAliasingInfo)",
    "insertText": "Acquire(class FRHIBuffer* Buffer, TArrayView<const FRHITransientAliasingOverlap> InOverlaps)"
  },
  {
    "label": "IsAcquire()",
    "kind": "Method",
    "detail": "Function (FRHITransientAliasingInfo Info ; Info . Buffer = Buffer ; Info . Type = EType::Buffer ; Info . Action = EAction::Discard ; return Info ; } bool)",
    "insertText": "IsAcquire()"
  },
  {
    "label": "FRHITransitionCreateInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FRHITransitionCreateInfo {)",
    "insertText": "FRHITransitionCreateInfo()"
  },
  {
    "label": "FRHITransitionCreateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITransitionCreateInfo(ERHIPipeline InSrcPipelines, ERHIPipeline InDstPipelines, ERHITransitionCreateFlags InFlags = ERHITransitionCreateFlags::None, TArrayView<const FRHITransitionInfo> InTransitionInfos = {}, TArrayView<const FRHITransientAliasingInfo> InAliasingInfos = {}) : SrcPipelines(InSrcPipelines) , DstPipelines(InDstPipelines) , Flags(InFlags) , TransitionInfos(InTransitionInfos) , AliasingInfos(InAliasingInfos)"
  },
  {
    "label": "FRHITrackedAccessInfo()",
    "kind": "Method",
    "detail": "Function (} ERHIPipeline SrcPipelines = ERHIPipeline::None ; ERHIPipeline DstPipelines = ERHIPipeline::None ; ERHITransitionCreateFlags Flags = ERHITransitionCreateFlags::None ; TArrayView<const FRHITransitionInfo> TransitionInfos ; TArrayView<const FRHITransientAliasingInfo> AliasingInfos ; } ; struct FRHITrackedAccessInfo {)",
    "insertText": "FRHITrackedAccessInfo()"
  },
  {
    "label": "FRHITrackedAccessInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITrackedAccessInfo(FRHIViewableResource* InResource, ERHIAccess InAccess) : Resource(InResource) , Access(InAccess)"
  },
  {
    "label": "GetPrivateData()",
    "kind": "Method",
    "detail": "Function (} FRHIViewableResource* Resource = nullptr ; ERHIAccess Access = ERHIAccess::Unknown ; } ; struct FRHITransition # if ENABLE_RHI_VALIDATION : public RHIValidation::FTransitionResource # endif { public : template<T> T*)",
    "insertText": "GetPrivateData()"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (uintptr_t Addr =)",
    "insertText": "Align(uintptr_t(this + 1), GRHITransitionPrivateData_AlignInBytes)"
  },
  {
    "label": "FRHITransition()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FRHITransition(const FRHITransition&)"
  },
  {
    "label": "FRHITransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITransition(FRHITransition&&)"
  },
  {
    "label": "FRHITransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITransition(ERHIPipeline SrcPipelines, ERHIPipeline DstPipelines) : State(int8(int32(SrcPipelines) | (int32(DstPipelines) << int32(ERHIPipeline::Num)))) #if DO_CHECK || USING_CODE_ANALYSIS , AllowedSrc(SrcPipelines) , AllowedDst(DstPipelines)"
  },
  {
    "label": "FRHITransition()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHITransition()"
  },
  {
    "label": "RHICreateTransition()",
    "kind": "Method",
    "detail": "Function (} const FRHITransition*)",
    "insertText": "RHICreateTransition(const FRHITransitionCreateInfo&)"
  },
  {
    "label": "GetTotalAllocationSize()",
    "kind": "Method",
    "detail": "Function (class FRHIComputeCommandList ; struct FRHICommandBeginTransitions ; struct FRHICommandEndTransitions ; struct FRHICommandResourceTransition ; uint64)",
    "insertText": "GetTotalAllocationSize()"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetAlignment()"
  },
  {
    "label": "MarkBegin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkBegin(ERHIPipeline Pipeline)"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (int8 Mask =)",
    "insertText": "int8(Pipeline)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (int8 PreviousValue =)",
    "insertText": "InterlockedAnd(&State, ~Mask)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "MarkEnd()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "MarkEnd(ERHIPipeline Pipeline)"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (int8 Mask =)",
    "insertText": "int8(int32(Pipeline) << int32(ERHIPipeline::Num))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (int8 State ;)",
    "insertText": "static_assert((int32(ERHIPipeline::Num) * 2) < (sizeof(State) * 8), \"Not enough bits to hold pipeline state.\")"
  },
  {
    "label": "GetViewableResource()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK | | USING_CODE_ANALYSIS ERHIPipeline AllowedSrc ; ERHIPipeline AllowedDst ; # endif } ; FRHIViewableResource*)",
    "insertText": "GetViewableResource(const FRHITransitionInfo& Info)"
  }
]