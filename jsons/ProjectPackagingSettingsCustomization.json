[
  {
    "label": "SCulturePickerRowWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCulturePickerRowWidget"
  },
  {
    "label": "FProjectPackagingSettingsCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectPackagingSettingsCustomization"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Layout / Visibility . h \" # include \" Misc / NotifyHook . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Styling / SlateTypes . h \" # include \" Misc / Paths . h \" # include \" Styling / CoreStyle . h \" # include \" HAL / FileManager . h \" # include \" Styling / AppStyle . h \" # include \" IDetailCustomization . h \" # include \" IPropertyUtilities . h \" # include \" PropertyHandle . h \" # include \" DetailLayoutBuilder . h \" # include \" DetailCategoryBuilder . h \" # include \" Widgets / Text / STextBlock . h \" # include \" DetailWidgetRow . h \" # include \" Internationalization / Culture . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Settings / ProjectPackagingSettings . h \" # include \" Settings / EditorExperimentalSettings . h \" # include \" PropertyRestriction . h \" # include \" Widgets / Views / SMultipleOptionTable . h \" # include \" DesktopPlatformModule . h \" # include \" ILauncherServicesModule . h \" # define LOCTEXT_NAMESPACE \" FProjectPackagingSettingsCustomization \" class SCulturePickerRowWidget : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(SCulturePickerRowWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, FCulturePtr InCulture, TAttribute<bool> InIsFilteringCultures)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Culture = InCulture ; IsFilteringCultures = InIsFilteringCultures ; { const TArray<FString> LocalizedCultureNames =)",
    "insertText": "Get().GetLocalizedCultureNames(ELocalizationLoadFlags::Game)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const TArray<FCultureRef> LocalizedCultures =)",
    "insertText": "Get().GetAvailableCultures(LocalizedCultureNames, true)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (HasLocalizationData = LocalizedCultures .)",
    "insertText": "Contains(Culture.ToSharedRef())"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} ChildSlot [)",
    "insertText": "SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth() .Padding(FMargin(3.0, 2.0)) .VAlign(VAlign_Center) [ SNew(SImage) .Image( FCoreStyle::Get().GetBrush(\"Icons.Warning\") ) .Visibility(this, &SCulturePickerRowWidget::HandleWarningImageVisibility) .ToolTipText(LOCTEXT(\"NotLocalizedWarning\", \"This project does not have localization data (translations) for this culture.\")) ] +SHorizontalBox::Slot() .FillWidth(1.0f) .VAlign(VAlign_Center) [ SNew(STextBlock) .Text(FText::FromString(Culture->GetDisplayName())) .ToolTipText(FText::FromString(Culture->GetName()))"
  },
  {
    "label": "HandleWarningImageVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "HandleWarningImageVisibility()"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (bool bIsFilteringCultures = IsFilteringCultures .)",
    "insertText": "IsBound() ? IsFilteringCultures.Get()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (} private : FCulturePtr Culture ; TAttribute<bool> IsFilteringCultures ; bool HasLocalizationData ; } ; class FProjectPackagingSettingsCustomization : public IDetailCustomization { public : void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& LayoutBuilder)"
  },
  {
    "label": "CustomizeProjectCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeProjectCategory(LayoutBuilder)"
  },
  {
    "label": "CustomizePackagingCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizePackagingCategory(LayoutBuilder)"
  },
  {
    "label": "CustomizeCustomBuildsCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeCustomBuildsCategory(LayoutBuilder)"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (} public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "FProjectPackagingSettingsCustomization()",
    "kind": "Method",
    "detail": "Function (} protected : enum class EFilterCulturesChoices { OnlyLocalizedCultures,AllAvailableCultures } ;)",
    "insertText": "FProjectPackagingSettingsCustomization() : FilterCulturesChoice(EFilterCulturesChoices::AllAvailableCultures) , IsInBatchSelectOperation(false)"
  },
  {
    "label": "CustomizeProjectCategory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeProjectCategory(IDetailLayoutBuilder& LayoutBuilder)"
  },
  {
    "label": "GetValidPackageConfigurations()",
    "kind": "Method",
    "detail": "Function (TArray<EProjectPackagingBuildConfigurations> PackagingConfigurations =)",
    "insertText": "GetValidPackageConfigurations()"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FPropertyRestriction> BuildConfigurationRestriction =)",
    "insertText": "MakeShareable(new FPropertyRestriction(LOCTEXT(\"ConfigurationRestrictionReason\", \"This configuration is not valid for this project. DebugGame configurations are not available in Content-Only or Launcher projects, and client/server configurations require the appropriate targets..\")))"
  },
  {
    "label": "EProjectPackagingBuildConfigurations()",
    "kind": "Method",
    "detail": "Function (const UEnum* const ProjectPackagingBuildConfigurationsEnum = StaticEnum<)",
    "insertText": "EProjectPackagingBuildConfigurations()"
  },
  {
    "label": "Configuration()",
    "kind": "Method",
    "detail": "Function (EProjectPackagingBuildConfigurations)",
    "insertText": "Configuration(EProjectPackagingBuildConfigurations)"
  },
  {
    "label": "AddDisabledValue()",
    "kind": "Method",
    "detail": "Function (BuildConfigurationRestriction ->)",
    "insertText": "AddDisabledValue(ProjectPackagingBuildConfigurationsEnum->GetNameStringByValue(Idx))"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<IPropertyHandle> BuildConfigurationHandle = LayoutBuilder .)",
    "insertText": "GetProperty(\"BuildConfiguration\")"
  },
  {
    "label": "AddRestriction()",
    "kind": "Method",
    "detail": "Function (BuildConfigurationHandle ->)",
    "insertText": "AddRestriction(BuildConfigurationRestriction)"
  },
  {
    "label": "CustomizePackagingCategory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizePackagingCategory(IDetailLayoutBuilder& LayoutBuilder)"
  },
  {
    "label": "EditCategory()",
    "kind": "Method",
    "detail": "Function (IDetailCategoryBuilder& PackagingCategory = LayoutBuilder .)",
    "insertText": "EditCategory(\"Packaging\")"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function ({ CulturesPropertyHandle = LayoutBuilder .)",
    "insertText": "GetProperty(\"CulturesToStage\", UProjectPackagingSettings::StaticClass())"
  },
  {
    "label": "MarkHiddenByCustomization()",
    "kind": "Method",
    "detail": "Function (CulturesPropertyHandle ->)",
    "insertText": "MarkHiddenByCustomization()"
  },
  {
    "label": "AsArray()",
    "kind": "Method",
    "detail": "Function (CulturesPropertyArrayHandle = CulturesPropertyHandle ->)",
    "insertText": "AsArray()"
  },
  {
    "label": "PopulateCultureList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCultureList()"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function (PackagingCategory .)",
    "insertText": "AddCustomRow(LOCTEXT(\"CulturesToStageLabel\", \"Languages To Package\"), true) .NameContent() .HAlign(HAlign_Fill) .VAlign(VAlign_Top) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() [ CulturesPropertyHandle->CreatePropertyNameWidget() ] + SHorizontalBox::Slot() .AutoWidth() [ SNew(SImage) .Image(FAppStyle::GetBrush(TEXT(\"Icons.Error\"))) .ToolTipText(LOCTEXT(\"NoCulturesToStageSelectedError\", \"At least one language must be selected or fatal errors may occur when launching games.\")) .Visibility(this, &FProjectPackagingSettingsCustomization::HandleNoCulturesErrorIconVisibility) ] ] .ValueContent() .HAlign(HAlign_Fill) .VAlign(VAlign_Fill) [ SNew(SVerticalBox) + SVerticalBox::Slot() .AutoHeight() .Padding(0.0f, 4.0f) .VAlign(VAlign_Center) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .AutoWidth() [ SNew(SCheckBox) .IsChecked(this, &FProjectPackagingSettingsCustomization::HandleShowCulturesCheckBoxIsChecked, EFilterCulturesChoices::AllAvailableCultures) .OnCheckStateChanged(this, &FProjectPackagingSettingsCustomization::HandleShowCulturesCheckBoxCheckStateChanged, EFilterCulturesChoices::AllAvailableCultures) .Style(FAppStyle::Get(), \"RadioButton\") [ SNew(STextBlock) .Text(LOCTEXT(\"AllCulturesCheckBoxText\", \"Show All\")) ] ] + SHorizontalBox::Slot() .FillWidth(1.0f) .Padding(8.0f, 0.0f, 0.0f, 0.0f) [ SNew(SCheckBox) .IsChecked(this, &FProjectPackagingSettingsCustomization::HandleShowCulturesCheckBoxIsChecked, EFilterCulturesChoices::OnlyLocalizedCultures) .OnCheckStateChanged(this, &FProjectPackagingSettingsCustomization::HandleShowCulturesCheckBoxCheckStateChanged, EFilterCulturesChoices::OnlyLocalizedCultures) .Style(FAppStyle::Get(), \"RadioButton\") [ SNew(STextBlock) .Text(LOCTEXT(\"CookedCulturesCheckBoxText\", \"Show Localized\")) ] ] ] + SVerticalBox::Slot() .AutoHeight() [ SAssignNew(Table, SMultipleOptionTable<FCulturePtr>, &CultureList) .OnPreBatchSelect(this, &FProjectPackagingSettingsCustomization::OnPreBatchSelect) .OnPostBatchSelect(this, &FProjectPackagingSettingsCustomization::OnPostBatchSelect) .OnGenerateOptionWidget(this, &FProjectPackagingSettingsCustomization::GenerateWidgetForCulture) .OnOptionSelectionChanged(this, &FProjectPackagingSettingsCustomization::OnCultureSelectionChanged) .IsOptionSelected(this, &FProjectPackagingSettingsCustomization::IsCultureSelected) .ListHeight(100.0f)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CultureList .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CultureList .)",
    "insertText": "Add(FInternationalization::Get().GetCulture(CultureName))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CultureList .)",
    "insertText": "Append(LocalizedCultureList)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} break ; default :)",
    "insertText": "checkf(false, TEXT(\"Unknown EFilterCulturesChoices\"))"
  },
  {
    "label": "HandleNoCulturesErrorIconVisibility()",
    "kind": "Method",
    "detail": "Function (break ; } } EVisibility)",
    "insertText": "HandleNoCulturesErrorIconVisibility()"
  },
  {
    "label": "AccessRawData()",
    "kind": "Method",
    "detail": "Function (TArray<void*> RawData ; CulturesPropertyHandle ->)",
    "insertText": "AccessRawData(RawData)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (TArray<FString>* RawCultureStringArray = reinterpret_cast<TArray<)",
    "insertText": "FString(RawData[0])"
  },
  {
    "label": "HandleShowCulturesCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (} ECheckBoxState)",
    "insertText": "HandleShowCulturesCheckBoxIsChecked(EFilterCulturesChoices Choice)"
  },
  {
    "label": "RequestTableRefresh()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "RequestTableRefresh()"
  },
  {
    "label": "AddCulture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCulture(FString CultureName)"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (CulturesPropertyHandle ->)",
    "insertText": "NotifyPreChange()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RawCultureStringArray ->)",
    "insertText": "Add(CultureName)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (CulturesPropertyHandle ->)",
    "insertText": "NotifyPostChange(EPropertyChangeType::ArrayAdd)"
  },
  {
    "label": "RemoveCulture()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveCulture(FString CultureName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (RawCultureStringArray ->)",
    "insertText": "Remove(CultureName)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (CulturesPropertyHandle ->)",
    "insertText": "NotifyPostChange(EPropertyChangeType::ArrayRemove)"
  },
  {
    "label": "IsFilteringCultures()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsFilteringCultures()"
  },
  {
    "label": "OnPostBatchSelect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostBatchSelect()"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (CulturesPropertyHandle ->)",
    "insertText": "NotifyPostChange(EPropertyChangeType::ValueSet)"
  },
  {
    "label": "GenerateWidgetForCulture()",
    "kind": "Method",
    "detail": "Function (IsInBatchSelectOperation = false ; } TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForCulture(FCulturePtr Culture)"
  },
  {
    "label": "OnCultureSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCultureSelectionChanged(bool IsSelected, FCulturePtr Culture)"
  },
  {
    "label": "AddCulture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCulture(Culture->GetName())"
  },
  {
    "label": "RemoveCulture()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "RemoveCulture(Culture->GetName())"
  },
  {
    "label": "IsCultureSelected()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsCultureSelected(FCulturePtr Culture)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString CultureName = Culture ->)",
    "insertText": "GetName()"
  },
  {
    "label": "GetNumElements()",
    "kind": "Method",
    "detail": "Function (uint32 ElementCount ; CulturesPropertyArrayHandle ->)",
    "insertText": "GetNumElements(ElementCount)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IPropertyHandle> PropertyHandle = CulturesPropertyArrayHandle ->)",
    "insertText": "GetElement(Index)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FString CultureNameAtIndex ; PropertyHandle ->)",
    "insertText": "GetValue(CultureNameAtIndex)"
  },
  {
    "label": "GetPropertyUtilities()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IPropertyUtilities> PropertyUtilities = LayoutBuilder .)",
    "insertText": "GetPropertyUtilities()"
  },
  {
    "label": "ILauncherServicesModule()",
    "kind": "Method",
    "detail": "Function (ILauncherServicesModule& LauncherServicesModule = FModuleManager::LoadModuleChecked<)",
    "insertText": "ILauncherServicesModule(\"LauncherServices\")"
  },
  {
    "label": "GetProfileManager()",
    "kind": "Method",
    "detail": "Function (ILauncherProfileManagerRef LauncherProfileManager = LauncherServicesModule .)",
    "insertText": "GetProfileManager()"
  },
  {
    "label": "EditCategory()",
    "kind": "Method",
    "detail": "Function (IDetailCategoryBuilder& CustomBuildsCategory = LayoutBuilder .)",
    "insertText": "EditCategory(\"CustomBuilds\", FText::GetEmpty(), ECategoryPriority::Important)"
  },
  {
    "label": "AddCustomRow()",
    "kind": "Method",
    "detail": "Function ({ CustomBuildsCategory .)",
    "insertText": "AddCustomRow(FText::GetEmpty(), false) .WholeRowWidget [ SNew(SBorder) .BorderImage(FAppStyle::GetBrush(\"ToolPanel.GroupBorder\")) [ SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth() .VAlign(VAlign_Center) .Padding(8.4) [ SNew(SComboButton) .ComboButtonStyle(FAppStyle::Get(), \"SimpleComboButton\") .OnGetMenuContent_Lambda( [this, PropertyUtilities] { return CreateImportFromProjectLauncherMenu(PropertyUtilities); } ) .Visibility_Lambda( [LauncherProfileManager] { return LauncherProfileManager->GetAllProfiles().IsEmpty() ? EVisibility::Collapsed : EVisibility::Visible; }) .ButtonContent() [ SNew(SHorizontalBox) +SHorizontalBox::Slot() .AutoWidth() .VAlign(VAlign_Center) .HAlign(HAlign_Center) [ SNew(SImage) .Image(FAppStyle::GetBrush(\"Launcher.TabIcon\")) ] +SHorizontalBox::Slot() .AutoWidth() .VAlign(VAlign_Center) .Padding(4,0,0,0) [ SNew(STextBlock) .Text(LOCTEXT(\"ImportProjectLauncher\", \"Import From Project Launcher\")) ] ] ] ] ] .Visibility(TAttribute<EVisibility>::Create(TAttribute<EVisibility>::FGetter::CreateLambda([]() { return GetDefault<UEditorExperimentalSettings>()->bProjectCustomBuildTools ? EVisibility::Visible : EVisibility::Collapsed; })))"
  },
  {
    "label": "CreateImportFromProjectLauncherMenu()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<SWidget>)",
    "insertText": "CreateImportFromProjectLauncherMenu(TSharedPtr<IPropertyUtilities> PropertyUtilities)"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (const bool bCloseAfterSelection = true ; FMenuBuilder)",
    "insertText": "MenuBuilder(bCloseAfterSelection, nullptr, nullptr, true)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FText::FromString(LauncherProfilePtr->GetName()), FText::FromString(LauncherProfilePtr->GetDescription()), FSlateIcon(), FUIAction ( FExecuteAction::CreateRaw( this, &FProjectPackagingSettingsCustomization::ImportFromLauncherProfile, LauncherProfilePtr, PropertyUtilities ) ), NAME_None, EUserInterfaceActionType::Button)"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (} return MenuBuilder .)",
    "insertText": "MakeWidget()"
  },
  {
    "label": "ImportFromLauncherProfile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ImportFromLauncherProfile(const ILauncherProfilePtr LauncherProfilePtr, TSharedPtr<IPropertyUtilities> PropertyUtilities)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (UProjectPackagingSettings* ProjectPackagingSettings =)",
    "insertText": "StaticClass()->GetDefaultObject<UProjectPackagingSettings>()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int UniqueId = 1 ;)",
    "insertText": "while(ProjectPackagingSettings->ProjectCustomBuilds.ContainsByPredicate( [ProfileName](const FProjectBuildSettings& Other) { return ProfileName == Other.Name; } ))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (ProfileName =)",
    "insertText": "Printf(TEXT(\"%s %d\"), *LauncherProfilePtr->GetName(), UniqueId++)"
  },
  {
    "label": "AddDefaulted_GetRef()",
    "kind": "Method",
    "detail": "Function (} FProjectBuildSettings& ProjectBuildSettings = ProjectPackagingSettings -> ProjectCustomBuilds .)",
    "insertText": "AddDefaulted_GetRef()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (ProjectBuildSettings . Name = ProfileName ; ProjectBuildSettings . HelpText = LauncherProfilePtr ->)",
    "insertText": "GetDescription().IsEmpty() ? LauncherProfilePtr->GetName() : LauncherProfilePtr->GetDescription()"
  },
  {
    "label": "GetCookedPlatforms()",
    "kind": "Method",
    "detail": "Function (ProjectBuildSettings . SpecificPlatforms = LauncherProfilePtr ->)",
    "insertText": "GetCookedPlatforms()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ProjectBuildSettings . SpecificPlatforms .)",
    "insertText": "Add(LauncherProfilePtr->GetDefaultDeployPlatform().ToString())"
  },
  {
    "label": "GetProfileManager()",
    "kind": "Method",
    "detail": "Function (} ProjectBuildSettings . BuildCookRunParams = LauncherServicesModule .)",
    "insertText": "GetProfileManager()->MakeBuildCookRunParamsForProjectCustomBuild(LauncherProfilePtr.ToSharedRef(), ProjectBuildSettings.SpecificPlatforms)"
  },
  {
    "label": "GetNotifyHook()",
    "kind": "Method",
    "detail": "Function (FNotifyHook* NotifyHook = PropertyUtilities ->)",
    "insertText": "GetNotifyHook()"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (FProperty* Property =)",
    "insertText": "StaticClass()->FindPropertyByName(\"ProjectCustomBuilds\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<const UObject*> NotifyTopLevelObjects ; NotifyTopLevelObjects .)",
    "insertText": "Add(ProjectPackagingSettings)"
  },
  {
    "label": "AddHead()",
    "kind": "Method",
    "detail": "Function (FEditPropertyChain PropertyChain ; PropertyChain .)",
    "insertText": "AddHead(Property)"
  },
  {
    "label": "ChangeEvent()",
    "kind": "Method",
    "detail": "Function (FPropertyChangedEvent)",
    "insertText": "ChangeEvent(Property, EPropertyChangeType::ValueSet, MakeArrayView(NotifyTopLevelObjects))"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (NotifyHook ->)",
    "insertText": "NotifyPostChange(ChangeEvent, &PropertyChain)"
  }
]