[
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_MOD_OPS_H_ # define RTC_BASE_NUMERICS_MOD_OPS_H_ # include<algorithm> # include<type_traits> # include \" rtc_base / checks . h \" namespace webrtc { template<unsigned long M> unsigned long)",
    "insertText": "Add(unsigned long a, unsigned long b)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(a, M)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned long t = M - b % M ; unsigned long res = a - t ;)",
    "insertText": "if(t > a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned long sub = b % M ;)",
    "insertText": "if(a < sub) return M - (sub - a)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(b, M)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<T,T M>)",
    "insertText": "enable_if(M == 0), T>::type ForwardDiff(T a, T b)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<T,T M>)",
    "insertText": "enable_if(M > 0), T>::type ReverseDiff(T a, T b)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<T,T M>)",
    "insertText": "enable_if(M == 0), T>::type ReverseDiff(T a, T b)"
  },
  {
    "label": "MinDiff()",
    "kind": "Method",
    "detail": "Function (} template<T,T M = 0> T)",
    "insertText": "MinDiff(T a, T b)"
  }
]