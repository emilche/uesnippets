[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LapTimer()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TIMER_LAP_TIMER_H_ # define BASE_TIMER_LAP_TIMER_H_ # include \" base / base_export . h \" # include \" base / sequence_checker . h \" # include \" base / time / time . h \" namespace base { class BASE_EXPORT LapTimer { public : enum class TimerMethod { kUseThreadTicks,kUseTimeTicks } ;)",
    "insertText": "LapTimer(int warmup_laps, TimeDelta time_limit, int check_interval, TimerMethod timing_method = TimerMethod::kUseTimeTicks)"
  },
  {
    "label": "LapTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LapTimer(TimerMethod timing_method = TimerMethod::kUseTimeTicks)"
  },
  {
    "label": "LapTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LapTimer(const LapTimer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LapTimer&)",
    "insertText": "operator(const LapTimer&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "IsWarmedUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWarmedUp()"
  },
  {
    "label": "NextLap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextLap()"
  },
  {
    "label": "HasTimeLimitExpired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTimeLimitExpired()"
  },
  {
    "label": "TimePerLap()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "TimePerLap()"
  },
  {
    "label": "LapsPerSecond()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "LapsPerSecond()"
  },
  {
    "label": "NumLaps()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumLaps()"
  },
  {
    "label": "HasTimedAllLaps()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HasTimedAllLaps()"
  },
  {
    "label": "GetAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetAccumulatedTime()"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (const int warmup_laps_ ; const TimeDelta time_limit_ ; const int check_interval_ ; const TimerMethod method_ ; ThreadTicks start_thread_ticks_ ; TimeTicks start_time_ticks_ ; ThreadTicks last_timed_lap_end_thread_ticks_ ; TimeTicks last_timed_lap_end_ticks_ ; int num_laps_ ; int remaining_warmups_ = 0 ; int remaining_no_check_laps_ = 0 ;)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]