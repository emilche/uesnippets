[
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FTimeResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeResource"
  },
  {
    "label": "FIndicesByPhysicsProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndicesByPhysicsProxy"
  },
  {
    "label": "FAllCollisionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllCollisionData"
  },
  {
    "label": "FCollisionEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionEventData"
  },
  {
    "label": "FAllBreakingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllBreakingData"
  },
  {
    "label": "FBreakingEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBreakingEventData"
  },
  {
    "label": "FAllTrailingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllTrailingData"
  },
  {
    "label": "FTrailingEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrailingEventData"
  },
  {
    "label": "FAllRemovalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllRemovalData"
  },
  {
    "label": "FRemovalEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemovalEventData"
  },
  {
    "label": "FSleepingEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSleepingEventData"
  },
  {
    "label": "FAllCrumblingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllCrumblingData"
  },
  {
    "label": "FCrumblingEventData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCrumblingEventData"
  },
  {
    "label": "FTimeResource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ExternalCollisionData . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / Framework / PhysicsProxy . h \" class UPrimitiveComponent ; namespace Chaos { struct FTimeResource {)",
    "insertText": "FTimeResource() : TimeCreated(-TNumericLimits<FReal>::Max())"
  },
  {
    "label": "FIndicesByPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (} FReal TimeCreated ; } ; typedef TArray<FCollidingData> FCollisionDataArray ; typedef TArray<FBreakingData> FBreakingDataArray ; typedef TArray<FTrailingData> FTrailingDataArray ; typedef TArray<FRemovalData> FRemovalDataArray ; typedef TArray<FSleepingData> FSleepingDataArray ; typedef TArray<FCrumblingData> FCrumblingDataArray ; struct FIndicesByPhysicsProxy : public FTimeResource {)",
    "insertText": "FIndicesByPhysicsProxy() : PhysicsProxyToIndicesMap(TMap<IPhysicsProxyBase*, TArray<int32>>())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FAllCollisionData()",
    "kind": "Method",
    "detail": "Function (} TMap<IPhysicsProxyBase*,TArray<int32>> PhysicsProxyToIndicesMap ; } ; struct FAllCollisionData : public FTimeResource {)",
    "insertText": "FAllCollisionData() : AllCollisionsArray(FCollisionDataArray())"
  },
  {
    "label": "FCollisionEventData()",
    "kind": "Method",
    "detail": "Function (} FCollisionDataArray AllCollisionsArray ; } ; struct FCollisionEventData {)",
    "insertText": "FCollisionEventData()"
  },
  {
    "label": "FAllBreakingData()",
    "kind": "Method",
    "detail": "Function (} FAllCollisionData CollisionData ; FIndicesByPhysicsProxy PhysicsProxyToCollisionIndices ; } ; struct FAllBreakingData : public FTimeResource {)",
    "insertText": "FAllBreakingData() : AllBreakingsArray(FBreakingDataArray()), bHasGlobalEvent(false)"
  },
  {
    "label": "FBreakingEventData()",
    "kind": "Method",
    "detail": "Function (bHasGlobalEvent = false ; } FBreakingDataArray AllBreakingsArray ; bool bHasGlobalEvent ; } ; struct FBreakingEventData {)",
    "insertText": "FBreakingEventData()"
  },
  {
    "label": "FAllTrailingData()",
    "kind": "Method",
    "detail": "Function (} FAllBreakingData BreakingData ; FIndicesByPhysicsProxy PhysicsProxyToBreakingIndices ; } ; struct FAllTrailingData : FTimeResource {)",
    "insertText": "FAllTrailingData() : AllTrailingsArray(FTrailingDataArray())"
  },
  {
    "label": "FTrailingEventData()",
    "kind": "Method",
    "detail": "Function (} FTrailingDataArray AllTrailingsArray ; } ; struct FTrailingEventData {)",
    "insertText": "FTrailingEventData()"
  },
  {
    "label": "FAllRemovalData()",
    "kind": "Method",
    "detail": "Function (} FAllTrailingData TrailingData ; FIndicesByPhysicsProxy PhysicsProxyToTrailingIndices ; } ; struct FAllRemovalData : FTimeResource {)",
    "insertText": "FAllRemovalData() : AllRemovalArray(FRemovalDataArray())"
  },
  {
    "label": "FRemovalEventData()",
    "kind": "Method",
    "detail": "Function (} FRemovalDataArray AllRemovalArray ; } ; struct FRemovalEventData {)",
    "insertText": "FRemovalEventData()"
  },
  {
    "label": "FSleepingEventData()",
    "kind": "Method",
    "detail": "Function (} FAllRemovalData RemovalData ; FIndicesByPhysicsProxy PhysicsProxyToRemovalIndices ; } ; struct FSleepingEventData {)",
    "insertText": "FSleepingEventData()"
  },
  {
    "label": "FAllCrumblingData()",
    "kind": "Method",
    "detail": "Function (} FSleepingDataArray SleepingData ; } ; struct FAllCrumblingData : public FTimeResource {)",
    "insertText": "FAllCrumblingData() : AllCrumblingsArray(FCrumblingDataArray()), bHasGlobalEvent(false)"
  },
  {
    "label": "FCrumblingEventData()",
    "kind": "Method",
    "detail": "Function (bHasGlobalEvent = false ; } FCrumblingDataArray AllCrumblingsArray ; bool bHasGlobalEvent ; } ; struct FCrumblingEventData {)",
    "insertText": "FCrumblingEventData()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (CrumblingData . AllCrumblingsArray .)",
    "insertText": "Reserve(Num)"
  },
  {
    "label": "SetTimeCreated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTimeCreated(FReal TimeCreatedIn)"
  },
  {
    "label": "AddCrumbling()",
    "kind": "Method",
    "detail": "Function (CrumblingData . TimeCreated = TimeCreatedIn ; } void)",
    "insertText": "AddCrumbling(const FCrumblingData& CrumblingToAdd)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (const int32 NewIndex = CrumblingData . AllCrumblingsArray .)",
    "insertText": "Emplace(CrumblingToAdd)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (TArray<int32>& Indices = PhysicsProxyToCrumblingIndices . PhysicsProxyToIndicesMap .)",
    "insertText": "FindOrAdd(CrumblingToAdd.Proxy)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "Add(NewIndex)"
  },
  {
    "label": "IsEventDataEmpty()",
    "kind": "Method",
    "detail": "Function (} FAllCrumblingData CrumblingData ; FIndicesByPhysicsProxy PhysicsProxyToCrumblingIndices ; } ; template<PayloadType> bool)",
    "insertText": "IsEventDataEmpty(const PayloadType* Buffer)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<PayloadType, FBreakingEventData>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<PayloadType, FTrailingEventData>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<PayloadType, FRemovalEventData>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<PayloadType, FSleepingEventData>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<PayloadType, FCrumblingEventData>)"
  },
  {
    "label": "GetProxyToIndexMap()",
    "kind": "Method",
    "detail": "Function (} else { return false ; } } template<PayloadType> const TMap<IPhysicsProxyBase*,TArray<int32>>*)",
    "insertText": "GetProxyToIndexMap(const PayloadType* Buffer)"
  }
]