[
  {
    "label": "ConstantInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantInt"
  },
  {
    "label": "ConstantRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantRange"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "SCEVTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SCEVTypes"
  },
  {
    "label": "SCEVConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVConstant"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "SCEVCastExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVCastExpr"
  },
  {
    "label": "SCEVTruncateExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVTruncateExpr"
  },
  {
    "label": "SCEVZeroExtendExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVZeroExtendExpr"
  },
  {
    "label": "SCEVSignExtendExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVSignExtendExpr"
  },
  {
    "label": "SCEVNAryExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVNAryExpr"
  },
  {
    "label": "SCEVCommutativeExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVCommutativeExpr"
  },
  {
    "label": "SCEVAddExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVAddExpr"
  },
  {
    "label": "SCEVMulExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVMulExpr"
  },
  {
    "label": "SCEVUDivExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVUDivExpr"
  },
  {
    "label": "SCEVAddRecExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVAddRecExpr"
  },
  {
    "label": "SCEVSMaxExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVSMaxExpr"
  },
  {
    "label": "SCEVUMaxExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVUMaxExpr"
  },
  {
    "label": "SCEVUnknown",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVUnknown"
  },
  {
    "label": "SCEVVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCEVVisitor"
  },
  {
    "label": "SCEVTraversal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVTraversal"
  },
  {
    "label": "SCEVParameterRewriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCEVParameterRewriter"
  },
  {
    "label": "SCEVApplyRewriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCEVApplyRewriter"
  },
  {
    "label": "SCEVConstant()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_SCALAREVOLUTIONEXPRESSIONS_H # define LLVM_ANALYSIS_SCALAREVOLUTIONEXPRESSIONS_H # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / iterator_range . h \" # include \" llvm / Analysis / ScalarEvolution . h \" # include \" llvm / Support / ErrorHandling . h \" namespace llvm { class ConstantInt ; class ConstantRange ; class DominatorTree ; enum SCEVTypes { scConstant,scTruncate,scZeroExtend,scSignExtend,scAddExpr,scMulExpr,scUDivExpr,scAddRecExpr,scUMaxExpr,scSMaxExpr,scUnknown,scCouldNotCompute } ; class SCEVConstant : public SCEV { class ScalarEvolution ; ConstantInt* V ;)",
    "insertText": "SCEVConstant(const FoldingSetNodeIDRef ID, ConstantInt *v) : SCEV(ID, scConstant), V(v)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} public : ConstantInt*)",
    "insertText": "getValue()"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const SCEV *S)"
  },
  {
    "label": "SCEVCastExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVCastExpr : public SCEV { protected : const SCEV* Op ; Type* Ty ;)",
    "insertText": "SCEVCastExpr(const FoldingSetNodeIDRef ID, unsigned SCEVTy, const SCEV *op, Type *ty)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (public : const SCEV*)",
    "insertText": "getOperand()"
  },
  {
    "label": "SCEVTruncateExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVTruncateExpr : public SCEVCastExpr { class ScalarEvolution ;)",
    "insertText": "SCEVTruncateExpr(const FoldingSetNodeIDRef ID, const SCEV *op, Type *ty)"
  },
  {
    "label": "SCEVZeroExtendExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVZeroExtendExpr : public SCEVCastExpr { class ScalarEvolution ;)",
    "insertText": "SCEVZeroExtendExpr(const FoldingSetNodeIDRef ID, const SCEV *op, Type *ty)"
  },
  {
    "label": "SCEVSignExtendExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVSignExtendExpr : public SCEVCastExpr { class ScalarEvolution ;)",
    "insertText": "SCEVSignExtendExpr(const FoldingSetNodeIDRef ID, const SCEV *op, Type *ty)"
  },
  {
    "label": "SCEVNAryExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVNAryExpr : public SCEV { protected : const SCEV* const* Operands ; size_t NumOperands ;)",
    "insertText": "SCEVNAryExpr(const FoldingSetNodeIDRef ID, enum SCEVTypes T, const SCEV *const *O, size_t N) : SCEV(ID, T), Operands(O), NumOperands(N)"
  },
  {
    "label": "getNumOperands()",
    "kind": "Method",
    "detail": "Function (} public : size_t)",
    "insertText": "getNumOperands()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < NumOperands && \"Operand index out of range!\")"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getType()"
  },
  {
    "label": "getNoWrapFlags()",
    "kind": "Method",
    "detail": "Function (} NoWrapFlags)",
    "insertText": "getNoWrapFlags(NoWrapFlags Mask = NoWrapMask)"
  },
  {
    "label": "SCEVCommutativeExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVCommutativeExpr : public SCEVNAryExpr { protected :)",
    "insertText": "SCEVCommutativeExpr(const FoldingSetNodeIDRef ID, enum SCEVTypes T, const SCEV *const *O, size_t N) : SCEVNAryExpr(ID, T, O, N)"
  },
  {
    "label": "setNoWrapFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNoWrapFlags(NoWrapFlags Flags)"
  },
  {
    "label": "SCEVAddExpr()",
    "kind": "Method",
    "detail": "Function (SubclassData | = Flags ; } } ; class SCEVAddExpr : public SCEVCommutativeExpr { class ScalarEvolution ;)",
    "insertText": "SCEVAddExpr(const FoldingSetNodeIDRef ID, const SCEV *const *O, size_t N) : SCEVCommutativeExpr(ID, scAddExpr, O, N)"
  },
  {
    "label": "SCEVMulExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVMulExpr : public SCEVCommutativeExpr { class ScalarEvolution ;)",
    "insertText": "SCEVMulExpr(const FoldingSetNodeIDRef ID, const SCEV *const *O, size_t N) : SCEVCommutativeExpr(ID, scMulExpr, O, N)"
  },
  {
    "label": "SCEVUDivExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVUDivExpr : public SCEV { class ScalarEvolution ; const SCEV* LHS ; const SCEV* RHS ;)",
    "insertText": "SCEVUDivExpr(const FoldingSetNodeIDRef ID, const SCEV *lhs, const SCEV *rhs) : SCEV(ID, scUDivExpr), LHS(lhs), RHS(rhs)"
  },
  {
    "label": "getLHS()",
    "kind": "Method",
    "detail": "Function (} public : const SCEV*)",
    "insertText": "getLHS()"
  },
  {
    "label": "SCEVAddRecExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVAddRecExpr : public SCEVNAryExpr { class ScalarEvolution ; const Loop* L ;)",
    "insertText": "SCEVAddRecExpr(const FoldingSetNodeIDRef ID, const SCEV *const *O, size_t N, const Loop *l) : SCEVNAryExpr(ID, scAddRecExpr, O, N), L(l)"
  },
  {
    "label": "getStart()",
    "kind": "Method",
    "detail": "Function (} public : const SCEV*)",
    "insertText": "getStart()"
  },
  {
    "label": "isAffine()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAffine()"
  },
  {
    "label": "isQuadratic()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isQuadratic()"
  },
  {
    "label": "evaluateAtIteration()",
    "kind": "Method",
    "detail": "Function (SubclassData | = Flags ; } const SCEV*)",
    "insertText": "evaluateAtIteration(const SCEV *It, ScalarEvolution &SE)"
  },
  {
    "label": "getNumIterationsInRange()",
    "kind": "Method",
    "detail": "Function (const SCEV*)",
    "insertText": "getNumIterationsInRange(ConstantRange Range, ScalarEvolution &SE)"
  },
  {
    "label": "getPostIncExpr()",
    "kind": "Method",
    "detail": "Function (const SCEVAddRecExpr*)",
    "insertText": "getPostIncExpr(ScalarEvolution &SE)"
  },
  {
    "label": "SCEVSMaxExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVSMaxExpr : public SCEVCommutativeExpr { class ScalarEvolution ;)",
    "insertText": "SCEVSMaxExpr(const FoldingSetNodeIDRef ID, const SCEV *const *O, size_t N) : SCEVCommutativeExpr(ID, scSMaxExpr, O, N)"
  },
  {
    "label": "setNoWrapFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNoWrapFlags((NoWrapFlags)(FlagNUW | FlagNSW))"
  },
  {
    "label": "SCEVUMaxExpr()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVUMaxExpr : public SCEVCommutativeExpr { class ScalarEvolution ;)",
    "insertText": "SCEVUMaxExpr(const FoldingSetNodeIDRef ID, const SCEV *const *O, size_t N) : SCEVCommutativeExpr(ID, scUMaxExpr, O, N)"
  },
  {
    "label": "deleted()",
    "kind": "Method",
    "detail": "Function (} } ; class SCEVUnknown : public SCEV,private CallbackVH { class ScalarEvolution ; void)",
    "insertText": "deleted()"
  },
  {
    "label": "allUsesReplacedWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allUsesReplacedWith(Value *New)"
  },
  {
    "label": "SCEVUnknown()",
    "kind": "Method",
    "detail": "Function (ScalarEvolution* SE ; SCEVUnknown* Next ;)",
    "insertText": "SCEVUnknown(const FoldingSetNodeIDRef ID, Value *V, ScalarEvolution *se, SCEVUnknown *next) : SCEV(ID, scUnknown), CallbackVH(V), SE(se), Next(next)"
  },
  {
    "label": "isSizeOf()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSizeOf(Type *&AllocTy)"
  },
  {
    "label": "isAlignOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isAlignOf(Type *&AllocTy)"
  },
  {
    "label": "isOffsetOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOffsetOf(Type *&STy, Constant *&FieldNo)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (} } ; template<SC,RetVal = void> struct SCEVVisitor { RetVal)",
    "insertText": "visit(const SCEV *S)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Unknown SCEV type!\")"
  },
  {
    "label": "visitCouldNotCompute()",
    "kind": "Method",
    "detail": "Function (} } RetVal)",
    "insertText": "visitCouldNotCompute(const SCEVCouldNotCompute *S)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "llvm_unreachable(\"Invalid use of SCEVCouldNotCompute!\")"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} } ; template<SV> class SCEVTraversal { SV& Visitor ; SmallVector<const SCEV*,8> Worklist ; SmallPtrSet<const SCEV*,8> Visited ; void)",
    "insertText": "push(const SCEV *S)"
  },
  {
    "label": "SCEVTraversal()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "SCEVTraversal(SV& V): Visitor(V)"
  },
  {
    "label": "visitAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "visitAll(const SCEV *Root)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(Root)"
  },
  {
    "label": "pop_back_val()",
    "kind": "Method",
    "detail": "Function (const SCEV* S = Worklist .)",
    "insertText": "pop_back_val()"
  },
  {
    "label": "SCEVNAryExpr()",
    "kind": "Method",
    "detail": "Function (break ; case scAddExpr : case scMulExpr : case scSMaxExpr : case scUMaxExpr : case scAddRecExpr : { const SCEVNAryExpr* NAry = cast<)",
    "insertText": "SCEVNAryExpr(S)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(*I)"
  },
  {
    "label": "SCEVUDivExpr()",
    "kind": "Method",
    "detail": "Function (} break ; } case scUDivExpr : { const SCEVUDivExpr* UDiv = cast<)",
    "insertText": "SCEVUDivExpr(S)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(UDiv->getLHS())"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(UDiv->getRHS())"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (break ; } case scCouldNotCompute :)",
    "insertText": "llvm_unreachable(\"Attempt to use a SCEVCouldNotCompute object!\")"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Unknown SCEV kind!\")"
  },
  {
    "label": "visitAll()",
    "kind": "Method",
    "detail": "Function (} } } } ; template<SV> void)",
    "insertText": "visitAll(const SCEV *Root, SV& Visitor)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (SCEVTraversal<SV>)",
    "insertText": "T(Visitor)"
  },
  {
    "label": "visitAll()",
    "kind": "Method",
    "detail": "Function (T .)",
    "insertText": "visitAll(Root)"
  },
  {
    "label": "rewrite()",
    "kind": "Method",
    "detail": "Function (} typedef DenseMap<const Value*,Value*> ValueToValueMap ; struct SCEVParameterRewriter : public SCEVVisitor<SCEVParameterRewriter,const SCEV*> { public : const SCEV*)",
    "insertText": "rewrite(const SCEV *Scev, ScalarEvolution &SE, ValueToValueMap &Map, bool InterpretConsts = false)"
  },
  {
    "label": "Rewriter()",
    "kind": "Method",
    "detail": "Function (SCEVParameterRewriter)",
    "insertText": "Rewriter(SE, Map, InterpretConsts)"
  },
  {
    "label": "SCEVParameterRewriter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SCEVParameterRewriter(ScalarEvolution &S, ValueToValueMap &M, bool C) : SE(S), Map(M), InterpretConsts(C)"
  },
  {
    "label": "visitConstant()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitConstant(const SCEVConstant *Constant)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (const SCEV* Operand =)",
    "insertText": "visit(Expr->getOperand())"
  },
  {
    "label": "visitZeroExtendExpr()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitZeroExtendExpr(const SCEVZeroExtendExpr *Expr)"
  },
  {
    "label": "visitSignExtendExpr()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitSignExtendExpr(const SCEVSignExtendExpr *Expr)"
  },
  {
    "label": "visitAddExpr()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitAddExpr(const SCEVAddExpr *Expr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SmallVector<const SCEV*,2> Operands ;)",
    "insertText": "for(int i = 0, e = Expr->getNumOperands(); i < e; ++i) Operands.push_back(visit(Expr->getOperand(i)))"
  },
  {
    "label": "visitMulExpr()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitMulExpr(const SCEVMulExpr *Expr)"
  },
  {
    "label": "visitUDivExpr()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitUDivExpr(const SCEVUDivExpr *Expr)"
  },
  {
    "label": "visitAddRecExpr()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitAddRecExpr(const SCEVAddRecExpr *Expr)"
  },
  {
    "label": "visitSMaxExpr()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitSMaxExpr(const SCEVSMaxExpr *Expr)"
  },
  {
    "label": "visitUMaxExpr()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitUMaxExpr(const SCEVUMaxExpr *Expr)"
  },
  {
    "label": "visitUnknown()",
    "kind": "Method",
    "detail": "Function (} const SCEV*)",
    "insertText": "visitUnknown(const SCEVUnknown *Expr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value* NV = Map [ V ] ;)",
    "insertText": "if(InterpretConsts && isa<ConstantInt>(NV)) return SE.getConstant(cast<ConstantInt>(NV))"
  },
  {
    "label": "visitCouldNotCompute()",
    "kind": "Method",
    "detail": "Function (} return Expr ; } const SCEV*)",
    "insertText": "visitCouldNotCompute(const SCEVCouldNotCompute *Expr)"
  },
  {
    "label": "Rewriter()",
    "kind": "Method",
    "detail": "Function (SCEVApplyRewriter)",
    "insertText": "Rewriter(SE, Map)"
  },
  {
    "label": "SCEVApplyRewriter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SCEVApplyRewriter(ScalarEvolution &S, LoopToScevMapT &M) : SE(S), Map(M)"
  },
  {
    "label": "getLoop()",
    "kind": "Method",
    "detail": "Function (const Loop* L = Expr ->)",
    "insertText": "getLoop()"
  },
  {
    "label": "getAddRecExpr()",
    "kind": "Method",
    "detail": "Function (const SCEV* Res = SE .)",
    "insertText": "getAddRecExpr(Operands, L, Expr->getNoWrapFlags())"
  },
  {
    "label": "Rec()",
    "kind": "Method",
    "detail": "Function (const SCEVAddRecExpr*)",
    "insertText": "Rec(const SCEVAddRecExpr *)"
  }
]