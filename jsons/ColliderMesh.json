[
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FColliderMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColliderMesh"
  },
  {
    "label": "FBuildOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildOptions"
  },
  {
    "label": "FColliderMeshProjectionTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColliderMeshProjectionTarget"
  },
  {
    "label": "FBuildOptions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" IndexTypes . h \" # include \" Math / Ray . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Misc / AssertionMacros . h \" # include \" Spatial / MeshAABBTree3 . h \" # include \" Spatial / SpatialInterfaces . h \" # include \" Templates / Function . h \" # include \" VectorUtil . h \" namespace UE { namespace Geometry { class FDynamicMesh3 ; class FColliderMesh { public : struct FBuildOptions {)",
    "insertText": "FBuildOptions()"
  },
  {
    "label": "FColliderMesh()",
    "kind": "Method",
    "detail": "Function (bBuildAABBTree = true ; bBuildVertexMap = false ; bBuildTriangleMap = false ; } bool bBuildAABBTree ; bool bBuildVertexMap ; bool bBuildTriangleMap ; } ; public :)",
    "insertText": "FColliderMesh()"
  },
  {
    "label": "FColliderMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FColliderMesh(const FDynamicMesh3& SourceMesh, const FBuildOptions& BuildOptions = FBuildOptions())"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FDynamicMesh3& SourceMesh, const FBuildOptions& BuildOptions = FBuildOptions())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(EAllowShrinking AllowShrinking)"
  },
  {
    "label": "UE_ALLOWSHRINKING_BOOL_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_ALLOWSHRINKING_BOOL_DEPRECATED(\"Reset\") FORCEINLINE void Reset(bool bReleaseMemory)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(bReleaseMemory ? EAllowShrinking::Yes : EAllowShrinking::No)"
  },
  {
    "label": "IsTriangle()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTriangle(int32 TriangleID)"
  },
  {
    "label": "IsVertex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertex(int32 VertexID)"
  },
  {
    "label": "MaxTriangleID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxTriangleID()"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "TriangleCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TriangleCount()"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VertexCount()"
  },
  {
    "label": "GetChangeStamp()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetChangeStamp()"
  },
  {
    "label": "GetTriNormal()",
    "kind": "Method",
    "detail": "Function (FIndex3i Tri = Triangles [ TriangleID ] ; V0 = Vertices [ Tri . A ] ; V1 = Vertices [ Tri . B ] ; V2 = Vertices [ Tri . C ] ; } FVector3d)",
    "insertText": "GetTriNormal(int32 TriangleID)"
  },
  {
    "label": "Normal()",
    "kind": "Method",
    "detail": "Function (FIndex3i Tri = Triangles [ TriangleID ] ; return)",
    "insertText": "Normal(Vertices[Tri.A], Vertices[Tri.B], Vertices[Tri.C])"
  },
  {
    "label": "SourceWasCompactV()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SourceWasCompactV()"
  },
  {
    "label": "GetSourceVertexID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSourceVertexID(int32 VertexID)"
  },
  {
    "label": "SourceWasCompactT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SourceWasCompactT()"
  },
  {
    "label": "GetSourceTriangleID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSourceTriangleID(int32 TriangleID)"
  },
  {
    "label": "FindNearestHitTriangle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindNearestHitTriangle(const FRay3d& Ray, double& RayParameterOut, int& HitTriangleIDOut, FVector3d& BaryCoordsOut)"
  },
  {
    "label": "FindNearestTriangle()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindNearestTriangle(const FVector3d& Point, double& NearestDistSqrOut, const IMeshSpatial::FQueryOptions& Options = IMeshSpatial::FQueryOptions())"
  },
  {
    "label": "GetRawAABBTreeUnsafe()",
    "kind": "Method",
    "detail": "Function (TMeshAABBTree3<FColliderMesh>*)",
    "insertText": "GetRawAABBTreeUnsafe()"
  },
  {
    "label": "FColliderMeshProjectionTarget()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FVector3d> Vertices ; TArray<FIndex3i> Triangles ; TArray<int32> SourceVertexIDs ; bool bSourceWasCompactV ; TArray<int32> SourceTriangleIDs ; bool bSourceWasCompactT ; TMeshAABBTree3<FColliderMesh> AABBTree ; } ; class FColliderMeshProjectionTarget : public IOrientedProjectionTarget { public : FColliderMesh* ColliderMesh = nullptr ;)",
    "insertText": "FColliderMeshProjectionTarget()"
  },
  {
    "label": "FColliderMeshProjectionTarget()",
    "kind": "Method",
    "detail": "Function (ColliderMesh = nullptr ; })",
    "insertText": "FColliderMeshProjectionTarget(FColliderMesh* ColliderMeshIn)"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "Project(const FVector3d& Point, int Identifier = -1)"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "Project(const FVector3d& Point, FVector3d& ProjectNormalOut, int Identifier = -1)"
  }
]