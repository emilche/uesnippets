[
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTextureCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCollection"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FMaterialParameterMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialParameterMetadata"
  },
  {
    "label": "FMaterialShadingModelField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShadingModelField"
  },
  {
    "label": "FSubstrateMaterialInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateMaterialInfo"
  },
  {
    "label": "FSubstrateOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateOperator"
  },
  {
    "label": "UMaterialExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpression"
  },
  {
    "label": "UMaterialExpressionComment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionComment"
  },
  {
    "label": "UMaterialExpressionExecBegin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionExecBegin"
  },
  {
    "label": "UMaterialExpressionExecEnd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialExpressionExecEnd"
  },
  {
    "label": "FMaterialExpressionKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialExpressionKey"
  },
  {
    "label": "FMaterialHLSLGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialHLSLGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScope"
  },
  {
    "label": "FStatement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatement"
  },
  {
    "label": "FExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExpression"
  },
  {
    "label": "FEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmitter"
  },
  {
    "label": "FExpressionInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionInput"
  },
  {
    "label": "FMaterialAttributesInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialAttributesInput"
  },
  {
    "label": "FExpressionOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionOutput"
  },
  {
    "label": "FExpressionExecOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionExecOutput"
  },
  {
    "label": "FMaterialCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialCompiler"
  },
  {
    "label": "FExpressionExecOutputEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionExecOutputEntry"
  },
  {
    "label": "FMaterialExpressionCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialExpressionCollection"
  },
  {
    "label": "UMaterialFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialFunction"
  },
  {
    "label": "FContainsInputLoopInternalExpressionStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FContainsInputLoopInternalExpressionStack"
  },
  {
    "label": "FExpressionInputIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionInputIterator"
  },
  {
    "label": "FExpressionOutputIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExpressionOutputIterator"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / UnrealType . h \" # include \" Misc / Guid . h \" # include \" MaterialExpressionIO . h \" # include \" MaterialExpression . generated . h \" class UEdGraphNode ; class UMaterial ; class UTexture ; class UTextureCollection ; struct FPropertyChangedEvent ; struct FMaterialParameterMetadata ; struct FMaterialShadingModelField ; struct FSubstrateMaterialInfo ; struct FSubstrateOperator ; class UMaterialExpression ; class UMaterialExpressionComment ; class UMaterialExpressionExecBegin ; class UMaterialExpressionExecEnd ; class FMaterialExpressionKey ; class FMaterialHLSLGenerator ; enum class EMaterialNewScopeFlag : uint8 ; enum class EMaterialParameterType : uint8 ; namespace UE { namespace HLSLTree { class FScope ; class FStatement ; class FExpression ; } namespace MIR { class FEmitter ; } } # if ! CPP)",
    "insertText": "USTRUCT(noexport)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: #if WITH_EDITOR ENGINE_API int32 Compile(class FMaterialCompiler* Compiler)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect(class UMaterialExpression* InExpression)"
  },
  {
    "label": "GetExpression()",
    "kind": "Method",
    "detail": "Function (class UMaterialExpression*)",
    "insertText": "GetExpression()"
  },
  {
    "label": "NewOwnedScopeWithStatements()",
    "kind": "Method",
    "detail": "Function (UE::HLSLTree::FScope*)",
    "insertText": "NewOwnedScopeWithStatements(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FStatement& Owner)"
  },
  {
    "label": "NewScopeWithStatements()",
    "kind": "Method",
    "detail": "Function (UE::HLSLTree::FScope*)",
    "insertText": "NewScopeWithStatements(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, EMaterialNewScopeFlag Flags)"
  },
  {
    "label": "SendPostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (} ; struct FExpressionExecOutputEntry { FName Name ; FExpressionExecOutput* Output = nullptr ; } ; enum class EMaterialExpressionSetParameterValueFlags : uint32 { None = 0 u,)",
    "insertText": "SendPostEditChangeProperty(1u << 0), NoUpdateExpressionGuid = (1u << 1), AssignGroupAndSortPriority = (1u << 2)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EMaterialExpressionSetParameterValueFlags)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() ENGINE_API void AddExpression(UMaterialExpression* InExpression)"
  },
  {
    "label": "RemoveExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExpression(UMaterialExpression* InExpression)"
  },
  {
    "label": "AddComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddComment(UMaterialExpressionComment* InExpression)"
  },
  {
    "label": "RemoveComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveComment(UMaterialExpressionComment* InExpression)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(abstract, Optional, BlueprintType, hidecategories=Object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "InitializeNumExecutionInputs()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "InitializeNumExecutionInputs(TArrayView<UMaterialExpression*> Expressions)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditImport()"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty=true)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "GetAssetOwner()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetAssetOwner()"
  },
  {
    "label": "GetAssetPathName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAssetPathName()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int32)",
    "insertText": "Compile(class FMaterialCompiler* Compiler, int32 OutputIndex)"
  },
  {
    "label": "GenerateHLSLStatements()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GenerateHLSLStatements(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope)"
  },
  {
    "label": "GenerateHLSLExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateHLSLExpression(FMaterialHLSLGenerator& Generator, UE::HLSLTree::FScope& Scope, int32 OutputIndex, UE::HLSLTree::FExpression const*& OutExpression)"
  },
  {
    "label": "IsUsingNewHLSLGenerator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingNewHLSLGenerator()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(UE::MIR::FEmitter& Emitter)"
  },
  {
    "label": "GetTexturesForceMaterialRecompile()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetTexturesForceMaterialRecompile(TArray<UTexture *> &Textures)"
  },
  {
    "label": "GetReferencedTexture()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetReferencedTexture()"
  },
  {
    "label": "CanReferenceTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanReferenceTexture()"
  },
  {
    "label": "GetOutput()",
    "kind": "Method",
    "detail": "Function (FExpressionOutput*)",
    "insertText": "GetOutput(int32 OutputIndex)"
  },
  {
    "label": "GetInput()",
    "kind": "Method",
    "detail": "Function (} FExpressionInput*)",
    "insertText": "GetInput(int32 InputIndex)"
  },
  {
    "label": "GetInputName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetInputName(int32 InputIndex)"
  },
  {
    "label": "IsInputConnectionRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInputConnectionRequired(int32 InputIndex)"
  },
  {
    "label": "GetInputType()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetInputType(int32 InputIndex)"
  },
  {
    "label": "GetOutputs()",
    "kind": "Method",
    "detail": "Function (TArray<FExpressionOutput>&)",
    "insertText": "GetOutputs()"
  },
  {
    "label": "GetOutputType()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOutputType(int32 OutputIndex)"
  },
  {
    "label": "CanUserDeleteExpression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUserDeleteExpression()"
  },
  {
    "label": "GetInputPinSubCategory()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetInputPinSubCategory(int32 PinIndex)"
  },
  {
    "label": "GetInputPinSubCategoryObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetInputPinSubCategoryObject(int32 PinIndex)"
  },
  {
    "label": "PinDefaultValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PinDefaultValueChanged(int32 PinIndex, const FString& DefaultValue)"
  },
  {
    "label": "ForcePropertyValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForcePropertyValueChanged(FProperty* Property, bool bUpdatePreview = true)"
  },
  {
    "label": "RefreshNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNode(bool bUpdatePreview = true)"
  },
  {
    "label": "GetInputPinDefaultValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetInputPinDefaultValue(int32 PinIndex)"
  },
  {
    "label": "GetPropertyInputs()",
    "kind": "Method",
    "detail": "Function (TArray<FProperty*>)",
    "insertText": "GetPropertyInputs()"
  },
  {
    "label": "GetExecOutputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExecOutputs(TArray<FExpressionExecOutputEntry>& Outputs)"
  },
  {
    "label": "HasExecInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExecInput()"
  },
  {
    "label": "GetCreationDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCreationDescription()"
  },
  {
    "label": "GetCreationName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCreationName()"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHeight()"
  },
  {
    "label": "UsesLeftGutter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesLeftGutter()"
  },
  {
    "label": "UsesRightGutter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesRightGutter()"
  },
  {
    "label": "GetCaption()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCaption(TArray<FString>& OutCaptions)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetConnectorToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConnectorToolTip(int32 InputIndex, int32 OutputIndex, TArray<FString>& OutToolTip)"
  },
  {
    "label": "GetExpressionToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExpressionToolTip(TArray<FString>& OutToolTip)"
  },
  {
    "label": "GetLabelPadding()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetLabelPadding()"
  },
  {
    "label": "NeedsRealtimePreview()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "NeedsRealtimePreview()"
  },
  {
    "label": "MatchesSearchQuery()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MatchesSearchQuery(const TCHAR* SearchQuery)"
  },
  {
    "label": "CopyMaterialExpressions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyMaterialExpressions(const TArray<class UMaterialExpression*>& SrcExpressions, const TArray<class UMaterialExpressionComment*>& SrcExpressionComments, class UMaterial* Material, class UMaterialFunction* Function, TArray<class UMaterialExpression*>& OutNewExpressions, TArray<class UMaterialExpression*>& OutNewComments)"
  },
  {
    "label": "IsResultMaterialAttributes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResultMaterialAttributes(int32 OutputIndex)"
  },
  {
    "label": "SubstrateGenerateMaterialTopologyTree()",
    "kind": "Method",
    "detail": "Function (} FSubstrateOperator*)",
    "insertText": "SubstrateGenerateMaterialTopologyTree(class FMaterialCompiler* Compiler, class UMaterialExpression* Parent, int32 OutputIndex)"
  },
  {
    "label": "CanIgnoreOutputIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanIgnoreOutputIndex()"
  },
  {
    "label": "IsExpressionConnected()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "IsExpressionConnected(FExpressionInput* Input, int32 OutputIndex)"
  },
  {
    "label": "ConnectExpression()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectExpression(FExpressionInput* Input, int32 OutputIndex)"
  },
  {
    "label": "UpdateParameterGuid()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateParameterGuid(bool bForceGeneration, bool bAllowMarkingPackageDirty)"
  },
  {
    "label": "GetParameterExpressionId()",
    "kind": "Method",
    "detail": "Function (FGuid&)",
    "insertText": "GetParameterExpressionId()"
  },
  {
    "label": "UpdateMaterialExpressionGuid()",
    "kind": "Method",
    "detail": "Function (FGuid Dummy ; return Dummy ; } void)",
    "insertText": "UpdateMaterialExpressionGuid(bool bForceGeneration, bool bAllowMarkingPackageDirty)"
  },
  {
    "label": "GetMaterialExpressionId()",
    "kind": "Method",
    "detail": "Function (FGuid&)",
    "insertText": "GetMaterialExpressionId()"
  },
  {
    "label": "ValidateState()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA return MaterialExpressionGuid ; # else FGuid Dummy ; return Dummy ; # endif } void)",
    "insertText": "ValidateState()"
  },
  {
    "label": "GetKeywords()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FText)",
    "insertText": "GetKeywords()"
  },
  {
    "label": "GetAllInputExpressions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAllInputExpressions(TArray<UMaterialExpression*>& InputExpressions)"
  },
  {
    "label": "CanRenameNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameNode()"
  },
  {
    "label": "GetEditableName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetEditableName()"
  },
  {
    "label": "SetEditableName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditableName(const FString& NewName)"
  },
  {
    "label": "HasAParameterName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAParameterName()"
  },
  {
    "label": "HasClassAndNameCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasClassAndNameCollision(UMaterialExpression* OtherExpression)"
  },
  {
    "label": "GetParameterType()",
    "kind": "Method",
    "detail": "Function (EMaterialParameterType)",
    "insertText": "GetParameterType()"
  },
  {
    "label": "GetParameterName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetParameterName()"
  },
  {
    "label": "GetParameterValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetParameterValue(FMaterialParameterMetadata& OutMeta)"
  },
  {
    "label": "GetIncludeFilePaths()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetIncludeFilePaths(TSet<FString>& OutIncludeFilePaths)"
  },
  {
    "label": "PostCopyNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostCopyNode(const TArray<UMaterialExpression*>& CopiedExpressions)"
  },
  {
    "label": "HasConnectedOutputs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasConnectedOutputs()"
  },
  {
    "label": "ContainsInputLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsInputLoop(const bool bStopOnFunctionCall = true)"
  },
  {
    "label": "ContainsInputLoop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsInputLoop(TSet<UMaterialExpression*>& VisitedExpressions, const bool bStopOnFunctionCall = true)"
  },
  {
    "label": "ContainsInputLoopInternal()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FExpressionInput*> CachedInputs ; private : struct FContainsInputLoopInternalExpressionStack ; bool)",
    "insertText": "ContainsInputLoopInternal(const FContainsInputLoopInternalExpressionStack& ExpressionStack, TSet<UMaterialExpression*>& VisitedExpressions, const bool bStopOnFunctionCall)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Absolute)",
    "insertText": "UMETA(DisplayName=\"Absolute World Position\"), CameraRelative UMETA(DisplayName=\"Camera Relative World Position\")"
  },
  {
    "label": "FExpressionInputIterator()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR struct FExpressionInputIterator { UMaterialExpression* Expression ; FExpressionInput* Input ; int Index ;)",
    "insertText": "FExpressionInputIterator(UMaterialExpression* InExpression)"
  },
  {
    "label": "GetInput()",
    "kind": "Method",
    "detail": "Function (InExpression },Input { InExpression ->)",
    "insertText": "GetInput(0)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (0 } { } operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetInput()",
    "kind": "Method",
    "detail": "Function (Index + = 1 ; Input = Expression ->)",
    "insertText": "GetInput(Index)"
  },
  {
    "label": "GetOutput()",
    "kind": "Method",
    "detail": "Function (InExpression },Output { InExpression ->)",
    "insertText": "GetOutput(0)"
  },
  {
    "label": "GetOutput()",
    "kind": "Method",
    "detail": "Function (Index + = 1 ; Output = Expression ->)",
    "insertText": "GetOutput(Index)"
  }
]