[
  {
    "label": "_gilstate_runtime_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_gilstate_runtime_state"
  },
  {
    "label": "_Py_IsMainThread()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_PYSTATE_H # define Py_INTERNAL_PYSTATE_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif # include \" pycore_runtime . h \" int)",
    "insertText": "_Py_IsMainThread(void)"
  },
  {
    "label": "PyThread_get_thread_ident()",
    "kind": "Method",
    "detail": "Function (unsigned long thread =)",
    "insertText": "PyThread_get_thread_ident()"
  },
  {
    "label": "_PyInterpreterState_Main()",
    "kind": "Method",
    "detail": "Function (} PyInterpreterState*)",
    "insertText": "_PyInterpreterState_Main(void)"
  },
  {
    "label": "_Py_GetMainConfig()",
    "kind": "Method",
    "detail": "Function (} const PyConfig*)",
    "insertText": "_Py_GetMainConfig(void)"
  },
  {
    "label": "_PyInterpreterState_Main()",
    "kind": "Method",
    "detail": "Function (PyInterpreterState* interp =)",
    "insertText": "_PyInterpreterState_Main()"
  },
  {
    "label": "_Py_ThreadCanHandleSignals()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "_Py_ThreadCanHandleSignals(PyInterpreterState *interp)"
  },
  {
    "label": "_Py_ThreadCanHandlePendingCalls()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "_Py_ThreadCanHandlePendingCalls(void)"
  },
  {
    "label": "_PyThreadState_CheckConsistency()",
    "kind": "Method",
    "detail": "Function (} # ifndef NDEBUG int)",
    "insertText": "_PyThreadState_CheckConsistency(PyThreadState *tstate)"
  },
  {
    "label": "_PyThreadState_MustExit()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "_PyThreadState_MustExit(PyThreadState *tstate)"
  },
  {
    "label": "_PyRuntimeState_GetThreadState()",
    "kind": "Method",
    "detail": "Function (PyThreadState*)",
    "insertText": "_PyRuntimeState_GetThreadState(_PyRuntimeState *runtime)"
  },
  {
    "label": "_PyThreadState_GET()",
    "kind": "Method",
    "detail": "Function (} PyThreadState*)",
    "insertText": "_PyThreadState_GET(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PyAPI_FUNC(void) _Py_NO_RETURN _Py_FatalError_TstateNULL(const char *func)"
  },
  {
    "label": "_Py_EnsureFuncTstateNotNULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_EnsureFuncTstateNotNULL(const char *func, PyThreadState *tstate)"
  },
  {
    "label": "_Py_FatalError_TstateNULL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_Py_FatalError_TstateNULL(func)"
  },
  {
    "label": "_Py_EnsureTstateNotNULL()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "_Py_EnsureTstateNotNULL(tstate) \\ _Py_EnsureFuncTstateNotNULL(__func__, tstate) static inline PyInterpreterState* _PyInterpreterState_GET(void)"
  },
  {
    "label": "_PyThreadState_GET()",
    "kind": "Method",
    "detail": "Function (PyThreadState* tstate =)",
    "insertText": "_PyThreadState_GET()"
  },
  {
    "label": "_Py_EnsureTstateNotNULL()",
    "kind": "Method",
    "detail": "Function (# ifdef Py_DEBUG)",
    "insertText": "_Py_EnsureTstateNotNULL(tstate)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# endif return tstate -> interp ; })",
    "insertText": "PyAPI_FUNC(void) _PyThreadState_SetCurrent(PyThreadState *tstate)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _PyThreadState_Init( PyThreadState *tstate)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) _PyThreadState_DeleteExcept( _PyRuntimeState *runtime, PyThreadState *tstate)"
  },
  {
    "label": "_PyThreadState_UpdateTracingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyThreadState_UpdateTracingState(PyThreadState *tstate)"
  },
  {
    "label": "use_tracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "use_tracing(tstate->tracing == 0) && (tstate->c_tracefunc != NULL || tstate->c_profilefunc != NULL)"
  },
  {
    "label": "use_tracing()",
    "kind": "Method",
    "detail": "Function (tstate -> cframe ->)",
    "insertText": "use_tracing(use_tracing ? 255 : 0)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PyAPI_FUNC(PyThreadState *) _PyThreadState_Swap( struct _gilstate_runtime_state *gilstate, PyThreadState *newts)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(PyStatus) _PyInterpreterState_Enable(_PyRuntimeState *runtime)"
  },
  {
    "label": "_PyInterpreterState_DeleteExceptMain()",
    "kind": "Method",
    "detail": "Function (# ifdef HAVE_FORK PyStatus)",
    "insertText": "_PyInterpreterState_DeleteExceptMain(_PyRuntimeState *runtime)"
  },
  {
    "label": "_PyGILState_Reinit()",
    "kind": "Method",
    "detail": "Function (PyStatus)",
    "insertText": "_PyGILState_Reinit(_PyRuntimeState *runtime)"
  },
  {
    "label": "_PySignal_AfterFork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PySignal_AfterFork(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "PyAPI_FUNC(int) _PyState_AddModule( PyThreadState *tstate, PyObject* module, PyModuleDef* def)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyOS_InterruptOccurred(PyThreadState *tstate)"
  }
]