[
  {
    "label": "FCookOnTheFlyNetworkServerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyNetworkServerBase"
  },
  {
    "label": "FCookOnTheFlyClientConnectionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyClientConnectionBase"
  },
  {
    "label": "FCookOnTheFlyClientConnectionBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CookOnTheFlyNetServer . h \" # include \" HAL / Runnable . h \" class FCookOnTheFlyNetworkServerBase ; class FCookOnTheFlyClientConnectionBase : public UE::Cook::ICookOnTheFlyClientConnection,private FRunnable { public :)",
    "insertText": "FCookOnTheFlyClientConnectionBase(FCookOnTheFlyNetworkServerBase& InOwner)"
  },
  {
    "label": "FCookOnTheFlyClientConnectionBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCookOnTheFlyClientConnectionBase()"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPlatformName()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ZenProjectId = InProjectId ;)",
    "insertText": "check(InOplogId == PlatformName)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (ZenHostName = InHostName ; ZenHostPort = InHostPort ; } bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMessage(const UE::Cook::FCookOnTheFlyMessage& Message)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "OnInit()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "OnInit()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Init()"
  },
  {
    "label": "OnExit()",
    "kind": "Method",
    "detail": "Function (bStopRequested = true ; } void)",
    "insertText": "OnExit()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Exit()"
  },
  {
    "label": "ProcessPayload()",
    "kind": "Method",
    "detail": "Function (bRunning = false ; } bool)",
    "insertText": "ProcessPayload(FArchive& Payload)"
  },
  {
    "label": "ReceivePayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceivePayload(FArrayReader& Payload)"
  },
  {
    "label": "SendPayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPayload(const TArray<uint8>& Out)"
  },
  {
    "label": "FCookOnTheFlyNetworkServerBase()",
    "kind": "Method",
    "detail": "Function (FCookOnTheFlyNetworkServerBase& Owner ; FName PlatformName ; ITargetPlatform* TargetPlatform = nullptr ; bool bIsSingleThreaded = false ; TAtomic<bool> bStopRequested { false } ; TAtomic<bool> bRunning { true } ; FRunnableThread* WorkerThread = nullptr ; bool bClientConnectedBroadcasted = false ; FString ZenProjectId ; FString ZenHostName ; uint16 ZenHostPort = 0 ; } ; class FCookOnTheFlyNetworkServerBase : public UE::Cook::ICookOnTheFlyNetworkServer { class FCookOnTheFlyClientConnectionBase ; public :)",
    "insertText": "FCookOnTheFlyNetworkServerBase(const TArray<ITargetPlatform*>& InActiveTargetPlatforms)"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessRequest(FCookOnTheFlyClientConnectionBase& Connection, const UE::Cook::FCookOnTheFlyRequest& Request)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FCookOnTheFlyNetworkServerBase, UE::Cook::ICookOnTheFlyNetworkServer::FClientConnectionEvent, FClientConnectionEvent)"
  },
  {
    "label": "OnClientConnected()",
    "kind": "Method",
    "detail": "Function (FClientConnectionEvent&)",
    "insertText": "OnClientConnected()"
  }
]