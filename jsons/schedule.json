[
  {
    "label": "CAMSchedule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAMSchedule"
  },
  {
    "label": "CAdvisePacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAdvisePacket"
  },
  {
    "label": "CAMSchedule()",
    "kind": "Method",
    "detail": "Function (# ifndef __CAMSchedule__ # define __CAMSchedule__ class CAMSchedule : private CBaseObject { public : ~)",
    "insertText": "CAMSchedule()"
  },
  {
    "label": "CAMSchedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CAMSchedule(HANDLE ev)"
  },
  {
    "label": "GetAdviseCount()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "GetAdviseCount()"
  },
  {
    "label": "GetNextAdviseTime()",
    "kind": "Method",
    "detail": "Function (REFERENCE_TIME)",
    "insertText": "GetNextAdviseTime()"
  },
  {
    "label": "AddAdvisePacket()",
    "kind": "Method",
    "detail": "Function (DWORD_PTR)",
    "insertText": "AddAdvisePacket(const REFERENCE_TIME & time1, const REFERENCE_TIME & time2, HANDLE h, BOOL periodic)"
  },
  {
    "label": "Unadvise()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Unadvise(DWORD_PTR dwAdviseCookie)"
  },
  {
    "label": "Advise()",
    "kind": "Method",
    "detail": "Function (REFERENCE_TIME)",
    "insertText": "Advise(const REFERENCE_TIME & rtTime)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (HANDLE)",
    "insertText": "GetEvent()"
  },
  {
    "label": "CAdvisePacket()",
    "kind": "Method",
    "detail": "Function (} CAdvisePacket* m_next ; DWORD_PTR m_dwAdviseCookie ; REFERENCE_TIME m_rtEventTime ; REFERENCE_TIME m_rtPeriod ; HANDLE m_hNotify ; BOOL m_bPeriodic ;)",
    "insertText": "CAdvisePacket(__inout_opt CAdvisePacket * next, LONGLONG time ) : m_next(next), m_rtEventTime(time)"
  },
  {
    "label": "InsertAfter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertAfter(__inout CAdvisePacket * p)"
  },
  {
    "label": "IsZ()",
    "kind": "Method",
    "detail": "Function (p -> m_next = m_next ; m_next = p ; } int)",
    "insertText": "IsZ()"
  },
  {
    "label": "DeleteNext()",
    "kind": "Method",
    "detail": "Function (CAdvisePacket* const next = m_next ; CAdvisePacket* const new_next = next -> m_next ; m_next = new_next ; return next ; } void)",
    "insertText": "DeleteNext()"
  },
  {
    "label": "RemoveNext()",
    "kind": "Method",
    "detail": "Function (delete)",
    "insertText": "RemoveNext()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} CAdvisePacket*)",
    "insertText": "Next()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CAdvisePacket* result = m_next ;)",
    "insertText": "if(result->IsZ())"
  },
  {
    "label": "ShuntHead()",
    "kind": "Method",
    "detail": "Function (const HANDLE m_ev ; void)",
    "insertText": "ShuntHead()"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (CAdvisePacket* m_pAdviseCache ; DWORD m_dwCacheCount ; enum { dwCacheMax = 5 } ; void)",
    "insertText": "Delete(__inout CAdvisePacket * pLink)"
  },
  {
    "label": "DumpLinkedList()",
    "kind": "Method",
    "detail": "Function (public : # ifdef DEBUG void)",
    "insertText": "DumpLinkedList()"
  }
]