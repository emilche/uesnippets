[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "FActorReplicationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorReplicationParams"
  },
  {
    "label": "UEngineReplicationBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEngineReplicationBridge"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FRepChangedPropertyTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRepChangedPropertyTracker"
  },
  {
    "label": "UReplicationSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationSystem"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FReplicationSystemUtil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationSystemUtil"
  },
  {
    "label": "GetReplicationSystem()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_WITH_IRIS # include \" Iris / ReplicationSystem / Conditionals / ReplicationCondition . h \" # include \" Net / Core / NetHandle / NetHandle . h \" # include \" Engine / EngineTypes . h \" class AActor ; class UActorComponent ; struct FActorReplicationParams ; class UEngineReplicationBridge ; class UObject ; class FRepChangedPropertyTracker ; class UReplicationSystem ; class UWorld ; class UNetConnection ; class UNetDriver ; namespace UE::Net { enum class EDependentObjectSchedulingHint : uint8 ; } namespace UE::Net { struct FReplicationSystemUtil { UReplicationSystem*)",
    "insertText": "GetReplicationSystem(const AActor* Actor)"
  },
  {
    "label": "GetReplicationSystem()",
    "kind": "Method",
    "detail": "Function (UReplicationSystem*)",
    "insertText": "GetReplicationSystem(const UNetDriver* NetDriver)"
  },
  {
    "label": "GetActorReplicationBridge()",
    "kind": "Method",
    "detail": "Function (UEngineReplicationBridge*)",
    "insertText": "GetActorReplicationBridge(const AActor* Actor)"
  },
  {
    "label": "GetActorReplicationBridge()",
    "kind": "Method",
    "detail": "Function (UEngineReplicationBridge*)",
    "insertText": "GetActorReplicationBridge(const UNetConnection* NetConnection)"
  },
  {
    "label": "GetNetHandle()",
    "kind": "Method",
    "detail": "Function (FNetHandle)",
    "insertText": "GetNetHandle(const AActor* Actor)"
  },
  {
    "label": "GetNetHandle()",
    "kind": "Method",
    "detail": "Function (FNetHandle)",
    "insertText": "GetNetHandle(const UActorComponent* SubObject)"
  },
  {
    "label": "GetNetHandle()",
    "kind": "Method",
    "detail": "Function (FNetHandle)",
    "insertText": "GetNetHandle(const UObject* Object)"
  },
  {
    "label": "BeginReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplication(AActor* Actor, const FActorReplicationParams& Params)"
  },
  {
    "label": "BeginReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplication(AActor* Actor)"
  },
  {
    "label": "EndReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReplication(AActor* Actor, EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "BeginReplicationForActorComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplicationForActorComponent(FNetHandle ActorHandle, UActorComponent* ActorComponent)"
  },
  {
    "label": "BeginReplicationForActorComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplicationForActorComponent(const AActor* Actor, UActorComponent* ActorComponent)"
  },
  {
    "label": "EndReplicationForActorComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReplicationForActorComponent(UActorComponent* SubObject)"
  },
  {
    "label": "BeginReplicationForActorSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplicationForActorSubObject(const AActor* Actor, UObject* SubObject, ELifetimeCondition NetCondition)"
  },
  {
    "label": "EndReplicationForActorSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReplicationForActorSubObject(const AActor* Actor, UObject* SubObject)"
  },
  {
    "label": "BeginReplicationForActorComponentSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplicationForActorComponentSubObject(UActorComponent* ActorComponent, UObject* SubObject, ELifetimeCondition Condition)"
  },
  {
    "label": "EndReplicationForActorComponentSubObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReplicationForActorComponentSubObject(UActorComponent* ActorComponent, UObject* SubObject)"
  },
  {
    "label": "SetActorComponentNetCondition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActorComponentNetCondition(const UActorComponent* SubObject, ELifetimeCondition Condition)"
  },
  {
    "label": "UpdateSubObjectGroupMemberships()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubObjectGroupMemberships(const UObject* SubObject, const UWorld* World)"
  },
  {
    "label": "UpdateSubObjectGroupMemberships()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubObjectGroupMemberships(const APlayerController* PC)"
  },
  {
    "label": "RemoveSubObjectGroupMembership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSubObjectGroupMembership(const APlayerController* PC, const FName NetGroup)"
  },
  {
    "label": "AddDependentActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependentActor(const AActor* Parent, AActor* Child, EDependentObjectSchedulingHint SchedulingHint)"
  },
  {
    "label": "AddDependentActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDependentActor(const AActor* Parent, AActor* Child)"
  },
  {
    "label": "RemoveDependentActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDependentActor(const AActor* Parent, AActor* Child)"
  },
  {
    "label": "BeginReplicationForActorsInWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReplicationForActorsInWorld(UWorld* World)"
  },
  {
    "label": "NotifyActorDormancyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDormancyChange(UReplicationSystem* ReplicationSystem, AActor* Actor, ENetDormancy OldDormancyState)"
  },
  {
    "label": "FlushNetDormancy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushNetDormancy(UReplicationSystem* ReplicationSystem, AActor* Actor, bool bWasDormInitial)"
  },
  {
    "label": "SetReplicationCondition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicationCondition(FNetHandle NetHandle, EReplicationCondition Condition, bool bEnableCondition)"
  },
  {
    "label": "SetStaticPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStaticPriority(const AActor* Actor, float Priority)"
  },
  {
    "label": "SetCullDistanceSqrOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCullDistanceSqrOverride(const AActor* Actor, float CullDistSqr)"
  },
  {
    "label": "ClearCullDistanceSqrOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCullDistanceSqrOverride(const AActor* Actor)"
  },
  {
    "label": "SetPollFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPollFrequency(const UObject* Object, float PollFrequency)"
  }
]