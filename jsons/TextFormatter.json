[
  {
    "label": "FPrivateTextFormatArguments",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrivateTextFormatArguments"
  },
  {
    "label": "FTextFormatPatternDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatPatternDefinition"
  },
  {
    "label": "FTextFormatter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFormatter"
  },
  {
    "label": "FTextFormatPatternDefinition()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / SortedMap . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" Internationalization / ITextFormatArgumentModifier . h \" # include \" Internationalization / Text . h \" # include \" Misc / ExpressionParserTypes . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" struct FPrivateTextFormatArguments ; class FTextFormatPatternDefinition : public TSharedFromThis<FTextFormatPatternDefinition,ESPMode::ThreadSafe> { public :)",
    "insertText": "FTextFormatPatternDefinition()"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (FTextFormatPatternDefinitionConstRef)",
    "insertText": "GetDefault()"
  },
  {
    "label": "GetTextFormatDefinitions()",
    "kind": "Method",
    "detail": "Function (const FTokenDefinitions&)",
    "insertText": "GetTextFormatDefinitions()"
  },
  {
    "label": "SetEscapeChar()",
    "kind": "Method",
    "detail": "Function (FTextFormatPatternDefinition&)",
    "insertText": "SetEscapeChar(const TCHAR InChar)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (EscapeChar = InChar ; return* this ; } TCHAR ArgStartChar =)",
    "insertText": "TEXT('{')"
  },
  {
    "label": "SetArgStartChar()",
    "kind": "Method",
    "detail": "Function (FTextFormatPatternDefinition&)",
    "insertText": "SetArgStartChar(const TCHAR InChar)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ArgStartChar = InChar ; return* this ; } TCHAR ArgEndChar =)",
    "insertText": "TEXT('}')"
  },
  {
    "label": "SetArgEndChar()",
    "kind": "Method",
    "detail": "Function (FTextFormatPatternDefinition&)",
    "insertText": "SetArgEndChar(const TCHAR InChar)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ArgEndChar = InChar ; return* this ; } TCHAR ArgModChar =)",
    "insertText": "TEXT('|')"
  },
  {
    "label": "SetArgModChar()",
    "kind": "Method",
    "detail": "Function (FTextFormatPatternDefinition&)",
    "insertText": "SetArgModChar(const TCHAR InChar)"
  },
  {
    "label": "ITextFormatArgumentModifier()",
    "kind": "Method",
    "detail": "Function (ArgModChar = InChar ; return* this ; } private : FTokenDefinitions TextFormatDefinitions ; } ; class FTextFormatter { public : typedef TFunction<TSharedPtr<)",
    "insertText": "ITextFormatArgumentModifier(const FTextFormatString&, FTextFormatPatternDefinitionConstRef)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FTextFormatter&)",
    "insertText": "Get()"
  },
  {
    "label": "RegisterTextArgumentModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTextArgumentModifier(const FTextFormatString& InKeyword, FCompileTextArgumentModifierFuncPtr InCompileFunc)"
  },
  {
    "label": "UnregisterTextArgumentModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTextArgumentModifier(const FTextFormatString& InKeyword)"
  },
  {
    "label": "FindTextArgumentModifier()",
    "kind": "Method",
    "detail": "Function (FCompileTextArgumentModifierFuncPtr)",
    "insertText": "FindTextArgumentModifier(const FTextFormatString& InKeyword)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat&& InFmt, FFormatNamedArguments&& InArguments, const bool bInRebuildText, const bool bInRebuildAsSource)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat&& InFmt, FFormatOrderedArguments&& InArguments, const bool bInRebuildText, const bool bInRebuildAsSource)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "Format(FTextFormat&& InFmt, TArray<FFormatArgumentData>&& InArguments, const bool bInRebuildText, const bool bInRebuildAsSource)"
  },
  {
    "label": "FormatStr()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatStr(const FTextFormat& InFmt, const FFormatNamedArguments& InArguments, const bool bInRebuildText, const bool bInRebuildAsSource)"
  },
  {
    "label": "FormatStr()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatStr(const FTextFormat& InFmt, const FFormatOrderedArguments& InArguments, const bool bInRebuildText, const bool bInRebuildAsSource)"
  },
  {
    "label": "FormatStr()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatStr(const FTextFormat& InFmt, const TArray<FFormatArgumentData>& InArguments, const bool bInRebuildText, const bool bInRebuildAsSource)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Format(const FTextFormat& InFmt, const FPrivateTextFormatArguments& InFormatArgs)"
  },
  {
    "label": "ArgumentValueToFormattedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArgumentValueToFormattedString(const FFormatArgumentValue& InValue, const FPrivateTextFormatArguments& InFormatArgs, FString& OutResult)"
  },
  {
    "label": "EstimateArgumentValueLength()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "EstimateArgumentValueLength(const FFormatArgumentValue& ArgumentValue)"
  },
  {
    "label": "FTextFormatter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTextFormatter()"
  }
]