[
  {
    "label": "ERichCurveTangentMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERichCurveTangentMode"
  },
  {
    "label": "ERichCurveTangentWeightMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERichCurveTangentWeightMode"
  },
  {
    "label": "ERichCurveCompressionFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERichCurveCompressionFormat"
  },
  {
    "label": "ERichCurveKeyTimeCompressionFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERichCurveKeyTimeCompressionFormat"
  },
  {
    "label": "FRichCurveKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRichCurveKey"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FRichCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRichCurve"
  },
  {
    "label": "FCompressedRichCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedRichCurve"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FRichCurveEditInfoTemplate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRichCurveEditInfoTemplate"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" Curves / KeyHandle . h \" # include \" Curves / RealCurve . h \" # include \" RichCurve . generated . h \")",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RCTM_Auto)",
    "insertText": "UMETA(DisplayName=\"Auto\"), RCTM_User UMETA(DisplayName=\"User\"), RCTM_Break UMETA(DisplayName=\"Break\"), RCTM_None UMETA(Hidden), RCTM_SmartAuto UMETA(DisplayName = \"Smart Auto\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RCTWM_WeightedNone)",
    "insertText": "UMETA(DisplayName=\"None\"), RCTWM_WeightedArrive UMETA(DisplayName=\"Arrive\"), RCTWM_WeightedLeave UMETA(DisplayName=\"Leave\"), RCTWM_WeightedBoth UMETA(DisplayName=\"Both\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RCCF_Empty)",
    "insertText": "UMETA(DisplayName = \"Empty\"), RCCF_Constant UMETA(DisplayName = \"Constant\"), RCCF_Linear UMETA(DisplayName = \"Linear\"), RCCF_Cubic UMETA(DisplayName = \"Cubic\"), RCCF_Mixed UMETA(DisplayName = \"Mixed\"), RCCF_Weighted UMETA(DisplayName = \"Weighted\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (RCKTCF_uint16)",
    "insertText": "UMETA(DisplayName = \"uint16\"), RCKTCF_float32 UMETA(DisplayName = \"float32\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Key\")"
  },
  {
    "label": "FRichCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRichCurveKey() : InterpMode(RCIM_Linear) , TangentMode(RCTM_Auto) , TangentWeightMode(RCTWM_WeightedNone) , Time(0.f) , Value(0.f) , ArriveTangent(0.f) , ArriveTangentWeight(0.f) , LeaveTangent(0.f) , LeaveTangentWeight(0.f)"
  },
  {
    "label": "FRichCurveKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRichCurveKey(float InTime, float InValue) : InterpMode(RCIM_Linear) , TangentMode(RCTM_Auto) , TangentWeightMode(RCTWM_WeightedNone) , Time(InTime) , Value(InValue) , ArriveTangent(0.f) , ArriveTangentWeight(0.f) , LeaveTangent(0.f) , LeaveTangentWeight(0.f)"
  },
  {
    "label": "FRichCurveKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRichCurveKey(float InTime, float InValue, float InArriveTangent, const float InLeaveTangent, ERichCurveInterpMode InInterpMode) : InterpMode(InInterpMode) , TangentMode(RCTM_Auto) , TangentWeightMode(RCTWM_WeightedNone) , Time(InTime) , Value(InValue) , ArriveTangent(InArriveTangent) , ArriveTangentWeight(0.f) , LeaveTangent(InLeaveTangent) , LeaveTangentWeight(0.f)"
  },
  {
    "label": "FRichCurveKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRichCurveKey(const FInterpCurvePoint<float>& InPoint)"
  },
  {
    "label": "FRichCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRichCurveKey(const FInterpCurvePoint<FVector2D>& InPoint, int32 ComponentIndex)"
  },
  {
    "label": "FRichCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRichCurveKey(const FInterpCurvePoint<FVector>& InPoint, int32 ComponentIndex)"
  },
  {
    "label": "FRichCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRichCurveKey(const FInterpCurvePoint<FTwoVectors>& InPoint, int32 ComponentIndex)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FRichCurveKey& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FRichCurveKey& P)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (P .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: ENGINE_API TArray<FRichCurveKey> GetCopyOfKeys()"
  },
  {
    "label": "GetConstRefOfKeys()",
    "kind": "Method",
    "detail": "Function (const TArray<FRichCurveKey>&)",
    "insertText": "GetConstRefOfKeys()"
  },
  {
    "label": "GetKeyIterator()",
    "kind": "Method",
    "detail": "Function (TArray<FRichCurveKey>::TConstIterator)",
    "insertText": "GetKeyIterator()"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (FRichCurveKey&)",
    "insertText": "GetKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetKeyRef()",
    "kind": "Method",
    "detail": "Function (const FRichCurveKey&)",
    "insertText": "GetKeyRef(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetFirstKey()",
    "kind": "Method",
    "detail": "Function (FRichCurveKey)",
    "insertText": "GetFirstKey()"
  },
  {
    "label": "GetLastKey()",
    "kind": "Method",
    "detail": "Function (FRichCurveKey)",
    "insertText": "GetLastKey()"
  },
  {
    "label": "GetFirstMatchingKey()",
    "kind": "Method",
    "detail": "Function (FRichCurveKey*)",
    "insertText": "GetFirstMatchingKey(const TArray<FKeyHandle>& KeyHandles)"
  },
  {
    "label": "AddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "AddKey(float InTime, float InValue, const bool bUnwindRotation = false, FKeyHandle KeyHandle = FKeyHandle())"
  },
  {
    "label": "ReserveKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveKeys(const int32 Number)"
  },
  {
    "label": "SetKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeys(const TArray<FRichCurveKey>& InKeys)"
  },
  {
    "label": "DeleteKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKey(FKeyHandle KeyHandle)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "UpdateOrAddKey(float InTime, float InValue, const bool bUnwindRotation = false, float KeyTimeTolerance = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTime(FKeyHandle KeyHandle, float NewTime)"
  },
  {
    "label": "GetKeyTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyTime(FKeyHandle KeyHandle)"
  },
  {
    "label": "SetKeyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyValue(FKeyHandle KeyHandle, float NewValue, bool bAutoSetTangents = true)"
  },
  {
    "label": "GetKeyValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyValue(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetKeyTimeValuePair()",
    "kind": "Method",
    "detail": "Function (TPair<float,float>)",
    "insertText": "GetKeyTimeValuePair(FKeyHandle KeyHandle)"
  },
  {
    "label": "IsConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstant(float Tolerance = UE_SMALL_NUMBER)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "SetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyInterpMode(FKeyHandle KeyHandle, ERichCurveInterpMode NewInterpMode)"
  },
  {
    "label": "SetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyInterpMode(FKeyHandle KeyHandle, ERichCurveInterpMode NewInterpMode, bool bAutoSetTangents)"
  },
  {
    "label": "SetKeyTangentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTangentMode(FKeyHandle KeyHandle, ERichCurveTangentMode NewTangentMode, bool bAutoSetTangents = true)"
  },
  {
    "label": "SetKeyTangentWeightMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyTangentWeightMode(FKeyHandle KeyHandle, ERichCurveTangentWeightMode NewTangentWeightMode, bool bAutoSetTangents = true)"
  },
  {
    "label": "GetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (ERichCurveInterpMode)",
    "insertText": "GetKeyInterpMode(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetKeyTangentMode()",
    "kind": "Method",
    "detail": "Function (ERichCurveTangentMode)",
    "insertText": "GetKeyTangentMode(FKeyHandle KeyHandle)"
  },
  {
    "label": "GetTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeRange(float& MinTime, float& MaxTime)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(float& MinValue, float& MaxValue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RemapTimeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapTimeValue(float& InTime, float& CycleValueOffset)"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Eval(float InTime, float InDefaultValue = 0.0f)"
  },
  {
    "label": "AutoSetTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoSetTangents(float Tension = 0.f)"
  },
  {
    "label": "ReadjustTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadjustTimeRange(float NewMinTimeRange, float NewMaxTimeRange, bool bInsert , float OldStartTime, float OldEndTime)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FRichCurve& Curve)"
  },
  {
    "label": "BakeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeCurve(float SampleRate)"
  },
  {
    "label": "BakeCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeCurve(float SampleRate, float FirstKeyTime, float LastKeyTime)"
  },
  {
    "label": "RemoveRedundantAutoTangentKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantAutoTangentKeys(float Tolerance)"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys(float Tolerance, FFrameRate SampleRate)"
  },
  {
    "label": "RemoveRedundantAutoTangentKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantAutoTangentKeys(float Tolerance, float FirstKeyTime, float LastKeyTime)"
  },
  {
    "label": "RemoveRedundantKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRedundantKeys(float Tolerance, float FirstKeyTime, float LastKeyTime, FFrameRate SampleRate)"
  },
  {
    "label": "CompressCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressCurve(struct FCompressedRichCurve& OutCurve, float ErrorThreshold = 0.0001f, float SampleRate = 120.0)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (FIndexedCurve*)",
    "insertText": "Duplicate()"
  },
  {
    "label": "RemoveRedundantKeysInternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RemoveRedundantKeysInternal(float Tolerance, int32 InStartKeepKey, int32 InEndKeepKey, FFrameRate SampleRate)"
  },
  {
    "label": "GetKeyIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetKeyIndex(float KeyTime, float KeyTimeTolerance)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "TConstantValueNumKeys()",
    "kind": "Method",
    "detail": "Function (TEnumAsByte<ERichCurveKeyTimeCompressionFormat> KeyTimeCompressionFormat ; TEnumAsByte<ERichCurveExtrapolation> PreInfinityExtrap ; TEnumAsByte<ERichCurveExtrapolation> PostInfinityExtrap ; union TConstantValueNumKeys { float ConstantValue ; int32 NumKeys ;)",
    "insertText": "TConstantValueNumKeys() : NumKeys(0)"
  },
  {
    "label": "FCompressedRichCurve()",
    "kind": "Method",
    "detail": "Function (} } ; TConstantValueNumKeys ConstantValueNumKeys ; TArray<uint8> CompressedKeys ;)",
    "insertText": "FCompressedRichCurve() : CompressionFormat(RCCF_Empty) , KeyTimeCompressionFormat(RCKTCF_float32) , PreInfinityExtrap(RCCE_None) , PostInfinityExtrap(RCCE_None) , ConstantValueNumKeys() , CompressedKeys()"
  },
  {
    "label": "PopulateCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCurve(FRichCurve& OutCurve)"
  },
  {
    "label": "StaticEval()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "StaticEval(ERichCurveCompressionFormat CompressionFormat, ERichCurveKeyTimeCompressionFormat KeyTimeCompressionFormat, ERichCurveExtrapolation PreInfinityExtrap, ERichCurveExtrapolation PostInfinityExtrap, TConstantValueNumKeys ConstantValueNumKeys, const uint8* CompressedKeys, float InTime, float InDefaultValue = 0.0f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FCompressedRichCurve& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FCompressedRichCurve& Curve)"
  },
  {
    "label": "FRichCurveEditInfoTemplate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRichCurveEditInfoTemplate(T InCurveToEdit) : CurveName(NAME_None) , CurveToEdit(InCurveToEdit)"
  },
  {
    "label": "FRichCurveEditInfoTemplate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRichCurveEditInfoTemplate(T InCurveToEdit, FName InCurveName) : CurveName(InCurveName) , CurveToEdit(InCurveToEdit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRichCurveEditInfoTemplate<T>& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRichCurveEditInfoTemplate<T>& RichCurveEditInfo)"
  }
]