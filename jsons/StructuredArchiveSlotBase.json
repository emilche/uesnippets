[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FStructuredArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructuredArchive"
  },
  {
    "label": "FArchiveState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchiveState"
  },
  {
    "label": "FElementId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElementId"
  },
  {
    "label": "FSlotPosition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlotPosition"
  },
  {
    "label": "FSlotBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlotBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FElementId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" class FArchive ; class FStructuredArchive ; struct FArchiveState ; namespace UE::StructuredArchive::Private { struct FElementId {)",
    "insertText": "FElementId()"
  },
  {
    "label": "FElementId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FElementId(uint32 InId) : Id(InId)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Id = 0 ; } bool)",
    "insertText": "operator(const FElementId& Rhs)"
  },
  {
    "label": "FSlotBase()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlotBase # if WITH_TEXT_ARCHIVE_SUPPORT : protected FSlotPosition # endif { class FStructuredArchive ; protected : enum class EPrivateToken { } ; public : # if WITH_TEXT_ARCHIVE_SUPPORT)",
    "insertText": "FSlotBase(EPrivateToken, FStructuredArchive& InStructuredArchive, int32 InDepth, FElementId InElementId) : FSlotPosition(InDepth, InElementId) , StructuredArchive(InStructuredArchive)"
  },
  {
    "label": "FSlotBase()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FSlotBase(EPrivateToken, FStructuredArchive& InStructuredArchive) : StructuredArchive(InStructuredArchive)"
  },
  {
    "label": "GetUnderlyingArchive()",
    "kind": "Method",
    "detail": "Function (} # endif FArchive&)",
    "insertText": "GetUnderlyingArchive()"
  },
  {
    "label": "GetArchiveState()",
    "kind": "Method",
    "detail": "Function (const FArchiveState&)",
    "insertText": "GetArchiveState()"
  }
]