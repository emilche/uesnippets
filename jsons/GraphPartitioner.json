[
  {
    "label": "FGraphPartitioner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphPartitioner"
  },
  {
    "label": "FGraphData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphData"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / Bounds . h \" # include \" metis . h \" # include \" Async / ParallelFor . h \" # include \" DisjointSet . h \" class FGraphPartitioner { public : struct FGraphData { int32 Offset ; int32 Num ; TArray<idx_t> Adjacency ; TArray<idx_t> AdjacencyCost ; TArray<idx_t> AdjacencyOffset ; } ; struct FRange { uint32 Begin ; uint32 End ; bool)",
    "insertText": "operator(const FRange& Other)"
  },
  {
    "label": "NewGraph()",
    "kind": "Method",
    "detail": "Function (FGraphData*)",
    "insertText": "NewGraph(uint32 NumAdjacency)"
  },
  {
    "label": "AddAdjacency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAdjacency(FGraphData* Graph, uint32 AdjIndex, idx_t Cost)"
  },
  {
    "label": "AddLocalityLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalityLinks(FGraphData* Graph, uint32 Index, idx_t Cost)"
  },
  {
    "label": "BuildLocalityLinks()",
    "kind": "Method",
    "detail": "Function (template<FGetCenter> void)",
    "insertText": "BuildLocalityLinks(FDisjointSet& DisjointSet, const FBounds3f& Bounds, TConstArrayView< const int32 > GroupIndexes, FGetCenter& GetCenter)"
  },
  {
    "label": "Partition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Partition(FGraphData* Graph)"
  },
  {
    "label": "PartitionStrict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartitionStrict(FGraphData* Graph, bool bThreaded)"
  },
  {
    "label": "BisectGraph()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BisectGraph(FGraphData* Graph, FGraphData* ChildGraphs[2])"
  },
  {
    "label": "RecursiveBisectGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveBisectGraph(FGraphData* Graph)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Graph -> Adjacency .)",
    "insertText": "Add(SortedTo[ AdjIndex ])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Graph -> AdjacencyCost .)",
    "insertText": "Add(Cost)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (uint32 AdjIndex = Iter .)",
    "insertText": "Value()"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<uint32> SortKeys ; SortKeys .)",
    "insertText": "AddUninitialized(NumElements)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (const bool bElementGroups = ! GroupIndexes .)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(TEXT(\"BuildLocalityLinks.PF\"), NumElements, 4096, [&]( uint32 Index ) { FVector3f Center = GetCenter( Index ); FVector3f CenterLocal = ( Center - Bounds.Min ) / FVector3f( Bounds.Max - Bounds.Min ).GetMax(); uint32 Morton; Morton = FMath::MortonCode3( uint32( CenterLocal.X * 1023 ) ); Morton |= FMath::MortonCode3( uint32( CenterLocal.Y * 1023 ) ) << 1; Morton |= FMath::MortonCode3( uint32( CenterLocal.Z * 1023 ) ) << 2; SortKeys[ Index ] = Morton; })"
  },
  {
    "label": "RadixSort32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RadixSort32(SortedTo.GetData(), Indexes.GetData(), NumElements, [&]( uint32 Index ) { return SortKeys[ Index ]; })"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (SortKeys .)",
    "insertText": "Empty()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Indexes, SortedTo)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function ({ uint32 RunIslandID = 0 ; uint32 RunFirstElement = 0 ;)",
    "insertText": "for(uint32 i = 0; i < NumElements; i++)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (uint32 IslandID = DisjointSet .)",
    "insertText": "Find(Indexes[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IslandRuns [ j ] . End = i - 1 ; } RunIslandID = IslandID ; RunFirstElement = i ; } IslandRuns [ i ] . Begin = RunFirstElement ; })",
    "insertText": "for(uint32 j = RunFirstElement; j < NumElements; j++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Index = Indexes [ i ] ; uint32 RunLength = IslandRuns [ i ] . End - IslandRuns [ i ] . Begin + 1 ;)",
    "insertText": "if(RunLength < 128)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (uint32 IslandID = DisjointSet [ Index ] ; int32 GroupID = bElementGroups ? GroupIndexes [ Index ] : 0 ; FVector3f Center =)",
    "insertText": "GetCenter(Index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const uint32 MaxLinksPerElement = 5 ; uint32 ClosestIndex [ MaxLinksPerElement ] ; float ClosestDist2 [ MaxLinksPerElement ] ;)",
    "insertText": "for(int32 k = 0; k < MaxLinksPerElement; k++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ClosestIndex [ k ] = ~ 0 u ; ClosestDist2 [ k ] = MAX_flt ; })",
    "insertText": "for(int Direction = 0; Direction < 2; Direction++)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Limit = Direction ? NumElements - 1 : 0 ; uint32 Step = Direction ? 1 : - 1 ; uint32 Adj = i ;)",
    "insertText": "for(int32 Iterations = 0; Iterations < 16; Iterations++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Adj + = Step ; uint32 AdjIndex = Indexes [ Adj ] ; uint32 AdjIslandID = DisjointSet [ AdjIndex ] ; int32 AdjGroupID = bElementGroups ? GroupIndexes [ AdjIndex ] : 0 ;)",
    "insertText": "if(IslandID == AdjIslandID || ( GroupID != AdjGroupID ))"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(AdjIndex, ClosestIndex[k])"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(AdjDist2, ClosestDist2[k])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "for(int k = 0; k < MaxLinksPerElement; k++)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (LocalityLinks .)",
    "insertText": "AddUnique(Index, ClosestIndex[k])"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (LocalityLinks .)",
    "insertText": "AddUnique(ClosestIndex[k], Index)"
  }
]