[
  {
    "label": "FObjectNameTableCellPresenter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectNameTableCellPresenter"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FObjectNameTableCellPresenter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IPropertyTable . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / SToolTip . h \" # include \" Styling / AppStyle . h \" # include \" Styling / StyleColors . h \" # include \" IPropertyTableCell . h \" # include \" Widgets / Layout / SBox . h \" # include \" IPropertyTableCellPresenter . h \" # include \" UserInterface / PropertyTable / PropertyTableConstants . h \" # include \" Widgets / Input / SEditableTextBox . h \" class FObjectNameTableCellPresenter : public TSharedFromThis<FObjectNameTableCellPresenter>,public IPropertyTableCellPresenter { public :)",
    "insertText": "FObjectNameTableCellPresenter(const TSharedRef< IPropertyTableCell >& InCell ) : FocusWidget( SNullWidget::NullWidget ) , Cell( InCell)"
  },
  {
    "label": "FObjectNameTableCellPresenter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FObjectNameTableCellPresenter()"
  },
  {
    "label": "ConstructDisplayWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<class SWidget>)",
    "insertText": "ConstructDisplayWidget()"
  },
  {
    "label": "RequiresDropDown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresDropDown()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SEditableTextBox> NewFocusWidget ; TSharedRef<class SWidget> Result =)",
    "insertText": "SNew(SBox ) .VAlign( VAlign_Center) .Padding( FMargin( 2, 0, 2, 0 ) ) [ SAssignNew( NewFocusWidget, SEditableTextBox ) .Text( Cell, &IPropertyTableCell::GetValueAsText ) .Font( FAppStyle::GetFontStyle( PropertyTableConstants::NormalFontStyle ) ) .IsReadOnly( true)"
  },
  {
    "label": "ConstructEditModeDropDownWidget()",
    "kind": "Method",
    "detail": "Function (FocusWidget = NewFocusWidget ; return Result ; } TSharedRef<class SWidget>)",
    "insertText": "ConstructEditModeDropDownWidget()"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetValueAsString()"
  },
  {
    "label": "GetValueAsText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetValueAsText()"
  },
  {
    "label": "HasReadOnlyEditMode()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasReadOnlyEditMode()"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SHorizontalBox> NameBox =)",
    "insertText": "SNew(SHorizontalBox)"
  },
  {
    "label": "ParseIntoArray()",
    "kind": "Method",
    "detail": "Function (TArray<FString> DisplayNamePieces ; DisplayNameText .)",
    "insertText": "ParseIntoArray(DisplayNamePieces, TEXT(\"->\"), true)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (NameBox ->)",
    "insertText": "AddSlot() .AutoWidth() [ SNew( STextBlock ) .Font( FAppStyle::GetFontStyle( TextFontStyle ) ) .Text( FText::FromString(DisplayNamePieces[ Index ]) ) .ColorAndOpacity(this, &FObjectNameTableCellPresenter::GetTextForegroundColor)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (NameBox ->)",
    "insertText": "AddSlot() .AutoWidth() .HAlign( HAlign_Center ) .VAlign( VAlign_Center ) [ SNew( SImage ) .ColorAndOpacity( FSlateColor::UseForeground() ) .Image( FAppStyle::GetBrush( \"PropertyTable.HeaderRow.Column.PathDelimiter\" ))"
  },
  {
    "label": "GetTextForegroundColor()",
    "kind": "Method",
    "detail": "Function (} } return NameBox ; } FSlateColor)",
    "insertText": "GetTextForegroundColor()"
  }
]