[
  {
    "label": "__getReg()",
    "kind": "Method",
    "detail": "Function (# ifndef _DXMPERF_H_ # define _DXMPERF_H_ # include<perfstruct . h> # include \" perflog . h \" # ifdef _IA64_ \" C \" unsigned __int64)",
    "insertText": "__getReg(int whichReg)"
  },
  {
    "label": "intrinsic()",
    "kind": "Method",
    "detail": "Function (# pragma)",
    "insertText": "intrinsic(__getReg) #endif inline ULONGLONG _RDTSC( void)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifdef _X86_ LARGE_INTEGER li ; __asm { _emit 0 x0F _emit 0 x31 mov li . LowPart,eax mov li . HighPart,edx } return li . QuadPart ; # if 0 # elif)",
    "insertText": "defined(_IA64_) #define INL_REGID_APITC 3116 return __getReg( INL_REGID_APITC)"
  },
  {
    "label": "PERFLOG_CTOR()",
    "kind": "Method",
    "detail": "Function (# endif # else return 0 ; # endif } # define DXMPERF_VIDEOREND 0 x00000001 # define DXMPERF_AUDIOGLITCH 0 x00000002 # define AUDIOBREAK_BIT 0 x00000010 # define DXMPERF_AUDIORECV 0 x00000020 # define DXMPERF_AUDIOSLAVE 0 x00000040 # define DXMPERF_AUDIOBREAK 0 x00000080 # define)",
    "insertText": "PERFLOG_CTOR(name, iface ) #define PERFLOG_DTOR( name, iface ) #define PERFLOG_DELIVER( name, source, dest, sample, pmt ) #define PERFLOG_RECEIVE( name, source, dest, sample, pmt ) #define PERFLOG_RUN( name, iface, time, oldstate ) #define PERFLOG_PAUSE( name, iface, oldstate ) #define PERFLOG_STOP( name, iface, oldstate ) #define PERFLOG_JOINGRAPH( name, iface, graph ) #define PERFLOG_GETBUFFER( allocator, sample ) #define PERFLOG_RELBUFFER( allocator, sample ) #define PERFLOG_CONNECT( connector, connectee, status, pmt ) #define PERFLOG_RXCONNECT( connector, connectee, status, pmt ) #define PERFLOG_DISCONNECT( disconnector, disconnectee, status ) #define PERFLOG_GETTIME( clock, time ) #define PERFLOG_AUDIOREND( clocktime, sampletime, psample, bytetime, cbytes ) #define PERFLOG_AUDIORECV(StreamTime,SampleStart,SampleStop,Discontinuity,Duration) \\ if (PerflogEnableFlags & DXMPERF_AUDIORECV)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (\\ PERFINFO_WMI_AUDIORECV perfData ; \\)",
    "insertText": "memset(&perfData, 0, sizeof( perfData ))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ perfData . header . Size =)",
    "insertText": "sizeof(perfData)"
  },
  {
    "label": "PerflogTraceEvent()",
    "kind": "Method",
    "detail": "Function (\\ perfData . header . Flags = WNODE_FLAG_TRACED_GUID ; \\ perfData . header . Guid = GUID_AUDIORECV ; \\ perfData . data . streamTime = StreamTime ; \\ perfData . data . sampleStart = SampleStart ; \\ perfData . data . sampleStop = SampleStop ; \\ perfData . data . discontinuity = Discontinuity ; \\ perfData . data . hwduration = Duration ; \\)",
    "insertText": "PerflogTraceEvent((PEVENT_TRACE_HEADER) &perfData)"
  },
  {
    "label": "PERFLOG_AUDIOSLAVE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PERFLOG_AUDIOSLAVE(MasterClock,SlaveClock,ErrorAccum,LastHighErrorSeen,LastLowErrorSeen) \\ if (PerflogEnableFlags & DXMPERF_AUDIOSLAVE)"
  },
  {
    "label": "PERFLOG_AUDIOADDBREAK()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PERFLOG_AUDIOADDBREAK(IterNextWrite,OffsetNextWrite,IterWrite,OffsetWrite) \\ if (PerflogEnableFlags & DXMPERF_AUDIOBREAK)"
  },
  {
    "label": "PERFLOG_VIDEOREND()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PERFLOG_VIDEOREND(sampletime, clocktime, psample ) \\ if (PerflogEnableFlags & DXMPERF_VIDEOREND)"
  },
  {
    "label": "_RDTSC()",
    "kind": "Method",
    "detail": "Function (\\ perfData . header . Flags = WNODE_FLAG_TRACED_GUID ; \\ perfData . header . Guid = GUID_VIDEOREND ; \\ perfData . data . cycleCounter =)",
    "insertText": "_RDTSC()"
  },
  {
    "label": "dshowClock()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "dshowClock(clocktime)"
  },
  {
    "label": "sampleTime()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "sampleTime(sampletime)"
  },
  {
    "label": "PERFLOG_AUDIOGLITCH()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PERFLOG_AUDIOGLITCH(instance, glitchtype, currenttime, previoustime ) \\ if (PerflogEnableFlags & DXMPERF_AUDIOGLITCH)"
  },
  {
    "label": "glitchType()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "glitchType(glitchtype)"
  },
  {
    "label": "sampleTime()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "sampleTime(currenttime)"
  },
  {
    "label": "previousTime()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "previousTime(previoustime)"
  },
  {
    "label": "instanceId()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "instanceId(instance)"
  },
  {
    "label": "PERFLOG_FRAMEDROP()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "PERFLOG_FRAMEDROP(sampletime, clocktime, psample, renderer ) #define PERFLOG_AUDIOBREAK( nextwrite, writepos, msecs ) \\ if (PerflogEnableFlags & AUDIOBREAK_BIT)"
  },
  {
    "label": "dshowClock()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "dshowClock(writepos)"
  },
  {
    "label": "sampleTime()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "sampleTime(nextwrite)"
  },
  {
    "label": "sampleDuration()",
    "kind": "Method",
    "detail": "Function (\\ perfData . data .)",
    "insertText": "sampleDuration(msecs)"
  },
  {
    "label": "PERFLOG_STREAMTRACE()",
    "kind": "Method",
    "detail": "Function (\\ } \\ VOID)",
    "insertText": "PERFLOG_STREAMTRACE(ULONG Level, ULONG Id, ULONGLONG DShowClock, ULONGLONG Data1, ULONGLONG Data2, ULONGLONG Data3, ULONGLONG Data4)"
  }
]