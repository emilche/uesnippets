[
  {
    "label": "_T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T1"
  },
  {
    "label": "_T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_T2"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_From",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_From"
  },
  {
    "label": "_To",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_To"
  },
  {
    "label": "__is_convertible_test",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_convertible_test"
  },
  {
    "label": "__is_array_function_or_void",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_array_function_or_void"
  },
  {
    "label": "__is_convertible_check",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_convertible_check"
  },
  {
    "label": "__is_convertible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_convertible"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___TYPE_TRAITS_IS_CONVERTIBLE_H # define _LIBCPP___TYPE_TRAITS_IS_CONVERTIBLE_H # include<__config> # include<__type_traits / integral_constant . h> # include<__type_traits / is_array . h> # include<__type_traits / is_function . h> # include<__type_traits / is_void . h> # include<__type_traits / remove_reference . h> # include<__utility / declval . h> # include<cstddef> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if __has_builtin(__is_convertible_to) && !defined(_LIBCPP_USE_IS_CONVERTIBLE_FALLBACK) template <class _T1, class _T2> struct _LIBCPP_TEMPLATE_VIS is_convertible : public integral_constant<bool, __is_convertible_to(_T1, _T2)"
  },
  {
    "label": "__test_convert()",
    "kind": "Method",
    "detail": "Function (} ; # else namespace __is_convertible_imp { template<class _Tp> void)",
    "insertText": "__test_convert(_Tp)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<class _From,class _To,class = void> struct __is_convertible_test : public false_type { } ; template<class _From,class _To> struct __is_convertible_test<_From,_To,)",
    "insertText": "decltype(__is_convertible_imp::__test_convert<_To>(declval<_From>()))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Tp,bool _IsArray = is_array<_Tp>::value,bool _IsFunction = is_function<_Tp>::value,bool _IsVoid = is_void<_Tp>::value> struct __is_array_function_or_void { enum { value = 0 } ; } ; template<class _Tp> struct __is_array_function_or_void<_Tp,true,false,false> { enum { value = 1 } ; } ; template<class _Tp> struct __is_array_function_or_void<_Tp,false,true,false> { enum { value = 2 } ; } ; template<class _Tp> struct __is_array_function_or_void<_Tp,false,false,true> { enum { value = 3 } ; } ; } template<class _Tp,unsigned = __is_convertible_imp::__is_array_function_or_void<remove_reference<_Tp>::type>::value> struct __is_convertible_check { const size_t __v = 0 ; } ; template<class _Tp> struct __is_convertible_check<_Tp,0> { const size_t __v =)",
    "insertText": "sizeof(_Tp)"
  }
]