[
  {
    "label": "FArrayReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayReader"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FScopedEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedEvent"
  },
  {
    "label": "FPackageFileVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageFileVersion"
  },
  {
    "label": "FCookOnTheFlyMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookOnTheFlyMessage"
  },
  {
    "label": "ICookOnTheFlyServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyServerConnection"
  },
  {
    "label": "FNetworkPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetworkPlatformFile"
  },
  {
    "label": "FAsyncFileSync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncFileSync"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "SOCKETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOCKETS_API"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / SpscQueue . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Event . h \" # include \" Logging / LogMacros . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / CoreMisc . h \" # include \" Misc / DateTime . h \" # include \" NetworkMessage . h \" # include \" ServerTOC . h \" # include \" Templates / SharedPointer . h \" class FArrayReader ; class FOutputDevice ; class FScopedEvent ; struct FPackageFileVersion ; namespace UE { namespace Cook { class FCookOnTheFlyMessage ; class ICookOnTheFlyServerConnection ; } })",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNetworkPlatformFile, Log, All)"
  },
  {
    "label": "ReadUnsolicitedFile()",
    "kind": "Method",
    "detail": "Function (class FNetworkPlatformFile : public IPlatformFile,public FSelfRegisteringExec { class FAsyncFileSync ; void)",
    "insertText": "ReadUnsolicitedFile(int32 InNumUnsolictedFiles, FNetworkPlatformFile& InNetworkFile, IPlatformFile& InInnerPlatformFile, FString& InServerEngineDir, FString& InServerProjectDir)"
  },
  {
    "label": "InitializeInternal()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "InitializeInternal(IPlatformFile* Inner, const TCHAR* HostIP)"
  },
  {
    "label": "OnFileUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileUpdated(const FString& LocalFilename)"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (public : const TCHAR*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "FNetworkPlatformFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetworkPlatformFile()"
  },
  {
    "label": "ShouldBeUsed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBeUsed(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "InitializeAfterSetActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAfterSetActive()"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (IPlatformFile*)",
    "insertText": "GetLowerLevel()"
  },
  {
    "label": "GetTimeStampPair()",
    "kind": "Method",
    "detail": "Function (InnerPlatformFile = NewLowerLevel ; } void)",
    "insertText": "GetTimeStampPair(const TCHAR* PathA, const TCHAR* PathB, FDateTime& OutTimeStampA, FDateTime& OutTimeStampB)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (OutTimeStampA =)",
    "insertText": "GetTimeStamp(PathA)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (OutTimeStampB =)",
    "insertText": "GetTimeStamp(PathB)"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLowerLevel()->GetTimeStampPair(PathA, PathB, OutTimeStampA, OutTimeStampB)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} } const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "IsUsable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsable()"
  },
  {
    "label": "GetFileInfo()",
    "kind": "Method",
    "detail": "Function (FFileInfo Info ;)",
    "insertText": "GetFileInfo(Filename, Info)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReadOnly(const TCHAR* Filename, bool bNewReadOnlyValue)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "OpenWrite()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenWrite(const TCHAR* Filename, bool bAppend = false, bool bAllowRead = false)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectoryTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoryTree(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(const TCHAR* Directory)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStatRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStatRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "DeleteDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectoryRecursively(const TCHAR* Directory)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFile(const TCHAR* To, const TCHAR* From, EPlatformFileRead ReadFlags = EPlatformFileRead::None, EPlatformFileWrite WriteFlags = EPlatformFileWrite::None)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite(const TCHAR* Filename)"
  },
  {
    "label": "SendMessageToServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMessageToServer(const TCHAR* Message, IPlatformFile::IFileServerMessageHandler* Handler)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "SendPayloadAndReceiveResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendPayloadAndReceiveResponse(TArray<uint8>& In, TArray<uint8>& Out)"
  },
  {
    "label": "ReceiveResponse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReceiveResponse(TArray<uint8>& Out)"
  },
  {
    "label": "SendReadMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendReadMessage(uint8* Destination, int64 BytesToRead)"
  },
  {
    "label": "SendWriteMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendWriteMessage(const uint8* Source, int64 BytesToWrite)"
  },
  {
    "label": "ConvertServerFilenameToClientFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertServerFilenameToClientFilename(FString& FilenameToConvert, const FString& InServerEngineDir, const FString& InServerProjectDir, const FString& InServerEnginePlatformExtensionsDir, const FString& InServerProjectPlatformExtensionsDir)"
  },
  {
    "label": "GetVersionInfo()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVersionInfo()"
  },
  {
    "label": "Exec_Runtime()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Exec_Runtime(class UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "PerformHeartbeat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformHeartbeat()"
  },
  {
    "label": "GetFileInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFileInfo(const TCHAR* Filename, FFileInfo& Info)"
  },
  {
    "label": "ConvertServerFilenameToClientFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertServerFilenameToClientFilename(FString& FilenameToConvert)"
  },
  {
    "label": "FillGetFileList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillGetFileList(FNetworkFileArchive& Payload)"
  },
  {
    "label": "ProcessServerInitialResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessServerInitialResponse(FArrayReader& InResponse, FPackageFileVersion& OutServerPackageVersion, int32& OutServerPackageLicenseeVersion)"
  },
  {
    "label": "ProcessServerCachedFilesResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessServerCachedFilesResponse(FArrayReader& InReponse, const FPackageFileVersion& ServerPackageVersion, const int32 ServerPackageLicenseeVersion)"
  },
  {
    "label": "IsMediaExtension()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsMediaExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsAdditionalCookedFileExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAdditionalCookedFileExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsInLocalDirectoryUnGuarded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInLocalDirectoryUnGuarded(const FString& Filename)"
  },
  {
    "label": "IsInLocalDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInLocalDirectory(const FString& Filename)"
  },
  {
    "label": "EnsureFileIsLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureFileIsLocal(const FString& Filename)"
  },
  {
    "label": "OnCookOnTheFlyMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCookOnTheFlyMessage(const UE::Cook::FCookOnTheFlyMessage& Message)"
  },
  {
    "label": "MakeStandardNetworkFilename()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "MakeStandardNetworkFilename(FString& Filename)"
  },
  {
    "label": "FNetworkFileHandle()",
    "kind": "Method",
    "detail": "Function (protected : bool bHasLoadedDDCDirectories ; IPlatformFile* InnerPlatformFile ; TSet<FString> CachedLocalFiles ; FString ServerEngineDir ; FString ServerProjectDir ; FString ServerEnginePlatformExtensionsDir ; FString ServerProjectPlatformExtensionsDir ; FServerTOC ServerFiles ; TArray<FString> LocalDirectories ; FCriticalSection SynchronizationObject ; FCriticalSection LocalDirectoriesCriticalSection ; bool bIsUsable ; int32 FileServerPort ; EConnectionFlags ConnectionFlags ; float HeartbeatFrequency ; double TotalWriteTime ; double TotalNetworkSyncTime ; int32 TotalFilesSynced ; int32 TotalUnsolicitedPackages ; int32 TotalFilesFoundLocally ; int32 UnsolicitedPackagesHits ; int32 UnsolicitedPackageWaits ; double TotalTimeSpentInUnsolicitedPackages ; double TotalWaitForAsyncUnsolicitedPackages ; private : FScopedEvent* FinishedAsyncNetworkReadUnsolicitedFiles ; FScopedEvent* FinishedAsyncWriteUnsolicitedFiles ; TSharedPtr<UE::Cook::ICookOnTheFlyServerConnection> Connection ; TSpscQueue<TArray<uint8>> PendingPayloads ; FEventRef NewPayloadEvent ; FString MP4Extension ; FString BulkFileExtension ; FString ExpFileExtension ; FString FontFileExtension ; } ; class FNetworkFileHandle : public IFileHandle { FNetworkPlatformFile& Network ; FString Filename ; int64 FilePos ; int64 Size ; bool bWritable ; bool bReadable ; public :)",
    "insertText": "FNetworkFileHandle(FNetworkPlatformFile& InNetwork, const TCHAR* InFilename, int64 InFilePos, int64 InFileSize, bool bWriting) : Network(InNetwork) , Filename(InFilename) , FilePos(InFilePos) , Size(InFileSize) , bWritable(bWriting) , bReadable(!bWriting)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Tell()"
  },
  {
    "label": "SeekFromEnd()",
    "kind": "Method",
    "detail": "Function (FilePos = NewPosition ; return true ; } return false ; } bool)",
    "insertText": "SeekFromEnd(int64 NewPositionRelativeToEnd = 0)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Read(uint8* Destination, int64 BytesToRead)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool Result = false ;)",
    "insertText": "if(bReadable && BytesToRead >= 0 && BytesToRead + FilePos <= Size)"
  },
  {
    "label": "SendReadMessage()",
    "kind": "Method",
    "detail": "Function (Result = true ; } else { Result = Network .)",
    "insertText": "SendReadMessage(Destination, BytesToRead)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (FilePos + = BytesToRead ; } } } return Result ; } bool)",
    "insertText": "Write(const uint8* Source, int64 BytesToWrite)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool Result = false ;)",
    "insertText": "if(bWritable && BytesToWrite >= 0)"
  },
  {
    "label": "SendWriteMessage()",
    "kind": "Method",
    "detail": "Function (Result = true ; } else { Result = Network .)",
    "insertText": "SendWriteMessage(Source, BytesToWrite)"
  },
  {
    "label": "int64()",
    "kind": "Method",
    "detail": "Function (FilePos + = BytesToWrite ; Size = FMath::Max<)",
    "insertText": "int64(FilePos, Size)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} } } return Result ; } bool)",
    "insertText": "Flush(const bool bFullFlush = false)"
  }
]