[
  {
    "label": "FSequencerTrackFilter_Text",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackFilter_Text"
  },
  {
    "label": "FSequencerTrackFilter_Text()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Filters / SequencerTextFilterExpressionContext . h \" # include \" Filters / SequencerTrackFilterBase . h \" class FSequencerTrackFilter_Text : public FSequencerTrackFilter { public :)",
    "insertText": "FSequencerTrackFilter_Text(ISequencerTrackFilters& InFilterInterface)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "PassesFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesFilter(FSequencerTrackFilterType InItem)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "GetRawFilterText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetRawFilterText()"
  },
  {
    "label": "SetRawFilterText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRawFilterText(const FText& InFilterText)"
  },
  {
    "label": "GetFilterErrorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterErrorText()"
  },
  {
    "label": "GetTextFilterExpressionContexts()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<FSequencerTextFilterExpressionContext>>&)",
    "insertText": "GetTextFilterExpressionContexts()"
  },
  {
    "label": "DoesTextFilterStringContainExpressionPair()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesTextFilterStringContainExpressionPair(const FSequencerTextFilterExpressionContext& InExpression)"
  },
  {
    "label": "IsTokenKey()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsTokenKey(const FExpressionToken& InToken, const TSet<FName>& InKeys)"
  },
  {
    "label": "IsTokenOperator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTokenOperator(const FExpressionToken& InToken, const ESequencerTextFilterValueType InValueType)"
  },
  {
    "label": "IsTokenValueValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTokenValueValid(const FExpressionToken& InToken, const ESequencerTextFilterValueType InValueType)"
  }
]