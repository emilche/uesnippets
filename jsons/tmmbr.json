[
  {
    "label": "CommonHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CommonHeader"
  },
  {
    "label": "Tmmbr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tmmbr"
  },
  {
    "label": "Tmmbr()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TMMBR_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_PACKET_TMMBR_H_ # include<vector> # include \" modules / rtp_rtcp / source / rtcp_packet / rtpfb . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / tmmb_item . h \" namespace webrtc { namespace rtcp { class CommonHeader ; class Tmmbr : public Rtpfb { public : uint8_t kFeedbackMessageType = 3 ;)",
    "insertText": "Tmmbr()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const CommonHeader& packet)"
  },
  {
    "label": "AddTmmbr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTmmbr(const TmmbItem& item)"
  },
  {
    "label": "requests()",
    "kind": "Method",
    "detail": "Function (const std::vector<TmmbItem>&)",
    "insertText": "requests()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Create(uint8_t* packet, size_t* index, size_t max_length, PacketReadyCallback callback)"
  },
  {
    "label": "SetMediaSsrc()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetMediaSsrc(uint32_t ssrc)"
  }
]