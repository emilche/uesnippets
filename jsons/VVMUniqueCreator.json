[
  {
    "label": "VUniqueCreator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VUniqueCreator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "LookupLocked()",
    "kind": "Method",
    "detail": "Function (template<Type> class VUniqueCreator : public FGlobalHeapRoot { private : uint32 MaxSize = 4* 1 0 2 4 ; TWriteBarrier<Type> Items [ MaxSize ] ; uint32 ItemsEnd = 0 ; template<SubType,. . . ArgumentTypes> Type*)",
    "insertText": "LookupLocked(ArgumentTypes... Arguments)"
  },
  {
    "label": "AddLocked()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } Type*)",
    "insertText": "AddLocked(FAccessContext Context, Type* Item)"
  },
  {
    "label": "V_DIE_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_IF(ItemsEnd >= MaxSize)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Items [ ItemsEnd ] .)",
    "insertText": "Set(Context, Item)"
  },
  {
    "label": "VUniqueCreator()",
    "kind": "Method",
    "detail": "Function (ItemsEnd + + ; return Item ; } public :)",
    "insertText": "VUniqueCreator()"
  },
  {
    "label": "GetOrCreate()",
    "kind": "Method",
    "detail": "Function (template<SubType,. . . ArgumentTypes> Type*)",
    "insertText": "GetOrCreate(FAllocationContext Context, ArgumentTypes... Arguments)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (UE::TUniqueLock)",
    "insertText": "Lock(Mutex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "Add(FAccessContext Context, Type* Item)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(FAbstractVisitor& Visitor)"
  },
  {
    "label": "VisitImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitImpl(Visitor)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Visit(FMarkStackVisitor& Visitor)"
  },
  {
    "label": "VisitImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<TVisitor> void)",
    "insertText": "VisitImpl(TVisitor& Visitor)"
  },
  {
    "label": "BeginArray()",
    "kind": "Method",
    "detail": "Function (uint64 ScratchNumItems = ItemsEnd ; Visitor .)",
    "insertText": "BeginArray(TEXT(\"Items\"), ScratchNumItems)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "Visit(Items, Items + ItemsEnd)"
  },
  {
    "label": "EndArray()",
    "kind": "Method",
    "detail": "Function (Visitor .)",
    "insertText": "EndArray()"
  }
]