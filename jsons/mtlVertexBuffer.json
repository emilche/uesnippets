[
  {
    "label": "CPUMTLVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPUMTLVertexBuffer"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_OSD_MTL_VERTEX_BUFFER_H # define OPENSUBDIV3_OSD_MTL_VERTEX_BUFFER_H # include \" . . / version . h \" # include \" . . / osd / mtlCommon . h \" @ protocol MTLDevice ; @ protocol MTLBuffer ; namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Osd { class CPUMTLVertexBuffer { public : CPUMTLVertexBuffer*)",
    "insertText": "Create(int numElements, int numVertices, MTLContext* context)"
  },
  {
    "label": "UpdateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateData(const float* src, int startVertex, int numVertices, MTLContext* context)"
  },
  {
    "label": "GetNumElements()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNumElements()"
  },
  {
    "label": "BindMTLBuffer()",
    "kind": "Method",
    "detail": "Function (id<MTLBuffer>)",
    "insertText": "BindMTLBuffer(MTLContext* context)"
  },
  {
    "label": "BindVBO()",
    "kind": "Method",
    "detail": "Function (id<MTLBuffer>)",
    "insertText": "BindVBO(MTLContext* context)"
  },
  {
    "label": "CPUMTLVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "CPUMTLVertexBuffer(int numElements, int numVertices)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "allocate(MTLContext* context)"
  }
]