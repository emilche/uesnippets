[
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "USoundEffectSubmixPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSubmixPreset"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "ISubmixBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISubmixBufferListener"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSoundSpectrumAnalyzerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSpectrumAnalyzerSettings"
  },
  {
    "label": "FSoundSpectrumAnalyzerDelegateSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSpectrumAnalyzerDelegateSettings"
  },
  {
    "label": "ISoundSubmixAudioEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundSubmixAudioEditor"
  },
  {
    "label": "graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "graph"
  },
  {
    "label": "FDynamicChildSubmix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicChildSubmix"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "USoundSubmixWithParentBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixWithParentBase"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "meant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "meant"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "meant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "meant"
  },
  {
    "label": "USoundfieldSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundfieldSubmix"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "meant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "meant"
  },
  {
    "label": "UEndpointSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEndpointSubmix"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "meant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "meant"
  },
  {
    "label": "USoundfieldEndpointSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundfieldEndpointSubmix"
  },
  {
    "label": "exists",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "exists"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "SetParentSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentSubmix(USoundSubmixBase* InParentSubmix, bool bModifyAssets = true)"
  },
  {
    "label": "DynamicConnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DynamicConnect(FAudioDeviceHandle Handle, USoundSubmixBase* Parent)"
  },
  {
    "label": "DynamicDisconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DynamicDisconnect(FAudioDeviceHandle Handle)"
  },
  {
    "label": "StartRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecordingOutput(const UObject* WorldContextObject, float ExpectedDuration)"
  },
  {
    "label": "StartRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecordingOutput(FAudioDevice* InDevice, float ExpectedDuration)"
  },
  {
    "label": "StopRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingOutput(const UObject* WorldContextObject, EAudioRecordingExportType ExportType, const FString& Name, FString Path, USoundWave* ExistingSoundWaveToOverwrite = nullptr)"
  },
  {
    "label": "StopRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingOutput(FAudioDevice* InDevice, EAudioRecordingExportType ExportType, const FString& Name, FString Path, USoundWave* ExistingSoundWaveToOverwrite = nullptr)"
  },
  {
    "label": "StartEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEnvelopeFollowing(const UObject* WorldContextObject)"
  },
  {
    "label": "StartEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEnvelopeFollowing(FAudioDevice* InDevice)"
  },
  {
    "label": "StopEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopEnvelopeFollowing(const UObject* WorldContextObject)"
  },
  {
    "label": "StopEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopEnvelopeFollowing(FAudioDevice* InDevice)"
  },
  {
    "label": "AddEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEnvelopeFollowerDelegate(const UObject* WorldContextObject, const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "RemoveEnvelopeFollowerDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEnvelopeFollowerDelegate(const UObject* WorldContextObject, const FOnSubmixEnvelopeBP& OnSubmixEnvelopeBP)"
  },
  {
    "label": "AddSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpectralAnalysisDelegate(const UObject* WorldContextObject, const TArray<FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP, float UpdateRate = 10.f, float DecibelNoiseFloor=-40.f, bool bDoNormalize = true, bool bDoAutoRange = false, float AutoRangeAttackTime = 0.1f, float AutoRangeReleaseTime = 60.f)"
  },
  {
    "label": "RemoveSpectralAnalysisDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpectralAnalysisDelegate(const UObject* WorldContextObject, const FOnSubmixSpectralAnalysisBP& OnSubmixSpectralAnalysisBP)"
  },
  {
    "label": "StartSpectralAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectralAnalysis(const UObject* WorldContextObject, EFFTSize FFTSize = EFFTSize::DefaultSize, EFFTPeakInterpolationMethod InterpolationMethod = EFFTPeakInterpolationMethod::Linear, EFFTWindowType WindowType = EFFTWindowType::Hann, float HopSize = 0, EAudioSpectrumType SpectrumType = EAudioSpectrumType::MagnitudeSpectrum)"
  },
  {
    "label": "StartSpectralAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectralAnalysis(FAudioDevice* InDevice, EFFTSize FFTSize = EFFTSize::DefaultSize, EFFTPeakInterpolationMethod InterpolationMethod = EFFTPeakInterpolationMethod::Linear, EFFTWindowType WindowType = EFFTWindowType::Hann, float HopSize = 0, EAudioSpectrumType SpectrumType = EAudioSpectrumType::MagnitudeSpectrum)"
  },
  {
    "label": "StopSpectralAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSpectralAnalysis(const UObject* WorldContextObject)"
  },
  {
    "label": "StopSpectralAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSpectralAnalysis(FAudioDevice* InDevice)"
  },
  {
    "label": "SetSubmixOutputVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixOutputVolume(const UObject* WorldContextObject, float InOutputVolume)"
  },
  {
    "label": "SetSubmixWetLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixWetLevel(const UObject* WorldContextObject, float InWetLevel)"
  },
  {
    "label": "SetSubmixDryLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixDryLevel(const UObject* WorldContextObject, float InDryLevel)"
  },
  {
    "label": "GetSpectrumAnalyzerSettings()",
    "kind": "Method",
    "detail": "Function (FSoundSpectrumAnalyzerSettings)",
    "insertText": "GetSpectrumAnalyzerSettings(EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType)"
  },
  {
    "label": "GetSpectrumAnalysisDelegateSettings()",
    "kind": "Method",
    "detail": "Function (FSoundSpectrumAnalyzerDelegateSettings)",
    "insertText": "GetSpectrumAnalysisDelegateSettings(const TArray<FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime)"
  },
  {
    "label": "SetOutputVolumeModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputVolumeModulation(const FSoundModulationDestinationSettings& InVolMod)"
  },
  {
    "label": "SetWetVolumeModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWetVolumeModulation(const FSoundModulationDestinationSettings& InVolMod)"
  },
  {
    "label": "SetDryVolumeModulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDryVolumeModulation(const FSoundModulationDestinationSettings& InVolMod)"
  },
  {
    "label": "PushModulationChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushModulationChanges()"
  },
  {
    "label": "InitDeprecatedDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDeprecatedDefaults()"
  },
  {
    "label": "HandleVersionMigration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVersionMigration(const int32 Version)"
  },
  {
    "label": "SanitizeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeLinks()"
  },
  {
    "label": "SanitizeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeLinks()"
  },
  {
    "label": "AreSubmixFormatsCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreSubmixFormatsCompatible(const USoundSubmixBase* ChildSubmix, const USoundSubmixBase* ParentSubmix)"
  },
  {
    "label": "FindInGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindInGraph(const USoundSubmixBase* InEntryPoint, const USoundSubmixBase* InToMatch, bool bShouldAcsend, FAudioDeviceHandle InDevice = {})"
  },
  {
    "label": "RefreshEditorForSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshEditorForSubmix(const USoundSubmixBase* InSubmix)"
  }
]