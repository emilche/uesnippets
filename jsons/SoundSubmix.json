[
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "USoundEffectSubmixPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSubmixPreset"
  },
  {
    "label": "USoundSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmix"
  },
  {
    "label": "ISubmixBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISubmixBufferListener"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSoundSpectrumAnalyzerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSpectrumAnalyzerSettings"
  },
  {
    "label": "FSoundSpectrumAnalyzerDelegateSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundSpectrumAnalyzerDelegateSettings"
  },
  {
    "label": "ISoundSubmixAudioEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundSubmixAudioEditor"
  },
  {
    "label": "FDynamicChildSubmix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicChildSubmix"
  },
  {
    "label": "USoundSubmixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixBase"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "USoundSubmixWithParentBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundSubmixWithParentBase"
  },
  {
    "label": "USoundfieldSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundfieldSubmix"
  },
  {
    "label": "UEndpointSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEndpointSubmix"
  },
  {
    "label": "USoundfieldEndpointSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundfieldEndpointSubmix"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioDeviceHandle . h \" # include \" AudioLinkSettingsAbstract . h \" # include \" DSP / SpectrumAnalyzer . h \" # include \" IAudioEndpoint . h \" # include \" ISoundfieldEndpoint . h \" # include \" ISoundfieldFormat . h \" # include \" SampleBufferIO . h \" # include \" SoundEffectSubmix . h \" # include \" SoundModulationDestination . h \" # include \" SoundSubmixSend . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" SoundSubmix . generated . h \" class UEdGraph ; class USoundEffectSubmixPreset ; class USoundSubmix ; class ISubmixBufferListener ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnSubmixRecordedFileDone, const USoundWave*, ResultingSoundWave)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnSubmixEnvelope, const TArray<float>&, Envelope)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnSubmixSpectralAnalysis, const TArray<float>&, Magnitudes)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (DefaultSize,Min,Small,Medium,Large,VeryLarge,Max } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ISoundSubmixAudioEditor()",
    "kind": "Method",
    "detail": "Function (MagnitudeSpectrum,PowerSpectrum,Decibel,} ; struct FSoundSpectrumAnalyzerSettings { EFFTSize FFTSize ; EFFTWindowType WindowType ; EAudioSpectrumType SpectrumType ; EFFTPeakInterpolationMethod InterpolationMethod ; float HopSize ; } ; struct FSoundSpectrumAnalyzerDelegateSettings { TArray<FSoundSubmixSpectralAnalysisBandSettings> BandSettings ; float UpdateRate ; float DecibelNoiseFloor ; bool bDoNormalize ; bool bDoAutoRange ; float AutoRangeAttackTime ; float AutoRangeReleaseTime ; } ; # if WITH_EDITOR class ISoundSubmixAudioEditor { public : ~)",
    "insertText": "ISoundSubmixAudioEditor()"
  },
  {
    "label": "RefreshGraphLinks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshGraphLinks(UEdGraph* SoundClassGraph)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; # endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(Transient)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = Engine, abstract, hidecategories = Object, editinlinenew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PostDuplicate(EDuplicateMode::Type DuplicateMode)"
  },
  {
    "label": "PreEditChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreEditChange(FProperty* PropertyAboutToChange)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = SoundSubmix, meta = (EditCondition = \"!bIsDynamic\"))"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<USoundSubmixBase>)",
    "insertText": "GetParent(Audio::FDeviceId InDeviceId)"
  },
  {
    "label": "SetParentSubmix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParentSubmix(USoundSubmixBase* InParentSubmix, bool bModifyAssets = true)"
  },
  {
    "label": "DynamicConnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DynamicConnect(const UObject* WorldContextObject, USoundSubmixBase* Parent)"
  },
  {
    "label": "DynamicConnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DynamicConnect(FAudioDeviceHandle Handle, USoundSubmixBase* Parent)"
  },
  {
    "label": "DynamicDisconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DynamicDisconnect(const UObject* WorldContextObject)"
  },
  {
    "label": "DynamicDisconnect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DynamicDisconnect(FAudioDeviceHandle Handle)"
  },
  {
    "label": "IsDynamic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamic(const bool bIncludeAncestors)"
  },
  {
    "label": "FindDynamicAncestor()",
    "kind": "Method",
    "detail": "Function (USoundSubmixBase*)",
    "insertText": "FindDynamicAncestor()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Linear = 0,Decibels,} ;)",
    "insertText": "UCLASS(config = Engine, hidecategories = Object, editinlinenew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = SoundSubmix)"
  },
  {
    "label": "StartRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecordingOutput(FAudioDevice* InDevice, float ExpectedDuration)"
  },
  {
    "label": "StopRecordingOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingOutput(FAudioDevice* InDevice, EAudioRecordingExportType ExportType, const FString& Name, FString Path, USoundWave* ExistingSoundWaveToOverwrite = nullptr)"
  },
  {
    "label": "StartEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEnvelopeFollowing(FAudioDevice* InDevice)"
  },
  {
    "label": "StopEnvelopeFollowing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopEnvelopeFollowing(FAudioDevice* InDevice)"
  },
  {
    "label": "StartSpectralAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartSpectralAnalysis(FAudioDevice* InDevice, EFFTSize FFTSize = EFFTSize::DefaultSize, EFFTPeakInterpolationMethod InterpolationMethod = EFFTPeakInterpolationMethod::Linear, EFFTWindowType WindowType = EFFTWindowType::Hann, float HopSize = 0, EAudioSpectrumType SpectrumType = EAudioSpectrumType::MagnitudeSpectrum)"
  },
  {
    "label": "StopSpectralAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopSpectralAnalysis(FAudioDevice* InDevice)"
  },
  {
    "label": "GetSpectrumAnalyzerSettings()",
    "kind": "Method",
    "detail": "Function (FSoundSpectrumAnalyzerSettings)",
    "insertText": "GetSpectrumAnalyzerSettings(EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType)"
  },
  {
    "label": "GetSpectrumAnalysisDelegateSettings()",
    "kind": "Method",
    "detail": "Function (FSoundSpectrumAnalyzerDelegateSettings)",
    "insertText": "GetSpectrumAnalysisDelegateSettings(const TArray<FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PushModulationChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushModulationChanges()"
  },
  {
    "label": "GetAudioDeviceFrom()",
    "kind": "Method",
    "detail": "Function (FAudioDevice*)",
    "insertText": "GetAudioDeviceFrom(const UObject* WorldContextObject)"
  },
  {
    "label": "InitDeprecatedDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDeprecatedDefaults()"
  },
  {
    "label": "HandleVersionMigration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVersionMigration(const int32 Version)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(config = Engine, hidecategories = Object, editinlinenew, BlueprintType, Meta = (DisplayName = \"Sound Submix Soundfield\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API ISoundfieldFactory* GetSoundfieldFactoryForSubmix()"
  },
  {
    "label": "GetSoundfieldEncodingSettings()",
    "kind": "Method",
    "detail": "Function (const USoundfieldEncodingSettingsBase*)",
    "insertText": "GetSoundfieldEncodingSettings()"
  },
  {
    "label": "GetSoundfieldProcessors()",
    "kind": "Method",
    "detail": "Function (TArray<USoundfieldEffectBase*>)",
    "insertText": "GetSoundfieldProcessors()"
  },
  {
    "label": "GetSubmixFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSubmixFormat()"
  },
  {
    "label": "GetEncodingSettings()",
    "kind": "Method",
    "detail": "Function (const USoundfieldEncodingSettingsBase*)",
    "insertText": "GetEncodingSettings()"
  },
  {
    "label": "SanitizeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SanitizeLinks()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(config = Engine, hidecategories = Object, editinlinenew, BlueprintType, Meta = (DisplayName = \"Sound Submix Endpoint\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API IAudioEndpointFactory* GetAudioEndpointForSubmix()"
  },
  {
    "label": "GetEndpointSettings()",
    "kind": "Method",
    "detail": "Function (const UAudioEndpointSettingsBase*)",
    "insertText": "GetEndpointSettings()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config = Engine, hidecategories = Object, editinlinenew, BlueprintType, Meta = (DisplayName = \"Sound Submix Soundfield Endpoint\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API ISoundfieldEndpointFactory* GetSoundfieldEndpointForSubmix()"
  },
  {
    "label": "RecurseCheckChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecurseCheckChild(const USoundSubmix* ChildSoundSubmix)"
  },
  {
    "label": "ForEachStaticChildRecursive()",
    "kind": "Method",
    "detail": "Function (# endif } ; namespace SubmixUtils { void)",
    "insertText": "ForEachStaticChildRecursive(USoundSubmixBase* StartingPoint, const TFunction<void(USoundSubmixBase*)>& Op)"
  },
  {
    "label": "AreSubmixFormatsCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreSubmixFormatsCompatible(const USoundSubmixBase* ChildSubmix, const USoundSubmixBase* ParentSubmix)"
  },
  {
    "label": "FindInGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindInGraph(const USoundSubmixBase* InEntryPoint, const USoundSubmixBase* InToMatch, bool bShouldAcsend, FAudioDeviceHandle InDevice = {})"
  },
  {
    "label": "FindRoot()",
    "kind": "Method",
    "detail": "Function (const USoundSubmixBase*)",
    "insertText": "FindRoot(const USoundSubmixBase* InStartingPoint, FAudioDeviceHandle InDevice)"
  },
  {
    "label": "RefreshEditorForSubmix()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "RefreshEditorForSubmix(const USoundSubmixBase* InSubmix)"
  }
]