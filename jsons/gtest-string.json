[
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "CloneCString()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_ # define GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_ # ifdef __BORLANDC__ # include<mem . h> # endif # include<string . h> # include<cstdint> # include<string> # include \" gtest / internal / gtest - port . h \" namespace testing { namespace internal { class GTEST_API_ String { public : const char*)",
    "insertText": "CloneCString(const char* c_str)"
  },
  {
    "label": "AnsiToUtf16()",
    "kind": "Method",
    "detail": "Function (# if GTEST_OS_WINDOWS_MOBILE LPCWSTR)",
    "insertText": "AnsiToUtf16(const char* c_str)"
  },
  {
    "label": "Utf16ToAnsi()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Utf16ToAnsi(LPCWSTR utf16_str)"
  },
  {
    "label": "CStringEquals()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CStringEquals(const char* lhs, const char* rhs)"
  },
  {
    "label": "ShowWideCString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ShowWideCString(const wchar_t* wide_c_str)"
  },
  {
    "label": "WideCStringEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs)"
  },
  {
    "label": "CaseInsensitiveCStringEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CaseInsensitiveCStringEquals(const char* lhs, const char* rhs)"
  },
  {
    "label": "CaseInsensitiveWideCStringEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CaseInsensitiveWideCStringEquals(const wchar_t* lhs, const wchar_t* rhs)"
  },
  {
    "label": "EndsWithCaseInsensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndsWithCaseInsensitive(const std::string& str, const std::string& suffix)"
  },
  {
    "label": "FormatIntWidth2()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatIntWidth2(int value)"
  },
  {
    "label": "FormatIntWidthN()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatIntWidthN(int value, int width)"
  },
  {
    "label": "FormatHexInt()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatHexInt(int value)"
  },
  {
    "label": "FormatHexUInt32()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatHexUInt32(uint32_t value)"
  },
  {
    "label": "FormatByte()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatByte(unsigned char value)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "String()"
  },
  {
    "label": "StringStreamToString()",
    "kind": "Method",
    "detail": "Function (} ; GTEST_API_ std::string)",
    "insertText": "StringStreamToString(::std::stringstream* stream)"
  }
]