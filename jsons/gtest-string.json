[
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "holding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "holding"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "String",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "String"
  },
  {
    "label": "AnsiToUtf16()",
    "kind": "Method",
    "detail": "Function (LPCWSTR)",
    "insertText": "AnsiToUtf16(const char* c_str)"
  },
  {
    "label": "CStringEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CStringEquals(const char* lhs, const char* rhs)"
  },
  {
    "label": "ShowWideCString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ShowWideCString(const wchar_t* wide_c_str)"
  },
  {
    "label": "WideCStringEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WideCStringEquals(const wchar_t* lhs, const wchar_t* rhs)"
  },
  {
    "label": "CaseInsensitiveCStringEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CaseInsensitiveCStringEquals(const char* lhs, const char* rhs)"
  },
  {
    "label": "CaseInsensitiveWideCStringEquals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CaseInsensitiveWideCStringEquals(const wchar_t* lhs,\n                                               const wchar_t* rhs)"
  },
  {
    "label": "EndsWithCaseInsensitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndsWithCaseInsensitive(const std::string& str,\n                                      const std::string& suffix)"
  },
  {
    "label": "FormatIntWidth2()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatIntWidth2(int value)"
  },
  {
    "label": "FormatIntWidthN()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatIntWidthN(int value, int width)"
  },
  {
    "label": "FormatHexInt()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatHexInt(int value)"
  },
  {
    "label": "FormatHexUInt32()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatHexUInt32(uint32_t value)"
  },
  {
    "label": "FormatByte()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatByte(unsigned char value)"
  },
  {
    "label": "String()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "String()"
  },
  {
    "label": "StringStreamToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "StringStreamToString(::std::stringstream* stream)"
  }
]