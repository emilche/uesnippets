[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "LDLT_Traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LDLT_Traits"
  },
  {
    "label": "SignMatrix",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SignMatrix"
  },
  {
    "label": "LDLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LDLT"
  },
  {
    "label": "SolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SolverBase"
  },
  {
    "label": "ldlt_inplace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ldlt_inplace"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_LDLT_H # define EIGEN_LDLT_H namespace Eigen { namespace internal { template<_MatrixType,int _UpLo> struct traits<LDLT<_MatrixType,_UpLo>> : traits<_MatrixType> { typedef MatrixXpr XprKind ; typedef SolverStorage StorageKind ; typedef int StorageIndex ; enum { Flags = 0 } ; } ; template<MatrixType,int UpLo> struct LDLT_Traits ; enum SignMatrix { PositiveSemiDef,NegativeSemiDef,ZeroSign,Indefinite } ; } template<_MatrixType,int _UpLo> class LDLT : public SolverBase<LDLT<_MatrixType,_UpLo>> { public : typedef _MatrixType MatrixType ; typedef SolverBase<LDLT> Base ; class SolverBase<LDLT> ;)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(LDLT)"
  },
  {
    "label": "LDLT()",
    "kind": "Method",
    "detail": "Function (MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime,UpLo = _UpLo } ; typedef Matrix<Scalar,RowsAtCompileTime,1,0,MaxRowsAtCompileTime,1> TmpMatrixType ; typedef Transpositions<RowsAtCompileTime,MaxRowsAtCompileTime> TranspositionType ; typedef PermutationMatrix<RowsAtCompileTime,MaxRowsAtCompileTime> PermutationType ; typedef internal::LDLT_Traits<MatrixType,UpLo> Traits ;)",
    "insertText": "LDLT() : m_matrix(), m_transpositions(), m_sign(internal::ZeroSign), m_isInitialized(false)"
  },
  {
    "label": "LDLT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LDLT(Index size) : m_matrix(size, size), m_transpositions(size), m_temporary(size), m_sign(internal::ZeroSign), m_isInitialized(false)"
  },
  {
    "label": "LDLT()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "LDLT(const EigenBase<InputType>& matrix) : m_matrix(matrix.rows(), matrix.cols()), m_transpositions(matrix.rows()), m_temporary(matrix.rows()), m_sign(internal::ZeroSign), m_isInitialized(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived())"
  },
  {
    "label": "LDLT()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "LDLT(EigenBase<InputType>& matrix) : m_matrix(matrix.derived()), m_transpositions(matrix.rows()), m_temporary(matrix.rows()), m_sign(internal::ZeroSign), m_isInitialized(false)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setZero()"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = false ; } Traits::MatrixU)",
    "insertText": "matrixU()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"LDLT is not initialized.\")"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (} Traits::MatrixL)",
    "insertText": "matrixL()"
  },
  {
    "label": "transpositionsP()",
    "kind": "Method",
    "detail": "Function (} const TranspositionType&)",
    "insertText": "transpositionsP()"
  },
  {
    "label": "isPositive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPositive()"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (# endif template<Derived> bool)",
    "insertText": "solveInPlace(MatrixBase<Derived> &bAndX)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (template<InputType> LDLT&)",
    "insertText": "compute(const EigenBase<InputType>& matrix)"
  },
  {
    "label": "rcond()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "rcond()"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (} template<Derived> LDLT&)",
    "insertText": "rankUpdate(const MatrixBase<Derived>& w, const RealScalar& alpha=1)"
  },
  {
    "label": "matrixLDLT()",
    "kind": "Method",
    "detail": "Function (const MatrixType&)",
    "insertText": "matrixLDLT()"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (const LDLT&)",
    "insertText": "adjoint()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "_solve_impl_transposed()",
    "kind": "Method",
    "detail": "Function (template<bool Conjugate,RhsType,DstType> void)",
    "insertText": "_solve_impl_transposed(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "check_template_parameters()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "check_template_parameters()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "unblocked()",
    "kind": "Method",
    "detail": "Function (} MatrixType m_matrix ; RealScalar m_l1_norm ; TranspositionType m_transpositions ; TmpMatrixType m_temporary ; internal::SignMatrix m_sign ; bool m_isInitialized ; ComputationInfo m_info ; } ; namespace internal { template<int UpLo> struct ldlt_inplace ; template<> struct ldlt_inplace<Lower> { template<MatrixType,TranspositionType,Workspace> bool)",
    "insertText": "unblocked(MatrixType& mat, TranspositionType& transpositions, Workspace& temp, SignMatrix& sign)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::abs ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef TranspositionType::StorageIndex IndexType ;)",
    "insertText": "eigen_assert(mat.rows()==mat.cols())"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (const Index size = mat .)",
    "insertText": "rows()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool found_zero_pivot = false ; bool ret = true ;)",
    "insertText": "if(size <= 1)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (transpositions .)",
    "insertText": "setIdentity()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (Index index_of_biggest_in_corner ; mat .)",
    "insertText": "diagonal().tail(size-k).cwiseAbs().maxCoeff(&index_of_biggest_in_corner)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (index_of_biggest_in_corner + = k ; transpositions .)",
    "insertText": "coeffRef(k) = IndexType(index_of_biggest_in_corner)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (Index s = size - index_of_biggest_in_corner - 1 ; mat .)",
    "insertText": "row(k).head(k).swap(mat.row(index_of_biggest_in_corner).head(k))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "col(k).tail(s).swap(mat.col(index_of_biggest_in_corner).tail(s))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(mat.coeffRef(k,k),mat.coeffRef(index_of_biggest_in_corner,index_of_biggest_in_corner))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (Scalar tmp = mat .)",
    "insertText": "coeffRef(i,k)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "coeffRef(i,k) = numext::conj(mat.coeffRef(index_of_biggest_in_corner,i))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "coeffRef(index_of_biggest_in_corner,i) = numext::conj(tmp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumTraits<Scalar>::IsComplex) mat.coeffRef(index_of_biggest_in_corner,k) = numext::conj(mat.coeff(index_of_biggest_in_corner,k))"
  },
  {
    "label": "A21()",
    "kind": "Method",
    "detail": "Function (} Index rs = size - k - 1 ; Block<MatrixType,Dynamic,1>)",
    "insertText": "A21(mat,k+1,k,rs,1)"
  },
  {
    "label": "A10()",
    "kind": "Method",
    "detail": "Function (Block<MatrixType,1,Dynamic>)",
    "insertText": "A10(mat,k,0,1,k)"
  },
  {
    "label": "A20()",
    "kind": "Method",
    "detail": "Function (Block<MatrixType,Dynamic,Dynamic>)",
    "insertText": "A20(mat,k+1,0,rs,k)"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (temp .)",
    "insertText": "head(k) = mat.diagonal().real().head(k).asDiagonal() * A10.adjoint()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "coeffRef(k,k) -= (A10 * temp.head(k)).value()"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (} RealScalar realAkk =)",
    "insertText": "real(mat.coeffRef(k,k))"
  },
  {
    "label": "pivot_is_valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pivot_is_valid(abs(realAkk) > RealScalar(0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (sign = ZeroSign ;)",
    "insertText": "for(Index j = 0; j<size; ++j)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (transpositions .)",
    "insertText": "coeffRef(j) = IndexType(j)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (ret =)",
    "insertText": "ret(mat.col(j).tail(size-j-1).array()==Scalar(0)).all()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return ret ; })",
    "insertText": "if((rs>0) && pivot_is_valid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(sign == NegativeSemiDef)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(sign == ZeroSign)"
  },
  {
    "label": "updateInPlace()",
    "kind": "Method",
    "detail": "Function (} } return ret ; } template<MatrixType,WDerived> bool)",
    "insertText": "updateInPlace(MatrixType& mat, MatrixBase<WDerived>& w, const typename MatrixType::RealScalar& sigma=1)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(mat.cols() == size && w.size()==size)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealScalar alpha = 1 ;)",
    "insertText": "for(Index j = 0; j < size; j++)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (RealScalar dj =)",
    "insertText": "real(mat.coeff(j,j))"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (Scalar wj = w .)",
    "insertText": "coeff(j)"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (RealScalar swj2 = sigma*)",
    "insertText": "abs2(wj)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (RealScalar gamma = dj* alpha + swj2 ; mat .)",
    "insertText": "coeffRef(j,j)"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (alpha + = swj2 / dj ; Index rs = size - j - 1 ; w .)",
    "insertText": "tail(rs) -= wj * mat.col(j).tail(rs)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<MatrixType,TranspositionType,Workspace,WType> bool)",
    "insertText": "update(MatrixType& mat, const TranspositionType& transpositions, Workspace& tmp, const WType& w, const typename MatrixType::RealScalar& sigma=1)"
  },
  {
    "label": "updateInPlace()",
    "kind": "Method",
    "detail": "Function (tmp = transpositions* w ; return ldlt_inplace<Lower)",
    "insertText": "updateInPlace(mat,tmp,sigma)"
  },
  {
    "label": "matt()",
    "kind": "Method",
    "detail": "Function (Transpose<MatrixType>)",
    "insertText": "matt(mat)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,TranspositionType,Workspace,WType> EIGEN_STRONG_INLINE bool)",
    "insertText": "update(MatrixType& mat, TranspositionType& transpositions, Workspace& tmp, WType& w, const typename MatrixType::RealScalar& sigma=1)"
  },
  {
    "label": "getL()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType> struct LDLT_Traits<MatrixType,Lower> { typedef const TriangularView<const MatrixType,UnitLower> MatrixL ; typedef const TriangularView<const MatrixType::AdjointReturnType,UnitUpper> MatrixU ; MatrixL)",
    "insertText": "getL(const MatrixType& m)"
  },
  {
    "label": "getU()",
    "kind": "Method",
    "detail": "Function (} MatrixU)",
    "insertText": "getU(const MatrixType& m)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} } ; } template<MatrixType,int _UpLo> template<InputType> LDLT<MatrixType,_UpLo>& LDLT<MatrixType,_UpLo)",
    "insertText": "compute(const EigenBase<InputType>& a)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(a.rows()==a.cols())"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (m_matrix = a .)",
    "insertText": "derived()"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (m_l1_norm =)",
    "insertText": "RealScalar(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RealScalar abs_col_sum ;)",
    "insertText": "if(_UpLo == Lower) abs_col_sum = m_matrix.col(col).tail(size - col).template lpNorm<1>() + m_matrix.row(col).head(col).template lpNorm<1>()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} m_transpositions .)",
    "insertText": "resize(size)"
  },
  {
    "label": "unblocked()",
    "kind": "Method",
    "detail": "Function (m_sign = internal::ZeroSign ; m_info = internal::ldlt_inplace<UpLo)",
    "insertText": "unblocked(m_matrix, m_transpositions, m_temporary, m_sign)"
  },
  {
    "label": "rankUpdate()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; return* this ; } template<MatrixType,int _UpLo> template<Derived> LDLT<MatrixType,_UpLo>& LDLT<MatrixType,_UpLo)",
    "insertText": "rankUpdate(const MatrixBase<Derived>& w, const typename LDLT<MatrixType,_UpLo>::RealScalar& sigma)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_matrix.rows()==size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} else { m_matrix .)",
    "insertText": "resize(size,size)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (m_sign = sigma> = 0 ? internal::PositiveSemiDef : internal::NegativeSemiDef ; m_isInitialized = true ; } internal::ldlt_inplace<UpLo)",
    "insertText": "update(m_matrix, m_transpositions, m_temporary, w, sigma)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (_solve_impl_transposed<)",
    "insertText": "true(rhs, dst)"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (dst = m_transpositions* rhs ;)",
    "insertText": "matrixL().template conjugateIf<!Conjugate>().solveInPlace(dst)"
  },
  {
    "label": "vecD()",
    "kind": "Method",
    "detail": "Function (using std::abs ; const Diagonal<const MatrixType>::RealReturnType)",
    "insertText": "vecD(vectorD())"
  },
  {
    "label": "tolerance()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "tolerance(std::numeric_limits<RealScalar>::min)()"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "matrixL().transpose().template conjugateIf<Conjugate>().solveInPlace(dst)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (dst = m_transpositions .)",
    "insertText": "transpose()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_matrix.rows() == bAndX.rows())"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (bAndX = this ->)",
    "insertText": "solve(bAndX)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "res(size,size)"
  },
  {
    "label": "vectorD()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "vectorD().real().asDiagonal()"
  },
  {
    "label": "transpositionsP()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "transpositionsP().transpose()"
  },
  {
    "label": "ldlt()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const LDLT<MatrixBase<Derived>::PlainObject> MatrixBase<Derived)",
    "insertText": "ldlt()"
  }
]