[
  {
    "label": "FPThreadEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPThreadEvent"
  },
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "LockEventMutex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / AssertionMacros . h \" # include \" HAL / Event . h \" class FPThreadEvent : public FEvent { typedef enum { TRIGGERED_NONE,TRIGGERED_ONE,TRIGGERED_ALL,} TriggerType ; bool bInitialized ; bool bIsManualReset ; volatile TriggerType Triggered ; volatile int32 WaitingThreads ; pthread_mutex_t Mutex ; pthread_cond_t Condition ; void)",
    "insertText": "LockEventMutex()"
  },
  {
    "label": "pthread_mutex_lock()",
    "kind": "Method",
    "detail": "Function (const int rc =)",
    "insertText": "pthread_mutex_lock(&Mutex)"
  },
  {
    "label": "UnlockEventMutex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockEventMutex()"
  },
  {
    "label": "pthread_mutex_unlock()",
    "kind": "Method",
    "detail": "Function (const int rc =)",
    "insertText": "pthread_mutex_unlock(&Mutex)"
  },
  {
    "label": "SubtractTimevals()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubtractTimevals(const struct timeval *FromThis, struct timeval *SubThis, struct timeval *Difference)"
  },
  {
    "label": "nsec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "nsec(SubThis->tv_usec - FromThis->tv_usec)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SubThis -> tv_usec - = 1 0 0 0 0 0 0* nsec ; SubThis -> tv_sec + = nsec ; })",
    "insertText": "if(FromThis->tv_usec - SubThis->tv_usec > 1000000)"
  },
  {
    "label": "nsec()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "nsec(FromThis->tv_usec - SubThis->tv_usec)"
  },
  {
    "label": "FPThreadEvent()",
    "kind": "Method",
    "detail": "Function (SubThis -> tv_usec + = 1 0 0 0 0 0 0* nsec ; SubThis -> tv_sec - = nsec ; } Difference -> tv_sec = FromThis -> tv_sec - SubThis -> tv_sec ; Difference -> tv_usec = FromThis -> tv_usec - SubThis -> tv_usec ; } public :)",
    "insertText": "FPThreadEvent()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trigger()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bInitialized = false ;)",
    "insertText": "while(WaitingThreads)"
  },
  {
    "label": "pthread_cond_destroy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pthread_cond_destroy(&Condition)"
  },
  {
    "label": "pthread_mutex_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_mutex_destroy(&Mutex)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Create(bool _bIsManualReset = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool RetVal = false ; Triggered = TRIGGERED_NONE ; bIsManualReset = _bIsManualReset ;)",
    "insertText": "if(pthread_mutex_init(&Mutex, nullptr) == 0)"
  },
  {
    "label": "IsManualReset()",
    "kind": "Method",
    "detail": "Function (} } return RetVal ; } bool)",
    "insertText": "IsManualReset()"
  },
  {
    "label": "TriggerForStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerForStats()"
  },
  {
    "label": "pthread_cond_broadcast()",
    "kind": "Method",
    "detail": "Function (Triggered = TRIGGERED_ALL ; int rc =)",
    "insertText": "pthread_cond_broadcast(&Condition)"
  },
  {
    "label": "pthread_cond_signal()",
    "kind": "Method",
    "detail": "Function (} else { Triggered = TRIGGERED_ONE ; int rc =)",
    "insertText": "pthread_cond_signal(&Condition)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "ResetForStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetForStats()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Wait(uint32 WaitTime = (uint32)-1, const bool bIgnoreThreadIdleStats = false)"
  }
]