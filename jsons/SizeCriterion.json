[
  {
    "label": "FCurvePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePoint"
  },
  {
    "label": "FSizeCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSizeCriterion"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FMinSizeCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMinSizeCriterion"
  },
  {
    "label": "FMaxSizeCriterion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaxSizeCriterion"
  },
  {
    "label": "FSizeCriterion()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Mesh / Criteria / Criterion . h \" namespace UE::CADKernel { struct FCurvePoint ; class FSizeCriterion : public FCriterion { class FEntity ; protected : double Size ;)",
    "insertText": "FSizeCriterion(double InSize = 1.) : Size(InSize)"
  },
  {
    "label": "ComputeSizeCriterionValue()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeSizeCriterionValue(double InDeltaU, double ChordLength)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Ar<<Size ; } double)",
    "insertText": "Value()"
  },
  {
    "label": "FMinSizeCriterion()",
    "kind": "Method",
    "detail": "Function (} ; class FMinSizeCriterion : public FSizeCriterion { class FEntity ; protected :)",
    "insertText": "FMinSizeCriterion(double InSize = 0.05) : FSizeCriterion(InSize)"
  },
  {
    "label": "GetCriterionType()",
    "kind": "Method",
    "detail": "Function (} public : ECriterion)",
    "insertText": "GetCriterionType()"
  },
  {
    "label": "UpdateDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDelta(double InDeltaU, double InUSag, double InDiagonalSag, double InVSag, double ChordLength, double DiagonalLength, double& OutSagDeltaUMax, double& OutSagDeltaUMin, FIsoCurvature& SurfaceCurvature)"
  },
  {
    "label": "FMaxSizeCriterion()",
    "kind": "Method",
    "detail": "Function (} ; class FMaxSizeCriterion : public FSizeCriterion { class FEntity ; protected :)",
    "insertText": "FMaxSizeCriterion(double InSize = 10000.) : FSizeCriterion(InSize)"
  }
]