[
  {
    "label": "uniform_int_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uniform_int_distribution"
  },
  {
    "label": "uniform_real_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uniform_real_distribution"
  },
  {
    "label": "TagTypeCompare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TagTypeCompare"
  },
  {
    "label": "IntervalClosedClosedTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalClosedClosedTag"
  },
  {
    "label": "IntervalClosedOpenTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalClosedOpenTag"
  },
  {
    "label": "IntervalOpenClosedTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalOpenClosedTag"
  },
  {
    "label": "IntervalOpenOpenTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalOpenOpenTag"
  },
  {
    "label": "UniformDistributionWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UniformDistributionWrapper"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_UNIFORM_HELPER_H_ # define ABSL_RANDOM_INTERNAL_UNIFORM_HELPER_H_ # include<cmath> # include<limits> # include<type_traits> # include \" absl / base / config . h \" # include \" absl / meta / type_traits . h \" # include \" absl / random / internal / traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<IntType> class uniform_int_distribution ; template<RealType> class uniform_real_distribution ; namespace random_internal { template<T> struct TagTypeCompare { } ; template<T> bool)",
    "insertText": "operator(TagTypeCompare<T>, TagTypeCompare<T>)"
  },
  {
    "label": "uniform_lower_bound()",
    "kind": "Method",
    "detail": "Function (} template<FloatType,Tag> absl::enable_if_t<absl::conjunction<std::is_floating_point<FloatType>,absl::disjunction<std::is_same<Tag,IntervalOpenClosedTag>,std::is_same<Tag,IntervalOpenOpenTag>>>::value,FloatType>)",
    "insertText": "uniform_lower_bound(Tag, FloatType a, FloatType b)"
  },
  {
    "label": "uniform_lower_bound()",
    "kind": "Method",
    "detail": "Function (} template<NumType,Tag> absl::enable_if_t<absl::disjunction<std::is_same<Tag,IntervalClosedClosedTag>,std::is_same<Tag,IntervalClosedOpenTag>>::value,NumType>)",
    "insertText": "uniform_lower_bound(Tag, NumType a, NumType)"
  },
  {
    "label": "uniform_upper_bound()",
    "kind": "Method",
    "detail": "Function (} template<FloatType,Tag> absl::enable_if_t<absl::conjunction<std::is_floating_point<FloatType>,absl::disjunction<std::is_same<Tag,IntervalClosedOpenTag>,std::is_same<Tag,IntervalOpenOpenTag>>>::value,FloatType>)",
    "insertText": "uniform_upper_bound(Tag, FloatType, FloatType b)"
  },
  {
    "label": "is_uniform_range_valid()",
    "kind": "Method",
    "detail": "Function (} template<FloatType> absl::enable_if_t<std::is_floating_point<FloatType>::value,bool>)",
    "insertText": "is_uniform_range_valid(FloatType a, FloatType b)"
  },
  {
    "label": "is_uniform_range_valid()",
    "kind": "Method",
    "detail": "Function (} template<IntType> absl::enable_if_t<IsIntegral<IntType>::value,bool>)",
    "insertText": "is_uniform_range_valid(IntType a, IntType b)"
  },
  {
    "label": "UniformDistributionWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UniformDistributionWrapper(NumType lo, NumType hi) : UniformDistribution<NumType>( uniform_lower_bound<NumType>(IntervalClosedOpenTag(), lo, hi), uniform_upper_bound<NumType>(IntervalClosedOpenTag(), lo, hi))"
  },
  {
    "label": "UniformDistributionWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UniformDistributionWrapper() : UniformDistribution<NumType>(std::numeric_limits<NumType>::lowest(), (std::numeric_limits<NumType>::max)())"
  }
]