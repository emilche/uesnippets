[
  {
    "label": "FProcState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcState"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "FProcEnumInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcEnumInfo"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "kinfo_proc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kinfo_proc"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "kinfo_proc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kinfo_proc"
  },
  {
    "label": "kinfo_proc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kinfo_proc"
  },
  {
    "label": "FProcState()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FProcState(pid_t InProcessId, bool bInFireAndForget)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "GetReturnCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReturnCode(int32* ReturnCodePtr)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "FProcEnumerator()",
    "kind": "Method",
    "detail": "Function (Constructor)",
    "insertText": "FProcEnumerator()"
  },
  {
    "label": "MoveNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveNext()"
  },
  {
    "label": "FreeDllHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDllHandle( void* DllHandle )"
  },
  {
    "label": "GetCurrentProcessId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentProcessId()"
  },
  {
    "label": "GetCurrentCoreNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentCoreNumber()"
  },
  {
    "label": "SetCurrentWorkingDirectoryToBaseDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWorkingDirectoryToBaseDir()"
  },
  {
    "label": "GetCurrentWorkingDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentWorkingDirectory()"
  },
  {
    "label": "GenerateApplicationPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateApplicationPath( const FString& AppName, EBuildConfiguration BuildConfiguration)"
  },
  {
    "label": "GetModulesDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetModulesDirectory()"
  },
  {
    "label": "CanLaunchURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLaunchURL(const TCHAR* URL)"
  },
  {
    "label": "LaunchURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchURL(const TCHAR* URL, const TCHAR* Parms, FString* Error)"
  },
  {
    "label": "GetGameBundleId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameBundleId()"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc( const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild = nullptr )"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc( const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild, void* PipeStdErrChild )"
  },
  {
    "label": "OpenProcess()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "OpenProcess(uint32 ProcessID)"
  },
  {
    "label": "IsProcRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcRunning( FProcHandle & ProcessHandle )"
  },
  {
    "label": "WaitForProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForProc( FProcHandle & ProcessHandle )"
  },
  {
    "label": "CloseProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseProc( FProcHandle & ProcessHandle )"
  },
  {
    "label": "TerminateProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateProc( FProcHandle & ProcessHandle, bool KillTree = false )"
  },
  {
    "label": "GetProcReturnCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProcReturnCode( FProcHandle & ProcHandle, int32* ReturnCode )"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning( const TCHAR* ProcName )"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning( uint32 ProcessId )"
  },
  {
    "label": "GetApplicationName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetApplicationName( uint32 ProcessId )"
  },
  {
    "label": "IsSandboxedApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSandboxedApplication()"
  },
  {
    "label": "LaunchFileInDefaultExternalApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchFileInDefaultExternalApplication( const TCHAR* FileName, const TCHAR* Parms = NULL, ELaunchVerb::Type Verb = ELaunchVerb::Open, bool bPromptToOpenOnFailure = true)"
  },
  {
    "label": "ExploreFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExploreFolder( const TCHAR* FilePath )"
  },
  {
    "label": "ClosePipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClosePipe( void* ReadPipe, void* WritePipe )"
  },
  {
    "label": "CreatePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePipe(void*& ReadPipe, void*& WritePipe, bool bWritePipeLocal = false)"
  },
  {
    "label": "ReadPipe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ReadPipe( void* ReadPipe )"
  },
  {
    "label": "ReadPipeToArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPipeToArray(void* ReadPipe, TArray<uint8> & Output)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const FString& Message, FString* OutWritten = nullptr)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const uint8* Data, const int32 DataLength, int32* OutDataLength = nullptr)"
  },
  {
    "label": "ExecProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecProcess(const TCHAR* URL, const TCHAR* Params, int32* OutReturnCode, FString* OutStdOut, FString* OutStdErr, const TCHAR* OptionalWorkingDirectory = NULL, bool bShouldEndWithParentProcess = false)"
  },
  {
    "label": "SetThreadAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadAffinityMask(uint64 AffinityMask)"
  },
  {
    "label": "CreateProcInternal()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProcInternal(const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeStdOutChild, void* PipeStdErrChild, void *PipeStdInChild)"
  }
]