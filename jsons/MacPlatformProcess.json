[
  {
    "label": "FProcState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcState"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "FProcEnumInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcEnumInfo"
  },
  {
    "label": "kinfo_proc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "kinfo_proc"
  },
  {
    "label": "FProcState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Apple / ApplePlatformProcess . h \" # include<sys / sysctl . h> struct FProcState {)",
    "insertText": "FProcState() : ProcessId(0) , bIsRunning(false) , bHasBeenWaitedFor(false) , ReturnCode(-1) , bFireAndForget(false)"
  },
  {
    "label": "FProcState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProcState(pid_t InProcessId, bool bInFireAndForget)"
  },
  {
    "label": "FProcState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FProcState()"
  },
  {
    "label": "GetReturnCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReturnCode(int32* ReturnCodePtr)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wait()"
  },
  {
    "label": "FProcState()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FProcState(const FProcState& Other) : ProcessId(Other.ProcessId) , bIsRunning(Other.bIsRunning) , bHasBeenWaitedFor(Other.bHasBeenWaitedFor) , ReturnCode(Other.ReturnCode) , bFireAndForget(Other.bFireAndForget)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FProcState&)",
    "insertText": "operator(const FProcState& Other)"
  },
  {
    "label": "FProcHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProcHandle(FProcState* InHandle) : ProcInfo(InHandle), OpenedPid(-1)"
  },
  {
    "label": "FProcHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProcHandle(pid_t InProcPid) : ProcInfo(nullptr), OpenedPid(InProcPid)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} pid_t)",
    "insertText": "Get()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (ProcInfo = nullptr ; OpenedPid = - 1 ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FProcEnumerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProcEnumerator(const FProcEnumerator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FProcEnumerator&)",
    "insertText": "operator(const FProcEnumerator&)"
  },
  {
    "label": "FProcEnumerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FProcEnumerator()"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (FProcEnumInfo)",
    "insertText": "GetCurrent()"
  },
  {
    "label": "MoveNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveNext()"
  },
  {
    "label": "GetPID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPID()"
  },
  {
    "label": "GetParentPID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetParentPID()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetFullPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullPath()"
  },
  {
    "label": "FProcEnumInfo()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FProcEnumInfo(struct kinfo_proc InProcInfo)"
  },
  {
    "label": "GetDllHandle()",
    "kind": "Method",
    "detail": "Function (struct kinfo_proc ProcInfo ; } ; void*)",
    "insertText": "GetDllHandle(const TCHAR* Filename)"
  },
  {
    "label": "FreeDllHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDllHandle(void* DllHandle)"
  },
  {
    "label": "GetDllExport()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetDllExport(void* DllHandle, const TCHAR* ProcName)"
  },
  {
    "label": "GetCurrentProcessId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentProcessId()"
  },
  {
    "label": "GetCurrentCoreNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentCoreNumber()"
  },
  {
    "label": "BaseDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "BaseDir()"
  },
  {
    "label": "ComputerName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ComputerName()"
  },
  {
    "label": "UserName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserName(bool bOnlyAlphaNumeric = true)"
  },
  {
    "label": "SetCurrentWorkingDirectoryToBaseDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWorkingDirectoryToBaseDir()"
  },
  {
    "label": "GetCurrentWorkingDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentWorkingDirectory()"
  },
  {
    "label": "ExecutablePath()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ExecutablePath()"
  },
  {
    "label": "ExecutableName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ExecutableName(bool bRemoveExtension = true)"
  },
  {
    "label": "GenerateApplicationPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateApplicationPath(const FString& AppName, EBuildConfiguration BuildConfiguration)"
  },
  {
    "label": "GetModuleExtension()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetModuleExtension()"
  },
  {
    "label": "GetBinariesSubdirectory()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetBinariesSubdirectory()"
  },
  {
    "label": "GetModulesDirectory()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetModulesDirectory()"
  },
  {
    "label": "CanLaunchURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLaunchURL(const TCHAR* URL)"
  },
  {
    "label": "LaunchURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchURL(const TCHAR* URL, const TCHAR* Parms, FString* Error)"
  },
  {
    "label": "GetGameBundleId()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetGameBundleId()"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc(const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild = nullptr)"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc(const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild, void* PipeStdErrChild)"
  },
  {
    "label": "OpenProcess()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "OpenProcess(uint32 ProcessID)"
  },
  {
    "label": "IsProcRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcRunning(FProcHandle & ProcessHandle)"
  },
  {
    "label": "WaitForProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForProc(FProcHandle & ProcessHandle)"
  },
  {
    "label": "CloseProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseProc(FProcHandle & ProcessHandle)"
  },
  {
    "label": "TerminateProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateProc(FProcHandle & ProcessHandle, bool KillTree = false)"
  },
  {
    "label": "GetProcReturnCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProcReturnCode(FProcHandle & ProcHandle, int32* ReturnCode)"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning(const TCHAR* ProcName)"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning(uint32 ProcessId)"
  },
  {
    "label": "GetApplicationName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetApplicationName(uint32 ProcessId)"
  },
  {
    "label": "IsSandboxedApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSandboxedApplication()"
  },
  {
    "label": "LaunchFileInDefaultExternalApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchFileInDefaultExternalApplication(const TCHAR* FileName, const TCHAR* Parms = NULL, ELaunchVerb::Type Verb = ELaunchVerb::Open, bool bPromptToOpenOnFailure = true)"
  },
  {
    "label": "ExploreFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExploreFolder(const TCHAR* FilePath)"
  },
  {
    "label": "CreateRunnableThread()",
    "kind": "Method",
    "detail": "Function (FRunnableThread*)",
    "insertText": "CreateRunnableThread()"
  },
  {
    "label": "ClosePipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClosePipe(void* ReadPipe, void* WritePipe)"
  },
  {
    "label": "CreatePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePipe(void*& ReadPipe, void*& WritePipe, bool bWritePipeLocal = false)"
  },
  {
    "label": "ReadPipe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ReadPipe(void* ReadPipe)"
  },
  {
    "label": "ReadPipeToArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPipeToArray(void* ReadPipe, TArray<uint8> & Output)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const FString& Message, FString* OutWritten = nullptr)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const uint8* Data, const int32 DataLength, int32* OutDataLength = nullptr)"
  },
  {
    "label": "ExecProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecProcess(const TCHAR* URL, const TCHAR* Params, int32* OutReturnCode, FString* OutStdOut, FString* OutStdErr, const TCHAR* OptionalWorkingDirectory = NULL, bool bShouldEndWithParentProcess = false)"
  },
  {
    "label": "SetThreadAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadAffinityMask(uint64 AffinityMask)"
  },
  {
    "label": "UserPreferencesDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserPreferencesDir()"
  },
  {
    "label": "UserLogsDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserLogsDir()"
  },
  {
    "label": "CreateProcInternal()",
    "kind": "Method",
    "detail": "Function (private : FProcHandle)",
    "insertText": "CreateProcInternal(const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeStdOutChild, void* PipeStdErrChild, void *PipeStdInChild)"
  }
]