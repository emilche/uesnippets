[
  {
    "label": "SamplesRateCounter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplesRateCounter"
  },
  {
    "label": "FrameCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameCounters"
  },
  {
    "label": "StreamCodecInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamCodecInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "StreamStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamStats"
  },
  {
    "label": "AnalyzerStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AnalyzerStats"
  },
  {
    "label": "StatsKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StatsKey"
  },
  {
    "label": "VideoStreamsInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamsInfo"
  },
  {
    "label": "DefaultVideoQualityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultVideoQualityAnalyzer"
  },
  {
    "label": "DefaultVideoQualityAnalyzerOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultVideoQualityAnalyzerOptions"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_SHARED_OBJECTS_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_DEFAULT_VIDEO_QUALITY_ANALYZER_SHARED_OBJECTS_H_ # include<cstdint> # include<map> # include<memory> # include<ostream> # include<set> # include<string> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / strings / string_builder . h \" namespace webrtc { size_t kDefaultMaxFramesInFlightPerStream = 2 7 0 ; class SamplesRateCounter { public : void)",
    "insertText": "AddEvent(Timestamp event_time)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (private : Timestamp event_first_time_ =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (int64_t events_count_ = 0 ; } ; struct FrameCounters { int64_t captured = 0 ; int64_t pre_encoded = 0 ; int64_t encoded = 0 ; int64_t received = 0 ; int64_t decoded = 0 ; int64_t rendered = 0 ; int64_t dropped = 0 ; int64_t failed_to_decode = 0 ; } ; struct StreamCodecInfo { std::string codec_name ; uint16_t first_frame_id ; uint16_t last_frame_id ; Timestamp switched_on_at =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; std::ostream&)",
    "insertText": "operator(std::ostream& os, const StreamCodecInfo& state)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (rtc::StringBuilder&)",
    "insertText": "operator(rtc::StringBuilder& sb, const StreamCodecInfo& state)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const StreamCodecInfo& a, const StreamCodecInfo& b)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (enum class FrameDropPhase : int { kBeforeEncoder,kByEncoder,kTransport,kByDecoder,kAfterDecoder,kLastValue } ; std::string)",
    "insertText": "ToString(FrameDropPhase phase)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "operator(std::ostream& os, FrameDropPhase phase)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (rtc::StringBuilder&)",
    "insertText": "operator(rtc::StringBuilder& sb, FrameDropPhase phase)"
  },
  {
    "label": "StreamStats()",
    "kind": "Method",
    "detail": "Function (struct StreamStats {)",
    "insertText": "StreamStats(Timestamp stream_started_time)"
  },
  {
    "label": "StatsKey()",
    "kind": "Method",
    "detail": "Function (Timestamp stream_started_time ; SamplesStatsCounter psnr ; SamplesStatsCounter ssim ; SamplesStatsCounter transport_time_ms ; SamplesStatsCounter total_delay_incl_transport_ms ; SamplesStatsCounter time_between_rendered_frames_ms ; SamplesRateCounter capture_frame_rate ; SamplesRateCounter encode_frame_rate ; SamplesStatsCounter encode_time_ms ; SamplesStatsCounter decode_time_ms ; SamplesStatsCounter receive_to_render_time_ms ; SamplesStatsCounter skipped_between_rendered ; SamplesStatsCounter freeze_time_ms ; SamplesStatsCounter time_between_freezes_ms ; SamplesStatsCounter resolution_of_decoded_frame ; SamplesStatsCounter target_encode_bitrate ; int64_t total_encoded_images_payload = 0 ; std::map<FrameDropPhase,int64_t> dropped_by_phase ; int64_t num_send_key_frames = 0 ; int64_t num_recv_key_frames = 0 ; SamplesStatsCounter recv_key_frame_size_bytes ; SamplesStatsCounter recv_delta_frame_size_bytes ; std::vector<StreamCodecInfo> encoders ; std::vector<StreamCodecInfo> decoders ; } ; struct AnalyzerStats { SamplesStatsCounter comparisons_queue_size ; int64_t comparisons_done = 0 ; int64_t cpu_overloaded_comparisons_done = 0 ; int64_t memory_overloaded_comparisons_done = 0 ; SamplesStatsCounter frames_in_flight_left_count ; SamplesStatsCounter on_frame_captured_processing_time_ms ; SamplesStatsCounter on_frame_pre_encode_processing_time_ms ; SamplesStatsCounter on_frame_encoded_processing_time_ms ; SamplesStatsCounter on_frame_pre_decode_processing_time_ms ; SamplesStatsCounter on_frame_decoded_processing_time_ms ; SamplesStatsCounter on_frame_rendered_processing_time_ms ; SamplesStatsCounter on_decoder_error_processing_time_ms ; } ; struct StatsKey {)",
    "insertText": "StatsKey(std::string stream_label, std::string receiver) : stream_label(std::move(stream_label)), receiver(std::move(receiver))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::string stream_label ; std::string receiver ; } ; bool)",
    "insertText": "operator(const StatsKey& a, const StatsKey& b)"
  },
  {
    "label": "GetStatsKeys()",
    "kind": "Method",
    "detail": "Function (class VideoStreamsInfo { public : std::set<StatsKey>)",
    "insertText": "GetStatsKeys()"
  },
  {
    "label": "GetStreams()",
    "kind": "Method",
    "detail": "Function (std::set<std::string>)",
    "insertText": "GetStreams()"
  },
  {
    "label": "GetStreams()",
    "kind": "Method",
    "detail": "Function (std::set<std::string>)",
    "insertText": "GetStreams(absl::string_view sender_name)"
  },
  {
    "label": "GetSender()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::string>)",
    "insertText": "GetSender(absl::string_view stream_label)"
  },
  {
    "label": "GetReceivers()",
    "kind": "Method",
    "detail": "Function (std::set<std::string>)",
    "insertText": "GetReceivers(absl::string_view stream_label)"
  },
  {
    "label": "VideoStreamsInfo()",
    "kind": "Method",
    "detail": "Function (protected : class DefaultVideoQualityAnalyzer ;)",
    "insertText": "VideoStreamsInfo(std::map<std::string, std::string> stream_to_sender, std::map<std::string, std::set<std::string>> sender_to_streams, std::map<std::string, std::set<std::string>> stream_to_receivers)"
  }
]