[
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "DateIntervalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DateIntervalFormat"
  },
  {
    "label": "DateIntervalSink",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DateIntervalSink"
  },
  {
    "label": "IntervalPatternIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IntervalPatternIndex"
  },
  {
    "label": "DateIntervalInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef __DTITVINF_H__ # define __DTITVINF_H__ # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / udat . h \" # include \" unicode / locid . h \" # include \" unicode / ucal . h \" # include \" unicode / dtptngen . h \" U_NAMESPACE_BEGIN class U_I18N_API DateIntervalInfo U_FINAL : public UObject { public :)",
    "insertText": "DateIntervalInfo(UErrorCode& status)"
  },
  {
    "label": "DateIntervalInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateIntervalInfo(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "DateIntervalInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateIntervalInfo(const DateIntervalInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DateIntervalInfo&)",
    "insertText": "operator(const DateIntervalInfo&)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (DateIntervalInfo*)",
    "insertText": "clone(void)"
  },
  {
    "label": "DateIntervalInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DateIntervalInfo()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const DateIntervalInfo& other)"
  },
  {
    "label": "setIntervalPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIntervalPattern(const UnicodeString& skeleton, UCalendarDateFields lrgDiffCalUnit, const UnicodeString& intervalPattern, UErrorCode& status)"
  },
  {
    "label": "getIntervalPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getIntervalPattern(const UnicodeString& skeleton, UCalendarDateFields field, UnicodeString& result, UErrorCode& status)"
  },
  {
    "label": "getFallbackIntervalPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getFallbackIntervalPattern(UnicodeString& result)"
  },
  {
    "label": "setFallbackIntervalPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setFallbackIntervalPattern(const UnicodeString& fallbackPattern, UErrorCode& status)"
  },
  {
    "label": "getDefaultOrder()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "getDefaultOrder()"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "initializeData()",
    "kind": "Method",
    "detail": "Function (private : class DateIntervalFormat ; struct DateIntervalSink ; enum IntervalPatternIndex { kIPI_ERA,kIPI_YEAR,kIPI_MONTH,kIPI_DATE,kIPI_AM_PM,kIPI_HOUR,kIPI_MINUTE,kIPI_SECOND,kIPI_MAX_INDEX } ; public : # ifndef enum { kMaxIntervalPatternIndex = kIPI_MAX_INDEX } ; # endif private : void)",
    "insertText": "initializeData(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "setIntervalPatternInternally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIntervalPatternInternally(const UnicodeString& skeleton, UCalendarDateFields lrgDiffCalUnit, const UnicodeString& intervalPattern, UErrorCode& status)"
  },
  {
    "label": "getBestSkeleton()",
    "kind": "Method",
    "detail": "Function (const UnicodeString*)",
    "insertText": "getBestSkeleton(const UnicodeString& skeleton, int8_t& bestMatchDistanceInfo)"
  },
  {
    "label": "parseSkeleton()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "parseSkeleton(const UnicodeString& skeleton, int32_t* skeletonFieldWidth)"
  },
  {
    "label": "stringNumeric()",
    "kind": "Method",
    "detail": "Function (UBool U_EXPORT2)",
    "insertText": "stringNumeric(int32_t fieldWidth, int32_t anotherFieldWidth, char patternLetter)"
  },
  {
    "label": "calendarFieldToIntervalIndex()",
    "kind": "Method",
    "detail": "Function (IntervalPatternIndex U_EXPORT2)",
    "insertText": "calendarFieldToIntervalIndex(UCalendarDateFields field, UErrorCode& status)"
  },
  {
    "label": "deleteHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteHash(Hashtable* hTable)"
  },
  {
    "label": "initHash()",
    "kind": "Method",
    "detail": "Function (Hashtable*)",
    "insertText": "initHash(UErrorCode& status)"
  },
  {
    "label": "copyHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyHash(const Hashtable* source, Hashtable* target, UErrorCode& status)"
  }
]