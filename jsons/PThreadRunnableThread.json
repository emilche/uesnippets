[
  {
    "label": "FRunnableThreadPThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThreadPThread"
  },
  {
    "label": "sched_param",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sched_param"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / StringConv . h \" # include \" Logging / LogMacros . h \" # include \" CoreGlobals . h \" # include \" HAL / Event . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / ThreadManager . h \" # if PLATFORM_USE_PTHREADS class FRunnableThreadPThread : public FRunnableThread { protected : pthread_t Thread ; bool bThreadStartedAndNotCleanedUp ; typedef)",
    "insertText": "void(*PthreadEntryPoint)(void *arg)"
  },
  {
    "label": "TranslateThreadPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TranslateThreadPriority(EThreadPriority Priority)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (struct sched_param Sched ;)",
    "insertText": "Memzero(&Sched, sizeof(struct sched_param))"
  },
  {
    "label": "pthread_getschedparam()",
    "kind": "Method",
    "detail": "Function (int32 Policy = SCHED_RR ;)",
    "insertText": "pthread_getschedparam(InThread, &Policy, &Sched)"
  },
  {
    "label": "TranslateThreadPriority()",
    "kind": "Method",
    "detail": "Function (Sched . sched_priority =)",
    "insertText": "TranslateThreadPriority(NewPriority)"
  },
  {
    "label": "pthread_setschedparam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_setschedparam(InThread, Policy, &Sched)"
  },
  {
    "label": "CreateThreadWithName()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "CreateThreadWithName(pthread_t* HandlePtr, pthread_attr_t* AttrPtr, PthreadEntryPoint Proc, void* Arg, const ANSICHAR*)"
  },
  {
    "label": "GetDefaultStackSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetDefaultStackSize()"
  },
  {
    "label": "SetThreadAttr()",
    "kind": "Method",
    "detail": "Function (} return InStackSize ; } bool)",
    "insertText": "SetThreadAttr(pthread_attr_t *ThreadAttr, uint32 InStackSize, EThreadCreateFlags InCreateFlags)"
  },
  {
    "label": "AdjustStackSize()",
    "kind": "Method",
    "detail": "Function (InStackSize =)",
    "insertText": "AdjustStackSize(InStackSize)"
  },
  {
    "label": "StackSize()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "StackSize(size_t)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} return true ; } else {)",
    "insertText": "UE_LOG(LogHAL, Log, TEXT(\"Failed to init thread attr\"))"
  },
  {
    "label": "SpinPthread()",
    "kind": "Method",
    "detail": "Function (} } return false ; } bool)",
    "insertText": "SpinPthread(pthread_t* HandlePtr, bool* OutThreadCreated, PthreadEntryPoint Proc, uint32 InStackSize, EThreadCreateFlags InCreateFlags, void *Arg)"
  },
  {
    "label": "SetThreadAttr()",
    "kind": "Method",
    "detail": "Function (* OutThreadCreated = false ; pthread_attr_t ThreadAttr ; pthread_attr_t* ThreadAttrPtr =)",
    "insertText": "SetThreadAttr(&ThreadAttr, InStackSize, InCreateFlags)"
  },
  {
    "label": "CreateThreadWithName()",
    "kind": "Method",
    "detail": "Function (const int ThreadErrno =)",
    "insertText": "CreateThreadWithName(HandlePtr, ThreadAttrPtr, Proc, Arg, TCHAR_TO_ANSI(*ThreadName))"
  },
  {
    "label": "OutThreadCreated()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "OutThreadCreated(ThreadErrno == 0)"
  },
  {
    "label": "pthread_attr_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_attr_destroy(ThreadAttrPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!*OutThreadCreated)"
  },
  {
    "label": "_ThreadProc()",
    "kind": "Method",
    "detail": "Function (} return* OutThreadCreated ; } void* STDCALL)",
    "insertText": "_ThreadProc(void *pThis)"
  },
  {
    "label": "ThisThread()",
    "kind": "Method",
    "detail": "Function (FRunnableThreadPThread*)",
    "insertText": "ThisThread(FRunnableThreadPThread*)"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (ThisThread -> ThreadID =)",
    "insertText": "GetCurrentThreadId()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().AddThread(ThisThread->ThreadID, ThisThread)"
  },
  {
    "label": "SetThreadAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadAffinityMask(ThisThread->ThreadAffinityMask)"
  },
  {
    "label": "PreRun()",
    "kind": "Method",
    "detail": "Function (ThisThread ->)",
    "insertText": "PreRun()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (ThisThread ->)",
    "insertText": "Run()"
  },
  {
    "label": "PostRun()",
    "kind": "Method",
    "detail": "Function (ThisThread ->)",
    "insertText": "PostRun()"
  },
  {
    "label": "pthread_exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pthread_exit(NULL)"
  },
  {
    "label": "FRunnableThreadPThread_DestructorBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRunnableThreadPThread_DestructorBody()"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Kill(true)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkf(!bThreadStartedAndNotCleanedUp, TEXT(\"Thread still not cleaned up after Kill(true)!\"))"
  },
  {
    "label": "FRunnableThreadPThread()",
    "kind": "Method",
    "detail": "Function (ThreadID = 0 ; } public :)",
    "insertText": "FRunnableThreadPThread() : bThreadStartedAndNotCleanedUp(false)"
  },
  {
    "label": "FRunnableThreadPThread()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRunnableThreadPThread()"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetThreadPriority(EThreadPriority NewPriority)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (ThreadPriority = NewPriority ;)",
    "insertText": "SetThreadPriority(Thread, NewPriority)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Suspend(bool bShouldPause = 1)"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Kill(bool bShouldWait)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bDidExitOK = true ;)",
    "insertText": "if(Runnable)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (Runnable ->)",
    "insertText": "Stop()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bShouldWait && bThreadStartedAndNotCleanedUp)"
  },
  {
    "label": "pthread_join()",
    "kind": "Method",
    "detail": "Function (int JoinResult =)",
    "insertText": "pthread_join(Thread, nullptr)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(JoinResult != 0, LogHAL, Warning, TEXT(\"Failed to join thread %u (%s). (err=%d, %s)\"), ThreadID, *ThreadName, JoinResult, UTF8_TO_TCHAR(strerror(JoinResult)))"
  },
  {
    "label": "bDidExitOK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bDidExitOK(JoinResult == 0)"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (bThreadStartedAndNotCleanedUp = false ; } return bDidExitOK ; } void)",
    "insertText": "WaitForCompletion()"
  },
  {
    "label": "CreateInternal()",
    "kind": "Method",
    "detail": "Function (bThreadStartedAndNotCleanedUp = false ; } } protected : bool)",
    "insertText": "CreateInternal(FRunnable* InRunnable, const TCHAR* InThreadName, uint32 InStackSize = 0, EThreadPriority InThreadPri = TPri_Normal, uint64 InThreadAffinityMask = 0, EThreadCreateFlags InCreateFlags = EThreadCreateFlags::None)"
  },
  {
    "label": "GetSynchEventFromPool()",
    "kind": "Method",
    "detail": "Function (Runnable = InRunnable ; ThreadInitSyncEvent =)",
    "insertText": "GetSynchEventFromPool(true)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ThreadName = InThreadName ? InThreadName :)",
    "insertText": "TEXT(\"Unnamed UE4\")"
  },
  {
    "label": "SpinPthread()",
    "kind": "Method",
    "detail": "Function (ThreadPriority = InThreadPri ; ThreadAffinityMask = InThreadAffinityMask ; const bool ThreadCreated =)",
    "insertText": "SpinPthread(&Thread, &bThreadStartedAndNotCleanedUp, GetThreadEntryPoint(), InStackSize, InCreateFlags, this)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (ThreadInitSyncEvent ->)",
    "insertText": "Wait((uint32)-1)"
  },
  {
    "label": "SetThreadPriority()",
    "kind": "Method",
    "detail": "Function (ThreadPriority = TPri_Num ;)",
    "insertText": "SetThreadPriority(InThreadPri)"
  },
  {
    "label": "ReturnSynchEventToPool()",
    "kind": "Method",
    "detail": "Function (} else { Runnable = NULL ; })",
    "insertText": "ReturnSynchEventToPool(ThreadInitSyncEvent)"
  }
]