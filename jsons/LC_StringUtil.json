[
  {
    "label": "ToWideString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<string> namespace string { std::wstring)",
    "insertText": "ToWideString(const char* utf8Str)"
  },
  {
    "label": "ToWideString()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToWideString(const char* utf8Str, size_t count)"
  },
  {
    "label": "ToWideString()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToWideString(const std::string& str)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Replace(const std::string& str, const std::string& from, const std::string& to)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "Replace(const std::wstring& str, const std::wstring& from, const std::wstring& to)"
  },
  {
    "label": "ReplaceAll()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ReplaceAll(const std::string& str, const std::string& from, const std::string& to)"
  },
  {
    "label": "ReplaceAll()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ReplaceAll(const std::wstring& str, const std::wstring& from, const std::wstring& to)"
  },
  {
    "label": "EraseAll()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "EraseAll(const std::string& str, const std::string& subString)"
  },
  {
    "label": "EraseAll()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "EraseAll(const std::wstring& str, const std::wstring& subString)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "Find(char* str, const char* subString)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (wchar_t*)",
    "insertText": "Find(wchar_t* str, const wchar_t* subString)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "Find(const char* str, const char* subString)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const wchar_t*)",
    "insertText": "Find(const wchar_t* str, const wchar_t* subString)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const wchar_t*)",
    "insertText": "Find(const wchar_t* str, size_t strLength, const wchar_t* subString, size_t subStringLength)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(const char* str1, const char* str2)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(const wchar_t* str1, const wchar_t* str2)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const char* str, const char* subString)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const wchar_t* str, const wchar_t* subString)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartsWith(const char* str, const char* subString)"
  },
  {
    "label": "StartsWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartsWith(const wchar_t* str, const wchar_t* subString)"
  },
  {
    "label": "StartsWithEx()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "StartsWithEx(const char* str, const char* subString)"
  },
  {
    "label": "StartsWithEx()",
    "kind": "Method",
    "detail": "Function (const wchar_t*)",
    "insertText": "StartsWithEx(const wchar_t* str, const wchar_t* subString)"
  },
  {
    "label": "MatchWildcard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchWildcard(const char* target, const char* wildcard)"
  },
  {
    "label": "MatchWildcard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchWildcard(const wchar_t* target, const wchar_t* wildcard)"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (char)",
    "insertText": "ToLower(char c)"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (} wchar_t)",
    "insertText": "ToLower(wchar_t c)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (} char)",
    "insertText": "ToUpper(char c)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (} wchar_t)",
    "insertText": "ToUpper(wchar_t c)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "ToUpper(const char* str)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToUpper(const std::string& str)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToUpper(const wchar_t* str)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToUpper(const std::wstring& str)"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToLower(const wchar_t* str)"
  },
  {
    "label": "ToLower()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "ToLower(const std::wstring& str)"
  },
  {
    "label": "MakeSafeName()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "MakeSafeName(const std::wstring& name)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetLength(const char* str)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetLength(const wchar_t* str)"
  },
  {
    "label": "StringToInt()",
    "kind": "Method",
    "detail": "Function (} # if _WIN32 template<T> T)",
    "insertText": "StringToInt(const wchar_t* str)"
  },
  {
    "label": "IntToString()",
    "kind": "Method",
    "detail": "Function (} template<T> std::wstring)",
    "insertText": "IntToString(T value)"
  },
  {
    "label": "_itow_s()",
    "kind": "Method",
    "detail": "Function (wchar_t result [ 2 2 u ] = { } ;)",
    "insertText": "_itow_s(static_cast<int>(value), result, 10)"
  }
]