[
  {
    "label": "FVulkanQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanQueue"
  },
  {
    "label": "FVulkanCmdBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCmdBuffer"
  },
  {
    "label": "FVulkanShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanShader"
  },
  {
    "label": "FVulkanDescriptorSetsLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetsLayout"
  },
  {
    "label": "FVulkanGfxPipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGfxPipeline"
  },
  {
    "label": "FVulkanRenderPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderPass"
  },
  {
    "label": "FVulkanCommandBufferManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandBufferManager"
  },
  {
    "label": "FValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValidationContext"
  },
  {
    "label": "FVulkanRenderTargetLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderTargetLayout"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FGfxPipelineDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGfxPipelineDesc"
  },
  {
    "label": "FVulkanFramebuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanFramebuffer"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "FVulkanRenderPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderPassManager"
  },
  {
    "label": "FVulkanDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDynamicRHI"
  },
  {
    "label": "VKHasAllFlags()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / ScopeLock . h \" # include \" RHI . h \" # include \" RenderUtils . h \" # include \" RHIValidation . h \" # include \" VulkanPlatform . h \" # include \" VulkanConfiguration . h \" # include \" VulkanCommandWrappers . h \" # include \" VulkanState . h \" # include \" VulkanResources . h \" # include \" VulkanUtil . h \" # include \" VulkanViewport . h \" # include \" VulkanDynamicRHI . h \" # include \" RHI . h \" # include \" GPUProfiler . h \" # include \" VulkanQueue . h \" # include \" VulkanCommandBuffer . h \" # include \" Stats / Stats2 . h \" class FVulkanQueue ; class FVulkanCmdBuffer ; class FVulkanShader ; class FVulkanDescriptorSetsLayout ; class FVulkanGfxPipeline ; class FVulkanRenderPass ; class FVulkanCommandBufferManager ; class FValidationContext ; template<BitsType> bool)",
    "insertText": "VKHasAllFlags(VkFlags Flags, BitsType Contains)"
  },
  {
    "label": "VKHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (} template<BitsType> bool)",
    "insertText": "VKHasAnyFlags(VkFlags Flags, BitsType Contains)"
  },
  {
    "label": "UEFrequencyToVKStageBit()",
    "kind": "Method",
    "detail": "Function (} VkShaderStageFlagBits)",
    "insertText": "UEFrequencyToVKStageBit(EShaderFrequency InStage)"
  },
  {
    "label": "VkStageBitToUEFrequency()",
    "kind": "Method",
    "detail": "Function (break ; } return VK_SHADER_STAGE_ALL ; } EShaderFrequency)",
    "insertText": "VkStageBitToUEFrequency(VkShaderStageFlagBits FlagBits)"
  },
  {
    "label": "GetNumStagesForBindPoint()",
    "kind": "Method",
    "detail": "Function (break ; } return SF_NumFrequencies ; } int32)",
    "insertText": "GetNumStagesForBindPoint(VkPipelineBindPoint BindPoint)"
  },
  {
    "label": "FVulkanRenderTargetLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanRenderTargetLayout(FVulkanDevice& InDevice, const FRHISetRenderTargetsInfo& RTInfo)"
  },
  {
    "label": "FVulkanRenderTargetLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVulkanRenderTargetLayout(FVulkanDevice& InDevice, const FRHIRenderPassInfo& RPInfo, VkImageLayout CurrentDepthLayout, VkImageLayout CurrentStencilLayout)"
  },
  {
    "label": "GetRenderPassCompatibleHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRenderPassCompatibleHash()"
  },
  {
    "label": "ResetAttachments()",
    "kind": "Method",
    "detail": "Function (protected : VkAttachmentReference ColorReferences [ MaxSimultaneousRenderTargets ] ; VkAttachmentReference DepthReference ; VkAttachmentReferenceStencilLayout StencilReference ; VkAttachmentReference FragmentDensityReference ; VkAttachmentReference ResolveReferences [ MaxSimultaneousRenderTargets ] ; VkAttachmentReference DepthStencilResolveReference ; VkAttachmentDescription Desc [ MaxSimultaneousRenderTargets* 2 + 3 ] ; VkAttachmentDescriptionStencilLayout StencilDesc ; uint8 NumAttachmentDescriptions ; uint8 NumColorAttachments ; uint8 NumInputAttachments = 0 ; uint8 bHasDepthStencil ; uint8 bHasResolveAttachments ; uint8 bHasDepthStencilResolve ; uint8 bHasFragmentDensityAttachment ; uint8 NumSamples ; uint8 NumUsedClearValues ; ESubpassHint SubpassHint = ESubpassHint::None ; uint8 MultiViewCount ; uint32 RenderPassCompatibleHash = 0 ; uint32 RenderPassFullHash = 0 ; union { VkOffset3D Offset3D ; VkOffset2D Offset2D ; } Offset ; union { VkExtent3D Extent3D ; VkExtent2D Extent2D ; } Extent ; void)",
    "insertText": "ResetAttachments()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(ColorReferences)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(DepthReference)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(FragmentDensityReference)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(ResolveReferences)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(DepthStencilResolveReference)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Desc)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Offset)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Extent)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(StencilReference, VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZeroVulkanStruct(StencilDesc, VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT)"
  },
  {
    "label": "FVulkanRenderTargetLayout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVulkanRenderTargetLayout()"
  },
  {
    "label": "CalculateRenderPassHashes()",
    "kind": "Method",
    "detail": "Function (} bool bCalculatedHash = false ; void)",
    "insertText": "CalculateRenderPassHashes(const FRHISetRenderTargetsInfo& RTInfo)"
  },
  {
    "label": "FVulkanFramebuffer()",
    "kind": "Method",
    "detail": "Function (class FVulkanPipelineStateCacheManager ; struct FGfxPipelineDesc ; } ; class FVulkanFramebuffer { public :)",
    "insertText": "FVulkanFramebuffer(FVulkanDevice& Device, const FRHISetRenderTargetsInfo& InRTInfo, const FVulkanRenderTargetLayout& RTLayout, const FVulkanRenderPass& RenderPass)"
  },
  {
    "label": "FVulkanFramebuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanFramebuffer()"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Matches(const FRHISetRenderTargetsInfo& RTInfo)"
  },
  {
    "label": "GetNumColorAttachments()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumColorAttachments()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (VkFramebuffer)",
    "insertText": "GetHandle()"
  },
  {
    "label": "ContainsRenderTarget()",
    "kind": "Method",
    "detail": "Function (} TIndirectArray<FVulkanView> OwnedTextureViews ; TArray<FVulkanView const*> AttachmentTextureViews ; FVulkanView const* PartialDepthTextureView = nullptr ; bool)",
    "insertText": "ContainsRenderTarget(FRHITexture* Texture)"
  },
  {
    "label": "ResourceCast()",
    "kind": "Method",
    "detail": "Function (FVulkanTexture* VulkanTexture =)",
    "insertText": "ResourceCast(Texture)"
  },
  {
    "label": "ContainsRenderTarget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsRenderTarget(VkImage Image)"
  },
  {
    "label": "GetRenderArea()",
    "kind": "Method",
    "detail": "Function (} VkRect2D)",
    "insertText": "GetRenderArea()"
  },
  {
    "label": "FVulkanRenderPass()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanRenderPass()"
  },
  {
    "label": "VulkanSetImageLayout()",
    "kind": "Method",
    "detail": "Function (private : FVulkanRenderTargetLayout Layout ; VkRenderPass RenderPass ; uint32 NumUsedClearValues ; FVulkanDevice& Device ; } ; union UNvidiaDriverVersion { struct { # if PLATFORM_LITTLE_ENDIAN uint32 Tertiary : 6 ; uint32 Secondary : 8 ; uint32 Minor : 8 ; uint32 Major : 1 0 ; # else uint32 Major : 1 0 ; uint32 Minor : 8 ; uint32 Secondary : 8 ; uint32 Tertiary : 6 ; # endif } ; uint32 Packed ; } ; void)",
    "insertText": "VulkanSetImageLayout(FVulkanCmdBuffer* CmdBuffer, VkImage Image, VkImageLayout OldLayout, VkImageLayout NewLayout, const VkImageSubresourceRange& SubresourceRange)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Vulkan PSO\"), STATGROUP_VulkanPSO, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"PSO LRU Elements\"), STAT_VulkanNumPSOLRU, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"PSO LRU Size\"), STAT_VulkanNumPSOLRUSize, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num PSOs\"), STAT_VulkanNumPSOs, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Graphics PSOs\"), STAT_VulkanNumGraphicsPSOs, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Compute PSOs\"), STAT_VulkanNumComputePSOs, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"VulkanPSOKey Memory\"), STAT_VulkanPSOKeyMemory, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PSO HeaderInit time\"), STAT_VulkanPSOHeaderInitTime, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PSO Lookup time\"), STAT_VulkanPSOLookupTime, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PSO Creation time\"), STAT_VulkanPSOCreationTime, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PSO Vulkan Creation time\"), STAT_VulkanPSOVulkanCreationTime, STATGROUP_VulkanPSO,)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Vulkan RHI\"), STATGROUP_VulkanRHI, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Draw call time\"), STAT_VulkanDrawCallTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Dispatch call time\"), STAT_VulkanDispatchCallTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Draw call prep time\"), STAT_VulkanDrawCallPrepareTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"CustomPresent time\"), STAT_VulkanCustomPresentTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Dispatch call prep time\"), STAT_VulkanDispatchCallPrepareTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Get Or Create Pipeline\"), STAT_VulkanGetOrCreatePipeline, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Get DescriptorSet\"), STAT_VulkanGetDescriptorSet, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Pipeline Bind\"), STAT_VulkanPipelineBind, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Cmd Buffers\"), STAT_VulkanNumCmdBuffers, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Render Passes\"), STAT_VulkanNumRenderPasses, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Frame Buffers\"), STAT_VulkanNumFrameBuffers, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Buffer Views\"), STAT_VulkanNumBufferViews, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Image Views\"), STAT_VulkanNumImageViews, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Physical Mem Allocations\"), STAT_VulkanNumPhysicalMemAllocations, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Frame Temp Memory\"), STAT_VulkanTempFrameAllocationBuffer, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Dynamic VB Size\"), STAT_VulkanDynamicVBSize, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Dynamic IB Size\"), STAT_VulkanDynamicIBSize, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Dynamic VB Lock/Unlock time\"), STAT_VulkanDynamicVBLockTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Dynamic IB Lock/Unlock time\"), STAT_VulkanDynamicIBLockTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"DrawPrim UP Prep Time\"), STAT_VulkanUPPrepTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Uniform Buffer Creation Time\"), STAT_VulkanUniformBufferCreateTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Apply DS Uniform Buffers\"), STAT_VulkanApplyDSUniformBuffers, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Apply Packed Uniform Buffers\"), STAT_VulkanApplyPackedUniformBuffers, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Barrier Time\"), STAT_VulkanBarrierTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"SRV Update Time\"), STAT_VulkanSRVUpdateTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UAV Update Time\"), STAT_VulkanUAVUpdateTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Deletion Queue\"), STAT_VulkanDeletionQueue, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Queue Submit\"), STAT_VulkanQueueSubmit, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Queue Present\"), STAT_VulkanQueuePresent, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Queries\"), STAT_VulkanNumQueries, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Query Pools\"), STAT_VulkanNumQueryPools, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Wait For Query\"), STAT_VulkanWaitQuery, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Wait For Fence\"), STAT_VulkanWaitFence, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Reset Queries\"), STAT_VulkanResetQuery, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Wait For Swapchain\"), STAT_VulkanWaitSwapchain, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Acquire Backbuffer\"), STAT_VulkanAcquireBackBuffer, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Staging Buffer Mgmt\"), STAT_VulkanStagingBuffer, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"VkCreateDescriptorPool\"), STAT_VulkanVkCreateDescriptorPool, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Created DescSet Pools\"), STAT_VulkanNumDescPools, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UpdateUniformBuffers\"), STAT_VulkanUpdateUniformBuffers, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"UpdateUniformBuffersRename\"), STAT_VulkanUpdateUniformBuffersRename, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# if VULKAN_ENABLE_AGGRESSIVE_STATS)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Update DescriptorSets\"), STAT_VulkanUpdateDescriptorSets, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num Desc Sets Updated\"), STAT_VulkanNumDescSets, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Num WriteDescriptors Cmd\"), STAT_VulkanNumUpdateDescriptors, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Set unif Buffer\"), STAT_VulkanSetUniformBufferTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"VkUpdate DS\"), STAT_VulkanVkUpdateDS, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Bind Vertex Streams\"), STAT_VulkanBindVertexStreamsTime, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Max Potential Desc Sets\"), STAT_VulkanNumDescSetsTotal, STATGROUP_VulkanRHI,)"
  },
  {
    "label": "GetNumBitsPerPixel()",
    "kind": "Method",
    "detail": "Function (namespace VulkanRHI { uint32)",
    "insertText": "GetNumBitsPerPixel(VkFormat Format)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (VkAttachmentLoadOp OutLoadAction = VK_ATTACHMENT_LOAD_OP_MAX_ENUM ;)",
    "insertText": "switch(InLoadAction)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (VkAttachmentStoreOp OutStoreAction = VK_ATTACHMENT_STORE_OP_MAX_ENUM ;)",
    "insertText": "switch(InStoreAction)"
  },
  {
    "label": "UEToVkBufferFormat()",
    "kind": "Method",
    "detail": "Function (} } VkFormat)",
    "insertText": "UEToVkBufferFormat(EVertexElementType Type)"
  },
  {
    "label": "GetValidationCacheFilename()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetValidationCacheFilename()"
  },
  {
    "label": "SetDebugName()",
    "kind": "Method",
    "detail": "Function (} # if VULKAN_ENABLE_DRAW_MARKERS void)",
    "insertText": "SetDebugName(PFN_vkSetDebugUtilsObjectNameEXT SetDebugName, VkDevice Device, VkImage Image, const char* Name)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (VkDebugUtilsObjectNameInfoEXT Info ;)",
    "insertText": "ZeroVulkanStruct(Info, VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT)"
  },
  {
    "label": "objectHandle()",
    "kind": "Method",
    "detail": "Function (Info . objectType = VK_OBJECT_TYPE_IMAGE ; Info .)",
    "insertText": "objectHandle(uint64)"
  },
  {
    "label": "SetDebugName()",
    "kind": "Method",
    "detail": "Function (Info . pObjectName = Name ;)",
    "insertText": "SetDebugName(Device, &Info)"
  },
  {
    "label": "GetMergedDepthStencilLayout()",
    "kind": "Method",
    "detail": "Function (} # endif VkImageLayout)",
    "insertText": "GetMergedDepthStencilLayout(VkImageLayout DepthLayout, VkImageLayout StencilLayout)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(IsMergedLayout(DepthLayout) || IsMergedLayout(StencilLayout))"
  },
  {
    "label": "HeavyWeightBarrier()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "HeavyWeightBarrier(VkCommandBuffer CmdBuffer)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (VkMemoryBarrier Barrier ;)",
    "insertText": "ZeroVulkanStruct(Barrier, VK_STRUCTURE_TYPE_MEMORY_BARRIER)"
  },
  {
    "label": "vkCmdPipelineBarrier()",
    "kind": "Method",
    "detail": "Function (Barrier . srcAccessMask = VK_ACCESS_INDIRECT_COMMAND_READ_BIT | VK_ACCESS_INDEX_READ_BIT | VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT | VK_ACCESS_UNIFORM_READ_BIT | VK_ACCESS_INPUT_ATTACHMENT_READ_BIT | VK_ACCESS_SHADER_READ_BIT | VK_ACCESS_SHADER_WRITE_BIT | VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT | VK_ACCESS_TRANSFER_READ_BIT | VK_ACCESS_TRANSFER_WRITE_BIT | VK_ACCESS_HOST_READ_BIT | VK_ACCESS_HOST_WRITE_BIT | VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR | VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT | VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR ; Barrier . dstAccessMask = VK_ACCESS_INDIRECT_COMMAND_READ_BIT | VK_ACCESS_INDEX_READ_BIT | VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT | VK_ACCESS_UNIFORM_READ_BIT | VK_ACCESS_INPUT_ATTACHMENT_READ_BIT | VK_ACCESS_SHADER_READ_BIT | VK_ACCESS_SHADER_WRITE_BIT | VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT | VK_ACCESS_TRANSFER_READ_BIT | VK_ACCESS_TRANSFER_WRITE_BIT | VK_ACCESS_HOST_READ_BIT | VK_ACCESS_HOST_WRITE_BIT | VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR | VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR | VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT | VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR ;)",
    "insertText": "vkCmdPipelineBarrier(CmdBuffer, VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, 0, 1, &Barrier, 0, nullptr, 0, nullptr)"
  },
  {
    "label": "DebugHeavyWeightBarrier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DebugHeavyWeightBarrier(VkCommandBuffer CmdBuffer, int32 CVarConditionMask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_BUILD_DEBUG | | UE_BUILD_DEVELOPMENT)",
    "insertText": "if(CVarVulkanDebugBarrier.GetValueOnAnyThread() & CVarConditionMask)"
  },
  {
    "label": "HeavyWeightBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeavyWeightBarrier(CmdBuffer)"
  },
  {
    "label": "UseVulkanDescriptorCache()",
    "kind": "Method",
    "detail": "Function (} # endif } } bool)",
    "insertText": "UseVulkanDescriptorCache()"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "checkf(false, TEXT(\"Unrecognized shading rate image data type. Specified type was %d\"), (int)GRHIVariableRateShadingImageDataType)"
  }
]