[
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "ISourceControlRevision",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceControlRevision"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "FRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRevisionInfo"
  },
  {
    "label": "STreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STreeView"
  },
  {
    "label": "FResolvedProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolvedProperty"
  },
  {
    "label": "FPropertySoftPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertySoftPath"
  },
  {
    "label": "FChainElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChainElement"
  },
  {
    "label": "FSCSIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSCSIdentifier"
  },
  {
    "label": "FSCSResolvedIdentifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSCSResolvedIdentifier"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSingleObjectDiffEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleObjectDiffEntry"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSCSDiffEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSCSDiffEntry"
  },
  {
    "label": "FSCSDiffRoot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSCSDiffRoot"
  },
  {
    "label": "FDiffParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffParameters"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FBlueprintDifferenceTreeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintDifferenceTreeEntry"
  },
  {
    "label": "FRevisionInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRevisionInfo"
  },
  {
    "label": "FPropertySoftPath()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FPropertySoftPath()"
  },
  {
    "label": "FPropertySoftPath()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FPropertySoftPath(const FProperty* Property)"
  },
  {
    "label": "FPropertySoftPath()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FPropertySoftPath(TArray<FName> InPropertyChain)"
  },
  {
    "label": "FPropertySoftPath()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FPropertySoftPath(FPropertyPath InPropertyPath)"
  },
  {
    "label": "FPropertySoftPath()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FPropertySoftPath(const FPropertySoftPath& MainPropertyPath, const FPropertySoftPath& SubPropertyPath)"
  },
  {
    "label": "FPropertySoftPath()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FPropertySoftPath(const FPropertySoftPath& SubPropertyPath, const FProperty* LeafProperty)"
  },
  {
    "label": "FPropertySoftPath()",
    "kind": "Method",
    "detail": "Function (UNREALED_API)",
    "insertText": "FPropertySoftPath(const FPropertySoftPath& SubPropertyPath, int32 ContainerIndex)"
  },
  {
    "label": "TryReadIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "TryReadIndex(const TArray<FChainElement>& LocalPropertyChain, int32& OutIndex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash( FPropertySoftPath const& Path )"
  },
  {
    "label": "CompareUnrelatedStructs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareUnrelatedStructs(const UStruct* StructA, const void* A, const UStruct* StructB, const void* B, TArray<FSingleObjectDiffEntry>& OutDifferingProperties)"
  },
  {
    "label": "CompareUnrelatedStructs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareUnrelatedStructs(const UStruct* StructA, const void* A, const UObject* OwningOuterA, const UStruct* StructB, const void* B, const\n\t                                          UObject* OwningOuterB, TArray<FSingleObjectDiffEntry>& OutDifferingProperties)"
  },
  {
    "label": "CompareUnrelatedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareUnrelatedObjects(const UObject* A, const UObject* B, TArray<FSingleObjectDiffEntry>& OutDifferingProperties)"
  },
  {
    "label": "CompareUnrelatedSCS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareUnrelatedSCS(const UBlueprint* Old, const TArray< FSCSResolvedIdentifier >& OldHierarchy, const UBlueprint* New, const TArray< FSCSResolvedIdentifier >& NewHierarchy, FSCSDiffRoot& OutDifferingEntries )"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const FResolvedProperty& AProp, const FResolvedProperty& BProp, const FPropertySoftPath& RootPath, TArray<FPropertySoftPath>& DifferingProperties)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const FResolvedProperty& AProp, const FResolvedProperty& BProp, const UObject* OwningOuterA, const UObject* OwningOuterB, const FPropertySoftPath& RootPath, TArray<FPropertySoftPath>& DifferingProperties)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const FResolvedProperty& AProp, const FResolvedProperty& BProp, const UObject* OwningOuterA, const UObject* OwningOuterB)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const FResolvedProperty& AProp, const FResolvedProperty& BProp, const UObject* OwningOuterA, const UObject* OwningOuterB, FDiffParameters DiffParameters, TArray<FPropertySoftPath>& DifferingProperties)"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(const TSharedPtr<IPropertyHandle>& PropertyHandleA, const TSharedPtr<IPropertyHandle>& PropertyHandleB, const TArray<TWeakObjectPtr<UObject>>& OwningOutersA = {}, const TArray<TWeakObjectPtr<UObject>>& OwningOutersB = {})"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Identical(TArray<FPropertySoftPath>& OutDifferingProperties, const TSharedPtr<IPropertyHandle>& PropertyHandleA, const TSharedPtr<IPropertyHandle>& PropertyHandleB, const TArray<TWeakObjectPtr<UObject>>& OwningOutersA = {}, const TArray<TWeakObjectPtr<UObject>>& OwningOutersB = {})"
  },
  {
    "label": "ResolveAll()",
    "kind": "Method",
    "detail": "Function (TArray<FPropertyPath>)",
    "insertText": "ResolveAll(const UObject* Object, const TArray<FPropertySoftPath>& InSoftProperties)"
  },
  {
    "label": "ResolveAll()",
    "kind": "Method",
    "detail": "Function (TArray<FPropertyPath>)",
    "insertText": "ResolveAll(const UObject* Object, const TArray<FSingleObjectDiffEntry>& InDifferences)"
  },
  {
    "label": "NoDifferencesEntry()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBlueprintDifferenceTreeEntry>)",
    "insertText": "NoDifferencesEntry()"
  },
  {
    "label": "UnknownDifferencesEntry()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBlueprintDifferenceTreeEntry>)",
    "insertText": "UnknownDifferencesEntry()"
  },
  {
    "label": "CreateCategoryEntry()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBlueprintDifferenceTreeEntry>)",
    "insertText": "CreateCategoryEntry(const FText& LabelText, const FText& ToolTipText, FOnDiffEntryFocused FocusCallback, const TArray< TSharedPtr<FBlueprintDifferenceTreeEntry> >& Children, bool bHasDifferences)"
  },
  {
    "label": "CreateCategoryEntryForMerge()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBlueprintDifferenceTreeEntry>)",
    "insertText": "CreateCategoryEntryForMerge(const FText& LabelText, const FText& ToolTipText, FOnDiffEntryFocused FocusCallback, const TArray< TSharedPtr<FBlueprintDifferenceTreeEntry> >& Children, bool bHasRemoteDifferences, bool bHasLocalDifferences, bool bHasConflicts)"
  },
  {
    "label": "CurrentDifference()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CurrentDifference( TSharedRef< STreeView<TSharedPtr< FBlueprintDifferenceTreeEntry > > > TreeView, const TArray< TSharedPtr<class FBlueprintDifferenceTreeEntry> >& Differences )"
  },
  {
    "label": "HighlightNextDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighlightNextDifference(TSharedRef< STreeView<TSharedPtr< FBlueprintDifferenceTreeEntry > > > TreeView, const TArray< TSharedPtr<class FBlueprintDifferenceTreeEntry> >& Differences, const TArray< TSharedPtr<class FBlueprintDifferenceTreeEntry> >& RootDifferences)"
  },
  {
    "label": "HighlightPrevDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HighlightPrevDifference(TSharedRef< STreeView<TSharedPtr< FBlueprintDifferenceTreeEntry > > > TreeView, const TArray< TSharedPtr<class FBlueprintDifferenceTreeEntry> >& Differences, const TArray< TSharedPtr<class FBlueprintDifferenceTreeEntry> >& RootDifferences)"
  },
  {
    "label": "HasNextDifference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNextDifference(TSharedRef< STreeView<TSharedPtr< FBlueprintDifferenceTreeEntry > > > TreeView, const TArray< TSharedPtr<class FBlueprintDifferenceTreeEntry> >& Differences)"
  },
  {
    "label": "HasPrevDifference()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrevDifference(TSharedRef< STreeView<TSharedPtr< FBlueprintDifferenceTreeEntry > > > TreeView, const TArray< TSharedPtr<class FBlueprintDifferenceTreeEntry> >& Differences)"
  },
  {
    "label": "LookupColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "LookupColor( bool bDiffers, bool bConflicts = false )"
  },
  {
    "label": "Differs()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Differs()"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Identical()"
  },
  {
    "label": "Missing()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Missing()"
  },
  {
    "label": "Conflicting()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "Conflicting()"
  },
  {
    "label": "PropertyDiffMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "PropertyDiffMessage(FSingleObjectDiffEntry Difference, FText ObjectName)"
  },
  {
    "label": "SCSDiffMessage()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "SCSDiffMessage(const FSCSDiffEntry& Difference, FText ObjectName)"
  },
  {
    "label": "GetPanelLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPanelLabel(const UObject* Asset, const FRevisionInfo& Revision, FText Label)"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (SHorizontalBox::FSlot::FSlotArguments)",
    "insertText": "Box(bool bIsPresent, FLinearColor Color)"
  }
]