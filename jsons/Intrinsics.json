[
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "FunctionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionType"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "AttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AttributeSet"
  },
  {
    "label": "ID",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ID"
  },
  {
    "label": "IITDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IITDescriptor"
  },
  {
    "label": "IITDescriptorKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IITDescriptorKind"
  },
  {
    "label": "ArgKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ArgKind"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_INTRINSICS_H # define LLVM_IR_INTRINSICS_H # include \" llvm / ADT / ArrayRef . h \" # include<string> namespace llvm { class Type ; class FunctionType ; class Function ; class LLVMContext ; class Module ; class AttributeSet ; namespace Intrinsic { enum ID : unsigned { not_intrinsic = 0,# define GET_INTRINSIC_ENUM_VALUES # include \" llvm / IR / Intrinsics . gen \" # undef GET_INTRINSIC_ENUM_VALUES,num_intrinsics } ; std::string)",
    "insertText": "getName(ID id, ArrayRef<Type*> Tys = None)"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (FunctionType*)",
    "insertText": "getType(LLVMContext &Context, ID id, ArrayRef<Type*> Tys = None)"
  },
  {
    "label": "isOverloaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOverloaded(ID id)"
  },
  {
    "label": "isLeaf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLeaf(ID id)"
  },
  {
    "label": "getAttributes()",
    "kind": "Method",
    "detail": "Function (AttributeSet)",
    "insertText": "getAttributes(LLVMContext &C, ID id)"
  },
  {
    "label": "getDeclaration()",
    "kind": "Method",
    "detail": "Function (Function*)",
    "insertText": "getDeclaration(Module *M, ID id, ArrayRef<Type*> Tys = None)"
  },
  {
    "label": "getIntrinsicForGCCBuiltin()",
    "kind": "Method",
    "detail": "Function (ID)",
    "insertText": "getIntrinsicForGCCBuiltin(const char *Prefix, const char *BuiltinName)"
  },
  {
    "label": "getIntrinsicForMSBuiltin()",
    "kind": "Method",
    "detail": "Function (ID)",
    "insertText": "getIntrinsicForMSBuiltin(const char *Prefix, const char *BuiltinName)"
  },
  {
    "label": "getArgumentNumber()",
    "kind": "Method",
    "detail": "Function (struct IITDescriptor { enum IITDescriptorKind { Void,VarArg,MMX,Metadata,Half,Float,Double,Integer,Vector,Pointer,Struct,Argument,ExtendArgument,TruncArgument,HalfVecArgument,SameVecWidthArgument,PtrToArgument,VecOfPtrsToElt } Kind ; union { unsigned Integer_Width ; unsigned Float_Width ; unsigned Vector_Width ; unsigned Pointer_AddressSpace ; unsigned Struct_NumElements ; unsigned Argument_Info ; } ; enum ArgKind { AK_Any,AK_AnyInteger,AK_AnyFloat,AK_AnyVector,AK_AnyPointer } ; unsigned)",
    "insertText": "getArgumentNumber()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Kind == Argument || Kind == ExtendArgument || Kind == TruncArgument || Kind == HalfVecArgument || Kind == SameVecWidthArgument || Kind == PtrToArgument || Kind == VecOfPtrsToElt)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} IITDescriptor)",
    "insertText": "get(IITDescriptorKind K, unsigned Field)"
  },
  {
    "label": "getIntrinsicInfoTableEntries()",
    "kind": "Method",
    "detail": "Function (IITDescriptor Result = { K,{ Field } } ; return Result ; } } ; void)",
    "insertText": "getIntrinsicInfoTableEntries(ID id, SmallVectorImpl<IITDescriptor> &T)"
  }
]