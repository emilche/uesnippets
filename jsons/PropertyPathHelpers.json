[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FPropertyPathSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyPathSegment"
  },
  {
    "label": "FCachedPropertyPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedPropertyPath"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FPropertyPathResolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyPathResolver"
  },
  {
    "label": "FPropertyStructView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyStructView"
  },
  {
    "label": "FInternalGetterResolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternalGetterResolver"
  },
  {
    "label": "FInternalSetterResolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternalSetterResolver"
  },
  {
    "label": "TPropertyPathResolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPropertyPathResolver"
  },
  {
    "label": "FCallGetterFunctionHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallGetterFunctionHelper"
  },
  {
    "label": "FGetValueHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGetValueHelper"
  },
  {
    "label": "FCallSetterFunctionHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallSetterFunctionHelper"
  },
  {
    "label": "FSetValueHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetValueHelper"
  },
  {
    "label": "FGetValueFastHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGetValueFastHelper"
  },
  {
    "label": "FSetValueFastHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetValueFastHelper"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / AssertionMacros . h \" # include \" PropertyTypeCompatibility . h \" # include \" UObject / Class . h \" # include \" UObject / Field . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UnrealType . h \" # include \" PropertyPathHelpers . generated . h \" class FArchive ; template<FuncType> class TFunctionRef ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FPropertyPathSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyPathSegment()"
  },
  {
    "label": "FPropertyPathSegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPropertyPathSegment(int32 InCount, const TCHAR* InString)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "MakeUnresolvedCopy()",
    "kind": "Method",
    "detail": "Function (FPropertyPathSegment)",
    "insertText": "MakeUnresolvedCopy(const FPropertyPathSegment& ToCopy)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (FFieldVariant)",
    "insertText": "Resolve(UStruct* InStruct)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetName()"
  },
  {
    "label": "GetArrayIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetArrayIndex()"
  },
  {
    "label": "GetField()",
    "kind": "Method",
    "detail": "Function (FFieldVariant)",
    "insertText": "GetField()"
  },
  {
    "label": "GetStruct()",
    "kind": "Method",
    "detail": "Function (UStruct*)",
    "insertText": "GetStruct()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() PROPERTYPATH_API FCachedPropertyPath()"
  },
  {
    "label": "FCachedPropertyPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedPropertyPath(const FString& Path)"
  },
  {
    "label": "FCachedPropertyPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedPropertyPath(const FPropertyPathSegment& Segment)"
  },
  {
    "label": "FCachedPropertyPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCachedPropertyPath(const TArray<FString>& PathSegments)"
  },
  {
    "label": "FCachedPropertyPath()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FCachedPropertyPath()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "MakeFromString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MakeFromString(const FString& InPropertyPath)"
  },
  {
    "label": "MakeUnresolvedCopy()",
    "kind": "Method",
    "detail": "Function (FCachedPropertyPath)",
    "insertText": "MakeUnresolvedCopy(const FCachedPropertyPath& ToCopy)"
  },
  {
    "label": "GetNumSegments()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSegments()"
  },
  {
    "label": "GetSegment()",
    "kind": "Method",
    "detail": "Function (const FPropertyPathSegment&)",
    "insertText": "GetSegment(int32 InSegmentIndex)"
  },
  {
    "label": "GetLastSegment()",
    "kind": "Method",
    "detail": "Function (const FPropertyPathSegment&)",
    "insertText": "GetLastSegment()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resolve(UObject* InContainer)"
  },
  {
    "label": "SetCanSafelyUsedCachedAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanSafelyUsedCachedAddress(bool bInCanSafelyUsedCachedAddress)"
  },
  {
    "label": "SetCachedLastContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedLastContainer(void* InContainer, int32 InIndex)"
  },
  {
    "label": "GetCachedLastContainerInPath()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetCachedLastContainerInPath()"
  },
  {
    "label": "GetCachedLastContainerInPathIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCachedLastContainerInPathIndex()"
  },
  {
    "label": "ResolveLeaf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveLeaf(void* InAddress)"
  },
  {
    "label": "ResolveLeaf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveLeaf(UFunction* InFunction)"
  },
  {
    "label": "IsResolved()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResolved()"
  },
  {
    "label": "IsFullyResolved()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyResolved()"
  },
  {
    "label": "GetCachedAddress()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetCachedAddress()"
  },
  {
    "label": "GetCachedFunction()",
    "kind": "Method",
    "detail": "Function (UFunction*)",
    "insertText": "GetCachedFunction()"
  },
  {
    "label": "ToPropertyChangedEvent()",
    "kind": "Method",
    "detail": "Function (FPropertyChangedEvent)",
    "insertText": "ToPropertyChangedEvent(EPropertyChangeType::Type InChangeType)"
  },
  {
    "label": "ToEditPropertyChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToEditPropertyChain(FEditPropertyChain& OutPropertyChain)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FString& Other)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(const FString& Other)"
  },
  {
    "label": "GetCachedContainer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetCachedContainer()"
  },
  {
    "label": "SetCachedContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCachedContainer(void* InContainer)"
  },
  {
    "label": "RemoveFromEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromEnd(int32 InNumSegments = 1)"
  },
  {
    "label": "RemoveFromStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromStart(int32 InNumSegments = 1)"
  },
  {
    "label": "GetFProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "GetFProperty()"
  },
  {
    "label": "ResolvePropertyPath()",
    "kind": "Method",
    "detail": "Function (void* CachedContainer ; void* CachedLastContainerInPath ; int32 CachedLastContainerInPathIndex ; bool bCanSafelyUsedCachedAddress ; } ; namespace PropertyPathHelpersInternal { struct FPropertyPathResolver ; struct FPropertyStructView ; template<T> struct FInternalGetterResolver ; template<T> struct FInternalSetterResolver ; bool)",
    "insertText": "ResolvePropertyPath(UObject* InContainer, const FString& InPropertyPath, FPropertyPathResolver& InResolver)"
  },
  {
    "label": "ResolvePropertyPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolvePropertyPath(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, FPropertyPathResolver& InResolver)"
  },
  {
    "label": "ResolvePropertyPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolvePropertyPath(void* InContainer, UStruct* InStruct, const FString& InPropertyPath, FPropertyPathResolver& InResolver)"
  },
  {
    "label": "ResolvePropertyPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolvePropertyPath(void* InContainer, UStruct* InStruct, const FCachedPropertyPath& InPropertyPath, FPropertyPathResolver& InResolver)"
  },
  {
    "label": "GetValueFast()",
    "kind": "Method",
    "detail": "Function (template<T,ContainerType> bool)",
    "insertText": "GetValueFast(ContainerType* InContainer, const FCachedPropertyPath& InPropertyPath, T& OutValue, FProperty*& OutProperty)"
  },
  {
    "label": "SetValueFast()",
    "kind": "Method",
    "detail": "Function (template<T,ContainerType> bool)",
    "insertText": "SetValueFast(ContainerType* InContainer, const FCachedPropertyPath& InPropertyPath, const T& InValue)"
  },
  {
    "label": "GetPropertyValueAsString()",
    "kind": "Method",
    "detail": "Function (} namespace PropertyPathHelpers { bool)",
    "insertText": "GetPropertyValueAsString(UObject* InContainer, const FString& InPropertyPath, FString& OutValue)"
  },
  {
    "label": "GetPropertyValueAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropertyValueAsString(UObject* InContainer, const FString& InPropertyPath, FString& OutValue, FProperty*& OutProperty)"
  },
  {
    "label": "GetPropertyValueAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropertyValueAsString(void* InContainer, UStruct* InStruct, const FString& InPropertyPath, FString& OutValue)"
  },
  {
    "label": "GetPropertyValueAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropertyValueAsString(void* InContainer, UStruct* InStruct, const FString& InPropertyPath, FString& OutValue, FProperty*& OutProperty)"
  },
  {
    "label": "GetPropertyValueAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropertyValueAsString(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, FString& OutValue)"
  },
  {
    "label": "GetPropertyValueAsString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropertyValueAsString(void* InContainer, UStruct* InStruct, const FCachedPropertyPath& InPropertyPath, FString& OutValue)"
  },
  {
    "label": "SetPropertyValueFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPropertyValueFromString(UObject* InContainer, const FString& InPropertyPath, const FString& InValue)"
  },
  {
    "label": "SetPropertyValueFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPropertyValueFromString(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, const FString& InValue)"
  },
  {
    "label": "SetPropertyValueFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPropertyValueFromString(void* InContainer, UStruct* InStruct, const FString& InPropertyPath, const FString& InValue)"
  },
  {
    "label": "SetPropertyValueFromString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPropertyValueFromString(void* InContainer, UStruct* InStruct, const FCachedPropertyPath& InPropertyPath, const FString& InValue)"
  },
  {
    "label": "GetPropertyValueFast()",
    "kind": "Method",
    "detail": "Function (template<T> bool)",
    "insertText": "GetPropertyValueFast(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, T& OutValue)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (FProperty* OutProperty ; return GetPropertyValueFast<)",
    "insertText": "T(InContainer, InPropertyPath, OutValue, OutProperty)"
  },
  {
    "label": "GetPropertyValueFast()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "GetPropertyValueFast(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, T& OutValue, FProperty*& OutProperty)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "GetPropertyValue(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, T& OutValue, FProperty*& OutProperty)"
  },
  {
    "label": "Resolver()",
    "kind": "Method",
    "detail": "Function (} else { PropertyPathHelpersInternal::FInternalGetterResolver<T>)",
    "insertText": "Resolver(OutValue, OutProperty)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} } template<T> bool)",
    "insertText": "GetPropertyValue(UObject* InContainer, const FString& InPropertyPath, T& OutValue)"
  },
  {
    "label": "CachedPath()",
    "kind": "Method",
    "detail": "Function (FProperty* OutProperty ; FCachedPropertyPath)",
    "insertText": "CachedPath(InPropertyPath)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "GetPropertyValue(UObject* InContainer, const FString& InPropertyPath, T& OutValue, FProperty*& OutProperty)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "GetPropertyValue(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, T& OutValue)"
  },
  {
    "label": "SetPropertyValueFast()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "SetPropertyValueFast(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, const T& InValue)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "SetPropertyValue(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, const T& InValue)"
  },
  {
    "label": "Resolver()",
    "kind": "Method",
    "detail": "Function (} else { PropertyPathHelpersInternal::FInternalSetterResolver<T>)",
    "insertText": "Resolver(InValue)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} } template<T> bool)",
    "insertText": "SetPropertyValue(UObject* InContainer, const FString& InPropertyPath, const T& InValue)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetPropertyValue(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, const UScriptStruct* InScriptStruct, const uint8* InValue)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPropertyValue(UObject* InContainer, const FString& InPropertyPath, const UScriptStruct* InScriptStruct, const uint8* InValue)"
  },
  {
    "label": "CopyPropertyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyPropertyValue(UObject* InContainer, const FCachedPropertyPath& InDestPropertyPath, const FCachedPropertyPath& InSrcPropertyPath)"
  },
  {
    "label": "CopyPropertyValueFast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyPropertyValueFast(UObject* InContainer, const FCachedPropertyPath& InDestPropertyPath, const FCachedPropertyPath& InSrcPropertyPath)"
  },
  {
    "label": "FindFieldNameAndArrayIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFieldNameAndArrayIndex(int32 InCount, const TCHAR* InString, int32& OutCount, const TCHAR** OutPropertyName, int32& OutArrayIndex)"
  },
  {
    "label": "PerformArrayOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformArrayOperation(UObject* InContainer, const FString& InPropertyPath, TFunctionRef<bool(FScriptArrayHelper&,int32)> InOperation)"
  },
  {
    "label": "PerformArrayOperation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformArrayOperation(UObject* InContainer, const FCachedPropertyPath& InPropertyPath, TFunctionRef<bool(FScriptArrayHelper&,int32)> InOperation)"
  },
  {
    "label": "FPropertyPathResolver()",
    "kind": "Method",
    "detail": "Function (} namespace PropertyPathHelpersInternal { struct FPropertyPathResolver { ~)",
    "insertText": "FPropertyPathResolver()"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Resolve(void* InContainer, const FCachedPropertyPath& InPropertyPath)"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resolve(UObject* InContainer, const FCachedPropertyPath& InPropertyPath)"
  },
  {
    "label": "FPropertyStructView()",
    "kind": "Method",
    "detail": "Function (} ; struct FPropertyStructView {)",
    "insertText": "FPropertyStructView(const UScriptStruct* InScriptStruct, const uint8* InMemory) : ScriptStruct(InScriptStruct) , Memory(InMemory)"
  },
  {
    "label": "GetFirstParamProperty()",
    "kind": "Method",
    "detail": "Function (} } ; FProperty*)",
    "insertText": "GetFirstParamProperty(UFunction* InFunction)"
  },
  {
    "label": "CallParentSetters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallParentSetters(const FCachedPropertyPath& InPropertyPath)"
  },
  {
    "label": "CallParentGetters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallParentGetters(void* OutValue, const FCachedPropertyPath& InPropertyPath, const void* InPropertyAddress)"
  },
  {
    "label": "CallGetterFunction()",
    "kind": "Method",
    "detail": "Function (template<T,ContainerType> struct FCallGetterFunctionHelper { bool)",
    "insertText": "CallGetterFunction(ContainerType* InContainer, UFunction* InFunction, T& OutValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FProperty* ReturnProperty = nullptr ;)",
    "insertText": "for(TFieldIterator<FProperty> It(InFunction); It; ++It)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (InContainer ->)",
    "insertText": "ProcessEvent(InFunction, &OutValue)"
  },
  {
    "label": "FProperty()",
    "kind": "Method",
    "detail": "Function (FProperty* Property = CastFieldChecked<)",
    "insertText": "FProperty(LastSegment.GetField().ToField())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = ArrayIndex = = INDEX_NONE ? 0 : ArrayIndex ;)",
    "insertText": "if(PropertySizesMatch<T>(Property) && ArrayIndex < Property->ArrayDim)"
  },
  {
    "label": "CallGetter()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CallGetter(InContainer, &OutValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(void* Address = Property->ContainerPtrToValuePtr<T>(InContainer, ArrayIndex))"
  },
  {
    "label": "ResolveLeaf()",
    "kind": "Method",
    "detail": "Function (InPropertyPath .)",
    "insertText": "ResolveLeaf(Address)"
  },
  {
    "label": "CallParentGetters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallParentGetters(&OutValue, InPropertyPath, Address)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} OutProperty = Property ; return true ; } } return false ; } } ; template<T,ContainerType,int32 N> struct FGetValueHelper<T [ N ],ContainerType> { bool)",
    "insertText": "GetValue(ContainerType* InContainer, const FCachedPropertyPath& InPropertyPath, T(&OutValue)[N], FProperty*& OutProperty)"
  },
  {
    "label": "CopyCompleteValue()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CopyCompleteValue(&OutValue, Address)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (OutProperty = Property ; return true ; } } } return true ; } } ; template<ContainerType> struct FGetValueHelper<bool,ContainerType> { bool)",
    "insertText": "GetValue(ContainerType* InContainer, const FCachedPropertyPath& InPropertyPath, bool& OutValue, FProperty*& OutProperty)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = ArrayIndex = = INDEX_NONE ? 0 : ArrayIndex ;)",
    "insertText": "if(PropertySizesMatch<bool>(Property) && ArrayIndex < Property->ArrayDim)"
  },
  {
    "label": "FBoolProperty()",
    "kind": "Method",
    "detail": "Function (FBoolProperty* BoolProperty = CastFieldChecked<)",
    "insertText": "FBoolProperty(LastSegment.GetField().ToField())"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (OutValue = BoolProperty ->)",
    "insertText": "GetPropertyValue(Address)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (OutProperty = Property ; return true ; } } } return false ; } } ; template<T,ContainerType> bool)",
    "insertText": "GetValue(ContainerType* InContainer, const FCachedPropertyPath& InPropertyPath, FProperty*& OutProperty, T& OutValue)"
  },
  {
    "label": "ArrayHelper()",
    "kind": "Method",
    "detail": "Function (FScriptArrayHelper_InContainer)",
    "insertText": "ArrayHelper(ArrayProp, InContainer)"
  },
  {
    "label": "CopySingleValue()",
    "kind": "Method",
    "detail": "Function (ArrayProp -> Inner ->)",
    "insertText": "CopySingleValue(&OutValue, Address)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutProperty = ArrayProp -> Inner ; return true ; } } } } } else {)",
    "insertText": "if(IsConcreteTypeCompatibleWithReflectedType<T>(ArrayProp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutProperty = ArrayProp ; return true ; } } } } } else)",
    "insertText": "if(UFunction* Function = Field.Get<UFunction>())"
  },
  {
    "label": "ResolveLeaf()",
    "kind": "Method",
    "detail": "Function (InPropertyPath .)",
    "insertText": "ResolveLeaf(Function)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FProperty* Property = Field.Get<FProperty>())"
  },
  {
    "label": "FInternalGetterResolver()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<T> struct FInternalGetterResolver : public TPropertyPathResolver<FInternalGetterResolver<T>> {)",
    "insertText": "FInternalGetterResolver(T& InValue, FProperty*& InOutProperty) : Value(InValue) , Property(InOutProperty)"
  },
  {
    "label": "Resolve_Impl()",
    "kind": "Method",
    "detail": "Function (} template<ContainerType> bool)",
    "insertText": "Resolve_Impl(ContainerType* InContainer, const FCachedPropertyPath& InPropertyPath)"
  },
  {
    "label": "CallSetterFunction()",
    "kind": "Method",
    "detail": "Function (} T& Value ; FProperty*& Property ; } ; template<T,ContainerType> struct FCallSetterFunctionHelper { bool)",
    "insertText": "CallSetterFunction(ContainerType* InContainer, UFunction* InFunction, const T& InValue)"
  },
  {
    "label": "FPropertyStructView()",
    "kind": "Method",
    "detail": "Function (const FPropertyStructView& InStuctView = static_cast<const)",
    "insertText": "FPropertyStructView(InValue)"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (InContainer ->)",
    "insertText": "ProcessEvent(InFunction, const_cast<uint8*>(InStuctView.Memory))"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (InContainer ->)",
    "insertText": "ProcessEvent(InFunction, const_cast<T*>(&InValue))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = ArrayIndex = = INDEX_NONE ? 0 : ArrayIndex ;)",
    "insertText": "if(Property->GetElementSize() == InStuctView.ScriptStruct->GetStructureSize() && ArrayIndex < Property->ArrayDim)"
  },
  {
    "label": "CallSetter()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CallSetter(InContainer, InStuctView.Memory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(void* Address = Property->ContainerPtrToValuePtr<void>(InContainer, ArrayIndex))"
  },
  {
    "label": "CopySingleValue()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CopySingleValue(Address, InStuctView.Memory)"
  },
  {
    "label": "CallParentSetters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallParentSetters(InPropertyPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return true ; } } else)",
    "insertText": "if(IsConcreteTypeCompatibleWithReflectedType<T>(Property))"
  },
  {
    "label": "CallSetter()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CallSetter(InContainer, &InValue)"
  },
  {
    "label": "CopySingleValue()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CopySingleValue(Address, &InValue)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} return true ; } } return false ; } } ; template<T,ContainerType,int32 N> struct FSetValueHelper<T [ N ],ContainerType> { bool)",
    "insertText": "SetValue(ContainerType* InContainer, const FCachedPropertyPath& InPropertyPath, const T(&InValue)[N])"
  },
  {
    "label": "CopyCompleteValue()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CopyCompleteValue(Address, &InValue)"
  },
  {
    "label": "FBoolProperty()",
    "kind": "Method",
    "detail": "Function (} else { FBoolProperty* BoolProperty = CastFieldChecked<)",
    "insertText": "FBoolProperty(Property)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (BoolProperty ->)",
    "insertText": "SetPropertyValue(InPropertyPath.GetCachedAddress(), InValue)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} return true ; } } } return false ; } } ; template<T,ContainerType> bool)",
    "insertText": "SetValue(ContainerType* InContainer, const FCachedPropertyPath& InPropertyPath, const T& InValue)"
  },
  {
    "label": "FInternalSetterResolver()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<T> struct FInternalSetterResolver : public TPropertyPathResolver<FInternalSetterResolver<T>> {)",
    "insertText": "FInternalSetterResolver(const T& InValueToSet) : Value(InValueToSet)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (template<T> struct FGetValueFastHelper { bool)",
    "insertText": "GetValue(const FCachedPropertyPath& InPropertyPath, T& OutValue, FProperty*& OutProperty)"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (FArrayProperty* ArrayProp = CastField<)",
    "insertText": "FArrayProperty(OutProperty)"
  },
  {
    "label": "CopySingleValue()",
    "kind": "Method",
    "detail": "Function (ArrayProp -> Inner ->)",
    "insertText": "CopySingleValue(&OutValue, InPropertyPath.GetCachedAddress())"
  },
  {
    "label": "CallGetter()",
    "kind": "Method",
    "detail": "Function (OutProperty ->)",
    "insertText": "CallGetter(InPropertyPath.GetCachedContainer(), &OutValue)"
  },
  {
    "label": "CallParentGetters()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "CallParentGetters(&OutValue, InPropertyPath, InPropertyPath.GetCachedAddress())"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} return true ; } return false ; } } ; template<T,int32 N> struct FGetValueFastHelper<T [ N ]> { bool)",
    "insertText": "GetValue(const FCachedPropertyPath& InPropertyPath, T(&OutValue)[N], FProperty*& OutProperty)"
  },
  {
    "label": "CopyCompleteValue()",
    "kind": "Method",
    "detail": "Function (OutProperty ->)",
    "insertText": "CopyCompleteValue(&OutValue, InPropertyPath.GetCachedAddress())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InPropertyPath.GetCachedAddress())"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} return false ; } template<T> struct FSetValueFastHelper { bool)",
    "insertText": "SetValue(const FCachedPropertyPath& InPropertyPath, const T& InValue)"
  },
  {
    "label": "FArrayProperty()",
    "kind": "Method",
    "detail": "Function (FArrayProperty* ArrayProp = CastField<)",
    "insertText": "FArrayProperty(Property)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (const void* Value = nullptr ; if)",
    "insertText": "constexpr(std::is_same<FPropertyStructView, T>::value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (Value = static_cast<const)",
    "insertText": "void(InStuctView.Memory)"
  },
  {
    "label": "IsPropertyCompatible()",
    "kind": "Method",
    "detail": "Function (} else { Value =& InValue ; } auto)",
    "insertText": "IsPropertyCompatible(FProperty* InProperty)"
  },
  {
    "label": "CallSetter()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CallSetter(InPropertyPath.GetCachedContainer(), Value)"
  },
  {
    "label": "CopySingleValue()",
    "kind": "Method",
    "detail": "Function (} else { Property ->)",
    "insertText": "CopySingleValue(InPropertyPath.GetCachedAddress(), Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} return true ; } } } ; template<T,int32 N> struct FSetValueFastHelper<T [ N ]> { bool)",
    "insertText": "SetValue(const FCachedPropertyPath& InPropertyPath, const T(&InValue)[N])"
  },
  {
    "label": "CopyCompleteValue()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CopyCompleteValue(InPropertyPath.GetCachedAddress(), &InValue)"
  },
  {
    "label": "CopySingleValue()",
    "kind": "Method",
    "detail": "Function (ArrayProp -> Inner ->)",
    "insertText": "CopySingleValue(InPropertyPath.GetCachedAddress(), &InValue)"
  },
  {
    "label": "CallSetter()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "CallSetter(InPropertyPath.GetCachedContainer(), &InValue)"
  }
]