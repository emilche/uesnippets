[
  {
    "label": "FMixerSourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerSourceManager"
  },
  {
    "label": "FAudioBusSend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioBusSend"
  },
  {
    "label": "FMixerAudioBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMixerAudioBus"
  },
  {
    "label": "AddNewPatchOutput()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Audio . h \" # include \" DSP / MultithreadedPatching . h \" # include \" Sound / AudioSettings . h \" namespace Audio { class FMixerSourceManager ; struct FAudioBusSend { int32 SourceId = INDEX_NONE ; float SendLevel = 0 . 0 f ; } ; class FMixerAudioBus { public : void)",
    "insertText": "AddNewPatchOutput(const FPatchOutputStrongPtr& InPatchOutputStrongPtr)"
  },
  {
    "label": "AddNewPatchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewPatchInput(const FPatchInput& InPatchInput)"
  },
  {
    "label": "RemovePatchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePatchInput(const FPatchInput& InPatchInput)"
  },
  {
    "label": "FMixerAudioBus()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FMixerAudioBus(FMixerSourceManager* SourceManager, bool bInIsAutomatic, int32 InNumChannels)"
  },
  {
    "label": "SetAutomatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutomatic(bool bInIsAutomatic)"
  },
  {
    "label": "IsAutomatic()",
    "kind": "Method",
    "detail": "Function (bIsAutomatic = bInIsAutomatic ; } bool)",
    "insertText": "IsAutomatic()"
  },
  {
    "label": "AddInstanceId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInstanceId(const int32 InSourceInstanceId, int32 InNumOutputChannels)"
  },
  {
    "label": "RemoveInstanceId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveInstanceId(const int32 InSourceId)"
  },
  {
    "label": "AddSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSend(EBusSendType BusSendType, const FAudioBusSend& InBusSend)"
  },
  {
    "label": "RemoveSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSend(EBusSendType BusSendType, const int32 InSourceId)"
  },
  {
    "label": "GetCurrentBusBuffer()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetCurrentBusBuffer()"
  },
  {
    "label": "GetPreviousBusBuffer()",
    "kind": "Method",
    "detail": "Function (const float*)",
    "insertText": "GetPreviousBusBuffer()"
  },
  {
    "label": "MixBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MixBuffer()"
  },
  {
    "label": "CopyCurrentBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurrentBuffer(Audio::FAlignedFloatBuffer& InChannelMap, int32 InNumOutputChannels, FAlignedFloatBuffer& OutBuffer, int32 NumOutputFrames)"
  },
  {
    "label": "CopyCurrentBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurrentBuffer(int32 InNumOutputChannels, FAlignedFloatBuffer& OutBuffer, int32 NumOutputFrames)"
  },
  {
    "label": "SetNumOutputChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumOutputChannels(int32 InNumOutputChannels)"
  },
  {
    "label": "AudioBusSends()",
    "kind": "Method",
    "detail": "Function (TArray<int32> InstanceIds ; TArray<FAudioBusSend>)",
    "insertText": "AudioBusSends(int32)"
  }
]