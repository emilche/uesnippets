[
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "TaskQueueDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TaskQueueDeleter"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TASK_QUEUE_TASK_QUEUE_BASE_H_ # define API_TASK_QUEUE_TASK_QUEUE_BASE_H_ # include<memory> # include<utility> # include \" absl / functional / any_invocable . h \" # include \" api / units / time_delta . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class RTC_LOCKABLE RTC_EXPORT TaskQueueBase { public : enum class DelayPrecision { kLow,kHigh,} ; void)",
    "insertText": "Delete()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTask(absl::AnyInvocable<void() &&> task, TimeDelta delay)"
  },
  {
    "label": "PostDelayedHighPrecisionTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedHighPrecisionTask(absl::AnyInvocable<void() &&> task, TimeDelta delay)"
  },
  {
    "label": "PostDelayedTaskWithPrecision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTaskWithPrecision(DelayPrecision precision, absl::AnyInvocable<void() &&> task, TimeDelta delay)"
  },
  {
    "label": "PostDelayedHighPrecisionTask()",
    "kind": "Method",
    "detail": "Function (break ; case DelayPrecision::kHigh :)",
    "insertText": "PostDelayedHighPrecisionTask(std::move(task), delay)"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (break ; } } TaskQueueBase*)",
    "insertText": "Current()"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrent()"
  },
  {
    "label": "CurrentTaskQueueSetter()",
    "kind": "Method",
    "detail": "Function (} protected : class RTC_EXPORT CurrentTaskQueueSetter { public :)",
    "insertText": "CurrentTaskQueueSetter(TaskQueueBase* task_queue)"
  },
  {
    "label": "CurrentTaskQueueSetter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentTaskQueueSetter(const CurrentTaskQueueSetter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurrentTaskQueueSetter&)",
    "insertText": "operator(const CurrentTaskQueueSetter&)"
  },
  {
    "label": "CurrentTaskQueueSetter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CurrentTaskQueueSetter()"
  },
  {
    "label": "TaskQueueBase()",
    "kind": "Method",
    "detail": "Function (private : TaskQueueBase* const previous_ ; } ; ~)",
    "insertText": "TaskQueueBase()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct TaskQueueDeleter { void)",
    "insertText": "operator()(TaskQueueBase* task_queue)"
  }
]