[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UEditorLevelUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorLevelUtils"
  },
  {
    "label": "FCreateNewStreamingLevelForWorldParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateNewStreamingLevelForWorldParams"
  },
  {
    "label": "FAddLevelToWorldParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddLevelToWorldParams"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" EditorLevelUtils . generated . h \" class AActor ; class ULevel ; class ULevelStreaming ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLevelTools, Warning, All)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (ModifyOnChange,DontModify } ;)",
    "insertText": "UCLASS(transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintCallable, Category = \"Editor Scripting | Level Creation\") static UNREALED_API ULevelStreaming* CreateNewStreamingLevel(UPARAM(meta = (AllowAbstract = \"false\")) TSubclassOf<ULevelStreaming> LevelStreamingClass, const FString& NewLevelPath = TEXT(\"\"), bool bMoveSelectedActorsIntoNewLevel = false)"
  },
  {
    "label": "MakeLevelCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeLevelCurrent(ULevel* InLevel, bool bEvenIfLocked = false)"
  },
  {
    "label": "MoveActorsToLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MoveActorsToLevel(const TArray<AActor*>& ActorsToMove, ULevel* DestLevel, bool bWarnAboutReferences = true, bool bWarnAboutRenaming = true, bool bMoveAllOrFail = false, TArray<AActor*>* OutActors = nullptr)"
  },
  {
    "label": "CopyActorsToLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CopyActorsToLevel(const TArray<AActor*>& ActorsToMove, ULevel* DestLevel, bool bWarnAboutReferences = true, bool bWarnAboutRenaming = true, bool bMoveAllOrFail = false, TArray<AActor*>* OutActors = nullptr)"
  },
  {
    "label": "MoveSelectedActorsToLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MoveSelectedActorsToLevel(ULevel* DestLevel, bool bWarnAboutReferences = true)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FCanMoveActorToLevelDelegate, const AActor* , const ULevel* , bool&)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (FCanMoveActorToLevelDelegate CanMoveActorToLevelDelegate ;)",
    "insertText": "DECLARE_EVENT_TwoParams(UEditorLevelUtils, FOnMoveActorsToLevelEvent, const TArray<AActor*>& , const ULevel*)"
  },
  {
    "label": "CreateNewStreamingLevelForWorld()",
    "kind": "Method",
    "detail": "Function (FOnMoveActorsToLevelEvent OnMoveActorsToLevelEvent ; ULevelStreaming*)",
    "insertText": "CreateNewStreamingLevelForWorld(UWorld& World, TSubclassOf<ULevelStreaming> LevelStreamingClass, const FString& DefaultFilename = TEXT(\"\"), bool bMoveSelectedActorsIntoNewLevel = false, UWorld* InTemplateWorld = nullptr, bool bInUseSaveAs = true, TFunction<void(ULevel*)> InPreSaveLevelOperation = TFunction<void(ULevel*)>(), const FTransform& InTransform = FTransform::Identity)"
  },
  {
    "label": "CreateNewStreamingLevelForWorld()",
    "kind": "Method",
    "detail": "Function (ULevelStreaming*)",
    "insertText": "CreateNewStreamingLevelForWorld(UWorld& World, TSubclassOf<ULevelStreaming> LevelStreamingClass, bool bUseExternalActors, const FString& DefaultFilename, const TArray<AActor*>* ActorsToMove = nullptr, UWorld* InTemplateWorld = nullptr, bool bInUseSaveAs = true, bool bIsPartitioned = false, TFunction<void(ULevel*)> InPreSaveLevelOperation = TFunction<void(ULevel*)>(), const FTransform& InTransform = FTransform::Identity)"
  },
  {
    "label": "FCreateNewStreamingLevelForWorldParams()",
    "kind": "Method",
    "detail": "Function (struct FCreateNewStreamingLevelForWorldParams {)",
    "insertText": "FCreateNewStreamingLevelForWorldParams(TSubclassOf<ULevelStreaming> InLevelStreamingClass, FString InDefaultFilename) : LevelStreamingClass(InLevelStreamingClass), DefaultFilename(InDefaultFilename)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} TSubclassOf<ULevelStreaming> LevelStreamingClass ; FString DefaultFilename ; UWorld* TemplateWorld = nullptr ; FTransform Transform = FTransform::Identity ; const TArray<AActor*>* ActorsToMove = nullptr ; bool bUseExternalActors = false ; bool bCreateWorldPartition = false ; bool bEnableWorldPartitionStreaming = true ; bool bUseSaveAs = true ; TFunction<)",
    "insertText": "void(ULevel*)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(ULevelStreaming*)"
  },
  {
    "label": "CreateNewStreamingLevelForWorld()",
    "kind": "Method",
    "detail": "Function (} ; ULevelStreaming*)",
    "insertText": "CreateNewStreamingLevelForWorld(UWorld& InWorld, const FCreateNewStreamingLevelForWorldParams& InCreateParams)"
  },
  {
    "label": "AddLevelsToWorld()",
    "kind": "Method",
    "detail": "Function (ULevel*)",
    "insertText": "AddLevelsToWorld(UWorld* InWorld, TArray<FString> LevelPackageNames, TSubclassOf<ULevelStreaming> LevelStreamingClass)"
  },
  {
    "label": "AddLevelToWorld()",
    "kind": "Method",
    "detail": "Function (} ULevelStreaming*)",
    "insertText": "AddLevelToWorld(UWorld* InWorld, const TCHAR* LevelPackageName, TSubclassOf<ULevelStreaming> LevelStreamingClass, const FTransform& LevelTransform = FTransform::Identity)"
  },
  {
    "label": "FAddLevelToWorldParams()",
    "kind": "Method",
    "detail": "Function (struct FAddLevelToWorldParams {)",
    "insertText": "FAddLevelToWorldParams(TSubclassOf<ULevelStreaming> InLevelStreamingClass, FName InLevelPackageName) : LevelStreamingClass(InLevelStreamingClass), PackageName(InLevelPackageName)"
  },
  {
    "label": "AddLevelToWorld()",
    "kind": "Method",
    "detail": "Function (} ; ULevelStreaming*)",
    "insertText": "AddLevelToWorld(UWorld* InWorld, const FAddLevelToWorldParams& InParams)"
  },
  {
    "label": "AddLevelToWorld_Internal()",
    "kind": "Method",
    "detail": "Function (private : ULevelStreaming*)",
    "insertText": "AddLevelToWorld_Internal(UWorld* InWorld, const FAddLevelToWorldParams& InParams)"
  },
  {
    "label": "CopyOrMoveActorsToLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CopyOrMoveActorsToLevel(const TArray<AActor*>& ActorsToMove, ULevel* DestLevel, bool bMoveActors, bool bWarnAboutReferences = true, bool bWarnAboutRenaming = true, bool bMoveAllOrFail = false, TArray<AActor*>* OutActors = nullptr)"
  },
  {
    "label": "SetStreamingClassForLevel()",
    "kind": "Method",
    "detail": "Function (public : ULevelStreaming*)",
    "insertText": "SetStreamingClassForLevel(ULevelStreaming* InLevel, TSubclassOf<ULevelStreaming> LevelStreamingClass)"
  },
  {
    "label": "RemoveLevelFromWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLevelFromWorld(ULevel* InLevel, bool bClearSelection = true, bool bResetTransBuffer = true)"
  },
  {
    "label": "RemoveLevelsFromWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveLevelsFromWorld(TArray<ULevel*> InLevels, bool bClearSelection = true, bool bResetTransBuffer = true)"
  },
  {
    "label": "RemoveInvalidLevelFromWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveInvalidLevelFromWorld(ULevelStreaming* InLevelStreaming)"
  },
  {
    "label": "SetLevelVisibilityTemporarily()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLevelVisibilityTemporarily(ULevel* Level, bool bShouldBeVisible)"
  },
  {
    "label": "DeselectAllSurfacesInLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectAllSurfacesInLevel(ULevel* InLevel)"
  },
  {
    "label": "ForEachWorlds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachWorlds(UWorld* InWorld, TFunctionRef<bool(UWorld*)> Operation, bool bIncludeInWorld, bool bOnlyEditorVisible = false)"
  },
  {
    "label": "GetWorlds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWorlds(UWorld* InWorld, TArray<UWorld*>& OutWorlds, bool bIncludeInWorld, bool bOnlyEditorVisible = false)"
  },
  {
    "label": "PrivateRemoveLevelFromWorld()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PrivateRemoveLevelFromWorld(ULevel* Level)"
  },
  {
    "label": "PrivateDestroyLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrivateDestroyLevel(ULevel* Level)"
  },
  {
    "label": "PrivateRemoveInvalidLevelFromWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrivateRemoveInvalidLevelFromWorld(ULevelStreaming* InLevelStreaming)"
  }
]