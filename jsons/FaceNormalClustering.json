[
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "FClusterOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterOptions"
  },
  {
    "label": "SetNormalAngleToleranceInDegrees()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" namespace UE::Geometry { class FDynamicMesh3 ; namespace FaceNormalClustering { struct FClusterOptions { double NormalOneMinusCosTolerance = . 0 1 ; double SmallFaceAreaThreshold = FMathd::ZeroTolerance ; int32 TargetMinGroups = 0 ; bool bApplyNormalToleranceToClusters = true ; void)",
    "insertText": "SetNormalAngleToleranceInDegrees(double ToleranceInDegrees)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (NormalOneMinusCosTolerance = 1 -)",
    "insertText": "Cos(FMathd::DegToRad * ToleranceInDegrees)"
  },
  {
    "label": "ComputeMeshPolyGroupsFromClusters()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "ComputeMeshPolyGroupsFromClusters(FDynamicMesh3& Mesh, TArray<TArray<int32>>& OutPolyGroups, const FClusterOptions& Options, TSet<int32>* IgnoreEdges = nullptr)"
  },
  {
    "label": "ComputeClusterCornerVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeClusterCornerVertices(FDynamicMesh3& Mesh, TArray<int32>& OutCornerVertices, const FClusterOptions& Options, TSet<int32>* IgnoreEdges = nullptr)"
  }
]