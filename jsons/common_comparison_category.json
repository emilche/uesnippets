[
  {
    "label": "_ClassifyCompCategory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_ClassifyCompCategory"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___COMPARE_COMMON_COMPARISON_CATEGORY_H # define _LIBCPP___COMPARE_COMMON_COMPARISON_CATEGORY_H # include<__compare / ordering . h> # include<__config> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__type_to_enum()",
    "kind": "Method",
    "detail": "Function (enum _ClassifyCompCategory : unsigned { _None,_PartialOrd,_WeakOrd,_StrongOrd,_CCC_Size } ; template<class _Tp> _LIBCPP_HIDE_FROM_ABI _ClassifyCompCategory)",
    "insertText": "__type_to_enum()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int __seen [ _CCC_Size ] = { } ;)",
    "insertText": "for(auto __type : __types)"
  },
  {
    "label": "_Ts()",
    "kind": "Method",
    "detail": "Function (using _CCC = _ClassifyCompCategory ; _CCC __type_kinds [ ] = { _StrongOrd,__type_to_enum<)",
    "insertText": "_Ts()"
  },
  {
    "label": "__compute_comp_type()",
    "kind": "Method",
    "detail": "Function (_CCC _Cat =)",
    "insertText": "__compute_comp_type(__type_kinds)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } template<class . . . _Ts> struct _LIBCPP_TEMPLATE_VIS common_comparison_category { using type =)",
    "insertText": "decltype(__comp_detail::__get_comp_type<_Ts...>())"
  }
]