[
  {
    "label": "FLineVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineVertex"
  },
  {
    "label": "FLineElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLineElement"
  },
  {
    "label": "FEditorElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorElement"
  },
  {
    "label": "FLineElementGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLineElementGenerator"
  },
  {
    "label": "FBlendParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendParameter"
  },
  {
    "label": "FBlendSpaceSegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendSpaceSegment"
  },
  {
    "label": "FLineVertex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" struct FLineVertex { float Position ; int32 Index ;)",
    "insertText": "FLineVertex(const float InPosition, const int32 InIndex) : Position(InPosition), Index(InIndex)"
  },
  {
    "label": "FLineElement()",
    "kind": "Method",
    "detail": "Function (} } ; struct FLineElement {)",
    "insertText": "FLineElement(const FLineVertex& InStart, const FLineVertex& InEnd) : Start(InStart), End(InEnd), bIsFirst(false), bIsLast(false)"
  },
  {
    "label": "PopulateElement()",
    "kind": "Method",
    "detail": "Function (Range = End . Position - Start . Position ; } bool)",
    "insertText": "PopulateElement(const float ElementPosition, struct FEditorElement& InOutElement)"
  },
  {
    "label": "IsBlendInputOnLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlendInputOnLine(const FVector& BlendInput)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} const FLineVertex Start ; const FLineVertex End ; bool bIsFirst ; bool bIsLast ; float Range ; } ; class FLineElementGenerator { public : void)",
    "insertText": "Init(const struct FBlendParameter& BlendParameter)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process()"
  },
  {
    "label": "CalculateEditorElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateEditorElements()"
  },
  {
    "label": "CalculateSegments()",
    "kind": "Method",
    "detail": "Function (TArray<struct FBlendSpaceSegment>)",
    "insertText": "CalculateSegments()"
  }
]