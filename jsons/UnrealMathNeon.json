[
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" PRAGMA_DISABLE_SHADOW_VARIABLE_WARNINGS # if PLATFORM_ENABLE_VECTORINTRINSICS_NEON #)",
    "insertText": "if((PLATFORM_WINDOWS || PLATFORM_HOLOLENS) && PLATFORM_64BITS) #include <arm64_neon.h> #else #include <arm_neon.h> #endif #include \"Math/Float16.h\" #ifdef _MSC_VER template<typename T, typename BASE_TYPE> struct alignas(alignof(T))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T m_vec ; } ; template<> float VectorRegisterWrapper<float32x4_t,float)",
    "insertText": "operator(int Index)"
  },
  {
    "label": "MakeVectorRegisterFloatConstant()",
    "kind": "Method",
    "detail": "Function (int32x4_t Out = { } ; Out . n128_i32 [ 0 ] = X ; Out . n128_i32 [ 1 ] = Y ; Out . n128_i32 [ 2 ] = Z ; Out . n128_i32 [ 3 ] = W ; return Out ; } VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloatConstant(float X, float Y, float Z, float W)"
  },
  {
    "label": "MakeVectorRegister2DoubleConstant()",
    "kind": "Method",
    "detail": "Function (float32x4_t Out = { } ; Out . n128_f32 [ 0 ] = X ; Out . n128_f32 [ 1 ] = Y ; Out . n128_f32 [ 2 ] = Z ; Out . n128_f32 [ 3 ] = W ; return Out ; } VectorRegister2Double)",
    "insertText": "MakeVectorRegister2DoubleConstant(double X, double Y)"
  },
  {
    "label": "GCC_ALIGN()",
    "kind": "Method",
    "detail": "Function (float64x2_t Out = { } ; Out . n128_f64 [ 0 ] = X ; Out . n128_f64 [ 1 ] = Y ; return Out ; } # else typedef float32x4_t)",
    "insertText": "GCC_ALIGN(16)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (struct { VectorRegister2Double XY ; VectorRegister2Double ZW ; } ;)",
    "insertText": "VectorRegister4Double()"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VectorRegister4Double(VectorRegister2Double xy, VectorRegister2Double zw, VectorRegisterConstInit) : XY(xy), ZW(zw)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VectorRegister4Double(const VectorRegister4Float& From)"
  },
  {
    "label": "vcvt_f64_f32()",
    "kind": "Method",
    "detail": "Function (XY =)",
    "insertText": "vcvt_f64_f32(*(float32x2_t*)&From)"
  },
  {
    "label": "vcvt_high_f64_f32()",
    "kind": "Method",
    "detail": "Function (ZW =)",
    "insertText": "vcvt_high_f64_f32(From)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VectorRegister4Double(const VectorRegister2Double& From)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "VectorRegister4Double(From)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "VectorLoadAligned(const double* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Float& Vec, float* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Double& Vec, double* Dst)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (struct)",
    "insertText": "alignas(alignof(VectorRegister4Float))"
  },
  {
    "label": "AlignedFloat4()",
    "kind": "Method",
    "detail": "Function (float V [ 4 ] ;)",
    "insertText": "AlignedFloat4(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Vec, V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} } ; struct)",
    "insertText": "alignas(alignof(VectorRegister4Double))"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (} } ; typedef AlignedDouble4 AlignedRegister4 ; typedef VectorRegister4Int VectorRegister4i ; typedef VectorRegister4Float VectorRegister4f ; typedef VectorRegister4Double VectorRegister4d ; typedef VectorRegister2Double VectorRegister2d ; VectorRegister4Float)",
    "insertText": "MakeVectorRegister(uint32 X, uint32 Y, uint32 Z, uint32 W)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (union U { VectorRegister4Float V ; uint32 F [ 4 ] ;)",
    "insertText": "U() : V()"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . F [ 0 ] = X ; Tmp . F [ 1 ] = Y ; Tmp . F [ 2 ] = Z ; Tmp . F [ 3 ] = W ; return Tmp . V ; } VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloat(uint32 X, uint32 Y, uint32 Z, uint32 W)"
  },
  {
    "label": "MakeVectorRegisterFloatMask()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloatMask(uint32 X, uint32 Y, uint32 Z, uint32 W)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "MakeVectorRegister(float X, float Y, float Z, float W)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . F [ 0 ] = X ; Tmp . F [ 1 ] = Y ; Tmp . F [ 2 ] = Z ; Tmp . F [ 3 ] = W ; return Tmp . V ; } VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloat(float X, float Y, float Z, float W)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "MakeVectorRegister(double X, double Y, double Z, double W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . D [ 0 ] = X ; Tmp . D [ 1 ] = Y ; Tmp . D [ 2 ] = Z ; Tmp . D [ 3 ] = W ; return Tmp . V ; } VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDouble(double X, double Y, double Z, double W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDouble(const VectorRegister2Double& XY, const VectorRegister2Double& ZW)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDouble(uint64 X, uint64 Y, uint64 Z, uint64 W)"
  },
  {
    "label": "MakeVectorRegisterDoubleMask()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . D [ 0 ] = X ; Tmp . D [ 1 ] = Y ; Tmp . D [ 2 ] = Z ; Tmp . D [ 3 ] = W ; return Tmp . V ; } VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDoubleMask(uint64 X, uint64 Y, uint64 Z, uint64 W)"
  },
  {
    "label": "MakeVectorRegister2Double()",
    "kind": "Method",
    "detail": "Function (} VectorRegister2Double)",
    "insertText": "MakeVectorRegister2Double(double X, double Y)"
  },
  {
    "label": "MakeVectorRegister2Double()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . D [ 0 ] = X ; Tmp . D [ 1 ] = Y ; return Tmp . V ; } VectorRegister2Double)",
    "insertText": "MakeVectorRegister2Double(uint64 X, uint64 Y)"
  },
  {
    "label": "MakeVectorRegisterInt()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . D [ 0 ] = X ; Tmp . D [ 1 ] = Y ; return Tmp . V ; } VectorRegister4Int)",
    "insertText": "MakeVectorRegisterInt(int32 X, int32 Y, int32 Z, int32 W)"
  },
  {
    "label": "MakeVectorRegisterInt64()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . I [ 0 ] = X ; Tmp . I [ 1 ] = Y ; Tmp . I [ 2 ] = Z ; Tmp . I [ 3 ] = W ; return Tmp . V ; } VectorRegister4Int)",
    "insertText": "MakeVectorRegisterInt64(int64 X, int64 Y)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . I [ 0 ] = X ; Tmp . I [ 1 ] = Y ; return Tmp . V ; } VectorRegister4Double)",
    "insertText": "MakeVectorRegisterDouble(const VectorRegister4Float& From)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "MakeVectorRegisterFloatFromDouble(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorZeroFloat()",
    "kind": "Method",
    "detail": "Function (} # include \" Math / UnrealMathVectorConstants . h \" VectorRegister4Float)",
    "insertText": "VectorZeroFloat()"
  },
  {
    "label": "VectorZeroDouble()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorZeroDouble()"
  },
  {
    "label": "vdupq_n_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister2Double Zero =)",
    "insertText": "vdupq_n_f64(0.0)"
  },
  {
    "label": "VectorOneFloat()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorOneFloat()"
  },
  {
    "label": "VectorOneDouble()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorOneDouble()"
  },
  {
    "label": "vdupq_n_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vdupq_n_f64(1.0f)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (Result . ZW = Result . XY ; return Result ; } VectorRegister4Float)",
    "insertText": "VectorLoad(const float* Ptr)"
  },
  {
    "label": "VectorLoad()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoad(const double* Ptr)"
  },
  {
    "label": "vld1q_f64_x2()",
    "kind": "Method",
    "detail": "Function (float64x2x2_t Vec =)",
    "insertText": "vld1q_f64_x2(Ptr)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "Result(VectorRegister4Double*)"
  },
  {
    "label": "VectorLoadFloat2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadFloat2(const float* Ptr)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadFloat3(const double* Ptr)"
  },
  {
    "label": "vld1q_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vld1q_f64(Ptr)"
  },
  {
    "label": "vcombine_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vcombine_f64(vld1_f64(&Ptr[2]), vdup_n_f64(0.0))"
  },
  {
    "label": "vcombine_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vcombine_f64(vld1_f64(&Ptr[2]), vdup_n_f64(1.0))"
  },
  {
    "label": "VectorSetComponentImpl()",
    "kind": "Method",
    "detail": "Function (} template<int ElementIndex> VectorRegister2Double)",
    "insertText": "VectorSetComponentImpl(const VectorRegister2Double& Vec, double Scalar)"
  },
  {
    "label": "VectorSetComponentImpl()",
    "kind": "Method",
    "detail": "Function (} template<int ElementIndex> VectorRegister4Double)",
    "insertText": "VectorSetComponentImpl(const VectorRegister4Double& Vec, double Scalar)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; if)",
    "insertText": "constexpr(ElementIndex > 1)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (Result . XY = Vec . XY ; Result . ZW = VectorSetComponentImpl<)",
    "insertText": "ElementIndex(Vec.ZW, Scalar)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (} else { Result . XY = VectorSetComponentImpl<)",
    "insertText": "ElementIndex(Vec.XY, Scalar)"
  },
  {
    "label": "VectorSetComponent()",
    "kind": "Method",
    "detail": "Function (Result . ZW = Vec . ZW ; } return Result ; } # define)",
    "insertText": "VectorSetComponent(Vec, ElementIndex, Scalar ) VectorSetComponentImpl<ElementIndex>(Vec, Scalar) FORCEINLINE VectorRegister4Float VectorLoadAligned( const float* Ptr)"
  },
  {
    "label": "VectorLoadFloat1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadFloat1(const float *Ptr)"
  },
  {
    "label": "VectorLoadDouble1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadDouble1(const double* Ptr)"
  },
  {
    "label": "vdupq_n_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vdupq_n_f64(Ptr[0])"
  },
  {
    "label": "VectorLoad64Bits()",
    "kind": "Method",
    "detail": "Function (Result . ZW = Result . XY ; return Result ; } VectorRegister4i)",
    "insertText": "VectorLoad64Bits(const void *Ptr)"
  },
  {
    "label": "VectorLoadTwoPairsFloat()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadTwoPairsFloat(const float* Ptr1, const float* Ptr2)"
  },
  {
    "label": "vld1_f32()",
    "kind": "Method",
    "detail": "Function (float32x2_t Lo =)",
    "insertText": "vld1_f32(Ptr1)"
  },
  {
    "label": "vld1_f32()",
    "kind": "Method",
    "detail": "Function (float32x2_t Hi =)",
    "insertText": "vld1_f32(Ptr2)"
  },
  {
    "label": "VectorLoadTwoPairsFloat()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLoadTwoPairsFloat(const double* Ptr1, const double* Ptr2)"
  },
  {
    "label": "vld1q_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Res ; Res . XY =)",
    "insertText": "vld1q_f64(Ptr1)"
  },
  {
    "label": "vld1q_f64()",
    "kind": "Method",
    "detail": "Function (Res . ZW =)",
    "insertText": "vld1q_f64(Ptr2)"
  },
  {
    "label": "VectorSetFloat1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSetFloat1(double X)"
  },
  {
    "label": "vdupq_n_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vdupq_n_f64(X)"
  },
  {
    "label": "vst1q_f32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_f32(Ptr, Vec)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Double& Vec, double* Ptr)"
  },
  {
    "label": "vst1q_f64_x2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_f64_x2(Ptr, *(float64x2x2_t*)&Vec)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreAligned(VectorRegister4Float Vec, FFloat16* Ptr)"
  },
  {
    "label": "Floats()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "Floats(Vec)"
  },
  {
    "label": "VectorStoreAlignedStreamed()",
    "kind": "Method",
    "detail": "Function (Ptr [ i ] = Floats [ i ] ; } } # define)",
    "insertText": "VectorStoreAlignedStreamed(Vec, Ptr ) VectorStoreAligned( Vec, Ptr ) FORCEINLINE void VectorStore(const VectorRegister4Float& Vec, float* Ptr)"
  },
  {
    "label": "VectorStore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStore(const VectorRegister4Double& Vec, double* Ptr)"
  },
  {
    "label": "VectorStore16()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStore16(const VectorRegister4x4Float& Vec, float* Ptr)"
  },
  {
    "label": "vst1q_f32_x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_f32_x4(Ptr, Vec)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Float& Vec, float* Ptr)"
  },
  {
    "label": "vst1_f32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1_f32(Ptr, *(float32x2_t*)&Vec)"
  },
  {
    "label": "vst1q_lane_f32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_lane_f32(((float32_t*)Ptr) + 2, Vec, 2)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat3(const VectorRegister4Double& Vec, double* Ptr)"
  },
  {
    "label": "vst1q_f64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_f64(Ptr, Vec.XY)"
  },
  {
    "label": "vst1q_lane_f64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_lane_f64(((float64_t*)Ptr) + 2, Vec.ZW, 0)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat1(VectorRegister4Float Vec, float* Ptr)"
  },
  {
    "label": "vst1q_lane_f32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_lane_f32(Ptr, Vec, 0)"
  },
  {
    "label": "VectorStoreFloat1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreFloat1(const VectorRegister4Double& Vec, double* Ptr)"
  },
  {
    "label": "vst1q_lane_f64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_lane_f64(Ptr, Vec.XY, 0)"
  },
  {
    "label": "VectorReplicateImpl()",
    "kind": "Method",
    "detail": "Function (} template<int ElementIndex> VectorRegister4Float)",
    "insertText": "VectorReplicateImpl(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorReplicateImpl()",
    "kind": "Method",
    "detail": "Function (} template<int ElementIndex> VectorRegister2Double)",
    "insertText": "VectorReplicateImpl(const VectorRegister2Double& Vec)"
  },
  {
    "label": "VectorReplicateImpl()",
    "kind": "Method",
    "detail": "Function (} template<int ElementIndex> VectorRegister4Double)",
    "insertText": "VectorReplicateImpl(const VectorRegister4Double& Vec)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; if)",
    "insertText": "constexpr(ElementIndex <= 1)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (Result . XY = VectorReplicateImpl<)",
    "insertText": "ElementIndex(Vec.XY)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (Result . ZW = Result . XY ; } else { Result . ZW = VectorReplicateImpl<)",
    "insertText": "ElementIndex(Vec.ZW)"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (Result . XY = Result . ZW ; } return Result ; } # define)",
    "insertText": "VectorReplicate(Vec, ElementIndex ) VectorReplicateImpl<ElementIndex>(Vec) FORCEINLINE VectorRegister4Float VectorAbs(VectorRegister4Float Vec)"
  },
  {
    "label": "VectorAbs()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorAbs(VectorRegister4Double Vec)"
  },
  {
    "label": "vabsq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vabsq_f64(Vec.XY)"
  },
  {
    "label": "vabsq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vabsq_f64(Vec.ZW)"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorNegate(VectorRegister4Double Vec)"
  },
  {
    "label": "vnegq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vnegq_f64(Vec.XY)"
  },
  {
    "label": "vnegq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vnegq_f64(Vec.ZW)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorAdd(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "vaddq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vaddq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vaddq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vaddq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSubtract(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "vsubq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Res ; Res . XY =)",
    "insertText": "vsubq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vsubq_f64()",
    "kind": "Method",
    "detail": "Function (Res . ZW =)",
    "insertText": "vsubq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (} VectorRegister2Double)",
    "insertText": "VectorMultiply(VectorRegister2Double Vec1, VectorRegister2Double Vec2)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMultiply(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "vmulq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vmulq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vmulq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vmulq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorDivide(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "vdivq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Res ; Res . XY =)",
    "insertText": "vdivq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vdivq_f64()",
    "kind": "Method",
    "detail": "Function (Res . ZW =)",
    "insertText": "vdivq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMultiplyAdd(VectorRegister4Double Vec1, VectorRegister4Double Vec2, VectorRegister4Double Acc)"
  },
  {
    "label": "vfmaq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vfmaq_f64(Acc.XY, Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vfmaq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vfmaq_f64(Acc.ZW, Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorNegateMultiplyAdd(VectorRegister4Double Vec1, VectorRegister4Double Vec2, VectorRegister4Double Sub)"
  },
  {
    "label": "vfmsq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vfmsq_f64(Sub.XY, Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vfmsq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vfmsq_f64(Sub.ZW, Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Temp =)",
    "insertText": "VectorMultiply(Vec1, Vec2)"
  },
  {
    "label": "vsetq_lane_f32()",
    "kind": "Method",
    "detail": "Function (Temp =)",
    "insertText": "vsetq_lane_f32(0.0f, Temp, 3)"
  },
  {
    "label": "vpadd_f32()",
    "kind": "Method",
    "detail": "Function (float32x2_t sum =)",
    "insertText": "vpadd_f32(vget_low_f32( Temp ), vget_high_f32( Temp ))"
  },
  {
    "label": "vpadd_f32()",
    "kind": "Method",
    "detail": "Function (sum =)",
    "insertText": "vpadd_f32(sum, sum)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorDot3(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "vfmaq_f64()",
    "kind": "Method",
    "detail": "Function (B =)",
    "insertText": "vfmaq_f64(A, Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "vadd_f64()",
    "kind": "Method",
    "detail": "Function (float64x1_t Sum =)",
    "insertText": "vadd_f64(vget_low_f64(B), vget_high_f64(A))"
  },
  {
    "label": "vdupq_lane_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Temp ; Temp . XY =)",
    "insertText": "vdupq_lane_f64(Sum, 0)"
  },
  {
    "label": "VectorDot3Scalar()",
    "kind": "Method",
    "detail": "Function (Temp . ZW = Temp . XY ; return Temp ; } float)",
    "insertText": "VectorDot3Scalar(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorDot3Scalar()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "VectorDot3Scalar(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorDot4()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorDot4(VectorRegister4Float Vec1, VectorRegister4Float Vec2)"
  },
  {
    "label": "vpadd_f32()",
    "kind": "Method",
    "detail": "Function (float32x2_t sum =)",
    "insertText": "vpadd_f32(vget_low_f32(Temp), vget_high_f32(Temp))"
  },
  {
    "label": "VectorDot4()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorDot4(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "vextq_f64()",
    "kind": "Method",
    "detail": "Function (A =)",
    "insertText": "vextq_f64(B, B, 1)"
  },
  {
    "label": "vaddq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Temp ; Temp . XY =)",
    "insertText": "vaddq_f64(A, B)"
  },
  {
    "label": "VectorCompareEQ()",
    "kind": "Method",
    "detail": "Function (Temp . ZW = Temp . XY ; return Temp ; } VectorRegister4Float)",
    "insertText": "VectorCompareEQ(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCompareEQ()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareEQ(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result .)",
    "insertText": "XY(VectorRegister2Double)vceqq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "ZW(VectorRegister2Double)vceqq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorCompareNE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareNE(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result .)",
    "insertText": "XY(VectorRegister2Double)vmvnq_u32(vceqq_f64(Vec1.XY, Vec2.XY))"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "ZW(VectorRegister2Double)vmvnq_u32(vceqq_f64(Vec1.ZW, Vec2.ZW))"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareGT(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result .)",
    "insertText": "XY(VectorRegister2Double)vcgtq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "ZW(VectorRegister2Double)vcgtq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareGE(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result .)",
    "insertText": "XY(VectorRegister2Double)vcgeq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "ZW(VectorRegister2Double)vcgeq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorCompareLT()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareLT(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Res ; Res .)",
    "insertText": "XY(VectorRegister2Double)vcltq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Res .)",
    "insertText": "ZW(VectorRegister2Double)vcltq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorCompareLE()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCompareLE(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Res ; Res .)",
    "insertText": "XY(VectorRegister2Double)vcleq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Res .)",
    "insertText": "ZW(VectorRegister2Double)vcleq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSelect(const VectorRegister4Double& Mask, const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "vbslq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vbslq_f64((VectorRegister2Int64)Mask.XY, Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vbslq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vbslq_f64((VectorRegister2Int64)Mask.ZW, Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorBitwiseOr()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorBitwiseOr(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result .)",
    "insertText": "XY(VectorRegister2Double)vorrq_u64((VectorRegister2Int64)Vec1.XY, (VectorRegister2Int64)Vec2.XY)"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "ZW(VectorRegister2Double)vorrq_u64((VectorRegister2Int64)Vec1.ZW, (VectorRegister2Int64)Vec2.ZW)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorBitwiseAnd(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result .)",
    "insertText": "XY(VectorRegister2Double)vandq_u64((VectorRegister2Int64)Vec1.XY, (VectorRegister2Int64)Vec2.XY)"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "ZW(VectorRegister2Double)vandq_u64((VectorRegister2Int64)Vec1.ZW, (VectorRegister2Int64)Vec2.ZW)"
  },
  {
    "label": "VectorBitwiseXor()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorBitwiseXor(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "XY()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result .)",
    "insertText": "XY(VectorRegister2Double)veorq_u64((VectorRegister2Int64)Vec1.XY, (VectorRegister2Int64)Vec2.XY)"
  },
  {
    "label": "ZW()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "ZW(VectorRegister2Double)veorq_u64((VectorRegister2Int64)Vec1.ZW, (VectorRegister2Int64)Vec2.ZW)"
  },
  {
    "label": "vget_low_f32()",
    "kind": "Method",
    "detail": "Function (uint32_t ControlElement [ 4 ] = { 0 x03020100,0 x07060504,0 x0B0A0908,0 x0F0E0D0C,} ; uint8x8x2_t tbl ; tbl . val [ 0 ] =)",
    "insertText": "vget_low_f32(V)"
  },
  {
    "label": "vget_high_f32()",
    "kind": "Method",
    "detail": "Function (tbl . val [ 1 ] =)",
    "insertText": "vget_high_f32(V)"
  },
  {
    "label": "vcreate_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t idx =)",
    "insertText": "vcreate_u32(static_cast<uint64>(ControlElement[E0]) | (static_cast<uint64>(ControlElement[E1]) << 32))"
  },
  {
    "label": "vtbl2_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x8_t rL =)",
    "insertText": "vtbl2_u8(tbl, idx)"
  },
  {
    "label": "vcreate_u32()",
    "kind": "Method",
    "detail": "Function (idx =)",
    "insertText": "vcreate_u32(static_cast<uint64>(ControlElement[E2]) | (static_cast<uint64>(ControlElement[E3]) << 32))"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSwizzle(VectorRegister4Double V, uint32 E0, uint32 E1, uint32 E2, uint32 E3)"
  },
  {
    "label": "vcombine_u64()",
    "kind": "Method",
    "detail": "Function (uint64_t ControlElement [ 4 ] = { 0 x0706050403020100ULL,0 x0F0E0D0C0B0A0908ULL,0 x1716151413121110ULL,0 x1F1E1D1C1B1A1918ULL,} ; uint8x16x2_t tbl ; tbl . val [ 0 ] = V . XY ; tbl . val [ 1 ] = V . ZW ; VectorRegister4Double Result ; uint32x4_t idx =)",
    "insertText": "vcombine_u64(vcreate_u64(ControlElement[E0]), vcreate_u64(ControlElement[E1]))"
  },
  {
    "label": "vqtbl2q_u8()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vqtbl2q_u8(tbl, idx)"
  },
  {
    "label": "vcombine_u64()",
    "kind": "Method",
    "detail": "Function (idx =)",
    "insertText": "vcombine_u64(vcreate_u64(ControlElement[E2]), vcreate_u64(ControlElement[E3]))"
  },
  {
    "label": "VectorSwizzleImpl2()",
    "kind": "Method",
    "detail": "Function (} template<int X,int Y> VectorRegister2Double)",
    "insertText": "VectorSwizzleImpl2(VectorRegister4Double Vec)"
  },
  {
    "label": "__builtin_shufflevector()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__builtin_shufflevector(Vec.XY, Vec.ZW, X, Y)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } else { if)",
    "insertText": "constexpr(Y <= 1)"
  },
  {
    "label": "__builtin_shufflevector()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "__builtin_shufflevector(Vec.ZW, Vec.ZW, X - 2, Y)"
  },
  {
    "label": "VectorSwizzleImpl()",
    "kind": "Method",
    "detail": "Function (} } } template<int X,int Y,int Z,int W> VectorRegister4Double)",
    "insertText": "VectorSwizzleImpl(VectorRegister4Double Vec)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY = VectorSwizzleImpl2<X,)",
    "insertText": "Y(Vec)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (Result . ZW = VectorSwizzleImpl2<Z,)",
    "insertText": "W(Vec)"
  },
  {
    "label": "vget_low_f32()",
    "kind": "Method",
    "detail": "Function (uint32 ControlElement [ 8 ] = { 0 x03020100,0 x07060504,0 x0B0A0908,0 x0F0E0D0C,0 x13121110,0 x17161514,0 x1B1A1918,0 x1F1E1D1C,} ; uint8x8x4_t tbl ; tbl . val [ 0 ] =)",
    "insertText": "vget_low_f32(V1)"
  },
  {
    "label": "vget_high_f32()",
    "kind": "Method",
    "detail": "Function (tbl . val [ 1 ] =)",
    "insertText": "vget_high_f32(V1)"
  },
  {
    "label": "vget_low_f32()",
    "kind": "Method",
    "detail": "Function (tbl . val [ 2 ] =)",
    "insertText": "vget_low_f32(V2)"
  },
  {
    "label": "vget_high_f32()",
    "kind": "Method",
    "detail": "Function (tbl . val [ 3 ] =)",
    "insertText": "vget_high_f32(V2)"
  },
  {
    "label": "vcreate_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t idx =)",
    "insertText": "vcreate_u32(static_cast<uint64>(ControlElement[PermuteX]) | (static_cast<uint64>(ControlElement[PermuteY]) << 32))"
  },
  {
    "label": "vtbl4_u8()",
    "kind": "Method",
    "detail": "Function (const uint8x8_t rL =)",
    "insertText": "vtbl4_u8(tbl, idx)"
  },
  {
    "label": "vcreate_u32()",
    "kind": "Method",
    "detail": "Function (idx =)",
    "insertText": "vcreate_u32(static_cast<uint64>(ControlElement[PermuteZ + 4]) | (static_cast<uint64>(ControlElement[PermuteW + 4]) << 32))"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorShuffle(VectorRegister4Double V1, VectorRegister4Double V2, uint32 PermuteX, uint32 PermuteY, uint32 PermuteZ, uint32 PermuteW)"
  },
  {
    "label": "vcombine_u64()",
    "kind": "Method",
    "detail": "Function (uint64 ControlElement [ 8 ] = { 0 x0706050403020100ULL,0 x0F0E0D0C0B0A0908ULL,0 x1716151413121110ULL,0 x1F1E1D1C1B1A1918ULL,0 x2726252423222120ULL,0 x2F2E2D2C2B2A2928ULL,0 x3736353433323130ULL,0 x3F3E3D3C3B3A3938ULL,} ; uint8x16x4_t tbl ; tbl . val [ 0 ] = V1 . XY ; tbl . val [ 1 ] = V1 . ZW ; tbl . val [ 2 ] = V2 . XY ; tbl . val [ 3 ] = V2 . ZW ; VectorRegister4Double Result ; uint32x4_t idx =)",
    "insertText": "vcombine_u64(vcreate_u64(ControlElement[PermuteX]), vcreate_u64(ControlElement[PermuteY]))"
  },
  {
    "label": "vqtbl4q_u8()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vqtbl4q_u8(tbl, idx)"
  },
  {
    "label": "vcombine_u64()",
    "kind": "Method",
    "detail": "Function (idx =)",
    "insertText": "vcombine_u64(vcreate_u64(ControlElement[PermuteZ + 4]), vcreate_u64(ControlElement[PermuteW + 4]))"
  },
  {
    "label": "VectorShuffleImpl()",
    "kind": "Method",
    "detail": "Function (} template<int X,int Y,int Z,int W> VectorRegister4Double)",
    "insertText": "VectorShuffleImpl(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY = VectorSwizzleImpl2<X,)",
    "insertText": "Y(Vec1)"
  },
  {
    "label": "W()",
    "kind": "Method",
    "detail": "Function (Result . ZW = VectorSwizzleImpl2<Z,)",
    "insertText": "W(Vec2)"
  },
  {
    "label": "vshrq_n_s32()",
    "kind": "Method",
    "detail": "Function (int32x4_t Signs =)",
    "insertText": "vshrq_n_s32(vreinterpretq_s32_f32(VecMask), 31)"
  },
  {
    "label": "vandq_s32()",
    "kind": "Method",
    "detail": "Function (int32x4_t Masked =)",
    "insertText": "vandq_s32(Signs, MakeVectorRegisterInt(0x1, 0x2, 0x4, 0x8))"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "VectorMaskBits(VectorRegister4Double VecMask)"
  },
  {
    "label": "vshrq_n_s64()",
    "kind": "Method",
    "detail": "Function (int64x2_t Signs0 =)",
    "insertText": "vshrq_n_s64(vreinterpretq_s64_f32(VecMask.XY), 63)"
  },
  {
    "label": "vshrq_n_s64()",
    "kind": "Method",
    "detail": "Function (int64x2_t Signs1 =)",
    "insertText": "vshrq_n_s64(vreinterpretq_s64_f32(VecMask.ZW), 63)"
  },
  {
    "label": "vuzp1q_s32()",
    "kind": "Method",
    "detail": "Function (int32x4_t Signs =)",
    "insertText": "vuzp1q_s32(Signs0, Signs1)"
  },
  {
    "label": "VectorCombineHigh()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCombineHigh(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCombineHigh()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCombineHigh(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorCombineLow()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY = Vec1 . ZW ; Result . ZW = Vec2 . ZW ; return Result ; } VectorRegister4Float)",
    "insertText": "VectorCombineLow(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorCombineLow()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCombineLow(const VectorRegister4Double& Vec1, const VectorRegister4Double& Vec2)"
  },
  {
    "label": "VectorDeinterleave()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY = Vec1 . XY ; Result . ZW = Vec2 . XY ; return Result ; } void)",
    "insertText": "VectorDeinterleave(VectorRegister4Float& OutEvens, VectorRegister4Float& OutOdds, const VectorRegister4Float& Lo, const VectorRegister4Float& Hi)"
  },
  {
    "label": "vuzpq_f32()",
    "kind": "Method",
    "detail": "Function (float32x4x2_t deinterleaved =)",
    "insertText": "vuzpq_f32(Lo, Hi)"
  },
  {
    "label": "VectorDeinterleave()",
    "kind": "Method",
    "detail": "Function (OutEvens = deinterleaved . val [ 0 ] ; OutOdds = deinterleaved . val [ 1 ] ; } void)",
    "insertText": "VectorDeinterleave(VectorRegister4Double& RESTRICT OutEvens, VectorRegister4Double& RESTRICT OutOdds, const VectorRegister4Double& Lo, const VectorRegister4Double& Hi)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (OutEvens =)",
    "insertText": "VectorShuffle(Lo, Hi, 0, 2, 0, 2)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (OutOdds =)",
    "insertText": "VectorShuffle(Lo, Hi, 1, 3, 1, 3)"
  },
  {
    "label": "VectorCross()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCross(const VectorRegister4Float& Vec1, const VectorRegister4Float& Vec2)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float C =)",
    "insertText": "VectorMultiply(Vec1, VectorSwizzle(Vec2, 1, 2, 0, 3))"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "VectorNegateMultiplyAdd(VectorSwizzle(Vec1, 1, 2, 0, 3), Vec2, C)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "VectorSwizzle(C, 1, 2, 0, 3)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (} } B,E ; B . V = Base ; E . V = Exponent ; return)",
    "insertText": "MakeVectorRegister(powf(B.F[0], E.F[0]), powf(B.F[1], E.F[1]), powf(B.F[2], E.F[2]), powf(B.F[3], E.F[3]))"
  },
  {
    "label": "VectorPow()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorPow(const VectorRegister4Double& Base, const VectorRegister4Double& Exponent)"
  },
  {
    "label": "Values()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Values(Base)"
  },
  {
    "label": "Exponents()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Exponents(Exponent)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Values [ 0 ] =)",
    "insertText": "Pow(Values[0], Exponents[0])"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Values [ 1 ] =)",
    "insertText": "Pow(Values[1], Exponents[1])"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Values [ 2 ] =)",
    "insertText": "Pow(Values[2], Exponents[2])"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (Values [ 3 ] =)",
    "insertText": "Pow(Values[3], Exponents[3])"
  },
  {
    "label": "VectorReciprocalEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalEstimate(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorReciprocalEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalEstimate(const VectorRegister4Double& Vec)"
  },
  {
    "label": "vrecpeq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vrecpeq_f64(Vec.XY)"
  },
  {
    "label": "vrecpeq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vrecpeq_f64(Vec.ZW)"
  },
  {
    "label": "VectorReciprocalEstimate()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Reciprocal =)",
    "insertText": "VectorReciprocalEstimate(Vec)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Squared =)",
    "insertText": "VectorMultiply(Reciprocal, Reciprocal)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Double =)",
    "insertText": "VectorAdd(Reciprocal, Reciprocal)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Reciprocal =)",
    "insertText": "VectorNegateMultiplyAdd(Vec, Squared, Double)"
  },
  {
    "label": "VectorReciprocal()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocal(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorSqrt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSqrt(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorSqrt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSqrt(const VectorRegister4Double& Vec)"
  },
  {
    "label": "vsqrtq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vsqrtq_f64(Vec.XY)"
  },
  {
    "label": "vsqrtq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vsqrtq_f64(Vec.ZW)"
  },
  {
    "label": "VectorReciprocalSqrtEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalSqrtEstimate(const VectorRegister4Double& Vec)"
  },
  {
    "label": "vrsqrteq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vrsqrteq_f64(Vec.XY)"
  },
  {
    "label": "vrsqrteq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vrsqrteq_f64(Vec.ZW)"
  },
  {
    "label": "VectorReciprocalSqrtEstimate()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float RecipSqrt =)",
    "insertText": "VectorReciprocalSqrtEstimate(Vec)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (RecipSqrt =)",
    "insertText": "VectorMultiply(vrsqrtsq_f32(Vec, VectorMultiply(RecipSqrt, RecipSqrt)), RecipSqrt)"
  },
  {
    "label": "VectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalSqrt(const VectorRegister4Double& Vec)"
  },
  {
    "label": "vrsqrtsq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Tmp ; Tmp . XY =)",
    "insertText": "vrsqrtsq_f64(Vec.XY, VectorMultiply(RecipSqrt.XY, RecipSqrt.XY))"
  },
  {
    "label": "vrsqrtsq_f64()",
    "kind": "Method",
    "detail": "Function (Tmp . ZW =)",
    "insertText": "vrsqrtsq_f64(Vec.ZW, VectorMultiply(RecipSqrt.ZW, RecipSqrt.ZW))"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (RecipSqrt =)",
    "insertText": "VectorMultiply(Tmp, RecipSqrt)"
  },
  {
    "label": "VectorReciprocalLen()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalLen(const VectorRegister4Float& Vector)"
  },
  {
    "label": "VectorReciprocalLen()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalLen(const VectorRegister4Double& Vector)"
  },
  {
    "label": "VectorReciprocalLenEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorReciprocalLenEstimate(const VectorRegister4Float& Vector)"
  },
  {
    "label": "VectorReciprocalLenEstimate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorReciprocalLenEstimate(const VectorRegister4Double& Vector)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSet_W0(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorSet_W0()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSet_W0(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorSet_W1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSet_W1(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorSet_W1()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSet_W1(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorGetComponentImpl()",
    "kind": "Method",
    "detail": "Function (} template<uint32 ElementIndex> float)",
    "insertText": "VectorGetComponentImpl(VectorRegister4Float Vec)"
  },
  {
    "label": "VectorGetComponentImpl()",
    "kind": "Method",
    "detail": "Function (} template<int ElementIndex> double)",
    "insertText": "VectorGetComponentImpl(VectorRegister2Double Vec)"
  },
  {
    "label": "VectorGetComponentImpl()",
    "kind": "Method",
    "detail": "Function (} template<int ElementIndex> double)",
    "insertText": "VectorGetComponentImpl(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorGetComponent()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VectorGetComponent(Vec, ElementIndex) VectorGetComponentImpl<ElementIndex>(Vec) FORCEINLINE float VectorGetComponentDynamic(VectorRegister4Float Vec, uint32 ElementIndex)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(Vec)"
  },
  {
    "label": "vld1q_f32_x4()",
    "kind": "Method",
    "detail": "Function (float32x4x4_t A =)",
    "insertText": "vld1q_f32_x4((const float*)Matrix1)"
  },
  {
    "label": "vld1q_f32_x4()",
    "kind": "Method",
    "detail": "Function (float32x4x4_t B =)",
    "insertText": "vld1q_f32_x4((const float*)Matrix2)"
  },
  {
    "label": "vmulq_lane_f32()",
    "kind": "Method",
    "detail": "Function (float32x4x4_t R ; R . val [ 0 ] =)",
    "insertText": "vmulq_lane_f32(B.val[0], vget_low_f32(A.val[0]), 0)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 0 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[0], B.val[1], vget_low_f32(A.val[0]), 1)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 0 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[0], B.val[2], vget_high_f32(A.val[0]), 0)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 0 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[0], B.val[3], vget_high_f32(A.val[0]), 1)"
  },
  {
    "label": "vmulq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 1 ] =)",
    "insertText": "vmulq_lane_f32(B.val[0], vget_low_f32(A.val[1]), 0)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 1 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[1], B.val[1], vget_low_f32(A.val[1]), 1)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 1 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[1], B.val[2], vget_high_f32(A.val[1]), 0)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 1 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[1], B.val[3], vget_high_f32(A.val[1]), 1)"
  },
  {
    "label": "vmulq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 2 ] =)",
    "insertText": "vmulq_lane_f32(B.val[0], vget_low_f32(A.val[2]), 0)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 2 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[2], B.val[1], vget_low_f32(A.val[2]), 1)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 2 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[2], B.val[2], vget_high_f32(A.val[2]), 0)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 2 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[2], B.val[3], vget_high_f32(A.val[2]), 1)"
  },
  {
    "label": "vmulq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 3 ] =)",
    "insertText": "vmulq_lane_f32(B.val[0], vget_low_f32(A.val[3]), 0)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 3 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[3], B.val[1], vget_low_f32(A.val[3]), 1)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 3 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[3], B.val[2], vget_high_f32(A.val[3]), 0)"
  },
  {
    "label": "vfmaq_lane_f32()",
    "kind": "Method",
    "detail": "Function (R . val [ 3 ] =)",
    "insertText": "vfmaq_lane_f32(R.val[3], B.val[3], vget_high_f32(A.val[3]), 1)"
  },
  {
    "label": "vst1q_f32_x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_f32_x4((float*)Result, R)"
  },
  {
    "label": "VectorMatrixMultiply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorMatrixMultiply(FMatrix44d* Result, const FMatrix44d* Matrix1, const FMatrix44d* Matrix2)"
  },
  {
    "label": "vld1q_f64_x4()",
    "kind": "Method",
    "detail": "Function (float64x2x4_t A =)",
    "insertText": "vld1q_f64_x4((const double*)Matrix1)"
  },
  {
    "label": "vld1q_f64_x4()",
    "kind": "Method",
    "detail": "Function (float64x2x4_t B1 =)",
    "insertText": "vld1q_f64_x4((const double*)Matrix2)"
  },
  {
    "label": "vld1q_f64_x4()",
    "kind": "Method",
    "detail": "Function (float64x2x4_t B2 =)",
    "insertText": "vld1q_f64_x4((const double*)Matrix2 + 8)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (float64_t*)",
    "insertText": "V(float64_t*)"
  },
  {
    "label": "vmulq_n_f64()",
    "kind": "Method",
    "detail": "Function (float64x2x4_t R ; R . val [ 0 ] =)",
    "insertText": "vmulq_n_f64(B1.val[0], V[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 0 ] =)",
    "insertText": "vfmaq_n_f64(R.val[0], B1.val[2], V[1])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 0 ] =)",
    "insertText": "vfmaq_n_f64(R.val[0], B2.val[0], V[2])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 0 ] =)",
    "insertText": "vfmaq_n_f64(R.val[0], B2.val[2], V[3])"
  },
  {
    "label": "vmulq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 1 ] =)",
    "insertText": "vmulq_n_f64(B1.val[1], V[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 1 ] =)",
    "insertText": "vfmaq_n_f64(R.val[1], B1.val[3], V[1])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 1 ] =)",
    "insertText": "vfmaq_n_f64(R.val[1], B2.val[1], V[2])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 1 ] =)",
    "insertText": "vfmaq_n_f64(R.val[1], B2.val[3], V[3])"
  },
  {
    "label": "vmulq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 2 ] =)",
    "insertText": "vmulq_n_f64(B1.val[0], V[4])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 2 ] =)",
    "insertText": "vfmaq_n_f64(R.val[2], B1.val[2], V[5])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 2 ] =)",
    "insertText": "vfmaq_n_f64(R.val[2], B2.val[0], V[6])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 2 ] =)",
    "insertText": "vfmaq_n_f64(R.val[2], B2.val[2], V[7])"
  },
  {
    "label": "vmulq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 3 ] =)",
    "insertText": "vmulq_n_f64(B1.val[1], V[4])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 3 ] =)",
    "insertText": "vfmaq_n_f64(R.val[3], B1.val[3], V[5])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 3 ] =)",
    "insertText": "vfmaq_n_f64(R.val[3], B2.val[1], V[6])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (R . val [ 3 ] =)",
    "insertText": "vfmaq_n_f64(R.val[3], B2.val[3], V[7])"
  },
  {
    "label": "vst1q_f64_x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_f64_x4((double*)Result, R)"
  },
  {
    "label": "vld1q_f64_x4()",
    "kind": "Method",
    "detail": "Function (A =)",
    "insertText": "vld1q_f64_x4((const double*)Matrix1 + 8)"
  },
  {
    "label": "vst1q_f64_x4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_f64_x4((double*)Result + 8, R)"
  },
  {
    "label": "VectorMatrixInverse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VectorMatrixInverse(FMatrix44d* DstMatrix, const FMatrix44d* SrcMatrix)"
  },
  {
    "label": "VectorMatrixInverse()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VectorMatrixInverse(FMatrix44f* DstMatrix, const FMatrix44f* SrcMatrix)"
  },
  {
    "label": "VectorTransformVector()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorTransformVector(const VectorRegister4Float& VecP, const FMatrix44f* MatrixM)"
  },
  {
    "label": "vld1q_f32_x4()",
    "kind": "Method",
    "detail": "Function (float32x4x4_t M =)",
    "insertText": "vld1q_f32_x4((const float*)MatrixM)"
  },
  {
    "label": "vmulq_n_f32()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Result ; Result =)",
    "insertText": "vmulq_n_f32(M.val[0], VecP[0])"
  },
  {
    "label": "vfmaq_n_f32()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "vfmaq_n_f32(Result, M.val[1], VecP[1])"
  },
  {
    "label": "vfmaq_n_f32()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "vfmaq_n_f32(Result, M.val[2], VecP[2])"
  },
  {
    "label": "vfmaq_n_f32()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "vfmaq_n_f32(Result, M.val[3], VecP[3])"
  },
  {
    "label": "vld1q_f64_x4()",
    "kind": "Method",
    "detail": "Function (float64x2x4_t M1 =)",
    "insertText": "vld1q_f64_x4((const double*)MatrixM)"
  },
  {
    "label": "vld1q_f64_x4()",
    "kind": "Method",
    "detail": "Function (float64x2x4_t M2 =)",
    "insertText": "vld1q_f64_x4(((const double*)MatrixM) + 8)"
  },
  {
    "label": "Vec()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; VectorRegister4Double)",
    "insertText": "Vec(VecP)"
  },
  {
    "label": "vmulq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vmulq_n_f64(M1.val[0], Vec.XY[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vfmaq_n_f64(Result.XY, M1.val[2], Vec.XY[1])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vfmaq_n_f64(Result.XY, M2.val[0], Vec.ZW[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vfmaq_n_f64(Result.XY, M2.val[2], Vec.ZW[1])"
  },
  {
    "label": "vmulq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vmulq_n_f64(M1.val[1], Vec.XY[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vfmaq_n_f64(Result.ZW, M1.val[3], Vec.XY[1])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vfmaq_n_f64(Result.ZW, M2.val[1], Vec.ZW[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vfmaq_n_f64(Result.ZW, M2.val[3], Vec.ZW[1])"
  },
  {
    "label": "VectorTransformVector()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorTransformVector(const VectorRegister4Double& VecP, const FMatrix44d* MatrixM)"
  },
  {
    "label": "vmulq_n_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vmulq_n_f64(M1.val[0], VecP.XY[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vfmaq_n_f64(Result.XY, M1.val[2], VecP.XY[1])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vfmaq_n_f64(Result.XY, M2.val[0], VecP.ZW[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . XY =)",
    "insertText": "vfmaq_n_f64(Result.XY, M2.val[2], VecP.ZW[1])"
  },
  {
    "label": "vmulq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vmulq_n_f64(M1.val[1], VecP.XY[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vfmaq_n_f64(Result.ZW, M1.val[3], VecP.XY[1])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vfmaq_n_f64(Result.ZW, M2.val[1], VecP.ZW[0])"
  },
  {
    "label": "vfmaq_n_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vfmaq_n_f64(Result.ZW, M2.val[3], VecP.ZW[1])"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMin(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "vminq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vminq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vminq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vminq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMax(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "vmaxq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vmaxq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "vmaxq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vmaxq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorMergeVecXYZ_VecW()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorMergeVecXYZ_VecW(const VectorRegister4Double& VecXYZ, const VectorRegister4Double& VecW)"
  },
  {
    "label": "vsetq_lane_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Res ; Res . XY = VecXYZ . XY ; Res . ZW =)",
    "insertText": "vsetq_lane_f64(vgetq_lane_f64(VecW.ZW, 1), VecXYZ.ZW, 1)"
  },
  {
    "label": "vreinterpret_u8_u32()",
    "kind": "Method",
    "detail": "Function (uint8x8_t AsUInt8 =)",
    "insertText": "vreinterpret_u8_u32(vld1_dup_u32((const uint32*)Ptr))"
  },
  {
    "label": "vmovl_u8()",
    "kind": "Method",
    "detail": "Function (uint16x8_t AsUInt16 =)",
    "insertText": "vmovl_u8(AsUInt8)"
  },
  {
    "label": "vmovl_u16()",
    "kind": "Method",
    "detail": "Function (uint32x4_t AsUInt32 =)",
    "insertText": "vmovl_u16(vget_low_u16(AsUInt16))"
  },
  {
    "label": "VectorLoadSignedByte4()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadSignedByte4(const void* Ptr)"
  },
  {
    "label": "vreinterpret_s8_u32()",
    "kind": "Method",
    "detail": "Function (int8x8_t AsInt8 =)",
    "insertText": "vreinterpret_s8_u32(vld1_dup_u32((const uint32*)Ptr))"
  },
  {
    "label": "vmovl_s8()",
    "kind": "Method",
    "detail": "Function (int16x8_t AsInt16 =)",
    "insertText": "vmovl_s8(AsInt8)"
  },
  {
    "label": "vmovl_s16()",
    "kind": "Method",
    "detail": "Function (int32x4_t AsInt32 =)",
    "insertText": "vmovl_s16(vget_low_u16(AsInt16))"
  },
  {
    "label": "VectorLoadByte4Reverse()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadByte4Reverse(const uint8* Ptr)"
  },
  {
    "label": "vrev32_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t AsUInt8 =)",
    "insertText": "vrev32_u8(vreinterpret_u8_u32(vld1_dup_u32((const uint32*)Ptr)))"
  },
  {
    "label": "VectorStoreByte4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreByte4(VectorRegister4Float Vec, void* Ptr)"
  },
  {
    "label": "vcvtq_u32_f32()",
    "kind": "Method",
    "detail": "Function (uint32x4_t AsUInt32 =)",
    "insertText": "vcvtq_u32_f32(Vec)"
  },
  {
    "label": "vqmovn_u32()",
    "kind": "Method",
    "detail": "Function (uint16x4_t AsUInt16 =)",
    "insertText": "vqmovn_u32(AsUInt32)"
  },
  {
    "label": "vqmovn_u16()",
    "kind": "Method",
    "detail": "Function (uint8x8_t AsUInt8 =)",
    "insertText": "vqmovn_u16(vcombine_u16(AsUInt16, vdup_n_u16(0)))"
  },
  {
    "label": "vst1_lane_u32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1_lane_u32((uint32_t*)Ptr, AsUInt8, 0)"
  },
  {
    "label": "VectorStoreSignedByte4()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreSignedByte4(VectorRegister4Float Vec, void* Ptr)"
  },
  {
    "label": "vcvtq_s32_f32()",
    "kind": "Method",
    "detail": "Function (int32x4_t AsInt32 =)",
    "insertText": "vcvtq_s32_f32(Vec)"
  },
  {
    "label": "vqmovn_s32()",
    "kind": "Method",
    "detail": "Function (int16x4_t AsInt16 =)",
    "insertText": "vqmovn_s32(AsInt32)"
  },
  {
    "label": "vqmovn_s16()",
    "kind": "Method",
    "detail": "Function (int8x8_t AsInt8 =)",
    "insertText": "vqmovn_s16(vcombine_s16(AsInt16, vdup_n_s16(0)))"
  },
  {
    "label": "vst1_lane_u32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1_lane_u32((uint32_t*)Ptr, AsInt8, 0)"
  },
  {
    "label": "VectorStoreHalf4()",
    "kind": "Method",
    "detail": "Function (} template<bool bAligned> void)",
    "insertText": "VectorStoreHalf4(VectorRegister4Float Vec, void* RESTRICT Ptr)"
  },
  {
    "label": "vcvt_f16_f32()",
    "kind": "Method",
    "detail": "Function (float16x4_t f16x4 =)",
    "insertText": "vcvt_f16_f32(Vec)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1_u8((uint8_t*)Ptr, f16x4)"
  },
  {
    "label": "VectorLoadURGB10A2N()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadURGB10A2N(void* Ptr)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "alignas(16)"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "E(uint32*)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 0 ] =)",
    "insertText": "float((E >> 00) & 0x3FF)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 1 ] =)",
    "insertText": "float((E >> 10) & 0x3FF)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 2 ] =)",
    "insertText": "float((E >> 20) & 0x3FF)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (V [ 3 ] =)",
    "insertText": "float((E >> 30) & 0x3)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Div =)",
    "insertText": "MakeVectorRegister(1.0f / 1023.0f, 1.0f / 1023.0f, 1.0f / 1023.0f, 1.0f / 3.0f)"
  },
  {
    "label": "VectorStoreURGB10A2N()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreURGB10A2N(const VectorRegister4Float& Vec, void* Ptr)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (} } Tmp ; Tmp . V =)",
    "insertText": "VectorMax(Vec, VectorZeroFloat())"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (Tmp . V =)",
    "insertText": "VectorMin(Tmp.V, VectorOneFloat())"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Tmp . V =)",
    "insertText": "VectorMultiply(Tmp.V, MakeVectorRegister(1023.0f, 1023.0f, 1023.0f, 3.0f))"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (uint32*)",
    "insertText": "Out(uint32*)"
  },
  {
    "label": "Out()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "Out(uint32(Tmp.F[0]) & 0x3FF) << 00 | (uint32(Tmp.F[1]) & 0x3FF) << 10 | (uint32(Tmp.F[2]) & 0x3FF) << 20 | (uint32(Tmp.F[3]) & 0x003)"
  },
  {
    "label": "VectorAnyGreaterThan()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VectorAnyGreaterThan(VectorRegister4Float Vec1, VectorRegister4Float Vec2)"
  },
  {
    "label": "Mask()",
    "kind": "Method",
    "detail": "Function (uint32x4_t)",
    "insertText": "Mask(uint32x4_t)VectorCompareGT(Vec1, Vec2)"
  },
  {
    "label": "VectorAnyGreaterThan()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VectorAnyGreaterThan(VectorRegister4Double Vec1, VectorRegister4Double Vec2)"
  },
  {
    "label": "MaskXY()",
    "kind": "Method",
    "detail": "Function (uint32x4_t)",
    "insertText": "MaskXY(uint32x4_t)vcgtq_f64(Vec1.XY, Vec2.XY)"
  },
  {
    "label": "MaskZW()",
    "kind": "Method",
    "detail": "Function (uint32x4_t)",
    "insertText": "MaskZW(uint32x4_t)vcgtq_f64(Vec1.ZW, Vec2.ZW)"
  },
  {
    "label": "VectorResetFloatRegisters()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VectorResetFloatRegisters() FORCEINLINE uint32_t VectorGetControlRegister()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS)",
    "insertText": "return(uint32_t)_ReadStatusReg(ARM64_FPCR)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (# else uint64_t Value ; __asm__)",
    "insertText": "volatile(\"mrs %0, fpcr\" : \"=r\"(Value))"
  },
  {
    "label": "VectorSetControlRegister()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "VectorSetControlRegister(uint32_t ControlStatus)"
  },
  {
    "label": "_WriteStatusReg()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS)",
    "insertText": "_WriteStatusReg(ARM64_FPCR, ControlStatus)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (# else uint64_t State64 = ControlStatus ; __asm__)",
    "insertText": "volatile(\"msr fpcr, %0\" : : \"r\"(State64))"
  },
  {
    "label": "VECTOR_ROUND_TOWARD_ZERO()",
    "kind": "Method",
    "detail": "Function (# endif } # define)",
    "insertText": "VECTOR_ROUND_TOWARD_ZERO(3 << 22) #define VECTOR_DENORMALS_FLUSH_TO_ZERO (1 << 24) FORCEINLINE VectorRegister4Float VectorQuaternionMultiply2( const VectorRegister4Float& Quat1, const VectorRegister4Float& Quat2)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Result =)",
    "insertText": "VectorMultiply(VectorReplicate(Quat1, 3), Quat2)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "VectorMultiplyAdd(VectorMultiply(VectorReplicate(Quat1, 0), VectorSwizzle(Quat2, 3,2,1,0)), GlobalVectorConstants::QMULTI_SIGN_MASK0, Result)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "VectorMultiplyAdd(VectorMultiply(VectorReplicate(Quat1, 1), VectorSwizzle(Quat2, 2,3,0,1)), GlobalVectorConstants::QMULTI_SIGN_MASK1, Result)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "VectorMultiplyAdd(VectorMultiply(VectorReplicate(Quat1, 2), VectorSwizzle(Quat2, 1,0,3,2)), GlobalVectorConstants::QMULTI_SIGN_MASK2, Result)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "VectorMultiplyAdd(VectorMultiply(VectorReplicate(Quat1, 0), VectorSwizzle(Quat2, 3, 2, 1, 0)), GlobalVectorConstants::DOUBLE_QMULTI_SIGN_MASK0, Result)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "VectorMultiplyAdd(VectorMultiply(VectorReplicate(Quat1, 1), VectorSwizzle(Quat2, 2, 3, 0, 1)), GlobalVectorConstants::DOUBLE_QMULTI_SIGN_MASK1, Result)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "VectorMultiplyAdd(VectorMultiply(VectorReplicate(Quat1, 2), VectorSwizzle(Quat2, 1, 0, 3, 2)), GlobalVectorConstants::DOUBLE_QMULTI_SIGN_MASK2, Result)"
  },
  {
    "label": "VectorQuaternionMultiply2()",
    "kind": "Method",
    "detail": "Function (* Result =)",
    "insertText": "VectorQuaternionMultiply2(*Quat1, *Quat2)"
  },
  {
    "label": "VectorQuaternionMultiply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorQuaternionMultiply(VectorRegister4Double* RESTRICT Result, const VectorRegister4Double* RESTRICT Quat1, const VectorRegister4Double* RESTRICT Quat2)"
  },
  {
    "label": "VectorSinCos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorSinCos(VectorRegister4Float* RESTRICT VSinAngles, VectorRegister4Float* RESTRICT VCosAngles, const VectorRegister4Float* RESTRICT VAngles)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Quotient =)",
    "insertText": "VectorMultiply(*VAngles, GlobalVectorConstants::OneOverTwoPi)"
  },
  {
    "label": "vrndnq_f32()",
    "kind": "Method",
    "detail": "Function (Quotient =)",
    "insertText": "vrndnq_f32(Quotient)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float X =)",
    "insertText": "VectorNegateMultiplyAdd(GlobalVectorConstants::TwoPi, Quotient, *VAngles)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float sign =)",
    "insertText": "VectorBitwiseAnd(X, GlobalVectorConstants::SignBit())"
  },
  {
    "label": "VectorBitwiseOr()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float c =)",
    "insertText": "VectorBitwiseOr(GlobalVectorConstants::Pi, sign)"
  },
  {
    "label": "VectorAbs()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float absx =)",
    "insertText": "VectorAbs(X)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float rflx =)",
    "insertText": "VectorSubtract(c, X)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float comp =)",
    "insertText": "VectorCompareGT(absx, GlobalVectorConstants::PiByTwo)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "VectorSelect(comp, rflx, X)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (sign =)",
    "insertText": "VectorSelect(comp, GlobalVectorConstants::FloatMinusOne, GlobalVectorConstants::FloatOne)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float XSquared =)",
    "insertText": "VectorMultiply(X, X)"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (/ 0 . f,0 . f ) ; VectorRegister4Float S ; S =)",
    "insertText": "VectorReplicate(SinCoeff1, 1)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (S =)",
    "insertText": "VectorMultiplyAdd(XSquared, S, VectorReplicate(SinCoeff1, 0))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (S =)",
    "insertText": "VectorMultiplyAdd(XSquared, S, VectorReplicate(SinCoeff0, 3))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (S =)",
    "insertText": "VectorMultiplyAdd(XSquared, S, VectorReplicate(SinCoeff0, 2))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (S =)",
    "insertText": "VectorMultiplyAdd(XSquared, S, VectorReplicate(SinCoeff0, 1))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (S =)",
    "insertText": "VectorMultiplyAdd(XSquared, S, VectorReplicate(SinCoeff0, 0))"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (* VSinAngles =)",
    "insertText": "VectorMultiply(S, X)"
  },
  {
    "label": "VectorReplicate()",
    "kind": "Method",
    "detail": "Function (/ 0 . f,0 . f ) ; VectorRegister4Float C ; C =)",
    "insertText": "VectorReplicate(CosCoeff1, 1)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "VectorMultiplyAdd(XSquared, C, VectorReplicate(CosCoeff1, 0))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "VectorMultiplyAdd(XSquared, C, VectorReplicate(CosCoeff0, 3))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "VectorMultiplyAdd(XSquared, C, VectorReplicate(CosCoeff0, 2))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "VectorMultiplyAdd(XSquared, C, VectorReplicate(CosCoeff0, 1))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (C =)",
    "insertText": "VectorMultiplyAdd(XSquared, C, VectorReplicate(CosCoeff0, 0))"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (* VCosAngles =)",
    "insertText": "VectorMultiply(C, sign)"
  },
  {
    "label": "VectorContainsNaNOrInfinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VectorContainsNaNOrInfinite(const VectorRegister4Float& Vec)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (union { float F ; uint32 U ; } InfUnion ; InfUnion . U = 0 x7F800000 ; const float Inf = InfUnion . F ; const VectorRegister4Float FloatInfinity =)",
    "insertText": "MakeVectorRegister(Inf, Inf, Inf, Inf)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float ExpTest =)",
    "insertText": "VectorBitwiseAnd(Vec, FloatInfinity)"
  },
  {
    "label": "MakeVectorRegisterIntConstant()",
    "kind": "Method",
    "detail": "Function (const int32x4_t Table =)",
    "insertText": "MakeVectorRegisterIntConstant(0x0C080400, 0, 0, 0)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (uint8x16_t)",
    "insertText": "res(uint8x16_t)VectorCompareEQ(ExpTest, FloatInfinity)"
  },
  {
    "label": "VectorContainsNaNOrInfinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "VectorContainsNaNOrInfinite(const VectorRegister4Double& Vec)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double ExpTest =)",
    "insertText": "VectorBitwiseAnd(Vec, DoubleInfinity)"
  },
  {
    "label": "MakeVectorRegisterIntConstant()",
    "kind": "Method",
    "detail": "Function (const int32x4_t Table =)",
    "insertText": "MakeVectorRegisterIntConstant(0x18100800, 0, 0, 0)"
  },
  {
    "label": "VectorCompareEQ()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double InfTestRes =)",
    "insertText": "VectorCompareEQ(ExpTest, DoubleInfinity)"
  },
  {
    "label": "vdupq_n_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16_t ZeroVec =)",
    "insertText": "vdupq_n_u8(0)"
  },
  {
    "label": "VectorExp()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorExp(const VectorRegister4Float& X)"
  },
  {
    "label": "Val()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "Val(X)"
  },
  {
    "label": "VectorExp()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorExp(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorExp2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorExp2(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorExp2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorExp2(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorLog()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLog(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorLog()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLog(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorLog2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLog2(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorLog2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorLog2(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorTan()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorTan(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorTan()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorTan(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorASin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorASin(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorASin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorASin(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorACos()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorACos(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorACos()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorACos(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorATan()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorATan(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorATan()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorATan(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorATan2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorATan2(const VectorRegister4Float& X, const VectorRegister4Float& Y)"
  },
  {
    "label": "ValX()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "ValX(X)"
  },
  {
    "label": "ValY()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "ValY(Y)"
  },
  {
    "label": "VectorATan2()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorATan2(const VectorRegister4Double& X, const VectorRegister4Double& Y)"
  },
  {
    "label": "VectorCeil()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCeil(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorCeil()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCeil(const VectorRegister4Double& X)"
  },
  {
    "label": "vrndpq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vrndpq_f64(X.XY)"
  },
  {
    "label": "vrndpq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vrndpq_f64(X.ZW)"
  },
  {
    "label": "VectorFloor()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorFloor(const VectorRegister4Double& X)"
  },
  {
    "label": "vrndmq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vrndmq_f64(X.XY)"
  },
  {
    "label": "vrndmq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vrndmq_f64(X.ZW)"
  },
  {
    "label": "VectorTruncate()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorTruncate(const VectorRegister4Double& X)"
  },
  {
    "label": "vrndq_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Result ; Result . XY =)",
    "insertText": "vrndq_f64(X.XY)"
  },
  {
    "label": "vrndq_f64()",
    "kind": "Method",
    "detail": "Function (Result . ZW =)",
    "insertText": "vrndq_f64(X.ZW)"
  },
  {
    "label": "VectorCompareLE()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float InvalidDivisorMask =)",
    "insertText": "VectorCompareLE(VectorAbs(Y), GlobalVectorConstants::SmallNumber)"
  },
  {
    "label": "XFloats()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "XFloats(X), YFloats(Y)"
  },
  {
    "label": "fmodf()",
    "kind": "Method",
    "detail": "Function (XFloats [ 0 ] =)",
    "insertText": "fmodf(XFloats[0], YFloats[0])"
  },
  {
    "label": "fmodf()",
    "kind": "Method",
    "detail": "Function (XFloats [ 1 ] =)",
    "insertText": "fmodf(XFloats[1], YFloats[1])"
  },
  {
    "label": "fmodf()",
    "kind": "Method",
    "detail": "Function (XFloats [ 2 ] =)",
    "insertText": "fmodf(XFloats[2], YFloats[2])"
  },
  {
    "label": "fmodf()",
    "kind": "Method",
    "detail": "Function (XFloats [ 3 ] =)",
    "insertText": "fmodf(XFloats[3], YFloats[3])"
  },
  {
    "label": "ToVectorRegister()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Result = XFloats .)",
    "insertText": "ToVectorRegister()"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "VectorSelect(InvalidDivisorMask, GlobalVectorConstants::FloatZero, Result)"
  },
  {
    "label": "VectorCompareLE()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double InvalidDivisorMask =)",
    "insertText": "VectorCompareLE(VectorAbs(Y), GlobalVectorConstants::DoubleSmallNumber)"
  },
  {
    "label": "XDoubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "XDoubles(X), YDoubles(Y)"
  },
  {
    "label": "fmod()",
    "kind": "Method",
    "detail": "Function (XDoubles [ 0 ] =)",
    "insertText": "fmod(XDoubles[0], YDoubles[0])"
  },
  {
    "label": "fmod()",
    "kind": "Method",
    "detail": "Function (XDoubles [ 1 ] =)",
    "insertText": "fmod(XDoubles[1], YDoubles[1])"
  },
  {
    "label": "fmod()",
    "kind": "Method",
    "detail": "Function (XDoubles [ 2 ] =)",
    "insertText": "fmod(XDoubles[2], YDoubles[2])"
  },
  {
    "label": "fmod()",
    "kind": "Method",
    "detail": "Function (XDoubles [ 3 ] =)",
    "insertText": "fmod(XDoubles[3], YDoubles[3])"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Mask =)",
    "insertText": "VectorCompareGE(X, GlobalVectorConstants::FloatZero)"
  },
  {
    "label": "VectorSign()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSign(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double Mask =)",
    "insertText": "VectorCompareGE(X, GlobalVectorConstants::DoubleZero)"
  },
  {
    "label": "VectorStep()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorStep(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorStep()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorStep(const VectorRegister4Double& X)"
  },
  {
    "label": "MakeVectorRegisterConstant()",
    "kind": "Method",
    "detail": "Function (} namespace VectorSinConstantsNEON { const float p = 0 . 2 2 5 f ; const float a = 7 . 5 8 9 4 6 6 0 9 f ; const float b = 1 . 6 3 3 8 4 3 4 2 f ; const VectorRegister4Float A =)",
    "insertText": "MakeVectorRegisterConstant(a, a, a, a)"
  },
  {
    "label": "MakeVectorRegisterConstant()",
    "kind": "Method",
    "detail": "Function (const VectorRegister4Float B =)",
    "insertText": "MakeVectorRegisterConstant(b, b, b, b)"
  },
  {
    "label": "VectorSin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorSin(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float Y =)",
    "insertText": "VectorMultiply(X, GlobalVectorConstants::OneOverTwoPi)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "VectorSubtract(Y, VectorFloor(VectorAdd(Y, GlobalVectorConstants::FloatOneHalf)))"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "VectorMultiply(VectorSinConstantsNEON::A, VectorMultiply(Y, VectorSubtract(GlobalVectorConstants::FloatOneHalf, VectorAbs(Y))))"
  },
  {
    "label": "VectorSin()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorSin(const VectorRegister4Double& X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "VectorCos()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorCos(const VectorRegister4Float& X)"
  },
  {
    "label": "VectorCos()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Double)",
    "insertText": "VectorCos(const VectorRegister4Double& X)"
  },
  {
    "label": "VectorSinCos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorSinCos(VectorRegister4Double* RESTRICT VSinAngles, VectorRegister4Double* RESTRICT VCosAngles, const VectorRegister4Double* RESTRICT VAngles)"
  },
  {
    "label": "VectorSin()",
    "kind": "Method",
    "detail": "Function (* VSinAngles =)",
    "insertText": "VectorSin(*VAngles)"
  },
  {
    "label": "VectorCos()",
    "kind": "Method",
    "detail": "Function (* VCosAngles =)",
    "insertText": "VectorCos(*VAngles)"
  },
  {
    "label": "VectorLoadURGBA16N()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadURGBA16N(const uint16* E)"
  },
  {
    "label": "vld1_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4_t UInt16s =)",
    "insertText": "vld1_u16(E)"
  },
  {
    "label": "vmovl_u16()",
    "kind": "Method",
    "detail": "Function (uint32x4_t UInt32s =)",
    "insertText": "vmovl_u16(UInt16s)"
  },
  {
    "label": "VectorLoadSRGBA16N()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "VectorLoadSRGBA16N(const void* Ptr)"
  },
  {
    "label": "vld1_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t Int16s =)",
    "insertText": "vld1_s16((const int16 *)Ptr)"
  },
  {
    "label": "vmovl_s16()",
    "kind": "Method",
    "detail": "Function (int32x4_t Int32s =)",
    "insertText": "vmovl_s16(Int16s)"
  },
  {
    "label": "VectorStoreURGBA16N()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreURGBA16N(const VectorRegister4Float& Vec, uint16* Out)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (Tmp =)",
    "insertText": "VectorMin(Tmp, VectorOneFloat())"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (Tmp =)",
    "insertText": "VectorMultiply(Tmp, vdupq_n_f32(65535.0f))"
  },
  {
    "label": "vcvtnq_u32_f32()",
    "kind": "Method",
    "detail": "Function (uint32x4_t TmpUInt =)",
    "insertText": "vcvtnq_u32_f32(Tmp)"
  },
  {
    "label": "vst1_u16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1_u16(Out, vmovn_u32(TmpUInt))"
  },
  {
    "label": "VectorIntAnd()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VectorIntAnd(A, B) vandq_s32(A, B) #define VectorIntOr(A, B) vorrq_s32(A, B) #define VectorIntXor(A, B) veorq_s32(A, B) #define VectorIntAndNot(A, B) vbicq_s32(B, A) #define VectorIntNot(A) vmvnq_s32(A) #define VectorIntCompareEQ(A, B) vceqq_s32(A,B) #define VectorIntCompareNEQ(A, B) VectorIntNot(VectorIntCompareEQ(A,B)) #define VectorIntCompareGT(A, B) vcgtq_s32(A,B) #define VectorIntCompareLT(A, B) vcltq_s32(A,B) #define VectorIntCompareGE(A, B) vcgeq_s32(A,B) #define VectorIntCompareLE(A, B) vcleq_s32(A,B) FORCEINLINE VectorRegister4Int VectorIntSelect(const VectorRegister4Int& Mask, const VectorRegister4Int& Vec1, const VectorRegister4Int& Vec2)"
  },
  {
    "label": "VectorIntAdd()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VectorIntAdd(A, B) vaddq_s32(A, B) #define VectorIntSubtract(A, B) vsubq_s32(A, B) #define VectorIntMultiply(A, B) vmulq_s32(A, B) #define VectorIntNegate(A) vnegq_s32(A) #define VectorIntMin(A, B) vminq_s32(A,B) #define VectorIntMax(A, B) vmaxq_s32(A,B) #define VectorIntClamp(A, B, C) VectorIntMin(VectorIntMax(A, B), C) #define VectorIntAbs(A) vabsq_s32(A) #define VectorIntSign(A) VectorIntSelect( VectorIntCompareGE(A, GlobalVectorConstants::IntZero), GlobalVectorConstants::IntOne, GlobalVectorConstants::IntMinusOne ) #define VectorIntToFloat(A) vcvtq_f32_s32(A) FORCEINLINE VectorRegister4Int VectorFloatToInt(const VectorRegister4Float& A)"
  },
  {
    "label": "VectorFloatToInt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorFloatToInt(const VectorRegister4Double& A)"
  },
  {
    "label": "VectorDoubleToInt()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorDoubleToInt(const VectorRegister4Double& Vec)"
  },
  {
    "label": "vcvtq_s64_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister2Int64 A =)",
    "insertText": "vcvtq_s64_f64(Vec.XY)"
  },
  {
    "label": "vcvtq_s64_f64()",
    "kind": "Method",
    "detail": "Function (VectorRegister2Int64 B =)",
    "insertText": "vcvtq_s64_f64(Vec.ZW)"
  },
  {
    "label": "VectorShuffleByte4()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Int)",
    "insertText": "VectorShuffleByte4(const VectorRegister4Int& Vec, const VectorRegister4Int& Mask)"
  },
  {
    "label": "VectorIntStore()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "VectorIntStore(Vec, Ptr ) vst1q_s32( (int32*)(Ptr), Vec ) #define VectorIntStore_16( Vec, Ptr ) vst1q_s16( (int16*)(Ptr), Vec ) #define VectorIntLoad( Ptr ) vld1q_s32( (int32*)((void*)(Ptr)) ) #define VectorIntLoad_16( Ptr ) vld1q_s16( (int16*)((void*)(Ptr)) ) #define VectorIntStoreAligned( Vec, Ptr ) vst1q_s32( (int32*)(Ptr), Vec ) #define VectorIntLoadAligned( Ptr ) vld1q_s32( (int32*)((void*)(Ptr)) ) #define VectorIntLoad1( Ptr ) vld1q_dup_s32((int32*)(Ptr)) #define VectorIntLoad1_16(Ptr) vld1q_dup_s16((int16*)(Ptr)) #define VectorIntSet1(F) (VectorRegister4Int)vdupq_n_s32(F) #define VectorSetZero() vdupq_n_s32(0) #define VectorSet1(F) (VectorRegister4Float)vdupq_n_f32(F) #define VectorCastIntToFloat(Vec) ((VectorRegister4f)vreinterpretq_f32_s32(Vec)) #define VectorCastFloatToInt(Vec) ((VectorRegister4i)vreinterpretq_s32_f32(Vec)) #define VectorCastDoubleToInt(Vec) ((VectorRegister4i)vreinterpretq_s64_f64(Vec)) #define VectorCastIntToDouble(Vec) ((VectorRegister2Double)vreinterpretq_f64_s64(Vec)) #define VectorShiftLeftImm(Vec, ImmAmt) vshlq_n_s32(Vec, ImmAmt) #define VectorShiftRightImmArithmetic(Vec, ImmAmt) vshrq_n_s32(Vec, ImmAmt) #define VectorShiftRightImmLogical(Vec, ImmAmt) vshrq_n_u32(Vec, ImmAmt) #define VectorRound(Vec) vrndnq_f32(Vec) FORCEINLINE VectorRegister4Int VectorRoundToIntHalfToEven(const VectorRegister4Float& Vec)"
  },
  {
    "label": "VectorIntExpandLow16To32()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4i)",
    "insertText": "VectorIntExpandLow16To32(VectorRegister4i V)"
  }
]