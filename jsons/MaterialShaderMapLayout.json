[
  {
    "label": "FShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderType"
  },
  {
    "label": "FShaderPipelineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineType"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FMaterialShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderParameters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "FShaderLayoutEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderLayoutEntry"
  },
  {
    "label": "FShaderMapLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderMapLayout"
  },
  {
    "label": "FMeshMaterialShaderMapLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMaterialShaderMapLayout"
  },
  {
    "label": "FMaterialShaderMapLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMapLayout"
  },
  {
    "label": "FShaderLayoutEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / SecureHash . h \" # include \" RHIDefinitions . h \" class FShaderType ; class FShaderPipelineType ; class FVertexFactoryType ; struct FMaterialShaderParameters ; enum class EShaderPermutationFlags : uint32 ; enum EShaderPlatform : uint16 ; class FShaderLayoutEntry { public :)",
    "insertText": "FShaderLayoutEntry() : ShaderType(nullptr), PermutationId(0)"
  },
  {
    "label": "FShaderLayoutEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderLayoutEntry(FShaderType* InShaderType, int32 InPermutationId) : ShaderType(InShaderType), PermutationId(InPermutationId)"
  },
  {
    "label": "FMeshMaterialShaderMapLayout()",
    "kind": "Method",
    "detail": "Function (} FShaderType* ShaderType ; int32 PermutationId ; } ; class FShaderMapLayout { public : EShaderPlatform Platform ; TArray<FShaderLayoutEntry> Shaders ; TArray<FShaderPipelineType*> ShaderPipelines ; } ; class FMeshMaterialShaderMapLayout : public FShaderMapLayout { public :)",
    "insertText": "FMeshMaterialShaderMapLayout(FVertexFactoryType* InVertexFactoryType) : VertexFactoryType(InVertexFactoryType)"
  },
  {
    "label": "AcquireMaterialShaderMapLayout()",
    "kind": "Method",
    "detail": "Function (} FVertexFactoryType* VertexFactoryType ; } ; class FMaterialShaderMapLayout : public FShaderMapLayout { public : TArray<FMeshMaterialShaderMapLayout> MeshShaderMaps ; FSHAHash ShaderMapHash ; } ; const FMaterialShaderMapLayout&)",
    "insertText": "AcquireMaterialShaderMapLayout(EShaderPlatform Platform, EShaderPermutationFlags Flags, const FMaterialShaderParameters& MaterialParameters)"
  }
]