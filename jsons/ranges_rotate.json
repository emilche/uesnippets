[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_ROTATE_H # define _LIBCPP___ALGORITHM_RANGES_ROTATE_H # include<__algorithm / iterator_operations . h> # include<__algorithm / ranges_iterator_concept . h> # include<__algorithm / rotate . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__iterator / permutable . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / subrange . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__rotate_fn_impl()",
    "kind": "Method",
    "detail": "Function (namespace __rotate { struct __fn { template<class _Iter,class _Sent> _LIBCPP_HIDE_FROM_ABI subrange<_Iter>)",
    "insertText": "__rotate_fn_impl(_Iter __first, _Iter __middle, _Sent __last)"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__rotate<)",
    "insertText": "_RangeAlgPolicy(std::move(__first), std::move(__middle), std::move(__last))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<permutable _Iter,sentinel_for<_Iter> _Sent> _LIBCPP_HIDE_FROM_ABI subrange<_Iter>)",
    "insertText": "operator()(_Iter __first, _Iter __middle, _Sent __last)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<forward_range _Range> requires permutable<iterator_t<_Range>> _LIBCPP_HIDE_FROM_ABI borrowed_subrange_t<_Range>)",
    "insertText": "operator()(_Range&& __range, iterator_t<_Range> __middle)"
  }
]