[
  {
    "label": "CallbackDeferrer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackDeferrer"
  },
  {
    "label": "ScopedDeferrer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedDeferrer"
  },
  {
    "label": "ScopedDeferrer()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_SOCKET_CALLBACK_DEFERRER_H_ # define NET_DCSCTP_SOCKET_CALLBACK_DEFERRER_H_ # include<cstdint> # include<functional> # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / ref_counted_base . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_base . h \" # include \" net / dcsctp / public / dcsctp_message . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" namespace dcsctp { class CallbackDeferrer : public DcSctpSocketCallbacks { public : class ScopedDeferrer { public :)",
    "insertText": "ScopedDeferrer(CallbackDeferrer& callback_deferrer) : callback_deferrer_(callback_deferrer)"
  },
  {
    "label": "Prepare()",
    "kind": "Method",
    "detail": "Function (callback_deferrer_ .)",
    "insertText": "Prepare()"
  },
  {
    "label": "ScopedDeferrer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedDeferrer()"
  },
  {
    "label": "TriggerDeferred()",
    "kind": "Method",
    "detail": "Function (callback_deferrer_ .)",
    "insertText": "TriggerDeferred()"
  },
  {
    "label": "CallbackDeferrer()",
    "kind": "Method",
    "detail": "Function (} private : CallbackDeferrer& callback_deferrer_ ; } ;)",
    "insertText": "CallbackDeferrer(DcSctpSocketCallbacks& underlying) : underlying_(underlying)"
  },
  {
    "label": "SendPacketWithStatus()",
    "kind": "Method",
    "detail": "Function (} SendPacketStatus)",
    "insertText": "SendPacketWithStatus(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "CreateTimeout()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Timeout>)",
    "insertText": "CreateTimeout(webrtc::TaskQueueBase::DelayPrecision precision)"
  },
  {
    "label": "TimeMillis()",
    "kind": "Method",
    "detail": "Function (TimeMs)",
    "insertText": "TimeMillis()"
  },
  {
    "label": "GetRandomInt()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRandomInt(uint32_t low, uint32_t high)"
  },
  {
    "label": "OnMessageReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMessageReceived(DcSctpMessage message)"
  },
  {
    "label": "OnError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnError(ErrorKind error, absl::string_view message)"
  },
  {
    "label": "OnAborted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAborted(ErrorKind error, absl::string_view message)"
  },
  {
    "label": "OnConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnected()"
  },
  {
    "label": "OnClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClosed()"
  },
  {
    "label": "OnConnectionRestarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionRestarted()"
  },
  {
    "label": "OnStreamsResetFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamsResetFailed(rtc::ArrayView<const StreamID> outgoing_streams, absl::string_view reason)"
  },
  {
    "label": "OnStreamsResetPerformed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamsResetPerformed(rtc::ArrayView<const StreamID> outgoing_streams)"
  },
  {
    "label": "OnIncomingStreamsReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncomingStreamsReset(rtc::ArrayView<const StreamID> incoming_streams)"
  },
  {
    "label": "OnBufferedAmountLow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBufferedAmountLow(StreamID stream_id)"
  },
  {
    "label": "OnTotalBufferedAmountLow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTotalBufferedAmountLow()"
  },
  {
    "label": "OnLifecycleMessageExpired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLifecycleMessageExpired(LifecycleId lifecycle_id, bool maybe_delivered)"
  },
  {
    "label": "OnLifecycleMessageFullySent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLifecycleMessageFullySent(LifecycleId lifecycle_id)"
  },
  {
    "label": "OnLifecycleMessageDelivered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLifecycleMessageDelivered(LifecycleId lifecycle_id)"
  },
  {
    "label": "OnLifecycleEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLifecycleEnd(LifecycleId lifecycle_id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (DcSctpSocketCallbacks& underlying_ ; bool prepared_ = false ; std::vector<std::function<)",
    "insertText": "void(DcSctpSocketCallbacks& cb)"
  }
]