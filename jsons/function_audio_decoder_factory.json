[
  {
    "label": "FunctionAudioDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionAudioDecoderFactory"
  },
  {
    "label": "FunctionAudioDecoderFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_FUNCTION_AUDIO_DECODER_FACTORY_H_ # define TEST_FUNCTION_AUDIO_DECODER_FACTORY_H_ # include<functional> # include<memory> # include<utility> # include<vector> # include \" absl / memory / memory . h \" # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / audio_codecs / audio_format . h \" # include \" rtc_base / checks . h \" namespace webrtc { namespace test { class FunctionAudioDecoderFactory : public AudioDecoderFactory { public :)",
    "insertText": "FunctionAudioDecoderFactory(std::function<std::unique_ptr<AudioDecoder>()> create) : create_([create](const SdpAudioFormat&, absl::optional<AudioCodecPairId> codec_pair_id) { return create(); })"
  },
  {
    "label": "FunctionAudioDecoderFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FunctionAudioDecoderFactory(std::function<std::unique_ptr<AudioDecoder>( const SdpAudioFormat&, absl::optional<AudioCodecPairId> codec_pair_id)> create) : create_(std::move(create))"
  },
  {
    "label": "GetSupportedDecoders()",
    "kind": "Method",
    "detail": "Function (} std::vector<AudioCodecSpec>)",
    "insertText": "GetSupportedDecoders()"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "AudioDecoder()",
    "kind": "Method",
    "detail": "Function (} private : const std::function<std::unique_ptr<)",
    "insertText": "AudioDecoder(const SdpAudioFormat&, absl::optional<AudioCodecPairId> codec_pair_id)"
  }
]