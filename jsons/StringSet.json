[
  {
    "label": "AllocatorTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorTy"
  },
  {
    "label": "StringSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringSet"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_STRINGSET_H # define LLVM_ADT_STRINGSET_H # include \" llvm / ADT / StringMap . h \" namespace llvm { template<class AllocatorTy = llvm::MallocAllocator> class StringSet : public llvm::StringMap<char,AllocatorTy> { typedef llvm::StringMap<char,AllocatorTy> base ; public : std::pair<base::iterator,bool>)",
    "insertText": "insert(StringRef Key)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Key.empty())"
  }
]