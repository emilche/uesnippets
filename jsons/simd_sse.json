[
  {
    "label": "Vec4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vec4"
  },
  {
    "label": "Vec8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vec8"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef SQUISH_SIMD_SSE_H # define SQUISH_SIMD_SSE_H # include<xmmintrin . h> #)",
    "insertText": "if(SQUISH_USE_SSE > 1 ) #include <emmintrin.h> #endif #if SQUISH_USE_AVX2 #include <immintrin.h> #endif #include <cassert> #define SQUISH_SSE_SPLAT( a ) \\ ( ( a ) | ( ( a ) << 2 ) | ( ( a ) << 4 ) | ( ( a ) << 6 ))"
  },
  {
    "label": "VEC4_CONST()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VEC4_CONST(X ) Vec4( _mm_set1_ps( X ) ) #define VEC4_ZERO() Vec4( _mm_setzero_ps())"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (class Vec8 ; public : typedef Vec4 const& Arg ;)",
    "insertText": "Vec4()"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec4(__m128 v ) : m_v( v)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec4(Vec4 const& arg ) : m_v( arg.m_v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4&)",
    "insertText": "operator(Vec4 const& arg)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (m_v = arg . m_v ; return* this ; })",
    "insertText": "Vec4(const float * v)"
  },
  {
    "label": "_mm_load_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm_load_ps(v)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec4(float x, float y, float z, float w)"
  },
  {
    "label": "_mm_setr_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm_setr_ps(x, y, z, w)"
  },
  {
    "label": "GetVec3()",
    "kind": "Method",
    "detail": "Function (} Vec3)",
    "insertText": "GetVec3()"
  },
  {
    "label": "_mm_store_ps()",
    "kind": "Method",
    "detail": "Function (SQUISH_ALIGN_16 float c [ 4 ] ;)",
    "insertText": "_mm_store_ps(c, m_v)"
  },
  {
    "label": "SplatX()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "SplatX()"
  },
  {
    "label": "SplatY()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "SplatY()"
  },
  {
    "label": "SplatZ()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "SplatZ()"
  },
  {
    "label": "SplatW()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "SplatW()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4&)",
    "insertText": "operator(Arg v)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm_add_ps(m_v, v.m_v)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm_sub_ps(m_v, v.m_v)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm_mul_ps(m_v, v.m_v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "operator(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "MultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "MultiplyAdd(Vec4::Arg a, Vec4::Arg b, Vec4::Arg c)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (# if SQUISH_USE_FMADD return)",
    "insertText": "Vec4(_mm_fmadd_ps(a.m_v, b.m_v, c.m_v ))"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "Vec4(_mm_add_ps(_mm_mul_ps(a.m_v, b.m_v), c.m_v))"
  },
  {
    "label": "NegativeMultiplySubtract()",
    "kind": "Method",
    "detail": "Function (# endif } Vec4)",
    "insertText": "NegativeMultiplySubtract(Vec4::Arg a, Vec4::Arg b, Vec4::Arg c)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (# if SQUISH_USE_FNMADD return)",
    "insertText": "Vec4(_mm_fnmadd_ps(a.m_v, b.m_v, c.m_v))"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "Vec4(_mm_sub_ps( c.m_v, _mm_mul_ps( a.m_v, b.m_v ) ))"
  },
  {
    "label": "Reciprocal()",
    "kind": "Method",
    "detail": "Function (# endif } Vec4)",
    "insertText": "Reciprocal(Vec4::Arg v)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (# if SQUISH_USE_DIV return)",
    "insertText": "Vec4(_mm_div_ps(_mm_set1_ps(1.0f), v.m_v))"
  },
  {
    "label": "_mm_rcp_ps()",
    "kind": "Method",
    "detail": "Function (# else __m128 estimate =)",
    "insertText": "_mm_rcp_ps(v.m_v)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (__m128 diff =)",
    "insertText": "_mm_sub_ps(_mm_set1_ps( 1.0f ), _mm_mul_ps( estimate, v.m_v ))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (# endif } Vec4)",
    "insertText": "Min(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Max(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Truncate(Vec4::Arg v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(SQUISH_USE_SSE == 1)"
  },
  {
    "label": "_mm_cvttps_pi32()",
    "kind": "Method",
    "detail": "Function (__m64 lo =)",
    "insertText": "_mm_cvttps_pi32(input)"
  },
  {
    "label": "_mm_cvttps_pi32()",
    "kind": "Method",
    "detail": "Function (__m64 hi =)",
    "insertText": "_mm_cvttps_pi32(_mm_movehl_ps( input, input ))"
  },
  {
    "label": "_mm_movelh_ps()",
    "kind": "Method",
    "detail": "Function (__m128 part =)",
    "insertText": "_mm_movelh_ps(input, _mm_cvtpi32_ps( input, hi ))"
  },
  {
    "label": "_mm_cvtpi32_ps()",
    "kind": "Method",
    "detail": "Function (__m128 truncated =)",
    "insertText": "_mm_cvtpi32_ps(part, lo)"
  },
  {
    "label": "_mm_empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_empty()"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (# elif SQUISH_USE_AVX2 return)",
    "insertText": "Vec4(_mm_floor_ps(v.m_v))"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "Vec4(_mm_cvtepi32_ps( _mm_cvttps_epi32( v.m_v ) ))"
  },
  {
    "label": "CompareEqual()",
    "kind": "Method",
    "detail": "Function (# endif } Vec4)",
    "insertText": "CompareEqual(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Select(Vec4::Arg off, Vec4::Arg on, Vec4::Arg bits)"
  },
  {
    "label": "_mm_andnot_ps()",
    "kind": "Method",
    "detail": "Function (__m128 a =)",
    "insertText": "_mm_andnot_ps(bits.m_v, off.m_v)"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (__m128 b =)",
    "insertText": "_mm_and_ps(bits.m_v, on.m_v)"
  },
  {
    "label": "CompareAnyLessThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareAnyLessThan(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "_mm_cmplt_ps()",
    "kind": "Method",
    "detail": "Function (__m128 bits =)",
    "insertText": "_mm_cmplt_ps(left.m_v, right.m_v)"
  },
  {
    "label": "_mm_movemask_ps()",
    "kind": "Method",
    "detail": "Function (int value =)",
    "insertText": "_mm_movemask_ps(bits)"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (public : typedef const Vec8& Arg ;)",
    "insertText": "Vec8()"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec8(__m256 v) : m_v(v)"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec8(Arg v) : m_v(v.m_v)"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec8(const Vec4& lo, const Vec4& hi) : m_v(_mm256_set_m128(hi.m_v, lo.m_v))"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (m_v = v . m_v ; return* this ; })",
    "insertText": "Vec8(const float* v)"
  },
  {
    "label": "_mm256_load_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm256_load_ps(v)"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec8(float x1, float y1, float z1, float w1, float x2, float y2, float z2, float w2)"
  },
  {
    "label": "_mm256_setr_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm256_setr_ps(x1, y1, z1, w1, x2, y2, z2, w2)"
  },
  {
    "label": "GetLoPart()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "GetLoPart()"
  },
  {
    "label": "GetHiPart()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "GetHiPart()"
  },
  {
    "label": "_mm256_add_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm256_add_ps(m_v, v.m_v)"
  },
  {
    "label": "_mm256_sub_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm256_sub_ps(m_v, v.m_v)"
  },
  {
    "label": "_mm256_mul_ps()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "_mm256_mul_ps(m_v, v.m_v)"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (Vec8 m = left* right ; return)",
    "insertText": "Vec8(m.SplatX() + m.SplatY() + m.SplatZ())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec8)",
    "insertText": "operator(Vec8::Arg left, Vec8::Arg right)"
  },
  {
    "label": "MultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} Vec8)",
    "insertText": "MultiplyAdd(Vec8::Arg a, Vec8::Arg b, Vec8::Arg c)"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (# if SQUISH_USE_FMADD return)",
    "insertText": "Vec8(_mm256_fmadd_ps(a.m_v, b.m_v, c.m_v))"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "Vec8(_mm256_add_ps(_mm256_mul_ps(a.m_v, b.m_v), c.m_v))"
  },
  {
    "label": "NegativeMultiplySubtract()",
    "kind": "Method",
    "detail": "Function (# endif } Vec8)",
    "insertText": "NegativeMultiplySubtract(Vec8::Arg a, Vec8::Arg b, Vec8::Arg c)"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (# if SQUISH_USE_FNMADD return)",
    "insertText": "Vec8(_mm256_fnmadd_ps(a.m_v, b.m_v, c.m_v))"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "Vec8(_mm256_sub_ps(c.m_v, _mm256_mul_ps(a.m_v, b.m_v)))"
  },
  {
    "label": "Reciprocal()",
    "kind": "Method",
    "detail": "Function (# endif } Vec8)",
    "insertText": "Reciprocal(Vec8::Arg v)"
  },
  {
    "label": "Vec8()",
    "kind": "Method",
    "detail": "Function (# if SQUISH_USE_DIV return)",
    "insertText": "Vec8(_mm256_div_ps(_mm256_set1_ps(1.0f), v.m_v))"
  },
  {
    "label": "_mm256_rcp_ps()",
    "kind": "Method",
    "detail": "Function (# else __m256 estimate =)",
    "insertText": "_mm256_rcp_ps(v.m_v)"
  },
  {
    "label": "_mm256_sub_ps()",
    "kind": "Method",
    "detail": "Function (__m256 diff =)",
    "insertText": "_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(estimate, v.m_v))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (# endif } Vec8)",
    "insertText": "Min(Vec8::Arg left, Vec8::Arg right)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} Vec8)",
    "insertText": "Max(Vec8::Arg left, Vec8::Arg right)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (} Vec8)",
    "insertText": "Truncate(Vec8::Arg v)"
  }
]