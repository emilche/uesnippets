[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "IntrusiveHeap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntrusiveHeap"
  },
  {
    "label": "DefaultHeapHandleAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultHeapHandleAccessor"
  },
  {
    "label": "InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIterator"
  },
  {
    "label": "WithLeafElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WithLeafElement"
  },
  {
    "label": "WithElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WithElement"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Impl"
  },
  {
    "label": "WithHeapHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WithHeapHandle"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_INTRUSIVE_HEAP_H_ # define BASE_CONTAINERS_INTRUSIVE_HEAP_H_ # include<algorithm> # include<functional> # include<limits> # include<memory> # include<type_traits> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / containers / stack_container . h \" # include \" base / memory / ptr_util . h \" # include \" base / ranges / algorithm . h \" namespace base { class BASE_EXPORT HeapHandle { public : enum : size_t { kInvalidIndex = std::numeric_limits<size_t)",
    "insertText": "max()"
  },
  {
    "label": "HeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapHandle()"
  },
  {
    "label": "HeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapHandle(const HeapHandle& other)"
  },
  {
    "label": "HeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapHandle(HeapHandle&& other) noexcept : index_(std::exchange(other.index_, kInvalidIndex))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HeapHandle&)",
    "insertText": "operator(const HeapHandle& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (HeapHandle&)",
    "insertText": "operator(HeapHandle&& other)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (index_ =)",
    "insertText": "exchange(other.index_, kInvalidIndex)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (index_ = kInvalidIndex ; } size_t)",
    "insertText": "index()"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} size_t index_ = kInvalidIndex ; } ; template<T> struct DefaultHeapHandleAccessor { void)",
    "insertText": "SetHeapHandle(T* element, HeapHandle handle)"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (element ->)",
    "insertText": "SetHeapHandle(handle)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearHeapHandle(T* element)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (element ->)",
    "insertText": "ClearHeapHandle()"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} HeapHandle)",
    "insertText": "GetHeapHandle(const T* element)"
  },
  {
    "label": "IntrusiveHeap()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,Compare = std::less<T>,HeapHandleAccessor = DefaultHeapHandleAccessor<T>> class IntrusiveHeap { private : using UnderlyingType = std::vector<T> ; public : using value_type = UnderlyingType::value_type ; using size_type = UnderlyingType::size_type ; using difference_type = UnderlyingType::difference_type ; using value_compare = Compare ; using heap_handle_accessor = HeapHandleAccessor ; using reference = UnderlyingType::reference ; using const_reference = UnderlyingType::const_reference ; using pointer = UnderlyingType::pointer ; using const_pointer = UnderlyingType::const_pointer ; using iterator = UnderlyingType::const_iterator ; using const_iterator = UnderlyingType::const_iterator ; using reverse_iterator = UnderlyingType::const_reverse_iterator ; using const_reverse_iterator = UnderlyingType::const_reverse_iterator ;)",
    "insertText": "IntrusiveHeap()"
  },
  {
    "label": "IntrusiveHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrusiveHeap(const value_compare& comp, const heap_handle_accessor& access) : impl_(comp, access)"
  },
  {
    "label": "IntrusiveHeap()",
    "kind": "Method",
    "detail": "Function (} template<class InputIterator>)",
    "insertText": "IntrusiveHeap(InputIterator first, InputIterator last, const value_compare& comp = value_compare(), const heap_handle_accessor& access = heap_handle_accessor()) : impl_(comp, access)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(first, last)"
  },
  {
    "label": "IntrusiveHeap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IntrusiveHeap(IntrusiveHeap&& other)"
  },
  {
    "label": "IntrusiveHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntrusiveHeap(const IntrusiveHeap&)"
  },
  {
    "label": "IntrusiveHeap()",
    "kind": "Method",
    "detail": "Function (template<U>)",
    "insertText": "IntrusiveHeap(std::initializer_list<U> ilist, const value_compare& comp = value_compare(), const heap_handle_accessor& access = heap_handle_accessor()) : impl_(comp, access)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(std::begin(ilist), std::end(ilist))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IntrusiveHeap&)",
    "insertText": "operator(IntrusiveHeap&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IntrusiveHeap&)",
    "insertText": "operator(const IntrusiveHeap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IntrusiveHeap&)",
    "insertText": "operator(std::initializer_list<value_type> ilist)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (const_reference)",
    "insertText": "at(size_type pos)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "at(HeapHandle pos)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "operator(size_type pos)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "back()"
  },
  {
    "label": "top()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "top()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} const_pointer)",
    "insertText": "data()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reserve(size_type new_capacity)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (impl_ . heap_ .)",
    "insertText": "reserve(new_capacity)"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "capacity()"
  },
  {
    "label": "shrink_to_fit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "shrink_to_fit()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "size()"
  },
  {
    "label": "max_size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "max_size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "insert(const value_type& value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "insert(value_type&& value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<class InputIterator> void)",
    "insertText": "insert(InputIterator first, InputIterator last)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (template<. . . Args> const_iterator)",
    "insertText": "emplace(Args&&... args)"
  },
  {
    "label": "take()",
    "kind": "Method",
    "detail": "Function (value_type)",
    "insertText": "take(size_type pos)"
  },
  {
    "label": "take()",
    "kind": "Method",
    "detail": "Function (template<P> value_type)",
    "insertText": "take(P pos)"
  },
  {
    "label": "take_top()",
    "kind": "Method",
    "detail": "Function (} value_type)",
    "insertText": "take_top()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "erase(size_type pos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (template<P> void)",
    "insertText": "erase(P pos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(ToIndex(pos))"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "pop()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erase(0u)"
  },
  {
    "label": "EraseIf()",
    "kind": "Method",
    "detail": "Function (} template<Functor> void)",
    "insertText": "EraseIf(Functor predicate)"
  },
  {
    "label": "stable_partition()",
    "kind": "Method",
    "detail": "Function (auto erase_start =)",
    "insertText": "stable_partition(impl_.heap_.begin(), impl_.heap_.end(), [&](const auto& element) { return !predicate(element); })"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHeapHandle(i)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (} StackVector<value_type,8> elements_to_delete ;)",
    "insertText": "move(erase_start, impl_.heap_.end(), std::back_inserter(elements_to_delete.container()))"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (impl_ . heap_ .)",
    "insertText": "erase(erase_start, impl_.heap_.end())"
  },
  {
    "label": "make_heap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_heap(impl_.heap_, value_comp())"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "Replace(size_type pos, const T& element)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "Replace(size_type pos, T&& element)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (} template<P> const_iterator)",
    "insertText": "Replace(P pos, const T& element)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (} template<P> const_iterator)",
    "insertText": "Replace(P pos, T&& element)"
  },
  {
    "label": "ReplaceTop()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "ReplaceTop(const T& element)"
  },
  {
    "label": "ReplaceTop()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "ReplaceTop(T&& element)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "Update(size_type pos)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (template<P> const_iterator)",
    "insertText": "Update(P pos)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (} template<P,UnaryOperation> const_iterator)",
    "insertText": "Modify(P pos, UnaryOperation unary_op)"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (size_type index =)",
    "insertText": "ToIndex(pos)"
  },
  {
    "label": "unary_op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unary_op(impl_.heap_.at(index))"
  },
  {
    "label": "value_comp()",
    "kind": "Method",
    "detail": "Function (} const value_compare&)",
    "insertText": "value_comp()"
  },
  {
    "label": "heap_handle_access()",
    "kind": "Method",
    "detail": "Function (} const heap_handle_accessor&)",
    "insertText": "heap_handle_access()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(IntrusiveHeap& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(IntrusiveHeap& lhs, IntrusiveHeap& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (lhs .)",
    "insertText": "swap(rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const IntrusiveHeap& lhs, const IntrusiveHeap& rhs)"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "ToIndex(const_iterator pos)"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "ToIndex(const_reverse_iterator pos)"
  },
  {
    "label": "ToIndex()",
    "kind": "Method",
    "detail": "Function (private : template<I,= std::enable_if_t<std::is_integral<I>::value>> size_type)",
    "insertText": "ToIndex(I pos)"
  },
  {
    "label": "GetLastIndex()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "GetLastIndex()"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHeapHandle(size_type i)"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHeapHandle(size_type i)"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (HeapHandle)",
    "insertText": "GetHeapHandle(size_type i)"
  },
  {
    "label": "Less()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less(size_type i, size_type j)"
  },
  {
    "label": "Less()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less(const T& element, size_type i)"
  },
  {
    "label": "Less()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Less(size_type i, const T& element)"
  },
  {
    "label": "MakeHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeHole(size_type pos)"
  },
  {
    "label": "FillHole()",
    "kind": "Method",
    "detail": "Function (template<U> void)",
    "insertText": "FillHole(size_type hole, U element)"
  },
  {
    "label": "MoveHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveHole(size_type new_hole_pos, size_type old_hole_pos)"
  },
  {
    "label": "MoveHoleUpAndFill()",
    "kind": "Method",
    "detail": "Function (template<U> size_type)",
    "insertText": "MoveHoleUpAndFill(size_type hole_pos, U element)"
  },
  {
    "label": "MoveHoleDownAndFill()",
    "kind": "Method",
    "detail": "Function (struct WithLeafElement { bool kIsLeafElement = true ; } ; struct WithElement { bool kIsLeafElement = false ; } ; template<FillElementType,U> size_type)",
    "insertText": "MoveHoleDownAndFill(size_type hole_pos, U element)"
  },
  {
    "label": "InsertImpl()",
    "kind": "Method",
    "detail": "Function (template<U> const_iterator)",
    "insertText": "InsertImpl(U element)"
  },
  {
    "label": "ReplaceImpl()",
    "kind": "Method",
    "detail": "Function (template<U> const_iterator)",
    "insertText": "ReplaceImpl(size_type pos, U element)"
  },
  {
    "label": "ReplaceTopImpl()",
    "kind": "Method",
    "detail": "Function (template<U> const_iterator)",
    "insertText": "ReplaceTopImpl(U element)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (struct Impl : private value_compare,private heap_handle_accessor {)",
    "insertText": "Impl(const value_compare& value_comp, const heap_handle_accessor& heap_handle_access) : value_compare(value_comp), heap_handle_accessor(heap_handle_access)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Impl()"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Impl(Impl&&)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Impl(const Impl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Impl&)",
    "insertText": "operator(Impl&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Impl&)",
    "insertText": "operator(const Impl& other)"
  },
  {
    "label": "get_value_compare()",
    "kind": "Method",
    "detail": "Function (const value_compare&)",
    "insertText": "get_value_compare()"
  },
  {
    "label": "InternalHeapHandleStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalHeapHandleStorage(const InternalHeapHandleStorage&)"
  },
  {
    "label": "InternalHeapHandleStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalHeapHandleStorage(InternalHeapHandleStorage&& other)"
  },
  {
    "label": "InternalHeapHandleStorage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "InternalHeapHandleStorage()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InternalHeapHandleStorage&)",
    "insertText": "operator(const InternalHeapHandleStorage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InternalHeapHandleStorage&)",
    "insertText": "operator(InternalHeapHandleStorage&& other)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (HeapHandle*)",
    "insertText": "handle()"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHeapHandle(HeapHandle handle)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(handle.IsValid())"
  },
  {
    "label": "GetHeapHandle()",
    "kind": "Method",
    "detail": "Function (} HeapHandle)",
    "insertText": "GetHeapHandle()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(InternalHeapHandleStorage& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(InternalHeapHandleStorage& lhs, InternalHeapHandleStorage& rhs)"
  },
  {
    "label": "WithHeapHandle()",
    "kind": "Method",
    "detail": "Function (} private : std::unique_ptr<HeapHandle> handle_ ; } ; template<T> class WithHeapHandle : public InternalHeapHandleStorage { public :)",
    "insertText": "WithHeapHandle()"
  },
  {
    "label": "WithHeapHandle()",
    "kind": "Method",
    "detail": "Function (template<U>)",
    "insertText": "WithHeapHandle(U value) : value_(std::move_if_noexcept(value))"
  },
  {
    "label": "WithHeapHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WithHeapHandle(T&& value) noexcept : value_(std::move(value))"
  },
  {
    "label": "WithHeapHandle()",
    "kind": "Method",
    "detail": "Function (} template<class . . . Args>)",
    "insertText": "WithHeapHandle(Args&&... args)"
  },
  {
    "label": "WithHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithHeapHandle(const WithHeapHandle&)"
  },
  {
    "label": "WithHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithHeapHandle(WithHeapHandle&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WithHeapHandle&)",
    "insertText": "operator(const WithHeapHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WithHeapHandle&)",
    "insertText": "operator(WithHeapHandle&& other)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (T&)",
    "insertText": "value()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(WithHeapHandle& lhs, WithHeapHandle& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const WithHeapHandle& lhs, const WithHeapHandle& rhs)"
  },
  {
    "label": "DCHECK_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_NE(0u, i)"
  },
  {
    "label": "LeftIndex()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT size_t)",
    "insertText": "LeftIndex(size_t i)"
  },
  {
    "label": "CheckInvalidOrEqualTo()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT void)",
    "insertText": "CheckInvalidOrEqualTo(HeapHandle handle, size_t index)"
  },
  {
    "label": "IntrusiveHeap()",
    "kind": "Method",
    "detail": "Function (} } template<T,Compare,HeapHandleAccessor> IntrusiveHeap<T,Compare,HeapHandleAccessor)",
    "insertText": "IntrusiveHeap(const IntrusiveHeap& other) : impl_(other.impl_)"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeapHandle(i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,Compare,HeapHandleAccessor> IntrusiveHeap<T,Compare,HeapHandleAccessor>& IntrusiveHeap<T,Compare,HeapHandleAccessor)",
    "insertText": "operator(IntrusiveHeap&& other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (impl_ =)",
    "insertText": "move(other.impl_)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (impl_ = other . impl_ ;)",
    "insertText": "for(size_t i = 0; i < size(); ++i)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(value_type(*it))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (value_type)",
    "insertText": "value(std::forward<Args>(args)...)"
  },
  {
    "label": "MakeHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeHole(pos)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (value_type val =)",
    "insertText": "move(impl_.heap_[pos])"
  },
  {
    "label": "MakeHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeHole(GetLastIndex())"
  },
  {
    "label": "WithLeafElement()",
    "kind": "Method",
    "detail": "Function (MoveHoleDownAndFill<)",
    "insertText": "WithLeafElement(pos, std::move(impl_.heap_[GetLastIndex()]))"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (} impl_ . heap_ .)",
    "insertText": "pop_back()"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(pos, size())"
  },
  {
    "label": "WithLeafElement()",
    "kind": "Method",
    "detail": "Function (MoveHoleDownAndFill<)",
    "insertText": "WithLeafElement(pos, std::move_if_noexcept(impl_.heap_[GetLastIndex()]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool child_greater_eq_parent = false ; size_type i = 0 ;)",
    "insertText": "if(pos > 0)"
  },
  {
    "label": "ParentIndex()",
    "kind": "Method",
    "detail": "Function (i =)",
    "insertText": "ParentIndex(pos)"
  },
  {
    "label": "Less()",
    "kind": "Method",
    "detail": "Function (child_greater_eq_parent = !)",
    "insertText": "Less(pos, i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(child_greater_eq_parent)"
  },
  {
    "label": "MoveHoleUpAndFill()",
    "kind": "Method",
    "detail": "Function (i =)",
    "insertText": "MoveHoleUpAndFill(pos, std::move_if_noexcept(impl_.heap_[pos]))"
  },
  {
    "label": "WithElement()",
    "kind": "Method",
    "detail": "Function (} else { i = MoveHoleDownAndFill<)",
    "insertText": "WithElement(pos, std::move_if_noexcept(impl_.heap_[pos]))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(impl_.get_value_compare(), other.impl_.get_value_compare())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(impl_.get_heap_handle_access(), other.impl_.get_heap_handle_access())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(impl_.heap_, other.impl_.heap_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(cbegin() <= pos)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(pos <= cend())"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(crbegin() <= pos)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(pos <= crend())"
  },
  {
    "label": "get_heap_handle_access()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "get_heap_handle_access().SetHeapHandle(&impl_.heap_[i], HeapHandle(i))"
  },
  {
    "label": "CheckInvalidOrEqualTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckInvalidOrEqualTo(GetHeapHandle(i), i)"
  },
  {
    "label": "get_heap_handle_access()",
    "kind": "Method",
    "detail": "Function (impl_ .)",
    "insertText": "get_heap_handle_access().ClearHeapHandle(&impl_.heap_[i])"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!GetHeapHandle(i).IsValid())"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(i, size())"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(j, size())"
  },
  {
    "label": "ClearHeapHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearHeapHandle(pos)"
  },
  {
    "label": "FillHole()",
    "kind": "Method",
    "detail": "Function (} template<T,Compare,HeapHandleAccessor> template<U> void IntrusiveHeap<T,Compare,HeapHandleAccessor)",
    "insertText": "FillHole(size_type hole_pos, U element)"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LE(hole_pos, size())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (impl_ . heap_ .)",
    "insertText": "push_back(std::move_if_noexcept(element))"
  },
  {
    "label": "move_if_noexcept()",
    "kind": "Method",
    "detail": "Function (} else { impl_ . heap_ [ hole_pos ] =)",
    "insertText": "move_if_noexcept(element)"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetHeapHandle(hole_pos)"
  },
  {
    "label": "DCHECK_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_NE(new_hole_pos, old_hole_pos)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(new_hole_pos, size())"
  },
  {
    "label": "DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LE(old_hole_pos, size())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (impl_ . heap_ .)",
    "insertText": "push_back(std::move_if_noexcept(impl_.heap_[new_hole_pos]))"
  },
  {
    "label": "move_if_noexcept()",
    "kind": "Method",
    "detail": "Function (} else { impl_ . heap_ [ old_hole_pos ] =)",
    "insertText": "move_if_noexcept(impl_.heap_[new_hole_pos])"
  },
  {
    "label": "SetHeapHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetHeapHandle(old_hole_pos)"
  },
  {
    "label": "ParentIndex()",
    "kind": "Method",
    "detail": "Function (size_type parent =)",
    "insertText": "ParentIndex(hole_pos)"
  },
  {
    "label": "MoveHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveHole(parent, hole_pos)"
  },
  {
    "label": "FillHole()",
    "kind": "Method",
    "detail": "Function (hole_pos = parent ; })",
    "insertText": "FillHole(hole_pos, std::move_if_noexcept(element))"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(hole_pos, size())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_type n =)",
    "insertText": "size() - (FillElementType::kIsLeafElement ? 1 : 0)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(hole_pos, n)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!GetHeapHandle(hole_pos).IsValid())"
  },
  {
    "label": "LeftIndex()",
    "kind": "Method",
    "detail": "Function (size_type left =)",
    "insertText": "LeftIndex(hole_pos)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_type right = left + 1 ; size_type largest = left ;)",
    "insertText": "if(right < n && Less(left, right))"
  },
  {
    "label": "MoveHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveHole(largest, hole_pos)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (hole_pos = largest ; })",
    "insertText": "if(FillElementType::kIsLeafElement)"
  },
  {
    "label": "MoveHoleUpAndFill()",
    "kind": "Method",
    "detail": "Function (hole_pos =)",
    "insertText": "MoveHoleUpAndFill(hole_pos, std::move_if_noexcept(element))"
  },
  {
    "label": "MoveHoleUpAndFill()",
    "kind": "Method",
    "detail": "Function (size_type i =)",
    "insertText": "MoveHoleUpAndFill(size(), std::move_if_noexcept(element))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_type i = 0 ;)",
    "insertText": "if(!Less(element, pos))"
  },
  {
    "label": "MoveHoleUpAndFill()",
    "kind": "Method",
    "detail": "Function (i =)",
    "insertText": "MoveHoleUpAndFill(pos, std::move_if_noexcept(element))"
  },
  {
    "label": "WithElement()",
    "kind": "Method",
    "detail": "Function (} else { i = MoveHoleDownAndFill<)",
    "insertText": "WithElement(pos, std::move_if_noexcept(element))"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "cbegin() + static_cast<difference_type>(i)"
  },
  {
    "label": "MakeHole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeHole(0u)"
  },
  {
    "label": "WithElement()",
    "kind": "Method",
    "detail": "Function (size_type i = MoveHoleDownAndFill<)",
    "insertText": "WithElement(0u, std::move_if_noexcept(element))"
  },
  {
    "label": "WithHeapHandle()",
    "kind": "Method",
    "detail": "Function (} template<T> template<class . . . Args> WithHeapHandle<T)",
    "insertText": "WithHeapHandle(Args&&... args) : value_(std::forward<Args>(args)...)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<T> void WithHeapHandle<T)",
    "insertText": "swap(WithHeapHandle& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(value_, other.value_)"
  }
]