[
  {
    "label": "_UIntType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UIntType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_UInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UInt"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "_Sseq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sseq"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_MERSENNE_TWISTER_ENGINE_H # define _LIBCPP___RANDOM_MERSENNE_TWISTER_ENGINE_H # include<__algorithm / equal . h> # include<__algorithm / min . h> # include<__config> # include<__random / is_seed_sequence . h> # include<cstddef> # include<cstdint> # include<iosfwd> # include<limits> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _UInt,size_t _Wp,size_t _Np,size_t _Mp,size_t _Rp,_UInt _Ap,size_t _Up,_UInt _Dp,size_t _Sp,_UInt _Bp,size_t _Tp,_UInt _Cp,size_t _Lp,_UInt _Fp> bool)",
    "insertText": "operator(const mersenne_twister_engine<_UInt, _Wp, _Np, _Mp, _Rp, _Ap, _Up, _Dp, _Sp, _Bp, _Tp, _Cp, _Lp, _Fp>& __x, const mersenne_twister_engine<_UInt, _Wp, _Np, _Mp, _Rp, _Ap, _Up, _Dp, _Sp, _Bp, _Tp, _Cp, _Lp, _Fp>& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _UInt,size_t _Wp,size_t _Np,size_t _Mp,size_t _Rp,_UInt _Ap,size_t _Up,_UInt _Dp,size_t _Sp,_UInt _Bp,size_t _Tp,_UInt _Cp,size_t _Lp,_UInt _Fp> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const mersenne_twister_engine<_UInt, _Wp, _Np, _Mp, _Rp, _Ap, _Up, _Dp, _Sp, _Bp, _Tp, _Cp, _Lp, _Fp>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _UInt,size_t _Wp,size_t _Np,size_t _Mp,size_t _Rp,_UInt _Ap,size_t _Up,_UInt _Dp,size_t _Sp,_UInt _Bp,size_t _Tp,_UInt _Cp,size_t _Lp,_UInt _Fp> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, mersenne_twister_engine<_UInt, _Wp, _Np, _Mp, _Rp, _Ap, _Up, _Dp, _Sp, _Bp, _Tp, _Cp, _Lp, _Fp>& __x)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> class _LIBCPP_TEMPLATE_VIS mersenne_twister_engine { public : typedef _UIntType result_type ; private : result_type __x_ [ __n ] ; size_t __i_ ;)",
    "insertText": "static_assert(0 < __m, \"mersenne_twister_engine invalid parameters\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const result_type _Dt = numeric_limits<result_type>::digits ;)",
    "insertText": "static_assert(__w <= _Dt, \"mersenne_twister_engine invalid parameters\")"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_CONSTEXPR const result_type _Min = 0 ; _LIBCPP_CONSTEXPR const result_type _Max = __w = = _Dt ?)",
    "insertText": "result_type(~0) : (result_type(1) << __w) - result_type(1)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const size_t word_size = __w ; _LIBCPP_CONSTEXPR const size_t state_size = __n ; _LIBCPP_CONSTEXPR const size_t shift_size = __m ; _LIBCPP_CONSTEXPR const size_t mask_bits = __r ; _LIBCPP_CONSTEXPR const result_type xor_mask = __a ; _LIBCPP_CONSTEXPR const size_t tempering_u = __u ; _LIBCPP_CONSTEXPR const result_type tempering_d = __d ; _LIBCPP_CONSTEXPR const size_t tempering_s = __s ; _LIBCPP_CONSTEXPR const result_type tempering_b = __b ; _LIBCPP_CONSTEXPR const size_t tempering_t = __t ; _LIBCPP_CONSTEXPR const result_type tempering_c = __c ; _LIBCPP_CONSTEXPR const size_t tempering_l = __l ; _LIBCPP_CONSTEXPR const result_type initialization_multiplier = __f ; _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR result_type)",
    "insertText": "min()"
  },
  {
    "label": "mersenne_twister_engine()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "mersenne_twister_engine(result_type __sd)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(__sd)"
  },
  {
    "label": "mersenne_twister_engine()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "mersenne_twister_engine(result_type __sd = default_seed)"
  },
  {
    "label": "mersenne_twister_engine()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Sseq> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "mersenne_twister_engine(_Sseq& __q, typename enable_if<__is_seed_sequence<_Sseq, mersenne_twister_engine>::value>::type* = 0)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(__q)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "seed(result_type __sd = default_seed)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (template<class _Sseq> _LIBCPP_INLINE_VISIBILITY enable_if<__is_seed_sequence<_Sseq,mersenne_twister_engine>::value,void>::type)",
    "insertText": "seed(_Sseq& __q)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__seed(__q, integral_constant<unsigned, 1 + (__w - 1) / 32>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "discard(unsigned long long __z)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (private : template<class _Sseq> void)",
    "insertText": "__seed(_Sseq& __q, integral_constant<unsigned, 1>)"
  },
  {
    "label": "__seed()",
    "kind": "Method",
    "detail": "Function (template<class _Sseq> void)",
    "insertText": "__seed(_Sseq& __q, integral_constant<unsigned, 2>)"
  },
  {
    "label": "__lshift()",
    "kind": "Method",
    "detail": "Function (template<size_t __count> _LIBCPP_INLINE_VISIBILITY enable_if<__count<__w,result_type>::type)",
    "insertText": "__lshift(result_type __x)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<size_t __count> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "enable_if(__count >= __w), result_type >::type __lshift(result_type)"
  },
  {
    "label": "__rshift()",
    "kind": "Method",
    "detail": "Function (} template<size_t __count> _LIBCPP_INLINE_VISIBILITY enable_if<__count<_Dt,result_type>::type)",
    "insertText": "__rshift(result_type __x)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const size_t mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::word_size ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const size_t mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::state_size ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const size_t mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::shift_size ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const size_t mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::mask_bits ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::result_type mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::xor_mask ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const size_t mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::tempering_u ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::result_type mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::tempering_d ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const size_t mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::tempering_s ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::result_type mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::tempering_b ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const size_t mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::tempering_t ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::result_type mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::tempering_c ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const size_t mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::tempering_l ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::result_type mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::initialization_multiplier ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> _LIBCPP_CONSTEXPR const mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::result_type mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f>::default_seed ; template<class _UIntType,size_t __w,size_t __n,size_t __m,size_t __r,_UIntType __a,size_t __u,_UIntType __d,size_t __s,_UIntType __b,size_t __t,_UIntType __c,size_t __l,_UIntType __f> void mersenne_twister_engine<_UIntType,__w,__n,__m,__r,__a,__u,__d,__s,__b,__t,__c,__l,__f)",
    "insertText": "seed(result_type __sd)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__x_ [ 0 ] = __sd& _Max ;)",
    "insertText": "for(size_t __i = 1; __i < __n; ++__i) __x_[__i] = (__f * (__x_[__i-1] ^ __rshift<__w - 2>(__x_[__i-1])) + __i)"
  },
  {
    "label": "generate()",
    "kind": "Method",
    "detail": "Function (const unsigned __k = 1 ; uint32_t __ar [ __n* __k ] ; __q .)",
    "insertText": "generate(__ar, __ar + __n * __k)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (const result_type __mask = __r = = _Dt ?)",
    "insertText": "result_type(~0) : (result_type(1) << __r) - result_type(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__i_ = 0 ;)",
    "insertText": "if((__x_[0] & ~__mask) == 0)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (__x_ [ 0 ] =)",
    "insertText": "result_type(1) << (__w - 1)"
  },
  {
    "label": "__j()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "__j(__i_ + 1)"
  },
  {
    "label": "_Yp()",
    "kind": "Method",
    "detail": "Function (const result_type)",
    "insertText": "_Yp(__x_[__i_] & ~__mask) | (__x_[__j] & __mask)"
  },
  {
    "label": "__k()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "__k(__i_ + __m)"
  },
  {
    "label": "__rshift()",
    "kind": "Method",
    "detail": "Function (__x_ [ __i_ ] = __x_ [ __k ] ^)",
    "insertText": "__rshift(_Yp) ^ (__a * (_Yp & 1))"
  },
  {
    "label": "__i_()",
    "kind": "Method",
    "detail": "Function (result_type __z = __x_ [)",
    "insertText": "__i_(__rshift<__u>(__x_[__i_]) & __d)"
  },
  {
    "label": "__s()",
    "kind": "Method",
    "detail": "Function (__i_ = __j ; __z ^ = __lshift<)",
    "insertText": "__s(__z)"
  },
  {
    "label": "__t()",
    "kind": "Method",
    "detail": "Function (__z ^ = __lshift<)",
    "insertText": "__t(__z)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (size_t __j =)",
    "insertText": "min(_Np - __x.__i_, _Np - __y.__i_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__x.__i_ < __y.__i_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t __j = _Np - __y . __i_ ;)",
    "insertText": "if(!_VSTD::equal(__x.__x_ + __x.__i_, __x.__x_ + (__x.__i_ + __j), __y.__x_ + __y.__i_))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} size_t __j = _Np - __x . __i_ ;)",
    "insertText": "if(!_VSTD::equal(__y.__x_ + __y.__i_, __y.__x_ + (__y.__i_ + __j), __x.__x_ + __x.__i_))"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _Ostream ; __os .)",
    "insertText": "flags(_Ostream::dec | _Ostream::left)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (__os<<__x . __x_ [ __x . __i_ ] ;)",
    "insertText": "for(size_t __j = __x.__i_ + 1; __j < _Np; ++__j)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_UInt __t [ _Np ] ;)",
    "insertText": "for(size_t __i = 0; __i < _Np; ++__i)"
  }
]