[
  {
    "label": "CodecFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodecFactory"
  },
  {
    "label": "CompressedVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompressedVideoSource"
  },
  {
    "label": "DxDataIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxDataIterator"
  },
  {
    "label": "Decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Decoder"
  },
  {
    "label": "DecoderTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecoderTest"
  },
  {
    "label": "DxDataIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_DECODE_TEST_DRIVER_H_ # define VPX_TEST_DECODE_TEST_DRIVER_H_ # include<cstring> # include \" third_party / googletest / src / include / gtest / gtest . h \" # include \" . / vpx_config . h \" # include \" vpx / vpx_decoder . h \" namespace libvpx_test { class CodecFactory ; class CompressedVideoSource ; class DxDataIterator { public :)",
    "insertText": "DxDataIterator(vpx_codec_ctx_t *decoder) : decoder_(decoder), iter_(nullptr)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} const vpx_image_t*)",
    "insertText": "Next()"
  },
  {
    "label": "Decoder()",
    "kind": "Method",
    "detail": "Function (} private : vpx_codec_ctx_t* decoder_ ; vpx_codec_iter_t iter_ ; } ; class Decoder { public :)",
    "insertText": "Decoder(vpx_codec_dec_cfg_t cfg) : cfg_(cfg), flags_(0), init_done_(false)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(&decoder_, 0, sizeof(decoder_))"
  },
  {
    "label": "Decoder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Decoder(vpx_codec_dec_cfg_t cfg, const vpx_codec_flags_t flag) : cfg_(cfg), flags_(flag), init_done_(false)"
  },
  {
    "label": "Decoder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Decoder()"
  },
  {
    "label": "vpx_codec_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_codec_destroy(&decoder_)"
  },
  {
    "label": "PeekStream()",
    "kind": "Method",
    "detail": "Function (} vpx_codec_err_t)",
    "insertText": "PeekStream(const uint8_t *cxdata, size_t size, vpx_codec_stream_info_t *stream_info)"
  },
  {
    "label": "DecodeFrame()",
    "kind": "Method",
    "detail": "Function (vpx_codec_err_t)",
    "insertText": "DecodeFrame(const uint8_t *cxdata, size_t size)"
  },
  {
    "label": "DecodeFrame()",
    "kind": "Method",
    "detail": "Function (vpx_codec_err_t)",
    "insertText": "DecodeFrame(const uint8_t *cxdata, size_t size, void *user_priv)"
  },
  {
    "label": "GetDxData()",
    "kind": "Method",
    "detail": "Function (DxDataIterator)",
    "insertText": "GetDxData()"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, int arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Control(ctrl_id, arg, VPX_CODEC_OK)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, const void *arg)"
  },
  {
    "label": "InitOnce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitOnce()"
  },
  {
    "label": "vpx_codec_control_()",
    "kind": "Method",
    "detail": "Function (const vpx_codec_err_t res =)",
    "insertText": "vpx_codec_control_(&decoder_, ctrl_id, arg)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(VPX_CODEC_OK, res) << DecodeError()"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, int arg, vpx_codec_err_t expected_value)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(expected_value, res) << DecodeError()"
  },
  {
    "label": "DecodeError()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "DecodeError()"
  },
  {
    "label": "vpx_codec_error_detail()",
    "kind": "Method",
    "detail": "Function (const char* detail =)",
    "insertText": "vpx_codec_error_detail(&decoder_)"
  },
  {
    "label": "SetFrameBufferFunctions()",
    "kind": "Method",
    "detail": "Function (} vpx_codec_err_t)",
    "insertText": "SetFrameBufferFunctions(vpx_get_frame_buffer_cb_fn_t cb_get, vpx_release_frame_buffer_cb_fn_t cb_release, void *user_priv)"
  },
  {
    "label": "GetDecoderName()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "GetDecoderName()"
  },
  {
    "label": "IsVP8()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVP8()"
  },
  {
    "label": "GetDecoder()",
    "kind": "Method",
    "detail": "Function (vpx_codec_ctx_t*)",
    "insertText": "GetDecoder()"
  },
  {
    "label": "vpx_codec_dec_init()",
    "kind": "Method",
    "detail": "Function (const vpx_codec_err_t res =)",
    "insertText": "vpx_codec_dec_init(&decoder_, CodecInterface(), &cfg_, flags_)"
  },
  {
    "label": "RunLoop()",
    "kind": "Method",
    "detail": "Function (init_done_ = true ; } } vpx_codec_ctx_t decoder_ ; vpx_codec_dec_cfg_t cfg_ ; vpx_codec_flags_t flags_ ; bool init_done_ ; } ; class DecoderTest { public : void)",
    "insertText": "RunLoop(CompressedVideoSource *video)"
  },
  {
    "label": "RunLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunLoop(CompressedVideoSource *video, const vpx_codec_dec_cfg_t &dec_cfg)"
  },
  {
    "label": "set_cfg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_cfg(const vpx_codec_dec_cfg_t &dec_cfg)"
  },
  {
    "label": "set_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_flags(const vpx_codec_flags_t flags)"
  },
  {
    "label": "PreDecodeFrameHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreDecodeFrameHook(const CompressedVideoSource & , Decoder *)"
  },
  {
    "label": "HandleDecodeResult()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleDecodeResult(const vpx_codec_err_t res_dec, const CompressedVideoSource & , Decoder *decoder)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(VPX_CODEC_OK, res_dec) << decoder->DecodeError()"
  },
  {
    "label": "HandlePeekResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandlePeekResult(Decoder *const decoder, CompressedVideoSource *video, const vpx_codec_err_t res_peek)"
  },
  {
    "label": "DecoderTest()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "DecoderTest(const CodecFactory *codec) : codec_(codec), cfg_(), flags_(0)"
  },
  {
    "label": "DecoderTest()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DecoderTest()"
  }
]