[
  {
    "label": "TMultiChannelValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMultiChannelValue"
  },
  {
    "label": "TMaskedBlendable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMaskedBlendable"
  },
  {
    "label": "TBlendableTokenTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBlendableTokenTraits"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Evaluation / Blending / MovieSceneBlendType . h \" # include \" Evaluation / Blending / BlendableTokenStack . h \" # include \" EulerTransform . h \" namespace UE { namespace MovieScene { template<T,uint8 N> struct TMultiChannelValue {)",
    "insertText": "static_assert(N > 0 && N <= 32, \"Cannot store more than 32 channels in this type.\")"
  },
  {
    "label": "TMultiChannelValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TMultiChannelValue() : Mask(0)"
  },
  {
    "label": "TMultiChannelValue()",
    "kind": "Method",
    "detail": "Function (} template<OtherType>)",
    "insertText": "TMultiChannelValue(std::initializer_list<OtherType> InitList) : Mask((1 << N) - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T* CurrChannel =& Channels [ 0 ] ;)",
    "insertText": "for(auto Val : InitList)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } T)",
    "insertText": "operator(uint8 Index)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "xFFFFFFFF()",
    "kind": "Method",
    "detail": "Function (const uint32 FullChannelMask = N = = 3 2 ? 0)",
    "insertText": "xFFFFFFFF(1 << N)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(uint8 Index, T Value)"
  },
  {
    "label": "Mask()",
    "kind": "Method",
    "detail": "Function (Channels [ Index ] = Value ;)",
    "insertText": "Mask(1 << Index)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Increment(uint8 Index, T Value)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (Channels [ Index ] =)",
    "insertText": "IsSet(Index)"
  },
  {
    "label": "WeightedBlend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WeightedBlend(uint8 Index, T Value, float Weight)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (Channels [ Index ] =)",
    "insertText": "IsSet(Index) ? ((1.0 - Weight)*Channels[Index]) + (Value * Weight)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (} private : T Channels [ N ] ; uint32 Mask ; } ; template<T,SourceData,uint8 N> void)",
    "insertText": "MultiChannelFromData(SourceData InSourceData, TMultiChannelValue<T, N>& OutChannelData)"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (} template<T,SourceData,uint8 N> void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<T, N>& OutChannelData, SourceData& OutData)"
  },
  {
    "label": "TMaskedBlendable()",
    "kind": "Method",
    "detail": "Function (} template<DataType,uint8 N> struct TMaskedBlendable {)",
    "insertText": "TMaskedBlendable()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(&AbsoluteWeights, sizeof(AbsoluteWeights))"
  },
  {
    "label": "Resolve()",
    "kind": "Method",
    "detail": "Function (} TMultiChannelValue<DataType,N> Absolute ; float AbsoluteWeights [ N ] ; TMultiChannelValue<DataType,N> Additive ; TMultiChannelValue<DataType,N> Override ; TOptional<TMultiChannelValue<DataType,N>> InitialValue ; template<ActualDataType> ActualDataType)",
    "insertText": "Resolve(TMovieSceneInitialValueStore<ActualDataType>& InitialValueStore)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TOptional<TMultiChannelValue<DataType,N>> CurrentValue ; TMultiChannelValue<DataType,N> Result ;)",
    "insertText": "for(uint8 Channel = 0; Channel < N; ++Channel)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Set(Channel, Override[Channel])"
  },
  {
    "label": "bUseInitialValue()",
    "kind": "Method",
    "detail": "Function (} else { const bool)",
    "insertText": "bUseInitialValue(Absolute.IsSet(Channel) && AbsoluteWeights[Channel] == 0.f) || (!Absolute.IsSet(Channel) && Additive.IsSet(Channel))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (InitialValue .)",
    "insertText": "Emplace()"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiChannelFromData(InitialValueStore.GetInitialValue(), InitialValue.GetValue())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} Result .)",
    "insertText": "Set(Channel, InitialValue.GetValue()[Channel])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Absolute.IsSet(Channel))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Set(Channel, Absolute[Channel] / AbsoluteWeights[Channel])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Additive.IsSet(Channel))"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Increment(Channel, Additive[Channel])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!Result.IsSet(Channel))"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiChannelFromData(InitialValueStore.RetrieveCurrentValue(), CurrentValue.GetValue())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} Result .)",
    "insertText": "Set(Channel, CurrentValue.GetValue()[Channel])"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ensureMsgf(Result.IsFull(), TEXT(\"Attempting to apply a compound data type with some channels uninitialized.\"))"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (ActualDataType FinalResult ;)",
    "insertText": "ResolveChannelsToData(Result, FinalResult)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiChannelFromData(InitialValueStore.GetInitialValue(), OutBlend.InitialValue.GetValue())"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (} OutBlend . Absolute .)",
    "insertText": "Increment(ChannelIndex, (OutBlend.InitialValue.GetValue()[ChannelIndex] + InValue) * Weight)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (} else { OutBlend . Absolute .)",
    "insertText": "Increment(ChannelIndex, OutputType(InValue) * Weight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} OutBlend . AbsoluteWeights [ ChannelIndex ] + = Weight ; } else)",
    "insertText": "if(BlendingOrder != INDEX_NONE)"
  },
  {
    "label": "AbsoluteWeight()",
    "kind": "Method",
    "detail": "Function (OutputType)",
    "insertText": "AbsoluteWeight(OutBlend.AbsoluteWeights[ChannelIndex] != 0.f)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (OutBlend . Override .)",
    "insertText": "Set(ChannelIndex, OutBlend.Absolute[ChannelIndex] / AbsoluteWeight)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(BlendType == EMovieSceneBlendType::Additive)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(BlendType == EMovieSceneBlendType::Override)"
  },
  {
    "label": "WeightedBlend()",
    "kind": "Method",
    "detail": "Function (OutBlend . Override .)",
    "insertText": "WeightedBlend(ChannelIndex, OutputType(InValue), Weight)"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (} } template<OutputType,InputType,ActualValueType> void)",
    "insertText": "BlendValue(TMaskedBlendable<OutputType, 1>& OutBlend, InputType InValue, float Weight, EMovieSceneBlendType BlendType, int32 BlendingOrder, TMovieSceneInitialValueStore<ActualValueType>& InitialValueStore)"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendValue(OutBlend, InValue, 0, Weight, BlendType, BlendingOrder, InitialValueStore)"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (} template<OutputType,ActualValueType,uint8 ChannelSize> void)",
    "insertText": "BlendValue(TMaskedBlendable<OutputType, ChannelSize>& OutBlend, const TMultiChannelValue<OutputType, ChannelSize>& InValue, float Weight, EMovieSceneBlendType BlendType, int32 BlendingOrder, TMovieSceneInitialValueStore<ActualValueType>& InitialValueStore)"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendValue(OutBlend, InValue[Index], Index, Weight, BlendType, BlendingOrder, InitialValueStore)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "MultiChannelFromData(int32 In, TMultiChannelValue<double, 1>& Out)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (Out = { In } ; } void)",
    "insertText": "MultiChannelFromData(float In, TMultiChannelValue<float, 1>& Out)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (Out = { In } ; } void)",
    "insertText": "MultiChannelFromData(FVector2D In, TMultiChannelValue<float, 2>& Out)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (Out = { In . X,In . Y } ; } void)",
    "insertText": "MultiChannelFromData(FVector In, TMultiChannelValue<float, 3>& Out)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (Out = { In . X,In . Y,In . Z } ; } void)",
    "insertText": "MultiChannelFromData(const FVector4& In, TMultiChannelValue<float, 4>& Out)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (Out = { In . X,In . Y,In . Z,In . W } ; } void)",
    "insertText": "MultiChannelFromData(const FTransform& In, TMultiChannelValue<float, 9>& Out)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (FVector Translation = In .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (FVector Rotation = In .)",
    "insertText": "GetRotation().Rotator().Euler()"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (FVector Scale = In .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (Out = { Translation . X,Translation . Y,Translation . Z,Rotation . X,Rotation . Y,Rotation . Z,Scale . X,Scale . Y,Scale . Z } ; } void)",
    "insertText": "MultiChannelFromData(const FEulerTransform& In, TMultiChannelValue<float, 9>& Out)"
  },
  {
    "label": "FRotator3d()",
    "kind": "Method",
    "detail": "Function (FVector Translation = In . Location ; FVector Scale = In . Scale ; FRotator3d Rotation =)",
    "insertText": "FRotator3d(In.Rotation)"
  },
  {
    "label": "MultiChannelFromData()",
    "kind": "Method",
    "detail": "Function (Out = { Translation . X,Translation . Y,Translation . Z,Rotation . Roll,Rotation . Pitch,Rotation . Yaw,Scale . X,Scale . Y,Scale . Z } ; } void)",
    "insertText": "MultiChannelFromData(const FLinearColor& In, TMultiChannelValue<float, 4>& Out)"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (Out = { In . R,In . G,In . B,In . A } ; } void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<double, 1>& In, int32& Out)"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (Out = In [ 0 ] ; } void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<float, 1>& In, float& Out)"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (Out = In [ 0 ] ; } void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<float, 2>& In, FVector2D& Out)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (Out =)",
    "insertText": "FVector2D(In[0], In[1])"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<float, 3>& In, FVector& Out)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (Out =)",
    "insertText": "FVector(In[0], In[1], In[2])"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<float, 4>& In, FVector4& Out)"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (Out =)",
    "insertText": "FVector4(In[0], In[1], In[2], In[3])"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<float, 9>& In, FTransform& Out)"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (Out =)",
    "insertText": "FTransform(FRotator::MakeFromEuler(FVector(In[3], In[4], In[5])), FVector(In[0], In[1], In[2]), FVector(In[6], In[7], In[8]))"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<float, 9>& In, FEulerTransform& Out)"
  },
  {
    "label": "FEulerTransform()",
    "kind": "Method",
    "detail": "Function (Out =)",
    "insertText": "FEulerTransform(FVector(In[0], In[1], In[2]), FRotator::MakeFromEuler(FVector(In[3], In[4], In[5])), FVector(In[6], In[7], In[8]))"
  },
  {
    "label": "ResolveChannelsToData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResolveChannelsToData(const TMultiChannelValue<float, 4>& In, FLinearColor& Out)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (Out =)",
    "insertText": "FLinearColor(In[0], In[1], In[2], In[3])"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (} } } template<> FMovieSceneAnimTypeID GetBlendingDataType<)",
    "insertText": "int32()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (template<> FMovieSceneAnimTypeID GetBlendingDataType<)",
    "insertText": "float()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (template<> FMovieSceneAnimTypeID GetBlendingDataType<)",
    "insertText": "FVector2D()"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (template<> FMovieSceneAnimTypeID GetBlendingDataType<)",
    "insertText": "FVector()"
  },
  {
    "label": "FVector4()",
    "kind": "Method",
    "detail": "Function (template<> FMovieSceneAnimTypeID GetBlendingDataType<)",
    "insertText": "FVector4()"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (template<> FMovieSceneAnimTypeID GetBlendingDataType<)",
    "insertText": "FTransform()"
  },
  {
    "label": "FEulerTransform()",
    "kind": "Method",
    "detail": "Function (template<> FMovieSceneAnimTypeID GetBlendingDataType<)",
    "insertText": "FEulerTransform()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (template<> FMovieSceneAnimTypeID GetBlendingDataType<)",
    "insertText": "FLinearColor()"
  }
]