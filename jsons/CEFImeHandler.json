[
  {
    "label": "ITextInputMethodSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextInputMethodSystem"
  },
  {
    "label": "FCEFTextInputMethodContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFTextInputMethodContext"
  },
  {
    "label": "ITextInputMethodChangeNotifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITextInputMethodChangeNotifier"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FCEFImeHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFImeHandler"
  },
  {
    "label": "push_macro()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if WITH_CEF3&& ! PLATFORM_LINUX # include \" Widgets / SWidget . h \" # if PLATFORM_WINDOWS # include \" Windows / AllowWindowsPlatformTypes . h \" # include \" Windows / AllowWindowsPlatformAtomics . h \" # endif # pragma)",
    "insertText": "push_macro(\"OVERRIDE\") #undef OVERRIDE THIRD_PARTY_INCLUDES_START #if PLATFORM_APPLE PRAGMA_DISABLE_DEPRECATION_WARNINGS #endif #include \"include/cef_client.h\" #include \"include/cef_values.h\" #if PLATFORM_APPLE PRAGMA_ENABLE_DEPRECATION_WARNINGS #endif THIRD_PARTY_INCLUDES_END #pragma pop_macro(\"OVERRIDE\")"
  },
  {
    "label": "FCEFImeHandler()",
    "kind": "Method",
    "detail": "Function (class FCEFTextInputMethodContext ; class ITextInputMethodChangeNotifier ; class SWidget ; class FCEFImeHandler : public TSharedFromThis<FCEFImeHandler> { public :)",
    "insertText": "FCEFImeHandler(CefRefPtr<CefBrowser> Browser)"
  },
  {
    "label": "UnbindCefBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindCefBrowser()"
  },
  {
    "label": "CacheBrowserSlateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBrowserSlateInfo(const TSharedRef<SWidget>& Widget)"
  },
  {
    "label": "SetFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocus(bool bHasFocus)"
  },
  {
    "label": "UpdateCachedGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedGeometry(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "CEFCompositionRangeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CEFCompositionRangeChanged(const CefRange& SelectionRange, const CefRenderHandler::RectList& CharacterBounds)"
  },
  {
    "label": "OnProcessMessageReceived()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnProcessMessageReceived(CefRefPtr<CefBrowser> Browser, CefProcessId SourceProcess, CefRefPtr<CefProcessMessage> Message)"
  },
  {
    "label": "SendProcessMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendProcessMessage(CefRefPtr<CefProcessMessage> Message)"
  },
  {
    "label": "BindInputMethodSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindInputMethodSystem(ITextInputMethodSystem* InTextInputMethodSystem)"
  },
  {
    "label": "UnbindInputMethodSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindInputMethodSystem()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "InitContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitContext()"
  },
  {
    "label": "DeactivateContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateContext()"
  },
  {
    "label": "DestroyContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyContext()"
  },
  {
    "label": "HandleFocusChangedMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFocusChangedMessage(CefRefPtr<CefListValue> MessageArguments)"
  }
]