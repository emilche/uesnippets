[
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "TExternalDirtyActorsTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TExternalDirtyActorsTracker"
  },
  {
    "label": "TExternalDirtyActorsTracker()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" GameFramework / Actor . h \" # include \" TickableEditorObject . h \" # include \" UObject / Package . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Editor . h \" class ULevel ; template<StoreType> class TExternalDirtyActorsTracker : public FTickableEditorObject { public : using Super = TExternalDirtyActorsTracker<StoreType> ; using MapType = TMap<TWeakObjectPtr<AActor>,StoreType::Type> ;)",
    "insertText": "TExternalDirtyActorsTracker(const ULevel* InLevel, typename StoreType::OwnerType* InOwner) : Level(InLevel) , Owner(InOwner)"
  },
  {
    "label": "AddRaw()",
    "kind": "Method",
    "detail": "Function (UPackage::PackageDirtyStateChangedEvent .)",
    "insertText": "AddRaw(this, &TExternalDirtyActorsTracker::OnPackageDirtyStateChanged)"
  },
  {
    "label": "AddRaw()",
    "kind": "Method",
    "detail": "Function (FCoreUObjectDelegates::OnObjectsReplaced .)",
    "insertText": "AddRaw(this, &TExternalDirtyActorsTracker::OnObjectsReplaced)"
  },
  {
    "label": "AddRaw()",
    "kind": "Method",
    "detail": "Function (FEditorDelegates::OnEditorActorReplaced .)",
    "insertText": "AddRaw(this, &TExternalDirtyActorsTracker::OnEditorActorReplaced)"
  },
  {
    "label": "TExternalDirtyActorsTracker()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TExternalDirtyActorsTracker()"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (UPackage::PackageDirtyStateChangedEvent .)",
    "insertText": "RemoveAll(this)"
  },
  {
    "label": "GetDirtyActors()",
    "kind": "Method",
    "detail": "Function (} const MapType&)",
    "insertText": "GetDirtyActors()"
  },
  {
    "label": "OnRemoveNonDirtyActor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveNonDirtyActor(const TWeakObjectPtr<AActor> InActor, typename StoreType::Type& InValue)"
  },
  {
    "label": "OnPackageDirtyStateChanged()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "OnPackageDirtyStateChanged(UPackage* InPackage)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DirtyActors .)",
    "insertText": "Add(Actor, StoreType::Store(Owner, Actor))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { StoreType::Type Value ;)",
    "insertText": "if(DirtyActors.RemoveAndCopyValue(Actor, Value))"
  },
  {
    "label": "OnRemoveNonDirtyActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveNonDirtyActor(Actor, Value)"
  },
  {
    "label": "OnRemoveInvalidDirtyActor()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OnRemoveInvalidDirtyActor(Actor, Value)"
  },
  {
    "label": "OnObjectsReplaced()",
    "kind": "Method",
    "detail": "Function (} } } } } } } void)",
    "insertText": "OnObjectsReplaced(const TMap<UObject*, UObject*>& OldToNewObjectMap)"
  },
  {
    "label": "OnEditorActorReplaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorActorReplaced(OldActor, NewActor)"
  },
  {
    "label": "OnEditorActorReplaced()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "OnEditorActorReplaced(AActor* InOldActor, AActor* InNewActor)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (WeakActor = InNewActor ; } } } TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "OnRemoveNonDirtyActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveNonDirtyActor(DirtyActorIt.Key(), DirtyActorIt.Value())"
  },
  {
    "label": "RemoveCurrent()",
    "kind": "Method",
    "detail": "Function (DirtyActorIt .)",
    "insertText": "RemoveCurrent()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(!DirtyActorIt.Key().IsValid(true))"
  },
  {
    "label": "OnRemoveInvalidDirtyActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveInvalidDirtyActor(DirtyActorIt.Key(), DirtyActorIt.Value())"
  }
]