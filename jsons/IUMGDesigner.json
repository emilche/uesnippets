[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "GetPreviewScale()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Geometry . h \" # include \" WidgetReference . h \" namespace ETransformMode { enum Type { Layout,Render,} ; } class IUMGDesigner { public : float)",
    "insertText": "GetPreviewScale()"
  },
  {
    "label": "GetSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (const TSet<FWidgetReference>&)",
    "insertText": "GetSelectedWidgets()"
  },
  {
    "label": "GetSelectedWidget()",
    "kind": "Method",
    "detail": "Function (FWidgetReference)",
    "insertText": "GetSelectedWidget()"
  },
  {
    "label": "GetTransformMode()",
    "kind": "Method",
    "detail": "Function (ETransformMode::Type)",
    "insertText": "GetTransformMode()"
  },
  {
    "label": "GetDesignerGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetDesignerGeometry()"
  },
  {
    "label": "GetWidgetGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetGeometry(const FWidgetReference& Widget, FGeometry& Geometry)"
  },
  {
    "label": "GetWidgetGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetGeometry(const UWidget* PreviewWidget, FGeometry& Geometry)"
  },
  {
    "label": "MakeGeometryWindowLocal()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "MakeGeometryWindowLocal(const FGeometry& WidgetGeometry)"
  },
  {
    "label": "GetWidgetParentGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetParentGeometry(const FWidgetReference& Widget, FGeometry& Geometry)"
  },
  {
    "label": "MarkDesignModifed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDesignModifed(bool bRequiresRecompile)"
  },
  {
    "label": "PushDesignerMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDesignerMessage(const FText& Message)"
  },
  {
    "label": "PopDesignerMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopDesignerMessage()"
  }
]