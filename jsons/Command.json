[
  {
    "label": "FArgument",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArgument"
  },
  {
    "label": "FArgumentSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArgumentSet"
  },
  {
    "label": "FContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContext"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "FCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCommand"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if)",
    "insertText": "defined(UE_WITH_IAS_TOOL)"
  },
  {
    "label": "FArgumentSet()",
    "kind": "Method",
    "detail": "Function (struct FArgument { const uint32 ValueAlign = 1 6 ; const uint32 ValueSize = 1 6 ; FStringView Name ; FStringView Desc ; PTRINT Inner ; } ; using FArguments = TArray<FArgument> ; struct FArgumentSet {)",
    "insertText": "FArgumentSet(std::initializer_list<FArgument>)"
  },
  {
    "label": "FArgument()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FArgument()"
  },
  {
    "label": "TArgument()",
    "kind": "Method",
    "detail": "Function (FArguments Arguments ; } ; template<Type> FArgument)",
    "insertText": "TArgument(FStringView Name, FStringView Desc)"
  },
  {
    "label": "TARGUMENT_DECL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TARGUMENT_DECL(t) \\ template <> FArgument TArgument<t>(FStringView Name, FStringView Desc)"
  },
  {
    "label": "TARGUMENT_DECL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TARGUMENT_DECL(FStringView) TARGUMENT_DECL(bool) TARGUMENT_DECL(uint8) TARGUMENT_DECL(int8) TARGUMENT_DECL(uint16) TARGUMENT_DECL(int16) TARGUMENT_DECL(uint32) TARGUMENT_DECL(int32) TARGUMENT_DECL(uint64) TARGUMENT_DECL(int64) TARGUMENT_DECL(float) TARGUMENT_DECL(double)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : template<Type> Type)",
    "insertText": "Get(FStringView Name)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (template<Type> Type)",
    "insertText": "Get(FStringView Name, Type Default)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] void)",
    "insertText": "Abort(const TCHAR* Reason)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (private : struct)",
    "insertText": "alignas(FArgument::ValueAlign)"
  },
  {
    "label": "FContext()",
    "kind": "Method",
    "detail": "Function (uint8 Buffer [ FArgument::ValueSize ] = { } ; } ; class FCommand ;)",
    "insertText": "FContext(const FArguments& InArguments, int32 ArgC, const TCHAR* const* ArgV)"
  },
  {
    "label": "SetArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArguments(const FArguments& Input)"
  },
  {
    "label": "FindArgument()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindArgument(FStringView Name)"
  },
  {
    "label": "OnMissingValue()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] void)",
    "insertText": "OnMissingValue(FStringView Name)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet(uint32 Index)"
  },
  {
    "label": "FindArgument()",
    "kind": "Method",
    "detail": "Function (} uint32 Index =)",
    "insertText": "FindArgument(Name)"
  },
  {
    "label": "OnMissingValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnMissingValue(Name)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (} class FCommand { public : using EntryFunc =)",
    "insertText": "int32(const FContext&)"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCommand(EntryFunc* InEntry, FStringView InName, FStringView InDesc, FArguments&& InArguments)"
  },
  {
    "label": "Main()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Main(int32 ArgC, const TCHAR* const* ArgV)"
  },
  {
    "label": "CommandTest()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CommandTest()"
  },
  {
    "label": "FCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCommand()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(EntryFunc* InEntry, FStringView InName, FStringView InDesc, FArguments&& InArguments)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (FContext)",
    "insertText": "GetContext(int32 ArgC, const TCHAR* const* ArgV)"
  },
  {
    "label": "Head()",
    "kind": "Method",
    "detail": "Function (FCommand*&)",
    "insertText": "Head()"
  },
  {
    "label": "MainInner()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MainInner(int32 ArgC, const TCHAR* const* ArgV)"
  },
  {
    "label": "Usage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Usage()"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Call(int32 ArgC, const TCHAR* const* ArgV)"
  }
]