[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef FLOAT_CAST_H # define FLOAT_CAST_H # include \" arch . h \" # if)",
    "insertText": "defined(__GNUC__) && defined(__SSE__) #include <xmmintrin.h> static OPUS_INLINE opus_int32 float2int(float x)"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "elif(defined(_MSC_VER) && _MSC_VER >= 1400) && (defined(_M_X64) || (defined(_M_IX86_FP) && _M_IX86_FP >= 1)) #include <xmmintrin.h> static OPUS_INLINE opus_int32 float2int(float value)"
  },
  {
    "label": "elif()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "elif(defined(_MSC_VER) && _MSC_VER >= 1400) && defined (_M_IX86) #include <math.h> static OPUS_INLINE opus_int32 float2int (float flt)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (int intgr ; _asm { fld flt fistp intgr } ; return intgr ; } # elif)",
    "insertText": "defined(HAVE_LRINTF) && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L #define _ISOC9X_SOURCE 1 #define _ISOC99_SOURCE 1 #define __USE_ISOC9X 1 #define __USE_ISOC99 1 #include <math.h> #define float2int(x) lrintf(x) #elif defined(HAVE_LRINT) && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L #define _ISOC9X_SOURCE 1 #define _ISOC99_SOURCE 1 #define __USE_ISOC9X 1 #define __USE_ISOC99 1 #include <math.h> #define float2int(x) lrint(x) #else #if (defined(__GNUC__) && defined(__STDC__) && __STDC__ && __STDC_VERSION__ >= 199901L) #warning \"Don't have the functions lrint() and lrintf ().\" #warning \"Replacing these functions with a standard C cast.\" #endif #include <math.h> #define float2int(flt) ((int)(floor(.5+flt))) #endif #ifndef DISABLE_FLOAT_API static OPUS_INLINE opus_int16 FLOAT2INT16(float x)"
  },
  {
    "label": "MAX32()",
    "kind": "Method",
    "detail": "Function (x = x* CELT_SIG_SCALE ; x =)",
    "insertText": "MAX32(x, -32768)"
  },
  {
    "label": "MIN32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "MIN32(x, 32767)"
  }
]