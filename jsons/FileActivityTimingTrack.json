[
  {
    "label": "FTimingEventSearchParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimingEventSearchParameters"
  },
  {
    "label": "FFileActivitySharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileActivitySharedState"
  },
  {
    "label": "FIoTimingEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIoTimingEvent"
  },
  {
    "label": "FFileActivityTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFileActivityTimingTrack"
  },
  {
    "label": "FOverviewFileActivityTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOverviewFileActivityTimingTrack"
  },
  {
    "label": "FDetailedFileActivityTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailedFileActivityTimingTrack"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Insights / ViewModels / TimingEventsTrack . h \" class FTimingEventSearchParameters ; namespace UE::Insights::TimingProfiler { class FFileActivitySharedState ; struct FIoTimingEvent ; class FFileActivityTimingTrack : public FTimingEventsTrack {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FFileActivityTimingTrack, FTimingEventsTrack) public: explicit FFileActivityTimingTrack(FFileActivitySharedState& InSharedState, const FString& InName) : FTimingEventsTrack(InName) , SharedState(InSharedState)"
  },
  {
    "label": "FFileActivityTimingTrack()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFileActivityTimingTrack()"
  },
  {
    "label": "InitTooltip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitTooltip(FTooltipDrawState& InOutTooltip, const ITimingEvent& InTooltipEvent)"
  },
  {
    "label": "IsOnlyErrorsToggleOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnlyErrorsToggleOn()"
  },
  {
    "label": "SetDirtyFlag()",
    "kind": "Method",
    "detail": "Function (bShowOnlyErrors = ! bShowOnlyErrors ;)",
    "insertText": "SetDirtyFlag()"
  },
  {
    "label": "FindIoTimingEvent()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "FindIoTimingEvent(const FTimingEventSearchParameters& InParameters, TFunctionRef<void(double, double, uint32, const FIoTimingEvent&)> InFoundPredicate)"
  },
  {
    "label": "FOverviewFileActivityTimingTrack()",
    "kind": "Method",
    "detail": "Function (protected : FFileActivitySharedState& SharedState ; bool bIgnoreEventDepth = false ; bool bIgnoreDuration = false ; bool bShowOnlyErrors = false ; } ; class FOverviewFileActivityTimingTrack : public FFileActivityTimingTrack { public :)",
    "insertText": "FOverviewFileActivityTimingTrack(FFileActivitySharedState& InSharedState) : FFileActivityTimingTrack(InSharedState, TEXT(\"I/O Overview\"))"
  },
  {
    "label": "BuildDrawState()",
    "kind": "Method",
    "detail": "Function (bIgnoreEventDepth = true ; bIgnoreDuration = true ; } void)",
    "insertText": "BuildDrawState(ITimingEventsTrackDrawStateBuilder& Builder, const ITimingTrackUpdateContext& Context)"
  },
  {
    "label": "SearchEvent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<const ITimingEvent>)",
    "insertText": "SearchEvent(const FTimingEventSearchParameters& InSearchParameters)"
  },
  {
    "label": "BuildContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildContextMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "FDetailedFileActivityTimingTrack()",
    "kind": "Method",
    "detail": "Function (} ; class FDetailedFileActivityTimingTrack : public FFileActivityTimingTrack { public :)",
    "insertText": "FDetailedFileActivityTimingTrack(FFileActivitySharedState& InSharedState) : FFileActivityTimingTrack(InSharedState, TEXT(\"I/O Activity\"))"
  },
  {
    "label": "AreBackgroundEventsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreBackgroundEventsVisible()"
  }
]