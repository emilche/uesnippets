[
  {
    "label": "SmallPtrSetIteratorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallPtrSetIteratorImpl"
  },
  {
    "label": "SmallPtrSetImplBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallPtrSetImplBase"
  },
  {
    "label": "SmallPtrSetIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallPtrSetIterator"
  },
  {
    "label": "RoundUpToPowerOfTwo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RoundUpToPowerOfTwo"
  },
  {
    "label": "RoundUpToPowerOfTwoH",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RoundUpToPowerOfTwoH"
  },
  {
    "label": "SmallPtrSetImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallPtrSetImpl"
  },
  {
    "label": "PtrType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PtrType"
  },
  {
    "label": "SmallPtrSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallPtrSet"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "SmallPtrSetImplBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SMALLPTRSET_H # define LLVM_ADT_SMALLPTRSET_H # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / PointerLikeTypeTraits . h \" # include<cassert> # include<cstddef> # include<cstring> # include<iterator> # include<utility> namespace llvm { class SmallPtrSetIteratorImpl ; class SmallPtrSetImplBase { class SmallPtrSetIteratorImpl ; protected : const void** SmallArray ; const void** CurArray ; unsigned CurArraySize ; unsigned NumNonEmpty ; unsigned NumTombstones ;)",
    "insertText": "SmallPtrSetImplBase(const void **SmallStorage, const SmallPtrSetImplBase &that)"
  },
  {
    "label": "SmallPtrSetImplBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmallPtrSetImplBase(const void **SmallStorage, unsigned SmallSize, SmallPtrSetImplBase &&that)"
  },
  {
    "label": "SmallPtrSetImplBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SmallPtrSetImplBase(const void **SmallStorage, unsigned SmallSize) : SmallArray(SmallStorage), CurArray(SmallStorage), CurArraySize(SmallSize), NumNonEmpty(0), NumTombstones(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(SmallSize && (SmallSize & (SmallSize-1)) == 0 && \"Initial size must be a power of two!\")"
  },
  {
    "label": "SmallPtrSetImplBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SmallPtrSetImplBase()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (public : typedef unsigned size_type ; bool LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "size()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(CurArray, -1, CurArraySize * sizeof(void *))"
  },
  {
    "label": "getTombstoneMarker()",
    "kind": "Method",
    "detail": "Function (} NumNonEmpty = 0 ; NumTombstones = 0 ; } protected : void*)",
    "insertText": "getTombstoneMarker()"
  },
  {
    "label": "getEmptyMarker()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "getEmptyMarker()"
  },
  {
    "label": "EndPointer()",
    "kind": "Method",
    "detail": "Function (} const void**)",
    "insertText": "EndPointer()"
  },
  {
    "label": "insert_imp()",
    "kind": "Method",
    "detail": "Function (} std::pair<const void* const*,bool>)",
    "insertText": "insert_imp(const void *Ptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const void** LastTombstone = nullptr ;)",
    "insertText": "for(const void **APtr = SmallArray, **E = SmallArray + NumNonEmpty; APtr != E; ++APtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const void* Value =* APtr ;)",
    "insertText": "if(Value == Ptr) return std::make_pair(APtr, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(LastTombstone != nullptr)"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (* LastTombstone = Ptr ; - - NumTombstones ; return)",
    "insertText": "make_pair(LastTombstone, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(NumNonEmpty < CurArraySize)"
  },
  {
    "label": "make_pair()",
    "kind": "Method",
    "detail": "Function (SmallArray [ NumNonEmpty + + ] = Ptr ; return)",
    "insertText": "make_pair(SmallArray + (NumNonEmpty - 1), true)"
  },
  {
    "label": "insert_imp_big()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "insert_imp_big(Ptr)"
  },
  {
    "label": "erase_imp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "erase_imp(const void * Ptr)"
  },
  {
    "label": "count_imp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "count_imp(const void * Ptr)"
  },
  {
    "label": "isSmall()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "isSmall()"
  },
  {
    "label": "FindBucketFor()",
    "kind": "Method",
    "detail": "Function (const void* const*)",
    "insertText": "FindBucketFor(const void *Ptr)"
  },
  {
    "label": "shrink_and_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrink_and_clear()"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grow(unsigned NewSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const SmallPtrSetImplBase &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "swap(SmallPtrSetImplBase &RHS)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(const SmallPtrSetImplBase &RHS)"
  },
  {
    "label": "MoveFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFrom(unsigned SmallSize, SmallPtrSetImplBase &&RHS)"
  },
  {
    "label": "MoveHelper()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MoveHelper(unsigned SmallSize, SmallPtrSetImplBase &&RHS)"
  },
  {
    "label": "CopyHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyHelper(const SmallPtrSetImplBase &RHS)"
  },
  {
    "label": "SmallPtrSetIteratorImpl()",
    "kind": "Method",
    "detail": "Function (} ; class SmallPtrSetIteratorImpl { protected : const void* const* Bucket ; const void* const* End ; public :)",
    "insertText": "SmallPtrSetIteratorImpl(const void *const *BP, const void*const *E) : Bucket(BP), End(E)"
  },
  {
    "label": "AdvanceIfNotValid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceIfNotValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const SmallPtrSetIteratorImpl &RHS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Bucket <= End)"
  },
  {
    "label": "SmallPtrSetIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<PtrTy> class SmallPtrSetIterator : public SmallPtrSetIteratorImpl { typedef PointerLikeTypeTraits<PtrTy> PtrTraits ; public : typedef PtrTy value_type ; typedef PtrTy reference ; typedef PtrTy pointer ; typedef std::ptrdiff_t difference_type ; typedef std::forward_iterator_tag iterator_category ;)",
    "insertText": "SmallPtrSetIterator(const void *const *BP, const void *const *E) : SmallPtrSetIteratorImpl(BP, E)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const PtrTy)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Bucket < End)"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (SmallPtrSetIterator tmp =* this ; + +* this ; return tmp ; } } ; template<unsigned N> struct RoundUpToPowerOfTwo ; template<unsigned N,bool isPowerTwo> struct RoundUpToPowerOfTwoH { enum { Val = N } ; } ; template<unsigned N> struct RoundUpToPowerOfTwoH<N,false> { enum { Val =)",
    "insertText": "RoundUpToPowerOfTwo(N|(N-1))"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (} ; template<unsigned N> struct RoundUpToPowerOfTwo { enum { Val = RoundUpToPowerOfTwoH<)",
    "insertText": "N(N&(N-1))"
  },
  {
    "label": "SmallPtrSetImpl()",
    "kind": "Method",
    "detail": "Function (} ; template<PtrType> class SmallPtrSetImpl : public SmallPtrSetImplBase { typedef PointerLikeTypeTraits<PtrType> PtrTraits ;)",
    "insertText": "SmallPtrSetImpl(const SmallPtrSetImpl&)"
  },
  {
    "label": "SmallPtrSetImpl()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SmallPtrSetImpl(const void **SmallStorage, const SmallPtrSetImpl &that) : SmallPtrSetImplBase(SmallStorage, that)"
  },
  {
    "label": "SmallPtrSetImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallPtrSetImpl(const void **SmallStorage, unsigned SmallSize, SmallPtrSetImpl &&that) : SmallPtrSetImplBase(SmallStorage, SmallSize, std::move(that))"
  },
  {
    "label": "SmallPtrSetImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallPtrSetImpl(const void **SmallStorage, unsigned SmallSize) : SmallPtrSetImplBase(SmallStorage, SmallSize)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} public : typedef SmallPtrSetIterator<PtrType> iterator ; typedef SmallPtrSetIterator<PtrType> const_iterator ; std::pair<iterator,bool>)",
    "insertText": "insert(PtrType Ptr)"
  },
  {
    "label": "insert_imp()",
    "kind": "Method",
    "detail": "Function (auto p =)",
    "insertText": "insert_imp(PtrTraits::getAsVoidPointer(Ptr))"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "erase(PtrType Ptr)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(PtrType Ptr)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<IterT> void)",
    "insertText": "insert(IterT I, IterT E)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "SmallPtrSet()",
    "kind": "Method",
    "detail": "Function (} } ; template<class PtrType,unsigned SmallSize> class SmallPtrSet : public SmallPtrSetImpl<PtrType> { typedef SmallPtrSetImpl<PtrType> BaseT ; enum { SmallSizePowTwo = RoundUpToPowerOfTwo<SmallSize>::Val } ; const void* SmallStorage [ SmallSizePowTwo ] ; public :)",
    "insertText": "SmallPtrSet() : BaseT(SmallStorage, SmallSizePowTwo)"
  },
  {
    "label": "SmallPtrSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallPtrSet(const SmallPtrSet &that) : BaseT(SmallStorage, that)"
  },
  {
    "label": "SmallPtrSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallPtrSet(SmallPtrSet &&that) : BaseT(SmallStorage, SmallSizePowTwo, std::move(that))"
  },
  {
    "label": "SmallPtrSet()",
    "kind": "Method",
    "detail": "Function (} template<It>)",
    "insertText": "SmallPtrSet(It I, It E) : BaseT(SmallStorage, SmallSizePowTwo)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "insert(I, E)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SmallPtrSet<PtrType,SmallSize>&)",
    "insertText": "operator(const SmallPtrSet<PtrType, SmallSize> &RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace std { template<class T,unsigned N> void)",
    "insertText": "swap(llvm::SmallPtrSet<T, N> &LHS, llvm::SmallPtrSet<T, N> &RHS)"
  }
]