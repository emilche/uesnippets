[
  {
    "label": "FPBDSelfCollisionSphereConstraintsBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSelfCollisionSphereConstraintsBase"
  },
  {
    "label": "FPBDSelfCollisionSphereConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDSelfCollisionSphereConstraints"
  },
  {
    "label": "FPBDSelfCollisionSphereConstraintsBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # if ! COMPILE_WITHOUT_UNREAL_SUPPORT # include \" Chaos / Core . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / SoftsSolverParticlesRange . h \" # include \" Containers / Set . h \" namespace Chaos::Softs { class FPBDSelfCollisionSphereConstraintsBase { public :)",
    "insertText": "FPBDSelfCollisionSphereConstraintsBase(const int32 InOffset, const int32 InNumParticles, const TSet<int32>* InVertexSetNoOffset, const TArray<FSolverVec3>* InReferencePositions, const FSolverReal InRadius, const FSolverReal InStiffness)"
  },
  {
    "label": "FPBDSelfCollisionSphereConstraintsBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDSelfCollisionSphereConstraintsBase()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Init(const SolverParticlesOrRange& Particles)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& InParticles, const FSolverReal Dt)"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (const TArray<TVec2<int32>>&)",
    "insertText": "GetConstraints()"
  },
  {
    "label": "FPBDSelfCollisionSphereConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDSelfCollisionSphereConstraints(const int32 InOffset, const int32 InNumParticles, const TMap<FString, const TSet<int32>*>& VertexSets, const FCollectionPropertyConstFacade& PropertyCollection) : Base(InOffset, InNumParticles, VertexSets.FindRef(GetSelfCollisionSphereSetNameString(PropertyCollection, SelfCollisionSphereSetNameName.ToString()), nullptr), nullptr, (FSolverReal)FMath::Max(GetSelfCollisionSphereRadius(PropertyCollection, 0.5f), 0.f), (FSolverReal)FMath::Clamp(GetSelfCollisionSphereStiffness(PropertyCollection, 0.5f), 0.f, 1.f)), SelfCollisionSphereRadiusIndex(PropertyCollection), SelfCollisionSphereStiffnessIndex(PropertyCollection)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, const TSet<int32>*>& VertexSets)"
  },
  {
    "label": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (private : using Base::Radius ; using Base::Stiffness ; using Base::VertexSetNoOffset ;)",
    "insertText": "UE_CHAOS_DECLARE_INDEXLESS_PROPERTYCOLLECTION_NAME(SelfCollisionSphereSetName, bool)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionSphereRadius, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(SelfCollisionSphereStiffness, float)"
  }
]