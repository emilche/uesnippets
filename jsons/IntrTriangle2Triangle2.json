[
  {
    "label": "TIntrTriangle2Triangle2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrTriangle2Triangle2"
  },
  {
    "label": "IsSimpleIntersection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" TriangleTypes . h \" # include \" VectorUtil . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<Real> class TIntrTriangle2Triangle2 { protected : TTriangle2<Real> Triangle0,Triangle1 ; public : int Quantity = 0 ; EIntersectionResult Result = EIntersectionResult::NotComputed ; EIntersectionType Type = EIntersectionType::Empty ; bool)",
    "insertText": "IsSimpleIntersection()"
  },
  {
    "label": "TIntrTriangle2Triangle2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TIntrTriangle2Triangle2(TTriangle2<Real> T0, TTriangle2<Real> T1) : Triangle0(T0), Triangle1(T1)"
  },
  {
    "label": "GetTriangle0()",
    "kind": "Method",
    "detail": "Function (} TTriangle2<Real>)",
    "insertText": "GetTriangle0()"
  },
  {
    "label": "SetTriangle1()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Triangle0 = Triangle0In ; } void)",
    "insertText": "SetTriangle1(const TTriangle2<Real>& Triangle1In)"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; Triangle1 = Triangle1In ; } bool)",
    "insertText": "Test()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i0,i1 ; TVector2<Real> dir ;)",
    "insertText": "for(i0 = 0, i1 = 2; i0 < 3; i1 = i0++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (dir . X = Triangle0 . V [ i0 ] . Y - Triangle0 . V [ i1 ] . Y ; dir . Y = Triangle0 . V [ i1 ] . X - Triangle0 . V [ i0 ] . X ;)",
    "insertText": "if(WhichSide(Triangle1, Triangle0.V[i1], dir) > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (dir . X = Triangle1 . V [ i0 ] . Y - Triangle1 . V [ i1 ] . Y ; dir . Y = Triangle1 . V [ i1 ] . X - Triangle1 . V [ i0 ] . X ;)",
    "insertText": "if(WhichSide(Triangle0, Triangle1.V[i1], dir) > 0)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Find()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} Quantity = 3 ;)",
    "insertText": "for(int i = 0; i < 3; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Points [ i ] = Triangle1 . V [ i ] ; })",
    "insertText": "for(int i1 = 2, i0 = 0; i0 < 3; i1 = i0++)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (TVector2<Real>)",
    "insertText": "N(Triangle0.V[i1].Y - Triangle0.V[i0].Y, Triangle0.V[i0].X - Triangle0.V[i1].X)"
  },
  {
    "label": "ClipConvexPolygonAgainstLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClipConvexPolygonAgainstLine(N, c, Quantity, Points)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Type = EIntersectionType::Empty ; } else)",
    "insertText": "if(Quantity == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Type = EIntersectionType::Point ; } else)",
    "insertText": "if(Quantity == 2)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (Type = EIntersectionType::Segment ; } else { Type = EIntersectionType::Polygon ; } })",
    "insertText": "Result(Type != EIntersectionType::Empty)"
  },
  {
    "label": "WhichSide()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "WhichSide(const TTriangle2<Real>& V, const TVector2<Real>& P, const TVector2<Real>& D)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + positive ; } else)",
    "insertText": "if(t < (double)0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + negative ; } else { + + zero ; })",
    "insertText": "if(positive > 0 && negative > 0)"
  },
  {
    "label": "ClipConvexPolygonAgainstLine()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "ClipConvexPolygonAgainstLine(const TVector2<Real>& N, double c, int& quantity, TVector2<Real> V[6])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int positive = 0,negative = 0,pIndex = - 1 ; double test [ 6 ] ; int i ;)",
    "insertText": "for(i = 0; i < quantity; ++i)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (test [ i ] = N .)",
    "insertText": "Dot(V[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (positive + + ;)",
    "insertText": "if(pIndex < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pIndex = i ; } } else)",
    "insertText": "if(test[i] < (double)0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (negative + + ; } })",
    "insertText": "if(positive > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TVector2<Real> CV [ 6 ] ; int cQuantity = 0,cur,prv ; double t ;)",
    "insertText": "if(pIndex > 0)"
  },
  {
    "label": "cur()",
    "kind": "Method",
    "detail": "Function (cur = pIndex ; prv = cur - 1 ; t = test [)",
    "insertText": "cur(test[cur] - test[prv])"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (CV [ cQuantity + + ] = V [ cur ] +)",
    "insertText": "t(V[prv] - V[cur])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CV [ cQuantity + + ] = V [ cur + + ] ; })",
    "insertText": "if(cur < quantity)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else { cur = 0 ;)",
    "insertText": "while(cur < quantity && test[cur] >(double)0)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (CV [ cQuantity + + ] = V [ cur + + ] ; } } else { prv = quantity - 1 ; t =)",
    "insertText": "test(test[0] - test[prv])"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (CV [ cQuantity + + ] = V [ 0 ] +)",
    "insertText": "t(V[prv] - V[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } quantity = cQuantity ;)",
    "insertText": "for(int Idx = 0; Idx < cQuantity; Idx++)"
  }
]