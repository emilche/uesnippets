[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateTextBlockLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextBlockLayout"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateEditableTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateEditableTextLayout"
  },
  {
    "label": "FVirtualKeyboardEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualKeyboardEntry"
  },
  {
    "label": "FTextInputMethodContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextInputMethodContext"
  },
  {
    "label": "FSlateEditableTextLayout()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateTypes . h \" # include \" Framework / Application / IMenu . h \" # include \" Widgets / Input / IVirtualKeyboardEntry . h \" # include \" Widgets / Text / ISlateEditableTextWidget . h \" # include \" Framework / Text / ITextLayoutMarshaller . h \" # include \" Framework / Text / TextLineHighlight . h \" # include \" Framework / Text / IRun . h \" # include \" Framework / Text / TextLayout . h \" # include \" Widgets / Text / SlateEditableTextTypes . h \" # include \" Framework / Text / SlateTextLayoutFactory . h \" # include \" GenericPlatform / ITextInputMethodSystem . h \" class FArrangedChildren ; class FExtender ; class FPaintArgs ; class FSlateWindowElementList ; class FSlateTextBlockLayout ; class FUICommandList ; class IBreakIterator ; class SWindow ; enum class ETextShapingMethod : uint8 ; class FSlateEditableTextLayout { public :)",
    "insertText": "FSlateEditableTextLayout(ISlateEditableTextWidget& InOwnerWidget, const TAttribute<FText>& InInitialText, FTextBlockStyle InTextStyle, const TOptional<ETextShapingMethod> InTextShapingMethod, const TOptional<ETextFlowDirection> InTextFlowDirection, const FCreateSlateTextLayout& InCreateSlateTextLayout, TSharedRef<ITextLayoutMarshaller> InTextMarshaller, TSharedRef<ITextLayoutMarshaller> InHintTextMarshaller)"
  },
  {
    "label": "FSlateEditableTextLayout()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateEditableTextLayout()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute<FText>& InText)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText()"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHintText(const TAttribute<FText>& InHintText)"
  },
  {
    "label": "GetHintText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHintText()"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const TAttribute<FText>& InSearchText)"
  },
  {
    "label": "GetSearchText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSearchText()"
  },
  {
    "label": "GetSearchResultIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSearchResultIndex()"
  },
  {
    "label": "GetNumSearchResults()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSearchResults()"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "GetTextStyle()",
    "kind": "Method",
    "detail": "Function (const FTextBlockStyle&)",
    "insertText": "GetTextStyle()"
  },
  {
    "label": "GetTextLineCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextLineCount()"
  },
  {
    "label": "SetCursorBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorBrush(const TAttribute<const FSlateBrush*>& InCursorBrush)"
  },
  {
    "label": "SetCompositionBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompositionBrush(const TAttribute<const FSlateBrush*>& InCompositionBrush)"
  },
  {
    "label": "GetPlainText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPlainText()"
  },
  {
    "label": "SetEditableText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEditableText(const FText& TextToSet, const bool bForce = false)"
  },
  {
    "label": "GetEditableText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetEditableText()"
  },
  {
    "label": "GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedText()"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (FTextSelection)",
    "insertText": "GetSelection()"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetTextWrapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextWrapping(const TAttribute<float>& InWrapTextAt, const TAttribute<bool>& InAutoWrapText, const TAttribute<ETextWrappingPolicy>& InWrappingPolicy)"
  },
  {
    "label": "SetWrapTextAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapTextAt(const TAttribute<float>& InWrapTextAt)"
  },
  {
    "label": "SetAutoWrapText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoWrapText(const TAttribute<bool>& InAutoWrapText)"
  },
  {
    "label": "SetWrappingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrappingPolicy(const TAttribute<ETextWrappingPolicy>& InWrappingPolicy)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(const TAttribute<FMargin>& InMargin)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(const TAttribute<ETextJustify::Type>& InJustification)"
  },
  {
    "label": "SetLineHeightPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHeightPercentage(const TAttribute<float>& InLineHeightPercentage)"
  },
  {
    "label": "SetApplyLineHeightToBottomLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyLineHeightToBottomLine(const TAttribute<bool>& InApplyLineHeightToBottomLine)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "SetDebugSourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugSourceInfo(const TAttribute<FString>& InDebugSourceInfo)"
  },
  {
    "label": "GetVirtualKeyboardEntry()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IVirtualKeyboardEntry>)",
    "insertText": "GetVirtualKeyboardEntry()"
  },
  {
    "label": "GetTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITextInputMethodContext>)",
    "insertText": "GetTextInputMethodContext()"
  },
  {
    "label": "EnableTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTextInputMethodContext()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Refresh()"
  },
  {
    "label": "ForceRefreshTextLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRefreshTextLayout(const FText& CurrentText)"
  },
  {
    "label": "BeginSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearch(const FText& InSearchText, const ESearchCase::Type InSearchCase = ESearchCase::IgnoreCase, const bool InReverse = false)"
  },
  {
    "label": "AdvanceSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSearch(const bool InReverse = false)"
  },
  {
    "label": "SetHorizontalScrollFraction()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "SetHorizontalScrollFraction(const float InScrollOffsetFraction)"
  },
  {
    "label": "SetVerticalScrollFraction()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "SetVerticalScrollFraction(const float InScrollOffsetFraction)"
  },
  {
    "label": "SetScrollOffset()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "SetScrollOffset(const UE::Slate::FDeprecateVector2DParameter& InScrollOffset, const FGeometry& InGeometry)"
  },
  {
    "label": "GetScrollOffset()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetScrollOffset()"
  },
  {
    "label": "GetComputedWrappingWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetComputedWrappingWidth()"
  },
  {
    "label": "GetAutoWrapText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAutoWrapText()"
  },
  {
    "label": "HandleFocusReceived()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFocusReceived(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "HandleFocusLost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "HandleKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleKeyChar(const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "HandleKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleKeyDown(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleKeyUp(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "HandleMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "HandleMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseMove(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "HandleMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "HandleEscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEscape()"
  },
  {
    "label": "HandleBackspace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBackspace()"
  },
  {
    "label": "HandleDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDelete()"
  },
  {
    "label": "HandleTypeChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTypeChar(const TCHAR InChar)"
  },
  {
    "label": "HandleCarriageReturn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCarriageReturn(bool isRepeat)"
  },
  {
    "label": "CanExecuteDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteDelete()"
  },
  {
    "label": "DeleteSelectedText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedText()"
  },
  {
    "label": "AnyTextSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyTextSelected()"
  },
  {
    "label": "IsTextSelectedAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextSelectedAt(const FGeometry& MyGeometry, const UE::Slate::FDeprecateVector2DParameter& ScreenSpacePosition)"
  },
  {
    "label": "IsTextSelectedAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextSelectedAt(const UE::Slate::FDeprecateVector2DParameter& InLocalPosition)"
  },
  {
    "label": "CanExecuteSelectAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteSelectAll()"
  },
  {
    "label": "SelectAllText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllText()"
  },
  {
    "label": "SelectWordAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectWordAt(const FGeometry& MyGeometry, const UE::Slate::FDeprecateVector2DParameter& ScreenSpacePosition)"
  },
  {
    "label": "SelectWordAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectWordAt(const UE::Slate::FDeprecateVector2DParameter& InLocalPosition)"
  },
  {
    "label": "SelectText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectText(const FTextLocation& InSelectionStart, const FTextLocation& InCursorLocation)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "CanExecuteCut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCut()"
  },
  {
    "label": "CutSelectedTextToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedTextToClipboard()"
  },
  {
    "label": "CanExecuteCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCopy()"
  },
  {
    "label": "CopySelectedTextToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedTextToClipboard()"
  },
  {
    "label": "CanExecutePaste()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecutePaste()"
  },
  {
    "label": "PasteTextFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteTextFromClipboard()"
  },
  {
    "label": "InsertTextAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTextAtCursor(const FString& InString)"
  },
  {
    "label": "InsertRunAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertRunAtCursor(TSharedRef<IRun> InRun)"
  },
  {
    "label": "MoveCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveCursor(const FMoveCursor& InArgs)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const ETextLocation NewLocation)"
  },
  {
    "label": "JumpTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpTo(ETextLocation JumpLocation, ECursorAction Action)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const ETextLocation NewLocation)"
  },
  {
    "label": "UpdateCursorHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCursorHighlight()"
  },
  {
    "label": "RemoveCursorHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCursorHighlight()"
  },
  {
    "label": "UpdatePreferredCursorScreenOffsetInLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreferredCursorScreenOffsetInLine()"
  },
  {
    "label": "ApplyToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToSelection(const FRunInfo& InRunInfo, const FTextBlockStyle& InStyle)"
  },
  {
    "label": "GetRunUnderCursor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IRun>)",
    "insertText": "GetRunUnderCursor()"
  },
  {
    "label": "GetSelectedRuns()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<const IRun>>)",
    "insertText": "GetSelectedRuns()"
  },
  {
    "label": "GetCursorLocation()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "GetCursorLocation()"
  },
  {
    "label": "TranslatedLocation()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "TranslatedLocation(const FTextLocation& CurrentLocation, int8 Direction)"
  },
  {
    "label": "TranslateLocationVertical()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateLocationVertical(const FTextLocation& Location, int32 NumLinesToMove, float GeometryScale, FTextLocation& OutCursorPosition, TOptional<SlateEditableTextTypes::ECursorAlignment>& OutCursorAlignment)"
  },
  {
    "label": "ScanForWordBoundary()",
    "kind": "Method",
    "detail": "Function (FTextLocation)",
    "insertText": "ScanForWordBoundary(const FTextLocation& Location, int8 Direction)"
  },
  {
    "label": "GetCharacterAt()",
    "kind": "Method",
    "detail": "Function (TCHAR)",
    "insertText": "GetCharacterAt(const FTextLocation& Location)"
  },
  {
    "label": "IsAtBeginningOfDocument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtBeginningOfDocument(const FTextLocation& Location)"
  },
  {
    "label": "IsAtEndOfDocument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtEndOfDocument(const FTextLocation& Location)"
  },
  {
    "label": "IsAtBeginningOfLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtBeginningOfLine(const FTextLocation& Location)"
  },
  {
    "label": "IsAtEndOfLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtEndOfLine(const FTextLocation& Location)"
  },
  {
    "label": "IsAtWordStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtWordStart(const FTextLocation& Location)"
  },
  {
    "label": "RestoreOriginalText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreOriginalText()"
  },
  {
    "label": "HasTextChangedFromOriginal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTextChangedFromOriginal()"
  },
  {
    "label": "BeginEditTransation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEditTransation()"
  },
  {
    "label": "EndEditTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEditTransaction()"
  },
  {
    "label": "PushUndoState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushUndoState(const SlateEditableTextTypes::FUndoState& InUndoState)"
  },
  {
    "label": "ClearUndoStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUndoStates()"
  },
  {
    "label": "MakeUndoState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUndoState(SlateEditableTextTypes::FUndoState& OutUndoState)"
  },
  {
    "label": "CanExecuteUndo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteUndo()"
  },
  {
    "label": "Undo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Undo()"
  },
  {
    "label": "CanExecuteRedo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteRedo()"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redo()"
  },
  {
    "label": "SaveText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveText(const FText& TextToSave)"
  },
  {
    "label": "LoadText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadText()"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "CacheDesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetSize()"
  },
  {
    "label": "BuildDefaultContextMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildDefaultContextMenu(const TSharedPtr<FExtender>& InMenuExtender)"
  },
  {
    "label": "HasActiveContextMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveContextMenu()"
  },
  {
    "label": "GetCurrentTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurrentTextLine(FString& OutTextLine)"
  },
  {
    "label": "GetTextLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextLine(const int32 InLineIndex, FString& OutTextLine)"
  },
  {
    "label": "InsertTextAtCursorImpl()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InsertTextAtCursorImpl(const FString& InString)"
  },
  {
    "label": "InsertNewLineAtCursorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewLineAtCursorImpl()"
  },
  {
    "label": "RefreshImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RefreshImpl(const FText* InTextToSet, const bool bForce = false)"
  },
  {
    "label": "CreateTextOrPasswordRun()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IRun>)",
    "insertText": "CreateTextOrPasswordRun(const FRunInfo& InRunInfo, const TSharedRef<const FString>& InText, const FTextBlockStyle& InStyle)"
  },
  {
    "label": "OnContextMenuClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContextMenuClosed(TSharedRef<IMenu> Menu)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (private : class FVirtualKeyboardEntry ; class FVirtualKeyboardEntry : public IVirtualKeyboardEntry { public : TSharedRef<FVirtualKeyboardEntry>)",
    "insertText": "Create(FSlateEditableTextLayout& InOwnerLayout)"
  },
  {
    "label": "SetTextFromVirtualKeyboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFromVirtualKeyboard(const FText& InNewText, ETextEntryType TextEntryType)"
  },
  {
    "label": "SetSelectionFromVirtualKeyboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionFromVirtualKeyboard(int InSelStart, int InSelEnd)"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSelection(int& OutSelStart, int& OutSelEnd)"
  },
  {
    "label": "GetVirtualKeyboardType()",
    "kind": "Method",
    "detail": "Function (EKeyboardType)",
    "insertText": "GetVirtualKeyboardType()"
  },
  {
    "label": "GetVirtualKeyboardOptions()",
    "kind": "Method",
    "detail": "Function (FVirtualKeyboardOptions)",
    "insertText": "GetVirtualKeyboardOptions()"
  },
  {
    "label": "IsMultilineEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMultilineEntry()"
  },
  {
    "label": "FVirtualKeyboardEntry()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FVirtualKeyboardEntry(FSlateEditableTextLayout& InOwnerLayout)"
  },
  {
    "label": "CacheWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheWindow()"
  },
  {
    "label": "GetCompositionRange()",
    "kind": "Method",
    "detail": "Function (OwnerLayout = nullptr ; bIsComposing = false ; } FTextRange)",
    "insertText": "GetCompositionRange()"
  },
  {
    "label": "UpdateCachedGeometry()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateCachedGeometry(const FGeometry& InAllottedGeometry)"
  },
  {
    "label": "IsComposing()",
    "kind": "Method",
    "detail": "Function (CachedGeometry = InAllottedGeometry ; return true ; } return false ; } bool)",
    "insertText": "IsComposing()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetTextLength()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTextLength()"
  },
  {
    "label": "GetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectionRange(uint32& BeginIndex, uint32& Length, ECaretPosition& CaretPosition)"
  },
  {
    "label": "SetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRange(const uint32 BeginIndex, const uint32 Length, const ECaretPosition CaretPosition)"
  },
  {
    "label": "GetTextInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextInRange(const uint32 BeginIndex, const uint32 Length, FString& OutString)"
  },
  {
    "label": "SetTextInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextInRange(const uint32 BeginIndex, const uint32 Length, const FString& InString)"
  },
  {
    "label": "GetCharacterIndexFromPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCharacterIndexFromPoint(const FVector2D& Point)"
  },
  {
    "label": "GetTextBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextBounds(const uint32 BeginIndex, const uint32 Length, FVector2D& Position, FVector2D& Size)"
  },
  {
    "label": "GetScreenBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetScreenBounds(FVector2D& Position, FVector2D& Size)"
  },
  {
    "label": "GetWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericWindow>)",
    "insertText": "GetWindow()"
  },
  {
    "label": "BeginComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginComposition()"
  },
  {
    "label": "UpdateCompositionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCompositionRange(const int32 InBeginIndex, const uint32 InLength)"
  },
  {
    "label": "EndComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndComposition()"
  },
  {
    "label": "FTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FTextInputMethodContext(FSlateEditableTextLayout& InOwnerLayout)"
  }
]