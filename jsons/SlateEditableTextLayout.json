[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FSlateTextBlockLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextBlockLayout"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateEditableTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateEditableTextLayout"
  },
  {
    "label": "FVirtualKeyboardEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualKeyboardEntry"
  },
  {
    "label": "FVirtualKeyboardEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualKeyboardEntry"
  },
  {
    "label": "FTextInputMethodContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextInputMethodContext"
  },
  {
    "label": "FTextInputMethodContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextInputMethodContext"
  },
  {
    "label": "FSlateEditableTextLayout()",
    "kind": "Method",
    "detail": "Function (SLATE_API)",
    "insertText": "FSlateEditableTextLayout(ISlateEditableTextWidget& InOwnerWidget, const TAttribute<FText>& InInitialText, FTextBlockStyle InTextStyle, const TOptional<ETextShapingMethod> InTextShapingMethod, const TOptional<ETextFlowDirection> InTextFlowDirection, const FCreateSlateTextLayout& InCreateSlateTextLayout, TSharedRef<ITextLayoutMarshaller> InTextMarshaller, TSharedRef<ITextLayoutMarshaller> InHintTextMarshaller)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TAttribute<FText>& InText)"
  },
  {
    "label": "SetHintText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHintText(const TAttribute<FText>& InHintText)"
  },
  {
    "label": "SetSearchText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchText(const TAttribute<FText>& InSearchText)"
  },
  {
    "label": "SetTextStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextStyle(const FTextBlockStyle& InTextStyle)"
  },
  {
    "label": "GetTextLineCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextLineCount()"
  },
  {
    "label": "SetCursorBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCursorBrush(const TAttribute<const FSlateBrush*>& InCursorBrush)"
  },
  {
    "label": "SetCompositionBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompositionBrush(const TAttribute<const FSlateBrush*>& InCompositionBrush)"
  },
  {
    "label": "SetEditableText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEditableText(const FText& TextToSet, const bool bForce = false)"
  },
  {
    "label": "SetTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextShapingMethod(const TOptional<ETextShapingMethod>& InTextShapingMethod)"
  },
  {
    "label": "SetTextFlowDirection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextFlowDirection(const TOptional<ETextFlowDirection>& InTextFlowDirection)"
  },
  {
    "label": "SetTextWrapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextWrapping(const TAttribute<float>& InWrapTextAt, const TAttribute<bool>& InAutoWrapText, const TAttribute<ETextWrappingPolicy>& InWrappingPolicy)"
  },
  {
    "label": "SetWrapTextAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapTextAt(const TAttribute<float>& InWrapTextAt)"
  },
  {
    "label": "SetAutoWrapText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoWrapText(const TAttribute<bool>& InAutoWrapText)"
  },
  {
    "label": "SetWrappingPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrappingPolicy(const TAttribute<ETextWrappingPolicy>& InWrappingPolicy)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(const TAttribute<FMargin>& InMargin)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetJustification(const TAttribute<ETextJustify::Type>& InJustification)"
  },
  {
    "label": "SetLineHeightPercentage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLineHeightPercentage(const TAttribute<float>& InLineHeightPercentage)"
  },
  {
    "label": "SetApplyLineHeightToBottomLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApplyLineHeightToBottomLine(const TAttribute<bool>& InApplyLineHeightToBottomLine)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverflowPolicy(TOptional<ETextOverflowPolicy> InOverflowPolicy)"
  },
  {
    "label": "SetDebugSourceInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDebugSourceInfo(const TAttribute<FString>& InDebugSourceInfo)"
  },
  {
    "label": "EnableTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTextInputMethodContext()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Refresh()"
  },
  {
    "label": "ForceRefreshTextLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRefreshTextLayout(const FText& CurrentText)"
  },
  {
    "label": "BeginSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearch(const FText& InSearchText, const ESearchCase::Type InSearchCase = ESearchCase::IgnoreCase, const bool InReverse = false)"
  },
  {
    "label": "AdvanceSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceSearch(const bool InReverse = false)"
  },
  {
    "label": "SetHorizontalScrollFraction()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "SetHorizontalScrollFraction(const float InScrollOffsetFraction)"
  },
  {
    "label": "SetVerticalScrollFraction()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "SetVerticalScrollFraction(const float InScrollOffsetFraction)"
  },
  {
    "label": "SetScrollOffset()",
    "kind": "Method",
    "detail": "Function (UE::Slate::FDeprecateVector2DResult)",
    "insertText": "SetScrollOffset(const UE::Slate::FDeprecateVector2DParameter& InScrollOffset, const FGeometry& InGeometry)"
  },
  {
    "label": "HandleFocusReceived()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFocusReceived(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "HandleFocusLost()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "HandleKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleKeyChar(const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "HandleKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleKeyDown(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleKeyUp(const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "HandleMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "HandleMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseMove(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "HandleMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "HandleEscape()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleEscape()"
  },
  {
    "label": "HandleBackspace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBackspace()"
  },
  {
    "label": "HandleDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDelete()"
  },
  {
    "label": "HandleTypeChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTypeChar(const TCHAR InChar)"
  },
  {
    "label": "HandleCarriageReturn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCarriageReturn(bool isRepeat)"
  },
  {
    "label": "DeleteSelectedText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedText()"
  },
  {
    "label": "SelectAllText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllText()"
  },
  {
    "label": "SelectWordAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectWordAt(const FGeometry& MyGeometry, const UE::Slate::FDeprecateVector2DParameter& ScreenSpacePosition)"
  },
  {
    "label": "SelectWordAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectWordAt(const UE::Slate::FDeprecateVector2DParameter& InLocalPosition)"
  },
  {
    "label": "SelectText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectText(const FTextLocation& InSelectionStart, const FTextLocation& InCursorLocation)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "CutSelectedTextToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedTextToClipboard()"
  },
  {
    "label": "CopySelectedTextToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedTextToClipboard()"
  },
  {
    "label": "PasteTextFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteTextFromClipboard()"
  },
  {
    "label": "InsertTextAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTextAtCursor(const FString& InString)"
  },
  {
    "label": "InsertRunAtCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertRunAtCursor(TSharedRef<IRun> InRun)"
  },
  {
    "label": "MoveCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveCursor(const FMoveCursor& InArgs)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "GoTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GoTo(const ETextLocation NewLocation)"
  },
  {
    "label": "JumpTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpTo(ETextLocation JumpLocation, ECursorAction Action)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const FTextLocation& NewLocation)"
  },
  {
    "label": "ScrollTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollTo(const ETextLocation NewLocation)"
  },
  {
    "label": "UpdateCursorHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCursorHighlight()"
  },
  {
    "label": "RemoveCursorHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCursorHighlight()"
  },
  {
    "label": "UpdatePreferredCursorScreenOffsetInLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreferredCursorScreenOffsetInLine()"
  },
  {
    "label": "ApplyToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyToSelection(const FRunInfo& InRunInfo, const FTextBlockStyle& InStyle)"
  },
  {
    "label": "RestoreOriginalText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreOriginalText()"
  },
  {
    "label": "BeginEditTransation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginEditTransation()"
  },
  {
    "label": "EndEditTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndEditTransaction()"
  },
  {
    "label": "PushUndoState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushUndoState(const SlateEditableTextTypes::FUndoState& InUndoState)"
  },
  {
    "label": "ClearUndoStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUndoStates()"
  },
  {
    "label": "MakeUndoState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeUndoState(SlateEditableTextTypes::FUndoState& OutUndoState)"
  },
  {
    "label": "Undo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Undo()"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redo()"
  },
  {
    "label": "SaveText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveText(const FText& TextToSave)"
  },
  {
    "label": "LoadText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadText()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "CacheDesiredSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "InsertTextAtCursorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTextAtCursorImpl(const FString& InString)"
  },
  {
    "label": "InsertNewLineAtCursorImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewLineAtCursorImpl()"
  },
  {
    "label": "RefreshImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RefreshImpl(const FText* InTextToSet, const bool bForce = false)"
  },
  {
    "label": "CreateTextOrPasswordRun()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IRun>)",
    "insertText": "CreateTextOrPasswordRun(const FRunInfo& InRunInfo, const TSharedRef<const FString>& InText, const FTextBlockStyle& InStyle)"
  },
  {
    "label": "OnContextMenuClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnContextMenuClosed(TSharedRef<IMenu> Menu)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FVirtualKeyboardEntry>)",
    "insertText": "Create(FSlateEditableTextLayout& InOwnerLayout)"
  },
  {
    "label": "FVirtualKeyboardEntry()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FVirtualKeyboardEntry(FSlateEditableTextLayout& InOwnerLayout)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTextInputMethodContext>)",
    "insertText": "Create(FSlateEditableTextLayout& InOwnerLayout)"
  },
  {
    "label": "CacheWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheWindow()"
  },
  {
    "label": "FTextRange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FTextRange(CompositionBeginIndex, CompositionBeginIndex + CompositionLength)"
  },
  {
    "label": "FTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "FTextInputMethodContext(FSlateEditableTextLayout& InOwnerLayout)"
  }
]