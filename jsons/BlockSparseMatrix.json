[
  {
    "label": "BlockSparseMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockSparseMatrix"
  },
  {
    "label": "BlockSparseMatrixView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockSparseMatrixView"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "TripletComp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TripletComp"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "BlockVectorView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockVectorView"
  },
  {
    "label": "BlockVectorReturn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockVectorReturn"
  },
  {
    "label": "BlockSparseTimeDenseProduct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockSparseTimeDenseProduct"
  },
  {
    "label": "BlockInnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockInnerIterator"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSEBLOCKMATRIX_H # define EIGEN_SPARSEBLOCKMATRIX_H namespace Eigen { template<_Scalar,int _BlockAtCompileTime = Dynamic,int _Options = ColMajor,_StorageIndex = int> class BlockSparseMatrix ; template<BlockSparseMatrixT> class BlockSparseMatrixView ; namespace internal { template<_Scalar,int _BlockAtCompileTime,int _Options,_Index> struct traits<BlockSparseMatrix<_Scalar,_BlockAtCompileTime,_Options,_Index>> { typedef _Scalar Scalar ; typedef _Index Index ; typedef Sparse StorageKind ; typedef MatrixXpr XprKind ; enum { RowsAtCompileTime = Dynamic,ColsAtCompileTime = Dynamic,MaxRowsAtCompileTime = Dynamic,MaxColsAtCompileTime = Dynamic,BlockSize = _BlockAtCompileTime,Flags = _Options | NestByRefBit | LvalueBit,CoeffReadCost = NumTraits<Scalar>::ReadCost,SupportedAccessPatterns = InnerRandomAccessPattern } ; } ; template<BlockSparseMatrixT> struct traits<BlockSparseMatrixView<BlockSparseMatrixT>> { typedef Ref<Matrix<BlockSparseMatrixT::Scalar,BlockSparseMatrixT::BlockSize,BlockSparseMatrixT::BlockSize>> Scalar ; typedef Ref<Matrix<BlockSparseMatrixT::RealScalar,BlockSparseMatrixT::BlockSize,BlockSparseMatrixT::BlockSize>> RealScalar ; } ; template<Iterator,bool IsColMajor> struct TripletComp { typedef Iterator::value_type Triplet ; bool)",
    "insertText": "operator()(const Triplet& a, const Triplet& b)"
  },
  {
    "label": "BlockSparseMatrixView()",
    "kind": "Method",
    "detail": "Function (} } ; } template<BlockSparseMatrixT> class BlockSparseMatrixView : public SparseMatrixBase<BlockSparseMatrixT> { public : typedef Ref<BlockSparseMatrixT::BlockScalar> Scalar ; typedef Ref<BlockSparseMatrixT::BlockRealScalar> RealScalar ; typedef BlockSparseMatrixT::Index Index ; typedef BlockSparseMatrixT Nested ; enum { Flags = BlockSparseMatrixT::Options,Options = BlockSparseMatrixT::Options,RowsAtCompileTime = BlockSparseMatrixT::RowsAtCompileTime,ColsAtCompileTime = BlockSparseMatrixT::ColsAtCompileTime,MaxColsAtCompileTime = BlockSparseMatrixT::MaxColsAtCompileTime,MaxRowsAtCompileTime = BlockSparseMatrixT::MaxRowsAtCompileTime } ; public :)",
    "insertText": "BlockSparseMatrixView(const BlockSparseMatrixT& spblockmat) : m_spblockmat(spblockmat)"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "outerSize()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} class InnerIterator : public BlockSparseMatrixT::BlockInnerIterator { public :)",
    "insertText": "InnerIterator(const BlockSparseMatrixView& mat, Index outer) : BlockSparseMatrixT::BlockInnerIterator(mat.m_spblockmat, outer)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (} } ; protected : const BlockSparseMatrixT& m_spblockmat ; } ; template<BlockSparseMatrixT,VectorType> class BlockVectorView { public : enum { BlockSize = BlockSparseMatrixT::BlockSize,ColsAtCompileTime = VectorType::ColsAtCompileTime,RowsAtCompileTime = VectorType::RowsAtCompileTime,Flags = VectorType::Flags } ; typedef Ref<const Matrix<)",
    "insertText": "Scalar(RowsAtCompileTime==1)? 1 : BlockSize, (ColsAtCompileTime==1)"
  },
  {
    "label": "BlockVectorView()",
    "kind": "Method",
    "detail": "Function (typedef BlockSparseMatrixT::Index Index ; public :)",
    "insertText": "BlockVectorView(const BlockSparseMatrixT& spblockmat, const VectorType& vec) : m_spblockmat(spblockmat),m_vec(vec)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "size()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeff(Index bi)"
  },
  {
    "label": "blockRowsIndex()",
    "kind": "Method",
    "detail": "Function (Index startRow = m_spblockmat .)",
    "insertText": "blockRowsIndex(bi)"
  },
  {
    "label": "blockRowsIndex()",
    "kind": "Method",
    "detail": "Function (Index rowSize = m_spblockmat .)",
    "insertText": "blockRowsIndex(bi+1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeff(Index bi, Index j)"
  },
  {
    "label": "BlockVectorReturn()",
    "kind": "Method",
    "detail": "Function (} protected : const BlockSparseMatrixT& m_spblockmat ; const VectorType& m_vec ; } ; template<VectorType,Index> class BlockVectorReturn ; template<BlockSparseMatrixT,VectorType> class BlockVectorReturn { public : enum { ColsAtCompileTime = VectorType::ColsAtCompileTime,RowsAtCompileTime = VectorType::RowsAtCompileTime,Flags = VectorType::Flags } ; typedef Ref<Matrix<VectorType::Scalar,RowsAtCompileTime,ColsAtCompileTime>> Scalar ; typedef BlockSparseMatrixT::Index Index ; public :)",
    "insertText": "BlockVectorReturn(const BlockSparseMatrixT& spblockmat, VectorType& vec) : m_spblockmat(spblockmat),m_vec(vec)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeffRef(Index bi)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeffRef(Index bi, Index j)"
  },
  {
    "label": "EIGEN_PRODUCT_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} protected : const BlockSparseMatrixT& m_spblockmat ; VectorType& m_vec ; } ; template<Lhs,Rhs> class BlockSparseTimeDenseProduct ; namespace internal { template<BlockSparseMatrixT,VecType> struct traits<BlockSparseTimeDenseProduct<BlockSparseMatrixT,VecType>> { typedef Dense StorageKind ; typedef MatrixXpr XprKind ; typedef BlockSparseMatrixT::Scalar Scalar ; typedef BlockSparseMatrixT::Index Index ; enum { RowsAtCompileTime = Dynamic,ColsAtCompileTime = Dynamic,MaxRowsAtCompileTime = Dynamic,MaxColsAtCompileTime = Dynamic,Flags = 0,CoeffReadCost = internal::traits<BlockSparseMatrixT>::CoeffReadCost } ; } ; } template<Lhs,Rhs> class BlockSparseTimeDenseProduct : public ProductBase<BlockSparseTimeDenseProduct<Lhs,Rhs>,Lhs,Rhs> { public :)",
    "insertText": "EIGEN_PRODUCT_PUBLIC_INTERFACE(BlockSparseTimeDenseProduct) BlockSparseTimeDenseProduct(const Lhs& lhs, const Rhs& rhs) : Base(lhs,rhs)"
  },
  {
    "label": "scaleAndAddTo()",
    "kind": "Method",
    "detail": "Function (} template<Dest> void)",
    "insertText": "scaleAndAddTo(Dest& dest, const typename Rhs::Scalar& alpha)"
  },
  {
    "label": "tmpDest()",
    "kind": "Method",
    "detail": "Function (BlockVectorReturn<Lhs,Dest>)",
    "insertText": "tmpDest(m_lhs, dest)"
  },
  {
    "label": "sparse_time_dense_product()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sparse_time_dense_product(BlockSparseMatrixView<Lhs>(m_lhs), BlockVectorView<Lhs, Rhs>(m_lhs, m_rhs), tmpDest, alpha)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : BlockSparseTimeDenseProduct&)",
    "insertText": "operator(const BlockSparseTimeDenseProduct&)"
  },
  {
    "label": "BlockSparseMatrix()",
    "kind": "Method",
    "detail": "Function (} ; template<_Scalar,int _BlockAtCompileTime,int _Options,_StorageIndex> class BlockSparseMatrix : public SparseMatrixBase<BlockSparseMatrix<_Scalar,_BlockAtCompileTime,_Options,_StorageIndex>> { public : typedef _Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef _StorageIndex StorageIndex ; typedef internal::ref_selector<BlockSparseMatrix<_Scalar,_BlockAtCompileTime,_Options,_StorageIndex>>::type Nested ; enum { Options = _Options,Flags = Options,BlockSize = _BlockAtCompileTime,RowsAtCompileTime = Dynamic,ColsAtCompileTime = Dynamic,MaxRowsAtCompileTime = Dynamic,MaxColsAtCompileTime = Dynamic,IsVectorAtCompileTime = 0,IsColMajor = Flags& RowMajorBit ? 0 : 1 } ; typedef Matrix<Scalar,_BlockAtCompileTime,_BlockAtCompileTime,IsColMajor ? ColMajor : RowMajor> BlockScalar ; typedef Matrix<RealScalar,_BlockAtCompileTime,_BlockAtCompileTime,IsColMajor ? ColMajor : RowMajor> BlockRealScalar ; typedef internal::conditional<_BlockAtCompileTime = = Dynamic,Scalar,BlockScalar>::type BlockScalarReturnType ; typedef BlockSparseMatrix<Scalar,BlockSize,IsColMajor ? ColMajor : RowMajor,StorageIndex> PlainObject ; public :)",
    "insertText": "BlockSparseMatrix() : m_innerBSize(0),m_outerBSize(0),m_innerOffset(0),m_outerOffset(0), m_nonzerosblocks(0),m_values(0),m_blockPtr(0),m_indices(0), m_outerIndex(0),m_blockSize(BlockSize)"
  },
  {
    "label": "BlockSparseMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlockSparseMatrix(Index brow, Index bcol) : m_innerBSize(IsColMajor ? brow : bcol), m_outerBSize(IsColMajor ? bcol : brow), m_innerOffset(0),m_outerOffset(0),m_nonzerosblocks(0), m_values(0),m_blockPtr(0),m_indices(0), m_outerIndex(0),m_blockSize(BlockSize)"
  },
  {
    "label": "BlockSparseMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlockSparseMatrix(const BlockSparseMatrix& other) : m_innerBSize(other.m_innerBSize),m_outerBSize(other.m_outerBSize), m_nonzerosblocks(other.m_nonzerosblocks),m_nonzeros(other.m_nonzeros), m_blockPtr(0),m_blockSize(other.m_blockSize)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_blockSize == BlockSize && \" CAN NOT COPY BETWEEN FIXED-SIZE AND VARIABLE-SIZE BLOCKS\")"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(other.m_innerOffset, other.m_innerOffset+m_innerBSize+1, m_innerOffset)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(other.m_outerOffset, other.m_outerOffset+m_outerBSize+1, m_outerOffset)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(other.m_values, other.m_values+m_nonzeros, m_values)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(other.m_indices, other.m_indices+m_nonzerosblocks, m_indices)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(other.m_outerIndex, other.m_outerIndex+m_outerBSize, m_outerIndex)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(BlockSparseMatrix& first, BlockSparseMatrix& second)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_innerBSize, second.m_innerBSize)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_outerBSize, second.m_outerBSize)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_innerOffset, second.m_innerOffset)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_outerOffset, second.m_outerOffset)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_nonzerosblocks, second.m_nonzerosblocks)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_nonzeros, second.m_nonzeros)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_values, second.m_values)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_blockPtr, second.m_blockPtr)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_indices, second.m_indices)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_outerIndex, second.m_outerIndex)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(first.m_BlockSize, second.m_blockSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BlockSparseMatrix&)",
    "insertText": "operator(BlockSparseMatrix other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(*this, other)"
  },
  {
    "label": "BlockSparseMatrix()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_outerIndex ; delete [ ] m_innerOffset ; delete [ ] m_outerOffset ; delete [ ] m_indices ; delete [ ] m_blockPtr ; delete [ ] m_values ; } template<MatrixType>)",
    "insertText": "BlockSparseMatrix(const MatrixType& spmat) : m_blockSize(BlockSize)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((m_blockSize != Dynamic), THIS_METHOD_IS_ONLY_FOR_FIXED_SIZE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = spmat ; } template<MatrixType> BlockSparseMatrix&)",
    "insertText": "operator(const MatrixType& spmat)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((m_innerBSize != 0 && m_outerBSize != 0) && \"Trying to assign to a zero-size matrix, call resize() first\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(((MatrixType::Options&RowMajorBit) != IsColMajor) && \"Wrong storage order\")"
  },
  {
    "label": "blockPattern()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<bool,MatrixType::Options,MatrixType::Index> MatrixPatternType ; MatrixPatternType)",
    "insertText": "blockPattern(blockRows(), blockCols())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_nonzeros = 0 ;)",
    "insertText": "for(StorageIndex bj = 0; bj < m_outerBSize; ++bj)"
  },
  {
    "label": "nzblocksFlag()",
    "kind": "Method",
    "detail": "Function (std::vector<bool>)",
    "insertText": "nzblocksFlag(m_innerBSize,false)"
  },
  {
    "label": "startVec()",
    "kind": "Method",
    "detail": "Function (blockPattern .)",
    "insertText": "startVec(bj)"
  },
  {
    "label": "it_spmat()",
    "kind": "Method",
    "detail": "Function (MatrixType::InnerIterator)",
    "insertText": "it_spmat(spmat, j)"
  },
  {
    "label": "innerToBlock()",
    "kind": "Method",
    "detail": "Function (StorageIndex bi =)",
    "insertText": "innerToBlock(it_spmat.index())"
  },
  {
    "label": "insertBackByOuterInnerUnordered()",
    "kind": "Method",
    "detail": "Function (nzblocksFlag [ bi ] = true ; blockPattern .)",
    "insertText": "insertBackByOuterInnerUnordered(bj, bi)"
  },
  {
    "label": "blockOuterSize()",
    "kind": "Method",
    "detail": "Function (m_nonzeros + =)",
    "insertText": "blockOuterSize(bj) * blockInnerSize(bi)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} } } } blockPattern .)",
    "insertText": "finalize()"
  },
  {
    "label": "setBlockStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBlockStructure(blockPattern)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StorageIndex idxVal ;)",
    "insertText": "if(m_blockSize == Dynamic)"
  },
  {
    "label": "idxVal()",
    "kind": "Method",
    "detail": "Function (idxVal = m_blockPtr [ m_outerIndex [ bj ] + idx ] ;)",
    "insertText": "idxVal(j - blockOuterIndex(bj)) * blockOuterSize(bj) + it_spmat.index()"
  },
  {
    "label": "idxVal()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "idxVal(m_outerIndex[bj] + idx)"
  },
  {
    "label": "idxVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "idxVal(j - blockOuterIndex(bj)) * m_blockSize + (it_spmat.index()%m_blockSize)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} m_values [ idxVal ] = it_spmat .)",
    "insertText": "value()"
  },
  {
    "label": "setBlockStructure()",
    "kind": "Method",
    "detail": "Function (} } } return* this ; } template<MatrixType> void)",
    "insertText": "setBlockStructure(const MatrixType& blockPattern)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(blockPattern.rows(), blockPattern.cols())"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(blockPattern.nonZeros())"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (std::vector<int> nzBlockIdx ; MatrixType::InnerIterator)",
    "insertText": "it(blockPattern, bj)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (nzBlockIdx .)",
    "insertText": "push_back(it.index())"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "sort(nzBlockIdx.begin(), nzBlockIdx.end())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StorageIndex offset = m_outerIndex [ bj ] + idx ; m_indices [ offset ] = nzBlockIdx [ idx ] ;)",
    "insertText": "if(m_blockSize == Dynamic) m_blockPtr[offset] = m_blockPtr[offset-1] + blockInnerSize(nzBlockIdx[idx]) * blockOuterSize(bj)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "resize(Index brow, Index bcol)"
  },
  {
    "label": "setBlockSize()",
    "kind": "Method",
    "detail": "Function (m_innerBSize = IsColMajor ? brow : bcol ; m_outerBSize = IsColMajor ? bcol : brow ; } void)",
    "insertText": "setBlockSize(Index blockSize)"
  },
  {
    "label": "setBlockLayout()",
    "kind": "Method",
    "detail": "Function (m_blockSize = blockSize ; } void)",
    "insertText": "setBlockLayout(const VectorXi& rowBlocks, const VectorXi& colBlocks)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const VectorXi& innerBlocks = IsColMajor ? rowBlocks : colBlocks ; const VectorXi& outerBlocks = IsColMajor ? colBlocks : rowBlocks ;)",
    "insertText": "eigen_assert(m_innerBSize == innerBlocks.size() && \"CHECK THE NUMBER OF ROW OR COLUMN BLOCKS\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_outerBSize == outerBlocks.size() && \"CHECK THE NUMBER OF ROW OR COLUMN BLOCKS\")"
  },
  {
    "label": "partial_sum()",
    "kind": "Method",
    "detail": "Function (m_innerOffset = new StorageIndex [ m_innerBSize + 1 ] ; m_outerOffset = new StorageIndex [ m_outerBSize + 1 ] ; m_innerOffset [ 0 ] = 0 ; m_outerOffset [ 0 ] = 0 ;)",
    "insertText": "partial_sum(&innerBlocks[0], &innerBlocks[m_innerBSize-1]+1, &m_innerOffset[1])"
  },
  {
    "label": "partial_sum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "partial_sum(&outerBlocks[0], &outerBlocks[m_outerBSize-1]+1, &m_outerOffset[1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_nonzeros = 0 ;)",
    "insertText": "for(StorageIndex bj = 0; bj < m_outerBSize; ++bj) for(StorageIndex bi = 0; bi < m_innerBSize; ++bi)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reserve(const Index nonzerosblocks)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((m_innerBSize != 0 && m_outerBSize != 0) && \"TRYING TO RESERVE ZERO-SIZE MATRICES, CALL resize() first\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_outerIndex = new StorageIndex [ m_outerBSize + 1 ] ; m_nonzerosblocks = nonzerosblocks ;)",
    "insertText": "if(m_blockSize != Dynamic)"
  },
  {
    "label": "nonzerosblocks()",
    "kind": "Method",
    "detail": "Function (m_nonzeros =)",
    "insertText": "nonzerosblocks(m_blockSize * m_blockSize)"
  },
  {
    "label": "setFromTriplets()",
    "kind": "Method",
    "detail": "Function (m_blockPtr = 0 ; } else { m_blockPtr = new StorageIndex [ m_nonzerosblocks + 1 ] ; } m_indices = new StorageIndex [ m_nonzerosblocks + 1 ] ; m_values = new Scalar [ m_nonzeros ] ; } template<InputIterator> void)",
    "insertText": "setFromTriplets(const InputIterator& begin, const InputIterator& end)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((m_innerBSize!=0 && m_outerBSize !=0) && \"ZERO BLOCKS, PLEASE CALL resize() before\")"
  },
  {
    "label": "sort()",
    "kind": "Method",
    "detail": "Function (internal::TripletComp<InputIterator,IsColMajor> tripletcomp ;)",
    "insertText": "sort(begin, end, tripletcomp)"
  },
  {
    "label": "rowBlocks()",
    "kind": "Method",
    "detail": "Function (VectorXi)",
    "insertText": "rowBlocks(m_innerBSize)"
  },
  {
    "label": "colBlocks()",
    "kind": "Method",
    "detail": "Function (VectorXi)",
    "insertText": "colBlocks(m_outerBSize)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (rowBlocks .)",
    "insertText": "setZero()"
  },
  {
    "label": "nzblock_outer()",
    "kind": "Method",
    "detail": "Function (VectorXi)",
    "insertText": "nzblock_outer(m_outerBSize)"
  },
  {
    "label": "nz_outer()",
    "kind": "Method",
    "detail": "Function (VectorXi)",
    "insertText": "nz_outer(m_outerBSize)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(it->row() >= 0 && it->row() < this->blockRows() && it->col() >= 0 && it->col() < this->blockCols())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((it->value().rows() == it->value().cols() && (it->value().rows() == m_blockSize)) || (m_blockSize == Dynamic))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((rowBlocks[it->row()] == 0 || rowBlocks[it->row()] == it->value().rows()) && \"NON CORRESPONDING SIZES FOR ROW BLOCKS\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((colBlocks[it->col()] == 0 || colBlocks[it->col()] == it->value().cols()) && \"NON CORRESPONDING SIZES FOR COLUMN BLOCKS\")"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (rowBlocks [ it ->)",
    "insertText": "row()] =it->value().rows()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (colBlocks [ it ->)",
    "insertText": "col()] = it->value().cols()"
  },
  {
    "label": "nz_outer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "nz_outer(IsColMajor ? it->col() : it->row()) += it->value().rows() * it->value().cols()"
  },
  {
    "label": "nzblock_outer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nzblock_outer(IsColMajor ? it->col() : it->row())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_blockSize == Dynamic) setBlockLayout(rowBlocks, colBlocks)"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (StorageIndex nzblocks = nzblock_outer .)",
    "insertText": "sum()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(nzblocks)"
  },
  {
    "label": "block_id()",
    "kind": "Method",
    "detail": "Function (VectorXi)",
    "insertText": "block_id(m_outerBSize)"
  },
  {
    "label": "nzblock_outer()",
    "kind": "Method",
    "detail": "Function (m_outerIndex [ bj + 1 ] = m_outerIndex [ bj ] +)",
    "insertText": "nzblock_outer(bj)"
  },
  {
    "label": "block_id()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "block_id(bj)"
  },
  {
    "label": "nz_outer()",
    "kind": "Method",
    "detail": "Function (m_blockPtr [ m_outerIndex [ bj + 1 ] ] = m_blockPtr [ m_outerIndex [ bj ] ] +)",
    "insertText": "nz_outer(bj)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(InputIterator it(begin); it!=end; ++it)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (StorageIndex outer = IsColMajor ? it ->)",
    "insertText": "col() : it->row()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (StorageIndex inner = IsColMajor ? it ->)",
    "insertText": "row() : it->col()"
  },
  {
    "label": "block_id()",
    "kind": "Method",
    "detail": "Function (m_indices [)",
    "insertText": "block_id(outer)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (StorageIndex block_size = it ->)",
    "insertText": "value().rows()*it->value().cols()"
  },
  {
    "label": "blockPtr()",
    "kind": "Method",
    "detail": "Function (StorageIndex nz_marker =)",
    "insertText": "blockPtr(block_id[outer])"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&(m_values[nz_marker]), it->value().data(), block_size * sizeof(Scalar))"
  },
  {
    "label": "block_id()",
    "kind": "Method",
    "detail": "Function (m_blockPtr [)",
    "insertText": "block_id(outer)+1] = m_blockPtr[block_id(outer)"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "innerSize()"
  },
  {
    "label": "blockRows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockRows()"
  },
  {
    "label": "blockCols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockCols()"
  },
  {
    "label": "outerBlocks()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "outerBlocks()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(outer < outerSize() && \"OUTER INDEX OUT OF BOUNDS\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (StorageIndex b_outer = 0 ;)",
    "insertText": "while(m_outerOffset[b_outer] <= outer)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(inner < innerSize() && \"OUTER INDEX OUT OF BOUNDS\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (StorageIndex b_inner = 0 ;)",
    "insertText": "while(m_innerOffset[b_inner] <= inner)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(brow < blockRows() && \"BLOCK ROW INDEX OUT OF BOUNDS\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(bcol < blockCols() && \"BLOCK nzblocksFlagCOLUMN OUT OF BOUNDS\")"
  },
  {
    "label": "blockInnerSize()",
    "kind": "Method",
    "detail": "Function (StorageIndex rsize = IsColMajor ?)",
    "insertText": "blockInnerSize(brow): blockOuterSize(bcol)"
  },
  {
    "label": "blockOuterSize()",
    "kind": "Method",
    "detail": "Function (StorageIndex csize = IsColMajor ?)",
    "insertText": "blockOuterSize(bcol) : blockInnerSize(brow)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (StorageIndex inner = IsColMajor ? brow : bcol ; StorageIndex outer = IsColMajor ? bcol : brow ; StorageIndex offset = m_outerIndex [ outer ] ;)",
    "insertText": "while(offset < m_outerIndex[outer+1] && m_indices[offset] != inner)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "eigen_assert(\"DYNAMIC INSERTION IS NOT YET SUPPORTED\")"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} } Map<const BlockScalar>)",
    "insertText": "coeff(Index brow, Index bcol)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(bcol < blockCols() && \"BLOCK COLUMN OUT OF BOUNDS\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "eigen_assert(\"NOT YET SUPPORTED\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<VecType> BlockSparseTimeDenseProduct<BlockSparseMatrix,VecType>)",
    "insertText": "operator(const VecType& lhs)"
  },
  {
    "label": "nonZerosBlocks()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosBlocks()"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (} StorageIndex*)",
    "insertText": "innerIndexPtr()"
  },
  {
    "label": "blockColsIndex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockColsIndex(Index bj)"
  },
  {
    "label": "blockOuterIndex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockOuterIndex(Index bj)"
  },
  {
    "label": "blockInnerIndex()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockInnerIndex(Index bi)"
  },
  {
    "label": "blockInnerSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockInnerSize(Index bi)"
  },
  {
    "label": "blockOuterSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockOuterSize(Index bj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} class InnerIterator ; class BlockInnerIterator ; std::ostream&)",
    "insertText": "operator(std::ostream & s, const BlockSparseMatrix& m)"
  },
  {
    "label": "itb()",
    "kind": "Method",
    "detail": "Function (BlockInnerIterator)",
    "insertText": "itb(m, j)"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "s(\"<<itb.row() << \", \" << itb.col() << \")"
  },
  {
    "label": "blockPtr()",
    "kind": "Method",
    "detail": "Function (} } s<<std::endl ; return s ; } Index)",
    "insertText": "blockPtr(Index id)"
  },
  {
    "label": "BlockInnerIterator()",
    "kind": "Method",
    "detail": "Function (Index m_innerBSize ; Index m_outerBSize ; StorageIndex* m_innerOffset ; StorageIndex* m_outerOffset ; Index m_nonzerosblocks ; Index m_nonzeros ; Scalar* m_values ; StorageIndex* m_blockPtr ; StorageIndex* m_indices ; StorageIndex* m_outerIndex ; Index m_blockSize ; } ; template<_Scalar,int _BlockAtCompileTime,int _Options,_StorageIndex> class BlockSparseMatrix<_Scalar,_BlockAtCompileTime,_Options,_StorageIndex>::BlockInnerIterator { public : enum { Flags = _Options } ;)",
    "insertText": "BlockInnerIterator(const BlockSparseMatrix& mat, const Index outer) : m_mat(mat),m_outer(outer), m_id(mat.m_outerIndex[outer]), m_end(mat.m_outerIndex[outer+1])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BlockInnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (} Map<BlockScalar>)",
    "insertText": "valueRef()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "index()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} protected : const BlockSparseMatrix<_Scalar,_BlockAtCompileTime,_Options,StorageIndex>& m_mat ; const Index m_outer ; Index m_id ; Index m_end ; } ; template<_Scalar,int _BlockAtCompileTime,int _Options,_StorageIndex> class BlockSparseMatrix<_Scalar,_BlockAtCompileTime,_Options,_StorageIndex>::InnerIterator { public :)",
    "insertText": "InnerIterator(const BlockSparseMatrix& mat, Index outer) : m_mat(mat),m_outerB(mat.outerToBlock(outer)),m_outer(outer), itb(mat, mat.outerToBlock(outer)), m_offset(outer - mat.blockOuterIndex(m_outerB))"
  },
  {
    "label": "blockInnerIndex()",
    "kind": "Method",
    "detail": "Function (m_id = m_mat .)",
    "insertText": "blockInnerIndex(itb.index())"
  },
  {
    "label": "blockInnerIndex()",
    "kind": "Method",
    "detail": "Function (m_start = m_id ; m_end = m_mat .)",
    "insertText": "blockInnerIndex(itb.index()+1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_id + + ;)",
    "insertText": "if(m_id >= m_end)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + itb ;)",
    "insertText": "if(itb)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  }
]