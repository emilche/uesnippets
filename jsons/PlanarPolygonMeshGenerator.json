[
  {
    "label": "FPlanarPolygonMeshGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarPolygonMeshGenerator"
  },
  {
    "label": "FPlanarPolygonMeshGenerator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" IndexTypes . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" # include \" MeshShapeGenerator . h \" # include \" Polygon2 . h \" namespace UE { namespace Geometry { class FPlanarPolygonMeshGenerator : public FMeshShapeGenerator { public : FPolygon2d Polygon ; FVector3f Normal ; FIndex2i IndicesMap ; public :)",
    "insertText": "FPlanarPolygonMeshGenerator()"
  },
  {
    "label": "SetPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolygon(const TArray<FVector2D>& PolygonVerts)"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "MakeVertex()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "MakeVertex(double x, double y)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "v(0, 0, 0)"
  }
]