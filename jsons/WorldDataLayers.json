[
  {
    "label": "UDEPRECATED_DataLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_DataLayer"
  },
  {
    "label": "UDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstance"
  },
  {
    "label": "UDataLayerInstanceWithAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerInstanceWithAsset"
  },
  {
    "label": "UDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerAsset"
  },
  {
    "label": "UExternalDataLayerInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerInstance"
  },
  {
    "label": "FActorPlacementDataLayers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorPlacementDataLayers"
  },
  {
    "label": "FWorldDataLayersEffectiveStates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldDataLayersEffectiveStates"
  },
  {
    "label": "AWorldDataLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldDataLayers"
  },
  {
    "label": "FWorldPartitionActorDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldPartitionActorDesc"
  },
  {
    "label": "DataLayerInstanceType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayerInstanceType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UDataLayerToAssetCommandlet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerToAssetCommandlet"
  },
  {
    "label": "UWorldPartition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartition"
  },
  {
    "label": "UDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerManager"
  },
  {
    "label": "UExternalDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerManager"
  },
  {
    "label": "UDataLayerEditorSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataLayerEditorSubsystem"
  },
  {
    "label": "FWorldDataLayersEffectiveStatesAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldDataLayersEffectiveStatesAccessor"
  },
  {
    "label": "FWorldPartitionStreamingContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionStreamingContext"
  },
  {
    "label": "UWorldPartitionStreamingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorldPartitionStreamingPolicy"
  },
  {
    "label": "HasDataLayerInstanceClass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasDataLayerInstanceClass"
  },
  {
    "label": "IdentifierType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IdentifierType"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GameFramework / Info . h \" # include \" WorldPartition / DataLayer / ActorDataLayer . h \" # include \" WorldPartition / DataLayer / DataLayerInstance . h \" # include \" WorldPartition / DataLayer / DataLayer . h \" # include \" WorldPartition / DataLayer / DataLayerInstanceProviderInterface . h \" # include \" WorldPartition / DataLayer / ExternalDataLayerAsset . h \" # include \" Net / Core / PushModel / PushModel . h \" # include \" Engine / World . h \" # include \" Engine / Level . h \" # include \" ExternalPackageHelper . h \" # include \" WorldDataLayers . generated . h \" class UDEPRECATED_DataLayer ; class UDataLayerInstance ; class UDataLayerInstanceWithAsset ; class UDataLayerAsset ; class UExternalDataLayerInstance ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FWorldDataLayersEffectiveStates()",
    "kind": "Method",
    "detail": "Function (ExternalDataLayerName = NAME_None ; CurrentColorizedDataLayerInstanceName = NAME_None ; } } ; struct FWorldDataLayersEffectiveStates {)",
    "insertText": "FWorldDataLayersEffectiveStates()"
  },
  {
    "label": "GetAllEffectiveActiveDataLayerNames()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetAllEffectiveActiveDataLayerNames()"
  },
  {
    "label": "GetAllEffectiveLoadedDataLayerNames()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetAllEffectiveLoadedDataLayerNames()"
  },
  {
    "label": "GetDataLayerEffectiveRuntimeStateByName()",
    "kind": "Method",
    "detail": "Function (EDataLayerRuntimeState)",
    "insertText": "GetDataLayerEffectiveRuntimeStateByName(FName InDataLayerName)"
  },
  {
    "label": "GetUpdateEpoch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetUpdateEpoch()"
  },
  {
    "label": "SetReplicatedEffectiveActiveDataLayerNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicatedEffectiveActiveDataLayerNames(const TArray<FName>& InRepEffectiveActiveDataLayerNames)"
  },
  {
    "label": "SetReplicatedEffectiveLoadedDataLayerNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicatedEffectiveLoadedDataLayerNames(const TArray<FName>& InRepEffectiveLoadedDataLayerNames)"
  },
  {
    "label": "SetDataLayerEffectiveRuntimeState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDataLayerEffectiveRuntimeState(FName InDataLayerName, bool bIsLocalDataLayer, EDataLayerRuntimeState NewEffectiveRuntimeState, EDataLayerRuntimeState& OutOldEffectiveRuntimeState)"
  },
  {
    "label": "GetReplicatedEffectiveActiveDataLayerNames()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetReplicatedEffectiveActiveDataLayerNames()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API virtual void PostLoad()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "RewindForReplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RewindForReplay()"
  },
  {
    "label": "PostRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegisterAllComponents()"
  },
  {
    "label": "PreEditUndo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PreEditUndo()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "ShouldLevelKeepRefIfExternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldLevelKeepRefIfExternal()"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "ShouldImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldImport(FStringView ActorPropString, bool IsMovingLevel)"
  },
  {
    "label": "OnLoadedActorRemovedFromLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadedActorRemovedFromLevel()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (AWorldDataLayers*)",
    "insertText": "Create(UWorld* World, FName InWorldDataLayerName = NAME_None)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (AWorldDataLayers*)",
    "insertText": "Create(const FActorSpawnParameters& SpawnParameters)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "HasDeprecatedDataLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDeprecatedDataLayers()"
  },
  {
    "label": "RemoveDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDataLayer(const UDataLayerInstance* InDataLayer, bool bInResolveActorDescContainers = true)"
  },
  {
    "label": "RemoveDataLayers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveDataLayers(const TArray<UDataLayerInstance*>& InDataLayerInstances, bool bInResolveActorDescContainers = true)"
  },
  {
    "label": "SetAllowRuntimeDataLayerEditing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowRuntimeDataLayerEditing(bool bInAllowRuntimeDataLayerEditing)"
  },
  {
    "label": "GetAllowRuntimeDataLayerEditing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowRuntimeDataLayerEditing()"
  },
  {
    "label": "IsInActorEditorContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInActorEditorContext(const UDataLayerInstance* InDataLayerInstance)"
  },
  {
    "label": "AddToActorEditorContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddToActorEditorContext(UDataLayerInstance* InDataLayerInstance)"
  },
  {
    "label": "RemoveFromActorEditorContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFromActorEditorContext(UDataLayerInstance* InDataLayerInstance)"
  },
  {
    "label": "PushActorEditorContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushActorEditorContext(int32 InContextID, bool bDuplicateContext)"
  },
  {
    "label": "PopActorEditorContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopActorEditorContext(int32 InContextID)"
  },
  {
    "label": "GetActorEditorContextDataLayers()",
    "kind": "Method",
    "detail": "Function (TArray<UDataLayerInstance*>)",
    "insertText": "GetActorEditorContextDataLayers()"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstances(const TArray<UDataLayerAsset*>& InDataLayersAssets)"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstances(const TArray<const UDataLayerAsset*>& InDataLayersAssets)"
  },
  {
    "label": "GetDataLayerInstanceNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetDataLayerInstanceNames(const TArray<const UDataLayerAsset*>& InDataLayersAssets)"
  },
  {
    "label": "OverwriteDataLayerRuntimeStates()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "OverwriteDataLayerRuntimeStates(const TArray<T>* InActiveDataLayers, const TArray<T>* InLoadedDataLayers)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(FText* OutReason = nullptr)"
  },
  {
    "label": "IsSubWorldDataLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSubWorldDataLayers()"
  },
  {
    "label": "SupportsExternalPackageDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsExternalPackageDataLayerInstances()"
  },
  {
    "label": "IsUsingExternalPackageDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingExternalPackageDataLayerInstances()"
  },
  {
    "label": "CanReferenceDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReferenceDataLayerAsset(const UDataLayerAsset* InDataLayerAsset, FText* OutFailureReason)"
  },
  {
    "label": "GetWorldPartitionWorldDataLayersName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetWorldPartitionWorldDataLayersName()"
  },
  {
    "label": "DumpDataLayers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpDataLayers(FOutputDevice& OutputDevice)"
  },
  {
    "label": "ContainsDataLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDataLayer(const UDataLayerInstance* InDataLayer)"
  },
  {
    "label": "GetDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (const UDataLayerInstance*)",
    "insertText": "GetDataLayerInstance(const FName& InDataLayerInstanceName)"
  },
  {
    "label": "GetDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (const UDataLayerInstance*)",
    "insertText": "GetDataLayerInstance(const UDataLayerAsset* InDataLayerAsset)"
  },
  {
    "label": "GetDataLayerInstanceFromAssetName()",
    "kind": "Method",
    "detail": "Function (const UDataLayerInstance*)",
    "insertText": "GetDataLayerInstanceFromAssetName(const FName& InDataLayerAssetPathName)"
  },
  {
    "label": "ForEachDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachDataLayerInstance(TFunctionRef<bool(UDataLayerInstance*)> Func)"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (TArray<const UDataLayerInstance*>)",
    "insertText": "GetDataLayerInstances(const TArray<FName>& InDataLayerInstanceNames)"
  },
  {
    "label": "GetExternalDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (const UExternalDataLayerInstance*)",
    "insertText": "GetExternalDataLayerInstance(const UExternalDataLayerAsset* InExternalDataLayerAsset)"
  },
  {
    "label": "IsExternalDataLayerWorldDataLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalDataLayerWorldDataLayers()"
  },
  {
    "label": "SetDataLayerRuntimeState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDataLayerRuntimeState(const UDataLayerInstance* InDataLayerInstance, EDataLayerRuntimeState InState, bool bIsRecursive = false)"
  },
  {
    "label": "GetDataLayerRuntimeStateByName()",
    "kind": "Method",
    "detail": "Function (EDataLayerRuntimeState)",
    "insertText": "GetDataLayerRuntimeStateByName(FName InDataLayerName)"
  },
  {
    "label": "GetDataLayerEffectiveRuntimeStateByName()",
    "kind": "Method",
    "detail": "Function (EDataLayerRuntimeState)",
    "insertText": "GetDataLayerEffectiveRuntimeStateByName(FName InDataLAyerName)"
  },
  {
    "label": "GetEffectiveActiveDataLayerNames()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetEffectiveActiveDataLayerNames()"
  },
  {
    "label": "GetEffectiveLoadedDataLayerNames()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetEffectiveLoadedDataLayerNames()"
  },
  {
    "label": "GetDataLayersStateEpoch()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDataLayersStateEpoch()"
  },
  {
    "label": "SetDataLayerRuntimeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataLayerRuntimeState(GetDataLayerInstance(InDataLayer.Name), (EDataLayerRuntimeState)InState)"
  },
  {
    "label": "InitializeDataLayerRuntimeStates()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "InitializeDataLayerRuntimeStates()"
  },
  {
    "label": "ResetDataLayerRuntimeStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDataLayerRuntimeStates()"
  },
  {
    "label": "GetEffectiveStates()",
    "kind": "Method",
    "detail": "Function (private : enum class ESetDataLayerRuntimeStateError { NotRuntime,ClientOnlyFromServer,ServerOnlyFromClient,AuthoritativeFromClient } ; const FWorldDataLayersEffectiveStates&)",
    "insertText": "GetEffectiveStates()"
  },
  {
    "label": "AddExternalDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddExternalDataLayerInstance(UExternalDataLayerInstance* ExternalDataLayerInstance)"
  },
  {
    "label": "RemoveExternalDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveExternalDataLayerInstance(UExternalDataLayerInstance* ExternalDataLayerInstance)"
  },
  {
    "label": "InitializeExternalPackageDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "InitializeExternalPackageDataLayerInstances()"
  },
  {
    "label": "OnDataLayerManagerInitialized()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnDataLayerManagerInitialized()"
  },
  {
    "label": "ResolveEffectiveRuntimeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveEffectiveRuntimeState(const UDataLayerInstance* InDataLayer, bool bInNotifyChange = true)"
  },
  {
    "label": "DumpDataLayerRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpDataLayerRecursively(const UDataLayerInstance* DataLayer, FString Prefix, FOutputDevice& OutputDevice)"
  },
  {
    "label": "CanChangeDataLayerRuntimeState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeDataLayerRuntimeState(const UDataLayerInstance* InDataLayerInstance, ESetDataLayerRuntimeStateError* OutReason = nullptr)"
  },
  {
    "label": "GetDataLayerInstances()",
    "kind": "Method",
    "detail": "Function (TSet<TObjectPtr<UDataLayerInstance>>&)",
    "insertText": "GetDataLayerInstances()"
  },
  {
    "label": "GetRootExternalDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (} const UExternalDataLayerInstance*)",
    "insertText": "GetRootExternalDataLayerInstance()"
  },
  {
    "label": "ActorTypeIsMainWorldOnly()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR bool)",
    "insertText": "ActorTypeIsMainWorldOnly()"
  },
  {
    "label": "ConvertDataLayerToInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertDataLayerToInstances()"
  },
  {
    "label": "UpdateContainsDeprecatedDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContainsDeprecatedDataLayers()"
  },
  {
    "label": "ResolveActorDescContainers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveActorDescContainers()"
  },
  {
    "label": "RemoveEditorDataLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEditorDataLayers()"
  },
  {
    "label": "UpdateCurrentColorizedDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentColorizedDataLayerInstance()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (FWorldDataLayersEffectiveStates EffectiveStates ; int32 DataLayersStateEpoch ;)",
    "insertText": "static_assert(DATALAYER_TO_INSTANCE_RUNTIME_CONVERSION_ENABLED, \"bHasDeprecatedDataLayers is deprecated and needs to be deleted.\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bool bHasDeprecatedDataLayers ; class UWorldPartition ; class UDataLayerManager ; class UExternalDataLayerManager ; class UDataLayerEditorSubsystem ; struct FWorldDataLayersEffectiveStatesAccessor ; } ; struct FWorldDataLayersEffectiveStatesAccessor { private : const FWorldDataLayersEffectiveStates&)",
    "insertText": "Get(const AWorldDataLayers* InWorldDataLayers)"
  },
  {
    "label": "DEFINE_ACTORDESC_TYPE()",
    "kind": "Method",
    "detail": "Function (} struct FWorldPartitionStreamingContext ; class UWorldPartitionStreamingPolicy ; class UDataLayerManager ; } ;)",
    "insertText": "DEFINE_ACTORDESC_TYPE(AWorldDataLayers, FWorldDataLayersActorDesc)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR template<T,= int> struct HasDataLayerInstanceClass : std::false_type { } ; template<T> struct HasDataLayerInstanceClass<T,)",
    "insertText": "decltype(&T::GetDataLayerInstanceClass, 0)"
  },
  {
    "label": "CreateDataLayer()",
    "kind": "Method",
    "detail": "Function (} ; template<class DataLayerInstanceType,. . . CreationsArgs> DataLayerInstanceType*)",
    "insertText": "CreateDataLayer(CreationsArgs... InCreationArgs)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (UClass* ClassToUse =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UPackage* ExternalPackage = nullptr ; UObject* OuterObject = this ; FName NewObjectName ;)",
    "insertText": "if(IsUsingExternalPackageDataLayerInstances())"
  },
  {
    "label": "GetLevel()",
    "kind": "Method",
    "detail": "Function (const ULevel* Level =)",
    "insertText": "GetLevel()"
  },
  {
    "label": "bIsTransient()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsTransient(Level->IsInstancedLevel() && !Level->IsPersistentLevel()) || Level->GetPackage()->HasAnyPackageFlags(PKG_PlayInEditor)"
  },
  {
    "label": "NewGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid NewObjectGuid =)",
    "insertText": "NewGuid()"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (FString ShortName =)",
    "insertText": "StaticClass()->GetName() + TEXT(\"_UID_\") + NewObjectGuid.ToString(EGuidFormats::UniqueObjectGuid)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (TStringBuilderWithBuffer<TCHAR,NAME_SIZE> GloballyUniqueObjectPath ; GloballyUniqueObjectPath + = OuterObject ->)",
    "insertText": "GetPathName()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (GloballyUniqueObjectPath + =)",
    "insertText": "TEXT(\".\")"
  },
  {
    "label": "CreateExternalPackage()",
    "kind": "Method",
    "detail": "Function (GloballyUniqueObjectPath + = ShortName ; ExternalPackage =)",
    "insertText": "CreateExternalPackage(OuterObject, *GloballyUniqueObjectPath, FExternalPackageHelper::GetDefaultExternalPackageFlags(), GetRootExternalDataLayerAsset())"
  },
  {
    "label": "MakeName()",
    "kind": "Method",
    "detail": "Function (NewObjectName =* ShortName ; } else { NewObjectName =)",
    "insertText": "MakeName(Forward<CreationsArgs>(InCreationArgs)...)"
  },
  {
    "label": "DataLayerInstanceType()",
    "kind": "Method",
    "detail": "Function (} DataLayerInstanceType* NewDataLayer = NewObject<)",
    "insertText": "DataLayerInstanceType(OuterObject, ClassToUse, NewObjectName, RF_Transactional, nullptr, false, nullptr, ExternalPackage)"
  },
  {
    "label": "OnCreated()",
    "kind": "Method",
    "detail": "Function (NewDataLayer ->)",
    "insertText": "OnCreated(Forward<CreationsArgs>(InCreationArgs)...)"
  },
  {
    "label": "AddDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDataLayerInstance(NewDataLayer)"
  },
  {
    "label": "FlushNetDormancy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushNetDormancy()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ActiveDataLayerNames .)",
    "insertText": "Empty(InActiveDataLayers->Num())"
  },
  {
    "label": "GetDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS const UDataLayerInstance* DataLayerInstance =)",
    "insertText": "GetDataLayerInstance(DataLayerIdentitier)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(DataLayerInstance && DataLayerInstance->IsRuntime())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActiveDataLayerNames .)",
    "insertText": "Add(DataLayerInstance->GetDataLayerFName())"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(AWorldDataLayers, RepActiveDataLayerNames, this)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (RepActiveDataLayerNames = ActiveDataLayerNames .)",
    "insertText": "Array()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InLoadedDataLayers)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (LoadedDataLayerNames .)",
    "insertText": "Empty(InLoadedDataLayers->Num())"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(AWorldDataLayers, RepLoadedDataLayerNames, this)"
  },
  {
    "label": "ForEachDataLayerInstance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForEachDataLayerInstance([this](class UDataLayerInstance* DataLayerInstance) { if (DataLayerInstance->IsRuntime()) { ResolveEffectiveRuntimeState(DataLayerInstance, false); } return true; })"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(AWorldDataLayers, RepEffectiveActiveDataLayerNames, this)"
  },
  {
    "label": "GetReplicatedEffectiveActiveDataLayerNames()",
    "kind": "Method",
    "detail": "Function (RepEffectiveActiveDataLayerNames = EffectiveStates .)",
    "insertText": "GetReplicatedEffectiveActiveDataLayerNames().Array()"
  },
  {
    "label": "MARK_PROPERTY_DIRTY_FROM_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MARK_PROPERTY_DIRTY_FROM_NAME(AWorldDataLayers, RepEffectiveLoadedDataLayerNames, this)"
  },
  {
    "label": "GetReplicatedEffectiveLoadedDataLayerNames()",
    "kind": "Method",
    "detail": "Function (RepEffectiveLoadedDataLayerNames = EffectiveStates .)",
    "insertText": "GetReplicatedEffectiveLoadedDataLayerNames().Array()"
  }
]