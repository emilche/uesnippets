[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FMemoryImageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImageWriter"
  },
  {
    "label": "FMemoryUnfreezeContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryUnfreezeContent"
  },
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FShaderCompilerDefinitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilerDefinitions"
  },
  {
    "label": "FShaderCompileUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileUtilities"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FShaderPreprocessorUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPreprocessorUtilities"
  },
  {
    "label": "FSHA1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHA1"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FGenericShaderStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericShaderStat"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderTarget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FParameterAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterAllocation"
  },
  {
    "label": "FShaderParameterMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParameterMap"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FShaderCompilerFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilerFlags"
  },
  {
    "label": "FShaderBindingLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderBindingLayout"
  },
  {
    "label": "FShaderBindingLayoutContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderBindingLayoutContainer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderResourceTableMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderResourceTableMap"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "FShaderCompileUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileUtilities"
  },
  {
    "label": "FShaderPreprocessorUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPreprocessorUtilities"
  },
  {
    "label": "FSharedShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedShaderCompilerEnvironment"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderCodePackedResourceCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodePackedResourceCounts"
  },
  {
    "label": "FShaderCodeResourceMasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeResourceMasks"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderCodeFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeFeatures"
  },
  {
    "label": "FShaderCodeName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeName"
  },
  {
    "label": "FShaderCodeUniformBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeUniformBuffers"
  },
  {
    "label": "FShaderCodeShaderResourceTableDataDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeShaderResourceTableDataDesc"
  },
  {
    "label": "FShaderCodeVendorExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeVendorExtension"
  },
  {
    "label": "FShaderCodeValidationExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeValidationExtension"
  },
  {
    "label": "FShaderDiagnosticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderDiagnosticData"
  },
  {
    "label": "FShaderDiagnosticExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderDiagnosticExtension"
  },
  {
    "label": "passed",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "passed"
  },
  {
    "label": "FShaderCodeReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCodeReader"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FShaderCode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCode"
  },
  {
    "label": "FShaderCodeResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCodeResource"
  },
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "persisted",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "persisted"
  },
  {
    "label": "FShaderCode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCode"
  },
  {
    "label": "FShaderCode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCode"
  },
  {
    "label": "methods",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "methods"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "const",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "const"
  },
  {
    "label": "FShaderCompilerError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerError"
  },
  {
    "label": "FSHAHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHAHash"
  },
  {
    "label": "FSHAHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHAHash"
  },
  {
    "label": "FShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderType"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FShaderPipelineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineType"
  },
  {
    "label": "FUniformBufferNameSortOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformBufferNameSortOrder"
  },
  {
    "label": "FShaderTypeDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderTypeDependency"
  },
  {
    "label": "FShaderPipelineTypeDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineTypeDependency"
  },
  {
    "label": "FVertexFactoryTypeDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryTypeDependency"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogShaders, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogShaders, Error, All)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_PixelShaderMemory)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_PixelShaderMemory)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_PixelShaderMemory)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_PixelShaderMemory)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_PixelShaderMemory)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_PixelShaderMemory)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_PixelShaderMemory)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_PixelShaderMemory)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GET_STATID(STAT_VertexShaderMemory)"
  },
  {
    "label": "InitializeShaderHashCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeShaderHashCache()"
  },
  {
    "label": "UpdateIncludeDirectoryForPreviewPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIncludeDirectoryForPreviewPlatform(EShaderPlatform PreviewPlatform, EShaderPlatform ActualPlatform)"
  },
  {
    "label": "CheckShaderHashCacheInclude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckShaderHashCacheInclude(const FString& VirtualFilePath, EShaderPlatform ShaderPlatform, const FString& ShaderFormatName)"
  },
  {
    "label": "InitializeShaderTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeShaderTypes()"
  },
  {
    "label": "AllowDebugViewmodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowDebugViewmodes()"
  },
  {
    "label": "AllowDebugViewmodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowDebugViewmodes(EShaderPlatform Platform)"
  },
  {
    "label": "GetShaderCompressionFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetShaderCompressionFormat()"
  },
  {
    "label": "GetShaderCompressionOodleSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderCompressionOodleSettings(FOodleDataCompression::ECompressor& OutCompressor, FOodleDataCompression::ECompressionLevel& OutLevel, const FName& ShaderFormat = NAME_None)"
  },
  {
    "label": "FindAndRemoveParameterAllocation()",
    "kind": "Method",
    "detail": "Function (TOptional<FParameterAllocation>)",
    "insertText": "FindAndRemoveParameterAllocation(FStringView ParameterName)"
  },
  {
    "label": "AddParameterAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParameterAllocation(FStringView ParameterName, uint16 BufferIndex, uint16 BaseIndex, uint16 Size, EShaderParameterType ParameterType)"
  },
  {
    "label": "RemoveParameterAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParameterAllocation(FStringView ParameterName)"
  },
  {
    "label": "SetUniformBufferDeclarationAnsiPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniformBufferDeclarationAnsiPtr(const FShaderParametersMetadata* ShaderParametersMetadata, FThreadSafeSharedAnsiStringPtr UniformBufferDeclarationAnsi)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FShaderResourceTableMap& Other)"
  },
  {
    "label": "FixupOnLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupOnLoad(const TMap<FString, FUniformBufferEntry>& UniformBufferMap)"
  },
  {
    "label": "FShaderCompilerEnvironment()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "FShaderCompilerEnvironment()"
  },
  {
    "label": "FShaderCompilerEnvironment()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "FShaderCompilerEnvironment(FMemoryHasherBlake3& Hasher)"
  },
  {
    "label": "FShaderCompilerEnvironment()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FShaderCompilerEnvironment(const FShaderCompilerDefinitions& InDefinitions)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, const TCHAR* Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, const FString& Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, uint32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, int32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, bool Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, float Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, const TCHAR* Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, const FString& Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, uint32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, int32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, bool Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, float Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, const TCHAR* Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, const FString& Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, uint32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, int32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, bool Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, float Value)"
  },
  {
    "label": "NameKey()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NameKey(Name)"
  },
  {
    "label": "SerializeEverythingButFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeEverythingButFiles(FArchive& Ar)"
  },
  {
    "label": "SerializeCompilationDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCompilationDependencies(FArchive& Ar)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(const FShaderCompilerEnvironment& Other)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (compiler)",
    "insertText": "static_assert(std::has_unique_object_representations_v<FHeader>)"
  },
  {
    "label": "FCompositeBuffer()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FCompositeBuffer(Header, Code)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compress(FName ShaderCompressionFormat, FOodleDataCompression::ECompressor InOodleCompressor, FOodleDataCompression::ECompressionLevel InOodleLevel)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (happened)",
    "insertText": "check(OptionalDataSize >= 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (already)",
    "insertText": "check(OptionalDataSize == -1)"
  },
  {
    "label": "GetShaderSourceFilePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShaderSourceFilePath(const FString& VirtualFilePath, TArray<struct FShaderCompilerError>* CompileErrors = nullptr)"
  },
  {
    "label": "ParseVirtualShaderFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ParseVirtualShaderFilename(const FString& InFilename)"
  },
  {
    "label": "ReplaceVirtualFilePathForShaderPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceVirtualFilePathForShaderPlatform(FString& InOutVirtualFilePath, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ReplaceVirtualFilePathForShaderAutogen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceVirtualFilePathForShaderAutogen(FString& InOutVirtualFilePath, EShaderPlatform ShaderPlatform, const FName* InShaderPlatformName = nullptr)"
  },
  {
    "label": "LoadShaderSourceFileChecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadShaderSourceFileChecked(const TCHAR* VirtualFilePath, EShaderPlatform ShaderPlatform, FString& OutFileContents, const FName* ShaderPlatformName = nullptr)"
  },
  {
    "label": "GetShaderIncludes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderIncludes(const TCHAR* EntryPointVirtualFilePath, const TCHAR* VirtualFilePath, TArray<FString>& IncludeVirtualFilePaths, EShaderPlatform ShaderPlatform, uint32 DepthLimit=100, const FName* ShaderPlatformName = nullptr)"
  },
  {
    "label": "GetShaderIncludes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderIncludes(const TCHAR* EntryPointVirtualFilePath, const TCHAR* VirtualFilePath, const FString& FileContents, TArray<FString>& IncludeVirtualFilePaths, EShaderPlatform ShaderPlatform, uint32 DepthLimit = 100, const FName* ShaderPlatformName = nullptr)"
  },
  {
    "label": "HashShaderFileWithIncludes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashShaderFileWithIncludes(FArchive& HashingArchive, const TCHAR* VirtualFilePath, const FString& FileContents, EShaderPlatform ShaderPlatform, bool bOnlyHashIncludedFiles)"
  },
  {
    "label": "FlushShaderFileCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushShaderFileCache()"
  },
  {
    "label": "VerifyShaderSourceFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyShaderSourceFiles(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "UpdateReferencedUniformBufferNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReferencedUniformBufferNames(\n\tTArrayView<const FShaderType*> OutdatedShaderTypes,\n\tTArrayView<const FVertexFactoryType*> OutdatedFactoryTypes,\n\tTArrayView<const FShaderPipelineType*> OutdatedShaderPipelineTypes)"
  },
  {
    "label": "GenerateReferencedUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateReferencedUniformBuffers(\n\tconst TCHAR* SourceFilename,\n\tconst TCHAR* ShaderTypeName,\n\tconst TMap<FString, TArray<const TCHAR*> >& ShaderFileToUniformBufferVariables,\n\tTSet<const FShaderParametersMetadata*>& UniformBuffers)"
  },
  {
    "label": "GetShaderTypeLayoutHash()",
    "kind": "Method",
    "detail": "Function (FSHAHash)",
    "insertText": "GetShaderTypeLayoutHash(const FTypeLayoutDesc& TypeDesc, FPlatformTypeLayoutParameters LayoutParameters)"
  },
  {
    "label": "AppendKeyStringShaderDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendKeyStringShaderDependencies(\n\tTConstArrayView<FShaderTypeDependency> ShaderTypeDependencies,\n\tFPlatformTypeLayoutParameters LayoutParams,\n\tFString& OutKeyString,\n\tbool bIncludeSourceHashes = true)"
  },
  {
    "label": "AppendKeyStringShaderDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendKeyStringShaderDependencies(\n\tTConstArrayView<FShaderTypeDependency> ShaderTypeDependencies,\n\tTConstArrayView<FShaderPipelineTypeDependency> ShaderPipelineTypeDependencies,\n\tTConstArrayView<FVertexFactoryTypeDependency> VertexFactoryTypeDependencies,\n\tFPlatformTypeLayoutParameters LayoutParams,\n\tFString& OutKeyString,\n\tbool bIncludeSourceHashes = true)"
  },
  {
    "label": "AppendShaderDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendShaderDependencies(\n\tFShaderKeyGenerator& KeyGen,\n\tTConstArrayView<FShaderTypeDependency> ShaderTypeDependencies,\n\tTConstArrayView<FShaderPipelineTypeDependency> ShaderPipelineTypeDependencies,\n\tTConstArrayView<FVertexFactoryTypeDependency> VertexFactoryTypeDependencies,\n\tFPlatformTypeLayoutParameters LayoutParams,\n\tbool bIncludeSourceHashes = true)"
  },
  {
    "label": "MakeInjectedShaderCodeBlock()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "MakeInjectedShaderCodeBlock(const TCHAR* BlockName, const FString& CodeToInject)"
  },
  {
    "label": "ResetAllShaderSourceDirectoryMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllShaderSourceDirectoryMappings()"
  },
  {
    "label": "AddShaderSourceDirectoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShaderSourceDirectoryMapping(const FString& VirtualShaderDirectory, const FString& RealShaderDirectory)"
  },
  {
    "label": "AddShaderSourceSharedVirtualDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShaderSourceSharedVirtualDirectory(const FString& VirtualShaderDirectory)"
  },
  {
    "label": "AddShaderSourceFileEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShaderSourceFileEntry(TArray<FString>& OutVirtualFilePaths, FString VirtualFilePath, EShaderPlatform ShaderPlatform, const FName* ShaderPlatformName = nullptr)"
  },
  {
    "label": "GetAllVirtualShaderSourcePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllVirtualShaderSourcePaths(TArray<FString>& OutVirtualFilePaths, EShaderPlatform ShaderPlatform, const FName* ShaderPlatformName = nullptr)"
  }
]