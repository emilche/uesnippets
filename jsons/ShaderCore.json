[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FMemoryImageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryImageWriter"
  },
  {
    "label": "FMemoryUnfreezeContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryUnfreezeContent"
  },
  {
    "label": "FPointerTableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointerTableBase"
  },
  {
    "label": "FShaderCompilerDefinitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilerDefinitions"
  },
  {
    "label": "FShaderCompileUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileUtilities"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FShaderPreprocessorUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPreprocessorUtilities"
  },
  {
    "label": "FSHA1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHA1"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FGenericShaderStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericShaderStat"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderTarget"
  },
  {
    "label": "FParameterAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParameterAllocation"
  },
  {
    "label": "FShaderParameterMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderParameterMap"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FShaderCompilerFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilerFlags"
  },
  {
    "label": "FShaderBindingLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderBindingLayout"
  },
  {
    "label": "FShaderBindingLayoutContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderBindingLayoutContainer"
  },
  {
    "label": "FShaderResourceTableMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderResourceTableMap"
  },
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "FSharedShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedShaderCompilerEnvironment"
  },
  {
    "label": "FShaderCodePackedResourceCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodePackedResourceCounts"
  },
  {
    "label": "FShaderCodeResourceMasks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeResourceMasks"
  },
  {
    "label": "FShaderCodeFeatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeFeatures"
  },
  {
    "label": "FShaderCodeName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeName"
  },
  {
    "label": "FShaderCodeUniformBuffers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeUniformBuffers"
  },
  {
    "label": "FShaderCodeShaderResourceTableDataDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeShaderResourceTableDataDesc"
  },
  {
    "label": "FShaderCodeVendorExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeVendorExtension"
  },
  {
    "label": "FShaderCodeValidationExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCodeValidationExtension"
  },
  {
    "label": "FShaderDiagnosticData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderDiagnosticData"
  },
  {
    "label": "FShaderDiagnosticExtension",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderDiagnosticExtension"
  },
  {
    "label": "FShaderCodeReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCodeReader"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FShaderCode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCode"
  },
  {
    "label": "FShaderCodeResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCodeResource"
  },
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "FShaderCompilerError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerError"
  },
  {
    "label": "FSHAHash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSHAHash"
  },
  {
    "label": "FShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderType"
  },
  {
    "label": "FShaderPipelineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineType"
  },
  {
    "label": "FUniformBufferNameSortOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniformBufferNameSortOrder"
  },
  {
    "label": "FShaderTypeDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderTypeDependency"
  },
  {
    "label": "FShaderPipelineTypeDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineTypeDependency"
  },
  {
    "label": "FVertexFactoryTypeDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryTypeDependency"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / OodleDataCompression . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / UnrealMemory . h \" # include \" Logging / LogMacros . h \" # include \" Memory / CompositeBuffer . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" Misc / CoreStats . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Optional . h \" # include \" Misc / Paths . h \" # include \" Misc / SecureHash . h \" # include \" Misc / TVariant . h \" # include \" PixelFormat . h \" # include \" RHIDefinitions . h \" # include \" RHIShaderBindingLayout . h \" # include \" Serialization / Archive . h \" # include \" Serialization / MemoryLayout . h \" # include \" ShaderParameterMetadata . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Function . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / RefCounting . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" # include \" UniformBuffer . h \" # include \" ShaderCompilerDefinitions . h \" class Error ; class FMemoryImageWriter ; class FMemoryUnfreezeContent ; class FPointerTableBase ; class FShaderCompilerDefinitions ; class FShaderCompileUtilities ; class FShaderKeyGenerator ; class FShaderPreprocessorUtilities ; class FSHA1 ; class ITargetPlatform ; using FShaderStatVariant = TVariant<bool,float,int32,uint32,FString> ; bool)",
    "insertText": "operator(const FShaderStatVariant LHS, const FShaderStatVariant RHS)"
  },
  {
    "label": "FGenericShaderStat()",
    "kind": "Method",
    "detail": "Function (struct FGenericShaderStat { public : enum class EFlags : uint8 { None = 0,Hidden = 1<<0,} ; FName StatName ; FShaderStatVariant Value ; EFlags Flags = EFlags::None ;)",
    "insertText": "FGenericShaderStat()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FGenericShaderStat& Stat)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FGenericShaderStat& RHS)"
  },
  {
    "label": "CSV_DECLARE_CATEGORY_MODULE_EXTERN()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "CSV_DECLARE_CATEGORY_MODULE_EXTERN(RENDERCORE_API, Shaders)"
  },
  {
    "label": "UE_BUILD_DEBUG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "UE_BUILD_DEBUG(PLATFORM_UNIX) RENDERCORE_API DECLARE_LOG_CATEGORY_EXTERN(LogShaders, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogShaders, Error, All)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Total Niagara Shaders\"), STAT_ShaderCompiling_NumTotalNiagaraShaders, STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Total Niagara Shader Compiling Time\"), STAT_ShaderCompiling_NiagaraShaders, STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Total OpenColorIO Shaders\"), STAT_ShaderCompiling_NumTotalOpenColorIOShaders, STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Total OpenColorIO Shader Compiling Time\"), STAT_ShaderCompiling_OpenColorIOShaders, STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Total Material Shader Compiling Time\"),STAT_ShaderCompiling_MaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Total Global Shader Compiling Time\"),STAT_ShaderCompiling_GlobalShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"RHI Compile Time\"),STAT_ShaderCompiling_RHI,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Loading Shader Files\"),STAT_ShaderCompiling_LoadingShaderFiles,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"CRCing Shader Files\"),STAT_ShaderCompiling_HashingShaderFiles,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"HLSL Translation\"), STAT_ShaderCompiling_HLSLTranslation, STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"DDC Loading\"),STAT_ShaderCompiling_DDCLoading,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Material Loading\"),STAT_ShaderCompiling_MaterialLoading,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_FLOAT_ACCUMULATOR_STAT_EXTERN(TEXT(\"Material Compiling\"),STAT_ShaderCompiling_MaterialCompiling,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Total Material Shaders\"),STAT_ShaderCompiling_NumTotalMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Special Material Shaders\"),STAT_ShaderCompiling_NumSpecialMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Particle Material Shaders\"),STAT_ShaderCompiling_NumParticleMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Skinned Material Shaders\"),STAT_ShaderCompiling_NumSkinnedMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Lit Material Shaders\"),STAT_ShaderCompiling_NumLitMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Unlit Material Shaders\"),STAT_ShaderCompiling_NumUnlitMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Transparent Material Shaders\"),STAT_ShaderCompiling_NumTransparentMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Opaque Material Shaders\"),STAT_ShaderCompiling_NumOpaqueMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Masked Material Shaders\"),STAT_ShaderCompiling_NumMaskedMaterialShaders,STATGROUP_ShaderCompiling, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Shaders Loaded\"),STAT_Shaders_NumShadersLoaded,STATGROUP_Shaders, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num Shaders Created\"), STAT_Shaders_NumShadersCreated, STATGROUP_Shaders, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num ShaderMaps Loaded\"), STAT_Shaders_NumShaderMaps,STATGROUP_Shaders, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"Num ShaderMaps Used\"), STAT_Shaders_NumShaderMapsUsedForRendering, STATGROUP_Shaders, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"RT Shader Load Time\"),STAT_Shaders_RTShaderLoadTime,STATGROUP_Shaders, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Shader Memory\"),STAT_Shaders_ShaderMemory,STATGROUP_Shaders, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Shader Resource Mem\"),STAT_Shaders_ShaderResourceMemory,STATGROUP_Shaders, RENDERCORE_API)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"Shader Preload Mem\"), STAT_Shaders_ShaderPreloadMemory, STATGROUP_Shaders, RENDERCORE_API)"
  },
  {
    "label": "GetMemoryStatType()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetMemoryStatType(EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "GET_STATID()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GET_STATID(STAT_VertexShaderMemory)"
  },
  {
    "label": "InitializeShaderHashCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeShaderHashCache()"
  },
  {
    "label": "UpdateIncludeDirectoryForPreviewPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIncludeDirectoryForPreviewPlatform(EShaderPlatform PreviewPlatform, EShaderPlatform ActualPlatform)"
  },
  {
    "label": "CheckShaderHashCacheInclude()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckShaderHashCacheInclude(const FString& VirtualFilePath, EShaderPlatform ShaderPlatform, const FString& ShaderFormatName)"
  },
  {
    "label": "InitializeShaderTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeShaderTypes()"
  },
  {
    "label": "AllowDebugViewmodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowDebugViewmodes()"
  },
  {
    "label": "AllowDebugViewmodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowDebugViewmodes(EShaderPlatform Platform)"
  },
  {
    "label": "GetShaderCompressionFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetShaderCompressionFormat()"
  },
  {
    "label": "GetShaderCompressionOodleSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderCompressionOodleSettings(FOodleDataCompression::ECompressor& OutCompressor, FOodleDataCompression::ECompressionLevel& OutLevel, const FName& ShaderFormat = NAME_None)"
  },
  {
    "label": "FShaderTarget()",
    "kind": "Method",
    "detail": "Function (struct FShaderTarget { union { uint32 Packed ; struct { uint32 Frequency : SF_NumBits ; uint32 Platform : SP_NumBits ; } ; } ;)",
    "insertText": "FShaderTarget() : Packed(0)"
  },
  {
    "label": "FShaderTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderTarget(EShaderFrequency InFrequency,EShaderPlatform InPlatform) : Packed(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Frequency = InFrequency ; Platform = InPlatform ; } bool)",
    "insertText": "operator(const FShaderTarget& X, const FShaderTarget& Y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 TargetFrequency = Target . Frequency ; uint32 TargetPlatform = Target . Platform ; Ar<<TargetFrequency<<TargetPlatform ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "GetPlatform()",
    "kind": "Method",
    "detail": "Function (Target . Packed = 0 ; Target . Frequency = TargetFrequency ; Target . Platform = TargetPlatform ; } return Ar ; } EShaderPlatform)",
    "insertText": "GetPlatform()"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (} EShaderFrequency)",
    "insertText": "GetFrequency()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(FShaderTarget Target)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(FShaderTarget)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (enum class EShaderParameterType : uint8 { LooseData,UniformBuffer,Sampler,SRV,UAV,BindlessSampler,BindlessSRV,BindlessUAV,Num } ; enum class EShaderParameterTypeMask : uint16 { LooseDataMask = 1<<)",
    "insertText": "uint16(EShaderParameterType::LooseData), UniformBufferMask = 1 << uint16(EShaderParameterType::UniformBuffer), SamplerMask = 1 << uint16(EShaderParameterType::Sampler), SRVMask = 1 << uint16(EShaderParameterType::SRV), UAVMask = 1 << uint16(EShaderParameterType::UAV), BindlessSamplerMask = 1 << uint16(EShaderParameterType::BindlessSampler), BindlessSRVMask = 1 << uint16(EShaderParameterType::BindlessSRV), BindlessUAVMask = 1 << uint16(EShaderParameterType::BindlessUAV)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EShaderParameterTypeMask)"
  },
  {
    "label": "IsParameterBindless()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParameterBindless(EShaderParameterType ParameterType)"
  },
  {
    "label": "FParameterAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FParameterAllocation(uint16 InBufferIndex, uint16 InBaseIndex, uint16 InSize, EShaderParameterType InType) : BufferIndex(InBufferIndex) , BaseIndex(InBaseIndex) , Size(InSize) , Type(InType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FParameterAllocation& Allocation)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Allocation . BufferIndex<<Allocation . BaseIndex<<Allocation . Size<<Allocation . bBound ; Ar<<Allocation . Type ; return Ar ; } bool)",
    "insertText": "operator(const FParameterAllocation& A, const FParameterAllocation& B)"
  },
  {
    "label": "FShaderParameterMap()",
    "kind": "Method",
    "detail": "Function (} } ; class FShaderParameterMap { public :)",
    "insertText": "FShaderParameterMap()"
  },
  {
    "label": "FindParameterAllocation()",
    "kind": "Method",
    "detail": "Function (} TOptional<FParameterAllocation>)",
    "insertText": "FindParameterAllocation(FStringView ParameterName)"
  },
  {
    "label": "FindAndRemoveParameterAllocation()",
    "kind": "Method",
    "detail": "Function (TOptional<FParameterAllocation>)",
    "insertText": "FindAndRemoveParameterAllocation(FStringView ParameterName)"
  },
  {
    "label": "FindParameterAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindParameterAllocation(FStringView ParameterName, uint16& OutBufferIndex, uint16& OutBaseIndex, uint16& OutSize)"
  },
  {
    "label": "ContainsParameterAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsParameterAllocation(FStringView ParameterName)"
  },
  {
    "label": "AddParameterAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParameterAllocation(FStringView ParameterName, uint16 BufferIndex, uint16 BaseIndex, uint16 Size, EShaderParameterType ParameterType)"
  },
  {
    "label": "RemoveParameterAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParameterAllocation(FStringView ParameterName)"
  },
  {
    "label": "GetAllParameterNamesOfType()",
    "kind": "Method",
    "detail": "Function (TArray<FStringView>)",
    "insertText": "GetAllParameterNamesOfType(EShaderParameterType InType)"
  },
  {
    "label": "CountParametersOfType()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CountParametersOfType(EShaderParameterType InType)"
  },
  {
    "label": "VerifyBindingsAreComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyBindingsAreComplete(const TCHAR* ShaderTypeName, FShaderTarget Target, const class FVertexFactoryType* InVertexFactoryType)"
  },
  {
    "label": "UpdateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHash(FSHA1& HashState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FShaderParameterMap& InParameterMap)"
  },
  {
    "label": "GetAllParameterNames()",
    "kind": "Method",
    "detail": "Function (Ar<<InParameterMap . ParameterMap ; return Ar ; } void)",
    "insertText": "GetAllParameterNames(TArray<FString>& OutNames)"
  },
  {
    "label": "GenerateKeyArray()",
    "kind": "Method",
    "detail": "Function (ParameterMap .)",
    "insertText": "GenerateKeyArray(OutNames)"
  },
  {
    "label": "GetParameterMap()",
    "kind": "Method",
    "detail": "Function (} const TMap<FString,FParameterAllocation>&)",
    "insertText": "GetParameterMap()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Entry . UniformBufferMemberName = nullptr ; } Ar<<Entry . UniformBufferNameLength ; Ar<<Entry . Type ; Ar<<Entry . ResourceIndex ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FUniformBufferEntry& Entry)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (Entry . MemberNameBuffer =)",
    "insertText": "MakeShareable(new TArray<TCHAR>())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} Ar<<* Entry . MemberNameBuffer .)",
    "insertText": "Get()"
  },
  {
    "label": "FShaderCompilerFlags()",
    "kind": "Method",
    "detail": "Function (Ar<<Entry . LayoutHash ; Ar<<Entry . BindingFlags ; Ar<<Entry . Flags ; return Ar ; } using FThreadSafeSharedStringPtr = TSharedPtr<FString,ESPMode::ThreadSafe> ; using FThreadSafeNameBufferPtr = TSharedPtr<TArray<TCHAR>,ESPMode::ThreadSafe> ; class FShaderCompilerFlags { public :)",
    "insertText": "FShaderCompilerFlags(uint64 InData = 0) : Data(InData)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(const FShaderCompilerFlags& In)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Data | = In . Data ; } void)",
    "insertText": "Add(uint32 InFlag)"
  },
  {
    "label": "FlagBit()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "FlagBit(uint64)1 << (uint64)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Data = Data | FlagBit ; } void)",
    "insertText": "Remove(uint32 InFlag)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (Data = Data& ~ FlagBit ; } bool)",
    "insertText": "Contains(uint32 InFlag)"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Iterate(TFunction<void(uint32)> Callback)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint64 Remaining = Data ; uint32 Index = 0 ;)",
    "insertText": "while(Remaining)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(Index)"
  },
  {
    "label": "Remaining()",
    "kind": "Method",
    "detail": "Function (} + + Index ; Remaining =)",
    "insertText": "Remaining(uint64)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCompilerFlags& F)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (Ar<<F . Data ; return Ar ; } uint64)",
    "insertText": "GetData()"
  },
  {
    "label": "SetUniformBufferDeclarationAnsiPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniformBufferDeclarationAnsiPtr(const FShaderParametersMetadata* ShaderParametersMetadata, FThreadSafeSharedAnsiStringPtr UniformBufferDeclarationAnsi)"
  },
  {
    "label": "AddRequiredSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequiredSymbols(TArray<FString>& RequiredSymbols)"
  },
  {
    "label": "GetLayout()",
    "kind": "Method",
    "detail": "Function (protected : TMap<FString,FThreadSafeSharedAnsiStringPtr> UniformBufferMap ; # endif } ; class FShaderBindingLayoutContainer { public : enum class EBindingType : uint8 { Bindless,NotBindless,Num } ; const FShaderBindingLayout&)",
    "insertText": "GetLayout(EBindingType BindingType)"
  },
  {
    "label": "SetLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLayout(EBindingType BindingType, const FShaderBindingLayout& InLayout)"
  },
  {
    "label": "Layouts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Layouts(uint8)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} ; struct FShaderResourceTableMap { TArray<FUniformResourceEntry> Resources ; void)",
    "insertText": "Append(const FShaderResourceTableMap& Other)"
  },
  {
    "label": "FixupOnLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupOnLoad(const TMap<FString, FUniformBufferEntry>& UniformBufferMap)"
  },
  {
    "label": "FShaderCompilerEnvironment()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerFlags CompilerFlags ; TMap<uint32,uint8> RenderTargetOutputFormatsMap ; FShaderResourceTableMap ResourceTableMap ; TMap<FString,FUniformBufferEntry> UniformBufferMap ; const FShaderBindingLayout* ShaderBindingLayout = nullptr ; FRHIShaderBindingLayout RHIShaderBindingLayout ; const ITargetPlatform* TargetPlatform = nullptr ; bool FullPrecisionInPS = 0 ;)",
    "insertText": "FShaderCompilerEnvironment()"
  },
  {
    "label": "FShaderCompilerEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCompilerEnvironment(FMemoryHasherBlake3& Hasher)"
  },
  {
    "label": "FShaderCompilerEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCompilerEnvironment(const FShaderCompilerEnvironment&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerEnvironment&)",
    "insertText": "operator(const FShaderCompilerEnvironment&)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "SetDefine(const TCHAR* Name, const TCHAR* Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, const FString& Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, uint32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, int32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, bool Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(const TCHAR* Name, float Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, const TCHAR* Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, const FString& Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, uint32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, int32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, bool Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FName Name, float Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, const TCHAR* Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, const FString& Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, uint32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, int32 Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, bool Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(FShaderCompilerDefineNameCache& Name, float Value)"
  },
  {
    "label": "SetDefineIfUnset()",
    "kind": "Method",
    "detail": "Function (template<ValueType> void)",
    "insertText": "SetDefineIfUnset(const TCHAR* Name, ValueType Value)"
  },
  {
    "label": "NameKey()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NameKey(Name)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(!ContainsDefinition(NameKey))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(NameKey, Value)"
  },
  {
    "label": "SetCompileArgument()",
    "kind": "Method",
    "detail": "Function (} } template<ValueType> void)",
    "insertText": "SetCompileArgument(const TCHAR* Name, ValueType Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CompileArgs .)",
    "insertText": "Add(Name, TVariant<bool, float, int32, uint32, FString>(TInPlaceType<ValueType>(), Value))"
  },
  {
    "label": "SetCompileArgument()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCompileArgument(const TCHAR* Name, TVariant<bool, float, int32, uint32, FString> Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CompileArgs .)",
    "insertText": "Add(Name, MoveTempIfPossible(Value))"
  },
  {
    "label": "SetDefineAndCompileArgument()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> void)",
    "insertText": "SetDefineAndCompileArgument(const TCHAR* Name, ValueType Value)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefine(Name, Value)"
  },
  {
    "label": "SetCompileArgument()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompileArgument(Name, Value)"
  },
  {
    "label": "HasCompileArgument()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCompileArgument(const TCHAR* Name)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const TVariant<bool,float,int32,uint32,FString>* StoredValue = CompileArgs .)",
    "insertText": "Find(Name)"
  },
  {
    "label": "GetCompileArgument()",
    "kind": "Method",
    "detail": "Function (} return DefaultValue ; } template<ValueType> bool)",
    "insertText": "GetCompileArgument(const TCHAR* Name, ValueType& OutValue)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (OutValue = StoredValue -> Get<)",
    "insertText": "ValueType()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RenderTargetOutputFormatsMap .)",
    "insertText": "Add(RenderTargetIndex, UE_PIXELFORMAT_TO_UINT8(PixelFormat))"
  },
  {
    "label": "SerializeEverythingButFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeEverythingButFiles(FArchive& Ar)"
  },
  {
    "label": "SerializeCompilationDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCompilationDependencies(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "SerializeEverythingButFiles()",
    "kind": "Method",
    "detail": "Function (Ar<<Environment . IncludeVirtualPathToContentsMap ; Environment .)",
    "insertText": "SerializeEverythingButFiles(Ar)"
  },
  {
    "label": "GetDefinitionsAsCommentedCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDefinitionsAsCommentedCode()"
  },
  {
    "label": "SET_SHADER_DEFINE()",
    "kind": "Method",
    "detail": "Function (private : class FShaderCompileUtilities ; class FShaderPreprocessorUtilities ; PRAGMA_DISABLE_DEPRECATION_WARNINGS TPimplPtr<FShaderCompilerDefinitions,EPimplPtrMode::DeepCopy> Definitions ; PRAGMA_ENABLE_DEPRECATION_WARNINGS FMemoryHasherBlake3* Hasher = nullptr ; TMap<FString,TVariant<bool,float,int32,uint32,FString>> CompileArgs ; TMap<FString,FString> UnusedStringDefinitions ; } ; # define)",
    "insertText": "SET_SHADER_DEFINE(ENVIRONMENT, NAME, VALUE)"
  },
  {
    "label": "NAME()",
    "kind": "Method",
    "detail": "Function (\\ FShaderCompilerDefineNameCache Cache_ # #)",
    "insertText": "NAME(TEXT(#NAME))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define SET_SHADER_DEFINE_AND_COMPILE_ARGUMENT(ENVIRONMENT, NAME, VALUE)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0)"
  },
  {
    "label": "FSharedShaderCompilerEnvironment()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSharedShaderCompilerEnvironment()"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} ; enum class EShaderOptionalDataKey : uint8 { AttributeInputs =)",
    "insertText": "uint8('i'), AttributeOutputs = uint8('o'), CompressedDebugCode = uint8('z'), Diagnostic = uint8('D'), Features = uint8('x'), Name = uint8('n'), NativePath = uint8('P'), ObjectFile = uint8('O'), PackedResourceCounts = uint8('p'), ResourceMasks = uint8('m'), ShaderModel6 = uint8('6'), SourceCode = uint8('c'), UncompressedSize = uint8('U'), UniformBuffers = uint8('u'), Validation = uint8('V'), VendorExtension = uint8('v'), ShaderBindingLayout = uint8('s')"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EShaderResourceUsageFlags : uint8 { GlobalUniformBuffer = 1<<0,BindlessResources = 1<<1,BindlessSamplers = 1<<2,RootConstants = 1<<3,NoDerivativeOps = 1<<4,ShaderBundle = 1<<5,DiagnosticBuffer = 1<<6,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EShaderResourceUsageFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EShaderCodeFeatures)"
  },
  {
    "label": "FShaderCodeVendorExtension()",
    "kind": "Method",
    "detail": "Function (struct FShaderCodeFeatures { const EShaderOptionalDataKey Key = EShaderOptionalDataKey::Features ; EShaderCodeFeatures CodeFeatures = EShaderCodeFeatures::None ; } ; struct FShaderCodeName { const EShaderOptionalDataKey Key = EShaderOptionalDataKey::Name ; } ; struct FShaderCodeUniformBuffers { const EShaderOptionalDataKey Key = EShaderOptionalDataKey::UniformBuffers ; } ; struct FShaderCodeShaderResourceTableDataDesc { const EShaderOptionalDataKey Key = EShaderOptionalDataKey::ShaderBindingLayout ; } ; struct FShaderCodeVendorExtension { const EShaderOptionalDataKey Key = EShaderOptionalDataKey::VendorExtension ; EGpuVendorId VendorId = EGpuVendorId::NotQueried ; FParameterAllocation Parameter ;)",
    "insertText": "FShaderCodeVendorExtension()"
  },
  {
    "label": "FShaderCodeVendorExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCodeVendorExtension(EGpuVendorId InVendorId, uint16 InBufferIndex, uint16 InBaseIndex, uint16 InSize, EShaderParameterType InType) : VendorId(InVendorId) , Parameter(InBufferIndex, InBaseIndex, InSize, InType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCodeVendorExtension& Extension)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCodeValidationStride& ShaderCodeValidationStride)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Extension . Version ; Ar<<Extension . ShaderCodeValidationStride ; Ar<<Extension . ShaderCodeValidationSRVType ; Ar<<Extension . ShaderCodeValidationUAVType ; Ar<<Extension . ShaderCodeValidationUBSize ; return Ar ; } } ; struct FShaderDiagnosticData { uint32 Hash ; FString Message ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderDiagnosticData& ShaderCodeDiagnosticData)"
  },
  {
    "label": "FShaderCodeReader()",
    "kind": "Method",
    "detail": "Function (Ar<<Extension . Version ; Ar<<Extension . ShaderDiagnosticDatas ; return Ar ; } } ; # ifndef RENDERCORE_ATTRIBUTE_UNALIGNED # define RENDERCORE_ATTRIBUTE_UNALIGNED # endif typedef int32 RENDERCORE_ATTRIBUTE_UNALIGNED unaligned_int32 ; typedef uint32 RENDERCORE_ATTRIBUTE_UNALIGNED unaligned_uint32 ; class FShaderCodeReader { TConstArrayView<uint8> ShaderCode ; public :)",
    "insertText": "FShaderCodeReader(TConstArrayView<uint8> InShaderCode) : ShaderCode(InShaderCode)"
  },
  {
    "label": "GetActualShaderCodeSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetActualShaderCodeSize()"
  },
  {
    "label": "GetOffsetShaderCode()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<uint8>)",
    "insertText": "GetOffsetShaderCode(int32 Offset)"
  },
  {
    "label": "FindOptionalData()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T*)",
    "insertText": "FindOptionalData()"
  },
  {
    "label": "FindOptionalData()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "FindOptionalData(EShaderOptionalDataKey InKey, uint8 ValueSize)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const uint8* End =& ShaderCode [ 0 ] + ShaderCode .)",
    "insertText": "Num()"
  },
  {
    "label": "GetOptionalDataSize()",
    "kind": "Method",
    "detail": "Function (int32 LocalOptionalDataSize =)",
    "insertText": "GetOptionalDataSize()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint8* Start = End - LocalOptionalDataSize ; End = End -)",
    "insertText": "sizeof(LocalOptionalDataSize)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const uint8* Current = Start ;)",
    "insertText": "while(Current < End)"
  },
  {
    "label": "EShaderOptionalDataKey()",
    "kind": "Method",
    "detail": "Function (EShaderOptionalDataKey Key =)",
    "insertText": "EShaderOptionalDataKey(*Current++)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Size((const unaligned_uint32*)Current)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (Current + =)",
    "insertText": "sizeof(Size)"
  },
  {
    "label": "FindOptionalDataAndSize()",
    "kind": "Method",
    "detail": "Function (} Current + = Size ; } return 0 ; } const uint8*)",
    "insertText": "FindOptionalDataAndSize(EShaderOptionalDataKey InKey, int32& OutSize)"
  },
  {
    "label": "LocalOptionalDataSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LocalOptionalDataSize((const unaligned_int32*)End)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; class FShaderCode ; class FShaderCodeResource { struct FHeader { int32 UncompressedSize = 0 ; int32 ShaderCodeSize = 0 ; EShaderFrequency Frequency = EShaderFrequency::SF_NumFrequencies ; uint8 _Pad0 = 0 ; uint16 _Pad1 = 0 ; } ;)",
    "insertText": "static_assert(std::has_unique_object_representations_v<FHeader>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSharedBuffer Header ; FSharedBuffer Code ; class FShaderCode ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCode& Code)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCodeResource& Resource)"
  },
  {
    "label": "GetCodeView()",
    "kind": "Method",
    "detail": "Function (public : TConstArrayView<uint8>)",
    "insertText": "GetCodeView()"
  },
  {
    "label": "GetCodeBuffer()",
    "kind": "Method",
    "detail": "Function (} FSharedBuffer)",
    "insertText": "GetCodeBuffer()"
  },
  {
    "label": "Unpack()",
    "kind": "Method",
    "detail": "Function (} FCompositeBuffer)",
    "insertText": "Unpack(FSharedBuffer MonolithicBuffer)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (FMemoryView FullBufferView = MonolithicBuffer .)",
    "insertText": "GetView()"
  },
  {
    "label": "PopulateFromComposite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateFromComposite(FCompositeBuffer CacheBuffer)"
  },
  {
    "label": "GetSegments()",
    "kind": "Method",
    "detail": "Function (Header = CacheBuffer .)",
    "insertText": "GetSegments()"
  },
  {
    "label": "PopulateHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateHeader(int32 UncompressedSize, int32 ShaderCodeSize, EShaderFrequency Frequency)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (FHeader HeaderData { UncompressedSize,ShaderCodeSize,Frequency } ; Header =)",
    "insertText": "Clone(&HeaderData, sizeof(HeaderData))"
  },
  {
    "label": "GetUncompressedSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetUncompressedSize()"
  },
  {
    "label": "GetShaderCodeSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetShaderCodeSize()"
  },
  {
    "label": "FShaderCode()",
    "kind": "Method",
    "detail": "Function (} } ; class FShaderCode { int32 OptionalDataSize ; TArray<uint8> ShaderCodeWithOptionalData ; FShaderCodeResource ShaderCodeResource ; int32 UncompressedSize ; FName CompressionFormat ; FOodleDataCompression::ECompressor OodleCompressor ; FOodleDataCompression::ECompressionLevel OodleLevel ; int32 ShaderCodeSize ; public :)",
    "insertText": "FShaderCode() : OptionalDataSize(0) , UncompressedSize(0) , CompressionFormat(NAME_None) , OodleCompressor(FOodleDataCompression::ECompressor::NotSet) , OodleLevel(FOodleDataCompression::ECompressionLevel::None) , ShaderCodeSize(0)"
  },
  {
    "label": "FinalizeShaderCode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinalizeShaderCode()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (OptionalDataSize + =)",
    "insertText": "sizeof(OptionalDataSize)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ShaderCodeWithOptionalData .)",
    "insertText": "Append((const uint8*)&OptionalDataSize, sizeof(OptionalDataSize))"
  },
  {
    "label": "MakeSharedBufferFromArray()",
    "kind": "Method",
    "detail": "Function (OptionalDataSize = - 1 ; ShaderCodeResource . Code =)",
    "insertText": "MakeSharedBufferFromArray(MoveTemp(ShaderCodeWithOptionalData))"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Compress(FName ShaderCompressionFormat, FOodleDataCompression::ECompressor InOodleCompressor, FOodleDataCompression::ECompressionLevel InOodleLevel)"
  },
  {
    "label": "GetWriteAccess()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>&)",
    "insertText": "GetWriteAccess()"
  },
  {
    "label": "Wrapper()",
    "kind": "Method",
    "detail": "Function (} else { FShaderCodeReader)",
    "insertText": "Wrapper(ShaderCodeResource.GetCodeView())"
  },
  {
    "label": "GetReadView()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Dummy ; return Dummy ; } TConstArrayView<uint8>)",
    "insertText": "GetReadView()"
  },
  {
    "label": "IsCompressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCompressed()"
  },
  {
    "label": "AddOptionalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOptionalData(T::Key, (uint8*)&In, sizeof(T))"
  },
  {
    "label": "AddOptionalData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOptionalData(EShaderOptionalDataKey Key, const uint8* ValuePtr, uint32 ValueSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderCodeWithOptionalData .)",
    "insertText": "Add(uint8(Key))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ShaderCodeWithOptionalData .)",
    "insertText": "Append((const uint8*)&ValueSize, sizeof(ValueSize))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ShaderCodeWithOptionalData .)",
    "insertText": "Append(ValuePtr, ValueSize)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (OptionalDataSize + =)",
    "insertText": "sizeof(uint8) + sizeof(ValueSize) + (uint32)"
  },
  {
    "label": "AddOptionalData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOptionalData(EShaderOptionalDataKey Key, const ANSICHAR* InString)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (uint32 Size =)",
    "insertText": "Strlen(InString)"
  },
  {
    "label": "AddOptionalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOptionalData(Key, (uint8*)InString, Size)"
  },
  {
    "label": "GetFinalizedResource()",
    "kind": "Method",
    "detail": "Function (} const FShaderCodeResource&)",
    "insertText": "GetFinalizedResource(EShaderFrequency Frequency, FSHAHash OutputHash)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ShaderCompressionFormat == NAME_Oodle)"
  },
  {
    "label": "GetShaderCompressionOodleSettings()",
    "kind": "Method",
    "detail": "Function (FOodleDataCompression::ECompressor OodleCompressorSetting ; FOodleDataCompression::ECompressionLevel OodleLevelSetting ;)",
    "insertText": "GetShaderCompressionOodleSettings(OodleCompressorSetting, OodleLevelSetting)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ShaderCodeResource =)",
    "insertText": "MoveTemp(Resource)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (UncompressedSize = ResourceUncompressedSize = = ShaderCodeResource . Code .)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetShaderCompressionOodleSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderCompressionOodleSettings(OodleCompressor, OodleLevel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCode& Output)"
  },
  {
    "label": "GetShaderSourceFilePath()",
    "kind": "Method",
    "detail": "Function (} ; FString)",
    "insertText": "GetShaderSourceFilePath(const FString& VirtualFilePath, TArray<struct FShaderCompilerError>* CompileErrors = nullptr)"
  },
  {
    "label": "ParseVirtualShaderFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ParseVirtualShaderFilename(const FString& InFilename)"
  },
  {
    "label": "ReplaceVirtualFilePathForShaderPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceVirtualFilePathForShaderPlatform(FString& InOutVirtualFilePath, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "ReplaceVirtualFilePathForShaderAutogen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceVirtualFilePathForShaderAutogen(FString& InOutVirtualFilePath, EShaderPlatform ShaderPlatform, const FName* InShaderPlatformName = nullptr)"
  },
  {
    "label": "LoadShaderSourceFileChecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadShaderSourceFileChecked(const TCHAR* VirtualFilePath, EShaderPlatform ShaderPlatform, FString& OutFileContents, const FName* ShaderPlatformName = nullptr)"
  },
  {
    "label": "GetShaderIncludes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderIncludes(const TCHAR* EntryPointVirtualFilePath, const TCHAR* VirtualFilePath, TArray<FString>& IncludeVirtualFilePaths, EShaderPlatform ShaderPlatform, uint32 DepthLimit=100, const FName* ShaderPlatformName = nullptr)"
  },
  {
    "label": "GetShaderIncludes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderIncludes(const TCHAR* EntryPointVirtualFilePath, const TCHAR* VirtualFilePath, const FString& FileContents, TArray<FString>& IncludeVirtualFilePaths, EShaderPlatform ShaderPlatform, uint32 DepthLimit = 100, const FName* ShaderPlatformName = nullptr)"
  },
  {
    "label": "GetShaderFileHash()",
    "kind": "Method",
    "detail": "Function (const class FSHAHash&)",
    "insertText": "GetShaderFileHash(const TCHAR* VirtualFilePath, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "TryGetShaderFileHash()",
    "kind": "Method",
    "detail": "Function (const FSHAHash*)",
    "insertText": "TryGetShaderFileHash(const TCHAR* VirtualFilePath, EShaderPlatform ShaderPlatform, FString* OutErrorMessage = nullptr)"
  },
  {
    "label": "GetShaderFilesHash()",
    "kind": "Method",
    "detail": "Function (const class FSHAHash&)",
    "insertText": "GetShaderFilesHash(const TArray<FString>& VirtualFilePaths, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "FlushShaderFileCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushShaderFileCache()"
  },
  {
    "label": "VerifyShaderSourceFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyShaderSourceFiles(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR class FShaderType ; class FVertexFactoryType ; class FShaderPipelineType ; # define HLSL_LINE_TERMINATOR)",
    "insertText": "TEXT(\"\\n\") RENDERCORE_API void UpdateReferencedUniformBufferNames( TArrayView<const FShaderType*> OutdatedShaderTypes, TArrayView<const FVertexFactoryType*> OutdatedFactoryTypes, TArrayView<const FShaderPipelineType*> OutdatedShaderPipelineTypes)"
  },
  {
    "label": "GenerateReferencedUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateReferencedUniformBuffers(const TCHAR* SourceFilename, const TCHAR* ShaderTypeName, const TMap<FString, TArray<const TCHAR*> >& ShaderFileToUniformBufferVariables, TSet<const FShaderParametersMetadata*>& UniformBuffers)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FUniformBufferNameSortOrder { bool)",
    "insertText": "operator()(const TCHAR* Name1, const TCHAR* Name2)"
  },
  {
    "label": "GetShaderTypeLayoutHash()",
    "kind": "Method",
    "detail": "Function (} } ; FSHAHash)",
    "insertText": "GetShaderTypeLayoutHash(const FTypeLayoutDesc& TypeDesc, FPlatformTypeLayoutParameters LayoutParameters)"
  },
  {
    "label": "AppendKeyStringShaderDependencies()",
    "kind": "Method",
    "detail": "Function (class FShaderTypeDependency ; class FShaderPipelineTypeDependency ; class FVertexFactoryTypeDependency ; void)",
    "insertText": "AppendKeyStringShaderDependencies(TConstArrayView<FShaderTypeDependency> ShaderTypeDependencies, FPlatformTypeLayoutParameters LayoutParams, FString& OutKeyString, bool bIncludeSourceHashes = true)"
  },
  {
    "label": "AppendKeyStringShaderDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendKeyStringShaderDependencies(TConstArrayView<FShaderTypeDependency> ShaderTypeDependencies, TConstArrayView<FShaderPipelineTypeDependency> ShaderPipelineTypeDependencies, TConstArrayView<FVertexFactoryTypeDependency> VertexFactoryTypeDependencies, FPlatformTypeLayoutParameters LayoutParams, FString& OutKeyString, bool bIncludeSourceHashes = true)"
  },
  {
    "label": "AppendShaderDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendShaderDependencies(FShaderKeyGenerator& KeyGen, TConstArrayView<FShaderTypeDependency> ShaderTypeDependencies, TConstArrayView<FShaderPipelineTypeDependency> ShaderPipelineTypeDependencies, TConstArrayView<FVertexFactoryTypeDependency> VertexFactoryTypeDependencies, FPlatformTypeLayoutParameters LayoutParams, bool bIncludeSourceHashes = true)"
  },
  {
    "label": "MakeInjectedShaderCodeBlock()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "MakeInjectedShaderCodeBlock(const TCHAR* BlockName, const FString& CodeToInject)"
  },
  {
    "label": "AllShaderSourceDirectoryMappings()",
    "kind": "Method",
    "detail": "Function (const TMap<FString,FString>&)",
    "insertText": "AllShaderSourceDirectoryMappings()"
  },
  {
    "label": "ResetAllShaderSourceDirectoryMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetAllShaderSourceDirectoryMappings()"
  },
  {
    "label": "AddShaderSourceDirectoryMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShaderSourceDirectoryMapping(const FString& VirtualShaderDirectory, const FString& RealShaderDirectory)"
  },
  {
    "label": "AddShaderSourceSharedVirtualDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShaderSourceSharedVirtualDirectory(const FString& VirtualShaderDirectory)"
  },
  {
    "label": "AddShaderSourceFileEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShaderSourceFileEntry(TArray<FString>& OutVirtualFilePaths, FString VirtualFilePath, EShaderPlatform ShaderPlatform, const FName* ShaderPlatformName = nullptr)"
  },
  {
    "label": "GetAllVirtualShaderSourcePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllVirtualShaderSourcePaths(TArray<FString>& OutVirtualFilePaths, EShaderPlatform ShaderPlatform, const FName* ShaderPlatformName = nullptr)"
  }
]