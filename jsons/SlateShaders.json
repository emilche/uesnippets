[
  {
    "label": "FSlateVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateVertexDeclaration"
  },
  {
    "label": "FSlateInstancedVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateInstancedVertexDeclaration"
  },
  {
    "label": "FSlateMaskingVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateMaskingVertexDeclaration"
  },
  {
    "label": "FSlateElementVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementVS"
  },
  {
    "label": "FSlateElementPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementPS"
  },
  {
    "label": "TSlateElementPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSlateElementPS"
  },
  {
    "label": "FSlateDebugOverdrawPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDebugOverdrawPS"
  },
  {
    "label": "FSlateDebugBatchingPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDebugBatchingPS"
  },
  {
    "label": "FSlateMaskingVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateMaskingVS"
  },
  {
    "label": "FSlateMaskingPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateMaskingPS"
  },
  {
    "label": "FSlateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderResource . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" GlobalShader . h \" # include \" ShaderParameterUtils . h \" # include \" Rendering / RenderingCommon . h \" # include \" RHIStaticStates . h \" # include \" TextureResource . h \" # include \" RenderUtils . h \" # include \" ShaderParameterStruct . h \" # include \" MeshDrawShaderBindings . h \" EColorVisionDeficiency GSlateColorDeficiencyType ; int32 GSlateColorDeficiencySeverity ; bool GSlateColorDeficiencyCorrection ; bool GSlateShowColorDeficiencyCorrectionWithDeficiency ; class FSlateVertexDeclaration : public FRenderResource { public : FVertexDeclarationRHIRef VertexDeclarationRHI ; ~)",
    "insertText": "FSlateVertexDeclaration()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "FSlateInstancedVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateInstancedVertexDeclaration : public FSlateVertexDeclaration { public : ~)",
    "insertText": "FSlateInstancedVertexDeclaration()"
  },
  {
    "label": "FSlateMaskingVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateMaskingVertexDeclaration : public FRenderResource { public : FVertexDeclarationRHIRef VertexDeclarationRHI ; ~)",
    "insertText": "FSlateMaskingVertexDeclaration()"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateElementVS : public FGlobalShader { public :)",
    "insertText": "DECLARE_GLOBAL_SHADER(FSlateElementVS)"
  },
  {
    "label": "FSlateElementVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateElementVS()"
  },
  {
    "label": "FSlateElementVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateElementVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlateElementPS : public FGlobalShader { public :)",
    "insertText": "DECLARE_GLOBAL_SHADER(FSlateElementPS)"
  },
  {
    "label": "FSlateElementPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateElementPS()"
  },
  {
    "label": "FSlateElementPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateElementPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (TextureParameter .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"ElementTexture\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (TextureParameterSampler .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"ElementTextureSampler\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (InPageTableTexture .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"InPageTableTexture\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (VTPackedPageTableUniform0 .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"VTPackedPageTableUniform0\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (VTPackedPageTableUniform1 .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"VTPackedPageTableUniform1\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (VTPackedUniform .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"VTPackedUniform\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShaderParams .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"ShaderParams\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ShaderParams2 .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"ShaderParams2\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (VTShaderParams .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"VTShaderParams\"))"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (GammaAndAlphaValues .)",
    "insertText": "Bind(Initializer.ParameterMap,TEXT(\"GammaAndAlphaValues\"))"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "SetTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTexture(FMeshDrawSingleShaderBindings& ShaderBindings, FRHITexture* InTexture, const FSamplerStateRHIRef SamplerState)"
  },
  {
    "label": "AddTexture()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "AddTexture(TextureParameter, TextureParameterSampler, SamplerState, InTexture)"
  },
  {
    "label": "SetVirtualTextureParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVirtualTextureParameters(FMeshDrawSingleShaderBindings& ShaderBindings, FVirtualTexture2DResource* InVirtualTexture)"
  },
  {
    "label": "GetPhysicalTextureSRV()",
    "kind": "Method",
    "detail": "Function (uint32 LayerIndex = 0 ; FRHIShaderResourceView* PhysicalView = AllocatedVT ->)",
    "insertText": "GetPhysicalTextureSRV(LayerIndex, InVirtualTexture->bSRGB)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (FUintVector4 PageTableUniform [ 2 ] ; FUintVector4 Uniform ; FVector4f VTParams { 0 . f,static_cast<)",
    "insertText": "float(LayerIndex)"
  },
  {
    "label": "GetPackedPageTableUniform()",
    "kind": "Method",
    "detail": "Function (AllocatedVT ->)",
    "insertText": "GetPackedPageTableUniform(PageTableUniform)"
  },
  {
    "label": "GetPackedUniform()",
    "kind": "Method",
    "detail": "Function (AllocatedVT ->)",
    "insertText": "GetPackedUniform(&Uniform, LayerIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(TextureParameter, PhysicalView)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(TextureParameterSampler, InVirtualTexture->SamplerStateRHI)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(InPageTableTexture, AllocatedVT->GetPageTableTexture(0u))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(VTPackedPageTableUniform0, PageTableUniform[0])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(VTPackedPageTableUniform1, PageTableUniform[1])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(VTPackedUniform, Uniform)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(VTShaderParams, VTParams)"
  },
  {
    "label": "SetShaderParams()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetShaderParams(FMeshDrawSingleShaderBindings& ShaderBindings, const FShaderParams& InShaderParams)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(ShaderParams, InShaderParams.PixelParams)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(ShaderParams2, InShaderParams.PixelParams2)"
  },
  {
    "label": "SetDisplayGammaAndInvertAlphaAndContrast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisplayGammaAndInvertAlphaAndContrast(FMeshDrawSingleShaderBindings& ShaderBindings, float InDisplayGamma, float bInvertAlpha, float InContrast)"
  },
  {
    "label": "Values()",
    "kind": "Method",
    "detail": "Function (FVector4f)",
    "insertText": "Values(2.2f / InDisplayGamma, 1.0f/InDisplayGamma, bInvertAlpha, InContrast)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(GammaAndAlphaValues, Values)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, TextureParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, TextureParameterSampler)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderResourceParameter, InPageTableTexture)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, VTPackedPageTableUniform0)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, VTPackedPageTableUniform1)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, VTPackedUniform)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShaderParams)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, ShaderParams2)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, VTShaderParams)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, GammaAndAlphaValues)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<ESlateShader ShaderType,bool bDrawDisabledEffect,bool bUseTextureAlpha = true,bool bUseTextureGrayscale = false,bool bIsVirtualTexture = false> class TSlateElementPS : public FSlateElementPS {)",
    "insertText": "DECLARE_SHADER_TYPE(TSlateElementPS, Global)"
  },
  {
    "label": "TSlateElementPS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TSlateElementPS()"
  },
  {
    "label": "TSlateElementPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSlateElementPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer ) : FSlateElementPS( Initializer)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SHADER_TYPE\"), (uint32)ShaderType)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"DRAW_DISABLED_EFFECT\"), (uint32)( bDrawDisabledEffect ? 1 : 0 ))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_TEXTURE_ALPHA\"), (uint32)( bUseTextureAlpha ? 1 : 0 ))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_MATERIALS\"), (uint32)0)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_TEXTURE_GRAYSCALE\"), (uint32)(bUseTextureGrayscale ? 1 : 0))"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"SAMPLE_VIRTUAL_TEXTURE\"), (uint32)(bIsVirtualTexture ? 1 : 0))"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlateDebugOverdrawPS : public FSlateElementPS {)",
    "insertText": "DECLARE_SHADER_TYPE(FSlateDebugOverdrawPS, Global)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "FSlateDebugOverdrawPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateDebugOverdrawPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer ) : FSlateElementPS( Initializer)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; class FSlateDebugBatchingPS : public FSlateElementPS {)",
    "insertText": "DECLARE_SHADER_TYPE(FSlateDebugBatchingPS, Global)"
  },
  {
    "label": "FSlateDebugBatchingPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateDebugBatchingPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer ) : FSlateElementPS( Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (BatchColor .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"BatchColor\"))"
  },
  {
    "label": "SetBatchColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBatchColor(FMeshDrawSingleShaderBindings& ShaderBindings, const FLinearColor& InBatchColor)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ShaderBindings .)",
    "insertText": "Add(BatchColor, InBatchColor)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, BatchColor)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FSlateMaskingVS : public FGlobalShader { public :)",
    "insertText": "DECLARE_GLOBAL_SHADER(FSlateMaskingVS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FSlateMaskingVS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_ARRAY(FVector4f, MaskRectPacked, [2]) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FSlateMaskingPS : public FGlobalShader { public :)",
    "insertText": "DECLARE_GLOBAL_SHADER(FSlateMaskingPS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FSlateMaskingPS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) END_SHADER_PARAMETER_STRUCT()"
  }
]