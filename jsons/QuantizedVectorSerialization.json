[
  {
    "label": "WriteQuantizedVector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / MathFwd . h \" # include \" Serialization / Archive . h \" namespace UE::Net { bool)",
    "insertText": "WriteQuantizedVector(const int32 Scale, const FVector3d& Value, FArchive& Ar)"
  },
  {
    "label": "WriteQuantizedVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteQuantizedVector(const int32 Scale, const FVector3f& Value, FArchive& Ar)"
  },
  {
    "label": "ReadQuantizedVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadQuantizedVector(const int32 Scale, FVector3d& Value, FArchive& Ar)"
  },
  {
    "label": "ReadQuantizedVector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadQuantizedVector(const int32 Scale, FVector3f& Value, FArchive& Ar)"
  },
  {
    "label": "QuantizeVector()",
    "kind": "Method",
    "detail": "Function (FVector3d)",
    "insertText": "QuantizeVector(const int32 Scale, const FVector3d& Value)"
  },
  {
    "label": "QuantizeVector()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "QuantizeVector(const int32 Scale, const FVector3f& Value)"
  },
  {
    "label": "SerializeQuantizedVector()",
    "kind": "Method",
    "detail": "Function (template<int32 Scale> bool)",
    "insertText": "SerializeQuantizedVector(FVector& Value, FArchive& Ar)"
  },
  {
    "label": "WriteQuantizedVector()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "WriteQuantizedVector(Scale, Value, Ar)"
  }
]