[
  {
    "label": "ILiveLinkClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILiveLinkClient"
  },
  {
    "label": "ULiveLinkRole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULiveLinkRole"
  },
  {
    "label": "FLiveLinkSubjectFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLiveLinkSubjectFrameData"
  },
  {
    "label": "FAnimNode_LiveLinkPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_LiveLinkPose"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AnimNodeBase . h \" # include \" CoreMinimal . h \" # include \" LiveLinkRetargetAsset . h \" # include \" LiveLinkTypes . h \" # include \" Templates / SubclassOf . h \" # include \" AnimNode_LiveLinkPose . generated . h \" class ILiveLinkClient ; class ULiveLinkRole ; struct FLiveLinkSubjectFrameData ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Input)"
  },
  {
    "label": "FAnimNode_LiveLinkPose()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimNode_LiveLinkPose()"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext & Context)"
  },
  {
    "label": "Update_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_AnyThread(const FAnimationUpdateContext & Context)"
  },
  {
    "label": "Evaluate_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Evaluate_AnyThread(FPoseContext& Output)"
  },
  {
    "label": "HasPreUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreUpdate()"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "OnInitializeAnimInstance()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnInitializeAnimInstance(const FAnimInstanceProxy* InProxy, const UAnimInstance* InAnimInstance)"
  },
  {
    "label": "BuildPoseFromAnimData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPoseFromAnimData(const FLiveLinkSubjectFrameData& LiveLinkData, FPoseContext& Output)"
  },
  {
    "label": "BuildPoseFromCurveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPoseFromCurveData(const FLiveLinkSubjectFrameData& LiveLinkData, FPoseContext& Output)"
  }
]