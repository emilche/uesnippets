[
  {
    "label": "RtpFileReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpFileReader"
  },
  {
    "label": "RtpFileSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpFileSource"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_RTP_FILE_SOURCE_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_RTP_FILE_SOURCE_H_ # include<stdio . h> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" modules / audio_coding / neteq / tools / packet_source . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" namespace webrtc { namespace test { class RtpFileReader ; class RtpFileSource : public PacketSource { public : RtpFileSource*)",
    "insertText": "Create(absl::string_view file_name, absl::optional<uint32_t> ssrc_filter = absl::nullopt)"
  },
  {
    "label": "ValidRtpDump()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidRtpDump(absl::string_view file_name)"
  },
  {
    "label": "ValidPcap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidPcap(absl::string_view file_name)"
  },
  {
    "label": "RtpFileSource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtpFileSource()"
  },
  {
    "label": "RtpFileSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpFileSource(const RtpFileSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpFileSource&)",
    "insertText": "operator(const RtpFileSource&)"
  },
  {
    "label": "RegisterRtpHeaderExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterRtpHeaderExtension(RTPExtensionType type, uint8_t id)"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Packet>)",
    "insertText": "NextPacket()"
  },
  {
    "label": "RtpFileSource()",
    "kind": "Method",
    "detail": "Function (private : const int kFirstLineLength = 4 0 ; const int kRtpFileHeaderSize = 4 + 4 + 4 + 2 + 2 ; const size_t kPacketHeaderSize = 8 ;)",
    "insertText": "RtpFileSource(absl::optional<uint32_t> ssrc_filter)"
  },
  {
    "label": "OpenFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenFile(absl::string_view file_name)"
  }
]