[
  {
    "label": "FAccumulatorGlobals",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulatorGlobals"
  },
  {
    "label": "FDiffPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiffPackageWriter"
  },
  {
    "label": "FLinkerDiffPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerDiffPackageWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDiffPackageWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetRegistryState . h \" # include \" Cooker / CookDeterminismManager . h \" # include \" Cooker / DiffWriterArchive . h \" # include \" Serialization / PackageWriter . h \" namespace UE::DiffWriter { struct FAccumulatorGlobals ; } class FDiffPackageWriter : public ICookedPackageWriter { public :)",
    "insertText": "FDiffPackageWriter(TUniquePtr<ICookedPackageWriter>&& InInner, UE::Cook::FDeterminismManager* InDeterminismManager)"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (FCapabilities)",
    "insertText": "GetCapabilities()"
  },
  {
    "label": "BeginPackage()",
    "kind": "Method",
    "detail": "Function (Result . bIgnoreHeaderDiffs = bIgnoreHeaderDiffs ; Result . bDeterminismDebug = true ; return Result ; } void)",
    "insertText": "BeginPackage(const FBeginPackageInfo& Info)"
  },
  {
    "label": "CommitPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackage(FCommitPackageInfo&& Info)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageData(const FPackageInfo& Info, FLargeMemoryWriter& ExportsArchive, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBulkData(const FBulkDataInfo& Info, const FIoBuffer& BulkData, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteBulkData()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "WriteBulkData(Info, BulkData, FileRegions)"
  },
  {
    "label": "WriteAdditionalFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteAdditionalFile(const FAdditionalFileInfo& Info, const FIoBuffer& FileData)"
  },
  {
    "label": "WriteAdditionalFile()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "WriteAdditionalFile(Info, FileData)"
  },
  {
    "label": "WriteLinkerAdditionalData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteLinkerAdditionalData(const FLinkerAdditionalDataInfo& Info, const FIoBuffer& Data, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteLinkerAdditionalData()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "WriteLinkerAdditionalData(Info, Data, FileRegions)"
  },
  {
    "label": "WritePackageTrailer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WritePackageTrailer(const FPackageTrailerInfo& Info, const FIoBuffer& Data)"
  },
  {
    "label": "WritePackageTrailer()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "WritePackageTrailer(Info, Data)"
  },
  {
    "label": "GetExportsFooterSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetExportsFooterSize()"
  },
  {
    "label": "CreateLinkerArchive()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FLargeMemoryWriter>)",
    "insertText": "CreateLinkerArchive(FName PackageName, UObject* Asset, uint16 MultiOutputIndex)"
  },
  {
    "label": "CreateLinkerExportsArchive()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FLargeMemoryWriter>)",
    "insertText": "CreateLinkerExportsArchive(FName PackageName, UObject* Asset, uint16 MultiOutputIndex)"
  },
  {
    "label": "IsPreSaveCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreSaveCompleted()"
  },
  {
    "label": "GetCookCapabilities()",
    "kind": "Method",
    "detail": "Function (FCookCapabilities)",
    "insertText": "GetCookCapabilities()"
  },
  {
    "label": "GetPreviousCookTime()",
    "kind": "Method",
    "detail": "Function (Result . bDiffModeSupported = false ; Result . bReadOnly = true ; return Result ; } FDateTime)",
    "insertText": "GetPreviousCookTime()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FCookInfo& Info)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "Initialize(Info)"
  },
  {
    "label": "BeginCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginCook(const FCookInfo& Info)"
  },
  {
    "label": "BeginCook()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "BeginCook(Info)"
  },
  {
    "label": "EndCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndCook(const FCookInfo& Info)"
  },
  {
    "label": "EndCook()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "EndCook(Info)"
  },
  {
    "label": "LoadPreviousAssetRegistry()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FAssetRegistryState>)",
    "insertText": "LoadPreviousAssetRegistry()"
  },
  {
    "label": "GetOplogAttachment()",
    "kind": "Method",
    "detail": "Function (} FCbObject)",
    "insertText": "GetOplogAttachment(FName PackageName, FUtf8StringView AttachmentKey)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCookedPackages(TArrayView<const FName> PackageNamesToRemove)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "RemoveCookedPackages(PackageNamesToRemove)"
  },
  {
    "label": "RemoveCookedPackages()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCookedPackages()"
  },
  {
    "label": "UpdatePackageModificationStatus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePackageModificationStatus(FName PackageName, bool bIterativelyUnmodified, bool& bInOutShouldIterativelySkip)"
  },
  {
    "label": "UpdatePackageModificationStatus()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "UpdatePackageModificationStatus(PackageName, bIterativelyUnmodified, bInOutShouldIterativelySkip)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (} EPackageWriterResult)",
    "insertText": "BeginCacheForCookedPlatformData(FBeginCacheForCookedPlatformDataInfo& Info)"
  },
  {
    "label": "UpdateSaveArguments()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSaveArguments(FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "IsAnotherSaveNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnotherSaveNeeded(FSavePackageResultStruct& PreviousResult, FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "WriteMPCookMessageForPackage()",
    "kind": "Method",
    "detail": "Function (TFuture<FCbObject>)",
    "insertText": "WriteMPCookMessageForPackage(FName PackageName)"
  },
  {
    "label": "TryReadMPCookMessageForPackage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryReadMPCookMessageForPackage(FName PackageName, FCbObjectView Message)"
  },
  {
    "label": "GetPackageHashes()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,TRefCountPtr<FPackageHashes>>&)",
    "insertText": "GetPackageHashes()"
  },
  {
    "label": "ParseCmds()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "ParseCmds()"
  },
  {
    "label": "ParseDumpObjList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseDumpObjList(FString InParams)"
  },
  {
    "label": "ParseDumpObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseDumpObjects(FString InParams)"
  },
  {
    "label": "RemoveParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveParam(FString& InOutParams, const TCHAR* InParamToRemove)"
  },
  {
    "label": "FilterPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterPackageName(const FString& InWildcard)"
  },
  {
    "label": "ConditionallyDumpObjList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyDumpObjList()"
  },
  {
    "label": "ConditionallyDumpObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyDumpObjects()"
  },
  {
    "label": "GetDiffWriterMessageCallback()",
    "kind": "Method",
    "detail": "Function (UE::DiffWriter::FMessageCallback)",
    "insertText": "GetDiffWriterMessageCallback()"
  },
  {
    "label": "OnDiffWriterMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDiffWriterMessage(ELogVerbosity::Type Verbosity, FStringView Message)"
  },
  {
    "label": "ResolveText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ResolveText(FStringView Message)"
  },
  {
    "label": "ConstructAccumulator()",
    "kind": "Method",
    "detail": "Function (UE::DiffWriter::FAccumulator&)",
    "insertText": "ConstructAccumulator(FName PackageName, UObject* Asset, uint16 MultiOutputIndex)"
  },
  {
    "label": "IsPackageDiffAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageDiffAllowed()"
  },
  {
    "label": "FLinkerDiffPackageWriter()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<UE::DiffWriter::FAccumulator> Accumulators [ 2 ] ; FBeginPackageInfo BeginInfo ; TSet<FTopLevelAssetPath> CompareDenyListClasses ; TUniquePtr<ICookedPackageWriter> Inner ; TUniquePtr<UE::DiffWriter::FAccumulatorGlobals> AccumulatorGlobals ; UE::Cook::FDeterminismManager* DeterminismManager = nullptr ; UPackage* Package = nullptr ; const TCHAR* Indent = nullptr ; const TCHAR* NewLine = nullptr ; FString DumpObjListParams ; FString PackageFilter ; int32 MaxDiffsToLog = 5 ; bool bSaveForDiff = false ; bool bDiffOptional = false ; bool bIgnoreHeaderDiffs = false ; bool bIsDifferent = false ; bool bNewPackage = false ; bool bHasStartedSecondSave = false ; bool bDumpObjList = false ; bool bDumpObjects = false ; bool bDumpObjectsSorted = false ; } ; class FLinkerDiffPackageWriter : public ICookedPackageWriter { public :)",
    "insertText": "FLinkerDiffPackageWriter(TUniquePtr<ICookedPackageWriter>&& InInner)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (Inner ->)",
    "insertText": "WritePackageData(Info, ExportsArchive, FileRegions)"
  },
  {
    "label": "SetupOtherAlgorithm()",
    "kind": "Method",
    "detail": "Function (} private : enum class EDiffMode : uint8 { LDM_Consistent,} ; void)",
    "insertText": "SetupOtherAlgorithm()"
  },
  {
    "label": "SetupCurrentAlgorithm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupCurrentAlgorithm()"
  },
  {
    "label": "CompareResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompareResults(FSavePackageResultStruct& CurrentResult)"
  }
]