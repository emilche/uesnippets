[
  {
    "label": "FTextLocalizationResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLocalizationResource"
  },
  {
    "label": "ILocalizedTextSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILocalizedTextSource"
  },
  {
    "label": "IPakFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPakFile"
  },
  {
    "label": "FLogCategoryBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategoryBase"
  },
  {
    "label": "FPolyglotTextData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPolyglotTextData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextLocalizationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLocalizationManager"
  },
  {
    "label": "FDisplayStringEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayStringEntry"
  },
  {
    "label": "FDisplayStringsForLocalizationTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayStringsForLocalizationTarget"
  },
  {
    "label": "FDisplayStringsByLocalizationTargetId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayStringsByLocalizationTargetId"
  },
  {
    "label": "FLazySingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLazySingleton"
  },
  {
    "label": "FUpdateLiveTableOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLiveTableOptions"
  },
  {
    "label": "FLocalizationResourceTextSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalizationResourceTextSource"
  },
  {
    "label": "FPolyglotTextSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPolyglotTextSource"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphFwd . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" HAL / CriticalSection . h \" # include \" Internationalization / LocKeyFuncs . h \" # include \" Internationalization / LocTesting . h \" # include \" Internationalization / LocalizedTextSourceTypes . h \" # include \" Internationalization / TextKey . h \" # include \" Misc / Crc . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include<atomic> class FTextLocalizationResource ; class ILocalizedTextSource ; class IPakFile ; struct FLogCategoryBase ; struct FPolyglotTextData ; enum class ETextLocalizationManagerInitializedFlags : uint8 { None = 0,Engine = 1<<0,Game = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ETextLocalizationManagerInitializedFlags)"
  },
  {
    "label": "BeginPreInitTextLocalization()",
    "kind": "Method",
    "detail": "Function (class FTextLocalizationManager { void)",
    "insertText": "BeginPreInitTextLocalization()"
  },
  {
    "label": "BeginInitTextLocalization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginInitTextLocalization()"
  },
  {
    "label": "InitEngineTextLocalization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitEngineTextLocalization()"
  },
  {
    "label": "InitGameTextLocalization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGameTextLocalization()"
  },
  {
    "label": "FDisplayStringEntry()",
    "kind": "Method",
    "detail": "Function (private : struct FDisplayStringEntry { FTextConstDisplayStringRef DisplayString ; # if WITH_EDITORONLY_DATA FTextKey LocResID ; # endif int32 LocalizationTargetPathId = INDEX_NONE ; uint32 SourceStringHash ;)",
    "insertText": "FDisplayStringEntry(const FTextKey& InLocResID, const int32 InLocalizationTargetPathId, const uint32 InSourceStringHash, const FTextConstDisplayStringRef& InDisplayString) : DisplayString(InDisplayString) #if WITH_EDITORONLY_DATA , LocResID(InLocResID) #endif , LocalizationTargetPathId(InLocalizationTargetPathId) , SourceStringHash(InSourceStringHash)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TMap<FTextId,FDisplayStringEntry> FDisplayStringLookupTable ; struct FDisplayStringsForLocalizationTarget { FString LocalizationTargetPath ; TSet<FTextId> TextIds ; bool bIsMounted = false ; } ; struct FDisplayStringsByLocalizationTargetId { public : FDisplayStringsForLocalizationTarget&)",
    "insertText": "FindOrAdd(FStringView InLocalizationTargetPath, int32* OutLocalizationTargetPathId = nullptr)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FDisplayStringsForLocalizationTarget*)",
    "insertText": "Find(const int32 InLocalizationTargetPathId)"
  },
  {
    "label": "TrackTextId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackTextId(const int32 InCurrentLocalizationPathId, const int32 InNewLocalizationPathId, const FTextId& InTextId)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (private : TArray<FDisplayStringsForLocalizationTarget> LocalizationTargets ; TMap<FStringView,int32> LocalizationTargetPathsToIds ; } ; private : std::atomic<ETextLocalizationManagerInitializedFlags> InitializedFlags { ETextLocalizationManagerInitializedFlags::None } ; bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "FTextLocalizationManager()",
    "kind": "Method",
    "detail": "Function (class FLazySingleton ; public : ~)",
    "insertText": "FTextLocalizationManager()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_NONCOPYABLE(FTextLocalizationManager)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FTextLocalizationManager&)",
    "insertText": "Get()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "IsDisplayStringSupportEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisplayStringSupportEnabled()"
  },
  {
    "label": "DumpMemoryInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMemoryInfo()"
  },
  {
    "label": "CompactDataStructures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactDataStructures()"
  },
  {
    "label": "DumpLiveTableImpl()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_LOC_TESTING private : void)",
    "insertText": "DumpLiveTableImpl(const FString* NamespaceFilter, const FString* KeyFilter, const FString* DisplayStringFilter, TFunctionRef<void(const FTextId& Id, const FTextConstDisplayStringRef& DisplayString)> Callback)"
  },
  {
    "label": "DumpLiveTable()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DumpLiveTable(const FString* NamespaceFilter = nullptr, const FString* KeyFilter = nullptr, const FString* DisplayStringFilter = nullptr, const FLogCategoryBase* CategoryOverride = nullptr)"
  },
  {
    "label": "DumpLiveTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpLiveTable(const FString& OutputFilename, const FString* NamespaceFilter = nullptr, const FString* KeyFilter = nullptr, const FString* DisplayStringFilter = nullptr)"
  },
  {
    "label": "AddOrUpdateDisplayStringInLiveTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateDisplayStringInLiveTable(const FString& Namespace, const FString& Key, const FString& DisplayString, const FString* const SourceStringPtr = nullptr)"
  },
  {
    "label": "GetRequestedLanguageName()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetRequestedLanguageName()"
  },
  {
    "label": "GetRequestedLocaleName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRequestedLocaleName()"
  },
  {
    "label": "GetNativeCultureName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNativeCultureName(const ELocalizedTextSourceCategory InCategory)"
  },
  {
    "label": "GetLocalizedCultureNames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetLocalizedCultureNames(const ELocalizationLoadFlags InLoadFlags)"
  },
  {
    "label": "GetLocalizationTargetPathId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLocalizationTargetPathId(FStringView InLocalizationTargetPath)"
  },
  {
    "label": "RegisterTextSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTextSource(const TSharedRef<ILocalizedTextSource>& InLocalizedTextSource, const bool InRefreshResources = true)"
  },
  {
    "label": "RegisterPolyglotTextData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPolyglotTextData(const FPolyglotTextData& InPolyglotTextData, const bool InAddDisplayString = true)"
  },
  {
    "label": "RegisterPolyglotTextData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPolyglotTextData(TArrayView<const FPolyglotTextData> InPolyglotTextDataArray, const bool InAddDisplayStrings = true)"
  },
  {
    "label": "FindDisplayString()",
    "kind": "Method",
    "detail": "Function (FTextConstDisplayStringPtr)",
    "insertText": "FindDisplayString(const FTextKey& Namespace, const FTextKey& Key, const FString* const SourceStringPtr = nullptr)"
  },
  {
    "label": "GetDisplayString()",
    "kind": "Method",
    "detail": "Function (FTextConstDisplayStringPtr)",
    "insertText": "GetDisplayString(const FTextKey& Namespace, const FTextKey& Key, const FString* const SourceStringPtr)"
  },
  {
    "label": "GetLocResID()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "GetLocResID(const FTextKey& Namespace, const FTextKey& Key, FString& OutLocResId)"
  },
  {
    "label": "UpdateFromLocalizationResource()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdateFromLocalizationResource(const FString& LocalizationResourceFilePath)"
  },
  {
    "label": "UpdateFromLocalizationResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFromLocalizationResource(const FTextLocalizationResource& TextLocalizationResource)"
  },
  {
    "label": "WaitForAsyncTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsyncTasks()"
  },
  {
    "label": "RefreshResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshResources()"
  },
  {
    "label": "HandleLocalizationTargetsMounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLocalizationTargetsMounted(TArrayView<const FString> LocalizationTargetPaths)"
  },
  {
    "label": "HandleLocalizationTargetsUnmounted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLocalizationTargetsUnmounted(TArrayView<const FString> LocalizationTargetPaths)"
  },
  {
    "label": "GetTextRevision()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetTextRevision()"
  },
  {
    "label": "GetLocalRevisionForTextId()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetLocalRevisionForTextId(const FTextId& InTextId)"
  },
  {
    "label": "GetTextRevisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextRevisions(const FTextId& InTextId, uint16& OutGlobalTextRevision, uint16& OutLocalTextRevision)"
  },
  {
    "label": "EnableGameLocalizationPreview()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "EnableGameLocalizationPreview()"
  },
  {
    "label": "EnableGameLocalizationPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableGameLocalizationPreview(const FString& CultureName)"
  },
  {
    "label": "DisableGameLocalizationPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableGameLocalizationPreview()"
  },
  {
    "label": "IsGameLocalizationPreviewEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGameLocalizationPreviewEnabled()"
  },
  {
    "label": "PushAutoEnableGameLocalizationPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushAutoEnableGameLocalizationPreview()"
  },
  {
    "label": "PopAutoEnableGameLocalizationPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopAutoEnableGameLocalizationPreview()"
  },
  {
    "label": "ShouldGameLocalizationPreviewAutoEnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGameLocalizationPreviewAutoEnable()"
  },
  {
    "label": "ConfigureGameLocalizationPreviewLanguage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureGameLocalizationPreviewLanguage(const FString& CultureName)"
  },
  {
    "label": "GetConfiguredGameLocalizationPreviewLanguage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConfiguredGameLocalizationPreviewLanguage()"
  },
  {
    "label": "IsLocalizationLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalizationLocked()"
  },
  {
    "label": "ShouldForceLoadGameLocalization()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ShouldForceLoadGameLocalization()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(FTextLocalizationManager, FTextRevisionChangedEvent)"
  },
  {
    "label": "OnPakFileMounted()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnPakFileMounted(const IPakFile& PakFile)"
  },
  {
    "label": "OnCultureChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCultureChanged()"
  },
  {
    "label": "LoadLocalizationResourcesForCulture_Sync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLocalizationResourcesForCulture_Sync(TArrayView<const TSharedPtr<ILocalizedTextSource>> AvailableTextSources, const FString& CultureName, const ELocalizationLoadFlags LocLoadFlags)"
  },
  {
    "label": "LoadLocalizationResourcesForCulture_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLocalizationResourcesForCulture_Async(const FString& CultureName, const ELocalizationLoadFlags LocLoadFlags)"
  },
  {
    "label": "LoadLocalizationResourcesForPrioritizedCultures_Sync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLocalizationResourcesForPrioritizedCultures_Sync(TArrayView<const TSharedPtr<ILocalizedTextSource>> AvailableTextSources, TArrayView<const FString> PrioritizedCultureNames, const ELocalizationLoadFlags LocLoadFlags)"
  },
  {
    "label": "LoadLocalizationResourcesForPrioritizedCultures_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLocalizationResourcesForPrioritizedCultures_Async(TArrayView<const FString> PrioritizedCultureNames, const ELocalizationLoadFlags LocLoadFlags)"
  },
  {
    "label": "LoadLocalizationTargetsForPrioritizedCultures_Sync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLocalizationTargetsForPrioritizedCultures_Sync(TArrayView<const TSharedPtr<ILocalizedTextSource>> AvailableTextSources, TArrayView<const FString> LocalizationTargetPaths, TArrayView<const FString> PrioritizedCultureNames, const ELocalizationLoadFlags LocLoadFlags)"
  },
  {
    "label": "LoadLocalizationTargetsForPrioritizedCultures_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLocalizationTargetsForPrioritizedCultures_Async(TArrayView<const FString> LocalizationTargetPaths, TArrayView<const FString> PrioritizedCultureNames, const ELocalizationLoadFlags LocLoadFlags)"
  },
  {
    "label": "LoadChunkedLocalizationResources_Sync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadChunkedLocalizationResources_Sync(TArrayView<const TSharedPtr<ILocalizedTextSource>> AvailableTextSources, const int32 ChunkId, const FString& PakFilename)"
  },
  {
    "label": "LoadChunkedLocalizationResources_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadChunkedLocalizationResources_Async(const int32 ChunkId, const FString& PakFilename)"
  },
  {
    "label": "QueueAsyncTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueAsyncTask(TUniqueFunction<void()>&& Task)"
  },
  {
    "label": "FUpdateLiveTableOptions()",
    "kind": "Method",
    "detail": "Function (struct FUpdateLiveTableOptions {)",
    "insertText": "FUpdateLiveTableOptions()"
  },
  {
    "label": "UpdateLiveTable()",
    "kind": "Method",
    "detail": "Function (} bool bDirtyTextRevision = true ; bool bReplaceExisting = true ; } ; void)",
    "insertText": "UpdateLiveTable(FTextLocalizationResource&& TextLocalizationResource, const FUpdateLiveTableOptions& UpdateOptions = FUpdateLiveTableOptions())"
  },
  {
    "label": "DirtyLocalRevisionForTextId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyLocalRevisionForTextId(const FTextId& InTextId)"
  },
  {
    "label": "FindDisplayString_Internal()",
    "kind": "Method",
    "detail": "Function (FTextConstDisplayStringPtr)",
    "insertText": "FindDisplayString_Internal(const FTextId& TextId, const FString& SourceString)"
  },
  {
    "label": "DirtyTextRevision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyTextRevision()"
  }
]