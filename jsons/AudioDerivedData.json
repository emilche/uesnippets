[
  {
    "label": "IAudioFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioFormat"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FPlatformAudioCookOverrides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformAudioCookOverrides"
  },
  {
    "label": "FAudioCookInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioCookInputs"
  },
  {
    "label": "FDerivedAudioDataCompressor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDerivedAudioDataCompressor"
  },
  {
    "label": "FDerivedAudioDataCompressor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DerivedDataPluginInterface . h \" class IAudioFormat ; class USoundWave ; struct FPlatformAudioCookOverrides ; struct FAudioCookInputs ; class FDerivedAudioDataCompressor : public FDerivedDataPluginInterface { private : TUniquePtr<FAudioCookInputs> CookInputs ; public :)",
    "insertText": "FDerivedAudioDataCompressor(USoundWave* InSoundNode, FName InBaseFormat, FName InHashedFormat, const FPlatformAudioCookOverrides* InCompressionOverrides, const ITargetPlatform* InTargetPlatform=nullptr)"
  },
  {
    "label": "GetPluginName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetPluginName()"
  },
  {
    "label": "GetVersionString()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetVersionString()"
  },
  {
    "label": "GetPluginSpecificCacheKeySuffix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPluginSpecificCacheKeySuffix()"
  },
  {
    "label": "IsBuildThreadsafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBuildThreadsafe()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Build(TArray<uint8>& OutData)"
  }
]