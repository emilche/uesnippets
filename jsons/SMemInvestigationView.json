[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FMemoryRuleSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryRuleSpec"
  },
  {
    "label": "FQueryTargetWindowSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueryTargetWindowSpec"
  },
  {
    "label": "SMemoryProfilerWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMemoryProfilerWindow"
  },
  {
    "label": "SMemInvestigationView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMemInvestigationView"
  },
  {
    "label": "SMemInvestigationView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" class FMenuBuilder ; namespace TraceServices { class IAnalysisSession ; } namespace UE::Insights::MemoryProfiler { class FMemoryRuleSpec ; class FQueryTargetWindowSpec ; class SMemoryProfilerWindow ; class SMemInvestigationView : public SCompoundWidget { public :)",
    "insertText": "SMemInvestigationView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SMemInvestigationView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() TSharedPtr<SMemoryProfilerWindow> GetProfilerWindow()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedPtr<SMemoryProfilerWindow> InProfilerWindow)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "QueryTarget_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryTarget_OnSelectionChanged(TSharedPtr<FQueryTargetWindowSpec> InRule, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "UpdateSymbolPathsText()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSymbolPathsText()"
  },
  {
    "label": "ConstructInvestigationWidgetArea()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructInvestigationWidgetArea()"
  },
  {
    "label": "ConstructTimeMarkerWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "ConstructTimeMarkerWidget(uint32 TimeMarkerIndex)"
  },
  {
    "label": "InsightsManager_OnSessionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsightsManager_OnSessionChanged()"
  },
  {
    "label": "GetAvailableQueryTargets()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FQueryTargetWindowSpec>>*)",
    "insertText": "GetAvailableQueryTargets()"
  },
  {
    "label": "QueryTarget_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "QueryTarget_OnGenerateWidget(TSharedPtr<FQueryTargetWindowSpec> InRule)"
  },
  {
    "label": "QueryTarget_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "QueryTarget_GetSelectedText()"
  },
  {
    "label": "GetAvailableQueryRules()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FMemoryRuleSpec>>*)",
    "insertText": "GetAvailableQueryRules()"
  },
  {
    "label": "QueryRule_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryRule_OnSelectionChanged(TSharedPtr<FMemoryRuleSpec> InRule, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "QueryRule_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "QueryRule_OnGenerateWidget(TSharedPtr<FMemoryRuleSpec> InRule)"
  },
  {
    "label": "QueryRule_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "QueryRule_GetSelectedText()"
  },
  {
    "label": "QueryRule_GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "QueryRule_GetTooltipText()"
  },
  {
    "label": "RunQuery()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "RunQuery()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnTimeMarkerLabelDoubleClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTimeMarkerLabelDoubleClicked(const FGeometry& MyGeometry, const FPointerEvent& PointerEvent, uint32 TimeMarkerIndex)"
  }
]