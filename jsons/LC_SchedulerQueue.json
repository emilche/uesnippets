[
  {
    "label": "TaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskBase"
  },
  {
    "label": "TaskQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskQueue"
  },
  {
    "label": "TaskQueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_Semaphore . h \" # include \" LC_CriticalSection . h \" # include<stdint . h> namespace scheduler { class TaskBase ; class TaskQueue { const unsigned int TASK_COUNT = 4 0 9 6 u ; const unsigned int ACCESS_MASK = TASK_COUNT - 1 u ; public :)",
    "insertText": "TaskQueue(void)"
  },
  {
    "label": "PushTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTask(TaskBase* task)"
  },
  {
    "label": "PopTask()",
    "kind": "Method",
    "detail": "Function (TaskBase*)",
    "insertText": "PopTask(void)"
  },
  {
    "label": "TryPopTask()",
    "kind": "Method",
    "detail": "Function (TaskBase*)",
    "insertText": "TryPopTask(void)"
  }
]