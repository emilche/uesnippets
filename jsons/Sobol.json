[
  {
    "label": "FSobol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSobol"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / MathFwd . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" class FSobol { public : int32 MaxDimension = 1 5 ; int32 MaxCell2DBits = 1 5 ; int32 MaxCell3DBits = 1 0 ; private : const int32 DirectionNumbers [ MaxDimension + 1 ] [ 3 2 ] ; const int32 GrayNumbers [ MaxDimension + 1 ] [ 3 2 ] ; const int32 Cell2DDirectionNumbers [ MaxCell2DBits + 1 ] [ 3 2 ] [ 2 ] ; const int32 Cell2DGrayNumbers [ MaxCell2DBits + 1 ] [ 3 2 ] [ 2 ] ; const int32 Cell3DDirectionNumbers [ MaxCell3DBits + 1 ] [ 3 2 ] [ 3 ] ; const int32 Cell3DGrayNumbers [ MaxCell3DBits + 1 ] [ 3 2 ] [ 3 ] ; public : float)",
    "insertText": "Evaluate(int32 Index, int32 Dim, int32 Seed = 0)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Next(int32 Index, int32 Dim, float Value)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Evaluate(int32 Index, int32 CellBits, FIntPoint Cell, FIntPoint Seed)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "Next(int32 Index, int32 CellBits, FVector2D Value)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Evaluate(int32 Index, int32 CellBits, FIntVector Cell, FIntVector Seed)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Next(int32 Index, int32 CellBits, FVector Value)"
  },
  {
    "label": "ComputeGPUSpatialSeed()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "ComputeGPUSpatialSeed(int32 x, int32 y, int32 Index)"
  }
]