[
  {
    "label": "SparseInnerVectorSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseInnerVectorSet"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_BLOCKFORDYNAMICMATRIX_H # define EIGEN_SPARSE_BLOCKFORDYNAMICMATRIX_H namespace Eigen { # if 0 template<_Scalar,int _Options,_Index,int Size> class SparseInnerVectorSet<DynamicSparseMatrix<_Scalar,_Options,_Index>,Size> : public SparseMatrixBase<SparseInnerVectorSet<DynamicSparseMatrix<_Scalar,_Options,_Index>,Size>> { typedef DynamicSparseMatrix<_Scalar,_Options,_Index> MatrixType ; public : enum { IsRowMajor = internal::traits<SparseInnerVectorSet>::IsRowMajor } ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(SparseInnerVectorSet)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "InnerIterator(const SparseInnerVectorSet& xpr, Index outer) : MatrixType::InnerIterator(xpr.m_matrix, xpr.m_outerStart + outer), m_outer(outer)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "SparseInnerVectorSet()",
    "kind": "Method",
    "detail": "Function (} protected : Index m_outer ; } ;)",
    "insertText": "SparseInnerVectorSet(const MatrixType& matrix, Index outerStart, Index outerSize) : m_matrix(matrix), m_outerStart(outerStart), m_outerSize(outerSize)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((outerStart>=0) && ((outerStart+outerSize)<=matrix.outerSize()))"
  },
  {
    "label": "SparseInnerVectorSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseInnerVectorSet(const MatrixType& matrix, Index outer) : m_matrix(matrix), m_outerStart(outer), m_outerSize(Size)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Size!=Dynamic)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((outer>=0) && (outer<matrix.outerSize()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> SparseInnerVectorSet&)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "aux()",
    "kind": "Method",
    "detail": "Function (DynamicSparseMatrix<Scalar,IsRowMajor ? RowMajorBit : 0>)",
    "insertText": "aux(other)"
  },
  {
    "label": "markAsRValue()",
    "kind": "Method",
    "detail": "Function (* this = aux .)",
    "insertText": "markAsRValue()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(Index j=0; j<m_outerSize.value(); ++j)"
  },
  {
    "label": "aux()",
    "kind": "Method",
    "detail": "Function (SparseVector<Scalar,IsRowMajor ? RowMajorBit : 0>)",
    "insertText": "aux(other.innerVector(j))"
  },
  {
    "label": "const_cast_derived()",
    "kind": "Method",
    "detail": "Function (m_matrix .)",
    "insertText": "const_cast_derived()._data()[m_outerStart+j].swap(aux._data())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } SparseInnerVectorSet&)",
    "insertText": "operator(const SparseInnerVectorSet& other)"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZeros()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index count = 0 ;)",
    "insertText": "for(Index j=0; j<m_outerSize.value(); ++j) count += m_matrix._data()[m_outerStart+j].size()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(SparseInnerVectorSet)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_matrix.data()[m_outerStart].size()>0)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "cols()"
  }
]