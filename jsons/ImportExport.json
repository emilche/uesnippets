[
  {
    "label": "FDebugLightingCacheRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugLightingCacheRecord"
  },
  {
    "label": "FDebugLightingOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugLightingOutput"
  },
  {
    "label": "FDebugOctreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugOctreeNode"
  },
  {
    "label": "FDebugPhoton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugPhoton"
  },
  {
    "label": "FDebugStaticLightingRay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugStaticLightingRay"
  },
  {
    "label": "FDebugStaticLightingVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugStaticLightingVertex"
  },
  {
    "label": "FDebugVolumeLightingSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugVolumeLightingSample"
  },
  {
    "label": "ESourceObjectType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESourceObjectType"
  },
  {
    "label": "FLightSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightSampleData"
  },
  {
    "label": "FLightSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSample"
  },
  {
    "label": "FQuantizedLightSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedLightSampleData"
  },
  {
    "label": "FLightMapDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightMapDataBase"
  },
  {
    "label": "FLightMapData2DData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightMapData2DData"
  },
  {
    "label": "FShadowMapDataBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadowMapDataBase"
  },
  {
    "label": "FShadowSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadowSampleData"
  },
  {
    "label": "FQuantizedShadowSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedShadowSampleData"
  },
  {
    "label": "FShadowMapData2DData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadowMapData2DData"
  },
  {
    "label": "FSignedDistanceFieldShadowSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSignedDistanceFieldShadowSampleData"
  },
  {
    "label": "FQuantizedSignedDistanceFieldShadowSampleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedSignedDistanceFieldShadowSampleData"
  },
  {
    "label": "FSignedDistanceFieldShadowMapData2DData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSignedDistanceFieldShadowMapData2DData"
  },
  {
    "label": "FVolumeLightingSampleData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumeLightingSampleData"
  },
  {
    "label": "FIrradianceVoxelImportProcessingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIrradianceVoxelImportProcessingData"
  },
  {
    "label": "FStaticShadowDepthMapSampleData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticShadowDepthMapSampleData"
  },
  {
    "label": "FStaticShadowDepthMapData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticShadowDepthMapData"
  },
  {
    "label": "FMeshAreaLightData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshAreaLightData"
  },
  {
    "label": "FVolumeLightingDebugOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumeLightingDebugOutput"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / Array . h \" # include \" Math / UnrealMathUtility . h \" # include \" Containers / UnrealString . h \" # include \" Math / Color . h \" # include \" Math / Vector . h \" # include \" Math / Vector4 . h \" # include \" Math / Matrix . h \" # include \" Math / Float16 . h \" # include \" Misc / Guid . h \" # include \" SceneExport . h \" struct FDebugLightingCacheRecord ; struct FDebugLightingOutput ; struct FDebugOctreeNode ; struct FDebugPhoton ; struct FDebugStaticLightingRay ; struct FDebugStaticLightingVertex ; struct FDebugVolumeLightingSample ; namespace Lightmass { # define LM_COMPRESS_INPUT_DATA 1 # define LM_NUM_SH_COEFFICIENTS 9 const int32 LM_NUM_STORED_LIGHTMAP_COEF = 4 ; const int32 LM_NUM_HQ_LIGHTMAP_COEF = 2 ; const int32 LM_LQ_LIGHTMAP_COEF_INDEX = 2 ; const TCHAR LM_TEXTUREMAPPING_EXTENSION [ ] =)",
    "insertText": "TEXT(\"tmap\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_VOLUMESAMPLES_EXTENSION [ ] =)",
    "insertText": "TEXT(\"vols\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_VOLUMEDEBUGOUTPUT_EXTENSION [ ] =)",
    "insertText": "TEXT(\"vold\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_VOLUMETRICLIGHTMAP_EXTENSION [ ] =)",
    "insertText": "TEXT(\"irvol\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_PRECOMPUTEDVISIBILITY_EXTENSION [ ] =)",
    "insertText": "TEXT(\"vis\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_DOMINANTSHADOW_EXTENSION [ ] =)",
    "insertText": "TEXT(\"doms\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_MESHAREALIGHTDATA_EXTENSION [ ] =)",
    "insertText": "TEXT(\"arealights\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_DEBUGOUTPUT_EXTENSION [ ] =)",
    "insertText": "TEXT(\"dbgo\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# if LM_COMPRESS_INPUT_DATA const TCHAR LM_SCENE_EXTENSION [ ] =)",
    "insertText": "TEXT(\"scenegz\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_STATICMESH_EXTENSION [ ] =)",
    "insertText": "TEXT(\"meshgz\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_MATERIAL_EXTENSION [ ] =)",
    "insertText": "TEXT(\"mtrlgz\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# else const TCHAR LM_SCENE_EXTENSION [ ] =)",
    "insertText": "TEXT(\"scene\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_STATICMESH_EXTENSION [ ] =)",
    "insertText": "TEXT(\"mesh\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR LM_MATERIAL_EXTENSION [ ] =)",
    "insertText": "TEXT(\"mtrl\")"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# endif const int32 LM_TEXTUREMAPPING_VERSION = 2 ; const int32 LM_VOLUMESAMPLES_VERSION = 2 ; const int32 LM_VOLUMETRICLIGHTMAP_VERSION = 4 ; const int32 LM_PRECOMPUTEDVISIBILITY_VERSION = 2 ; const int32 LM_VOLUMEDEBUGOUTPUT_VERSION = 2 ; const int32 LM_DOMINANTSHADOW_VERSION = 2 ; const int32 LM_MESHAREALIGHTDATA_VERSION = 2 ; const int32 LM_DEBUGOUTPUT_VERSION = 2 ; const int32 LM_SCENE_VERSION = 2 ; const int32 LM_STATICMESH_VERSION = 2 ; const int32 LM_MATERIAL_VERSION = 2 ; enum ESourceObjectType { SOURCEOBJECTTYPE_Unknown = 0,SOURCEOBJECTTYPE_Scene,SOURCEOBJECTTYPE_Material,SOURCEOBJECTTYPE_BSP,SOURCEOBJECTTYPE_StaticMesh,SOURCEOBJECTTYPE_Fluid,SOURCEOBJECTTYPE_SpeedTree,SOURCEOBJECTTYPE_TextureMapping,SOURCEOBJECTTYPE_VertexMapping,SOURCEOBJECTTYPE_Mapping } ; # if ! PLATFORM_MAC&& ! PLATFORM_LINUX # pragma)",
    "insertText": "pack(push, 1)"
  },
  {
    "label": "FLightSampleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLightSampleData()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (bIsMapped = false ;)",
    "insertText": "Memzero(Coefficients,sizeof(Coefficients))"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (SkyOcclusion [ 0 ] = 0 ; SkyOcclusion [ 1 ] = 0 ; SkyOcclusion [ 2 ] = 0 ; AOMaterialMask = 0 ; } float Coefficients [ LM_NUM_STORED_LIGHTMAP_COEF ] [ 3 ] ; float SkyOcclusion [ 3 ] ; float AOMaterialMask ; bool bIsMapped ; FColor)",
    "insertText": "GetColor(int32 Component)"
  },
  {
    "label": "FLightSample()",
    "kind": "Method",
    "detail": "Function (} } ; class FLightSample : public FLightSampleData { public :)",
    "insertText": "FLightSample() : FLightSampleData()"
  },
  {
    "label": "FLightSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLightSample(EForceInit) : FLightSampleData()"
  },
  {
    "label": "FLightMapData2DData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FQuantizedLightSampleData { uint8 Coverage ; uint8 Coefficients [ LM_NUM_STORED_LIGHTMAP_COEF ] [ 4 ] ; uint8 SkyOcclusion [ 4 ] ; uint8 AOMaterialMask ; } ; struct FLightMapDataBase { uint32 CompressedDataSize ; uint32 UncompressedDataSize ; float Multiply [ LM_NUM_STORED_LIGHTMAP_COEF ] [ 4 ] ; float Add [ LM_NUM_STORED_LIGHTMAP_COEF ] [ 4 ] ; } ; struct FLightMapData2DData : public FLightMapDataBase {)",
    "insertText": "FLightMapData2DData(uint32 InSizeX,uint32 InSizeY): SizeX(InSizeX), SizeY(InSizeY), bHasSkyShadowing(false)"
  },
  {
    "label": "Gray()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "Gray(uint8)FMath::Clamp<int32>(Visibility * 255, 0, 255)"
  },
  {
    "label": "FShadowMapData2DData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FQuantizedShadowSampleData { uint8 Visibility ; uint8 Coverage ; } ; struct FShadowMapData2DData : public FShadowMapDataBase {)",
    "insertText": "FShadowMapData2DData(uint32 InSizeX,uint32 InSizeY): SizeX(InSizeX), SizeY(InSizeY)"
  },
  {
    "label": "FSignedDistanceFieldShadowMapData2DData()",
    "kind": "Method",
    "detail": "Function (} uint32 SizeX ; uint32 SizeY ; } ; struct FSignedDistanceFieldShadowSampleData { float Distance ; float PenumbraSize ; bool bIsMapped ; } ; struct FQuantizedSignedDistanceFieldShadowSampleData { uint8 Distance ; uint8 PenumbraSize ; uint8 Coverage ; } ; struct FSignedDistanceFieldShadowMapData2DData : public FShadowMapData2DData {)",
    "insertText": "FSignedDistanceFieldShadowMapData2DData(uint32 InSizeX,uint32 InSizeY): FShadowMapData2DData(InSizeX, InSizeY)"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (} } ; class FVolumeLightingSampleData { public : FVector4f PositionAndRadius ; float HighQualityCoefficients [ LM_NUM_SH_COEFFICIENTS ] [ 3 ] ; float LowQualityCoefficients [ LM_NUM_SH_COEFFICIENTS ] [ 3 ] ; FVector3f SkyBentNormal ; float DirectionalLightShadowing ; } ; struct FIrradianceVoxelImportProcessingData { bool bInsideGeometry ; bool bBorderVoxel ; float ClosestGeometryDistance ; } ; class FStaticShadowDepthMapSampleData { public : FFloat16 Distance ; } ; class FStaticShadowDepthMapData { public : FMatrix44f WorldToLight ; int32 ShadowMapSizeX ; int32 ShadowMapSizeY ; } ; const FGuid MeshAreaLightDataGuid =)",
    "insertText": "FGuid(0xe11f4760, 0xfa454d2b, 0xa090c388, 0x33326646)"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid VolumeDistanceFieldGuid =)",
    "insertText": "FGuid(0x4abf306e, 0x4c2f4a6e, 0x9feb5fa4, 0x5b910a8f)"
  },
  {
    "label": "FDebugStaticLightingRay()",
    "kind": "Method",
    "detail": "Function (class FMeshAreaLightData { public : FGuid LevelGuid ; FVector4f Position ; FVector4f Direction ; float Radius ; float ConeAngle ; FColor Color ; float Brightness ; float FalloffExponent ; } ; struct FDebugStaticLightingRay { FVector4f Start ; FVector4f End ; bool bHit ; bool bPositive ;)",
    "insertText": "FDebugStaticLightingRay()"
  },
  {
    "label": "FDebugStaticLightingRay()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugStaticLightingRay(const FVector4f& InStart, const FVector4f& InEnd, bool bInHit, bool bInPositive = false) : Start(InStart), End(InEnd), bHit(bInHit), bPositive(bInPositive)"
  },
  {
    "label": "FDebugLightingCacheRecord()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDebugStaticLightingVertex { FVector4f VertexNormal ; FVector4f VertexPosition ; } ; struct FDebugLightingCacheRecord { bool bNearSelectedTexel ; bool bAffectsSelectedTexel ; int32 RecordId ; FDebugStaticLightingVertex Vertex ; float Radius ;)",
    "insertText": "FDebugLightingCacheRecord() : bNearSelectedTexel(false), bAffectsSelectedTexel(false)"
  },
  {
    "label": "FDebugPhoton()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDebugPhoton { int32 Id ; FVector4f Position ; FVector4f Direction ; FVector4f Normal ;)",
    "insertText": "FDebugPhoton() : Id(-1)"
  },
  {
    "label": "FDebugPhoton()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDebugPhoton(int32 InId, const FVector4f& InPosition, const FVector4f& InDirection, const FVector4f& InNormal) : Id(InId), Position(InPosition), Direction(InDirection), Normal(InNormal)"
  },
  {
    "label": "FDebugOctreeNode()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDebugOctreeNode { FVector4f Center ; FVector4f Extent ;)",
    "insertText": "FDebugOctreeNode(const FVector4f& InCenter, const FVector4f& InExtent) : Center(InCenter), Extent(InExtent)"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (} } ; const FGuid DebugOutputGuid =)",
    "insertText": "FGuid(0x23219c9e, 0xb5934266, 0xb2144a7d, 0x3448abac)"
  },
  {
    "label": "FDebugLightingOutput()",
    "kind": "Method",
    "detail": "Function (struct FDebugLightingOutput { bool bValid ; TArray<FDebugStaticLightingRay> PathRays ; TArray<FDebugStaticLightingRay> ShadowRays ; TArray<FDebugStaticLightingRay> IndirectPhotonPaths ; TArray<int32> SelectedVertexIndices ; TArray<FDebugStaticLightingVertex> Vertices ; TArray<FDebugLightingCacheRecord> CacheRecords ; TArray<FDebugPhoton> DirectPhotons ; TArray<FDebugPhoton> IndirectPhotons ; TArray<FDebugPhoton> IrradiancePhotons ; TArray<FDebugPhoton> GatheredPhotons ; TArray<FDebugPhoton> GatheredImportancePhotons ; TArray<FDebugOctreeNode> GatheredPhotonNodes ; bool bDirectPhotonValid ; FDebugPhoton GatheredDirectPhoton ; FVector4f TexelCorners [ NumTexelCorners ] ; bool bCornerValid [ NumTexelCorners ] ; float SampleRadius ;)",
    "insertText": "FDebugLightingOutput() : bValid(false), bDirectPhotonValid(false)"
  },
  {
    "label": "FDebugVolumeLightingSample()",
    "kind": "Method",
    "detail": "Function (bCornerValid [ CornerIndex ] = false ; } } } ; struct FDebugVolumeLightingSample { FVector4f PositionAndRadius ; FLinearColor AverageIncidentRadiance ;)",
    "insertText": "FDebugVolumeLightingSample(const FVector4f& InPositionAndRadius, const FLinearColor& InAverageIncidentRadiance) : PositionAndRadius(InPositionAndRadius), AverageIncidentRadiance(InAverageIncidentRadiance)"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVolumeLightingDebugOutput { TArray<FDebugVolumeLightingSample> VolumeLightingSamples ; } ; const FGuid VolumeLightingDebugOutputGuid =)",
    "insertText": "FGuid(0x1e8119ff, 0xa46f48f8, 0x92b18d49, 0x172c5832)"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid PrecomputedVolumeLightingGuid =)",
    "insertText": "FGuid(0xce97c5c3, 0xab614fd3, 0xb2da55c0, 0xe6c33fb4)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# if ! PLATFORM_MAC&& ! PLATFORM_LINUX # pragma)",
    "insertText": "pack(pop) #endif FORCEINLINE FString CreateChannelNameWithLMExecutableHash(const FGuid& Guid, const int32 Version, const FSHAHash& LMExecutableHash, const FString& Extension)"
  },
  {
    "label": "CreateChannelName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "CreateChannelName(const FGuid& Guid, const int32 Version, const FString& Extension)"
  },
  {
    "label": "CreateChannelNameWithLMExecutableHash()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "CreateChannelNameWithLMExecutableHash(const FSHAHash& Hash, const int32 Version, const FSHAHash& LMExecutableHash, const FString& Extension)"
  }
]