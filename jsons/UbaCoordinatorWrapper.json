[
  {
    "label": "CoordinatorWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CoordinatorWrapper"
  },
  {
    "label": "LoadLibrary()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaCoordinator . h \" # include \" UbaFile . h \" # include \" UbaNetworkServer . h \" # include \" UbaScheduler . h \" # include \" UbaStringBuffer . h \" # if ! PLATFORM_WINDOWS # include<dlfcn . h> # define GetProcAddress dlsym # define)",
    "insertText": "LoadLibrary(name) dlopen(name, RTLD_LAZY)"
  },
  {
    "label": "dlerror()",
    "kind": "Method",
    "detail": "Function (# define LoadLibraryError)",
    "insertText": "dlerror() #define HMODULE void* #else #define LoadLibraryError LastErrorToText()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (class CoordinatorWrapper { public : bool)",
    "insertText": "Create(Logger& logger, const tchar* coordinatorType, const CoordinatorCreateInfo& info, NetworkBackend& networkBackend, NetworkServer& networkServer, Scheduler* scheduler = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UbaCreateCoordinatorFunc* createCoordinator = nullptr ;)",
    "insertText": "if(!*coordinatorType)"
  },
  {
    "label": "coordinatorBin()",
    "kind": "Method",
    "detail": "Function (StringBuffer<1 2 8>)",
    "insertText": "coordinatorBin(info.binariesDir)"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (coordinatorBin .)",
    "insertText": "EnsureEndsWithSlash()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS coordinatorBin .)",
    "insertText": "Append(TC(\"UbaCoordinator\")).Append(coordinatorType).Append(TC(\".dll\"))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (# else coordinatorBin .)",
    "insertText": "Append(TC(\"libUbaCoordinator\")).Append(coordinatorType).Append(TC(\".so\"))"
  },
  {
    "label": "LoadLibrary()",
    "kind": "Method",
    "detail": "Function (# endif HMODULE coordinatorModule =)",
    "insertText": "LoadLibrary(coordinatorBin.data)"
  },
  {
    "label": "createCoordinator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createCoordinator(UbaCreateCoordinatorFunc*)(void*)GetProcAddress(coordinatorModule,\"UbaCreateCoordinator\")"
  },
  {
    "label": "m_destroyCoordinator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_destroyCoordinator(UbaDestroyCoordinatorFunc*)(void*)GetProcAddress(coordinatorModule, \"UbaDestroyCoordinator\")"
  },
  {
    "label": "createCoordinator()",
    "kind": "Method",
    "detail": "Function (m_coordinator =)",
    "insertText": "createCoordinator(info)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (m_loopCoordinator .)",
    "insertText": "Create(true)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (m_networkBackend =& networkBackend ; m_networkServer =& networkServer ; m_scheduler = scheduler ; m_coordinatorThread .)",
    "insertText": "Start([this, mcc = info.maxCoreCount]() { ThreadUpdate(mcc); return 0; })"
  },
  {
    "label": "SetAddClientCallback()",
    "kind": "Method",
    "detail": "Function (m_coordinator ->)",
    "insertText": "SetAddClientCallback([](void* userData, const tchar* ip, u16 port) { auto& cw = *(CoordinatorWrapper*)userData; return cw.m_networkServer->AddClient(*cw.m_networkBackend, ip, port); }, this)"
  },
  {
    "label": "SetTargetCoreCount()",
    "kind": "Method",
    "detail": "Function (m_coordinator ->)",
    "insertText": "SetTargetCoreCount(coreCount)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(!m_loopCoordinator.IsSet(3000))"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (m_loopCoordinator .)",
    "insertText": "Set()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (m_coordinatorThread .)",
    "insertText": "Wait()"
  },
  {
    "label": "m_destroyCoordinator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_destroyCoordinator(m_coordinator)"
  }
]