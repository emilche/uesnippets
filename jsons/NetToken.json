[
  {
    "label": "FNetTokenStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStore"
  },
  {
    "label": "FNetTokenStoreState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenStoreState"
  },
  {
    "label": "FNetToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetToken"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "FNetTokenResolveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetTokenResolveContext"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Templates / TypeHash . h \" # include \" Logging / LogMacros . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNetToken, Log, All)"
  },
  {
    "label": "FTypeId()",
    "kind": "Method",
    "detail": "Function (namespace UE::Net { class FNetTokenStore ; class FNetTokenStoreState ; } namespace UE::Net { class FNetToken { public : typedef uint32 FTypeId ; enum : uint32 { Invalid = 0 U } ; enum : uint32 { InvalidTokenTypeId = ~)",
    "insertText": "FTypeId(0)"
  },
  {
    "label": "FNetToken()",
    "kind": "Method",
    "detail": "Function (enum : uint32 { InvalidTokenIndex = 0 U } ; enum : uint32 { TokenTypeIdBits = 3 U } ; enum : uint32 { TokenBits = 2 0 U } ; enum : uint32 { MaxTypeIdCount = 1 U<<TokenTypeIdBits } ; enum : uint32 { MaxNetTokenCount = 1 U<<TokenBits } ; enum class ENetTokenAuthority { None,Authority,} ; public :)",
    "insertText": "FNetToken() : Value(Invalid)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FNetToken& Token)"
  },
  {
    "label": "FNetToken()",
    "kind": "Method",
    "detail": "Function (} private : class UE::Net::FNetTokenStore ;)",
    "insertText": "FNetToken(uint32 InTypeId, uint32 InIndex, ENetTokenAuthority Authority)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Padding = 0 U ; TypeId = InTypeId ; Index = InIndex ; bIsAssignedByAuthority = Authority = = ENetTokenAuthority::Authority ? 1 U : 0 U ; } private : union { struct { uint32 Index : TokenBits ; uint32 TypeId : TokenTypeIdBits ; uint32 bIsAssignedByAuthority : 1 U ; uint32 Padding : 3 2 - TokenTypeIdBits - TokenBits - 1 U ; } ; uint32 Value ; } ; } ; class FNetTokenResolveContext { public : FNetTokenStore* NetTokenStore = nullptr ; const FNetTokenStoreState* RemoteNetTokenStoreState = nullptr ; } ; FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (FString Result ; Result =)",
    "insertText": "Printf(TEXT(\"NetToken (Auth:%u TypeId=%u Index=%u)\"), IsAssignedByAuthority(), TypeId, Index)"
  }
]