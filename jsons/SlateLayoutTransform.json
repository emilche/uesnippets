[
  {
    "label": "FSlateLayoutTransform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateLayoutTransform"
  },
  {
    "label": "ConcatenateRules",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConcatenateRules"
  },
  {
    "label": "FSlateLayoutTransform()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / TransformCalculus . h \" # include \" Math / TransformCalculus2D . h \" # include \" Types / SlateVector2 . h \" class FSlateLayoutTransform { public :)",
    "insertText": "FSlateLayoutTransform(float InScale = 1.0f) : Scale(InScale) , Translation(FVector2f(ForceInit))"
  },
  {
    "label": "FSlateLayoutTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateLayoutTransform(float InScale, const UE::Slate::FDeprecateVector2DParameter& InTranslation) : Scale(InScale) , Translation(FVector2f(InTranslation))"
  },
  {
    "label": "FSlateLayoutTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSlateLayoutTransform(const UE::Slate::FDeprecateVector2DParameter& InTranslation) :Scale(1.0f) ,Translation(FVector2f(InTranslation))"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetScale()"
  },
  {
    "label": "FScaleMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix Matrix =)",
    "insertText": "FScaleMatrix(GetScale())"
  },
  {
    "label": "SetOrigin()",
    "kind": "Method",
    "detail": "Function (Matrix .)",
    "insertText": "SetOrigin(FVector(FVector2d(Translation), 0.0f))"
  },
  {
    "label": "TransformVector()",
    "kind": "Method",
    "detail": "Function (} UE::Slate::FDeprecateVector2DResult)",
    "insertText": "TransformVector(const UE::Slate::FDeprecateVector2DParameter& Vector)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} FSlateLayoutTransform)",
    "insertText": "Concatenate(const FSlateLayoutTransform& RHS)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} FSlateLayoutTransform)",
    "insertText": "Inverse()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSlateLayoutTransform& Other)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} private : float Scale ; FVector2f Translation ; } ; template<T> FSlateLayoutTransform)",
    "insertText": "Concatenate(float Scale, const UE::Math::TVector2<T>& Translation)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<T> FSlateLayoutTransform)",
    "insertText": "Concatenate(double Scale, const UE::Math::TVector2<T>& Translation)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<T> FSlateLayoutTransform)",
    "insertText": "Concatenate(const UE::Math::TVector2<T>& Translation, float Scale)"
  },
  {
    "label": "Concatenate()",
    "kind": "Method",
    "detail": "Function (} template<T> FSlateLayoutTransform)",
    "insertText": "Concatenate(const UE::Math::TVector2<T>& Translation, double Scale)"
  },
  {
    "label": "FSlateLayoutTransform()",
    "kind": "Method",
    "detail": "Function (} template<> struct ConcatenateRules<FSlateLayoutTransform,float> { typedef FSlateLayoutTransform ResultType ; } ; template<> struct ConcatenateRules<FSlateLayoutTransform,double> { typedef FSlateLayoutTransform ResultType ; } ; template<> struct ConcatenateRules<float,FSlateLayoutTransform> { typedef FSlateLayoutTransform ResultType ; } ; template<> struct ConcatenateRules<double,FSlateLayoutTransform> { typedef FSlateLayoutTransform ResultType ; } ; template<T> struct ConcatenateRules<FSlateLayoutTransform,UE::Math::TVector2<T>> { typedef FSlateLayoutTransform ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TVector2<T>,FSlateLayoutTransform> { typedef FSlateLayoutTransform ResultType ; } ; template<T> struct ConcatenateRules<FSlateLayoutTransform,UE::Math::TMatrix<T>> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<UE::Math::TMatrix<T>,FSlateLayoutTransform> { typedef UE::Math::TMatrix<T> ResultType ; } ; template<T> struct ConcatenateRules<TScale2<T>,FSlateLayoutTransform> { typedef TTransform2<T> ResultType ; } ; template<T> struct ConcatenateRules<TShear2<T>,FSlateLayoutTransform> { typedef TTransform2<T> ResultType ; } ; template<T> struct ConcatenateRules<TQuat2<T>,FSlateLayoutTransform> { typedef TTransform2<T> ResultType ; } ; template<T> struct ConcatenateRules<TMatrix2x2<T>,FSlateLayoutTransform> { typedef TTransform2<T> ResultType ; } ; template<T> struct ConcatenateRules<FSlateLayoutTransform,TScale2<T>> { typedef TTransform2<T> ResultType ; } ; template<T> struct ConcatenateRules<FSlateLayoutTransform,TShear2<T>> { typedef TTransform2<T> ResultType ; } ; template<T> struct ConcatenateRules<FSlateLayoutTransform,TQuat2<T>> { typedef TTransform2<T> ResultType ; } ; template<T> struct ConcatenateRules<FSlateLayoutTransform,TMatrix2x2<T>> { typedef TTransform2<T> ResultType ; } ; template<> template<> TTransform2<float> TransformConverter<TTransform2<float>>::Convert<)",
    "insertText": "FSlateLayoutTransform(const FSlateLayoutTransform& Transform)"
  }
]