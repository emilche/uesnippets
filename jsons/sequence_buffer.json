[
  {
    "label": "SequenceBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceBuffer"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_SEQUENCE_BUFFER_H_ # define MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_SEQUENCE_BUFFER_H_ # include<algorithm> # include<cstring> # include<type_traits> # include<vector> # include \" api / array_view . h \" # include \" rtc_base / checks . h \" namespace webrtc { namespace rnn_vad { template<T,int S,int N,int M = N> class SequenceBuffer {)",
    "insertText": "static_assert(N <= S, \"The new chunk size cannot be larger than the sequence buffer \" \"size.\")"
  },
  {
    "label": "SequenceBuffer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SequenceBuffer() : buffer_(S)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(S, buffer_.size())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SequenceBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SequenceBuffer(const SequenceBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceBuffer&)",
    "insertText": "operator(const SequenceBuffer&)"
  },
  {
    "label": "SequenceBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SequenceBuffer()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "size()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(buffer_.begin(), buffer_.end(), 0)"
  },
  {
    "label": "GetBufferView()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const T,S>)",
    "insertText": "GetBufferView()"
  },
  {
    "label": "GetMostRecentValuesView()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const T,M>)",
    "insertText": "GetMostRecentValuesView()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(rtc::ArrayView<const T, N> new_values)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer_.data() + S - N, new_values.data(), N * sizeof(T))"
  }
]