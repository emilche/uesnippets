[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SYSLOG_STREAM()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYSLOG_LOGGING_H_ # define BASE_SYSLOG_LOGGING_H_ # include<iosfwd> # include \" base / base_export . h \" # include \" base / logging . h \" # include \" build / build_config . h \" namespace logging { # define)",
    "insertText": "SYSLOG_STREAM(severity) \\ COMPACT_GOOGLE_LOG_EX_ ## severity(EventLogMessage).stream() #define SYSLOG(severity) \\ SYSLOG_STREAM(severity) #if BUILDFLAG(IS_WIN) void BASE_EXPORT SetEventSource(const std::string& name, uint16_t category, uint32_t event_id)"
  },
  {
    "label": "ResetEventSourceForTesting()",
    "kind": "Method",
    "detail": "Function (void BASE_EXPORT)",
    "insertText": "ResetEventSourceForTesting()"
  },
  {
    "label": "EventLogMessage()",
    "kind": "Method",
    "detail": "Function (# endif class BASE_EXPORT EventLogMessage { public :)",
    "insertText": "EventLogMessage(const char* file, int line, LogSeverity severity)"
  },
  {
    "label": "EventLogMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventLogMessage(const EventLogMessage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EventLogMessage&)",
    "insertText": "operator(const EventLogMessage&)"
  },
  {
    "label": "EventLogMessage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EventLogMessage()"
  },
  {
    "label": "stream()",
    "kind": "Method",
    "detail": "Function (std::ostream&)",
    "insertText": "stream()"
  },
  {
    "label": "SetSyslogLoggingForTesting()",
    "kind": "Method",
    "detail": "Function (} private : LogMessage log_message_ ; } ; void BASE_EXPORT)",
    "insertText": "SetSyslogLoggingForTesting(bool logging_enabled)"
  }
]