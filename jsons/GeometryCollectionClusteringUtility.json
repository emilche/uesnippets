[
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "FGeometryCollectionClusteringUtility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionClusteringUtility"
  },
  {
    "label": "ClusterBonesUnderNewNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" class FGeometryCollection ; class FGeometryCollectionClusteringUtility { public : int32)",
    "insertText": "ClusterBonesUnderNewNode(FGeometryCollection* GeometryCollection, const int32 InsertAtIndex, const TArray<int32>& SelectedBones, bool CalcNewLocalTransform, bool Validate = true)"
  },
  {
    "label": "ClusterBonesUnderNewNodeWithParent()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ClusterBonesUnderNewNodeWithParent(FGeometryCollection* GeometryCollection, const int32 ParentOfNewNode, const TArray<int32>& SelectedBones, bool CalcNewLocalTransform, bool Validate = true)"
  },
  {
    "label": "ClusterAllBonesUnderNewRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClusterAllBonesUnderNewRoot(FGeometryCollection* GeometryCollection, FName RootName = NAME_None, bool bUpdateChildBoneNames = true)"
  },
  {
    "label": "ClusterBonesUnderExistingNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClusterBonesUnderExistingNode(FGeometryCollection* GeometryCollection, const TArray<int32>& SourceElements)"
  },
  {
    "label": "ClusterBonesUnderExistingNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClusterBonesUnderExistingNode(FGeometryCollection* GeometryCollection, int32 MergeNode, const TArray<int32>& SourceElements)"
  },
  {
    "label": "ClusterBonesByContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClusterBonesByContext(FGeometryCollection* GeometryCollection, int32 MergeNode, const TArray<int32>& SourceElementsIn)"
  },
  {
    "label": "ContainsMultipleRootBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsMultipleRootBones(FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "GetRootBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootBones(const FGeometryCollection* GeometryCollection, TArray<int32>& RootBonesOut)"
  },
  {
    "label": "IsARootBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsARootBone(const FGeometryCollection* GeometryCollection, int32 InBone)"
  },
  {
    "label": "GetClusteredBonesWithCommonParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetClusteredBonesWithCommonParent(const FGeometryCollection* GeometryCollection, int32 SourceBone, TArray<int32>& BonesOut)"
  },
  {
    "label": "GetBonesToLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBonesToLevel(const FGeometryCollection* GeometryCollection, int32 Level, TArray<int32>& BonesOut, bool bOnlyClusteredOrRigid = true, bool bSkipFiltered = true)"
  },
  {
    "label": "GetChildBonesFromLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildBonesFromLevel(const FGeometryCollection* GeometryCollection, int32 SourceBone, int32 Level, TArray<int32>& BonesOut)"
  },
  {
    "label": "GetChildBonesAtLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildBonesAtLevel(const FGeometryCollection* GeometryCollection, int32 SourceBone, int32 Level, TArray<int32>& BonesOut)"
  },
  {
    "label": "RecursiveAddAllChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursiveAddAllChildren(const TManagedArray<TSet<int32>>& Children, int32 SourceBone, TArray<int32>& BonesOut)"
  },
  {
    "label": "GetParentOfBoneAtSpecifiedLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParentOfBoneAtSpecifiedLevel(const FGeometryCollection* GeometryCollection, int32 SourceBone, int32 Level, bool bSkipFiltered = false)"
  },
  {
    "label": "RecursivelyUpdateChildBoneNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursivelyUpdateChildBoneNames(int32 BoneIndex, const TManagedArray<TSet<int32>>& Children, TManagedArray<FString>& BoneNames, bool OverrideBoneNames = false)"
  },
  {
    "label": "UpdateHierarchyLevelOfChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchyLevelOfChildren(FGeometryCollection* GeometryCollection, int32 ParentElement)"
  },
  {
    "label": "UpdateHierarchyLevelOfChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchyLevelOfChildren(FManagedArrayCollection& InCollection, int32 ParentElement)"
  },
  {
    "label": "CollapseLevelHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseLevelHierarchy(int8 Level, FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "CollapseSelectedHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseSelectedHierarchy(int8 Level, const TArray<int32>& SelectedBones, FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "ClusterBonesUnderExistingRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClusterBonesUnderExistingRoot(FGeometryCollection* GeometryCollection, const TArray<int32>& SourceElements)"
  },
  {
    "label": "CollapseHierarchyOneLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseHierarchyOneLevel(FGeometryCollection* GeometryCollection, TArray<int32>& SourceElements)"
  },
  {
    "label": "NodeExistsOnThisBranch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NodeExistsOnThisBranch(const FGeometryCollection* GeometryCollection, int32 TestNode, int32 TreeElement)"
  },
  {
    "label": "RenameBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameBone(FGeometryCollection* GeometryCollection, int32 BoneIndex, const FString& NewName, bool UpdateChildren = true)"
  },
  {
    "label": "GetLeafBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLeafBones(const FManagedArrayCollection* GeometryCollection, int BoneIndex, bool bOnlyRigids, TArray<int32>& LeafBonesOut)"
  },
  {
    "label": "MoveUpOneHierarchyLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveUpOneHierarchyLevel(FGeometryCollection* GeometryCollection, const TArray<int32>& SelectedBones)"
  },
  {
    "label": "FindLowestCommonAncestor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLowestCommonAncestor(const FManagedArrayCollection* GeometryCollection, const TArray<int32>& SelectedBones)"
  },
  {
    "label": "RemoveDanglingClusters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveDanglingClusters(FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "RemoveClustersOfOnlyOneChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveClustersOfOnlyOneChild(FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "ValidateResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateResults(FGeometryCollection* GeometryCollection)"
  },
  {
    "label": "PickBestNodeToMergeTo()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PickBestNodeToMergeTo(const FManagedArrayCollection* Collection, const TArray<int32>& SourceElements)"
  },
  {
    "label": "ResetSliderTransforms()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetSliderTransforms(TManagedArray<FTransform>& ExplodedTransforms, TManagedArray<FTransform>& Transforms)"
  },
  {
    "label": "RecursivelyUpdateHierarchyLevelOfChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursivelyUpdateHierarchyLevelOfChildren(TManagedArray<int32>& Levels, const TManagedArray<TSet<int32>>& Children, int32 ParentElement)"
  },
  {
    "label": "FindLowestCommonAncestor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindLowestCommonAncestor(const FManagedArrayCollection* GeometryCollection, int32 N0, int32 N1)"
  }
]