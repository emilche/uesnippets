[
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "ScopedDisallowBlockingCalls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedDisallowBlockingCalls"
  },
  {
    "label": "ScopedCountBlockingCalls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCountBlockingCalls"
  },
  {
    "label": "CurrentThreadSetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrentThreadSetter"
  },
  {
    "label": "DelayedMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DelayedMessage"
  },
  {
    "label": "ThreadManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadManager"
  },
  {
    "label": "AutoThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoThread"
  },
  {
    "label": "AutoSocketServerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoSocketServerThread"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_THREAD_H_ # define RTC_BASE_THREAD_H_ # include<stdint . h> # include<list> # include<map> # include<memory> # include<queue> # include<set> # include<string> # include<type_traits> # include<utility> # include<vector> # include<atomic> # include \" absl / strings / string_view . h \" # if)",
    "insertText": "defined(WEBRTC_POSIX) #include <pthread.h> #endif #include \"absl/base/attributes.h\" #include \"absl/functional/any_invocable.h\" #include \"absl/types/optional.h\" #include \"api/function_view.h\" #include \"api/task_queue/task_queue_base.h\" #include \"api/units/time_delta.h\" #include \"rtc_base/checks.h\" #include \"rtc_base/deprecated/recursive_critical_section.h\" #include \"rtc_base/platform_thread_types.h\" #include \"rtc_base/socket_server.h\" #include \"rtc_base/synchronization/mutex.h\" #include \"rtc_base/system/rtc_export.h\" #include \"rtc_base/thread_annotations.h\" #include \"rtc_base/thread_observer.h\" #if defined(WEBRTC_WIN) #include \"rtc_base/win32.h\" #endif #if RTC_DCHECK_IS_ON #define RTC_LOG_THREAD_BLOCK_COUNT() \\ rtc::Thread::ScopedCountBlockingCalls blocked_call_count_printer( \\ [func = __func__](uint32_t actual_block, uint32_t could_block) { \\ auto total = actual_block + could_block; \\ if (total) { \\ RTC_LOG(LS_WARNING) << \"Blocking \" << func << \": total=\" << total \\ << \" (actual=\" << actual_block \\ << \", could=\" << could_block << \")\"; \\ } \\ }) #define RTC_DCHECK_BLOCK_COUNT_NO_MORE_THAN(x)"
  },
  {
    "label": "set_minimum_call_count_for_callback()",
    "kind": "Method",
    "detail": "Function (\\ blocked_call_count_printer .)",
    "insertText": "set_minimum_call_count_for_callback(x + 1)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "RTC_DCHECK_LE(blocked_call_count_printer.GetTotalBlockedCallCount(), x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #else #define RTC_LOG_THREAD_BLOCK_COUNT() #define RTC_DCHECK_BLOCK_COUNT_NO_MORE_THAN(x)"
  },
  {
    "label": "Instance()",
    "kind": "Method",
    "detail": "Function (class Thread ; class RTC_EXPORT ThreadManager { public : const int kForever = - 1 ; ThreadManager*)",
    "insertText": "Instance()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Thread* message_queue)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Thread* message_queue)"
  },
  {
    "label": "ProcessAllMessageQueuesForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAllMessageQueuesForTesting()"
  },
  {
    "label": "CurrentThread()",
    "kind": "Method",
    "detail": "Function (Thread*)",
    "insertText": "CurrentThread()"
  },
  {
    "label": "SetCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThread(Thread* thread)"
  },
  {
    "label": "ChangeCurrentThreadForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeCurrentThreadForTest(Thread* thread)"
  },
  {
    "label": "WrapCurrentThread()",
    "kind": "Method",
    "detail": "Function (Thread*)",
    "insertText": "WrapCurrentThread()"
  },
  {
    "label": "UnwrapCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnwrapCurrentThread()"
  },
  {
    "label": "RegisterSendAndCheckForCycles()",
    "kind": "Method",
    "detail": "Function (# if RTC_DCHECK_IS_ON void)",
    "insertText": "RegisterSendAndCheckForCycles(Thread* source, Thread* target)"
  },
  {
    "label": "ThreadManager()",
    "kind": "Method",
    "detail": "Function (# endif private :)",
    "insertText": "ThreadManager()"
  },
  {
    "label": "ThreadManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadManager(const ThreadManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadManager&)",
    "insertText": "operator(const ThreadManager&)"
  },
  {
    "label": "SetCurrentThreadInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThreadInternal(Thread* thread)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternal(Thread* message_queue)"
  },
  {
    "label": "RemoveInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInternal(Thread* message_queue)"
  },
  {
    "label": "ProcessAllMessageQueuesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAllMessageQueuesInternal()"
  },
  {
    "label": "RemoveFromSendGraph()",
    "kind": "Method",
    "detail": "Function (# if RTC_DCHECK_IS_ON void)",
    "insertText": "RemoveFromSendGraph(Thread* thread) RTC_EXCLUSIVE_LOCKS_REQUIRED(crit_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (# endif std::vector<Thread*> message_queues_)",
    "insertText": "RTC_GUARDED_BY(crit_)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_POSIX)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(WEBRTC_WIN)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (# endif } ; class RTC_LOCKABLE RTC_EXPORT Thread : public webrtc::TaskQueueBase { public : const int kForever = - 1 ;)",
    "insertText": "Thread(SocketServer* ss)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Thread(std::unique_ptr<SocketServer> ss)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Thread(SocketServer* ss, bool do_init)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Thread(std::unique_ptr<SocketServer> ss, bool do_init)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Thread()"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Thread(const Thread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Thread&)",
    "insertText": "operator(const Thread&)"
  },
  {
    "label": "CreateWithSocketServer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Thread>)",
    "insertText": "CreateWithSocketServer()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Thread>)",
    "insertText": "Create()"
  },
  {
    "label": "Current()",
    "kind": "Method",
    "detail": "Function (Thread*)",
    "insertText": "Current()"
  },
  {
    "label": "ScopedDisallowBlockingCalls()",
    "kind": "Method",
    "detail": "Function (class ScopedDisallowBlockingCalls { public :)",
    "insertText": "ScopedDisallowBlockingCalls()"
  },
  {
    "label": "ScopedDisallowBlockingCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedDisallowBlockingCalls(const ScopedDisallowBlockingCalls&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedDisallowBlockingCalls&)",
    "insertText": "operator(const ScopedDisallowBlockingCalls&)"
  },
  {
    "label": "ScopedCountBlockingCalls()",
    "kind": "Method",
    "detail": "Function (private : Thread* const thread_ ; const bool previous_state_ ; } ; # if RTC_DCHECK_IS_ON class ScopedCountBlockingCalls { public :)",
    "insertText": "ScopedCountBlockingCalls(std::function<void(uint32_t, uint32_t)> callback)"
  },
  {
    "label": "ScopedCountBlockingCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedCountBlockingCalls(const ScopedDisallowBlockingCalls&)"
  },
  {
    "label": "ScopedCountBlockingCalls()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedCountBlockingCalls()"
  },
  {
    "label": "GetBlockingCallCount()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetBlockingCallCount()"
  },
  {
    "label": "GetCouldBeBlockingCallCount()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetCouldBeBlockingCallCount()"
  },
  {
    "label": "GetTotalBlockedCallCount()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetTotalBlockedCallCount()"
  },
  {
    "label": "set_minimum_call_count_for_callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_minimum_call_count_for_callback(uint32_t minimum)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (min_blocking_calls_for_callback_ = minimum ; } private : Thread* const thread_ ; const uint32_t base_blocking_call_count_ ; const uint32_t base_could_be_blocking_call_count_ ; uint32_t min_blocking_calls_for_callback_ = 0 ; std::function<)",
    "insertText": "void(uint32_t, uint32_t)"
  },
  {
    "label": "socketserver()",
    "kind": "Method",
    "detail": "Function (# endif SocketServer*)",
    "insertText": "socketserver()"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "IsQuitting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsQuitting()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart()"
  },
  {
    "label": "IsProcessingMessagesForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcessingMessagesForTesting()"
  },
  {
    "label": "GetDelay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetDelay()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (webrtc::MutexLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "IsCurrent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCurrent()"
  },
  {
    "label": "SleepMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SleepMs(int millis)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "name()"
  },
  {
    "label": "GetAffinityMask()",
    "kind": "Method",
    "detail": "Function (absl::optional<ThreadAffinityMask>)",
    "insertText": "GetAffinityMask()"
  },
  {
    "label": "SetAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAffinityMask(absl::optional<ThreadAffinityMask> affinity_mask)"
  },
  {
    "label": "SetDispatchWarningMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDispatchWarningMs(int deadline)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "BlockingCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockingCall(FunctionView<void()> functor)"
  },
  {
    "label": "BlockingCall()",
    "kind": "Method",
    "detail": "Function (template<Functor,ReturnT = std::invoke_result_t<Functor>,= std::enable_if_t<! std::is_void_v<ReturnT>>> ReturnT)",
    "insertText": "BlockingCall(Functor&& functor)"
  },
  {
    "label": "DisallowAllInvokes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowAllInvokes()"
  },
  {
    "label": "IsInvokeToThreadAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvokeToThreadAllowed(rtc::Thread* target)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Delete()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostTask(absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedTask(absl::AnyInvocable<void() &&> task, webrtc::TimeDelta delay)"
  },
  {
    "label": "PostDelayedHighPrecisionTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDelayedHighPrecisionTask(absl::AnyInvocable<void() &&> task, webrtc::TimeDelta delay)"
  },
  {
    "label": "ProcessMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMessages(int cms)"
  },
  {
    "label": "IsOwned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOwned()"
  },
  {
    "label": "RunningForTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunningForTest()"
  },
  {
    "label": "WrapCurrent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WrapCurrent()"
  },
  {
    "label": "UnwrapCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnwrapCurrent()"
  },
  {
    "label": "DisallowBlockingCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowBlockingCalls()"
  },
  {
    "label": "SetAllowBlockingCalls()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowBlockingCalls(false)"
  },
  {
    "label": "CurrentThreadSetter()",
    "kind": "Method",
    "detail": "Function (} protected : class CurrentThreadSetter : CurrentTaskQueueSetter { public :)",
    "insertText": "CurrentThreadSetter(Thread* thread) : CurrentTaskQueueSetter(thread), manager_(rtc::ThreadManager::Instance()), previous_(manager_->CurrentThread())"
  },
  {
    "label": "ChangeCurrentThreadForTest()",
    "kind": "Method",
    "detail": "Function (manager_ ->)",
    "insertText": "ChangeCurrentThreadForTest(thread)"
  },
  {
    "label": "CurrentThreadSetter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CurrentThreadSetter()"
  },
  {
    "label": "ChangeCurrentThreadForTest()",
    "kind": "Method",
    "detail": "Function (manager_ ->)",
    "insertText": "ChangeCurrentThreadForTest(previous_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : rtc::ThreadManager* const manager_ ; rtc::Thread* const previous_ ; } ; struct DelayedMessage { bool)",
    "insertText": "operator(const DelayedMessage& dmsg)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} int64_t delay_ms ; int64_t run_time_ms ; uint32_t message_number ; absl::AnyInvocable<)",
    "insertText": "void()"
  },
  {
    "label": "DoInit()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DoInit()"
  },
  {
    "label": "DoDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoDestroy() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "WakeUpSocketServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUpSocketServer()"
  },
  {
    "label": "SafeWrapCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeWrapCurrent()"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join()"
  },
  {
    "label": "AssertBlockingIsAllowedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertBlockingIsAllowedOnCurrentThread()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (class ScopedDisallowBlockingCalls ; private : const int kSlowDispatchLoggingThreshold = 5 0 ; absl::AnyInvocable<)",
    "insertText": "void() &&> Get(int cmsWait)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dispatch(absl::AnyInvocable<void() &&> task)"
  },
  {
    "label": "SetAllowBlockingCalls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAllowBlockingCalls(bool allow)"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPriority(ThreadPriority priority)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(WEBRTC_WIN) static DWORD WINAPI PreRun(LPVOID context)"
  },
  {
    "label": "PreRun()",
    "kind": "Method",
    "detail": "Function (# else void*)",
    "insertText": "PreRun(void* pv)"
  },
  {
    "label": "WrapCurrentWithThreadManager()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "WrapCurrentWithThreadManager(ThreadManager* thread_manager, bool need_synchronize_access)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "EnsureIsCurrentTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureIsCurrentTaskQueue()"
  },
  {
    "label": "ClearCurrentTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentTaskQueue()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (std::queue<absl::AnyInvocable<)",
    "insertText": "void() &&>> messages_ RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::priority_queue<DelayedMessage> delayed_messages_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (# if RTC_DCHECK_IS_ON uint32_t blocking_call_count_)",
    "insertText": "RTC_GUARDED_BY(this)"
  },
  {
    "label": "AutoThread()",
    "kind": "Method",
    "detail": "Function (} ; class AutoThread : public Thread { public :)",
    "insertText": "AutoThread()"
  },
  {
    "label": "AutoThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoThread(const AutoThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AutoThread&)",
    "insertText": "operator(const AutoThread&)"
  },
  {
    "label": "AutoSocketServerThread()",
    "kind": "Method",
    "detail": "Function (} ; class AutoSocketServerThread : public Thread { public :)",
    "insertText": "AutoSocketServerThread(SocketServer* ss)"
  },
  {
    "label": "AutoSocketServerThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AutoSocketServerThread()"
  },
  {
    "label": "AutoSocketServerThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoSocketServerThread(const AutoSocketServerThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AutoSocketServerThread&)",
    "insertText": "operator(const AutoSocketServerThread&)"
  }
]