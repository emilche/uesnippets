[
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "RTC_LOCKABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_LOCKABLE"
  },
  {
    "label": "ScopedDisallowBlockingCalls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedDisallowBlockingCalls"
  },
  {
    "label": "ScopedCountBlockingCalls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCountBlockingCalls"
  },
  {
    "label": "CurrentThreadSetter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CurrentThreadSetter"
  },
  {
    "label": "DelayedMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DelayedMessage"
  },
  {
    "label": "ScopedDisallowBlockingCalls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedDisallowBlockingCalls"
  },
  {
    "label": "ThreadManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadManager"
  },
  {
    "label": "should",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "should"
  },
  {
    "label": "AutoThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoThread"
  },
  {
    "label": "AutoSocketServerThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoSocketServerThread"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Thread* message_queue)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Thread* message_queue)"
  },
  {
    "label": "ProcessAllMessageQueuesForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAllMessageQueuesForTesting()"
  },
  {
    "label": "SetCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThread(Thread* thread)"
  },
  {
    "label": "ChangeCurrentThreadForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeCurrentThreadForTest(Thread* thread)"
  },
  {
    "label": "UnwrapCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnwrapCurrentThread()"
  },
  {
    "label": "RegisterSendAndCheckForCycles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSendAndCheckForCycles(Thread* source, Thread* target)"
  },
  {
    "label": "ThreadManager()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "ThreadManager()"
  },
  {
    "label": "SetCurrentThreadInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentThreadInternal(Thread* thread)"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInternal(Thread* message_queue)"
  },
  {
    "label": "RemoveInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInternal(Thread* message_queue)"
  },
  {
    "label": "ProcessAllMessageQueuesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAllMessageQueuesInternal()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (message_queues_)",
    "insertText": "RTC_GUARDED_BY(crit_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_graph_)",
    "insertText": "RTC_GUARDED_BY(crit_)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Thread(SocketServer* ss)"
  },
  {
    "label": "Thread()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Thread(std::unique_ptr<SocketServer> ss)"
  },
  {
    "label": "CreateWithSocketServer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Thread>)",
    "insertText": "CreateWithSocketServer()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Thread>)",
    "insertText": "Create()"
  },
  {
    "label": "ScopedDisallowBlockingCalls()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedDisallowBlockingCalls()"
  },
  {
    "label": "Quit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quit()"
  },
  {
    "label": "IsQuitting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsQuitting()"
  },
  {
    "label": "Restart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restart()"
  },
  {
    "label": "IsProcessingMessagesForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcessingMessagesForTesting()"
  },
  {
    "label": "GetDelay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetDelay()"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (webrtc::MutexLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "SleepMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SleepMs(int millis)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetName(absl::string_view name, const void* obj)"
  },
  {
    "label": "SetAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAffinityMask(absl::optional<ThreadAffinityMask> affinity_mask)"
  },
  {
    "label": "SetDispatchWarningMs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDispatchWarningMs(int deadline)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "AllowInvokesToThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowInvokesToThread(Thread* thread)"
  },
  {
    "label": "DisallowAllInvokes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisallowAllInvokes()"
  },
  {
    "label": "IsInvokeToThreadAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvokeToThreadAllowed(rtc::Thread* target)"
  },
  {
    "label": "ProcessMessages()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessMessages(int cms)"
  },
  {
    "label": "IsOwned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOwned()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsRunning()"
  },
  {
    "label": "WrapCurrent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrapCurrent()"
  },
  {
    "label": "UnwrapCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnwrapCurrent()"
  },
  {
    "label": "DoInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoInit()"
  },
  {
    "label": "WakeUpSocketServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeUpSocketServer()"
  },
  {
    "label": "SafeWrapCurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeWrapCurrent()"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join()"
  },
  {
    "label": "AssertBlockingIsAllowedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertBlockingIsAllowedOnCurrentThread()"
  },
  {
    "label": "SetAllowBlockingCalls()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAllowBlockingCalls(bool allow)"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPriority(ThreadPriority priority)"
  },
  {
    "label": "PreRun()",
    "kind": "Method",
    "detail": "Function (WINAPI)",
    "insertText": "PreRun(LPVOID context)"
  },
  {
    "label": "WrapCurrentWithThreadManager()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WrapCurrentWithThreadManager(ThreadManager* thread_manager,\n                                    bool need_synchronize_access)"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "EnsureIsCurrentTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureIsCurrentTaskQueue()"
  },
  {
    "label": "ClearCurrentTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCurrentTaskQueue()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (messages_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (delayed_messages_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (delayed_next_num_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (allowed_threads_)",
    "insertText": "RTC_GUARDED_BY(this)"
  },
  {
    "label": "AutoThread()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "AutoThread()"
  },
  {
    "label": "AutoSocketServerThread()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "AutoSocketServerThread(SocketServer* ss)"
  }
]