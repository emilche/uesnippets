[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMelSpectrumKernelSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMelSpectrumKernelSettings"
  },
  {
    "label": "MelToHz()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DSP / FloatArrayMath . h \" # include \" HAL / Platform . h \" # include \" Templates / UniquePtr . h \" namespace Audio { float)",
    "insertText": "MelToHz(float InMel)"
  },
  {
    "label": "HzToMel()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "HzToMel(float InHz)"
  },
  {
    "label": "FMelSpectrumKernelSettings()",
    "kind": "Method",
    "detail": "Function (enum class EMelNormalization : uint8 { EqualAmplitude,EqualEuclideanNorm,EqualEnergy } ; struct FMelSpectrumKernelSettings { int32 NumBands ; float KernelMinCenterFreq ; float KernelMaxCenterFreq ; EMelNormalization Normalization ; float BandWidthStretch ;)",
    "insertText": "FMelSpectrumKernelSettings() : NumBands(26) , KernelMinCenterFreq(100.f) , KernelMaxCenterFreq(10000.f) , Normalization(EMelNormalization::EqualEnergy) , BandWidthStretch(1.f)"
  },
  {
    "label": "NewMelSpectrumKernelTransform()",
    "kind": "Method",
    "detail": "Function (} } ; TUniquePtr<FContiguousSparse2DKernelTransform>)",
    "insertText": "NewMelSpectrumKernelTransform(const FMelSpectrumKernelSettings& InSettings, const int32 InFFTSize, const float InSampleRate)"
  }
]