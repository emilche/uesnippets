[
  {
    "label": "TestClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestClient"
  },
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Packet"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_TEST_CLIENT_H_ # define RTC_BASE_TEST_CLIENT_H_ # include<memory> # include<vector> # include \" rtc_base / async_udp_socket . h \" # include \" rtc_base / fake_clock . h \" # include \" rtc_base / synchronization / mutex . h \" namespace rtc { class TestClient : public sigslot::has_slots<> { public : struct Packet {)",
    "insertText": "Packet(const SocketAddress& a, const char* b, size_t s, int64_t packet_time_us)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Packet(const Packet& p)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Packet()"
  },
  {
    "label": "TestClient()",
    "kind": "Method",
    "detail": "Function (SocketAddress addr ; char* buf ; size_t size ; int64_t packet_time_us ; } ; const int kTimeoutMs = 5 0 0 0 ;)",
    "insertText": "TestClient(std::unique_ptr<AsyncPacketSocket> socket)"
  },
  {
    "label": "TestClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestClient(std::unique_ptr<AsyncPacketSocket> socket, ThreadProcessingFakeClock* fake_clock)"
  },
  {
    "label": "TestClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestClient()"
  },
  {
    "label": "TestClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestClient(const TestClient&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestClient&)",
    "insertText": "operator(const TestClient&)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "address()"
  },
  {
    "label": "remote_address()",
    "kind": "Method",
    "detail": "Function (} SocketAddress)",
    "insertText": "remote_address()"
  },
  {
    "label": "CheckConnState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckConnState(AsyncPacketSocket::State state)"
  },
  {
    "label": "CheckConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckConnected()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Send(const char* buf, size_t size)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const char* buf, size_t size, const SocketAddress& dest)"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Packet>)",
    "insertText": "NextPacket(int timeout_ms)"
  },
  {
    "label": "CheckNextPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckNextPacket(const char* buf, size_t len, SocketAddress* addr)"
  },
  {
    "label": "CheckNoPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckNoPacket()"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(Socket::Option opt, int value)"
  },
  {
    "label": "ready_to_send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ready_to_send()"
  },
  {
    "label": "ready_to_send_count()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ready_to_send_count()"
  },
  {
    "label": "OnPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacket(AsyncPacketSocket* socket, const char* buf, size_t len, const SocketAddress& remote_addr, const int64_t& packet_time_us)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(AsyncPacketSocket* socket)"
  },
  {
    "label": "CheckTimestamp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckTimestamp(int64_t packet_timestamp)"
  },
  {
    "label": "AdvanceTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceTime(int ms)"
  }
]