[
  {
    "label": "FClusterGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterGroup"
  },
  {
    "label": "LOG_CRC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Cluster . h \" # include \" Containers / BinaryHeap . h \" # include \" Containers / BitArray . h \" # if 0 # define)",
    "insertText": "LOG_CRC(Array ) UE_LOG( LogStaticMesh, Log, TEXT(#Array \" CRC %u\"), FCrc::MemCrc32( Array.GetData(), Array.Num() * Array.GetTypeSize() ) ) #else #define LOG_CRC( Array)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FClusterGroup { FSphere3f Bounds ; FSphere3f LODBounds ; float MinLODError ; float MaxParentLODError ; int32 MipLevel ; uint32 MeshIndex ; bool bTrimmed ; uint32 PageIndexStart ; uint32 PageIndexNum ; TArray<uint32> Children ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FClusterGroup& Group)"
  },
  {
    "label": "BuildDAG()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "BuildDAG(TArray< FClusterGroup >& Groups, TArray< FCluster >& Cluster, uint32 ClusterBaseStart, uint32 ClusterBaseNum, uint32 MeshIndex, FBounds3f& MeshBounds)"
  },
  {
    "label": "FindDAGCut()",
    "kind": "Method",
    "detail": "Function (FBinaryHeap<float>)",
    "insertText": "FindDAGCut(const TArray< FClusterGroup >& Groups, const TArray< FCluster >& Clusters, uint32 TargetNumTris, float TargetError, uint32 TargetOvershoot, TBitArray<>* SelectedGroupsMask)"
  }
]