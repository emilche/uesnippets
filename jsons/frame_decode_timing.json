[
  {
    "label": "FrameDecodeTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameDecodeTiming"
  },
  {
    "label": "FrameSchedule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameSchedule"
  },
  {
    "label": "FrameDecodeTiming()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_FRAME_DECODE_TIMING_H_ # define VIDEO_FRAME_DECODE_TIMING_H_ # include<stdint . h> # include<functional> # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" modules / video_coding / timing / timing . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class FrameDecodeTiming { public :)",
    "insertText": "FrameDecodeTiming(Clock* clock, webrtc::VCMTiming const* timing)"
  },
  {
    "label": "FrameDecodeTiming()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FrameDecodeTiming()"
  },
  {
    "label": "FrameDecodeTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameDecodeTiming(const FrameDecodeTiming&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FrameDecodeTiming&)",
    "insertText": "operator(const FrameDecodeTiming&)"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (TimeDelta kMaxAllowedFrameDelay =)",
    "insertText": "Millis(5)"
  },
  {
    "label": "OnFrameBufferUpdated()",
    "kind": "Method",
    "detail": "Function (struct FrameSchedule { Timestamp latest_decode_time ; Timestamp render_time ; } ; absl::optional<FrameSchedule>)",
    "insertText": "OnFrameBufferUpdated(uint32_t next_temporal_unit_rtp, uint32_t last_temporal_unit_rtp, TimeDelta max_wait_for_frame, bool too_many_frames_queued)"
  }
]