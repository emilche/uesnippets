[
  {
    "label": "TMRUArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMRUArray"
  },
  {
    "label": "TMRUArray()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Array . h \" template<T,InAllocator = FDefaultAllocator> class TMRUArray : public TArray<T,InAllocator> { public : typedef TArray<T,InAllocator> Super ; int32 MaxItems ;)",
    "insertText": "TMRUArray() : Super()"
  },
  {
    "label": "TMRUArray()",
    "kind": "Method",
    "detail": "Function (MaxItems = 0 ; })",
    "insertText": "TMRUArray(TMRUArray&&)"
  },
  {
    "label": "TMRUArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TMRUArray(const TMRUArray&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TMRUArray&)",
    "insertText": "operator(TMRUArray&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TMRUArray&)",
    "insertText": "operator(const TMRUArray&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Add(const T& Item)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 idx =)",
    "insertText": "Add(Item)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Swap(idx, 0)"
  },
  {
    "label": "CullArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CullArray()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (const int32 idx =)",
    "insertText": "AddZeroed(Count)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Remove(Item)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Insert(Item, 0)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RemoveAt(this->Num() - 1, 1)"
  }
]