[
  {
    "label": "FPointLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPointLightSceneProxy"
  },
  {
    "label": "FPointLightSceneProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components / PointLightComponent . h \" # include \" LocalLightSceneProxy . h \" # include \" SceneManagement . h \" class FPointLightSceneProxy : public FLocalLightSceneProxy { public : float FalloffExponent ; float SourceRadius ; float SoftSourceRadius ; float SourceLength ; const uint32 bInverseSquared : 1 ;)",
    "insertText": "FPointLightSceneProxy(const UPointLightComponent* Component) : FLocalLightSceneProxy(Component) , FalloffExponent(Component->LightFalloffExponent) , SourceRadius(Component->SourceRadius) , SoftSourceRadius(Component->SoftSourceRadius) , SourceLength(Component->SourceLength) , bInverseSquared(Component->bUseInverseSquaredFalloff)"
  },
  {
    "label": "UpdateRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRadius(Component->AttenuationRadius)"
  },
  {
    "label": "GetSourceRadius()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSourceRadius()"
  },
  {
    "label": "GetPerObjectProjectedShadowProjectionPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetPerObjectProjectedShadowProjectionPoint(const FBoxSphereBounds& SubjectBounds)"
  },
  {
    "label": "GetWholeSceneProjectedShadowInitializer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetWholeSceneProjectedShadowInitializer(const FSceneViewFamily& ViewFamily, TArray<FWholeSceneProjectedShadowInitializer, TInlineAllocator<6> >& OutInitializers)"
  }
]