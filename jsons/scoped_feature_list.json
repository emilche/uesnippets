[
  {
    "label": "FeatureRefAndParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureRefAndParams"
  },
  {
    "label": "FeatureRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FeatureRef"
  },
  {
    "label": "ScopedFeatureList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedFeatureList"
  },
  {
    "label": "Features",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Features"
  },
  {
    "label": "FeatureWithStudyGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FeatureWithStudyGroup"
  },
  {
    "label": "FeatureRefAndParams()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_SCOPED_FEATURE_LIST_H_ # define BASE_TEST_SCOPED_FEATURE_LIST_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" base / feature_list . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / raw_ref . h \" # include \" base / memory / ref_counted . h \" # include \" base / metrics / field_trial . h \" # include \" base / metrics / field_trial_params . h \" # include \" base / types / pass_key . h \" # include \" third_party / abseil - cpp / absl / base / attributes . h \" namespace base::test { struct FeatureRefAndParams {)",
    "insertText": "FeatureRefAndParams(const Feature& feature ABSL_ATTRIBUTE_LIFETIME_BOUND, const FieldTrialParams& params)"
  },
  {
    "label": "FeatureRefAndParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FeatureRefAndParams(const FeatureRefAndParams& other)"
  },
  {
    "label": "FeatureRefAndParams()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FeatureRefAndParams()"
  },
  {
    "label": "FeatureRef()",
    "kind": "Method",
    "detail": "Function (const Feature& feature ; const FieldTrialParams params ; } ; class FeatureRef { public :)",
    "insertText": "FeatureRef(const Feature& feature ABSL_ATTRIBUTE_LIFETIME_BOUND) : feature_(feature)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const Feature&)",
    "insertText": "operator()"
  },
  {
    "label": "ScopedFeatureList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedFeatureList(const Feature& enable_feature)"
  },
  {
    "label": "ScopedFeatureList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedFeatureList(const ScopedFeatureList&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedFeatureList&)",
    "insertText": "operator(const ScopedFeatureList&)"
  },
  {
    "label": "ScopedFeatureList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedFeatureList()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "InitWithEmptyFeatureAndFieldTrialLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithEmptyFeatureAndFieldTrialLists()"
  },
  {
    "label": "InitWithNullFeatureAndFieldTrialLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithNullFeatureAndFieldTrialLists()"
  },
  {
    "label": "InitWithFeatureList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithFeatureList(std::unique_ptr<FeatureList> feature_list)"
  },
  {
    "label": "InitFromCommandLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromCommandLine(const std::string& enable_features, const std::string& disable_features)"
  },
  {
    "label": "InitWithFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithFeatures(const std::vector<FeatureRef>& enabled_features, const std::vector<FeatureRef>& disabled_features)"
  },
  {
    "label": "InitAndEnableFeature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAndEnableFeature(const Feature& feature)"
  },
  {
    "label": "InitAndEnableFeatureWithParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAndEnableFeatureWithParameters(const Feature& feature, const FieldTrialParams& feature_parameters)"
  },
  {
    "label": "InitWithFeaturesAndParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithFeaturesAndParameters(const std::vector<FeatureRefAndParams>& enabled_features, const std::vector<FeatureRef>& disabled_features)"
  },
  {
    "label": "InitAndDisableFeature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAndDisableFeature(const Feature& feature)"
  },
  {
    "label": "InitWithFeatureState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithFeatureState(const Feature& feature, bool enabled)"
  },
  {
    "label": "InitWithFeaturesImpl()",
    "kind": "Method",
    "detail": "Function (private : using PassKey = base::PassKey<ScopedFeatureList> ; void)",
    "insertText": "InitWithFeaturesImpl(const std::vector<FeatureRef>& enabled_features, const std::vector<FeatureRefAndParams>& enabled_features_and_params, const std::vector<FeatureRef>& disabled_features, bool keep_existing_states = true)"
  },
  {
    "label": "InitWithMergedFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitWithMergedFeatures(Features&& merged_features, bool create_associated_field_trials, bool keep_existing_states)"
  }
]