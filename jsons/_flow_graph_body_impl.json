[
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Policy"
  },
  {
    "label": "has_policy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_policy"
  },
  {
    "label": "rejecting",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rejecting"
  },
  {
    "label": "reserving",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "reserving"
  },
  {
    "label": "queueing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "queueing"
  },
  {
    "label": "lightweight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lightweight"
  },
  {
    "label": "key_matching",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "key_matching"
  },
  {
    "label": "source_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "source_body"
  },
  {
    "label": "source_body_leaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "source_body_leaf"
  },
  {
    "label": "function_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_body"
  },
  {
    "label": "function_body_leaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_body_leaf"
  },
  {
    "label": "multifunction_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "multifunction_body"
  },
  {
    "label": "multifunction_body_leaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "multifunction_body_leaf"
  },
  {
    "label": "type_to_key_function_body",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type_to_key_function_body"
  },
  {
    "label": "type_to_key_function_body_leaf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type_to_key_function_body_leaf"
  },
  {
    "label": "forward_task_bypass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "forward_task_bypass"
  },
  {
    "label": "apply_body_task_bypass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "apply_body_task_bypass"
  },
  {
    "label": "source_task_bypass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "source_task_bypass"
  },
  {
    "label": "empty_body",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "empty_body"
  },
  {
    "label": "decrementer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "decrementer"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "source_body()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__flow_graph_body_impl_H # define __TBB__flow_graph_body_impl_H # ifndef __TBB_flow_graph_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif namespace internal { typedef tbb::internal::uint64_t tag_value ; using tbb::internal::strip ; # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT template<. . . Policies> struct Policy { } ; template<. . . Policies> struct has_policy ; template<ExpectedPolicy,FirstPolicy,. . . Policies> struct has_policy<ExpectedPolicy,FirstPolicy,Policies . . .> : tbb::internal::bool_constant<has_policy<ExpectedPolicy,FirstPolicy>::value | | has_policy<ExpectedPolicy,Policies . . .>::value> { } ; template<ExpectedPolicy,SinglePolicy> struct has_policy<ExpectedPolicy,SinglePolicy> : tbb::internal::bool_constant<tbb::internal::is_same_type<ExpectedPolicy,SinglePolicy>::value> { } ; template<ExpectedPolicy,. . . Policies> struct has_policy<ExpectedPolicy,Policy<Policies . . .>> : has_policy<ExpectedPolicy,Policies . . .> { } ; # else template<P1,P2 = void> struct Policy { } ; template<ExpectedPolicy,SinglePolicy> struct has_policy : tbb::internal::bool_constant<tbb::internal::is_same_type<ExpectedPolicy,SinglePolicy>::value> { } ; template<ExpectedPolicy,P> struct has_policy<ExpectedPolicy,Policy<P>> : has_policy<ExpectedPolicy,P> { } ; template<ExpectedPolicy,P1,P2> struct has_policy<ExpectedPolicy,Policy<P1,P2>> : tbb::internal::bool_constant<has_policy<ExpectedPolicy,P1>::value | | has_policy<ExpectedPolicy,P2>::value> { } ; # endif namespace graph_policy_namespace { struct rejecting { } ; struct reserving { } ; struct queueing { } ; struct lightweight { } ; template<K,KHash = tbb_hash_compare<strip<K>::type>> struct key_matching { typedef K key_type ; typedef strip<K>::type base_key_type ; typedef KHash hash_compare_type ; } ; typedef key_matching<tag_value> tag_matching ; typedef interface10::internal::Policy<queueing,lightweight> queueing_lightweight ; typedef interface10::internal::Policy<rejecting,lightweight> rejecting_lightweight ; } template<Output> class source_body : tbb::internal::no_assign { public : ~)",
    "insertText": "source_body()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(Output &output)"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (source_body*)",
    "insertText": "clone()"
  },
  {
    "label": "source_body_leaf()",
    "kind": "Method",
    "detail": "Function (} ; template<Output,Body> class source_body_leaf : public source_body<Output> { public :)",
    "insertText": "source_body_leaf(const Body &_body ) : body(_body)"
  },
  {
    "label": "get_body()",
    "kind": "Method",
    "detail": "Function (} Body)",
    "insertText": "get_body()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Output)",
    "insertText": "operator()(const Input &input)"
  },
  {
    "label": "function_body_leaf()",
    "kind": "Method",
    "detail": "Function (} ; template<Input,Output,B> class function_body_leaf : public function_body<Input,Output> { public :)",
    "insertText": "function_body_leaf(const B &_body ) : body(_body)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Output)",
    "insertText": "operator()(const Input &i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} continue_msg)",
    "insertText": "operator()( const continue_msg &i)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "body(i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Output)",
    "insertText": "operator()(const continue_msg &i)"
  },
  {
    "label": "multifunction_body()",
    "kind": "Method",
    "detail": "Function (} private : B body ; } ; template<Input,OutputSet> class multifunction_body : tbb::internal::no_assign { public : ~)",
    "insertText": "multifunction_body()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const Input & , OutputSet &)"
  },
  {
    "label": "get_body_ptr()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "get_body_ptr()"
  },
  {
    "label": "multifunction_body_leaf()",
    "kind": "Method",
    "detail": "Function (} ; template<Input,OutputSet,B> class multifunction_body_leaf : public multifunction_body<Input,OutputSet> { public :)",
    "insertText": "multifunction_body_leaf(const B &_body) : body(_body)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const Input &input, OutputSet &oset)"
  },
  {
    "label": "body()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "body(input, oset)"
  },
  {
    "label": "type_to_key_function_body()",
    "kind": "Method",
    "detail": "Function (} private : B body ; } ; template<Input,Output> class type_to_key_function_body : tbb::internal::no_assign { public : ~)",
    "insertText": "type_to_key_function_body()"
  },
  {
    "label": "type_to_key_function_body_leaf()",
    "kind": "Method",
    "detail": "Function (} ; template<Input,Output,B> class type_to_key_function_body_leaf : public type_to_key_function_body<Input,Output> { public :)",
    "insertText": "type_to_key_function_body_leaf(const B &_body ) : body(_body)"
  },
  {
    "label": "forward_task_bypass()",
    "kind": "Method",
    "detail": "Function (} private : B body ; } ; template<NodeType> class forward_task_bypass : public graph_task { NodeType& my_node ; public :)",
    "insertText": "forward_task_bypass(NodeType &n #if __TBB_PREVIEW_FLOW_GRAPH_PRIORITIES , node_priority_t node_priority = no_priority ) : graph_task(node_priority), #else ) : #endif my_node(n)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (} task*)",
    "insertText": "execute()"
  },
  {
    "label": "forward_task()",
    "kind": "Method",
    "detail": "Function (task* new_task = my_node .)",
    "insertText": "forward_task()"
  },
  {
    "label": "apply_body_bypass()",
    "kind": "Method",
    "detail": "Function (task* next_task = my_node .)",
    "insertText": "apply_body_bypass(my_input)"
  },
  {
    "label": "apply_body_bypass()",
    "kind": "Method",
    "detail": "Function (task* new_task = my_node .)",
    "insertText": "apply_body_bypass()"
  },
  {
    "label": "try_put_task()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,DecrementType,DummyType = void> class decrementer ; template<T,DecrementType> class decrementer<T,DecrementType,tbb::internal::enable_if<tbb::internal::is_integral<DecrementType>::value,void>::type> : public receiver<DecrementType>,tbb::internal::no_copy { T* my_node ; protected : task*)",
    "insertText": "try_put_task(const DecrementType& value)"
  },
  {
    "label": "decrement_counter()",
    "kind": "Method",
    "detail": "Function (task* result = my_node ->)",
    "insertText": "decrement_counter(value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if TBB_DEPRECATED_FLOW_NODE_EXTRACTION)",
    "insertText": "if(f & rf_clear_edges) my_built_predecessors.clear()"
  },
  {
    "label": "suppress_unused_warning()",
    "kind": "Method",
    "detail": "Function (# else tbb::)",
    "insertText": "suppress_unused_warning(f)"
  },
  {
    "label": "decrementer()",
    "kind": "Method",
    "detail": "Function (# endif } public :)",
    "insertText": "decrementer() : my_node(NULL)"
  },
  {
    "label": "set_owner()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_owner(T *node)"
  },
  {
    "label": "built_predecessors()",
    "kind": "Method",
    "detail": "Function (my_node = node ; } # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION spin_mutex my_mutex ; typedef receiver<DecrementType>::predecessor_type predecessor_type ; typedef internal::edge_container<predecessor_type> built_predecessors_type ; typedef built_predecessors_type::edge_list_type predecessor_list_type ; built_predecessors_type&)",
    "insertText": "built_predecessors()"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (spin_mutex::scoped_lock)",
    "insertText": "l(my_mutex)"
  },
  {
    "label": "add_edge()",
    "kind": "Method",
    "detail": "Function (my_built_predecessors .)",
    "insertText": "add_edge(s)"
  },
  {
    "label": "internal_delete_built_predecessor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_delete_built_predecessor(predecessor_type &s)"
  },
  {
    "label": "delete_edge()",
    "kind": "Method",
    "detail": "Function (my_built_predecessors .)",
    "insertText": "delete_edge(s)"
  },
  {
    "label": "copy_predecessors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copy_predecessors(predecessor_list_type &v)"
  },
  {
    "label": "copy_edges()",
    "kind": "Method",
    "detail": "Function (my_built_predecessors .)",
    "insertText": "copy_edges(v)"
  },
  {
    "label": "predecessor_count()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "predecessor_count()"
  },
  {
    "label": "graph_reference()",
    "kind": "Method",
    "detail": "Function (} protected : graph&)",
    "insertText": "graph_reference()"
  }
]