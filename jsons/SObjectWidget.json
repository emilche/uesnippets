[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWeakWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWeakWidgetPath"
  },
  {
    "label": "FWidgetPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetPath"
  },
  {
    "label": "UDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDragDropOperation"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "SObjectWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SObjectWidget"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Input / NavigationReply . h \" # include \" Layout / Margin . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" UObject / GCObject . h \" # include \" Blueprint / UserWidget . h \" # include \" Widgets / SCompoundWidget . h \" class FPaintArgs ; class FSlateWindowElementList ; class FWeakWidgetPath ; class FWidgetPath ; class UDragDropOperation ; template<ObjectType> class TAttribute ; class SObjectWidget : public SCompoundWidget,public FGCObject {)",
    "insertText": "SLATE_BEGIN_ARGS(SObjectWidget)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_END_ARGS() UMG_API virtual ~SObjectWidget(void)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, UUserWidget* InWidgetObject)"
  },
  {
    "label": "ResetWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetWidget()"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetWidgetObject()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "GetWidgetObject()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "IsInteractable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractable()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnPreviewKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnAnalogValueChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAnalogValueChanged(const FGeometry& MyGeometry, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragCancelled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragCancelled(const FDragDropEvent& DragDropEvent, UDragDropOperation* Operation)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& GestureEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnMotionDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMotionDetected(const FGeometry& MyGeometry, const FMotionEvent& InMotionEvent)"
  },
  {
    "label": "OnTouchForceChanged()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchForceChanged(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnFinishedPointerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedPointerInput()"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "CanRouteEvent()",
    "kind": "Method",
    "detail": "Function (protected : TObjectPtr<UUserWidget> WidgetObject ; private : bool)",
    "insertText": "CanRouteEvent()"
  },
  {
    "label": "CanRoutePaint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRoutePaint()"
  }
]