[
  {
    "label": "ModulePatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePatch"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Data"
  },
  {
    "label": "ModulePatch()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" LC_RelocationPatcher . h \" # include \" LC_FunctionPatcher . h \" # include \" LC_ExecutablePatcher . h \" class ModulePatch { public : struct Data { uint8_t entryPointCode [ ExecutablePatcher::INJECTED_CODE_SIZE ] ; uint16_t prePatchHookModuleIndex ; uint32_t firstPrePatchHook ; uint32_t lastPrePatchHook ; uint16_t postPatchHookModuleIndex ; uint32_t firstPostPatchHook ; uint32_t lastPostPatchHook ; uint32_t originalCookieRva ; uint32_t patchCookieRva ; uint32_t originalUe4NameTableRva ; uint32_t patchUe4NameTableRva ; uint32_t originalUe4ObjectArrayRva ; uint32_t patchUe4ObjectArrayRva ; uint32_t dllMainRva ; types::vector<relocations::Record> preEntryPointRelocations ; types::vector<relocations::Record> postEntryPointRelocations ; types::vector<uint32_t> patchedInitializers ; types::vector<functions::Record> functionPatches ; types::vector<functions::LibraryRecord> libraryFunctionPatches ; } ;)",
    "insertText": "ModulePatch(const std::wstring& exePath, const std::wstring& pdbPath, size_t token)"
  },
  {
    "label": "RegisterEntryPointCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEntryPointCode(const uint8_t* code)"
  },
  {
    "label": "RegisterPrePatchHooks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPrePatchHooks(uint16_t moduleIndex, uint32_t firstRva, uint32_t lastRva)"
  },
  {
    "label": "RegisterPostPatchHooks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPostPatchHooks(uint16_t moduleIndex, uint32_t firstRva, uint32_t lastRva)"
  },
  {
    "label": "RegisterSecurityCookie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSecurityCookie(uint32_t originalRva, uint32_t patchRva)"
  },
  {
    "label": "RegisterUe4NameTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterUe4NameTable(uint32_t originalRva, uint32_t patchRva)"
  },
  {
    "label": "RegisterUe4ObjectArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterUe4ObjectArray(uint32_t originalRva, uint32_t patchRva)"
  },
  {
    "label": "RegisterDllMain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDllMain(uint32_t rva)"
  },
  {
    "label": "RegisterPreEntryPointRelocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPreEntryPointRelocation(const relocations::Record& record)"
  },
  {
    "label": "RegisterPostEntryPointRelocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPostEntryPointRelocation(const relocations::Record& record)"
  },
  {
    "label": "RegisterPatchedDynamicInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPatchedDynamicInitializer(uint32_t rva)"
  },
  {
    "label": "RegisterFunctionPatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFunctionPatch(const functions::Record& record)"
  },
  {
    "label": "RegisterLibraryFunctionPatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLibraryFunctionPatch(const functions::LibraryRecord& record)"
  },
  {
    "label": "GetExePath()",
    "kind": "Method",
    "detail": "Function (const std::wstring&)",
    "insertText": "GetExePath(void)"
  },
  {
    "label": "GetPdbPath()",
    "kind": "Method",
    "detail": "Function (const std::wstring&)",
    "insertText": "GetPdbPath(void)"
  },
  {
    "label": "GetToken()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetToken(void)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const Data&)",
    "insertText": "GetData(void)"
  }
]