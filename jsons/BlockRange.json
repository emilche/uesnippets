[
  {
    "label": "FBlockEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockEntry"
  },
  {
    "label": "FBlockRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlockRange"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathUtility . h \" namespace BuildPatchServices { struct FBlockEntry ; struct FBlockRange { public : uint64)",
    "insertText": "GetFirst()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetSize()"
  },
  {
    "label": "Touches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Touches(const FBlockRange& Other)"
  },
  {
    "label": "FromFirstAndSize()",
    "kind": "Method",
    "detail": "Function (} FBlockRange)",
    "insertText": "FromFirstAndSize(uint64 InFirst, uint64 InSize)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (FBlockRange BlockRange ; BlockRange . First = InFirst ; BlockRange . Size = InSize ;)",
    "insertText": "checkf((BlockRange.GetSize() == 0) || (BlockRange.GetLast() >= BlockRange.GetFirst()), TEXT(\"Byte range has uint64 overflow.\"))"
  },
  {
    "label": "FromIntersection()",
    "kind": "Method",
    "detail": "Function (} FBlockRange)",
    "insertText": "FromIntersection(const FBlockRange& RangeA, const FBlockRange& RangeB)"
  },
  {
    "label": "FromMerge()",
    "kind": "Method",
    "detail": "Function (} FBlockRange)",
    "insertText": "FromMerge(const FBlockRange& RangeA, const FBlockRange& RangeB)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBlockRange& Lhs, const FBlockRange& Rhs)"
  }
]