[
  {
    "label": "DiyFp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DiyFp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RAPIDJSON_DIYFP_H_ # define RAPIDJSON_DIYFP_H_ # include \" . . / rapidjson . h \" # include \" clzll . h \" # include<limits> # if)",
    "insertText": "defined(_MSC_VER) && defined(_M_AMD64) && !defined(__INTEL_COMPILER) #include <intrin.h> #if !defined(_ARM64EC_) #pragma intrinsic(_umul128) #else #pragma comment(lib,\"softintrin\")"
  },
  {
    "label": "RAPIDJSON_DIAG_OFF()",
    "kind": "Method",
    "detail": "Function (# ifdef __GNUC__ RAPIDJSON_DIAG_PUSH)",
    "insertText": "RAPIDJSON_DIAG_OFF(effc++) #endif #ifdef __clang__ RAPIDJSON_DIAG_PUSH RAPIDJSON_DIAG_OFF(padded)"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiyFp() : f(), e()"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiyFp(uint64_t fp, int exp) : f(fp), e(exp)"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiyFp(double d)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (union { double d ; uint64_t u64 ; } u = { d } ; int biased_e = static_cast<)",
    "insertText": "int((u.u64 & kDpExponentMask) >> kDpSignificandSize)"
  },
  {
    "label": "significand()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "significand(u.u64 & kDpSignificandMask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (f = significand + kDpHiddenBit ; e = biased_e - kDpExponentBias ; } else { f = significand ; e = kDpMinExponent + 1 ; } } DiyFp)",
    "insertText": "operator(const DiyFp& rhs)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && defined(_M_AMD64)"
  },
  {
    "label": "_umul128()",
    "kind": "Method",
    "detail": "Function (uint64_t l =)",
    "insertText": "_umul128(f, rhs.f, &h)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)) && defined(__x86_64__)"
  },
  {
    "label": "uint128()",
    "kind": "Method",
    "detail": "Function (uint128 p = static_cast<)",
    "insertText": "uint128(f) * static_cast<uint128>(rhs.f)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t h = static_cast<)",
    "insertText": "uint64_t(p >> 64)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (uint64_t l = static_cast<)",
    "insertText": "uint64_t(p)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (# else const uint64_t M32 = 0 xFFFFFFFF ; const uint64_t a = f>> 3 2 ; const uint64_t b = f& M32 ; const uint64_t c = rhs . f>> 3 2 ; const uint64_t d = rhs . f& M32 ; const uint64_t ac = a* c ; const uint64_t bc = b* c ; const uint64_t ad = a* d ; const uint64_t bd = b* d ; uint64_t)",
    "insertText": "tmp(bd >> 32) + (ad & M32) + (bc & M32)"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (tmp + = 1 U<<3 1 ; return)",
    "insertText": "DiyFp(ac + (ad >> 32) + (bc >> 32) + (tmp >> 32), e + rhs.e + 64)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (# endif } DiyFp)",
    "insertText": "Normalize()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int s = static_cast<)",
    "insertText": "int(clzll(f))"
  },
  {
    "label": "NormalizeBoundary()",
    "kind": "Method",
    "detail": "Function (} DiyFp)",
    "insertText": "NormalizeBoundary()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (DiyFp res =* this ;)",
    "insertText": "while(!(res.f & (kDpHiddenBit << 1)))"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (res . f<<= 1 ; res . e - - ; } res .)",
    "insertText": "f(kDiySignificandSize - kDpSignificandSize - 2)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (res . e = res .)",
    "insertText": "e(kDiySignificandSize - kDpSignificandSize - 2)"
  },
  {
    "label": "DiyFp()",
    "kind": "Method",
    "detail": "Function (DiyFp pl =)",
    "insertText": "DiyFp((f << 1) + 1, e - 1).NormalizeBoundary()"
  },
  {
    "label": "mi()",
    "kind": "Method",
    "detail": "Function (DiyFp)",
    "insertText": "mi(f == kDpHiddenBit) ? DiyFp((f << 2) - 1, e - 2) : DiyFp((f << 1) - 1, e - 1)"
  },
  {
    "label": "ToDouble()",
    "kind": "Method",
    "detail": "Function (mi . f<<= mi . e - pl . e ; mi . e = pl . e ;* plus = pl ;* minus = mi ; } double)",
    "insertText": "ToDouble()"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (union { double d ; uint64_t u64 ; } u ;)",
    "insertText": "RAPIDJSON_ASSERT(f <= kDpHiddenBit + kDpSignificandMask)"
  },
  {
    "label": "be()",
    "kind": "Method",
    "detail": "Function (} const uint64_t)",
    "insertText": "be(e == kDpDenormalExponent && (f & kDpHiddenBit) == 0) ? 0 : static_cast<uint64_t>(e + kDpExponentBias)"
  },
  {
    "label": "u64()",
    "kind": "Method",
    "detail": "Function (u .)",
    "insertText": "u64(f & kDpSignificandMask) | (be << kDpSignificandSize)"
  },
  {
    "label": "RAPIDJSON_UINT64_C2()",
    "kind": "Method",
    "detail": "Function (const uint64_t kDpSignificandMask =)",
    "insertText": "RAPIDJSON_UINT64_C2(0x000FFFFF, 0xFFFFFFFF)"
  },
  {
    "label": "RAPIDJSON_UINT64_C2()",
    "kind": "Method",
    "detail": "Function (const uint64_t kDpHiddenBit =)",
    "insertText": "RAPIDJSON_UINT64_C2(0x00100000, 0x00000000)"
  },
  {
    "label": "GetCachedPowerByIndex()",
    "kind": "Method",
    "detail": "Function (uint64_t f ; int e ; } ; DiyFp)",
    "insertText": "GetCachedPowerByIndex(size_t index)"
  },
  {
    "label": "RAPIDJSON_UINT64_C2()",
    "kind": "Method",
    "detail": "Function (const uint64_t kCachedPowers_F [ ] = {)",
    "insertText": "RAPIDJSON_UINT64_C2(0xfa8fd5a0, 0x081c0288), RAPIDJSON_UINT64_C2(0xbaaee17f, 0xa23ebf76), RAPIDJSON_UINT64_C2(0x8b16fb20, 0x3055ac76), RAPIDJSON_UINT64_C2(0xcf42894a, 0x5dce35ea), RAPIDJSON_UINT64_C2(0x9a6bb0aa, 0x55653b2d), RAPIDJSON_UINT64_C2(0xe61acf03, 0x3d1a45df), RAPIDJSON_UINT64_C2(0xab70fe17, 0xc79ac6ca), RAPIDJSON_UINT64_C2(0xff77b1fc, 0xbebcdc4f), RAPIDJSON_UINT64_C2(0xbe5691ef, 0x416bd60c), RAPIDJSON_UINT64_C2(0x8dd01fad, 0x907ffc3c), RAPIDJSON_UINT64_C2(0xd3515c28, 0x31559a83), RAPIDJSON_UINT64_C2(0x9d71ac8f, 0xada6c9b5), RAPIDJSON_UINT64_C2(0xea9c2277, 0x23ee8bcb), RAPIDJSON_UINT64_C2(0xaecc4991, 0x4078536d), RAPIDJSON_UINT64_C2(0x823c1279, 0x5db6ce57), RAPIDJSON_UINT64_C2(0xc2109436, 0x4dfb5637), RAPIDJSON_UINT64_C2(0x9096ea6f, 0x3848984f), RAPIDJSON_UINT64_C2(0xd77485cb, 0x25823ac7), RAPIDJSON_UINT64_C2(0xa086cfcd, 0x97bf97f4), RAPIDJSON_UINT64_C2(0xef340a98, 0x172aace5), RAPIDJSON_UINT64_C2(0xb23867fb, 0x2a35b28e), RAPIDJSON_UINT64_C2(0x84c8d4df, 0xd2c63f3b), RAPIDJSON_UINT64_C2(0xc5dd4427, 0x1ad3cdba), RAPIDJSON_UINT64_C2(0x936b9fce, 0xbb25c996), RAPIDJSON_UINT64_C2(0xdbac6c24, 0x7d62a584), RAPIDJSON_UINT64_C2(0xa3ab6658, 0x0d5fdaf6), RAPIDJSON_UINT64_C2(0xf3e2f893, 0xdec3f126), RAPIDJSON_UINT64_C2(0xb5b5ada8, 0xaaff80b8), RAPIDJSON_UINT64_C2(0x87625f05, 0x6c7c4a8b), RAPIDJSON_UINT64_C2(0xc9bcff60, 0x34c13053), RAPIDJSON_UINT64_C2(0x964e858c, 0x91ba2655), RAPIDJSON_UINT64_C2(0xdff97724, 0x70297ebd), RAPIDJSON_UINT64_C2(0xa6dfbd9f, 0xb8e5b88f), RAPIDJSON_UINT64_C2(0xf8a95fcf, 0x88747d94), RAPIDJSON_UINT64_C2(0xb9447093, 0x8fa89bcf), RAPIDJSON_UINT64_C2(0x8a08f0f8, 0xbf0f156b), RAPIDJSON_UINT64_C2(0xcdb02555, 0x653131b6), RAPIDJSON_UINT64_C2(0x993fe2c6, 0xd07b7fac), RAPIDJSON_UINT64_C2(0xe45c10c4, 0x2a2b3b06), RAPIDJSON_UINT64_C2(0xaa242499, 0x697392d3), RAPIDJSON_UINT64_C2(0xfd87b5f2, 0x8300ca0e), RAPIDJSON_UINT64_C2(0xbce50864, 0x92111aeb), RAPIDJSON_UINT64_C2(0x8cbccc09, 0x6f5088cc), RAPIDJSON_UINT64_C2(0xd1b71758, 0xe219652c), RAPIDJSON_UINT64_C2(0x9c400000, 0x00000000), RAPIDJSON_UINT64_C2(0xe8d4a510, 0x00000000), RAPIDJSON_UINT64_C2(0xad78ebc5, 0xac620000), RAPIDJSON_UINT64_C2(0x813f3978, 0xf8940984), RAPIDJSON_UINT64_C2(0xc097ce7b, 0xc90715b3), RAPIDJSON_UINT64_C2(0x8f7e32ce, 0x7bea5c70), RAPIDJSON_UINT64_C2(0xd5d238a4, 0xabe98068), RAPIDJSON_UINT64_C2(0x9f4f2726, 0x179a2245), RAPIDJSON_UINT64_C2(0xed63a231, 0xd4c4fb27), RAPIDJSON_UINT64_C2(0xb0de6538, 0x8cc8ada8), RAPIDJSON_UINT64_C2(0x83c7088e, 0x1aab65db), RAPIDJSON_UINT64_C2(0xc45d1df9, 0x42711d9a), RAPIDJSON_UINT64_C2(0x924d692c, 0xa61be758), RAPIDJSON_UINT64_C2(0xda01ee64, 0x1a708dea), RAPIDJSON_UINT64_C2(0xa26da399, 0x9aef774a), RAPIDJSON_UINT64_C2(0xf209787b, 0xb47d6b85), RAPIDJSON_UINT64_C2(0xb454e4a1, 0x79dd1877), RAPIDJSON_UINT64_C2(0x865b8692, 0x5b9bc5c2), RAPIDJSON_UINT64_C2(0xc83553c5, 0xc8965d3d), RAPIDJSON_UINT64_C2(0x952ab45c, 0xfa97a0b3), RAPIDJSON_UINT64_C2(0xde469fbd, 0x99a05fe3), RAPIDJSON_UINT64_C2(0xa59bc234, 0xdb398c25), RAPIDJSON_UINT64_C2(0xf6c69a72, 0xa3989f5c), RAPIDJSON_UINT64_C2(0xb7dcbf53, 0x54e9bece), RAPIDJSON_UINT64_C2(0x88fcf317, 0xf22241e2), RAPIDJSON_UINT64_C2(0xcc20ce9b, 0xd35c78a5), RAPIDJSON_UINT64_C2(0x98165af3, 0x7b2153df), RAPIDJSON_UINT64_C2(0xe2a0b5dc, 0x971f303a), RAPIDJSON_UINT64_C2(0xa8d9d153, 0x5ce3b396), RAPIDJSON_UINT64_C2(0xfb9b7cd9, 0xa4a7443c), RAPIDJSON_UINT64_C2(0xbb764c4c, 0xa7a44410), RAPIDJSON_UINT64_C2(0x8bab8eef, 0xb6409c1a), RAPIDJSON_UINT64_C2(0xd01fef10, 0xa657842c), RAPIDJSON_UINT64_C2(0x9b10a4e5, 0xe9913129), RAPIDJSON_UINT64_C2(0xe7109bfb, 0xa19c0c9d), RAPIDJSON_UINT64_C2(0xac2820d9, 0x623bf429), RAPIDJSON_UINT64_C2(0x80444b5e, 0x7aa7cf85), RAPIDJSON_UINT64_C2(0xbf21e440, 0x03acdd2d), RAPIDJSON_UINT64_C2(0x8e679c2f, 0x5e44ff8f), RAPIDJSON_UINT64_C2(0xd433179d, 0x9c8cb841), RAPIDJSON_UINT64_C2(0x9e19db92, 0xb4e31ba9), RAPIDJSON_UINT64_C2(0xeb96bf6e, 0xbadf77d9), RAPIDJSON_UINT64_C2(0xaf87023b, 0x9bf0ee6b)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (const int16_t kCachedPowers_E [ ] = { - 1 2 2 0,- 1 1 9 3,- 1 1 6 6,- 1 1 4 0,- 1 1 1 3,- 1 0 8 7,- 1 0 6 0,- 1 0 3 4,- 1 0 0 7,- 9 8 0,- 9 5 4,- 9 2 7,- 9 0 1,- 8 7 4,- 8 4 7,- 8 2 1,- 7 9 4,- 7 6 8,- 7 4 1,- 7 1 5,- 6 8 8,- 6 6 1,- 6 3 5,- 6 0 8,- 5 8 2,- 5 5 5,- 5 2 9,- 5 0 2,- 4 7 5,- 4 4 9,- 4 2 2,- 3 9 6,- 3 6 9,- 3 4 3,- 3 1 6,- 2 8 9,- 2 6 3,- 2 3 6,- 2 1 0,- 1 8 3,- 1 5 7,- 1 3 0,- 1 0 3,- 7 7,- 5 0,- 2 4,3,3 0,5 6,8 3,1 0 9,1 3 6,1 6 2,1 8 9,2 1 6,2 4 2,2 6 9,2 9 5,3 2 2,3 4 8,3 7 5,4 0 2,4 2 8,4 5 5,4 8 1,5 0 8,5 3 4,5 6 1,5 8 8,6 1 4,6 4 1,6 6 7,6 9 4,7 2 0,7 4 7,7 7 4,8 0 0,8 2 7,8 5 3,8 8 0,9 0 7,9 3 3,9 6 0,9 8 6,1 0 1 3,1 0 3 9,1 0 6 6 } ;)",
    "insertText": "RAPIDJSON_ASSERT(index < 87)"
  },
  {
    "label": "GetCachedPower()",
    "kind": "Method",
    "detail": "Function (} DiyFp)",
    "insertText": "GetCachedPower(int e, int* K)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int k = static_cast<)",
    "insertText": "int(dk)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned index = static_cast<)",
    "insertText": "unsigned((k >> 3) + 1)"
  },
  {
    "label": "K()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "K(-348 + static_cast<int>(index << 3))"
  },
  {
    "label": "GetCachedPower10()",
    "kind": "Method",
    "detail": "Function (} DiyFp)",
    "insertText": "GetCachedPower10(int exp, int *outExp)"
  },
  {
    "label": "RAPIDJSON_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RAPIDJSON_ASSERT(exp >= -348)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned index = static_cast<)",
    "insertText": "unsigned(exp + 348)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (* outExp = - 3 4 8 + static_cast<)",
    "insertText": "int(index)"
  }
]