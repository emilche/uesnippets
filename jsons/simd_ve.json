[
  {
    "label": "Vec4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vec4"
  },
  {
    "label": "VEC4_CONST()",
    "kind": "Method",
    "detail": "Function (# ifndef SQUISH_SIMD_VE_H # define SQUISH_SIMD_VE_H # include<altivec . h> # undef bool namespace squish { # define)",
    "insertText": "VEC4_CONST(X ) Vec4( ( vector float )( X ))"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (public : typedef Vec4 Arg ;)",
    "insertText": "Vec4()"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec4(vector float v ) : m_v( v)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vec4(Vec4 const& arg ) : m_v( arg.m_v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4&)",
    "insertText": "operator(Vec4 const& arg)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (m_v = arg . m_v ; return* this ; })",
    "insertText": "Vec4(const float * v)"
  },
  {
    "label": "Vec4()",
    "kind": "Method",
    "detail": "Function (union { vector float v ; float c [ 4 ] ; } u ; u . c [ 0 ] = v [ 0 ] ; u . c [ 1 ] = v [ 1 ] ; u . c [ 2 ] = v [ 2 ] ; u . c [ 3 ] = v [ 3 ] ; m_v = u . v ; })",
    "insertText": "Vec4(float x, float y, float z, float w)"
  },
  {
    "label": "GetVec3()",
    "kind": "Method",
    "detail": "Function (union { vector float v ; float c [ 4 ] ; } u ; u . c [ 0 ] = x ; u . c [ 1 ] = y ; u . c [ 2 ] = z ; u . c [ 3 ] = w ; m_v = u . v ; } Vec3)",
    "insertText": "GetVec3()"
  },
  {
    "label": "Vec3()",
    "kind": "Method",
    "detail": "Function (union { vector float v ; float c [ 4 ] ; } u ; u . v = m_v ; return)",
    "insertText": "Vec3(u.c[0], u.c[1], u.c[2])"
  },
  {
    "label": "SplatX()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "SplatX()"
  },
  {
    "label": "SplatY()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "SplatY()"
  },
  {
    "label": "SplatZ()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "SplatZ()"
  },
  {
    "label": "SplatW()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "SplatW()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4&)",
    "insertText": "operator(Arg v)"
  },
  {
    "label": "vec_add()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "vec_add(m_v, v.m_v)"
  },
  {
    "label": "vec_sub()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "vec_sub(m_v, v.m_v)"
  },
  {
    "label": "vec_madd()",
    "kind": "Method",
    "detail": "Function (m_v =)",
    "insertText": "vec_madd(m_v, v.m_v, ( vector float )( -0.0f ))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "operator(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "MultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "MultiplyAdd(Vec4::Arg a, Vec4::Arg b, Vec4::Arg c)"
  },
  {
    "label": "NegativeMultiplySubtract()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "NegativeMultiplySubtract(Vec4::Arg a, Vec4::Arg b, Vec4::Arg c)"
  },
  {
    "label": "Reciprocal()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Reciprocal(Vec4::Arg v)"
  },
  {
    "label": "vec_re()",
    "kind": "Method",
    "detail": "Function (vector float estimate =)",
    "insertText": "vec_re(v.m_v)"
  },
  {
    "label": "vec_nmsub()",
    "kind": "Method",
    "detail": "Function (vector float diff =)",
    "insertText": "vec_nmsub(estimate, v.m_v, ( vector float )( 1.0f ))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Min(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Max(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "Truncate()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Truncate(Vec4::Arg v)"
  },
  {
    "label": "CompareEqual()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "CompareEqual(Vec4::Arg left, Vec4::Arg right)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} Vec4)",
    "insertText": "Select(Vec4::Arg off, Vec4::Arg on, Vec4::Arg bits)"
  },
  {
    "label": "CompareAnyLessThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareAnyLessThan(Vec4::Arg left, Vec4::Arg right)"
  }
]