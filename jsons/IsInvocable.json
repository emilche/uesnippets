[
  {
    "label": "TVoid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVoid"
  },
  {
    "label": "TIsInvocableImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsInvocableImpl"
  },
  {
    "label": "TIsInvocable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsInvocable"
  },
  {
    "label": "DeclVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / Invoke . h \" namespace UE::Core::Private::IsInvocable { template<T> T&&)",
    "insertText": "DeclVal()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<T> struct TVoid { typedef void Type ; } ; template<,CallableType,. . . ArgTypes> struct TIsInvocableImpl { enum { Value = false } ; } ; template<CallableType,. . . ArgTypes> struct TIsInvocableImpl<TVoid<)",
    "insertText": "decltype(Invoke(DeclVal<CallableType>(), DeclVal<ArgTypes>()...))"
  }
]