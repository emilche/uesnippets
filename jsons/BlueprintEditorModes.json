[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditor"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "GetLocalizedMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintEditor . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" WorkflowOrientedApp / ApplicationMode . h \" # include \" WorkflowOrientedApp / WorkflowTabManager . h \" class AActor ; class FBlueprintEditor ; class FTabManager ; class UActorComponent ; struct FBlueprintEditorApplicationModes { const FName StandardBlueprintEditorMode ; const FName BlueprintDefaultsMode ; const FName BlueprintComponentsMode ; const FName BlueprintInterfaceMode ; const FName BlueprintMacroMode ; FText)",
    "insertText": "GetLocalizedMode(const FName InMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FText> LocModes ;)",
    "insertText": "if(LocModes.Num() == 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocModes .)",
    "insertText": "Add(StandardBlueprintEditorMode, NSLOCTEXT(\"BlueprintEditor\", \"StandardBlueprintEditorMode\", \"Graph\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocModes .)",
    "insertText": "Add(BlueprintDefaultsMode, NSLOCTEXT(\"BlueprintEditor\", \"BlueprintDefaultsMode\", \"Defaults\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocModes .)",
    "insertText": "Add(BlueprintComponentsMode, NSLOCTEXT(\"BlueprintEditor\", \"BlueprintComponentsMode\", \"Components\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocModes .)",
    "insertText": "Add(BlueprintInterfaceMode, NSLOCTEXT(\"BlueprintEditor\", \"BlueprintInterfaceMode\", \"Interface\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LocModes .)",
    "insertText": "Add(BlueprintMacroMode, NSLOCTEXT(\"BlueprintEditor\", \"BlueprintMacroMode\", \"Macro\"))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(InMode != NAME_None)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FText* OutDesc = LocModes .)",
    "insertText": "Find(InMode)"
  },
  {
    "label": "FBlueprintEditorApplicationMode()",
    "kind": "Method",
    "detail": "Function (} } ; class FBlueprintEditorApplicationMode : public FApplicationMode { public :)",
    "insertText": "FBlueprintEditorApplicationMode(TSharedPtr<class FBlueprintEditor> InBlueprintEditor, FName InModeName, FText(*GetLocalizedMode)(const FName), const bool bRegisterViewport = true, const bool bRegisterDefaultsTab = true)"
  },
  {
    "label": "RegisterTabFactories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTabFactories(TSharedPtr<FTabManager> InTabManager)"
  },
  {
    "label": "PreDeactivateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreDeactivateMode()"
  },
  {
    "label": "PostActivateMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostActivateMode()"
  },
  {
    "label": "FBlueprintDefaultsApplicationMode()",
    "kind": "Method",
    "detail": "Function (public : protected : TWeakPtr<FBlueprintEditor> MyBlueprintEditor ; FWorkflowAllowedTabSet BlueprintEditorTabFactories ; FWorkflowAllowedTabSet CoreTabFactories ; FWorkflowAllowedTabSet BlueprintEditorOnlyTabFactories ; } ; class FBlueprintDefaultsApplicationMode : public FApplicationMode { public :)",
    "insertText": "FBlueprintDefaultsApplicationMode(TSharedPtr<class FBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FBlueprintComponentsApplicationMode()",
    "kind": "Method",
    "detail": "Function (public : protected : TWeakPtr<FBlueprintEditor> MyBlueprintEditor ; FWorkflowAllowedTabSet BlueprintDefaultsTabFactories ; } ; class FBlueprintComponentsApplicationMode : public FApplicationMode { public :)",
    "insertText": "FBlueprintComponentsApplicationMode(TSharedPtr<class FBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "GetBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FBlueprintEditor>)",
    "insertText": "GetBlueprintEditor()"
  },
  {
    "label": "GetPreviewActor()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetPreviewActor()"
  },
  {
    "label": "FBlueprintInterfaceApplicationMode()",
    "kind": "Method",
    "detail": "Function (protected : TWeakPtr<FBlueprintEditor> MyBlueprintEditor ; FWorkflowAllowedTabSet BlueprintComponentsTabFactories ; TArray<TWeakObjectPtr<const UActorComponent>> CachedComponentSelection ; } ; class FBlueprintInterfaceApplicationMode : public FApplicationMode { public :)",
    "insertText": "FBlueprintInterfaceApplicationMode(TSharedPtr<class FBlueprintEditor> InBlueprintEditor, FName InModeName = FBlueprintEditorApplicationModes::BlueprintInterfaceMode, FText(*GetLocalizedMode)(const FName) = FBlueprintEditorApplicationModes::GetLocalizedMode)"
  },
  {
    "label": "FBlueprintMacroApplicationMode()",
    "kind": "Method",
    "detail": "Function (public : protected : TWeakPtr<FBlueprintEditor> MyBlueprintEditor ; FWorkflowAllowedTabSet BlueprintInterfaceTabFactories ; } ; class FBlueprintMacroApplicationMode : public FApplicationMode { public :)",
    "insertText": "FBlueprintMacroApplicationMode(TSharedPtr<class FBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "FBlueprintEditorUnifiedMode()",
    "kind": "Method",
    "detail": "Function (public : protected : TWeakPtr<FBlueprintEditor> MyBlueprintEditor ; FWorkflowAllowedTabSet BlueprintMacroTabFactories ; } ; class FBlueprintEditorUnifiedMode : public FApplicationMode { public :)",
    "insertText": "FBlueprintEditorUnifiedMode(TSharedPtr<class FBlueprintEditor> InBlueprintEditor, FName InModeName, FText(*GetLocalizedMode)( const FName ), const bool bRegisterViewport = true)"
  }
]