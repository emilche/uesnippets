[
  {
    "label": "SupportsWeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SupportsWeakPtr"
  },
  {
    "label": "WeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtr"
  },
  {
    "label": "WeakReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakReference"
  },
  {
    "label": "Flag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Flag"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "WeakReferenceOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakReferenceOwner"
  },
  {
    "label": "WeakPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtrBase"
  },
  {
    "label": "SupportsWeakPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SupportsWeakPtrBase"
  },
  {
    "label": "WeakPtrFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtrFactory"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "WeakPtrFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtrFactoryBase"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_WEAK_PTR_H_ # define CEF_INCLUDE_BASE_CEF_WEAK_PTR_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "Flag()",
    "kind": "Method",
    "detail": "Function (template<T> class SupportsWeakPtr ; template<T> class WeakPtr ; namespace internal { class WeakReference { public : class Flag : public RefCountedThreadSafe<Flag> { public :)",
    "insertText": "Flag()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "MaybeValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaybeValid()"
  },
  {
    "label": "DetachFromThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromThread()"
  },
  {
    "label": "WeakReference()",
    "kind": "Method",
    "detail": "Function (base::ThreadChecker thread_checker_ ; AtomicFlag invalidated_ ; } ;)",
    "insertText": "WeakReference()"
  },
  {
    "label": "WeakReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeakReference(const scoped_refptr<Flag>& flag)"
  },
  {
    "label": "WeakReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeakReference(WeakReference&& other)"
  },
  {
    "label": "WeakReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeakReference(const WeakReference& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WeakReference&)",
    "insertText": "operator(WeakReference&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WeakReference&)",
    "insertText": "operator(const WeakReference& other)"
  },
  {
    "label": "WeakReferenceOwner()",
    "kind": "Method",
    "detail": "Function (private : scoped_refptr<const Flag> flag_ ; } ; class WeakReferenceOwner { public :)",
    "insertText": "WeakReferenceOwner()"
  },
  {
    "label": "GetRef()",
    "kind": "Method",
    "detail": "Function (WeakReference)",
    "insertText": "GetRef()"
  },
  {
    "label": "HasRefs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRefs()"
  },
  {
    "label": "WeakPtrBase()",
    "kind": "Method",
    "detail": "Function (private : scoped_refptr<WeakReference::Flag> flag_ ; } ; class WeakPtrBase { public :)",
    "insertText": "WeakPtrBase()"
  },
  {
    "label": "WeakPtrBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeakPtrBase(const WeakPtrBase& other)"
  },
  {
    "label": "WeakPtrBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeakPtrBase(WeakPtrBase&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WeakPtrBase&)",
    "insertText": "operator(const WeakPtrBase& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WeakPtrBase&)",
    "insertText": "operator(WeakPtrBase&& other)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "WeakPtrBase()",
    "kind": "Method",
    "detail": "Function (ptr_ = 0 ; } protected :)",
    "insertText": "WeakPtrBase(const WeakReference& ref, uintptr_t ptr)"
  },
  {
    "label": "StaticAsWeakPtr()",
    "kind": "Method",
    "detail": "Function (WeakReference ref_ ; uintptr_t ptr_ ; } ; class SupportsWeakPtrBase { public : template<Derived> WeakPtr<Derived>)",
    "insertText": "StaticAsWeakPtr(Derived* t)"
  },
  {
    "label": "AsWeakPtrImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<Derived,Base> WeakPtr<Derived>)",
    "insertText": "AsWeakPtrImpl(SupportsWeakPtr<Base>* t)"
  },
  {
    "label": "AsWeakPtr()",
    "kind": "Method",
    "detail": "Function (WeakPtr<Base> ptr = t ->)",
    "insertText": "AsWeakPtr()"
  },
  {
    "label": "WeakPtr()",
    "kind": "Method",
    "detail": "Function (} } ; } template<T> class WeakPtrFactory ; template<T> class WeakPtr : public internal::WeakPtrBase { public :)",
    "insertText": "WeakPtr()"
  },
  {
    "label": "WeakPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WeakPtr(std::nullptr_t)"
  },
  {
    "label": "WeakPtr()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "WeakPtr(const WeakPtr<U>& other) : WeakPtrBase(other)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (T* t = reinterpret_cast<)",
    "insertText": "U(other.ptr_)"
  },
  {
    "label": "uintptr_t()",
    "kind": "Method",
    "detail": "Function (ptr_ = reinterpret_cast<)",
    "insertText": "uintptr_t(t)"
  },
  {
    "label": "WeakPtr()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "WeakPtr(WeakPtr<U>&& other) noexcept : WeakPtrBase(std::move(other))"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "WasInvalidated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WasInvalidated()"
  },
  {
    "label": "WeakPtr()",
    "kind": "Method",
    "detail": "Function (} private : class internal::SupportsWeakPtrBase ; template<U> class WeakPtr ; class SupportsWeakPtr<T> ; class WeakPtrFactory<T> ;)",
    "insertText": "WeakPtr(const internal::WeakReference& ref, T* ptr) : WeakPtrBase(ref, reinterpret_cast<uintptr_t>(ptr))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> bool)",
    "insertText": "operator(const WeakPtr<T>& weak_ptr, std::nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "operator(std::nullptr_t, const WeakPtr<T>& weak_ptr)"
  },
  {
    "label": "WeakPtrFactoryBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WeakPtrFactoryBase()"
  },
  {
    "label": "WeakPtrFactory()",
    "kind": "Method",
    "detail": "Function (internal::WeakReferenceOwner weak_reference_owner_ ; uintptr_t ptr_ ; } ; } template<class T> class WeakPtrFactory : public internal::WeakPtrFactoryBase { public :)",
    "insertText": "WeakPtrFactory(T* ptr) : WeakPtrFactoryBase(reinterpret_cast<uintptr_t>(ptr))"
  },
  {
    "label": "WeakPtrFactory()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "WeakPtrFactory()"
  },
  {
    "label": "GetWeakPtr()",
    "kind": "Method",
    "detail": "Function (WeakPtr<T>)",
    "insertText": "GetWeakPtr()"
  },
  {
    "label": "InvalidateWeakPtrs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvalidateWeakPtrs()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(ptr_)"
  },
  {
    "label": "HasWeakPtrs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasWeakPtrs()"
  },
  {
    "label": "DISALLOW_IMPLICIT_CONSTRUCTORS()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "DISALLOW_IMPLICIT_CONSTRUCTORS(WeakPtrFactory)"
  },
  {
    "label": "SupportsWeakPtr()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> class SupportsWeakPtr : public internal::SupportsWeakPtrBase { public :)",
    "insertText": "SupportsWeakPtr()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private : internal::WeakReferenceOwner weak_reference_owner_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(SupportsWeakPtr)"
  },
  {
    "label": "AsWeakPtr()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived> WeakPtr<Derived>)",
    "insertText": "AsWeakPtr(Derived* t)"
  }
]