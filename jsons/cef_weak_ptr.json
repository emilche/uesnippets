[
  {
    "label": "Controller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Controller"
  },
  {
    "label": "Worker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Worker"
  },
  {
    "label": "SupportsWeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SupportsWeakPtr"
  },
  {
    "label": "WeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtr"
  },
  {
    "label": "WeakReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakReference"
  },
  {
    "label": "Flag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Flag"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "WeakReferenceOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakReferenceOwner"
  },
  {
    "label": "simplifies",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "simplifies"
  },
  {
    "label": "gives",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "gives"
  },
  {
    "label": "WeakPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtrBase"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "SupportsWeakPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SupportsWeakPtrBase"
  },
  {
    "label": "WeakPtrFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtrFactory"
  },
  {
    "label": "holds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "holds"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "before",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "before"
  },
  {
    "label": "Foo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Foo"
  },
  {
    "label": "WeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtr"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "WeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtr"
  },
  {
    "label": "SupportsWeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SupportsWeakPtr"
  },
  {
    "label": "WeakPtrFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtrFactory"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "WeakPtrFactoryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtrFactoryBase"
  },
  {
    "label": "may",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "may"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "WeakPtrFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WeakPtrFactory"
  },
  {
    "label": "may",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "may"
  },
  {
    "label": "itself",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "itself"
  },
  {
    "label": "until",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "until"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "SupportsWeakPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SupportsWeakPtr"
  },
  {
    "label": "Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Base"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "Flag()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Flag()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "DetachFromThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromThread()"
  },
  {
    "label": "WeakReference()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "WeakReference(const scoped_refptr<Flag>& flag)"
  },
  {
    "label": "WeakReferenceOwner()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "WeakReferenceOwner()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "WeakPtrBase()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "WeakPtrBase()"
  },
  {
    "label": "WeakPtrBase()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "WeakPtrBase(const WeakReference& ref, uintptr_t ptr)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "get()"
  },
  {
    "label": "WeakPtrFactoryBase()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "WeakPtrFactoryBase(uintptr_t ptr)"
  },
  {
    "label": "DISALLOW_IMPLICIT_CONSTRUCTORS()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "DISALLOW_IMPLICIT_CONSTRUCTORS(WeakPtrFactory)"
  }
]