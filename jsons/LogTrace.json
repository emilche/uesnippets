[
  {
    "label": "FLogCategoryBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogCategoryBase"
  },
  {
    "label": "FChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannel"
  },
  {
    "label": "FLogTrace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLogTrace"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / Build . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Trace / Config . h \" # include \" Trace / Trace . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # if !)",
    "insertText": "defined(LOGTRACE_ENABLED) #if UE_TRACE_ENABLED && !UE_BUILD_SHIPPING #define LOGTRACE_ENABLED 1 #else #define LOGTRACE_ENABLED 0 #endif #endif #if LOGTRACE_ENABLED #include \"ProfilingDebugging/FormatArgsTrace.h\" #if !defined(LOGTRACE_RUNTIME_FORMATTING_ENABLED) #define LOGTRACE_RUNTIME_FORMATTING_ENABLED 1 #endif UE_TRACE_CHANNEL_EXTERN(LogChannel, CORE_API)"
  },
  {
    "label": "OutputLogCategory()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace Trace { class FChannel ; } } struct FLogTrace { void)",
    "insertText": "OutputLogCategory(const FLogCategoryBase* Category, const TCHAR* Name, ELogVerbosity::Type DefaultVerbosity)"
  },
  {
    "label": "OutputLogMessageSpec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputLogMessageSpec(const void* LogPoint, const FLogCategoryBase* Category, ELogVerbosity::Type Verbosity, const ANSICHAR* File, int32 Line, const TCHAR* Format)"
  },
  {
    "label": "OutputLogMessageSimple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputLogMessageSimple(const void* LogPoint, const TCHAR* Fmt, ...)"
  },
  {
    "label": "OutputLogMessage()",
    "kind": "Method",
    "detail": "Function (template<. . . Types> FORCENOINLINE void)",
    "insertText": "OutputLogMessage(const void* LogPoint, Types... FormatArgs)"
  },
  {
    "label": "EncodeArgumentsWithArray()",
    "kind": "Method",
    "detail": "Function (FFormatArgsTrace::TBufferWithOverflow<1 6 0 0> Buffer ; const int32 FormatArgsSize =)",
    "insertText": "EncodeArgumentsWithArray(Buffer, FormatArgs...)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const uint8* FormatArgsBuffer = Buffer .)",
    "insertText": "GetData()"
  },
  {
    "label": "OutputLogMessageInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputLogMessageInternal(LogPoint, FormatArgsSize, FormatArgsBuffer)"
  },
  {
    "label": "OutputLogMessageInternal()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "OutputLogMessageInternal(const void* LogPoint, int32 EncodedFormatArgsSize, const uint8* EncodedFormatArgs)"
  },
  {
    "label": "TRACE_LOG_CATEGORY()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "TRACE_LOG_CATEGORY(Category, Name, DefaultVerbosity) \\ FLogTrace::OutputLogCategory(Category, Name, DefaultVerbosity)"
  },
  {
    "label": "TRACE_LOG_MESSAGE()",
    "kind": "Method",
    "detail": "Function (# if LOGTRACE_RUNTIME_FORMATTING_ENABLED # define)",
    "insertText": "TRACE_LOG_MESSAGE(Category, Verbosity, Format, ...) \\ if (UE_TRACE_CHANNELEXPR_IS_ENABLED(LogChannel))"
  },
  {
    "label": "PREPROCESSOR_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ bool)",
    "insertText": "PREPROCESSOR_JOIN(__LogPoint, __LINE__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!PREPROCESSOR_JOIN(__LogPoint, __LINE__))"
  },
  {
    "label": "OutputLogMessageSpec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OutputLogMessageSpec(&PREPROCESSOR_JOIN(__LogPoint, __LINE__), &Category, ELogVerbosity::Verbosity, __FILE__, __LINE__, TEXT(\"%s\"))"
  },
  {
    "label": "OutputLogMessageSimple()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "OutputLogMessageSimple(&PREPROCESSOR_JOIN(__LogPoint, __LINE__), Format, ##__VA_ARGS__)"
  },
  {
    "label": "TRACE_LOG_MESSAGE()",
    "kind": "Method",
    "detail": "Function (\\ } # else # define)",
    "insertText": "TRACE_LOG_MESSAGE(Category, Verbosity, Format, ...) \\ static_assert(TIsArrayOrRefOfTypeByPredicate<decltype(Format), TIsCharEncodingCompatibleWithTCHAR>::Value, \"Formatting string must be a TCHAR array.\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(UE_TRACE_CHANNELEXPR_IS_ENABLED(LogChannel))"
  },
  {
    "label": "OutputLogMessageSpec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "OutputLogMessageSpec(&PREPROCESSOR_JOIN(__LogPoint, __LINE__), &Category, ELogVerbosity::Verbosity, __FILE__, __LINE__, (const TCHAR*)Format)"
  },
  {
    "label": "OutputLogMessage()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "OutputLogMessage(&PREPROCESSOR_JOIN(__LogPoint, __LINE__), ##__VA_ARGS__)"
  }
]