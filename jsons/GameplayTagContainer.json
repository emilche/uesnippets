[
  {
    "label": "UEditableGameplayTagQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQuery"
  },
  {
    "label": "FGameplayTagContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagContainer"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGameplayTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTag"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "property",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "property"
  },
  {
    "label": "UPackageMapClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMapClient"
  },
  {
    "label": "UGameplayTagsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTagsManager"
  },
  {
    "label": "FGameplayTagRedirectors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayTagRedirectors"
  },
  {
    "label": "FNativeGameplayTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNativeGameplayTag"
  },
  {
    "label": "FGameplayTagContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagContainer"
  },
  {
    "label": "FGameplayTagNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagNode"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FGameplayTagContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagContainer"
  },
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "FGameplayTagQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQuery"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UGameplayTagsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTagsManager"
  },
  {
    "label": "FGameplayTagRedirectors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayTagRedirectors"
  },
  {
    "label": "FGameplayTagQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQuery"
  },
  {
    "label": "FGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQueryExpression"
  },
  {
    "label": "FGameplayTagNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagNode"
  },
  {
    "label": "FGameplayTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTag"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FGameplayTagNativeAdder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagNativeAdder"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FGameplayTagCreationWidgetHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagCreationWidgetHelper"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FGameplayTagQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQuery"
  },
  {
    "label": "FGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQueryExpression"
  },
  {
    "label": "FGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQueryExpression"
  },
  {
    "label": "FGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQueryExpression"
  },
  {
    "label": "UEditableGameplayTagQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQuery"
  },
  {
    "label": "FQueryEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueryEvaluator"
  },
  {
    "label": "FGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQueryExpression"
  },
  {
    "label": "FGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQueryExpression"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "UEditableGameplayTagQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQuery"
  },
  {
    "label": "UEditableGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression"
  },
  {
    "label": "UEditableGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_AnyTagsMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_AnyTagsMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_AllTagsMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_AllTagsMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_NoTagsMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_NoTagsMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_AnyExprMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_AnyExprMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_AllExprMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_AllExprMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_NoExprMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_NoExprMatch"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (GAMEPLAYTAGS_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogGameplayTags, Log, All)"
  },
  {
    "label": "RequestGameplayTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "RequestGameplayTag(const FName& TagName, bool ErrorIfNotFound=true)"
  },
  {
    "label": "IsValidGameplayTagString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidGameplayTagString(const FString& TagString, FText* OutError = nullptr, FString* OutFixedString = nullptr)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetTypeHash(Tag.TagName)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "NetSerialize_Packed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize_Packed(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "FromExportString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromExportString(const FString& ExportString, int32 PortFlags = 0)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "NetSerialize_ForReplayUsingFastReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize_ForReplayUsingFastReplication(FArchive& Ar, class UPackageMapClient& PackageMapClient)"
  },
  {
    "label": "FGameplayTag()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FGameplayTag(const FName& InTagName)"
  },
  {
    "label": "AppendTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTags(FGameplayTagContainer const& Other)"
  },
  {
    "label": "AppendMatchingTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMatchingTags(FGameplayTagContainer const& OtherA, FGameplayTagContainer const& OtherB)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTag(const FGameplayTag& TagToAdd)"
  },
  {
    "label": "AddTagFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagFast(const FGameplayTag& TagToAdd)"
  },
  {
    "label": "AddLeafTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddLeafTag(const FGameplayTag& TagToAdd)"
  },
  {
    "label": "RemoveTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTag(const FGameplayTag& TagToRemove, bool bDeferParentTags=false)"
  },
  {
    "label": "RemoveTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTags(const FGameplayTagContainer& TagsToRemove)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 Slack = 0)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "PostScriptConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostScriptConstruct()"
  },
  {
    "label": "FromExportString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromExportString(const FString& ExportString, int32 PortFlags = 0)"
  },
  {
    "label": "FGameplayTag()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FGameplayTag()"
  },
  {
    "label": "FillParentTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillParentTags()"
  },
  {
    "label": "DoesTagContainerMatch()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DoesTagContainerMatch(OtherExpanded, TagMatchType, EGameplayTagMatchType::Explicit, ContainerMatchType)"
  },
  {
    "label": "RemoveTagByExplicitName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTagByExplicitName(const FName& TagName)"
  },
  {
    "label": "AddParentsForTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParentsForTag(const FGameplayTag& Tag)"
  },
  {
    "label": "FGameplayTagNativeAdder()",
    "kind": "Method",
    "detail": "Function (GAMEPLAYTAGS_API)",
    "insertText": "FGameplayTagNativeAdder()"
  },
  {
    "label": "FGameplayTagQuery()",
    "kind": "Method",
    "detail": "Function (GAMEPLAYTAGS_API)",
    "insertText": "FGameplayTagQuery()"
  },
  {
    "label": "FGameplayTagQuery()",
    "kind": "Method",
    "detail": "Function (GAMEPLAYTAGS_API)",
    "insertText": "FGameplayTagQuery(FGameplayTagQuery const& Other)"
  },
  {
    "label": "FGameplayTagQuery()",
    "kind": "Method",
    "detail": "Function (GAMEPLAYTAGS_API)",
    "insertText": "FGameplayTagQuery(FGameplayTagQuery&& Other)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "BuildFromEditableQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFromEditableQuery(class UEditableGameplayTagQuery& EditableQuery)"
  },
  {
    "label": "MakeQuery_MatchAnyTags()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery)",
    "insertText": "MakeQuery_MatchAnyTags(FGameplayTagContainer const& InTags)"
  },
  {
    "label": "MakeQuery_MatchAllTags()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery)",
    "insertText": "MakeQuery_MatchAllTags(FGameplayTagContainer const& InTags)"
  },
  {
    "label": "MakeQuery_MatchNoTags()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery)",
    "insertText": "MakeQuery_MatchNoTags(FGameplayTagContainer const& InTags)"
  },
  {
    "label": "MakeQuery_MatchTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery)",
    "insertText": "MakeQuery_MatchTag(FGameplayTag const& InTag)"
  },
  {
    "label": "MakeFromJsonObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeFromJsonObject(const TSharedRef<FJsonObject>& InObject, FGameplayTagQueryExpression& OutQueryExpression)"
  },
  {
    "label": "GetTagQueryExportText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTagQueryExportText(FGameplayTagQuery const& TagQuery)"
  }
]