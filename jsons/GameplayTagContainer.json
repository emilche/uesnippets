[
  {
    "label": "UEditableGameplayTagQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQuery"
  },
  {
    "label": "FGameplayTagContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagContainer"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGameplayTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTag"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UPackageMapClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMapClient"
  },
  {
    "label": "UGameplayTagsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTagsManager"
  },
  {
    "label": "FGameplayTagRedirectors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayTagRedirectors"
  },
  {
    "label": "FNativeGameplayTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNativeGameplayTag"
  },
  {
    "label": "FGameplayTagNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagNode"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "FGameplayTagQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQuery"
  },
  {
    "label": "FGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagQueryExpression"
  },
  {
    "label": "FGameplayTagNativeAdder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagNativeAdder"
  },
  {
    "label": "FGameplayTagCreationWidgetHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGameplayTagCreationWidgetHelper"
  },
  {
    "label": "FQueryEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueryEvaluator"
  },
  {
    "label": "UEditableGameplayTagQueryExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_AnyTagsMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_AnyTagsMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_AllTagsMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_AllTagsMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_NoTagsMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_NoTagsMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_AnyExprMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_AnyExprMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_AllExprMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_AllExprMatch"
  },
  {
    "label": "UEditableGameplayTagQueryExpression_NoExprMatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditableGameplayTagQueryExpression_NoExprMatch"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" Misc / ComparisonUtility . h \" # include \" GameplayTagContainer . generated . h \" class UEditableGameplayTagQuery ; struct FGameplayTagContainer ; class FJsonObject ; struct FPropertyTag ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogGameplayTags, Log, All)"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"Gameplay Tags\"), STATGROUP_GameplayTags, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"FGameplayTagContainer::DoesTagContainerMatch\"), STAT_FGameplayTagContainer_DoesTagContainerMatch, STATGROUP_GameplayTags, GAMEPLAYTAGS_API)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (enum Type {,IncludeParentTags,} ; })",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Any,All } ; typedef uint16 FGameplayTagNetIndex ; # define INVALID_TAGNETINDEX MAX_uint16)",
    "insertText": "USTRUCT(BlueprintType, meta = (HasNativeMake = \"/Script/GameplayTags.BlueprintGameplayTagLibrary.MakeLiteralGameplayTag\", HasNativeBreak = \"/Script/GameplayTags.BlueprintGameplayTagLibrary.GetTagName\", DisableSplitPin))"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FGameplayTag()"
  },
  {
    "label": "RequestGameplayTag()",
    "kind": "Method",
    "detail": "Function (} FGameplayTag)",
    "insertText": "RequestGameplayTag(const FName& TagName, bool ErrorIfNotFound=true)"
  },
  {
    "label": "IsValidGameplayTagString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidGameplayTagString(const FString& TagString, FText* OutError = nullptr, FString* OutFixedString = nullptr)"
  },
  {
    "label": "MatchesTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MatchesTag(const FGameplayTag& TagToCheck)"
  },
  {
    "label": "MatchesAny()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesAny(const FGameplayTagContainer& ContainerToCheck)"
  },
  {
    "label": "MatchesAnyExact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesAnyExact(const FGameplayTagContainer& ContainerToCheck)"
  },
  {
    "label": "GetSingleTagContainer()",
    "kind": "Method",
    "detail": "Function (} FGameplayTagContainer)",
    "insertText": "GetSingleTagContainer()"
  },
  {
    "label": "RequestDirectParent()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "RequestDirectParent()"
  },
  {
    "label": "GetGameplayTagParents()",
    "kind": "Method",
    "detail": "Function (FGameplayTagContainer)",
    "insertText": "GetGameplayTagParents()"
  },
  {
    "label": "ParseParentTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseParentTags(TArray<FGameplayTag>& UniqueParentTags)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GetTagName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetTagName()"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (Slot<<GameplayTag . TagName ; } bool)",
    "insertText": "NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "NetSerialize_Packed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetSerialize_Packed(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "FromExportString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromExportString(const FString& ExportString, int32 PortFlags = 0)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "NetSerialize_ForReplayUsingFastReplication()",
    "kind": "Method",
    "detail": "Function (const FGameplayTag EmptyTag ; protected : bool)",
    "insertText": "NetSerialize_ForReplayUsingFastReplication(FArchive& Ar, class UPackageMapClient& PackageMapClient)"
  },
  {
    "label": "FGameplayTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayTag(const FName& InTagName)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (class UGameplayTagsManager ; class FGameplayTagRedirectors ; class FNativeGameplayTag ; struct FGameplayTagContainer ; struct FGameplayTagNode ; } ; template<> struct TStructOpsTypeTraits<FGameplayTag> : public TStructOpsTypeTraitsBase2<FGameplayTag> { enum { WithNetSerializer = true,WithNetSharedSerialization = true,WithPostSerialize = true,WithStructuredSerializeFromMismatchedTag = true,WithImportTextItem = true,} ; } ;)",
    "insertText": "USTRUCT(BlueprintType, meta = (HasNativeMake = \"/Script/GameplayTags.BlueprintGameplayTagLibrary.MakeGameplayTagContainerFromArray\", HasNativeBreak = \"/Script/GameplayTags.BlueprintGameplayTagLibrary.BreakGameplayTagContainer\"))"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FGameplayTagContainer()"
  },
  {
    "label": "FGameplayTagContainer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGameplayTagContainer(FGameplayTagContainer const& Other)"
  },
  {
    "label": "FGameplayTagContainer()",
    "kind": "Method",
    "detail": "Function (* this = Other ; })",
    "insertText": "FGameplayTagContainer(const FGameplayTag& Tag)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTag(Tag)"
  },
  {
    "label": "FGameplayTagContainer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGameplayTagContainer(FGameplayTagContainer&& Other) : GameplayTags(MoveTemp(Other.GameplayTags)) , ParentTags(MoveTemp(Other.ParentTags))"
  },
  {
    "label": "FGameplayTagContainer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGameplayTagContainer()"
  },
  {
    "label": "CreateFromArray()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType> FGameplayTagContainer)",
    "insertText": "CreateFromArray(const TArray<FGameplayTag, AllocatorType>& SourceTags)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (FGameplayTagContainer Container ; Container . GameplayTags .)",
    "insertText": "Append(SourceTags)"
  },
  {
    "label": "FillParentTags()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "FillParentTags()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGameplayTagContainer&)",
    "insertText": "operator(FGameplayTagContainer&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FGameplayTagContainer const& Other)"
  },
  {
    "label": "HasTagExact()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasTagExact(const FGameplayTag& TagToCheck)"
  },
  {
    "label": "HasAny()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAny(const FGameplayTagContainer& ContainerToCheck)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (FGameplayTagContainer)",
    "insertText": "Filter(const FGameplayTagContainer& OtherContainer)"
  },
  {
    "label": "FilterExact()",
    "kind": "Method",
    "detail": "Function (FGameplayTagContainer)",
    "insertText": "FilterExact(const FGameplayTagContainer& OtherContainer)"
  },
  {
    "label": "MatchesQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchesQuery(const struct FGameplayTagQuery& Query)"
  },
  {
    "label": "AppendTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendTags(FGameplayTagContainer const& Other)"
  },
  {
    "label": "AppendMatchingTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMatchingTags(FGameplayTagContainer const& OtherA, FGameplayTagContainer const& OtherB)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTag(const FGameplayTag& TagToAdd)"
  },
  {
    "label": "AddTagFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagFast(const FGameplayTag& TagToAdd)"
  },
  {
    "label": "AddLeafTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddLeafTag(const FGameplayTag& TagToAdd)"
  },
  {
    "label": "RemoveTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTag(const FGameplayTag& TagToRemove, bool bDeferParentTags=false)"
  },
  {
    "label": "RemoveTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTags(const FGameplayTagContainer& TagsToRemove)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 Slack = 0)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "PostScriptConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostScriptConstruct()"
  },
  {
    "label": "ToStringSimple()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToStringSimple(bool bQuoted = false)"
  },
  {
    "label": "ToStringsMaxLen()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "ToStringsMaxLen(int32 MaxLen)"
  },
  {
    "label": "ToMatchingText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "ToMatchingText(EGameplayContainerMatchType MatchType, bool bInvertCondition)"
  },
  {
    "label": "GetGameplayTagArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGameplayTagArray(TArray<FGameplayTag>& InOutGameplayTags)"
  },
  {
    "label": "GetGameplayTagArray()",
    "kind": "Method",
    "detail": "Function (InOutGameplayTags = GameplayTags ; } const TArray<FGameplayTag>&)",
    "insertText": "GetGameplayTagArray()"
  },
  {
    "label": "CreateConstIterator()",
    "kind": "Method",
    "detail": "Function (TArray<FGameplayTag>::TConstIterator)",
    "insertText": "CreateConstIterator()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "GetByIndex()",
    "kind": "Method",
    "detail": "Function (} FGameplayTag)",
    "insertText": "GetByIndex(int32 Index)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} FGameplayTag)",
    "insertText": "First()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} FGameplayTag)",
    "insertText": "Last()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult ;)",
    "insertText": "if(TagToCheckMatchType == EGameplayTagMatchType::Explicit)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bResult = GameplayTags .)",
    "insertText": "Contains(TagToCheck)"
  },
  {
    "label": "ComplexHasTag()",
    "kind": "Method",
    "detail": "Function (} } else { bResult =)",
    "insertText": "ComplexHasTag(TagToCheck, TagMatchType, TagToCheckMatchType)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_FGameplayTagContainer_DoesTagContainerMatch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bResult ;)",
    "insertText": "if(OtherTagMatchType == EGameplayTagMatchType::Explicit)"
  },
  {
    "label": "bResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bResult(ContainerMatchType == EGameplayContainerMatchType::All)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bResult = true ; break ; } } else)",
    "insertText": "if(ContainerMatchType == EGameplayContainerMatchType::All)"
  },
  {
    "label": "RemoveTagByExplicitName()",
    "kind": "Method",
    "detail": "Function (} return bResult ; } PRAGMA_ENABLE_DEPRECATION_WARNINGS protected : bool)",
    "insertText": "RemoveTagByExplicitName(const FName& TagName)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (class UGameplayTagsManager ; class FGameplayTagRedirectors ; struct FGameplayTagQuery ; struct FGameplayTagQueryExpression ; struct FGameplayTagNode ; struct FGameplayTag ; private : TArray<FGameplayTag>::TConstIterator)",
    "insertText": "begin(const FGameplayTagContainer& Array)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TArray<FGameplayTag>::TConstIterator)",
    "insertText": "end(const FGameplayTagContainer& Array)"
  },
  {
    "label": "FGameplayTagNativeAdder()",
    "kind": "Method",
    "detail": "Function (} template<> struct TStructOpsTypeTraits<FGameplayTagContainer> : public TStructOpsTypeTraitsBase2<FGameplayTagContainer> { enum { WithStructuredSerializer = true,WithIdenticalViaEquality = true,WithNetSerializer = true,WithNetSharedSerialization = true,WithImportTextItem = true,WithCopy = true,WithPostScriptConstruct = true,} ; EPropertyObjectReferenceType WithSerializerObjectReferences = EPropertyObjectReferenceType::None ; } ; struct FGameplayTagNativeAdder {)",
    "insertText": "FGameplayTagNativeAdder()"
  },
  {
    "label": "AddTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTags()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Undefined = 0,AnyTagsMatch,AllTagsMatch,NoTagsMatch,AnyExprMatch,AllExprMatch,NoExprMatch } ; namespace EGameplayTagQueryStreamVersion { enum Type { InitialVersion = 0,VersionPlusOne,LatestVersion = VersionPlusOne - 1 } ; })",
    "insertText": "USTRUCT(BlueprintType, meta=(HasNativeMake=\"/Script/GameplayTags.BlueprintGameplayTagLibrary.MakeGameplayTagQuery\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "FGameplayTagQuery()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FGameplayTagQuery()"
  },
  {
    "label": "FGameplayTagQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayTagQuery(FGameplayTagQuery const& Other)"
  },
  {
    "label": "FGameplayTagQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGameplayTagQuery(FGameplayTagQuery&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery&)",
    "insertText": "operator(FGameplayTagQuery const& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery&)",
    "insertText": "operator(FGameplayTagQuery&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FGameplayTagQuery& Other)"
  },
  {
    "label": "GetTagFromIndex()",
    "kind": "Method",
    "detail": "Function (FGameplayTag)",
    "insertText": "GetTagFromIndex(int32 TagIdx)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TagDictionary .)",
    "insertText": "Reset()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (TagDictionary .)",
    "insertText": "Append(Tags.GameplayTags)"
  },
  {
    "label": "ReplaceTagFast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceTagFast(FGameplayTag const& Tag)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TagDictionary .)",
    "insertText": "Add(Tag)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(FGameplayTagContainer const& Tags)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(struct FGameplayTagQueryExpression& RootQueryExpr, FString InUserDescription = FString())"
  },
  {
    "label": "BuildQuery()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery)",
    "insertText": "BuildQuery(struct FGameplayTagQueryExpression& RootQueryExpr, FString InDescription = FString())"
  },
  {
    "label": "GetQueryExpr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetQueryExpr(struct FGameplayTagQueryExpression& OutExpr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "SetUserDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserDescription(const FString& InUserDescription)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (UserDescription = InUserDescription ; } const FString&)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetGameplayTagArray()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetGameplayTagArray(TArray<FGameplayTag>& OutGameplayTags)"
  },
  {
    "label": "BuildFromEditableQuery()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "BuildFromEditableQuery(class UEditableGameplayTagQuery& EditableQuery)"
  },
  {
    "label": "CreateEditableQuery()",
    "kind": "Method",
    "detail": "Function (UEditableGameplayTagQuery*)",
    "insertText": "CreateEditableQuery()"
  },
  {
    "label": "MakeQuery_MatchAnyTags()",
    "kind": "Method",
    "detail": "Function (# endif const FGameplayTagQuery EmptyQuery ; FGameplayTagQuery)",
    "insertText": "MakeQuery_MatchAnyTags(FGameplayTagContainer const& InTags)"
  },
  {
    "label": "MakeQuery_MatchAllTags()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery)",
    "insertText": "MakeQuery_MatchAllTags(FGameplayTagContainer const& InTags)"
  },
  {
    "label": "MakeQuery_MatchNoTags()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery)",
    "insertText": "MakeQuery_MatchNoTags(FGameplayTagContainer const& InTags)"
  },
  {
    "label": "MakeQuery_MatchTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQuery)",
    "insertText": "MakeQuery_MatchTag(FGameplayTag const& InTag)"
  },
  {
    "label": "AnyTagsMatch()",
    "kind": "Method",
    "detail": "Function (class FQueryEvaluator ; } ; struct FGameplayTagQueryExpression { FGameplayTagQueryExpression&)",
    "insertText": "AnyTagsMatch()"
  },
  {
    "label": "AllTagsMatch()",
    "kind": "Method",
    "detail": "Function (ExprType = EGameplayTagQueryExprType::AnyTagsMatch ; return* this ; } FGameplayTagQueryExpression&)",
    "insertText": "AllTagsMatch()"
  },
  {
    "label": "NoTagsMatch()",
    "kind": "Method",
    "detail": "Function (ExprType = EGameplayTagQueryExprType::AllTagsMatch ; return* this ; } FGameplayTagQueryExpression&)",
    "insertText": "NoTagsMatch()"
  },
  {
    "label": "AnyExprMatch()",
    "kind": "Method",
    "detail": "Function (ExprType = EGameplayTagQueryExprType::NoTagsMatch ; return* this ; } FGameplayTagQueryExpression&)",
    "insertText": "AnyExprMatch()"
  },
  {
    "label": "AllExprMatch()",
    "kind": "Method",
    "detail": "Function (ExprType = EGameplayTagQueryExprType::AnyExprMatch ; return* this ; } FGameplayTagQueryExpression&)",
    "insertText": "AllExprMatch()"
  },
  {
    "label": "NoExprMatch()",
    "kind": "Method",
    "detail": "Function (ExprType = EGameplayTagQueryExprType::AllExprMatch ; return* this ; } FGameplayTagQueryExpression&)",
    "insertText": "NoExprMatch()"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (ExprType = EGameplayTagQueryExprType::NoExprMatch ; return* this ; } FGameplayTagQueryExpression&)",
    "insertText": "AddTag(TCHAR const* TagString)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (} FGameplayTagQueryExpression&)",
    "insertText": "AddTag(FName TagName)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (FGameplayTagQueryExpression&)",
    "insertText": "AddTag(FGameplayTag Tag)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ExprSet .)",
    "insertText": "Add(Expr)"
  },
  {
    "label": "UsesTagSet()",
    "kind": "Method",
    "detail": "Function (EGameplayTagQueryExprType ExprType ; TArray<struct FGameplayTagQueryExpression> ExprSet ; TArray<FGameplayTag> TagSet ; bool)",
    "insertText": "UsesTagSet()"
  },
  {
    "label": "UsesExprSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesExprSet()"
  },
  {
    "label": "ConvertToJsonObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ConvertToJsonObject(TSharedRef<FJsonObject>& OutObject)"
  },
  {
    "label": "MakeFromJsonObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeFromJsonObject(const TSharedRef<FJsonObject>& InObject, FGameplayTagQueryExpression& OutQueryExpression)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FGameplayTagQuery> : public TStructOpsTypeTraitsBase2<FGameplayTagQuery> { enum { WithCopy = true } ; } ;)",
    "insertText": "UCLASS(editinlinenew, collapseCategories, Transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditDefaultsOnly, Category = Query)"
  },
  {
    "label": "EmitTokens()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "EmitTokens(TArray<uint8>& TokenStream, TArray<FGameplayTag>& TagDictionary, FString* DebugString=nullptr)"
  },
  {
    "label": "GetTagQueryExportText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTagQueryExportText(FGameplayTagQuery const& TagQuery)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(abstract, editinlinenew, collapseCategories, Transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() #if WITH_EDITOR public: virtual void EmitTokens(TArray<uint8>& TokenStream, TArray<FGameplayTag>& TagDictionary, FString* DebugString=nullptr)"
  },
  {
    "label": "EmitTagTokens()",
    "kind": "Method",
    "detail": "Function (} ; protected : void)",
    "insertText": "EmitTagTokens(FGameplayTagContainer const& TagsToEmit, TArray<uint8>& TokenStream, TArray<FGameplayTag>& TagDictionary, FString* DebugString)"
  },
  {
    "label": "EmitExprListTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitExprListTokens(TArray<UEditableGameplayTagQueryExpression*> const& ExprList, TArray<uint8>& TokenStream, TArray<FGameplayTag>& TagDictionary, FString* DebugString)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(BlueprintType, editinlinenew, collapseCategories, meta=(DisplayName=\"Any Tags Match\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditDefaultsOnly, Category = Expr)"
  },
  {
    "label": "EmitTokens()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "EmitTokens(TArray<uint8>& TokenStream, TArray<FGameplayTag>& TagDictionary, FString* DebugString = nullptr)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(BlueprintType, editinlinenew, collapseCategories, meta = (DisplayName = \"All Tags Match\"))"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(BlueprintType, editinlinenew, collapseCategories, meta = (DisplayName = \"No Tags Match\"))"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(BlueprintType, editinlinenew, collapseCategories, meta = (DisplayName = \"Any Expressions Match\"))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, Instanced, Category = Expr)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(BlueprintType, editinlinenew, collapseCategories, meta = (DisplayName = \"All Expressions Match\"))"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(BlueprintType, editinlinenew, collapseCategories, meta = (DisplayName = \"No Expressions Match\"))"
  }
]