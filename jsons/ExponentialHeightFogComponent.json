[
  {
    "label": "FExponentialHeightFogData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExponentialHeightFogData"
  },
  {
    "label": "UExponentialHeightFogComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExponentialHeightFogComponent"
  },
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Components / SceneComponent . h \" # include \" ExponentialHeightFogComponent . generated . h \")",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadOnly, interp, Category=ExponentialHeightFogComponent, meta = (UIMin = \"0\", UIMax = \".05\"))"
  },
  {
    "label": "ClampToValidRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampToValidRanges()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (FogDensity =)",
    "insertText": "Clamp(FogDensity, 0.0f, 10.0f)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (FogHeightFalloff =)",
    "insertText": "Clamp(FogHeightFalloff, 0.0f, 2.0f)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(ClassGroup=Rendering, collapsecategories, hidecategories=(Object, Mobility), editinlinenew, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(BlueprintReadOnly, interp, Category=ExponentialHeightFogComponent, meta=(UIMin = \"0\", UIMax = \".05\"))"
  },
  {
    "label": "CreateRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CreateRenderState_Concurrent(FRegisterComponentContext* Context)"
  },
  {
    "label": "SendRenderTransform_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderTransform_Concurrent()"
  },
  {
    "label": "DestroyRenderState_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderState_Concurrent()"
  },
  {
    "label": "AddFogIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFogIfNeeded()"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR bool)",
    "insertText": "CanEditChange(const FProperty* InProperty)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  }
]