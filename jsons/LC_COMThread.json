[
  {
    "label": "COMThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COMThread"
  },
  {
    "label": "COMFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "COMFunction"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<type_traits> # include \" LC_Event . h \" # include \" LC_ThreadTypes . h \" class COMThread { struct COMFunction { typedef)",
    "insertText": "void(FunctionType)(void*, void*)"
  },
  {
    "label": "COMThread()",
    "kind": "Method",
    "detail": "Function (FunctionType* function ; void* context ; void* returnValueAddr ; } ; public :)",
    "insertText": "COMThread(void)"
  },
  {
    "label": "CallInThread()",
    "kind": "Method",
    "detail": "Function (template<F,. . . Args> std::invoke_result_t<F,Args . . .>)",
    "insertText": "CallInThread(F ptrToFunction, Args&&... args)"
  },
  {
    "label": "args()",
    "kind": "Method",
    "detail": "Function (typedef std::invoke_result_t<F,Args . . .> ReturnValue ; auto captureLambda = [ ptrToFunction,)",
    "insertText": "args()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; typedef)",
    "insertText": "decltype(captureLambda)"
  },
  {
    "label": "CaptureLambdaType()",
    "kind": "Method",
    "detail": "Function (CaptureLambdaType* realCaptureLambda = static_cast<)",
    "insertText": "CaptureLambdaType(captureLambda)"
  },
  {
    "label": "realReturnValueAddr()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "realReturnValueAddr(*realCaptureLambda)()"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (} ; m_function . context =& captureLambda ; m_function . returnValueAddr =& result ; m_functionAvailableEvent .)",
    "insertText": "Signal()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (m_functionFinishedExecutingEvent .)",
    "insertText": "Wait()"
  }
]