[
  {
    "label": "CacheClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CacheClient"
  },
  {
    "label": "NetworkServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkServer"
  },
  {
    "label": "Process",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Process"
  },
  {
    "label": "ProcessHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessHandle"
  },
  {
    "label": "RootPaths",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootPaths"
  },
  {
    "label": "Session",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Session"
  },
  {
    "label": "SessionServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SessionServer"
  },
  {
    "label": "Scheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scheduler"
  },
  {
    "label": "StorageServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StorageServer"
  },
  {
    "label": "CacheResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CacheResult"
  },
  {
    "label": "ProcessStartInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessStartInfo"
  },
  {
    "label": "SessionServerCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SessionServerCreateInfo"
  },
  {
    "label": "CallbackLogWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackLogWriter"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaLogWriter . h \" # include \" UbaDefaultConstants . h \" namespace uba { class CacheClient ; class NetworkServer ; class Process ; class ProcessHandle ; class RootPaths ; class Session ; class SessionServer ; class Scheduler ; class StorageServer ; struct CacheResult ; struct ProcessStartInfo ; struct SessionServerCreateInfo ; class CallbackLogWriter : public LogWriter { public : using BeginScopeCallback =)",
    "insertText": "void()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using LogCallback =)",
    "insertText": "void(LogEntryType type, const uba::tchar* str, u32 strLen)"
  },
  {
    "label": "CallbackLogWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackLogWriter(BeginScopeCallback* begin, EndScopeCallback* end, LogCallback* log)"
  },
  {
    "label": "BeginScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginScope()"
  },
  {
    "label": "EndScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndScope()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Log(LogEntryType type, const uba::tchar* str, u32 strLen, const uba::tchar* prefix = nullptr, u32 prefixLen = 0)"
  },
  {
    "label": "GetDefaultLogWriter()",
    "kind": "Method",
    "detail": "Function (private : BeginScopeCallback* m_beginScope ; EndScopeCallback* m_endScope ; LogCallback* m_logCallback ; } ; } \" C \" { uba::LogWriter*)",
    "insertText": "GetDefaultLogWriter()"
  },
  {
    "label": "CreateCallbackLogWriter()",
    "kind": "Method",
    "detail": "Function (uba::LogWriter*)",
    "insertText": "CreateCallbackLogWriter(uba::CallbackLogWriter::BeginScopeCallback begin, uba::CallbackLogWriter::EndScopeCallback end, uba::CallbackLogWriter::LogCallback log)"
  },
  {
    "label": "DestroyCallbackLogWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCallbackLogWriter(uba::LogWriter* writer)"
  },
  {
    "label": "Config_Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Config_Load(const uba::tchar* configFile)"
  },
  {
    "label": "NetworkServer_Create()",
    "kind": "Method",
    "detail": "Function (uba::NetworkServer*)",
    "insertText": "NetworkServer_Create(uba::LogWriter& writer = uba::g_consoleLogWriter, uba::u32 workerCount = 64, uba::u32 sendSize = uba::SendDefaultSize, uba::u32 receiveTimeoutSeconds = 60, bool useQuic = false)"
  },
  {
    "label": "NetworkServer_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkServer_Destroy(uba::NetworkServer* server)"
  },
  {
    "label": "NetworkServer_StartListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetworkServer_StartListen(uba::NetworkServer* server, int port = uba::DefaultPort, const uba::tchar* ip = nullptr, const uba::tchar* crypto = nullptr)"
  },
  {
    "label": "NetworkServer_Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkServer_Stop(uba::NetworkServer* server)"
  },
  {
    "label": "NetworkServer_AddClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetworkServer_AddClient(uba::NetworkServer* server, const uba::tchar* ip, int port = uba::DefaultPort, const uba::tchar* crypto = nullptr)"
  },
  {
    "label": "StorageServer_Create()",
    "kind": "Method",
    "detail": "Function (uba::StorageServer*)",
    "insertText": "StorageServer_Create(uba::NetworkServer& server, const uba::tchar* rootDir, uba::u64 casCapacityBytes, bool storeCompressed, uba::LogWriter& writer = uba::g_consoleLogWriter, const uba::tchar* zone = TC(\"\"))"
  },
  {
    "label": "StorageServer_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StorageServer_Destroy(uba::StorageServer* storageServer)"
  },
  {
    "label": "StorageServer_SaveCasTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StorageServer_SaveCasTable(uba::StorageServer* storageServer)"
  },
  {
    "label": "StorageServer_RegisterDisallowedPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StorageServer_RegisterDisallowedPath(uba::StorageServer* storageServer, const uba::tchar* path)"
  },
  {
    "label": "StorageServer_DeleteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StorageServer_DeleteFile(uba::StorageServer* storage, const uba::tchar* file)"
  },
  {
    "label": "RootPaths_Create()",
    "kind": "Method",
    "detail": "Function (uba::RootPaths*)",
    "insertText": "RootPaths_Create(uba::LogWriter& writer)"
  },
  {
    "label": "RootPaths_RegisterRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RootPaths_RegisterRoot(uba::RootPaths* rootPaths, const uba::tchar* path, bool includeInKey, uba::u8 id = 0)"
  },
  {
    "label": "RootPaths_RegisterSystemRoots()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RootPaths_RegisterSystemRoots(uba::RootPaths* rootPaths, uba::u8 startId = 0)"
  },
  {
    "label": "RootPaths_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RootPaths_Destroy(uba::RootPaths* rootPaths)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ProcessHandle_ExitCallback =)",
    "insertText": "void(void* userData, const uba::ProcessHandle&)"
  },
  {
    "label": "ProcessStartInfo_Create()",
    "kind": "Method",
    "detail": "Function (uba::ProcessStartInfo*)",
    "insertText": "ProcessStartInfo_Create(const uba::tchar* application, const uba::tchar* arguments, const uba::tchar* workingDir, const uba::tchar* description, uba::u32 priorityClass, uba::u64 outputStatsThresholdMs, bool trackInputs, const uba::tchar* logFile, ProcessHandle_ExitCallback* exit)"
  },
  {
    "label": "ProcessStartInfo_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessStartInfo_Destroy(uba::ProcessStartInfo* info)"
  },
  {
    "label": "ProcessHandle_GetExitCode()",
    "kind": "Method",
    "detail": "Function (uba::u32)",
    "insertText": "ProcessHandle_GetExitCode(const uba::ProcessHandle* handle)"
  },
  {
    "label": "ProcessHandle_GetExecutingHost()",
    "kind": "Method",
    "detail": "Function (const uba::tchar*)",
    "insertText": "ProcessHandle_GetExecutingHost(uba::ProcessHandle* handle)"
  },
  {
    "label": "ProcessHandle_GetLogLine()",
    "kind": "Method",
    "detail": "Function (const uba::tchar*)",
    "insertText": "ProcessHandle_GetLogLine(const uba::ProcessHandle* handle, uba::u32 index)"
  },
  {
    "label": "ProcessHandle_GetHash()",
    "kind": "Method",
    "detail": "Function (uba::u64)",
    "insertText": "ProcessHandle_GetHash(uba::ProcessHandle* handle)"
  },
  {
    "label": "ProcessHandle_GetTotalProcessorTime()",
    "kind": "Method",
    "detail": "Function (uba::u64)",
    "insertText": "ProcessHandle_GetTotalProcessorTime(uba::ProcessHandle* handle)"
  },
  {
    "label": "ProcessHandle_GetTotalWallTime()",
    "kind": "Method",
    "detail": "Function (uba::u64)",
    "insertText": "ProcessHandle_GetTotalWallTime(uba::ProcessHandle* handle)"
  },
  {
    "label": "ProcessHandle_WaitForExit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessHandle_WaitForExit(uba::ProcessHandle* handle, uba::u32 millisecondsTimeout)"
  },
  {
    "label": "ProcessHandle_Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHandle_Cancel(uba::ProcessHandle* handle, bool terminate)"
  },
  {
    "label": "ProcessHandle_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHandle_Destroy(uba::ProcessHandle* handle)"
  },
  {
    "label": "Process_GetStartInfo()",
    "kind": "Method",
    "detail": "Function (const uba::ProcessStartInfo*)",
    "insertText": "Process_GetStartInfo(uba::Process& process)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using SessionServer_RemoteProcessAvailableCallback =)",
    "insertText": "void(void* userData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using SessionServer_RemoteProcessReturnedCallback =)",
    "insertText": "void(uba::Process& process, void* userData)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (using SessionServer_CustomServiceFunction =)",
    "insertText": "u32(uba::ProcessHandle* handle, const void* recv, uba::u32 recvSize, void* send, uba::u32 sendCapacity, void* userData)"
  },
  {
    "label": "SessionServerCreateInfo_Create()",
    "kind": "Method",
    "detail": "Function (uba::SessionServerCreateInfo*)",
    "insertText": "SessionServerCreateInfo_Create(uba::StorageServer& storage, uba::NetworkServer& client, uba::LogWriter& writer, const uba::tchar* rootDir, const uba::tchar* traceOutputFile, bool disableCustomAllocator, bool launchVisualizer, bool resetCas, bool writeToDisk, bool detailedTrace, bool allowWaitOnMem = false, bool allowKillOnMem = false, bool storeObjFilesCompressed = false)"
  },
  {
    "label": "SessionServerCreateInfo_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServerCreateInfo_Destroy(uba::SessionServerCreateInfo* info)"
  },
  {
    "label": "SessionServer_Create()",
    "kind": "Method",
    "detail": "Function (uba::SessionServer*)",
    "insertText": "SessionServer_Create(const uba::SessionServerCreateInfo& info, const uba::u8* environment = nullptr, uba::u32 environmentSize = 0)"
  },
  {
    "label": "SessionServer_SetRemoteProcessAvailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_SetRemoteProcessAvailable(uba::SessionServer* server, SessionServer_RemoteProcessAvailableCallback* available, void* userData)"
  },
  {
    "label": "SessionServer_SetRemoteProcessReturned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_SetRemoteProcessReturned(uba::SessionServer* server, SessionServer_RemoteProcessReturnedCallback* returned, void* userData)"
  },
  {
    "label": "SessionServer_RefreshDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_RefreshDirectory(uba::SessionServer* server, const uba::tchar* directory)"
  },
  {
    "label": "SessionServer_RegisterNewFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_RegisterNewFile(uba::SessionServer* server, const uba::tchar* filePath)"
  },
  {
    "label": "SessionServer_RegisterDeleteFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_RegisterDeleteFile(uba::SessionServer* server, const uba::tchar* filePath)"
  },
  {
    "label": "SessionServer_RunProcess()",
    "kind": "Method",
    "detail": "Function (uba::ProcessHandle*)",
    "insertText": "SessionServer_RunProcess(uba::SessionServer* server, uba::ProcessStartInfo& info, bool async, bool enableDetour)"
  },
  {
    "label": "SessionServer_RunProcessRemote()",
    "kind": "Method",
    "detail": "Function (uba::ProcessHandle*)",
    "insertText": "SessionServer_RunProcessRemote(uba::SessionServer* server, uba::ProcessStartInfo& info, float weight, const void* knownInputs = nullptr, uba::u32 knownInputsCount = 0)"
  },
  {
    "label": "SessionServer_RunProcessRacing()",
    "kind": "Method",
    "detail": "Function (uba::ProcessHandle*)",
    "insertText": "SessionServer_RunProcessRacing(uba::SessionServer* server, uba::u32 raceAgainstRemoteProcessId)"
  },
  {
    "label": "SessionServer_SetMaxRemoteProcessCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_SetMaxRemoteProcessCount(uba::SessionServer* server, uba::u32 count)"
  },
  {
    "label": "SessionServer_DisableRemoteExecution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_DisableRemoteExecution(uba::SessionServer* server)"
  },
  {
    "label": "SessionServer_PrintSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_PrintSummary(uba::SessionServer* server)"
  },
  {
    "label": "SessionServer_CancelAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_CancelAll(uba::SessionServer* server)"
  },
  {
    "label": "SessionServer_SetCustomCasKeyFromTrackedInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_SetCustomCasKeyFromTrackedInputs(uba::SessionServer* server, uba::ProcessHandle* handle, const uba::tchar* fileName, const uba::tchar* workingDir)"
  },
  {
    "label": "SessionServer_BeginExternalProcess()",
    "kind": "Method",
    "detail": "Function (uba::u32)",
    "insertText": "SessionServer_BeginExternalProcess(uba::SessionServer* server, const uba::tchar* description)"
  },
  {
    "label": "SessionServer_EndExternalProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_EndExternalProcess(uba::SessionServer* server, uba::u32 id, uba::u32 exitCode)"
  },
  {
    "label": "SessionServer_UpdateProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_UpdateProgress(uba::SessionServer* server, uba::u32 processesTotal, uba::u32 processesDone, uba::u32 errorCount)"
  },
  {
    "label": "SessionServer_UpdateStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_UpdateStatus(uba::SessionServer* server, uba::u32 statusRow, uba::u32 statusColumn, const uba::tchar* statusText, uba::LogEntryType statusType, const uba::tchar* statusLink)"
  },
  {
    "label": "SessionServer_RegisterCustomService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_RegisterCustomService(uba::SessionServer* server, SessionServer_CustomServiceFunction* function, void* userData = nullptr)"
  },
  {
    "label": "SessionServer_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SessionServer_Destroy(uba::SessionServer* server)"
  },
  {
    "label": "Scheduler_Create()",
    "kind": "Method",
    "detail": "Function (uba::Scheduler*)",
    "insertText": "Scheduler_Create(uba::SessionServer* session, uba::u32 maxLocalProcessors = ~0u, bool enableProcessReuse = false)"
  },
  {
    "label": "Scheduler_Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scheduler_Start(uba::Scheduler* scheduler)"
  },
  {
    "label": "Scheduler_EnqueueProcess()",
    "kind": "Method",
    "detail": "Function (uba::u32)",
    "insertText": "Scheduler_EnqueueProcess(uba::Scheduler* scheduler, const uba::ProcessStartInfo& info, float weight = 1.0f, const void* knownInputs = nullptr, uba::u32 knownInputsBytes = 0, uba::u32 knownInputsCount = 0)"
  },
  {
    "label": "Scheduler_SetMaxLocalProcessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scheduler_SetMaxLocalProcessors(uba::Scheduler* scheduler, uba::u32 maxLocalProcessors)"
  },
  {
    "label": "Scheduler_Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scheduler_Stop(uba::Scheduler* scheduler)"
  },
  {
    "label": "Scheduler_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scheduler_Destroy(uba::Scheduler* scheduler)"
  },
  {
    "label": "Scheduler_GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scheduler_GetStats(uba::Scheduler* scheduler, uba::u32& outQueued, uba::u32& outActiveLocal, uba::u32& outActiveRemote, uba::u32& outFinished)"
  },
  {
    "label": "CacheClient_Create()",
    "kind": "Method",
    "detail": "Function (uba::CacheClient*)",
    "insertText": "CacheClient_Create(uba::SessionServer* session, bool reportMissReason = false, const uba::tchar* crypto = nullptr)"
  },
  {
    "label": "CacheClient_Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheClient_Connect(uba::CacheClient* cacheClient, const uba::tchar* host, int port)"
  },
  {
    "label": "CacheClient_WriteToCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheClient_WriteToCache(uba::CacheClient* cacheClient, uba::RootPaths* rootPaths, uba::u32 bucket, const uba::ProcessHandle* process, const uba::u8* inputs, uba::u32 inputsSize, const uba::u8* outputs, uba::u32 outputsSize)"
  },
  {
    "label": "CacheClient_WriteToCache2()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CacheClient_WriteToCache2(uba::CacheClient* cacheClient, uba::RootPaths* rootPaths, uba::u32 bucket, const uba::ProcessHandle* process, const uba::u8* inputs, uba::u32 inputsSize, const uba::u8* outputs, uba::u32 outputsSize, const uba::u8* logLines, uba::u32 logLinesSize)"
  },
  {
    "label": "CacheClient_FetchFromCache()",
    "kind": "Method",
    "detail": "Function (uba::u32)",
    "insertText": "CacheClient_FetchFromCache(uba::CacheClient* cacheClient, uba::RootPaths* rootPaths, uba::u32 bucket, const uba::ProcessStartInfo& info)"
  },
  {
    "label": "CacheClient_FetchFromCache2()",
    "kind": "Method",
    "detail": "Function (uba::CacheResult*)",
    "insertText": "CacheClient_FetchFromCache2(uba::CacheClient* cacheClient, uba::RootPaths* rootPaths, uba::u32 bucket, const uba::ProcessStartInfo& info)"
  },
  {
    "label": "CacheClient_RequestServerShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheClient_RequestServerShutdown(uba::CacheClient* cacheClient, const uba::tchar* reason)"
  },
  {
    "label": "CacheClient_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheClient_Destroy(uba::CacheClient* cacheClient)"
  },
  {
    "label": "CacheResult_GetLogLine()",
    "kind": "Method",
    "detail": "Function (const uba::tchar*)",
    "insertText": "CacheResult_GetLogLine(uba::CacheResult* result, uba::u32 index)"
  },
  {
    "label": "CacheResult_GetLogLineType()",
    "kind": "Method",
    "detail": "Function (uba::u32)",
    "insertText": "CacheResult_GetLogLineType(uba::CacheResult* result, uba::u32 index)"
  },
  {
    "label": "CacheResult_Delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheResult_Delete(uba::CacheResult* result)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using Uba_CustomAssertHandler =)",
    "insertText": "void(const uba::tchar* text)"
  },
  {
    "label": "Uba_SetCustomAssertHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uba_SetCustomAssertHandler(Uba_CustomAssertHandler* handler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ImportFunc =)",
    "insertText": "void(const uba::tchar* importName, void* userData)"
  },
  {
    "label": "Uba_FindImports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uba_FindImports(const uba::tchar* binary, ImportFunc* func, void* userData)"
  },
  {
    "label": "Uba_Create()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Uba_Create(const uba::tchar* configFile)"
  },
  {
    "label": "Uba_RunProcess()",
    "kind": "Method",
    "detail": "Function (uba::u32)",
    "insertText": "Uba_RunProcess(void* uba, const uba::tchar* app, const uba::tchar* args, const uba::tchar* workDir, const uba::tchar* desc, void* userData, ProcessHandle_ExitCallback* exit)"
  },
  {
    "label": "Uba_RegisterNewFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uba_RegisterNewFile(void* uba, const uba::tchar* file)"
  },
  {
    "label": "Uba_Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uba_Destroy(void* uba)"
  },
  {
    "label": "DestroyProcessHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyProcessHandle(uba::ProcessHandle* handle)"
  }
]