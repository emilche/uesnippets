[
  {
    "label": "_Engine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Engine"
  },
  {
    "label": "_UIntType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UIntType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_UInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UInt"
  },
  {
    "label": "__get_n",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__get_n"
  },
  {
    "label": "_Sseq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sseq"
  },
  {
    "label": "_Eng",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Eng"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_INDEPENDENT_BITS_ENGINE_H # define _LIBCPP___RANDOM_INDEPENDENT_BITS_ENGINE_H # include<__config> # include<__random / is_seed_sequence . h> # include<__random / log2 . h> # include<__utility / move . h> # include<iosfwd> # include<limits> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "_Mp()",
    "kind": "Method",
    "detail": "Function (template<class _UInt,_UInt _R0,size_t _Wp,size_t _Mp> class __get_n { _LIBCPP_CONSTEXPR const size_t _Dt = numeric_limits<_UInt>::digits ; _LIBCPP_CONSTEXPR const size_t _Np = _Wp /)",
    "insertText": "_Mp(_Wp % _Mp != 0)"
  },
  {
    "label": "_Dt()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const size_t _W0 = _Wp / _Np ; _LIBCPP_CONSTEXPR const _UInt _Y0 = _W0> =)",
    "insertText": "_Dt(_R0 >> _W0)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_CONSTEXPR const size_t value = _R0 - _Y0> _Y0 / _Np ? _Np + 1 : _Np ; } ; public : typedef _UIntType result_type ; private : _Engine __e_ ; _LIBCPP_CONSTEXPR const result_type _Dt = numeric_limits<result_type>::digits ;)",
    "insertText": "static_assert(0 < __w, \"independent_bits_engine invalid parameters\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef _Engine::result_type _Engine_result_type ; typedef conditional<)",
    "insertText": "sizeof(_Engine_result_type) <= sizeof(result_type)"
  },
  {
    "label": "_Working_result_type()",
    "kind": "Method",
    "detail": "Function (# ifdef _LIBCPP_CXX03_LANG const _Working_result_type _Rp = _Engine::_Max - _Engine::_Min +)",
    "insertText": "_Working_result_type(1)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (# else _LIBCPP_CONSTEXPR const _Working_result_type _Rp =)",
    "insertText": "max() - _Engine::min() + _Working_result_type(1)"
  },
  {
    "label": "_WDt()",
    "kind": "Method",
    "detail": "Function (# endif _LIBCPP_CONSTEXPR const size_t __m = __log2<_Working_result_type,_Rp>::value ; _LIBCPP_CONSTEXPR const size_t __n = __get_n<_Working_result_type,_Rp,__w,__m>::value ; _LIBCPP_CONSTEXPR const size_t __w0 = __w / __n ; _LIBCPP_CONSTEXPR const size_t __n0 = __n - __w % __n ; _LIBCPP_CONSTEXPR const size_t _WDt = numeric_limits<_Working_result_type>::digits ; _LIBCPP_CONSTEXPR const size_t _EDt = numeric_limits<_Engine_result_type>::digits ; _LIBCPP_CONSTEXPR const _Working_result_type __y0 = __w0> =)",
    "insertText": "_WDt(_Rp >> __w0)"
  },
  {
    "label": "_WDt()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const _Working_result_type __y1 = __w0> =)",
    "insertText": "_WDt(_Rp >> (__w0+1)) << (__w0+1)"
  },
  {
    "label": "_Engine_result_type()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const _Engine_result_type __mask0 = __w0> 0 ?)",
    "insertText": "_Engine_result_type(~0) >> (_EDt - __w0) : _Engine_result_type(0)"
  },
  {
    "label": "_Engine_result_type()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_CONSTEXPR const _Engine_result_type __mask1 = __w0<_EDt - 1 ?)",
    "insertText": "_Engine_result_type(~0) >> (_EDt - (__w0 + 1)) : _Engine_result_type(~0)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (public : _LIBCPP_CONSTEXPR const result_type _Min = 0 ; _LIBCPP_CONSTEXPR const result_type _Max = __w = = _Dt ?)",
    "insertText": "result_type(~0) : (result_type(1) << __w) - result_type(1)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR result_type)",
    "insertText": "min()"
  },
  {
    "label": "independent_bits_engine()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "independent_bits_engine(const _Engine& __e) : __e_(__e)"
  },
  {
    "label": "independent_bits_engine()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "independent_bits_engine(_Engine&& __e) : __e_(_VSTD::move(__e))"
  },
  {
    "label": "independent_bits_engine()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "independent_bits_engine(result_type __sd) : __e_(__sd)"
  },
  {
    "label": "independent_bits_engine()",
    "kind": "Method",
    "detail": "Function (} template<class _Sseq> _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "independent_bits_engine(_Sseq& __q, typename enable_if<__is_seed_sequence<_Sseq, independent_bits_engine>::value && !is_convertible<_Sseq, _Engine>::value>::type* = 0) : __e_(__q)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed()"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "seed(result_type __sd)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__e_ .)",
    "insertText": "seed(__sd)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (} template<class _Sseq> _LIBCPP_INLINE_VISIBILITY enable_if<__is_seed_sequence<_Sseq,independent_bits_engine>::value,void>::type)",
    "insertText": "seed(_Sseq& __q)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (__e_ .)",
    "insertText": "seed(__q)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()()"
  },
  {
    "label": "discard()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "discard(unsigned long long __z)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY const _Engine&)",
    "insertText": "base()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _Eng,size_t _Wp,class _UInt> bool)",
    "insertText": "operator(const independent_bits_engine<_Eng, _Wp, _UInt>& __x, const independent_bits_engine<_Eng, _Wp, _UInt>& __y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _Eng,size_t _Wp,class _UInt> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const independent_bits_engine<_Eng, _Wp, _UInt>& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _CharT,class _Traits,class _Eng,size_t _Wp,class _UInt> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, independent_bits_engine<_Eng, _Wp, _UInt>& __x)"
  },
  {
    "label": "__eval()",
    "kind": "Method",
    "detail": "Function (private : _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "__eval(false_type)"
  },
  {
    "label": "__eval()",
    "kind": "Method",
    "detail": "Function (result_type)",
    "insertText": "__eval(true_type)"
  },
  {
    "label": "__lshift()",
    "kind": "Method",
    "detail": "Function (template<size_t __count> _LIBCPP_INLINE_VISIBILITY enable_if<__count<_Dt,result_type>::type)",
    "insertText": "__lshift(result_type __x)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (result_type _Sp = 0 ;)",
    "insertText": "for(size_t __k = 0; __k < __n0; ++__k)"
  },
  {
    "label": "__e_()",
    "kind": "Method",
    "detail": "Function (_Engine_result_type __u ; do { __u =)",
    "insertText": "__e_() - _Engine::min()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(__u >= __y0)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (_Sp = static_cast<)",
    "insertText": "result_type(__lshift<__w0>(_Sp) + (__u & __mask0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(size_t __k = __n0; __k < __n; ++__k)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(__u >= __y1)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (_Sp = static_cast<)",
    "insertText": "result_type(__lshift<__w0+1>(_Sp) + (__u & __mask1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_Eng __e ; __is>> __e ;)",
    "insertText": "if(!__is.fail())"
  }
]