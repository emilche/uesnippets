[
  {
    "label": "ScopedHashTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHashTable"
  },
  {
    "label": "ScopedHashTableVal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHashTableVal"
  },
  {
    "label": "ScopedHashTableScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHashTableScope"
  },
  {
    "label": "ScopedHashTableIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedHashTableIterator"
  },
  {
    "label": "ScopedHashTableVal()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_SCOPEDHASHTABLE_H # define LLVM_ADT_SCOPEDHASHTABLE_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / Support / Allocator . h \" namespace llvm { template<K,V,KInfo = DenseMapInfo<K>,AllocatorTy = MallocAllocator> class ScopedHashTable ; template<K,V> class ScopedHashTableVal { ScopedHashTableVal* NextInScope ; ScopedHashTableVal* NextForKey ; K Key ; V Val ;)",
    "insertText": "ScopedHashTableVal(const K &key, const V &val) : Key(key), Val(val)"
  },
  {
    "label": "getKey()",
    "kind": "Method",
    "detail": "Function (} public : const K&)",
    "insertText": "getKey()"
  },
  {
    "label": "ScopedHashTableVal()",
    "kind": "Method",
    "detail": "Function (ScopedHashTableVal* New = Allocator . template Allocate<)",
    "insertText": "ScopedHashTableVal()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(New) ScopedHashTableVal(key, val)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (New -> NextInScope = nextInScope ; New -> NextForKey = nextForKey ; return New ; } template<AllocatorTy> void)",
    "insertText": "Destroy(AllocatorTy &Allocator)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "Deallocate(this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<K,V,KInfo = DenseMapInfo<K>,AllocatorTy = MallocAllocator> class ScopedHashTableScope { ScopedHashTable<K,V,KInfo,AllocatorTy>& HT ; ScopedHashTableScope* PrevScope ; ScopedHashTableVal<K,V>* LastValInScope ; void)",
    "insertText": "operator(ScopedHashTableScope&)"
  },
  {
    "label": "ScopedHashTableScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedHashTableScope(ScopedHashTableScope&)"
  },
  {
    "label": "ScopedHashTableScope()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedHashTableScope(ScopedHashTable<K, V, KInfo, AllocatorTy> &HT)"
  },
  {
    "label": "ScopedHashTableScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedHashTableScope()"
  },
  {
    "label": "getParentScope()",
    "kind": "Method",
    "detail": "Function (ScopedHashTableScope*)",
    "insertText": "getParentScope()"
  },
  {
    "label": "ScopedHashTableIterator()",
    "kind": "Method",
    "detail": "Function (LastValInScope = Val ; } } ; template<K,V,KInfo = DenseMapInfo<K>> class ScopedHashTableIterator { ScopedHashTableVal<K,V>* Node ; public :)",
    "insertText": "ScopedHashTableIterator(ScopedHashTableVal<K, V> *node) : Node(node)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} V&)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node && \"Dereference end()\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ScopedHashTableIterator &RHS)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node && \"incrementing past end()\")"
  },
  {
    "label": "getNextForKey()",
    "kind": "Method",
    "detail": "Function (Node = Node ->)",
    "insertText": "getNextForKey()"
  },
  {
    "label": "ScopedHashTable()",
    "kind": "Method",
    "detail": "Function (ScopedHashTableIterator tmp =* this ; + +* this ; return tmp ; } } ; template<K,V,KInfo,AllocatorTy> class ScopedHashTable { public : typedef ScopedHashTableScope<K,V,KInfo,AllocatorTy> ScopeTy ; typedef unsigned size_type ; private : typedef ScopedHashTableVal<K,V> ValTy ; DenseMap<K,ValTy*,KInfo> TopLevelMap ; ScopeTy* CurScope ; AllocatorTy Allocator ;)",
    "insertText": "ScopedHashTable(const ScopedHashTable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const ScopedHashTable&)"
  },
  {
    "label": "ScopedHashTable()",
    "kind": "Method",
    "detail": "Function (class ScopedHashTableScope<K,V,KInfo,AllocatorTy> ; public :)",
    "insertText": "ScopedHashTable() : CurScope(nullptr)"
  },
  {
    "label": "ScopedHashTable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedHashTable(AllocatorTy A) : CurScope(0), Allocator(A)"
  },
  {
    "label": "ScopedHashTable()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedHashTable()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!CurScope && TopLevelMap.empty() && \"Scope imbalance!\")"
  },
  {
    "label": "getAllocator()",
    "kind": "Method",
    "detail": "Function (} AllocatorTy&)",
    "insertText": "getAllocator()"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (} V)",
    "insertText": "lookup(const K &Key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (DenseMap<K,ValTy*,KInfo>::iterator I = TopLevelMap .)",
    "insertText": "find(Key)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "insert(const K &Key, const V &Val)"
  },
  {
    "label": "insertIntoScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertIntoScope(CurScope, Key, Val)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} typedef ScopedHashTableIterator<K,V,KInfo> iterator ; iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin(const K &Key)"
  },
  {
    "label": "getCurScope()",
    "kind": "Method",
    "detail": "Function (} ScopeTy*)",
    "insertText": "getCurScope()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(S && \"No scope active!\")"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (ScopedHashTableVal<K,V>*& KeyEntry = TopLevelMap [ Key ] ; KeyEntry =)",
    "insertText": "Create(S->getLastValInScope(), KeyEntry, Key, Val, Allocator)"
  },
  {
    "label": "setLastValInScope()",
    "kind": "Method",
    "detail": "Function (S ->)",
    "insertText": "setLastValInScope(KeyEntry)"
  },
  {
    "label": "ScopedHashTableScope()",
    "kind": "Method",
    "detail": "Function (} } ; template<K,V,KInfo,Allocator> ScopedHashTableScope<K,V,KInfo,Allocator)",
    "insertText": "ScopedHashTableScope(ScopedHashTable<K, V, KInfo, Allocator> &ht) : HT(ht)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(HT.CurScope == this && \"Scope imbalance!\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (HT . CurScope = PrevScope ;)",
    "insertText": "while(ScopedHashTableVal<K, V> *ThisEntry = LastValInScope)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(HT.TopLevelMap[ThisEntry->getKey()] == ThisEntry && \"Scope imbalance!\")"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (HT . TopLevelMap .)",
    "insertText": "erase(ThisEntry->getKey())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(KeyEntry == ThisEntry && \"Scope imbalance!\")"
  },
  {
    "label": "getNextInScope()",
    "kind": "Method",
    "detail": "Function (} LastValInScope = ThisEntry ->)",
    "insertText": "getNextInScope()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (ThisEntry ->)",
    "insertText": "Destroy(HT.getAllocator())"
  }
]