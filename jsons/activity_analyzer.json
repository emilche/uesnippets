[
  {
    "label": "GlobalActivityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalActivityAnalyzer"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ThreadKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadKey"
  },
  {
    "label": "ProgramLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProgramLocation"
  },
  {
    "label": "UserDataSnapshot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UserDataSnapshot"
  },
  {
    "label": "Snapshot()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_DEBUG_ACTIVITY_ANALYZER_H_ # define BASE_DEBUG_ACTIVITY_ANALYZER_H_ # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / debug / activity_tracker . h \" # include \" base / memory / shared_memory_mapping . h \" # include \" build / build_config . h \" namespace base { namespace debug { class GlobalActivityAnalyzer ; class BASE_EXPORT ThreadActivityAnalyzer { public : struct BASE_EXPORT Snapshot : ThreadActivityTracker::Snapshot {)",
    "insertText": "Snapshot()"
  },
  {
    "label": "ThreadKey()",
    "kind": "Method",
    "detail": "Function (std::vector<ActivityUserData::Snapshot> user_data_stack ; } ; class ThreadKey { public :)",
    "insertText": "ThreadKey(ProcessId pid, int64_t tid) : pid_(pid), tid_(tid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ThreadKey& rhs)"
  },
  {
    "label": "ThreadActivityAnalyzer()",
    "kind": "Method",
    "detail": "Function (} private : ProcessId pid_ ; int64_t tid_ ; } ;)",
    "insertText": "ThreadActivityAnalyzer(const ThreadActivityTracker& tracker)"
  },
  {
    "label": "ThreadActivityAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadActivityAnalyzer(void* base, size_t size)"
  },
  {
    "label": "ThreadActivityAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadActivityAnalyzer(PersistentMemoryAllocator* allocator, PersistentMemoryAllocator::Reference reference)"
  },
  {
    "label": "ThreadActivityAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadActivityAnalyzer(const ThreadActivityAnalyzer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadActivityAnalyzer&)",
    "insertText": "operator(const ThreadActivityAnalyzer&)"
  },
  {
    "label": "ThreadActivityAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadActivityAnalyzer()"
  },
  {
    "label": "AddGlobalInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGlobalInformation(GlobalActivityAnalyzer* global)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "activity_snapshot()",
    "kind": "Method",
    "detail": "Function (} const Snapshot&)",
    "insertText": "activity_snapshot()"
  },
  {
    "label": "GlobalActivityAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalActivityAnalyzer(const GlobalActivityAnalyzer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GlobalActivityAnalyzer&)",
    "insertText": "operator(const GlobalActivityAnalyzer&)"
  },
  {
    "label": "GlobalActivityAnalyzer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GlobalActivityAnalyzer()"
  },
  {
    "label": "CreateWithAllocator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<GlobalActivityAnalyzer>)",
    "insertText": "CreateWithAllocator(std::unique_ptr<PersistentMemoryAllocator> allocator)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_NACL) static std::unique_ptr<GlobalActivityAnalyzer> CreateWithFile( const FilePath& file_path)"
  },
  {
    "label": "CreateWithSharedMemory()",
    "kind": "Method",
    "detail": "Function (# endif std::unique_ptr<GlobalActivityAnalyzer>)",
    "insertText": "CreateWithSharedMemory(base::ReadOnlySharedMemoryMapping mapping)"
  },
  {
    "label": "GetFirstProcess()",
    "kind": "Method",
    "detail": "Function (ProcessId)",
    "insertText": "GetFirstProcess()"
  },
  {
    "label": "GetNextProcess()",
    "kind": "Method",
    "detail": "Function (ProcessId)",
    "insertText": "GetNextProcess()"
  },
  {
    "label": "GetFirstAnalyzer()",
    "kind": "Method",
    "detail": "Function (ThreadActivityAnalyzer*)",
    "insertText": "GetFirstAnalyzer(ProcessId pid)"
  },
  {
    "label": "GetNextAnalyzer()",
    "kind": "Method",
    "detail": "Function (ThreadActivityAnalyzer*)",
    "insertText": "GetNextAnalyzer()"
  },
  {
    "label": "GetAnalyzerForThread()",
    "kind": "Method",
    "detail": "Function (ThreadActivityAnalyzer*)",
    "insertText": "GetAnalyzerForThread(const ThreadKey& key)"
  },
  {
    "label": "GetUserDataSnapshot()",
    "kind": "Method",
    "detail": "Function (ActivityUserData::Snapshot)",
    "insertText": "GetUserDataSnapshot(ProcessId pid, uint32_t ref, uint32_t id)"
  },
  {
    "label": "GetProcessDataSnapshot()",
    "kind": "Method",
    "detail": "Function (const ActivityUserData::Snapshot&)",
    "insertText": "GetProcessDataSnapshot(ProcessId pid)"
  },
  {
    "label": "GetLogMessages()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "GetLogMessages()"
  },
  {
    "label": "GetModules()",
    "kind": "Method",
    "detail": "Function (std::vector<GlobalActivityTracker::ModuleInfo>)",
    "insertText": "GetModules(ProcessId pid)"
  },
  {
    "label": "GetProgramLocationFromAddress()",
    "kind": "Method",
    "detail": "Function (ProgramLocation)",
    "insertText": "GetProgramLocationFromAddress(uint64_t address)"
  },
  {
    "label": "IsDataComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataComplete()"
  },
  {
    "label": "UserDataSnapshot()",
    "kind": "Method",
    "detail": "Function (private : using AnalyzerMap = std::map<ThreadKey,std::unique_ptr<ThreadActivityAnalyzer>> ; struct UserDataSnapshot {)",
    "insertText": "UserDataSnapshot()"
  },
  {
    "label": "UserDataSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UserDataSnapshot(const UserDataSnapshot& rhs)"
  },
  {
    "label": "UserDataSnapshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UserDataSnapshot(UserDataSnapshot&& rhs)"
  },
  {
    "label": "PrepareAllAnalyzers()",
    "kind": "Method",
    "detail": "Function (ProcessId process_id ; int64_t create_stamp ; ActivityUserData::Snapshot data ; } ; void)",
    "insertText": "PrepareAllAnalyzers()"
  }
]