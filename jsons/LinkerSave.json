[
  {
    "label": "FBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkData"
  },
  {
    "label": "FObjectPostSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPostSaveContext"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FDerivedData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDerivedData"
  },
  {
    "label": "FPackageTrailerBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageTrailerBuilder"
  },
  {
    "label": "FLazyObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLazyObjectPtr"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "FLinkerSave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerSave"
  },
  {
    "label": "FSidecarStorageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidecarStorageInfo"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / CompressedBuffer . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" IO / IoHash . h \" # include \" Serialization / Archive . h \" # include \" Serialization / ArchiveUObject . h \" # include \" Serialization / BulkDataCookedIndex . h \" # include \" Serialization / FileRegionArchive . h \" # include \" Templates / Function . h \" # include \" Templates / RefCounting . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / Linker . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectResource . h \" # include \" UObject / PackageTrailer . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UObjectThreadContext . h \" class FBulkData ; class FObjectPostSaveContext ; class FOutputDevice ; class FPackagePath ; class UObject ; class UPackage ; namespace UE { class FDerivedData ; } namespace UE { class FPackageTrailerBuilder ; } struct FLazyObjectPtr ; struct FUObjectSerializeContext ; class FLinkerSave : public FLinker,public FArchiveUObject { public : ELinkerType::Type)",
    "insertText": "StaticType()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (FArchive* Saver ; FPackageIndex CurrentlySavingExport ; UObject* CurrentlySavingExportObject = nullptr ; TArray<FPackageIndex> DepListForErrorChecking ; TMap<TObjectPtr<UObject>,FPackageIndex> ObjectIndicesMap ; TMap<const UObject*,TArray<FName>> SearchableNamesObjectMap ; TMap<FNameEntryId,int32> NameIndices ; TMap<FSoftObjectPath,int32> SoftObjectPathIndices ; bool bIsWritingHeader = false ; TRefCountPtr<FUObjectSerializeContext> SaveContext ; TArray<FFileRegion> FileRegions ; using AdditionalDataCallback = TUniqueFunction<)",
    "insertText": "void(FLinkerSave& ExportsArchive, FArchive& DataArchive, int64 DataStartOffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TArray<AdditionalDataCallback> AdditionalDataToAppend ; bool bProceduralSave = false ; bool bUpdatingLoadedPath = false ; bool bRehydratePayloads = false ; struct FSidecarStorageInfo { FIoHash Identifier ; FCompressedBuffer Payload ; } ; TArray<FSidecarStorageInfo> SidecarDataToAppend ; TUniquePtr<UE::FPackageTrailerBuilder> PackageTrailerBuilder ; TArray<TUniqueFunction<)",
    "insertText": "void(const FPackagePath& PackagePath, FObjectPostSaveContext ObjectSaveContext)"
  },
  {
    "label": "FLinkerSave()",
    "kind": "Method",
    "detail": "Function (TMap<FString,TArray<uint8>> PackagesToScriptSHAMap ;)",
    "insertText": "FLinkerSave(UPackage* InParent, const TCHAR* InFilename, bool bForceByteSwapping, bool bInSaveUnversioned = false)"
  },
  {
    "label": "FLinkerSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLinkerSave(UPackage* InParent, bool bForceByteSwapping, bool bInSaveUnversioned = false)"
  },
  {
    "label": "FLinkerSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLinkerSave(UPackage* InParent, FArchive *InSaver, bool bForceByteSwapping, bool bInSaveUnversioned = false)"
  },
  {
    "label": "MapName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MapName(FNameEntryId Name)"
  },
  {
    "label": "MapSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MapSoftObjectPath(const FSoftObjectPath& SoftObjectPath)"
  },
  {
    "label": "MapObject()",
    "kind": "Method",
    "detail": "Function (FPackageIndex)",
    "insertText": "MapObject(TObjectPtr<const UObject> Object)"
  },
  {
    "label": "MarkScriptSerializationStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkScriptSerializationStart(const UObject* Obj)"
  },
  {
    "label": "MarkScriptSerializationEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkScriptSerializationEnd(const UObject* Obj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using FArchiveUObject::operator<<; FArchive&)",
    "insertText": "operator(FName& InName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(UObject*& Obj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FSoftObjectPath& SoftObjectPath)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FLazyObjectPtr& LazyObjectPtr)"
  },
  {
    "label": "ShouldSkipProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkipProperty(const FProperty* InProperty)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UsingCustomVersion(const struct FGuid& Guid)"
  },
  {
    "label": "SetUseUnversionedPropertySerialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseUnversionedPropertySerialization(bool bInUseUnversioned)"
  },
  {
    "label": "SetFilterEditorOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilterEditorOnly(bool bInFilterEditorOnly)"
  },
  {
    "label": "SetTransientPropertyOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransientPropertyOverrides(const TMap<UObject*, TSet<FProperty*>>& InTransientPropertyOverrides)"
  },
  {
    "label": "SetMemoryMapAlignment()",
    "kind": "Method",
    "detail": "Function (TransientPropertyOverrides =& InTransientPropertyOverrides ; } void)",
    "insertText": "SetMemoryMapAlignment(int64 InAlignment)"
  },
  {
    "label": "SetFileRegionsEnabled()",
    "kind": "Method",
    "detail": "Function (MemoryMappingAlignment = InAlignment ; } void)",
    "insertText": "SetFileRegionsEnabled(bool bEnabled)"
  },
  {
    "label": "SetDeclareRegionForEachAdditionalFile()",
    "kind": "Method",
    "detail": "Function (bFileRegionsEnabled = bEnabled ; } void)",
    "insertText": "SetDeclareRegionForEachAdditionalFile(bool bValue)"
  },
  {
    "label": "SetSaveBulkDataByReference()",
    "kind": "Method",
    "detail": "Function (bDeclareRegionForEachAdditionalFile = bValue ; } void)",
    "insertText": "SetSaveBulkDataByReference(bool bValue)"
  },
  {
    "label": "SetSaveBulkDataToSeparateFiles()",
    "kind": "Method",
    "detail": "Function (bSaveBulkDataByReference = bValue ; } void)",
    "insertText": "SetSaveBulkDataToSeparateFiles(bool bValue)"
  },
  {
    "label": "PushDebugDataString()",
    "kind": "Method",
    "detail": "Function (bSaveBulkDataToSeparateFiles = bValue ; } # if WITH_EDITOR void)",
    "insertText": "PushDebugDataString(const FName& DebugData)"
  },
  {
    "label": "PushDebugDataString()",
    "kind": "Method",
    "detail": "Function (Saver ->)",
    "insertText": "PushDebugDataString(DebugData)"
  },
  {
    "label": "PopDebugDataString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopDebugDataString()"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (} # endif FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "GetLinker()",
    "kind": "Method",
    "detail": "Function (FLinker*)",
    "insertText": "GetLinker()"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (using FLinker::Serialize ; void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "OnPostSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSave(const FPackagePath& PackagePath, FObjectPostSaveContext ObjectSaveContext)"
  },
  {
    "label": "OnPostSaveBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostSaveBulkData()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "CloseAndDestroySaver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseAndDestroySaver()"
  },
  {
    "label": "ThisRequiresLocalizationGather()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThisRequiresLocalizationGather()"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetFilename()"
  },
  {
    "label": "SetOutputDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputDevice(FOutputDevice* InOutputDevice)"
  },
  {
    "label": "GetOutputDevice()",
    "kind": "Method",
    "detail": "Function (LogOutput = InOutputDevice ; } FOutputDevice*)",
    "insertText": "GetOutputDevice()"
  },
  {
    "label": "SerializeBulkData()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "SerializeBulkData(FBulkData& BulkData, const FBulkDataSerializationParams& Params)"
  },
  {
    "label": "ForEachBulkDataCookedIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachBulkDataCookedIndex(TUniqueFunction<void(FBulkDataCookedIndex, FFileRegionMemoryWriter&)>&& Func, EBulkDataPayloadType Type)"
  },
  {
    "label": "GetBulkDataArchive()",
    "kind": "Method",
    "detail": "Function (FFileRegionMemoryWriter&)",
    "insertText": "GetBulkDataArchive(FBulkDataCookedIndex CookedIndex)"
  },
  {
    "label": "GetOptionalBulkDataArchive()",
    "kind": "Method",
    "detail": "Function (FFileRegionMemoryWriter&)",
    "insertText": "GetOptionalBulkDataArchive(FBulkDataCookedIndex CookedIndex)"
  },
  {
    "label": "GetMemoryMappedBulkDataArchive()",
    "kind": "Method",
    "detail": "Function (FFileRegionMemoryWriter&)",
    "insertText": "GetMemoryMappedBulkDataArchive(FBulkDataCookedIndex CookedIndex)"
  },
  {
    "label": "HasCookedIndexBulkData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCookedIndexBulkData()"
  },
  {
    "label": "SetFilename()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetFilename(FStringView InFilename)"
  },
  {
    "label": "GetArchives()",
    "kind": "Method",
    "detail": "Function (const TMap<FBulkDataCookedIndex,TUniquePtr<FFileRegionMemoryWriter>>&)",
    "insertText": "GetArchives(EBulkDataPayloadType Type)"
  }
]