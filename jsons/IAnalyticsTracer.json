[
  {
    "label": "IAnalyticsSpan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsSpan"
  },
  {
    "label": "IAnalyticsTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyticsTracer"
  },
  {
    "label": "IAnalyticsSpan()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" # include \" IAnalyticsProvider . h \" class IAnalyticsSpan : FNoncopyable { public :)",
    "insertText": "IAnalyticsSpan(const FName Name)"
  },
  {
    "label": "IAnalyticsSpan()",
    "kind": "Method",
    "detail": "Function (} ; ~)",
    "insertText": "IAnalyticsSpan()"
  },
  {
    "label": "SetProvider()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetProvider(TSharedPtr<IAnalyticsProvider> AnalyticsProvider)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(const TArray<FAnalyticsEventAttribute>& AdditionalAttributes = {})"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End(const TArray<FAnalyticsEventAttribute>& AdditionalAttributes = {})"
  },
  {
    "label": "AddAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAttributes(const TArray<FAnalyticsEventAttribute>& AdditionalAttributes)"
  },
  {
    "label": "RecordEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEvent(const FString& EventName, const TArray<FAnalyticsEventAttribute>& AdditionalAttributes = {})"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetAttributes()",
    "kind": "Method",
    "detail": "Function (const TArray<FAnalyticsEventAttribute>&)",
    "insertText": "GetAttributes()"
  },
  {
    "label": "SetStackDepth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStackDepth(uint32 Depth)"
  },
  {
    "label": "GetStackDepth()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetStackDepth()"
  },
  {
    "label": "GetDuration()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetDuration()"
  },
  {
    "label": "GetIsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsActive()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetId()"
  },
  {
    "label": "IAnalyticsTracer()",
    "kind": "Method",
    "detail": "Function (} ; class IAnalyticsTracer : FNoncopyable { public :)",
    "insertText": "IAnalyticsTracer()"
  },
  {
    "label": "StartSession()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "StartSession()"
  },
  {
    "label": "EndSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndSession()"
  },
  {
    "label": "StartSpan()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAnalyticsSpan>)",
    "insertText": "StartSpan(const FName Name, TSharedPtr<IAnalyticsSpan> ParentSpan=TSharedPtr<IAnalyticsSpan>(), const TArray<FAnalyticsEventAttribute>& AdditionalAttributes = {})"
  },
  {
    "label": "EndSpan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndSpan(TSharedPtr<IAnalyticsSpan>, const TArray<FAnalyticsEventAttribute>& AdditionalAttributes = {})"
  },
  {
    "label": "GetCurrentSpan()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAnalyticsSpan>)",
    "insertText": "GetCurrentSpan()"
  },
  {
    "label": "GetSessionSpan()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAnalyticsSpan>)",
    "insertText": "GetSessionSpan()"
  },
  {
    "label": "GetSpan()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAnalyticsSpan>)",
    "insertText": "GetSpan(const FName Name)"
  },
  {
    "label": "StartSpan()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAnalyticsSpan>)",
    "insertText": "StartSpan(const FName Name, const TArray<FAnalyticsEventAttribute>& AdditionalAttributes = {})"
  },
  {
    "label": "EndSpan()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "EndSpan(const FName Name, const TArray<FAnalyticsEventAttribute>& AdditionalAttributes = {})"
  }
]