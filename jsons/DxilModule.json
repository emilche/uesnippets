[
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "MDTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDTuple"
  },
  {
    "label": "MDOperand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDOperand"
  },
  {
    "label": "DebugInfoFinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugInfoFinder"
  },
  {
    "label": "ShaderModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderModel"
  },
  {
    "label": "OP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OP"
  },
  {
    "label": "DxilFunctionProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxilFunctionProps"
  },
  {
    "label": "DxilEntryProps",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilEntryProps"
  },
  {
    "label": "DxilModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilModule"
  },
  {
    "label": "IntermediateFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "IntermediateFlags"
  },
  {
    "label": "ShaderCompatInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ShaderCompatInfo"
  },
  {
    "label": "DxilModule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilCBuffer . h \" # include \" dxc / DXIL / DxilConstants . h \" # include \" dxc / DXIL / DxilMetadataHelper . h \" # include \" dxc / DXIL / DxilResource . h \" # include \" dxc / DXIL / DxilSampler . h \" # include \" dxc / DXIL / DxilShaderFlags . h \" # include \" dxc / DXIL / DxilSignature . h \" # include \" dxc / DXIL / DxilSubobject . h \" # include \" dxc / DXIL / DxilTypeSystem . h \" # include<memory> # include<string> # include<unordered_map> # include<unordered_set> # include<vector> namespace llvm { class LLVMContext ; class Module ; class Function ; class Instruction ; class MDTuple ; class MDOperand ; class DebugInfoFinder ; } namespace hlsl { class ShaderModel ; class OP ; struct DxilFunctionProps ; class DxilEntryProps ; using DxilEntryPropsMap = std::unordered_map<const llvm::Function*,std::unique_ptr<DxilEntryProps>> ; class DxilModule { public :)",
    "insertText": "DxilModule(llvm::Module *pModule)"
  },
  {
    "label": "DxilModule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DxilModule()"
  },
  {
    "label": "GetCtx()",
    "kind": "Method",
    "detail": "Function (llvm::LLVMContext&)",
    "insertText": "GetCtx()"
  },
  {
    "label": "GetModule()",
    "kind": "Method",
    "detail": "Function (llvm::Module*)",
    "insertText": "GetModule()"
  },
  {
    "label": "GetOP()",
    "kind": "Method",
    "detail": "Function (OP*)",
    "insertText": "GetOP()"
  },
  {
    "label": "SetShaderModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderModel(const ShaderModel *pSM, bool bUseMinPrecision = true)"
  },
  {
    "label": "GetShaderModel()",
    "kind": "Method",
    "detail": "Function (const ShaderModel*)",
    "insertText": "GetShaderModel()"
  },
  {
    "label": "GetDxilVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDxilVersion(unsigned &DxilMajor, unsigned &DxilMinor)"
  },
  {
    "label": "SetValidatorVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValidatorVersion(unsigned ValMajor, unsigned ValMinor)"
  },
  {
    "label": "UpgradeValidatorVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpgradeValidatorVersion(unsigned ValMajor, unsigned ValMinor)"
  },
  {
    "label": "GetValidatorVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValidatorVersion(unsigned &ValMajor, unsigned &ValMinor)"
  },
  {
    "label": "SetForceZeroStoreLifetimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceZeroStoreLifetimes(bool ForceZeroStoreLifetimes)"
  },
  {
    "label": "GetForceZeroStoreLifetimes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetForceZeroStoreLifetimes()"
  },
  {
    "label": "GetMinValidatorVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMinValidatorVersion(unsigned &ValMajor, unsigned &ValMinor)"
  },
  {
    "label": "UpgradeToMinValidatorVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpgradeToMinValidatorVersion()"
  },
  {
    "label": "GetEntryFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetEntryFunction()"
  },
  {
    "label": "SetEntryFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEntryFunction(llvm::Function *pEntryFunc)"
  },
  {
    "label": "GetEntryFunctionName()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "GetEntryFunctionName()"
  },
  {
    "label": "SetEntryFunctionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEntryFunctionName(const std::string &name)"
  },
  {
    "label": "GetPatchConstantFunction()",
    "kind": "Method",
    "detail": "Function (llvm::Function*)",
    "insertText": "GetPatchConstantFunction()"
  },
  {
    "label": "SetPatchConstantFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPatchConstantFunction(llvm::Function *pFunc)"
  },
  {
    "label": "IsEntryOrPatchConstantFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEntryOrPatchConstantFunction(const llvm::Function *pFunc)"
  },
  {
    "label": "GetExportedFunctions()",
    "kind": "Method",
    "detail": "Function (llvm::SmallVector<llvm::Function*,6 4>)",
    "insertText": "GetExportedFunctions()"
  },
  {
    "label": "GetGlobalFlags()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetGlobalFlags()"
  },
  {
    "label": "CollectShaderFlagsForModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectShaderFlagsForModule()"
  },
  {
    "label": "AddCBuffer()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AddCBuffer(std::unique_ptr<DxilCBuffer> pCB)"
  },
  {
    "label": "GetCBuffer()",
    "kind": "Method",
    "detail": "Function (DxilCBuffer&)",
    "insertText": "GetCBuffer(unsigned idx)"
  },
  {
    "label": "GetCBuffers()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<DxilCBuffer>>&)",
    "insertText": "GetCBuffers()"
  },
  {
    "label": "AddSampler()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AddSampler(std::unique_ptr<DxilSampler> pSampler)"
  },
  {
    "label": "GetSampler()",
    "kind": "Method",
    "detail": "Function (DxilSampler&)",
    "insertText": "GetSampler(unsigned idx)"
  },
  {
    "label": "GetSamplers()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<DxilSampler>>&)",
    "insertText": "GetSamplers()"
  },
  {
    "label": "AddSRV()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AddSRV(std::unique_ptr<DxilResource> pSRV)"
  },
  {
    "label": "GetSRV()",
    "kind": "Method",
    "detail": "Function (DxilResource&)",
    "insertText": "GetSRV(unsigned idx)"
  },
  {
    "label": "GetSRVs()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<DxilResource>>&)",
    "insertText": "GetSRVs()"
  },
  {
    "label": "AddUAV()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "AddUAV(std::unique_ptr<DxilResource> pUAV)"
  },
  {
    "label": "GetUAV()",
    "kind": "Method",
    "detail": "Function (DxilResource&)",
    "insertText": "GetUAV(unsigned idx)"
  },
  {
    "label": "GetUAVs()",
    "kind": "Method",
    "detail": "Function (const std::vector<std::unique_ptr<DxilResource>>&)",
    "insertText": "GetUAVs()"
  },
  {
    "label": "RemoveUnusedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedResources()"
  },
  {
    "label": "RemoveResourcesWithUnusedSymbols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveResourcesWithUnusedSymbols()"
  },
  {
    "label": "RemoveFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFunction(llvm::Function *F)"
  },
  {
    "label": "RenameResourcesWithPrefix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameResourcesWithPrefix(const std::string &prefix)"
  },
  {
    "label": "RenameResourceGlobalsWithBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameResourceGlobalsWithBinding(bool bKeepName = true)"
  },
  {
    "label": "GetInputSignature()",
    "kind": "Method",
    "detail": "Function (DxilSignature&)",
    "insertText": "GetInputSignature()"
  },
  {
    "label": "GetOutputSignature()",
    "kind": "Method",
    "detail": "Function (DxilSignature&)",
    "insertText": "GetOutputSignature()"
  },
  {
    "label": "GetPatchConstOrPrimSignature()",
    "kind": "Method",
    "detail": "Function (DxilSignature&)",
    "insertText": "GetPatchConstOrPrimSignature()"
  },
  {
    "label": "GetSerializedRootSignature()",
    "kind": "Method",
    "detail": "Function (const std::vector<uint8_t>&)",
    "insertText": "GetSerializedRootSignature()"
  },
  {
    "label": "HasDxilEntrySignature()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDxilEntrySignature(const llvm::Function *F)"
  },
  {
    "label": "GetDxilEntrySignature()",
    "kind": "Method",
    "detail": "Function (DxilEntrySignature&)",
    "insertText": "GetDxilEntrySignature(const llvm::Function *F)"
  },
  {
    "label": "ReplaceDxilEntryProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceDxilEntryProps(llvm::Function *F, llvm::Function *NewF)"
  },
  {
    "label": "CloneDxilEntryProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneDxilEntryProps(llvm::Function *F, llvm::Function *NewF)"
  },
  {
    "label": "HasDxilEntryProps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDxilEntryProps(const llvm::Function *F)"
  },
  {
    "label": "GetDxilEntryProps()",
    "kind": "Method",
    "detail": "Function (DxilEntryProps&)",
    "insertText": "GetDxilEntryProps(const llvm::Function *F)"
  },
  {
    "label": "HasDxilFunctionProps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDxilFunctionProps(const llvm::Function *F)"
  },
  {
    "label": "GetDxilFunctionProps()",
    "kind": "Method",
    "detail": "Function (DxilFunctionProps&)",
    "insertText": "GetDxilFunctionProps(const llvm::Function *F)"
  },
  {
    "label": "SetPatchConstantFunctionForHS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPatchConstantFunctionForHS(llvm::Function *hullShaderFunc, llvm::Function *patchConstantFunc)"
  },
  {
    "label": "IsGraphicsShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphicsShader(const llvm::Function *F)"
  },
  {
    "label": "IsPatchConstantShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPatchConstantShader(const llvm::Function *F)"
  },
  {
    "label": "IsComputeShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComputeShader(const llvm::Function *F)"
  },
  {
    "label": "IsEntryThatUsesSignatures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEntryThatUsesSignatures(const llvm::Function *F)"
  },
  {
    "label": "IsEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEntry(const llvm::Function *F)"
  },
  {
    "label": "StripRootSignatureFromMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StripRootSignatureFromMetadata()"
  },
  {
    "label": "StripSubobjectsFromMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StripSubobjectsFromMetadata()"
  },
  {
    "label": "UpdateValidatorVersionMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateValidatorVersionMetadata()"
  },
  {
    "label": "GetTypeSystem()",
    "kind": "Method",
    "detail": "Function (DxilTypeSystem&)",
    "insertText": "GetTypeSystem()"
  },
  {
    "label": "EmitLLVMUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitLLVMUsed()"
  },
  {
    "label": "GetLLVMUsed()",
    "kind": "Method",
    "detail": "Function (std::vector<llvm::GlobalVariable*>&)",
    "insertText": "GetLLVMUsed()"
  },
  {
    "label": "ClearLLVMUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLLVMUsed()"
  },
  {
    "label": "GetSerializedViewIdState()",
    "kind": "Method",
    "detail": "Function (std::vector<unsigned>&)",
    "insertText": "GetSerializedViewIdState()"
  },
  {
    "label": "ClearDxilMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDxilMetadata(llvm::Module &M)"
  },
  {
    "label": "EmitDxilMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilMetadata()"
  },
  {
    "label": "ReEmitDxilResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReEmitDxilResources()"
  },
  {
    "label": "LoadDxilMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilMetadata()"
  },
  {
    "label": "HasMetadataErrors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMetadataErrors()"
  },
  {
    "label": "EmitDxilCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDxilCounters()"
  },
  {
    "label": "LoadDxilCounters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilCounters(DxilCounters &counters)"
  },
  {
    "label": "IsKnownNamedMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKnownNamedMetaData(llvm::NamedMDNode &Node)"
  },
  {
    "label": "ResetEntrySignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEntrySignature(DxilEntrySignature *pValue)"
  },
  {
    "label": "ResetSerializedRootSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSerializedRootSignature(std::vector<uint8_t> &Value)"
  },
  {
    "label": "ResetTypeSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTypeSystem(DxilTypeSystem *pValue)"
  },
  {
    "label": "ResetOP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetOP(hlsl::OP *hlslOP)"
  },
  {
    "label": "ResetEntryPropsMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetEntryPropsMap(DxilEntryPropsMap &&PropMap)"
  },
  {
    "label": "StripReflection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StripReflection()"
  },
  {
    "label": "StripDebugRelatedCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripDebugRelatedCode()"
  },
  {
    "label": "RemoveUnusedTypeAnnotations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUnusedTypeAnnotations()"
  },
  {
    "label": "RestoreResourceReflection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreResourceReflection(const DxilModule &SourceDM)"
  },
  {
    "label": "StripShaderSourcesAndCompileOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripShaderSourcesAndCompileOptions(bool bReplaceWithDummyData = false)"
  },
  {
    "label": "GetOrCreateDebugInfoFinder()",
    "kind": "Method",
    "detail": "Function (llvm::DebugInfoFinder&)",
    "insertText": "GetOrCreateDebugInfoFinder()"
  },
  {
    "label": "TryGetDxilModule()",
    "kind": "Method",
    "detail": "Function (DxilModule*)",
    "insertText": "TryGetDxilModule(llvm::Module *pModule)"
  },
  {
    "label": "IsPrecise()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrecise(const llvm::Instruction *inst)"
  },
  {
    "label": "HasPreciseFastMathFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPreciseFastMathFlags(const llvm::Instruction *inst)"
  },
  {
    "label": "SetPreciseFastMathFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreciseFastMathFlags(llvm::Instruction *inst)"
  },
  {
    "label": "PreservesFastMathFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreservesFastMathFlags(const llvm::Instruction *inst)"
  },
  {
    "label": "CollectShaderFlagsForModule()",
    "kind": "Method",
    "detail": "Function (public : ShaderFlags m_ShaderFlags ; void)",
    "insertText": "CollectShaderFlagsForModule(ShaderFlags &Flags)"
  },
  {
    "label": "GetModuleUsesDerivatives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetModuleUsesDerivatives()"
  },
  {
    "label": "ModuleHasMulticomponentUAVLoads()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ModuleHasMulticomponentUAVLoads()"
  },
  {
    "label": "SetNumThreads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumThreads(unsigned x, unsigned y, unsigned z)"
  },
  {
    "label": "GetNumThreads()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetNumThreads(unsigned idx)"
  },
  {
    "label": "GetWaveSize()",
    "kind": "Method",
    "detail": "Function (DxilWaveSize&)",
    "insertText": "GetWaveSize()"
  },
  {
    "label": "GetInputPrimitive()",
    "kind": "Method",
    "detail": "Function (DXIL::InputPrimitive)",
    "insertText": "GetInputPrimitive()"
  },
  {
    "label": "SetInputPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputPrimitive(DXIL::InputPrimitive IP)"
  },
  {
    "label": "GetMaxVertexCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetMaxVertexCount()"
  },
  {
    "label": "SetMaxVertexCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxVertexCount(unsigned Count)"
  },
  {
    "label": "GetStreamPrimitiveTopology()",
    "kind": "Method",
    "detail": "Function (DXIL::PrimitiveTopology)",
    "insertText": "GetStreamPrimitiveTopology()"
  },
  {
    "label": "SetStreamPrimitiveTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamPrimitiveTopology(DXIL::PrimitiveTopology Topology)"
  },
  {
    "label": "HasMultipleOutputStreams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMultipleOutputStreams()"
  },
  {
    "label": "GetOutputStream()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetOutputStream()"
  },
  {
    "label": "GetGSInstanceCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetGSInstanceCount()"
  },
  {
    "label": "SetGSInstanceCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGSInstanceCount(unsigned Count)"
  },
  {
    "label": "IsStreamActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamActive(unsigned Stream)"
  },
  {
    "label": "SetStreamActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamActive(unsigned Stream, bool bActive)"
  },
  {
    "label": "SetActiveStreamMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveStreamMask(unsigned Mask)"
  },
  {
    "label": "GetActiveStreamMask()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetActiveStreamMask()"
  },
  {
    "label": "GetUseMinPrecision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseMinPrecision()"
  },
  {
    "label": "SetDisableOptimization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisableOptimization(bool disableOptimization)"
  },
  {
    "label": "GetDisableOptimization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDisableOptimization()"
  },
  {
    "label": "SetAllResourcesBound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllResourcesBound(bool resourcesBound)"
  },
  {
    "label": "GetAllResourcesBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllResourcesBound()"
  },
  {
    "label": "SetResMayAlias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResMayAlias(bool resMayAlias)"
  },
  {
    "label": "GetResMayAlias()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetResMayAlias()"
  },
  {
    "label": "SetLegacyResourceReservation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLegacyResourceReservation(bool legacyResourceReservation)"
  },
  {
    "label": "GetLegacyResourceReservation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLegacyResourceReservation()"
  },
  {
    "label": "ClearIntermediateOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearIntermediateOptions()"
  },
  {
    "label": "GetInputControlPointCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetInputControlPointCount()"
  },
  {
    "label": "SetInputControlPointCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputControlPointCount(unsigned NumICPs)"
  },
  {
    "label": "GetTessellatorDomain()",
    "kind": "Method",
    "detail": "Function (DXIL::TessellatorDomain)",
    "insertText": "GetTessellatorDomain()"
  },
  {
    "label": "SetTessellatorDomain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTessellatorDomain(DXIL::TessellatorDomain TessDomain)"
  },
  {
    "label": "GetOutputControlPointCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetOutputControlPointCount()"
  },
  {
    "label": "SetOutputControlPointCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputControlPointCount(unsigned NumOCPs)"
  },
  {
    "label": "GetTessellatorPartitioning()",
    "kind": "Method",
    "detail": "Function (DXIL::TessellatorPartitioning)",
    "insertText": "GetTessellatorPartitioning()"
  },
  {
    "label": "SetTessellatorPartitioning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTessellatorPartitioning(DXIL::TessellatorPartitioning TessPartitioning)"
  },
  {
    "label": "GetTessellatorOutputPrimitive()",
    "kind": "Method",
    "detail": "Function (DXIL::TessellatorOutputPrimitive)",
    "insertText": "GetTessellatorOutputPrimitive()"
  },
  {
    "label": "SetTessellatorOutputPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTessellatorOutputPrimitive(DXIL::TessellatorOutputPrimitive TessOutputPrimitive)"
  },
  {
    "label": "GetMaxTessellationFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxTessellationFactor()"
  },
  {
    "label": "SetMaxTessellationFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxTessellationFactor(float MaxTessellationFactor)"
  },
  {
    "label": "GetMaxOutputVertices()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetMaxOutputVertices()"
  },
  {
    "label": "SetMaxOutputVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxOutputVertices(unsigned NumOVs)"
  },
  {
    "label": "GetMaxOutputPrimitives()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetMaxOutputPrimitives()"
  },
  {
    "label": "SetMaxOutputPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxOutputPrimitives(unsigned NumOPs)"
  },
  {
    "label": "GetMeshOutputTopology()",
    "kind": "Method",
    "detail": "Function (DXIL::MeshOutputTopology)",
    "insertText": "GetMeshOutputTopology()"
  },
  {
    "label": "SetMeshOutputTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshOutputTopology(DXIL::MeshOutputTopology MeshOutputTopology)"
  },
  {
    "label": "GetPayloadSizeInBytes()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "GetPayloadSizeInBytes()"
  },
  {
    "label": "SetPayloadSizeInBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPayloadSizeInBytes(unsigned Size)"
  },
  {
    "label": "SetAutoBindingSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoBindingSpace(uint32_t Space)"
  },
  {
    "label": "GetAutoBindingSpace()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetAutoBindingSpace()"
  },
  {
    "label": "SetShaderProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderProperties(DxilFunctionProps *props)"
  },
  {
    "label": "GetSubobjects()",
    "kind": "Method",
    "detail": "Function (DxilSubobjects*)",
    "insertText": "GetSubobjects()"
  },
  {
    "label": "ReleaseSubobjects()",
    "kind": "Method",
    "detail": "Function (DxilSubobjects*)",
    "insertText": "ReleaseSubobjects()"
  },
  {
    "label": "ResetSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSubobjects(DxilSubobjects *subobjects)"
  },
  {
    "label": "EmitDxilResources()",
    "kind": "Method",
    "detail": "Function (private : std::vector<uint8_t> m_SerializedRootSignature ; std::vector<std::unique_ptr<DxilResource>> m_SRVs ; std::vector<std::unique_ptr<DxilResource>> m_UAVs ; std::vector<std::unique_ptr<DxilCBuffer>> m_CBuffers ; std::vector<std::unique_ptr<DxilSampler>> m_Samplers ; DXIL::PrimitiveTopology m_StreamPrimitiveTopology = DXIL::PrimitiveTopology::Undefined ; unsigned m_ActiveStreamMask = 0 ; enum IntermediateFlags : uint32_t { LegacyResourceReservation = 1<<0,} ; llvm::LLVMContext& m_Ctx ; llvm::Module* m_pModule = nullptr ; llvm::Function* m_pEntryFunc = nullptr ; std::string m_EntryName = \" \" ; std::unique_ptr<DxilMDHelper> m_pMDHelper ; std::unique_ptr<llvm::DebugInfoFinder> m_pDebugInfoFinder ; const ShaderModel* m_pSM = nullptr ; unsigned m_DxilMajor = DXIL::kDxilMajor ; unsigned m_DxilMinor = DXIL::kDxilMinor ; unsigned m_ValMajor = 1 ; unsigned m_ValMinor = 0 ; bool m_ForceZeroStoreLifetimes = false ; std::unique_ptr<OP> m_pOP ; std::vector<llvm::GlobalVariable*> m_LLVMUsed ; std::unique_ptr<DxilTypeSystem> m_pTypeSystem ; DxilEntryPropsMap m_DxilEntryPropsMap ; std::unordered_set<const llvm::Function*> m_PatchConstantFunctions ; std::vector<unsigned> m_SerializedState ; bool m_bDisableOptimizations = false ; bool m_bUseMinPrecision = true ; bool m_bAllResourcesBound = false ; bool m_bResMayAlias = false ; bool m_bModuleUsesDerivatives = false ; uint32_t m_IntermediateFlags = 0 ; uint32_t m_AutoBindingSpace = UINT_MAX ; std::unique_ptr<DxilSubobjects> m_pSubobjects ; bool m_bMetadataErrors = false ; llvm::MDTuple*)",
    "insertText": "EmitDxilResources()"
  },
  {
    "label": "LoadDxilResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilResources(const llvm::MDOperand &MDO)"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (template<T> unsigned)",
    "insertText": "AddResource(std::vector<std::unique_ptr<T>> &Vec, std::unique_ptr<T> pRes)"
  },
  {
    "label": "LoadDxilSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadDxilSignature(const llvm::MDTuple *pSigTuple, DxilSignature &Sig, bool bInput)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (public : struct ShaderCompatInfo { unsigned minMajor = 6,minMinor = 0 ; unsigned)",
    "insertText": "mask((unsigned)1 << (unsigned)DXIL::ShaderKind::Invalid)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (ShaderFlags shaderFlags ; bool)",
    "insertText": "Merge(ShaderCompatInfo &other)"
  },
  {
    "label": "ComputeShaderCompatInfo()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ComputeShaderCompatInfo()"
  },
  {
    "label": "GetCompatInfoForFunction()",
    "kind": "Method",
    "detail": "Function (const ShaderCompatInfo*)",
    "insertText": "GetCompatInfoForFunction(const llvm::Function *F)"
  },
  {
    "label": "UpdateFunctionToShaderCompat()",
    "kind": "Method",
    "detail": "Function (private : typedef std::unordered_map<const llvm::Function*,ShaderCompatInfo> FunctionShaderCompatMap ; FunctionShaderCompatMap m_FuncToShaderCompat ; void)",
    "insertText": "UpdateFunctionToShaderCompat(const llvm::Function *dxilFunc)"
  }
]