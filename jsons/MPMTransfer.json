[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TMPMTransfer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMPMTransfer"
  },
  {
    "label": "TMPMTransfer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Vector . h \" # include \" ChaosCheck . h \" # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / DynamicParticles . h \" # include \" Chaos / UniformGrid . h \" # include \" Algo / Unique . h \" namespace Chaos { template<class T> class TMPMTransfer { public : uint32 NPerSec = 2* 2 ; uint32 NPerEle = 2* 2* 2 ; uint32 NTransfer = 3 ; int32 NumCells ; TMPMGrid<T>& Grid ; TArray<TVector<T,3>> Weights ; TArray<TVector<int32,3>> Indices ; TArray<TArray<int32>> CellData ; TArray<TArray<int32>> ElementGridNodes ; TArray<TArray<T>> ElementGridNodeWeights ; TArray<TArray<TArray<int32>>> ElementGridNodeIncidentElements ; TArray<TArray<int32>> ElementGridNodesSet ; TArray<T> AArray ; uint32 NumModes = 3 ;)",
    "insertText": "TMPMTransfer()"
  },
  {
    "label": "TMPMTransfer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMPMTransfer(TMPMGrid<T>& _Grid) :Grid(_Grid)"
  },
  {
    "label": "TMPMTransfer()",
    "kind": "Method",
    "detail": "Function (NPerSec = Grid . NPerDir* Grid . NPerDir ; NPerEle = NPerSec* Grid . NPerDir ; })",
    "insertText": "TMPMTransfer(TMPMGrid<T>& _Grid, const int32 NumParticles) :Grid(_Grid)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (NPerSec = Grid . NPerDir* Grid . NPerDir ; NPerEle = NPerSec* Grid . NPerDir ; AArray .)",
    "insertText": "Init((T)0., 3 * 3 * NumParticles)"
  },
  {
    "label": "InitialP2G()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitialP2G(const TDynamicParticles<T, 3>& InParticles, TArray<T>& GridData)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (int32 N = InParticles .)",
    "insertText": "Size()"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosMPMTransferInitialBinning)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Indices .)",
    "insertText": "SetNum(N)"
  },
  {
    "label": "BaseNodeIndex()",
    "kind": "Method",
    "detail": "Function (Grid .)",
    "insertText": "BaseNodeIndex(InParticles.GetX(p), Indices[p], Weights[p])"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} } {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosMPMTransferCellMetaCalc)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (CellData .)",
    "insertText": "SetNum(NumCells)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (CellData [ c ] .)",
    "insertText": "SetNum(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 p = 0; p < N; p++)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (CellData [ Grid .)",
    "insertText": "FlatIndex(Indices[p])].Emplace(p)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} } {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosMPMTransferSplatData)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (GridData .)",
    "insertText": "Init((T)0., CellData.Num() * (NTransfer + 1))"
  },
  {
    "label": "GetCells()",
    "kind": "Method",
    "detail": "Function (TVector<int32,3> GridCells = Grid .)",
    "insertText": "GetCells()"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (int32 CurrentLocIndex = ii* NPerSec + jj* Grid . NPerDir + kk ;)",
    "insertText": "PhysicsParallelFor(GridCells[0] / Grid.NPerDir, [&](const int32 iii) { for (int32 jjj = 0; jjj < int32(GridCells[1] / Grid.NPerDir); jjj++) { for (int32 kkk = 0; kkk < int32(GridCells[2] / Grid.NPerDir); kkk++) { TVector<int32, 3> MultiIndex = { iii * int32(Grid.NPerDir) + ii, jjj * int32(Grid.NPerDir) + jj, kkk * int32(Grid.NPerDir) + kk }; int32 CellIndex = Grid.FlatIndex(MultiIndex); P2GApplyHelper(InParticles, CellIndex, GridData); } } })"
  },
  {
    "label": "P2GApplyHelper()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "P2GApplyHelper(const TDynamicParticles<T, 3>& InParticles, const int32 CellIndex, TArray<T>& GridData)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 p = CellData [ CellIndex ] [ i ] ;)",
    "insertText": "for(int iii = 0; iii < int32(Grid.NPerDir); iii++)"
  },
  {
    "label": "Nijk()",
    "kind": "Method",
    "detail": "Function (T Nii = Grid .)",
    "insertText": "Nijk(Weights[p][0], iii)"
  },
  {
    "label": "Nijk()",
    "kind": "Method",
    "detail": "Function (T Njj = Grid .)",
    "insertText": "Nijk(Weights[p][1], jjj)"
  },
  {
    "label": "Loc2GlobIndex()",
    "kind": "Method",
    "detail": "Function (TVector<int32,3> LocIndex = { iii,jjj,kkk } ; TVector<int32,3> GlobMultiIndex = Grid .)",
    "insertText": "Loc2GlobIndex(Indices[p], LocIndex)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (int32 GlobIndex = Grid .)",
    "insertText": "FlatIndex(GlobMultiIndex)"
  },
  {
    "label": "Nijk()",
    "kind": "Method",
    "detail": "Function (T Nkk = Grid .)",
    "insertText": "Nijk(Weights[p][2], kkk)"
  },
  {
    "label": "GridData()",
    "kind": "Method",
    "detail": "Function (T NProd = Nii* Njj* Nkk ;)",
    "insertText": "GridData(NTransfer + 1) * GlobIndex] += NProd * InParticles.M(p)"
  },
  {
    "label": "GridData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridData(NTransfer + 1) * GlobIndex + alpha + 1] += NProd * InParticles.M(p) * InParticles.V(p)"
  },
  {
    "label": "APICP2G()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "APICP2G(p, GlobIndex, NProd * InParticles.M(p), InParticles, GridData)"
  },
  {
    "label": "APICP2G()",
    "kind": "Method",
    "detail": "Function (} } } } } } void)",
    "insertText": "APICP2G(const int32 p, const int32 GlobIndex, const T mip, const TDynamicParticles<T, 3>& Particles, TArray<T>& GridData)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (TVector<T,3> xi_minus_xp = Grid .)",
    "insertText": "Node(GlobIndex) - Particles.GetX(p)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T vl =)",
    "insertText": "T(0)"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (GridData [)",
    "insertText": "l(NTransfer + 1)"
  },
  {
    "label": "ComputeElementMetaData()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ComputeElementMetaData(const TArray<TVector<int32, 4>>& InMesh)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ElementGridNodes .)",
    "insertText": "SetNum(InMesh.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ElementGridNodes [ e ] .)",
    "insertText": "SetNum(NPerEle * 4)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 p = InMesh [ e ] [ ie ] ; TVector<int32,3> Index = Indices [ p ] ;)",
    "insertText": "for(int32 ii = 0; ii < int32(Grid.NPerDir); ii++)"
  },
  {
    "label": "Nijk()",
    "kind": "Method",
    "detail": "Function (T Nii = Grid .)",
    "insertText": "Nijk(Weights[p][0], ii)"
  },
  {
    "label": "Nijk()",
    "kind": "Method",
    "detail": "Function (T Njj = Grid .)",
    "insertText": "Nijk(Weights[p][1], jj)"
  },
  {
    "label": "Nijk()",
    "kind": "Method",
    "detail": "Function (T Nkk = Grid .)",
    "insertText": "Nijk(Weights[p][2], kk)"
  },
  {
    "label": "Loc2GlobIndex()",
    "kind": "Method",
    "detail": "Function (TVector<int32,3> LocIndex = { ii,jj,kk } ; TVector<int32,3> GlobIndex = Grid .)",
    "insertText": "Loc2GlobIndex(Index, LocIndex)"
  },
  {
    "label": "FlatIndex()",
    "kind": "Method",
    "detail": "Function (int32 GlobIndexFlat = Grid .)",
    "insertText": "FlatIndex(GlobIndex)"
  },
  {
    "label": "ComputeIncidentElements()",
    "kind": "Method",
    "detail": "Function (ElementGridNodes [ e ] [ ie* NPerEle + ii* NPerSec + jj* Grid . NPerDir + kk ] = GlobIndexFlat ; ElementGridNodeWeights [ e ] [ ie* NPerEle + ii* NPerSec + jj* Grid . NPerDir + kk ] = Nii* Njj* Nkk ; } } } })",
    "insertText": "ComputeIncidentElements(ElementGridNodes[e], ElementGridNodeIncidentElements[e])"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ElementGridNodesSet [ e ] .)",
    "insertText": "SetNum(ElementGridNodeIncidentElements[e].Num())"
  },
  {
    "label": "ComputeIncidentElements()",
    "kind": "Method",
    "detail": "Function (ElementGridNodesSet [ e ] [ kk ] = ElementGridNodes [ e ] [ ElementGridNodeIncidentElements [ e ] [ kk ] [ 0 ] ] ; } } } void)",
    "insertText": "ComputeIncidentElements(const TArray<int32>& ArrayIn, TArray<TArray<int32>>& IncidentElements)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<int32> Ordering,Ranges ; Ordering .)",
    "insertText": "SetNum(ArrayIn.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Ranges .)",
    "insertText": "SetNum(ArrayIn.Num()+1)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Ordering [ i ] = i ; Ranges [ i ] = i ; } Ordering .)",
    "insertText": "Sort([&ArrayIn](const int32 A, const int32 B) { return ArrayIn[A] < ArrayIn[B]; })"
  },
  {
    "label": "Unique()",
    "kind": "Method",
    "detail": "Function (int32 Last =)",
    "insertText": "Unique(Ranges, [&ArrayIn, &Ordering](int32 i, int32 j) { return ArrayIn[Ordering[i]] == ArrayIn[Ordering[j]]; })"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumNodes = Last - 1 ; Ranges [ NumNodes ] = ArrayIn .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Ranges .)",
    "insertText": "SetNum(NumNodes + 1)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (IncidentElements .)",
    "insertText": "SetNum(Ranges.Num() - 1)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (IncidentElements [ p ] .)",
    "insertText": "SetNum(Ranges[p + 1] - Ranges[p])"
  },
  {
    "label": "ComputeGridPositions()",
    "kind": "Method",
    "detail": "Function (IncidentElements [ p ] [ e - Ranges [ p ] ] = Ordering [ e ] ; } } } void)",
    "insertText": "ComputeGridPositions(const TArray<T>& GridData, const T Dt, TArray<TVector<T, 3>>& GridPositions)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (GridPositions .)",
    "insertText": "SetNum(Grid.Size())"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (TVector<T,3> XOld = Grid .)",
    "insertText": "Node(i)"
  },
  {
    "label": "GridData()",
    "kind": "Method",
    "detail": "Function (T Mass =)",
    "insertText": "GridData(NTransfer + 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (GridPositions [ i ] = XOld ; } else {)",
    "insertText": "for(int32 Alpha = 0; Alpha < int32(NTransfer); Alpha++) GridPositions[i][Alpha] = Dt * GridData[(NTransfer + 1)"
  },
  {
    "label": "SparseG2P()",
    "kind": "Method",
    "detail": "Function (} } } TVec4<TVector<T,3>>)",
    "insertText": "SparseG2P(const TArray<TVector<T, 3>>& GridPositions, const int32 ElementIndex)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>>)",
    "insertText": "Result(TVector<T, 3>((T)0.))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 FlatIndex = ElementGridNodes [ ElementIndex ] [ NPerEle* i + ii ] ;)",
    "insertText": "for(int32 Alpha = 0; Alpha < 3; Alpha++)"
  },
  {
    "label": "ComputeAArray()",
    "kind": "Method",
    "detail": "Function (Result [ i ] [ Alpha ] + = ElementGridNodeWeights [ ElementIndex ] [ NPerEle* i + ii ]* GridPositions [ FlatIndex ] [ Alpha ] ; } } } return Result ; } void)",
    "insertText": "ComputeAArray(const TArray<T>& GridData, const TDynamicParticles<T, 3>& Particles)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (AArray .)",
    "insertText": "Init((T)0., NumModes * 3 * Particles.Size())"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(int32(Particles.Size()), [&](const int32 p) { TVector<int32, 3> BaseIndex = Indices[p]; for (int32 ii = 0; ii < int32(Grid.NPerDir); ii++) { T Nii = Grid.Nijk(Weights[p][0], ii); T dNii = Grid.dNijk(Weights[p][0], ii, Grid.GetDx()[0]); for (int32 jj = 0; jj < int32(Grid.NPerDir); jj++) { T Njj = Grid.Nijk(Weights[p][1], jj); T dNjj = Grid.dNijk(Weights[p][1], jj, Grid.GetDx()[0]); for (int32 kk = 0; kk < int32(Grid.NPerDir); kk++) { T Nkk = Grid.Nijk(Weights[p][2], kk); T dNkk = Grid.dNijk(Weights[p][2], kk, Grid.GetDx()[0]); TVector<T, 3> Ni = { Nii, Njj, Nkk }; TVector<T, 3> dNi = { dNii, dNjj, dNkk }; TVector<int32, 3> LocIndex = { ii, jj, kk }; TVector<int32, 3> GlobIndex = Grid.Loc2GlobIndex(BaseIndex, LocIndex); int32 GlobIndexFlat = Grid.FlatIndex(GlobIndex); if (GridData[(NTransfer + 1) * GlobIndexFlat] != T(0)) { if (Grid.interp == TMPMGrid<T>::linear) { TVector<T, 3> dN((T)0.); Grid.GradNi(Ni, dNi, dN); for (int32 l = 0; l < 3; l++) { T GridQuantity = GridData[(NTransfer + 1) * GlobIndexFlat + 1 + l] / GridData[(NTransfer + 1) * GlobIndexFlat]; for (int32 iii = 0; iii < int32(NumModes); ++iii) AArray[NumModes * 3 * p + NumModes * l + iii] += dN[iii] * GridQuantity; } } else { TVector<T, 3> rip = Grid.Node(GlobIndexFlat) - Particles.GetX(p); T NiProdbInv = (T(4) * Ni[0] * Ni[1] * Ni[2]) / (Grid.GetDx()[0] * Grid.GetDx()[0]); for (int32 l = 0; l < 3; l++) { T GridQuantity = GridData[(NTransfer + 1) * GlobIndexFlat + 1 + l] / GridData[(NTransfer + 1) * GlobIndexFlat]; for (int32 iii = 0; iii < int32(NumModes); ++iii) AArray[NumModes * 3 * p + NumModes * l + iii] += NiProdbInv * rip[iii] * GridQuantity; } } } } } } }, Particles.Size() < 50)"
  },
  {
    "label": "GridPositionsToGridData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GridPositionsToGridData(const TArray<TVector<T, 3>>& GridPositions, const T Dt, TArray<T>& GridData)"
  },
  {
    "label": "GridData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridData(NTransfer + 1) * i + alpha + 1] = Mi * (GridPositions[i][alpha] - NodePos[alpha])"
  },
  {
    "label": "G2P()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "G2P(const TArray<T>& GridData, TDynamicParticles<T, 3>& Particles)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Particles.Size(), [&](const int32 p) { Particles.V(p) = TVec3<T>((T)0.); for (int32 ii = 0; ii < int32(Grid.NPerDir); ii++) { T Nii = Grid.Nijk(Weights[p][0], ii); for (int32 jj = 0; jj < int32(Grid.NPerDir); jj++) { T Njj = Grid.Nijk(Weights[p][1], jj); for (int32 kk = 0; kk < int32(Grid.NPerDir); kk++) { T Nkk = Grid.Nijk(Weights[p][2], kk); TVector<int32, 3> LocIndex = { ii, jj, kk }; TVector<int32, 3> GlobIndex = Grid.Loc2GlobIndex(Indices[p], LocIndex); int32 GlobIndexFlat = Grid.FlatIndex(GlobIndex); if (GridData[GlobIndexFlat * (NTransfer + 1)] > T(0)) { for (int32 alpha = 0; alpha < 3; alpha++) { Particles.V(p)[alpha] += Nii * Njj * Nkk * GridData[GlobIndexFlat * (NTransfer + 1) + alpha + 1] / GridData[GlobIndexFlat * (NTransfer + 1)]; } } } } } }, Particles.Size() < 50)"
  },
  {
    "label": "SparseP2G()",
    "kind": "Method",
    "detail": "Function (} TArray<TVector<T,3>>)",
    "insertText": "SparseP2G(const TVec4<TVector<T, 3>>& InGradient, const int32 ElementIndex)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TArray<TVector<T,3>> GridGradient ; GridGradient .)",
    "insertText": "Init(TVector<T, 3>((T)0.), 4 * NPerEle)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (GridGradient [ NPerEle* i + ii ] [ alpha ] + = ElementGridNodeWeights [ ElementIndex ] [ NPerEle* i + ii ]* InGradient [ i ] [ alpha ] ; } } } TArray<TVector<T,3>> GridGradientCompact ; GridGradientCompact .)",
    "insertText": "Init(TVector<T, 3>((T)0.), ElementGridNodeIncidentElements[ElementIndex].Num())"
  }
]