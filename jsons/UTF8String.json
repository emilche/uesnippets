[
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "TUTF8StringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUTF8StringBuilder"
  },
  {
    "label": "TUTF8String",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUTF8String"
  },
  {
    "label": "OtherAllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherAllocatorType"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Memory / Allocator . h \" # include \" uLang / Common / Text / UTF8StringView . h \" # include<stdarg . h> # include<stdio . h> # include<cstring> namespace uLang { template<class AllocatorType,. . . AllocatorArgsType> class TUTF8StringBuilder ; template<class AllocatorType,. . . AllocatorArgsType> class TUTF8String : AllocatorType { public :)",
    "insertText": "TUTF8String() : AllocatorType(DefaultInit)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUTF8String(const char* NullTerminatedString, AllocatorArgsType&&... AllocatorArgs)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TUTF8String(const CUTF8StringView& StringView, AllocatorArgsType&&... AllocatorArgs)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (template<. . . FormatterArgsType>)",
    "insertText": "TUTF8String(AllocatorArgsType&&... AllocatorArgs, const char* NullTerminatedFormat, FormatterArgsType&&... FormatterArgs)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TUTF8String(AllocatorArgsType&&... AllocatorArgs, const char* NullTerminatedFormat, va_list FormatterArgs)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (template<InitializerFunctorType>)",
    "insertText": "TUTF8String(size_t ByteLength, InitializerFunctorType&& InitializerFunctor, AllocatorArgsType&&... AllocatorArgs)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TUTF8String(const TUTF8String& Other)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (template<class OtherAllocatorType,. . . OtherAllocatorArgsType>)",
    "insertText": "TUTF8String(const TUTF8String<OtherAllocatorType, OtherAllocatorArgsType...>& Other, AllocatorArgsType&&... AllocatorArgs)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TUTF8String(TUTF8String&& Other)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TUTF8String()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } ULANG_FORCEINLINE void)",
    "insertText": "Reset()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} } ULANG_FORCEINLINE void)",
    "insertText": "Empty()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UTF8Char*)",
    "insertText": "Resize(int32_t NewByteLen)"
  },
  {
    "label": "ByteLen()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "ByteLen()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsFilled()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsFilled()"
  },
  {
    "label": "AsUTF8()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE const UTF8Char*)",
    "insertText": "AsUTF8()"
  },
  {
    "label": "AsCString()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE const char*)",
    "insertText": "AsCString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE const char*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE const UTF8Char&)",
    "insertText": "operator(int32_t ByteIndex)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(ByteIndex >= 0 && _String._Begin + ByteIndex < _String._End, \"Invalid index: Index=%i, ByteLen()=%i\", ByteIndex, ByteLen())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TUTF8String&)",
    "insertText": "operator(TUTF8String&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TUTF8String&)",
    "insertText": "operator(const CUTF8StringView& OtherStringView)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class OtherAllocatorType,. . . OtherAllocatorArgsType> TUTF8String&)",
    "insertText": "operator(const TUTF8String<OtherAllocatorType, OtherAllocatorArgsType...>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TUTF8String&)",
    "insertText": "operator(const char* OtherNullTerminatedString)"
  },
  {
    "label": "CUTF8StringView()",
    "kind": "Method",
    "detail": "Function (ULANG_FORCEINLINE operator const)",
    "insertText": "CUTF8StringView()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE CUTF8StringView::UnicodeConstIterator)",
    "insertText": "end()"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE TUTF8String)",
    "insertText": "Replace(UTF8Char Old, UTF8Char New)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (} TUTF8String)",
    "insertText": "Replace(const CUTF8StringView& Old, const CUTF8StringView& New)"
  },
  {
    "label": "AllocateUninitialized()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "AllocateUninitialized(ByteLen() * 2)"
  },
  {
    "label": "UTF8Char()",
    "kind": "Method",
    "detail": "Function (UTF8Char* DstChar = const_cast<)",
    "insertText": "UTF8Char(Result._String._Begin)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const UTF8Char* SubChar = ThisChar ;)",
    "insertText": "for(const UTF8Char* OldChar = Old._Begin; OldChar < Old._End; ++OldChar, ++SubChar)"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (intptr_t DstOffset = DstChar - Result . _String . _Begin ; Result . _String . _End = DstChar ; Result .)",
    "insertText": "Reallocate(Result.ByteLen() * 2 + BytesNeeded)"
  },
  {
    "label": "UTF8Char()",
    "kind": "Method",
    "detail": "Function (DstChar = const_cast<)",
    "insertText": "UTF8Char(Result._String._Begin + DstOffset)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memcpy(DstChar, BeginChar, ThisChar - BeginChar)"
  },
  {
    "label": "DstChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DstChar(ThisChar - BeginChar)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(DstChar, New._Begin, New.ByteLen())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (BeginChar = ThisChar = SubChar ; - - ThisChar ; Continue : ;)",
    "insertText": "memcpy(DstChar, BeginChar, _String._End - BeginChar)"
  },
  {
    "label": "DstChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DstChar(_String._End - BeginChar)"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Reallocate(DstChar - Result._String._Begin)"
  },
  {
    "label": "InputByteIdxToDirectIdx()",
    "kind": "Method",
    "detail": "Function (protected : ULANG_FORCEINLINE int32_t)",
    "insertText": "InputByteIdxToDirectIdx(int32_t InIdx)"
  },
  {
    "label": "InputByteIdxSpan()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "InputByteIdxSpan(int32_t& InOutIdx, int32_t& InOutSpan)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (} private : template<class OtherAllocatorType,. . . OtherAllocatorArgsType> class TUTF8StringBuilder ;)",
    "insertText": "TUTF8String(ENoInit)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TUTF8String(ENoInit, const AllocatorType& Allocator) : AllocatorType(Allocator), _String(NoInit)"
  },
  {
    "label": "AllocateUninitialized()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE UTF8Char*)",
    "insertText": "AllocateUninitialized(size_t ByteLength)"
  },
  {
    "label": "Memory()",
    "kind": "Method",
    "detail": "Function (UTF8Char*)",
    "insertText": "Memory(UTF8Char*)GetAllocator().Allocate(ByteLength + 1)"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (_String . _Begin = Memory ; _String . _End = Memory + ByteLength ; return Memory ; } ULANG_FORCEINLINE UTF8Char*)",
    "insertText": "Reallocate(size_t ByteLength)"
  },
  {
    "label": "NewMemory()",
    "kind": "Method",
    "detail": "Function (UTF8Char*)",
    "insertText": "NewMemory(UTF8Char*)GetAllocator().Allocate(ByteLength + 1)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(NewMemory, _String._Begin, (ByteLength < OldLength ? ByteLength : OldLength))"
  },
  {
    "label": "AllocateInitialized()",
    "kind": "Method",
    "detail": "Function (} _String . _Begin = NewMemory ; _String . _End = NewMemory + ByteLength ; NewMemory [ ByteLength ] = 0 ; return NewMemory ; } ULANG_FORCEINLINE void)",
    "insertText": "AllocateInitialized(const UTF8Char* String, size_t ByteLength)"
  },
  {
    "label": "AllocateUninitialized()",
    "kind": "Method",
    "detail": "Function (UTF8Char* Memory =)",
    "insertText": "AllocateUninitialized(ByteLength)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(Memory, String, ByteLength)"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllocator().Deallocate((void*)_String._Begin)"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (} AllocatorType&)",
    "insertText": "GetAllocator()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (TUTF8String Empty ; return Empty ; } using CUTF8String = uLang::TUTF8String<CHeapRawAllocator> ; using CUTF8StringA = uLang::TUTF8String<CInstancedRawAllocator,CAllocatorInstance*> ; template<class AllocatorType,. . . AllocatorArgsType> ULANG_FORCEINLINE uint32_t)",
    "insertText": "GetTypeHash(const TUTF8String<AllocatorType, AllocatorArgsType...>& String)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,. . . AllocatorArgsType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "TUTF8String(const char* NullTerminatedString, AllocatorArgsType&&... AllocatorArgs) : AllocatorType(uLang::ForwardArg<AllocatorArgsType>(AllocatorArgs)...) , _String(NoInit)"
  },
  {
    "label": "AllocateInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateInitialized((const UTF8Char*)NullTerminatedString, ::strlen(NullTerminatedString))"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,. . . AllocatorArgsType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "TUTF8String(const CUTF8StringView& StringView, AllocatorArgsType&&... AllocatorArgs) : AllocatorType(uLang::ForwardArg<AllocatorArgsType>(AllocatorArgs)...) , _String(NoInit)"
  },
  {
    "label": "AllocateInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateInitialized(StringView._Begin, StringView.ByteLen())"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,. . . AllocatorArgsType> template<. . . FormatterArgsType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "TUTF8String(AllocatorArgsType&&... AllocatorArgs, const char* NullTerminatedFormat, FormatterArgsType&&... FormatterArgs) : AllocatorType(uLang::ForwardArg<AllocatorArgsType>(AllocatorArgs)...) , _String(NoInit)"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (size_t ByteLength)",
    "insertText": "snprintf(nullptr, 0, NullTerminatedFormat, FormatterArgs...)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(ByteLength != size_t(-1), \"Invalid format string: %s\", NullTerminatedFormat)"
  },
  {
    "label": "Text()",
    "kind": "Method",
    "detail": "Function (size_t AllocBytes = ByteLength + 1 ; UTF8Char*)",
    "insertText": "Text(UTF8Char*)GetAllocator().Allocate(AllocBytes)"
  },
  {
    "label": "snprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "snprintf((char*)Text, AllocBytes, NullTerminatedFormat, FormatterArgs...)"
  },
  {
    "label": "CUTF8StringView()",
    "kind": "Method",
    "detail": "Function (_String =)",
    "insertText": "CUTF8StringView(Text, Text + ByteLength)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,. . . AllocatorArgsType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "TUTF8String(AllocatorArgsType&&... AllocatorArgs, const char* NullTerminatedFormat, va_list FormatterArgs) : AllocatorType(uLang::ForwardArg<AllocatorArgsType>(AllocatorArgs)...) , _String(NoInit)"
  },
  {
    "label": "va_copy()",
    "kind": "Method",
    "detail": "Function (va_list FormatterArgsLocal ;)",
    "insertText": "va_copy(FormatterArgsLocal, FormatterArgs)"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (size_t ByteLength)",
    "insertText": "vsnprintf(nullptr, 0, NullTerminatedFormat, FormatterArgsLocal)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "va_end(FormatterArgsLocal)"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vsnprintf((char*)Text, AllocBytes, NullTerminatedFormat, FormatterArgsLocal)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,. . . AllocatorArgsType> template<InitializerFunctorType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "TUTF8String(size_t ByteLength, InitializerFunctorType&& InitializerFunctor, AllocatorArgsType&&... AllocatorArgs) : AllocatorType(uLang::ForwardArg<AllocatorArgsType>(AllocatorArgs)...) , _String(NoInit)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(ByteLength <= INT32_MAX, \"TUTF8String doesn't support ByteLength > INT32_MAX. (ByteLength=%zu)\", ByteLength)"
  },
  {
    "label": "InitializerFunctor()",
    "kind": "Method",
    "detail": "Function (_String . _Begin = Memory ; _String . _End = Memory + ByteLength ;)",
    "insertText": "InitializerFunctor(Memory)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (Memory [ ByteLength ] = 0 ; } template<class AllocatorType,. . . AllocatorArgsType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "TUTF8String(const TUTF8String& Other) : AllocatorType(Other.GetAllocator()) , _String(NoInit)"
  },
  {
    "label": "AllocateInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateInitialized(Other._String._Begin, Other.ByteLen())"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,. . . AllocatorArgsType> template<class OtherAllocatorType,. . . OtherAllocatorArgsType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "TUTF8String(const TUTF8String<OtherAllocatorType, OtherAllocatorArgsType...>& Other, AllocatorArgsType&&... AllocatorArgs) : AllocatorType(uLang::ForwardArg<AllocatorArgsType>(AllocatorArgs)...) , _String(NoInit)"
  },
  {
    "label": "TUTF8String()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,. . . AllocatorArgsType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "TUTF8String(TUTF8String&& Other) : AllocatorType(Other.GetAllocator()) , _String(Other._String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,. . . AllocatorArgsType> ULANG_FORCEINLINE TUTF8String<AllocatorType,AllocatorArgsType . . .>& TUTF8String<AllocatorType,AllocatorArgsType . . .)",
    "insertText": "operator(const TUTF8String& Other)"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GetAllocator() = Other.GetAllocator()"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (UTF8Char* NewMemory =)",
    "insertText": "Reallocate(NewStringLength)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(NewMemory + OldStringLength, OtherStringView.Data(), OtherStringView.ByteLen())"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (size_t OtherStringLength)",
    "insertText": "strlen(OtherNullTerminatedString)"
  }
]