[
  {
    "label": "ElemTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElemTy"
  },
  {
    "label": "EquivalenceClasses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EquivalenceClasses"
  },
  {
    "label": "ECValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ECValue"
  },
  {
    "label": "member_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "member_iterator"
  },
  {
    "label": "ECValue()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_EQUIVALENCECLASSES_H # define LLVM_ADT_EQUIVALENCECLASSES_H # include \" llvm / Support / DataTypes . h \" # include<cassert> # include<cstddef> # include<set> namespace llvm { template<class ElemTy> class EquivalenceClasses { class ECValue { class EquivalenceClasses ; const ECValue* Leader,* Next ; ElemTy Data ;)",
    "insertText": "ECValue(const ElemTy &Elt) : Leader(this), Next((ECValue*)(intptr_t)1), Data(Elt)"
  },
  {
    "label": "getLeader()",
    "kind": "Method",
    "detail": "Function (} const ECValue*)",
    "insertText": "getLeader()"
  },
  {
    "label": "getEndOfList()",
    "kind": "Method",
    "detail": "Function (} const ECValue*)",
    "insertText": "getEndOfList()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isLeader() && \"Cannot get the end of a list for a non-leader!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getNext() == nullptr && \"Already has a next pointer!\")"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Next(const ECValue*)((intptr_t)NewNext | (intptr_t)isLeader())"
  },
  {
    "label": "ECValue()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "ECValue(const ECValue &RHS) : Leader(this), Next((ECValue*)(intptr_t)1), Data(RHS.Data)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RHS.isLeader() && RHS.getNext() == nullptr && \"Not a singleton!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ECValue &UFN)"
  },
  {
    "label": "getData()",
    "kind": "Method",
    "detail": "Function (} const ElemTy&)",
    "insertText": "getData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator(const T &Val)"
  },
  {
    "label": "EquivalenceClasses()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EquivalenceClasses(const EquivalenceClasses &RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const EquivalenceClasses&)",
    "insertText": "operator(const EquivalenceClasses &RHS)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (TheMapping .)",
    "insertText": "clear()"
  },
  {
    "label": "member_begin()",
    "kind": "Method",
    "detail": "Function (member_iterator MI = RHS .)",
    "insertText": "member_begin(I)"
  },
  {
    "label": "member_begin()",
    "kind": "Method",
    "detail": "Function (member_iterator LeaderIt =)",
    "insertText": "member_begin(insert(*MI))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} return* this ; } typedef std::set<ECValue>::const_iterator iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "member_begin()",
    "kind": "Method",
    "detail": "Function (} class member_iterator ; member_iterator)",
    "insertText": "member_begin(iterator I)"
  },
  {
    "label": "member_end()",
    "kind": "Method",
    "detail": "Function (} member_iterator)",
    "insertText": "member_end()"
  },
  {
    "label": "findValue()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "findValue(const ElemTy &V)"
  },
  {
    "label": "getLeaderValue()",
    "kind": "Method",
    "detail": "Function (} const ElemTy&)",
    "insertText": "getLeaderValue(const ElemTy &V)"
  },
  {
    "label": "findLeader()",
    "kind": "Method",
    "detail": "Function (member_iterator MI =)",
    "insertText": "findLeader(V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(MI != member_end() && \"Value is not in the set!\")"
  },
  {
    "label": "findLeader()",
    "kind": "Method",
    "detail": "Function (member_iterator MI =)",
    "insertText": "findLeader(insert(V))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned NC = 0 ;)",
    "insertText": "for(iterator I = begin(), E = end(); I != E; ++I) if (I->isLeader())"
  },
  {
    "label": "findLeader()",
    "kind": "Method",
    "detail": "Function (} member_iterator)",
    "insertText": "findLeader(iterator I)"
  },
  {
    "label": "findLeader()",
    "kind": "Method",
    "detail": "Function (} member_iterator)",
    "insertText": "findLeader(const ElemTy &V)"
  },
  {
    "label": "unionSets()",
    "kind": "Method",
    "detail": "Function (} member_iterator)",
    "insertText": "unionSets(const ElemTy &V1, const ElemTy &V2)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (iterator V1I =)",
    "insertText": "insert(V1), V2I = insert(V2)"
  },
  {
    "label": "unionSets()",
    "kind": "Method",
    "detail": "Function (} member_iterator)",
    "insertText": "unionSets(member_iterator L1, member_iterator L2)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(L1 != member_end() && L2 != member_end() && \"Illegal inputs!\")"
  },
  {
    "label": "getEndOfList()",
    "kind": "Method",
    "detail": "Function (const ECValue& L1LV =* L1 . Node,& L2LV =* L2 . Node ; L1LV .)",
    "insertText": "getEndOfList()->setNext(&L2LV)"
  },
  {
    "label": "getNext()",
    "kind": "Method",
    "detail": "Function (L2LV . Next = L2LV .)",
    "insertText": "getNext()"
  },
  {
    "label": "member_iterator()",
    "kind": "Method",
    "detail": "Function (L2LV . Leader =& L1LV ; return L1 ; } class member_iterator { const ECValue* Node ; class EquivalenceClasses ; public : using iterator_category = std::forward_iterator_tag ; using value_type = const ElemTy ; using size_type = std::size_t ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ;)",
    "insertText": "member_iterator()"
  },
  {
    "label": "member_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "member_iterator(const ECValue *N) : Node(N)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node != nullptr && \"Dereferencing end()!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Node != nullptr && \"++'d off the end of the list!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (member_iterator tmp =* this ; + +* this ; return tmp ; } bool)",
    "insertText": "operator(const member_iterator &RHS)"
  }
]