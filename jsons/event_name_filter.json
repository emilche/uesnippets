[
  {
    "label": "TraceEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceEvent"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "EventNameFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_EVENT_NAME_FILTER_H_ # define BASE_TRACE_EVENT_EVENT_NAME_FILTER_H_ # include<memory> # include<string> # include<unordered_set> # include \" base / base_export . h \" # include \" base / trace_event / trace_event_filter . h \" namespace base { namespace trace_event { class TraceEvent ; class BASE_EXPORT EventNameFilter : public TraceEventFilter { public : using EventNamesAllowlist = std::unordered_set<std::string> ; const char kName [ ] ;)",
    "insertText": "EventNameFilter(std::unique_ptr<EventNamesAllowlist>)"
  },
  {
    "label": "EventNameFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EventNameFilter(const EventNameFilter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EventNameFilter&)",
    "insertText": "operator(const EventNameFilter&)"
  },
  {
    "label": "EventNameFilter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EventNameFilter()"
  },
  {
    "label": "FilterTraceEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterTraceEvent(const TraceEvent&)"
  }
]