[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "KISMETWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KISMETWIDGETS_API"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Framework / SlateDelegates . h \" # include \" HAL / Platform . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" SCurveEditor . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FText ; class FWidgetStyle ; struct FGeometry ; struct FPointerEvent ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnCropAnimSequence, bool, float ) DECLARE_DELEGATE_TwoParams( FOnAddAnimSequence, bool, int32 ) DECLARE_DELEGATE_TwoParams( FOnAppendAnimSequence, bool, int32 ) DECLARE_DELEGATE_TwoParams( FOnScrubBarDrag, int32, float) DECLARE_DELEGATE_TwoParams( FOnScrubBarCommit, int32, float) DECLARE_DELEGATE_OneParam( FOnReZeroAnimSequence, int32)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SScrubWidget) : _Value(0) , _NumOfKeys(10) , _SequenceLength() , _bAllowZoom(false) , _bDisplayAnimScrubBarEditing(true) , _DisplayDrag(true) , _OnValueChanged() , _OnBeginSliderMovement() , _OnEndSliderMovement() , _ViewInputMin() , _ViewInputMax() , _OnSetInputViewRange() , _OnCropAnimSequence()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(float, Value ) SLATE_ATTRIBUTE( uint32, NumOfKeys ) SLATE_ATTRIBUTE( float, SequenceLength ) SLATE_ARGUMENT( bool, bAllowZoom ) SLATE_ARGUMENT( bool, bDisplayAnimScrubBarEditing ) SLATE_ATTRIBUTE( bool, DisplayDrag ) SLATE_EVENT( FOnFloatValueChanged, OnValueChanged ) SLATE_EVENT( FSimpleDelegate, OnBeginSliderMovement ) SLATE_EVENT( FOnFloatValueChanged, OnEndSliderMovement ) SLATE_ATTRIBUTE( float, ViewInputMin ) SLATE_ATTRIBUTE( float, ViewInputMax ) SLATE_EVENT( FOnSetInputViewRange, OnSetInputViewRange ) SLATE_EVENT( FOnCropAnimSequence, OnCropAnimSequence ) SLATE_EVENT( FOnAddAnimSequence, OnAddAnimSequence ) SLATE_EVENT(FOnAppendAnimSequence, OnAppendAnimSequence) SLATE_EVENT( FOnReZeroAnimSequence, OnReZeroAnimSequence ) SLATE_ATTRIBUTE( TArray<float>, DraggableBars ) SLATE_EVENT( FOnScrubBarDrag, OnBarDrag ) SLATE_EVENT( FOnScrubBarCommit, OnBarCommit ) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "GetDivider()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDivider(float InputMinX, float InputMaxX, FVector2D WidgetSize, float SequenceLength, int32 NumFrames)"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CommitValue(float NewValue, bool bSliderClamp, bool bCommittedFromText)"
  },
  {
    "label": "CreateContextMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateContextMenu(float CurrentFrameTime, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnSequenceCroppedCalled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequenceCroppedCalled(bool bFromStart, float CurrentFrameTime)"
  },
  {
    "label": "OnSequenceAddedCalled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequenceAddedCalled(bool bBefore, int32 CurrentFrameNumber)"
  },
  {
    "label": "OnSequenceAppendedCalled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSequenceAppendedCalled(const FText & InNewGroupText, ETextCommit::Type CommitInfo, bool bBegin)"
  },
  {
    "label": "OnShowPopupOfAppendAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowPopupOfAppendAnimation(bool bBegin)"
  },
  {
    "label": "OnReZeroCalled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReZeroCalled(int32 FrameIndex)"
  }
]