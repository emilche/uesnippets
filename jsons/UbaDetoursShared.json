[
  {
    "label": "DirectoryTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DirectoryTable"
  },
  {
    "label": "MappedFileTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MappedFileTable"
  },
  {
    "label": "SuppressDetourScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SuppressDetourScope"
  },
  {
    "label": "LogScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LogScope"
  },
  {
    "label": "stat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stat"
  },
  {
    "label": "FileAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileAttributes"
  },
  {
    "label": "VariableMem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariableMem"
  },
  {
    "label": "Local_GetLongPathNameW()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaApplicationRules . h \" # include \" UbaStringBuffer . h \" # include \" UbaPlatform . h \" # include \" UbaProcessStats . h \" # include \" UbaProtocol . h \" namespace uba { class DirectoryTable ; class MappedFileTable ; # if PLATFORM_WINDOWS DWORD)",
    "insertText": "Local_GetLongPathNameW(LPCWSTR lpszShortPath, LPWSTR lpszLongPath, DWORD cchBuffer)"
  },
  {
    "label": "Rpc_WriteLog()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Rpc_WriteLog(const tchar* text, u64 textCharLength, bool printInSession, bool isError)"
  },
  {
    "label": "Rpc_WriteLogf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rpc_WriteLogf(const tchar* format, ...)"
  },
  {
    "label": "GetApplicationShortName()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "GetApplicationShortName()"
  },
  {
    "label": "FixPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixPath(StringBufferBase& out, const tchar* path)"
  },
  {
    "label": "DEBUG_LOG_PREFIX()",
    "kind": "Method",
    "detail": "Function (# if UBA_DEBUG_LOG_ENABLED # define)",
    "insertText": "DEBUG_LOG_PREFIX(Prefix, Command, ...) \\ LogScope STRING_JOIN(ls, __LINE__)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(isLogging()) WriteDebugLogWithPrefix(#Prefix, STRING_JOIN(ls, __LINE__), Command, __VA_ARGS__)"
  },
  {
    "label": "DEBUG_LOG_DETOURED()",
    "kind": "Method",
    "detail": "Function (\\ # define)",
    "insertText": "DEBUG_LOG_DETOURED(Command, ...) DEBUG_LOG_PREFIX(D, Command, __VA_ARGS__) #define DEBUG_LOG_TRUE(Command, ...) DEBUG_LOG_PREFIX(T, Command, __VA_ARGS__) #define DEBUG_LOG_PIPE(Command, ...) ts.Leave()"
  },
  {
    "label": "DEBUG_LOG()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DEBUG_LOG(...)"
  },
  {
    "label": "DEBUG_LOG_DETOURED()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DEBUG_LOG_DETOURED(Command, ...)"
  },
  {
    "label": "DEBUG_LOG_TRUE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DEBUG_LOG_TRUE(Command, ...)"
  },
  {
    "label": "DEBUG_LOG_PIPE()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DEBUG_LOG_PIPE(...) ts.Leave()"
  },
  {
    "label": "SuppressDetourScope()",
    "kind": "Method",
    "detail": "Function (# endif StringBuffer<5 1 2>& g_virtualApplication ; StringBuffer<5 1 2>& g_virtualApplicationDir ; StringBuffer<2 5 6>& g_logName ; StringBuffer<5 1 2>& g_virtualWorkingDir ; StringBuffer<1 2 8>& g_systemTemp ; StringBuffer<1 2 8>& g_systemRoot ; ProcessStats& g_stats ; KernelStats& g_kernelStats ; bool g_echoOn ; ReaderWriterLock& g_communicationLock ; MemoryBlock& g_memoryBlock ; DirectoryTable& g_directoryTable ; MappedFileTable& g_mappedFileTable ; struct SuppressDetourScope {)",
    "insertText": "SuppressDetourScope()"
  },
  {
    "label": "isLogging()",
    "kind": "Method",
    "detail": "Function (} ; thread_local u32 t_disallowDetour ; # if UBA_DEBUG_LOG_ENABLED u32 LogBufSize = 1 6* 1 0 2 4 ; FileHandle g_debugFile ; bool)",
    "insertText": "isLogging()"
  },
  {
    "label": "LogScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LogScope()"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "WriteDebugLogWithPrefix()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "WriteDebugLogWithPrefix(const char* prefix, LogScope& scope, const tchar* command, const tchar* format, ...)"
  },
  {
    "label": "WriteDebugLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDebugLog(const tchar* format, ...)"
  },
  {
    "label": "FlushDebugLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDebugLog()"
  },
  {
    "label": "CanDetour()",
    "kind": "Method",
    "detail": "Function (# endif # if UBA_DEBUG_VALIDATE bool g_validateFileAccess ; # endif bool g_allowDirectoryCache = true ; bool g_allowFileMappingDetour = true ; bool g_allowFindFileDetour = true ; bool g_allowListDirectoryHandle = true ; u32 g_rulesIndex ; ApplicationRules* g_rules ; bool g_runningRemote ; bool g_isChild ; bool g_allowKeepFilesInMemory ; bool g_allowOutputFiles ; bool g_suppressLogging ; # if PLATFORM_WINDOWS u32 ErrorSuccess = 0 ; u32 ErrorFileNotFound = ERROR_FILE_NOT_FOUND ; using FileAttributesData = WIN32_FILE_ATTRIBUTE_DATA ; # else using FileAttributesData = struct stat ; u32 ErrorSuccess = 0 ; u32 ErrorFileNotFound = ENOENT ; # endif struct FileAttributes { FileAttributesData data ; u64 fileIndex ; u32 volumeSerial ; u8 exists ; u8 useCache ; u32 lastError ; } ; bool)",
    "insertText": "CanDetour(const tchar* file)"
  },
  {
    "label": "KeepInMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "KeepInMemory(const StringView& fileName)"
  },
  {
    "label": "Shared_WriteConsole()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shared_WriteConsole(const char* chars, u32 charCount, bool isError)"
  },
  {
    "label": "Shared_WriteConsole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shared_WriteConsole(const wchar_t* chars, u32 charCount, bool isError)"
  },
  {
    "label": "Shared_GetFileAttributes()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "Shared_GetFileAttributes(FileAttributes& outAttr, const tchar* fileName, bool checkIfDir = false)"
  },
  {
    "label": "InitSharedVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSharedVariables()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (template<T> struct VariableMem { template<. . . Args> void)",
    "insertText": "Create(Args&&... args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(data) T(args...)"
  },
  {
    "label": "AlignUp()",
    "kind": "Method",
    "detail": "Function (} ; u64 data [)",
    "insertText": "AlignUp(sizeof(T), sizeof(u64)) / sizeof(u64)"
  },
  {
    "label": "VARIABLE_MEM()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "VARIABLE_MEM(type, name)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (type&)",
    "insertText": "name(type&)"
  }
]