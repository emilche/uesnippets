[
  {
    "label": "GridType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridType"
  },
  {
    "label": "CheckNan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckNan"
  },
  {
    "label": "CheckInf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckInf"
  },
  {
    "label": "CheckFinite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckFinite"
  },
  {
    "label": "CheckMagnitude",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckMagnitude"
  },
  {
    "label": "CheckRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckRange"
  },
  {
    "label": "CheckMin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckMin"
  },
  {
    "label": "CheckMax",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckMax"
  },
  {
    "label": "CheckNormGrad",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckNormGrad"
  },
  {
    "label": "CheckEikonal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckEikonal"
  },
  {
    "label": "CheckDivergence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckDivergence"
  },
  {
    "label": "Diagnose",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Diagnose"
  },
  {
    "label": "CheckValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CheckValues"
  },
  {
    "label": "CheckLevelSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckLevelSet"
  },
  {
    "label": "CheckFogVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CheckFogVolume"
  },
  {
    "label": "InactiveVoxelValues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InactiveVoxelValues"
  },
  {
    "label": "InactiveTileValues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InactiveTileValues"
  },
  {
    "label": "checkLevelSet()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_DIAGNOSTICS_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_DIAGNOSTICS_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include<openvdb / math / Math . h> # include<openvdb / math / Vec3 . h> # include<openvdb / math / Stencils . h> # include<openvdb / math / Operators . h> # include<openvdb / tree / LeafManager . h> # include<tbb / blocked_range . h> # include<tbb / parallel_reduce . h> # include<cmath> # include<set> # include<sstream> # include<string> # include<type_traits> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<class GridType> std::string)",
    "insertText": "checkLevelSet(const GridType& grid, size_t number=9)"
  },
  {
    "label": "checkFogVolume()",
    "kind": "Method",
    "detail": "Function (template<class GridType> std::string)",
    "insertText": "checkFogVolume(const GridType& grid, size_t number=6)"
  },
  {
    "label": "uniqueInactiveValues()",
    "kind": "Method",
    "detail": "Function (template<class GridType> bool)",
    "insertText": "uniqueInactiveValues(const GridType& grid, std::vector<typename GridType::ValueType>& values, size_t numValues)"
  },
  {
    "label": "CheckNan()",
    "kind": "Method",
    "detail": "Function (template<GridT,TreeIterT = GridT::ValueOnCIter> struct CheckNan { using ElementType = VecTraits<GridT::ValueType>::ElementType ; using TileIterT = TreeIterT ; using VoxelIterT = tree::IterTraits<TreeIterT::NodeT,TreeIterT::ValueIterT>::template NodeConverter<GridT::TreeType::LeafNodeType>::Type ;)",
    "insertText": "CheckNan()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const ElementType& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> std::enable_if<VecTraits<T>::IsVec,bool>::type)",
    "insertText": "operator()(const T& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const VoxelIterT &iter)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "str()"
  },
  {
    "label": "CheckRange()",
    "kind": "Method",
    "detail": "Function (} const ElementType absVal,tolVal ; } ; template<GridT,bool MinInclusive = true,bool MaxInclusive = true,TreeIterT = GridT::ValueOnCIter> struct CheckRange { using ElementType = VecTraits<GridT::ValueType>::ElementType ; using TileIterT = TreeIterT ; using VoxelIterT = tree::IterTraits<TreeIterT::NodeT,TreeIterT::ValueIterT>::template NodeConverter<GridT::TreeType::LeafNodeType>::Type ;)",
    "insertText": "CheckRange(const ElementType& _min, const ElementType& _max) : minVal(_min), maxVal(_max)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"CheckRange: Invalid range (min > max)\")"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ss ; ss<<\" outside the value)",
    "insertText": "range(MinInclusive ? \"[\" : \"]\") << minVal << \",\" << maxVal << (MaxInclusive ? \"]\" : \"[\")"
  },
  {
    "label": "CheckMin()",
    "kind": "Method",
    "detail": "Function (} const ElementType minVal,maxVal ; } ; template<GridT,TreeIterT = GridT::ValueOnCIter> struct CheckMin { using ElementType = VecTraits<GridT::ValueType>::ElementType ; using TileIterT = TreeIterT ; using VoxelIterT = tree::IterTraits<TreeIterT::NodeT,TreeIterT::ValueIterT>::template NodeConverter<GridT::TreeType::LeafNodeType>::Type ;)",
    "insertText": "CheckMin(const ElementType& _min) : minVal(_min)"
  },
  {
    "label": "CheckMax()",
    "kind": "Method",
    "detail": "Function (} const ElementType minVal ; } ; template<GridT,TreeIterT = GridT::ValueOnCIter> struct CheckMax { using ElementType = VecTraits<GridT::ValueType>::ElementType ; using TileIterT = TreeIterT ; using VoxelIterT = tree::IterTraits<TreeIterT::NodeT,TreeIterT::ValueIterT>::template NodeConverter<GridT::TreeType::LeafNodeType>::Type ;)",
    "insertText": "CheckMax(const ElementType& _max) : maxVal(_max)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} const ElementType maxVal ; } ; template<GridT,TreeIterT = GridT::ValueOnCIter,math::BiasedGradientScheme GradScheme = math::FIRST_BIAS> struct CheckNormGrad { using ValueType = GridT::ValueType ;)",
    "insertText": "static_assert(std::is_floating_point<ValueType>::value, \"openvdb::tools::CheckNormGrad requires a scalar, floating-point grid\")"
  },
  {
    "label": "CheckNormGrad()",
    "kind": "Method",
    "detail": "Function (using TileIterT = TreeIterT ; using VoxelIterT = tree::IterTraits<TreeIterT::NodeT,TreeIterT::ValueIterT>::template NodeConverter<GridT::TreeType::LeafNodeType>::Type ; using AccT = GridT::ConstAccessor ;)",
    "insertText": "CheckNormGrad(const GridT& grid, const ValueType& _min, const ValueType& _max) : acc(grid.getConstAccessor()) , invdx2(ValueType(1.0/math::Pow2(grid.voxelSize()[0]))) , minVal2(_min*_min) , maxVal2(_max*_max)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"CheckNormGrad: The transform must have uniform scale\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(_min > _max)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"CheckNormGrad: Invalid range (min > max)\")"
  },
  {
    "label": "CheckNormGrad()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "CheckNormGrad(const CheckNormGrad& other) : acc(other.acc.tree()) , invdx2(other.invdx2) , minVal2(other.minVal2) , maxVal2(other.maxVal2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const ValueType& v)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (const Coord ijk = iter .)",
    "insertText": "getCoord()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ss ; ss<<\" outside the range of NormGrad [ \"<<)",
    "insertText": "Sqrt(minVal2)<<\",\"<<math::Sqrt(maxVal2)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} AccT acc ; const ValueType invdx2,minVal2,maxVal2 ; } ; template<GridT,TreeIterT = GridT::ValueOnCIter,StencilT = math::WenoStencil<GridT>> struct CheckEikonal { using ValueType = GridT::ValueType ;)",
    "insertText": "static_assert(std::is_floating_point<ValueType>::value, \"openvdb::tools::CheckEikonal requires a scalar, floating-point grid\")"
  },
  {
    "label": "CheckEikonal()",
    "kind": "Method",
    "detail": "Function (using TileIterT = TreeIterT ; using VoxelIterT = tree::IterTraits<TreeIterT::NodeT,TreeIterT::ValueIterT>::template NodeConverter<GridT::TreeType::LeafNodeType>::Type ;)",
    "insertText": "CheckEikonal(const GridT& grid, const ValueType& _min, const ValueType& _max) : stencil(grid), minVal(_min), maxVal(_max)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"CheckEikonal: The transform must have uniform scale\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(minVal > maxVal)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"CheckEikonal: Invalid range (min > max)\")"
  },
  {
    "label": "CheckEikonal()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "CheckEikonal(const CheckEikonal& other) : stencil(other.stencil.grid()), minVal(other.minVal), maxVal(other.maxVal)"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (stencil .)",
    "insertText": "moveTo(iter)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} StencilT stencil ; const ValueType minVal,maxVal ; } ; template<GridT,TreeIterT = GridT::ValueOnCIter,math::DScheme DiffScheme = math::CD_2ND> struct CheckDivergence { using ValueType = GridT::ValueType ; using ElementType = VecTraits<ValueType>::ElementType ;)",
    "insertText": "static_assert(std::is_floating_point<ElementType>::value, \"openvdb::tools::CheckDivergence requires a floating-point vector grid\")"
  },
  {
    "label": "CheckDivergence()",
    "kind": "Method",
    "detail": "Function (using TileIterT = TreeIterT ; using VoxelIterT = tree::IterTraits<TreeIterT::NodeT,TreeIterT::ValueIterT>::template NodeConverter<GridT::TreeType::LeafNodeType>::Type ; using AccT = GridT::ConstAccessor ;)",
    "insertText": "CheckDivergence(const GridT& grid, const ValueType& _min, const ValueType& _max) : acc(grid.getConstAccessor()) , invdx(ValueType(1.0/grid.voxelSize()[0])) , minVal(_min) , maxVal(_max)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"CheckDivergence: The transform must have uniform scale\")"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"CheckDivergence: Invalid range (min > max)\")"
  },
  {
    "label": "Diagnose()",
    "kind": "Method",
    "detail": "Function (} AccT acc ; const ValueType invdx,minVal,maxVal ; } ; template<GridT> class Diagnose { public : using MaskType = GridT::template ValueConverter<bool>::Type ;)",
    "insertText": "Diagnose(const GridT& grid) : mGrid(&grid), mMask(new MaskType()), mCount(0)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (mMask ->)",
    "insertText": "setTransform(grid.transformPtr()->copy())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} template<CheckT> std::string)",
    "insertText": "check(const CheckT& check, bool updateMask = false, bool checkVoxels = true, bool checkTiles = true, bool checkBackground = true)"
  },
  {
    "label": "updateMask()",
    "kind": "Method",
    "detail": "Function (MaskType::TreeType* mask =)",
    "insertText": "updateMask(mMask->tree())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ss ;)",
    "insertText": "if(checkBackground) ss << cc.checkBackground()"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (} MaskType::ConstPtr)",
    "insertText": "mask()"
  },
  {
    "label": "failureCount()",
    "kind": "Method",
    "detail": "Function (} Index64)",
    "insertText": "failureCount()"
  },
  {
    "label": "MaskType()",
    "kind": "Method",
    "detail": "Function (mMask = new)",
    "insertText": "MaskType()"
  },
  {
    "label": "Diagnose()",
    "kind": "Method",
    "detail": "Function (mCount = 0 ; } private :)",
    "insertText": "Diagnose(const Diagnose&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Diagnose&)",
    "insertText": "operator(const Diagnose&)"
  },
  {
    "label": "CheckValues()",
    "kind": "Method",
    "detail": "Function (const GridT* mGrid ; MaskType::Ptr mMask ; Index64 mCount ; template<CheckT> struct CheckValues { using MaskT = MaskType::TreeType ; using LeafT = GridT::TreeType::LeafNodeType ; using LeafManagerT = tree::LeafManager<const GridT::TreeType> ; const bool mOwnsMask ; MaskT* mMask ; const GridT* mGrid ; const CheckT mCheck ; Index64 mCount ;)",
    "insertText": "CheckValues(MaskT* mask, const GridT* grid, const CheckT& check) : mOwnsMask(false) , mMask(mask) , mGrid(grid) , mCheck(check) , mCount(0)"
  },
  {
    "label": "CheckValues()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CheckValues(CheckValues& other, tbb::split) : mOwnsMask(true) , mMask(other.mMask ? new MaskT() : nullptr) , mGrid(other.mGrid) , mCheck(other.mCheck) , mCount(0)"
  },
  {
    "label": "CheckValues()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CheckValues()"
  },
  {
    "label": "checkBackground()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "checkBackground()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ss ;)",
    "insertText": "if(mCheck(mGrid->background()))"
  },
  {
    "label": "checkTiles()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "checkTiles()"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ss ; const Index64 n = mCount ; CheckT::TileIterT)",
    "insertText": "i(mGrid->tree())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + mCount ;)",
    "insertText": "if(mMask) mMask->fill(i.getBoundingBox(), true, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(const Index64 m = mCount - n)"
  },
  {
    "label": "tile()",
    "kind": "Method",
    "detail": "Function (ss<<m<<\")",
    "insertText": "tile(m==1 ? \" is \" : \"s are \") + mCheck.str()"
  },
  {
    "label": "checkVoxels()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "checkVoxels()"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ss ; LeafManagerT)",
    "insertText": "leafs(mGrid->tree())"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (const Index64 n = mCount ;)",
    "insertText": "parallel_reduce(leafs.leafRange(), *this)"
  },
  {
    "label": "voxel()",
    "kind": "Method",
    "detail": "Function (ss<<m<<\")",
    "insertText": "voxel(m==1 ? \" is \" : \"s are \") + mCheck.str()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const typename LeafManagerT::LeafRange& r)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using VoxelIterT = CheckT::VoxelIterT ;)",
    "insertText": "if(mMask)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MaskT::LeafNodeType* maskLeaf = nullptr ;)",
    "insertText": "for(VoxelIterT j = tree::IterTraits<LeafT, VoxelIterT>::begin(*i); j; ++j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + mCount ;)",
    "insertText": "if(maskLeaf == nullptr) maskLeaf = mMask->touchLeaf(j.getCoord())"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (maskLeaf ->)",
    "insertText": "setValueOn(j.pos(), true)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "for(typename LeafManagerT::LeafRange::Iterator i=r.begin(); i; ++i)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "join(const CheckValues& other)"
  },
  {
    "label": "CheckLevelSet()",
    "kind": "Method",
    "detail": "Function (mCount + = other . mCount ; } } ; } ; template<class GridType> class CheckLevelSet { public : using ValueType = GridType::ValueType ; using MaskType = GridType::template ValueConverter<bool>::Type ;)",
    "insertText": "CheckLevelSet(const GridType& grid) : mDiagnose(grid)"
  },
  {
    "label": "valueCount()",
    "kind": "Method",
    "detail": "Function (} Index64)",
    "insertText": "valueCount()"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (} const GridType&)",
    "insertText": "grid()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "checkValueType()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "checkValueType()"
  },
  {
    "label": "checkClassType()",
    "kind": "Method",
    "detail": "Function (const bool test = std::is_floating_point<ValueType>::value ; return test ? \" \" : \" Value type is not floating point \\ n \" ; } std::string)",
    "insertText": "checkClassType()"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (const bool test = mDiagnose .)",
    "insertText": "grid().getGridClass()"
  },
  {
    "label": "checkBackground()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "checkBackground(Real halfWidth = LEVEL_SET_HALF_WIDTH)"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (const Real w = mDiagnose .)",
    "insertText": "grid().background() / mDiagnose.grid().voxelSize()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ss ; ss<<\" The background)",
    "insertText": "value(\"<< mDiagnose.grid().background()<<\")"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (const bool test = mDiagnose .)",
    "insertText": "grid().tree().hasActiveTiles()"
  },
  {
    "label": "checkRange()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "checkRange(bool updateMask = false)"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (const ValueType& background = mDiagnose .)",
    "insertText": "grid().background()"
  },
  {
    "label": "checkInactiveValues()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "checkInactiveValues(bool updateMask = false)"
  },
  {
    "label": "checkEikonal()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "checkEikonal(bool updateMask = false, ValueType minV = 0.5, ValueType maxV = 1.5)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "check(size_t n=9, bool updateMask = false)"
  },
  {
    "label": "checkLevelSet()",
    "kind": "Method",
    "detail": "Function (Diagnose<GridType> mDiagnose ; } ; template<class GridType> std::string)",
    "insertText": "checkLevelSet(const GridType& grid, size_t n)"
  },
  {
    "label": "CheckFogVolume()",
    "kind": "Method",
    "detail": "Function (} template<class GridType> class CheckFogVolume { public : using ValueType = GridType::ValueType ; using MaskType = GridType::template ValueConverter<bool>::Type ;)",
    "insertText": "CheckFogVolume(const GridType& grid) : mDiagnose(grid)"
  },
  {
    "label": "checkFinite()",
    "kind": "Method",
    "detail": "Function (} return \" \" ; } std::string)",
    "insertText": "checkFinite(bool updateMask = false)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "check(size_t n=6, bool updateMask = false)"
  },
  {
    "label": "checkFogVolume()",
    "kind": "Method",
    "detail": "Function (Diagnose<GridType> mDiagnose ; } ; template<class GridType> std::string)",
    "insertText": "checkFogVolume(const GridType& grid, size_t n)"
  },
  {
    "label": "InactiveVoxelValues()",
    "kind": "Method",
    "detail": "Function (} namespace diagnostics_internal { template<TreeType> class InactiveVoxelValues { public : using LeafArray = tree::LeafManager<TreeType> ; using ValueType = TreeType::ValueType ; using SetType = std::set<ValueType> ;)",
    "insertText": "InactiveVoxelValues(LeafArray&, size_t numValues)"
  },
  {
    "label": "runParallel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runParallel()"
  },
  {
    "label": "runSerial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runSerial()"
  },
  {
    "label": "getInactiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getInactiveValues(SetType&)"
  },
  {
    "label": "InactiveVoxelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InactiveVoxelValues(const InactiveVoxelValues<TreeType>&, tbb::split)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>&)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "join(const InactiveVoxelValues<TreeType>&)"
  },
  {
    "label": "InactiveVoxelValues()",
    "kind": "Method",
    "detail": "Function (private : LeafArray& mLeafArray ; SetType mInactiveValues ; size_t mNumValues ; } ; template<TreeType> InactiveVoxelValues<TreeType)",
    "insertText": "InactiveVoxelValues(LeafArray& leafs, size_t numValues) : mLeafArray(leafs) , mInactiveValues() , mNumValues(numValues)"
  },
  {
    "label": "InactiveVoxelValues()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> InactiveVoxelValues<TreeType)",
    "insertText": "InactiveVoxelValues(const InactiveVoxelValues<TreeType>& rhs, tbb::split) : mLeafArray(rhs.mLeafArray) , mInactiveValues() , mNumValues(rhs.mNumValues)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(mLeafArray.getRange(), *this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void InactiveVoxelValues<TreeType)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TreeType::LeafNodeType::ValueOffCIter iter ;)",
    "insertText": "for(size_t n = range.begin(); n < range.end() && !tbb::task::self().is_cancelled(); ++n)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (mInactiveValues .)",
    "insertText": "insert(iter.getValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mInactiveValues.size() > mNumValues)"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "self().cancel_group_execution()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } } template<TreeType> void InactiveVoxelValues<TreeType)",
    "insertText": "join(const InactiveVoxelValues<TreeType>& rhs)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (mInactiveValues .)",
    "insertText": "insert(rhs.mInactiveValues.begin(), rhs.mInactiveValues.end())"
  },
  {
    "label": "getInactiveValues()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void InactiveVoxelValues<TreeType)",
    "insertText": "getInactiveValues(SetType& values)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "insert(mInactiveValues.begin(), mInactiveValues.end())"
  },
  {
    "label": "InactiveTileValues()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> class InactiveTileValues { public : using IterRange = tree::IteratorRange<TreeType::ValueOffCIter> ; using ValueType = TreeType::ValueType ; using SetType = std::set<ValueType> ;)",
    "insertText": "InactiveTileValues(size_t numValues)"
  },
  {
    "label": "runParallel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runParallel(IterRange&)"
  },
  {
    "label": "runSerial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "runSerial(IterRange&)"
  },
  {
    "label": "InactiveTileValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InactiveTileValues(const InactiveTileValues<TreeType>&, tbb::split)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(IterRange&)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "join(const InactiveTileValues<TreeType>&)"
  },
  {
    "label": "InactiveTileValues()",
    "kind": "Method",
    "detail": "Function (private : SetType mInactiveValues ; size_t mNumValues ; } ; template<TreeType> InactiveTileValues<TreeType)",
    "insertText": "InactiveTileValues(size_t numValues) : mInactiveValues() , mNumValues(numValues)"
  },
  {
    "label": "InactiveTileValues()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> InactiveTileValues<TreeType)",
    "insertText": "InactiveTileValues(const InactiveTileValues<TreeType>& rhs, tbb::split) : mInactiveValues() , mNumValues(rhs.mNumValues)"
  },
  {
    "label": "runParallel()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void InactiveTileValues<TreeType)",
    "insertText": "runParallel(IterRange& range)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(range, *this)"
  },
  {
    "label": "runSerial()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void InactiveTileValues<TreeType)",
    "insertText": "runSerial(IterRange& range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void InactiveTileValues<TreeType)",
    "insertText": "operator()(IterRange& range)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (TreeType::ValueOffCIter iter = range .)",
    "insertText": "iterator()"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } } template<TreeType> void InactiveTileValues<TreeType)",
    "insertText": "join(const InactiveTileValues<TreeType>& rhs)"
  },
  {
    "label": "TreeType()",
    "kind": "Method",
    "detail": "Function (using TreeType = GridType::TreeType ; using ValueType = GridType::ValueType ; using SetType = std::set<ValueType> ; SetType uniqueValues ; { TreeType& tree = const_cast<)",
    "insertText": "TreeType(grid.tree())"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (tree::LeafManager<TreeType>)",
    "insertText": "leafs(tree)"
  },
  {
    "label": "voxelOp()",
    "kind": "Method",
    "detail": "Function (diagnostics_internal::InactiveVoxelValues<TreeType>)",
    "insertText": "voxelOp(leafs, numValues)"
  },
  {
    "label": "getInactiveValues()",
    "kind": "Method",
    "detail": "Function (voxelOp .)",
    "insertText": "getInactiveValues(uniqueValues)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(uniqueValues.size() <= numValues)"
  },
  {
    "label": "iter()",
    "kind": "Method",
    "detail": "Function (TreeType::ValueOffCIter)",
    "insertText": "iter(grid.tree())"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "setMaxDepth(TreeType::ValueAllIter::LEAF_DEPTH - 1)"
  },
  {
    "label": "tileOp()",
    "kind": "Method",
    "detail": "Function (diagnostics_internal::InactiveTileValues<TreeType>)",
    "insertText": "tileOp(numValues)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (tree::IteratorRange<TreeType::ValueOffCIter>)",
    "insertText": "range(iter)"
  },
  {
    "label": "runParallel()",
    "kind": "Method",
    "detail": "Function (tileOp .)",
    "insertText": "runParallel(range)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "reserve(uniqueValues.size())"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (SetType::iterator it = uniqueValues .)",
    "insertText": "begin()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (values .)",
    "insertText": "push_back(*it)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} return values .)",
    "insertText": "size()"
  }
]