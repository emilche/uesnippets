[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IViewportInteractableInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IViewportInteractableInterface"
  },
  {
    "label": "UViewportInteractionAssetContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractionAssetContainer"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "UViewportTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportTransformer"
  },
  {
    "label": "ABaseTransformGizmo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABaseTransformGizmo"
  },
  {
    "label": "UViewportDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportDragOperation"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "EColors",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EColors"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UMouseCursorInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMouseCursorInteractor"
  },
  {
    "label": "FViewportInteractionInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportInteractionInputProcessor"
  },
  {
    "label": "NoAction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" InputCoreTypes . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / WeakObjectPtr . h \" # include \" GameFramework / Actor . h \" # include \" EditorViewportClient . h \" # include \" Misc / App . h \" # include \" ViewportInteractionTypes . h \" # include \" EditorWorldExtension . h \" # include \" VIBaseTransformGizmo . h \" # include \" LevelEditorViewport . h \" # include \" ViewportTransformable . h \" # include \" GenericPlatform / ICursor . h \" # include \" ViewportWorldInteraction . generated . h \" namespace ViewportWorldActionTypes { const FName)",
    "insertText": "NoAction(\"NoAction\")"
  },
  {
    "label": "WorldMovement()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "WorldMovement(\"WorldMovement\")"
  },
  {
    "label": "SelectAndMove()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "SelectAndMove(\"SelectAndMove\")"
  },
  {
    "label": "SelectAndMove_FullyPressed()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "SelectAndMove_FullyPressed(\"SelectAndMove_FullyPressed\")"
  },
  {
    "label": "Undo()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Undo(\"Undo\")"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Redo(\"Redo\")"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "Delete(\"Delete\")"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} enum class EGizmoHandleTypes : uint8 ; class IViewportInteractableInterface ; class UViewportInteractionAssetContainer ; class UViewportInteractor ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (VR = 0,Legacy = 1 } ;)",
    "insertText": "UCLASS(BlueprintType, Transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UViewportWorldInteraction()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "InitColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitColors()"
  },
  {
    "label": "AddMouseCursorInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMouseCursorInteractor()"
  },
  {
    "label": "ReleaseMouseCursorInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMouseCursorInteractor()"
  },
  {
    "label": "DECLARE_EVENT_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_ThreeParams(UViewportWorldInteraction, FOnVIHoverUpdate, class UViewportInteractor* , FVector& , bool&)"
  },
  {
    "label": "OnViewportInteractionHoverUpdate()",
    "kind": "Method",
    "detail": "Function (FOnVIHoverUpdate&)",
    "insertText": "OnViewportInteractionHoverUpdate()"
  },
  {
    "label": "OnPreviewInputAction()",
    "kind": "Method",
    "detail": "Function (FOnPreviewInputAction&)",
    "insertText": "OnPreviewInputAction()"
  },
  {
    "label": "OnViewportInteractionInputAction()",
    "kind": "Method",
    "detail": "Function (FOnVIActionHandle&)",
    "insertText": "OnViewportInteractionInputAction()"
  },
  {
    "label": "OnViewportInteractionInputUnhandled()",
    "kind": "Method",
    "detail": "Function (FOnViewportInteractionInputUnhandled&)",
    "insertText": "OnViewportInteractionInputUnhandled()"
  },
  {
    "label": "OnHandleKeyInput()",
    "kind": "Method",
    "detail": "Function (FOnHandleInputKey&)",
    "insertText": "OnHandleKeyInput()"
  },
  {
    "label": "OnHandleAxisInput()",
    "kind": "Method",
    "detail": "Function (FOnHandleInputAxis&)",
    "insertText": "OnHandleAxisInput()"
  },
  {
    "label": "OnStartDragging()",
    "kind": "Method",
    "detail": "Function (FOnStartDragging&)",
    "insertText": "OnStartDragging()"
  },
  {
    "label": "OnStopDragging()",
    "kind": "Method",
    "detail": "Function (FOnStopDragging&)",
    "insertText": "OnStopDragging()"
  },
  {
    "label": "OnFinishedMovingTransformables()",
    "kind": "Method",
    "detail": "Function (FOnFinishedMovingTransformables&)",
    "insertText": "OnFinishedMovingTransformables()"
  },
  {
    "label": "OnPreWorldInteractionTick()",
    "kind": "Method",
    "detail": "Function (FOnViewportWorldInteractionTick&)",
    "insertText": "OnPreWorldInteractionTick()"
  },
  {
    "label": "GetTransformer()",
    "kind": "Method",
    "detail": "Function (const UViewportTransformer*)",
    "insertText": "GetTransformer()"
  },
  {
    "label": "SetDefaultOptionalViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultOptionalViewportClient(const TSharedPtr<class FEditorViewportClient>& InEditorViewportClient)"
  },
  {
    "label": "PairInteractors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PairInteractors(UViewportInteractor* FirstInteractor, UViewportInteractor* SecondInteractor)"
  },
  {
    "label": "GetActorsToExcludeFromHitTest()",
    "kind": "Method",
    "detail": "Function (const TArray<TWeakObjectPtr<AActor>>&)",
    "insertText": "GetActorsToExcludeFromHitTest()"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FEditorViewportClient* InViewportClient, FViewport* Viewport, int32 ControllerId, FKey Key, float Delta, float DeltaTime)"
  },
  {
    "label": "PreprocessedInputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreprocessedInputKey(const FKey Key, const EInputEvent Event)"
  },
  {
    "label": "PreprocessedInputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreprocessedInputAxis(const int32 ControllerId, const FKey Key, const float Delta, const double DeltaTime)"
  },
  {
    "label": "HaveHeadTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HaveHeadTransform()"
  },
  {
    "label": "SetRoomTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRoomTransform(const FTransform& NewRoomTransform)"
  },
  {
    "label": "GetDefaultOptionalViewportClient()",
    "kind": "Method",
    "detail": "Function (FEditorViewportClient*)",
    "insertText": "GetDefaultOptionalViewportClient()"
  },
  {
    "label": "GetMotionControllerID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMotionControllerID()"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redo()"
  },
  {
    "label": "DeleteSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedObjects()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy()"
  },
  {
    "label": "Paste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Paste()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Duplicate()"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deselect()"
  },
  {
    "label": "StopDragging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDragging(class UViewportInteractor* Interactor)"
  },
  {
    "label": "StartDragging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDragging(UViewportInteractor* Interactor, UActorComponent* ClickedTransformGizmoComponent, const FVector& HitLocation, const bool bIsPlacingNewObjects, const bool bAllowInterpolationWhenPlacing, const bool bShouldUseLaserImpactDrag, const bool bStartTransaction, const bool bWithGrabberSphere)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UViewportWorldInteraction, FOnWorldScaleChanged, const float)"
  },
  {
    "label": "OnWorldScaleChanged()",
    "kind": "Method",
    "detail": "Function (FOnWorldScaleChanged&)",
    "insertText": "OnWorldScaleChanged()"
  },
  {
    "label": "GetTransformGizmoCoordinateSpace()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetTransformGizmoCoordinateSpace()"
  },
  {
    "label": "GetMaxScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxScale()"
  },
  {
    "label": "GetMinScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinScale()"
  },
  {
    "label": "SkipInteractiveWorldMovementThisFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SkipInteractiveWorldMovementThisFrame()"
  },
  {
    "label": "IsInteractableComponent()",
    "kind": "Method",
    "detail": "Function (bSkipInteractiveWorldMovementThisFrame = true ; } bool)",
    "insertText": "IsInteractableComponent(const UActorComponent* Component)"
  },
  {
    "label": "SetTransformGizmoVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformGizmoVisible(const bool bShouldBeVisible)"
  },
  {
    "label": "ShouldTransformGizmoBeVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldTransformGizmoBeVisible()"
  },
  {
    "label": "IsTransformGizmoVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransformGizmoVisible()"
  },
  {
    "label": "SetTransformGizmoScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformGizmoScale(const float NewScale)"
  },
  {
    "label": "GetTransformGizmoScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTransformGizmoScale()"
  },
  {
    "label": "SetDraggedSinceLastSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDraggedSinceLastSelection(const bool bNewDraggedSinceLastSelection)"
  },
  {
    "label": "SetLastDragGizmoStartTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastDragGizmoStartTransform(const FTransform NewLastDragGizmoStartTransform)"
  },
  {
    "label": "ApplyVelocityDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityDamping(FVector& Velocity, const bool bVelocitySensitive)"
  },
  {
    "label": "GetCurrentGizmoType()",
    "kind": "Method",
    "detail": "Function (EGizmoHandleTypes)",
    "insertText": "GetCurrentGizmoType()"
  },
  {
    "label": "SetGizmoHandleType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGizmoHandleType(const EGizmoHandleTypes InGizmoHandleType)"
  },
  {
    "label": "SetTransformGizmoClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformGizmoClass(const TSubclassOf<ABaseTransformGizmo>& NewTransformGizmoClass)"
  },
  {
    "label": "SetDraggedInteractable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDraggedInteractable(IViewportInteractableInterface* InDraggedInteractable, UViewportInteractor* Interactor)"
  },
  {
    "label": "IsOtherInteractorHoveringOverComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOtherInteractorHoveringOverComponent(UViewportInteractor* Interactor, UActorComponent* Component)"
  },
  {
    "label": "CycleTransformGizmoCoordinateSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleTransformGizmoCoordinateSpace()"
  },
  {
    "label": "FindPlacementPointUnderLaser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPlacementPointUnderLaser(UViewportInteractor* Interactor, FVector& OutHitLocation)"
  },
  {
    "label": "GetTrackingTransaction()",
    "kind": "Method",
    "detail": "Function (FTrackingTransaction&)",
    "insertText": "GetTrackingTransaction()"
  },
  {
    "label": "SetUseInputPreprocessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseInputPreprocessor(bool bInUseInputPreprocessor)"
  },
  {
    "label": "GetTransformables()",
    "kind": "Method",
    "detail": "Function (TArray<TUniquePtr<FViewportTransformable>>&)",
    "insertText": "GetTransformables()"
  },
  {
    "label": "AreAligningToActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAligningToActors()"
  },
  {
    "label": "HasCandidatesSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCandidatesSelected()"
  },
  {
    "label": "SetSelectionAsCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionAsCandidates()"
  },
  {
    "label": "GetCurrentDeltaTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentDeltaTime()"
  },
  {
    "label": "ShouldSuppressExistingCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSuppressExistingCursor()"
  },
  {
    "label": "SetShouldSuppressExistingCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldSuppressExistingCursor(const bool bInShouldSuppressCursor)"
  },
  {
    "label": "ShouldForceCursor()",
    "kind": "Method",
    "detail": "Function (bShouldSuppressCursor = bInShouldSuppressCursor ; } ; bool)",
    "insertText": "ShouldForceCursor()"
  },
  {
    "label": "SetForceCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceCursor(const bool bInShouldForceCursor)"
  },
  {
    "label": "GetAssetContainer()",
    "kind": "Method",
    "detail": "Function (const UViewportInteractionAssetContainer&)",
    "insertText": "GetAssetContainer()"
  },
  {
    "label": "LoadAssetContainer()",
    "kind": "Method",
    "detail": "Function (const UViewportInteractionAssetContainer*)",
    "insertText": "LoadAssetContainer()"
  },
  {
    "label": "PlaySound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySound(USoundBase* SoundBase, const FVector& InWorldLocation, const float InVolume = 1.0f)"
  },
  {
    "label": "SetInVR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInVR(const bool bInVR)"
  },
  {
    "label": "IsInVR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInVR()"
  },
  {
    "label": "SnapLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "SnapLocation(const bool bLocalSpaceSnapping, const FVector& DesiredGizmoLocation, const FTransform &GizmoStartTransform, const FVector SnapGridBase, const bool bShouldConstrainMovement, const FVector AlignAxes)"
  },
  {
    "label": "UseLegacyInteractions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseLegacyInteractions()"
  },
  {
    "label": "UseVWInteractions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseVWInteractions()"
  },
  {
    "label": "TransitionWorld()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "TransitionWorld(UWorld* NewWorld, EEditorWorldExtensionTransitionState TransitionState)"
  },
  {
    "label": "EnteredSimulateInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnteredSimulateInEditor()"
  },
  {
    "label": "LeftSimulateInEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeftSimulateInEditor(UWorld* SimulateWorld)"
  },
  {
    "label": "OnEditorClosed()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnEditorClosed()"
  },
  {
    "label": "HoverTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HoverTick(const float DeltaTime)"
  },
  {
    "label": "InteractionTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InteractionTick(const float DeltaTime)"
  },
  {
    "label": "UpdateDragging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDragging(const float DeltaTime, bool& bIsFirstDragUpdate, UViewportInteractor* Interactor, const EViewportInteractionDraggingMode DraggingMode, class UViewportDragOperation* DragOperation, const bool bWithTwoHands, const TOptional<FTransformGizmoHandlePlacement> OptionalHandlePlacement, const FVector& DragDelta, const FVector& OtherHandDragDelta, const FVector& DraggedTo, const FVector& OtherHandDraggedTo, const FVector& DragDeltaFromStart, const FVector& OtherHandDragDeltaFromStart, const FVector& LaserPointerStart, const FVector& LaserPointerDirection, const float LaserPointerMaxLength, const bool bIsLaserPointerValid, const FTransform& GizmoStartTransform, FTransform& GizmoLastTransform, FTransform& GizmoTargetTransform, FTransform& GizmoUnsnappedTargetTransform, const FTransform& GizmoInterpolationSnapshotTransform, const FBox& GizmoStartLocalBounds, const USceneComponent* const DraggingTransformGizmoComponent, FVector& GizmoSpaceFirstDragUpdateOffsetAlongAxis, FVector& DragDeltaFromStartOffset, ELockedWorldDragMode& LockedWorldDragMode, float& GizmoScaleSinceDragStarted, float& GizmoRotationRadiansSinceDragStarted, bool& bIsDrivingVelocityOfSimulatedTransformables, FVector& OutUnsnappedDraggedTo)"
  },
  {
    "label": "ComputeConstrainedDragDeltaFromStart()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeConstrainedDragDeltaFromStart(const bool bIsFirstDragUpdate, const bool bOnPlane, const TOptional<FTransformGizmoHandlePlacement> OptionalHandlePlacement, const FVector& DragDeltaFromStart, const FVector& LaserPointerStart, const FVector& LaserPointerDirection, const bool bIsLaserPointerValid, const FTransform& GizmoStartTransform, const float LaserPointerMaxLength, FVector& GizmoSpaceFirstDragUpdateOffsetAlongAxis, FVector& DragDeltaFromStartOffset, FVector& OutClosestPointOnLaser)"
  },
  {
    "label": "FinishedMovingTransformables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishedMovingTransformables()"
  },
  {
    "label": "IsSmoothSnappingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSmoothSnappingEnabled()"
  },
  {
    "label": "GetTimeSinceEntered()",
    "kind": "Method",
    "detail": "Function (FTimespan)",
    "insertText": "GetTimeSinceEntered()"
  },
  {
    "label": "PollInputIfNeeded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PollInputIfNeeded()"
  },
  {
    "label": "RefreshTransformGizmo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTransformGizmo(const bool bNewObjectsSelected)"
  },
  {
    "label": "SpawnTransformGizmoIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnTransformGizmoIfNeeded()"
  },
  {
    "label": "GetOtherInteractorIntertiaContribute()",
    "kind": "Method",
    "detail": "Function (UViewportInteractor*)",
    "insertText": "GetOtherInteractorIntertiaContribute(UViewportInteractor* Interactor)"
  },
  {
    "label": "DestroyActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyActors()"
  },
  {
    "label": "GetSnapGridMID()",
    "kind": "Method",
    "detail": "Function (class UMaterialInstanceDynamic*)",
    "insertText": "GetSnapGridMID()"
  },
  {
    "label": "SpawnGridMeshActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnGridMeshActor()"
  },
  {
    "label": "CalculateAverageLocationOfTransformables()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CalculateAverageLocationOfTransformables()"
  },
  {
    "label": "FindTransformGizmoAlignPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FindTransformGizmoAlignPoint(const FTransform& GizmoStartTransform, const FTransform& DesiredGizmoTransform, const bool bShouldConstrainMovement, FVector ConstraintAxes)"
  },
  {
    "label": "DrawBoxBrackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBoxBrackets(const FBox InActor, const FTransform LocalToWorld, const FLinearColor BracketColor)"
  },
  {
    "label": "CompensateRoomTransformForWorldScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompensateRoomTransformForWorldScale(FTransform& InOutRoomTransform, const float InNewWorldToMetersScale, const FVector& InRoomPivotLocation)"
  },
  {
    "label": "HasTransformableWithVelocityInSimulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTransformableWithVelocityInSimulate()"
  },
  {
    "label": "GetModeTools()",
    "kind": "Method",
    "detail": "Function (class FEditorModeTools&)",
    "insertText": "GetModeTools()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (public : enum EColors { DefaultColor,Forward,Right,Up,GizmoHover,GizmoDragging,TotalCount } ; FLinearColor)",
    "insertText": "GetColor(const EColors Color, const float Multiplier = 1.f)"
  }
]