[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IViewportInteractableInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IViewportInteractableInterface"
  },
  {
    "label": "UViewportInteractionAssetContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractionAssetContainer"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "FViewportActionKeyInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportActionKeyInput"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "UViewportTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportTransformer"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "ABaseTransformGizmo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABaseTransformGizmo"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "UViewportDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportDragOperation"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "FEditorModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorModeTools"
  },
  {
    "label": "EColors",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EColors"
  },
  {
    "label": "UViewportInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportInteractor"
  },
  {
    "label": "UViewportTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportTransformer"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "ABaseTransformGizmo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABaseTransformGizmo"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UMaterialInstanceDynamic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInstanceDynamic"
  },
  {
    "label": "IViewportInteractableInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IViewportInteractableInterface"
  },
  {
    "label": "UMouseCursorInteractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMouseCursorInteractor"
  },
  {
    "label": "FViewportInteractionInputProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportInteractionInputProcessor"
  },
  {
    "label": "NoAction()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "NoAction( \"NoAction\" )"
  },
  {
    "label": "WorldMovement()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "WorldMovement( \"WorldMovement\" )"
  },
  {
    "label": "SelectAndMove()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "SelectAndMove( \"SelectAndMove\" )"
  },
  {
    "label": "SelectAndMove_FullyPressed()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "SelectAndMove_FullyPressed( \"SelectAndMove_FullyPressed\" )"
  },
  {
    "label": "Undo()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Undo( \"Undo\" )"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Redo( \"Redo\" )"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Delete( \"Delete\" )"
  },
  {
    "label": "UViewportWorldInteraction()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "UViewportWorldInteraction()"
  },
  {
    "label": "InitColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitColors()"
  },
  {
    "label": "AddInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInteractor( UViewportInteractor* Interactor )"
  },
  {
    "label": "RemoveInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInteractor( UViewportInteractor* Interactor )"
  },
  {
    "label": "AddMouseCursorInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMouseCursorInteractor()"
  },
  {
    "label": "ReleaseMouseCursorInteractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseMouseCursorInteractor()"
  },
  {
    "label": "moving()",
    "kind": "Method",
    "detail": "Function (stop)",
    "insertText": "moving(after a drag, and all inertial effects or snapping interpolation has completed */\n\tDECLARE_EVENT( UViewportWorldInteraction, FOnFinishedMovingTransformables )"
  },
  {
    "label": "SetTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformer( class UViewportTransformer* NewTransformer )"
  },
  {
    "label": "SetTransformables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformables( TArray< TUniquePtr< FViewportTransformable > >&& NewTransformables, const bool bNewObjectsSelected )"
  },
  {
    "label": "SetDefaultOptionalViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultOptionalViewportClient( const TSharedPtr<class FEditorViewportClient>& InEditorViewportClient )"
  },
  {
    "label": "PairInteractors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PairInteractors( UViewportInteractor* FirstInteractor, UViewportInteractor* SecondInteractor )"
  },
  {
    "label": "AddActorToExcludeFromHitTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActorToExcludeFromHitTests( AActor* ActorToExcludeFromHitTests )"
  },
  {
    "label": "PreprocessedInputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreprocessedInputKey( const FKey Key, const EInputEvent Event )"
  },
  {
    "label": "PreprocessedInputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreprocessedInputAxis( const int32 ControllerId, const FKey Key, const float Delta, const double DeltaTime )"
  },
  {
    "label": "SetHeadTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeadTransform( const FTransform& NewHeadTransform )"
  },
  {
    "label": "SetRoomTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRoomTransform( const FTransform& NewRoomTransform )"
  },
  {
    "label": "SetRoomTransformForNextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRoomTransformForNextFrame(const FTransform& NewRoomTransform)"
  },
  {
    "label": "Undo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Undo()"
  },
  {
    "label": "Redo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Redo()"
  },
  {
    "label": "DeleteSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedObjects()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy()"
  },
  {
    "label": "Paste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Paste()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Duplicate()"
  },
  {
    "label": "Deselect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deselect()"
  },
  {
    "label": "StopDragging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDragging( class UViewportInteractor* Interactor )"
  },
  {
    "label": "StartDragging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDragging( UViewportInteractor* Interactor, UActorComponent* ClickedTransformGizmoComponent, const FVector& HitLocation, const bool bIsPlacingNewObjects, const bool bAllowInterpolationWhenPlacing, const bool bShouldUseLaserImpactDrag, const bool bStartTransaction, const bool bWithGrabberSphere )"
  },
  {
    "label": "SetTransformGizmoCoordinateSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformGizmoCoordinateSpace( const ECoordSystem NewCoordSystem )"
  },
  {
    "label": "GetMaxScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxScale()"
  },
  {
    "label": "GetMinScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinScale()"
  },
  {
    "label": "SetWorldToMetersScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorldToMetersScale( const float NewWorldToMetersScale, const bool bCompensateRoomWorldScale = false )"
  },
  {
    "label": "SetTransformGizmoVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformGizmoVisible( const bool bShouldBeVisible )"
  },
  {
    "label": "SetTransformGizmoScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformGizmoScale( const float NewScale )"
  },
  {
    "label": "SetDraggedSinceLastSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDraggedSinceLastSelection( const bool bNewDraggedSinceLastSelection )"
  },
  {
    "label": "SetLastDragGizmoStartTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastDragGizmoStartTransform( const FTransform NewLastDragGizmoStartTransform )"
  },
  {
    "label": "ApplyVelocityDamping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyVelocityDamping( FVector& Velocity, const bool bVelocitySensitive )"
  },
  {
    "label": "SetGizmoHandleType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGizmoHandleType( const EGizmoHandleTypes InGizmoHandleType )"
  },
  {
    "label": "SetTransformGizmoClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformGizmoClass( const TSubclassOf<ABaseTransformGizmo>& NewTransformGizmoClass )"
  },
  {
    "label": "SetDraggedInteractable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDraggedInteractable( IViewportInteractableInterface* InDraggedInteractable, UViewportInteractor* Interactor )"
  },
  {
    "label": "CycleTransformGizmoCoordinateSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleTransformGizmoCoordinateSpace()"
  },
  {
    "label": "FindPlacementPointUnderLaser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPlacementPointUnderLaser( UViewportInteractor* Interactor, FVector& OutHitLocation )"
  },
  {
    "label": "SetUseInputPreprocessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseInputPreprocessor( bool bInUseInputPreprocessor )"
  },
  {
    "label": "AllowWorldMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowWorldMovement( bool bAllow )"
  },
  {
    "label": "HasCandidatesSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCandidatesSelected()"
  },
  {
    "label": "SetSelectionAsCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionAsCandidates()"
  },
  {
    "label": "SetForceCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceCursor(const bool bInShouldForceCursor)"
  },
  {
    "label": "PlaySound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaySound(USoundBase* SoundBase, const FVector& InWorldLocation, const float InVolume = 1.0f)"
  },
  {
    "label": "SetInVR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInVR(const bool bInVR)"
  },
  {
    "label": "SnapLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "SnapLocation(const bool bLocalSpaceSnapping, const FVector& DesiredGizmoLocation, const FTransform &GizmoStartTransform, const FVector SnapGridBase, const bool bShouldConstrainMovement, const FVector AlignAxes)"
  },
  {
    "label": "UseLegacyInteractions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseLegacyInteractions()"
  },
  {
    "label": "UseVWInteractions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseVWInteractions()"
  },
  {
    "label": "OnEditorClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorClosed()"
  },
  {
    "label": "HoverTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HoverTick( const float DeltaTime )"
  },
  {
    "label": "InteractionTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InteractionTick( const float DeltaTime )"
  },
  {
    "label": "UpdateDragging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDragging(\n\t\tconst float DeltaTime,\n\t\tbool& bIsFirstDragUpdate,\n\t\tUViewportInteractor* Interactor,\n\t\tconst EViewportInteractionDraggingMode DraggingMode,\n\t\tclass UViewportDragOperation* DragOperation,\n\t\tconst bool bWithTwoHands,\n\t\tconst TOptional<FTransformGizmoHandlePlacement> OptionalHandlePlacement,\n\t\tconst FVector& DragDelta,\n\t\tconst FVector& OtherHandDragDelta,\n\t\tconst FVector& DraggedTo,\n\t\tconst FVector& OtherHandDraggedTo,\n\t\tconst FVector& DragDeltaFromStart,\n\t\tconst FVector& OtherHandDragDeltaFromStart,\n\t\tconst FVector& LaserPointerStart,\n\t\tconst FVector& LaserPointerDirection,\n\t\tconst float LaserPointerMaxLength,\n\t\tconst bool bIsLaserPointerValid,\n\t\tconst FTransform& GizmoStartTransform,\n\t\tFTransform& GizmoLastTransform,\n\t\tFTransform& GizmoTargetTransform,\n\t\tFTransform& GizmoUnsnappedTargetTransform,\n\t\tconst FTransform& GizmoInterpolationSnapshotTransform,\n\t\tconst FBox& GizmoStartLocalBounds,\n\t\tconst USceneComponent* const DraggingTransformGizmoComponent,\n\t\tFVector& GizmoSpaceFirstDragUpdateOffsetAlongAxis,\n\t\tFVector& DragDeltaFromStartOffset,\n\t\tELockedWorldDragMode& LockedWorldDragMode,\n\t\tfloat& GizmoScaleSinceDragStarted,\n\t\tfloat& GizmoRotationRadiansSinceDragStarted,\n\t\tbool& bIsDrivingVelocityOfSimulatedTransformables,\n\t\tFVector& OutUnsnappedDraggedTo)"
  },
  {
    "label": "FinishedMovingTransformables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishedMovingTransformables()"
  },
  {
    "label": "PollInputIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollInputIfNeeded()"
  },
  {
    "label": "RefreshTransformGizmo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTransformGizmo( const bool bNewObjectsSelected )"
  },
  {
    "label": "SpawnTransformGizmoIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnTransformGizmoIfNeeded()"
  },
  {
    "label": "DestroyActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyActors()"
  },
  {
    "label": "SpawnGridMeshActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnGridMeshActor()"
  },
  {
    "label": "CalculateAverageLocationOfTransformables()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CalculateAverageLocationOfTransformables()"
  },
  {
    "label": "FindTransformGizmoAlignPoint()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FindTransformGizmoAlignPoint(const FTransform& GizmoStartTransform, const FTransform& DesiredGizmoTransform, const bool bShouldConstrainMovement, FVector ConstraintAxes)"
  },
  {
    "label": "DrawBoxBrackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBoxBrackets(const FBox InActor, const FTransform LocalToWorld, const FLinearColor BracketColor)"
  },
  {
    "label": "CompensateRoomTransformForWorldScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompensateRoomTransformForWorldScale(FTransform& InOutRoomTransform, const float InNewWorldToMetersScale, const FVector& InRoomPivotLocation)"
  }
]