[
  {
    "label": "BlindData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlindData"
  },
  {
    "label": "ParticlesToLevelSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ParticlesToLevelSet"
  },
  {
    "label": "Raster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Raster"
  },
  {
    "label": "particlesToSdf()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_PARTICLES_TO_LEVELSET_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_PARTICLES_TO_LEVELSET_HAS_BEEN_INCLUDED # include<tbb / parallel_reduce . h> # include<tbb / blocked_range . h> # include<openvdb / Types . h> # include<openvdb / Grid . h> # include<openvdb / math / Math . h> # include<openvdb / math / Transform . h> # include<openvdb / tree / LeafManager . h> # include<openvdb / util / logging . h> # include<openvdb / util / NullInterrupter . h> # include \" Composite . h \" # include \" PointPartitioner . h \" # include \" Prune . h \" # include \" SignedFloodFill . h \" # include<functional> # include<iostream> # include<type_traits> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridT,ParticleListT,InterrupterT = util::NullInterrupter> void)",
    "insertText": "particlesToSdf(const ParticleListT&, GridT&, InterrupterT* = nullptr)"
  },
  {
    "label": "particlesToSdf()",
    "kind": "Method",
    "detail": "Function (template<GridT,ParticleListT,InterrupterT = util::NullInterrupter> void)",
    "insertText": "particlesToSdf(const ParticleListT&, GridT&, Real radius, InterrupterT* = nullptr)"
  },
  {
    "label": "particleTrailsToSdf()",
    "kind": "Method",
    "detail": "Function (template<GridT,ParticleListT,InterrupterT = util::NullInterrupter> void)",
    "insertText": "particleTrailsToSdf(const ParticleListT&, GridT&, Real delta=1, InterrupterT* =nullptr)"
  },
  {
    "label": "particlesToMask()",
    "kind": "Method",
    "detail": "Function (template<GridT,ParticleListT,InterrupterT = util::NullInterrupter> void)",
    "insertText": "particlesToMask(const ParticleListT&, GridT&, InterrupterT* = nullptr)"
  },
  {
    "label": "particlesToMask()",
    "kind": "Method",
    "detail": "Function (template<GridT,ParticleListT,InterrupterT = util::NullInterrupter> void)",
    "insertText": "particlesToMask(const ParticleListT&, GridT&, Real radius, InterrupterT* = nullptr)"
  },
  {
    "label": "particleTrailsToMask()",
    "kind": "Method",
    "detail": "Function (template<GridT,ParticleListT,InterrupterT = util::NullInterrupter> void)",
    "insertText": "particleTrailsToMask(const ParticleListT&, GridT&,Real delta=1,InterrupterT* =nullptr)"
  },
  {
    "label": "ParticlesToLevelSet()",
    "kind": "Method",
    "detail": "Function (namespace p2ls_internal { template<VisibleT,BlindT> class BlindData ; } template<SdfGridT,AttributeT = void,InterrupterT = util::NullInterrupter> class ParticlesToLevelSet { public : using DisableT = std::is_void<AttributeT>::type ; using InterrupterType = InterrupterT ; using SdfGridType = SdfGridT ; using SdfType = SdfGridT::ValueType ; using AttType = std::conditional<DisableT::value,size_t,AttributeT>::type ; using AttGridType = SdfGridT::template ValueConverter<AttType>::Type ; const bool OutputIsMask = std::is_same<SdfType,bool>::value ;)",
    "insertText": "ParticlesToLevelSet(SdfGridT& grid, InterrupterT* interrupt = nullptr)"
  },
  {
    "label": "ParticlesToLevelSet()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ParticlesToLevelSet()"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (delete mBlindGrid ; } void)",
    "insertText": "finalize(bool prune = false)"
  },
  {
    "label": "attributeGrid()",
    "kind": "Method",
    "detail": "Function (AttGridType::Ptr)",
    "insertText": "attributeGrid()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (mRmin =)",
    "insertText": "Max(Real(0),Rmin)"
  },
  {
    "label": "getRmax()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "getRmax()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (mRmax =)",
    "insertText": "Max(mRmin,Rmax)"
  },
  {
    "label": "ignoredParticles()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ignoredParticles()"
  },
  {
    "label": "rasterizeSpheres()",
    "kind": "Method",
    "detail": "Function (mGrainSize = grainSize ; } template<ParticleListT> void)",
    "insertText": "rasterizeSpheres(const ParticleListT& pa)"
  },
  {
    "label": "rasterizeSpheres()",
    "kind": "Method",
    "detail": "Function (template<ParticleListT> void)",
    "insertText": "rasterizeSpheres(const ParticleListT& pa, Real radius)"
  },
  {
    "label": "rasterizeTrails()",
    "kind": "Method",
    "detail": "Function (template<ParticleListT> void)",
    "insertText": "rasterizeTrails(const ParticleListT& pa, Real delta=1.0)"
  },
  {
    "label": "ParticlesToLevelSet()",
    "kind": "Method",
    "detail": "Function (private : using BlindType = p2ls_internal::BlindData<SdfType,AttType> ; using BlindGridType = SdfGridT::template ValueConverter<BlindType>::Type ; template<ParticleListT,GridT> struct Raster ; SdfGridType* mSdfGrid ; AttGridType::Ptr mAttGrid ; BlindGridType* mBlindGrid ; InterrupterT* mInterrupter ; Real mDx,mHalfWidth ; Real mRmin,mRmax ; size_t mMinCount,mMaxCount ; int mGrainSize ; } ; template<SdfGridT,AttributeT,InterrupterT> ParticlesToLevelSet<SdfGridT,AttributeT,InterrupterT)",
    "insertText": "ParticlesToLevelSet(SdfGridT& grid, InterrupterT* interrupter) : mSdfGrid(&grid), mBlindGrid(nullptr), mInterrupter(interrupter), mDx(grid.voxelSize()[0]), mHalfWidth(grid.background()/mDx), mRmin(1.5), mRmax(100.0), mMinCount(0), mMaxCount(0), mGrainSize(1)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"ParticlesToLevelSet only supports uniform voxels!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!DisableT::value)"
  },
  {
    "label": "BlindGridType()",
    "kind": "Method",
    "detail": "Function (mBlindGrid = new)",
    "insertText": "BlindGridType(BlindType(grid.background()))"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (mBlindGrid ->)",
    "insertText": "setTransform(mSdfGrid->transform().copy())"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (Raster<ParticleListT,SdfGridT>)",
    "insertText": "r(*this, mSdfGrid, pa)"
  },
  {
    "label": "rasterizeSpheres()",
    "kind": "Method",
    "detail": "Function (r .)",
    "insertText": "rasterizeSpheres()"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (} else { Raster<ParticleListT,BlindGridType>)",
    "insertText": "r(*this, mBlindGrid, pa)"
  },
  {
    "label": "rasterizeSpheres()",
    "kind": "Method",
    "detail": "Function (r .)",
    "insertText": "rasterizeSpheres(radius/mDx)"
  },
  {
    "label": "rasterizeTrails()",
    "kind": "Method",
    "detail": "Function (} } template<SdfGridT,AttributeT,InterrupterT> template<ParticleListT> void ParticlesToLevelSet<SdfGridT,AttributeT,InterrupterT)",
    "insertText": "rasterizeTrails(const ParticleListT& pa, Real delta)"
  },
  {
    "label": "rasterizeTrails()",
    "kind": "Method",
    "detail": "Function (r .)",
    "insertText": "rasterizeTrails(delta)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} } template<SdfGridT,AttributeT,InterrupterT> void ParticlesToLevelSet<SdfGridT,AttributeT,InterrupterT)",
    "insertText": "finalize(bool prune)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "if(!mBlindGrid)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prune(mSdfGrid->tree())"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "pruneLevelSet(mSdfGrid->tree())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } return ; })",
    "insertText": "if(prune) tools::prune(mBlindGrid->tree())"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (using AttTreeT = AttGridType::TreeType ; using AttLeafT = AttTreeT::LeafNodeType ; using BlindTreeT = BlindGridType::TreeType ; using BlindLeafIterT = BlindTreeT::LeafCIter ; using BlindLeafT = BlindTreeT::LeafNodeType ; using SdfTreeT = SdfGridType::TreeType ; using SdfLeafT = SdfTreeT::LeafNodeType ; const BlindTreeT& blindTree = mBlindGrid ->)",
    "insertText": "tree()"
  },
  {
    "label": "attTree()",
    "kind": "Method",
    "detail": "Function (AttTreeT::Ptr)",
    "insertText": "attTree(new AttTreeT( blindTree, blindTree.background().blind(), openvdb::TopologyCopy()))"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (mAttGrid =)",
    "insertText": "Ptr(new AttGridType(attTree))"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (mAttGrid ->)",
    "insertText": "setTransform(mBlindGrid->transform().copy())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SdfTreeT::Ptr sdfTree ;)",
    "insertText": "if(OutputIsMask)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (sdfTree .)",
    "insertText": "reset(new SdfTreeT(blindTree, SdfType(0), SdfType(1), TopologyCopy()))"
  },
  {
    "label": "leafNodes()",
    "kind": "Method",
    "detail": "Function (tree::LeafManager<AttTreeT>)",
    "insertText": "leafNodes(*attTree)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafNodes .)",
    "insertText": "foreach([&](AttLeafT& attLeaf, size_t ) { if (const auto* blindLeaf = blindTree.probeConstLeaf(attLeaf.origin())) { for (auto iter = attLeaf.beginValueOn(); iter; ++iter) { const auto pos = iter.pos(); attLeaf.setValueOnly(pos, blindLeaf->getValue(pos).blind()); } } })"
  },
  {
    "label": "getConstAccessor()",
    "kind": "Method",
    "detail": "Function (const auto blindAcc = mBlindGrid ->)",
    "insertText": "getConstAccessor()"
  },
  {
    "label": "beginValueOn()",
    "kind": "Method",
    "detail": "Function (auto iter = attTree ->)",
    "insertText": "beginValueOn()"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "setMaxDepth(AttTreeT::ValueOnIter::LEAF_DEPTH - 1)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "modifyValue([&](AttType& v) { v = blindAcc.getValue(iter.getCoord()).blind(); })"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} } else { sdfTree .)",
    "insertText": "reset(new SdfTreeT(blindTree, blindTree.background().visible(), TopologyCopy()))"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (const BlindLeafT& leaf =* n ; const openvdb::Coord xyz = leaf .)",
    "insertText": "origin()"
  },
  {
    "label": "probeLeaf()",
    "kind": "Method",
    "detail": "Function (SdfLeafT* sdfLeaf = sdfTree ->)",
    "insertText": "probeLeaf(xyz)"
  },
  {
    "label": "cbeginValueOn()",
    "kind": "Method",
    "detail": "Function (BlindLeafT::ValueOnCIter m = leaf .)",
    "insertText": "cbeginValueOn()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const BlindType& v = leaf .)",
    "insertText": "getValue(k)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (sdfLeaf ->)",
    "insertText": "setValueOnly(k, v.visible())"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (attLeaf ->)",
    "insertText": "setValueOnly(k, v.blind())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(; m; ++m)"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (const openvdb::Index k = m .)",
    "insertText": "pos()"
  },
  {
    "label": "signedFloodFill()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "signedFloodFill(*sdfTree)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mSdfGrid->empty())"
  },
  {
    "label": "setTree()",
    "kind": "Method",
    "detail": "Function (mSdfGrid ->)",
    "insertText": "setTree(sdfTree)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (mSdfGrid ->)",
    "insertText": "tree().topologyUnion(*sdfTree)"
  },
  {
    "label": "csgUnion()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "csgUnion(mSdfGrid->tree(), *sdfTree, true)"
  },
  {
    "label": "Raster()",
    "kind": "Method",
    "detail": "Function (} } OPENVDB_NO_UNREACHABLE_CODE_WARNING_END } template<SdfGridT,AttributeT,InterrupterT> template<ParticleListT,GridT> struct ParticlesToLevelSet<SdfGridT,AttributeT,InterrupterT>::Raster { using DisableT = std::is_void<AttributeT>::type ; using ParticlesToLevelSetT = ParticlesToLevelSet<SdfGridT,AttributeT,InterrupterT> ; using SdfT = ParticlesToLevelSetT::SdfType ; using AttT = ParticlesToLevelSetT::AttType ; using ValueT = GridT::ValueType ; using AccessorT = GridT::Accessor ; using TreeT = GridT::TreeType ; using LeafNodeT = TreeT::LeafNodeType ; using PointPartitionerT = PointPartitioner<Index32,LeafNodeT::LOG2DIM> ; const bool OutputIsMask = std::is_same<SdfT,bool>::value,DoAttrXfer = ! DisableT::value ;)",
    "insertText": "Raster(ParticlesToLevelSetT& parent, GridT* grid, const ParticleListT& particles) : mParent(parent) , mParticles(particles) , mGrid(grid) , mMap(*(mGrid->transform().baseMap())) , mMinCount(0) , mMaxCount(0) , mIsCopy(false)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (mPointPartitioner = new PointPartitionerT ; mPointPartitioner ->)",
    "insertText": "construct(particles, mGrid->transform())"
  },
  {
    "label": "Raster()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Raster(Raster& other, tbb::split) : mParent(other.mParent) , mParticles(other.mParticles) , mGrid(new GridT(*other.mGrid, openvdb::ShallowCopy())) , mMap(other.mMap) , mMinCount(0) , mMaxCount(0) , mTask(other.mTask) , mIsCopy(true) , mPointPartitioner(other.mPointPartitioner)"
  },
  {
    "label": "newTree()",
    "kind": "Method",
    "detail": "Function (mGrid ->)",
    "insertText": "newTree()"
  },
  {
    "label": "Raster()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Raster()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mMinCount = mMaxCount = 0 ;)",
    "insertText": "if(mParent.mInterrupter)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (mParent . mInterrupter ->)",
    "insertText": "start(\"Rasterizing particles to level set using spheres\")"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} mTask =)",
    "insertText": "bind(&Raster::rasterSpheres, std::placeholders::_1, std::placeholders::_2)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook()"
  },
  {
    "label": "rasterizeSpheres()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rasterizeSpheres(Real radius)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (mMinCount = radius<mParent . mRmin ? mParticles .)",
    "insertText": "size()"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (mParent . mInterrupter ->)",
    "insertText": "start(\"Rasterizing particles to level set using const spheres\")"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} mTask =)",
    "insertText": "bind(&Raster::rasterFixedSpheres, std::placeholders::_1, std::placeholders::_2, radius)"
  },
  {
    "label": "rasterizeTrails()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "rasterizeTrails(Real delta=1.0)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (mParent . mInterrupter ->)",
    "insertText": "start(\"Rasterizing particles to level set using trails\")"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} mTask =)",
    "insertText": "bind(&Raster::rasterTrails, std::placeholders::_1, std::placeholders::_2, delta)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& r)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mTask)"
  },
  {
    "label": "mTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mTask(this, r)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (mParent . mMinCount = mMinCount ; mParent . mMaxCount = mMaxCount ; } void)",
    "insertText": "join(Raster& other)"
  },
  {
    "label": "compMax()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compMax(*mGrid, *other.mGrid)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (} else { mGrid ->)",
    "insertText": "topologyUnion(*other.mGrid)"
  },
  {
    "label": "csgUnion()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "csgUnion(*mGrid, *other.mGrid, true)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} OPENVDB_NO_UNREACHABLE_CODE_WARNING_END mMinCount + = other . mMinCount ; mMaxCount + = other . mMaxCount ; } private : Raster&)",
    "insertText": "operator(const Raster&)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + mMinCount ; return true ; })",
    "insertText": "if(R > mParent.mRmax)"
  },
  {
    "label": "rasterSpheres()",
    "kind": "Method",
    "detail": "Function (+ + mMaxCount ; return true ; } return false ; } void)",
    "insertText": "rasterSpheres(const tbb::blocked_range<size_t>& r)"
  },
  {
    "label": "getAccessor()",
    "kind": "Method",
    "detail": "Function (AccessorT acc = mGrid ->)",
    "insertText": "getAccessor()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool run = true ; const Real invDx = 1 / mParent . mDx ; AttT att ; Vec3R pos ; Real rad ;)",
    "insertText": "for(size_t n = r.begin(), N = r.end(); n < N; ++n)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (PointPartitionerT::IndexIterator iter = mPointPartitioner ->)",
    "insertText": "indices(n)"
  },
  {
    "label": "getPosRad()",
    "kind": "Method",
    "detail": "Function (const Index32& id =* iter ; mParticles .)",
    "insertText": "getPosRad(id, pos, rad)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Real R = invDx* rad ;)",
    "insertText": "if(this->ignoreParticle(R))"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (const Vec3R P = mMap .)",
    "insertText": "applyInverseMap(pos)"
  },
  {
    "label": "DisableT()",
    "kind": "Method",
    "detail": "Function (this -> getAtt<)",
    "insertText": "DisableT(id, att)"
  },
  {
    "label": "makeSphere()",
    "kind": "Method",
    "detail": "Function (run = this ->)",
    "insertText": "makeSphere(P, R, att, acc)"
  },
  {
    "label": "rasterFixedSpheres()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "rasterFixedSpheres(const tbb::blocked_range<size_t>& r, Real R)"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (mParticles .)",
    "insertText": "getPos(id, pos)"
  },
  {
    "label": "rasterTrails()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "rasterTrails(const tbb::blocked_range<size_t>& r, Real delta)"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (bool run = true ; AttT att ; Vec3R pos,vel ; Real rad ; const Vec3R origin = mMap .)",
    "insertText": "applyInverseMap(Vec3R(0,0,0))"
  },
  {
    "label": "getPosRadVel()",
    "kind": "Method",
    "detail": "Function (const Index32& id =* iter ; mParticles .)",
    "insertText": "getPosRadVel(id, pos, rad, vel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Real R0 = invDx* rad ;)",
    "insertText": "if(this->ignoreParticle(R0))"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (const Vec3R V = mMap .)",
    "insertText": "applyInverseMap(vel)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (const Real speed = V .)",
    "insertText": "length()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Vec3R Nrml = - V* invSpeed ; Vec3R P = P0 ; Real R = R0,d = 0 ;)",
    "insertText": "for(size_t m = 0; run && d <= speed ; ++m)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (P + = 0 . 5* delta* R* Nrml ;)",
    "insertText": "d(P - P0).length()"
  },
  {
    "label": "R0()",
    "kind": "Method",
    "detail": "Function (R =)",
    "insertText": "R0(R0 - Rmin)"
  },
  {
    "label": "Index32()",
    "kind": "Method",
    "detail": "Function (const Index32 bucketCount =)",
    "insertText": "Index32(mPointPartitioner->size())"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(tbb::blocked_range<size_t>(0, bucketCount, mParent.mGrainSize), *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(tbb::blocked_range<size_t>(0, bucketCount))"
  },
  {
    "label": "makeSphere()",
    "kind": "Method",
    "detail": "Function (} } template<bool IsMaskT = OutputIsMask> std::enable_if<! IsMaskT,bool>::type)",
    "insertText": "makeSphere(const Vec3R& P, Real R, const AttT& att, AccessorT& acc)"
  },
  {
    "label": "Pow2()",
    "kind": "Method",
    "detail": "Function (const Real dx = mParent . mDx,w = mParent . mHalfWidth,max = R + w,max2 =)",
    "insertText": "Pow2(max), min2 = math::Pow2(math::Max(Real(0), R - w))"
  },
  {
    "label": "lo()",
    "kind": "Method",
    "detail": "Function (const Coord)",
    "insertText": "lo(math::Floor(P[0]-max),math::Floor(P[1]-max),math::Floor(P[2]-max)), hi(math::Ceil( P[0]+max),math::Ceil( P[1]+max),math::Ceil( P[2]+max))"
  },
  {
    "label": "background()",
    "kind": "Method",
    "detail": "Function (const ValueT inside = - mGrid ->)",
    "insertText": "background()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ValueT v ; size_t count = 0 ;)",
    "insertText": "for(Coord c = lo; c.x() <= hi.x(); ++c.x())"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "self().cancel_group_execution()"
  },
  {
    "label": "Pow2()",
    "kind": "Method",
    "detail": "Function (const Real x2y2 = x2 +)",
    "insertText": "Pow2(c.y() - P[1])"
  },
  {
    "label": "Pow2()",
    "kind": "Method",
    "detail": "Function (const Real x2y2z2 = x2y2 +)",
    "insertText": "Pow2(c.z()-P[2])"
  },
  {
    "label": "_Pragma()",
    "kind": "Method",
    "detail": "Function (# if defined __INTEL_COMPILER)",
    "insertText": "_Pragma(\"warning (push)\") _Pragma(\"warning (disable:186)\") #endif if (x2y2z2 >= max2 || (!acc.probeValue(c, v) && (v < ValueT(0))))"
  },
  {
    "label": "_Pragma()",
    "kind": "Method",
    "detail": "Function (# if defined __INTEL_COMPILER)",
    "insertText": "_Pragma(\"warning (pop)\") #endif if (x2y2z2 <= min2)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (acc .)",
    "insertText": "setValueOff(c, inside)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (continue ; } const ValueT d =)",
    "insertText": "Merge(static_cast<SdfT>(dx*(math::Sqrt(x2y2z2)-R)), att)"
  },
  {
    "label": "makeSphere()",
    "kind": "Method",
    "detail": "Function (} } } return true ; } template<bool IsMaskT = OutputIsMask> std::enable_if<IsMaskT,bool>::type)",
    "insertText": "makeSphere(const Vec3R& p, Real r, const AttT& att, AccessorT& acc)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (const Real rSquared = r* r,inW = r /)",
    "insertText": "Sqrt(6.0)"
  },
  {
    "label": "outLo()",
    "kind": "Method",
    "detail": "Function (const Coord)",
    "insertText": "outLo(math::Floor(p[0] - r), math::Floor(p[1] - r), math::Floor(p[2] - r)), outHi(math::Ceil(p[0] + r), math::Ceil(p[1] + r), math::Ceil(p[2] + r)), inLo(math::Ceil(p[0] - inW), math::Ceil(p[1] - inW), math::Ceil(p[2] - inW)), inHi(math::Floor(p[0] + inW), math::Floor(p[1] + inW), math::Floor(p[2] + inW))"
  },
  {
    "label": "CoordBBox()",
    "kind": "Method",
    "detail": "Function (const std::vector<CoordBBox> padding {)",
    "insertText": "CoordBBox(outLo.x(), outLo.y(), outLo.z(), inLo.x()-1, outHi.y(), outHi.z()), CoordBBox(inHi.x()+1, outLo.y(), outLo.z(), outHi.x(), outHi.y(), outHi.z()), CoordBBox(outLo.x(), outLo.y(), outLo.z(), outHi.x(), inLo.y()-1, outHi.z()), CoordBBox(outLo.x(), inHi.y()+1, outLo.z(), outHi.x(), outHi.y(), outHi.z()), CoordBBox(outLo.x(), outLo.y(), outLo.z(), outHi.x(), outHi.y(), inLo.z()-1), CoordBBox(outLo.x(), outLo.y(), inHi.z()+1, outHi.x(), outHi.y(), outHi.z())"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (const ValueT onValue =)",
    "insertText": "Merge(SdfT(1), att)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (acc .)",
    "insertText": "tree().sparseFill(CoordBBox(inLo, inHi), onValue)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Coord c ; Real cx,cy,cz ;)",
    "insertText": "for(c = bmin, cx = c.x(); c.x() <= bmax.x(); ++c.x(), cx += 1)"
  },
  {
    "label": "Pow2()",
    "kind": "Method",
    "detail": "Function (const Real x2 =)",
    "insertText": "Pow2(cx - p[0])"
  },
  {
    "label": "Pow2()",
    "kind": "Method",
    "detail": "Function (const Real x2y2 = x2 +)",
    "insertText": "Pow2(cy - p[1])"
  },
  {
    "label": "Pow2()",
    "kind": "Method",
    "detail": "Function (const Real x2y2z2 = x2y2 +)",
    "insertText": "Pow2(cz - p[2])"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (acc .)",
    "insertText": "setValue(c, onValue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } } } } return true ; } using FuncType = std::function<)",
    "insertText": "void(Raster*, const tbb::blocked_range<size_t>&)"
  },
  {
    "label": "getAtt()",
    "kind": "Method",
    "detail": "Function (template<DisableType> std::enable_if<DisableType::value>::type)",
    "insertText": "getAtt(size_t, AttT&)"
  },
  {
    "label": "getAtt()",
    "kind": "Method",
    "detail": "Function (} template<DisableType> std::enable_if<! DisableType::value>::type)",
    "insertText": "getAtt(size_t n, AttT& a)"
  },
  {
    "label": "getAtt()",
    "kind": "Method",
    "detail": "Function (mParticles .)",
    "insertText": "getAtt(n, a)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (} template<T> std::enable_if<std::is_same<T,ValueT>::value,ValueT>::type)",
    "insertText": "Merge(T s, const AttT&)"
  },
  {
    "label": "BlindData()",
    "kind": "Method",
    "detail": "Function (} ParticlesToLevelSetT& mParent ; const ParticleListT& mParticles ; GridT* mGrid ; const math::MapBase& mMap ; size_t mMinCount,mMaxCount ; FuncType mTask ; const bool mIsCopy ; PointPartitionerT* mPointPartitioner ; } ; namespace p2ls_internal { template<VisibleT,BlindT> class BlindData { public : using type = VisibleT ; using VisibleType = VisibleT ; using BlindType = BlindT ;)",
    "insertText": "BlindData()"
  },
  {
    "label": "BlindData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlindData(VisibleT v) : mVisible(v), mBlind(zeroVal<BlindType>())"
  },
  {
    "label": "BlindData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlindData(VisibleT v, BlindT b) : mVisible(v), mBlind(b)"
  },
  {
    "label": "BlindData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlindData(const BlindData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BlindData&)",
    "insertText": "operator(const BlindData&)"
  },
  {
    "label": "visible()",
    "kind": "Method",
    "detail": "Function (const VisibleT&)",
    "insertText": "visible()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BlindData)",
    "insertText": "operator(const BlindData& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BlindData)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} protected : VisibleT mVisible ; BlindT mBlind ; } ; template<VisibleT,BlindT> std::ostream&)",
    "insertText": "operator(std::ostream& ostr, const BlindData<VisibleT, BlindT>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<VisibleT,BlindT,T> BlindData<VisibleT,BlindT>)",
    "insertText": "operator(const BlindData<VisibleT, BlindT>& x, const T& rhs)"
  },
  {
    "label": "particlesToSdf()",
    "kind": "Method",
    "detail": "Function (} } template<GridT,ParticleListT,InterrupterT> void)",
    "insertText": "particlesToSdf(const ParticleListT& plist, GridT& grid, InterrupterT* interrupt)"
  },
  {
    "label": "OPENVDB_LOG_WARN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_LOG_WARN(\"particlesToSdf requires a level set grid;\" \" try Grid::setGridClass(openvdb::GRID_LEVEL_SET)\")"
  },
  {
    "label": "p2ls()",
    "kind": "Method",
    "detail": "Function (} ParticlesToLevelSet<GridT>)",
    "insertText": "p2ls(grid, interrupt)"
  },
  {
    "label": "rasterizeSpheres()",
    "kind": "Method",
    "detail": "Function (p2ls .)",
    "insertText": "rasterizeSpheres(plist)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneLevelSet(grid.tree())"
  },
  {
    "label": "particlesToSdf()",
    "kind": "Method",
    "detail": "Function (} template<GridT,ParticleListT,InterrupterT> void)",
    "insertText": "particlesToSdf(const ParticleListT& plist, GridT& grid, Real radius, InterrupterT* interrupt)"
  },
  {
    "label": "rasterizeSpheres()",
    "kind": "Method",
    "detail": "Function (p2ls .)",
    "insertText": "rasterizeSpheres(plist, radius)"
  },
  {
    "label": "particleTrailsToSdf()",
    "kind": "Method",
    "detail": "Function (} template<GridT,ParticleListT,InterrupterT> void)",
    "insertText": "particleTrailsToSdf(const ParticleListT& plist, GridT& grid, Real delta, InterrupterT* interrupt)"
  },
  {
    "label": "rasterizeTrails()",
    "kind": "Method",
    "detail": "Function (p2ls .)",
    "insertText": "rasterizeTrails(plist, delta)"
  },
  {
    "label": "particlesToMask()",
    "kind": "Method",
    "detail": "Function (} template<GridT,ParticleListT,InterrupterT> void)",
    "insertText": "particlesToMask(const ParticleListT& plist, GridT& grid, InterrupterT* interrupt)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prune(grid.tree())"
  },
  {
    "label": "particlesToMask()",
    "kind": "Method",
    "detail": "Function (} template<GridT,ParticleListT,InterrupterT> void)",
    "insertText": "particlesToMask(const ParticleListT& plist, GridT& grid, Real radius, InterrupterT* interrupt)"
  },
  {
    "label": "particleTrailsToMask()",
    "kind": "Method",
    "detail": "Function (} template<GridT,ParticleListT,InterrupterT> void)",
    "insertText": "particleTrailsToMask(const ParticleListT& plist, GridT& grid, Real delta, InterrupterT* interrupt)"
  }
]