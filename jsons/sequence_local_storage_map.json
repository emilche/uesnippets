[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SequenceLocalStorageMap()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_SEQUENCE_LOCAL_STORAGE_MAP_H_ # define BASE_THREADING_SEQUENCE_LOCAL_STORAGE_MAP_H_ # include \" base / base_export . h \" # include \" base / containers / flat_map . h \" # include \" base / memory / raw_ptr_exclusion . h \" namespace base { namespace internal { class BASE_EXPORT SequenceLocalStorageMap { public :)",
    "insertText": "SequenceLocalStorageMap()"
  },
  {
    "label": "SequenceLocalStorageMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceLocalStorageMap(const SequenceLocalStorageMap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceLocalStorageMap&)",
    "insertText": "operator(const SequenceLocalStorageMap&)"
  },
  {
    "label": "GetForCurrentThread()",
    "kind": "Method",
    "detail": "Function (SequenceLocalStorageMap&)",
    "insertText": "GetForCurrentThread()"
  },
  {
    "label": "IsSetForCurrentThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSetForCurrentThread()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ValueDestructorPair { public : using DestructorFunc =)",
    "insertText": "void(void*)"
  },
  {
    "label": "ValueDestructorPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueDestructorPair(void* value, DestructorFunc* destructor)"
  },
  {
    "label": "ValueDestructorPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueDestructorPair(const ValueDestructorPair&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ValueDestructorPair&)",
    "insertText": "operator(const ValueDestructorPair&)"
  },
  {
    "label": "ValueDestructorPair()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ValueDestructorPair()"
  },
  {
    "label": "ValueDestructorPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueDestructorPair(ValueDestructorPair&& value_destructor_pair)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ValueDestructorPair&)",
    "insertText": "operator(ValueDestructorPair&& value_destructor_pair)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "value()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int slot_id, ValueDestructorPair value_destructor_pair)"
  },
  {
    "label": "ScopedSetSequenceLocalStorageMapForCurrentThread()",
    "kind": "Method",
    "detail": "Function (private : base::flat_map<int,ValueDestructorPair> sls_map_ ; } ; class BASE_EXPORT ScopedSetSequenceLocalStorageMapForCurrentThread { public :)",
    "insertText": "ScopedSetSequenceLocalStorageMapForCurrentThread(SequenceLocalStorageMap* sequence_local_storage)"
  },
  {
    "label": "ScopedSetSequenceLocalStorageMapForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedSetSequenceLocalStorageMapForCurrentThread(const ScopedSetSequenceLocalStorageMapForCurrentThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSetSequenceLocalStorageMapForCurrentThread&)",
    "insertText": "operator(const ScopedSetSequenceLocalStorageMapForCurrentThread&)"
  },
  {
    "label": "ScopedSetSequenceLocalStorageMapForCurrentThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSetSequenceLocalStorageMapForCurrentThread()"
  }
]