[
  {
    "label": "IPortalApplicationWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPortalApplicationWindow"
  },
  {
    "label": "IPortalUserLogin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPortalUserLogin"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPluginWardenAuthorizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPluginWardenAuthorizer"
  },
  {
    "label": "FPluginWardenAuthorizer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / CoreMisc . h \" # include \" Containers / Ticker . h \" # include \" Async / AsyncResult . h \" # include \" Account / IPortalUser . h \" class IPortalApplicationWindow ; class IPortalUserLogin ; enum class EPluginAuthorizationState { Initializing,StartLauncher,StartLauncher_Waiting,AuthorizePlugin,AuthorizePlugin_Waiting,IsUserSignedIn,IsUserSignedIn_Waiting,SigninRequired,SigninRequired_Waiting,Signin_Waiting,Signin_Timeout,SigninFailed,Authorized,Unauthorized,LauncherStartFailed,Timeout,Canceled,} ; class FPluginWardenAuthorizer { public :)",
    "insertText": "FPluginWardenAuthorizer(const FText& InPluginFriendlyName, const FString& InPluginItemId, const FString& InPluginOfferId, const EEntitlementCacheLevelRequest InCacheLevel)"
  },
  {
    "label": "UpdateAuthorizationState()",
    "kind": "Method",
    "detail": "Function (EPluginAuthorizationState)",
    "insertText": "UpdateAuthorizationState(float DeltaTime)"
  },
  {
    "label": "GetPluginFriendlyName()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetPluginFriendlyName()"
  }
]