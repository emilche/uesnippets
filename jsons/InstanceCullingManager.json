[
  {
    "label": "FGPUScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUScene"
  },
  {
    "label": "FSceneUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneUniformBuffer"
  },
  {
    "label": "FPackedView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedView"
  },
  {
    "label": "FPackedViewParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedViewParams"
  },
  {
    "label": "FInstanceProcessingGPULoadBalancer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceProcessingGPULoadBalancer"
  },
  {
    "label": "FInstanceCullingIntermediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingIntermediate"
  },
  {
    "label": "FInstanceCullingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceCullingResult"
  },
  {
    "label": "FInstanceCullingDeferredContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingDeferredContext"
  },
  {
    "label": "FInstanceCullingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingManager"
  },
  {
    "label": "FInstanceCullingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingContext"
  },
  {
    "label": "GetDrawParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" InstanceCulling / InstanceCullingContext . h \" # include \" InstanceCullingLoadBalancer . h \" # include \" RenderGraphResources . h \" # include \" Async / Mutex . h \" class FGPUScene ; class FSceneUniformBuffer ; namespace Nanite { struct FPackedView ; struct FPackedViewParams ; } class FInstanceProcessingGPULoadBalancer : public TInstanceCullingLoadBalancer<> { public : } ; class FInstanceCullingIntermediate { public : FRDGBufferRef CullingViews = nullptr ; int32 NumViews = 0 ; TRDGUniformBufferRef<FInstanceCullingGlobalUniforms> DummyUniformBuffer ; } ; struct FInstanceCullingResult { FInstanceCullingDrawParams Parameters ; void)",
    "insertText": "GetDrawParameters(FInstanceCullingDrawParams &OutParams)"
  },
  {
    "label": "FInstanceCullingManager()",
    "kind": "Method",
    "detail": "Function (OutParams = Parameters ; } } ; class FInstanceCullingDeferredContext ; class FInstanceCullingManager { public :)",
    "insertText": "FInstanceCullingManager(FSceneUniformBuffer& SceneUB, bool bInIsEnabled, FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "FInstanceCullingManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInstanceCullingManager()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "RegisterView()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RegisterView(const FViewInfo& ViewInfo)"
  },
  {
    "label": "AllocateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateViews(int32 NumViews)"
  },
  {
    "label": "FlushRegisteredViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRegisteredViews(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetDummyInstanceCullingUniformBuffer()",
    "kind": "Method",
    "detail": "Function (const TRDGUniformBufferRef<FInstanceCullingGlobalUniforms>)",
    "insertText": "GetDummyInstanceCullingUniformBuffer()"
  },
  {
    "label": "BeginDeferredCulling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDeferredCulling(FRDGBuilder& GraphBuilder, FGPUScene& GPUScene)"
  },
  {
    "label": "IsDeferredCullingActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeferredCullingActive()"
  },
  {
    "label": "FInstanceCullingManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstanceCullingManager(FInstanceCullingManager &)"
  }
]