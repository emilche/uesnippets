[
  {
    "label": "TRAITS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRAITS"
  },
  {
    "label": "ITypedGeomParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedGeomParam"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "CPROP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPROP"
  },
  {
    "label": "PROP",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PROP"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_IGeomParam_h # define Alembic_AbcGeom_IGeomParam_h # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / GeometryScope . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { template<class TRAITS> class ITypedGeomParam { public : typedef TRAITS::value_type value_type ; typedef Abc::ITypedArrayProperty<TRAITS> prop_type ; class Sample { public : typedef Sample this_type ; typedef Alembic::Util::shared_ptr<Abc::TypedArraySample<TRAITS>> samp_ptr_type ;)",
    "insertText": "Sample()"
  },
  {
    "label": "getIndices()",
    "kind": "Method",
    "detail": "Function (} Abc::UInt32ArraySamplePtr)",
    "insertText": "getIndices()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (m_vals .)",
    "insertText": "reset()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (m_scope = kUnknownScope ; m_isIndexed = false ; } bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(valid())"
  },
  {
    "label": "getInterpretation()",
    "kind": "Method",
    "detail": "Function (protected : class ITypedGeomParam<TRAITS> ; samp_ptr_type m_vals ; Abc::UInt32ArraySamplePtr m_indices ; GeometryScope m_scope ; bool m_isIndexed ; } ; typedef ITypedGeomParam<TRAITS> this_type ; typedef this_type::Sample sample_type ; const char*)",
    "insertText": "getInterpretation()"
  },
  {
    "label": "matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "matches(const AbcA::PropertyHeader &iHeader, SchemaInterpMatching iMatching = kStrictMatching)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(iHeader.isArray())"
  },
  {
    "label": "ITypedGeomParam()",
    "kind": "Method",
    "detail": "Function (} return false ; })",
    "insertText": "ITypedGeomParam()"
  },
  {
    "label": "ITypedGeomParam()",
    "kind": "Method",
    "detail": "Function (m_isIndexed = false ; } template<class CPROP>)",
    "insertText": "ITypedGeomParam(CPROP iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument())"
  },
  {
    "label": "ITypedGeomParam()",
    "kind": "Method",
    "detail": "Function (template<class PROP>)",
    "insertText": "ITypedGeomParam(PROP iThis, WrapExistingFlag iWrapFlag, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument())"
  },
  {
    "label": "getIndexed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getIndexed(sample_type &oSamp, const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "getExpanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getExpanded(sample_type &oSamp, const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "getIndexedValue()",
    "kind": "Method",
    "detail": "Function (sample_type)",
    "insertText": "getIndexedValue(const Abc::ISampleSelector &iSS = \\ Abc::ISampleSelector())"
  },
  {
    "label": "getIndexed()",
    "kind": "Method",
    "detail": "Function (sample_type ret ;)",
    "insertText": "getIndexed(ret, iSS)"
  },
  {
    "label": "getExpanded()",
    "kind": "Method",
    "detail": "Function (sample_type ret ;)",
    "insertText": "getExpanded(ret, iSS)"
  },
  {
    "label": "getDataType()",
    "kind": "Method",
    "detail": "Function (AbcA::DataType)",
    "insertText": "getDataType()"
  },
  {
    "label": "getArrayExtent()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getArrayExtent()"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (std::string e = m_valProp .)",
    "insertText": "getMetaData().get( \"arrayExtent\")"
  },
  {
    "label": "isIndexed()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "isIndexed()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "getName()"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (Abc::ICompoundProperty)",
    "insertText": "getParent()"
  },
  {
    "label": "getHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::PropertyHeader&)",
    "insertText": "getHeader()"
  },
  {
    "label": "getMetaData()",
    "kind": "Method",
    "detail": "Function (const AbcA::MetaData&)",
    "insertText": "getMetaData()"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isConstant()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(this_type::valid())"
  },
  {
    "label": "getValueProperty()",
    "kind": "Method",
    "detail": "Function (prop_type)",
    "insertText": "getValueProperty()"
  },
  {
    "label": "ITypedGeomParam()",
    "kind": "Method",
    "detail": "Function (} protected : prop_type m_valProp ; Abc::IUInt32ArrayProperty m_indicesProperty ; Abc::ICompoundProperty m_cprop ; bool m_isIndexed ; } ; template<class TRAITS> template<class CPROP> ITypedGeomParam<TRAITS)",
    "insertText": "ITypedGeomParam(CPROP iParent, const std::string &iName, const Abc::Argument &iArg0, const Abc::Argument &iArg1)"
  },
  {
    "label": "args()",
    "kind": "Method",
    "detail": "Function (Arguments)",
    "insertText": "args(GetErrorHandlerPolicy( iParent ))"
  },
  {
    "label": "setInto()",
    "kind": "Method",
    "detail": "Function (iArg0 .)",
    "insertText": "setInto(args)"
  },
  {
    "label": "getErrorHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getErrorHandler().setPolicy( args.getErrorHandlerPolicy())"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"ITypedGeomParam::ITypedGeomParam()\")"
  },
  {
    "label": "GetCompoundPropertyReaderPtr()",
    "kind": "Method",
    "detail": "Function (AbcA::CompoundPropertyReaderPtr parent =)",
    "insertText": "GetCompoundPropertyReaderPtr(iParent)"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(parent != NULL, \"NULL CompoundPropertyReader passed into \" << \"ITypedGeomParam ctor\")"
  },
  {
    "label": "getPropertyHeader()",
    "kind": "Method",
    "detail": "Function (const AbcA::PropertyHeader* pheader = parent ->)",
    "insertText": "getPropertyHeader(iName)"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(pheader != NULL, \"Nonexistent GeomParam: \" << iName)"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (m_cprop =)",
    "insertText": "ICompoundProperty(iParent, iName, args.getErrorHandlerPolicy())"
  },
  {
    "label": "IUInt32ArrayProperty()",
    "kind": "Method",
    "detail": "Function (m_indicesProperty =)",
    "insertText": "IUInt32ArrayProperty(m_cprop, \".indices\", iArg0, iArg1)"
  },
  {
    "label": "TRAITS()",
    "kind": "Method",
    "detail": "Function (m_valProp = ITypedArrayProperty<)",
    "insertText": "TRAITS(m_cprop, \".vals\", iArg0, iArg1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_isIndexed = true ; } else)",
    "insertText": "if(pheader->isArray())"
  },
  {
    "label": "TRAITS()",
    "kind": "Method",
    "detail": "Function (m_valProp = ITypedArrayProperty<)",
    "insertText": "TRAITS(iParent, iName, iArg0, iArg1)"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (m_isIndexed = false ; } else {)",
    "insertText": "ABCA_ASSERT(false, \"Invalid ITypedGeomParam: \" << iName)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END()"
  },
  {
    "label": "ITypedGeomParam()",
    "kind": "Method",
    "detail": "Function (} template<class TRAITS> template<class PROP> ITypedGeomParam<TRAITS)",
    "insertText": "ITypedGeomParam(PROP iThis, WrapExistingFlag iWrapFlag, const Abc::Argument &iArg0, const Abc::Argument &iArg1)"
  },
  {
    "label": "args()",
    "kind": "Method",
    "detail": "Function (Arguments)",
    "insertText": "args(GetErrorHandlerPolicy( iThis ))"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"ITypedGeomParam::ITypedGeomParam( wrap )\")"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(matches( ph, Abc::GetSchemaInterpMatching( iArg0, iArg1 ) ), \"Property \" << ph.getName() << \" is not an \" << \"ITypedGeomParam\")"
  },
  {
    "label": "ABCA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABCA_ASSERT(! ph.isScalar(), \"Property \" << ph.getName() << \" cannot be an ITypedGeomParam\")"
  },
  {
    "label": "ICompoundProperty()",
    "kind": "Method",
    "detail": "Function (m_cprop =)",
    "insertText": "ICompoundProperty(iThis, iWrapFlag, iArg0, iArg1)"
  },
  {
    "label": "TRAITS()",
    "kind": "Method",
    "detail": "Function (m_isIndexed = true ; } else { m_valProp = ITypedArrayProperty<)",
    "insertText": "TRAITS(iThis, iWrapFlag, iArg0, iArg1)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END_RESET()",
    "kind": "Method",
    "detail": "Function (m_isIndexed = false ; })",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END_RESET()"
  },
  {
    "label": "getIndexed()",
    "kind": "Method",
    "detail": "Function (} template<class TRAITS> void ITypedGeomParam<TRAITS)",
    "insertText": "getIndexed(typename ITypedGeomParam<TRAITS>::Sample &oSamp, const Abc::ISampleSelector &iSS)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (m_valProp .)",
    "insertText": "get(oSamp.m_vals, iSS)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (m_indicesProperty .)",
    "insertText": "get(oSamp.m_indices, iSS)"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (} else { uint32_t size = static_cast<)",
    "insertText": "uint32_t(oSamp.m_vals->size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32_t* v = new uint32_t [ size ] ;)",
    "insertText": "for(uint32_t i = 0 ; i < size ; ++i)"
  },
  {
    "label": "dims()",
    "kind": "Method",
    "detail": "Function (v [ i ] = i ; } const Alembic::Util::Dimensions)",
    "insertText": "dims(size)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (oSamp . m_indices .)",
    "insertText": "reset(new Abc::UInt32ArraySample( v, dims ), AbcA::TArrayDeleter<uint32_t>())"
  },
  {
    "label": "getScope()",
    "kind": "Method",
    "detail": "Function (} oSamp . m_scope = this ->)",
    "insertText": "getScope()"
  },
  {
    "label": "getExpanded()",
    "kind": "Method",
    "detail": "Function (oSamp . m_isIndexed = m_isIndexed ; } template<class TRAITS> void ITypedGeomParam<TRAITS)",
    "insertText": "getExpanded(typename ITypedGeomParam<TRAITS>::Sample &oSamp, const Abc::ISampleSelector &iSS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (oSamp . m_isIndexed = m_isIndexed ;)",
    "insertText": "if(! m_indicesProperty)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} else { Abc::UInt32ArraySamplePtr idxPtr = m_indicesProperty .)",
    "insertText": "getValue(iSS)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t size = idxPtr ->)",
    "insertText": "size()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TRAITS::value_type* v = new TRAITS::value_type [ size ] ;)",
    "insertText": "for(size_t i = 0 ; i < size ; ++i)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (v [)",
    "insertText": "i(*valPtr)[ (*idxPtr)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (oSamp . m_vals .)",
    "insertText": "reset(new Abc::TypedArraySample<TRAITS>( v, dims ), AbcA::TArrayDeleter<typename TRAITS::value_type>())"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (} } template<class TRAITS> size_t ITypedGeomParam<TRAITS)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"ITypedGeomParam::getNumSamples()\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(m_valProp)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"ITypedGeomParam::isConstant()\")"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"ITypedGeomParam::getName()\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(m_indicesProperty)"
  },
  {
    "label": "TimeSamplingPtr()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "TimeSamplingPtr()"
  }
]