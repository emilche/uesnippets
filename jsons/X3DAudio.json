[
  {
    "label": "X3DAUDIO_DISTANCE_CURVE_POINT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X3DAUDIO_DISTANCE_CURVE_POINT"
  },
  {
    "label": "X3DAUDIO_DISTANCE_CURVE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X3DAUDIO_DISTANCE_CURVE"
  },
  {
    "label": "X3DAUDIO_CONE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X3DAUDIO_CONE"
  },
  {
    "label": "X3DAUDIO_LISTENER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X3DAUDIO_LISTENER"
  },
  {
    "label": "X3DAUDIO_EMITTER",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X3DAUDIO_EMITTER"
  },
  {
    "label": "X3DAUDIO_DSP_SETTINGS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X3DAUDIO_DSP_SETTINGS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<windef . h> # if)",
    "insertText": "defined(_XBOX) #include <vectorintrinsics.h> #endif #include <d3d9types.h> #if !defined(_SPEAKER_POSITIONS_) #define _SPEAKER_POSITIONS_ #define SPEAKER_FRONT_LEFT 0x00000001 #define SPEAKER_FRONT_RIGHT 0x00000002 #define SPEAKER_FRONT_CENTER 0x00000004 #define SPEAKER_LOW_FREQUENCY 0x00000008 #define SPEAKER_BACK_LEFT 0x00000010 #define SPEAKER_BACK_RIGHT 0x00000020 #define SPEAKER_FRONT_LEFT_OF_CENTER 0x00000040 #define SPEAKER_FRONT_RIGHT_OF_CENTER 0x00000080 #define SPEAKER_BACK_CENTER 0x00000100 #define SPEAKER_SIDE_LEFT 0x00000200 #define SPEAKER_SIDE_RIGHT 0x00000400 #define SPEAKER_TOP_CENTER 0x00000800 #define SPEAKER_TOP_FRONT_LEFT 0x00001000 #define SPEAKER_TOP_FRONT_CENTER 0x00002000 #define SPEAKER_TOP_FRONT_RIGHT 0x00004000 #define SPEAKER_TOP_BACK_LEFT 0x00008000 #define SPEAKER_TOP_BACK_CENTER 0x00010000 #define SPEAKER_TOP_BACK_RIGHT 0x00020000 #define SPEAKER_RESERVED 0x7FFC0000 #define SPEAKER_ALL 0x80000000 #endif #if !defined(SPEAKER_MONO) #define SPEAKER_MONO SPEAKER_FRONT_CENTER #define SPEAKER_STEREO (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT) #define SPEAKER_2POINT1 (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT | SPEAKER_LOW_FREQUENCY) #define SPEAKER_SURROUND (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT | SPEAKER_FRONT_CENTER | SPEAKER_BACK_CENTER) #define SPEAKER_QUAD (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT | SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT) #define SPEAKER_4POINT1 (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT | SPEAKER_LOW_FREQUENCY | SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT) #define SPEAKER_5POINT1 (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT | SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY | SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT) #define SPEAKER_7POINT1 (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT | SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY | SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT | SPEAKER_FRONT_LEFT_OF_CENTER | SPEAKER_FRONT_RIGHT_OF_CENTER) #define SPEAKER_5POINT1_SURROUND (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT | SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY | SPEAKER_SIDE_LEFT | SPEAKER_SIDE_RIGHT) #define SPEAKER_7POINT1_SURROUND (SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT | SPEAKER_FRONT_CENTER | SPEAKER_LOW_FREQUENCY | SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT | SPEAKER_SIDE_LEFT | SPEAKER_SIDE_RIGHT) #endif #if defined(_XBOX) #define SPEAKER_XBOX SPEAKER_5POINT1 #endif #define X3DAUDIO_HANDLE_BYTESIZE 20 #define X3DAUDIO_PI 3.141592654f #define X3DAUDIO_2PI 6.283185307f #define X3DAUDIO_SPEED_OF_SOUND 343.5f #define X3DAUDIO_CALCULATE_MATRIX 0x00000001 #define X3DAUDIO_CALCULATE_DELAY 0x00000002 #define X3DAUDIO_CALCULATE_LPF_DIRECT 0x00000004 #define X3DAUDIO_CALCULATE_LPF_REVERB 0x00000008 #define X3DAUDIO_CALCULATE_REVERB 0x00000010 #define X3DAUDIO_CALCULATE_DOPPLER 0x00000020 #define X3DAUDIO_CALCULATE_EMITTER_ANGLE 0x00000040 #define X3DAUDIO_CALCULATE_ZEROCENTER 0x00010000 #define X3DAUDIO_CALCULATE_REDIRECT_TO_LFE 0x00020000 #pragma pack(push, 1)"
  },
  {
    "label": "X3DAudioDefault_LinearCurve()",
    "kind": "Method",
    "detail": "Function (typedef D3DVECTOR X3DAUDIO_VECTOR ; typedef BYTE X3DAUDIO_HANDLE [ X3DAUDIO_HANDLE_BYTESIZE ] ; typedef struct X3DAUDIO_DISTANCE_CURVE_POINT { FLOAT32 Distance ; FLOAT32 DSPSetting ; } X3DAUDIO_DISTANCE_CURVE_POINT,* LPX3DAUDIO_DISTANCE_CURVE_POINT ; typedef struct X3DAUDIO_DISTANCE_CURVE { X3DAUDIO_DISTANCE_CURVE_POINT* pPoints ; UINT32 PointCount ; } X3DAUDIO_DISTANCE_CURVE,* LPX3DAUDIO_DISTANCE_CURVE ; const X3DAUDIO_DISTANCE_CURVE_POINT X3DAudioDefault_LinearCurvePoints [ 2 ] = { 0 . 0 f,1 . 0 f,1 . 0 f,0 . 0 f } ; const X3DAUDIO_DISTANCE_CURVE)",
    "insertText": "X3DAudioDefault_LinearCurve(X3DAUDIO_DISTANCE_CURVE_POINT*)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef struct X3DAUDIO_CONE { FLOAT32 InnerAngle ; FLOAT32 OuterAngle ; FLOAT32 InnerVolume ; FLOAT32 OuterVolume ; FLOAT32 InnerLPF ; FLOAT32 OuterLPF ; FLOAT32 InnerReverb ; FLOAT32 OuterReverb ; } X3DAUDIO_CONE,* LPX3DAUDIO_CONE ; const X3DAUDIO_CONE X3DAudioDefault_DirectionalCone = { X3DAUDIO_PI / 2,X3DAUDIO_PI,1 . 0 f,0 . 7 0 8 f,0 . 0 f,0 . 2 5 f,0 . 7 0 8 f,1 . 0 f } ; typedef struct X3DAUDIO_LISTENER { X3DAUDIO_VECTOR OrientFront ; X3DAUDIO_VECTOR OrientTop ; X3DAUDIO_VECTOR Position ; X3DAUDIO_VECTOR Velocity ; X3DAUDIO_CONE* pCone ; } X3DAUDIO_LISTENER,* LPX3DAUDIO_LISTENER ; typedef struct X3DAUDIO_EMITTER { X3DAUDIO_CONE* pCone ; X3DAUDIO_VECTOR OrientFront ; X3DAUDIO_VECTOR OrientTop ; X3DAUDIO_VECTOR Position ; X3DAUDIO_VECTOR Velocity ; FLOAT32 InnerRadius ; FLOAT32 InnerRadiusAngle ; UINT32 ChannelCount ; FLOAT32 ChannelRadius ; FLOAT32* pChannelAzimuths ; X3DAUDIO_DISTANCE_CURVE* pVolumeCurve ; X3DAUDIO_DISTANCE_CURVE* pLFECurve ; X3DAUDIO_DISTANCE_CURVE* pLPFDirectCurve ; X3DAUDIO_DISTANCE_CURVE* pLPFReverbCurve ; X3DAUDIO_DISTANCE_CURVE* pReverbCurve ; FLOAT32 CurveDistanceScaler ; FLOAT32 DopplerScaler ; } X3DAUDIO_EMITTER,* LPX3DAUDIO_EMITTER ; typedef struct X3DAUDIO_DSP_SETTINGS { FLOAT32* pMatrixCoefficients ; FLOAT32* pDelayTimes ; UINT32 SrcChannelCount ; UINT32 DstChannelCount ; FLOAT32 LPFDirectCoefficient ; FLOAT32 LPFReverbCoefficient ; FLOAT32 ReverbLevel ; FLOAT32 DopplerFactor ; FLOAT32 EmitterToListenerAngle ; FLOAT32 EmitterToListenerDistance ; FLOAT32 EmitterVelocityComponent ; FLOAT32 ListenerVelocityComponent ; } X3DAUDIO_DSP_SETTINGS,* LPX3DAUDIO_DSP_SETTINGS ; # if)",
    "insertText": "defined(_XBOX) || defined(X3DAUDIOSTATIC) #define X3DAUDIO_API_(type) EXTERN_C type STDAPIVCALLTYPE #else #if defined(X3DEXPORT) #define X3DAUDIO_API_(type) EXTERN_C __declspec(dllexport) type STDAPIVCALLTYPE #else #define X3DAUDIO_API_(type) EXTERN_C __declspec(dllimport) type STDAPIVCALLTYPE #endif #endif #define X3DAUDIO_IMP_(type) type STDMETHODVCALLTYPE X3DAUDIO_API_(void) X3DAudioInitialize (UINT32 SpeakerChannelMask, FLOAT32 SpeedOfSound, __out X3DAUDIO_HANDLE Instance)"
  },
  {
    "label": "X3DAUDIO_API_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X3DAUDIO_API_(void) X3DAudioCalculate (__in const X3DAUDIO_HANDLE Instance, __in const X3DAUDIO_LISTENER* pListener, __in const X3DAUDIO_EMITTER* pEmitter, UINT32 Flags, __inout X3DAUDIO_DSP_SETTINGS* pDSPSettings)"
  }
]