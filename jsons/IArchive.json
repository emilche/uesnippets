[
  {
    "label": "IObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IObject"
  },
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "ARCHIVE_CTOR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARCHIVE_CTOR"
  },
  {
    "label": "IArchive()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_Abc_IArchive_h # define Alembic_Abc_IArchive_h # include<Alembic / Util / Export . h> # include<Alembic / Abc / Foundation . h> # include<Alembic / Abc / Base . h> # include<Alembic / Abc / Argument . h> namespace Alembic { namespace Abc { namespace ALEMBIC_VERSION_NS { class IObject ; class ALEMBIC_EXPORT IArchive : public Base { public : typedef IArchive this_type ;)",
    "insertText": "IArchive()"
  },
  {
    "label": "IArchive()",
    "kind": "Method",
    "detail": "Function (} template<class ARCHIVE_CTOR>)",
    "insertText": "IArchive(ARCHIVE_CTOR iCtor, const std::string &iFileName, ErrorHandler::Policy iPolicy = ErrorHandler::kThrowPolicy, AbcA::ReadArraySampleCachePtr iCachePtr = AbcA::ReadArraySampleCachePtr())"
  },
  {
    "label": "IArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IArchive(AbcA::ArchiveReaderPtr iPtr, ErrorHandler::Policy iPolicy = ErrorHandler::kThrowPolicy ) : m_archive( iPtr)"
  },
  {
    "label": "getErrorHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getErrorHandler().setPolicy( iPolicy)"
  },
  {
    "label": "IArchive()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IArchive(AbcA::ArchiveReaderPtr iPtr, WrapExistingFlag , ErrorHandler::Policy iPolicy = ErrorHandler::kThrowPolicy ) : m_archive( iPtr)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getName()"
  },
  {
    "label": "getTop()",
    "kind": "Method",
    "detail": "Function (IObject)",
    "insertText": "getTop()"
  },
  {
    "label": "getReadArraySampleCachePtr()",
    "kind": "Method",
    "detail": "Function (AbcA::ReadArraySampleCachePtr)",
    "insertText": "getReadArraySampleCachePtr()"
  },
  {
    "label": "setReadArraySampleCachePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setReadArraySampleCachePtr(AbcA::ReadArraySampleCachePtr iPtr)"
  },
  {
    "label": "getPtr()",
    "kind": "Method",
    "detail": "Function (AbcA::ArchiveReaderPtr)",
    "insertText": "getPtr()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (m_archive .)",
    "insertText": "reset()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling(uint32_t iIndex)"
  },
  {
    "label": "getNumTimeSamplings()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "getNumTimeSamplings()"
  },
  {
    "label": "getMaxNumSamplesForTimeSamplingIndex()",
    "kind": "Method",
    "detail": "Function (index_t)",
    "insertText": "getMaxNumSamplesForTimeSamplingIndex(uint32_t iIndex)"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "valid()"
  },
  {
    "label": "getArchiveVersion()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getArchiveVersion()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_OPERATOR_BOOL(valid())"
  },
  {
    "label": "GetArchiveReaderPtr()",
    "kind": "Method",
    "detail": "Function (private : AbcA::ArchiveReaderPtr m_archive ; } ; AbcA::ArchiveReaderPtr)",
    "insertText": "GetArchiveReaderPtr(IArchive& iPrp)"
  },
  {
    "label": "IArchive()",
    "kind": "Method",
    "detail": "Function (} template<class ARCHIVE_CTOR>)",
    "insertText": "IArchive(ARCHIVE_CTOR iCtor, const std::string &iFileName, ErrorHandler::Policy iPolicy, AbcA::ReadArraySampleCachePtr iCachePtr)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_BEGIN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_BEGIN(\"IArchive::IArchive( iFileName )\")"
  },
  {
    "label": "iCtor()",
    "kind": "Method",
    "detail": "Function (m_archive =)",
    "insertText": "iCtor(iFileName, iCachePtr)"
  },
  {
    "label": "ALEMBIC_ABC_SAFE_CALL_END_RESET()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ALEMBIC_ABC_SAFE_CALL_END_RESET()"
  }
]