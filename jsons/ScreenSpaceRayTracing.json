[
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FSceneTextureParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneTextureParameters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTiledReflection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTiledReflection"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderGraph . h \" # include \" ScreenSpaceDenoise . h \" # include \" IndirectLightRendering . h \" class FViewInfo ; class FSceneTextureParameters ; enum class ESSRQuality { VisualizeSSR,Low,Medium,High,Epic,MAX } ; struct FTiledReflection { FRDGBufferRef DrawIndirectParametersBuffer ; FRDGBufferRef DispatchIndirectParametersBuffer ; FRDGBufferSRVRef TileListDataBufferSRV ; uint32 TileSize ; } ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FCommonScreenSpaceRayParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(HybridIndirectLighting::FCommonParameters, CommonDiffuseParameters) SHADER_PARAMETER(FVector4f, HZBUvFactorAndInvFactor) SHADER_PARAMETER(FVector4f, ColorBufferScaleBias) SHADER_PARAMETER(FVector2f, ReducedColorUVMax) SHADER_PARAMETER(FVector2f, FullResPixelOffset) SHADER_PARAMETER(float, PixelPositionToFullResPixel) SHADER_PARAMETER(int32, bRejectUncertainRays) SHADER_PARAMETER(int32, bTerminateCertainRay) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, FurthestHZBTexture) SHADER_PARAMETER_SAMPLER(SamplerState, FurthestHZBTextureSampler) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, ColorTexture) SHADER_PARAMETER_SAMPLER(SamplerState, ColorTextureSampler) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, AlphaTexture) SHADER_PARAMETER_SAMPLER(SamplerState, AlphaTextureSampler) SHADER_PARAMETER_STRUCT_REF(FViewUniformShaderParameters, ViewUniformBuffer) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<float4>, DebugOutput) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<float4>, ScreenSpaceRayTracingDebugOutput) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FPrevSceneColorMip, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, SceneColor) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<float>, SceneAlpha) END_SHADER_PARAMETER_STRUCT() bool ShouldKeepBleedFreeSceneColor(const FViewInfo& View)"
  },
  {
    "label": "ShouldRenderScreenSpaceReflections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderScreenSpaceReflections(const FViewInfo& View)"
  },
  {
    "label": "ShouldRenderScreenSpaceReflectionsWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderScreenSpaceReflectionsWater(const FViewInfo& View)"
  },
  {
    "label": "ProcessForNextFrameScreenSpaceRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessForNextFrameScreenSpaceRayTracing(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FRDGTextureRef CurrentSceneColor, const FViewInfo& View)"
  },
  {
    "label": "GetSSRQualityForView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSSRQualityForView(const FViewInfo& View, ESSRQuality* OutQuality, IScreenSpaceDenoiser::FReflectionsRayTracingConfig* OutRayTracingConfigs)"
  },
  {
    "label": "IsSSRTemporalPassRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSSRTemporalPassRequired(const FViewInfo& View)"
  },
  {
    "label": "GetSSGIRayCountPerTracingPixel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSSGIRayCountPerTracingPixel()"
  },
  {
    "label": "ReducePrevSceneColorMip()",
    "kind": "Method",
    "detail": "Function (FPrevSceneColorMip)",
    "insertText": "ReducePrevSceneColorMip(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FViewInfo& View)"
  },
  {
    "label": "RenderScreenSpaceReflections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderScreenSpaceReflections(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const FRDGTextureRef CurrentSceneColor, const FViewInfo& View, ESSRQuality SSRQuality, bool bDenoiser, IScreenSpaceDenoiser::FReflectionsInputs* DenoiserInputs, bool bSingleLayerWater = false, FTiledReflection* TiledScreenSpaceReflection = nullptr)"
  },
  {
    "label": "IsScreenSpaceDiffuseIndirectSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScreenSpaceDiffuseIndirectSupported(const FViewInfo& View)"
  },
  {
    "label": "CastStandaloneDiffuseIndirectRays()",
    "kind": "Method",
    "detail": "Function (IScreenSpaceDenoiser::FDiffuseIndirectInputs)",
    "insertText": "CastStandaloneDiffuseIndirectRays(FRDGBuilder& GraphBuilder, const HybridIndirectLighting::FCommonParameters& CommonParameters, const FPrevSceneColorMip& PrevSceneColor, const FViewInfo& View)"
  },
  {
    "label": "SetupCommonScreenSpaceRayParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupCommonScreenSpaceRayParameters(FRDGBuilder& GraphBuilder, const FSceneTextureParameters& SceneTextures, const ScreenSpaceRayTracing::FPrevSceneColorMip& PrevSceneColor, const FViewInfo& View, FCommonScreenSpaceRayParameters* OutParameters)"
  },
  {
    "label": "ComputeSSRParams()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "ComputeSSRParams(const FViewInfo& View, ESSRQuality SSRQuality, bool bEnableDiscard)"
  }
]