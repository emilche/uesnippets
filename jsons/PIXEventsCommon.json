[
  {
    "label": "PIXEventsBlockInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PIXEventsBlockInfo"
  },
  {
    "label": "PIXEventsThreadInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PIXEventsThreadInfo"
  },
  {
    "label": "PIXEventType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PIXEventType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PIXInferScopedEventType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PIXInferScopedEventType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef _PIXEventsCommon_H_ # define _PIXEventsCommon_H_ # if)",
    "insertText": "defined(__has_feature) #if __has_feature(address_sanitizer) #define PIX_ASAN_ENABLED #endif #elif defined(__SANITIZE_ADDRESS__) #define PIX_ASAN_ENABLED #endif #if defined(PIX_ENABLE_BLOCK_ARGUMENT_COPY) # define PIX_ENABLE_BLOCK_ARGUMENT_COPY_SET 0 #elif defined(PIX_ASAN_ENABLED) #define PIX_ENABLE_BLOCK_ARGUMENT_COPY 0 #define PIX_ENABLE_BLOCK_ARGUMENT_COPY_SET 1 #endif #if !defined(PIX_ENABLE_BLOCK_ARGUMENT_COPY)"
  },
  {
    "label": "PIXEventsReplaceBlock()",
    "kind": "Method",
    "detail": "Function (struct PIXEventsThreadInfo { PIXEventsBlockInfo* block ; UINT64* biasedLimit ; UINT64* destination ; } ; \" C \" UINT64 WINAPI)",
    "insertText": "PIXEventsReplaceBlock(PIXEventsThreadInfo * threadInfo, bool getEarliestTime)"
  },
  {
    "label": "PIXEventsSizeMax()",
    "kind": "Method",
    "detail": "Function (# define PIX_EVENT_METADATA_NONE 0 x0 # define PIX_EVENT_METADATA_ON_CONTEXT 0 x1 # define PIX_EVENT_METADATA_STRING_IS_ANSI 0 x2 # define PIX_EVENT_METADATA_HAS_COLOR 0 xF0 # ifndef PIX_GAMING_XBOX # include \" PIXEventsLegacy . h \" # endif enum PIXEventType : UINT8 { PIXEvent_EndEvent = 0 x00,PIXEvent_BeginEvent = 0 x01,PIXEvent_SetMarker = 0 x02,} ; const UINT64 PIXEventsReservedRecordSpaceQwords = 6 4 ; const UINT64 PIXEventsReservedTailSpaceQwords = 2 ; const UINT64 PIXEventsSafeFastCopySpaceQwords = PIXEventsReservedRecordSpaceQwords - PIXEventsReservedTailSpaceQwords ; const UINT64 PIXEventsGraphicsRecordSpaceQwords = 6 4 ; const UINT64 PIXEventsBlockEndMarker = 0 x00000000000FFF80 ; const UINT64 PIXEventsSizeWriteMask = 0 x000000000000007F ; const UINT64 PIXEventsSizeBitShift = 0 ; const UINT64 PIXEventsSizeReadMask = PIXEventsSizeWriteMask<<PIXEventsSizeBitShift ; const UINT64)",
    "insertText": "PIXEventsSizeMax(1ull << 7)"
  },
  {
    "label": "PIXEncodeEventInfo()",
    "kind": "Method",
    "detail": "Function (const UINT64 PIXEventsTypeWriteMask = 0 x000000000000001F ; const UINT64 PIXEventsTypeBitShift = 7 ; const UINT64 PIXEventsTypeReadMask = PIXEventsTypeWriteMask<<PIXEventsTypeBitShift ; const UINT64 PIXEventsMetadataWriteMask = 0 x00000000000000FF ; const UINT64 PIXEventsMetadataBitShift = 1 2 ; const UINT64 PIXEventsMetadataReadMask = PIXEventsMetadataWriteMask<<PIXEventsMetadataBitShift ; const UINT64 PIXEventsTimestampWriteMask = 0 x00000FFFFFFFFFFF ; const UINT64 PIXEventsTimestampBitShift = 2 0 ; const UINT64 PIXEventsTimestampReadMask = PIXEventsTimestampWriteMask<<PIXEventsTimestampBitShift ; UINT64)",
    "insertText": "PIXEncodeEventInfo(UINT64 timestamp, PIXEventType eventType, UINT8 eventSize, UINT8 eventMetadata)"
  },
  {
    "label": "PIXEncodeIndexColor()",
    "kind": "Method",
    "detail": "Function (} UINT8)",
    "insertText": "PIXEncodeIndexColor(UINT8 color)"
  },
  {
    "label": "PIXEncodeStringInfo()",
    "kind": "Method",
    "detail": "Function (} const UINT64 PIXEventsStringAlignmentWriteMask = 0 x000000000000000F ; const UINT64 PIXEventsStringAlignmentReadMask = 0 xF000000000000000 ; const UINT64 PIXEventsStringAlignmentBitShift = 6 0 ; const UINT64 PIXEventsStringCopyChunkSizeWriteMask = 0 x000000000000001F ; const UINT64 PIXEventsStringCopyChunkSizeReadMask = 0 x0F80000000000000 ; const UINT64 PIXEventsStringCopyChunkSizeBitShift = 5 5 ; const UINT64 PIXEventsStringIsANSIWriteMask = 0 x0000000000000001 ; const UINT64 PIXEventsStringIsANSIReadMask = 0 x0040000000000000 ; const UINT64 PIXEventsStringIsANSIBitShift = 5 4 ; const UINT64 PIXEventsStringIsShortcutWriteMask = 0 x0000000000000001 ; const UINT64 PIXEventsStringIsShortcutReadMask = 0 x0020000000000000 ; const UINT64 PIXEventsStringIsShortcutBitShift = 5 3 ; void)",
    "insertText": "PIXEncodeStringInfo(UINT64*& destination, BOOL isANSI)"
  },
  {
    "label": "encodedStringInfo()",
    "kind": "Method",
    "detail": "Function (const UINT64)",
    "insertText": "encodedStringInfo((sizeof(UINT64) & PIXEventsStringCopyChunkSizeWriteMask) << PIXEventsStringCopyChunkSizeBitShift) | (((UINT64)isANSI & PIXEventsStringIsANSIWriteMask) << PIXEventsStringIsANSIBitShift)"
  },
  {
    "label": "PIXIsPointerAligned()",
    "kind": "Method",
    "detail": "Function (* destination + + = encodedStringInfo ; } template<UINT alignment,class T> bool)",
    "insertText": "PIXIsPointerAligned(T* pointer)"
  },
  {
    "label": "PIXCopyEventArgument()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "PIXCopyEventArgument(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, T argument)"
  },
  {
    "label": "ull()",
    "kind": "Method",
    "detail": "Function (* destination = 0)",
    "insertText": "ull((T*)destination)"
  },
  {
    "label": "INT32()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "INT32(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, INT32 argument)"
  },
  {
    "label": "INT64()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "INT64(destination) = static_cast<INT64>(argument)"
  },
  {
    "label": "UINT32()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "UINT32(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, UINT32 argument)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (* destination = static_cast<)",
    "insertText": "UINT64(argument)"
  },
  {
    "label": "INT64()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "INT64(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, INT64 argument)"
  },
  {
    "label": "INT64()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "INT64(destination)"
  },
  {
    "label": "UINT64()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "UINT64(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, UINT64 argument)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (* destination = argument ; + + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "float(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, float argument)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "double(destination) = static_cast<double>(argument)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "char(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, char argument)"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "UINT8(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, UINT8 argument)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "bool(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, bool argument)"
  },
  {
    "label": "PIXCopyEventStringArgumentSlow()",
    "kind": "Method",
    "detail": "Function (+ + destination ; } } void)",
    "insertText": "PIXCopyEventStringArgumentSlow(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (UINT64 c = static_cast<)",
    "insertText": "UINT8(argument[0])"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (* destination + + = 0 ; return ; } UINT64 x = c ; c = static_cast<)",
    "insertText": "UINT8(argument[1])"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<8 ; c = static_cast<)",
    "insertText": "UINT8(argument[2])"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<1 6 ; c = static_cast<)",
    "insertText": "UINT8(argument[3])"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<2 4 ; c = static_cast<)",
    "insertText": "UINT8(argument[4])"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<3 2 ; c = static_cast<)",
    "insertText": "UINT8(argument[5])"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<4 0 ; c = static_cast<)",
    "insertText": "UINT8(argument[6])"
  },
  {
    "label": "UINT8()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<4 8 ; c = static_cast<)",
    "insertText": "UINT8(argument[7])"
  },
  {
    "label": "PIXCopyEventArgumentSlow()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<5 6 ;* destination + + = x ; argument + = 8 ; } } template<bool> void)",
    "insertText": "PIXCopyEventArgumentSlow(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "PIXEncodeStringInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXEncodeStringInfo(destination, TRUE)"
  },
  {
    "label": "PIXCopyEventStringArgumentSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyEventStringArgumentSlow(destination, limit, argument)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} template<> void PIXCopyEventArgumentSlow<)",
    "insertText": "false(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(defined(_M_X64) || defined(_M_IX86)) && PIX_ENABLE_BLOCK_ARGUMENT_COPY inline void PIXCopyEventStringArgumentFast(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "source()",
    "kind": "Method",
    "detail": "Function (UINT64 mask1 = 0 x0101010101010101ULL ; UINT64 mask2 = 0 x8080808080808080ULL ; UINT64*)",
    "insertText": "source(UINT64*)"
  },
  {
    "label": "isTerminated()",
    "kind": "Method",
    "detail": "Function (UINT64 qword =* source + + ;* destination + + = qword ; UINT64)",
    "insertText": "isTerminated(qword - mask1) & (~qword & mask2)"
  },
  {
    "label": "PCSTR()",
    "kind": "Method",
    "detail": "Function (break ; } } } # endif template<> void PIXCopyEventArgument<)",
    "insertText": "PCSTR(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(_M_X64) || defined(_M_IX86)) && PIX_ENABLE_BLOCK_ARGUMENT_COPY if (PIXIsPointerAligned<8>(argument))"
  },
  {
    "label": "PIXCopyEventStringArgumentFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyEventStringArgumentFast(destination, limit, argument)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (} else # endif { PIXCopyEventArgumentSlow<)",
    "insertText": "true(destination, limit, argument)"
  },
  {
    "label": "PIXCopyStringArgument()",
    "kind": "Method",
    "detail": "Function (} } else {* destination + + = 0 ull ; } } } void)",
    "insertText": "PIXCopyStringArgument(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCSTR argument)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} else # endif { PIXCopyEventArgumentSlow<)",
    "insertText": "false(destination, limit, argument)"
  },
  {
    "label": "PSTR()",
    "kind": "Method",
    "detail": "Function (} } else {* destination + + = 0 ull ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "PSTR(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PSTR argument)"
  },
  {
    "label": "PIXCopyEventArgument()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyEventArgument(destination, limit, (PCSTR)argument)"
  },
  {
    "label": "PIXCopyStringArgument()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXCopyStringArgument(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PSTR argument)"
  },
  {
    "label": "PIXCopyStringArgument()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyStringArgument(destination, limit, (PCSTR)argument)"
  },
  {
    "label": "PIXCopyEventStringArgumentSlow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXCopyEventStringArgumentSlow(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "UINT16()",
    "kind": "Method",
    "detail": "Function (UINT64 c = static_cast<)",
    "insertText": "UINT16(argument[0])"
  },
  {
    "label": "UINT16()",
    "kind": "Method",
    "detail": "Function (* destination + + = 0 ; return ; } UINT64 x = c ; c = static_cast<)",
    "insertText": "UINT16(argument[1])"
  },
  {
    "label": "UINT16()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<1 6 ; c = static_cast<)",
    "insertText": "UINT16(argument[2])"
  },
  {
    "label": "UINT16()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<3 2 ; c = static_cast<)",
    "insertText": "UINT16(argument[3])"
  },
  {
    "label": "PIXCopyEventArgumentSlow()",
    "kind": "Method",
    "detail": "Function (* destination + + = x ; return ; } x | = c<<4 8 ;* destination + + = x ; argument + = 4 ; } } template<bool> void)",
    "insertText": "PIXCopyEventArgumentSlow(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "PIXEncodeStringInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXEncodeStringInfo(destination, FALSE)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} template<> void PIXCopyEventArgumentSlow<)",
    "insertText": "false(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(defined(_M_X64) || defined(_M_IX86)) && PIX_ENABLE_BLOCK_ARGUMENT_COPY inline void PIXCopyEventStringArgumentFast(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UINT64 qword =* source + + ;* destination + + = qword ;)",
    "insertText": "if(!((qword & 0xFFFF000000000000) && (qword & 0xFFFF00000000) && (qword & 0xFFFF0000) && (qword & 0xFFFF)))"
  },
  {
    "label": "PCWSTR()",
    "kind": "Method",
    "detail": "Function (break ; } } } # endif template<> void PIXCopyEventArgument<)",
    "insertText": "PCWSTR(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "PIXCopyStringArgument()",
    "kind": "Method",
    "detail": "Function (} } else {* destination + + = 0 ull ; } } } void)",
    "insertText": "PIXCopyStringArgument(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PCWSTR argument)"
  },
  {
    "label": "PWSTR()",
    "kind": "Method",
    "detail": "Function (} } else {* destination + + = 0 ull ; } } template<> void PIXCopyEventArgument<)",
    "insertText": "PWSTR(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PWSTR argument)"
  },
  {
    "label": "PIXCopyEventArgument()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyEventArgument(destination, limit, (PCWSTR)argument)"
  },
  {
    "label": "PIXCopyStringArgument()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PIXCopyStringArgument(_Out_writes_to_ptr_(limit) UINT64*& destination, _In_ const UINT64* limit, _In_ PWSTR argument)"
  },
  {
    "label": "PIXCopyStringArgument()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PIXCopyStringArgument(destination, limit, (PCWSTR)argument)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # if)",
    "insertText": "defined(__d3d12_x_h__) || defined(__d3d12_xs_h__) || defined(__d3d12_h__) inline void PIXSetGPUMarkerOnContext(_In_ ID3D12GraphicsCommandList* commandList, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "SetMarker()",
    "kind": "Method",
    "detail": "Function (commandList ->)",
    "insertText": "SetMarker(D3D12_EVENT_METADATA, data, size)"
  },
  {
    "label": "PIXSetGPUMarkerOnContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXSetGPUMarkerOnContext(_In_ ID3D12CommandQueue* commandQueue, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "PIXBeginGPUEventOnContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXBeginGPUEventOnContext(_In_ ID3D12GraphicsCommandList* commandList, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "BeginEvent()",
    "kind": "Method",
    "detail": "Function (commandList ->)",
    "insertText": "BeginEvent(D3D12_EVENT_METADATA, data, size)"
  },
  {
    "label": "PIXBeginGPUEventOnContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXBeginGPUEventOnContext(_In_ ID3D12CommandQueue* commandQueue, _In_reads_bytes_(size) void* data, UINT size)"
  },
  {
    "label": "PIXEndGPUEventOnContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXEndGPUEventOnContext(_In_ ID3D12GraphicsCommandList* commandList)"
  },
  {
    "label": "EndEvent()",
    "kind": "Method",
    "detail": "Function (commandList ->)",
    "insertText": "EndEvent()"
  },
  {
    "label": "PIXEndGPUEventOnContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PIXEndGPUEventOnContext(_In_ ID3D12CommandQueue* commandQueue)"
  }
]