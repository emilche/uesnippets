[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TImplicitObjectIntersection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TImplicitObjectIntersection"
  },
  {
    "label": "TImplicitObjectIntersection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Array . h \" # include \" Chaos / ImplicitObject . h \" # include<memory> namespace Chaos { template<class T,int d> class TImplicitObjectIntersection : public FImplicitObject { public : using FImplicitObject::SignedDistance ;)",
    "insertText": "TImplicitObjectIntersection(TArray<Chaos::FImplicitObjectPtr>&& Objects) : FImplicitObject(EImplicitObject::HasBoundingBox) , MObjects(MoveTemp(Objects)) , MLocalBoundingBox(MObjects[0]->BoundingBox())"
  },
  {
    "label": "ShrinkToInclude()",
    "kind": "Method",
    "detail": "Function (MLocalBoundingBox .)",
    "insertText": "ShrinkToInclude(MObjects[i]->BoundingBox())"
  },
  {
    "label": "TImplicitObjectIntersection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TImplicitObjectIntersection(const TImplicitObjectIntersection<T, d>& Other)"
  },
  {
    "label": "TImplicitObjectIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TImplicitObjectIntersection(TImplicitObjectIntersection<T, d>&& Other) : FImplicitObject(EImplicitObject::HasBoundingBox) , MObjects(MoveTemp(Other.MObjects)) , MLocalBoundingBox(MoveTemp(Other.MLocalBoundingBox))"
  },
  {
    "label": "TImplicitObjectIntersection()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TImplicitObjectIntersection()"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "PhiWithNormal(const TVector<T, d>& x, TVector<T, d>& Normal)"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (T Phi = MObjects [ 0 ] ->)",
    "insertText": "PhiWithNormal(x, Normal)"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (TVector<T,d> NextNormal ; T NextPhi = MObjects [ i ] ->)",
    "insertText": "PhiWithNormal(x, NextNormal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Phi = NextPhi ; Normal = NextNormal ; } else)",
    "insertText": "if(NextPhi == Phi)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (Normal + = NextNormal ; } } Normal .)",
    "insertText": "Normalize()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32 OutHash = MObjects .)",
    "insertText": "Num() > 0 ? MObjects[0]->GetTypeHash()"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (OutHash =)",
    "insertText": "HashCombine(Ptr->GetTypeHash(), OutHash)"
  },
  {
    "label": "FindClosestIntersectionImp()",
    "kind": "Method",
    "detail": "Function (} return OutHash ; } private : Pair<TVector<T,d>,bool>)",
    "insertText": "FindClosestIntersectionImp(const TVector<T, d>& StartPoint, const TVector<T, d>& EndPoint, const T Thickness)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<Pair<T,TVector<T,d>>> Intersections ;)",
    "insertText": "for(int32 i = 0; i < MObjects.Num(); ++i)"
  },
  {
    "label": "FindClosestIntersection()",
    "kind": "Method",
    "detail": "Function (auto NextClosestIntersection = MObjects [ i ] ->)",
    "insertText": "FindClosestIntersection(StartPoint, EndPoint, Thickness)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Intersections .)",
    "insertText": "Add(MakePair((FReal)(NextClosestIntersection.First - StartPoint).Size(), NextClosestIntersection.First))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} Intersections .)",
    "insertText": "Sort([](const Pair<T, TVector<T, d>>& Elem1, const Pair<T, TVector<T, d>>& Elem2) { return Elem1.First < Elem2.First; })"
  },
  {
    "label": "MakePair()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "MakePair(TVector<T, d>(0), false)"
  }
]