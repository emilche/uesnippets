[
  {
    "label": "ElasticFEM",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElasticFEM"
  },
  {
    "label": "ElasticFEM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ArrayCollection . h \" # include \" Chaos / PBDActiveView . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # include \" Chaos / KinematicGeometryParticles . h \" # include \" Chaos / VelocityField . h \" namespace Chaos::Softs { template<T,ParticleType> class ElasticFEM { public : const TArray<TVector<int32,4>>& Mesh ; TArray<T> DmInverse ; TArray<T> Measure ; TArray<TVector<T,3>> ElementForces ; int32 Np ; TArray<T> MNodalMass ; TArray<TArray<TVector<int32,2>>> MIncidentElements ;)",
    "insertText": "ElasticFEM(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const TArray<TArray<TVector<int32, 2>>>& IncidentElementsIn ) : Mesh(InMesh), MIncidentElements(IncidentElementsIn)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (Np = InParticles .)",
    "insertText": "Size()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (DmInverse .)",
    "insertText": "Init((T)0., 9 * Mesh.Num())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Measure .)",
    "insertText": "Init((T)0., Mesh.Num())"
  },
  {
    "label": "DsInit()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> Dm =)",
    "insertText": "DsInit(e, InParticles)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> DmInv = Dm .)",
    "insertText": "Inverse()"
  },
  {
    "label": "DmInverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DmInverse(3 * 3) * e + 3 * r + c] = DmInv.GetAt(r, c)"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (} } Measure [ e ] = Dm .)",
    "insertText": "Determinant() / (T)"
  },
  {
    "label": "ComputeNodalMass()",
    "kind": "Method",
    "detail": "Function (Measure [ e ] = - Measure [ e ] ; } } } void)",
    "insertText": "ComputeNodalMass(const T Density)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (MNodalMass .)",
    "insertText": "Init((T)0., Np)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (T NodeMassContribution = Density* Measure [)",
    "insertText": "e(T)"
  },
  {
    "label": "DsInit()",
    "kind": "Method",
    "detail": "Function (MNodalMass [ Mesh [ e ] [ i ] ] + = NodeMassContribution ; } } } PMatrix<T,3,3>)",
    "insertText": "DsInit(const int e, const ParticleType& InParticles)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Result((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetAt(c, i, InParticles.GetX(Mesh[e][i + 1])[c] - InParticles.GetX(Mesh[e][0])[c])"
  },
  {
    "label": "Ds()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } PMatrix<T,3,3>)",
    "insertText": "Ds(const int e, const ParticleType& InParticles)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetAt(c, i, InParticles.P(Mesh[e][i + 1])[c] - InParticles.P(Mesh[e][0])[c])"
  },
  {
    "label": "Ds()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } PMatrix<T,3,3>)",
    "insertText": "Ds(const int e, const TArray<TVector<T, 3>>& InParticles)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetAt(c, i, InParticles[Mesh[e][i + 1]][c] - InParticles[Mesh[e][0]][c])"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } PMatrix<T,3,3>)",
    "insertText": "F(const int e, const ParticleType& InParticles)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,3,3>)",
    "insertText": "F(const int e, const TArray<TVector<T, 3>>& InParticles)"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (} PMatrix<T,3,3>)",
    "insertText": "ElementDmInv(const int e)"
  },
  {
    "label": "DmInv()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "DmInv((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (DmInv .)",
    "insertText": "SetAt(r, c, DmInverse[(3 * 3) * e + 3 * r + c])"
  },
  {
    "label": "AddInternalElasticForce()",
    "kind": "Method",
    "detail": "Function (} } return DmInv ; } template<Func> void)",
    "insertText": "AddInternalElasticForce(const ParticleType& InParticles, Func P, TArray<TVector<T, 3>>& Force, const TArray<TArray<TVector<int32, 2>>>* IncidentElements = nullptr, T Scale = (T)1., const TArray<T>* NodalMass = 0)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> Fe =)",
    "insertText": "F(e, InParticles)"
  },
  {
    "label": "Pe()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Pe(0.f)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(Fe, Pe, e)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> g = - Measure [)",
    "insertText": "e(ElementDmInv(e).GetTransposed())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T InverseMass = 1 . f ;)",
    "insertText": "if(NodalMass) InverseMass = 1.f / NodalMass -> operator[](Mesh[e][ie+1])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } T InverseMass = 1 . f ;)",
    "insertText": "if(NodalMass) InverseMass = 1.f / NodalMass->operator[](Mesh[e][0])"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } } } else { ElementForces .)",
    "insertText": "Init(TVector<T, 3>(0.f), 4 * Mesh.Num())"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Mesh.Num(), [&](const int32 e) { PMatrix<T, 3, 3> Fe = F(e, InParticles); PMatrix<T, 3, 3> Pe(0.f); P(Fe, Pe, e); PMatrix<T, 3, 3> g = -Measure[e] * (ElementDmInv(e).GetTransposed()) * Pe; for (int32 ie = 0; ie < 3; ie++) { for (int32 c = 0; c < 3; c++) { ElementForces[4 * e + ie + 1][c] += g.GetAt(c, ie); } } for (int32 c = 0; c < 3; c++) { for (int32 h = 0; h < 3; h++) { ElementForces[4 * e][c] -= g.GetAt(c, h); } } })"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(IncidentElements->Num(), [&](const int32 i) { for (int32 e = 0; e < (*IncidentElements)[i].Num(); e++) { for (int32 c = 0; c < 3; c++) { Force[Mesh[(*IncidentElements)[i][e][0]][(*IncidentElements)[i][e][1]]][c] += Scale * ElementForces[4* (*IncidentElements)[i][e][0]+ (*IncidentElements)[i][e][1]][c]; } } })"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PhysicsParallelFor(IncidentElements->Num(), [&](const int32 i) { for (int32 e = 0; e < (*IncidentElements)[i].Num(); e++) { for (int32 c = 0; c < 3; c++) { Force[Mesh[(*IncidentElements)[i][e][0]][(*IncidentElements)[i][e][1]]][c] += Scale * ElementForces[4 * (*IncidentElements)[i][e][0] + (*IncidentElements)[i][e][1]][c] / (*NodalMass)[Mesh[(*IncidentElements)[i][e][0]][(*IncidentElements)[i][e][1]]]; } } })"
  },
  {
    "label": "AddNegativeInternalElasticForceDifferential()",
    "kind": "Method",
    "detail": "Function (} } } template<Func> void)",
    "insertText": "AddNegativeInternalElasticForceDifferential(const ParticleType& InParticles, Func dP, const TArray<TVector<T, 3>>& DeltaParticles, TArray<TVector<T, 3>>& ndf, const TArray<TArray<TVector<int32, 2>>>* IncidentElements = nullptr)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ndf .)",
    "insertText": "Init(TVector<T, 3>(0.f), ndf.Num())"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> Fe =)",
    "insertText": "F(e, InParticles), dFe = F(e, DeltaParticles)"
  },
  {
    "label": "dP()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> dPe ;)",
    "insertText": "dP(Fe, dFe, dPe, e)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (ndf [ Mesh [ e ] [ ie + 1 ] ] [ c ] + = dg .)",
    "insertText": "GetAt(c, ie)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 c = 0; c < 3; c++)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (ndf [ Mesh [ e ] [ 0 ] ] [ c ] - = dg .)",
    "insertText": "GetAt(c, h)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } } } else { ElementForces .)",
    "insertText": "Init(TVector<T, 3>(0.f), Mesh.Num() * 4)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Mesh.Num(), [&](const int32 e) { PMatrix<T, 3, 3> Fe = F(e, InParticles), dFe = F(e, DeltaParticles); PMatrix<T, 3, 3> dPe; dP(Fe, dFe, dPe, e); PMatrix<T, 3, 3> dg = Measure[e] * (ElementDmInv(e).GetTransposed()) * dPe; for (int32 ie = 0; ie < 3; ie++) { for (int32 c = 0; c < 3; c++) { ElementForces[4 * e + ie + 1][c] += dg.GetAt(c, ie); } } for (int32 c = 0; c < 3; c++) { for (int32 h = 0; h < 3; h++) { ElementForces[4 * e][c] -= dg.GetAt(c, h); } } })"
  },
  {
    "label": "Mesh()",
    "kind": "Method",
    "detail": "Function (ndf [)",
    "insertText": "Mesh(*IncidentElements)[i][e][0]][(*IncidentElements)[i][e][1]]][c] += ElementForces[4 * (*IncidentElements)[i][e][0] + (*IncidentElements)"
  }
]