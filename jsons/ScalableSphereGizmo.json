[
  {
    "label": "UScalableSphereGizmoBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScalableSphereGizmoBuilder"
  },
  {
    "label": "UScalableSphereGizmo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScalableSphereGizmo"
  },
  {
    "label": "UScalableSphereGizmoInputBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScalableSphereGizmoInputBehavior"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InteractiveGizmo . h \" # include \" InteractiveGizmoBuilder . h \" # include \" TransformProxy . h \" # include \" BaseBehaviors / BehaviorTargetInterfaces . h \" # include \" BaseBehaviors / AnyButtonInputBehavior . h \" # include \" ScalableSphereGizmo . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API virtual UInteractiveGizmo* BuildGizmo(const FToolBuilderState& SceneState)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API virtual void Setup()"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(IToolsContextRenderAPI* RenderAPI)"
  },
  {
    "label": "BeginHoverSequenceHitTest()",
    "kind": "Method",
    "detail": "Function (FInputRayHit)",
    "insertText": "BeginHoverSequenceHitTest(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnBeginHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginHover(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "OnUpdateHover()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnUpdateHover(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "OnEndHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndHover()"
  },
  {
    "label": "SetTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTarget(UTransformProxy* InTarget)"
  },
  {
    "label": "OnBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginDrag(const FInputDeviceRay& Ray)"
  },
  {
    "label": "OnUpdateDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateDrag(const FInputDeviceRay& Ray)"
  },
  {
    "label": "OnEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDrag(const FInputDeviceRay& Ray)"
  },
  {
    "label": "HitTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HitTest(const FRay& Ray, FHitResult& OutHit, FVector& OutAxis, FTransform& OutTransform)"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(float InRadius)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(const float)"
  },
  {
    "label": "CheckCircleIntersection()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CheckCircleIntersection(const FRay& Ray, FVector CircleNormal, FVector& OutHitLocation, FVector& OutHitAxis)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: virtual FInputCapturePriority GetPriority()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(UScalableSphereGizmo* Gizmo)"
  },
  {
    "label": "WantsCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureRequest)",
    "insertText": "WantsCapture(const FInputDeviceState& input)"
  },
  {
    "label": "BeginCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "BeginCapture(const FInputDeviceState& input, EInputCaptureSide eSide)"
  },
  {
    "label": "UpdateCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "UpdateCapture(const FInputDeviceState& input, const FInputCaptureData& data)"
  },
  {
    "label": "ForceEndCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceEndCapture(const FInputCaptureData& data)"
  }
]