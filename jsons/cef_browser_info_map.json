[
  {
    "label": "DefaultCefBrowserInfoMapTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultCefBrowserInfoMapTraits"
  },
  {
    "label": "CefBrowserInfoMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefBrowserInfoMap"
  },
  {
    "label": "Visitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Visitor"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_LIBCEF_DLL_WRAPPER_CEF_BROWSER_INFO_MAP_H_ # define CEF_LIBCEF_DLL_WRAPPER_CEF_BROWSER_INFO_MAP_H_ # pragma once # include<map> # include \" include / base / cef_logging . h \" # include \" include / base / cef_macros . h \" template<ObjectType> struct DefaultCefBrowserInfoMapTraits { void)",
    "insertText": "Destruct(ObjectType info)"
  },
  {
    "label": "OnNextInfo()",
    "kind": "Method",
    "detail": "Function (delete info ; } } ; template<IdType,ObjectType,Traits = DefaultCefBrowserInfoMapTraits<ObjectType>> class CefBrowserInfoMap { public : class Visitor { public : typedef IdType InfoIdType ; typedef ObjectType InfoObjectType ; bool)",
    "insertText": "OnNextInfo(int browser_id, InfoIdType info_id, InfoObjectType info, bool* remove)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Visitor()"
  },
  {
    "label": "CefBrowserInfoMap()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "CefBrowserInfoMap()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(int browser_id, IdType info_id, ObjectType info)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (InfoMap* info_map = nullptr ; BrowserInfoMap::const_iterator it_browser = browser_info_map_ .)",
    "insertText": "find(browser_id)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (info_map = new InfoMap ; browser_info_map_ .)",
    "insertText": "insert(std::make_pair(browser_id, info_map))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (} else { info_map = it_browser -> second ;)",
    "insertText": "DCHECK(info_map->find(info_id) == info_map->end())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} info_map ->)",
    "insertText": "insert(std::make_pair(info_id, info))"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ObjectType)",
    "insertText": "Find(int browser_id, IdType info_id, Visitor* vistor)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (InfoMap* info_map = it_browser -> second ; InfoMap::iterator it_info = info_map ->)",
    "insertText": "find(info_id)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ObjectType info = it_info -> second ; bool remove = false ;)",
    "insertText": "if(vistor) vistor->OnNextInfo(browser_id, it_info->first, info, &remove)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (info_map ->)",
    "insertText": "erase(it_info)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (browser_info_map_ .)",
    "insertText": "erase(it_browser)"
  },
  {
    "label": "FindAll()",
    "kind": "Method",
    "detail": "Function (delete info_map ; } } return info ; } void)",
    "insertText": "FindAll(Visitor* visitor)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(visitor)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (bool remove,keepgoing = true ; BrowserInfoMap::iterator it_browser = browser_info_map_ .)",
    "insertText": "begin()"
  },
  {
    "label": "OnNextInfo()",
    "kind": "Method",
    "detail": "Function (remove = false ; keepgoing = visitor ->)",
    "insertText": "OnNextInfo(it_browser->first, it_info->first, it_info->second, &remove)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(info_map->empty())"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (browser_info_map_ .)",
    "insertText": "erase(it_browser++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (delete info_map ; } else { + + it_browser ; })",
    "insertText": "if(!keepgoing)"
  },
  {
    "label": "FindAll()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FindAll(int browser_id, Visitor* visitor)"
  },
  {
    "label": "OnNextInfo()",
    "kind": "Method",
    "detail": "Function (remove = false ; keepgoing = visitor ->)",
    "insertText": "OnNextInfo(browser_id, it_info->first, it_info->second, &remove)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (delete info_map ; } } bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear(int browser_id)"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (delete info_map ; } private : typedef std::map<IdType,ObjectType> InfoMap ; typedef std::map<int,InfoMap*> BrowserInfoMap ; BrowserInfoMap browser_info_map_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(CefBrowserInfoMap)"
  }
]