[
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "GAMEMENUBUILDER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GAMEMENUBUILDER_API"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Framework / SlateDelegates . h \" # include \" GameFramework / PlayerController . h \" # include \" GameMenuWidgetStyle . h \" struct FGeometry ; struct FPointerEvent ; class SGameMenuItemWidget : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnArrowPressed, int)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SGameMenuItemWidget)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FGameMenuStyle, MenuStyle) SLATE_ARGUMENT(TWeakObjectPtr<APlayerController>, PCOwner) SLATE_EVENT(FOnClicked, OnClicked) SLATE_EVENT(FOnArrowPressed, OnArrowPressed) SLATE_ATTRIBUTE(FText, Text) SLATE_ARGUMENT(bool, bIsMultichoice) SLATE_ATTRIBUTE(FText, OptionText) SLATE_ARGUMENT(TOptional<float>, InactiveTextAlpha) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "SetMenuItemActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMenuItemActive(bool bIsMenuItemActive)"
  },
  {
    "label": "SetMenuOwner()",
    "kind": "Method",
    "detail": "Function (EVisibility LeftArrowVisible ; EVisibility RightArrowVisible ; void)",
    "insertText": "SetMenuOwner(TWeakObjectPtr<class APlayerController> InPCOwner)"
  },
  {
    "label": "SetMenuStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMenuStyle(const FGameMenuStyle* InMenuStyle)"
  },
  {
    "label": "SetClickedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClickedDelegate(FOnClicked InOnClicked)"
  },
  {
    "label": "SetArrowPressedDelegate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArrowPressedDelegate(FOnArrowPressed InOnArrowPressed)"
  },
  {
    "label": "GetButtonBgColor()",
    "kind": "Method",
    "detail": "Function (protected : FOnClicked OnClicked ; FOnArrowPressed OnArrowPressed ; TAttribute<FText> Text ; TAttribute<FText> OptionText ; float InactiveTextAlpha ; bool bIsActiveMenuItem ; bool bIsMultichoice ; TWeakObjectPtr<class APlayerController> PCOwner ; const FGameMenuStyle* MenuStyle ; private : FSlateColor)",
    "insertText": "GetButtonBgColor()"
  },
  {
    "label": "GetButtonTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetButtonTextColor()"
  },
  {
    "label": "GetLeftArrowVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLeftArrowVisibility()"
  },
  {
    "label": "GetRightArrowVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetRightArrowVisibility()"
  },
  {
    "label": "OnRightArrowDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRightArrowDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnLeftArrowDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnLeftArrowDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  }
]