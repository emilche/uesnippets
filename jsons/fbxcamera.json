[
  {
    "label": "FbxTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxTexture"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EProjectionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EProjectionType"
  },
  {
    "label": "EFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFormat"
  },
  {
    "label": "EAspectRatioMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAspectRatioMode"
  },
  {
    "label": "EApertureFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EApertureFormat"
  },
  {
    "label": "EApertureMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EApertureMode"
  },
  {
    "label": "EGateFit",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGateFit"
  },
  {
    "label": "EFilmRollOrder",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFilmRollOrder"
  },
  {
    "label": "EPlateDrawingMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlateDrawingMode"
  },
  {
    "label": "EFrontBackPlaneDistanceMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFrontBackPlaneDistanceMode"
  },
  {
    "label": "EFrontBackPlaneDisplayMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFrontBackPlaneDisplayMode"
  },
  {
    "label": "ESafeAreaStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESafeAreaStyle"
  },
  {
    "label": "ERenderOptionsUsageTime",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERenderOptionsUsageTime"
  },
  {
    "label": "EAntialiasingMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAntialiasingMethod"
  },
  {
    "label": "ESamplingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESamplingType"
  },
  {
    "label": "EFocusDistanceSource",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFocusDistanceSource"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_GEOMETRY_CAMERA_H_ # define _FBXSDK_SCENE_GEOMETRY_CAMERA_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxstring . h> # include<fbxsdk / core / math / fbxvector4 . h> # include<fbxsdk / scene / geometry / fbxnodeattribute . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxTexture ; class FBXSDK_DLL FbxCamera : public FbxNodeAttribute {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxCamera,FbxNodeAttribute)"
  },
  {
    "label": "GetAttributeType()",
    "kind": "Method",
    "detail": "Function (public : FbxNodeAttribute::EType)",
    "insertText": "GetAttributeType()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetFormat()",
    "kind": "Method",
    "detail": "Function (enum EProjectionType { ePerspective,eOrthogonal } ; enum EFormat { eCustomFormat,eD1NTSC,eNTSC,ePAL,eD1PAL,eHD,e640x480,e320x200,e320x240,e128x128,eFullscreen } ; void)",
    "insertText": "SetFormat(EFormat pFormat)"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (EFormat)",
    "insertText": "GetFormat()"
  },
  {
    "label": "SetAspect()",
    "kind": "Method",
    "detail": "Function (enum EAspectRatioMode { eWindowSize,eFixedRatio,eFixedResolution,eFixedWidth,eFixedHeight } ; void)",
    "insertText": "SetAspect(EAspectRatioMode pRatioMode, double pWidth, double pHeight)"
  },
  {
    "label": "GetAspectRatioMode()",
    "kind": "Method",
    "detail": "Function (EAspectRatioMode)",
    "insertText": "GetAspectRatioMode()"
  },
  {
    "label": "SetPixelRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPixelRatio(double pRatio)"
  },
  {
    "label": "SetNearPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNearPlane(double pDistance)"
  },
  {
    "label": "SetFarPlane()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFarPlane(double pDistance)"
  },
  {
    "label": "SetApertureFormat()",
    "kind": "Method",
    "detail": "Function (enum EApertureFormat { eCustomAperture,e16mmTheatrical,eSuper16mm,e35mmAcademy,e35mmTVProjection,e35mmFullAperture,e35mm185Projection,e35mmAnamorphic,e70mmProjection,eVistaVision,eDynaVision,eIMAX } ; void)",
    "insertText": "SetApertureFormat(EApertureFormat pFormat)"
  },
  {
    "label": "GetApertureFormat()",
    "kind": "Method",
    "detail": "Function (EApertureFormat)",
    "insertText": "GetApertureFormat()"
  },
  {
    "label": "SetApertureMode()",
    "kind": "Method",
    "detail": "Function (enum EApertureMode { eHorizAndVert,eHorizontal,eVertical,eFocalLength } ; void)",
    "insertText": "SetApertureMode(EApertureMode pMode)"
  },
  {
    "label": "GetApertureMode()",
    "kind": "Method",
    "detail": "Function (EApertureMode)",
    "insertText": "GetApertureMode()"
  },
  {
    "label": "SetApertureWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApertureWidth(double pWidth)"
  },
  {
    "label": "SetApertureHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetApertureHeight(double pHeight)"
  },
  {
    "label": "SetSqueezeRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSqueezeRatio(double pRatio)"
  },
  {
    "label": "ComputeFieldOfView()",
    "kind": "Method",
    "detail": "Function (enum EGateFit { eFitNone,eFitVertical,eFitHorizontal,eFitFill,eFitOverscan,eFitStretch } ; double)",
    "insertText": "ComputeFieldOfView(double pFocalLength)"
  },
  {
    "label": "SetBackgroundFileName()",
    "kind": "Method",
    "detail": "Function (enum EFilmRollOrder { eRotateFirst,eTranslateFirst } ; void)",
    "insertText": "SetBackgroundFileName(const char* pFileName)"
  },
  {
    "label": "GetBackgroundFileName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetBackgroundFileName()"
  },
  {
    "label": "SetBackgroundMediaName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackgroundMediaName(const char* pFileName)"
  },
  {
    "label": "GetBackgroundMediaName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetBackgroundMediaName()"
  },
  {
    "label": "SetForegroundFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForegroundFileName(const char* pFileName)"
  },
  {
    "label": "GetForegroundFileName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetForegroundFileName()"
  },
  {
    "label": "SetForegroundMediaName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForegroundMediaName(const char* pFileName)"
  },
  {
    "label": "GetForegroundMediaName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "GetForegroundMediaName()"
  },
  {
    "label": "SetBackgroundAlphaTreshold()",
    "kind": "Method",
    "detail": "Function (enum EPlateDrawingMode { ePlateBackground,ePlateForeground,ePlateBackAndFront } ; void)",
    "insertText": "SetBackgroundAlphaTreshold(double pThreshold)"
  },
  {
    "label": "SetBackPlateFitImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackPlateFitImage(bool pFitImage)"
  },
  {
    "label": "GetBackPlateFitImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBackPlateFitImage()"
  },
  {
    "label": "SetBackPlateCrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackPlateCrop(bool pCrop)"
  },
  {
    "label": "GetBackPlateCrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBackPlateCrop()"
  },
  {
    "label": "SetBackPlateCenter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackPlateCenter(bool pCenter)"
  },
  {
    "label": "GetBackPlateCenter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBackPlateCenter()"
  },
  {
    "label": "SetBackPlateKeepRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBackPlateKeepRatio(bool pKeepRatio)"
  },
  {
    "label": "GetBackPlateKeepRatio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBackPlateKeepRatio()"
  },
  {
    "label": "SetShowFrontPlate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowFrontPlate(bool pEnable)"
  },
  {
    "label": "GetShowFrontPlate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowFrontPlate()"
  },
  {
    "label": "SetFrontPlateFitImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontPlateFitImage(bool pFrontPlateFitImage)"
  },
  {
    "label": "GetFrontPlateFitImage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFrontPlateFitImage()"
  },
  {
    "label": "SetFrontPlateCrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontPlateCrop(bool pFrontPlateCrop)"
  },
  {
    "label": "GetFrontPlateCrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFrontPlateCrop()"
  },
  {
    "label": "SetFrontPlateCenter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontPlateCenter(bool pFrontPlateCenter)"
  },
  {
    "label": "GetFrontPlateCenter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFrontPlateCenter()"
  },
  {
    "label": "SetFrontPlateKeepRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontPlateKeepRatio(bool pFrontPlateKeepRatio)"
  },
  {
    "label": "GetFrontPlateKeepRatio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFrontPlateKeepRatio()"
  },
  {
    "label": "SetForegroundOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForegroundOpacity(double pOpacity)"
  },
  {
    "label": "SetForegroundTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForegroundTexture(FbxTexture* pTexture)"
  },
  {
    "label": "GetForegroundTexture()",
    "kind": "Method",
    "detail": "Function (FbxTexture*)",
    "insertText": "GetForegroundTexture()"
  },
  {
    "label": "SetBackPlaneDistanceMode()",
    "kind": "Method",
    "detail": "Function (enum EFrontBackPlaneDistanceMode { eRelativeToInterest,eRelativeToCamera } ; void)",
    "insertText": "SetBackPlaneDistanceMode(EFrontBackPlaneDistanceMode pMode)"
  },
  {
    "label": "GetBackPlaneDistanceMode()",
    "kind": "Method",
    "detail": "Function (EFrontBackPlaneDistanceMode)",
    "insertText": "GetBackPlaneDistanceMode()"
  },
  {
    "label": "SetFrontPlaneDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontPlaneDistance(double pDistance)"
  },
  {
    "label": "SetFrontPlaneDistanceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontPlaneDistanceMode(EFrontBackPlaneDistanceMode pMode)"
  },
  {
    "label": "GetFrontPlaneDistanceMode()",
    "kind": "Method",
    "detail": "Function (EFrontBackPlaneDistanceMode)",
    "insertText": "GetFrontPlaneDistanceMode()"
  },
  {
    "label": "SetViewFrustumFrontPlaneMode()",
    "kind": "Method",
    "detail": "Function (enum EFrontBackPlaneDisplayMode { ePlanesDisabled,ePlanesAlways,ePlanesWhenMedia } ; void)",
    "insertText": "SetViewFrustumFrontPlaneMode(EFrontBackPlaneDisplayMode pMode)"
  },
  {
    "label": "GetViewFrustumFrontPlaneMode()",
    "kind": "Method",
    "detail": "Function (EFrontBackPlaneDisplayMode)",
    "insertText": "GetViewFrustumFrontPlaneMode()"
  },
  {
    "label": "SetViewFrustumBackPlaneMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewFrustumBackPlaneMode(EFrontBackPlaneDisplayMode pMode)"
  },
  {
    "label": "GetViewFrustumBackPlaneMode()",
    "kind": "Method",
    "detail": "Function (EFrontBackPlaneDisplayMode)",
    "insertText": "GetViewFrustumBackPlaneMode()"
  },
  {
    "label": "SetViewCameraInterest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewCameraInterest(bool pEnable)"
  },
  {
    "label": "GetViewCameraInterest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewCameraInterest()"
  },
  {
    "label": "SetViewNearFarPlanes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewNearFarPlanes(bool pEnable)"
  },
  {
    "label": "GetViewNearFarPlanes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetViewNearFarPlanes()"
  },
  {
    "label": "EvaluatePosition()",
    "kind": "Method",
    "detail": "Function (enum ESafeAreaStyle { eSafeAreaRound,eSafeAreaSquare } ; enum ERenderOptionsUsageTime { eInteractive,eOnDemand } ; enum EAntialiasingMethod { eAAOversampling,eAAHardware } ; enum ESamplingType { eSamplingUniform,eSamplingStochastic } ; enum EFocusDistanceSource { eFocusSrcCameraInterest,eFocusSpecificDistance } ; FbxVector4)",
    "insertText": "EvaluatePosition(const FbxTime& pTime=FBXSDK_TIME_ZERO)"
  },
  {
    "label": "EvaluateLookAtPosition()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "EvaluateLookAtPosition(const FbxTime& pTime=FBXSDK_TIME_ZERO)"
  },
  {
    "label": "EvaluateUpDirection()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "EvaluateUpDirection(const FbxVector4& pCameraPosition, const FbxVector4& pLookAtPosition, const FbxTime& pTime=FBXSDK_TIME_ZERO)"
  },
  {
    "label": "ComputeProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (FbxMatrix)",
    "insertText": "ComputeProjectionMatrix(const int pWidth, const int pHeight, const bool pVerticalFOV = true)"
  },
  {
    "label": "IsBoundingBoxInView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundingBoxInView(const FbxMatrix& pWorldToScreen, const FbxMatrix& pWorldToCamera, const FbxVector4 pPoints[8])"
  },
  {
    "label": "IsPointInView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInView(const FbxMatrix& pWorldToScreen, const FbxMatrix& pWorldToCamera, const FbxVector4& pPoint)"
  },
  {
    "label": "ComputeWorldToScreen()",
    "kind": "Method",
    "detail": "Function (FbxMatrix)",
    "insertText": "ComputeWorldToScreen(int pPixelWidth, int pPixelHeight, const FbxAMatrix& pWorldToCamera)"
  },
  {
    "label": "ComputeScreenToWorld()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "ComputeScreenToWorld(float pX, float pY, float pWidth, float pHeight, const FbxTime& pTime=FBXSDK_TIME_INFINITE)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (FbxPropertyT<FbxDouble3> Position ; FbxPropertyT<FbxDouble3> UpVector ; FbxPropertyT<FbxDouble3> InterestPosition ; FbxPropertyT<FbxDouble> Roll ; FbxPropertyT<FbxDouble> OpticalCenterX ; FbxPropertyT<FbxDouble> OpticalCenterY ; FbxPropertyT<FbxDouble3> BackgroundColor ; FbxPropertyT<FbxDouble> TurnTable ; FbxPropertyT<FbxBool> DisplayTurnTableIcon ; FbxPropertyT<FbxBool> UseMotionBlur ; FbxPropertyT<FbxBool> UseRealTimeMotionBlur ; FbxPropertyT<FbxDouble> MotionBlurIntensity ; FbxPropertyT<EAspectRatioMode> AspectRatioMode ; FbxPropertyT<FbxDouble> AspectWidth ; FbxPropertyT<FbxDouble> AspectHeight ; FbxPropertyT<FbxDouble> PixelAspectRatio ; FbxPropertyT<EApertureMode> ApertureMode ; FbxPropertyT<EGateFit> GateFit ; FbxPropertyT<FbxDouble> FieldOfView ; FbxPropertyT<FbxDouble> FieldOfViewX ; FbxPropertyT<FbxDouble> FieldOfViewY ; FbxPropertyT<FbxDouble> FocalLength ; FbxPropertyT<EFormat> CameraFormat ; FbxPropertyT<FbxBool> UseFrameColor ; FbxPropertyT<FbxDouble3> FrameColor ; FbxPropertyT<FbxBool> ShowName ; FbxPropertyT<FbxBool> ShowInfoOnMoving ; FbxPropertyT<FbxBool> ShowGrid ; FbxPropertyT<FbxBool> ShowOpticalCenter ; FbxPropertyT<FbxBool> ShowAzimut ; FbxPropertyT<FbxBool> ShowTimeCode ; FbxPropertyT<FbxBool> ShowAudio ; FbxPropertyT<FbxDouble3> AudioColor ; FbxPropertyT<FbxDouble> NearPlane ; FbxPropertyT<FbxDouble> FarPlane ; FbxPropertyT<FbxBool> AutoComputeClipPlanes ; FbxPropertyT<FbxDouble> FilmWidth ; FbxPropertyT<FbxDouble> FilmHeight ; FbxPropertyT<FbxDouble> FilmAspectRatio ; FbxPropertyT<FbxDouble> FilmSqueezeRatio ; FbxPropertyT<EApertureFormat> FilmFormat ; FbxPropertyT<FbxDouble> FilmOffsetX ; FbxPropertyT<FbxDouble> FilmOffsetY ; FbxPropertyT<FbxDouble> PreScale ; FbxPropertyT<FbxDouble> FilmTranslateX ; FbxPropertyT<FbxDouble> FilmTranslateY ; FbxPropertyT<FbxDouble> FilmRollPivotX ; FbxPropertyT<FbxDouble> FilmRollPivotY ; FbxPropertyT<FbxDouble> FilmRollValue ; FbxPropertyT<EFilmRollOrder> FilmRollOrder ; FbxPropertyT<FbxBool> ViewCameraToLookAt ; FbxPropertyT<FbxBool> ViewFrustumNearFarPlane ; FbxPropertyT<EFrontBackPlaneDisplayMode> ViewFrustumBackPlaneMode ; FbxPropertyT<FbxDouble> BackPlaneDistance ; FbxPropertyT<EFrontBackPlaneDistanceMode> BackPlaneDistanceMode ; FbxPropertyT<EFrontBackPlaneDisplayMode> ViewFrustumFrontPlaneMode ; FbxPropertyT<FbxDouble> FrontPlaneDistance ; FbxPropertyT<EFrontBackPlaneDistanceMode> FrontPlaneDistanceMode ; FbxPropertyT<FbxBool> LockMode ; FbxPropertyT<FbxBool> LockInterestNavigation ; FbxPropertyT<FbxBool> BackPlateFitImage ; FbxPropertyT<FbxBool> BackPlateCrop ; FbxPropertyT<FbxBool> BackPlateCenter ; FbxPropertyT<FbxBool> BackPlateKeepRatio ; FbxPropertyT<FbxDouble> BackgroundAlphaTreshold ; FbxPropertyT<FbxDouble> BackPlaneOffsetX ; FbxPropertyT<FbxDouble> BackPlaneOffsetY ; FbxPropertyT<FbxDouble> BackPlaneRotation ; FbxPropertyT<FbxDouble> BackPlaneScaleX ; FbxPropertyT<FbxDouble> BackPlaneScaleY ; FbxPropertyT<FbxBool> ShowBackplate ; FbxPropertyT<FbxReference> BackgroundTexture ; FbxPropertyT<FbxBool> FrontPlateFitImage ; FbxPropertyT<FbxBool> FrontPlateCrop ; FbxPropertyT<FbxBool> FrontPlateCenter ; FbxPropertyT<FbxBool> FrontPlateKeepRatio ; FbxPropertyT<FbxBool> ShowFrontplate ; FbxPropertyT<FbxDouble> FrontPlaneOffsetX ; FbxPropertyT<FbxDouble> FrontPlaneOffsetY ; FbxPropertyT<FbxDouble> FrontPlaneRotation ; FbxPropertyT<FbxDouble> FrontPlaneScaleX ; FbxPropertyT<FbxDouble> FrontPlaneScaleY ; FbxPropertyT<FbxReference> ForegroundTexture ; FbxPropertyT<FbxDouble> ForegroundOpacity ; FbxPropertyT<FbxBool> DisplaySafeArea ; FbxPropertyT<FbxBool> DisplaySafeAreaOnRender ; FbxPropertyT<ESafeAreaStyle> SafeAreaDisplayStyle ; FbxPropertyT<FbxDouble> SafeAreaAspectRatio ; FbxPropertyT<FbxBool> Use2DMagnifierZoom ; FbxPropertyT<FbxDouble> _2DMagnifierZoom ; FbxPropertyT<FbxDouble> _2DMagnifierX ; FbxPropertyT<FbxDouble> _2DMagnifierY ; FbxPropertyT<EProjectionType> ProjectionType ; FbxPropertyT<FbxDouble> OrthoZoom ; FbxPropertyT<FbxBool> UseRealTimeDOFAndAA ; FbxPropertyT<FbxBool> UseDepthOfField ; FbxPropertyT<EFocusDistanceSource> FocusSource ; FbxPropertyT<FbxDouble> FocusAngle ; FbxPropertyT<FbxDouble> FocusDistance ; FbxPropertyT<FbxBool> UseAntialiasing ; FbxPropertyT<FbxDouble> AntialiasingIntensity ; FbxPropertyT<EAntialiasingMethod> AntialiasingMethod ; FbxPropertyT<FbxBool> UseAccumulationBuffer ; FbxPropertyT<FbxInt> FrameSamplingCount ; FbxPropertyT<ESamplingType> FrameSamplingType ; # ifndef DOXYGEN_SHOULD_SKIP_THIS FbxObject&)",
    "insertText": "Copy(const FbxObject& pObject)"
  },
  {
    "label": "ConstructProperties()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ConstructProperties(bool pForceSet)"
  },
  {
    "label": "GetTypeFlags()",
    "kind": "Method",
    "detail": "Function (FbxStringList)",
    "insertText": "GetTypeFlags()"
  },
  {
    "label": "ComputePixelRatio()",
    "kind": "Method",
    "detail": "Function (private : double)",
    "insertText": "ComputePixelRatio(FbxUInt pWidth, FbxUInt pHeight, double pScreenRatio = 1.3333333333)"
  },
  {
    "label": "FbxTypeOf()",
    "kind": "Method",
    "detail": "Function (FbxString mBackgroundMediaName ; FbxString mBackgroundFileName ; FbxString mForegroundMediaName ; FbxString mForegroundFileName ; FbxVector4 mLastUp ; # endif } ; EFbxType)",
    "insertText": "FbxTypeOf(const FbxCamera::EAntialiasingMethod&)"
  }
]