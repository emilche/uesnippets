[
  {
    "label": "FSequencerSelectionCurveFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerSelectionCurveFilter"
  },
  {
    "label": "FSequencerSelectionCurveFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ISequencerModule . h \" # include \" MVVM / Extensions / IObjectBindingExtension . h \" # include \" MVVM / Selection / Selection . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" Tree / CurveEditorTreeFilter . h \" namespace UE::Sequencer { struct FSequencerSelectionCurveFilter : FCurveEditorTreeFilter { const int32 FilterPass = - 1 0 0 0 ;)",
    "insertText": "FSequencerSelectionCurveFilter() : FCurveEditorTreeFilter(ISequencerModule::GetSequencerSelectionFilterType(), FilterPass)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(TSharedPtr<FSequencerSelection> Selection, const bool bExpandTreeToSelectedNodes = true)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (NodesToFilter .)",
    "insertText": "Empty(Selection->Outliner.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesToFilter .)",
    "insertText": "Add(SelectedNode.AsModel())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodesToFilter .)",
    "insertText": "Add(ParentObject.AsModel())"
  },
  {
    "label": "Match()",
    "kind": "Method",
    "detail": "Function (} } bExpandToMatchedItems = bExpandTreeToSelectedNodes ; } bool)",
    "insertText": "Match(TSharedRef<const FViewModel> InNode)"
  }
]