[
  {
    "label": "AbsoluteSendTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbsoluteSendTime"
  },
  {
    "label": "AbsoluteCaptureTimeExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AbsoluteCaptureTimeExtension"
  },
  {
    "label": "AudioLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioLevel"
  },
  {
    "label": "CsrcAudioLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CsrcAudioLevel"
  },
  {
    "label": "TransmissionOffset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransmissionOffset"
  },
  {
    "label": "TransportSequenceNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportSequenceNumber"
  },
  {
    "label": "TransportSequenceNumberV2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportSequenceNumberV2"
  },
  {
    "label": "VideoOrientation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoOrientation"
  },
  {
    "label": "PlayoutDelayLimits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PlayoutDelayLimits"
  },
  {
    "label": "VideoContentTypeExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoContentTypeExtension"
  },
  {
    "label": "VideoTimingExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoTimingExtension"
  },
  {
    "label": "ColorSpaceExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ColorSpaceExtension"
  },
  {
    "label": "BaseRtpStringExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseRtpStringExtension"
  },
  {
    "label": "RtpStreamId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpStreamId"
  },
  {
    "label": "RepairedRtpStreamId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RepairedRtpStreamId"
  },
  {
    "label": "RtpMid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpMid"
  },
  {
    "label": "InbandComfortNoiseExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InbandComfortNoiseExtension"
  },
  {
    "label": "VideoFrameTrackingIdExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoFrameTrackingIdExtension"
  },
  {
    "label": "Uri()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_HEADER_EXTENSIONS_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_HEADER_EXTENSIONS_H_ # include<stddef . h> # include<stdint . h> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / rtp_headers . h \" # include \" api / rtp_parameters . h \" # include \" api / units / timestamp . h \" # include \" api / video / color_space . h \" # include \" api / video / video_content_type . h \" # include \" api / video / video_rotation . h \" # include \" api / video / video_timing . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" namespace webrtc { class AbsoluteSendTime { public : using value_type = uint32_t ; RTPExtensionType kId = kRtpExtensionAbsoluteSendTime ; uint8_t kValueSizeBytes = 3 ; absl::string_view)",
    "insertText": "Uri()"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(uint32_t time_24bits)"
  },
  {
    "label": "To24Bits()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "To24Bits(Timestamp time)"
  },
  {
    "label": "us()",
    "kind": "Method",
    "detail": "Function (int64_t time_us = time .)",
    "insertText": "us() % (int64_t{1 << 6} * 1'000'000)"
  },
  {
    "label": "time6x18()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "time6x18(time_us << 18)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(time6x18, 0)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(time6x18, 1 << 24)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(const AbsoluteCaptureTime& extension)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(rtc::ArrayView<uint8_t> data, const AbsoluteCaptureTime& extension)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(bool voice_activity, uint8_t audio_level)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(rtc::ArrayView<const uint8_t> csrc_audio_levels)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(rtc::ArrayView<uint8_t> data, rtc::ArrayView<const uint8_t> csrc_audio_levels)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(int32_t rtp_time)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(uint16_t)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(uint16_t , const absl::optional<FeedbackRequest>& feedback_request)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(VideoRotation)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data, uint8_t* value)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(uint8_t value)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(const VideoPlayoutDelay&)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(VideoContentType)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(const VideoSendTiming&)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(uint16_t time_delta_ms, uint8_t idx)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(const ColorSpace& color_space)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Write(rtc::ArrayView<uint8_t> data, const ColorSpace& color_space)"
  },
  {
    "label": "CombineRangeAndChromaSiting()",
    "kind": "Method",
    "detail": "Function (private : int kChromaticityDenominator = 5 0 0 0 0 ; int kLuminanceMaxDenominator = 1 ; int kLuminanceMinDenominator = 1 0 0 0 0 ; uint8_t)",
    "insertText": "CombineRangeAndChromaSiting(ColorSpace::RangeID range, ColorSpace::ChromaSiting chroma_siting_horizontal, ColorSpace::ChromaSiting chroma_siting_vertical)"
  },
  {
    "label": "ParseHdrMetadata()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ParseHdrMetadata(rtc::ArrayView<const uint8_t> data, HdrMetadata* hdr_metadata)"
  },
  {
    "label": "ParseChromaticity()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ParseChromaticity(const uint8_t* data, HdrMasteringMetadata::Chromaticity* p)"
  },
  {
    "label": "ParseLuminance()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ParseLuminance(const uint8_t* data, float* f, int denominator)"
  },
  {
    "label": "WriteHdrMetadata()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "WriteHdrMetadata(rtc::ArrayView<uint8_t> data, const HdrMetadata& hdr_metadata)"
  },
  {
    "label": "WriteChromaticity()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "WriteChromaticity(uint8_t* data, const HdrMasteringMetadata::Chromaticity& p)"
  },
  {
    "label": "WriteLuminance()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "WriteLuminance(uint8_t* data, float f, int denominator)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (} ; class BaseRtpStringExtension { public : using value_type = std::string ; uint8_t kMaxValueSizeBytes = 1 6 ; bool)",
    "insertText": "Parse(rtc::ArrayView<const uint8_t> data, std::string* str)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(absl::string_view str)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Write(rtc::ArrayView<uint8_t> data, absl::string_view str)"
  },
  {
    "label": "ValueSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ValueSize(absl::optional<uint8_t> level)"
  }
]