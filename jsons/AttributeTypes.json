[
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "UAnimationSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationSettings"
  },
  {
    "label": "CBlendableAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CBlendableAttribute"
  },
  {
    "label": "CNormalizedAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CNormalizedAttribute"
  },
  {
    "label": "AttributeTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AttributeTypes"
  },
  {
    "label": "FAttributeTypeRegistrar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeTypeRegistrar"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AttributesRuntime . h \" # include \" Animation / CustomAttributes . h \" # include \" Animation / IAttributeBlendOperator . h \" # include \" Animation / AttributeBlendOperator . h \" # include \" Animation / AttributeTraits . h \" # include \" CoreMinimal . h \" # include \" UObject / WeakObjectPtr . h \" # include \" CoreTypes . h \" # include \" Templates / UnrealTemplate . h \" enum EAdditiveAnimationType : int ; class UAnimationSettings ; namespace UE { namespace Anim { struct CBlendableAttribute { template<T> auto)",
    "insertText": "Requires(T& Val) -> decltype( Val.Multiply(.5f), Val.Accumulate(Val, 1.f, (EAdditiveAnimationType)0), Val.MakeAdditive(Val), Val.Interpolate(Val, 0.5f))"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (} ; struct CNormalizedAttribute { template<T> auto)",
    "insertText": "Requires(T& Val) -> decltype( Val.Normalize())"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ; struct AttributeTypes {)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnAttributeTypesChanged, const UScriptStruct*, bool)"
  },
  {
    "label": "RegisterNonBlendableType()",
    "kind": "Method",
    "detail": "Function (protected : TArray<TWeakObjectPtr<const UScriptStruct>> RegisteredTypes ; TArray<TUniquePtr<IAttributeBlendOperator>> Operators ; TArray<TWeakObjectPtr<const UScriptStruct>> InterpolatableTypes ; FOnAttributeTypesChanged OnAttributeTypesChangedDelegate ; bool)",
    "insertText": "RegisterNonBlendableType(const UScriptStruct* InScriptStruct)"
  },
  {
    "label": "UnregisterType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterType(const UScriptStruct* InScriptStruct)"
  },
  {
    "label": "GetOnAttributeTypesChanged()",
    "kind": "Method",
    "detail": "Function (} FOnAttributeTypesChanged&)",
    "insertText": "GetOnAttributeTypesChanged()"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct* ScriptStruct =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AttributeTypes::RegisteredTypes .)",
    "insertText": "Add(ScriptStruct)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AttributeTypes::Operators .)",
    "insertText": "Add(MakeUnique<OperatorType>(Forward<OperatorArgs>(args)...))"
  },
  {
    "label": "RegisterType()",
    "kind": "Method",
    "detail": "Function (} } template<AttributeType> void)",
    "insertText": "RegisterType()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(!UE::Anim::TAttributeTypeTraits<AttributeType>::StepInterpolate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } AttributeTypes::Operators .)",
    "insertText": "Add(MakeUnique<TAttributeBlendOperator<AttributeType>>())"
  },
  {
    "label": "UnregisterType()",
    "kind": "Method",
    "detail": "Function (} template<AttributeType> void)",
    "insertText": "UnregisterType()"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (const int32 Index = AttributeTypes::RegisteredTypes .)",
    "insertText": "IndexOfByKey(ScriptStruct)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (AttributeTypes::RegisteredTypes .)",
    "insertText": "RemoveAtSwap(Index)"
  },
  {
    "label": "GetTypeOperator()",
    "kind": "Method",
    "detail": "Function (} } } const IAttributeBlendOperator*)",
    "insertText": "GetTypeOperator(TWeakObjectPtr<const UScriptStruct> WeakStruct)"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (const int32 Index = AttributeTypes::RegisteredTypes .)",
    "insertText": "IndexOfByKey(WeakStruct)"
  },
  {
    "label": "CanInterpolateType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanInterpolateType(TWeakObjectPtr<const UScriptStruct> WeakStruct)"
  },
  {
    "label": "IsTypeRegistered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTypeRegistered(const UScriptStruct* ScriptStruct)"
  },
  {
    "label": "GetRegisteredTypes()",
    "kind": "Method",
    "detail": "Function (} TArray<TWeakObjectPtr<const UScriptStruct>>&)",
    "insertText": "GetRegisteredTypes()"
  }
]