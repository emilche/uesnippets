[
  {
    "label": "MachineModuleInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineModuleInfo"
  },
  {
    "label": "Mangler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Mangler"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCSymbolRefExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbolRefExpr"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "MCValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCValue"
  },
  {
    "label": "ConstantExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantExpr"
  },
  {
    "label": "GlobalValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalValue"
  },
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "TargetLoweringObjectFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLoweringObjectFile"
  },
  {
    "label": "TargetLoweringObjectFile()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TARGET_TARGETLOWERINGOBJECTFILE_H # define LLVM_TARGET_TARGETLOWERINGOBJECTFILE_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / IR / Module . h \" # include \" llvm / MC / MCObjectFileInfo . h \" # include \" llvm / MC / SectionKind . h \" namespace llvm { class MachineModuleInfo ; class Mangler ; class MCContext ; class MCExpr ; class MCSection ; class MCSymbol ; class MCSymbolRefExpr ; class MCStreamer ; class MCValue ; class ConstantExpr ; class GlobalValue ; class TargetMachine ; class TargetLoweringObjectFile : public MCObjectFileInfo { MCContext* Ctx ;)",
    "insertText": "TargetLoweringObjectFile(const TargetLoweringObjectFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const TargetLoweringObjectFile&)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (protected : const DataLayout* DL ; bool SupportIndirectSymViaGOTPCRel ; bool SupportGOTPCRelWithOffset ; public : MCContext&)",
    "insertText": "getContext()"
  },
  {
    "label": "TargetLoweringObjectFile()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TargetLoweringObjectFile()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(MCContext &ctx, const TargetMachine &TM)"
  },
  {
    "label": "emitPersonalityValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitPersonalityValue(MCStreamer &Streamer, const TargetMachine &TM, const MCSymbol *Sym)"
  },
  {
    "label": "emitModuleFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitModuleFlags(MCStreamer &Streamer, ArrayRef<Module::ModuleFlagEntry> Flags, Mangler &Mang, const TargetMachine &TM)"
  },
  {
    "label": "getSectionForConstant()",
    "kind": "Method",
    "detail": "Function (} MCSection*)",
    "insertText": "getSectionForConstant(SectionKind Kind, const Constant *C)"
  },
  {
    "label": "getKindForGlobal()",
    "kind": "Method",
    "detail": "Function (SectionKind)",
    "insertText": "getKindForGlobal(const GlobalValue *GV, const TargetMachine &TM)"
  },
  {
    "label": "SectionForGlobal()",
    "kind": "Method",
    "detail": "Function (MCSection*)",
    "insertText": "SectionForGlobal(const GlobalValue *GV, SectionKind Kind, Mangler &Mang, const TargetMachine &TM)"
  },
  {
    "label": "SectionForGlobal()",
    "kind": "Method",
    "detail": "Function (MCSection*)",
    "insertText": "SectionForGlobal(const GlobalValue *GV, Mangler &Mang, const TargetMachine &TM)"
  },
  {
    "label": "getNameWithPrefix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getNameWithPrefix(SmallVectorImpl<char> &OutName, const GlobalValue *GV, bool CannotUsePrivateLabel, Mangler &Mang, const TargetMachine &TM)"
  },
  {
    "label": "getSectionForJumpTable()",
    "kind": "Method",
    "detail": "Function (MCSection*)",
    "insertText": "getSectionForJumpTable(const Function &F, Mangler &Mang, const TargetMachine &TM)"
  },
  {
    "label": "shouldPutJumpTableInFunctionSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "shouldPutJumpTableInFunctionSection(bool UsesLabelDifference, const Function &F)"
  },
  {
    "label": "getExplicitSectionGlobal()",
    "kind": "Method",
    "detail": "Function (MCSection*)",
    "insertText": "getExplicitSectionGlobal(const GlobalValue *GV, SectionKind Kind, Mangler &Mang, const TargetMachine &TM)"
  },
  {
    "label": "getSpecialCasedSectionGlobals()",
    "kind": "Method",
    "detail": "Function (const MCSection*)",
    "insertText": "getSpecialCasedSectionGlobals(const GlobalValue *GV, SectionKind Kind, Mangler &Mang)"
  },
  {
    "label": "getSymbolWithGlobalValueBase()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getSymbolWithGlobalValueBase(const GlobalValue *GV, StringRef Suffix, Mangler &Mang, const TargetMachine &TM)"
  },
  {
    "label": "getCFIPersonalitySymbol()",
    "kind": "Method",
    "detail": "Function (MCSymbol*)",
    "insertText": "getCFIPersonalitySymbol(const GlobalValue *GV, Mangler &Mang, const TargetMachine &TM, MachineModuleInfo *MMI)"
  },
  {
    "label": "getTTypeReference()",
    "kind": "Method",
    "detail": "Function (const MCExpr*)",
    "insertText": "getTTypeReference(const MCSymbolRefExpr *Sym, unsigned Encoding, MCStreamer &Streamer)"
  },
  {
    "label": "getStaticCtorSection()",
    "kind": "Method",
    "detail": "Function (MCSection*)",
    "insertText": "getStaticCtorSection(unsigned Priority, const MCSymbol *KeySym)"
  },
  {
    "label": "getExecutableRelativeSymbol()",
    "kind": "Method",
    "detail": "Function (const MCExpr*)",
    "insertText": "getExecutableRelativeSymbol(const ConstantExpr *CE, Mangler &Mang, const TargetMachine &TM)"
  },
  {
    "label": "SelectSectionForGlobal()",
    "kind": "Method",
    "detail": "Function (} protected : MCSection*)",
    "insertText": "SelectSectionForGlobal(const GlobalValue *GV, SectionKind Kind, Mangler &Mang, const TargetMachine &TM)"
  }
]