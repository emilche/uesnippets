[
  {
    "label": "static_val",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "static_val"
  },
  {
    "label": "TensorUInt128",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorUInt128"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_UINT128_H # define EIGEN_CXX11_TENSOR_TENSOR_UINT128_H namespace Eigen { namespace internal { template<uint64_t n> struct static_val { const uint64_t value = n ; EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE operator)",
    "insertText": "uint64_t()"
  },
  {
    "label": "static_val()",
    "kind": "Method",
    "detail": "Function (} template<T> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "static_val(const T& v)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(v)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(v == n)"
  },
  {
    "label": "TensorUInt128()",
    "kind": "Method",
    "detail": "Function (} } ; template<HIGH = uint64_t,LOW = uint64_t> struct TensorUInt128 { HIGH high ; LOW low ; template<OTHER_HIGH,OTHER_LOW> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "TensorUInt128(const TensorUInt128<OTHER_HIGH, OTHER_LOW>& other) : high(other.high), low(other.low)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof(OTHER_HIGH) <= sizeof(HIGH), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof(OTHER_LOW) <= sizeof(LOW), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OTHER_HIGH,OTHER_LOW> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE TensorUInt128&)",
    "insertText": "operator(const TensorUInt128<OTHER_HIGH, OTHER_LOW>& other)"
  },
  {
    "label": "TensorUInt128()",
    "kind": "Method",
    "detail": "Function (high = other . high ; low = other . low ; return* this ; } template<T> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "TensorUInt128(const T& x) : high(0), low(x)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((static_cast<typename conditional<sizeof(T) == 8, uint64_t, uint32_t>::type>(x) <= NumTraits<uint64_t>::highest()))"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(x >= 0)"
  },
  {
    "label": "TensorUInt128()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE)",
    "insertText": "TensorUInt128(HIGH y, LOW x) : high(y), low(x)"
  },
  {
    "label": "LOW()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE operator)",
    "insertText": "LOW()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<HL,LL,HR,LR> EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE bool)",
    "insertText": "operator(const TensorUInt128<HL, LL>& lhs, const TensorUInt128<HR, LR>& rhs)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (TensorUInt128<uint64_t,uint64_t>)",
    "insertText": "result(lhs.high + rhs.high, lhs.low + rhs.low)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (TensorUInt128<uint64_t,uint64_t>)",
    "insertText": "result(lhs.high - rhs.high, lhs.low - rhs.low)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (const uint64_t LOW = 0 x00000000FFFFFFFFLL ; const uint64_t HIGH = 0 xFFFFFFFF00000000LL ; uint64_t d = lhs . low& LOW ; uint64_t)",
    "insertText": "c(lhs.low & HIGH)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (uint64_t b = lhs . high& LOW ; uint64_t)",
    "insertText": "a(lhs.high & HIGH)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (uint64_t h = rhs . low& LOW ; uint64_t)",
    "insertText": "g(rhs.low & HIGH)"
  },
  {
    "label": "e()",
    "kind": "Method",
    "detail": "Function (uint64_t f = rhs . high& LOW ; uint64_t)",
    "insertText": "e(rhs.high & HIGH)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64_t acc = d* h ; uint64_t low = acc& LOW ; acc>> = 3 2 LL ; uint64_t carry = 0 ; uint64_t acc2 = acc + c* h ;)",
    "insertText": "if(acc2 < acc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (carry + + ; } acc = acc2 + d* g ;)",
    "insertText": "if(acc < acc2)"
  },
  {
    "label": "low()",
    "kind": "Method",
    "detail": "Function (carry + + ; })",
    "insertText": "low(acc << 32LL)"
  },
  {
    "label": "acc2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "acc2(acc >> 32LL) | (carry << 32LL)"
  },
  {
    "label": "high()",
    "kind": "Method",
    "detail": "Function (acc = acc2 + a* h ; acc2 = acc + b* g ; acc = acc2 + c* f ; acc2 = acc + d* e ;)",
    "insertText": "high(acc2 << 32LL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(lhs < rhs)"
  },
  {
    "label": "power2()",
    "kind": "Method",
    "detail": "Function (} else { TensorUInt128<uint64_t,uint64_t>)",
    "insertText": "power2(1)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (TensorUInt128<uint64_t,uint64_t>)",
    "insertText": "d(rhs)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (TensorUInt128<uint64_t,uint64_t>)",
    "insertText": "tmp(lhs - d)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (tmp = tmp - d ; d = d + d ; power2 = power2 + power2 ; } tmp = TensorUInt128<uint64_t,)",
    "insertText": "uint64_t(lhs.high, lhs.low)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (TensorUInt128<uint64_t,uint64_t>)",
    "insertText": "result(0)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (tmp = tmp - d ; result = result + power2 ; } power2 = TensorUInt128<uint64_t,)",
    "insertText": "uint64_t(power2.high >> 1, (power2.low >> 1) | (power2.high << 63))"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (d = TensorUInt128<uint64_t,)",
    "insertText": "uint64_t(d.high >> 1, (d.low >> 1) | (d.high << 63))"
  }
]