[
  {
    "label": "IDetailCategoryBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCategoryBuilder"
  },
  {
    "label": "ULocalizationTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalizationTarget"
  },
  {
    "label": "ULocalizationTargetSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalizationTargetSet"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "ILocalizationServiceOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILocalizationServiceOperation"
  },
  {
    "label": "ILocalizationServiceProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILocalizationServiceProvider"
  },
  {
    "label": "LOCALIZATION_SERVICES_WITH_SLATE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" ILocalizationServiceOperation . h \" # include \" ILocalizationServiceState . h \" # include \" Features / IModularFeature . h \" # include \" LocalizationServiceOperations . h \" class IDetailCategoryBuilder ; class ULocalizationTarget ; class ULocalizationTargetSet ; class IDetailCategoryBuilder ; class ULocalizationTarget ; class ULocalizationTargetSet ; # define)",
    "insertText": "LOCALIZATION_SERVICES_WITH_SLATE(!(PLATFORM_LINUX && IS_PROGRAM))"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (enum Type { Synchronous,Asynchronous } ; } namespace ELocalizationServiceCacheUsage { enum Type { ForceUpdate,Use,} ; } namespace ELocalizationServiceOperationCommandResult { enum Type { Failed,Succeeded,Cancelled,} ; })",
    "insertText": "DECLARE_DELEGATE_TwoParams(FLocalizationServiceOperationComplete, const FLocalizationServiceOperationRef&, ELocalizationServiceOperationCommandResult::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (typedef TSharedRef<class ILocalizationServiceOperation,ESPMode::ThreadSafe> FLocalizationServiceOperationSharedRef ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(FLocalizationServiceOperationSharedRef, FGetLocalizationServiceOperation)"
  },
  {
    "label": "ILocalizationServiceProvider()",
    "kind": "Method",
    "detail": "Function (class ILocalizationServiceProvider : public IModularFeature { public : ~)",
    "insertText": "ILocalizationServiceProvider()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(bool bForceConnection = true)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetStatusText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetStatusText()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAvailable()"
  },
  {
    "label": "Login()",
    "kind": "Method",
    "detail": "Function (ELocalizationServiceOperationCommandResult::Type)",
    "insertText": "Login(const FString& InPassword = FString(), ELocalizationServiceOperationConcurrency::Type InConcurrency = ELocalizationServiceOperationConcurrency::Synchronous, const FLocalizationServiceOperationComplete& InOperationCompleteDelegate = FLocalizationServiceOperationComplete())"
  },
  {
    "label": "FConnectToProvider()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FConnectToProvider,ESPMode::ThreadSafe> ConnectOperation = ILocalizationServiceOperation::Create<)",
    "insertText": "FConnectToProvider()"
  },
  {
    "label": "SetPassword()",
    "kind": "Method",
    "detail": "Function (ConnectOperation ->)",
    "insertText": "SetPassword(InPassword)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (} ELocalizationServiceOperationCommandResult::Type)",
    "insertText": "GetState(const TArray<FLocalizationServiceTranslationIdentifier>& InTranslationIds, TArray< TSharedRef<ILocalizationServiceState, ESPMode::ThreadSafe> >& OutState, ELocalizationServiceCacheUsage::Type InStateCacheUsage)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ILocalizationServiceState,ESPMode::ThreadSafe>)",
    "insertText": "GetState(const FLocalizationServiceTranslationIdentifier& InTranslationId, ELocalizationServiceCacheUsage::Type InStateCacheUsage)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<FLocalizationServiceTranslationIdentifier> TranslationIds ; TArray<TSharedRef<ILocalizationServiceState,ESPMode::ThreadSafe>> States ; TranslationIds .)",
    "insertText": "Add(InTranslationId)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ILocalizationServiceState,ESPMode::ThreadSafe> State = States [ 0 ] ; return State ; } return NULL ; } ELocalizationServiceOperationCommandResult::Type)",
    "insertText": "Execute(const TSharedRef<ILocalizationServiceOperation, ESPMode::ThreadSafe>& InOperation, const TArray<FLocalizationServiceTranslationIdentifier>& InTranslationIds, ELocalizationServiceOperationConcurrency::Type InConcurrency = ELocalizationServiceOperationConcurrency::Synchronous, const FLocalizationServiceOperationComplete& InOperationCompleteDelegate = FLocalizationServiceOperationComplete())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (ELocalizationServiceOperationCommandResult::Type)",
    "insertText": "Execute(const TSharedRef<ILocalizationServiceOperation, ESPMode::ThreadSafe>& InOperation, const ELocalizationServiceOperationConcurrency::Type InConcurrency = ELocalizationServiceOperationConcurrency::Synchronous, const FLocalizationServiceOperationComplete& InOperationCompleteDelegate = FLocalizationServiceOperationComplete())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} ELocalizationServiceOperationCommandResult::Type)",
    "insertText": "Execute(const TSharedRef<ILocalizationServiceOperation, ESPMode::ThreadSafe>& InOperation, const FLocalizationServiceTranslationIdentifier& InTranslationId, const ELocalizationServiceOperationConcurrency::Type InConcurrency = ELocalizationServiceOperationConcurrency::Synchronous, const FLocalizationServiceOperationComplete& InOperationCompleteDelegate = FLocalizationServiceOperationComplete())"
  },
  {
    "label": "CanCancelOperation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCancelOperation(const TSharedRef<ILocalizationServiceOperation, ESPMode::ThreadSafe>& InOperation)"
  },
  {
    "label": "CancelOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelOperation(const TSharedRef<ILocalizationServiceOperation, ESPMode::ThreadSafe>& InOperation)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "CustomizeSettingsDetails()",
    "kind": "Method",
    "detail": "Function (# if LOCALIZATION_SERVICES_WITH_SLATE void)",
    "insertText": "CustomizeSettingsDetails(IDetailCategoryBuilder& DetailCategoryBuilder)"
  },
  {
    "label": "CustomizeTargetDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeTargetDetails(IDetailCategoryBuilder& DetailCategoryBuilder, TWeakObjectPtr<ULocalizationTarget> LocalizationTarget)"
  },
  {
    "label": "CustomizeTargetToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeTargetToolbar(TSharedRef<FExtender>& MenuExtender, TWeakObjectPtr<ULocalizationTarget> LocalizationTarget)"
  },
  {
    "label": "CustomizeTargetSetToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeTargetSetToolbar(TSharedRef<FExtender>& MenuExtender, TWeakObjectPtr<ULocalizationTargetSet> LocalizationTargetSet)"
  }
]