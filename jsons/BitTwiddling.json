[
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / PlatformMath . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsSigned . h \" # include \" Traits / IntType . h \" namespace UE::Net { template<T,TEnableIf<TIsSigned<T>::Value&&)",
    "insertText": "sizeof(T) <= 4U, int32>::Type X = -1> uint32 GetBitsNeeded(const T Value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef TUnsignedIntType<)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 MassagedValue =)",
    "insertText": "uint32(SmallUnsignedType(T(Value ^ (Value >> (sizeof(T)*8 - 1U)))))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<! TIsSigned<T>::Value&&)",
    "insertText": "sizeof(T) <= 4U, uint32>::Type X = 1U> uint32 GetBitsNeeded(const T Value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<TIsSigned<T>::Value&&)",
    "insertText": "sizeof(T) == 8U, int64>::Type X = -1LL> uint32 GetBitsNeeded(const T Value)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (const uint64 MassagedValue =)",
    "insertText": "uint64(Value ^ (Value >> 63U))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<! TIsSigned<T>::Value&&)",
    "insertText": "sizeof(T) == 8U, uint64>::Type X = 1ULL> uint32 GetBitsNeeded(const T Value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<TIsSigned<T>::Value&&)",
    "insertText": "sizeof(T) <= 4U, int32>::Type X = -1> uint32 GetBitsNeededForRange(const T LowerBound, const T UpperBound)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 Range =)",
    "insertText": "uint32(UnsignedType(UnsignedType(UpperBound) - UnsignedType(LowerBound)))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<! TIsSigned<T>::Value&&)",
    "insertText": "sizeof(T) <= 4U, uint32>::Type X = 1U> uint32 GetBitsNeededForRange(const T LowerBound, const T UpperBound)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 Range =)",
    "insertText": "uint32(UpperBound) - uint32(LowerBound)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<)",
    "insertText": "sizeof(T) == 8U, uint64>::Type X = 1ULL> uint32 GetBitsNeededForRange(const T LowerBound, const T UpperBound)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (const uint64 Range =)",
    "insertText": "uint64(UpperBound) - uint64(LowerBound)"
  },
  {
    "label": "GetLeastSignificantBit()",
    "kind": "Method",
    "detail": "Function (} template<T,TEnableIf<! TIsSigned<T>::Value,int>::Type X = 1> T)",
    "insertText": "GetLeastSignificantBit(const T Value)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T LeastSignificantBit = Value&)",
    "insertText": "T(-SignedT(Value))"
  }
]