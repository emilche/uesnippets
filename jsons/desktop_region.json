[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "RowSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RowSpan"
  },
  {
    "label": "Row",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Row"
  },
  {
    "label": "RowSpan()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_DESKTOP_REGION_H_ # define MODULES_DESKTOP_CAPTURE_DESKTOP_REGION_H_ # include<stdint . h> # include<map> # include<vector> # include \" modules / desktop_capture / desktop_geometry . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT DesktopRegion { private : struct RowSpan {)",
    "insertText": "RowSpan(int32_t left, int32_t right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RowSpan& that)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Row(Row&&)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Row(int32_t top, int32_t bottom)"
  },
  {
    "label": "Row()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Row()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (int32_t top ; int32_t bottom ; RowSpanSet spans ; } ; typedef std::map<int,Row*> Rows ; public : class RTC_EXPORT Iterator { public :)",
    "insertText": "Iterator(const DesktopRegion& target)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Iterator()"
  },
  {
    "label": "IsAtEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtEnd()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance()"
  },
  {
    "label": "rect()",
    "kind": "Method",
    "detail": "Function (const DesktopRect&)",
    "insertText": "rect()"
  },
  {
    "label": "DesktopRegion()",
    "kind": "Method",
    "detail": "Function (Rows::const_iterator row_ ; Rows::const_iterator previous_row_ ; RowSpanSet::const_iterator row_span_ ; DesktopRect rect_ ; } ;)",
    "insertText": "DesktopRegion()"
  },
  {
    "label": "DesktopRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopRegion(const DesktopRect& rect)"
  },
  {
    "label": "DesktopRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopRegion(const DesktopRect* rects, int count)"
  },
  {
    "label": "DesktopRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DesktopRegion(const DesktopRegion& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DesktopRegion&)",
    "insertText": "operator(const DesktopRegion& other)"
  },
  {
    "label": "is_empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_empty()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const DesktopRegion& region)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "SetRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRect(const DesktopRect& rect)"
  },
  {
    "label": "AddRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRect(const DesktopRect& rect)"
  },
  {
    "label": "AddRects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRects(const DesktopRect* rects, int count)"
  },
  {
    "label": "AddRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRegion(const DesktopRegion& region)"
  },
  {
    "label": "Intersect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Intersect(const DesktopRegion& region1, const DesktopRegion& region2)"
  },
  {
    "label": "IntersectWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntersectWith(const DesktopRegion& region)"
  },
  {
    "label": "IntersectWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntersectWith(const DesktopRect& rect)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subtract(const DesktopRegion& region)"
  },
  {
    "label": "Subtract()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Subtract(const DesktopRect& rect)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(int32_t dx, int32_t dy)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(DesktopRegion* region)"
  },
  {
    "label": "CompareSpanLeft()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CompareSpanLeft(const RowSpan& r, int32_t value)"
  },
  {
    "label": "CompareSpanRight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareSpanRight(const RowSpan& r, int32_t value)"
  },
  {
    "label": "AddSpanToRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpanToRow(Row* row, int32_t left, int32_t right)"
  },
  {
    "label": "IsSpanInRow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSpanInRow(const Row& row, const RowSpan& rect)"
  },
  {
    "label": "IntersectRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntersectRows(const RowSpanSet& set1, const RowSpanSet& set2, RowSpanSet* output)"
  },
  {
    "label": "SubtractRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubtractRows(const RowSpanSet& set_a, const RowSpanSet& set_b, RowSpanSet* output)"
  },
  {
    "label": "MergeWithPrecedingRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeWithPrecedingRow(Rows::iterator row)"
  }
]