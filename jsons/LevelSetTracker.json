[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LevelSetTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetTracker"
  },
  {
    "label": "State",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "State"
  },
  {
    "label": "Trim",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Trim"
  },
  {
    "label": "Normalizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Normalizer"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVEL_SET_TRACKER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVEL_SET_TRACKER_HAS_BEEN_INCLUDED # include<tbb / parallel_for . h> # include<openvdb / Types . h> # include<openvdb / math / Math . h> # include<openvdb / math / FiniteDifference . h> # include<openvdb / math / Operators . h> # include<openvdb / math / Stencils . h> # include<openvdb / math / Transform . h> # include<openvdb / Grid . h> # include<openvdb / util / NullInterrupter . h> # include<openvdb / tree / ValueAccessor . h> # include<openvdb / tree / LeafManager . h> # include \" ChangeBackground . h \" # include \" Morphology . h \" # include \" Prune . h \" # include<functional> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { namespace lstrack { enum class TrimMode { kNone,kInterior,kExterior,kAll } ; } template<GridT,InterruptT = util::NullInterrupter> class LevelSetTracker { public : using TrimMode = lstrack::TrimMode ; using GridType = GridT ; using TreeType = GridT::TreeType ; using LeafType = TreeType::LeafNodeType ; using ValueType = TreeType::ValueType ; using LeafManagerType = tree::LeafManager<TreeType> ; using LeafRange = LeafManagerType::LeafRange ; using BufferType = LeafManagerType::BufferType ; using MaskTreeType = TreeType::template ValueConverter<ValueMask>::Type ;)",
    "insertText": "static_assert(std::is_floating_point<ValueType>::value, \"LevelSetTracker requires a level set grid with floating-point values\")"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (struct State {)",
    "insertText": "State(math::BiasedGradientScheme s = math::HJWENO5_BIAS, math::TemporalIntegrationScheme t = math::TVD_RK1, int n = static_cast<int>(LEVEL_SET_HALF_WIDTH), int g = 1) : spatialScheme(s), temporalScheme(t), normCount(n), grainSize(g)"
  },
  {
    "label": "LevelSetTracker()",
    "kind": "Method",
    "detail": "Function (} math::BiasedGradientScheme spatialScheme ; math::TemporalIntegrationScheme temporalScheme ; int normCount ; int grainSize ; } ;)",
    "insertText": "LevelSetTracker(GridT& grid, InterruptT* interrupt = nullptr)"
  },
  {
    "label": "LevelSetTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LevelSetTracker()"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (delete mLeafs ; } template<MaskType> void)",
    "insertText": "normalize(const MaskType* mask)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "normalize()"
  },
  {
    "label": "MaskTreeType()",
    "kind": "Method",
    "detail": "Function (this -> normalize<)",
    "insertText": "MaskTreeType(nullptr)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "track()"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prune()"
  },
  {
    "label": "dilate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilate(int iterations = 1)"
  },
  {
    "label": "erode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erode(int iterations = 1)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "resize(Index halfWidth = static_cast<Index>(LEVEL_SET_HALF_WIDTH))"
  },
  {
    "label": "getHalfWidth()",
    "kind": "Method",
    "detail": "Function (ValueType)",
    "insertText": "getHalfWidth()"
  },
  {
    "label": "getState()",
    "kind": "Method",
    "detail": "Function (} State)",
    "insertText": "getState()"
  },
  {
    "label": "getSpatialScheme()",
    "kind": "Method",
    "detail": "Function (mState = s ; } math::BiasedGradientScheme)",
    "insertText": "getSpatialScheme()"
  },
  {
    "label": "getTemporalScheme()",
    "kind": "Method",
    "detail": "Function (mState . spatialScheme = s ; } math::TemporalIntegrationScheme)",
    "insertText": "getTemporalScheme()"
  },
  {
    "label": "getNormCount()",
    "kind": "Method",
    "detail": "Function (mState . temporalScheme = s ; } int)",
    "insertText": "getNormCount()"
  },
  {
    "label": "getGrainSize()",
    "kind": "Method",
    "detail": "Function (mState . normCount = n ; } int)",
    "insertText": "getGrainSize()"
  },
  {
    "label": "trimming()",
    "kind": "Method",
    "detail": "Function (mState . grainSize = grainsize ; } TrimMode)",
    "insertText": "trimming()"
  },
  {
    "label": "voxelSize()",
    "kind": "Method",
    "detail": "Function (mTrimMode = mode ; } ValueType)",
    "insertText": "voxelSize()"
  },
  {
    "label": "endInterrupter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "endInterrupter()"
  },
  {
    "label": "checkInterrupter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkInterrupter()"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (const GridType&)",
    "insertText": "grid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LevelSetTracker&)",
    "insertText": "operator(const LevelSetTracker&)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (template<TrimMode Trimming> struct Trim {)",
    "insertText": "Trim(LevelSetTracker& tracker) : mTracker(tracker)"
  },
  {
    "label": "trim()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "trim()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(const LeafRange& r)"
  },
  {
    "label": "Normalizer()",
    "kind": "Method",
    "detail": "Function (LevelSetTracker& mTracker ; } ; template<math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme,MaskT> struct Normalizer { using SchemeT = math::BIAS_SCHEME<SpatialScheme> ; using StencilT = SchemeT::template ISStencil<GridType>::StencilType ; using MaskLeafT = MaskT::LeafNodeType ; using MaskIterT = MaskLeafT::ValueOnCIter ; using VoxelIterT = LeafType::ValueOnCIter ;)",
    "insertText": "Normalizer(LevelSetTracker& tracker, const MaskT* mask)"
  },
  {
    "label": "mTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mTask(const_cast<Normalizer*>(this), r)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "cook(const char* msg, int swapBuffer=0)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (template<int Nominator,int Denominator> void)",
    "insertText": "euler(const LeafRange& range, Index phiBuffer, Index resultBuffer)"
  },
  {
    "label": "euler01()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "euler01(const LeafRange& r)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r, 0, 1)"
  },
  {
    "label": "euler12()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler12(const LeafRange& r)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r, 1, 1)"
  },
  {
    "label": "euler34()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler34(const LeafRange& r)"
  },
  {
    "label": "euler()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "euler(r, 1, 2)"
  },
  {
    "label": "euler13()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "euler13(const LeafRange& r)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (} template<int Nominator,int Denominator> void)",
    "insertText": "eval(StencilT& stencil, const ValueType* phi, ValueType* result, Index n)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (LevelSetTracker& mTracker ; const MaskT* mMask ; const ValueType mDt,mInvDx ; std::function<)",
    "insertText": "void(Normalizer*, const LeafRange&)"
  },
  {
    "label": "normalize1()",
    "kind": "Method",
    "detail": "Function (} ; template<math::BiasedGradientScheme SpatialScheme,MaskT> void)",
    "insertText": "normalize1(const MaskT* mask)"
  },
  {
    "label": "normalize2()",
    "kind": "Method",
    "detail": "Function (template<math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme,MaskT> void)",
    "insertText": "normalize2(const MaskT* mask)"
  },
  {
    "label": "LevelSetTracker()",
    "kind": "Method",
    "detail": "Function (GridType* mGrid ; LeafManagerType* mLeafs ; InterruptT* mInterrupter ; const ValueType mDx ; State mState ; TrimMode mTrimMode = TrimMode::kAll ; } ; template<GridT,InterruptT> LevelSetTracker<GridT,InterruptT)",
    "insertText": "LevelSetTracker(GridT& grid, InterruptT* interrupt): mGrid(&grid), mLeafs(new LeafManagerType(grid.tree())), mInterrupter(interrupt), mDx(static_cast<ValueType>(grid.voxelSize()[0])), mState()"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"The transform must have uniform scale for the LevelSetTracker to function\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(grid.getGridClass() != GRID_LEVEL_SET)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"LevelSetTracker expected a level set, got a grid of class \\\"\" + grid.gridClassToString(grid.getGridClass()) + \"\\\" [hint: Grid::setGridClass(openvdb::GRID_LEVEL_SET)]\")"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "startInterrupter(\"Pruning Level Set\")"
  },
  {
    "label": "kExterior()",
    "kind": "Method",
    "detail": "Function (break ; case TrimMode::kExterior : Trim<)",
    "insertText": "kExterior(*this).trim()"
  },
  {
    "label": "kAll()",
    "kind": "Method",
    "detail": "Function (break ; case TrimMode::kAll : Trim<)",
    "insertText": "kAll(*this).trim()"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "pruneLevelSet(mGrid->tree())"
  },
  {
    "label": "rebuildLeafArray()",
    "kind": "Method",
    "detail": "Function (mLeafs ->)",
    "insertText": "rebuildLeafArray()"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateActiveValues(*mLeafs, 1, tools::NN_FACE, tools::IGNORE_TILES)"
  },
  {
    "label": "dilate()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> void LevelSetTracker<GridT,InterruptT)",
    "insertText": "dilate(int iterations)"
  },
  {
    "label": "changeLevelSetBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "changeLevelSetBackground(this->leafs(), mDx + mGrid->background())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int i=0; i < iterations; ++i)"
  },
  {
    "label": "mask0()",
    "kind": "Method",
    "detail": "Function (MaskTreeType)",
    "insertText": "mask0(mGrid->tree(), false, TopologyCopy())"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (MaskTreeType)",
    "insertText": "mask(mGrid->tree(), false, TopologyCopy())"
  },
  {
    "label": "topologyDifference()",
    "kind": "Method",
    "detail": "Function (mask .)",
    "insertText": "topologyDifference(mask0)"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "normalize(&mask)"
  },
  {
    "label": "erode()",
    "kind": "Method",
    "detail": "Function (} } } template<GridT,InterruptT> void LevelSetTracker<GridT,InterruptT)",
    "insertText": "erode(int iterations)"
  },
  {
    "label": "erodeActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "erodeActiveValues(*mLeafs, iterations, tools::NN_FACE, tools::IGNORE_TILES)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneLevelSet(mLeafs->tree())"
  },
  {
    "label": "background()",
    "kind": "Method",
    "detail": "Function (const ValueType background = mGrid ->)",
    "insertText": "background() - ValueType(iterations)"
  },
  {
    "label": "changeLevelSetBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "changeLevelSetBackground(this->leafs(), background)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> bool LevelSetTracker<GridT,InterruptT)",
    "insertText": "resize(Index halfWidth)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int wOld = static_cast<)",
    "insertText": "int(math::RoundDown(this->getHalfWidth()))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int wNew = static_cast<)",
    "insertText": "int(halfWidth)"
  },
  {
    "label": "dilate()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "dilate(wNew - wOld)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(wOld > wNew)"
  },
  {
    "label": "erode()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "erode(wOld - wNew)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (} return wOld ! = wNew ; } template<GridT,InterruptT> void LevelSetTracker<GridT,InterruptT)",
    "insertText": "startInterrupter(const char* msg)"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "self().cancel_group_execution()"
  },
  {
    "label": "MaskT()",
    "kind": "Method",
    "detail": "Function (break ; case math::SECOND_BIAS : this -> normalize1<math::SECOND_BIAS,)",
    "insertText": "MaskT(mask)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (break ; case math::UNKNOWN_BIAS : default :)",
    "insertText": "OPENVDB_THROW(ValueError, \"Spatial difference scheme not supported!\")"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (break ; case math::UNKNOWN_TIS : default :)",
    "insertText": "OPENVDB_THROW(ValueError, \"Temporal integration scheme not supported!\")"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (Normalizer<SpatialScheme,TemporalScheme,MaskT>)",
    "insertText": "tmp(*this, mask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "if(Trimming != TrimMode::kNone)"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (const LeafRange range = mTracker .)",
    "insertText": "leafs().leafRange(grainSize)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } OPENVDB_NO_UNREACHABLE_CODE_WARNING_END } template<GridT,InterruptT> template<lstrack::TrimMode Trimming> void LevelSetTracker<GridT,InterruptT>::Trim<Trimming)",
    "insertText": "operator()(const LeafRange& range)"
  },
  {
    "label": "background()",
    "kind": "Method",
    "detail": "Function (const ValueType gamma = mTracker . mGrid ->)",
    "insertText": "background()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "for(auto leafIter = range.begin(); leafIter; ++leafIter)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto& leaf =* leafIter ;)",
    "insertText": "for(auto iter = leaf.beginValueOn(); iter; ++iter)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (const auto val =* iter ;)",
    "insertText": "switch(Trimming)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (leaf .)",
    "insertText": "setValueOff(iter.pos(), -gamma)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; case TrimMode::kExterior :)",
    "insertText": "if(val >= gamma)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (leaf .)",
    "insertText": "setValueOff(iter.pos(), gamma)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} break ; case TrimMode::kAll :)",
    "insertText": "if(val <= -gamma)"
  },
  {
    "label": "Normalizer()",
    "kind": "Method",
    "detail": "Function (} break ; } } } OPENVDB_NO_UNREACHABLE_CODE_WARNING_END } template<GridT,InterruptT> template<math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme,MaskT> LevelSetTracker<GridT,InterruptT>::Normalizer<SpatialScheme,TemporalScheme,MaskT)",
    "insertText": "Normalizer(LevelSetTracker& tracker, const MaskT* mask) : mTracker(tracker) , mMask(mask) , mDt(tracker.voxelSize()*(TemporalScheme == math::TVD_RK1 ? 0.3f : TemporalScheme == math::TVD_RK2 ? 0.9f : 1.0f)) , mInvDx(1.0f/tracker.voxelSize()) , mTask(nullptr)"
  },
  {
    "label": "rebuildAuxBuffers()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ; mTracker . mLeafs ->)",
    "insertText": "rebuildAuxBuffers(TemporalScheme == math::TVD_RK3 ? 2 : 1)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "switch(TemporalScheme)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Normalizing level set using TVD_RK1\", 1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (break ; case math::TVD_RK2 : mTask =)",
    "insertText": "bind(&Normalizer::euler01, ph::_1, ph::_2)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Normalizing level set using TVD_RK1 (step 1 of 2)\", 1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Normalizer::euler12, ph::_1, ph::_2)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Normalizing level set using TVD_RK1 (step 2 of 2)\", 1)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Normalizing level set using TVD_RK3 (step 1 of 3)\", 1)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Normalizer::euler34, ph::_1, ph::_2)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Normalizing level set using TVD_RK3 (step 2 of 3)\", 2)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Normalizer::euler13, ph::_1, ph::_2)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(\"Normalizing level set using TVD_RK3 (step 3 of 3)\", 2)"
  },
  {
    "label": "removeAuxBuffers()",
    "kind": "Method",
    "detail": "Function (} OPENVDB_NO_UNREACHABLE_CODE_WARNING_END } mTracker . mLeafs ->)",
    "insertText": "removeAuxBuffers()"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> template<math::BiasedGradientScheme SpatialScheme,math::TemporalIntegrationScheme TemporalScheme,MaskT> void LevelSetTracker<GridT,InterruptT>::Normalizer<SpatialScheme,TemporalScheme,MaskT)",
    "insertText": "cook(const char* msg, int swapBuffer)"
  },
  {
    "label": "startInterrupter()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "startInterrupter(msg)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (grainSize> 0 ?)",
    "insertText": "parallel_for(range, *this) : (*this)(range)"
  },
  {
    "label": "leafs()",
    "kind": "Method",
    "detail": "Function (mTracker .)",
    "insertText": "leafs().swapLeafBuffer(swapBuffer, grainSize==0)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (using GradientT = math::ISGradientNormSqrd<SpatialScheme> ; const ValueType alpha =)",
    "insertText": "ValueType(Nominator)/ValueType(Denominator)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (const ValueType beta =)",
    "insertText": "ValueType(1)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (const ValueType normSqGradPhi =)",
    "insertText": "result(stencil)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const ValueType phi0 = stencil .)",
    "insertText": "getValue()"
  },
  {
    "label": "phi0()",
    "kind": "Method",
    "detail": "Function (ValueType v =)",
    "insertText": "phi0(math::Sqrt(math::Pow2(phi0) + normSqGradPhi) + math::Tolerance<ValueType>::value())"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (v = phi0 - mDt*)",
    "insertText": "v(math::Sqrt(normSqGradPhi) * mInvDx - 1.0f)"
  },
  {
    "label": "stencil()",
    "kind": "Method",
    "detail": "Function (StencilT)",
    "insertText": "stencil(mTracker.grid())"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (const ValueType* phi = leafIter .)",
    "insertText": "buffer(phiBuffer).data()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (ValueType* result = leafIter .)",
    "insertText": "buffer(resultBuffer).data()"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (stencil .)",
    "insertText": "moveTo(iter)"
  },
  {
    "label": "Denominator()",
    "kind": "Method",
    "detail": "Function (this -> eval<Nominator,)",
    "insertText": "Denominator(stencil, phi, result, iter.pos())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(const MaskLeafT* mask = mMask->probeLeaf(leafIter->origin()))"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (const ValueType* phi0 = leafIter ->)",
    "insertText": "buffer().data()"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (const Index i = iter .)",
    "insertText": "pos()"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (stencil .)",
    "insertText": "moveTo(iter.getCoord(), phi0[i])"
  },
  {
    "label": "Denominator()",
    "kind": "Method",
    "detail": "Function (this -> eval<Nominator,)",
    "insertText": "Denominator(stencil, phi, result, i)"
  }
]