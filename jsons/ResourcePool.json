[
  {
    "label": "ResourcePoolPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResourcePoolPolicy"
  },
  {
    "label": "ResourceCreationArguments",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResourceCreationArguments"
  },
  {
    "label": "TResourcePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TResourcePool"
  },
  {
    "label": "FPooledResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPooledResource"
  },
  {
    "label": "TRenderResourcePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRenderResourcePool"
  },
  {
    "label": "TResourcePool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderResource . h \" # include \" TickableObjectRenderThread . h \" # include \" RHICommandList . h \" template<ResourceType,class ResourcePoolPolicy,class ResourceCreationArguments> class TResourcePool { public :)",
    "insertText": "TResourcePool()"
  },
  {
    "label": "TResourcePool()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TResourcePool(ResourcePoolPolicy InPolicy) : Policy(InPolicy)"
  },
  {
    "label": "DrainPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrainPool(true)"
  },
  {
    "label": "PooledSizeForCreationArguments()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "PooledSizeForCreationArguments(ResourceCreationArguments Args)"
  },
  {
    "label": "GetPoolBucketIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 BucketIndex = Policy .)",
    "insertText": "GetPoolBucketIndex(Args)"
  },
  {
    "label": "CreatePooledResource()",
    "kind": "Method",
    "detail": "Function (} ResourceType)",
    "insertText": "CreatePooledResource(FRHICommandListBase& RHICmdList, ResourceCreationArguments Args)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (TArray<FPooledResource>& PoolBucket = ResourceBuckets [ BucketIndex ] ; { FScopeLock)",
    "insertText": "Lock(&CS)"
  },
  {
    "label": "CreateResource()",
    "kind": "Method",
    "detail": "Function (} } return Policy .)",
    "insertText": "CreateResource(RHICmdList, Args)"
  },
  {
    "label": "ReleasePooledResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleasePooledResource(const ResourceType& Resource)"
  },
  {
    "label": "GetCreationArguments()",
    "kind": "Method",
    "detail": "Function (FPooledResource NewEntry ; NewEntry . Resource = Resource ; NewEntry . FrameFreed = GFrameNumberRenderThread ; NewEntry . CreationArguments = Policy .)",
    "insertText": "GetCreationArguments(Resource)"
  },
  {
    "label": "GetPoolBucketIndex()",
    "kind": "Method",
    "detail": "Function (const int32 SafeFrameIndex = GFrameNumberRenderThread % ResourcePoolPolicy::NumSafeFrames ; const uint32 BucketIndex = Policy .)",
    "insertText": "GetPoolBucketIndex(NewEntry.CreationArguments)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SafeResourceBuckets [ SafeFrameIndex ] [ BucketIndex ] .)",
    "insertText": "Add(NewEntry)"
  },
  {
    "label": "DrainPool()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrainPool(bool bForceDrainAll)"
  },
  {
    "label": "SafeFrameIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "SafeFrameIndex(GFrameNumberRenderThread + 1)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ResourceBuckets [ BucketIndex ] .)",
    "insertText": "Append(SafeResourceBuckets[SafeFrameIndex][BucketIndex])"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (SafeResourceBuckets [ SafeFrameIndex ] [ BucketIndex ] .)",
    "insertText": "Reset()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int32 FrameIndex = 0; FrameIndex < ResourcePoolPolicy::NumSafeFrames; FrameIndex++)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ResourceBuckets [ BucketIndex ] .)",
    "insertText": "Append(SafeResourceBuckets[FrameIndex][BucketIndex])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(int32 BucketIndex = 0; BucketIndex < ResourcePoolPolicy::NumPoolBuckets; BucketIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPooledResource& PoolEntry = ResourceBuckets [ BucketIndex ] [ EntryIndex ] ;)",
    "insertText": "if((GFrameNumberRenderThread - PoolEntry.FrameFreed) > CullAfterFramesNum || bForceDrainAll)"
  },
  {
    "label": "FreeResource()",
    "kind": "Method",
    "detail": "Function (Policy .)",
    "insertText": "FreeResource(ResourceBuckets[BucketIndex][EntryIndex].Resource)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (ResourceBuckets [ BucketIndex ] .)",
    "insertText": "RemoveAtSwap(EntryIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - NumToCleanThisFrame ;)",
    "insertText": "if(!bForceDrainAll && NumToCleanThisFrame == 0)"
  },
  {
    "label": "TRenderResourcePool()",
    "kind": "Method",
    "detail": "Function (break ; } } } private : ResourcePoolPolicy Policy ; struct FPooledResource { ResourceType Resource ; ResourceCreationArguments CreationArguments ; uint32 FrameFreed ; } ; FCriticalSection CS ; TArray<FPooledResource> ResourceBuckets [ ResourcePoolPolicy::NumPoolBuckets ] ; TArray<FPooledResource> SafeResourceBuckets [ ResourcePoolPolicy::NumSafeFrames ] [ ResourcePoolPolicy::NumPoolBuckets ] ; } ; template<ResourceType,class ResourcePoolPolicy,class ResourceCreationArguments> class TRenderResourcePool : public TResourcePool<ResourceType,ResourcePoolPolicy,ResourceCreationArguments>,public FTickableObjectRenderThread,public FRenderResource { public :)",
    "insertText": "TRenderResourcePool() : FTickableObjectRenderThread(false)"
  },
  {
    "label": "TRenderResourcePool()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRenderResourcePool(ResourcePoolPolicy InPolicy) : TResourcePool<ResourceType, ResourcePoolPolicy, ResourceCreationArguments>(InPolicy), FTickableObjectRenderThread(false)"
  },
  {
    "label": "TRenderResourcePool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TRenderResourcePool()"
  },
  {
    "label": "ResourceType()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "ResourceType()"
  },
  {
    "label": "ReleasePooledResource()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReleasePooledResource(ResourceType Resource)"
  },
  {
    "label": "ReleasePooledResource()",
    "kind": "Method",
    "detail": "Function (TResourcePool<ResourceType,ResourcePoolPolicy,ResourceCreationArguments)",
    "insertText": "ReleasePooledResource(Resource)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "DrainPool()",
    "kind": "Method",
    "detail": "Function (TResourcePool<ResourceType,ResourcePoolPolicy,ResourceCreationArguments)",
    "insertText": "DrainPool(false)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister()"
  }
]