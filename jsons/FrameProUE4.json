[
  {
    "label": "FRAMEPRO_GET_CLOCK_COUNT()",
    "kind": "Method",
    "detail": "Function (# include \" FramePro . h \" # if FRAMEPRO_ENABLED&& FRAMEPRO_PLATFORM_UE4 # ifndef FRAMEPRO_UE4_INCLUDED # define FRAMEPRO_UE4_INCLUDED # include \" CoreTypes . h \" # include \" HAL / PlatformMisc . h \" # include \" HAL / PlatformTime . h \" # define)",
    "insertText": "FRAMEPRO_GET_CLOCK_COUNT(time) time = FPlatformTime::Cycles64() #undef FRAMEPRO_API #define FRAMEPRO_API CORE_API #if !defined(FRAMEPRO_WIN_BASED_PLATFORM) #define FRAMEPRO_WIN_BASED_PLATFORM (PLATFORM_WINDOWS) #endif #if !defined(FRAMEPRO_LINUX_BASED_PLATFORM) #define FRAMEPRO_LINUX_BASED_PLATFORM (!FRAMEPRO_WIN_BASED_PLATFORM) #endif #define FRAMEPRO_USE_TLS_SLOTS 1 #if !defined(FRAMEPRO_PORT) #define FRAMEPRO_PORT \"8428\" #endif #define FRAMEPRO_X64 PLATFORM_64BITS #define FRAMEPRO_MAX_PATH 260 #if defined(_WIN32) || defined(_WIN64) || defined(WIN32) || defined(WIN64) || defined(__WIN32__) || defined(__WINDOWS__) #include <tchar.h> #define FRAMEPRO_TCHAR TCHAR #else #define FRAMEPRO_TCHAR char #endif #if FRAMEPRO_LINUX_BASED_PLATFORM #define MULTI_STATEMENT(s)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (s })",
    "insertText": "while(false) #else #define MULTI_STATEMENT(s)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (s })",
    "insertText": "while(true,false) #endif #if !defined(__clang__)"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecording(const FString& filename, bool context_switches, int64 max_file_size)"
  }
]