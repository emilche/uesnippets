[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FArrangedWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedWidget"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UGraphEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGraphEditorSettings"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FInterpCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterpCurve"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FRelinkConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelinkConnection"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" GraphEditorSettings . h \" # include \" GraphSplineOverlapResult . h \" # include \" HAL / Platform . h \" # include \" Layout / ArrangedWidget . h \" # include \" Logging / LogMacros . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" SGraphPin . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / SWidget . h \" class FArrangedChildren ; class FArrangedWidget ; class FSlateRect ; class FSlateWindowElementList ; class SGraphPin ; class SWidget ; class UGraphEditorSettings ; struct FGeometry ; struct FSlateBrush ; template<class T> class FInterpCurve ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogConnectionDrawingPolicy, Log, All)"
  },
  {
    "label": "VerticalMiddleLeftOf()",
    "kind": "Method",
    "detail": "Function (class FGeometryHelper { public : FVector2D)",
    "insertText": "VerticalMiddleLeftOf(const FGeometry& SomeGeometry)"
  },
  {
    "label": "VerticalMiddleRightOf()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "VerticalMiddleRightOf(const FGeometry& SomeGeometry)"
  },
  {
    "label": "CenterOf()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "CenterOf(const FGeometry& SomeGeometry)"
  },
  {
    "label": "ConvertToPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToPoints(const FGeometry& Geom, TArray<FVector2D>& Points)"
  },
  {
    "label": "FindClosestPointOnLine()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "FindClosestPointOnLine(const FVector2D& LineStart, const FVector2D& LineEnd, const FVector2D& TestPoint)"
  },
  {
    "label": "FindClosestPointOnGeom()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "FindClosestPointOnGeom(const FGeometry& Geom, const FVector2D& TestPoint)"
  },
  {
    "label": "FConnectionParams()",
    "kind": "Method",
    "detail": "Function (} ; struct FConnectionParams { FLinearColor WireColor ; UEdGraphPin* AssociatedPin1 ; UEdGraphPin* AssociatedPin2 ; float WireThickness ; bool bDrawBubbles ; bool bUserFlag1 ; bool bUserFlag2 ; EEdGraphPinDirection StartDirection ; EEdGraphPinDirection EndDirection ; FVector2D StartTangent ; FVector2D EndTangent ;)",
    "insertText": "FConnectionParams() : WireColor(FLinearColor::White) , AssociatedPin1(nullptr) , AssociatedPin2(nullptr) , WireThickness(1.5f) , bDrawBubbles(false) , bUserFlag1(false) , bUserFlag2(false) , StartDirection(EGPD_Output) , EndDirection(EGPD_Input) , StartTangent(FVector2D::ZeroVector) , EndTangent(FVector2D::ZeroVector)"
  },
  {
    "label": "FConnectionDrawingPolicy()",
    "kind": "Method",
    "detail": "Function (} } ; class FConnectionDrawingPolicy { protected : int32 WireLayerID ; int32 ArrowLayerID ; const FSlateBrush* ArrowImage ; const FSlateBrush* MidpointImage ; const FSlateBrush* BubbleImage ; const UGraphEditorSettings* Settings ; public : FVector2D ArrowRadius ; FVector2D MidpointRadius ; FGraphSplineOverlapResult SplineOverlapResult ; struct FRelinkConnection { UEdGraphPin* SourcePin ; UEdGraphPin* TargetPin ; } ; protected : float ZoomFactor ; float HoverDeemphasisDarkFraction ; const FSlateRect& ClippingRect ; FSlateWindowElementList& DrawElementsList ; TMap<UEdGraphPin*,TSharedPtr<SGraphPin>> PinToPinWidgetMap ; TSet<FEdGraphPinReference> HoveredPins ; TMap<TSharedRef<SWidget>,FArrangedWidget>* PinGeometries ; double LastHoverTimeEvent ; FVector2D LocalMousePosition ; TArray<FRelinkConnection> RelinkConnections ; TArray<UEdGraphNode*> SelectedGraphNodes ; public : ~)",
    "insertText": "FConnectionDrawingPolicy()"
  },
  {
    "label": "FConnectionDrawingPolicy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConnectionDrawingPolicy(int32 InBackLayerID, int32 InFrontLayerID, float InZoomFactor, const FSlateRect& InClippingRect, FSlateWindowElementList& InDrawElements)"
  },
  {
    "label": "SetHoveredPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoveredPins(const TSet< FEdGraphPinReference >& InHoveredPins, const TArray< TSharedPtr<SGraphPin> >& OverridePins, double HoverTime)"
  },
  {
    "label": "SetMousePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMousePosition(const FVector2D& InMousePos)"
  },
  {
    "label": "SetMarkedPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarkedPin(TWeakPtr<SGraphPin> InMarkedPin)"
  },
  {
    "label": "SetSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedNodes(const TArray<UEdGraphNode*>& InSelectedNodes)"
  },
  {
    "label": "SetRelinkConnections()",
    "kind": "Method",
    "detail": "Function (SelectedGraphNodes = InSelectedNodes ; } void)",
    "insertText": "SetRelinkConnections(const TArray<FRelinkConnection>& Connections)"
  },
  {
    "label": "MakeSplineReparamTable()",
    "kind": "Method",
    "detail": "Function (RelinkConnections = Connections ; } float)",
    "insertText": "MakeSplineReparamTable(const FVector2D& P0, const FVector2D& P0Tangent, const FVector2D& P1, const FVector2D& P1Tangent, FInterpCurve<float>& OutReparamTable)"
  },
  {
    "label": "DrawSplineWithArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSplineWithArrow(const FVector2D& StartPoint, const FVector2D& EndPoint, const FConnectionParams& Params)"
  },
  {
    "label": "DrawSplineWithArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSplineWithArrow(const FGeometry& StartGeom, const FGeometry& EndGeom, const FConnectionParams& Params)"
  },
  {
    "label": "ComputeSplineTangent()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeSplineTangent(const FVector2D& Start, const FVector2D& End)"
  },
  {
    "label": "DrawConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConnection(int32 LayerId, const FVector2D& Start, const FVector2D& End, const FConnectionParams& Params)"
  },
  {
    "label": "DrawPreviewConnector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPreviewConnector(const FGeometry& PinGeometry, const FVector2D& StartPoint, const FVector2D& EndPoint, UEdGraphPin* Pin)"
  },
  {
    "label": "DetermineWiringStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineWiringStyle(UEdGraphPin* OutputPin, UEdGraphPin* InputPin, FConnectionParams& Params)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(TMap<TSharedRef<SWidget>, FArrangedWidget>& InPinGeometries, FArrangedChildren& ArrangedNodes)"
  },
  {
    "label": "DetermineLinkGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineLinkGeometry(FArrangedChildren& ArrangedNodes, TSharedRef<SWidget>& OutputPinWidget, UEdGraphPin* OutputPin, UEdGraphPin* InputPin, FArrangedWidget*& StartWidgetGeometry, FArrangedWidget*& EndWidgetGeometry)"
  },
  {
    "label": "UseDrawStateCaching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseDrawStateCaching()"
  },
  {
    "label": "ResetIncompatiblePinDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetIncompatiblePinDrawState(const TSet< TSharedRef<SWidget> >& VisiblePins)"
  },
  {
    "label": "ApplyHoverDeemphasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHoverDeemphasis(UEdGraphPin* OutputPin, UEdGraphPin* InputPin, float& Thickness, FLinearColor& WireColor)"
  },
  {
    "label": "IsConnectionCulled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnectionCulled(const FArrangedWidget& StartLink, const FArrangedWidget& EndLink)"
  },
  {
    "label": "GetConnectionToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IToolTip>)",
    "insertText": "GetConnectionToolTip(const SGraphPanel& GraphPanel, const FGraphSplineOverlapResult& OverlapData)"
  },
  {
    "label": "BuildPinToPinWidgetMap()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "BuildPinToPinWidgetMap(TMap<TSharedRef<SWidget>, FArrangedWidget>& InPinGeometries)"
  },
  {
    "label": "DrawPinGeometries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPinGeometries(TMap<TSharedRef<SWidget>, FArrangedWidget>& InPinGeometries, FArrangedChildren& ArrangedNodes)"
  }
]