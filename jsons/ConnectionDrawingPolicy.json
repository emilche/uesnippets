[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "FArrangedWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedWidget"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UGraphEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGraphEditorSettings"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FInterpCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterpCurve"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "draws",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "draws"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "FRelinkConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelinkConnection"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (GRAPHEDITOR_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogConnectionDrawingPolicy, Log, All)"
  },
  {
    "label": "VerticalMiddleLeftOf()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "VerticalMiddleLeftOf(const FGeometry& SomeGeometry)"
  },
  {
    "label": "VerticalMiddleRightOf()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "VerticalMiddleRightOf(const FGeometry& SomeGeometry)"
  },
  {
    "label": "CenterOf()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "CenterOf(const FGeometry& SomeGeometry)"
  },
  {
    "label": "ConvertToPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToPoints(const FGeometry& Geom, TArray<FVector2D>& Points)"
  },
  {
    "label": "FindClosestPointOnLine()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "FindClosestPointOnLine(const FVector2D& LineStart, const FVector2D& LineEnd, const FVector2D& TestPoint)"
  },
  {
    "label": "FindClosestPointOnGeom()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "FindClosestPointOnGeom(const FGeometry& Geom, const FVector2D& TestPoint)"
  },
  {
    "label": "SetHoveredPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHoveredPins(const TSet< FEdGraphPinReference >& InHoveredPins, const TArray< TSharedPtr<SGraphPin> >& OverridePins, double HoverTime)"
  },
  {
    "label": "SetMousePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMousePosition(const FVector2D& InMousePos)"
  },
  {
    "label": "SetMarkedPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarkedPin(TWeakPtr<SGraphPin> InMarkedPin)"
  },
  {
    "label": "MakeSplineReparamTable()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "MakeSplineReparamTable(const FVector2D& P0, const FVector2D& P0Tangent, const FVector2D& P1, const FVector2D& P1Tangent, FInterpCurve<float>& OutReparamTable)"
  },
  {
    "label": "DrawSplineWithArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSplineWithArrow(const FVector2D& StartPoint, const FVector2D& EndPoint, const FConnectionParams& Params)"
  },
  {
    "label": "DrawSplineWithArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSplineWithArrow(const FGeometry& StartGeom, const FGeometry& EndGeom, const FConnectionParams& Params)"
  },
  {
    "label": "DrawConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawConnection(int32 LayerId, const FVector2D& Start, const FVector2D& End, const FConnectionParams& Params)"
  },
  {
    "label": "DrawPreviewConnector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPreviewConnector(const FGeometry& PinGeometry, const FVector2D& StartPoint, const FVector2D& EndPoint, UEdGraphPin* Pin)"
  },
  {
    "label": "DetermineWiringStyle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineWiringStyle(UEdGraphPin* OutputPin, UEdGraphPin* InputPin, /*inout*/ FConnectionParams& Params)"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(TMap<TSharedRef<SWidget>, FArrangedWidget>& InPinGeometries, FArrangedChildren& ArrangedNodes)"
  },
  {
    "label": "DetermineLinkGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineLinkGeometry(\n\t\tFArrangedChildren& ArrangedNodes, \n\t\tTSharedRef<SWidget>& OutputPinWidget,\n\t\tUEdGraphPin* OutputPin,\n\t\tUEdGraphPin* InputPin,\n\t\t/*out*/ FArrangedWidget*& StartWidgetGeometry,\n\t\t/*out*/ FArrangedWidget*& EndWidgetGeometry\n\t\t)"
  },
  {
    "label": "SetIncompatiblePinDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIncompatiblePinDrawState(const TSharedPtr<SGraphPin>& StartPin, const TSet< TSharedRef<SWidget> >& VisiblePins)"
  },
  {
    "label": "ResetIncompatiblePinDrawState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetIncompatiblePinDrawState(const TSet< TSharedRef<SWidget> >& VisiblePins)"
  },
  {
    "label": "ApplyHoverDeemphasis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHoverDeemphasis(UEdGraphPin* OutputPin, UEdGraphPin* InputPin, /*inout*/ float& Thickness, /*inout*/ FLinearColor& WireColor)"
  },
  {
    "label": "BuildPinToPinWidgetMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPinToPinWidgetMap(TMap<TSharedRef<SWidget>, FArrangedWidget>& InPinGeometries)"
  },
  {
    "label": "DrawPinGeometries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPinGeometries(TMap<TSharedRef<SWidget>, FArrangedWidget>& InPinGeometries, FArrangedChildren& ArrangedNodes)"
  }
]