[
  {
    "label": "FMetalCommandBufferFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalCommandBufferFence"
  },
  {
    "label": "FMetalEventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalEventNode"
  },
  {
    "label": "BeginRenderingImmersiveParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BeginRenderingImmersiveParams"
  },
  {
    "label": "PresentImmersiveParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PresentImmersiveParams"
  },
  {
    "label": "FMetalRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRHICommandContext"
  },
  {
    "label": "FMetalProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalProfiler"
  },
  {
    "label": "FMetalRHIUploadContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalRHIUploadContext"
  },
  {
    "label": "FMetalContextArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetalContextArray"
  },
  {
    "label": "FMetalRHICommandContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalThirdParty . h \" # include \" MetalState . h \" # include \" MetalResources . h \" # include \" MetalViewport . h \" # include \" MetalDevice . h \" # include \" MetalCommandList . h \" # include \" MetalCommandEncoder . h \" # include \" MetalRHIRenderQuery . h \" # include \" RHICore . h \" class FMetalCommandBufferFence ; class FMetalEventNode ; # if PLATFORM_VISIONOS namespace MetalRHIVisionOS { struct BeginRenderingImmersiveParams ; struct PresentImmersiveParams ; } # endif class FMetalRHICommandContext : public IRHICommandContext { public :)",
    "insertText": "FMetalRHICommandContext(FMetalDevice& Device, class FMetalProfiler* InProfiler)"
  },
  {
    "label": "FMetalRHICommandContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalRHICommandContext()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FMetalRHICommandContext&)",
    "insertText": "Get(FRHICommandListBase& CmdList)"
  },
  {
    "label": "ResetContext()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetContext()"
  },
  {
    "label": "BeginComputeEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginComputeEncoder()"
  },
  {
    "label": "EndComputeEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndComputeEncoder()"
  },
  {
    "label": "BeginBlitEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBlitEncoder()"
  },
  {
    "label": "EndBlitEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBlitEncoder()"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetMultipleViewports(uint32 Count, const FViewportBounds* Data)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTextureRHI, FRHITexture* DestTextureRHI, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyBufferRegion(FRHIBuffer* DstBufferRHI, uint64 DstOffset, FRHIBuffer* SrcBufferRHI, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "RHICalibrateTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICalibrateTimers(FRHITimestampCalibrationQuery* CalibrationQuery)"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIBeginOcclusionQueryBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginOcclusionQueryBatch(uint32 NumQueriesInBatch)"
  },
  {
    "label": "RHIEndOcclusionQueryBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndOcclusionQueryBatch()"
  },
  {
    "label": "RHIDiscardRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDiscardRenderTargets(bool Depth, bool Stencil, uint32 ColorBitMask)"
  },
  {
    "label": "RHIBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginDrawingViewport(FRHIViewport* Viewport, FRHITexture* RenderTargetRHI)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "RHISetStereoViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStereoViewport(float LeftMinX, float RightMinX, float LeftMinY, float RightMinY, float MinZ, float LeftMaxX, float RightMaxX, float LeftMaxY, float RightMaxY, float MaxZ)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetGraphicsPipelineState(FRHIGraphicsPipelineState* GraphicsState, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "RHISetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStaticUniformBuffers(const FUniformBufferStaticBindings& InUniformBuffers)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIGraphicsShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIComputeShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetStencilRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "RHISetBlendFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBlendFactor(const FLinearColor& BlendFactor)"
  },
  {
    "label": "SetRenderTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargets(uint32 NumSimultaneousRenderTargets, const FRHIRenderTargetView* NewRenderTargets, const FRHIDepthRenderTargetView* NewDepthStencilTarget)"
  },
  {
    "label": "SetRenderTargetsAndClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTargetsAndClear(const FRHISetRenderTargetsInfo& RenderTargetsInfo)"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedIndirect(FRHIBuffer* IndexBufferRHI, FRHIBuffer* ArgumentsBufferRHI, int32 DrawArgumentsIndex, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDispatchMeshShader()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_MESH_SHADERS void)",
    "insertText": "RHIDispatchMeshShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectMeshShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectMeshShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHISetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (# if WITH_RHI_BREADCRUMBS void)",
    "insertText": "RHIBeginBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHICopyToStagingBuffer()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHICopyToStagingBuffer(FRHIBuffer* SourceBufferRHI, FRHIStagingBuffer* DestinationStagingBufferRHI, uint32 Offset, uint32 NumBytes)"
  },
  {
    "label": "RHIWriteGPUFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIWriteGPUFence(FRHIGPUFence* FenceRHI)"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "RHIEndRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderPass()"
  },
  {
    "label": "RHINextSubpass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHINextSubpass()"
  },
  {
    "label": "RHIBindAccelerationStructureMemory()",
    "kind": "Method",
    "detail": "Function (# if METAL_RHI_RAYTRACING void)",
    "insertText": "RHIBindAccelerationStructureMemory(FRHIRayTracingScene* Scene, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "RHIBuildAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBuildAccelerationStructures(const TArrayView<const FRayTracingGeometryBuildParams> Params, const FRHIBufferRange& ScratchBufferRange)"
  },
  {
    "label": "RHIBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBuildAccelerationStructure(const FRayTracingSceneBuildParams& SceneBuildParams)"
  },
  {
    "label": "RHIClearRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHIClearShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRayTraceDispatch(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIRayTracingScene* Scene, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRayTraceDispatch(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRayTraceDispatchIndirect(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIRayTracingScene* Scene, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRayTraceDispatchIndirect(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetRayTracingBindings(FRHIRayTracingScene* Scene, FRHIRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType)"
  },
  {
    "label": "RHISetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBindingsOnShaderBindingTable(FRHIShaderBindingTable* SBT, FRHIRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType)"
  },
  {
    "label": "FillBuffer()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "FillBuffer(MTL::Buffer* Buffer, NS::Range Range, uint8 Value)"
  },
  {
    "label": "CopyFromTextureToBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFromTextureToBuffer(MTL::Texture* Texture, uint32 sourceSlice, uint32 sourceLevel, MTL::Origin sourceOrigin, MTL::Size sourceSize, FMetalBufferPtr toBuffer, uint32 destinationOffset, uint32 destinationBytesPerRow, uint32 destinationBytesPerImage, MTL::BlitOption options)"
  },
  {
    "label": "CopyFromBufferToTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFromBufferToTexture(FMetalBufferPtr Buffer, uint32 sourceOffset, uint32 sourceBytesPerRow, uint32 sourceBytesPerImage, MTL::Size sourceSize, MTL::Texture* toTexture, uint32 destinationSlice, uint32 destinationLevel, MTL::Origin destinationOrigin, MTL::BlitOption options)"
  },
  {
    "label": "CopyFromTextureToTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFromTextureToTexture(MTL::Texture* Texture, uint32 sourceSlice, uint32 sourceLevel, MTL::Origin sourceOrigin, MTL::Size sourceSize, MTL::Texture* toTexture, uint32 destinationSlice, uint32 destinationLevel, MTL::Origin destinationOrigin)"
  },
  {
    "label": "CopyFromBufferToBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFromBufferToBuffer(FMetalBufferPtr SourceBuffer, NS::UInteger SourceOffset, FMetalBufferPtr DestinationBuffer, NS::UInteger DestinationOffset, NS::UInteger Size)"
  },
  {
    "label": "CommitRenderResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitRenderResourceTables(void)"
  },
  {
    "label": "PrepareToRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToRender(uint32 PrimitiveType)"
  },
  {
    "label": "PrepareToDraw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrepareToDraw(uint32 PrimitiveType)"
  },
  {
    "label": "PrepareToDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToDispatch()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (TArray<FMetalCommandBuffer*>)",
    "insertText": "Finalize()"
  },
  {
    "label": "InsertCommandBufferFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertCommandBufferFence(TSharedPtr<FMetalCommandBufferFence, ESPMode::ThreadSafe>& Fence, FMetalCommandBufferCompletionHandler Handler)"
  },
  {
    "label": "StartTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTiming(class FMetalEventNode* EventNode)"
  },
  {
    "label": "EndTiming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTiming(class FMetalEventNode* EventNode)"
  },
  {
    "label": "SynchronizeResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeResource(MTL::Resource* Resource)"
  },
  {
    "label": "SynchronizeTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeTexture(MTL::Texture* Texture, uint32 Slice, uint32 Level)"
  },
  {
    "label": "AddCompletionHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompletionHandler(FMetalCommandBufferCompletionHandler& Handler)"
  },
  {
    "label": "SignalEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalEvent(MTLEventPtr Event, uint32_t SignalCount)"
  },
  {
    "label": "WaitForEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForEvent(MTLEventPtr Event, uint32_t SignalCount)"
  },
  {
    "label": "BeginRenderingImmersive()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_VISIONOS void)",
    "insertText": "BeginRenderingImmersive(const MetalRHIVisionOS::BeginRenderingImmersiveParams& Params)"
  },
  {
    "label": "SetCustomPresentViewport()",
    "kind": "Method",
    "detail": "Function (cp_frame_t SwiftFrame = nullptr ; # endif void)",
    "insertText": "SetCustomPresentViewport(FRHIViewport* Viewport)"
  },
  {
    "label": "GetCurrentCommandBuffer()",
    "kind": "Method",
    "detail": "Function (CustomPresentViewport = Viewport ; } FRHIViewport* CustomPresentViewport = nullptr ; FMetalCommandBuffer*)",
    "insertText": "GetCurrentCommandBuffer()"
  },
  {
    "label": "BeginRecursiveCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRecursiveCommand()"
  },
  {
    "label": "GetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} const TArray<FRHIUniformBuffer*>&)",
    "insertText": "GetStaticUniformBuffers()"
  },
  {
    "label": "GetProfiler()",
    "kind": "Method",
    "detail": "Function (Profiler = InProfiler ; } FMetalProfiler*)",
    "insertText": "GetProfiler()"
  },
  {
    "label": "GetStateCache()",
    "kind": "Method",
    "detail": "Function (} FMetalStateCache&)",
    "insertText": "GetStateCache()"
  },
  {
    "label": "SplitCommandBuffers()",
    "kind": "Method",
    "detail": "Function (CurrentEncoder .)",
    "insertText": "SplitCommandBuffers()"
  },
  {
    "label": "ResolveTexture()",
    "kind": "Method",
    "detail": "Function (} } protected : FMetalDevice& Device ; FMetalCommandQueue& CommandQueue ; FMetalCommandList CommandList ; FMetalCommandEncoder CurrentEncoder ; FMetalStateCache StateCache ; TSharedPtr<FMetalQueryBufferPool,ESPMode::ThreadSafe> QueryBuffer ; MTL::RenderPassDescriptor* RenderPassDesc = nullptr ; TSharedPtr<FMetalCommandBufferFence,ESPMode::ThreadSafe> CommandBufferFence ; class FMetalProfiler* Profiler = nullptr ; TRefCountPtr<FMetalFence> CurrentEncoderFence ; uint64_t UploadSyncCounter = 0 ; bool bWithinRenderPass = false ; void)",
    "insertText": "ResolveTexture(UE::RHICore::FResolveTextureInfo Info)"
  },
  {
    "label": "RHIClearMRT()",
    "kind": "Method",
    "detail": "Function (TArray<FRHIUniformBuffer*> GlobalUniformBuffers ; private : void)",
    "insertText": "RHIClearMRT(bool bClearColor, int32 NumClearColors, const FLinearColor* ColorArray, bool bClearDepth, float Depth, bool bClearStencil, uint32 Stencil)"
  },
  {
    "label": "FMetalRHIUploadContext()",
    "kind": "Method",
    "detail": "Function (} ; class FMetalRHIUploadContext : public IRHIUploadContext { public :)",
    "insertText": "FMetalRHIUploadContext(FMetalDevice& Device)"
  },
  {
    "label": "FMetalRHIUploadContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMetalRHIUploadContext()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FMetalRHICommandContext*)"
  },
  {
    "label": "EnqueueFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueFunction(UploadContextFunction Function)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UploadFunctions .)",
    "insertText": "Add(Function)"
  },
  {
    "label": "FMetalContextArray()",
    "kind": "Method",
    "detail": "Function (} private : FMetalRHICommandContext* UploadContext ; FMetalRHICommandContext* WaitContext ; TArray<UploadContextFunction> UploadFunctions ; MTLEventPtr UploadSyncEvent ; uint64_t UploadSyncCounter = 0 ; } ; struct FMetalContextArray : public TRHIPipelineArray<FMetalRHICommandContext*> {)",
    "insertText": "FMetalContextArray(FRHIContextArray const& Contexts)"
  }
]