[
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FSimModuleTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimModuleTree"
  },
  {
    "label": "FModuleNetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleNetData"
  },
  {
    "label": "FSimOutputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimOutputData"
  },
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "FCollisionContactModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollisionContactModifier"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "TSimModuleSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimModuleSettings"
  },
  {
    "label": "eSimModuleState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "eSimModuleState"
  },
  {
    "label": "eSimModuleTypeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "eSimModuleTypeFlags"
  },
  {
    "label": "EWheelAxis",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWheelAxis"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "uses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uses"
  },
  {
    "label": "TSimulationModuleTypeableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimulationModuleTypeableBase"
  },
  {
    "label": "TSimulationModuleTypeable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimulationModuleTypeable"
  },
  {
    "label": "TSimulationModuleTypeable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimulationModuleTypeable"
  },
  {
    "label": "TSimulationModuleTypeable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimulationModuleTypeable"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TSimModuleTypeIsRecursive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimModuleTypeIsRecursive"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TSimModuleTypeIsRecursive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimModuleTypeIsRecursive"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FSimulationModuleTypeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimulationModuleTypeContainer"
  },
  {
    "label": "cls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "cls"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "TSimFactoryAutoRegister",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSimFactoryAutoRegister"
  },
  {
    "label": "FSimFactoryModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimFactoryModule"
  },
  {
    "label": "HandbrakeControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "HandbrakeControlName(\"Handbrake\")"
  },
  {
    "label": "ThrottleControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ThrottleControlName(\"Throttle\")"
  },
  {
    "label": "SteeringControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "SteeringControlName(\"Steering\")"
  },
  {
    "label": "BrakeControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "BrakeControlName(\"Brake\")"
  },
  {
    "label": "ClutchControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ClutchControlName(\"Clutch\")"
  },
  {
    "label": "BoostControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "BoostControlName(\"Boost\")"
  },
  {
    "label": "ReverseControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ReverseControlName(\"Reverse\")"
  },
  {
    "label": "ChangeUpControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ChangeUpControlName(\"ChangeUp\")"
  },
  {
    "label": "ChangeDownControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ChangeDownControlName(\"ChangeDown\")"
  },
  {
    "label": "PitchControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "PitchControlName(\"Pitch\")"
  },
  {
    "label": "RollControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "RollControlName(\"Roll\")"
  },
  {
    "label": "YawControlName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "YawControlName(\"Yaw\")"
  },
  {
    "label": "StaticSimType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "StaticSimType()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FName(#cls)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(ISimulationModuleBase)"
  },
  {
    "label": "SetAnimationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimationData(const FName& BoneNameIn, const FVector& AnimationOffsetIn, int AnimationSetupIndexIn)"
  },
  {
    "label": "AddLocalForceAtPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalForceAtPosition(const FVector& Force, const FVector& Position, bool bAllowSubstepping = true, bool bIsLocalForce = false, bool bLevelSlope = false, const FColor& DebugColorIn = FColor::Blue)"
  },
  {
    "label": "AddForceAtCOMPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtCOMPosition(const FVector& Force, const FVector& OffsetFromCOM = FVector::ZeroVector, bool bAllowSubstepping = true, bool bLevelSlope = false, const FColor& DebugColorIn = FColor::Blue)"
  },
  {
    "label": "AddLocalForce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalForce(const FVector& Force, bool bAllowSubstepping = true, bool bIsLocalForce = false, bool bLevelSlope = false, const FColor& DebugColorIn = FColor::Blue)"
  },
  {
    "label": "AddLocalTorque()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalTorque(const FVector& Torque, bool bAllowSubstepping = true, bool bAccelChangeIn = true, const FColor& DebugColorIn = FColor::Magenta)"
  },
  {
    "label": "FillOutputState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillOutputState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lerp(const FSimOutputData& InCurrent, const FSimOutputData& InNext, float Alpha)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FString()"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(IFactoryModule)"
  }
]