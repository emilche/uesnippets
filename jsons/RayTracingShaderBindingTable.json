[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRayTracingSBTAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingSBTAllocation"
  },
  {
    "label": "FRayTracingShaderBindingTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingShaderBindingTable"
  },
  {
    "label": "FAllocationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocationKey"
  },
  {
    "label": "FRefCountedAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRefCountedAllocation"
  },
  {
    "label": "Base()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RHIDefinitions . h \" # include \" SpanAllocator . h \" # include \" RayTracingMeshDrawCommands . h \" # if RHI_RAYTRACING enum class ERayTracingSceneLayer : uint8 { Base = 0,Decals,NUM } ; enum class ERayTracingSceneLayerMask { None = 0,)",
    "insertText": "Base(uint32)ERayTracingSceneLayer::Base, Decals = 1 << (uint32)"
  },
  {
    "label": "FRayTracingSBTAllocation()",
    "kind": "Method",
    "detail": "Function (struct FRayTracingSBTAllocation { public :)",
    "insertText": "FRayTracingSBTAllocation()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetRecordIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRecordIndex(ERayTracingSceneLayer Layer, uint32 SegmentIndex)"
  },
  {
    "label": "GetSegmentCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSegmentCount()"
  },
  {
    "label": "HasLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLayer(ERayTracingSceneLayer Layer)"
  },
  {
    "label": "InitStatic()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "InitStatic(ERayTracingSceneLayerMask InAllocatedLayers, uint32 InBaseRecordIndex, uint32 InRecordsPerLayer, uint32 InNumRecords, const FRHIRayTracingGeometry* InGeometry, const FRayTracingCachedMeshCommandFlags& InFlags)"
  },
  {
    "label": "InitDynamic()",
    "kind": "Method",
    "detail": "Function (AllocatedLayers = InAllocatedLayers ; BaseRecordIndex = InBaseRecordIndex ; RecordsPerLayer = InRecordsPerLayer ; NumRecords = InNumRecords ; Geometry = InGeometry ; Flags = InFlags ; } void)",
    "insertText": "InitDynamic(ERayTracingSceneLayerMask InAllocatedLayers, uint32 InBaseRecordIndex, uint32 InRecordsPerLayer, uint32 InNumRecords)"
  },
  {
    "label": "FRayTracingShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (AllocatedLayers = InAllocatedLayers ; BaseRecordIndex = InBaseRecordIndex ; RecordsPerLayer = InRecordsPerLayer ; NumRecords = InNumRecords ; } class FRayTracingShaderBindingTable ; uint32 BaseRecordIndex = 0 ; uint32 RecordsPerLayer = 0 ; uint32 NumRecords = 0 ; ERayTracingSceneLayerMask AllocatedLayers ; const FRHIRayTracingGeometry* Geometry = nullptr ; FRayTracingCachedMeshCommandFlags Flags ; } ; class FRayTracingShaderBindingTable { public :)",
    "insertText": "FRayTracingShaderBindingTable()"
  },
  {
    "label": "AllocateRHI()",
    "kind": "Method",
    "detail": "Function (FShaderBindingTableRHIRef)",
    "insertText": "AllocateRHI(FRHICommandListBase& RHICmdList, ERayTracingShaderBindingMode ShaderBindingMode, ERayTracingHitGroupIndexingMode HitGroupIndexingMode, uint32 NumMissShaderSlots, uint32 NumCallableShaderSlots, uint32 LocalBindingDataSize)"
  },
  {
    "label": "GetNumGeometrySegments()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumGeometrySegments()"
  },
  {
    "label": "AllocateStaticRange()",
    "kind": "Method",
    "detail": "Function (FRayTracingSBTAllocation*)",
    "insertText": "AllocateStaticRange(ERayTracingSceneLayerMask AllocatedLayers, uint32 SegmentCount)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&StaticAllocationCS)"
  },
  {
    "label": "AllocateStaticRangeInternal()",
    "kind": "Method",
    "detail": "Function (FRayTracingCachedMeshCommandFlags DefaultFlags ; return)",
    "insertText": "AllocateStaticRangeInternal(AllocatedLayers, SegmentCount, nullptr, DefaultFlags)"
  },
  {
    "label": "AllocateStaticRange()",
    "kind": "Method",
    "detail": "Function (} FRayTracingSBTAllocation*)",
    "insertText": "AllocateStaticRange(uint32 SegmentCount, const FRHIRayTracingGeometry* Geometry, FRayTracingCachedMeshCommandFlags Flags)"
  },
  {
    "label": "FreeStaticRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeStaticRange(const FRayTracingSBTAllocation* Allocation)"
  },
  {
    "label": "AllocateDynamicRange()",
    "kind": "Method",
    "detail": "Function (FRayTracingSBTAllocation*)",
    "insertText": "AllocateDynamicRange(ERayTracingSceneLayerMask AllocatedLayers, uint32 SegmentCount)"
  },
  {
    "label": "ResetDynamicAllocationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDynamicAllocationData()"
  },
  {
    "label": "ResetStaticAllocationLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStaticAllocationLock()"
  },
  {
    "label": "GetMaxAllocatedStaticSegmentCount()",
    "kind": "Method",
    "detail": "Function (bStaticAllocationsLocked = false ; } private : uint32)",
    "insertText": "GetMaxAllocatedStaticSegmentCount()"
  },
  {
    "label": "AllocateStaticRangeInternal()",
    "kind": "Method",
    "detail": "Function (FRayTracingSBTAllocation*)",
    "insertText": "AllocateStaticRangeInternal(ERayTracingSceneLayerMask AllocatedLayers, uint32 SegmentCount, const FRHIRayTracingGeometry* Geometry, FRayTracingCachedMeshCommandFlags Flags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FAllocationKey { const FRHIRayTracingGeometry* Geometry ; FRayTracingCachedMeshCommandFlags Flags ; bool)",
    "insertText": "operator(const FAllocationKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FAllocationKey& Key)"
  }
]