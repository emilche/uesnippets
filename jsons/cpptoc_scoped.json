[
  {
    "label": "ClassName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClassName"
  },
  {
    "label": "BaseName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseName"
  },
  {
    "label": "StructName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructName"
  },
  {
    "label": "CefCppToCScoped",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CefCppToCScoped"
  },
  {
    "label": "WrapperStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WrapperStruct"
  },
  {
    "label": "WrapOwn()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_LIBCEF_DLL_CPPTOC_CPPTOC_SCOPED_H_ # define CEF_LIBCEF_DLL_CPPTOC_CPPTOC_SCOPED_H_ # pragma once # include \" include / base / cef_logging . h \" # include \" include / base / cef_macros . h \" # include \" include / capi / cef_base_capi . h \" # include \" include / cef_base . h \" # include \" libcef_dll / wrapper_types . h \" template<class ClassName,class BaseName,class StructName> class CefCppToCScoped : public CefBaseScoped { public : StructName*)",
    "insertText": "WrapOwn(CefOwnPtr<BaseName> c)"
  },
  {
    "label": "ClassName()",
    "kind": "Method",
    "detail": "Function (ClassName* wrapper = new)",
    "insertText": "ClassName()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (wrapper ->)",
    "insertText": "Initialize(c.release(), true)"
  },
  {
    "label": "WrapRaw()",
    "kind": "Method",
    "detail": "Function (} CefOwnPtr<ClassName>)",
    "insertText": "WrapRaw(CefRawPtr<BaseName> c)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (wrapper ->)",
    "insertText": "Initialize(c, false)"
  },
  {
    "label": "UnwrapOwn()",
    "kind": "Method",
    "detail": "Function (} CefOwnPtr<BaseName>)",
    "insertText": "UnwrapOwn(StructName* s)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(s)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(wrapperStruct->wrapper_->owned_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(wrapperStruct->object_)"
  },
  {
    "label": "BaseName()",
    "kind": "Method",
    "detail": "Function (BaseName* object = wrapperStruct -> object_ ; wrapperStruct -> object_ = nullptr ; delete wrapperStruct -> wrapper_ ; return CefOwnPtr<)",
    "insertText": "BaseName(object)"
  },
  {
    "label": "UnwrapRaw()",
    "kind": "Method",
    "detail": "Function (} CefRawPtr<BaseName>)",
    "insertText": "UnwrapRaw(StructName* s)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(s)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(kWrapperType, wrapperStruct->type_)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} BaseName*)",
    "insertText": "Get(StructName* s)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (wrapper_struct_ . type_ = kWrapperType ; wrapper_struct_ . wrapper_ = this ;)",
    "insertText": "memset(GetStruct(), 0, sizeof(StructName))"
  },
  {
    "label": "CefCppToCScoped()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CefCppToCScoped()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} private : struct WrapperStruct { CefWrapperType type_ ; BaseName* object_ ; CefCppToCScoped<ClassName,BaseName,StructName>* wrapper_ ; StructName struct_ ; } ; void)",
    "insertText": "Initialize(BaseName* obj, bool owned)"
  },
  {
    "label": "cef_base_scoped_t()",
    "kind": "Method",
    "detail": "Function (wrapper_struct_ . object_ = obj ; owned_ = owned ; cef_base_scoped_t* base = reinterpret_cast<)",
    "insertText": "cef_base_scoped_t(GetStruct())"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (base -> size =)",
    "insertText": "sizeof(StructName)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (} WrapperStruct*)",
    "insertText": "GetWrapperStruct(StructName* s)"
  },
  {
    "label": "UnwrapDerivedOwn()",
    "kind": "Method",
    "detail": "Function (} CefOwnPtr<BaseName>)",
    "insertText": "UnwrapDerivedOwn(CefWrapperType type, StructName* s)"
  },
  {
    "label": "UnwrapDerivedRaw()",
    "kind": "Method",
    "detail": "Function (CefRawPtr<BaseName>)",
    "insertText": "UnwrapDerivedRaw(CefWrapperType type, StructName* s)"
  },
  {
    "label": "struct_del()",
    "kind": "Method",
    "detail": "Function (void CEF_CALLBACK)",
    "insertText": "struct_del(cef_base_scoped_t* base)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(base)"
  },
  {
    "label": "GetWrapperStruct()",
    "kind": "Method",
    "detail": "Function (WrapperStruct* wrapperStruct =)",
    "insertText": "GetWrapperStruct(reinterpret_cast<StructName*>(base))"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (delete wrapperStruct -> wrapper_ ; } WrapperStruct wrapper_struct_ ; bool owned_ ; CefWrapperType kWrapperType ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(CefCppToCScoped)"
  }
]