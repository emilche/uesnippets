[
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Alloc"
  },
  {
    "label": "__uses_alloc_ctor_imp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__uses_alloc_ctor_imp"
  },
  {
    "label": "__uses_alloc_ctor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__uses_alloc_ctor"
  },
  {
    "label": "_Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Allocator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FUNCTIONAL_ALLOCATOR_ARG_T_H # define _LIBCPP___FUNCTIONAL_ALLOCATOR_ARG_T_H # include<__config> # include<__memory / uses_allocator . h> # include<__utility / forward . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "allocator_arg_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocator_arg_t()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # if)",
    "insertText": "defined(_LIBCPP_CXX03_LANG) || defined(_LIBCPP_BUILDING_LIBRARY)"
  },
  {
    "label": "__user_alloc_construct_impl()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef _LIBCPP_CXX03_LANG template<class _Tp,class _Alloc,class . . . _Args> struct __uses_alloc_ctor_imp { typedef _LIBCPP_NODEBUG __uncvref_t<_Alloc> _RawAlloc ; const bool __ua = uses_allocator<_Tp,_RawAlloc>::value ; const bool __ic = is_constructible<_Tp,allocator_arg_t,_Alloc,_Args . . .>::value ; const int value = __ua ? 2 - __ic : 0 ; } ; template<class _Tp,class _Alloc,class . . . _Args> struct __uses_alloc_ctor : integral_constant<int,__uses_alloc_ctor_imp<_Tp,_Alloc,_Args . . .>::value> { } ; template<class _Tp,class _Allocator,class . . . _Args> _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "__user_alloc_construct_impl(integral_constant<int, 0>, _Tp *__storage, const _Allocator &, _Args &&... __args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(__storage) _Tp (_VSTD::forward<_Args>(__args)...)"
  },
  {
    "label": "__user_alloc_construct_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Allocator,class . . . _Args> _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "__user_alloc_construct_impl(integral_constant<int, 1>, _Tp *__storage, const _Allocator &__a, _Args &&... __args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(__storage) _Tp (allocator_arg, __a, _VSTD::forward<_Args>(__args)...)"
  },
  {
    "label": "__user_alloc_construct_impl()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Allocator,class . . . _Args> _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "__user_alloc_construct_impl(integral_constant<int, 2>, _Tp *__storage, const _Allocator &__a, _Args &&... __args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(__storage) _Tp (_VSTD::forward<_Args>(__args)..., __a)"
  }
]