[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FDragDropOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDragDropOperation"
  },
  {
    "label": "FReply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReply"
  },
  {
    "label": "FSlateApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplication"
  },
  {
    "label": "CaptureMouse()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Types / SlateEnums . h \" # include \" Input / ReplyBase . h \" # include \" Input / Events . h \" # include \" Input / DragAndDrop . h \" class SWidget ; class FDragDropOperation ; class FReply : public TReplyBase<FReply> { public : FReply&)",
    "insertText": "CaptureMouse(TSharedRef<SWidget> InMouseCaptor)"
  },
  {
    "label": "Me()",
    "kind": "Method",
    "detail": "Function (this -> MouseCaptor = InMouseCaptor ; return)",
    "insertText": "Me()"
  },
  {
    "label": "UseHighPrecisionMouseMovement()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "UseHighPrecisionMouseMovement(TSharedRef<SWidget> InMouseCaptor)"
  },
  {
    "label": "SetMousePos()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "SetMousePos(const FIntPoint& NewMousePos)"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (FReply&)",
    "insertText": "SetUserFocus(TSharedRef<SWidget> GiveMeFocus, EFocusCause ReasonFocusIsChanging = EFocusCause::SetDirectly, bool bInAllUsers = false)"
  },
  {
    "label": "ClearUserFocus()",
    "kind": "Method",
    "detail": "Function (FReply&)",
    "insertText": "ClearUserFocus(bool bInAllUsers = false)"
  },
  {
    "label": "ClearUserFocus()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "ClearUserFocus(EFocusCause ReasonFocusIsChanging, bool bInAllUsers = false)"
  },
  {
    "label": "CancelFocusRequest()",
    "kind": "Method",
    "detail": "Function (FReply&)",
    "insertText": "CancelFocusRequest()"
  },
  {
    "label": "SetNavigation()",
    "kind": "Method",
    "detail": "Function (FReply&)",
    "insertText": "SetNavigation(EUINavigation InNavigationType, const ENavigationGenesis InNavigationGenesis, const ENavigationSource InNavigationSource = ENavigationSource::FocusedWidget)"
  },
  {
    "label": "SetNavigation()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "SetNavigation(TSharedRef<SWidget> InNavigationDestination, const ENavigationGenesis InNavigationGenesis, const ENavigationSource InNavigationSource = ENavigationSource::FocusedWidget)"
  },
  {
    "label": "LockMouseToWidget()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "LockMouseToWidget(TSharedRef<SWidget> InWidget)"
  },
  {
    "label": "ReleaseMouseLock()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "ReleaseMouseLock()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (this -> bShouldReleaseMouseLock = true ; MouseLockWidget .)",
    "insertText": "Reset()"
  },
  {
    "label": "ReleaseMouseCapture()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "ReleaseMouseCapture()"
  },
  {
    "label": "DetectDrag()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "DetectDrag(const TSharedRef<SWidget>& DetectDragInMe, FKey MouseButton)"
  },
  {
    "label": "BeginDragDrop()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "BeginDragDrop(TSharedRef<FDragDropOperation> InDragDropContent)"
  },
  {
    "label": "EndDragDrop()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "EndDragDrop()"
  },
  {
    "label": "PreventThrottling()",
    "kind": "Method",
    "detail": "Function (} FReply&)",
    "insertText": "PreventThrottling()"
  },
  {
    "label": "ShouldReleaseMouse()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "ShouldReleaseMouse()"
  },
  {
    "label": "GetUserFocusRecepient()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetUserFocusRecepient()"
  },
  {
    "label": "GetFocusCause()",
    "kind": "Method",
    "detail": "Function (} EFocusCause)",
    "insertText": "GetFocusCause()"
  },
  {
    "label": "GetNavigationType()",
    "kind": "Method",
    "detail": "Function (} EUINavigation)",
    "insertText": "GetNavigationType()"
  },
  {
    "label": "GetDragDropContent()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<FDragDropOperation>&)",
    "insertText": "GetDragDropContent()"
  },
  {
    "label": "GetDetectDragRequestButton()",
    "kind": "Method",
    "detail": "Function (} FKey)",
    "insertText": "GetDetectDragRequestButton()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (public : FReply)",
    "insertText": "Handled()"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "Unhandled()"
  },
  {
    "label": "FReply()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FReply(bool bIsHandled ) : TReplyBase<FReply>(bIsHandled) , RequestedMousePos() , EventHandler(nullptr) , MouseCaptor(nullptr) , FocusRecipient(nullptr) , MouseLockWidget(nullptr) , DetectDragForWidget(nullptr) , NavigationDestination(nullptr) , DragDropContent(nullptr) , FocusChangeReason(EFocusCause::SetDirectly) , NavigationType(EUINavigation::Invalid) , NavigationGenesis(ENavigationGenesis::User) , NavigationSource(ENavigationSource::FocusedWidget) , bReleaseMouseCapture(false) , bSetUserFocus(false) , bReleaseUserFocus(false) , bAllUsers(false) , bShouldReleaseMouseLock(false) , bUseHighPrecisionMouse(false) , bPreventThrottling(false) , bEndDragDrop(false)"
  }
]