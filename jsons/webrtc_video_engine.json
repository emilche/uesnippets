[
  {
    "label": "VideoDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoDecoderFactory"
  },
  {
    "label": "VideoEncoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoEncoderFactory"
  },
  {
    "label": "WebRtcVideoChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoChannel"
  },
  {
    "label": "UnsignalledSsrcHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnsignalledSsrcHandler"
  },
  {
    "label": "Action",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Action"
  },
  {
    "label": "DefaultUnsignalledSsrcHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultUnsignalledSsrcHandler"
  },
  {
    "label": "WebRtcVideoEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoEngine"
  },
  {
    "label": "AdaptReason",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AdaptReason"
  },
  {
    "label": "WebRtcVideoReceiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoReceiveStream"
  },
  {
    "label": "VideoCodecSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoCodecSettings"
  },
  {
    "label": "ChangedSendParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChangedSendParameters"
  },
  {
    "label": "ChangedRecvParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChangedRecvParameters"
  },
  {
    "label": "WebRtcVideoSendStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoSendStream"
  },
  {
    "label": "VideoSendStreamParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSendStreamParameters"
  },
  {
    "label": "MergeInfoAboutOutboundRtpSubstreamsForTesting()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_ENGINE_WEBRTC_VIDEO_ENGINE_H_ # define MEDIA_ENGINE_WEBRTC_VIDEO_ENGINE_H_ # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / call / transport . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / transport / field_trial_based_config . h \" # include \" api / video / video_bitrate_allocator_factory . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_source_interface . h \" # include \" api / video_codecs / sdp_video_format . h \" # include \" call / call . h \" # include \" call / flexfec_receive_stream . h \" # include \" call / video_receive_stream . h \" # include \" call / video_send_stream . h \" # include \" media / base / media_engine . h \" # include \" media / engine / unhandled_packets_buffer . h \" # include \" rtc_base / network_route . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class VideoDecoderFactory ; class VideoEncoderFactory ; } namespace cricket { class WebRtcVideoChannel ; std::map<uint32_t,webrtc::VideoSendStream::StreamStats>)",
    "insertText": "MergeInfoAboutOutboundRtpSubstreamsForTesting(const std::map<uint32_t, webrtc::VideoSendStream::StreamStats>& substreams)"
  },
  {
    "label": "OnUnsignalledSsrc()",
    "kind": "Method",
    "detail": "Function (class UnsignalledSsrcHandler { public : enum Action { kDropPacket,kDeliverPacket,} ; Action)",
    "insertText": "OnUnsignalledSsrc(WebRtcVideoChannel* channel, uint32_t ssrc, absl::optional<uint32_t> rtx_ssrc)"
  },
  {
    "label": "UnsignalledSsrcHandler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UnsignalledSsrcHandler()"
  },
  {
    "label": "DefaultUnsignalledSsrcHandler()",
    "kind": "Method",
    "detail": "Function (} ; class DefaultUnsignalledSsrcHandler : public UnsignalledSsrcHandler { public :)",
    "insertText": "DefaultUnsignalledSsrcHandler()"
  },
  {
    "label": "GetDefaultSink()",
    "kind": "Method",
    "detail": "Function (rtc::VideoSinkInterface<webrtc::VideoFrame>*)",
    "insertText": "GetDefaultSink()"
  },
  {
    "label": "SetDefaultSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultSink(WebRtcVideoChannel* channel, rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "WebRtcVideoEngine()",
    "kind": "Method",
    "detail": "Function (private : rtc::VideoSinkInterface<webrtc::VideoFrame>* default_sink_ ; } ; class WebRtcVideoEngine : public VideoEngineInterface { public :)",
    "insertText": "WebRtcVideoEngine(std::unique_ptr<webrtc::VideoEncoderFactory> video_encoder_factory, std::unique_ptr<webrtc::VideoDecoderFactory> video_decoder_factory, const webrtc::FieldTrialsView& trials)"
  },
  {
    "label": "WebRtcVideoEngine()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WebRtcVideoEngine()"
  },
  {
    "label": "CreateMediaChannel()",
    "kind": "Method",
    "detail": "Function (VideoMediaChannel*)",
    "insertText": "CreateMediaChannel(webrtc::Call* call, const MediaConfig& config, const VideoOptions& options, const webrtc::CryptoOptions& crypto_options, webrtc::VideoBitrateAllocatorFactory* video_bitrate_allocator_factory)"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoCodec>)",
    "insertText": "send_codecs()"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (} std::vector<VideoCodec>)",
    "insertText": "recv_codecs()"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (} std::vector<VideoCodec>)",
    "insertText": "send_codecs(bool include_rtx)"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoCodec>)",
    "insertText": "recv_codecs(bool include_rtx)"
  },
  {
    "label": "GetRtpHeaderExtensions()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpHeaderExtensionCapability>)",
    "insertText": "GetRtpHeaderExtensions()"
  },
  {
    "label": "WebRtcVideoChannel()",
    "kind": "Method",
    "detail": "Function (private : const std::unique_ptr<webrtc::VideoDecoderFactory> decoder_factory_ ; const std::unique_ptr<webrtc::VideoEncoderFactory> encoder_factory_ ; const std::unique_ptr<webrtc::VideoBitrateAllocatorFactory> bitrate_allocator_factory_ ; const webrtc::FieldTrialsView& trials_ ; } ; class WebRtcVideoChannel : public VideoMediaChannel,public webrtc::Transport,public webrtc::EncoderSwitchRequestCallback { public :)",
    "insertText": "WebRtcVideoChannel(webrtc::Call* call, const MediaConfig& config, const VideoOptions& options, const webrtc::CryptoOptions& crypto_options, webrtc::VideoEncoderFactory* encoder_factory, webrtc::VideoDecoderFactory* decoder_factory, webrtc::VideoBitrateAllocatorFactory* bitrate_allocator_factory)"
  },
  {
    "label": "WebRtcVideoChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WebRtcVideoChannel()"
  },
  {
    "label": "SetSendParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSendParameters(const VideoSendParameters& params)"
  },
  {
    "label": "SetRecvParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetRecvParameters(const VideoRecvParameters& params)"
  },
  {
    "label": "GetRtpSendParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetRtpSendParameters(uint32_t ssrc)"
  },
  {
    "label": "SetRtpSendParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "SetRtpSendParameters(uint32_t ssrc, const webrtc::RtpParameters& parameters)"
  },
  {
    "label": "GetRtpReceiveParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetRtpReceiveParameters(uint32_t ssrc)"
  },
  {
    "label": "GetDefaultRtpReceiveParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetDefaultRtpReceiveParameters()"
  },
  {
    "label": "GetSendCodec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSendCodec(VideoCodec* send_codec)"
  },
  {
    "label": "SetSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSend(bool send)"
  },
  {
    "label": "SetVideoSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVideoSend(uint32_t ssrc, const VideoOptions* options, rtc::VideoSourceInterface<webrtc::VideoFrame>* source)"
  },
  {
    "label": "AddSendStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSendStream(const StreamParams& sp)"
  },
  {
    "label": "RemoveSendStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSendStream(uint32_t ssrc)"
  },
  {
    "label": "AddRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRecvStream(const StreamParams& sp)"
  },
  {
    "label": "AddRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRecvStream(const StreamParams& sp, bool default_stream)"
  },
  {
    "label": "RemoveRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRecvStream(uint32_t ssrc)"
  },
  {
    "label": "ResetUnsignaledRecvStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetUnsignaledRecvStream()"
  },
  {
    "label": "OnDemuxerCriteriaUpdatePending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemuxerCriteriaUpdatePending()"
  },
  {
    "label": "OnDemuxerCriteriaUpdateComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDemuxerCriteriaUpdateComplete()"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSink(uint32_t ssrc, rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "SetDefaultSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultSink(rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "FillBitrateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBitrateInfo(BandwidthEstimationInfo* bwe_info)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStats(VideoMediaInfo* info)"
  },
  {
    "label": "OnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketReceived(rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "OnPacketSent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketSent(const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(bool ready)"
  },
  {
    "label": "OnNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkRouteChanged(absl::string_view transport_name, const rtc::NetworkRoute& network_route)"
  },
  {
    "label": "SetInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterface(NetworkInterface* iface)"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetFrameEncryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameEncryptor(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameEncryptorInterface> frame_encryptor)"
  },
  {
    "label": "SetEncoderSelector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderSelector(uint32_t ssrc, webrtc::VideoEncoderFactory::EncoderSelectorInterface* encoder_selector)"
  },
  {
    "label": "SetVideoCodecSwitchingEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVideoCodecSwitchingEnabled(bool enabled)"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(uint32_t ssrc, int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetBaseMinimumPlayoutDelayMs(uint32_t ssrc)"
  },
  {
    "label": "sending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "sending()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&thread_checker_)"
  },
  {
    "label": "unsignaled_stream_params()",
    "kind": "Method",
    "detail": "Function (StreamParams)",
    "insertText": "unsignaled_stream_params()"
  },
  {
    "label": "BackfillBufferedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BackfillBufferedPackets(rtc::ArrayView<const uint32_t> ssrcs)"
  },
  {
    "label": "RequestEncoderFallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEncoderFallback()"
  },
  {
    "label": "RequestEncoderSwitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEncoderSwitch(const webrtc::SdpVideoFormat& format, bool allow_default_fallback)"
  },
  {
    "label": "SetRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordableEncodedFrameCallback(uint32_t ssrc, std::function<void(const webrtc::RecordableEncodedFrame&)> callback)"
  },
  {
    "label": "ClearRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRecordableEncodedFrameCallback(uint32_t ssrc)"
  },
  {
    "label": "RequestRecvKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRecvKeyFrame(uint32_t ssrc)"
  },
  {
    "label": "GenerateSendKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSendKeyFrame(uint32_t ssrc, const std::vector<std::string>& rids)"
  },
  {
    "label": "SetEncoderToPacketizerFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderToPacketizerFrameTransformer(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(uint32_t ssrc, rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "FindReceiveStream()",
    "kind": "Method",
    "detail": "Function (private : class WebRtcVideoReceiveStream ; WebRtcVideoReceiveStream*)",
    "insertText": "FindReceiveStream(uint32_t ssrc) RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "VideoCodecSettings()",
    "kind": "Method",
    "detail": "Function (struct VideoCodecSettings {)",
    "insertText": "VideoCodecSettings()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const VideoCodecSettings& other)"
  },
  {
    "label": "EqualsDisregardingFlexfec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualsDisregardingFlexfec(const VideoCodecSettings& a, const VideoCodecSettings& b)"
  },
  {
    "label": "GetChangedSendParameters()",
    "kind": "Method",
    "detail": "Function (VideoCodec codec ; webrtc::UlpfecConfig ulpfec ; int flexfec_payload_type ; int rtx_payload_type ; int rtx_time ; } ; struct ChangedSendParameters { absl::optional<VideoCodecSettings> send_codec ; absl::optional<std::vector<VideoCodecSettings>> negotiated_codecs ; absl::optional<std::vector<webrtc::RtpExtension>> rtp_header_extensions ; absl::optional<std::string> mid ; absl::optional<bool> extmap_allow_mixed ; absl::optional<int> max_bandwidth_bps ; absl::optional<bool> conference_mode ; absl::optional<webrtc::RtcpMode> rtcp_mode ; } ; struct ChangedRecvParameters { absl::optional<std::vector<VideoCodecSettings>> codec_settings ; absl::optional<std::vector<webrtc::RtpExtension>> rtp_header_extensions ; absl::optional<int> flexfec_payload_type ; } ; bool)",
    "insertText": "GetChangedSendParameters(const VideoSendParameters& params, ChangedSendParameters* changed_params) const RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "ApplyChangedParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyChangedParams(const ChangedSendParameters& changed_params)"
  },
  {
    "label": "GetChangedRecvParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetChangedRecvParameters(const VideoRecvParameters& params, ChangedRecvParameters* changed_params) const RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "ConfigureReceiverRtp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureReceiverRtp(webrtc::VideoReceiveStreamInterface::Config* config, webrtc::FlexfecReceiveStream::Config* flexfec_config, const StreamParams& sp) const RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "ValidateSendSsrcAvailability()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateSendSsrcAvailability(const StreamParams& sp) const RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "ValidateReceiveSsrcAvailability()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateReceiveSsrcAvailability(const StreamParams& sp) const RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "DeleteReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteReceiveStream(WebRtcVideoReceiveStream* stream) RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "CodecSettingsVectorToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "CodecSettingsVectorToString(const std::vector<VideoCodecSettings>& codecs)"
  },
  {
    "label": "ExtractCodecInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractCodecInformation(rtc::ArrayView<const VideoCodecSettings> recv_codecs, std::map<int, int>& rtx_associated_payload_types, std::set<int>& raw_payload_types, std::vector<webrtc::VideoReceiveStreamInterface::Decoder>& decoders)"
  },
  {
    "label": "SetReceiverReportSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiverReportSsrc(uint32_t ssrc) RTC_RUN_ON(&thread_checker_)"
  },
  {
    "label": "WebRtcVideoSendStream()",
    "kind": "Method",
    "detail": "Function (class WebRtcVideoSendStream { public :)",
    "insertText": "WebRtcVideoSendStream(webrtc::Call* call, const StreamParams& sp, webrtc::VideoSendStream::Config config, const VideoOptions& options, bool enable_cpu_overuse_detection, int max_bitrate_bps, const absl::optional<VideoCodecSettings>& codec_settings, const absl::optional<std::vector<webrtc::RtpExtension>>& rtp_extensions, const VideoSendParameters& send_params)"
  },
  {
    "label": "WebRtcVideoSendStream()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WebRtcVideoSendStream()"
  },
  {
    "label": "SetSendParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendParameters(const ChangedSendParameters& send_params)"
  },
  {
    "label": "SetRtpParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "SetRtpParameters(const webrtc::RtpParameters& parameters)"
  },
  {
    "label": "GetRtpParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RtpParameters)",
    "insertText": "GetRtpParameters()"
  },
  {
    "label": "SetFrameEncryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameEncryptor(rtc::scoped_refptr<webrtc::FrameEncryptorInterface> frame_encryptor)"
  },
  {
    "label": "SetVideoSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVideoSend(const VideoOptions* options, rtc::VideoSourceInterface<webrtc::VideoFrame>* source)"
  },
  {
    "label": "SetEncoderSelector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderSelector(webrtc::VideoEncoderFactory::EncoderSelectorInterface* encoder_selector)"
  },
  {
    "label": "GetSsrcs()",
    "kind": "Method",
    "detail": "Function (const std::vector<uint32_t>&)",
    "insertText": "GetSsrcs()"
  },
  {
    "label": "GetPerLayerVideoSenderInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoSenderInfo>)",
    "insertText": "GetPerLayerVideoSenderInfos(bool log_stats)"
  },
  {
    "label": "GetAggregatedVideoSenderInfo()",
    "kind": "Method",
    "detail": "Function (VideoSenderInfo)",
    "insertText": "GetAggregatedVideoSenderInfo(const std::vector<VideoSenderInfo>& infos)"
  },
  {
    "label": "SetEncoderToPacketizerFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderToPacketizerFrameTransformer(rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyFrame(const std::vector<std::string>& rids)"
  },
  {
    "label": "VideoSendStreamParameters()",
    "kind": "Method",
    "detail": "Function (private : struct VideoSendStreamParameters {)",
    "insertText": "VideoSendStreamParameters(webrtc::VideoSendStream::Config config, const VideoOptions& options, int max_bitrate_bps, const absl::optional<VideoCodecSettings>& codec_settings)"
  },
  {
    "label": "ConfigureVideoEncoderSettings()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoSendStream::Config config ; VideoOptions options ; int max_bitrate_bps ; bool conference_mode ; absl::optional<VideoCodecSettings> codec_settings ; webrtc::VideoEncoderConfig encoder_config ; } ; rtc::scoped_refptr<webrtc::VideoEncoderConfig::EncoderSpecificSettings>)",
    "insertText": "ConfigureVideoEncoderSettings(const VideoCodec& codec)"
  },
  {
    "label": "SetCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCodec(const VideoCodecSettings& codec)"
  },
  {
    "label": "RecreateWebRtcStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateWebRtcStream()"
  },
  {
    "label": "CreateVideoEncoderConfig()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoEncoderConfig)",
    "insertText": "CreateVideoEncoderConfig(const VideoCodec& codec)"
  },
  {
    "label": "ReconfigureEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconfigureEncoder()"
  },
  {
    "label": "UpdateSendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSendState()"
  },
  {
    "label": "GetDegradationPreference()",
    "kind": "Method",
    "detail": "Function (webrtc::DegradationPreference)",
    "insertText": "GetDegradationPreference() const RTC_EXCLUSIVE_LOCKS_REQUIRED(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker thread_checker_ ; webrtc::TaskQueueBase* const worker_thread_ ; const std::vector<uint32_t> ssrcs_)",
    "insertText": "RTC_GUARDED_BY(&thread_checker_)"
  },
  {
    "label": "WebRtcVideoReceiveStream()",
    "kind": "Method",
    "detail": "Function (const bool disable_automatic_resize_ ; } ; class WebRtcVideoReceiveStream : public rtc::VideoSinkInterface<webrtc::VideoFrame> { public :)",
    "insertText": "WebRtcVideoReceiveStream(WebRtcVideoChannel* channel, webrtc::Call* call, const StreamParams& sp, webrtc::VideoReceiveStreamInterface::Config config, bool default_stream, const std::vector<VideoCodecSettings>& recv_codecs, const webrtc::FlexfecReceiveStream::Config& flexfec_config)"
  },
  {
    "label": "WebRtcVideoReceiveStream()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WebRtcVideoReceiveStream()"
  },
  {
    "label": "stream()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoReceiveStreamInterface&)",
    "insertText": "stream()"
  },
  {
    "label": "flexfec_stream()",
    "kind": "Method",
    "detail": "Function (webrtc::FlexfecReceiveStream*)",
    "insertText": "flexfec_stream()"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpSource>)",
    "insertText": "GetSources()"
  },
  {
    "label": "SetFeedbackParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFeedbackParameters(bool lntf_enabled, bool nack_enabled, bool transport_cc_enabled, webrtc::RtcpMode rtcp_mode, int rtx_time)"
  },
  {
    "label": "SetRecvParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvParameters(const ChangedRecvParameters& recv_params)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(const webrtc::VideoFrame& frame)"
  },
  {
    "label": "IsDefaultStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDefaultStream()"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(int delay_ms)"
  },
  {
    "label": "GetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetBaseMinimumPlayoutDelayMs()"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSink(rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "GetVideoReceiverInfo()",
    "kind": "Method",
    "detail": "Function (VideoReceiverInfo)",
    "insertText": "GetVideoReceiverInfo(bool log_stats)"
  },
  {
    "label": "SetRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordableEncodedFrameCallback(std::function<void(const webrtc::RecordableEncodedFrame&)> callback)"
  },
  {
    "label": "ClearRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRecordableEncodedFrameCallback()"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyFrame()"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(rtc::scoped_refptr<webrtc::FrameTransformerInterface> frame_transformer)"
  },
  {
    "label": "SetLocalSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSsrc(uint32_t local_ssrc)"
  },
  {
    "label": "SetFlexFecPayload()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SetFlexFecPayload(int payload_type)"
  },
  {
    "label": "RecreateReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateReceiveStream()"
  },
  {
    "label": "CreateReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateReceiveStream()"
  },
  {
    "label": "StartReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartReceiveStream()"
  },
  {
    "label": "ReconfigureCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReconfigureCodecs(const std::vector<VideoCodecSettings>& recv_codecs)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (WebRtcVideoChannel* const channel_ ; webrtc::Call* const call_ ; const StreamParams stream_params_ ; webrtc::VideoReceiveStreamInterface* stream_ ; const bool default_stream_ ; webrtc::VideoReceiveStreamInterface::Config config_ ; webrtc::FlexfecReceiveStream::Config flexfec_config_ ; webrtc::FlexfecReceiveStream* flexfec_stream_ ; webrtc::Mutex sink_lock_ ; rtc::VideoSinkInterface<webrtc::VideoFrame>* sink_)",
    "insertText": "RTC_GUARDED_BY(sink_lock_)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Construct(webrtc::Call* call, WebRtcVideoEngine* engine)"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtp(const uint8_t* data, size_t len, const webrtc::PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(const uint8_t* data, size_t len)"
  },
  {
    "label": "MapCodecs()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoCodecSettings>)",
    "insertText": "MapCodecs(const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "SelectSendVideoCodecs()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoCodecSettings>)",
    "insertText": "SelectSendVideoCodecs(const std::vector<VideoCodecSettings>& remote_mapped_codecs) const RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "NonFlexfecReceiveCodecsHaveChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NonFlexfecReceiveCodecsHaveChanged(std::vector<VideoCodecSettings> before, std::vector<VideoCodecSettings> after)"
  },
  {
    "label": "FillSenderStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSenderStats(VideoMediaInfo* info, bool log_stats) RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "FillReceiverStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillReceiverStats(VideoMediaInfo* info, bool log_stats) RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "FillBandwidthEstimationStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBandwidthEstimationStats(const webrtc::Call::Stats& stats, VideoMediaInfo* info) RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "FillSendAndReceiveCodecStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSendAndReceiveCodecStats(VideoMediaInfo* video_media_info) RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::TaskQueueBase* const worker_thread_ ; webrtc::ScopedTaskSafety task_safety_ ; RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker network_thread_checker_ ; RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker thread_checker_ ; uint32_t rtcp_receiver_report_ssrc_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  }
]