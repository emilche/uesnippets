[
  {
    "label": "VideoDecoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoDecoderFactory"
  },
  {
    "label": "VideoEncoderFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoEncoderFactory"
  },
  {
    "label": "WebRtcVideoChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoChannel"
  },
  {
    "label": "UnsignalledSsrcHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnsignalledSsrcHandler"
  },
  {
    "label": "Action",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Action"
  },
  {
    "label": "DefaultUnsignalledSsrcHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultUnsignalledSsrcHandler"
  },
  {
    "label": "WebRtcVideoEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoEngine"
  },
  {
    "label": "WebRtcVideoChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoChannel"
  },
  {
    "label": "AdaptReason",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AdaptReason"
  },
  {
    "label": "WebRtcVideoReceiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoReceiveStream"
  },
  {
    "label": "VideoCodecSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoCodecSettings"
  },
  {
    "label": "ChangedSendParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChangedSendParameters"
  },
  {
    "label": "ChangedRecvParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChangedRecvParameters"
  },
  {
    "label": "WebRtcVideoSendStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoSendStream"
  },
  {
    "label": "VideoSendStreamParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoSendStreamParameters"
  },
  {
    "label": "WebRtcVideoReceiveStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WebRtcVideoReceiveStream"
  },
  {
    "label": "MergeInfoAboutOutboundRtpSubstreamsForTesting()",
    "kind": "Method",
    "detail": "Function (webrtc::VideoSendStream::StreamStats>)",
    "insertText": "MergeInfoAboutOutboundRtpSubstreamsForTesting(\n    const std::map<uint32_t, webrtc::VideoSendStream::StreamStats>& substreams)"
  },
  {
    "label": "DefaultUnsignalledSsrcHandler()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "DefaultUnsignalledSsrcHandler()"
  },
  {
    "label": "SetDefaultSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultSink(WebRtcVideoChannel* channel,\n                      rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "send_codecs()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "send_codecs(true)"
  },
  {
    "label": "recv_codecs()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "recv_codecs(true)"
  },
  {
    "label": "WebRtcVideoChannel()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "WebRtcVideoChannel(\n      webrtc::Call* call,\n      const MediaConfig& config,\n      const VideoOptions& options,\n      const webrtc::CryptoOptions& crypto_options,\n      webrtc::VideoEncoderFactory* encoder_factory,\n      webrtc::VideoDecoderFactory* decoder_factory,\n      webrtc::VideoBitrateAllocatorFactory* bitrate_allocator_factory)"
  },
  {
    "label": "AddRecvStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddRecvStream(const StreamParams& sp, bool default_stream)"
  },
  {
    "label": "GetDefaultReceiveStreamSsrc()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "GetDefaultReceiveStreamSsrc()"
  },
  {
    "label": "BackfillBufferedPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BackfillBufferedPackets(rtc::ArrayView<const uint32_t> ssrcs)"
  },
  {
    "label": "EqualsDisregardingFlexfec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualsDisregardingFlexfec(const VideoCodecSettings& a,\n                                          const VideoCodecSettings& b)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "ApplyChangedParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyChangedParams(const ChangedSendParameters& changed_params)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "CodecSettingsVectorToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "CodecSettingsVectorToString(\n      const std::vector<VideoCodecSettings>& codecs)"
  },
  {
    "label": "ExtractCodecInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractCodecInformation(\n      rtc::ArrayView<const VideoCodecSettings> recv_codecs,\n      std::map<int, int>& rtx_associated_payload_types,\n      std::set<int>& raw_payload_types,\n      std::vector<webrtc::VideoReceiveStreamInterface::Decoder>& decoders)"
  },
  {
    "label": "WebRtcVideoSendStream()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "WebRtcVideoSendStream(\n        webrtc::Call* call,\n        const StreamParams& sp,\n        webrtc::VideoSendStream::Config config,\n        const VideoOptions& options,\n        bool enable_cpu_overuse_detection,\n        int max_bitrate_bps,\n        const absl::optional<VideoCodecSettings>& codec_settings,\n        const absl::optional<std::vector<webrtc::RtpExtension>>& rtp_extensions,\n        const VideoSendParameters& send_params)"
  },
  {
    "label": "SetSendParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSendParameters(const ChangedSendParameters& send_params)"
  },
  {
    "label": "SetRtpParameters()",
    "kind": "Method",
    "detail": "Function (webrtc::RTCError)",
    "insertText": "SetRtpParameters(const webrtc::RtpParameters& parameters)"
  },
  {
    "label": "SetFrameEncryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameEncryptor(\n        rtc::scoped_refptr<webrtc::FrameEncryptorInterface> frame_encryptor)"
  },
  {
    "label": "SetVideoSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVideoSend(const VideoOptions* options,\n                      rtc::VideoSourceInterface<webrtc::VideoFrame>* source)"
  },
  {
    "label": "SetEncoderSelector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderSelector(\n        webrtc::VideoEncoderFactory::EncoderSelectorInterface*\n            encoder_selector)"
  },
  {
    "label": "SetSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSend(bool send)"
  },
  {
    "label": "GetPerLayerVideoSenderInfos()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoSenderInfo>)",
    "insertText": "GetPerLayerVideoSenderInfos(bool log_stats)"
  },
  {
    "label": "FillBitrateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillBitrateInfo(BandwidthEstimationInfo* bwe_info)"
  },
  {
    "label": "SetEncoderToPacketizerFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderToPacketizerFrameTransformer(\n        rtc::scoped_refptr<webrtc::FrameTransformerInterface>\n            frame_transformer)"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyFrame(const std::vector<std::string>& rids)"
  },
  {
    "label": "ConfigureVideoEncoderSettings()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::VideoEncoderConfig::EncoderSpecificSettings>)",
    "insertText": "ConfigureVideoEncoderSettings(const VideoCodec& codec)"
  },
  {
    "label": "SetCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCodec(const VideoCodecSettings& codec)"
  },
  {
    "label": "RecreateWebRtcStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateWebRtcStream()"
  },
  {
    "label": "ReconfigureEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconfigureEncoder()"
  },
  {
    "label": "UpdateSendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSendState()"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ssrcs_)",
    "insertText": "RTC_GUARDED_BY(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (ssrc_groups_)",
    "insertText": "RTC_GUARDED_BY(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (source_)",
    "insertText": "RTC_GUARDED_BY(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (stream_)",
    "insertText": "RTC_GUARDED_BY(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (parameters_)",
    "insertText": "RTC_GUARDED_BY(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtp_parameters_)",
    "insertText": "RTC_GUARDED_BY(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (sending_)",
    "insertText": "RTC_GUARDED_BY(&thread_checker_)"
  },
  {
    "label": "WebRtcVideoReceiveStream()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "WebRtcVideoReceiveStream(\n        WebRtcVideoChannel* channel,\n        webrtc::Call* call,\n        const StreamParams& sp,\n        webrtc::VideoReceiveStreamInterface::Config config,\n        bool default_stream,\n        const std::vector<VideoCodecSettings>& recv_codecs,\n        const webrtc::FlexfecReceiveStream::Config& flexfec_config)"
  },
  {
    "label": "GetSources()",
    "kind": "Method",
    "detail": "Function (std::vector<webrtc::RtpSource>)",
    "insertText": "GetSources()"
  },
  {
    "label": "SetFeedbackParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFeedbackParameters(bool lntf_enabled,\n                               bool nack_enabled,\n                               bool transport_cc_enabled,\n                               webrtc::RtcpMode rtcp_mode,\n                               int rtx_time)"
  },
  {
    "label": "SetRecvParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvParameters(const ChangedRecvParameters& recv_params)"
  },
  {
    "label": "SetFrameDecryptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrameDecryptor(\n        rtc::scoped_refptr<webrtc::FrameDecryptorInterface> frame_decryptor)"
  },
  {
    "label": "SetBaseMinimumPlayoutDelayMs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetBaseMinimumPlayoutDelayMs(int delay_ms)"
  },
  {
    "label": "SetSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSink(rtc::VideoSinkInterface<webrtc::VideoFrame>* sink)"
  },
  {
    "label": "GetVideoReceiverInfo()",
    "kind": "Method",
    "detail": "Function (VideoReceiverInfo)",
    "insertText": "GetVideoReceiverInfo(bool log_stats)"
  },
  {
    "label": "ClearRecordableEncodedFrameCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearRecordableEncodedFrameCallback()"
  },
  {
    "label": "GenerateKeyFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKeyFrame()"
  },
  {
    "label": "SetDepacketizerToDecoderFrameTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDepacketizerToDecoderFrameTransformer(\n        rtc::scoped_refptr<webrtc::FrameTransformerInterface>\n            frame_transformer)"
  },
  {
    "label": "SetLocalSsrc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalSsrc(uint32_t local_ssrc)"
  },
  {
    "label": "SetFlexFecPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlexFecPayload(int payload_type)"
  },
  {
    "label": "RecreateReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateReceiveStream()"
  },
  {
    "label": "CreateReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateReceiveStream()"
  },
  {
    "label": "StartReceiveStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartReceiveStream()"
  },
  {
    "label": "ReconfigureCodecs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReconfigureCodecs(const std::vector<VideoCodecSettings>& recv_codecs)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (sink_)",
    "insertText": "RTC_GUARDED_BY(sink_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (timestamp_wraparound_handler_)",
    "insertText": "RTC_GUARDED_BY(sink_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (first_frame_timestamp_)",
    "insertText": "RTC_GUARDED_BY(sink_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (estimated_remote_start_ntp_time_ms_)",
    "insertText": "RTC_GUARDED_BY(sink_lock_)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(webrtc::Call* call, WebRtcVideoEngine* engine)"
  },
  {
    "label": "MapCodecs()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoCodecSettings>)",
    "insertText": "MapCodecs(\n      const std::vector<VideoCodec>& codecs)"
  },
  {
    "label": "RTC_EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_EXCLUSIVE_LOCKS_REQUIRED(thread_checker_)"
  },
  {
    "label": "NonFlexfecReceiveCodecsHaveChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NonFlexfecReceiveCodecsHaveChanged(\n      std::vector<VideoCodecSettings> before,\n      std::vector<VideoCodecSettings> after)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtcp_receiver_report_ssrc_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (sending_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (default_unsignalled_ssrc_handler_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (unsignalled_ssrc_handler_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (video_config_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_streams_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (receive_streams_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_unsignalled_ssrc_creation_time_ms_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_ssrcs_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (receive_ssrcs_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_codec_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (negotiated_codecs_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_rtp_extensions_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (encoder_factory_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (decoder_factory_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bitrate_allocator_factory_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (recv_codecs_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (recv_rtp_extensions_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (recv_flexfec_payload_type_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bitrate_config_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (send_params_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (default_send_options_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (recv_params_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (last_stats_log_ms_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (discard_unknown_ssrc_packets_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (unsignaled_stream_params_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (crypto_options_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (unsignaled_frame_transformer_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (unknown_ssrc_packet_buffer_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  }
]