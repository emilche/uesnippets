[
  {
    "label": "TileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TileData"
  },
  {
    "label": "so",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "so"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FindActiveValues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FindActiveValues"
  },
  {
    "label": "with",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "with"
  },
  {
    "label": "RootChild",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootChild"
  },
  {
    "label": "FindActiveValues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindActiveValues"
  },
  {
    "label": "TileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TileData"
  },
  {
    "label": "anyActiveValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "anyActiveValues(const TreeT& tree, const CoordBBox &bbox)"
  },
  {
    "label": "anyActiveVoxels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "anyActiveVoxels(const TreeT& tree, const CoordBBox &bbox)"
  },
  {
    "label": "anyActiveTiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "anyActiveTiles(const TreeT& tree, const CoordBBox &bbox)"
  },
  {
    "label": "noActiveValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "noActiveValues(const TreeT& tree, const CoordBBox &bbox)"
  },
  {
    "label": "countActiveValues()",
    "kind": "Method",
    "detail": "Function (Index64)",
    "insertText": "countActiveValues(const TreeT& tree, const CoordBBox &bbox)"
  },
  {
    "label": "activeTiles()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueType>>)",
    "insertText": "activeTiles(const TreeT& tree, const CoordBBox &bbox)"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "update(const TreeT& tree)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const TreeT &tree)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (tiles)",
    "insertText": "for(auto iter = mask.beginOn()"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (std::vector<TileDataT>)",
    "insertText": "tmp( tileCount )"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (FindActiveValues<TreeT>)",
    "insertText": "op(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (FindActiveValues<TreeT>)",
    "insertText": "op(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (FindActiveValues<TreeT>)",
    "insertText": "op(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (FindActiveValues<TreeT>)",
    "insertText": "op(tree)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (FindActiveValues<TreeT>)",
    "insertText": "op(tree)"
  }
]