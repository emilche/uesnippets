[
  {
    "label": "LoggedStartEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedStartEvent"
  },
  {
    "label": "RtcEventBeginLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventBeginLog"
  },
  {
    "label": "LoggedStartEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_BEGIN_LOG_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_BEGIN_LOG_H_ # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / units / timestamp . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding_parser . h \" # include \" logging / rtc_event_log / events / rtc_event_field_extraction . h \" namespace webrtc { struct LoggedStartEvent {)",
    "insertText": "LoggedStartEvent()"
  },
  {
    "label": "LoggedStartEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggedStartEvent(Timestamp timestamp) : LoggedStartEvent(timestamp, timestamp)"
  },
  {
    "label": "LoggedStartEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LoggedStartEvent(Timestamp timestamp, Timestamp utc_start_time) : timestamp(timestamp), utc_start_time(utc_start_time)"
  },
  {
    "label": "log_time_us()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_us()"
  },
  {
    "label": "log_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_ms()"
  },
  {
    "label": "log_time()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "log_time()"
  },
  {
    "label": "PlusInfinity()",
    "kind": "Method",
    "detail": "Function (Timestamp utc_start_time =)",
    "insertText": "PlusInfinity()"
  },
  {
    "label": "RtcEventBeginLog()",
    "kind": "Method",
    "detail": "Function (} ; class RtcEventBeginLog final : public RtcEvent { public : Type kType = Type::BeginV3Log ;)",
    "insertText": "RtcEventBeginLog(Timestamp timestamp, Timestamp utc_start_time)"
  },
  {
    "label": "RtcEventBeginLog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventBeginLog()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatus)",
    "insertText": "Parse(absl::string_view encoded_bytes, bool batched, std::vector<LoggedStartEvent>& output)"
  },
  {
    "label": "RtcEventBeginLog()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "RtcEventBeginLog(const RtcEventBeginLog& other)"
  }
]