[
  {
    "label": "Unwinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Unwinder"
  },
  {
    "label": "ModuleCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleCache"
  },
  {
    "label": "TargetThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetThread"
  },
  {
    "label": "FunctionAddressRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FunctionAddressRange"
  },
  {
    "label": "UnwindScenario",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnwindScenario"
  },
  {
    "label": "SampleEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SampleEvents"
  },
  {
    "label": "TestModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestModule"
  },
  {
    "label": "TargetThread()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TargetThread(OnceClosure to_run)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join()"
  },
  {
    "label": "UnwindScenario()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "UnwindScenario(const SetupFunction& setup_function)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(SampleEvents* events)"
  },
  {
    "label": "InvokeSetupFunction()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "InvokeSetupFunction(\n      const SetupFunction& setup_function,\n      SampleEvents* events)"
  },
  {
    "label": "WaitForSample()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "WaitForSample(SampleEvents* events)"
  },
  {
    "label": "CallWithPlainFunction()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "CallWithPlainFunction(OnceClosure wait_for_sample)"
  },
  {
    "label": "CallWithAlloca()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "CallWithAlloca(OnceClosure wait_for_sample)"
  },
  {
    "label": "CallThroughOtherLibrary()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "CallThroughOtherLibrary(NativeLibrary library,\n                                             OnceClosure wait_for_sample)"
  },
  {
    "label": "WithTargetThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithTargetThread(UnwindScenario* scenario,\n                      ProfileCallback profile_callback)"
  },
  {
    "label": "FormatSampleForDiagnosticOutput()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatSampleForDiagnosticOutput(const std::vector<Frame>& sample)"
  },
  {
    "label": "ExpectStackContains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStackContains(const std::vector<Frame>& stack,\n                         const std::vector<FunctionAddressRange>& functions)"
  },
  {
    "label": "ExpectStackContainsNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStackContainsNames(const std::vector<Frame>& stack,\n                              const std::vector<std::string>& function_names)"
  },
  {
    "label": "ExpectStackDoesNotContain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStackDoesNotContain(\n    const std::vector<Frame>& stack,\n    const std::vector<FunctionAddressRange>& functions)"
  },
  {
    "label": "LoadOtherLibrary()",
    "kind": "Method",
    "detail": "Function (NativeLibrary)",
    "insertText": "LoadOtherLibrary()"
  },
  {
    "label": "GetAddressInOtherLibrary()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetAddressInOtherLibrary(NativeLibrary library)"
  },
  {
    "label": "CreateCoreUnwindersFactoryForTesting()",
    "kind": "Method",
    "detail": "Function (StackSamplingProfiler::UnwindersFactory)",
    "insertText": "CreateCoreUnwindersFactoryForTesting(\n    ModuleCache* module_cache)"
  }
]