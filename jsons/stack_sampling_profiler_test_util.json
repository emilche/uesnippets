[
  {
    "label": "Unwinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Unwinder"
  },
  {
    "label": "ModuleCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModuleCache"
  },
  {
    "label": "TargetThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetThread"
  },
  {
    "label": "FunctionAddressRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FunctionAddressRange"
  },
  {
    "label": "UnwindScenario",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnwindScenario"
  },
  {
    "label": "SampleEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SampleEvents"
  },
  {
    "label": "TestModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestModule"
  },
  {
    "label": "TargetThread()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROFILER_STACK_SAMPLING_PROFILER_TEST_UTIL_H_ # define BASE_PROFILER_STACK_SAMPLING_PROFILER_TEST_UTIL_H_ # include<memory> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / native_library . h \" # include \" base / profiler / frame . h \" # include \" base / profiler / sampling_profiler_thread_token . h \" # include \" base / profiler / stack_sampling_profiler . h \" # include \" base / synchronization / waitable_event . h \" # include \" base / threading / platform_thread . h \" namespace base { class Unwinder ; class ModuleCache ; class TargetThread : public PlatformThread::Delegate { public :)",
    "insertText": "TargetThread(OnceClosure to_run)"
  },
  {
    "label": "TargetThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetThread(const TargetThread&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TargetThread&)",
    "insertText": "operator(const TargetThread&)"
  },
  {
    "label": "TargetThread()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TargetThread()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join()"
  },
  {
    "label": "ThreadMain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadMain()"
  },
  {
    "label": "thread_token()",
    "kind": "Method",
    "detail": "Function (SamplingProfilerThreadToken)",
    "insertText": "thread_token()"
  },
  {
    "label": "UnwindScenario()",
    "kind": "Method",
    "detail": "Function (struct SampleEvents { WaitableEvent ready_for_sample ; WaitableEvent sample_finished ; } ;)",
    "insertText": "UnwindScenario(const SetupFunction& setup_function)"
  },
  {
    "label": "UnwindScenario()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UnwindScenario()"
  },
  {
    "label": "UnwindScenario()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnwindScenario(const UnwindScenario&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnwindScenario&)",
    "insertText": "operator(const UnwindScenario&)"
  },
  {
    "label": "GetWaitForSampleAddressRange()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "GetWaitForSampleAddressRange()"
  },
  {
    "label": "GetSetupFunctionAddressRange()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "GetSetupFunctionAddressRange()"
  },
  {
    "label": "GetOuterFunctionAddressRange()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "GetOuterFunctionAddressRange()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(SampleEvents* events)"
  },
  {
    "label": "InvokeSetupFunction()",
    "kind": "Method",
    "detail": "Function (private : FunctionAddressRange)",
    "insertText": "InvokeSetupFunction(const SetupFunction& setup_function, SampleEvents* events)"
  },
  {
    "label": "WaitForSample()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "WaitForSample(SampleEvents* events)"
  },
  {
    "label": "TestModule()",
    "kind": "Method",
    "detail": "Function (const SetupFunction setup_function_ ; } ; class TestModule : public ModuleCache::Module { public :)",
    "insertText": "TestModule(uintptr_t base_address = 0, size_t size = 0, bool is_native = true) : base_address_(base_address), size_(size), is_native_(is_native)"
  },
  {
    "label": "GetBaseAddress()",
    "kind": "Method",
    "detail": "Function (} uintptr_t)",
    "insertText": "GetBaseAddress()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetId()"
  },
  {
    "label": "GetDebugBasename()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "GetDebugBasename()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetSize()"
  },
  {
    "label": "IsNative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNative()"
  },
  {
    "label": "set_id()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_id(const std::string& id)"
  },
  {
    "label": "set_debug_basename()",
    "kind": "Method",
    "detail": "Function (id_ = id ; } void)",
    "insertText": "set_debug_basename(const FilePath& basename)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (debug_basename_ = basename ; } private : const uintptr_t base_address_ ; const size_t size_ ; const bool is_native_ ; std::string id_ ; FilePath debug_basename_ ; } ; bool)",
    "insertText": "operator(const Frame& a, const Frame& b)"
  },
  {
    "label": "CallWithPlainFunction()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "CallWithPlainFunction(OnceClosure wait_for_sample)"
  },
  {
    "label": "CallWithAlloca()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "CallWithAlloca(OnceClosure wait_for_sample)"
  },
  {
    "label": "CallThroughOtherLibrary()",
    "kind": "Method",
    "detail": "Function (FunctionAddressRange)",
    "insertText": "CallThroughOtherLibrary(NativeLibrary library, OnceClosure wait_for_sample)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ProfileCallback = OnceCallback<)",
    "insertText": "void(SamplingProfilerThreadToken)"
  },
  {
    "label": "WithTargetThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WithTargetThread(UnwindScenario* scenario, ProfileCallback profile_callback)"
  },
  {
    "label": "Unwinder()",
    "kind": "Method",
    "detail": "Function (using UnwinderFactory = OnceCallback<std::unique_ptr<)",
    "insertText": "Unwinder()"
  },
  {
    "label": "SampleScenario()",
    "kind": "Method",
    "detail": "Function (std::vector<Frame>)",
    "insertText": "SampleScenario(UnwindScenario* scenario, ModuleCache* module_cache, UnwinderFactory aux_unwinder_factory = UnwinderFactory())"
  },
  {
    "label": "FormatSampleForDiagnosticOutput()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatSampleForDiagnosticOutput(const std::vector<Frame>& sample)"
  },
  {
    "label": "ExpectStackContains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStackContains(const std::vector<Frame>& stack, const std::vector<FunctionAddressRange>& functions)"
  },
  {
    "label": "ExpectStackContainsNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStackContainsNames(const std::vector<Frame>& stack, const std::vector<std::string>& function_names)"
  },
  {
    "label": "ExpectStackDoesNotContain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpectStackDoesNotContain(const std::vector<Frame>& stack, const std::vector<FunctionAddressRange>& functions)"
  },
  {
    "label": "LoadOtherLibrary()",
    "kind": "Method",
    "detail": "Function (NativeLibrary)",
    "insertText": "LoadOtherLibrary()"
  },
  {
    "label": "GetAddressInOtherLibrary()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "GetAddressInOtherLibrary(NativeLibrary library)"
  },
  {
    "label": "CreateCoreUnwindersFactoryForTesting()",
    "kind": "Method",
    "detail": "Function (StackSamplingProfiler::UnwindersFactory)",
    "insertText": "CreateCoreUnwindersFactoryForTesting(ModuleCache* module_cache)"
  }
]