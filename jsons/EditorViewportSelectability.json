[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FUICommandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandInfo"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "UNREALED_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNREALED_API"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Components / PrimitiveComponent . h \" # include \" GenericPlatform / ICursor . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Misc / Optional . h \" class AActor ; class FCanvas ; class FEditorViewportClient ; class FLevelEditorViewportClient ; class FUICommandInfo ; class HHitProxy ; struct FConvexVolume ; struct FViewportClick ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(UWorld*, FOnGetWorld)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnIsObjectSelectableInViewport, UObject*)"
  },
  {
    "label": "UpdatePrimitiveVisuals()",
    "kind": "Method",
    "detail": "Function (class FEditorViewportSelectability { public : const FText DefaultLimitedSelectionText ; void)",
    "insertText": "UpdatePrimitiveVisuals(const bool bInSelectedLimited, UPrimitiveComponent* const InPrimitive, const TOptional<FColor>& InColor = TOptional<FColor>())"
  },
  {
    "label": "UpdateHoveredPrimitive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateHoveredPrimitive(const bool bInSelectedLimited , UPrimitiveComponent* const InPrimitiveComponent , TMap<TWeakObjectPtr<UPrimitiveComponent>, TOptional<FColor>>& InOutHoveredPrimitiveComponents , const TFunctionRef<bool(UObject*)>& InSelectablePredicate)"
  },
  {
    "label": "UpdateHoveredActorPrimitives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateHoveredActorPrimitives(const bool bInSelectedLimited , AActor* const InActor , TMap<TWeakObjectPtr<UPrimitiveComponent>, TOptional<FColor>>& InOutHoveredPrimitiveComponents , const TFunctionRef<bool(UObject*)>& InSelectablePredicate)"
  },
  {
    "label": "GetLimitedSelectionText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLimitedSelectionText(const TSharedPtr<FUICommandInfo>& InToggleAction, const FText& InDefaultText = DefaultLimitedSelectionText)"
  },
  {
    "label": "DrawEnabledTextNotice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEnabledTextNotice(FCanvas* const InCanvas, const FText& InText)"
  },
  {
    "label": "FEditorViewportSelectability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorViewportSelectability()"
  },
  {
    "label": "FEditorViewportSelectability()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorViewportSelectability(const FOnGetWorld& InOnGetWorld, const FOnIsObjectSelectableInViewport& InOnIsObjectSelectableInViewport)"
  },
  {
    "label": "EnableLimitedSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableLimitedSelection(const bool bInEnabled)"
  },
  {
    "label": "IsSelectionLimited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectionLimited()"
  },
  {
    "label": "UpdateSelectionLimitedVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectionLimitedVisuals(const bool bInClearHovered)"
  },
  {
    "label": "DeselectNonSelectableActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectNonSelectableActors()"
  },
  {
    "label": "GetCursorForHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCursorForHovered(EMouseCursor::Type& OutCursor)"
  },
  {
    "label": "UpdateHoverFromHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoverFromHitProxy(HHitProxy* const InHitProxy)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* const InViewportClient, HHitProxy* const InHitProxy, const FViewportClick& InClick)"
  },
  {
    "label": "BoxSelectWorldActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxSelectWorldActors(FBox& InBox, FEditorViewportClient* const InEditorViewportClient, const bool bInSelect)"
  },
  {
    "label": "FrustumSelectWorldActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelectWorldActors(const FConvexVolume& InFrustum, FEditorViewportClient* const InEditorViewportClient, const bool bInSelect)"
  },
  {
    "label": "IsActorSelectableClass()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsActorSelectableClass(const AActor& InActor)"
  },
  {
    "label": "IsActorInLevelHiddenLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorInLevelHiddenLayer(const AActor& InActor, FLevelEditorViewportClient* const InLevelEditorViewportClient)"
  },
  {
    "label": "DoesActorIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesActorIntersectBox(const AActor& InActor, const FBox& InBox, FEditorViewportClient* const InEditorViewportClient, const bool bInUseStrictSelection)"
  },
  {
    "label": "DoesActorIntersectFrustum()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesActorIntersectFrustum(const AActor& InActor, const FConvexVolume& InFrustum, FEditorViewportClient* const InEditorViewportClient, const bool bInUseStrictSelection)"
  },
  {
    "label": "SelectActorsByPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectActorsByPredicate(UWorld* const InWorld , const bool bInSelect , const bool bInClearSelection , const TFunctionRef<bool(AActor*)> InPredicate , const TArray<AActor*>& InActors = {})"
  },
  {
    "label": "UpdateHoveredActorPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoveredActorPrimitives(AActor* const InActor)"
  }
]