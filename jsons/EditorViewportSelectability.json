[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FUICommandInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandInfo"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "UNREALED_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNREALED_API"
  },
  {
    "label": "GetLimitedSelectionText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLimitedSelectionText(const TSharedPtr<FUICommandInfo>& InToggleAction, const FText& InDefaultText = DefaultLimitedSelectionText)"
  },
  {
    "label": "DrawEnabledTextNotice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEnabledTextNotice(FCanvas* const InCanvas, const FText& InText)"
  },
  {
    "label": "EnableLimitedSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableLimitedSelection(const bool bInEnabled)"
  },
  {
    "label": "UpdateSelectionLimitedVisuals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectionLimitedVisuals(const bool bInClearHovered)"
  },
  {
    "label": "DeselectNonSelectableActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectNonSelectableActors()"
  },
  {
    "label": "UpdateHoverFromHitProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoverFromHitProxy(HHitProxy* const InHitProxy)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* const InViewportClient, HHitProxy* const InHitProxy, const FViewportClick& InClick)"
  },
  {
    "label": "BoxSelectWorldActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BoxSelectWorldActors(FBox& InBox, FEditorViewportClient* const InEditorViewportClient, const bool bInSelect)"
  },
  {
    "label": "FrustumSelectWorldActors()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelectWorldActors(const FConvexVolume& InFrustum, FEditorViewportClient* const InEditorViewportClient, const bool bInSelect)"
  },
  {
    "label": "IsActorSelectableClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorSelectableClass(const AActor& InActor)"
  },
  {
    "label": "IsActorInLevelHiddenLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorInLevelHiddenLayer(const AActor& InActor, FLevelEditorViewportClient* const InLevelEditorViewportClient)"
  },
  {
    "label": "DoesActorIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesActorIntersectBox(const AActor& InActor, const FBox& InBox, FEditorViewportClient* const InEditorViewportClient, const bool bInUseStrictSelection)"
  },
  {
    "label": "DoesActorIntersectFrustum()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesActorIntersectFrustum(const AActor& InActor, const FConvexVolume& InFrustum, FEditorViewportClient* const InEditorViewportClient, const bool bInUseStrictSelection)"
  },
  {
    "label": "UpdateHoveredActorPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHoveredActorPrimitives(AActor* const InActor)"
  }
]