[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "PacketConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketConverter"
  },
  {
    "label": "TensorConversionOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorConversionOp"
  },
  {
    "label": "ConversionSubExprEval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConversionSubExprEval"
  },
  {
    "label": "ConversionSubExprEvalAsync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConversionSubExprEvalAsync"
  },
  {
    "label": "CoeffConv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CoeffConv"
  },
  {
    "label": "PacketConv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketConv"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorConversionOpBlockFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorConversionOpBlockFactory"
  },
  {
    "label": "XprType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XprType"
  },
  {
    "label": "PacketConverter()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CONVERSION_H # define EIGEN_CXX11_TENSOR_TENSOR_CONVERSION_H namespace Eigen { namespace internal { template<TargetType,XprType> struct traits<TensorConversionOp<TargetType,XprType>> { typedef TargetType Scalar ; typedef traits<XprType>::StorageKind StorageKind ; typedef traits<XprType>::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = traits<XprType>::NumDimensions ; const int Layout = traits<XprType>::Layout ; enum { Flags = 0 } ; typedef TypeConversion<Scalar,traits<XprType>::PointerType>::type PointerType ; } ; template<TargetType,XprType> struct eval<TensorConversionOp<TargetType,XprType>,Eigen::Dense> { typedef const TensorConversionOp<TargetType,XprType>& type ; } ; template<TargetType,XprType> struct nested<TensorConversionOp<TargetType,XprType>,1,eval<TensorConversionOp<TargetType,XprType>>::type> { typedef TensorConversionOp<TargetType,XprType> type ; } ; } template<TensorEvaluator,SrcPacket,TgtPacket,int SrcCoeffRatio,int TgtCoeffRatio> struct PacketConverter ; template<TensorEvaluator,SrcPacket,TgtPacket> struct PacketConverter<TensorEvaluator,SrcPacket,TgtPacket,1,1> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "PacketConverter(const TensorEvaluator& impl) : m_impl(impl)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode,Index> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TgtPacket)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (const int SrcPacketSize = internal::unpacket_traits<SrcPacket>::size ; SrcPacket src1 = m_impl . template packet<)",
    "insertText": "LoadMode(index)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (SrcPacket src2 = m_impl . template packet<)",
    "insertText": "LoadMode(index + SrcPacketSize)"
  },
  {
    "label": "TgtPacket()",
    "kind": "Method",
    "detail": "Function (TgtPacket result = internal::pcast<SrcPacket,)",
    "insertText": "TgtPacket(src1, src2)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (SrcPacket src3 = m_impl . template packet<)",
    "insertText": "LoadMode(index + 2 * SrcPacketSize)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (SrcPacket src4 = m_impl . template packet<)",
    "insertText": "LoadMode(index + 3 * SrcPacketSize)"
  },
  {
    "label": "TgtPacket()",
    "kind": "Method",
    "detail": "Function (TgtPacket result = internal::pcast<SrcPacket,)",
    "insertText": "TgtPacket(src1, src2, src3, src4)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (SrcPacket src2 = m_impl . template packet<)",
    "insertText": "LoadMode(index + 1 * SrcPacketSize)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (SrcPacket src5 = m_impl . template packet<)",
    "insertText": "LoadMode(index + 4 * SrcPacketSize)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (SrcPacket src6 = m_impl . template packet<)",
    "insertText": "LoadMode(index + 5 * SrcPacketSize)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (SrcPacket src7 = m_impl . template packet<)",
    "insertText": "LoadMode(index + 6 * SrcPacketSize)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (SrcPacket src8 = m_impl . template packet<)",
    "insertText": "LoadMode(index + 7 * SrcPacketSize)"
  },
  {
    "label": "TgtPacket()",
    "kind": "Method",
    "detail": "Function (TgtPacket result = internal::pcast<SrcPacket,)",
    "insertText": "TgtPacket(src1, src2, src3, src4, src5, src6, src7, src8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int SrcPacketSize = internal::unpacket_traits<SrcPacket>::size ;)",
    "insertText": "if(m_impl.data() && (index + SrcPacketSize < m_maxIndex))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { const int TgtPacketSize = internal::unpacket_traits<TgtPacket>::size ; typedef internal::unpacket_traits<SrcPacket>::type SrcType ; typedef internal::unpacket_traits<TgtPacket>::type TgtType ; internal::scalar_cast_op<SrcType,TgtType> converter ; EIGEN_ALIGN_MAX internal::unpacket_traits<TgtPacket>::type values [ TgtPacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < TgtPacketSize; ++i)"
  },
  {
    "label": "converter()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "converter(m_impl.coeff(index+i))"
  },
  {
    "label": "TgtPacket()",
    "kind": "Method",
    "detail": "Function (} TgtPacket rslt = internal::pload<)",
    "insertText": "TgtPacket(values)"
  },
  {
    "label": "expression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<XprType::Nested>::type&)",
    "insertText": "expression()"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; # ifdef EIGEN_USE_THREADS template<bool SameType,Eval,EvalPointerType,EvalSubExprsCallback> struct ConversionSubExprEvalAsync { EIGEN_STRONG_INLINE void)",
    "insertText": "run(Eval& impl, EvalPointerType, EvalSubExprsCallback done)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (impl .)",
    "insertText": "evalSubExprsIfNeededAsync(nullptr, std::move(done))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Eval,EvalPointerType,EvalSubExprsCallback> struct ConversionSubExprEvalAsync<true,Eval,EvalPointerType,EvalSubExprsCallback> { EIGEN_STRONG_INLINE void)",
    "insertText": "run(Eval& impl, EvalPointerType data, EvalSubExprsCallback done)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (impl .)",
    "insertText": "evalSubExprsIfNeededAsync(data, std::move(done))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; # endif namespace internal { template<SrcType,TargetType,bool IsSameT> struct CoeffConv { template<ArgType,Device> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TargetType)",
    "insertText": "run(const TensorEvaluator<ArgType, Device>& impl, Index index)"
  },
  {
    "label": "converter()",
    "kind": "Method",
    "detail": "Function (internal::scalar_cast_op<SrcType,TargetType> converter ; return)",
    "insertText": "converter(impl.coeff(index))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (internal::scalar_cast_op<SrcType,TargetType> converter ; EIGEN_ALIGN_MAX internal::remove_const<TargetType>::type values [ PacketSize ] ; EIGEN_UNROLL_LOOP)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "converter()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "converter(impl.coeff(index+i))"
  },
  {
    "label": "TargetPacket()",
    "kind": "Method",
    "detail": "Function (} TargetPacket rslt = internal::pload<)",
    "insertText": "TargetPacket(values)"
  },
  {
    "label": "converter()",
    "kind": "Method",
    "detail": "Function (const int SrcCoeffRatio = internal::type_casting_traits<SrcType,TargetType>::SrcCoeffRatio ; const int TgtCoeffRatio = internal::type_casting_traits<SrcType,TargetType>::TgtCoeffRatio ; PacketConverter<TensorEvaluator<ArgType,Device>,SrcPacket,TargetPacket,SrcCoeffRatio,TgtCoeffRatio>)",
    "insertText": "converter(impl)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<TargetType>::type values [ PacketSize ] ;)",
    "insertText": "for(int i = 0; i < PacketSize; ++i) values[i] = impl.coeff(index+i)"
  },
  {
    "label": "expr()",
    "kind": "Method",
    "detail": "Function (} } ; } template<TargetType,ArgType,Device> struct TensorEvaluator<const TensorConversionOp<TargetType,ArgType>,Device> { typedef TensorConversionOp<TargetType,ArgType> XprType ; typedef XprType::Index Index ; typedef TensorEvaluator<ArgType,Device>::Dimensions Dimensions ; typedef TargetType Scalar ; typedef TargetType CoeffReturnType ; typedef internal::remove_all<internal::traits<ArgType>::Scalar>::type SrcType ; typedef PacketType<CoeffReturnType,Device>::type PacketReturnType ; typedef PacketType<SrcType,Device>::type PacketSourceType ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; const bool IsSameType = internal::is_same<TargetType,SrcType>::value ; typedef StorageMemory<CoeffReturnType,Device> Storage ; typedef Storage::Type EvaluatorPointerType ; enum { IsAligned = false,PacketAccess = # ifndef EIGEN_USE_SYCL true,# else TensorEvaluator<ArgType,Device>::PacketAccess& internal::type_casting_traits<SrcType,TargetType>::VectorizedCast,# endif BlockAccess = TensorEvaluator<ArgType,Device>::BlockAccess,PreferBlockAccess = TensorEvaluator<ArgType,Device>::PreferBlockAccess,Layout = TensorEvaluator<ArgType,Device>::Layout,RawAccess = false } ; const int NumDims = internal::array_size<Dimensions>::value ; typedef internal::TensorBlockDescriptor<NumDims,Index> TensorBlockDesc ; typedef internal::TensorBlockScratchAllocator<Device> TensorBlockScratch ; typedef TensorEvaluator<const ArgType,Device>::TensorBlock ArgTensorBlock ; struct TensorConversionOpBlockFactory { template<ArgXprType> struct XprType { typedef TensorConversionOp<TargetType,const ArgXprType> type ; } ; template<ArgXprType> XprType<ArgXprType>::type)",
    "insertText": "expr(const ArgXprType& expr)"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} } ; typedef internal::TensorUnaryExprBlock<TensorConversionOpBlockFactory,ArgTensorBlock> TensorBlock ; EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvaluator(const XprType& op, const Device& device) : m_impl(op.expression(), device)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(EvaluatorPointerType data)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_USE_THREADS template<EvalSubExprsCallback> EIGEN_STRONG_INLINE void)",
    "insertText": "evalSubExprsIfNeededAsync(EvaluatorPointerType data, EvalSubExprsCallback done)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (ConversionSubExprEvalAsync<IsSameType,TensorEvaluator<ArgType,Device>,EvaluatorPointerType,EvalSubExprsCallback)",
    "insertText": "run(m_impl, data, std::move(done))"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_STRONG_INLINE void)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const bool Vectorizable = IsSameType ? TensorEvaluator<ArgType,Device>::PacketAccess :)",
    "insertText": "int(TensorEvaluator<ArgType, Device>::PacketAccess) & int(internal::type_casting_traits<SrcType, TargetType>::VectorizedCast)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "TargetType()",
    "kind": "Method",
    "detail": "Function (const double cast_cost = TensorOpCost::CastCost<SrcType,)",
    "insertText": "TargetType()"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (const double SrcCoeffRatio = internal::type_casting_traits<SrcType,TargetType>::SrcCoeffRatio ; const double TgtCoeffRatio = internal::type_casting_traits<SrcType,TargetType>::TgtCoeffRatio ; return m_impl .)",
    "insertText": "costPerCoeff(vectorized) * (SrcCoeffRatio / PacketSize) + TensorOpCost(0, 0, TgtCoeffRatio * (cast_cost / PacketSize))"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} else { return m_impl .)",
    "insertText": "costPerCoeff(vectorized) + TensorOpCost(0, 0, cast_cost)"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorBlock)",
    "insertText": "block(TensorBlockDesc& desc, TensorBlockScratch& scratch, bool = false)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  }
]