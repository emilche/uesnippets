[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSequencerTrackNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerTrackNode"
  },
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "FSelectionEventSuppressor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSelectionEventSuppressor"
  },
  {
    "label": "FSectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionModel"
  },
  {
    "label": "ISequencerEditToolDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditToolDragOperation"
  },
  {
    "label": "FHotspotSelectionManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHotspotSelectionManager"
  },
  {
    "label": "IMouseHandlerHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMouseHandlerHotspot"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKeyHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHotspot"
  },
  {
    "label": "FKeyBarHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyBarHotspot"
  },
  {
    "label": "FSectionHotspotBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionHotspotBase"
  },
  {
    "label": "FSectionHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionHotspot"
  },
  {
    "label": "FSectionResizeHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionResizeHotspot"
  },
  {
    "label": "EHandle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EHandle"
  },
  {
    "label": "FSectionEasingHandleHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionEasingHandleHotspot"
  },
  {
    "label": "FEasingAreaHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEasingAreaHandle"
  },
  {
    "label": "FSectionEasingAreaHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionEasingAreaHotspot"
  },
  {
    "label": "FHotspotSelectionManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Styling / SlateBrush . h \" # include \" SequencerSelectedKey . h \" # include \" MVVM / ViewModels / TrackAreaViewModel . h \" # include \" MVVM / Views / ITrackAreaHotspot . h \" # include \" Sequencer . h \" class FMenuBuilder ; class FSequencerTrackNode ; class ISequencerSection ; namespace UE { namespace Sequencer { struct FSelectionEventSuppressor ; class FSectionModel ; class ISequencerEditToolDragOperation ; struct FHotspotSelectionManager { const FPointerEvent* MouseEvent ; TSharedPtr<FSequencerSelection> Selection ; FSequencer* Sequencer ; TUniquePtr<FSelectionEventSuppressor> EventSuppressor ; bool bForceSelect ; bool bAddingToSelection ;)",
    "insertText": "FHotspotSelectionManager(const FPointerEvent* InMouseEvent, FSequencer* InSequencer)"
  },
  {
    "label": "FHotspotSelectionManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHotspotSelectionManager()"
  },
  {
    "label": "ConditionallyClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyClearSelection()"
  },
  {
    "label": "ToggleKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleKeys(TArrayView<const FSequencerSelectedKey> InKeys)"
  },
  {
    "label": "ToggleModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleModel(TSharedPtr<FViewModel> InModel)"
  },
  {
    "label": "DefaultModelSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefaultModelSelection(TSharedPtr<FViewModel> InModel)"
  },
  {
    "label": "SelectKeysExclusive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectKeysExclusive(TArrayView<const FSequencerSelectedKey> InKeys)"
  },
  {
    "label": "SelectModelExclusive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectModelExclusive(TSharedPtr<FViewModel> InModel)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (} ; struct IMouseHandlerHotspot {)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IMouseHandlerHotspot)"
  },
  {
    "label": "IMouseHandlerHotspot()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IMouseHandlerHotspot()"
  },
  {
    "label": "HandleMouseSelection()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleMouseSelection(FHotspotSelectionManager& SelectionManager)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (} ; enum class ESequencerEasingType { In,Out } ; struct FKeyHotspot : ITrackAreaHotspot,IMouseHandlerHotspot {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FKeyHotspot, ITrackAreaHotspot, IMouseHandlerHotspot)"
  },
  {
    "label": "FKeyHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyHotspot(const TArray<FSequencerSelectedKey>& InKeys, TWeakPtr<FSequencer> InWeakSequencer)"
  },
  {
    "label": "UpdateOnHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOnHover(FTrackAreaViewModel& InTrackArea)"
  },
  {
    "label": "GetDomain()",
    "kind": "Method",
    "detail": "Function (TOptional<ETimeDomain>)",
    "insertText": "GetDomain()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameNumber>)",
    "insertText": "GetTime()"
  },
  {
    "label": "PopulateContextMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateContextMenu(FMenuBuilder& MenuBuilder, TSharedPtr<FExtender> MenuExtender, FFrameTime MouseDownTime)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (TSet<FSequencerSelectedKey> Keys ; TSet<FKeyHandle> RawKeys ; TWeakPtr<FSequencer> WeakSequencer ; } ; struct FKeyBarHotspot : ITrackAreaHotspot,IMouseHandlerHotspot,TSharedFromThis<FKeyBarHotspot> {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FKeyBarHotspot, ITrackAreaHotspot, IMouseHandlerHotspot)"
  },
  {
    "label": "FKeyBarHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyBarHotspot(const TRange<FFrameTime>& InRange, TArray<FSequencerSelectedKey>&& InLeadingKeys, TArray<FSequencerSelectedKey>&& InTrailingKeys, TWeakPtr<FSequencer> InWeakSequencer) : LeadingKeys(MoveTemp(InLeadingKeys)) , TrailingKeys(MoveTemp(InTrailingKeys)) , WeakSequencer(InWeakSequencer) , Range(InRange)"
  },
  {
    "label": "InitiateDrag()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencerEditToolDragOperation>)",
    "insertText": "InitiateDrag(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "GetCursor()"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (TArray<FSequencerSelectedKey> LeadingKeys ; TArray<FSequencerSelectedKey> TrailingKeys ; TWeakPtr<FSequencer> WeakSequencer ; TRange<FFrameTime> Range ; } ; struct FSectionHotspotBase : ITrackAreaHotspot,IMouseHandlerHotspot {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FSectionHotspotBase, ITrackAreaHotspot, IMouseHandlerHotspot)"
  },
  {
    "label": "FSectionHotspotBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSectionHotspotBase(TWeakPtr<FSectionModel> InSectionModel, TWeakPtr<FSequencer> InWeakSequencer) : WeakSectionModel(InSectionModel) , WeakSequencer(InWeakSequencer)"
  },
  {
    "label": "GetOffsetTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "GetOffsetTime()"
  },
  {
    "label": "GetSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "GetSection()"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FSectionModel> WeakSectionModel ; TWeakPtr<FSequencer> WeakSequencer ; } ; struct FSectionHotspot : FSectionHotspotBase {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FSectionHotspot, FSectionHotspotBase)"
  },
  {
    "label": "FSectionHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSectionHotspot(TWeakPtr<FSectionModel> InSectionModel, TWeakPtr<FSequencer> InWeakSequencer) : FSectionHotspotBase(InSectionModel, InWeakSequencer)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (} ; struct FSectionResizeHotspot : FSectionHotspotBase {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FSectionResizeHotspot, FSectionHotspotBase)"
  },
  {
    "label": "FSectionResizeHotspot()",
    "kind": "Method",
    "detail": "Function (enum EHandle { Left,Right } ;)",
    "insertText": "FSectionResizeHotspot(EHandle InHandleType, TWeakPtr<FSectionModel> InSectionModel, TWeakPtr<FSequencer> InWeakSequencer) : FSectionHotspotBase(InSectionModel, InWeakSequencer) , HandleType(InHandleType)"
  },
  {
    "label": "GetCursorDecorator()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetCursorDecorator(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (EHandle HandleType ; } ; struct FSectionEasingHandleHotspot : FSectionHotspotBase {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FSectionEasingHandleHotspot, FSectionHotspotBase)"
  },
  {
    "label": "FSectionEasingHandleHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSectionEasingHandleHotspot(ESequencerEasingType InHandleType, TWeakPtr<FSectionModel> InSectionModel, TWeakPtr<FSequencer> InWeakSequencer) : FSectionHotspotBase(InSectionModel, InWeakSequencer) , HandleType(InHandleType)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (ESequencerEasingType HandleType ; } ; struct FEasingAreaHandle { TWeakPtr<FSectionModel> WeakSectionModel ; ESequencerEasingType EasingType ; } ; struct FSectionEasingAreaHotspot : FSectionHotspotBase {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FSectionEasingAreaHotspot, FSectionHotspotBase)"
  },
  {
    "label": "FSectionEasingAreaHotspot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSectionEasingAreaHotspot(const TArray<FEasingAreaHandle>& InEasings, TWeakPtr<FSectionModel> InSectionModel, TWeakPtr<FSequencer> InWeakSequencer) : FSectionHotspotBase(InSectionModel, InWeakSequencer) , Easings(InEasings)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(UMovieSceneSection* InSection)"
  }
]