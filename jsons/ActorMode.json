[
  {
    "label": "SCENEOUTLINER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCENEOUTLINER_API"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "EItemSortOrder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EItemSortOrder"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ISceneOutlinerMode . h \" # include \" WorldPartition / WorldPartitionHandle . h \" namespace SceneOutliner { struct FWeakActorSelector { bool)",
    "insertText": "operator()(const TWeakPtr<ISceneOutlinerTreeItem>& Item, TWeakObjectPtr<AActor>& DataOut)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FActorSelector { bool)",
    "insertText": "operator()(const TWeakPtr<ISceneOutlinerTreeItem>& Item, AActor*& ActorPtrOut)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator()(const TWeakPtr<ISceneOutlinerTreeItem>&Item, FWorldPartitionActorDesc * &ActorDescPtrOut)"
  },
  {
    "label": "FActorModeParams()",
    "kind": "Method",
    "detail": "Function (} ; } struct FActorModeParams {)",
    "insertText": "FActorModeParams()"
  },
  {
    "label": "FActorModeParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FActorModeParams(SSceneOutliner* InSceneOutliner, const TWeakObjectPtr<UWorld>& InSpecifiedWorldToDisplay = nullptr, bool bInHideComponents = true, bool bInHideLevelInstanceHierarchy = true, bool bInHideUnloadedActors = true, bool bInHideEmptyFolders = true, bool bInCanInteractWithSelectableActorsOnly = true, bool binSearchComponentsByActorName = false) : SpecifiedWorldToDisplay(InSpecifiedWorldToDisplay) , SceneOutliner(InSceneOutliner) , bHideComponents(bInHideComponents) , bHideLevelInstanceHierarchy(bInHideLevelInstanceHierarchy) , bHideUnloadedActors(bInHideUnloadedActors) , bHideEmptyFolders(bInHideEmptyFolders) , bCanInteractWithSelectableActorsOnly(bInCanInteractWithSelectableActorsOnly) , bSearchComponentsByActorName(binSearchComponentsByActorName)"
  },
  {
    "label": "FActorMode()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UWorld> SpecifiedWorldToDisplay = nullptr ; SSceneOutliner* SceneOutliner = nullptr ; bool bHideComponents = true ; bool bHideActorWithNoComponent = false ; bool bHideLevelInstanceHierarchy = true ; bool bHideUnloadedActors = true ; bool bHideEmptyFolders = true ; bool bCanInteractWithSelectableActorsOnly = true ; bool bShouldUpdateContentWhileInPIEFocused = false ; bool bSearchComponentsByActorName = false ; } ; class FActorMode : public ISceneOutlinerMode { public : struct EItemSortOrder { enum Type { World = 0,Level = 1 0,Folder = 2 0,Actor = 3 0 } ; } ;)",
    "insertText": "FActorMode(const FActorModeParams& Params)"
  },
  {
    "label": "FActorMode()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FActorMode()"
  },
  {
    "label": "Rebuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rebuild()"
  },
  {
    "label": "BuildWorldPickerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildWorldPickerMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "SynchronizeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeSelection()"
  },
  {
    "label": "SynchronizeActorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeActorSelection()"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "GetTypeSortPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTypeSortPriority(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "IsActorDisplayable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorDisplayable(const SSceneOutliner* SceneOutliner, const AActor* Actor, bool bShowLevelInstanceContent = false)"
  },
  {
    "label": "IsActorLevelDisplayable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorLevelDisplayable(ULevel* InLevel)"
  },
  {
    "label": "GetRootObject()",
    "kind": "Method",
    "detail": "Function (FFolder::FRootObject)",
    "insertText": "GetRootObject()"
  },
  {
    "label": "GetPasteTargetRootObject()",
    "kind": "Method",
    "detail": "Function (FFolder::FRootObject)",
    "insertText": "GetPasteTargetRootObject()"
  },
  {
    "label": "CanInteract()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInteract(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "CanPopulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPopulate()"
  },
  {
    "label": "CreateDragDropOperation()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDragDropOperation>)",
    "insertText": "CreateDragDropOperation(const FPointerEvent& MouseEvent, const TArray<FSceneOutlinerTreeItemPtr>& InTreeItems)"
  },
  {
    "label": "ParseDragDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseDragDrop(FSceneOutlinerDragDropPayload& OutPayload, const FDragDropOperation& Operation)"
  },
  {
    "label": "ValidateDrop()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerDragValidationInfo)",
    "insertText": "ValidateDrop(const ISceneOutlinerTreeItem& DropTarget, const FSceneOutlinerDragDropPayload& Payload)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrop(ISceneOutlinerTreeItem& DropTarget, const FSceneOutlinerDragDropPayload& Payload, const FSceneOutlinerDragValidationInfo& ValidationInfo)"
  },
  {
    "label": "OnSelectWorld()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnSelectWorld(TWeakObjectPtr<UWorld> World)"
  },
  {
    "label": "ChooseRepresentingWorld()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ChooseRepresentingWorld()"
  },
  {
    "label": "IsWorldChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWorldChecked(TWeakObjectPtr<UWorld> World)"
  },
  {
    "label": "GetFolderNamesFromPayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFolderNamesFromPayload(const FSceneOutlinerDragDropPayload& InPayload, TArray<FName>& OutFolders, FFolder::FRootObject& OutCommonRootObject)"
  },
  {
    "label": "IsActorDisplayable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorDisplayable(const AActor* InActor)"
  },
  {
    "label": "SetAsMostRecentOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsMostRecentOutliner()"
  },
  {
    "label": "CreateHierarchy()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISceneOutlinerHierarchy>)",
    "insertText": "CreateHierarchy()"
  },
  {
    "label": "OnActorsAttached()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorsAttached(AActor* ParentActor, TArray<TWeakObjectPtr<AActor>> ChildActors)"
  },
  {
    "label": "GetWorldDefaultRootFolder()",
    "kind": "Method",
    "detail": "Function (} FFolder)",
    "insertText": "GetWorldDefaultRootFolder()"
  }
]