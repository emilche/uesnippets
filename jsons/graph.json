[
  {
    "label": "GraphBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphBase"
  },
  {
    "label": "Graph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Graph"
  },
  {
    "label": "NodeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeEntry"
  },
  {
    "label": "EdgeEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EdgeEntry"
  },
  {
    "label": "NodeItr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeItr"
  },
  {
    "label": "EdgeItr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EdgeItr"
  },
  {
    "label": "NodeIdSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeIdSet"
  },
  {
    "label": "EdgeIdSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EdgeIdSet"
  },
  {
    "label": "AdjEdgeIdSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdjEdgeIdSet"
  },
  {
    "label": "invalidNodeId()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_PBQP_GRAPH_H # define LLVM_CODEGEN_PBQP_GRAPH_H # include \" llvm / ADT / ilist . h \" # include \" llvm / ADT / ilist_node . h \" # include \" llvm / Support / Debug . h \" # include<list> # include<map> # include<set> # include<vector> namespace llvm { namespace PBQP { class GraphBase { public : typedef unsigned NodeId ; typedef unsigned EdgeId ; NodeId)",
    "insertText": "invalidNodeId()"
  },
  {
    "label": "invalidEdgeId()",
    "kind": "Method",
    "detail": "Function (} EdgeId)",
    "insertText": "invalidEdgeId()"
  },
  {
    "label": "getInvalidAdjEdgeIdx()",
    "kind": "Method",
    "detail": "Function (} } ; template<SolverT> class Graph : public GraphBase { private : typedef SolverT::CostAllocator CostAllocator ; public : typedef SolverT::RawVector RawVector ; typedef SolverT::RawMatrix RawMatrix ; typedef SolverT::Vector Vector ; typedef SolverT::Matrix Matrix ; typedef CostAllocator::VectorPtr VectorPtr ; typedef CostAllocator::MatrixPtr MatrixPtr ; typedef SolverT::NodeMetadata NodeMetadata ; typedef SolverT::EdgeMetadata EdgeMetadata ; typedef SolverT::GraphMetadata GraphMetadata ; private : class NodeEntry { public : typedef std::vector<EdgeId> AdjEdgeList ; typedef AdjEdgeList::size_type AdjEdgeIdx ; typedef AdjEdgeList::const_iterator AdjEdgeItr ; AdjEdgeIdx)",
    "insertText": "getInvalidAdjEdgeIdx()"
  },
  {
    "label": "NodeEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeEntry(VectorPtr Costs) : Costs(Costs)"
  },
  {
    "label": "addAdjEdgeId()",
    "kind": "Method",
    "detail": "Function (} AdjEdgeIdx)",
    "insertText": "addAdjEdgeId(EdgeId EId)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (AdjEdgeIdx Idx = AdjEdgeIds .)",
    "insertText": "size()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (AdjEdgeIds .)",
    "insertText": "push_back(EId)"
  },
  {
    "label": "getEdge()",
    "kind": "Method",
    "detail": "Function (G .)",
    "insertText": "getEdge(AdjEdgeIds.back()).setAdjEdgeIdx(ThisNId, Idx)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (AdjEdgeIds [ Idx ] = AdjEdgeIds .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (AdjEdgeIds .)",
    "insertText": "pop_back()"
  },
  {
    "label": "getAdjEdgeIds()",
    "kind": "Method",
    "detail": "Function (} const AdjEdgeList&)",
    "insertText": "getAdjEdgeIds()"
  },
  {
    "label": "invalidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "invalidate()"
  },
  {
    "label": "connectToN()",
    "kind": "Method",
    "detail": "Function (Costs = nullptr ; } void)",
    "insertText": "connectToN(Graph &G, EdgeId ThisEdgeId, unsigned NIdx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ThisEdgeAdjIdxs[NIdx] == NodeEntry::getInvalidAdjEdgeIdx() && \"Edge already connected to NIds[NIdx].\")"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (NodeEntry& N = G .)",
    "insertText": "getNode(NIds[NIdx])"
  },
  {
    "label": "addAdjEdgeId()",
    "kind": "Method",
    "detail": "Function (ThisEdgeAdjIdxs [ NIdx ] = N .)",
    "insertText": "addAdjEdgeId(ThisEdgeId)"
  },
  {
    "label": "connectTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "connectTo(Graph &G, EdgeId ThisEdgeId, NodeId NId)"
  },
  {
    "label": "connectToN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "connectToN(G, ThisEdgeId, 1)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "connect(Graph &G, EdgeId ThisEdgeId)"
  },
  {
    "label": "connectToN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "connectToN(G, ThisEdgeId, 0)"
  },
  {
    "label": "setAdjEdgeIdx()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAdjEdgeIdx(NodeId NId, typename NodeEntry::AdjEdgeIdx NewIdx)"
  },
  {
    "label": "disconnectFromN()",
    "kind": "Method",
    "detail": "Function (ThisEdgeAdjIdxs [ 1 ] = NewIdx ; } } void)",
    "insertText": "disconnectFromN(Graph &G, unsigned NIdx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ThisEdgeAdjIdxs[NIdx] != NodeEntry::getInvalidAdjEdgeIdx() && \"Edge not connected to NIds[NIdx].\")"
  },
  {
    "label": "removeAdjEdgeId()",
    "kind": "Method",
    "detail": "Function (N .)",
    "insertText": "removeAdjEdgeId(G, NIds[NIdx], ThisEdgeAdjIdxs[NIdx])"
  },
  {
    "label": "disconnectFrom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "disconnectFrom(Graph &G, NodeId NId)"
  },
  {
    "label": "disconnectFromN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "disconnectFromN(G, 1)"
  },
  {
    "label": "getN1Id()",
    "kind": "Method",
    "detail": "Function (} } NodeId)",
    "insertText": "getN1Id()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NId < Nodes.size() && \"Out of bound NodeId\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NodeId NId = 0 ;)",
    "insertText": "if(!FreeNodeIds.empty())"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Nodes [ NId ] =)",
    "insertText": "move(N)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "push_back(std::move(N))"
  },
  {
    "label": "addConstructedEdge()",
    "kind": "Method",
    "detail": "Function (} return NId ; } EdgeId)",
    "insertText": "addConstructedEdge(EdgeEntry E)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(findEdge(E.getN1Id(), E.getN2Id()) == invalidEdgeId() && \"Attempt to add duplicate edge.\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EdgeId EId = 0 ;)",
    "insertText": "if(!FreeEdgeIds.empty())"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Edges [ EId ] =)",
    "insertText": "move(E)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (Edges .)",
    "insertText": "push_back(std::move(E))"
  },
  {
    "label": "getEdge()",
    "kind": "Method",
    "detail": "Function (} EdgeEntry& NE =)",
    "insertText": "getEdge(EId)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (NE .)",
    "insertText": "connect(*this, EId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const Graph &Other)"
  },
  {
    "label": "NodeItr()",
    "kind": "Method",
    "detail": "Function (} public : typedef NodeEntry::AdjEdgeItr AdjEdgeItr ; class NodeItr { public : typedef std::forward_iterator_tag iterator_category ; typedef NodeId value_type ; typedef int difference_type ; typedef NodeId* pointer ; typedef NodeId& reference ;)",
    "insertText": "NodeItr(NodeId CurNId, const Graph &G) : CurNId(CurNId), EndNId(G.Nodes.size()), FreeNodeIds(G.FreeNodeIds)"
  },
  {
    "label": "findNextInUse()",
    "kind": "Method",
    "detail": "Function (this -> CurNId =)",
    "insertText": "findNextInUse(CurNId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const NodeItr &O)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} NodeItr&)",
    "insertText": "operator()"
  },
  {
    "label": "findNextInUse()",
    "kind": "Method",
    "detail": "Function (CurNId =)",
    "insertText": "findNextInUse(++CurNId)"
  },
  {
    "label": "EdgeItr()",
    "kind": "Method",
    "detail": "Function (+ + NId ; } return NId ; } NodeId CurNId,EndNId ; const FreeNodeVector& FreeNodeIds ; } ; class EdgeItr { public :)",
    "insertText": "EdgeItr(EdgeId CurEId, const Graph &G) : CurEId(CurEId), EndEId(G.Edges.size()), FreeEdgeIds(G.FreeEdgeIds)"
  },
  {
    "label": "findNextInUse()",
    "kind": "Method",
    "detail": "Function (this -> CurEId =)",
    "insertText": "findNextInUse(CurEId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const EdgeItr &O)"
  },
  {
    "label": "findNextInUse()",
    "kind": "Method",
    "detail": "Function (CurEId =)",
    "insertText": "findNextInUse(++CurEId)"
  },
  {
    "label": "NodeIdSet()",
    "kind": "Method",
    "detail": "Function (+ + EId ; } return EId ; } EdgeId CurEId,EndEId ; const FreeEdgeVector& FreeEdgeIds ; } ; class NodeIdSet { public :)",
    "insertText": "NodeIdSet(const Graph &G) : G(G)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} NodeItr)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} NodeItr)",
    "insertText": "end()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "EdgeIdSet()",
    "kind": "Method",
    "detail": "Function (} private : const Graph& G ; } ; class EdgeIdSet { public :)",
    "insertText": "EdgeIdSet(const Graph &G) : G(G)"
  },
  {
    "label": "AdjEdgeIdSet()",
    "kind": "Method",
    "detail": "Function (} private : const Graph& G ; } ; class AdjEdgeIdSet { public :)",
    "insertText": "AdjEdgeIdSet(const NodeEntry &NE) : NE(NE)"
  },
  {
    "label": "Graph()",
    "kind": "Method",
    "detail": "Function (} private : const NodeEntry& NE ; } ;)",
    "insertText": "Graph() : Solver(nullptr)"
  },
  {
    "label": "Graph()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Graph(GraphMetadata Metadata) : Metadata(Metadata), Solver(nullptr)"
  },
  {
    "label": "getMetadata()",
    "kind": "Method",
    "detail": "Function (} GraphMetadata&)",
    "insertText": "getMetadata()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Solver && \"Solver already set. Call unsetSolver().\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Solver =& S ;)",
    "insertText": "for(auto NId : nodeIds()) Solver->handleAddNode(NId)"
  },
  {
    "label": "unsetSolver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "unsetSolver()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Solver && \"Solver not set.\")"
  },
  {
    "label": "addNode()",
    "kind": "Method",
    "detail": "Function (Solver = nullptr ; } template<OtherVectorT> NodeId)",
    "insertText": "addNode(OtherVectorT Costs)"
  },
  {
    "label": "getVector()",
    "kind": "Method",
    "detail": "Function (VectorPtr AllocatedCosts = CostAlloc .)",
    "insertText": "getVector(std::move(Costs))"
  },
  {
    "label": "addConstructedNode()",
    "kind": "Method",
    "detail": "Function (NodeId NId =)",
    "insertText": "addConstructedNode(NodeEntry(AllocatedCosts))"
  },
  {
    "label": "addConstructedNode()",
    "kind": "Method",
    "detail": "Function (NodeId NId =)",
    "insertText": "addConstructedNode(NodeEntry(Costs))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getNodeCosts(N1Id).getLength() == Costs.getRows() && getNodeCosts(N2Id).getLength() == Costs.getCols() && \"Matrix dimensions mismatch.\")"
  },
  {
    "label": "getMatrix()",
    "kind": "Method",
    "detail": "Function (MatrixPtr AllocatedCosts = CostAlloc .)",
    "insertText": "getMatrix(std::move(Costs))"
  },
  {
    "label": "addConstructedEdge()",
    "kind": "Method",
    "detail": "Function (EdgeId EId =)",
    "insertText": "addConstructedEdge(EdgeEntry(N1Id, N2Id, AllocatedCosts))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getNodeCosts(N1Id).getLength() == Costs->getRows() && getNodeCosts(N2Id).getLength() == Costs->getCols() && \"Matrix dimensions mismatch.\")"
  },
  {
    "label": "addConstructedEdge()",
    "kind": "Method",
    "detail": "Function (EdgeId EId =)",
    "insertText": "addConstructedEdge(EdgeEntry(N1Id, N2Id, Costs))"
  },
  {
    "label": "nodeIds()",
    "kind": "Method",
    "detail": "Function (} NodeIdSet)",
    "insertText": "nodeIds()"
  },
  {
    "label": "edgeIds()",
    "kind": "Method",
    "detail": "Function (} EdgeIdSet)",
    "insertText": "edgeIds()"
  },
  {
    "label": "adjEdgeIds()",
    "kind": "Method",
    "detail": "Function (} AdjEdgeIdSet)",
    "insertText": "adjEdgeIds(NodeId NId)"
  },
  {
    "label": "getNumNodes()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumNodes()"
  },
  {
    "label": "getNumEdges()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumEdges()"
  },
  {
    "label": "setNodeCosts()",
    "kind": "Method",
    "detail": "Function (} template<OtherVectorT> void)",
    "insertText": "setNodeCosts(NodeId NId, OtherVectorT Costs)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNode(NId)"
  },
  {
    "label": "getNodeCostsPtr()",
    "kind": "Method",
    "detail": "Function (} const VectorPtr&)",
    "insertText": "getNodeCostsPtr(NodeId NId)"
  },
  {
    "label": "getNodeCosts()",
    "kind": "Method",
    "detail": "Function (} const Vector&)",
    "insertText": "getNodeCosts(NodeId NId)"
  },
  {
    "label": "getNodeMetadata()",
    "kind": "Method",
    "detail": "Function (} NodeMetadata&)",
    "insertText": "getNodeMetadata(NodeId NId)"
  },
  {
    "label": "getNodeDegree()",
    "kind": "Method",
    "detail": "Function (} NodeEntry::AdjEdgeList::size_type)",
    "insertText": "getNodeDegree(NodeId NId)"
  },
  {
    "label": "updateEdgeCosts()",
    "kind": "Method",
    "detail": "Function (} template<OtherMatrixT> void)",
    "insertText": "updateEdgeCosts(EdgeId EId, OtherMatrixT Costs)"
  },
  {
    "label": "getEdgeCostsPtr()",
    "kind": "Method",
    "detail": "Function (} const MatrixPtr&)",
    "insertText": "getEdgeCostsPtr(EdgeId EId)"
  },
  {
    "label": "getEdgeCosts()",
    "kind": "Method",
    "detail": "Function (} const Matrix&)",
    "insertText": "getEdgeCosts(EdgeId EId)"
  },
  {
    "label": "getEdgeMetadata()",
    "kind": "Method",
    "detail": "Function (} EdgeMetadata&)",
    "insertText": "getEdgeMetadata(EdgeId EId)"
  },
  {
    "label": "getEdgeNode1Id()",
    "kind": "Method",
    "detail": "Function (} NodeId)",
    "insertText": "getEdgeNode1Id(EdgeId EId)"
  },
  {
    "label": "getEdgeNode2Id()",
    "kind": "Method",
    "detail": "Function (} NodeId)",
    "insertText": "getEdgeNode2Id(EdgeId EId)"
  },
  {
    "label": "getEdgeOtherNodeId()",
    "kind": "Method",
    "detail": "Function (} NodeId)",
    "insertText": "getEdgeOtherNodeId(EdgeId EId, NodeId NId)"
  },
  {
    "label": "findEdge()",
    "kind": "Method",
    "detail": "Function (} EdgeId)",
    "insertText": "findEdge(NodeId N1Id, NodeId N2Id)"
  },
  {
    "label": "removeNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeNode(NodeId NId)"
  },
  {
    "label": "removeEdge()",
    "kind": "Method",
    "detail": "Function (EdgeId EId =* AEItr ; + + AEItr ;)",
    "insertText": "removeEdge(EId)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} FreeNodeIds .)",
    "insertText": "push_back(NId)"
  },
  {
    "label": "disconnectEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "disconnectEdge(EdgeId EId, NodeId NId)"
  },
  {
    "label": "disconnectFrom()",
    "kind": "Method",
    "detail": "Function (E .)",
    "insertText": "disconnectFrom(*this, NId)"
  },
  {
    "label": "disconnectAllNeighborsFromNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "disconnectAllNeighborsFromNode(NodeId NId)"
  },
  {
    "label": "reconnectEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reconnectEdge(EdgeId EId, NodeId NId)"
  },
  {
    "label": "connectTo()",
    "kind": "Method",
    "detail": "Function (E .)",
    "insertText": "connectTo(*this, EId, NId)"
  },
  {
    "label": "removeEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeEdge(EdgeId EId)"
  },
  {
    "label": "disconnect()",
    "kind": "Method",
    "detail": "Function (E .)",
    "insertText": "disconnect()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  }
]