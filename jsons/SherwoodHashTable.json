[
  {
    "label": "TSherwoodHashKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSherwoodHashKeyFuncs"
  },
  {
    "label": "TSherwoodHashTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSherwoodHashTable"
  },
  {
    "label": "FData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FData"
  },
  {
    "label": "TSherwoodMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSherwoodMap"
  },
  {
    "label": "TSherwoodSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSherwoodSet"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / UnrealTemplate . h \" namespace Experimental { template<KeyType,ValueType> struct TSherwoodHashKeyFuncs { typedef TTypeTraits<KeyType>::ConstPointerType KeyInitType ; bool)",
    "insertText": "Matches(KeyInitType A, KeyInitType B)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; namespace TSherwoodHashTable_Private { template<KeyType,ValueType,KeyFuncs = TSherwoodHashKeyFuncs<KeyType,ValueType>> struct TSherwoodHashTable { using HashType = uint32 ; bool bIsMap = ! std::is_same_v<ValueType,FNoopStruct> ; uint32 MinNumLookups = 4 ; uint32 MinNumSlots = 4 ; float MaxLoadFactor = 0 . 9 f ;)",
    "insertText": "static_assert(MaxLoadFactor >= 0.5 && MaxLoadFactor <= 0.9, \"MaxLoadFactor must be in range [0.5 .. 0.9]\")"
  },
  {
    "label": "TSherwoodHashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSherwoodHashTable()"
  },
  {
    "label": "TSherwoodHashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSherwoodHashTable(const TSherwoodHashTable&)"
  },
  {
    "label": "TSherwoodHashTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSherwoodHashTable(TSherwoodHashTable&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSherwoodHashTable&)",
    "insertText": "operator(const TSherwoodHashTable&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSherwoodHashTable&)",
    "insertText": "operator(TSherwoodHashTable&&)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "AllocateUninitialized()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "AllocateUninitialized(uint32 Count)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Deallocate(void* Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "HasValue()",
    "kind": "Method",
    "detail": "Function (} struct FData { bool)",
    "insertText": "HasValue(uint32 i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Keys [ i ] = InKey ;)",
    "insertText": "if(bIsMap)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Values [ i ] = InValue ; } Distances [ i ] = InDistance ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(Data.Distances)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(Data.Keys)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(Data.Values)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reset()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(CurrentData.Distances, uint8(-1), CurrentData.AllocatedCount)"
  },
  {
    "label": "DeallocateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateData(CurrentData)"
  },
  {
    "label": "FData()",
    "kind": "Method",
    "detail": "Function (CurrentData =)",
    "insertText": "FData()"
  },
  {
    "label": "NumSlots()",
    "kind": "Method",
    "detail": "Function (NumSlotsMinusOne = 0 ; MaxLookups = 0 ; NumElements = 0 ; } uint32)",
    "insertText": "NumSlots()"
  },
  {
    "label": "Desired()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Desired(32-FMath::CountLeadingZeros(InNumSlots))"
  },
  {
    "label": "AllocateData()",
    "kind": "Method",
    "detail": "Function (} FData)",
    "insertText": "AllocateData(uint32 Count)"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (FData Result ; Result . AllocatedCount = Count ; Result . Distances = AllocateUninitialized<)",
    "insertText": "int8(Count)"
  },
  {
    "label": "KeyType()",
    "kind": "Method",
    "detail": "Function (Result . Keys = AllocateUninitialized<)",
    "insertText": "KeyType(Count)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (Result . Values = AllocateUninitialized<)",
    "insertText": "ValueType(Count)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Memset(Result.Distances, uint8(-1), Count)"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (int8 Distance = 0 ; uint32 Cursor =)",
    "insertText": "GetKeyHash(Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const KeyType& KeyAtCursor = CurrentData . Keys [ Cursor ] ;)",
    "insertText": "if(KeyFuncs::Matches(Key, KeyAtCursor))"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} } } return TTuple<const KeyType*,)",
    "insertText": "ValueType(nullptr, nullptr)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} ValueType*)",
    "insertText": "FindOrAdd(KeyType Key, ValueType Value, bool* bIsAlreadyInContainerPtr = nullptr)"
  },
  {
    "label": "FindOrAddByHash()",
    "kind": "Method",
    "detail": "Function (} ValueType*)",
    "insertText": "FindOrAddByHash(KeyType Key, HashType Hash, ValueType Value, bool* bIsAlreadyInContainerPtr = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 Cursor = Hash& NumSlotsMinusOne ; int8 Distance = 0 ;)",
    "insertText": "if(CurrentData.IsValid())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* bIsAlreadyInContainerPtr = true ; } return bIsMap ?& CurrentData . Values [ Cursor ] : nullptr ; } } })",
    "insertText": "if(bIsAlreadyInContainerPtr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (* bIsAlreadyInContainerPtr = false ; } return)",
    "insertText": "Add(Distance, CurrentData, Cursor, Key, Hash, Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE ValueType*)",
    "insertText": "Add(int8 Distance, FData& Data, uint32 Cursor, KeyType Key, HashType Hash, ValueType Value)"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grow()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Data.IsEmpty(Cursor))"
  },
  {
    "label": "AddAt()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "AddAt(Cursor, Distance, Key, Value)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (+ + NumElements ; return bIsMap ?& Data . Values [ Cursor ] : nullptr ; })",
    "insertText": "Swap(Distance, Data.Distances[Cursor])"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Key, Data.Keys[Cursor])"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Value, Data.Values[Cursor])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} const uint32 ResultCursor = Cursor ; + + Distance ; + + Cursor ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "bIsMap()",
    "kind": "Method",
    "detail": "Function (+ + NumElements ; return)",
    "insertText": "bIsMap(Data.Values[ResultCursor])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Data.Distances[Cursor] < Distance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + Distance ; } else { + + Distance ;)",
    "insertText": "if(Distance == MaxLookups)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Key, Data.Keys[ResultCursor])"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Value, Data.Values[ResultCursor])"
  },
  {
    "label": "Rehash()",
    "kind": "Method",
    "detail": "Function (} } + + Cursor ; } } void)",
    "insertText": "Rehash(uint32 DesiredNumSlots)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (DesiredNumSlots =)",
    "insertText": "Max(DesiredNumSlots, uint32(FMath::CeilToInt(float(NumElements) / MaxLoadFactor)))"
  },
  {
    "label": "AllocateData()",
    "kind": "Method",
    "detail": "Function (FData OldData = CurrentData ; const uint32 OldNumSlotsMinusOne = NumSlotsMinusOne ; const uint32 OldMaxLookups = MaxLookups ; CurrentData =)",
    "insertText": "AllocateData(DesiredNumSlots + NewMaxLookups)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NumSlotsMinusOne = DesiredNumSlots - 1 ; MaxLookups = NewMaxLookups ; NumElements = 0 ;)",
    "insertText": "for(uint32 Index = 0, End = OldNumSlotsMinusOne + OldMaxLookups; Index != End; ++Index)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindOrAdd(OldData.Keys[Index], OldData.Values[Index])"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "FindOrAdd(OldData.Keys[Index], ValueType{})"
  },
  {
    "label": "DeallocateData()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "DeallocateData(OldData)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 NextNumSlots = FMath::Max<)",
    "insertText": "uint32(MinNumSlots, 2u * NumSlots())"
  },
  {
    "label": "Rehash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rehash(NextNumSlots)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(uint32 DesiredNumElements)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 DesiredNumSlots = FMath::Max<)",
    "insertText": "uint32(DesiredNumElements, uint32(FMath::CeilToInt(float(DesiredNumElements) / MaxLoadFactor)))"
  },
  {
    "label": "Rehash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rehash(DesiredNumSlots)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<KeyType,ValueType,KeyFuncs = TSherwoodHashKeyFuncs<KeyType,ValueType>> struct TSherwoodMap { ValueType&)",
    "insertText": "FindOrAdd(KeyType Key, ValueType Value)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ValueType*)",
    "insertText": "Find(KeyType Key)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Table .)",
    "insertText": "Reserve(DesiredNumElements)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} private : TSherwoodHashTable_Private::TSherwoodHashTable<KeyType,ValueType,KeyFuncs> Table ; } ; template<KeyType,KeyFuncs = TSherwoodHashKeyFuncs<KeyType,FNoopStruct>> struct TSherwoodSet { void)",
    "insertText": "Add(KeyType Key, bool* bIsAlreadyInSetPtr = nullptr)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (Table .)",
    "insertText": "FindOrAdd(Key, FNoopStruct{}, bIsAlreadyInSetPtr)"
  }
]