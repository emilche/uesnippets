[
  {
    "label": "FRDGBufferUAV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBufferUAV"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSystem"
  },
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScope"
  },
  {
    "label": "FReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReader"
  },
  {
    "label": "FHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHandler"
  },
  {
    "label": "TLambdaHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLambdaHandler"
  },
  {
    "label": "GPU_MESSAGE_SCOPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_3 # include \" RenderGraphBuilder . h \" # endif # include \" RenderGraphDefinitions . h \" # include \" ShaderParameterMacros . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" class FRDGBufferUAV ; class FRDGBuilder ; # define)",
    "insertText": "GPU_MESSAGE_SCOPE(GraphBuilder) GPUMessage::FScope GPUMessageScope_(GraphBuilder)"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (namespace GPUMessage { class FSocket ; class FSystem ; class FScope { public :)",
    "insertText": "FScope(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScope()"
  },
  {
    "label": "FSocket()",
    "kind": "Method",
    "detail": "Function (private : FRDGBuilder& GraphBuilder ; bool bRecursionCheck ; } ; using FMessageId = TRDGHandle<FSocket,uint32> ; class FSocket { public :)",
    "insertText": "FSocket()"
  },
  {
    "label": "FSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSocket(FSocket&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSocket&)",
    "insertText": "operator(FSocket&& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetMessageId()",
    "kind": "Method",
    "detail": "Function (} const FMessageId)",
    "insertText": "GetMessageId()"
  },
  {
    "label": "FSocket()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSocket(FMessageId InMessageId) : MessageId(InMessageId)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (} FMessageId MessageId ; FSystem ; } ; class FReader { public : const FMessageId MessageId ; template<DataType> DataType)",
    "insertText": "Read(const DataType& DefaultValue = {})"
  },
  {
    "label": "Payload()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<uint32>)",
    "insertText": "Payload(PayloadData, PayloadSize)"
  },
  {
    "label": "MidInline()",
    "kind": "Method",
    "detail": "Function (Payload .)",
    "insertText": "MidInline(ReadOffset, Count)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (ReadOffset + = Payload .)",
    "insertText": "Num()"
  },
  {
    "label": "FHandler()",
    "kind": "Method",
    "detail": "Function (} const uint32 PayloadSize ; const uint32* PayloadData ; uint32 ReadOffset = 0 ; FSystem ; } ; class FHandler { public :)",
    "insertText": "FHandler(const TCHAR* InName) : Name(InName)"
  },
  {
    "label": "FHandler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FHandler()"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(FReader Message)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "Lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambda(Message)"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (} private : LambdaType Lambda ; } ; FSocket)",
    "insertText": "RegisterHandler(const TSharedPtr<FHandler>& Handler)"
  },
  {
    "label": "RegisterHandler()",
    "kind": "Method",
    "detail": "Function (template<LambdaType> FSocket)",
    "insertText": "RegisterHandler(const TCHAR* MessageDebugId, LambdaType&& Lambda)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, RENDERCORE_API) SHADER_PARAMETER_RDG_BUFFER_UAV(RWStructuredBuffer<uint>, GPUMessageDataBuffer) SHADER_PARAMETER(uint32, GPUMessageDataBufferSize) END_SHADER_PARAMETER_STRUCT() extern RENDERCORE_API FParameters GetShaderParameters(FRDGBuilder& GraphBuilder)"
  }
]