[
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "SDragAndDropVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDragAndDropVerticalBox"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "ALandscapeBlueprintBrushBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALandscapeBlueprintBrushBase"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FLandscapeEditorDetailCustomization_Layers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditorDetailCustomization_Layers"
  },
  {
    "label": "FLandscapeEditorCustomNodeBuilder_Layers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditorCustomNodeBuilder_Layers"
  },
  {
    "label": "FEdModeLandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdModeLandscape"
  },
  {
    "label": "FLandscapeListElementDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeListElementDragDropOp"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" LandscapeEditorDetailCustomization_Base . h \" # include \" LandscapeEdMode . h \" # include \" LandscapeEditLayer . h \" # include \" Layout / Visibility . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateBrush . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SBorder . h \" # include \" IDetailCustomNodeBuilder . h \" # include \" IDetailCustomization . h \" # include \" AssetThumbnail . h \" # include \" Framework / SlateDelegates . h \" class FDetailWidgetRow ; class IDetailChildrenBuilder ; class IDetailLayoutBuilder ; class SDragAndDropVerticalBox ; class SInlineEditableTextBlock ; class ALandscapeBlueprintBrushBase ; class ULandscapeLayerInfoObject ; class FMenuBuilder ; class FLandscapeEditorDetailCustomization_Layers : public FLandscapeEditorDetailCustomization_Base { public : TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "CustomizeDetails()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizeDetails(IDetailLayoutBuilder& DetailBuilder)"
  },
  {
    "label": "ShouldShowLayersErrorMessageTip()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "ShouldShowLayersErrorMessageTip()"
  },
  {
    "label": "GetLayersErrorMessageText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLayersErrorMessageText()"
  },
  {
    "label": "FLandscapeEditorCustomNodeBuilder_Layers()",
    "kind": "Method",
    "detail": "Function (} ; class FLandscapeEditorCustomNodeBuilder_Layers : public IDetailCustomNodeBuilder,public TSharedFromThis<FLandscapeEditorCustomNodeBuilder_Layers> { public :)",
    "insertText": "FLandscapeEditorCustomNodeBuilder_Layers(TSharedRef<FAssetThumbnailPool> ThumbnailPool)"
  },
  {
    "label": "FLandscapeEditorCustomNodeBuilder_Layers()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeEditorCustomNodeBuilder_Layers()"
  },
  {
    "label": "SetOnRebuildChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnRebuildChildren(FSimpleDelegate InOnRegenerateChildren)"
  },
  {
    "label": "GenerateHeaderRowContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHeaderRowContent(FDetailWidgetRow& NodeRow)"
  },
  {
    "label": "GenerateChildContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateChildContent(IDetailChildrenBuilder& ChildrenBuilder)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "RequiresTick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresTick()"
  },
  {
    "label": "GenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GenerateRow(int32 InLayerIndex)"
  },
  {
    "label": "SlotIndexToLayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SlotIndexToLayerIndex(int32 SlotIndex)"
  },
  {
    "label": "HandleDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, int32 SlotIndex, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "HandleCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<SDragAndDropVerticalBox::EItemDropZone>)",
    "insertText": "HandleCanAcceptDrop(const FDragDropEvent& DragDropEvent, SDragAndDropVerticalBox::EItemDropZone DropZone, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "HandleAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAcceptDrop(FDragDropEvent const& DragDropEvent, SDragAndDropVerticalBox::EItemDropZone DropZone, int32 SlotIndex, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "IsLayerSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLayerSelected(int32 LayerIndex)"
  },
  {
    "label": "OnLayerSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLayerSelectionChanged(int32 LayerIndex)"
  },
  {
    "label": "OnLayerContextMenuOpening()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnLayerContextMenuOpening(int32 InLayerIndex)"
  },
  {
    "label": "GetNumLayersText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNumLayersText()"
  },
  {
    "label": "CanCreateLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateLayer(FText& OutReason)"
  },
  {
    "label": "CreateLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLayer()"
  },
  {
    "label": "GetEditLayerIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetEditLayerIconBrush(int32 InLayerIndex)"
  },
  {
    "label": "CanClearTargetLayerOnLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanClearTargetLayerOnLayer(int32 InLayerIndex, ULandscapeLayerInfoObject* InLayerInfo, FText& OutReason)"
  },
  {
    "label": "ClearTargetLayerOnLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTargetLayerOnLayer(int32 InLayerIndex, ULandscapeLayerInfoObject* InLayerInfo)"
  },
  {
    "label": "CanClearLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanClearLayer(int32 InLayerIndex, FText& OutReason)"
  },
  {
    "label": "CanClearTargetLayersOnLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanClearTargetLayersOnLayer(int32 InLayerIndex, ELandscapeClearMode InClearMode, FText& OutReason)"
  },
  {
    "label": "ClearTargetLayersOnLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTargetLayersOnLayer(int32 InLayerIndex, ELandscapeClearMode InClearMode)"
  },
  {
    "label": "CanRenameLayerTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameLayerTo(const FText& NewText, FText& OutErrorMessage, int32 InLayerIndex)"
  },
  {
    "label": "CanRenameLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameLayer(int32 InLayerIndex, FText& OutReason)"
  },
  {
    "label": "RenameLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameLayer(int32 InLayerIndex)"
  },
  {
    "label": "CanDeleteLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteLayer(int32 InLayerIndex, FText& OutReason)"
  },
  {
    "label": "DeleteLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteLayer(int32 InLayerIndex)"
  },
  {
    "label": "CanCollapseLayer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCollapseLayer(int32 InLayerIndex, FText& OutReason)"
  },
  {
    "label": "CollapseLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseLayer(int32 InLayerIndex)"
  },
  {
    "label": "CanExecuteCustomLayerAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteCustomLayerAction(int32 InLayerIndex, const ULandscapeEditLayerBase::FEditLayerAction& InCustomLayerAction, FText& OutReason)"
  },
  {
    "label": "ExecuteCustomLayerAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteCustomLayerAction(int32 InLayerIndex, const ULandscapeEditLayerBase::FEditLayerAction& InCustomLayerAction)"
  },
  {
    "label": "ShowOnlySelectedLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowOnlySelectedLayer(int32 InLayerIndex)"
  },
  {
    "label": "ShowAllLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllLayers()"
  },
  {
    "label": "SetLayerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerName(const FText& InText, ETextCommit::Type InCommitType, int32 InLayerIndex)"
  },
  {
    "label": "GetLayerText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLayerText(int32 InLayerIndex)"
  },
  {
    "label": "GetLayerTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLayerTextColor(int32 InLayerIndex)"
  },
  {
    "label": "GetLayerDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLayerDisplayName(int32 InLayerIndex)"
  },
  {
    "label": "GetLayerAlphaVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLayerAlphaVisibility(int32 InLayerIndex)"
  },
  {
    "label": "GetEditLayerTypeTooltip()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IToolTip>)",
    "insertText": "GetEditLayerTypeTooltip(int32 InLayerIndex)"
  },
  {
    "label": "PickEditLayerClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<ULandscapeEditLayerBase>)",
    "insertText": "PickEditLayerClass()"
  },
  {
    "label": "GetLayerAlpha()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetLayerAlpha(int32 InLayerIndex)"
  },
  {
    "label": "CanSetLayerAlpha()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetLayerAlpha(int32 InLayerIndex, FText& OutReason)"
  },
  {
    "label": "SetLayerAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLayerAlpha(float InAlpha, int32 InLayerIndex, bool bCommit)"
  },
  {
    "label": "CanToggleVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleVisibility(int32 InLayerIndex, FText& OutReason)"
  },
  {
    "label": "OnToggleVisibility()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleVisibility(int32 InLayerIndex)"
  },
  {
    "label": "GetVisibilityBrushForLayer()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetVisibilityBrushForLayer(int32 InLayerIndex)"
  },
  {
    "label": "OnToggleLock()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnToggleLock(int32 InLayerIndex)"
  },
  {
    "label": "GetLockBrushForLayer()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetLockBrushForLayer(int32 InLayerIndex)"
  },
  {
    "label": "FillAddBrushMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillAddBrushMenu(FMenuBuilder& MenuBuilder, TArray<ALandscapeBlueprintBrushBase*> Brushes)"
  },
  {
    "label": "AddBrushToCurrentLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBrushToCurrentLayer(ALandscapeBlueprintBrushBase* Brush)"
  },
  {
    "label": "FillClearTargetLayerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillClearTargetLayerMenu(FMenuBuilder& MenuBuilder, int32 InLayerIndex, TArray<ULandscapeLayerInfoObject*> InUsedLayerInfos)"
  },
  {
    "label": "FillClearLayerMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillClearLayerMenu(FMenuBuilder& MenuBuilder, int32 InLayerIndex)"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSharedPtr<SInlineEditableTextBlock>> InlineTextBlocks ; int32 CurrentSlider ; } ; class FLandscapeListElementDragDropOp : public FDragAndDropVerticalBoxOp { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FLandscapeListElementDragDropOp, FDragAndDropVerticalBoxOp)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FLandscapeListElementDragDropOp>)",
    "insertText": "New(int32 InSlotIndexBeingDragged, SVerticalBox::FSlot* InSlotBeingDragged, TSharedPtr<SWidget> InWidgetToShow)"
  },
  {
    "label": "FLandscapeListElementDragDropOp()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FLandscapeListElementDragDropOp()"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  }
]