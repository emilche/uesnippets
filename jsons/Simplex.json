[
  {
    "label": "FSimplex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimplex"
  },
  {
    "label": "LineSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" namespace Chaos { template<T,int d> TVector<T,d>)",
    "insertText": "LineSimplexFindOrigin(const TVector<T, d>* Simplex, int32* Idxs, int32& NumVerts, T* OutBarycentric)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d>& X0 = Simplex [ Idxs [ 0 ] ] ; const TVector<T,d>& X1 = Simplex [ Idxs [ 1 ] ] ; const TVector<T,d> X0ToX1 = X1 - X0 ; const TVector<T,d> X0ToOrigin = - X0 ; const T Dot = TVector<T,d)",
    "insertText": "DotProduct(X0ToOrigin, X0ToX1)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (NumVerts = 1 ; OutBarycentric [ Idxs [ 0 ] ] = 1 ; return X0 ; } const T X0ToX1Squared = X0ToX1 .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (NumVerts = 1 ; Idxs [ 0 ] = Idxs [ 1 ] ; OutBarycentric [ Idxs [ 1 ] ] = 1 ; return X1 ; } const T Ratio =)",
    "insertText": "Clamp(Dot / X0ToX1Squared, T(0), T(1))"
  },
  {
    "label": "Ratio()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d> Closest =)",
    "insertText": "Ratio(X0ToX1)"
  },
  {
    "label": "LineSimplexFindOrigin2()",
    "kind": "Method",
    "detail": "Function (OutBarycentric [ Idxs [ 0 ] ] = 1 - Ratio ; OutBarycentric [ Idxs [ 1 ] ] = Ratio ; return Closest ; } template<T> TVec3<T>)",
    "insertText": "LineSimplexFindOrigin2(TVec3<T>* Simplex, int32& NumVerts, T* OutBarycentric, TVec3<T>* A, TVec3<T>* B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OutBarycentric [ 0 ] = 1 - Ratio ; OutBarycentric [ 1 ] = Ratio ; return Closest ; } struct FSimplex { int32 NumVerts ; int32 Idxs [ 4 ] ; int32)",
    "insertText": "operator(int32 Idx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 i = 0 ;)",
    "insertText": "for(int32 Idx : InIdxs)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Idxs [ i + + ] = Idx ; })",
    "insertText": "while(i < 4)"
  },
  {
    "label": "SignMatch()",
    "kind": "Method",
    "detail": "Function (Idxs [ i + + ] = 0 ; } } } ; template<T> bool)",
    "insertText": "SignMatch(T A, T B)"
  },
  {
    "label": "TriangleSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (} template<T> TVec3<T>)",
    "insertText": "TriangleSimplexFindOrigin(const TVec3<T>* Simplex, FSimplex& Idxs, T* OutBarycentric)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const int32 Idx0 = Idxs [ 0 ] ; const int32 Idx1 = Idxs [ 1 ] ; const int32 Idx2 = Idxs [ 2 ] ; const TVec3<T>& X0 = Simplex [ Idx0 ] ; const TVec3<T>& X1 = Simplex [ Idx1 ] ; const TVec3<T>& X2 = Simplex [ Idx2 ] ; const TVec3<T> X0ToX1 = X1 - X0 ; const TVec3<T> X0ToX2 = X2 - X0 ; const TVec3<T> TriNormal = TVec3<T)",
    "insertText": "CrossProduct(X0ToX1, X0ToX2)"
  },
  {
    "label": "Eps2()",
    "kind": "Method",
    "detail": "Function (const T)",
    "insertText": "Eps2(X0*std::numeric_limits<T>::min()).SizeSquared()"
  },
  {
    "label": "LineSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (Idxs . NumVerts = 2 ; return)",
    "insertText": "LineSimplexFindOrigin(Simplex, Idxs.Idxs, Idxs.NumVerts, OutBarycentric)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (} const TVec3<T> TriNormalOverSize2 = TriNormal / TriNormal2 ; const T SignedDistance = TVec3<T)",
    "insertText": "DotProduct(X0, TriNormalOverSize2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> ProjectedOrigin = TriNormal* SignedDistance ; T DetM = 0 ; int32 BestAxisU = INDEX_NONE ; int32 BestAxisV = 0 ; { T MaxAbsDetM = 0 ; int32 AxisU = 1 ; int32 AxisV = 2 ;)",
    "insertText": "for(int32 CurAxis = 0; CurAxis < 3; ++CurAxis)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (T TmpDetM = X1 [ AxisU ]* X2 [ AxisV ] - X2 [ AxisU ]* X1 [ AxisV ] + X2 [ AxisU ]* X0 [ AxisV ] - X0 [ AxisU ]* X2 [ AxisV ] + X0 [ AxisU ]* X1 [ AxisV ] - X1 [ AxisU ]* X0 [ AxisV ] ; const T AbsDetM =)",
    "insertText": "Abs(TmpDetM)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (MaxAbsDetM = AbsDetM ; DetM = TmpDetM ; BestAxisU = AxisU ; BestAxisV = AxisV ; } AxisU = AxisV ; AxisV = CurAxis ; } } const TVec3<T>& P0 = ProjectedOrigin ; const TVec3<T> P0ToX0 = X0 - P0 ; const TVec3<T> P0ToX1 = X1 - P0 ; const TVec3<T> P0ToX2 = X2 - P0 ; const T Cofactors [ 3 ] = { P0ToX1 [ BestAxisU ]* P0ToX2 [ BestAxisV ] - P0ToX2 [ BestAxisU ]* P0ToX1 [ BestAxisV ],- P0ToX0 [ BestAxisU ]* P0ToX2 [ BestAxisV ] + P0ToX2 [ BestAxisU ]* P0ToX0 [ BestAxisV ],P0ToX0 [ BestAxisU ]* P0ToX1 [ BestAxisV ] - P0ToX1 [ BestAxisU ]* P0ToX0 [ BestAxisV ] } ; bool bSignMatch [ 3 ] ; FSimplex SubSimplices [ 3 ] = { { Idx1,Idx2 },{ Idx0,Idx2 },{ Idx0,Idx1 } } ; TVec3<T> ClosestPointSub [ 3 ] ; T SubBarycentric [ 3 ] [ 4 ] ; int32 ClosestSubIdx = INDEX_NONE ; T MinSubDist2 = 0 ; bool bInside = true ;)",
    "insertText": "for(int32 Idx = 0; Idx < 3; ++Idx)"
  },
  {
    "label": "SignMatch()",
    "kind": "Method",
    "detail": "Function (bSignMatch [ Idx ] =)",
    "insertText": "SignMatch(DetM, Cofactors[Idx])"
  },
  {
    "label": "LineSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (bInside = false ; ClosestPointSub [ Idx ] =)",
    "insertText": "LineSimplexFindOrigin(Simplex, SubSimplices[Idx].Idxs, SubSimplices[Idx].NumVerts, SubBarycentric[Idx])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinSubDist2 = Dist2 ; ClosestSubIdx = Idx ; } } })",
    "insertText": "if(bInside)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const T InvDetM = 1 / DetM ; T Lambda0 = Cofactors [ 0 ]* InvDetM ; T Lambda1 = Cofactors [ 1 ]* InvDetM ; T Lambda2 = Cofactors [ 2 ]* InvDetM ; OutBarycentric [ Idx0 ] = Lambda0 ; OutBarycentric [ Idx1 ] = Lambda1 ; OutBarycentric [ Idx2 ] = Lambda2 ; return ProjectedOrigin ; } else {)",
    "insertText": "check(Idx0 >= 0 && Idx0 < 4)"
  },
  {
    "label": "TriangleSimplexFindOrigin2()",
    "kind": "Method",
    "detail": "Function (Idxs = SubSimplices [ ClosestSubIdx ] ; OutBarycentric [ Idx0 ] = SubBarycentric [ ClosestSubIdx ] [ Idx0 ] ; OutBarycentric [ Idx1 ] = SubBarycentric [ ClosestSubIdx ] [ Idx1 ] ; OutBarycentric [ Idx2 ] = SubBarycentric [ ClosestSubIdx ] [ Idx2 ] ; return ClosestPointSub [ ClosestSubIdx ] ; } } template<T> TVec3<T>)",
    "insertText": "TriangleSimplexFindOrigin2(TVec3<T>* Simplex, int32& NumVerts, T* OutBarycentric, TVec3<T>* As, TVec3<T>* Bs)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const TVec3<T>& A = Simplex [ 0 ] ; const TVec3<T>& B = Simplex [ 1 ] ; const TVec3<T>& C = Simplex [ 2 ] ; const TVec3<T> AB = B - A ; const TVec3<T> AC = C - A ; const TVec3<T> AO = - A ; const T d1 = TVec3<T)",
    "insertText": "DotProduct(AB, AO)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const T d2 = TVec3<T)",
    "insertText": "DotProduct(AC, AO)"
  },
  {
    "label": "bIsD1LEZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD1LEZero(d1 <= T(0))"
  },
  {
    "label": "bIsD2LEZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD2LEZero(d2 <= T(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bIsA = bIsD1LEZero&& bIsD2LEZero ;)",
    "insertText": "if(bIsA)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (NumVerts = 1 ; OutBarycentric [ 0 ] =)",
    "insertText": "T(1)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const T d4 = TVec3<T)",
    "insertText": "DotProduct(AC, BO)"
  },
  {
    "label": "bIsD3GEZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD3GEZero(d3 >= T(0))"
  },
  {
    "label": "bIsD3GED4()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD3GED4(d3 >= d4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bIsB = bIsD3GEZero&& bIsD3GED4 ;)",
    "insertText": "if(bIsB)"
  },
  {
    "label": "bIsZeroGEvc()",
    "kind": "Method",
    "detail": "Function (Simplex [ 0 ] = B ; As [ 0 ] = As [ 1 ] ; Bs [ 0 ] = Bs [ 1 ] ; return B ; } const T d1d4 = d1* d4 ; const T vc = d1d4 - d2* d3 ; const T NormalizationDenominatorAB = d1 - d3 ; const bool)",
    "insertText": "bIsZeroGEvc(vc <= T(0))"
  },
  {
    "label": "bIsD1GEZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD1GEZero(d1 >= T(0))"
  },
  {
    "label": "bIsZeroGED3()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsZeroGED3(d3 <= T(0))"
  },
  {
    "label": "bIsNDABGTZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsNDABGTZero(NormalizationDenominatorAB > T(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bIsAB = bIsZeroGEvc&& bIsD1GEZero&& bIsZeroGED3&& bIsNDABGTZero ;)",
    "insertText": "if(bIsAB)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (OutBarycentric [ 0 ] = OneMinusV ; OutBarycentric [ 1 ] = V ; return A + V* AB ; } const TVec3<T> CO = - C ; const T d5 = TVec3<T)",
    "insertText": "DotProduct(AB, CO)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const T d6 = TVec3<T)",
    "insertText": "DotProduct(AC, CO)"
  },
  {
    "label": "bIsD6GEZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD6GEZero(d6 >= T(0))"
  },
  {
    "label": "bIsD6GED5()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD6GED5(d6 >= d5)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bIsC = bIsD6GEZero&& bIsD6GED5 ;)",
    "insertText": "if(bIsC)"
  },
  {
    "label": "bIsZeroGEvb()",
    "kind": "Method",
    "detail": "Function (Simplex [ 0 ] = C ; As [ 0 ] = As [ 2 ] ; Bs [ 0 ] = Bs [ 2 ] ; return C ; } const T d5d2 = d5* d2 ; const T vb = d5d2 - d1* d6 ; const T NormalizationDenominatorAC = d2 - d6 ; const bool)",
    "insertText": "bIsZeroGEvb(vb <= T(0))"
  },
  {
    "label": "bIsD2GEZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD2GEZero(d2 >= T(0))"
  },
  {
    "label": "bIsZeroGED6()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsZeroGED6(d6 <= T(0))"
  },
  {
    "label": "bIsNDACGTZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsNDACGTZero(NormalizationDenominatorAC > T(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bIsAC = bIsZeroGEvb&& bIsD2GEZero&& bIsZeroGED6&& bIsNDACGTZero ;)",
    "insertText": "if(bIsAC)"
  },
  {
    "label": "bIsZeroGEva()",
    "kind": "Method",
    "detail": "Function (NumVerts = 2 ; OutBarycentric [ 0 ] = OneMinusW ; OutBarycentric [ 1 ] = W ; Simplex [ 1 ] = C ; As [ 1 ] = As [ 2 ] ; Bs [ 1 ] = Bs [ 2 ] ; return A + W* AC ; } const T d3d6 = d3* d6 ; const T va = d3d6 - d5* d4 ; const T d4MinusD3 = d4 - d3 ; const T d5MinusD6 = d5 - d6 ; const T NormalizationDenominatorBC = d4MinusD3 + d5MinusD6 ; const bool)",
    "insertText": "bIsZeroGEva(va <= T(0))"
  },
  {
    "label": "bIsD4MinusD3GEZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD4MinusD3GEZero(d4MinusD3 >= T(0))"
  },
  {
    "label": "bIsD5MinusD6GEZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsD5MinusD6GEZero(d5MinusD6 >= T(0))"
  },
  {
    "label": "bIsNDBCGTZero()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsNDBCGTZero(NormalizationDenominatorBC > T(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bIsBC = bIsZeroGEva&& bIsD4MinusD3GEZero&& bIsD5MinusD6GEZero&& bIsNDBCGTZero ;)",
    "insertText": "if(bIsBC)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (NumVerts = 2 ; OutBarycentric [ 0 ] = OneMinusW ; OutBarycentric [ 1 ] = W ; const TVec3<T> CMinusB = C - B ; const TVec3<T> Result = B + W* CMinusB ; Simplex [ 0 ] = B ; Simplex [ 1 ] = C ; As [ 0 ] = As [ 1 ] ; Bs [ 0 ] = Bs [ 1 ] ; As [ 1 ] = As [ 2 ] ; Bs [ 1 ] = Bs [ 2 ] ; return Result ; } const T denom =)",
    "insertText": "T(1) / (va + vb + vc)"
  },
  {
    "label": "CrossProduct()",
    "kind": "Method",
    "detail": "Function (const T U = va* denom ; const T V = vb* denom ; const T W = vc* denom ; NumVerts = 3 ; OutBarycentric [ 0 ] = U ; OutBarycentric [ 1 ] = V ; OutBarycentric [ 2 ] = W ; const TVec3<T> TriNormal = TVec3<T)",
    "insertText": "CrossProduct(AB, AC)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const T TriNormal2 = TVec3<T)",
    "insertText": "DotProduct(TriNormal, TriNormal)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const TVec3<T> TriNormalOverSize2 = TriNormal / TriNormal2 ; const T SignedDistance = TVec3<T)",
    "insertText": "DotProduct(A, TriNormalOverSize2)"
  },
  {
    "label": "TetrahedronSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (} template<T> TVec3<T>)",
    "insertText": "TetrahedronSimplexFindOrigin(const TVec3<T>* Simplex, FSimplex& Idxs, T* OutBarycentric)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const int32 Idx0 = Idxs [ 0 ] ; const int32 Idx1 = Idxs [ 1 ] ; const int32 Idx2 = Idxs [ 2 ] ; const int32 Idx3 = Idxs [ 3 ] ; const TVec3<T>& X0 = Simplex [ Idx0 ] ; const TVec3<T>& X1 = Simplex [ Idx1 ] ; const TVec3<T>& X2 = Simplex [ Idx2 ] ; const TVec3<T>& X3 = Simplex [ Idx3 ] ; T Cofactors [ 4 ] ; Cofactors [ 0 ] = - TVec3<T)",
    "insertText": "DotProduct(X1, TVec3<T>::CrossProduct(X2, X3))"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (Cofactors [ 1 ] = TVec3<T)",
    "insertText": "DotProduct(X0, TVec3<T>::CrossProduct(X2, X3))"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (Cofactors [ 2 ] = - TVec3<T)",
    "insertText": "DotProduct(X0, TVec3<T>::CrossProduct(X1, X3))"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (Cofactors [ 3 ] = TVec3<T)",
    "insertText": "DotProduct(X0, TVec3<T>::CrossProduct(X1, X2))"
  },
  {
    "label": "DetM()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "DetM(Cofactors[0] + Cofactors[1]) + (Cofactors[2] + Cofactors[3])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bSignMatch [ 4 ] ; FSimplex SubIdxs [ 4 ] = { { 1,2,3 },{ 0,2,3 },{ 0,1,3 },{ 0,1,2 } } ; TVec3<T> ClosestPointSub [ 4 ] ; T SubBarycentric [ 4 ] [ 4 ] ; int32 ClosestTriangleIdx = INDEX_NONE ; T MinTriangleDist2 = 0 ; bool bInside = true ;)",
    "insertText": "for(int Idx = 0; Idx < 4; ++Idx)"
  },
  {
    "label": "TriangleSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (bInside = false ; ClosestPointSub [ Idx ] =)",
    "insertText": "TriangleSimplexFindOrigin(Simplex, SubIdxs[Idx], SubBarycentric[Idx])"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (OutBarycentric [ Idx0 ] = Cofactors [ 0 ] / DetM ; OutBarycentric [ Idx1 ] = Cofactors [ 1 ] / DetM ; OutBarycentric [ Idx2 ] = Cofactors [ 2 ] / DetM ; OutBarycentric [ Idx3 ] = Cofactors [ 3 ] / DetM ; return TVec3<)",
    "insertText": "T(0)"
  },
  {
    "label": "TetrahedronSimplexFindOrigin2()",
    "kind": "Method",
    "detail": "Function (} Idxs = SubIdxs [ ClosestTriangleIdx ] ; OutBarycentric [ Idx0 ] = SubBarycentric [ ClosestTriangleIdx ] [ Idx0 ] ; OutBarycentric [ Idx1 ] = SubBarycentric [ ClosestTriangleIdx ] [ Idx1 ] ; OutBarycentric [ Idx2 ] = SubBarycentric [ ClosestTriangleIdx ] [ Idx2 ] ; OutBarycentric [ Idx3 ] = SubBarycentric [ ClosestTriangleIdx ] [ Idx3 ] ; return ClosestPointSub [ ClosestTriangleIdx ] ; } template<T> TVec3<T>)",
    "insertText": "TetrahedronSimplexFindOrigin2(TVec3<T>* Simplex, int32& NumVerts, T* OutBarycentric, TVec3<T>* A, TVec3<T>* B)"
  },
  {
    "label": "TriangleSimplexFindOrigin2()",
    "kind": "Method",
    "detail": "Function (bInside = false ; ClosestPointSub [ Idx ] =)",
    "insertText": "TriangleSimplexFindOrigin2(SubSimplices[Idx], SubNumVerts[Idx], SubBarycentric[Idx], SubAs[Idx], SubBs[Idx])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} NumVerts = SubNumVerts [ ClosestTriangleIdx ] ;)",
    "insertText": "for(int i = 0; i < 3; i++)"
  },
  {
    "label": "ReorderGJKArray()",
    "kind": "Method",
    "detail": "Function (OutBarycentric [ i ] = SubBarycentric [ ClosestTriangleIdx ] [ i ] ; Simplex [ i ] = SubSimplices [ ClosestTriangleIdx ] [ i ] ; A [ i ] = SubAs [ ClosestTriangleIdx ] [ i ] ; B [ i ] = SubBs [ ClosestTriangleIdx ] [ i ] ; } return ClosestPointSub [ ClosestTriangleIdx ] ; } template<T> void)",
    "insertText": "ReorderGJKArray(T* Data, FSimplex& Idxs)"
  },
  {
    "label": "SimplexFindClosestToOrigin()",
    "kind": "Method",
    "detail": "Function (const T D0 = Data [ Idxs [ 0 ] ] ; const T D1 = Data [ Idxs [ 1 ] ] ; const T D2 = Data [ Idxs [ 2 ] ] ; const T D3 = Data [ Idxs [ 3 ] ] ; Data [ 0 ] = D0 ; Data [ 1 ] = D1 ; Data [ 2 ] = D2 ; Data [ 3 ] = D3 ; } template<T> TVec3<T>)",
    "insertText": "SimplexFindClosestToOrigin(TVec3<T>* Simplex, FSimplex& Idxs, T* OutBarycentric, TVec3<T>* A = nullptr, TVec3<T>* B = nullptr)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (TVec3<T> ClosestPoint ;)",
    "insertText": "switch(Idxs.NumVerts)"
  },
  {
    "label": "TriangleSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (break ; } case 3 : { ClosestPoint =)",
    "insertText": "TriangleSimplexFindOrigin(Simplex, Idxs, OutBarycentric)"
  },
  {
    "label": "TetrahedronSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (break ; } case 4 : { ClosestPoint =)",
    "insertText": "TetrahedronSimplexFindOrigin(Simplex, Idxs, OutBarycentric)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (break ; } default :)",
    "insertText": "ensure(false)"
  },
  {
    "label": "ReorderGJKArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ReorderGJKArray(Simplex, Idxs)"
  },
  {
    "label": "ReorderGJKArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderGJKArray(OutBarycentric, Idxs)"
  },
  {
    "label": "ReorderGJKArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderGJKArray(A, Idxs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(B)"
  },
  {
    "label": "ReorderGJKArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReorderGJKArray(B, Idxs)"
  },
  {
    "label": "SimplexFindClosestToOrigin2()",
    "kind": "Method",
    "detail": "Function (} Idxs [ 0 ] = 0 ; Idxs [ 1 ] = 1 ; Idxs [ 2 ] = 2 ; Idxs [ 3 ] = 3 ; return ClosestPoint ; } template<T> TVec3<T>)",
    "insertText": "SimplexFindClosestToOrigin2(TVec3<T>* Simplex, int32& NumVerts, T* OutBarycentric, TVec3<T>* A, TVec3<T>* B)"
  },
  {
    "label": "TriangleSimplexFindOrigin2()",
    "kind": "Method",
    "detail": "Function (} case 3 : { return)",
    "insertText": "TriangleSimplexFindOrigin2(Simplex, NumVerts, OutBarycentric, A, B)"
  },
  {
    "label": "TetrahedronSimplexFindOrigin2()",
    "kind": "Method",
    "detail": "Function (} case 4 : { return)",
    "insertText": "TetrahedronSimplexFindOrigin2(Simplex, NumVerts, OutBarycentric, A, B)"
  }
]