[
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCStreamer"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LCOMMType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LCOMMType"
  },
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCAsmInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCASMINFO_H # define LLVM_MC_MCASMINFO_H # include \" llvm / MC / MCDirectives . h \" # include \" llvm / MC / MCDwarf . h \" # include<cassert> # include<vector> namespace llvm { class MCExpr ; class MCSection ; class MCStreamer ; class MCSymbol ; class MCContext ; namespace WinEH { enum class EncodingType { Invalid,Alpha,Alpha64,ARM,CE,Itanium,X86,MIPS = Alpha,} ; } enum class ExceptionHandling { None,DwarfCFI,SjLj,ARM,WinEH,} ; namespace LCOMM { enum LCOMMType { NoAlignment,ByteAlignment,Log2Alignment } ; } class MCAsmInfo { protected : unsigned PointerSize ; unsigned CalleeSaveStackSlotSize ; bool IsLittleEndian ; bool StackGrowsUp ; bool HasSubsectionsViaSymbols ; bool HasMachoZeroFillDirective ; bool HasMachoTBSSDirective ; bool HasStaticCtorDtorReferenceInStaticMode ; unsigned MaxInstLength ; unsigned MinInstAlignment ; bool DollarIsPC ; const char* SeparatorString ; const char* CommentString ; const char* LabelSuffix ; bool UseAssignmentForEHBegin ; bool NeedsLocalForSize ; const char* PrivateGlobalPrefix ; const char* PrivateLabelPrefix ; const char* LinkerPrivateGlobalPrefix ; const char* InlineAsmStart ; const char* InlineAsmEnd ; const char* Code16Directive ; const char* Code32Directive ; const char* Code64Directive ; unsigned AssemblerDialect ; bool AllowAtInName ; bool SupportsQuotedNames ; bool UseDataRegionDirectives ; const char* ZeroDirective ; const char* AsciiDirective ; const char* AscizDirective ; const char* Data8bitsDirective ; const char* Data16bitsDirective ; const char* Data32bitsDirective ; const char* Data64bitsDirective ; const char* GPRel64Directive ; const char* GPRel32Directive ; bool SunStyleELFSectionSwitchSyntax ; bool UsesELFSectionDirectiveForBSS ; bool NeedsDwarfSectionOffsetDirective ; bool AlignmentIsInBytes ; unsigned TextAlignFillValue ; const char* GlobalDirective ; bool SetDirectiveSuppressesReloc ; bool HasAggressiveSymbolFolding ; bool COMMDirectiveAlignmentIsInBytes ; LCOMM::LCOMMType LCOMMDirectiveAlignmentType ; bool HasFunctionAlignment ; bool HasDotTypeDotSizeDirective ; bool HasSingleParameterDotFile ; bool HasIdentDirective ; bool HasNoDeadStrip ; const char* WeakDirective ; const char* WeakRefDirective ; bool HasWeakDefDirective ; bool HasWeakDefCanBeHiddenDirective ; bool HasLinkOnceDirective ; MCSymbolAttr HiddenVisibilityAttr ; MCSymbolAttr HiddenDeclarationVisibilityAttr ; MCSymbolAttr ProtectedVisibilityAttr ; bool SupportsDebugInformation ; ExceptionHandling ExceptionsType ; WinEH::EncodingType WinEHEncodingType ; bool DwarfUsesRelocationsAcrossSections ; bool DwarfFDESymbolsUseAbsDiff ; bool DwarfRegNumForCFI ; bool UseParensForSymbolVariant ; std::vector<MCCFIInstruction> InitialFrameState ; bool UseIntegratedAssembler ; bool CompressDebugSections ; bool UseLogicalShr ; public :)",
    "insertText": "MCAsmInfo()"
  },
  {
    "label": "getPointerSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getPointerSize()"
  },
  {
    "label": "getExprForPersonalitySymbol()",
    "kind": "Method",
    "detail": "Function (const MCExpr*)",
    "insertText": "getExprForPersonalitySymbol(const MCSymbol *Sym, unsigned Encoding, MCStreamer &Streamer)"
  },
  {
    "label": "getExprForFDESymbol()",
    "kind": "Method",
    "detail": "Function (const MCExpr*)",
    "insertText": "getExprForFDESymbol(const MCSymbol *Sym, unsigned Encoding, MCStreamer &Streamer)"
  },
  {
    "label": "isValidUnquotedName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidUnquotedName(StringRef Name)"
  },
  {
    "label": "usesSunStyleELFSectionSwitchSyntax()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "usesSunStyleELFSectionSwitchSyntax()"
  },
  {
    "label": "getInlineAsmStart()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "getInlineAsmStart()"
  },
  {
    "label": "usesWindowsCFI()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "usesWindowsCFI()"
  },
  {
    "label": "doesDwarfUseRelocationsAcrossSections()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "doesDwarfUseRelocationsAcrossSections()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (InitialFrameState .)",
    "insertText": "push_back(Inst)"
  },
  {
    "label": "getInitialFrameState()",
    "kind": "Method",
    "detail": "Function (} const std::vector<MCCFIInstruction>&)",
    "insertText": "getInitialFrameState()"
  },
  {
    "label": "compressDebugSections()",
    "kind": "Method",
    "detail": "Function (UseIntegratedAssembler = Value ; } bool)",
    "insertText": "compressDebugSections()"
  },
  {
    "label": "shouldUseLogicalShr()",
    "kind": "Method",
    "detail": "Function (this -> CompressDebugSections = CompressDebugSections ; } bool)",
    "insertText": "shouldUseLogicalShr()"
  }
]