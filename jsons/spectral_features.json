[
  {
    "label": "SpectralFeaturesExtractor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpectralFeaturesExtractor"
  },
  {
    "label": "SpectralFeaturesExtractor()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_SPECTRAL_FEATURES_H_ # define MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_SPECTRAL_FEATURES_H_ # include<array> # include<cstddef> # include<memory> # include<vector> # include \" api / array_view . h \" # include \" modules / audio_processing / agc2 / rnn_vad / common . h \" # include \" modules / audio_processing / agc2 / rnn_vad / ring_buffer . h \" # include \" modules / audio_processing / agc2 / rnn_vad / spectral_features_internal . h \" # include \" modules / audio_processing / agc2 / rnn_vad / symmetric_matrix_buffer . h \" # include \" modules / audio_processing / utility / pffft_wrapper . h \" namespace webrtc { namespace rnn_vad { class SpectralFeaturesExtractor { public :)",
    "insertText": "SpectralFeaturesExtractor()"
  },
  {
    "label": "SpectralFeaturesExtractor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpectralFeaturesExtractor(const SpectralFeaturesExtractor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SpectralFeaturesExtractor&)",
    "insertText": "operator(const SpectralFeaturesExtractor&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "CheckSilenceComputeFeatures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckSilenceComputeFeatures(rtc::ArrayView<const float, kFrameSize20ms24kHz> reference_frame, rtc::ArrayView<const float, kFrameSize20ms24kHz> lagged_frame, rtc::ArrayView<float, kNumBands - kNumLowerBands> higher_bands_cepstrum, rtc::ArrayView<float, kNumLowerBands> average, rtc::ArrayView<float, kNumLowerBands> first_derivative, rtc::ArrayView<float, kNumLowerBands> second_derivative, rtc::ArrayView<float, kNumLowerBands> bands_cross_corr, float* variability)"
  },
  {
    "label": "ComputeAvgAndDerivatives()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ComputeAvgAndDerivatives(rtc::ArrayView<float, kNumLowerBands> average, rtc::ArrayView<float, kNumLowerBands> first_derivative, rtc::ArrayView<float, kNumLowerBands> second_derivative)"
  },
  {
    "label": "ComputeNormalizedCepstralCorrelation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNormalizedCepstralCorrelation(rtc::ArrayView<float, kNumLowerBands> bands_cross_corr)"
  },
  {
    "label": "ComputeVariability()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeVariability()"
  }
]