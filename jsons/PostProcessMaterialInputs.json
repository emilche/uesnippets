[
  {
    "label": "FSceneWithoutWaterTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneWithoutWaterTextures"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPostProcessMaterialInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPostProcessMaterialInputs"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FPostProcessMaterialInputs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SceneTexturesConfig . h \" # include \" ScreenPass . h \" struct FSceneWithoutWaterTextures ; const uint32 kPostProcessMaterialInputCountMax = 5 ; const uint32 kPathTracingPostProcessMaterialInputCountMax = 5 ; enum class EPostProcessMaterialInput : uint32 { SceneColor = 0,SeparateTranslucency = 1,CombinedBloom = 2,PreTonemapHDRColor = 2,PostTonemapHDRColor = 3,Velocity = 4 } ; enum class EPathTracingPostProcessMaterialInput : uint32 { Radiance = 0,DenoisedRadiance = 1,Albedo = 2,Normal = 3,Variance = 4 } ; struct FPostProcessMaterialInputs {)",
    "insertText": "FPostProcessMaterialInputs()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(bUserSceneTexturesSet, 0)"
  },
  {
    "label": "SetInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInput(FRDGBuilder& GraphBuilder, EPostProcessMaterialInput Input, FScreenPassTexture Texture)"
  },
  {
    "label": "SetInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInput(Input, FScreenPassTextureSlice::CreateFromScreenPassTexture(GraphBuilder, Texture))"
  },
  {
    "label": "SetInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetInput(EPostProcessMaterialInput Input, FScreenPassTextureSlice Texture)"
  },
  {
    "label": "Textures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Textures(uint32)"
  },
  {
    "label": "SetUserSceneTextureInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUserSceneTextureInput(EPostProcessMaterialInput Input, FScreenPassTextureSlice Texture)"
  },
  {
    "label": "UserSceneTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UserSceneTextures(uint32)"
  },
  {
    "label": "bUserSceneTexturesSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bUserSceneTexturesSet(uint32)"
  },
  {
    "label": "GetInput()",
    "kind": "Method",
    "detail": "Function (} FScreenPassTextureSlice)",
    "insertText": "GetInput(EPostProcessMaterialInput Input)"
  },
  {
    "label": "GetSceneColorOutput()",
    "kind": "Method",
    "detail": "Function (} FScreenPassTextureSlice)",
    "insertText": "GetSceneColorOutput(EBlendableLocation BlendableLocation)"
  },
  {
    "label": "SetPathTracingInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPathTracingInput(EPathTracingPostProcessMaterialInput Input, FScreenPassTexture Texture)"
  },
  {
    "label": "PathTracingTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PathTracingTextures(uint32)"
  },
  {
    "label": "GetPathTracingInput()",
    "kind": "Method",
    "detail": "Function (} FScreenPassTexture)",
    "insertText": "GetPathTracingInput(EPathTracingPostProcessMaterialInput Input)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Validate()"
  },
  {
    "label": "ValidateInputExists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateInputExists(EPostProcessMaterialInput::SceneColor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(OverrideOutput.Texture)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(SceneTextures.SceneTextures || SceneTextures.MobileSceneTextures)"
  },
  {
    "label": "ValidateInputExists()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateInputExists(EPostProcessMaterialInput Input)"
  },
  {
    "label": "ReturnUntouchedSceneColorForPostProcessing()",
    "kind": "Method",
    "detail": "Function (} FScreenPassTexture)",
    "insertText": "ReturnUntouchedSceneColorForPostProcessing(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "AddPostProcessMaterialPass()",
    "kind": "Method",
    "detail": "Function (FScreenPassRenderTarget OverrideOutput ; TStaticArray<FScreenPassTextureSlice,kPostProcessMaterialInputCountMax> Textures ; TStaticArray<FScreenPassTextureSlice,kPostProcessMaterialInputCountMax> UserSceneTextures ; TStaticArray<bool,kPostProcessMaterialInputCountMax> bUserSceneTexturesSet ; TStaticArray<FScreenPassTexture,kPathTracingPostProcessMaterialInputCountMax> PathTracingTextures ; EPixelFormat OutputFormat = PF_Unknown ; bool bManualStencilTest = false ; FRDGTextureRef CustomDepthTexture = nullptr ; FSceneTextureShaderParameters SceneTextures ; const FSceneWithoutWaterTextures* SceneWithoutWaterTextures = nullptr ; bool bAllowSceneColorInputAsOutput = true ; bool bMetalMSAAHDRDecode = false ; bool bUserSceneTextureOutput = false ; bool bUserSceneTextureFirstRender = false ; uint32 UserSceneTextureSceneColorInput = INDEX_NONE ; } ; class UMaterialInterface ; FScreenPassTexture)",
    "insertText": "AddPostProcessMaterialPass(FRDGBuilder& GraphBuilder, const FSceneView& View, const FPostProcessMaterialInputs& Inputs, const UMaterialInterface* MaterialInterface)"
  }
]