[
  {
    "label": "TransportFeedbackDemuxer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransportFeedbackDemuxer"
  },
  {
    "label": "TransportFeedbackDemuxer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_RTP_TRANSPORT_FEEDBACK_DEMUXER_H_ # define MODULES_CONGESTION_CONTROLLER_RTP_TRANSPORT_FEEDBACK_DEMUXER_H_ # include<map> # include<utility> # include<vector> # include \" api / sequence_checker . h \" # include \" modules / include / module_common_types_public . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" rtc_base / system / no_unique_address . h \" namespace webrtc { class TransportFeedbackDemuxer final : public StreamFeedbackProvider { public :)",
    "insertText": "TransportFeedbackDemuxer()"
  },
  {
    "label": "RegisterStreamFeedbackObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterStreamFeedbackObserver(std::vector<uint32_t> ssrcs, StreamFeedbackObserver* observer)"
  },
  {
    "label": "DeRegisterStreamFeedbackObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeRegisterStreamFeedbackObserver(StreamFeedbackObserver* observer)"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacket(const RtpPacketSendInfo& packet_info)"
  },
  {
    "label": "OnTransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportFeedback(const rtcp::TransportFeedback& feedback)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : RTC_NO_UNIQUE_ADDRESS SequenceChecker observer_checker_ ; SequenceNumberUnwrapper seq_num_unwrapper_)",
    "insertText": "RTC_GUARDED_BY(&observer_checker_)"
  }
]