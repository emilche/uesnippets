[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ShortcutProperties()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SHORTCUT_H_ # define BASE_WIN_SHORTCUT_H_ # include<guiddef . h> # include<stdint . h> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / files / file_path . h \" namespace base { namespace win { enum class ShortcutOperation { kCreateAlways = 0,kReplaceExisting,kUpdateExisting,} ; struct BASE_EXPORT ShortcutProperties { using IndividualProperties = uint32_t ; IndividualProperties PROPERTIES_TARGET = 1 U<<0 ; IndividualProperties PROPERTIES_WORKING_DIR = 1 U<<1 ; IndividualProperties PROPERTIES_ARGUMENTS = 1 U<<2 ; IndividualProperties PROPERTIES_DESCRIPTION = 1 U<<3 ; IndividualProperties PROPERTIES_ICON = 1 U<<4 ; IndividualProperties PROPERTIES_APP_ID = 1 U<<5 ; IndividualProperties PROPERTIES_DUAL_MODE = 1 U<<6 ; IndividualProperties PROPERTIES_TOAST_ACTIVATOR_CLSID = 1 U<<7 ; IndividualProperties PROPERTIES_ALL = PROPERTIES_TARGET | PROPERTIES_WORKING_DIR | PROPERTIES_ARGUMENTS | PROPERTIES_DESCRIPTION | PROPERTIES_ICON | PROPERTIES_APP_ID | PROPERTIES_DUAL_MODE | PROPERTIES_TOAST_ACTIVATOR_CLSID ;)",
    "insertText": "ShortcutProperties()"
  },
  {
    "label": "ShortcutProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShortcutProperties(const ShortcutProperties& other)"
  },
  {
    "label": "set_target()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_target(const FilePath& target_in)"
  },
  {
    "label": "set_working_dir()",
    "kind": "Method",
    "detail": "Function (target = target_in ; options | = PROPERTIES_TARGET ; } void)",
    "insertText": "set_working_dir(const FilePath& working_dir_in)"
  },
  {
    "label": "set_arguments()",
    "kind": "Method",
    "detail": "Function (working_dir = working_dir_in ; options | = PROPERTIES_WORKING_DIR ; } void)",
    "insertText": "set_arguments(const std::wstring& arguments_in)"
  },
  {
    "label": "set_description()",
    "kind": "Method",
    "detail": "Function (arguments = arguments_in ; options | = PROPERTIES_ARGUMENTS ; } void)",
    "insertText": "set_description(const std::wstring& description_in)"
  },
  {
    "label": "set_icon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_icon(const FilePath& icon_in, int icon_index_in)"
  },
  {
    "label": "set_app_id()",
    "kind": "Method",
    "detail": "Function (icon = icon_in ; icon_index = icon_index_in ; options | = PROPERTIES_ICON ; } void)",
    "insertText": "set_app_id(const std::wstring& app_id_in)"
  },
  {
    "label": "set_dual_mode()",
    "kind": "Method",
    "detail": "Function (app_id = app_id_in ; options | = PROPERTIES_APP_ID ; } void)",
    "insertText": "set_dual_mode(bool dual_mode_in)"
  },
  {
    "label": "set_toast_activator_clsid()",
    "kind": "Method",
    "detail": "Function (dual_mode = dual_mode_in ; options | = PROPERTIES_DUAL_MODE ; } void)",
    "insertText": "set_toast_activator_clsid(const CLSID& toast_activator_clsid_in)"
  },
  {
    "label": "CreateOrUpdateShortcutLink()",
    "kind": "Method",
    "detail": "Function (toast_activator_clsid = toast_activator_clsid_in ; options | = PROPERTIES_TOAST_ACTIVATOR_CLSID ; } FilePath target ; FilePath working_dir ; std::wstring arguments ; std::wstring description ; FilePath icon ; int icon_index = - 1 ; std::wstring app_id ; bool dual_mode = false ; CLSID toast_activator_clsid ; uint32_t options = 0 U ; } ; BASE_EXPORT bool)",
    "insertText": "CreateOrUpdateShortcutLink(const FilePath& shortcut_path, const ShortcutProperties& properties, ShortcutOperation operation)"
  },
  {
    "label": "ResolveShortcutProperties()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ResolveShortcutProperties(const FilePath& shortcut_path, uint32_t options, ShortcutProperties* properties)"
  },
  {
    "label": "ResolveShortcut()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ResolveShortcut(const FilePath& shortcut_path, FilePath* target_path, std::wstring* args)"
  }
]