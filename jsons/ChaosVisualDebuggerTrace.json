[
  {
    "label": "FRigidClustering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRigidClustering"
  },
  {
    "label": "FAccelerationStructureHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAccelerationStructureHandle"
  },
  {
    "label": "FCharacterGroundConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterGroundConstraintContainer"
  },
  {
    "label": "FPBDConstraintContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDConstraintContainer"
  },
  {
    "label": "FPBDJointConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraints"
  },
  {
    "label": "FChaosVDContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDContext"
  },
  {
    "label": "FChaosVDQueryVisitStep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDQueryVisitStep"
  },
  {
    "label": "FChaosVDCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDCollisionResponseParams"
  },
  {
    "label": "FChaosVDCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDCollisionObjectQueryParams"
  },
  {
    "label": "FChaosVDCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDCollisionQueryParams"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCollisionObjectQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionObjectQueryParams"
  },
  {
    "label": "FCollisionResponseParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionResponseParams"
  },
  {
    "label": "FCollisionQueryParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollisionQueryParams"
  },
  {
    "label": "ECollisionChannel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECollisionChannel"
  },
  {
    "label": "FChaosVDSerializableNameTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVDSerializableNameTable"
  },
  {
    "label": "FPBDCollisionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraints"
  },
  {
    "label": "FPBDRigidsSOAs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSOAs"
  },
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FPhysicsSolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsSolverBase"
  },
  {
    "label": "TGeometryParticleHandles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeometryParticleHandles"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "FParticlePairMidPhase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePairMidPhase"
  },
  {
    "label": "ISpatialAccelerationCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISpatialAccelerationCollection"
  },
  {
    "label": "FChaosVisualDebuggerTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosVisualDebuggerTrace"
  },
  {
    "label": "FChaosEngineModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChaosEngineModule"
  },
  {
    "label": "FChaosVDScopeSolverStep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDScopeSolverStep"
  },
  {
    "label": "FChaosVDScopeSolverFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDScopeSolverFrame"
  },
  {
    "label": "FChaosVDScopeSceneQueryVisit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDScopeSceneQueryVisit"
  },
  {
    "label": "UE_TRACE_CHANNEL_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / Serializable . h \" # include \" Containers / Set . h \" # include \" Chaos / ChaosArchive . h \" # include \" ChaosVDContextProvider . h \" # include \" ChaosVDOptionalDataChannel . h \" # include \" Chaos / ParticleIterator . h \" # include \" HAL / ThreadSafeBool . h \" # ifndef CHAOS_VISUAL_DEBUGGER_ENABLED # define CHAOS_VISUAL_DEBUGGER_ENABLED WITH_CHAOS_VISUAL_DEBUGGER # endif # include \" Chaos / Framework / PhysicsSolverBase . h \" # include \" ChaosVisualDebugger / ChaosVDTraceMacros . h \" # if WITH_CHAOS_VISUAL_DEBUGGER # include \" ChaosVDMemWriterReader . h \" # include \" ChaosVDRuntimeModule . h \" # include \" DataWrappers / ChaosVDImplicitObjectDataWrapper . h \" # include \" Trace / Trace . h \" # include \" Trace / Trace . inl \" namespace Chaos { class FRigidClustering ; class FAccelerationStructureHandle ; class FCharacterGroundConstraintContainer ; class FPBDConstraintContainer ; class FPBDJointConstraints ; })",
    "insertText": "UE_TRACE_CHANNEL_EXTERN(ChaosVDChannel, CHAOS_API) UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDSolverFrameStart) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_FIELD(UE::Trace::WideString, DebugName) UE_TRACE_EVENT_FIELD(bool, IsKeyFrame) UE_TRACE_EVENT_FIELD(bool, IsReSimulated) UE_TRACE_EVENT_FIELD(int32, CurrentFrameNumber) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDSolverFrameEnd) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDParticleCreated) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_FIELD(int32, ParticleID) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDParticleDestroyed) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_FIELD(int32, ParticleID) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDSolverStepStart) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_FIELD(UE::Trace::WideString, StepName) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDSolverStepEnd) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_FIELD(uint32, StepNumber) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDBinaryDataStart) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_FIELD(UE::Trace::WideString, TypeName) UE_TRACE_EVENT_FIELD(int32, DataID) UE_TRACE_EVENT_FIELD(uint32, DataSize) UE_TRACE_EVENT_FIELD(uint32, OriginalSize) UE_TRACE_EVENT_FIELD(bool, IsCompressed) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDBinaryDataContent) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_FIELD(int32, DataID) UE_TRACE_EVENT_FIELD(uint8[], RawData) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDBinaryDataEnd) UE_TRACE_EVENT_FIELD(uint64, Cycle) UE_TRACE_EVENT_FIELD(int32, DataID) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDSolverSimulationSpace) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_FIELD(uint64, Cycle) CVD_DEFINE_TRACE_VECTOR(Chaos::FReal, Position) CVD_DEFINE_TRACE_ROTATOR(Chaos::FReal, Rotation) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDNonSolverLocation) UE_TRACE_EVENT_FIELD(uint64, Cycle) CVD_DEFINE_TRACE_VECTOR(Chaos::FReal, Position) UE_TRACE_EVENT_FIELD(UE::Trace::WideString, DebugName) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDNonSolverTransform) UE_TRACE_EVENT_FIELD(uint64, Cycle) CVD_DEFINE_TRACE_VECTOR(Chaos::FReal, Position) CVD_DEFINE_TRACE_VECTOR(Chaos::FReal, Scale) CVD_DEFINE_TRACE_ROTATOR(Chaos::FReal, Rotation) UE_TRACE_EVENT_FIELD(UE::Trace::WideString, DebugName) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDNetworkTickOffset) UE_TRACE_EVENT_FIELD(int32, Offset) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_END() UE_TRACE_EVENT_BEGIN_EXTERN(ChaosVDLogger, ChaosVDDummyEvent) UE_TRACE_EVENT_FIELD(int32, SolverID) UE_TRACE_EVENT_END()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (struct FChaosVDQueryVisitStep ; struct FChaosVDCollisionResponseParams ; struct FChaosVDCollisionObjectQueryParams ; struct FChaosVDCollisionQueryParams ; enum class EChaosVDSceneQueryMode ; enum class EChaosVDSceneQueryType ; struct FCollisionObjectQueryParams ; struct FCollisionResponseParams ; struct FCollisionQueryParams ; enum ECollisionChannel : int ; namespace Chaos { namespace VisualDebugger { class FChaosVDSerializableNameTable ; } class FPBDCollisionConstraints ; class FPBDRigidsSOAs ; class FImplicitObject ; class FPhysicsSolverBase ; template<T,int d> class TGeometryParticleHandles ; class FPBDCollisionConstraint ; class FParticlePairMidPhase ; template<PayloadType,T,int d> class ISpatialAccelerationCollection ; } using FChaosVDImplicitObjectWrapper = FChaosVDImplicitObjectDataWrapper<Chaos::FImplicitObjectPtr,Chaos::FChaosArchive> ; using FChaosVDSerializableNameTable = Chaos::VisualDebugger::FChaosVDSerializableNameTable ; enum class EChaosVDTraceBinaryDataOptions { None = 0,ForceTrace = 1<<0 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EChaosVDTraceBinaryDataOptions)"
  },
  {
    "label": "TraceParticle()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TraceParticle(const Chaos::FGeometryParticleHandle* ParticleHandle)"
  },
  {
    "label": "TraceParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceParticles(const Chaos::TGeometryParticleHandles<Chaos::FReal, 3>& ParticleHandles)"
  },
  {
    "label": "TraceParticleDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceParticleDestroyed(const Chaos::FGeometryParticleHandle* ParticleHandle)"
  },
  {
    "label": "TraceParticlesSoA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceParticlesSoA(const Chaos::FPBDRigidsSOAs& ParticlesSoA, Chaos::FRigidClustering* ClusteringData = nullptr)"
  },
  {
    "label": "TraceParticlesView()",
    "kind": "Method",
    "detail": "Function (template<ParticleType> void)",
    "insertText": "TraceParticlesView(const Chaos::TParticleView<ParticleType>& ParticlesView)"
  },
  {
    "label": "TraceMidPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceMidPhase(const Chaos::FParticlePairMidPhase* MidPhase)"
  },
  {
    "label": "TraceMidPhasesFromCollisionConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceMidPhasesFromCollisionConstraints(Chaos::FPBDCollisionConstraints& InCollisionConstraints)"
  },
  {
    "label": "TraceJointsConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceJointsConstraints(Chaos::FPBDJointConstraints& InJointConstraints)"
  },
  {
    "label": "TraceCharacterGroundConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceCharacterGroundConstraints(Chaos::FCharacterGroundConstraintContainer& InConstraints)"
  },
  {
    "label": "TraceCollisionConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceCollisionConstraint(const Chaos::FPBDCollisionConstraint* CollisionConstraint)"
  },
  {
    "label": "TraceCollisionConstraintView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceCollisionConstraintView(TArrayView<Chaos::FPBDCollisionConstraint* const> CollisionConstraintView)"
  },
  {
    "label": "TraceConstraintsContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceConstraintsContainer(TConstArrayView<Chaos::FPBDConstraintContainer*> ConstraintContainersView)"
  },
  {
    "label": "TraceSolverFrameStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSolverFrameStart(const FChaosVDContext& ContextData, const FString& InDebugName, int32 FrameNumber = INDEX_NONE)"
  },
  {
    "label": "TraceSolverFrameEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSolverFrameEnd(const FChaosVDContext& ContextData)"
  },
  {
    "label": "TraceSolverStepStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSolverStepStart(FStringView StepName)"
  },
  {
    "label": "TraceSolverStepEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSolverStepEnd()"
  },
  {
    "label": "TraceSolverSimulationSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSolverSimulationSpace(const Chaos::FRigidTransform3& Transform)"
  },
  {
    "label": "TraceBinaryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceBinaryData(TConstArrayView<uint8> InData, FStringView TypeName, EChaosVDTraceBinaryDataOptions Options = EChaosVDTraceBinaryDataOptions::None)"
  },
  {
    "label": "TraceImplicitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceImplicitObject(FChaosVDImplicitObjectWrapper WrappedGeometryData)"
  },
  {
    "label": "InvalidateGeometryFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateGeometryFromCache(const Chaos::FImplicitObject* CachedGeometryToInvalidate)"
  },
  {
    "label": "TraceSceneQueryStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSceneQueryStart(const Chaos::FImplicitObject* InputGeometry, const FQuat& GeometryOrientation, const FVector& Start, const FVector& End, ECollisionChannel TraceChannel, FChaosVDCollisionQueryParams&& Params, FChaosVDCollisionResponseParams&& ResponseParams, FChaosVDCollisionObjectQueryParams&& ObjectParams, EChaosVDSceneQueryType QueryType, EChaosVDSceneQueryMode QueryMode, int32 SolverID, bool bIsRetry)"
  },
  {
    "label": "TraceSceneQueryVisit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSceneQueryVisit(FChaosVDQueryVisitStep&& InQueryVisitData)"
  },
  {
    "label": "TraceSceneAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceSceneAccelerationStructures(const Chaos::ISpatialAccelerationCollection<Chaos::FAccelerationStructureHandle, Chaos::FReal, 3>* InAccelerationCollection)"
  },
  {
    "label": "TraceNetworkTickOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceNetworkTickOffset(int32 TickOffset, int32 SolverID)"
  },
  {
    "label": "TraceDebugDrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceDebugDrawBox(const FBox& InBox, FName Tag = NAME_None, FColor Color = FColor::Blue, int32 SolverID = INDEX_NONE)"
  },
  {
    "label": "TraceDebugDrawLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceDebugDrawLine(const FVector& InStartLocation, const FVector& InEndLocation, FName Tag = NAME_None, FColor Color = FColor::Blue, int32 SolverID = INDEX_NONE)"
  },
  {
    "label": "TraceDebugDrawVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceDebugDrawVector(const FVector& InStartLocation, const FVector& InVector, FName Tag = NAME_None, FColor Color = FColor::Blue, int32 SolverID = INDEX_NONE)"
  },
  {
    "label": "TraceDebugDrawSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceDebugDrawSphere(const FVector& Center, float Radius, FName Tag = NAME_None, FColor Color = FColor::Blue, int32 SolverID = INDEX_NONE)"
  },
  {
    "label": "TraceDebugDrawImplicitObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceDebugDrawImplicitObject(const Chaos::FImplicitObject* Implicit, const FTransform& InParentTransform, FName Tag = NAME_None, FColor Color = FColor::Blue, int32 SolverID = INDEX_NONE)"
  },
  {
    "label": "GetSolverIDFromWorld()",
    "kind": "Method",
    "detail": "Function (template<WorldType> int32)",
    "insertText": "GetSolverIDFromWorld(WorldType* World)"
  },
  {
    "label": "GetSolverID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSolverID(Chaos::FPhysicsSolverBase& Solver)"
  },
  {
    "label": "ShouldPerformFullCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPerformFullCapture(int32 SolverID)"
  },
  {
    "label": "GetCVDContext()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "GetCVDContext(T& ObjectWithContext, FChaosVDContext& OutCVDContext)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (template<T> FString)",
    "insertText": "GetDebugName(T& ObjectWithDebugName)"
  },
  {
    "label": "IsTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTracing()"
  },
  {
    "label": "RegisterEventHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEventHandlers()"
  },
  {
    "label": "UnregisterEventHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterEventHandlers()"
  },
  {
    "label": "GetNameTableInstance()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FChaosVDSerializableNameTable>&)",
    "insertText": "GetNameTableInstance()"
  },
  {
    "label": "TraceParticleClusterChildData()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "TraceParticleClusterChildData(const Chaos::TParticleView<Chaos::TPBDRigidParticles<Chaos::FReal, 3>>& ParticlesView, Chaos::FRigidClustering* ClusteringData, const FChaosVDContext& CVDContextData)"
  },
  {
    "label": "TraceParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceParticle(Chaos::FGeometryParticleHandle* ParticleHandle, const FChaosVDContext& ContextData)"
  },
  {
    "label": "TraceNonSolverLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceNonSolverLocation(const FVector& InLocation, FStringView DebugNameID)"
  },
  {
    "label": "TraceNonSolverTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceNonSolverTransform(const FTransform& InTransform, FStringView DebugNameID)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "HandleRecordingStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRecordingStop()"
  },
  {
    "label": "TraceArchiveHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TraceArchiveHeader()"
  },
  {
    "label": "HandleRecordingStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRecordingStart()"
  },
  {
    "label": "PerformFullCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformFullCapture(EChaosVDFullCaptureFlags CaptureOptions)"
  },
  {
    "label": "SetupForFullCaptureIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupForFullCaptureIfNeeded(int32 SolverID, bool& bOutFullCaptureRequested)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 SolverID = INDEX_NONE ;)",
    "insertText": "if(World)"
  },
  {
    "label": "GetSolverID()",
    "kind": "Method",
    "detail": "Function (SolverID =)",
    "insertText": "GetSolverID(*Solver)"
  },
  {
    "label": "GetChaosVDContextData()",
    "kind": "Method",
    "detail": "Function (OutCVDContext = ObjectWithContext .)",
    "insertText": "GetChaosVDContextData()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_DEBUG_NAME return ObjectWithDebugName .)",
    "insertText": "GetDebugName().ToString()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "FString(\"COMPILED OUT\")"
  },
  {
    "label": "FChaosVDScopeSolverStep()",
    "kind": "Method",
    "detail": "Function (# endif } struct FChaosVDScopeSolverStep {)",
    "insertText": "FChaosVDScopeSolverStep(FStringView StepName)"
  },
  {
    "label": "CVD_TRACE_SOLVER_STEP_START()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_TRACE_SOLVER_STEP_START(StepName)"
  },
  {
    "label": "FChaosVDScopeSolverStep()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChaosVDScopeSolverStep()"
  },
  {
    "label": "CVD_TRACE_SOLVER_STEP_END()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_TRACE_SOLVER_STEP_END()"
  },
  {
    "label": "FChaosVDScopeSolverFrame()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct FChaosVDScopeSolverFrame {)",
    "insertText": "FChaosVDScopeSolverFrame(T& InSolverRef) : SolverRef(InSolverRef)"
  },
  {
    "label": "CVD_TRACE_SOLVER_START_FRAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_TRACE_SOLVER_START_FRAME(T, SolverRef)"
  },
  {
    "label": "FChaosVDScopeSolverFrame()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChaosVDScopeSolverFrame()"
  },
  {
    "label": "CVD_TRACE_SOLVER_END_FRAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_TRACE_SOLVER_END_FRAME(T, SolverRef)"
  },
  {
    "label": "FChaosVDScopeSceneQueryVisit()",
    "kind": "Method",
    "detail": "Function (} T& SolverRef ; } ; struct FChaosVDScopeSceneQueryVisit {)",
    "insertText": "FChaosVDScopeSceneQueryVisit(FChaosVDQueryVisitStep& InVisitData) : VisitData(InVisitData)"
  },
  {
    "label": "FChaosVDScopeSceneQueryVisit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChaosVDScopeSceneQueryVisit()"
  },
  {
    "label": "CVD_TRACE_SCENE_QUERY_VISIT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CVD_TRACE_SCENE_QUERY_VISIT(MoveTemp(VisitData))"
  },
  {
    "label": "WriteDataToBuffer()",
    "kind": "Method",
    "detail": "Function (} FChaosVDQueryVisitStep& VisitData ; } ; namespace Chaos::VisualDebugger { template<TDataToSerialize> void)",
    "insertText": "WriteDataToBuffer(TArray<uint8>& InOutDataBuffer, TDataToSerialize& Data)"
  },
  {
    "label": "MemWriterAr()",
    "kind": "Method",
    "detail": "Function (FChaosVDMemoryWriter)",
    "insertText": "MemWriterAr(InOutDataBuffer, FChaosVisualDebuggerTrace::GetNameTableInstance())"
  },
  {
    "label": "SetShouldSkipUpdateCustomVersion()",
    "kind": "Method",
    "detail": "Function (MemWriterAr .)",
    "insertText": "SetShouldSkipUpdateCustomVersion(true)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Serialize(MemWriterAr)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (TArchive)",
    "insertText": "Ar(MemWriterAr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Serialize(Ar)"
  }
]