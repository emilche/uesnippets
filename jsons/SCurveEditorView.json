[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "SCurveEditorPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorPanel"
  },
  {
    "label": "FCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveModel"
  },
  {
    "label": "FCurveEditorAxis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorAxis"
  },
  {
    "label": "SRetainerWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRetainerWidget"
  },
  {
    "label": "SCurveEditorView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveEditorViewAxisID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorViewAxisID"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "FCurveEditorPanelViewTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorPanelViewTracker"
  },
  {
    "label": "FCurveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveInfo"
  },
  {
    "label": "FAxisInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAxisInfo"
  },
  {
    "label": "FCachedValuesToCheck",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedValuesToCheck"
  },
  {
    "label": "FCurveEditorViewAxisID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / SortedMap . h \" # include \" CurveEditorScreenSpace . h \" # include \" CurveEditorTypes . h \" # include \" HAL / Platform . h \" # include \" Math / NumericLimits . h \" # include \" Math / TransformCalculus2D . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Templates / Less . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" CurveEditorSettings . h \" # include \" CurveDrawInfo . h \" class FCurveEditor ; class FSlateRect ; class FText ; class SCurveEditorPanel ; class FCurveModel ; class FCurveEditorAxis ; class SRetainerWidget ; class SCurveEditorView ; enum class ECurveEditorAxisOrientation : uint8 ; struct FCurveEditorViewAxisID {)",
    "insertText": "FCurveEditorViewAxisID() : Index(std::numeric_limits<uint8>::max())"
  },
  {
    "label": "FCurveEditorViewAxisID()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCurveEditorViewAxisID(uint8 InIndex) : Index(InIndex)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(FCurveEditorViewAxisID In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FCurveEditorViewAxisID A, FCurveEditorViewAxisID B)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (Index = static_cast<)",
    "insertText": "uint8(InIndex)"
  },
  {
    "label": "SCurveEditorView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SCurveEditorView()"
  },
  {
    "label": "GetViewSpace()",
    "kind": "Method",
    "detail": "Function (FCurveEditorScreenSpace)",
    "insertText": "GetViewSpace()"
  },
  {
    "label": "GetViewSpace()",
    "kind": "Method",
    "detail": "Function (FCurveEditorScreenSpace)",
    "insertText": "GetViewSpace(const FName& InHorizontalAxis, const FName& InVerticalAxis)"
  },
  {
    "label": "GetCurveSpace()",
    "kind": "Method",
    "detail": "Function (FCurveEditorScreenSpace)",
    "insertText": "GetCurveSpace(FCurveModelID CurveID)"
  },
  {
    "label": "GetHorizontalAxisSpace()",
    "kind": "Method",
    "detail": "Function (FCurveEditorScreenSpaceH)",
    "insertText": "GetHorizontalAxisSpace(FCurveEditorViewAxisID ID)"
  },
  {
    "label": "GetVerticalAxisSpace()",
    "kind": "Method",
    "detail": "Function (FCurveEditorScreenSpaceV)",
    "insertText": "GetVerticalAxisSpace(FCurveEditorViewAxisID ID)"
  },
  {
    "label": "GetAxisForCurve()",
    "kind": "Method",
    "detail": "Function (FCurveEditorViewAxisID)",
    "insertText": "GetAxisForCurve(FCurveModelID CurveID, ECurveEditorAxisOrientation AxisOrientation)"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurveEditorAxis>)",
    "insertText": "GetAxis(FCurveEditorViewAxisID ID, ECurveEditorAxisOrientation AxisOrientation)"
  },
  {
    "label": "ShouldAutoSize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAutoSize()"
  },
  {
    "label": "NumCurves()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumCurves()"
  },
  {
    "label": "GetInputBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetInputBounds(double& OutInputMin, double& OutInputMax)"
  },
  {
    "label": "SetInputBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputBounds(double InInputMin, double InInputMax, FCurveEditorViewAxisID AxisID = FCurveEditorViewAxisID())"
  },
  {
    "label": "Zoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Zoom(const FVector2D& Amount)"
  },
  {
    "label": "ZoomAround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomAround(const FVector2D& Amount, double InputOrigin, double OutputOrigin)"
  },
  {
    "label": "CheckCacheAndInvalidateIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckCacheAndInvalidateIfNeeded()"
  },
  {
    "label": "UpdateViewToTransformCurves()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateViewToTransformCurves(double InputMin, double InputMax)"
  },
  {
    "label": "FrameVertical()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "FrameVertical(double InOutputMin, double InOutputMax, FCurveEditorViewAxisID AxisID = FCurveEditorViewAxisID())"
  },
  {
    "label": "FrameHorizontal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameHorizontal(double InInputMin, double InInputMax, FCurveEditorViewAxisID AxisID = FCurveEditorViewAxisID())"
  },
  {
    "label": "GetPointsWithinWidgetRange()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "GetPointsWithinWidgetRange(const FSlateRect& WidgetRectangle, TArray<FCurvePointHandle>* OutPoints)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "OnCurveListChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCurveListChanged()"
  },
  {
    "label": "IsTimeSnapEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTimeSnapEnabled()"
  },
  {
    "label": "GetGridLinesY()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetGridLinesY(TSharedRef<const FCurveEditor> CurveEditor, TArray<float>& MajorGridLines, TArray<float>& MinorGridLines, TArray<FText>* MajorGridLabels = nullptr)"
  },
  {
    "label": "GetCurveDrawParams()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "GetCurveDrawParams(TArray<FCurveDrawParams>& OutDrawParams)"
  },
  {
    "label": "GetCurveDrawParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurveDrawParam(TSharedPtr<FCurveEditor>& CurveEditor, const FCurveModelID& ModelID, FCurveModel* CurveModel, FCurveDrawParams& OutDrawParam)"
  },
  {
    "label": "RefreshRetainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshRetainer()"
  },
  {
    "label": "UpdateCurveViewTransformsFromModels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurveViewTransformsFromModels()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float LayoutScaleMultiplier)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "AddCurve()",
    "kind": "Method",
    "detail": "Function (private : struct FCurveEditorPanelViewTracker ; void)",
    "insertText": "AddCurve(FCurveModelID CurveID)"
  },
  {
    "label": "RemoveCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurve(FCurveModelID CurveID)"
  },
  {
    "label": "UpdateCustomAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomAxes()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (public : uint8 bPinned : 1 ; uint8 bInteractive : 1 ; uint8 bFixedOutputBounds : 1 ; uint8 bAutoSize : 1 ; uint8 bAllowEmpty : 1 ; uint8 bAllowModelViewTransforms : 1 ; uint8 bUpdateModelViewTransforms : 1 ; uint8 bNeedsDefaultGridLinesH : 1 ; uint8 bNeedsDefaultGridLinesV : 1 ; int8 SortBias = 0 ; ECurveEditorViewID ViewTypeID = ECurveEditorViewID::Invalid ; int32 RelativeOrder = TNumericLimits<int32)",
    "insertText": "Max()"
  },
  {
    "label": "GetHorizontalAxisInfo()",
    "kind": "Method",
    "detail": "Function (int32 MaximumCapacity = 0 ; TAttribute<float> FixedHeight ; protected : TWeakPtr<FCurveEditor> WeakCurveEditor ; double OutputMin = 0 . 0 ; double OutputMax = 1 . 0 ; struct FCurveInfo { int32 CurveIndex ; FTransform2d ViewToCurveTransform ; FCurveEditorViewAxisID HorizontalAxis ; FCurveEditorViewAxisID VerticalAxis ; } ; TSortedMap<FCurveModelID,FCurveInfo,TInlineAllocator<1>> CurveInfoByID ; struct FAxisInfo { TSharedPtr<FCurveEditorAxis> Axis ; double Min = 0 . 0 ; double Max = 1 . 0 ; int32 UseCount = 0 ; } ; TArray<FAxisInfo> CustomHorizontalAxes ; TArray<FAxisInfo> CustomVerticalAxes ; FAxisInfo&)",
    "insertText": "GetHorizontalAxisInfo(FCurveEditorViewAxisID ID)"
  }
]