[
  {
    "label": "ERotationGridMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERotationGridMode"
  },
  {
    "label": "EWASDType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWASDType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EMeasuringToolUnits",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMeasuringToolUnits"
  },
  {
    "label": "FLevelEditorViewportInstanceSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelEditorViewportInstanceSettings"
  },
  {
    "label": "FLevelEditorViewportInstanceSettingsKeyValuePair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelEditorViewportInstanceSettingsKeyValuePair"
  },
  {
    "label": "FSnapToSurfaceSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSnapToSurfaceSettings"
  },
  {
    "label": "FLevelEditorViewporEditorViews",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelEditorViewporEditorViews"
  },
  {
    "label": "ULevelEditorViewportSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelEditorViewportSettings"
  },
  {
    "label": "EAspectRatioAxisConstraint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAspectRatioAxisConstraint"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / SoftObjectPath . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" Engine / World . h \" # include \" Viewports . h \" # include \" Editor / UnrealEdTypes . h \" # include \" LevelEditorViewportSettings . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (WASD_Always)",
    "insertText": "UMETA(DisplayName=\"Use WASD for Camera Controls\"), WASD_RMBOnly UMETA(DisplayName=\"Use WASD only when a Mouse Button is Pressed\"), WASD_Never UMETA(DisplayName=\"Never use WASD for Camera Controls\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (IgnoreCtrl)",
    "insertText": "UMETA(DisplayName = \"Ignore Ctrl key (allow but don't require Ctrl held)\"), RequireCtrl UMETA(DisplayName = \"Require Ctrl held for tools\"), RequireNoCtrl UMETA(DisplayName = \"Require Ctrl is not held\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MeasureUnits_Centimeters)",
    "insertText": "UMETA(DisplayName=\"Centimeters\"), MeasureUnits_Meters UMETA(DisplayName=\"Meters\"), MeasureUnits_Kilometers UMETA(DisplayName=\"Kilometers\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (UseSystemSetting)",
    "insertText": "UMETA(DisplayName = \"Use system setting\"), Standard UMETA(DisplayName = \"Standard\"), Natural UMETA(DisplayName = \"Natural\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Unknown,Base,Normal,Specular,Emissive,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FLevelEditorViewportInstanceSettings() : ViewportType(LVT_Perspective) , PerspViewModeIndex(VMI_Lit) , OrthoViewModeIndex(VMI_BrushWireframe) , EditorShowFlagsString() , GameShowFlagsString() , BufferVisualizationMode() , NaniteVisualizationMode() , LumenVisualizationMode() , SubstrateVisualizationMode() , GroomVisualizationMode() , VirtualShadowMapVisualizationMode() , GPUSkinCacheVisualizationMode() , ExposureSettings() , FOVAngle(EditorViewportDefs::DefaultPerspectiveFOVAngle) , FarViewPlane(0) , bIsRealtime(false) , bShowFPS_DEPRECATED(false) , bShowOnScreenStats(true) , bShowFullToolbar(true) , bAllowCinematicControl(true)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(config)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSnapToSurfaceSettings() : bEnabled(false) , SnapOffsetExtent(0.f) , bSnapRotation(true)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(config=EditorPerProjectUserSettings, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, config, Category=Controls)"
  },
  {
    "label": "GetViewportInstanceSettings()",
    "kind": "Method",
    "detail": "Function (public : const FLevelEditorViewportInstanceSettings*)",
    "insertText": "GetViewportInstanceSettings(const FString& InConfigName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FLevelEditorViewportInstanceSettingsKeyValuePair& ConfigData =* It ;)",
    "insertText": "if(ConfigData.ConfigName == InConfigName)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bWasFound = false ;)",
    "insertText": "for(auto It = PerInstanceSettings.CreateIterator(); It; ++It)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ConfigData . ConfigSettings = InConfigSettings ; bWasFound = true ; break ; } })",
    "insertText": "if(!bWasFound)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FLevelEditorViewportInstanceSettingsKeyValuePair ConfigData ; ConfigData . ConfigName = InConfigName ; ConfigData . ConfigSettings = InConfigSettings ; PerInstanceSettings .)",
    "insertText": "Add(ConfigData)"
  },
  {
    "label": "PostEditChange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PostEditChange()"
  },
  {
    "label": "UsePercentageBasedScaling()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsePercentageBasedScaling()"
  },
  {
    "label": "OnSettingChanged()",
    "kind": "Method",
    "detail": "Function (FSettingChangedEvent&)",
    "insertText": "OnSettingChanged()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  }
]