[
  {
    "label": "IHeterogeneousVolumeInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHeterogeneousVolumeInterface"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FRayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingScene"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewState"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FVirtualShadowMapArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArray"
  },
  {
    "label": "FVisibleLightInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibleLightInfo"
  },
  {
    "label": "IHeterogeneousVolumeInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHeterogeneousVolumeInterface"
  },
  {
    "label": "FMaterialShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderParameters"
  },
  {
    "label": "FRDGTextureDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGTextureDesc"
  },
  {
    "label": "FSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTextures"
  },
  {
    "label": "FPersistentPrimitiveIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentPrimitiveIndex"
  },
  {
    "label": "FVolumetricMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricMeshBatch"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLODInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODInfo"
  },
  {
    "label": "FVoxelDataPacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVoxelDataPacked"
  },
  {
    "label": "FTopLevelGridBitmaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelGridBitmaskData"
  },
  {
    "label": "FTopLevelGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelGridData"
  },
  {
    "label": "FScalarGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScalarGridData"
  },
  {
    "label": "FVectorGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorGridData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVoxelGridBuildOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVoxelGridBuildOptions"
  },
  {
    "label": "FAdaptiveFrustumGridParameterCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdaptiveFrustumGridParameterCache"
  },
  {
    "label": "FAdaptiveOrthoGridParameterCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdaptiveOrthoGridParameterCache"
  },
  {
    "label": "FAVSMLinkedListPackedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAVSMLinkedListPackedData"
  },
  {
    "label": "FAVSMIndirectionPackedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAVSMIndirectionPackedData"
  },
  {
    "label": "FAVSMSamplePackedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAVSMSamplePackedData"
  },
  {
    "label": "FAdaptiveVolumetricShadowMapParameterCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdaptiveVolumetricShadowMapParameterCache"
  },
  {
    "label": "FAdaptiveVolumetricShadowMapState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdaptiveVolumetricShadowMapState"
  },
  {
    "label": "ShouldRenderHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderHeterogeneousVolumes(const FScene* Scene)"
  },
  {
    "label": "ShouldRenderHeterogeneousVolumesForAnyView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderHeterogeneousVolumesForAnyView(const TArrayView<FViewInfo>& Views)"
  },
  {
    "label": "ShouldRenderHeterogeneousVolumesForView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderHeterogeneousVolumesForView(const FViewInfo& View)"
  },
  {
    "label": "ShouldRenderHeterogeneousVolumesAsHoldoutForView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderHeterogeneousVolumesAsHoldoutForView(const FViewInfo& View)"
  },
  {
    "label": "DoesMaterialShaderSupportHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMaterialShaderSupportHeterogeneousVolumes(const FMaterialShaderParameters& Parameters)"
  },
  {
    "label": "DoesMaterialShaderSupportHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMaterialShaderSupportHeterogeneousVolumes(const FMaterial& Material)"
  },
  {
    "label": "ShouldRenderMeshBatchWithHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderMeshBatchWithHeterogeneousVolumes(\n\tconst FMeshBatch* Mesh,\n\tconst FPrimitiveSceneProxy* Proxy,\n\tERHIFeatureLevel::Type FeatureLevel\n)"
  },
  {
    "label": "ShouldCompositeHeterogeneousVolumesWithTranslucency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompositeHeterogeneousVolumesWithTranslucency()"
  },
  {
    "label": "ShouldHeterogeneousVolumesCastShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldHeterogeneousVolumesCastShadows()"
  },
  {
    "label": "GetHeterogeneousVolumesComposition()",
    "kind": "Method",
    "detail": "Function (EHeterogeneousVolumesCompositionType)",
    "insertText": "GetHeterogeneousVolumesComposition()"
  },
  {
    "label": "GetVolumeResolution()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GetVolumeResolution(const IHeterogeneousVolumeInterface*)"
  },
  {
    "label": "GetLightingCacheResolution()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GetLightingCacheResolution(const IHeterogeneousVolumeInterface*, float LODFactor)"
  },
  {
    "label": "GetAmbientOcclusionResolution()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GetAmbientOcclusionResolution(const IHeterogeneousVolumeInterface*, float LODFactor)"
  },
  {
    "label": "GetDownsampleFactor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDownsampleFactor()"
  },
  {
    "label": "GetScaledViewRect()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetScaledViewRect(FIntRect ViewRect)"
  },
  {
    "label": "GetShadowStepSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadowStepSize()"
  },
  {
    "label": "GetMaxTraceDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxTraceDistance()"
  },
  {
    "label": "GetMaxShadowTraceDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxShadowTraceDistance()"
  },
  {
    "label": "GetStepSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStepSize()"
  },
  {
    "label": "GetMaxStepCount()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxStepCount()"
  },
  {
    "label": "GetMinimumVoxelSizeInFrustum()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinimumVoxelSizeInFrustum()"
  },
  {
    "label": "GetMinimumVoxelSizeOutsideFrustum()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinimumVoxelSizeOutsideFrustum()"
  },
  {
    "label": "GetShadingRateForFrustumGrid()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadingRateForFrustumGrid()"
  },
  {
    "label": "GetShadingRateForOrthoGrid()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadingRateForOrthoGrid()"
  },
  {
    "label": "GetShadowMode()",
    "kind": "Method",
    "detail": "Function (EShadowMode)",
    "insertText": "GetShadowMode()"
  },
  {
    "label": "GetShadowMapResolution()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetShadowMapResolution()"
  },
  {
    "label": "GetShadingRateForShadows()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadingRateForShadows()"
  },
  {
    "label": "GetOutOfFrustumShadingRateForShadows()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOutOfFrustumShadingRateForShadows()"
  },
  {
    "label": "EnableJitterForShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableJitterForShadows()"
  },
  {
    "label": "GetStepSizeForShadows()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStepSizeForShadows()"
  },
  {
    "label": "GetShadowMaxSampleCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetShadowMaxSampleCount()"
  },
  {
    "label": "GetShadowAbsoluteErrorThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadowAbsoluteErrorThreshold()"
  },
  {
    "label": "GetShadowRelativeErrorThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadowRelativeErrorThreshold()"
  },
  {
    "label": "UseAVSMCompression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAVSMCompression()"
  },
  {
    "label": "GetCameraDownsampleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCameraDownsampleFactor()"
  },
  {
    "label": "GetMipLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMipLevel()"
  },
  {
    "label": "GetDebugMode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDebugMode()"
  },
  {
    "label": "GetLightingCacheMode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLightingCacheMode()"
  },
  {
    "label": "GetSparseVoxelMipBias()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSparseVoxelMipBias()"
  },
  {
    "label": "GetBottomLevelGridResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBottomLevelGridResolution()"
  },
  {
    "label": "GetIndirectionGridResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndirectionGridResolution()"
  },
  {
    "label": "GetStochasticFilteringMode()",
    "kind": "Method",
    "detail": "Function (EStochasticFilteringMode)",
    "insertText": "GetStochasticFilteringMode()"
  },
  {
    "label": "ShouldJitter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldJitter()"
  },
  {
    "label": "ShouldRefineSparseVoxels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRefineSparseVoxels()"
  },
  {
    "label": "UseHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracing()"
  },
  {
    "label": "UseIndirectLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseIndirectLighting()"
  },
  {
    "label": "UseSparseVoxelPipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSparseVoxelPipeline()"
  },
  {
    "label": "UseSparseVoxelPerTileCulling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSparseVoxelPerTileCulling()"
  },
  {
    "label": "UseLightingCacheForInscattering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLightingCacheForInscattering()"
  },
  {
    "label": "UseLightingCacheForTransmittance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLightingCacheForTransmittance()"
  },
  {
    "label": "UseAdaptiveVolumetricShadowMapForSelfShadowing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAdaptiveVolumetricShadowMapForSelfShadowing(const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "ShouldApplyHeightFog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyHeightFog()"
  },
  {
    "label": "ShouldApplyVolumetricFog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyVolumetricFog()"
  },
  {
    "label": "SupportsOverlappingVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsOverlappingVolumes()"
  },
  {
    "label": "EnableAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableAmbientOcclusion()"
  },
  {
    "label": "UseExistenceMask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseExistenceMask()"
  },
  {
    "label": "UseAnalyticDerivatives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAnalyticDerivatives()"
  },
  {
    "label": "GetApplyFogInscattering()",
    "kind": "Method",
    "detail": "Function (EFogMode)",
    "insertText": "GetApplyFogInscattering()"
  },
  {
    "label": "ShouldWriteVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWriteVelocity()"
  },
  {
    "label": "EnableIndirectionGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableIndirectionGrid()"
  },
  {
    "label": "EnableLinearInterpolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableLinearInterpolation()"
  },
  {
    "label": "GetVoxelCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVoxelCount(FIntVector VolumeResolution)"
  },
  {
    "label": "GetVoxelCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVoxelCount(const FRDGTextureDesc& TextureDesc)"
  },
  {
    "label": "GetMipVolumeResolution()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GetMipVolumeResolution(FIntVector VolumeResolution, uint32 MipLevel)"
  },
  {
    "label": "CalcLODFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLODFactor(float LOD)"
  },
  {
    "label": "CalcLODFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLODFactor(const HeterogeneousVolumes::FLODInfo& LODInfo, const IHeterogeneousVolumeInterface* HeterogeneousVolume)"
  },
  {
    "label": "CalcLODFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLODFactor(const FSceneView& View, const IHeterogeneousVolumeInterface* HeterogeneousVolume)"
  },
  {
    "label": "CalcLOD()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLOD(const HeterogeneousVolumes::FLODInfo& LODInfo, const IHeterogeneousVolumeInterface* HeterogeneousVolume)"
  },
  {
    "label": "CalcLOD()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLOD(const FSceneView& View, const IHeterogeneousVolumeInterface* HeterogeneousVolume)"
  },
  {
    "label": "IsHoldout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHoldout(const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface)"
  },
  {
    "label": "IsDynamicShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicShadow(const FVisibleLightInfo* VisibleLightInfo)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FVolumetricMeshBatch& MeshBatch)"
  },
  {
    "label": "BuildOrthoVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildOrthoVoxelGrid(\n\tFRDGBuilder& GraphBuilder,\n\tconst FScene* Scene,\n\t/*const*/ TArray<FViewInfo>& Views,\n\tconst TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos,\n\tconst FVoxelGridBuildOptions& BuildOptions,\n\tTRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoVoxelGridUniformBuffer\n)"
  },
  {
    "label": "BuildFrustumVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFrustumVoxelGrid(\n\tFRDGBuilder& GraphBuilder,\n\tconst FScene* Scene,\n\tconst FViewInfo& View,\n\tconst FVoxelGridBuildOptions& BuildOptions,\n\tTRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumVoxelGridUniformBuffer\n)"
  },
  {
    "label": "ExtractFrustumVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractFrustumVoxelGridUniformBuffer(\n\tFRDGBuilder& GraphBuilder,\n\tconst TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer,\n\tFAdaptiveFrustumGridParameterCache& AdaptiveFrustumGridParameterCache\n)"
  },
  {
    "label": "RegisterExternalFrustumVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalFrustumVoxelGridUniformBuffer(\n\tFRDGBuilder& GraphBuilder,\n\tconst FAdaptiveFrustumGridParameterCache& AdaptiveFrustumGridParameterCache,\n\tTRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer\n)"
  },
  {
    "label": "ExtractOrthoVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractOrthoVoxelGridUniformBuffer(\n\tFRDGBuilder& GraphBuilder,\n\tconst TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer,\n\tFAdaptiveOrthoGridParameterCache& AdaptiveOrthoGridParameterCache\n)"
  },
  {
    "label": "RegisterExternalOrthoVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalOrthoVoxelGridUniformBuffer(\n\tFRDGBuilder& GraphBuilder,\n\tconst FAdaptiveOrthoGridParameterCache& AdaptiveOrthoGridParameterCache,\n\tTRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer\n)"
  },
  {
    "label": "GetAdaptiveVolumetricShadowMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>)",
    "insertText": "GetAdaptiveVolumetricShadowMapUniformBuffer(\n\t\tFRDGBuilder& GraphBuilder,\n\t\tFSceneViewState* ViewState,\n\t\tconst FLightSceneInfo* LightSceneInfo\n\t)"
  },
  {
    "label": "DestroyAdaptiveVolumetricShadowMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAdaptiveVolumetricShadowMapUniformBuffer(\n\t\tTRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>& AdaptiveVolumetricShadowMapUniformBuffer\n\t)"
  },
  {
    "label": "GetAdaptiveVolumetricCameraMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>)",
    "insertText": "GetAdaptiveVolumetricCameraMapUniformBuffer(\n\t\tFRDGBuilder& GraphBuilder,\n\t\tFSceneViewState* ViewState\n\t)"
  },
  {
    "label": "GetAdaptiveVolumetricCameraMapParameters()",
    "kind": "Method",
    "detail": "Function (FAdaptiveVolumetricShadowMapUniformBufferParameters)",
    "insertText": "GetAdaptiveVolumetricCameraMapParameters(\n\t\tFRDGBuilder& GraphBuilder,\n\t\tFSceneViewState* ViewState\n\t)"
  },
  {
    "label": "CreateEmptyAdaptiveVolumetricShadowMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>)",
    "insertText": "CreateEmptyAdaptiveVolumetricShadowMapUniformBuffer(\n\t\tFRDGBuilder& GraphBuilder\n\t)"
  },
  {
    "label": "GetFrustumVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>)",
    "insertText": "GetFrustumVoxelGridUniformBuffer(\n\t\tFRDGBuilder& GraphBuilder,\n\t\tFSceneViewState* ViewState\n\t)"
  },
  {
    "label": "GetOrthoVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>)",
    "insertText": "GetOrthoVoxelGridUniformBuffer(\n\t\tFRDGBuilder& GraphBuilder,\n\t\tFSceneViewState* ViewState\n\t)"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender(FScene& Scene, TArray<FViewInfo>& Views)"
  },
  {
    "label": "CreateAdaptiveVolumetricShadowMapUniformBuffers()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FAdaptiveVolumetricShadowMaps>)",
    "insertText": "CreateAdaptiveVolumetricShadowMapUniformBuffers(\n\tFRDGBuilder& GraphBuilder,\n\tFSceneViewState* ViewState,\n\tconst FLightSceneInfo* LightSceneInfo\n)"
  },
  {
    "label": "RenderWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderWithLiveShading(\n\tFRDGBuilder& GraphBuilder,\n\tconst FSceneTextures& SceneTextures,\n\tconst FScene* Scene,\n\tconst FViewInfo& View, int32 ViewIndex,\n\t// Shadow data\n\tTArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos,\n\tconst FVirtualShadowMapArray& VirtualShadowMapArray,\n\t// Object data\n\tconst IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface,\n\tconst FMaterialRenderProxy* MaterialRenderProxy,\n\tconst FPersistentPrimitiveIndex &PersistentPrimitiveIndex,\n\tconst FBoxSphereBounds LocalBoxSphereBounds,\n\t// Transmittance acceleration\n\tFRDGTextureRef LightingCacheTexture,\n\t// Output\n\tFRDGTextureRef& HeterogeneousVolumeRadiance,\n\tFRDGTextureRef& HeterogeneousVolumeHoldout\n)"
  },
  {
    "label": "RenderWithPreshading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderWithPreshading(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FSceneTextures& SceneTextures,\n\tFScene* Scene,\n\tFViewInfo& View, int32 ViewIndex,\n\t// Shadow data\n\tTArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos,\n\tconst FVirtualShadowMapArray& VirtualShadowMapArray,\n\t// Object data\n\tconst IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface,\n\tconst FMaterialRenderProxy* MaterialRenderProxy,\n\tconst FPersistentPrimitiveIndex &PersistentPrimitiveIndex,\n\tconst FBoxSphereBounds LocalBoxSphereBounds,\n\t// Transmittance acceleration\n\tFRDGTextureRef LightingCacheTexture,\n\t// Output\n\tFRDGTextureRef& HeterogeneousVolumeRadiance\n)"
  },
  {
    "label": "RenderTransmittanceWithVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderTransmittanceWithVoxelGrid(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FSceneTextures& SceneTextures,\n\tFScene* Scene,\n\tFViewInfo& View,\n\tconst TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer,\n\tconst TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer,\n\t// Output\n\tFRDGTextureRef& HeterogeneousVolumeRadiance\n)"
  },
  {
    "label": "RenderAdaptiveVolumetricShadowMapWithVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAdaptiveVolumetricShadowMapWithVoxelGrid(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FSceneTextures& SceneTextures,\n\tFScene* Scene,\n\tFViewInfo& View,\n\t// Shadow data\n\tTArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos,\n\tconst FVirtualShadowMapArray& VirtualShadowMapArray,\n\t// Volume data\n\tconst TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer,\n\tconst TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer\n)"
  },
  {
    "label": "RenderAdaptiveVolumetricShadowMapWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAdaptiveVolumetricShadowMapWithLiveShading(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FSceneTextures& SceneTextures,\n\tFScene* Scene,\n\tFViewInfo& View,\n\t// Light data\n\tTArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos\n)"
  },
  {
    "label": "RenderAdaptiveVolumetricCameraMapWithVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAdaptiveVolumetricCameraMapWithVoxelGrid(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FSceneTextures& SceneTextures,\n\tFScene* Scene,\n\tFViewInfo& View,\n\t// Volume data\n\tconst TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer,\n\tconst TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer\n)"
  },
  {
    "label": "RenderAdaptiveVolumetricCameraMapWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAdaptiveVolumetricCameraMapWithLiveShading(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FSceneTextures& SceneTextures,\n\tFScene* Scene,\n\tFViewInfo& View\n)"
  },
  {
    "label": "CompressVolumetricShadowMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressVolumetricShadowMap(\n\tFRDGBuilder& GraphBuilder,\n\tFViewInfo& View,\n\tFIntVector GroupCount,\n\t// Input\n\tFIntPoint ShadowMapResolution,\n\tuint32 MaxSampleCount,\n\tFRDGBufferRef VolumetricShadowLinkedListBuffer,\n\t// Output\n\tFRDGBufferRef& VolumetricShadowIndirectionBuffer,\n\tFRDGBufferRef& VolumetricShadowTransmittanceBuffer\n)"
  },
  {
    "label": "CombineVolumetricShadowMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineVolumetricShadowMap(\n\tFRDGBuilder& GraphBuilder,\n\tFViewInfo& View,\n\tFIntVector GroupCount,\n\t// Input\n\tuint32 LightType,\n\tFIntPoint ShadowMapResolution,\n\tuint32 MaxSampleCount,\n\tFRDGBufferRef VolumetricShadowLinkedListBuffer0,\n\tFRDGBufferRef VolumetricShadowLinkedListBuffer1,\n\t// Output\n\tFRDGBufferRef& VolumetricShadowLinkedListBuffer\n)"
  },
  {
    "label": "CreateAdaptiveVolumetricShadowMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAdaptiveVolumetricShadowMapUniformBuffer(\n\tFRDGBuilder& GraphBuilder,\n\tconst FVector3f& TranslatedWorldOrigin,\n\tconst FVector4f& TranslatedWorldPlane,\n\tconst FMatrix44f* TranslatedWorldToShadow,\n\tFIntPoint VolumetricShadowMapResolution,\n\tint32 NumShadowMatrices,\n\tuint32 VolumetricShadowMapMaxSampleCount,\n\tbool bIsDirectionalLight,\n\tFRDGBufferRef VolumetricShadowMapLinkedListBuffer,\n\tFRDGBufferRef VolumetricShadowMapIndirectionBuffer,\n\tFRDGBufferRef VolumetricShadowMapSampleBuffer,\n\tTRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>& AdaptiveVolumetricShadowMapUniformBuffer\n)"
  },
  {
    "label": "RenderSingleScatteringWithVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSingleScatteringWithVoxelGrid(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FSceneTextures& SceneTextures,\n\tFScene* Scene,\n\tFViewInfo& View,\n\t// Shadow data\n\tTArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos,\n\tconst FVirtualShadowMapArray& VirtualShadowMapArray,\n\t// Volume data\n\tconst TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer,\n\tconst TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer,\n\t// Output\n\tFRDGTextureRef& HeterogeneousVolumeRadiance\n)"
  },
  {
    "label": "ComputeHeterogeneousVolumeBakeMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHeterogeneousVolumeBakeMaterial(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FScene* Scene,\n\tconst FViewInfo& View,\n\t// Object data\n\tconst IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface,\n\tconst FMaterialRenderProxy* MaterialRenderProxy,\n\tconst FPersistentPrimitiveIndex &PersistentPrimitiveIndex,\n\tconst FBoxSphereBounds LocalBoxSphereBounds,\n\t// Volume data\n\tFIntVector VolumeResolution,\n\t// Output\n\tFRDGTextureRef& HeterogeneousVolumeExtinctionTexture,\n\tFRDGTextureRef& HeterogeneousVolumeEmissionTexture,\n\tFRDGTextureRef& HeterogeneousVolumeAlbedoTexture\n)"
  },
  {
    "label": "CopyTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTexture3D(\n\tFRDGBuilder& GraphBuilder,\n\tconst FViewInfo& View,\n\tFRDGTextureRef Texture,\n\tuint32 InputMipLevel,\n\tFRDGTextureRef& OutputTexture\n)"
  },
  {
    "label": "GenerateSparseVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSparseVoxels(\n\tFRDGBuilder& GraphBuilder,\n\tconst FViewInfo& View,\n\tFRDGTextureRef VoxelMinTexture,\n\tFIntVector VolumeResolution,\n\tuint32 MipLevel,\n\tFRDGBufferRef& NumVoxelsBuffer,\n\tFRDGBufferRef& VoxelBuffer\n)"
  },
  {
    "label": "RenderExistenceMaskWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderExistenceMaskWithLiveShading(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FScene* Scene,\n\tconst FViewInfo& View,\n\tconst FSceneTextures& SceneTextures,\n\t// Object data\n\tconst IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface,\n\tconst FMaterialRenderProxy* DefaultMaterialRenderProxy,\n\tFPersistentPrimitiveIndex PersistentPrimitiveIndex,\n\tconst FBoxSphereBounds LocalBoxSphereBounds,\n\tFIntVector ExistenceMaskTextureResolution,\n\t// Output\n\tFRDGTextureRef& ExistenceMaskTexture\n)"
  },
  {
    "label": "DilateExistenceMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DilateExistenceMask(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FScene* Scene,\n\tconst FViewInfo& View,\n\t// Existence texture data\n\tFRDGTextureRef ExistenceMaskTexture,\n\tFIntVector ExistenceMaskTextureResolution,\n\t// Output\n\tFRDGTextureRef& DilatedExistenceTexture\n)"
  },
  {
    "label": "RenderAmbientOcclusionWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAmbientOcclusionWithLiveShading(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FScene* Scene,\n\tconst FViewInfo& View,\n\tconst FSceneTextures& SceneTextures,\n\t// Object data\n\tconst IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface,\n\tconst FMaterialRenderProxy* DefaultMaterialRenderProxy,\n\tFPersistentPrimitiveIndex PersistentPrimitiveIndex,\n\tconst FBoxSphereBounds LocalBoxSphereBounds,\n\t// Output\n\tFRDGTextureRef& AmbientOcclusionTexture\n)"
  },
  {
    "label": "GenerateRayTracingGeometryInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateRayTracingGeometryInstance(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FScene* Scene,\n\tconst FViewInfo& View,\n\t// Object data\n\tconst IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface,\n\t// Sparse voxel data\n\tFRDGBufferRef NumVoxelsBuffer,\n\tTRDGUniformBufferRef<FSparseVoxelUniformBufferParameters> SparseVoxelUniformBuffer,\n\t// Output\n\tTArray<FRayTracingGeometryRHIRef, SceneRenderingAllocator>& RayTracingGeometries,\n\tTArray<FMatrix>& RayTracingTransforms\n)"
  },
  {
    "label": "GenerateRayTracingScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateRayTracingScene(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FScene* Scene,\n\tconst FViewInfo& View,\n\t// Ray tracing data\n\tTConstArrayView<FRayTracingGeometryRHIRef> RayTracingGeometries,\n\tTConstArrayView<FMatrix> RayTracingTransforms,\n\t// Output\n\tFRayTracingScene& RayTracingScene\n)"
  },
  {
    "label": "RenderLightingCacheWithPreshadingHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLightingCacheWithPreshadingHardwareRayTracing(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FScene* Scene,\n\tconst FViewInfo& View, int32 ViewIndex,\n\tconst FSceneTextures& SceneTextures,\n\t// Light data\n\tbool bApplyEmissionAndTransmittance,\n\tbool bApplyDirectLighting,\n\tbool bApplyShadowTransmittance,\n\tuint32 LightType,\n\tconst FLightSceneInfo* LightSceneInfo,\n\t// Shadow data\n\tconst FVisibleLightInfo* VisibleLightInfo,\n\tconst FVirtualShadowMapArray& VirtualShadowMapArray,\n\t// Object data\n\tconst IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface,\n\t// Sparse voxel data\n\tTRDGUniformBufferRef<FSparseVoxelUniformBufferParameters> SparseVoxelUniformBuffer,\n\t// Ray tracing data\n\tFRayTracingScene& RayTracingScene,\n\tTConstArrayView<FRayTracingGeometryRHIRef> RayTracingGeometries,\n\t// Output\n\tFRDGTextureRef& LightingCacheTexture\n)"
  },
  {
    "label": "RenderSingleScatteringWithPreshadingHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSingleScatteringWithPreshadingHardwareRayTracing(\n\tFRDGBuilder& GraphBuilder,\n\t// Scene data\n\tconst FScene* Scene,\n\tconst FViewInfo& View, int32 ViewIndex,\n\tconst FSceneTextures& SceneTextures,\n\t// Light data\n\tbool bApplyEmissionAndTransmittance,\n\tbool bApplyDirectLighting,\n\tbool bApplyShadowTransmittance,\n\tuint32 LightType,\n\tconst FLightSceneInfo* LightSceneInfo,\n\t// Shadow data\n\tconst FVisibleLightInfo* VisibleLightInfo,\n\tconst FVirtualShadowMapArray& VirtualShadowMapArray,\n\t// Object data\n\tconst IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface,\n\t// Sparse voxel data\n\tTRDGUniformBufferRef<FSparseVoxelUniformBufferParameters> SparseVoxelUniformBuffer,\n\t// Ray tracing data\n\tFRayTracingScene& RayTracingScene,\n\tTConstArrayView<FRayTracingGeometryRHIRef> RayTracingGeometries,\n\t// Transmittance volume\n\tFRDGTextureRef LightingCacheTexture,\n\t// Output\n\tFRDGTextureRef& HeterogeneousVolumeTexture\n)"
  }
]