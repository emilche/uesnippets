[
  {
    "label": "IHeterogeneousVolumeInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHeterogeneousVolumeInterface"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FRayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingScene"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewState"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FVirtualShadowMapArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArray"
  },
  {
    "label": "FVisibleLightInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibleLightInfo"
  },
  {
    "label": "FMaterialShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialShaderParameters"
  },
  {
    "label": "FRDGTextureDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRDGTextureDesc"
  },
  {
    "label": "FSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTextures"
  },
  {
    "label": "FPersistentPrimitiveIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentPrimitiveIndex"
  },
  {
    "label": "FVolumetricMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricMeshBatch"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLODInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODInfo"
  },
  {
    "label": "FVoxelDataPacked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVoxelDataPacked"
  },
  {
    "label": "FTopLevelGridBitmaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelGridBitmaskData"
  },
  {
    "label": "FTopLevelGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelGridData"
  },
  {
    "label": "FScalarGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScalarGridData"
  },
  {
    "label": "FVectorGridData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorGridData"
  },
  {
    "label": "FVoxelGridBuildOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVoxelGridBuildOptions"
  },
  {
    "label": "FAdaptiveFrustumGridParameterCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdaptiveFrustumGridParameterCache"
  },
  {
    "label": "FAdaptiveOrthoGridParameterCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdaptiveOrthoGridParameterCache"
  },
  {
    "label": "FAVSMLinkedListPackedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAVSMLinkedListPackedData"
  },
  {
    "label": "FAVSMIndirectionPackedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAVSMIndirectionPackedData"
  },
  {
    "label": "FAVSMSamplePackedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAVSMSamplePackedData"
  },
  {
    "label": "FAdaptiveVolumetricShadowMapParameterCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdaptiveVolumetricShadowMapParameterCache"
  },
  {
    "label": "FAdaptiveVolumetricShadowMapState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdaptiveVolumetricShadowMapState"
  },
  {
    "label": "ShouldRenderHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" ConvexVolume . h \" # include \" RendererInterface . h \" # include \" ShaderParameterMacros . h \" class IHeterogeneousVolumeInterface ; class FLightSceneInfo ; class FPrimitiveSceneProxy ; class FProjectedShadowInfo ; class FRayTracingScene ; class FRDGBuilder ; class FScene ; class FSceneView ; class FSceneViewState ; class FViewInfo ; class FVirtualShadowMapArray ; class FVisibleLightInfo ; class IHeterogeneousVolumeInterface ; struct FMaterialShaderParameters ; struct FRDGTextureDesc ; struct FSceneTextures ; struct FPersistentPrimitiveIndex ; struct FVolumetricMeshBatch ; bool)",
    "insertText": "ShouldRenderHeterogeneousVolumes(const FScene* Scene)"
  },
  {
    "label": "ShouldRenderHeterogeneousVolumesForAnyView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderHeterogeneousVolumesForAnyView(const TArrayView<FViewInfo>& Views)"
  },
  {
    "label": "ShouldRenderHeterogeneousVolumesForView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderHeterogeneousVolumesForView(const FViewInfo& View)"
  },
  {
    "label": "ShouldRenderHeterogeneousVolumesAsHoldoutForView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderHeterogeneousVolumesAsHoldoutForView(const FViewInfo& View)"
  },
  {
    "label": "DoesMaterialShaderSupportHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMaterialShaderSupportHeterogeneousVolumes(const FMaterialShaderParameters& Parameters)"
  },
  {
    "label": "DoesMaterialShaderSupportHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMaterialShaderSupportHeterogeneousVolumes(const FMaterial& Material)"
  },
  {
    "label": "ShouldRenderMeshBatchWithHeterogeneousVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderMeshBatchWithHeterogeneousVolumes(const FMeshBatch* Mesh, const FPrimitiveSceneProxy* Proxy, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "ShouldCompositeHeterogeneousVolumesWithTranslucency()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompositeHeterogeneousVolumesWithTranslucency()"
  },
  {
    "label": "ShouldHeterogeneousVolumesCastShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldHeterogeneousVolumesCastShadows()"
  },
  {
    "label": "GetHeterogeneousVolumesComposition()",
    "kind": "Method",
    "detail": "Function (enum class EHeterogeneousVolumesCompositionType : uint8 { BeforeTranslucent,AfterTranslucent } ; EHeterogeneousVolumesCompositionType)",
    "insertText": "GetHeterogeneousVolumesComposition()"
  },
  {
    "label": "GetVolumeResolution()",
    "kind": "Method",
    "detail": "Function (namespace HeterogeneousVolumes { FIntVector)",
    "insertText": "GetVolumeResolution(const IHeterogeneousVolumeInterface*)"
  },
  {
    "label": "GetLightingCacheResolution()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GetLightingCacheResolution(const IHeterogeneousVolumeInterface*, float LODFactor)"
  },
  {
    "label": "GetAmbientOcclusionResolution()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GetAmbientOcclusionResolution(const IHeterogeneousVolumeInterface*, float LODFactor)"
  },
  {
    "label": "GetDownsampleFactor()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDownsampleFactor()"
  },
  {
    "label": "GetScaledViewRect()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetScaledViewRect(FIntRect ViewRect)"
  },
  {
    "label": "GetShadowStepSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadowStepSize()"
  },
  {
    "label": "GetMaxTraceDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxTraceDistance()"
  },
  {
    "label": "GetMaxShadowTraceDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxShadowTraceDistance()"
  },
  {
    "label": "GetStepSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStepSize()"
  },
  {
    "label": "GetMaxStepCount()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxStepCount()"
  },
  {
    "label": "GetMinimumVoxelSizeInFrustum()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinimumVoxelSizeInFrustum()"
  },
  {
    "label": "GetMinimumVoxelSizeOutsideFrustum()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMinimumVoxelSizeOutsideFrustum()"
  },
  {
    "label": "GetShadingRateForFrustumGrid()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadingRateForFrustumGrid()"
  },
  {
    "label": "GetShadingRateForOrthoGrid()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadingRateForOrthoGrid()"
  },
  {
    "label": "GetShadowMode()",
    "kind": "Method",
    "detail": "Function (enum class EShadowMode { LiveShading,VoxelGrid } ; EShadowMode)",
    "insertText": "GetShadowMode()"
  },
  {
    "label": "GetShadowMapResolution()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GetShadowMapResolution()"
  },
  {
    "label": "GetShadingRateForShadows()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadingRateForShadows()"
  },
  {
    "label": "GetOutOfFrustumShadingRateForShadows()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetOutOfFrustumShadingRateForShadows()"
  },
  {
    "label": "EnableJitterForShadows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableJitterForShadows()"
  },
  {
    "label": "GetStepSizeForShadows()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStepSizeForShadows()"
  },
  {
    "label": "GetShadowMaxSampleCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetShadowMaxSampleCount()"
  },
  {
    "label": "GetShadowAbsoluteErrorThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadowAbsoluteErrorThreshold()"
  },
  {
    "label": "GetShadowRelativeErrorThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetShadowRelativeErrorThreshold()"
  },
  {
    "label": "UseAVSMCompression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAVSMCompression()"
  },
  {
    "label": "GetCameraDownsampleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCameraDownsampleFactor()"
  },
  {
    "label": "GetMipLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMipLevel()"
  },
  {
    "label": "GetDebugMode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDebugMode()"
  },
  {
    "label": "GetLightingCacheMode()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLightingCacheMode()"
  },
  {
    "label": "GetSparseVoxelMipBias()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSparseVoxelMipBias()"
  },
  {
    "label": "GetBottomLevelGridResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetBottomLevelGridResolution()"
  },
  {
    "label": "GetIndirectionGridResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndirectionGridResolution()"
  },
  {
    "label": "GetStochasticFilteringMode()",
    "kind": "Method",
    "detail": "Function (enum class EStochasticFilteringMode { Disabled,Constant,Linear,Cubic } ; EStochasticFilteringMode)",
    "insertText": "GetStochasticFilteringMode()"
  },
  {
    "label": "ShouldJitter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldJitter()"
  },
  {
    "label": "ShouldRefineSparseVoxels()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRefineSparseVoxels()"
  },
  {
    "label": "UseHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracing()"
  },
  {
    "label": "UseIndirectLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseIndirectLighting()"
  },
  {
    "label": "UseSparseVoxelPipeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSparseVoxelPipeline()"
  },
  {
    "label": "UseSparseVoxelPerTileCulling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseSparseVoxelPerTileCulling()"
  },
  {
    "label": "UseLightingCacheForInscattering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLightingCacheForInscattering()"
  },
  {
    "label": "UseLightingCacheForTransmittance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLightingCacheForTransmittance()"
  },
  {
    "label": "UseAdaptiveVolumetricShadowMapForSelfShadowing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAdaptiveVolumetricShadowMapForSelfShadowing(const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "ShouldApplyHeightFog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyHeightFog()"
  },
  {
    "label": "ShouldApplyVolumetricFog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldApplyVolumetricFog()"
  },
  {
    "label": "SupportsOverlappingVolumes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsOverlappingVolumes()"
  },
  {
    "label": "EnableAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableAmbientOcclusion()"
  },
  {
    "label": "UseExistenceMask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseExistenceMask()"
  },
  {
    "label": "UseAnalyticDerivatives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAnalyticDerivatives()"
  },
  {
    "label": "GetApplyFogInscattering()",
    "kind": "Method",
    "detail": "Function (enum class EFogMode { Off,Reference,Stochastic } ; EFogMode)",
    "insertText": "GetApplyFogInscattering()"
  },
  {
    "label": "ShouldWriteVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWriteVelocity()"
  },
  {
    "label": "EnableIndirectionGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableIndirectionGrid()"
  },
  {
    "label": "EnableLinearInterpolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnableLinearInterpolation()"
  },
  {
    "label": "GetVoxelCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVoxelCount(FIntVector VolumeResolution)"
  },
  {
    "label": "GetVoxelCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVoxelCount(const FRDGTextureDesc& TextureDesc)"
  },
  {
    "label": "GetMipVolumeResolution()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "GetMipVolumeResolution(FIntVector VolumeResolution, uint32 MipLevel)"
  },
  {
    "label": "FBoxSphereBounds()",
    "kind": "Method",
    "detail": "Function (struct FLODInfo { FBoxSphereBounds WorldSceneBounds =)",
    "insertText": "FBoxSphereBounds(EForceInit::ForceInit)"
  },
  {
    "label": "CalcLODFactor()",
    "kind": "Method",
    "detail": "Function (FVector WorldOrigin = FVector::ZeroVector ; FIntRect ViewRect ; FConvexVolume WorldShadowFrustum ; float FOV = PI / 4 . 0 f ; float NearClippingDistance = 1 . 0 f ; float DownsampleFactor = 1 . 0 f ; bool bIsPerspective = false ; } ; float)",
    "insertText": "CalcLODFactor(float LOD)"
  },
  {
    "label": "CalcLODFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLODFactor(const HeterogeneousVolumes::FLODInfo& LODInfo, const IHeterogeneousVolumeInterface* HeterogeneousVolume)"
  },
  {
    "label": "CalcLODFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLODFactor(const FSceneView& View, const IHeterogeneousVolumeInterface* HeterogeneousVolume)"
  },
  {
    "label": "CalcLOD()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLOD(const HeterogeneousVolumes::FLODInfo& LODInfo, const IHeterogeneousVolumeInterface* HeterogeneousVolume)"
  },
  {
    "label": "CalcLOD()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "CalcLOD(const FSceneView& View, const IHeterogeneousVolumeInterface* HeterogeneousVolume)"
  },
  {
    "label": "IsHoldout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHoldout(const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface)"
  },
  {
    "label": "GetProjectedShadowInfo()",
    "kind": "Method",
    "detail": "Function (const FProjectedShadowInfo*)",
    "insertText": "GetProjectedShadowInfo(const FVisibleLightInfo* VisibleLightInfo, int32 ShadowIndex)"
  },
  {
    "label": "IsDynamicShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicShadow(const FVisibleLightInfo* VisibleLightInfo)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FVolumetricMeshBatch& MeshBatch)"
  },
  {
    "label": "BEGIN_UNIFORM_BUFFER_STRUCT()",
    "kind": "Method",
    "detail": "Function (struct FVoxelDataPacked { uint32 LinearIndex ; uint32 MipLevel ; } ;)",
    "insertText": "BEGIN_UNIFORM_BUFFER_STRUCT(FSparseVoxelUniformBufferParameters, ) SHADER_PARAMETER(FMatrix44f, LocalToWorld) SHADER_PARAMETER(FMatrix44f, WorldToLocal) SHADER_PARAMETER(FVector3f, LocalBoundsOrigin) SHADER_PARAMETER(FVector3f, LocalBoundsExtent) SHADER_PARAMETER(FIntVector, VolumeResolution) SHADER_PARAMETER_RDG_TEXTURE(Texture3D, ExtinctionTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture3D, EmissionTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture3D, AlbedoTexture) SHADER_PARAMETER_SAMPLER(SamplerState, TextureSampler) SHADER_PARAMETER(FIntVector, LightingCacheResolution) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, NumVoxelsBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FVoxelDataPacked>, VoxelBuffer) SHADER_PARAMETER(int, MipLevel) SHADER_PARAMETER(float, MaxTraceDistance) SHADER_PARAMETER(float, MaxShadowTraceDistance) SHADER_PARAMETER(float, StepSize) SHADER_PARAMETER(float, StepFactor) SHADER_PARAMETER(float, ShadowStepSize) SHADER_PARAMETER(float, ShadowStepFactor) SHADER_PARAMETER(int, bApplyHeightFog) SHADER_PARAMETER(int, bApplyVolumetricFog) END_UNIFORM_BUFFER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FLightingCacheParameters, ) SHADER_PARAMETER(FIntVector, LightingCacheResolution) SHADER_PARAMETER(float, LightingCacheVoxelBias) SHADER_PARAMETER_RDG_TEXTURE(Texture3D, LightingCacheTexture) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "BEGIN_UNIFORM_BUFFER_STRUCT()",
    "kind": "Method",
    "detail": "Function (uint32 PackedData [ 2 ] ; } ; struct FTopLevelGridData { uint32 PackedData [ 1 ] ; } ; struct FScalarGridData { uint32 PackedData [ 2 ] ; } ; struct FVectorGridData { uint32 PackedData [ 2 ] ; } ;)",
    "insertText": "BEGIN_UNIFORM_BUFFER_STRUCT(FOrthoVoxelGridUniformBufferParameters, ) SHADER_PARAMETER(FVector3f, TopLevelGridWorldBoundsMin) SHADER_PARAMETER(FVector3f, TopLevelGridWorldBoundsMax) SHADER_PARAMETER(FIntVector, TopLevelGridResolution) SHADER_PARAMETER(int32, bUseOrthoGrid) SHADER_PARAMETER(int32, bUseMajorantGrid) SHADER_PARAMETER(int32, bEnableIndirectionGrid) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FTopLevelGridBitmaskData>, TopLevelGridBitmaskBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FTopLevelGridData>, TopLevelGridBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FTopLevelGridData>, IndirectionGridBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FScalarGridData>, ExtinctionGridBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FVectorGridData>, EmissionGridBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FVectorGridData>, ScatteringGridBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FScalarGridData>, MajorantGridBuffer) END_UNIFORM_BUFFER_STRUCT() BEGIN_UNIFORM_BUFFER_STRUCT(FFrustumVoxelGridUniformBufferParameters, ) SHADER_PARAMETER(FMatrix44f, WorldToClip) SHADER_PARAMETER(FMatrix44f, ClipToWorld) SHADER_PARAMETER(FMatrix44f, WorldToView) SHADER_PARAMETER(FMatrix44f, ViewToWorld) SHADER_PARAMETER(FMatrix44f, ViewToClip) SHADER_PARAMETER(FMatrix44f, ClipToView) SHADER_PARAMETER(FVector3f, TopLevelGridWorldBoundsMin) SHADER_PARAMETER(FVector3f, TopLevelGridWorldBoundsMax) SHADER_PARAMETER(FIntVector, TopLevelFroxelGridResolution) SHADER_PARAMETER(FIntVector, VoxelDimensions) SHADER_PARAMETER(int32, bUseFrustumGrid) SHADER_PARAMETER(float, NearPlaneDepth) SHADER_PARAMETER(float, FarPlaneDepth) SHADER_PARAMETER(float, TanHalfFOV) SHADER_PARAMETER_ARRAY(FVector4f, ViewFrustumPlanes, [6]) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FTopLevelGridData>, TopLevelFroxelGridBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FScalarGridData>, ExtinctionFroxelGridBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FVectorGridData>, EmissionFroxelGridBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FVectorGridData>, ScatteringFroxelGridBuffer) END_UNIFORM_BUFFER_STRUCT()"
  },
  {
    "label": "BuildOrthoVoxelGrid()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "BuildOrthoVoxelGrid(FRDGBuilder& GraphBuilder, const FScene* Scene, TArray<FViewInfo>& Views, const TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos, const FVoxelGridBuildOptions& BuildOptions, TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoVoxelGridUniformBuffer)"
  },
  {
    "label": "BuildFrustumVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildFrustumVoxelGrid(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, const FVoxelGridBuildOptions& BuildOptions, TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumVoxelGridUniformBuffer)"
  },
  {
    "label": "ExtractFrustumVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (struct FAdaptiveFrustumGridParameterCache { FMatrix44f WorldToClip ; FMatrix44f ClipToWorld ; FMatrix44f WorldToView ; FMatrix44f ViewToWorld ; FMatrix44f ViewToClip ; FMatrix44f ClipToView ; FVector3f TopLevelGridWorldBoundsMin ; FVector3f TopLevelGridWorldBoundsMax ; FIntVector TopLevelGridResolution ; FIntVector VoxelDimensions ; int32 bUseFrustumGrid = false ; float NearPlaneDepth ; float FarPlaneDepth ; float TanHalfFOV ; FVector4f ViewFrustumPlanes [ 6 ] ; TRefCountPtr<FRDGPooledBuffer> TopLevelGridBuffer ; TRefCountPtr<FRDGPooledBuffer> ExtinctionGridBuffer ; TRefCountPtr<FRDGPooledBuffer> EmissionGridBuffer ; TRefCountPtr<FRDGPooledBuffer> ScatteringGridBuffer ; } ; struct FAdaptiveOrthoGridParameterCache { FVector3f TopLevelGridWorldBoundsMin ; FVector3f TopLevelGridWorldBoundsMax ; FIntVector TopLevelGridResolution ; int32 bUseOrthoGrid = false ; int32 bUseMajorantGrid ; int32 bEnableIndirectionGrid ; TRefCountPtr<FRDGPooledBuffer> TopLevelGridBitmaskBuffer ; TRefCountPtr<FRDGPooledBuffer> TopLevelGridBuffer ; TRefCountPtr<FRDGPooledBuffer> IndirectionGridBuffer ; TRefCountPtr<FRDGPooledBuffer> ExtinctionGridBuffer ; TRefCountPtr<FRDGPooledBuffer> EmissionGridBuffer ; TRefCountPtr<FRDGPooledBuffer> ScatteringGridBuffer ; TRefCountPtr<FRDGPooledBuffer> MajorantGridBuffer ; } ; void)",
    "insertText": "ExtractFrustumVoxelGridUniformBuffer(FRDGBuilder& GraphBuilder, const TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer, FAdaptiveFrustumGridParameterCache& AdaptiveFrustumGridParameterCache)"
  },
  {
    "label": "RegisterExternalFrustumVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalFrustumVoxelGridUniformBuffer(FRDGBuilder& GraphBuilder, const FAdaptiveFrustumGridParameterCache& AdaptiveFrustumGridParameterCache, TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer)"
  },
  {
    "label": "ExtractOrthoVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractOrthoVoxelGridUniformBuffer(FRDGBuilder& GraphBuilder, const TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer, FAdaptiveOrthoGridParameterCache& AdaptiveOrthoGridParameterCache)"
  },
  {
    "label": "RegisterExternalOrthoVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalOrthoVoxelGridUniformBuffer(FRDGBuilder& GraphBuilder, const FAdaptiveOrthoGridParameterCache& AdaptiveOrthoGridParameterCache, TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer)"
  },
  {
    "label": "BEGIN_UNIFORM_BUFFER_STRUCT()",
    "kind": "Method",
    "detail": "Function (struct FAVSMLinkedListPackedData { uint32 Data [ 2 ] ; } ; struct FAVSMIndirectionPackedData { uint32 Data [ 4 ] ; } ; struct FAVSMSamplePackedData { uint32 Data ; } ;)",
    "insertText": "BEGIN_UNIFORM_BUFFER_STRUCT(FAdaptiveVolumetricShadowMapUniformBufferParameters, ) SHADER_PARAMETER_ARRAY(FMatrix44f, TranslatedWorldToShadow, [6]) SHADER_PARAMETER(FVector3f, TranslatedWorldOrigin) SHADER_PARAMETER(FVector4f, TranslatedWorldPlane) SHADER_PARAMETER(FIntPoint, Resolution) SHADER_PARAMETER(int32, NumShadowMatrices) SHADER_PARAMETER(int32, MaxSampleCount) SHADER_PARAMETER(int32, bIsEmpty) SHADER_PARAMETER(int32, bIsDirectionalLight) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint2>, LinkedListBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint4>, IndirectionBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, SampleBuffer) END_UNIFORM_BUFFER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FAdaptiveVolumetricShadowMapParameters, RENDERER_API) SHADER_PARAMETER_ARRAY(FMatrix44f, TranslatedWorldToShadow, [6]) SHADER_PARAMETER(FVector3f, TranslatedWorldOrigin) SHADER_PARAMETER(FVector4f, TranslatedWorldPlane) SHADER_PARAMETER(FIntPoint, Resolution) SHADER_PARAMETER(int32, NumShadowMatrices) SHADER_PARAMETER(int32, MaxSampleCount) SHADER_PARAMETER(int32, bIsEmpty) SHADER_PARAMETER(int32, bIsDirectionalLight) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint2>, LinkedListBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint4>, IndirectionBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, SampleBuffer) END_SHADER_PARAMETER_STRUCT() BEGIN_UNIFORM_BUFFER_STRUCT(FAdaptiveVolumetricShadowMaps, ) SHADER_PARAMETER_STRUCT(FAdaptiveVolumetricShadowMapParameters, AVSM) SHADER_PARAMETER_STRUCT(FAdaptiveVolumetricShadowMapParameters, CameraAVSM) END_UNIFORM_BUFFER_STRUCT()"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (struct FAdaptiveVolumetricShadowMapParameterCache { FMatrix44f TranslatedWorldToShadow [ 6 ] = { FMatrix44f::Identity,FMatrix44f::Identity,FMatrix44f::Identity,FMatrix44f::Identity,FMatrix44f::Identity,FMatrix44f::Identity } ; FVector3f TranslatedWorldOrigin = FVector3f::ZeroVector ; FVector4f TranslatedWorldPlane =)",
    "insertText": "Zero()"
  },
  {
    "label": "GetAdaptiveVolumetricShadowMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FIntPoint Resolution = FIntPoint::ZeroValue ; int32 NumShadowMatrices = 1 ; int32 MaxSampleCount = 0 ; bool bIsEmpty = true ; bool bIsDirectionalLight = false ; TRefCountPtr<FRDGPooledBuffer> LinkedListBuffer ; TRefCountPtr<FRDGPooledBuffer> IndirectionBuffer ; TRefCountPtr<FRDGPooledBuffer> SampleBuffer ; } ; struct FAdaptiveVolumetricShadowMapState { TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters> UniformBuffer = nullptr ; FAdaptiveVolumetricShadowMapParameterCache PrevFrameParameterCache ; } ; TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>)",
    "insertText": "GetAdaptiveVolumetricShadowMapUniformBuffer(FRDGBuilder& GraphBuilder, FSceneViewState* ViewState, const FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "DestroyAdaptiveVolumetricShadowMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyAdaptiveVolumetricShadowMapUniformBuffer(TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>& AdaptiveVolumetricShadowMapUniformBuffer)"
  },
  {
    "label": "GetAdaptiveVolumetricCameraMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>)",
    "insertText": "GetAdaptiveVolumetricCameraMapUniformBuffer(FRDGBuilder& GraphBuilder, FSceneViewState* ViewState)"
  },
  {
    "label": "GetAdaptiveVolumetricCameraMapParameters()",
    "kind": "Method",
    "detail": "Function (FAdaptiveVolumetricShadowMapUniformBufferParameters)",
    "insertText": "GetAdaptiveVolumetricCameraMapParameters(FRDGBuilder& GraphBuilder, FSceneViewState* ViewState)"
  },
  {
    "label": "CreateEmptyAdaptiveVolumetricShadowMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>)",
    "insertText": "CreateEmptyAdaptiveVolumetricShadowMapUniformBuffer(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetFrustumVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>)",
    "insertText": "GetFrustumVoxelGridUniformBuffer(FRDGBuilder& GraphBuilder, FSceneViewState* ViewState)"
  },
  {
    "label": "GetOrthoVoxelGridUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>)",
    "insertText": "GetOrthoVoxelGridUniformBuffer(FRDGBuilder& GraphBuilder, FSceneViewState* ViewState)"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender(FScene& Scene, TArray<FViewInfo>& Views)"
  },
  {
    "label": "CreateAdaptiveVolumetricShadowMapUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} TRDGUniformBufferRef<FAdaptiveVolumetricShadowMaps>)",
    "insertText": "CreateAdaptiveVolumetricShadowMapUniformBuffers(FRDGBuilder& GraphBuilder, FSceneViewState* ViewState, const FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "RenderWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderWithLiveShading(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, const FScene* Scene, const FViewInfo& View, int32 ViewIndex, TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos, const FVirtualShadowMapArray& VirtualShadowMapArray, const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface, const FMaterialRenderProxy* MaterialRenderProxy, const FPersistentPrimitiveIndex &PersistentPrimitiveIndex, const FBoxSphereBounds LocalBoxSphereBounds, FRDGTextureRef LightingCacheTexture, FRDGTextureRef& HeterogeneousVolumeRadiance, FRDGTextureRef& HeterogeneousVolumeHoldout)"
  },
  {
    "label": "RenderWithPreshading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderWithPreshading(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FScene* Scene, FViewInfo& View, int32 ViewIndex, TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos, const FVirtualShadowMapArray& VirtualShadowMapArray, const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface, const FMaterialRenderProxy* MaterialRenderProxy, const FPersistentPrimitiveIndex &PersistentPrimitiveIndex, const FBoxSphereBounds LocalBoxSphereBounds, FRDGTextureRef LightingCacheTexture, FRDGTextureRef& HeterogeneousVolumeRadiance)"
  },
  {
    "label": "RenderTransmittanceWithVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderTransmittanceWithVoxelGrid(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FScene* Scene, FViewInfo& View, const TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer, const TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer, FRDGTextureRef& HeterogeneousVolumeRadiance)"
  },
  {
    "label": "RenderAdaptiveVolumetricShadowMapWithVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAdaptiveVolumetricShadowMapWithVoxelGrid(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FScene* Scene, FViewInfo& View, TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos, const FVirtualShadowMapArray& VirtualShadowMapArray, const TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer, const TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer)"
  },
  {
    "label": "RenderAdaptiveVolumetricShadowMapWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAdaptiveVolumetricShadowMapWithLiveShading(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FScene* Scene, FViewInfo& View, TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos)"
  },
  {
    "label": "RenderAdaptiveVolumetricCameraMapWithVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAdaptiveVolumetricCameraMapWithVoxelGrid(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FScene* Scene, FViewInfo& View, const TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer, const TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer)"
  },
  {
    "label": "RenderAdaptiveVolumetricCameraMapWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAdaptiveVolumetricCameraMapWithLiveShading(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FScene* Scene, FViewInfo& View)"
  },
  {
    "label": "CompressVolumetricShadowMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressVolumetricShadowMap(FRDGBuilder& GraphBuilder, FViewInfo& View, FIntVector GroupCount, FIntPoint ShadowMapResolution, uint32 MaxSampleCount, FRDGBufferRef VolumetricShadowLinkedListBuffer, FRDGBufferRef& VolumetricShadowIndirectionBuffer, FRDGBufferRef& VolumetricShadowTransmittanceBuffer)"
  },
  {
    "label": "CombineVolumetricShadowMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineVolumetricShadowMap(FRDGBuilder& GraphBuilder, FViewInfo& View, FIntVector GroupCount, uint32 LightType, FIntPoint ShadowMapResolution, uint32 MaxSampleCount, FRDGBufferRef VolumetricShadowLinkedListBuffer0, FRDGBufferRef VolumetricShadowLinkedListBuffer1, FRDGBufferRef& VolumetricShadowLinkedListBuffer)"
  },
  {
    "label": "CreateAdaptiveVolumetricShadowMapUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAdaptiveVolumetricShadowMapUniformBuffer(FRDGBuilder& GraphBuilder, const FVector3f& TranslatedWorldOrigin, const FVector4f& TranslatedWorldPlane, const FMatrix44f* TranslatedWorldToShadow, FIntPoint VolumetricShadowMapResolution, int32 NumShadowMatrices, uint32 VolumetricShadowMapMaxSampleCount, bool bIsDirectionalLight, FRDGBufferRef VolumetricShadowMapLinkedListBuffer, FRDGBufferRef VolumetricShadowMapIndirectionBuffer, FRDGBufferRef VolumetricShadowMapSampleBuffer, TRDGUniformBufferRef<FAdaptiveVolumetricShadowMapUniformBufferParameters>& AdaptiveVolumetricShadowMapUniformBuffer)"
  },
  {
    "label": "RenderSingleScatteringWithVoxelGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSingleScatteringWithVoxelGrid(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, FScene* Scene, FViewInfo& View, TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos, const FVirtualShadowMapArray& VirtualShadowMapArray, const TRDGUniformBufferRef<FOrthoVoxelGridUniformBufferParameters>& OrthoGridUniformBuffer, const TRDGUniformBufferRef<FFrustumVoxelGridUniformBufferParameters>& FrustumGridUniformBuffer, FRDGTextureRef& HeterogeneousVolumeRadiance)"
  },
  {
    "label": "ComputeHeterogeneousVolumeBakeMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeHeterogeneousVolumeBakeMaterial(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface, const FMaterialRenderProxy* MaterialRenderProxy, const FPersistentPrimitiveIndex &PersistentPrimitiveIndex, const FBoxSphereBounds LocalBoxSphereBounds, FIntVector VolumeResolution, FRDGTextureRef& HeterogeneousVolumeExtinctionTexture, FRDGTextureRef& HeterogeneousVolumeEmissionTexture, FRDGTextureRef& HeterogeneousVolumeAlbedoTexture)"
  },
  {
    "label": "CopyTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTexture3D(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef Texture, uint32 InputMipLevel, FRDGTextureRef& OutputTexture)"
  },
  {
    "label": "GenerateSparseVoxels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSparseVoxels(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef VoxelMinTexture, FIntVector VolumeResolution, uint32 MipLevel, FRDGBufferRef& NumVoxelsBuffer, FRDGBufferRef& VoxelBuffer)"
  },
  {
    "label": "RenderExistenceMaskWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderExistenceMaskWithLiveShading(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, const FSceneTextures& SceneTextures, const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface, const FMaterialRenderProxy* DefaultMaterialRenderProxy, FPersistentPrimitiveIndex PersistentPrimitiveIndex, const FBoxSphereBounds LocalBoxSphereBounds, FIntVector ExistenceMaskTextureResolution, FRDGTextureRef& ExistenceMaskTexture)"
  },
  {
    "label": "DilateExistenceMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DilateExistenceMask(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, FRDGTextureRef ExistenceMaskTexture, FIntVector ExistenceMaskTextureResolution, FRDGTextureRef& DilatedExistenceTexture)"
  },
  {
    "label": "RenderAmbientOcclusionWithLiveShading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderAmbientOcclusionWithLiveShading(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, const FSceneTextures& SceneTextures, const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface, const FMaterialRenderProxy* DefaultMaterialRenderProxy, FPersistentPrimitiveIndex PersistentPrimitiveIndex, const FBoxSphereBounds LocalBoxSphereBounds, FRDGTextureRef& AmbientOcclusionTexture)"
  },
  {
    "label": "GenerateRayTracingGeometryInstance()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING void)",
    "insertText": "GenerateRayTracingGeometryInstance(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface, FRDGBufferRef NumVoxelsBuffer, TRDGUniformBufferRef<FSparseVoxelUniformBufferParameters> SparseVoxelUniformBuffer, TArray<FRayTracingGeometryRHIRef, SceneRenderingAllocator>& RayTracingGeometries, TArray<FMatrix>& RayTracingTransforms)"
  },
  {
    "label": "GenerateRayTracingScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateRayTracingScene(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, TConstArrayView<FRayTracingGeometryRHIRef> RayTracingGeometries, TConstArrayView<FMatrix> RayTracingTransforms, FRayTracingScene& RayTracingScene)"
  },
  {
    "label": "RenderLightingCacheWithPreshadingHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderLightingCacheWithPreshadingHardwareRayTracing(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, int32 ViewIndex, const FSceneTextures& SceneTextures, bool bApplyEmissionAndTransmittance, bool bApplyDirectLighting, bool bApplyShadowTransmittance, uint32 LightType, const FLightSceneInfo* LightSceneInfo, const FVisibleLightInfo* VisibleLightInfo, const FVirtualShadowMapArray& VirtualShadowMapArray, const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface, TRDGUniformBufferRef<FSparseVoxelUniformBufferParameters> SparseVoxelUniformBuffer, FRayTracingScene& RayTracingScene, TConstArrayView<FRayTracingGeometryRHIRef> RayTracingGeometries, FRDGTextureRef& LightingCacheTexture)"
  },
  {
    "label": "RenderSingleScatteringWithPreshadingHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderSingleScatteringWithPreshadingHardwareRayTracing(FRDGBuilder& GraphBuilder, const FScene* Scene, const FViewInfo& View, int32 ViewIndex, const FSceneTextures& SceneTextures, bool bApplyEmissionAndTransmittance, bool bApplyDirectLighting, bool bApplyShadowTransmittance, uint32 LightType, const FLightSceneInfo* LightSceneInfo, const FVisibleLightInfo* VisibleLightInfo, const FVirtualShadowMapArray& VirtualShadowMapArray, const IHeterogeneousVolumeInterface* HeterogeneousVolumeInterface, TRDGUniformBufferRef<FSparseVoxelUniformBufferParameters> SparseVoxelUniformBuffer, FRayTracingScene& RayTracingScene, TConstArrayView<FRayTracingGeometryRHIRef> RayTracingGeometries, FRDGTextureRef LightingCacheTexture, FRDGTextureRef& HeterogeneousVolumeTexture)"
  }
]