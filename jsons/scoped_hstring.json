[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "InvalidValue()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_HSTRING_H_ # define BASE_WIN_SCOPED_HSTRING_H_ # include<hstring . h> # include<string> # include \" base / scoped_generic . h \" # include \" base / strings / string_piece_forward . h \" namespace base { namespace internal { struct BASE_EXPORT ScopedHStringTraits { HSTRING)",
    "insertText": "InvalidValue()"
  },
  {
    "label": "ScopedHString()",
    "kind": "Method",
    "detail": "Function (} ; } namespace win { class BASE_EXPORT ScopedHString : public ScopedGeneric<HSTRING,base::internal::ScopedHStringTraits> { public :)",
    "insertText": "ScopedHString(HSTRING hstr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (ScopedHString)",
    "insertText": "Create(WStringPiece str)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (ScopedHString)",
    "insertText": "Create(StringPiece str)"
  },
  {
    "label": "ResolveCoreWinRTStringDelayload()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "ResolveCoreWinRTStringDelayload()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (WStringPiece)",
    "insertText": "Get()"
  },
  {
    "label": "GetAsUTF8()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetAsUTF8()"
  }
]