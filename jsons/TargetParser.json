[
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "FPUKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FPUKind"
  },
  {
    "label": "FPUVersion",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FPUVersion"
  },
  {
    "label": "NeonSupportLevel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NeonSupportLevel"
  },
  {
    "label": "FPURestriction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FPURestriction"
  },
  {
    "label": "ArchKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ArchKind"
  },
  {
    "label": "ArchExtKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ArchExtKind"
  },
  {
    "label": "ISAKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ISAKind"
  },
  {
    "label": "EndianKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EndianKind"
  },
  {
    "label": "ProfileKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProfileKind"
  },
  {
    "label": "ARMTargetParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ARMTargetParser"
  },
  {
    "label": "getFPUSynonym()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_TARGETPARSER_H # define LLVM_SUPPORT_TARGETPARSER_H # include<vector> namespace llvm { class StringRef ; namespace ARM { enum FPUKind { FK_INVALID = 0,FK_NONE,FK_VFP,FK_VFPV2,FK_VFPV3,FK_VFPV3_FP16,FK_VFPV3_D16,FK_VFPV3_D16_FP16,FK_VFPV3XD,FK_VFPV3XD_FP16,FK_VFPV4,FK_VFPV4_D16,FK_FPV4_SP_D16,FK_FPV5_D16,FK_FPV5_SP_D16,FK_FP_ARMV8,FK_NEON,FK_NEON_FP16,FK_NEON_VFPV4,FK_NEON_FP_ARMV8,FK_CRYPTO_NEON_FP_ARMV8,FK_SOFTVFP,FK_LAST } ; enum FPUVersion { FV_NONE = 0,FV_VFPV2,FV_VFPV3,FV_VFPV3_FP16,FV_VFPV4,FV_VFPV5 } ; enum NeonSupportLevel { NS_None = 0,NS_Neon,NS_Crypto } ; enum FPURestriction { FR_None = 0,FR_D16,FR_SP_D16 } ; enum ArchKind { AK_INVALID = 0,AK_ARMV2,AK_ARMV2A,AK_ARMV3,AK_ARMV3M,AK_ARMV4,AK_ARMV4T,AK_ARMV5T,AK_ARMV5TE,AK_ARMV5TEJ,AK_ARMV6,AK_ARMV6K,AK_ARMV6T2,AK_ARMV6Z,AK_ARMV6ZK,AK_ARMV6M,AK_ARMV6SM,AK_ARMV7A,AK_ARMV7R,AK_ARMV7M,AK_ARMV7EM,AK_ARMV8A,AK_ARMV8_1A,AK_IWMMXT,AK_IWMMXT2,AK_XSCALE,AK_ARMV5,AK_ARMV5E,AK_ARMV6J,AK_ARMV6HL,AK_ARMV7,AK_ARMV7L,AK_ARMV7HL,AK_ARMV7S,AK_LAST } ; enum ArchExtKind { AEK_INVALID = 0,AEK_CRC,AEK_CRYPTO,AEK_FP,AEK_HWDIV,AEK_MP,AEK_SIMD,AEK_SEC,AEK_VIRT,AEK_OS,AEK_IWMMXT,AEK_IWMMXT2,AEK_MAVERICK,AEK_XSCALE,AEK_LAST } ; enum ISAKind { IK_INVALID = 0,IK_ARM,IK_THUMB,IK_AARCH64 } ; enum EndianKind { EK_INVALID = 0,EK_LITTLE,EK_BIG } ; enum ProfileKind { PK_INVALID = 0,PK_A,PK_R,PK_M } ; } class ARMTargetParser { StringRef)",
    "insertText": "getFPUSynonym(StringRef FPU)"
  },
  {
    "label": "getArchSynonym()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getArchSynonym(StringRef Arch)"
  },
  {
    "label": "getCanonicalArchName()",
    "kind": "Method",
    "detail": "Function (public : StringRef)",
    "insertText": "getCanonicalArchName(StringRef Arch)"
  },
  {
    "label": "getFPUName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getFPUName(unsigned FPUKind)"
  },
  {
    "label": "getFPUVersion()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getFPUVersion(unsigned FPUKind)"
  },
  {
    "label": "getFPUNeonSupportLevel()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getFPUNeonSupportLevel(unsigned FPUKind)"
  },
  {
    "label": "getFPURestriction()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getFPURestriction(unsigned FPUKind)"
  },
  {
    "label": "getFPUFeatures()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getFPUFeatures(unsigned FPUKind, std::vector<const char*> &Features)"
  },
  {
    "label": "getArchName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getArchName(unsigned ArchKind)"
  },
  {
    "label": "getArchAttr()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getArchAttr(unsigned ArchKind)"
  },
  {
    "label": "getCPUAttr()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getCPUAttr(unsigned ArchKind)"
  },
  {
    "label": "getSubArch()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getSubArch(unsigned ArchKind)"
  },
  {
    "label": "getArchExtName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getArchExtName(unsigned ArchExtKind)"
  },
  {
    "label": "getDefaultCPU()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "getDefaultCPU(StringRef Arch)"
  },
  {
    "label": "parseFPU()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "parseFPU(StringRef FPU)"
  },
  {
    "label": "parseArch()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "parseArch(StringRef Arch)"
  },
  {
    "label": "parseArchExt()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "parseArchExt(StringRef ArchExt)"
  },
  {
    "label": "parseCPUArch()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "parseCPUArch(StringRef CPU)"
  },
  {
    "label": "parseArchISA()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "parseArchISA(StringRef Arch)"
  },
  {
    "label": "parseArchEndian()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "parseArchEndian(StringRef Arch)"
  },
  {
    "label": "parseArchProfile()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "parseArchProfile(StringRef Arch)"
  },
  {
    "label": "parseArchVersion()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "parseArchVersion(StringRef Arch)"
  }
]