[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ARCH_H # define ARCH_H # include \" opus_types . h \" # include \" opus_defines . h \" # if !)",
    "insertText": "defined(__GNUC_PREREQ) # if defined(__GNUC__)&&defined(__GNUC_MINOR__) # define __GNUC_PREREQ(_maj,_min) \\ ((__GNUC__<<16)+__GNUC_MINOR__>=((_maj)<<16)+(_min)) # else # define __GNUC_PREREQ(_maj,_min) 0 # endif # endif #if OPUS_GNUC_PREREQ(3, 0) #define opus_likely(x) (__builtin_expect(!!(x), 1)) #define opus_unlikely(x) (__builtin_expect(!!(x), 0)) #else #define opus_likely(x) (!!(x)) #define opus_unlikely(x) (!!(x)) #endif #define CELT_SIG_SCALE 32768.f #define CELT_FATAL(str) celt_fatal(str, __FILE__, __LINE__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(ENABLE_ASSERTIONS) || defined(ENABLE_HARDENING) #ifdef __GNUC__ __attribute__((noreturn)) #endif void celt_fatal(const char *str, const char *file, int line)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(CELT_C) && !defined(OVERRIDE_celt_fatal) #include <stdio.h> #include <stdlib.h> #ifdef __GNUC__ __attribute__((noreturn)) #endif void celt_fatal(const char *str, const char *file, int line)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(CHROMIUM_NO_LOGGING) fprintf (stderr, \"Fatal (internal) error in %s, line %d: %s\\n\", file, line, str)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(_MSC_VER) _set_abort_behavior( 0, _WRITE_ABORT_MSG)"
  },
  {
    "label": "abort()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "abort()"
  },
  {
    "label": "celt_assert()",
    "kind": "Method",
    "detail": "Function (} # endif # define)",
    "insertText": "celt_assert(cond)"
  },
  {
    "label": "CELT_FATAL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CELT_FATAL(\"assertion failed: \" #cond)"
  },
  {
    "label": "celt_assert2()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "celt_assert2(cond, message)"
  },
  {
    "label": "CELT_FATAL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CELT_FATAL(\"assertion failed: \" #cond \"\\n\" message)"
  },
  {
    "label": "MUST_SUCCEED()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "MUST_SUCCEED(call) celt_assert((call) == OPUS_OK) #else #define celt_assert(cond) #define celt_assert2(cond, message) #define MUST_SUCCEED(call)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (RESTORE_STACK ; return OPUS_INTERNAL_ERROR ; } })",
    "insertText": "while(0) #endif #if defined(ENABLE_ASSERTIONS) #define celt_sig_assert(cond)"
  },
  {
    "label": "CELT_FATAL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CELT_FATAL(\"signal assertion failed: \" #cond)"
  },
  {
    "label": "celt_sig_assert()",
    "kind": "Method",
    "detail": "Function (} } # else # define)",
    "insertText": "celt_sig_assert(cond) #endif #define IMUL32(a,b) ((a)*(b)) #define MIN16(a,b) ((a) < (b) ? (a) : (b)) #define MAX16(a,b) ((a) > (b) ? (a) : (b)) #define MIN32(a,b) ((a) < (b) ? (a) : (b)) #define MAX32(a,b) ((a) > (b) ? (a) : (b)) #define IMIN(a,b) ((a) < (b) ? (a) : (b)) #define IMAX(a,b) ((a) > (b) ? (a) : (b)) #define UADD32(a,b) ((a)+(b)) #define USUB32(a,b) ((a)-(b)) #if defined(__x86_64__) || defined(__LP64__) || defined(_WIN64) #define OPUS_FAST_INT64 1 #else #define OPUS_FAST_INT64 0 #endif #define PRINT_MIPS(file)"
  },
  {
    "label": "celt_isnan()",
    "kind": "Method",
    "detail": "Function (typedef opus_int32 opus_val32 ; typedef opus_int64 opus_val64 ; typedef opus_val32 celt_sig ; typedef opus_val16 celt_norm ; typedef opus_val32 celt_ener ; # define)",
    "insertText": "celt_isnan(x) 0 #define Q15ONE 32767 #define SIG_SHIFT 12 #define SIG_SAT (300000000) #define NORM_SCALING 16384 #define DB_SHIFT 10 #define EPSILON 1 #define VERY_SMALL 0 #define VERY_LARGE16 ((opus_val16)32767) #define Q15_ONE ((opus_val16)32767) #define SCALEIN(a) (a) #define SCALEOUT(a) (a) #define ABS16(x) ((x) < 0 ? (-(x)) : (x)) #define ABS32(x) ((x) < 0 ? (-(x)) : (x)) static OPUS_INLINE opus_int16 SAT16(opus_int32 x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # ifdef FIXED_DEBUG # include \" fixed_debug . h \" # else # include \" fixed_generic . h \" # ifdef OPUS_ARM_PRESUME_AARCH64_NEON_INTR # include \" arm / fixed_arm64 . h \" # elif)",
    "insertText": "defined(OPUS_ARM_INLINE_EDSP) #include \"arm/fixed_armv5e.h\" #elif defined (OPUS_ARM_INLINE_ASM) #include \"arm/fixed_armv4.h\" #elif defined (BFIN_ASM) #include \"fixed_bfin.h\" #elif defined (TI_C5X_ASM) #include \"fixed_c5x.h\" #elif defined (TI_C6X_ASM)"
  },
  {
    "label": "celt_isnan()",
    "kind": "Method",
    "detail": "Function (typedef float opus_val32 ; typedef float opus_val64 ; typedef float celt_sig ; typedef float celt_norm ; typedef float celt_ener ; # ifdef FLOAT_APPROX OPUS_INLINE int)",
    "insertText": "celt_isnan(float x)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (union { float f ; opus_uint32 i ; } in ; in . f = x ;)",
    "insertText": "return((in.i>>23)&0xFF)==0xFF && (in.i&0x007FFFFF)"
  }
]