[
  {
    "label": "VP9_COMP",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9_COMP"
  },
  {
    "label": "ThreadData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ThreadData"
  },
  {
    "label": "TileDataEnc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TileDataEnc"
  },
  {
    "label": "lookahead_entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "lookahead_entry"
  },
  {
    "label": "VP9EncoderConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VP9EncoderConfig"
  },
  {
    "label": "INVALID_ROW()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VP9_ENCODER_VP9_FIRSTPASS_H_ # define VPX_VP9_ENCODER_VP9_FIRSTPASS_H_ # include<assert . h> # include \" vp9 / common / vp9_onyxc_int . h \" # include \" vp9 / encoder / vp9_lookahead . h \" # include \" vp9 / encoder / vp9_ratectrl . h \" # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "INVALID_ROW(-1)"
  },
  {
    "label": "fps_get_num_frames()",
    "kind": "Method",
    "detail": "Function (first_pass_info -> stats = stats ; first_pass_info -> num_frames = num_frames ; } int)",
    "insertText": "fps_get_num_frames(const FIRST_PASS_INFO *first_pass_info)"
  },
  {
    "label": "vp9_first_pass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_first_pass(struct VP9_COMP *cpi, const struct lookahead_entry *source)"
  },
  {
    "label": "vp9_end_first_pass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_end_first_pass(struct VP9_COMP *cpi)"
  },
  {
    "label": "vp9_first_pass_encode_tile_mb_row()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_first_pass_encode_tile_mb_row(struct VP9_COMP *cpi, struct ThreadData *td, FIRSTPASS_DATA *fp_acc_data, struct TileDataEnc *tile_data, MV *best_ref_mv, int mb_row)"
  },
  {
    "label": "vp9_init_second_pass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_init_second_pass(struct VP9_COMP *cpi)"
  },
  {
    "label": "vp9_rc_get_second_pass_params()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_rc_get_second_pass_params(struct VP9_COMP *cpi)"
  },
  {
    "label": "vp9_init_vizier_params()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_init_vizier_params(TWO_PASS *const twopass, int screen_area)"
  },
  {
    "label": "vp9_twopass_postencode_update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_twopass_postencode_update(struct VP9_COMP *cpi)"
  },
  {
    "label": "calculate_coded_size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calculate_coded_size(struct VP9_COMP *cpi, int *scaled_frame_width, int *scaled_frame_height)"
  },
  {
    "label": "vp9_get_frames_to_next_key()",
    "kind": "Method",
    "detail": "Function (struct VP9EncoderConfig ; int)",
    "insertText": "vp9_get_frames_to_next_key(const struct VP9EncoderConfig *oxcf, const TWO_PASS *const twopass, int kf_show_idx, int min_gf_interval)"
  },
  {
    "label": "vp9_get_next_group_of_picture()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_RATE_CTRL void)",
    "insertText": "vp9_get_next_group_of_picture(const struct VP9_COMP *cpi, int *first_is_key_frame, int *use_alt_ref, int *coding_frame_count, int *first_show_idx, int *last_gop_use_alt_ref)"
  },
  {
    "label": "vp9_get_gop_coding_frame_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_gop_coding_frame_count(const struct VP9EncoderConfig *oxcf, const TWO_PASS *const twopass, const FRAME_INFO *frame_info, const RATE_CONTROL *rc, int show_idx, int multi_layer_arf, int allow_alt_ref, int first_is_key_frame, int last_gop_use_alt_ref, int *use_alt_ref)"
  },
  {
    "label": "vp9_get_coding_frame_num()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "vp9_get_coding_frame_num(const struct VP9EncoderConfig *oxcf, const TWO_PASS *const twopass, const FRAME_INFO *frame_info, int multi_layer_arf, int allow_alt_ref)"
  },
  {
    "label": "vp9_get_key_frame_map()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vp9_get_key_frame_map(const struct VP9EncoderConfig *oxcf, const TWO_PASS *const twopass, int *key_frame_map)"
  },
  {
    "label": "vp9_get_frame_stats()",
    "kind": "Method",
    "detail": "Function (# endif FIRSTPASS_STATS)",
    "insertText": "vp9_get_frame_stats(const TWO_PASS *twopass)"
  },
  {
    "label": "vp9_get_total_stats()",
    "kind": "Method",
    "detail": "Function (FIRSTPASS_STATS)",
    "insertText": "vp9_get_total_stats(const TWO_PASS *twopass)"
  }
]