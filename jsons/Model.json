[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ABrush",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABrush"
  },
  {
    "label": "FBlake3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlake3"
  },
  {
    "label": "FMeshMapBuildData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshMapBuildData"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModel"
  },
  {
    "label": "UModelComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UModelComponent"
  },
  {
    "label": "UPolys",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPolys"
  },
  {
    "label": "FStaticLightingVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingVertex"
  },
  {
    "label": "FVert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVert"
  },
  {
    "label": "EBspNodeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBspNodeFlags"
  },
  {
    "label": "FBspNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBspNode"
  },
  {
    "label": "FZoneSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZoneSet"
  },
  {
    "label": "FZoneProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZoneProperties"
  },
  {
    "label": "FLeaf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLeaf"
  },
  {
    "label": "FBspSurf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBspSurf"
  },
  {
    "label": "EPolyFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPolyFlags"
  },
  {
    "label": "FModelVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModelVertex"
  },
  {
    "label": "FDepecatedModelVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepecatedModelVertex"
  },
  {
    "label": "FModelVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelVertexBuffer"
  },
  {
    "label": "FNodeGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeGroup"
  },
  {
    "label": "FBSPSurfaceStaticLighting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBSPSurfaceStaticLighting"
  },
  {
    "label": "ULightComponentBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponentBase"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UBrushComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrushComponent"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "AVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVolume"
  },
  {
    "label": "FModelElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModelElement"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" Engine / EngineTypes . h \" # include \" RenderCommandFence . h \" # include \" RenderResource . h \" # include \" PackedNormal . h \" # include \" Containers / DynamicRHIResourceArray . h \" # include \" RawIndexBuffer . h \" # include \" LocalVertexFactory . h \" # include \" Templates / UniquePtr . h \" # include \" StaticMeshResources . h \" class AActor ; class ABrush ; class FBlake3 ; class FMeshMapBuildData ; class ULevel ; class ULightComponent ; class UMaterialInterface ; class UModel ; class UModelComponent ; class UPolys ; struct FStaticLightingVertex ; class FVert { public : int32 pVertex ; int32 iSide ; FVector2f ShadowTexCoord ; FVector2f BackfaceShadowTexCoord ; FArchive&)",
    "insertText": "operator(FArchive &Ar, FVert &Vert)"
  },
  {
    "label": "IsCsg()",
    "kind": "Method",
    "detail": "Function (Ar<<Vert . pVertex<<Vert . iSide ; Ar<<Vert . ShadowTexCoord ; Ar<<Vert . BackfaceShadowTexCoord ; return Ar ; } } ; enum EBspNodeFlags { NF_NotCsg = 0 x01,NF_NotVisBlocking = 0 x04,NF_BrightCorners = 0 x10,NF_IsNew = 0 x20,NF_IsFront = 0 x40,NF_IsBack = 0 x80,} ; struct FBspNode { enum { MAX_NODE_VERTICES = 2 5 5 } ; enum { MAX_ZONES = 6 4 } ; FPlane4f Plane ; int32 iVertPool ; int32 iSurf ; int32 iVertexIndex ; uint16 ComponentIndex ; uint16 ComponentNodeIndex ; int32 ComponentElementIndex ; union { int32 iBack ; int32 iChild [ 1 ] ; } ; int32 iFront ; int32 iPlane ; int32 iCollisionBound ; uint8 iZone [ 2 ] ; uint8 NumVertices ; uint8 NodeFlags ; int32 iLeaf [ 2 ] ; bool)",
    "insertText": "IsCsg(uint32 ExtraFlags=0)"
  },
  {
    "label": "ChildOutside()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ChildOutside(int32 IniChild, bool Outside, uint32 ExtraFlags=0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FBspNode& N)"
  },
  {
    "label": "FZoneSet()",
    "kind": "Method",
    "detail": "Function (} ; struct FZoneSet {)",
    "insertText": "FZoneSet(): MaskBits(0)"
  },
  {
    "label": "FZoneSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FZoneSet(uint64 InMaskBits): MaskBits(InMaskBits)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FZoneSet& S)"
  },
  {
    "label": "FLeaf()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLeaf(int32 iInZone): iZone(iInZone)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FLeaf& L)"
  },
  {
    "label": "IsHiddenEd()",
    "kind": "Method",
    "detail": "Function (Ar<<L . iZone ; return Ar ; } } ; struct FBspSurf { TObjectPtr<UMaterialInterface> Material ; uint32 PolyFlags ; int32 pBase ; int32 vNormal ; int32 vTextureU ; int32 vTextureV ; int32 iBrushPoly ; TObjectPtr<ABrush> Actor ; FPlane4f Plane ; float LightMapScale ; int32 iLightmassIndex ; bool bHiddenEdTemporary ; bool bHiddenEdLevel ; bool bHiddenEdLayer ; # if WITH_EDITOR bool)",
    "insertText": "IsHiddenEd()"
  },
  {
    "label": "IsHiddenEdAtStartup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHiddenEdAtStartup()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif FArchive&)",
    "insertText": "operator(FArchive& Ar, FBspSurf& Surf)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetTangentY()",
    "kind": "Method",
    "detail": "Function (} ; enum EPolyFlags { PF_Invisible = 0 x00000001,PF_NotSolid = 0 x00000008,PF_Semisolid = 0 x00000020,PF_GeomMarked = 0 x00000040,PF_TwoSided = 0 x00000100,PF_Portal = 0 x04000000,PF_Memorized = 0 x01000000,PF_Selected = 0 x02000000,PF_HiddenEd = 0 x08000000,PF_Hovered = 0 x10000000,PF_EdProcessed = 0 x40000000,PF_EdCut = 0 x80000000,PF_NoEdit = PF_Memorized | PF_Selected | PF_Hovered | PF_EdProcessed | PF_EdCut,PF_NoImport = PF_NoEdit | PF_Memorized | PF_Selected | PF_Hovered | PF_EdProcessed | PF_EdCut,PF_AddLast = PF_Semisolid | PF_NotSolid,PF_NoAddToBSP = PF_EdCut | PF_EdProcessed | PF_Selected | PF_Hovered | PF_Memorized,PF_ModelComponentMask = 0,PF_DefaultFlags = 0,} ; struct FModelVertex { FVector3f Position ; FVector3f TangentX ; FVector4f TangentZ ; FVector2f TexCoord ; FVector2f ShadowTexCoord ; FVector3f)",
    "insertText": "GetTangentY()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (FVector3f TanX = TangentX ; FVector3f TanZ = TangentZ ;)",
    "insertText": "return(TanZ ^ TanX)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FArchive&)",
    "insertText": "operator(FArchive& Ar,FModelVertex& V)"
  },
  {
    "label": "FModelVertex()",
    "kind": "Method",
    "detail": "Function (} ; struct FDepecatedModelVertex { FVector3f Position ; FDeprecatedSerializedPackedNormal TangentX ; FDeprecatedSerializedPackedNormal TangentZ ; FVector2f TexCoord ; FVector2f ShadowTexCoord ; operator)",
    "insertText": "FModelVertex()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModelVertex Ret ; Ret . Position = Position ; Ret . TangentX = TangentX ; Ret . TangentZ = TangentZ ; Ret . TexCoord = TexCoord ; Ret . ShadowTexCoord = ShadowTexCoord ; return Ret ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FDepecatedModelVertex& V)"
  },
  {
    "label": "FModelVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} ; class FModelVertexBuffer { public : uint32 RefCount = 0 ; TArray<FModelVertex> Vertices ; FStaticMeshVertexBuffers Buffers ;)",
    "insertText": "FModelVertexBuffer(UModel* InModel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FModelVertexBuffer& B)"
  },
  {
    "label": "UpdateHash()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "UpdateHash(FBlake3& Builder, const FModelVertexBuffer& B)"
  },
  {
    "label": "FNodeGroup()",
    "kind": "Method",
    "detail": "Function (# endif private : UModel* Model ; uint32 NumVerticesRHI ; } ; struct FNodeGroup { ~)",
    "insertText": "FNodeGroup()"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_NO_CTOR_NO_VTABLE_CTOR()",
    "kind": "Method",
    "detail": "Function (TArray<int32> Nodes ; TArray<ULightComponent*> RelevantLights ; FVector3f TangentX ; FVector3f TangentY ; FVector3f TangentZ ; FMatrix MapToWorld ; FMatrix WorldToMap ; FBox BoundingBox ; int32 SizeX ; int32 SizeY ; TArray<FStaticLightingVertex> Vertices ; TArray<int32> TriangleVertexIndices ; TArray<int32> TriangleSurfaceMap ; } ; enum { MAX_NODES = 6 5 5 3 6 } ; enum { MAX_POINTS = 1 2 8 0 0 0 } ; class UModel : public UObject {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_NO_CTOR_NO_VTABLE_CTOR(UModel, UObject, 0, TEXT(\"/Script/Engine\"), CASTCLASS_None, ENGINE_API) UModel(FVTableHelper& Helper)"
  },
  {
    "label": "UModel()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TObjectPtr<UPolys> Polys ; # endif TArray<FBspNode> Nodes ; TArray<FVert> Verts ; TArray<FVector3f> Vectors ; TArray<FVector3f> Points ; TArray<FBspSurf> Surfs ; # if WITH_EDITOR TArray<int32> LeafHulls ; TArray<FLeaf> Leaves ; # endif TArray<FLightmassPrimitiveSettings> LightmassSettings ; TMap<UMaterialInterface*,TUniquePtr<FRawIndexBuffer16or32>> MaterialIndexBuffers ; FModelVertexBuffer VertexBuffer ; FRenderCommandFence ReleaseResourcesFence ; bool InvalidSurfaces ; bool bOnlyRebuildMaterialIndexBuffers ; bool bInvalidForStaticLighting ; uint32 NumUniqueVertices ; FGuid LightingGuid ; # if WITH_EDITOR TMap<int32,FNodeGroup*> NodeGroups ; TArray<class FBSPSurfaceStaticLighting*> CachedMappings ; int32 NumIncompleteNodeGroups ; ULevel* LightingLevel ; FVector3f OwnerLocationWhenLastBuilt ; FRotator OwnerRotationWhenLastBuilt ; FVector3f OwnerScaleWhenLastBuilt ; bool bCachedOwnerTransformValid ; # endif bool RootOutside ; bool Linked ; int32 NumSharedSides ; FBoxSphereBounds Bounds ; private : float BSPTexelScale ; public :)",
    "insertText": "UModel(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(ABrush* Owner, bool InRootOutside = true)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext SaveContext)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "Rename(const TCHAR* InName=NULL, UObject* NewOuter=NULL, ERenameFlags Flags=REN_None)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetGlobalBSPTexelScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGlobalBSPTexelScale()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (BSPTexelScale = InBSPTexelScale ; } void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "IsAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsset()"
  },
  {
    "label": "EmptyModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyModel(int32 EmptySurfInfo, int32 EmptyPolys)"
  },
  {
    "label": "BeginReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginReleaseResources()"
  },
  {
    "label": "UpdateVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVertices()"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetSurfacePlanes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSurfacePlanes(const AActor* Owner, TArray<FPlane>& OutPlanes)"
  },
  {
    "label": "BuildBound()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "BuildBound()"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transform(ABrush* Owner)"
  },
  {
    "label": "ShrinkModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkModel()"
  },
  {
    "label": "BuildVertexBuffers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BuildVertexBuffers()"
  },
  {
    "label": "ModifySelectedSurfs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifySelectedSurfs(bool UpdateBrushes)"
  },
  {
    "label": "ModifyAllSurfs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyAllSurfs(bool UpdateBrushes)"
  },
  {
    "label": "ModifySurf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifySurf(int32 InIndex, bool UpdateBrushes)"
  },
  {
    "label": "HasSelectedSurfaces()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedSurfaces()"
  },
  {
    "label": "FindNearestVertex()",
    "kind": "Method",
    "detail": "Function (# endif float)",
    "insertText": "FindNearestVertex(const FVector3f &SourcePoint, FVector3f &DestPoint, float MinRadius, int32 &pVertex)"
  },
  {
    "label": "PrecomputeSphereFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecomputeSphereFilter(const FPlane &Sphere)"
  },
  {
    "label": "FindBrush()",
    "kind": "Method",
    "detail": "Function (ABrush*)",
    "insertText": "FindBrush(const FVector3f &SourcePoint)"
  },
  {
    "label": "GetNodeBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNodeBoundingBox(const FBspNode& Node, FBox& OutBox)"
  },
  {
    "label": "GroupAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupAllNodes(ULevel* Level, const TArray<class ULightComponentBase*>& Lights)"
  },
  {
    "label": "ApplyStaticLighting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyStaticLighting(const FStaticLightingBuildContext* LightingContext)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "ClearLocalMaterialIndexBuffersData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearLocalMaterialIndexBuffersData()"
  },
  {
    "label": "CalculateUniqueVertCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateUniqueVertCount()"
  },
  {
    "label": "ConstructLightingGuid()",
    "kind": "Method",
    "detail": "Function (class UWorld ; class UBrushComponent ; class UStaticMeshComponent ; class AActor ; class AVolume ; private : FGuid)",
    "insertText": "ConstructLightingGuid()"
  },
  {
    "label": "FModelElement()",
    "kind": "Method",
    "detail": "Function (} ; class FModelElement { public : TObjectPtr<class UModelComponent> Component ; TObjectPtr<class UMaterialInterface> Material ; TArray<uint16> Nodes ; FMeshMapBuildData* LegacyMapBuildData ; FGuid MapBuildDataId ; FRawIndexBuffer16or32* IndexBuffer ; uint32 FirstIndex ; uint32 NumTriangles ; uint32 MinVertexIndex ; uint32 MaxVertexIndex ; FBox BoundingBox ;)",
    "insertText": "FModelElement(UModelComponent* InComponent,UMaterialInterface* InMaterial)"
  },
  {
    "label": "FModelElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModelElement()"
  },
  {
    "label": "GetMeshMapBuildData()",
    "kind": "Method",
    "detail": "Function (const FMeshMapBuildData*)",
    "insertText": "GetMeshMapBuildData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FModelElement& Element)"
  }
]