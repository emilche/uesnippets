[
  {
    "label": "TTypeToString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypeToString"
  },
  {
    "label": "TTypeFromString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypeFromString"
  },
  {
    "label": "FStringOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringOutputDevice"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FStringOutputDeviceCountLines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringOutputDeviceCountLines"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "FTextRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextRange"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "uint8(Hex - '0')"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "uint8(Hex - 'A' + 10)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "uint8(Hex - 'a' + 10)"
  },
  {
    "label": "StringType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "StringType(Ptr)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "LexFromString(Value, Buffer)"
  },
  {
    "label": "InlineCombineSurrogates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InlineCombineSurrogates(FString& Str)"
  },
  {
    "label": "FTextRange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FTextRange(0, 0)"
  },
  {
    "label": "CalculateLineRangesFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateLineRangesFromString(const FString& Input, TArray<FTextRange>& LineRanges)"
  },
  {
    "label": "StripNegativeZero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StripNegativeZero(double& InFloat)"
  }
]