[
  {
    "label": "TSampleSetStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSampleSetStatistics"
  },
  {
    "label": "FFixedCountData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFixedCountData"
  },
  {
    "label": "TSampleSetStatisticBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSampleSetStatisticBuilder"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoxTypes . h \" namespace UE { namespace Geometry { template<RealType> struct TSampleSetStatistics { int64 Count = 0 ; TInterval1<RealType> Range = TInterval1<RealType)",
    "insertText": "Empty()"
  },
  {
    "label": "Begin_FixedCount()",
    "kind": "Method",
    "detail": "Function (RealType Mean = 0 ; RealType StandardDeviation = 0 ; struct FFixedCountData { int32 PassNum ; RealType CountDivide ; } ; FFixedCountData)",
    "insertText": "Begin_FixedCount(int64 CountIn)"
  },
  {
    "label": "CountDivide()",
    "kind": "Method",
    "detail": "Function (Mean = 0 ; StandardDeviation = 0 ; FFixedCountData Data ; Data .)",
    "insertText": "CountDivide(RealType)"
  },
  {
    "label": "StartSecondPass_FixedCount()",
    "kind": "Method",
    "detail": "Function (Data . PassNum = 0 ; return Data ; } void)",
    "insertText": "StartSecondPass_FixedCount(FFixedCountData& DataInOut)"
  },
  {
    "label": "CountDivide()",
    "kind": "Method",
    "detail": "Function (StandardDeviation = 0 ; DataInOut .)",
    "insertText": "CountDivide(RealType)(Count - 1)"
  },
  {
    "label": "CompleteSecondPass_FixedCount()",
    "kind": "Method",
    "detail": "Function (DataInOut . PassNum = 1 ; } void)",
    "insertText": "CompleteSecondPass_FixedCount(FFixedCountData& DataInOut)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (StandardDeviation = TMathUtil<RealType)",
    "insertText": "Sqrt(StandardDeviation)"
  },
  {
    "label": "AccumulateValue_FixedCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumulateValue_FixedCount(const RealType Value, FFixedCountData& DataInOut)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (Range .)",
    "insertText": "Contain(Value)"
  },
  {
    "label": "StandardDeviation()",
    "kind": "Method",
    "detail": "Function (Mean + = Value* DataInOut . CountDivide ; } else {)",
    "insertText": "StandardDeviation(Value - Mean) * (Value - Mean)"
  },
  {
    "label": "TSampleSetStatisticBuilder()",
    "kind": "Method",
    "detail": "Function (} } } ; typedef TSampleSetStatistics<float> FSampleSetStatisticsf ; typedef TSampleSetStatistics<double> FSampleSetStatisticsd ; template<RealType> struct TSampleSetStatisticBuilder { int32 NumStatistics ; TArray<TSampleSetStatistics<RealType>> Statistics ; TArray<TSampleSetStatistics<RealType>::FFixedCountData> FixedCountBuildData ;)",
    "insertText": "TSampleSetStatisticBuilder(int32 NumStatisticsIn = 1)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (NumStatistics = NumStatisticsIn ; Statistics .)",
    "insertText": "Init(TSampleSetStatistics<RealType>(), NumStatistics)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (FixedCountBuildData .)",
    "insertText": "SetNum(NumStatistics)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const TSampleSetStatistics<RealType>&)",
    "insertText": "operator(int32 Index)"
  },
  {
    "label": "Begin_FixedCount()",
    "kind": "Method",
    "detail": "Function (FixedCountBuildData [ j ] = Statistics [ j ] .)",
    "insertText": "Begin_FixedCount(Count)"
  },
  {
    "label": "StartSecondPass_FixedCount()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "StartSecondPass_FixedCount()"
  },
  {
    "label": "StartSecondPass_FixedCount()",
    "kind": "Method",
    "detail": "Function (Statistics [ j ] .)",
    "insertText": "StartSecondPass_FixedCount(FixedCountBuildData[j])"
  },
  {
    "label": "CompleteSecondPass_FixedCount()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CompleteSecondPass_FixedCount()"
  },
  {
    "label": "CompleteSecondPass_FixedCount()",
    "kind": "Method",
    "detail": "Function (Statistics [ j ] .)",
    "insertText": "CompleteSecondPass_FixedCount(FixedCountBuildData[j])"
  },
  {
    "label": "AccumulateValue_FixedCount()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AccumulateValue_FixedCount(int32 StatisticIndex, const RealType Value)"
  },
  {
    "label": "AccumulateValue_FixedCount()",
    "kind": "Method",
    "detail": "Function (Statistics [ StatisticIndex ] .)",
    "insertText": "AccumulateValue_FixedCount(Value, FixedCountBuildData[StatisticIndex])"
  },
  {
    "label": "ComputeMultiPass()",
    "kind": "Method",
    "detail": "Function (} template<EnumerableType> void)",
    "insertText": "ComputeMultiPass(int64 Count, const EnumerableType& MultiEnumerableType)"
  },
  {
    "label": "AccumulateValue_FixedCount()",
    "kind": "Method",
    "detail": "Function (Statistics [ 0 ] .)",
    "insertText": "AccumulateValue_FixedCount(Value, FixedCountBuildData[0])"
  }
]