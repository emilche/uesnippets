[
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "T2DIndexer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2DIndexer"
  },
  {
    "label": "FLandscapeComponent2DIndexerKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeComponent2DIndexerKeyFuncs"
  },
  {
    "label": "ComputeMaxDeltasOffsetForMip()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" enum EShaderPlatform : uint16 ; class ULandscapeComponent ; class ULandscapeInfo ; namespace UE::Landscape::Private { int32)",
    "insertText": "ComputeMaxDeltasOffsetForMip(int32 InMipIndex, int32 InNumRelevantMips)"
  },
  {
    "label": "ComputeMaxDeltasCountForMip()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeMaxDeltasCountForMip(int32 InMipIndex, int32 InNumRelevantMips)"
  },
  {
    "label": "ComputeMipToMipMaxDeltasIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeMipToMipMaxDeltasIndex(int32 InSourceMipIndex, int32 InDestinationMipIndex, int32 InNumRelevantMips)"
  },
  {
    "label": "ComputeMipToMipMaxDeltasCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ComputeMipToMipMaxDeltasCount(int32 InNumRelevantMips)"
  },
  {
    "label": "UseWeightmapTextureArray()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "UseWeightmapTextureArray(EShaderPlatform InPlatform)"
  },
  {
    "label": "IsMobileWeightmapTextureArrayEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMobileWeightmapTextureArrayEnabled()"
  },
  {
    "label": "T2DIndexer()",
    "kind": "Method",
    "detail": "Function (# endif template<ValueType,KeyFuncs> class T2DIndexer { public :)",
    "insertText": "T2DIndexer(TConstArrayView<ValueType> InValues)"
  },
  {
    "label": "MinMaxKeys()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "MinMaxKeys(FIntPoint(MAX_int32, MAX_int32), FIntPoint(MIN_int32, MIN_int32))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TArray<FIntPoint> AllKeys ; const int32 NumValues = InValues .)",
    "insertText": "Num()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (AllKeys .)",
    "insertText": "AddDefaulted(NumValues)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (const ValueType& Value = InValues [ Index ] ; FIntPoint Key =)",
    "insertText": "GetKey(Value)"
  },
  {
    "label": "Include()",
    "kind": "Method",
    "detail": "Function (AllKeys [ Index ] = Key ; MinMaxKeys .)",
    "insertText": "Include(Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!AllKeys.IsEmpty())"
  },
  {
    "label": "FIntRect()",
    "kind": "Method",
    "detail": "Function (KeyExclusiveBounds =)",
    "insertText": "FIntRect(MinMaxKeys.Min, MinMaxKeys.Max + 1)"
  },
  {
    "label": "Area()",
    "kind": "Method",
    "detail": "Function (} int32 NumEntries = KeyExclusiveBounds .)",
    "insertText": "Area()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (AllValues .)",
    "insertText": "AddDefaulted(NumEntries)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (ValidValueBitIndices .)",
    "insertText": "Init(false, NumEntries)"
  },
  {
    "label": "GetValueIndexForKey()",
    "kind": "Method",
    "detail": "Function (int32 ValueIndex =)",
    "insertText": "GetValueIndexForKey(AllKeys[Index])"
  },
  {
    "label": "T2DIndexer()",
    "kind": "Method",
    "detail": "Function (AllValues [ ValueIndex ] = InValues [ Index ] ; ValidValueBitIndices [ ValueIndex ] = true ; } } ~)",
    "insertText": "T2DIndexer()"
  },
  {
    "label": "T2DIndexer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "T2DIndexer(const T2DIndexer& Other)"
  },
  {
    "label": "T2DIndexer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "T2DIndexer(T2DIndexer&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T2DIndexer&)",
    "insertText": "operator(const T2DIndexer& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (T2DIndexer&)",
    "insertText": "operator(T2DIndexer&& Other)"
  },
  {
    "label": "IsValidKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidKey(const FIntPoint& InKey)"
  },
  {
    "label": "IsValidValueIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidValueIndex(int32 InIndex)"
  },
  {
    "label": "GetValueForKey()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "GetValueForKey(const FIntPoint& InKey)"
  },
  {
    "label": "GetValueForKeySafe()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "GetValueForKeySafe(const FIntPoint& InKey)"
  },
  {
    "label": "GetValueForKeyChecked()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "GetValueForKeyChecked(const FIntPoint& InKey)"
  },
  {
    "label": "GetValueIndexForKey()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValueIndexForKey(const FIntPoint& InKey)"
  },
  {
    "label": "Width()",
    "kind": "Method",
    "detail": "Function (FIntPoint RelativeKey = InKey - KeyExclusiveBounds . Min ; return RelativeKey . Y* KeyExclusiveBounds .)",
    "insertText": "Width()"
  },
  {
    "label": "GetValueIndexForKeySafe()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValueIndexForKeySafe(const FIntPoint& InKey)"
  },
  {
    "label": "GetValueIndexForKeyChecked()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValueIndexForKeyChecked(const FIntPoint& InKey)"
  },
  {
    "label": "GetValueKeyForIndex()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetValueKeyForIndex(int32 InIndex)"
  },
  {
    "label": "GetValueKeyForIndexSafe()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetValueKeyForIndexSafe(int32 InIndex)"
  },
  {
    "label": "GetValueKeyForIndexChecked()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetValueKeyForIndexChecked(int32 InIndex)"
  },
  {
    "label": "GetValueIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValueIndex(const ValueType& InValue)"
  },
  {
    "label": "GetValueIndexSafe()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValueIndexSafe(const ValueType& InValue)"
  },
  {
    "label": "GetValueIndexChecked()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetValueIndexChecked(const ValueType& InValue)"
  },
  {
    "label": "IsValidValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidValue(const FIntPoint& InKey)"
  },
  {
    "label": "IsValidValueSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidValueSafe(const FIntPoint& InKey)"
  },
  {
    "label": "IsValidValueChecked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidValueChecked(const FIntPoint& InKey)"
  },
  {
    "label": "HasValidValueInBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidValueInBounds(const FIntRect& InBounds, bool bInInclusiveBounds)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FIntRect LocalBounds = InBounds ;)",
    "insertText": "if(bInInclusiveBounds)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (LocalBounds . Max + =)",
    "insertText": "FIntPoint(1, 1)"
  },
  {
    "label": "Clip()",
    "kind": "Method",
    "detail": "Function (} LocalBounds .)",
    "insertText": "Clip(KeyExclusiveBounds)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "Result(false, ValidValueBitIndices.Num())"
  },
  {
    "label": "GetValueIndexForKey()",
    "kind": "Method",
    "detail": "Function (int32 ValueIndex =)",
    "insertText": "GetValueIndexForKey(FIntPoint(X, Y))"
  },
  {
    "label": "GetValidValuesForBitIndices()",
    "kind": "Method",
    "detail": "Function (Result [ ValueIndex ] = ValidValueBitIndices [ ValueIndex ] ; } } return Result ; } TArray<ValueType>)",
    "insertText": "GetValidValuesForBitIndices(const TBitArray<>& InBitIndices)"
  },
  {
    "label": "BitwiseAND()",
    "kind": "Method",
    "detail": "Function (TBitArray<> LocalBitIndices = TBitArray<)",
    "insertText": "BitwiseAND(ValidValueBitIndices, InBitIndices, EBitwiseOperatorFlags::MinSize)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<ValueType> Result ; Result .)",
    "insertText": "Reserve(InBitIndices.CountSetBits())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(AllValues[It.GetIndex()])"
  },
  {
    "label": "GetValidValuesBoundsForBitIndices()",
    "kind": "Method",
    "detail": "Function (} return Result ; } FIntRect)",
    "insertText": "GetValidValuesBoundsForBitIndices(const TBitArray<>& InBitIndices, bool bInInclusiveBounds)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} const int32 FirstSetBitIndex = InBitIndices .)",
    "insertText": "Find(true)"
  },
  {
    "label": "FindLast()",
    "kind": "Method",
    "detail": "Function (const int32 LastSetBitIndex = InBitIndices .)",
    "insertText": "FindLast(true)"
  },
  {
    "label": "Bounds()",
    "kind": "Method",
    "detail": "Function (FIntRect)",
    "insertText": "Bounds(FIntPoint(MAX_int32, MAX_int32), FIntPoint(MIN_int32, MIN_int32))"
  },
  {
    "label": "DivideAndRoundDown()",
    "kind": "Method",
    "detail": "Function (const int32 YMax =)",
    "insertText": "DivideAndRoundDown(LastSetBitIndex, Stride)"
  },
  {
    "label": "FindFrom()",
    "kind": "Method",
    "detail": "Function (const int32 LineFirstSetBitIndex = LocalBitIndices .)",
    "insertText": "FindFrom(true, Y * Stride)"
  },
  {
    "label": "FindLastFrom()",
    "kind": "Method",
    "detail": "Function (const int32 LineLastSetBitIndex = LocalBitIndices .)",
    "insertText": "FindLastFrom(true, (Y + 1) * Stride - 1)"
  },
  {
    "label": "GetValueKeyForIndex()",
    "kind": "Method",
    "detail": "Function (FIntPoint LineMinKey =)",
    "insertText": "GetValueKeyForIndex(LineFirstSetBitIndex)"
  },
  {
    "label": "GetValueKeyForIndex()",
    "kind": "Method",
    "detail": "Function (FIntPoint LineMaxKey =)",
    "insertText": "GetValueKeyForIndex(LineLastSetBitIndex)"
  },
  {
    "label": "ComponentMin()",
    "kind": "Method",
    "detail": "Function (Bounds . Min = Bounds . Min .)",
    "insertText": "ComponentMin(LineMinKey)"
  },
  {
    "label": "ComponentMax()",
    "kind": "Method",
    "detail": "Function (Bounds . Max = Bounds . Max .)",
    "insertText": "ComponentMax(LineMaxKey)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsValid = true ; } })",
    "insertText": "if(!bInInclusiveBounds)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(bIsValid)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<ValueType> Result ; Result .)",
    "insertText": "Reserve(ValidValueBitIndices.CountSetBits())"
  },
  {
    "label": "GetAllValues()",
    "kind": "Method",
    "detail": "Function (} return Result ; } const TArray<ValueType>&)",
    "insertText": "GetAllValues()"
  },
  {
    "label": "CreateLandscapeComponent2DIndexer()",
    "kind": "Method",
    "detail": "Function (} ; using FLandscapeComponent2DIndexer = T2DIndexer<ULandscapeComponent*,FLandscapeComponent2DIndexerKeyFuncs> ; FLandscapeComponent2DIndexer)",
    "insertText": "CreateLandscapeComponent2DIndexer(const ULandscapeInfo* InInfo)"
  }
]