[
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "USubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USubsystem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDependency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDependency"
  },
  {
    "label": "Count",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Count"
  },
  {
    "label": "Select",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Select"
  },
  {
    "label": "FSimpleQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimpleQuery"
  },
  {
    "label": "FQueryCallbackType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryCallbackType"
  },
  {
    "label": "FProcessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcessor"
  },
  {
    "label": "FObserver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObserver"
  },
  {
    "label": "FPhaseAmble",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhaseAmble"
  },
  {
    "label": "FQueryContextForwarder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryContextForwarder"
  },
  {
    "label": "FCachedQueryContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedQueryContext"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Common / TypedElementCommonTypes . h \" # include \" Elements / Interfaces / TypedElementDataStorageInterface . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class UScriptStruct ; class USubsystem ; namespace UE::Editor::DataStorage::Queries { const UScriptStruct*)",
    "insertText": "Type(FTopLevelAssetPath Name)"
  },
  {
    "label": "TypeOptional()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct*)",
    "insertText": "TypeOptional(FTopLevelAssetPath Name)"
  },
  {
    "label": "_Type()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* operator \" \")",
    "insertText": "_Type(const char* Name, std::size_t NameSize)"
  },
  {
    "label": "_TypeOptional()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* operator \" \")",
    "insertText": "_TypeOptional(const char* Name, std::size_t NameSize)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (enum class EOptional { No,Yes } ; class FDependency final { class Count ; class Select ; class FSimpleQuery ; public : template<. . . TargetTypes> FDependency&)",
    "insertText": "ReadOnly()"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (FDependency&)",
    "insertText": "ReadOnly(const UClass* Target)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (FDependency&)",
    "insertText": "ReadOnly(TConstArrayView<const UClass*> Targets)"
  },
  {
    "label": "ReadWrite()",
    "kind": "Method",
    "detail": "Function (template<. . . TargetTypes> FDependency&)",
    "insertText": "ReadWrite()"
  },
  {
    "label": "ReadWrite()",
    "kind": "Method",
    "detail": "Function (FDependency&)",
    "insertText": "ReadWrite(const UClass* Target)"
  },
  {
    "label": "ReadWrite()",
    "kind": "Method",
    "detail": "Function (FDependency&)",
    "insertText": "ReadWrite(TConstArrayView<const UClass*> Targets)"
  },
  {
    "label": "SubQuery()",
    "kind": "Method",
    "detail": "Function (FDependency&)",
    "insertText": "SubQuery(QueryHandle Handle)"
  },
  {
    "label": "SubQuery()",
    "kind": "Method",
    "detail": "Function (FDependency&)",
    "insertText": "SubQuery(TConstArrayView<QueryHandle> Handles)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (FQueryDescription&&)",
    "insertText": "Compile()"
  },
  {
    "label": "FDependency()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FDependency(FQueryDescription* Query)"
  },
  {
    "label": "DependsOn()",
    "kind": "Method",
    "detail": "Function (FQueryDescription* Query ; } ; class FSimpleQuery final { public : class Count ; class Select ; FDependency)",
    "insertText": "DependsOn()"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (template<TColumnType . . . TargetTypes> FSimpleQuery&)",
    "insertText": "All()"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "All(const UScriptStruct* Target)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "All(TConstArrayView<const UScriptStruct*> Targets)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (template<TColumnType . . . TargetTypes> FSimpleQuery&)",
    "insertText": "Any()"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "Any(const UScriptStruct* Target)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "Any(TConstArrayView<const UScriptStruct*> Targets)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "Any(const FDynamicColumnDescription& Description)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (template<TColumnType T> FSimpleQuery&)",
    "insertText": "Any(const FName&)"
  },
  {
    "label": "Any()",
    "kind": "Method",
    "detail": "Function (template<TValueTagType> FSimpleQuery&)",
    "insertText": "Any(const FName&, const FName&)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (template<TColumnType . . . TargetTypes> FSimpleQuery&)",
    "insertText": "None()"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "None(const UScriptStruct* Target)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "None(TConstArrayView<const UScriptStruct*> Targets)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (template<TValueTagType> FSimpleQuery&)",
    "insertText": "None(const FName& Tag)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (template<TValueTagType> FSimpleQuery&)",
    "insertText": "None(const FName& Tag, const FName& Value)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "None(const FDynamicColumnDescription& Description)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (template<TColumnType T> FSimpleQuery&)",
    "insertText": "None(const FName&)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "All(const FValueTag& Tag)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "All(const FValueTag& Tag, const FName& Value)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "All(const UEnum& Enum)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "All(const UEnum& Enum, int64 Value)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery&)",
    "insertText": "All(const FDynamicColumnDescription& Description)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (template<TColumnType T> FSimpleQuery&)",
    "insertText": "All(const FName&)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (template<TValueTagType> FSimpleQuery&)",
    "insertText": "All(const FName& Tag)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (template<TValueTagType> FSimpleQuery&)",
    "insertText": "All(const FName& Tag, const FName& Value)"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (template<TEnumType EnumT> FSimpleQuery&)",
    "insertText": "All(EnumT EnumValue)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<auto Value,TEnumType EnumT =)",
    "insertText": "decltype(Value)> FSimpleQuery& All()"
  },
  {
    "label": "FSimpleQuery()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSimpleQuery(FQueryDescription* Query)"
  },
  {
    "label": "FProcessor()",
    "kind": "Method",
    "detail": "Function (FQueryDescription* Query ; } ; struct FQueryCallbackType { } ; struct FProcessor final : public FQueryCallbackType {)",
    "insertText": "FProcessor(EQueryTickPhase Phase, FName Group)"
  },
  {
    "label": "SetPhase()",
    "kind": "Method",
    "detail": "Function (FProcessor&)",
    "insertText": "SetPhase(EQueryTickPhase NewPhase)"
  },
  {
    "label": "SetGroup()",
    "kind": "Method",
    "detail": "Function (FProcessor&)",
    "insertText": "SetGroup(FName GroupName)"
  },
  {
    "label": "SetBeforeGroup()",
    "kind": "Method",
    "detail": "Function (FProcessor&)",
    "insertText": "SetBeforeGroup(FName GroupName)"
  },
  {
    "label": "SetAfterGroup()",
    "kind": "Method",
    "detail": "Function (FProcessor&)",
    "insertText": "SetAfterGroup(FName GroupName)"
  },
  {
    "label": "SetExecutionMode()",
    "kind": "Method",
    "detail": "Function (FProcessor&)",
    "insertText": "SetExecutionMode(EExecutionMode Mode)"
  },
  {
    "label": "MakeActivatable()",
    "kind": "Method",
    "detail": "Function (FProcessor&)",
    "insertText": "MakeActivatable(FName Name)"
  },
  {
    "label": "FObserver()",
    "kind": "Method",
    "detail": "Function (EQueryTickPhase Phase ; FName Group ; FName BeforeGroup ; FName AfterGroup ; FName ActivationName ; EExecutionMode ExecutionMode = EExecutionMode::Default ; } ; struct FObserver final : public FQueryCallbackType { enum class EEvent : uint8 { Add,Remove } ;)",
    "insertText": "FObserver(EEvent MonitorForEvent, const UScriptStruct* MonitoredColumn)"
  },
  {
    "label": "OnAdd()",
    "kind": "Method",
    "detail": "Function (template<TColumnType ColumnType> FObserver)",
    "insertText": "OnAdd()"
  },
  {
    "label": "OnRemove()",
    "kind": "Method",
    "detail": "Function (template<TColumnType ColumnType> FObserver)",
    "insertText": "OnRemove()"
  },
  {
    "label": "SetEvent()",
    "kind": "Method",
    "detail": "Function (FObserver&)",
    "insertText": "SetEvent(EEvent MonitorForEvent)"
  },
  {
    "label": "SetMonitoredColumn()",
    "kind": "Method",
    "detail": "Function (FObserver&)",
    "insertText": "SetMonitoredColumn(const UScriptStruct* MonitoredColumn)"
  },
  {
    "label": "SetMonitoredColumn()",
    "kind": "Method",
    "detail": "Function (template<TColumnType ColumnType> FObserver&)",
    "insertText": "SetMonitoredColumn()"
  },
  {
    "label": "FPhaseAmble()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* Monitor ; EEvent Event ; FName ActivationName ; EExecutionMode ExecutionMode = EExecutionMode::Default ; } ; struct FPhaseAmble final : public FQueryCallbackType { enum class ELocation : uint8 { Preamble,Postamble } ;)",
    "insertText": "FPhaseAmble(ELocation InLocation, EQueryTickPhase InPhase)"
  },
  {
    "label": "SetLocation()",
    "kind": "Method",
    "detail": "Function (FPhaseAmble&)",
    "insertText": "SetLocation(ELocation NewLocation)"
  },
  {
    "label": "FQueryContextForwarder()",
    "kind": "Method",
    "detail": "Function (EQueryTickPhase Phase ; ELocation Location ; FName ActivationName ; EExecutionMode ExecutionMode = EExecutionMode::Default ; } ; struct FQueryContextForwarder : public IQueryContext {)",
    "insertText": "FQueryContextForwarder(const FQueryDescription& InDescription, IQueryContext& InParentContext)"
  },
  {
    "label": "FQueryContextForwarder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FQueryContextForwarder()"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetColumn(const UScriptStruct* ColumnType)"
  },
  {
    "label": "GetMutableColumn()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetMutableColumn(const UScriptStruct* ColumnType)"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetColumns(TArrayView<char*> RetrievedAddresses, TConstArrayView<TWeakObjectPtr<const UScriptStruct>> ColumnTypes, TConstArrayView<EQueryAccessType> AccessTypes)"
  },
  {
    "label": "GetColumnsUnguarded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetColumnsUnguarded(int32 TypeCount, char** RetrievedAddresses, const TWeakObjectPtr<const UScriptStruct>* ColumnTypes, const EQueryAccessType* AccessTypes)"
  },
  {
    "label": "HasColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasColumn(const UScriptStruct* ColumnType)"
  },
  {
    "label": "GetMutableDependency()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetMutableDependency(const UClass* DependencyClass)"
  },
  {
    "label": "GetDependency()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "GetDependency(const UClass* DependencyClass)"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDependencies(TArrayView<UObject*> RetrievedAddresses, TConstArrayView<TWeakObjectPtr<const UClass>> SubsystemTypes, TConstArrayView<EQueryAccessType> AccessTypes)"
  },
  {
    "label": "GetRowCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRowCount()"
  },
  {
    "label": "GetRowHandles()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<RowHandle>)",
    "insertText": "GetRowHandles()"
  },
  {
    "label": "RemoveRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRow(RowHandle Row)"
  },
  {
    "label": "RemoveRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRows(TConstArrayView<RowHandle> Rows)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(RowHandle Row, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "AddColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumns(TConstArrayView<RowHandle> Rows, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumns(RowHandle Row, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "RemoveColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumns(TConstArrayView<RowHandle> Rows, TConstArrayView<const UScriptStruct*> ColumnTypes)"
  },
  {
    "label": "PushCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushCommand(void(* CommandFunction)(void*), void* CommandData)"
  },
  {
    "label": "RunQuery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunQuery(QueryHandle Query)"
  },
  {
    "label": "RunSubquery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunSubquery(int32 SubqueryIndex)"
  },
  {
    "label": "RunSubquery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunSubquery(int32 SubqueryIndex, SubqueryCallbackRef Callback)"
  },
  {
    "label": "RunSubquery()",
    "kind": "Method",
    "detail": "Function (FQueryResult)",
    "insertText": "RunSubquery(int32 SubqueryIndex, RowHandle Row, SubqueryCallbackRef Callback)"
  },
  {
    "label": "FCachedQueryContext()",
    "kind": "Method",
    "detail": "Function (IQueryContext& ParentContext ; const FQueryDescription& Description ; } ; template<. . . Dependencies> struct FCachedQueryContext final : public FQueryContextForwarder {)",
    "insertText": "FCachedQueryContext(const FQueryDescription& InDescription, IQueryContext& InParentContext)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(FQueryDescription& Query)"
  },
  {
    "label": "GetCachedMutableDependency()",
    "kind": "Method",
    "detail": "Function (template<Dependency> Dependency&)",
    "insertText": "GetCachedMutableDependency()"
  },
  {
    "label": "GetCachedDependency()",
    "kind": "Method",
    "detail": "Function (template<Dependency> const Dependency&)",
    "insertText": "GetCachedDependency()"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (} ; class Select final { public :)",
    "insertText": "Select()"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (template<CallbackType,Function>)",
    "insertText": "Select(FName Name, const CallbackType& Type, Function&& Callback)"
  },
  {
    "label": "Select()",
    "kind": "Method",
    "detail": "Function (template<CallbackType,Class,Function>)",
    "insertText": "Select(FName Name, const CallbackType& Type, Class* Instance, Function&& Callback)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (Select&)",
    "insertText": "ReadOnly(const UScriptStruct* Target)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (Select&)",
    "insertText": "ReadOnly(TConstArrayView<const UScriptStruct*> Targets)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (Select&)",
    "insertText": "ReadOnly(const FDynamicColumnDescription& Description)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType . . . TargetTypes> Select&)",
    "insertText": "ReadOnly(EOptional Optional)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (Select&)",
    "insertText": "ReadOnly(const UScriptStruct* Target, EOptional Optional)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (Select&)",
    "insertText": "ReadOnly(TConstArrayView<const UScriptStruct*> Targets, EOptional Optional)"
  },
  {
    "label": "ReadOnly()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType Target> Select&)",
    "insertText": "ReadOnly(const FName& Identifier)"
  },
  {
    "label": "ReadWrite()",
    "kind": "Method",
    "detail": "Function (Select&)",
    "insertText": "ReadWrite(const UScriptStruct* Target)"
  },
  {
    "label": "ReadWrite()",
    "kind": "Method",
    "detail": "Function (Select&)",
    "insertText": "ReadWrite(TConstArrayView<const UScriptStruct*> Targets)"
  },
  {
    "label": "ReadWrite()",
    "kind": "Method",
    "detail": "Function (Select&)",
    "insertText": "ReadWrite(const FDynamicColumnDescription& Description)"
  },
  {
    "label": "ReadWrite()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType Target> Select&)",
    "insertText": "ReadWrite(const FName& Identifier)"
  },
  {
    "label": "Where()",
    "kind": "Method",
    "detail": "Function (FSimpleQuery)",
    "insertText": "Where()"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (private : FQueryDescription Query ; } ; class Count final { public :)",
    "insertText": "Count()"
  },
  {
    "label": "CreateDirectQueryCallbackBinding()",
    "kind": "Method",
    "detail": "Function (private : FQueryDescription Query ; } ; template<Function> DirectQueryCallback)",
    "insertText": "CreateDirectQueryCallbackBinding(Function&& Callback)"
  },
  {
    "label": "CreateSubqueryCallbackBinding()",
    "kind": "Method",
    "detail": "Function (template<Function> SubqueryCallback)",
    "insertText": "CreateSubqueryCallbackBinding(Function&& Callback)"
  }
]