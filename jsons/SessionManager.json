[
  {
    "label": "FSessionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSessionInfo"
  },
  {
    "label": "FEngineServicePong",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineServicePong"
  },
  {
    "label": "FSessionServicePong",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionServicePong"
  },
  {
    "label": "FSessionManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSessionManager"
  },
  {
    "label": "FSessionManager()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" IMessageContext . h \" # include \" IMessageBus . h \" # include \" MessageEndpoint . h \" # include \" ISessionInstanceInfo . h \" # include \" ISessionInfo . h \" # include \" SessionLogMessage . h \" # include \" ISessionManager . h \" # include \" Containers / Ticker . h \" class FSessionInfo ; struct FEngineServicePong ; struct FSessionServicePong ; class FSessionManager : public TSharedFromThis<FSessionManager>,public ISessionManager { public :)",
    "insertText": "FSessionManager(const TSharedRef<IMessageBus, ESPMode::ThreadSafe>& InMessageBus)"
  },
  {
    "label": "FSessionManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSessionManager()"
  },
  {
    "label": "AddOwner()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddOwner(const FString& InOwner)"
  },
  {
    "label": "GetSelectedInstances()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<ISessionInstanceInfo>>&)",
    "insertText": "GetSelectedInstances()"
  },
  {
    "label": "GetSelectedSession()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<ISessionInfo>&)",
    "insertText": "GetSelectedSession()"
  },
  {
    "label": "GetSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSessions(TArray<TSharedPtr<ISessionInfo>>& OutSessions)"
  },
  {
    "label": "IsInstanceSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanceSelected(const TSharedRef<ISessionInstanceInfo>& Instance)"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DERIVED_EVENT(FSessionManager, ISessionManager::FCanSelectSessionEvent, FCanSelectSessionEvent) virtual FCanSelectSessionEvent& OnCanSelectSession()"
  },
  {
    "label": "OnSessionInstanceUpdated()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "OnSessionInstanceUpdated()"
  },
  {
    "label": "RemoveOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOwner(const FString& InOwner)"
  },
  {
    "label": "SelectSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectSession(const TSharedPtr<ISessionInfo>& Session)"
  },
  {
    "label": "SetInstanceSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetInstanceSelected(const TSharedRef<ISessionInstanceInfo>& Instance, bool Selected)"
  },
  {
    "label": "FindExpiredSessions()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "FindExpiredSessions(const FDateTime& Now)"
  },
  {
    "label": "IsValidOwner()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidOwner(const FString& Owner)"
  },
  {
    "label": "RefreshSessions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSessions()"
  },
  {
    "label": "SendPing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPing()"
  },
  {
    "label": "HandleEnginePongMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleEnginePongMessage(const FEngineServicePong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleLogReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLogReceived(const TSharedRef<ISessionInfo>& Session, const TSharedRef<ISessionInstanceInfo>& Instance, const TSharedRef<FSessionLogMessage>& Message)"
  },
  {
    "label": "HandleSessionPongMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSessionPongMessage(const FSessionServicePong& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleTicker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTicker(float DeltaTime)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISessionInstanceInfo>)",
    "insertText": "GetInstance(const FGuid& Id)"
  }
]