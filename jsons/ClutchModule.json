[
  {
    "label": "FAllInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllInputs"
  },
  {
    "label": "FSimModuleTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimModuleTree"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FClutchSimModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClutchSimModule"
  },
  {
    "label": "FClutchSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SimModule / TorqueSimModule . h \" namespace Chaos { struct FAllInputs ; class FSimModuleTree ; struct FClutchSettings {)",
    "insertText": "FClutchSettings() : ClutchStrength(1.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} float ClutchStrength ; } ; struct FClutchSimModuleData : public FTorqueSimModuleData,public TSimulationModuleTypeable<class FClutchSimModule,FClutchSimModuleData> { #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) FClutchSimModuleData(int NodeArrayIndex, const FString& InDebugString) : FTorqueSimModuleData(NodeArrayIndex, InDebugString)"
  },
  {
    "label": "FClutchSimModuleData()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FClutchSimModuleData(int NodeArrayIndex) : FTorqueSimModuleData(NodeArrayIndex)"
  },
  {
    "label": "FillSimState()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "FillSimState(ISimulationModuleBase* SimModule)"
  },
  {
    "label": "FillSimState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSimState(SimModule)"
  },
  {
    "label": "FillNetState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillNetState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "FillNetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNetState(SimModule)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (} } ; class FClutchSimModule : public FTorqueSimModule,public TSimModuleSettings<FClutchSettings>,public TSimulationModuleTypeable<FClutchSimModule> { public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FClutchSimModule)"
  },
  {
    "label": "FClutchSimModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClutchSimModule(const FClutchSettings& Settings)"
  },
  {
    "label": "GenerateNetData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FModuleNetData>)",
    "insertText": "GenerateNetData(const int32 SimArrayIndex)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetDebugString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDebugString(FString& StringOut)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(float DeltaTime, const FAllInputs& Inputs, FSimModuleTree& VehicleModuleSystem)"
  },
  {
    "label": "FClutchSimFactory()",
    "kind": "Method",
    "detail": "Function (private : float ClutchValue ; } ; class FClutchSimFactory : public FSimFactoryModule<FClutchSimModuleData>,public TSimulationModuleTypeable<FClutchSimModule,FClutchSimFactory>,public TSimFactoryAutoRegister<FClutchSimFactory> { public :)",
    "insertText": "FClutchSimFactory() : FSimFactoryModule(TEXT(\"ClutchFactory\"))"
  }
]