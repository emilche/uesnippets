[
  {
    "label": "Desktop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Desktop"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "ScopedThreadDesktop()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_WIN_SCOPED_THREAD_DESKTOP_H_ # define MODULES_DESKTOP_CAPTURE_WIN_SCOPED_THREAD_DESKTOP_H_ # include<windows . h> # include<memory> # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class Desktop ; class RTC_EXPORT ScopedThreadDesktop { public :)",
    "insertText": "ScopedThreadDesktop()"
  },
  {
    "label": "ScopedThreadDesktop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedThreadDesktop(const ScopedThreadDesktop&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedThreadDesktop&)",
    "insertText": "operator(const ScopedThreadDesktop&)"
  },
  {
    "label": "IsSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSame(const Desktop& desktop)"
  },
  {
    "label": "Revert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Revert()"
  },
  {
    "label": "SetThreadDesktop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetThreadDesktop(Desktop* desktop)"
  }
]