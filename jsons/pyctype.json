[
  {
    "label": "PY_CTF_ALPHA()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_LIMITED_API # ifndef PYCTYPE_H # define PYCTYPE_H # ifdef __cplusplus \" C \" { # endif # define PY_CTF_LOWER 0 x01 # define PY_CTF_UPPER 0 x02 # define)",
    "insertText": "PY_CTF_ALPHA(PY_CTF_LOWER|PY_CTF_UPPER) #define PY_CTF_DIGIT 0x04 #define PY_CTF_ALNUM (PY_CTF_ALPHA|PY_CTF_DIGIT) #define PY_CTF_SPACE 0x08 #define PY_CTF_XDIGIT 0x10 PyAPI_DATA(const unsigned int)"
  },
  {
    "label": "Py_ISLOWER()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "Py_ISLOWER(c) (_Py_ctype_table[Py_CHARMASK(c)] & PY_CTF_LOWER) #define Py_ISUPPER(c) (_Py_ctype_table[Py_CHARMASK(c)] & PY_CTF_UPPER) #define Py_ISALPHA(c) (_Py_ctype_table[Py_CHARMASK(c)] & PY_CTF_ALPHA) #define Py_ISDIGIT(c) (_Py_ctype_table[Py_CHARMASK(c)] & PY_CTF_DIGIT) #define Py_ISXDIGIT(c) (_Py_ctype_table[Py_CHARMASK(c)] & PY_CTF_XDIGIT) #define Py_ISALNUM(c) (_Py_ctype_table[Py_CHARMASK(c)] & PY_CTF_ALNUM) #define Py_ISSPACE(c) (_Py_ctype_table[Py_CHARMASK(c)] & PY_CTF_SPACE) PyAPI_DATA(const unsigned char)"
  },
  {
    "label": "PyAPI_DATA()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_DATA(const unsigned char)"
  }
]