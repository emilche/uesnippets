[
  {
    "label": "FWavEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWavEncoder"
  },
  {
    "label": "FWavEncoder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Encoders / IAudioEncoder . h \" class FWavEncoder : public Audio::IAudioEncoder { public :)",
    "insertText": "FWavEncoder(const FSoundQualityInfo& InInfo, int32 AudioCallbackSize)"
  },
  {
    "label": "GetCompressedPacketSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCompressedPacketSize()"
  },
  {
    "label": "SamplesRequiredPerEncode()",
    "kind": "Method",
    "detail": "Function (protected : int64)",
    "insertText": "SamplesRequiredPerEncode()"
  },
  {
    "label": "StartFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartFile(const FSoundQualityInfo& InQualityInfo, TArray<uint8>& OutFileStart)"
  },
  {
    "label": "EncodeChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EncodeChunk(const TArray<float>& InAudio, TArray<uint8>& OutBytes)"
  },
  {
    "label": "EndFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndFile(TArray<uint8>& OutBytes)"
  },
  {
    "label": "FWavEncoder()",
    "kind": "Method",
    "detail": "Function (private : int32 CallbackSize ;)",
    "insertText": "FWavEncoder()"
  }
]