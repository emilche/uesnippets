[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FDBufferTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDBufferTextures"
  },
  {
    "label": "FMinimalSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinimalSceneTextures"
  },
  {
    "label": "FScreenPassTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassTexture"
  },
  {
    "label": "FTextureRenderTargetBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureRenderTargetBinding"
  },
  {
    "label": "ESubstrateTileType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESubstrateTileType"
  },
  {
    "label": "FSubstrateSceneData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateSceneData"
  },
  {
    "label": "FSubstrateViewData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstrateViewData"
  },
  {
    "label": "FSubstrateTilePassVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubstrateTilePassVS"
  },
  {
    "label": "FEnableDebug",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEnableDebug"
  },
  {
    "label": "FEnableTexCoordScreenVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEnableTexCoordScreenVector"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ShaderParameterMacros . h \" # include \" RenderGraphResources . h \" # include \" MeshPassProcessor . h \" # include \" UnifiedBuffer . h \" # include \" RHIUtilities . h \" # include \" SubstrateDefinitions . h \" # include \" GBufferInfo . h \" # include \" RendererUtils . h \" # include \" ShaderParameterStruct . h \" class FScene ; class FSceneRenderer ; class FRDGBuilder ; struct FDBufferTextures ; struct FMinimalSceneTextures ; struct FScreenPassTexture ; struct FTextureRenderTargetBinding ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FSubstrateCommonParameters, ) SHADER_PARAMETER(uint32, MaxBytesPerPixel) SHADER_PARAMETER(uint32, MaxClosurePerPixel) SHADER_PARAMETER(uint32, bRoughDiffuse) SHADER_PARAMETER(uint32, PeelLayersAboveDepth) SHADER_PARAMETER(uint32, bRoughnessTracking) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FSubstrateBasePassUniformParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FSubstrateCommonParameters, Common) SHADER_PARAMETER(int32, SliceStoringDebugSubstrateTreeDataWithoutMRT) SHADER_PARAMETER(int32, FirstSliceStoringSubstrateSSSDataWithoutMRT) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2DArray<uint>, MaterialTextureArrayUAVWithoutRTs) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<float3>, OpaqueRoughRefractionTextureUAV) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FSubstrateForwardPassUniformParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FSubstrateCommonParameters, Common) SHADER_PARAMETER(int32, FirstSliceStoringSubstrateSSSData) SHADER_PARAMETER_RDG_TEXTURE(Texture2DArray<uint>, MaterialTextureArray) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<SUBSTRATE_TOP_LAYER_TYPE>, TopLayerTexture) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FSubstrateMobileForwardPassUniformParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FSubstrateCommonParameters, Common) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FSubstrateTileParameter, ) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, TileListBuffer) SHADER_PARAMETER(uint32, TileListBufferOffset) SHADER_PARAMETER(uint32, TileEncoding) RDG_BUFFER_ACCESS(TileIndirectBuffer, ERHIAccess::IndirectArgs) END_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FSubstrateGlobalUniformParameters, RENDERER_API) SHADER_PARAMETER_STRUCT_INCLUDE(FSubstrateCommonParameters, Common) SHADER_PARAMETER(int32, SliceStoringDebugSubstrateTreeData) SHADER_PARAMETER(int32, FirstSliceStoringSubstrateSSSData) SHADER_PARAMETER(uint32, TileSize) SHADER_PARAMETER(uint32, TileSizeLog2) SHADER_PARAMETER(FIntPoint, TileCount) SHADER_PARAMETER_RDG_TEXTURE(Texture2DArray<uint>, MaterialTextureArray) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<SUBSTRATE_TOP_LAYER_TYPE>, TopLayerTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<float3>, OpaqueRoughRefractionTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<uint>, ClosureOffsetTexture) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, ClosureTileBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, ClosureTileCountBuffer) END_GLOBAL_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FSubstratePublicParameters, RENDERER_API) SHADER_PARAMETER_STRUCT_INCLUDE(FSubstrateCommonParameters, Common) SHADER_PARAMETER(int32, FirstSliceStoringSubstrateSSSData) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<SUBSTRATE_TOP_LAYER_TYPE>, TopLayerTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2DArray<uint>, MaterialTextureArray) END_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FSubstratePublicGlobalUniformParameters, RENDERER_API) SHADER_PARAMETER_STRUCT_INCLUDE(FSubstratePublicParameters, Public) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (ESimple = SUBSTRATE_TILE_TYPE_SIMPLE,ESingle = SUBSTRATE_TILE_TYPE_SINGLE,EComplex = SUBSTRATE_TILE_TYPE_COMPLEX,EComplexSpecial = SUBSTRATE_TILE_TYPE_COMPLEX_SPECIAL,EOpaqueRoughRefraction = SUBSTRATE_TILE_TYPE_ROUGH_REFRACT,EOpaqueRoughRefractionSSSWithout = SUBSTRATE_TILE_TYPE_ROUGH_REFRACT_SSS_WITHOUT,EDecalSimple = SUBSTRATE_TILE_TYPE_DECAL_SIMPLE,EDecalSingle = SUBSTRATE_TILE_TYPE_DECAL_SINGLE,EDecalComplex = SUBSTRATE_TILE_TYPE_DECAL_COMPLEX,ECount } ; const TCHAR*)",
    "insertText": "ToString(ESubstrateTileType Type)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (struct FSubstrateSceneData { uint32 ViewsMaxBytesPerPixel = 0 ; uint32 ViewsMaxClosurePerPixel = 0 ; uint32 PersistentMaxBytesPerPixel = 0 ; uint32 PersistentMaxClosurePerPixel = 0 ; bool bUsesComplexSpecialRenderPath = false ; uint32 EffectiveMaxBytesPerPixel = 0 ; uint32 EffectiveMaxClosurePerPixel = 0 ; int32 PeelLayersAboveDepth = - 1 ; bool bRoughDiffuse = false ; bool bRoughnessTracking = false ; int32 SliceStoringDebugSubstrateTreeDataWithoutMRT = - 1 ; int32 SliceStoringDebugSubstrateTreeData = - 1 ; int32 FirstSliceStoringSubstrateSSSDataWithoutMRT = - 1 ; int32 FirstSliceStoringSubstrateSSSData = - 1 ; FRDGTextureRef MaterialTextureArray = nullptr ; FRDGTextureUAVRef MaterialTextureArrayUAVWithoutRTs = nullptr ; FRDGTextureUAVRef MaterialTextureArrayUAV = nullptr ; FRDGTextureSRVRef MaterialTextureArraySRV = nullptr ; FRDGTextureRef TopLayerTexture = nullptr ; FRDGTextureRef OpaqueRoughRefractionTexture = nullptr ; FRDGTextureUAVRef TopLayerTextureUAV = nullptr ; FRDGTextureUAVRef OpaqueRoughRefractionTextureUAV = nullptr ; FRDGTextureRef ClosureOffsetTexture = nullptr ; FRDGTextureRef SeparatedSubSurfaceSceneColor = nullptr ; FRDGTextureRef SeparatedOpaqueRoughRefractionSceneColor = nullptr ; TRDGUniformBufferRef<FSubstratePublicGlobalUniformParameters> SubstratePublicGlobalUniformParameters { } ; } ; struct FSubstrateViewData { uint32 MaxClosurePerPixel = 0 ; uint32 MaxBytesPerPixel = 0 ; bool bUsesComplexSpecialRenderPath = 0 ; FIntPoint TileCount =)",
    "insertText": "FIntPoint(0, 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (uint32 TileEncoding = SUBSTRATE_TILE_ENCODING_16BITS ; uint32 LayerCount = 0 ; FRDGBufferRef ClassificationTileListBuffer = nullptr ; FRDGBufferSRVRef ClassificationTileListBufferSRV = nullptr ; FRDGBufferUAVRef ClassificationTileListBufferUAV = nullptr ; uint32 ClassificationTileListBufferOffset [ SUBSTRATE_TILE_TYPE_COUNT ] ; FRDGBufferRef ClassificationTileDrawIndirectBuffer = nullptr ; FRDGBufferUAVRef ClassificationTileDrawIndirectBufferUAV = nullptr ; FRDGBufferRef ClassificationTileDispatchIndirectBuffer = nullptr ; FRDGBufferUAVRef ClassificationTileDispatchIndirectBufferUAV = nullptr ; FRDGBufferRef ClosureTileBuffer = nullptr ; FRDGBufferRef ClosureTileCountBuffer = nullptr ; FRDGBufferRef ClosureTileDispatchIndirectBuffer = nullptr ; FRDGBufferRef ClosureTilePerThreadDispatchIndirectBuffer = nullptr ; FSubstrateSceneData* SceneData = nullptr ; TRDGUniformBufferRef<FSubstrateGlobalUniformParameters> SubstrateGlobalUniformParameters { } ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetSubstrateTextureResolution()",
    "kind": "Method",
    "detail": "Function (} ; namespace Substrate { uint32 StencilBit_Fast = 0 x10 ; uint32 StencilBit_Single = 0 x20 ; uint32 StencilBit_Complex = 0 x40 ; uint32 StencilBit_ComplexSpecial = 0 x80 ; FIntPoint)",
    "insertText": "GetSubstrateTextureResolution(const FViewInfo& View, const FIntPoint& InResolution)"
  },
  {
    "label": "GetSubstrateMaxClosureCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSubstrateMaxClosureCount(const FViewInfo& View)"
  },
  {
    "label": "GetSubstrateUsesComplexSpecialPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSubstrateUsesComplexSpecialPath(const FViewInfo& View)"
  },
  {
    "label": "UsesSubstrateMaterialBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesSubstrateMaterialBuffer(EShaderPlatform In)"
  },
  {
    "label": "InitialiseSubstrateFrameSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialiseSubstrateFrameSceneData(FRDGBuilder& GraphBuilder, FSceneRenderer& SceneRenderer)"
  },
  {
    "label": "BindSubstrateBasePassUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindSubstrateBasePassUniformParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, FSubstrateBasePassUniformParameters& OutSubstrateUniformParameters)"
  },
  {
    "label": "BindSubstrateForwardPasslUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindSubstrateForwardPasslUniformParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, FSubstrateForwardPassUniformParameters& OutSubstrateUniformParameters)"
  },
  {
    "label": "BindSubstrateMobileForwardPasslUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindSubstrateMobileForwardPasslUniformParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, FSubstrateMobileForwardPassUniformParameters& OutSubstrateUniformParameters)"
  },
  {
    "label": "BindSubstrateGlobalUniformParameters()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FSubstrateGlobalUniformParameters>)",
    "insertText": "BindSubstrateGlobalUniformParameters(const FViewInfo& View)"
  },
  {
    "label": "AppendSubstrateMRTs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSubstrateMRTs(const FSceneRenderer& SceneRenderer, uint32& BasePassTextureCount, TArrayView<FTextureRenderTargetBinding> BasePassTextures)"
  },
  {
    "label": "SetBasePassRenderTargetOutputFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBasePassRenderTargetOutputFormat(const EShaderPlatform Platform, const FMaterialShaderParameters& MaterialParameters, FShaderCompilerEnvironment& OutEnvironment, EGBufferLayout GBufferLayout)"
  },
  {
    "label": "BindSubstratePublicGlobalUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindSubstratePublicGlobalUniformParameters(FRDGBuilder& GraphBuilder, const FSubstrateSceneData* SubstrateSceneData, FSubstratePublicParameters& OutSubstrateUniformParameters)"
  },
  {
    "label": "CreatePublicGlobalUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FSubstratePublicGlobalUniformParameters>)",
    "insertText": "CreatePublicGlobalUniformBuffer(FRDGBuilder& GraphBuilder, FSubstrateSceneData* SubstrateScene)"
  },
  {
    "label": "AddSubstrateMaterialClassificationPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubstrateMaterialClassificationPass(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FDBufferTextures& DBufferTextures, const TArray<FViewInfo>& Views)"
  },
  {
    "label": "AddSubstrateDBufferPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubstrateDBufferPass(FRDGBuilder& GraphBuilder, const FMinimalSceneTextures& SceneTextures, const FDBufferTextures& DBufferTextures, const TArray<FViewInfo>& Views)"
  },
  {
    "label": "AddSubstrateStencilPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubstrateStencilPass(FRDGBuilder& GraphBuilder, const TArray<FViewInfo>& Views, const FMinimalSceneTextures& SceneTextures)"
  },
  {
    "label": "AddSubstrateOpaqueRoughRefractionPasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubstrateOpaqueRoughRefractionPasses(FRDGBuilder& GraphBuilder, FSceneTextures& SceneTextures, TArrayView<const FViewInfo> Views)"
  },
  {
    "label": "ShouldRenderSubstrateDebugPasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSubstrateDebugPasses(const FViewInfo& View)"
  },
  {
    "label": "AddSubstrateDebugPasses()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddSubstrateDebugPasses(FRDGBuilder& GraphBuilder, const FViewInfo& View, FScreenPassTexture& ScreenPassSceneColor)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FSubstrateTilePassVS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FSubstrateTilePassVS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FSubstrateTilePassVS, FGlobalShader)"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FEnableDebug :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"PERMUTATION_ENABLE_DEBUG\")"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FEnableTexCoordScreenVector :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"PERMUTATION_ENABLE_TEXCOORD_SCREENVECTOR\")"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<FEnableDebug,FEnableTexCoordScreenVector> ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER(FVector2f, OutputViewMinRect) SHADER_PARAMETER(FVector4f, OutputViewSizeAndInvSize) SHADER_PARAMETER(FVector4f, OutputBufferSizeAndInvSize) SHADER_PARAMETER(FMatrix44f, ViewScreenToTranslatedWorld) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, TileListBuffer) SHADER_PARAMETER(uint32, TileListBufferOffset) SHADER_PARAMETER(uint32, TileEncoding) RDG_BUFFER_ACCESS(TileIndirectBuffer, ERHIAccess::IndirectArgs) END_SHADER_PARAMETER_STRUCT() static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "SetTileParameters()",
    "kind": "Method",
    "detail": "Function (} ; FSubstrateTileParameter)",
    "insertText": "SetTileParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, const ESubstrateTileType Type)"
  },
  {
    "label": "SetTileParameters()",
    "kind": "Method",
    "detail": "Function (FSubstrateTilePassVS::FParameters)",
    "insertText": "SetTileParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, const ESubstrateTileType Type, EPrimitiveType& PrimitiveType)"
  },
  {
    "label": "SetTileParameters()",
    "kind": "Method",
    "detail": "Function (FSubstrateTilePassVS::FParameters)",
    "insertText": "SetTileParameters(const FViewInfo& View, const ESubstrateTileType Type, EPrimitiveType& PrimitiveType)"
  },
  {
    "label": "TileTypeDrawIndirectArgOffset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TileTypeDrawIndirectArgOffset(const ESubstrateTileType Type)"
  },
  {
    "label": "TileTypeDispatchIndirectArgOffset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TileTypeDispatchIndirectArgOffset(const ESubstrateTileType Type)"
  }
]