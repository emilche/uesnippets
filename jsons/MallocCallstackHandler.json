[
  {
    "label": "FGenericMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericMemoryStats"
  },
  {
    "label": "FMallocCallstackHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocCallstackHandler"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FCallStackInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallStackInfo"
  },
  {
    "label": "FCallStackMapKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallStackMapKey"
  },
  {
    "label": "FScopeDisableMallocCallstackHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeDisableMallocCallstackHandler"
  },
  {
    "label": "FMallocCallstackHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / PlatformTLS . h \" # include \" Misc / Crc . h \" struct FGenericMemoryStats ; class FMallocCallstackHandler : public FMalloc { public :)",
    "insertText": "FMallocCallstackHandler(FMalloc* InMalloc)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Malloc(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* Original, SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Original)"
  },
  {
    "label": "QuantizeSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "QuantizeSize(SIZE_T Count, uint32 Alignment)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Trim(bool bTrimThreadCaches)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "Trim(bTrimThreadCaches)"
  },
  {
    "label": "SetupTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupTLSCachesOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUsedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUsedOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUnusedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUnusedOnCurrentThread()"
  },
  {
    "label": "ClearAndDisableTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAndDisableTLSCachesOnCurrentThread()"
  },
  {
    "label": "InitializeStatsMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeStatsMetadata()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllocatorStats(FGenericMemoryStats& out_Stats)"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "GetAllocatorStats(out_Stats)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpAllocatorStats(class FOutputDevice& Ar)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "DumpAllocatorStats(Ar)"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  },
  {
    "label": "OnMallocInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMallocInitialized()"
  },
  {
    "label": "OnPreFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreFork()"
  },
  {
    "label": "OnPostFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostFork()"
  },
  {
    "label": "FCallStackMapKey()",
    "kind": "Method",
    "detail": "Function (} SIZE_T MaxCallStackDepth = 6 4 ; SIZE_T CallStackEntriesToSkipCount = 2 ; struct FCallStackInfo { uint32 Count ; uint64 FramePointers [ MaxCallStackDepth ] ; } ; struct FCallStackMapKey { uint32 CRC ; uint64* CallStack ;)",
    "insertText": "FCallStackMapKey(uint64* InCallStack) : CallStack(InCallStack)"
  },
  {
    "label": "MemCrc32()",
    "kind": "Method",
    "detail": "Function (CRC =)",
    "insertText": "MemCrc32(InCallStack, MaxCallStackDepth * sizeof(uint64))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCallStackMapKey& A, const FCallStackMapKey& B)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 APtr = A . CallStack [ i ] ; uint64 BPtr = B . CallStack [ i ] ;)",
    "insertText": "if(APtr != BPtr)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} return true ; } uint32)",
    "insertText": "GetTypeHash(const FCallStackMapKey& InKey)"
  },
  {
    "label": "DumpStackTraceToLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStackTraceToLog(int32 StackIndex)"
  },
  {
    "label": "IncDisabled()",
    "kind": "Method",
    "detail": "Function (class FScopeDisableMallocCallstackHandler ; protected : FMalloc* UsedMalloc ; bool Initialized ; FCriticalSection CriticalSection ; uint32 DisabledTLS ; void)",
    "insertText": "IncDisabled()"
  },
  {
    "label": "DisabledCount()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "DisabledCount(uint64_t)FPlatformTLS::GetTlsValue(DisabledTLS)"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (+ + DisabledCount ;)",
    "insertText": "SetTlsValue(DisabledTLS, (void*)DisabledCount)"
  },
  {
    "label": "DecDisabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecDisabled()"
  },
  {
    "label": "IsDisabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDisabled()"
  },
  {
    "label": "TrackRealloc()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TrackRealloc(void* OldPtr, void* NewPtr, uint32 NewSize, uint32 OldSize, int32 CallStackIndex)"
  },
  {
    "label": "TrackMalloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackMalloc(void* Ptr, uint32 Size, int32 CallStackIndex)"
  },
  {
    "label": "TrackFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackFree(void* Ptr, uint32 OldSize, int32 CallStackIndex)"
  },
  {
    "label": "GetCallStackIndex()",
    "kind": "Method",
    "detail": "Function (FRWLock RWLock ; TMap<FCallStackMapKey,int32> CallStackMapKeyToCallStackIndexMap ; TArray<FCallStackInfo> CallStackInfoArray ; int32)",
    "insertText": "GetCallStackIndex()"
  },
  {
    "label": "FScopeDisableMallocCallstackHandler()",
    "kind": "Method",
    "detail": "Function (} ; FMallocCallstackHandler* GMallocCallstackHandler ; class FScopeDisableMallocCallstackHandler { public :)",
    "insertText": "FScopeDisableMallocCallstackHandler()"
  }
]