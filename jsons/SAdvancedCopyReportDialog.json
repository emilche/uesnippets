[
  {
    "label": "FAdvancedCopyReportNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdvancedCopyReportNode"
  },
  {
    "label": "SAdvancedCopyTreeRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAdvancedCopyTreeRow"
  },
  {
    "label": "SAdvancedCopyColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAdvancedCopyColumn"
  },
  {
    "label": "SAdvancedCopyReportDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAdvancedCopyReportDialog"
  },
  {
    "label": "SAdvancedCopyColumn()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" IAssetTools . h \" # include \" Containers / UnrealString . h \" # include \" Containers / Map . h \" # include \" Containers / Array . h \" struct FAdvancedCopyReportNode ; class SAdvancedCopyTreeRow ; typedef STreeView<TSharedPtr<struct FAdvancedCopyReportNode>> SAdvancedCopyReportTree ; class SAdvancedCopyColumn : public TSharedFromThis<SAdvancedCopyColumn> { public :)",
    "insertText": "SAdvancedCopyColumn(FName InColumnName)"
  },
  {
    "label": "SAdvancedCopyColumn()",
    "kind": "Method",
    "detail": "Function (ColumnName = InColumnName ; } ~)",
    "insertText": "SAdvancedCopyColumn()"
  },
  {
    "label": "GetColumnID()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetColumnID()"
  },
  {
    "label": "ConstructRowWidget()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<SWidget>)",
    "insertText": "ConstructRowWidget(TSharedPtr<struct FAdvancedCopyReportNode> TreeItem, const SAdvancedCopyTreeRow& Row)"
  },
  {
    "label": "FAdvancedCopyReportNode()",
    "kind": "Method",
    "detail": "Function (FName ColumnName ; } ; struct FAdvancedCopyReportNode { FString Source ; FString Destination ; TArray<TSharedPtr<FAdvancedCopyReportNode>> Children ; TSharedPtr<TSet<FString>> IncludedSet ;)",
    "insertText": "FAdvancedCopyReportNode()"
  },
  {
    "label": "FAdvancedCopyReportNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAdvancedCopyReportNode(const FString& InSource, const FString& InDestination, TSharedPtr<TSet<FString>> InIncludedSet)"
  },
  {
    "label": "AddPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPackage(const FString& Source, const FString& Destination, const FString& DependencyOf)"
  },
  {
    "label": "ExpandChildrenRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandChildrenRecursively(const TSharedRef<SAdvancedCopyReportTree>& TreeView)"
  },
  {
    "label": "ForAllDescendants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForAllDescendants(TFunctionRef<void(const TSharedPtr<FAdvancedCopyReportNode>& )> RecursiveAction)"
  },
  {
    "label": "GetWillCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWillCopy()"
  },
  {
    "label": "SetWillCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWillCopy(bool bCopy)"
  },
  {
    "label": "AddPackage_Recursive()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "AddPackage_Recursive(const FString& Source, const FString& Destination, const FString& DependencyOf)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ; class SAdvancedCopyReportDialog : public SCompoundWidget { public : typedef TArray<TMap<FString,FString>> FCopyDestinationMap ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnReportConfirmed, const FAdvancedCopyParams&, const FCopyDestinationMap&) SLATE_BEGIN_ARGS(SAdvancedCopyReportDialog)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs, const FAdvancedCopyParams& InParams, const FText& InReportMessage, const TArray<TMap<FString, FString>>& DestinationMap, const TArray<TMap<FName, FName>>& DependencyMap, const FOnReportConfirmed& InOnReportConfirmed)"
  },
  {
    "label": "IsGeneratingDependencies()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsGeneratingDependencies()"
  },
  {
    "label": "ToggleGeneratingDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleGeneratingDependencies(ECheckBoxState NewState)"
  },
  {
    "label": "OpenPackageReportDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenPackageReportDialog(const FAdvancedCopyParams& InParams, const FText& ReportMessage, const TArray<TMap<FString, FString>>& DestinationMap, const TArray<TMap<FName, FName>>& DependencyMap, const FOnReportConfirmed& InOnReportConfirmed)"
  },
  {
    "label": "CloseDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDialog()"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TSharedPtr<SAdvancedCopyColumn>>)",
    "insertText": "GetColumns()"
  },
  {
    "label": "GenerateTreeRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateTreeRow(TSharedPtr<FAdvancedCopyReportNode> TreeItem, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetChildrenForTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChildrenForTree(TSharedPtr<FAdvancedCopyReportNode> TreeItem, TArray< TSharedPtr<FAdvancedCopyReportNode> >& OutChildren)"
  },
  {
    "label": "SetItemExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemExpansionRecursive(TSharedPtr<FAdvancedCopyReportNode> TreeItem, bool bInExpansionState)"
  },
  {
    "label": "OkClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OkClicked()"
  },
  {
    "label": "CancelClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "CancelClicked()"
  },
  {
    "label": "GetHeaderText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHeaderText(const FText InReportMessage)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : FOnReportConfirmed OnReportConfirmed ; FAdvancedCopyReportNode PackageReportRootNode ; TSharedPtr<SAdvancedCopyReportTree> ReportTreeView ; TSharedPtr<TSet<FString>> CloneSet ; TMap<FName,TSharedPtr<SAdvancedCopyColumn>> Columns ; FString ReportString ; FAdvancedCopyParams CurrentCopyParams ; TArray<TMap<FString,FString>> InitialDestinationMap ; FString FindString ; FString ReplaceString ; } ; class SAdvancedCopyTreeRow : public SMultiColumnTableRow<TSharedPtr<struct FAdvancedCopyReportNode>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAdvancedCopyTreeRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<struct FAdvancedCopyReportNode>, Item) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<SAdvancedCopyReportTree>& OutlinerTreeView, TSharedRef<SAdvancedCopyReportDialog> AdvancedCopyReport)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "GetReportDialog()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SAdvancedCopyReportDialog>)",
    "insertText": "GetReportDialog()"
  },
  {
    "label": "GetWillCopyCheckedState()",
    "kind": "Method",
    "detail": "Function (} private : ECheckBoxState)",
    "insertText": "GetWillCopyCheckedState()"
  },
  {
    "label": "ApplyWillCopyCheckedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWillCopyCheckedState(const ECheckBoxState NewCheckState)"
  }
]