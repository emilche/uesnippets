[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sample"
  },
  {
    "label": "INuPatchSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INuPatchSchema"
  },
  {
    "label": "Sample()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_INuPatch_h # define Alembic_AbcGeom_INuPatch_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / IGeomParam . h> # include<Alembic / AbcGeom / IGeomBase . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT INuPatchSchema : public IGeomBaseSchema<NuPatchSchemaInfo> { public : class Sample { public : typedef Sample this_type ;)",
    "insertText": "Sample()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "getPositions()",
    "kind": "Method",
    "detail": "Function (} Abc::P3fArraySamplePtr)",
    "insertText": "getPositions()"
  },
  {
    "label": "makeEmpty()",
    "kind": "Method",
    "detail": "Function (m_selfBounds .)",
    "insertText": "makeEmpty()"
  },
  {
    "label": "ALEMBIC_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OPERATOR_BOOL(valid())"
  },
  {
    "label": "INuPatchSchema()",
    "kind": "Method",
    "detail": "Function (protected : class INuPatchSchema ; Abc::P3fArraySamplePtr m_positions ; Abc::V3fArraySamplePtr m_velocities ; int32_t m_numU ; int32_t m_numV ; int32_t m_uOrder ; int32_t m_vOrder ; Abc::FloatArraySamplePtr m_uKnot ; Abc::FloatArraySamplePtr m_vKnot ; Abc::FloatArraySamplePtr m_positionWeights ; int32_t m_trimNumLoops ; Abc::Int32ArraySamplePtr m_trimNumCurves ; Abc::Int32ArraySamplePtr m_trimNumVertices ; Abc::Int32ArraySamplePtr m_trimOrder ; Abc::FloatArraySamplePtr m_trimKnot ; Abc::FloatArraySamplePtr m_trimMin ; Abc::FloatArraySamplePtr m_trimMax ; Abc::FloatArraySamplePtr m_trimU ; Abc::FloatArraySamplePtr m_trimV ; Abc::FloatArraySamplePtr m_trimW ; bool m_hasTrimCurve ; Abc::Box3d m_selfBounds ; } ; public : typedef INuPatchSchema this_type ; typedef Sample sample_type ;)",
    "insertText": "INuPatchSchema()"
  },
  {
    "label": "INuPatchSchema()",
    "kind": "Method",
    "detail": "Function (m_hasTrimCurve = false ; })",
    "insertText": "INuPatchSchema(const ICompoundProperty &iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : IGeomBaseSchema<NuPatchSchemaInfo>( iParent, iName, iArg0, iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(iArg0, iArg1)"
  },
  {
    "label": "INuPatchSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "INuPatchSchema(const ICompoundProperty &iProp, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : IGeomBaseSchema<NuPatchSchemaInfo>( iProp, iArg0, iArg1)"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "getTopologyVariance()",
    "kind": "Method",
    "detail": "Function (} MeshTopologyVariance)",
    "insertText": "getTopologyVariance()"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isConstant()"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "get(sample_type &oSample, const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (Sample)",
    "insertText": "getValue(const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Sample smp ;)",
    "insertText": "get(smp, iSS)"
  },
  {
    "label": "trimCurveTopologyIsConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "trimCurveTopologyIsConstant()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(INuPatchSchema::valid())"
  },
  {
    "label": "hasTrimProps()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "hasTrimProps()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "init(const Abc::Argument &iArg0, const Abc::Argument &iArg1)"
  }
]