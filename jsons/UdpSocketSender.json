[
  {
    "label": "FUdpSocketSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUdpSocketSender"
  },
  {
    "label": "FPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPacket"
  },
  {
    "label": "FPacket()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Queue . h \" # include \" HAL / Event . h \" # include \" HAL / PlatformProcess . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" Sockets . h \" # include \" Interfaces / IPv4 / IPv4Endpoint . h \" class FUdpSocketSender : public FRunnable,private FSingleThreadRunnable { struct FPacket { TSharedPtr<TArray<uint8>,ESPMode::ThreadSafe> Data ; FIPv4Endpoint Recipient ;)",
    "insertText": "FPacket()"
  },
  {
    "label": "FPacket()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPacket(const TSharedRef<TArray<uint8>, ESPMode::ThreadSafe>& InData, const FIPv4Endpoint& InRecipient) : Data(InData) , Recipient(InRecipient)"
  },
  {
    "label": "FUdpSocketSender()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "FUdpSocketSender(FSocket* InSocket, const TCHAR* ThreadDescription) : SendRate(0) , Socket(InSocket) , Stopping(false) , WaitTime(FTimespan::FromMilliseconds(100))"
  },
  {
    "label": "SetSendBufferSize()",
    "kind": "Method",
    "detail": "Function (int32 NewSize = 0 ; Socket ->)",
    "insertText": "SetSendBufferSize(512 * 1024, NewSize)"
  },
  {
    "label": "GetSynchEventFromPool()",
    "kind": "Method",
    "detail": "Function (WorkEvent =)",
    "insertText": "GetSynchEventFromPool()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (Thread =)",
    "insertText": "Create(this, ThreadDescription, 128 * 1024, TPri_AboveNormal, FPlatformAffinity::GetPoolThreadMask())"
  },
  {
    "label": "FUdpSocketSender()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FUdpSocketSender()"
  },
  {
    "label": "Kill()",
    "kind": "Method",
    "detail": "Function (Thread ->)",
    "insertText": "Kill(true)"
  },
  {
    "label": "ReturnSynchEventToPool()",
    "kind": "Method",
    "detail": "Function (delete Thread ; })",
    "insertText": "ReturnSynchEventToPool(WorkEvent)"
  },
  {
    "label": "GetSendRate()",
    "kind": "Method",
    "detail": "Function (WorkEvent = nullptr ; } public : uint32)",
    "insertText": "GetSendRate()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (WorkEvent ->)",
    "insertText": "Trigger()"
  },
  {
    "label": "SetWaitTime()",
    "kind": "Method",
    "detail": "Function (SendRate = Rate ; } void)",
    "insertText": "SetWaitTime(const FTimespan& Timespan)"
  },
  {
    "label": "GetSingleThreadInterface()",
    "kind": "Method",
    "detail": "Function (WaitTime = Timespan ; } public : FSingleThreadRunnable*)",
    "insertText": "GetSingleThreadInterface()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (Stopping = true ; return 0 ; } WorkEvent ->)",
    "insertText": "Wait(WaitTime)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Exit()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "Update(const FTimespan& SocketWaitTime)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (break ; } FPacket Packet ; int32 Sent = 0 ; SendQueue .)",
    "insertText": "Dequeue(Packet)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (Socket ->)",
    "insertText": "SendTo(Packet.Data->GetData(), Packet.Data->Num(), Sent, *Packet.Recipient.ToInternetAddr())"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(FTimespan::Zero())"
  }
]