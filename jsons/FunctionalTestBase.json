[
  {
    "label": "FFunctionalTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFunctionalTestBase"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FFunctionalTestBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / AutomationTest . h \" class FFunctionalTestBase : public FAutomationTestBase { public :)",
    "insertText": "FFunctionalTestBase(const FString& InName, const bool bInComplexTask)"
  },
  {
    "label": "SuppressLogs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuppressLogs()"
  },
  {
    "label": "ShouldCaptureLogCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCaptureLogCategory(const class FName& Category)"
  },
  {
    "label": "SetLogErrorAndWarningHandling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLogErrorAndWarningHandling(TOptional<bool> InSuppressErrors, TOptional<bool> InSuppressWarnings, TOptional<bool> InWarningsAreErrors)"
  },
  {
    "label": "SetLogErrorAndWarningHandlingToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLogErrorAndWarningHandlingToDefault()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (bSuppressLogErrors = InSuppressErrors .)",
    "insertText": "GetValue()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InSuppressWarnings.IsSet())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InWarningsAreErrors.IsSet())"
  },
  {
    "label": "SuppressLogErrors()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "SuppressLogErrors()"
  },
  {
    "label": "SetFunctionalTestComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFunctionalTestComplete(const FString& InName)"
  },
  {
    "label": "GetRunningTestName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRunningTestName()"
  }
]