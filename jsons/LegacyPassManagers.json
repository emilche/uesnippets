[
  {
    "label": "hierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hierarchy"
  },
  {
    "label": "PMTopLevelManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMTopLevelManager"
  },
  {
    "label": "PMDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMDataManager"
  },
  {
    "label": "BBPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BBPassManager"
  },
  {
    "label": "FunctionPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPassManager"
  },
  {
    "label": "FunctionPassManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPassManagerImpl"
  },
  {
    "label": "FPPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPPassManager"
  },
  {
    "label": "MPPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MPPassManager"
  },
  {
    "label": "PassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassManager"
  },
  {
    "label": "PassManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassManagerImpl"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Timer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Timer"
  },
  {
    "label": "PMDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMDataManager"
  },
  {
    "label": "PassDebuggingString",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassDebuggingString"
  },
  {
    "label": "PassManagerPrettyStackEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassManagerPrettyStackEntry"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "PMStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMStack"
  },
  {
    "label": "PMTopLevelManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMTopLevelManager"
  },
  {
    "label": "PMDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMDataManager"
  },
  {
    "label": "PassDebuggingString",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassDebuggingString"
  },
  {
    "label": "PassDebuggingString",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassDebuggingString"
  },
  {
    "label": "PassDebuggingString",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassDebuggingString"
  },
  {
    "label": "PassDebuggingString",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassDebuggingString"
  },
  {
    "label": "FPPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPPassManager"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pop()"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push(PMDataManager *PM)"
  },
  {
    "label": "PMTopLevelManager()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "PMTopLevelManager(PMDataManager *PMDM)"
  },
  {
    "label": "initializeAllAnalysisInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeAllAnalysisInfo()"
  },
  {
    "label": "schedulePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "schedulePass(Pass *P)"
  },
  {
    "label": "setLastUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLastUser(ArrayRef<Pass*> AnalysisPasses, Pass *P)"
  },
  {
    "label": "collectLastUses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectLastUses(SmallVectorImpl<Pass *> &LastUses, Pass *P)"
  },
  {
    "label": "recordAvailableAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordAvailableAnalysis(Pass *P)"
  },
  {
    "label": "verifyPreservedAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyPreservedAnalysis(Pass *P)"
  },
  {
    "label": "removeNotPreservedAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeNotPreservedAnalysis(Pass *P)"
  },
  {
    "label": "removeDeadPasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeDeadPasses(Pass *P, StringRef Msg,\n                        enum PassDebuggingString)"
  },
  {
    "label": "freePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freePass(Pass *P, StringRef Msg,\n                enum PassDebuggingString)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(Pass *P, bool ProcessAnalysis = true)"
  },
  {
    "label": "addLowerLevelRequiredPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLowerLevelRequiredPass(Pass *P, Pass *RequiredPass)"
  },
  {
    "label": "preserveHigherLevelAnalysis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "preserveHigherLevelAnalysis(Pass *P)"
  },
  {
    "label": "collectRequiredAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectRequiredAnalysis(SmallVectorImpl<Pass *> &RequiredPasses,\n                               SmallVectorImpl<AnalysisID> &ReqPassNotAvailable,\n                               Pass *P)"
  },
  {
    "label": "initializeAnalysisImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeAnalysisImpl(Pass *P)"
  },
  {
    "label": "dumpPassInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpPassInfo(Pass *P, enum PassDebuggingString S1,\n                    enum PassDebuggingString S2, StringRef Msg)"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cleanup()"
  }
]