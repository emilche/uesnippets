[
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Timer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Timer"
  },
  {
    "label": "PMDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMDataManager"
  },
  {
    "label": "PassDebuggingString",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PassDebuggingString"
  },
  {
    "label": "PassManagerPrettyStackEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassManagerPrettyStackEntry"
  },
  {
    "label": "PMStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMStack"
  },
  {
    "label": "PMTopLevelManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMTopLevelManager"
  },
  {
    "label": "FPPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPPassManager"
  },
  {
    "label": "PassManagerPrettyStackEntry()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_LEGACYPASSMANAGERS_H # define LLVM_IR_LEGACYPASSMANAGERS_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / Pass . h \" # include<map> # include<vector> # include<set> # include \" llvm / Support / PrettyStackTrace . h \" namespace llvm { class Module ; class Pass ; class StringRef ; class Value ; class Timer ; class PMDataManager ; enum PassDebuggingString { EXECUTION_MSG,MODIFICATION_MSG,FREEING_MSG,ON_BASICBLOCK_MSG,ON_FUNCTION_MSG,ON_MODULE_MSG,ON_REGION_MSG,ON_LOOP_MSG,ON_CG_MSG } ; class PassManagerPrettyStackEntry : public PrettyStackTraceEntry { Pass* P ; Value* V ; Module* M ; public :)",
    "insertText": "PassManagerPrettyStackEntry(Pass *p) : P(p), V(nullptr), M(nullptr)"
  },
  {
    "label": "PassManagerPrettyStackEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PassManagerPrettyStackEntry(Pass *p, Value &v) : P(p), V(&v), M(nullptr)"
  },
  {
    "label": "PassManagerPrettyStackEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PassManagerPrettyStackEntry(Pass *p, Module &m) : P(p), V(nullptr), M(&m)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} ; class PMStack { public : typedef llvm::SmallVector<PMDataManager*,2>::const_reverse_iterator iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "pop()"
  },
  {
    "label": "top()",
    "kind": "Method",
    "detail": "Function (PMDataManager*)",
    "insertText": "top()"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "push(PMDataManager *PM)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump()"
  },
  {
    "label": "PMTopLevelManager()",
    "kind": "Method",
    "detail": "Function (private : llvm::SmallVector<PMDataManager*,2> S ; } ; class PMTopLevelManager { protected :)",
    "insertText": "PMTopLevelManager(PMDataManager *PMDM)"
  },
  {
    "label": "getNumContainedManagers()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumContainedManagers()"
  },
  {
    "label": "initializeAllAnalysisInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "initializeAllAnalysisInfo()"
  },
  {
    "label": "getAsPMDataManager()",
    "kind": "Method",
    "detail": "Function (private : PMDataManager*)",
    "insertText": "getAsPMDataManager()"
  },
  {
    "label": "getTopLevelPassManagerType()",
    "kind": "Method",
    "detail": "Function (PassManagerType)",
    "insertText": "getTopLevelPassManagerType()"
  },
  {
    "label": "schedulePass()",
    "kind": "Method",
    "detail": "Function (public : bool HLSLPrintBeforeAll = false ; std::set<std::string> HLSLPrintBefore ; bool HLSLPrintAfterAll = false ; std::set<std::string> HLSLPrintAfter ; void)",
    "insertText": "schedulePass(Pass *P)"
  },
  {
    "label": "setLastUser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLastUser(ArrayRef<Pass*> AnalysisPasses, Pass *P)"
  },
  {
    "label": "collectLastUses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectLastUses(SmallVectorImpl<Pass *> &LastUses, Pass *P)"
  },
  {
    "label": "findAnalysisPass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "findAnalysisPass(AnalysisID AID)"
  },
  {
    "label": "findAnalysisPassInfo()",
    "kind": "Method",
    "detail": "Function (const PassInfo*)",
    "insertText": "findAnalysisPassInfo(AnalysisID AID)"
  },
  {
    "label": "findAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (AnalysisUsage*)",
    "insertText": "findAnalysisUsage(Pass *P)"
  },
  {
    "label": "PMTopLevelManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PMTopLevelManager()"
  },
  {
    "label": "addImmutablePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addImmutablePass(ImmutablePass *P)"
  },
  {
    "label": "initializePass()",
    "kind": "Method",
    "detail": "Function (P ->)",
    "insertText": "initializePass()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ImmutablePasses .)",
    "insertText": "push_back(P)"
  },
  {
    "label": "getImmutablePasses()",
    "kind": "Method",
    "detail": "Function (} SmallVectorImpl<ImmutablePass*>&)",
    "insertText": "getImmutablePasses()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (PassManagers .)",
    "insertText": "push_back(Manager)"
  },
  {
    "label": "addIndirectPassManager()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addIndirectPassManager(PMDataManager *Manager)"
  },
  {
    "label": "dumpPasses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dumpPasses()"
  },
  {
    "label": "dumpArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpArguments()"
  },
  {
    "label": "PMDataManager()",
    "kind": "Method",
    "detail": "Function (PMStack activeStack ; protected : SmallVector<PMDataManager*,8> PassManagers ; private : SmallVector<PMDataManager*,8> IndirectPassManagers ; DenseMap<Pass*,Pass*> LastUser ; DenseMap<Pass*,SmallPtrSet<Pass*,8>> InversedLastUser ; SmallVector<ImmutablePass*,1 6> ImmutablePasses ; DenseMap<Pass*,AnalysisUsage*> AnUsageMap ; DenseMap<AnalysisID,const PassInfo*> AnalysisPassInfos ; } ; class PMDataManager { public :)",
    "insertText": "PMDataManager() : TPM(nullptr), Depth(0)"
  },
  {
    "label": "initializeAnalysisInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeAnalysisInfo()"
  },
  {
    "label": "PMDataManager()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PMDataManager()"
  },
  {
    "label": "getAsPass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "getAsPass()"
  },
  {
    "label": "recordAvailableAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recordAvailableAnalysis(Pass *P)"
  },
  {
    "label": "verifyPreservedAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyPreservedAnalysis(Pass *P)"
  },
  {
    "label": "removeNotPreservedAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeNotPreservedAnalysis(Pass *P)"
  },
  {
    "label": "removeDeadPasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeDeadPasses(Pass *P, StringRef Msg, enum PassDebuggingString)"
  },
  {
    "label": "freePass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freePass(Pass *P, StringRef Msg, enum PassDebuggingString)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(Pass *P, bool ProcessAnalysis = true)"
  },
  {
    "label": "addLowerLevelRequiredPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLowerLevelRequiredPass(Pass *P, Pass *RequiredPass)"
  },
  {
    "label": "getOnTheFlyPass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "getOnTheFlyPass(Pass *P, AnalysisID PI, Function &F)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (AvailableAnalysis .)",
    "insertText": "clear()"
  },
  {
    "label": "preserveHigherLevelAnalysis()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "preserveHigherLevelAnalysis(Pass *P)"
  },
  {
    "label": "collectRequiredAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectRequiredAnalysis(SmallVectorImpl<Pass *> &RequiredPasses, SmallVectorImpl<AnalysisID> &ReqPassNotAvailable, Pass *P)"
  },
  {
    "label": "initializeAnalysisImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initializeAnalysisImpl(Pass *P)"
  },
  {
    "label": "findAnalysisPass()",
    "kind": "Method",
    "detail": "Function (Pass*)",
    "insertText": "findAnalysisPass(AnalysisID AID, bool Direction)"
  },
  {
    "label": "getTopLevelManager()",
    "kind": "Method",
    "detail": "Function (PMTopLevelManager*)",
    "insertText": "getTopLevelManager()"
  },
  {
    "label": "getDepth()",
    "kind": "Method",
    "detail": "Function (TPM = T ; } unsigned)",
    "insertText": "getDepth()"
  },
  {
    "label": "dumpLastUses()",
    "kind": "Method",
    "detail": "Function (Depth = newDepth ; } void)",
    "insertText": "dumpLastUses(Pass *P, unsigned Offset)"
  },
  {
    "label": "dumpPassArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpPassArguments()"
  },
  {
    "label": "dumpPassInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpPassInfo(Pass *P, enum PassDebuggingString S1, enum PassDebuggingString S2, StringRef Msg)"
  },
  {
    "label": "dumpRequiredSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpRequiredSet(const Pass *P)"
  },
  {
    "label": "dumpPreservedSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dumpPreservedSet(const Pass *P)"
  },
  {
    "label": "getNumContainedPasses()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumContainedPasses()"
  },
  {
    "label": "getPassManagerType()",
    "kind": "Method",
    "detail": "Function (} PassManagerType)",
    "insertText": "getPassManagerType()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(0 && \"Invalid use of getPassManagerType\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (unsigned Index = 0 ;)",
    "insertText": "for(PMStack::iterator I = PMS.begin(), E = PMS.end(); I != E; ++I) InheritedAnalysis[Index++] = (*I)->getAvailableAnalysis()"
  },
  {
    "label": "isPassDebuggingExecutionsOrMore()",
    "kind": "Method",
    "detail": "Function (} protected : PMTopLevelManager* TPM ; SmallVector<Pass*,1 6> PassVector ; DenseMap<AnalysisID,Pass*>* InheritedAnalysis [ PMT_Last ] ; bool)",
    "insertText": "isPassDebuggingExecutionsOrMore()"
  },
  {
    "label": "dumpAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "dumpAnalysisUsage(StringRef Msg, const Pass *P, const AnalysisUsage::VectorType &Set)"
  },
  {
    "label": "FPPassManager()",
    "kind": "Method",
    "detail": "Function (DenseMap<AnalysisID,Pass*> AvailableAnalysis ; SmallVector<Pass*,1 6> HigherLevelAnalysis ; unsigned Depth ; } ; class FPPassManager : public ModulePass,public PMDataManager { public : char ID ;)",
    "insertText": "FPPassManager() : ModulePass(ID), PMDataManager()"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "runOnModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnModule(Module &M)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cleanup()"
  },
  {
    "label": "doInitialization()",
    "kind": "Method",
    "detail": "Function (using ModulePass::doInitialization ; bool)",
    "insertText": "doInitialization(Module &M)"
  },
  {
    "label": "doFinalization()",
    "kind": "Method",
    "detail": "Function (using ModulePass::doFinalization ; bool)",
    "insertText": "doFinalization(Module &M)"
  },
  {
    "label": "setPreservesAll()",
    "kind": "Method",
    "detail": "Function (Info .)",
    "insertText": "setPreservesAll()"
  },
  {
    "label": "dumpPassStructure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dumpPassStructure(unsigned Offset)"
  },
  {
    "label": "getPassName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getPassName()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(N < PassVector.size() && \"Pass number out of range!\")"
  },
  {
    "label": "FunctionPass()",
    "kind": "Method",
    "detail": "Function (FunctionPass* FP = static_cast<)",
    "insertText": "FunctionPass(PassVector[N])"
  }
]