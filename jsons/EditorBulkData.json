[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBulkData"
  },
  {
    "label": "FLinkerSave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerSave"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FPackageFileVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageFileVersion"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCompressionSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressionSettings"
  },
  {
    "label": "FEditorBulkData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBulkData"
  },
  {
    "label": "FSharedBufferWithID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedBufferWithID"
  },
  {
    "label": "FTocEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTocEntry"
  },
  {
    "label": "ErrorVerbosity",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ErrorVerbosity"
  },
  {
    "label": "FCompressionSettings()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Mutex . h \" # include \" Async / RecursiveMutex . h \" # include \" Async / Future . h \" # include \" Compression / CompressedBuffer . h \" # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" HAL / Platform . h \" # include \" IO / IoHash . h \" # include \" Internationalization / Text . h \" # include \" Memory / SharedBuffer . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" Misc / PackagePath . h \" # include \" Misc / PackageSegment . h \" # include \" Serialization / CustomVersion . h \" # include \" Serialization / StructuredArchive . h \" class FArchive ; class FBulkData ; class FLinkerSave ; class UObject ; struct FPackageFileVersion ; namespace UE::BulkDataRegistry { enum class ERegisterResult : uint8 ; } # define UE_ENABLE_VIRTUALIZATION_TOGGLE 1 namespace UE::Serialization { namespace Private { struct FCompressionSettings {)",
    "insertText": "FCompressionSettings()"
  },
  {
    "label": "FCompressionSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompressionSettings(const FCompressedBuffer& Buffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "operator(const FCompressionSettings& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(ECompressedBufferCompressor InCompressor, ECompressedBufferCompressionLevel InCompressionLevel)"
  },
  {
    "label": "SetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToDefault()"
  },
  {
    "label": "SetToDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetToDisabled()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "IsCompressed()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsCompressed()"
  },
  {
    "label": "GetCompressor()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ECompressedBufferCompressor)",
    "insertText": "GetCompressor()"
  },
  {
    "label": "GetCompressionLevel()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] ECompressedBufferCompressionLevel)",
    "insertText": "GetCompressionLevel()"
  },
  {
    "label": "FEditorBulkData()",
    "kind": "Method",
    "detail": "Function (private : ECompressedBufferCompressor Compressor ; ECompressedBufferCompressionLevel CompressionLevel ; bool bIsSet ; } ; } enum class ECompressionOptions : uint8 { Default,Disabled,} ; class FEditorBulkData final { public :)",
    "insertText": "FEditorBulkData()"
  },
  {
    "label": "FEditorBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorBulkData(FEditorBulkData&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEditorBulkData&)",
    "insertText": "operator(FEditorBulkData&& Other)"
  },
  {
    "label": "FEditorBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEditorBulkData(const FEditorBulkData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEditorBulkData&)",
    "insertText": "operator(const FEditorBulkData& Other)"
  },
  {
    "label": "CreateFromBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFromBulkData(FBulkData& BulkData, const FGuid& Guid, UObject* Owner)"
  },
  {
    "label": "CreateLegacyUniqueIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLegacyUniqueIdentifier(UObject* Owner)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, bool bAllowRegister=true)"
  },
  {
    "label": "UnloadData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadData()"
  },
  {
    "label": "DetachFromDisk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachFromDisk(FArchive* Ar, bool bEnsurePayloadIsLoaded)"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "GetPayloadId()",
    "kind": "Method",
    "detail": "Function (const FIoHash&)",
    "insertText": "GetPayloadId()"
  },
  {
    "label": "GetPayloadSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetPayloadSize()"
  },
  {
    "label": "GetPayload()",
    "kind": "Method",
    "detail": "Function (TFuture<FSharedBuffer>)",
    "insertText": "GetPayload()"
  },
  {
    "label": "GetCompressedPayload()",
    "kind": "Method",
    "detail": "Function (TFuture<FCompressedBuffer>)",
    "insertText": "GetCompressedPayload()"
  },
  {
    "label": "UpdatePayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePayload(FSharedBuffer InPayload, UObject* Owner = nullptr)"
  },
  {
    "label": "UpdatePayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePayload(FCompressedBuffer InPayload, UObject* Owner = nullptr)"
  },
  {
    "label": "FSharedBufferWithID()",
    "kind": "Method",
    "detail": "Function (struct FSharedBufferWithID {)",
    "insertText": "FSharedBufferWithID(FSharedBuffer InPayload)"
  },
  {
    "label": "FSharedBufferWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSharedBufferWithID()"
  },
  {
    "label": "FSharedBufferWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSharedBufferWithID(FSharedBufferWithID&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSharedBufferWithID&)",
    "insertText": "operator(FSharedBufferWithID&&)"
  },
  {
    "label": "FSharedBufferWithID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSharedBufferWithID(const FSharedBufferWithID&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSharedBufferWithID&)",
    "insertText": "operator(const FSharedBufferWithID&)"
  },
  {
    "label": "SetCompressionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompressionOptions(ECompressionOptions Option)"
  },
  {
    "label": "SetCompressionOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompressionOptions(ECompressedBufferCompressor Compressor, ECompressedBufferCompressionLevel CompressionLevel)"
  },
  {
    "label": "GetBulkDataVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBulkDataVersions(FArchive& InlineArchive, FPackageFileVersion& OutUEVersion, int32& OutLicenseeUEVersion, FCustomVersionContainer& OutCustomVersions)"
  },
  {
    "label": "TearOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearOff()"
  },
  {
    "label": "CopyTornOff()",
    "kind": "Method",
    "detail": "Function (FEditorBulkData)",
    "insertText": "CopyTornOff()"
  },
  {
    "label": "SerializeForRegistry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeForRegistry(FArchive& Ar)"
  },
  {
    "label": "CanSaveForRegistry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSaveForRegistry()"
  },
  {
    "label": "HasPlaceholderPayloadId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPlaceholderPayloadId()"
  },
  {
    "label": "IsMemoryOnlyPayload()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMemoryOnlyPayload()"
  },
  {
    "label": "UpdatePayloadId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePayloadId()"
  },
  {
    "label": "LocationMatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LocationMatches(const FEditorBulkData& Other)"
  },
  {
    "label": "UpdateRegistrationOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegistrationOwner(UObject* Owner)"
  },
  {
    "label": "FEditorBulkData()",
    "kind": "Method",
    "detail": "Function (# endif protected : enum class ETornOff { } ;)",
    "insertText": "FEditorBulkData(const FEditorBulkData& Other, ETornOff)"
  },
  {
    "label": "FRIEND_ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : struct FTocEntry ; enum class EFlags : uint32 { None = 0,IsVirtualized = 1<<0,HasPayloadSidecarFile = 1<<1,ReferencesLegacyFile = 1<<2,LegacyFileIsCompressed = 1<<3,DisablePayloadCompression = 1<<4,LegacyKeyWasGuidDerived = 1<<5,HasRegistered = 1<<6,IsTornOff = 1<<7,ReferencesWorkspaceDomain = 1<<8,StoredInPackageTrailer = 1<<9,IsCooked = 1<<1 0,WasDetached = 1<<1 1 } ;)",
    "insertText": "FRIEND_ENUM_CLASS_FLAGS(EFlags)"
  },
  {
    "label": "EFlags()",
    "kind": "Method",
    "detail": "Function (EFlags TransientFlags =)",
    "insertText": "EFlags((uint32)EFlags::HasRegistered | (uint32)EFlags::IsTornOff | (uint32)EFlags::WasDetached)"
  },
  {
    "label": "SerializeToLegacyPath()",
    "kind": "Method",
    "detail": "Function (enum ErrorVerbosity { None = 0,All } ; void)",
    "insertText": "SerializeToLegacyPath(FLinkerSave& LinkerSave, FCompressedBuffer PayloadToSerialize, EFlags UpdatedFlags, UObject* Owner)"
  },
  {
    "label": "SerializeToPackageTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeToPackageTrailer(FLinkerSave& LinkerSave, FCompressedBuffer PayloadToSerialize, EFlags UpdatedFlags, UObject* Owner)"
  },
  {
    "label": "UpdatePayloadImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePayloadImpl(FSharedBuffer&& InPayload, const FIoHash& InPayloadID, UObject* Owner)"
  },
  {
    "label": "GetDataInternal()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "GetDataInternal()"
  },
  {
    "label": "LoadFromDisk()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "LoadFromDisk()"
  },
  {
    "label": "LoadFromPackageFile()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "LoadFromPackageFile()"
  },
  {
    "label": "LoadFromPackageTrailer()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "LoadFromPackageTrailer()"
  },
  {
    "label": "LoadFromSidecarFile()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "LoadFromSidecarFile()"
  },
  {
    "label": "LoadFromSidecarFileInternal()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "LoadFromSidecarFileInternal(ErrorVerbosity Verbosity)"
  },
  {
    "label": "SerializeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeData(FArchive& Ar, FCompressedBuffer& Payload, const EFlags PayloadFlags)"
  },
  {
    "label": "PushData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushData(const FPackagePath& InPackagePath)"
  },
  {
    "label": "PullData()",
    "kind": "Method",
    "detail": "Function (FCompressedBuffer)",
    "insertText": "PullData()"
  },
  {
    "label": "CanUnloadData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnloadData()"
  },
  {
    "label": "CanLoadDataFromDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLoadDataFromDisk()"
  },
  {
    "label": "UpdateKeyIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKeyIfNeeded()"
  },
  {
    "label": "UpdateKeyIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKeyIfNeeded(FCompressedBuffer InPayload)"
  },
  {
    "label": "RecompressForSerialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecompressForSerialization(FCompressedBuffer& InOutPayload, EFlags PayloadFlags)"
  },
  {
    "label": "BuildFlagsForSerialization()",
    "kind": "Method",
    "detail": "Function (EFlags)",
    "insertText": "BuildFlagsForSerialization(FArchive& Ar, bool bKeepFileDataByReference)"
  },
  {
    "label": "IsDataVirtualized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDataVirtualized()"
  },
  {
    "label": "IsDataVirtualized()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDataVirtualized(EFlags InFlags)"
  },
  {
    "label": "HasPayloadSidecarFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPayloadSidecarFile()"
  },
  {
    "label": "IsReferencingOldBulkData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencingOldBulkData()"
  },
  {
    "label": "IsReferencingOldBulkData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencingOldBulkData(EFlags InFlags)"
  },
  {
    "label": "IsReferencingWorkspaceDomain()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencingWorkspaceDomain()"
  },
  {
    "label": "IsReferencingWorkspaceDomain()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencingWorkspaceDomain(EFlags InFlags)"
  },
  {
    "label": "IsReferencingByPackagePath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencingByPackagePath()"
  },
  {
    "label": "IsReferencingByPackagePath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencingByPackagePath(EFlags InFlags)"
  },
  {
    "label": "IsStoredInPackageTrailer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStoredInPackageTrailer()"
  },
  {
    "label": "IsStoredInPackageTrailer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStoredInPackageTrailer(EFlags InFlags)"
  },
  {
    "label": "HasAttachedArchive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAttachedArchive()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister()"
  },
  {
    "label": "OnExitMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExitMemory()"
  },
  {
    "label": "UpdateRegistrationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRegistrationData(UObject* Owner, const TCHAR* LogCallerName, bool bAllowUpdateId)"
  },
  {
    "label": "LogRegisterError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogRegisterError(UE::BulkDataRegistry::ERegisterResult Value, UObject* Owner, const FGuid& FailedBulkDataId, const TCHAR* CallerName, bool bHandledbyCreateUniqueGuid)"
  },
  {
    "label": "TryPayloadValidationForSaving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryPayloadValidationForSaving(const FCompressedBuffer& PayloadForSaving, FLinkerSave* LinkerSave)"
  },
  {
    "label": "GetCorruptedPayloadErrorMsgForSave()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCorruptedPayloadErrorMsgForSave(FLinkerSave* Linker)"
  },
  {
    "label": "ValidatePackageTrailerBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidatePackageTrailerBuilder(const FLinkerSave* LinkerSave, const FIoHash& Id, EFlags PayloadFlags)"
  },
  {
    "label": "ShouldUseLegacySerialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseLegacySerialization(const FLinkerSave* LinkerSave)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (FGuid BulkDataId ; FIoHash PayloadContentId ; FSharedBuffer Payload ; int64 PayloadSize = 0 ; FArchive* AttachedAr = nullptr ; int64 OffsetInFile = INDEX_NONE ; FPackagePath PackagePath ; EFlags Flags = EFlags::None ; FRecursiveMutex Mutex ; # if UE_ENABLE_VIRTUALIZATION_TOGGLE bool bSkipVirtualization = false ; # endif Private::FCompressionSettings CompressionSettings ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FEditorBulkData::EFlags)"
  },
  {
    "label": "IoHashToGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "IoHashToGuid(const FIoHash& Hash)"
  }
]