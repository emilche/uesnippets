[
  {
    "label": "FPBDJointUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointUtilities"
  },
  {
    "label": "GetSphericalAxisDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSphericalAxisDelta(\n\t\t\tconst FVec3& X0,\n\t\t\tconst FVec3& X1,\n\t\t\tFVec3& Axis,\n\t\t\tFReal& Delta)"
  },
  {
    "label": "GetCylindricalAxesDeltas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylindricalAxesDeltas(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FVec3& X0,\n\t\t\tconst FVec3& X1,\n\t\t\tconst int32 CylinderAxisIndex,\n\t\t\tFVec3& CylinderAxis,\n\t\t\tFReal& CylinderDelta,\n\t\t\tFVec3& RadialAxis,\n\t\t\tFReal& RadialDelta)"
  },
  {
    "label": "GetPlanarAxisDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlanarAxisDelta(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FVec3& X0,\n\t\t\tconst FVec3& X1,\n\t\t\tconst int32 PlaneAxisIndex,\n\t\t\tFVec3& Axis,\n\t\t\tFReal& Delta)"
  },
  {
    "label": "DecomposeSwingTwistLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecomposeSwingTwistLocal(\n\t\t\tconst FRotation3& R0, \n\t\t\tconst FRotation3& R1, \n\t\t\tFRotation3& R01Swing, \n\t\t\tFRotation3& R01Twist)"
  },
  {
    "label": "GetSwingTwistAngles()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "GetSwingTwistAngles(\n\t\t\tconst FRotation3& R0, \n\t\t\tconst FRotation3& R1, \n\t\t\tFReal& TwistAngle, \n\t\t\tFReal& Swing1Angle, \n\t\t\tFReal& Swing2Angle)"
  },
  {
    "label": "GetTwistAngle()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetTwistAngle(\n\t\t\tconst FRotation3& InTwist)"
  },
  {
    "label": "GetTwistAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTwistAxisAngle(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FRotation3& R1,\n\t\t\tFVec3& Axis,\n\t\t\tFReal& Angle)"
  },
  {
    "label": "GetConeAxisAngleLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConeAxisAngleLocal(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FRotation3& R1,\n\t\t\tconst FReal AngleTolerance,\n\t\t\tFVec3& AxisLocal,\n\t\t\tFReal& Angle)"
  },
  {
    "label": "GetCircularConeAxisErrorLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCircularConeAxisErrorLocal(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FRotation3& R1,\n\t\t\tconst FReal SwingLimit,\n\t\t\tFVec3& AxisLocal,\n\t\t\tFReal& Error)"
  },
  {
    "label": "GetEllipticalConeAxisErrorLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEllipticalConeAxisErrorLocal(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FRotation3& R1,\n\t\t\tconst FReal SwingLimitY,\n\t\t\tconst FReal SwingLimitZ,\n\t\t\tFVec3& AxisLocal,\n\t\t\tFReal& Error)"
  },
  {
    "label": "GetLockedSwingAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLockedSwingAxisAngle(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FRotation3& R1,\n\t\t\tconst EJointAngularConstraintIndex SwingConstraintIndex,\n\t\t\tFVec3& Axis,\n\t\t\tFReal& Angle)"
  },
  {
    "label": "GetDualConeSwingAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDualConeSwingAxisAngle(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FRotation3& R1,\n\t\t\tconst EJointAngularConstraintIndex SwingConstraintIndex,\n\t\t\tFVec3& Axis,\n\t\t\tFReal& Angle)"
  },
  {
    "label": "GetSwingAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSwingAxisAngle(\n\t\t\tconst FRotation3& R0,\n\t\t\tconst FRotation3& R1,\n\t\t\tconst FReal AngleTolerance,\n\t\t\tconst EJointAngularConstraintIndex SwingConstraintIndex,\n\t\t\tFVec3& Axis,\n\t\t\tFReal& Angle)"
  },
  {
    "label": "GetLockedRotationAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLockedRotationAxes(\n\t\t\tconst FRotation3& R0, \n\t\t\tconst FRotation3& R1, \n\t\t\tFVec3& Axis0, \n\t\t\tFVec3& Axis1, \n\t\t\tFVec3& Axis2)"
  },
  {
    "label": "GetConeAngleLimit()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetConeAngleLimit(\n\t\t\tconst FPBDJointSettings& JointSettings,\n\t\t\tconst FVec3& SwingAxisLocal,\n\t\t\tconst FReal SwingAngle)"
  },
  {
    "label": "ConditionInertia()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "ConditionInertia(\n\t\t\tconst FVec3& InI, \n\t\t\tconst FReal MaxRatio)"
  },
  {
    "label": "ConditionParentInertia()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "ConditionParentInertia(\n\t\t\tconst FVec3& IParent, \n\t\t\tconst FVec3& IChild, \n\t\t\tconst FReal MinRatio)"
  },
  {
    "label": "ConditionParentMass()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "ConditionParentMass(\n\t\t\tconst FReal MParent, \n\t\t\tconst FReal MChild, \n\t\t\tconst FReal MinRatio)"
  },
  {
    "label": "ConditionInverseMassAndInertia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionInverseMassAndInertia(\n\t\t\tconst FReal& InInvMParent,\n\t\t\tconst FReal& InInvMChild,\n\t\t\tconst FVec3& InInvIParent,\n\t\t\tconst FVec3& InInvIChild,\n\t\t\tconst FReal MinParentMassRatio,\n\t\t\tconst FReal MaxInertiaRatio,\n\t\t\tFReal& OutInvMParent,\n\t\t\tFReal& OutInvMChild,\n\t\t\tFVec3& OutInvIParent,\n\t\t\tFVec3& OutInvIChild)"
  },
  {
    "label": "ConditionInverseMassAndInertia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionInverseMassAndInertia(\n\t\t\tFReal& InOutInvMParent,\n\t\t\tFReal& InOutInvMChild,\n\t\t\tFVec3& InOutInvIParent,\n\t\t\tFVec3& InOutInvIChild,\n\t\t\tconst FReal MinParentMassRatio,\n\t\t\tconst FReal MaxInertiaRatio)"
  },
  {
    "label": "GetSoftLinearLimitEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftLinearLimitEnabled(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftTwistLimitEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftTwistLimitEnabled(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftSwingLimitEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftSwingLimitEnabled(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftLinearStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftLinearStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftLinearDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftLinearDamping(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetTwistStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetTwistStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftTwistStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftTwistStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftTwistDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftTwistDamping(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSwingStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSwingStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftSwingStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftSwingStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftSwingDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftSwingDamping(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearDriveStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearDriveStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings,\n\t\t\tconst int32 AxisIndex)"
  },
  {
    "label": "GetLinearDriveDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearDriveDamping(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings,\n\t\t\tconst int32 AxisIndex)"
  },
  {
    "label": "GetAngularTwistDriveStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularTwistDriveStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularTwistDriveDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularTwistDriveDamping(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularTwistDriveTorqueLimit()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularTwistDriveTorqueLimit(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSwingDriveStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSwingDriveStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSwingDriveDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSwingDriveDamping(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSwingDriveTorqueLimit()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSwingDriveTorqueLimit(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSLerpDriveStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSLerpDriveStiffness(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSLerpDriveDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSLerpDriveDamping(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearProjection()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearProjection(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularProjection()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularProjection(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearSoftAccelerationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLinearSoftAccelerationMode(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSoftAccelerationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAngularSoftAccelerationMode(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLinearDriveAccelerationMode(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAngularDriveAccelerationMode(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetShockPropagationInvMassScale()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetShockPropagationInvMassScale(\n\t\t\tconst FPBDJointSolverSettings& SolverSettings,\n\t\t\tconst FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSphereLimitedPositionError()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetSphereLimitedPositionError(const FVec3& CX, const FReal Radius)"
  },
  {
    "label": "GetCylinderLimitedPositionError()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetCylinderLimitedPositionError(const FVec3& CX, const FVec3& Axis, const FReal Limit, const EJointMotionType AxisMotion)"
  },
  {
    "label": "GetLineLimitedPositionError()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetLineLimitedPositionError(const FVec3& CX, const FVec3& Axis, const FReal Limit, const EJointMotionType AxisMotion)"
  },
  {
    "label": "GetLimitedPositionError()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetLimitedPositionError(const FPBDJointSettings& JointSettings, const FRotation3& R0, const FVec3& CX)"
  }
]