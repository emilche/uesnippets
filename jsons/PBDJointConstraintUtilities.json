[
  {
    "label": "FPBDJointUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointUtilities"
  },
  {
    "label": "GetSphericalAxisDelta()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / PBDJointConstraintTypes . h \" # include \" Chaos / Collision / CollisionApplyType . h \" namespace Chaos { class FPBDJointUtilities { public : void)",
    "insertText": "GetSphericalAxisDelta(const FVec3& X0, const FVec3& X1, FVec3& Axis, FReal& Delta)"
  },
  {
    "label": "GetCylindricalAxesDeltas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCylindricalAxesDeltas(const FRotation3& R0, const FVec3& X0, const FVec3& X1, const int32 CylinderAxisIndex, FVec3& CylinderAxis, FReal& CylinderDelta, FVec3& RadialAxis, FReal& RadialDelta)"
  },
  {
    "label": "GetPlanarAxisDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlanarAxisDelta(const FRotation3& R0, const FVec3& X0, const FVec3& X1, const int32 PlaneAxisIndex, FVec3& Axis, FReal& Delta)"
  },
  {
    "label": "DecomposeSwingTwistLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecomposeSwingTwistLocal(const FRotation3& R0, const FRotation3& R1, FRotation3& R01Swing, FRotation3& R01Twist)"
  },
  {
    "label": "GetSwingTwistAngles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSwingTwistAngles(const FRotation3& R0, const FRotation3& R1, FReal& TwistAngle, FReal& Swing1Angle, FReal& Swing2Angle)"
  },
  {
    "label": "GetTwistAngle()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetTwistAngle(const FRotation3& InTwist)"
  },
  {
    "label": "GetTwistAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTwistAxisAngle(const FRotation3& R0, const FRotation3& R1, FVec3& Axis, FReal& Angle)"
  },
  {
    "label": "GetConeAxisAngleLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConeAxisAngleLocal(const FRotation3& R0, const FRotation3& R1, const FReal AngleTolerance, FVec3& AxisLocal, FReal& Angle)"
  },
  {
    "label": "GetCircularConeAxisErrorLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCircularConeAxisErrorLocal(const FRotation3& R0, const FRotation3& R1, const FReal SwingLimit, FVec3& AxisLocal, FReal& Error)"
  },
  {
    "label": "GetEllipticalConeAxisErrorLocal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEllipticalConeAxisErrorLocal(const FRotation3& R0, const FRotation3& R1, const FReal SwingLimitY, const FReal SwingLimitZ, FVec3& AxisLocal, FReal& Error)"
  },
  {
    "label": "GetLockedSwingAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLockedSwingAxisAngle(const FRotation3& R0, const FRotation3& R1, const EJointAngularConstraintIndex SwingConstraintIndex, FVec3& Axis, FReal& Angle)"
  },
  {
    "label": "GetDualConeSwingAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDualConeSwingAxisAngle(const FRotation3& R0, const FRotation3& R1, const EJointAngularConstraintIndex SwingConstraintIndex, FVec3& Axis, FReal& Angle)"
  },
  {
    "label": "GetSwingAxisAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSwingAxisAngle(const FRotation3& R0, const FRotation3& R1, const FReal AngleTolerance, const EJointAngularConstraintIndex SwingConstraintIndex, FVec3& Axis, FReal& Angle)"
  },
  {
    "label": "GetLockedRotationAxes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLockedRotationAxes(const FRotation3& R0, const FRotation3& R1, FVec3& Axis0, FVec3& Axis1, FVec3& Axis2)"
  },
  {
    "label": "GetConeAngleLimit()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetConeAngleLimit(const FPBDJointSettings& JointSettings, const FVec3& SwingAxisLocal, const FReal SwingAngle)"
  },
  {
    "label": "ConditionInertia()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "ConditionInertia(const FVec3& InI, const FReal MaxRatio)"
  },
  {
    "label": "ConditionParentInertia()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "ConditionParentInertia(const FVec3& IParent, const FVec3& IChild, const FReal MinRatio)"
  },
  {
    "label": "ConditionParentMass()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "ConditionParentMass(const FReal MParent, const FReal MChild, const FReal MinRatio)"
  },
  {
    "label": "ConditionInverseMassAndInertia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionInverseMassAndInertia(const FReal& InInvMParent, const FReal& InInvMChild, const FVec3& InInvIParent, const FVec3& InInvIChild, const FReal MinParentMassRatio, const FReal MaxInertiaRatio, FReal& OutInvMParent, FReal& OutInvMChild, FVec3& OutInvIParent, FVec3& OutInvIChild)"
  },
  {
    "label": "ConditionInverseMassAndInertia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionInverseMassAndInertia(FReal& InOutInvMParent, FReal& InOutInvMChild, FVec3& InOutInvIParent, FVec3& InOutInvIChild, const FReal MinParentMassRatio, const FReal MaxInertiaRatio)"
  },
  {
    "label": "GetSoftLinearLimitEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftLinearLimitEnabled(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftTwistLimitEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftTwistLimitEnabled(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftSwingLimitEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftSwingLimitEnabled(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftLinearStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftLinearStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftLinearDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftLinearDamping(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetTwistStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetTwistStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftTwistStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftTwistStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftTwistDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftTwistDamping(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSwingStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSwingStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftSwingStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftSwingStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSoftSwingDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetSoftSwingDamping(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearDriveStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearDriveStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const int32 AxisIndex)"
  },
  {
    "label": "GetLinearDriveDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearDriveDamping(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings, const int32 AxisIndex)"
  },
  {
    "label": "GetAngularTwistDriveStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularTwistDriveStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularTwistDriveDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularTwistDriveDamping(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularTwistDriveTorqueLimit()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularTwistDriveTorqueLimit(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSwingDriveStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSwingDriveStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSwingDriveDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSwingDriveDamping(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSwingDriveTorqueLimit()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSwingDriveTorqueLimit(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSLerpDriveStiffness()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSLerpDriveStiffness(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSLerpDriveDamping()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularSLerpDriveDamping(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearProjection()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetLinearProjection(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularProjection()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetAngularProjection(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearSoftAccelerationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLinearSoftAccelerationMode(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularSoftAccelerationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAngularSoftAccelerationMode(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetLinearDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLinearDriveAccelerationMode(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetAngularDriveAccelerationMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAngularDriveAccelerationMode(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetShockPropagationInvMassScale()",
    "kind": "Method",
    "detail": "Function (FReal)",
    "insertText": "GetShockPropagationInvMassScale(const FPBDJointSolverSettings& SolverSettings, const FPBDJointSettings& JointSettings)"
  },
  {
    "label": "GetSphereLimitedPositionError()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetSphereLimitedPositionError(const FVec3& CX, const FReal Radius)"
  },
  {
    "label": "GetCylinderLimitedPositionError()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetCylinderLimitedPositionError(const FVec3& CX, const FVec3& Axis, const FReal Limit, const EJointMotionType AxisMotion)"
  },
  {
    "label": "GetLineLimitedPositionError()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetLineLimitedPositionError(const FVec3& CX, const FVec3& Axis, const FReal Limit, const EJointMotionType AxisMotion)"
  },
  {
    "label": "GetLimitedPositionError()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetLimitedPositionError(const FPBDJointSettings& JointSettings, const FRotation3& R0, const FVec3& CX)"
  }
]