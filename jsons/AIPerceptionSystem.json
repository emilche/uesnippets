[
  {
    "label": "FGameplayDebuggerCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerCategory"
  },
  {
    "label": "UAIPerceptionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionComponent"
  },
  {
    "label": "UAISenseEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISenseEvent"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UAIPerceptionSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionSystem"
  },
  {
    "label": "FDelayedStimulus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelayedStimulus"
  },
  {
    "label": "FPerceptionSourceRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerceptionSourceRegistration"
  },
  {
    "label": "EDelayedStimulusSorting",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDelayedStimulusSorting"
  },
  {
    "label": "UAISense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISense"
  },
  {
    "label": "UAISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISystem"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Engine / EngineTypes . h \" # include \" Engine / World . h \" # include \" Perception / AIPerceptionTypes . h \" # include \" Perception / AISense . h \" # include \" AISubsystem . h \" # include \" AIPerceptionSystem . generated . h \" class FGameplayDebuggerCategory ; class UAIPerceptionComponent ; class UAISenseEvent ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAIPerception, Warning, All)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (class APawn ;)",
    "insertText": "UCLASS(ClassGroup=AI, config=Game, defaultconfig, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AIMODULE_API UAIPerceptionSystem(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "FPerceptionSourceRegistration()",
    "kind": "Method",
    "detail": "Function (FActorEndPlaySignature::FDelegate StimuliSourceEndPlayDelegate ; TMap<const AActor*,FPerceptionStimuliSource> RegisteredStimuliSources ; uint32 bHandlePawnNotification : 1 ; struct FDelayedStimulus { double DeliveryTimestamp ; FPerceptionListenerID ListenerId ; TWeakObjectPtr<AActor> Instigator ; FAIStimulus Stimulus ; } ; TArray<FDelayedStimulus> DelayedStimuli ; struct FPerceptionSourceRegistration { FAISenseID SenseID ; TWeakObjectPtr<AActor> Source ;)",
    "insertText": "FPerceptionSourceRegistration(FAISenseID InSenseID, AActor* SourceActor) : SenseID(InSenseID), Source(SourceActor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPerceptionSourceRegistration& Other)"
  },
  {
    "label": "UpdateListener()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateListener(UAIPerceptionComponent& Listener)"
  },
  {
    "label": "UnregisterListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterListener(UAIPerceptionComponent& Listener)"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (template<FEventClass,FSenseClass = FEventClass::FSenseClass> void)",
    "insertText": "OnEvent(const FEventClass& Event)"
  },
  {
    "label": "FSenseClass()",
    "kind": "Method",
    "detail": "Function (const FAISenseID SenseID = UAISense::GetSenseID<)",
    "insertText": "FSenseClass()"
  },
  {
    "label": "OnEventsBatch()",
    "kind": "Method",
    "detail": "Function (} } template<FEventClass,FSenseClass = FEventClass::FSenseClass> void)",
    "insertText": "OnEventsBatch(const TArray<FEventClass>& Events)"
  },
  {
    "label": "OnEvent()",
    "kind": "Method",
    "detail": "Function (} } } template<FEventClass,FSenseClass = FEventClass::FSenseClass> void)",
    "insertText": "OnEvent(UWorld* World, const FEventClass& Event)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UAIPerceptionSystem* PerceptionSys =)",
    "insertText": "GetCurrent(World)"
  },
  {
    "label": "FSenseClass()",
    "kind": "Method",
    "detail": "Function (PerceptionSys -> OnEvent<FEventClass,)",
    "insertText": "FSenseClass(Event)"
  },
  {
    "label": "RegisterSource()",
    "kind": "Method",
    "detail": "Function (template<FSenseClass> void)",
    "insertText": "RegisterSource(AActor& SourceActor)"
  },
  {
    "label": "RegisterSourceForSenseClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSourceForSenseClass(TSubclassOf<UAISense> Sense, AActor& Target)"
  },
  {
    "label": "UnregisterSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSource(AActor& SourceActor, const TSubclassOf<UAISense> Sense = nullptr)"
  },
  {
    "label": "OnListenerForgetsActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerForgetsActor(const UAIPerceptionComponent& Listener, AActor& ActorToForget)"
  },
  {
    "label": "OnListenerForgetsAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerForgetsAll(const UAIPerceptionComponent& Listener)"
  },
  {
    "label": "OnListenerConfigUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerConfigUpdated(FAISenseID SenseID, const UAIPerceptionComponent& Listener)"
  },
  {
    "label": "RegisterDelayedStimulus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelayedStimulus(FPerceptionListenerID ListenerId, float Delay, AActor* Instigator, const FAIStimulus& Stimulus)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UAIPerceptionSystem*)",
    "insertText": "GetCurrent(UObject* WorldContextObject)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UAIPerceptionSystem*)",
    "insertText": "GetCurrent(UWorld& World)"
  },
  {
    "label": "MakeNoiseImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNoiseImpl(AActor* NoiseMaker, float Loudness, APawn* NoiseInstigator, const FVector& NoiseLocation, float MaxRange, FName Tag)"
  },
  {
    "label": "RegisterSenseClass()",
    "kind": "Method",
    "detail": "Function (FAISenseID)",
    "insertText": "RegisterSenseClass(TSubclassOf<UAISense> SenseClass)"
  },
  {
    "label": "DescribeSelfToGameplayDebugger()",
    "kind": "Method",
    "detail": "Function (# if WITH_GAMEPLAY_DEBUGGER_MENU void)",
    "insertText": "DescribeSelfToGameplayDebugger(FGameplayDebuggerCategory& DebuggerCategory)"
  },
  {
    "label": "RegisterSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSource(FAISenseID SenseID, AActor& SourceActor)"
  },
  {
    "label": "RegisterAllPawnsAsSourcesForSense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAllPawnsAsSourcesForSense(FAISenseID SenseID)"
  },
  {
    "label": "DeliverDelayedStimuli()",
    "kind": "Method",
    "detail": "Function (enum EDelayedStimulusSorting { RequiresSorting,NoNeedToSort,} ; bool)",
    "insertText": "DeliverDelayedStimuli(EDelayedStimulusSorting Sorting)"
  },
  {
    "label": "OnNewListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewListener(const FPerceptionListener& NewListener)"
  },
  {
    "label": "OnListenerUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerUpdate(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "OnListenerRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerRemoved(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "PerformSourceRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformSourceRegistration()"
  },
  {
    "label": "AgeStimuli()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AgeStimuli(const float Amount)"
  },
  {
    "label": "GetListenersMap()",
    "kind": "Method",
    "detail": "Function (class UAISense ; AIPerception::FListenerMap&)",
    "insertText": "GetListenersMap()"
  },
  {
    "label": "StartPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlay()"
  },
  {
    "label": "RegisterSenseClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSenseClass(FSenseClass::StaticClass())"
  },
  {
    "label": "RegisterSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RegisterSource(SenseID, SourceActor)"
  }
]