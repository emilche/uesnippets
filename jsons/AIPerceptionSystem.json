[
  {
    "label": "FGameplayDebuggerCategory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameplayDebuggerCategory"
  },
  {
    "label": "UAIPerceptionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionComponent"
  },
  {
    "label": "UAISenseEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISenseEvent"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UAIPerceptionSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionSystem"
  },
  {
    "label": "FDelayedStimulus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelayedStimulus"
  },
  {
    "label": "FPerceptionSourceRegistration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerceptionSourceRegistration"
  },
  {
    "label": "EDelayedStimulusSorting",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDelayedStimulusSorting"
  },
  {
    "label": "UAISense",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISense"
  },
  {
    "label": "UAISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAISystem"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (AIMODULE_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAIPerception, Warning, All)"
  },
  {
    "label": "UpdateListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateListener(UAIPerceptionComponent& Listener)"
  },
  {
    "label": "UnregisterListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterListener(UAIPerceptionComponent& Listener)"
  },
  {
    "label": "ReportEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportEvent(UAISenseEvent* PerceptionEvent)"
  },
  {
    "label": "ReportPerceptionEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportPerceptionEvent(UObject* WorldContextObject, UAISenseEvent* PerceptionEvent)"
  },
  {
    "label": "RegisterSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSource(AActor& SourceActor)"
  },
  {
    "label": "RegisterSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSource(AActor& SourceActor)"
  },
  {
    "label": "RegisterSourceForSenseClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSourceForSenseClass(TSubclassOf<UAISense> Sense, AActor& Target)"
  },
  {
    "label": "UnregisterSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSource(AActor& SourceActor, const TSubclassOf<UAISense> Sense = nullptr)"
  },
  {
    "label": "OnListenerForgetsActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerForgetsActor(const UAIPerceptionComponent& Listener, AActor& ActorToForget)"
  },
  {
    "label": "OnListenerForgetsAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerForgetsAll(const UAIPerceptionComponent& Listener)"
  },
  {
    "label": "OnListenerConfigUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerConfigUpdated(FAISenseID SenseID, const UAIPerceptionComponent& Listener)"
  },
  {
    "label": "RegisterDelayedStimulus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelayedStimulus(FPerceptionListenerID ListenerId, float Delay, AActor* Instigator, const FAIStimulus& Stimulus)"
  },
  {
    "label": "MakeNoiseImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeNoiseImpl(AActor* NoiseMaker, float Loudness, APawn* NoiseInstigator, const FVector& NoiseLocation, float MaxRange, FName Tag)"
  },
  {
    "label": "RegisterPerceptionStimuliSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterPerceptionStimuliSource(UObject* WorldContextObject, TSubclassOf<UAISense> Sense, AActor* Target)"
  },
  {
    "label": "RegisterSenseClass()",
    "kind": "Method",
    "detail": "Function (FAISenseID)",
    "insertText": "RegisterSenseClass(TSubclassOf<UAISense> SenseClass)"
  },
  {
    "label": "GetSenseClassForStimulus()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UAISense>)",
    "insertText": "GetSenseClassForStimulus(UObject* WorldContextObject, const FAIStimulus& Stimulus)"
  },
  {
    "label": "OnPerceptionStimuliSourceEndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPerceptionStimuliSourceEndPlay(AActor* Actor, EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "RegisterSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSource(FAISenseID SenseID, AActor& SourceActor)"
  },
  {
    "label": "RegisterAllPawnsAsSourcesForSense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAllPawnsAsSourcesForSense(FAISenseID SenseID)"
  },
  {
    "label": "DeliverDelayedStimuli()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeliverDelayedStimuli(EDelayedStimulusSorting Sorting)"
  },
  {
    "label": "OnNewListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewListener(const FPerceptionListener& NewListener)"
  },
  {
    "label": "OnListenerUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerUpdate(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "OnListenerRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListenerRemoved(const FPerceptionListener& UpdatedListener)"
  },
  {
    "label": "PerformSourceRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformSourceRegistration()"
  },
  {
    "label": "AgeStimuli()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AgeStimuli(const float Amount)"
  },
  {
    "label": "OnNewPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNewPawn(APawn& Pawn)"
  },
  {
    "label": "StartPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartPlay()"
  }
]