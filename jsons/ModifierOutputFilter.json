[
  {
    "label": "FCategoryLogOutputFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCategoryLogOutputFilter"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FCategoryLogOutputFilter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" Misc / OutputDeviceHelper . h \" # include \" UObject / NameTypes . h \" class FCategoryLogOutputFilter : public FStringOutputDevice { typedef FStringOutputDevice Super ; TArray<FName> CategoryNames ; bool bError ; bool bWarning ; public :)",
    "insertText": "FCategoryLogOutputFilter(const TCHAR* OutputDeviceName = TEXT(\"\")) : Super(OutputDeviceName), bError(false), bWarning(false)"
  },
  {
    "label": "AddCategoryName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCategoryName(const FName& CategoryName)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (CategoryNames .)",
    "insertText": "AddUnique(CategoryName)"
  },
  {
    "label": "RemoveCategoryName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCategoryName(const FName& CategoryName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (CategoryNames .)",
    "insertText": "Remove(CategoryName)"
  },
  {
    "label": "ContainsErrors()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsErrors()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(ToString(Verbosity))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator((TCHAR*)TEXT(\": \"))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(InData, Verbosity, Category)"
  },
  {
    "label": "bError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bError(Verbosity == ELogVerbosity::Error)"
  },
  {
    "label": "bWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bWarning(Verbosity == ELogVerbosity::Warning)"
  }
]