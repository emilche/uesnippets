[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "DuplicateVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplicateVertex"
  },
  {
    "label": "VertexNormalInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VertexNormalInfo"
  },
  {
    "label": "ESmoothness",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESmoothness"
  },
  {
    "label": "EBoundaryRule",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBoundaryRule"
  },
  {
    "label": "PolygonDef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PolygonDef"
  },
  {
    "label": "ComponentMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComponentMap"
  },
  {
    "label": "SplitEdgeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplitEdgeData"
  },
  {
    "label": "PolygonIndexDef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PolygonIndexDef"
  },
  {
    "label": "V2PVMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "V2PVMap"
  },
  {
    "label": "EdgeLookupDef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EdgeLookupDef"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FbxGeometryConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxGeometryConverter"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_GEOMETRY_MESH_H_ # define _FBXSDK_SCENE_GEOMETRY_MESH_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxarray . h> # include<fbxsdk / scene / geometry / fbxgeometry . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxMesh : public FbxGeometry {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxMesh, FbxGeometry)"
  },
  {
    "label": "GetAttributeType()",
    "kind": "Method",
    "detail": "Function (public : FbxNodeAttribute::EType)",
    "insertText": "GetAttributeType()"
  },
  {
    "label": "BeginPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPolygon(int pMaterial=-1, int pTexture=-1, int pGroup=-1, bool pLegacy=true)"
  },
  {
    "label": "BeginPolygonExt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPolygonExt(int pMaterial, int* pTextures)"
  },
  {
    "label": "AddPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPolygon(int pIndex, int pTextureUVIndex = -1)"
  },
  {
    "label": "EndPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPolygon()"
  },
  {
    "label": "GetPolygonCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPolygonCount()"
  },
  {
    "label": "GetPolygonSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetPolygonSize(int pPolygonIndex)"
  },
  {
    "label": "GetPolygonGroup()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetPolygonGroup(int pPolygonIndex)"
  },
  {
    "label": "SetPolygonGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolygonGroup(int pPolygonIndex, int pGroup)"
  },
  {
    "label": "GetPolygonVertex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetPolygonVertex(int pPolygonIndex, int pPositionInPolygon)"
  },
  {
    "label": "GetPolygonVertexNormal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetPolygonVertexNormal(int pPolyIndex, int pVertexIndex, FbxVector4& pNormal)"
  },
  {
    "label": "GetPolygonVertexNormals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolygonVertexNormals(FbxArray<FbxVector4>& pNormals)"
  },
  {
    "label": "GetPolygonVertexUV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolygonVertexUV(int pPolyIndex, int pVertexIndex, const char* pUVSetName, FbxVector2& pUV, bool& pUnmapped)"
  },
  {
    "label": "GetPolygonVertexUVs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolygonVertexUVs(const char* pUVSetName, FbxArray<FbxVector2>& pUVs, FbxArray<int>* pUnmappedUVId = NULL)"
  },
  {
    "label": "GetPolygonVertices()",
    "kind": "Method",
    "detail": "Function (int*)",
    "insertText": "GetPolygonVertices()"
  },
  {
    "label": "GetPolygonVertexCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetPolygonVertexCount()"
  },
  {
    "label": "GetPolygonVertexIndex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetPolygonVertexIndex(int pPolygonIndex)"
  },
  {
    "label": "RemovePolygon()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RemovePolygon(int pPolygonIndex)"
  },
  {
    "label": "RemoveDuplicatedEdges()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RemoveDuplicatedEdges(FbxArray<int>& pEdgeIndexList)"
  },
  {
    "label": "InitTextureUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTextureUV(int pCount, FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "AddTextureUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTextureUV(FbxVector2 pUV, FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "GetTextureUVCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTextureUVCount(FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "GetUVLayerCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetUVLayerCount()"
  },
  {
    "label": "GetAllChannelUV()",
    "kind": "Method",
    "detail": "Function (FbxArray<FbxLayerElement::EType>)",
    "insertText": "GetAllChannelUV(int pLayer)"
  },
  {
    "label": "InitMaterialIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMaterialIndices(FbxLayerElement::EMappingMode pMappingMode)"
  },
  {
    "label": "InitTextureIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTextureIndices(FbxLayerElement::EMappingMode pMappingMode, FbxLayerElement::EType pTextureType)"
  },
  {
    "label": "InitTextureUVIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTextureUVIndices(FbxLayerElement::EMappingMode pMappingMode, FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "GetTextureUVIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTextureUVIndex(int pPolygonIndex, int pPositionInPolygon, FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "SetTextureUVIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureUVIndex(int pPolygonIndex, int pPositionInPolygon, int pIndex, FbxLayerElement::EType pTypeIdentifier)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GenerateNormals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateNormals(bool pOverwrite=false, bool pByCtrlPoint = false, bool pCW=false)"
  },
  {
    "label": "CheckIfVertexNormalsCCW()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckIfVertexNormalsCCW()"
  },
  {
    "label": "DuplicateVertex()",
    "kind": "Method",
    "detail": "Function (class DuplicateVertex { public :)",
    "insertText": "DuplicateVertex() : lVertexPolyIndex(0), lNewVertexIndex(0), lNormal(0, 0, 0), lUV(0, 0), lEdgeIndex(0)"
  },
  {
    "label": "VertexNormalInfo()",
    "kind": "Method",
    "detail": "Function (} int lVertexPolyIndex ; int lNewVertexIndex ; FbxVector4 lNormal ; FbxVector2 lUV ; int lEdgeIndex ; } ; class VertexNormalInfo { public :)",
    "insertText": "VertexNormalInfo() : mTotalNormal(0, 0, 0), mNumNormal(0)"
  },
  {
    "label": "CheckSamePointTwice()",
    "kind": "Method",
    "detail": "Function (} FbxVector4 mTotalNormal ; int mNumNormal ; } ; bool)",
    "insertText": "CheckSamePointTwice()"
  },
  {
    "label": "RemoveBadPolygons()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RemoveBadPolygons()"
  },
  {
    "label": "SplitPoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitPoints(FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "BuildMergeList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildMergeList(FbxArray<int>& pMergeList)"
  },
  {
    "label": "MergePointsForPolygonVerteNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergePointsForPolygonVerteNormals(FbxArray<int> &pMergeList)"
  },
  {
    "label": "BuildMeshEdgeArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMeshEdgeArray()"
  },
  {
    "label": "GetMeshEdgeCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMeshEdgeCount()"
  },
  {
    "label": "GetMeshEdgeIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMeshEdgeIndex(int pStartVertexIndex, int pEndVertexIndex, bool& pReversed, int pExistedEdgeCount=-1)"
  },
  {
    "label": "BeginGetMeshEdgeIndexForPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGetMeshEdgeIndexForPolygon()"
  },
  {
    "label": "EndGetMeshEdgeIndexForPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndGetMeshEdgeIndexForPolygon()"
  },
  {
    "label": "GetMeshEdgeIndexForPolygon()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMeshEdgeIndexForPolygon(int pPolygon, int pPositionInPolygon)"
  },
  {
    "label": "GetMeshEdgeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMeshEdgeVertices(int pEdgeIndex, int& pStartVertexIndex, int& pEndVertexIndex)"
  },
  {
    "label": "BeginGetMeshEdgeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGetMeshEdgeVertices()"
  },
  {
    "label": "EndGetMeshEdgeVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndGetMeshEdgeVertices()"
  },
  {
    "label": "SetMeshEdgeCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshEdgeCount(int pEdgeCount)"
  },
  {
    "label": "SetMeshEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMeshEdge(int pEdgeIndex, int pValue)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(pValue >= 0 && pValue < mPolygonVertices.GetCount())"
  },
  {
    "label": "AddMeshEdgeIndex()",
    "kind": "Method",
    "detail": "Function (pValue = 0 ; return false ; } mEdgeArray [ pEdgeIndex ] = pValue ; } return true ; } int)",
    "insertText": "AddMeshEdgeIndex(int pStartVertexIndex, int pEndVertexIndex, bool pCheckForDuplicates)"
  },
  {
    "label": "SetMeshEdgeIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetMeshEdgeIndex(int pEdgeIndex, int pStartVertexIndex, int pEndVertexIndex, bool pCheckForDuplicates, int pExistedEdgeCount=-1)"
  },
  {
    "label": "BeginAddMeshEdgeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAddMeshEdgeIndex()"
  },
  {
    "label": "EndAddMeshEdgeIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAddMeshEdgeIndex()"
  },
  {
    "label": "AddMeshEdgeIndexForPolygon()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddMeshEdgeIndexForPolygon(int pPolygonIndex, int pPositionInPolygon)"
  },
  {
    "label": "SetMeshEdgeIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMeshEdgeIndex(int pEdgeIndex, int pPolygonIndex, int pPositionInPolygon)"
  },
  {
    "label": "IsTriangleMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTriangleMesh()"
  },
  {
    "label": "ReservePolygonCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReservePolygonCount(int pCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (mPolygons .)",
    "insertText": "Reserve(pCount)"
  },
  {
    "label": "ReservePolygonVertexCount()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReservePolygonVertexCount(int pCount)"
  },
  {
    "label": "GetTextureUV()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetTextureUV(FbxLayerElementArrayTemplate<FbxVector2>** pLockableArray, FbxLayerElement::EType pTypeIdentifier=FbxLayerElement::eTextureDiffuse)"
  },
  {
    "label": "GetMaterialIndices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaterialIndices(FbxLayerElementArrayTemplate<int>** pLockableArray)"
  },
  {
    "label": "GetTextureIndices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureIndices(FbxLayerElementArrayTemplate<int>** pLockableArray, FbxLayerElement::EType pTextureType)"
  },
  {
    "label": "GetEdgeCreaseInfoArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEdgeCreaseInfoArray(FbxLayerElementArrayTemplate<double>** pCreaseArray)"
  },
  {
    "label": "GetVertexCreaseInfoArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVertexCreaseInfoArray(FbxLayerElementArrayTemplate<double>** pCreaseArray)"
  },
  {
    "label": "SetEdgeCreaseInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEdgeCreaseInfo(int pEdgeIndex, double pWeight)"
  },
  {
    "label": "SetEdgeCreaseInfoArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEdgeCreaseInfoArray(FbxArray<double>* pWeightArray)"
  },
  {
    "label": "SetVertexCreaseInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVertexCreaseInfo(int pVertexIndex, double pWeight)"
  },
  {
    "label": "SetVertexCreaseInfoArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetVertexCreaseInfoArray(FbxArray<double>* pWeightArray)"
  },
  {
    "label": "GetMeshSmoothness()",
    "kind": "Method",
    "detail": "Function (enum ESmoothness { eHull,eRough,eMedium,eFine } ; enum EBoundaryRule { eLegacy,eCreaseAll,eCreaseEdge } ; FbxMesh::ESmoothness)",
    "insertText": "GetMeshSmoothness()"
  },
  {
    "label": "SetMeshSmoothness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshSmoothness(FbxMesh::ESmoothness pSmoothness)"
  },
  {
    "label": "GetMeshPreviewDivisionLevels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMeshPreviewDivisionLevels()"
  },
  {
    "label": "SetMeshPreviewDivisionLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshPreviewDivisionLevels(int pPreviewDivisionLevels)"
  },
  {
    "label": "GetMeshRenderDivisionLevels()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetMeshRenderDivisionLevels()"
  },
  {
    "label": "SetMeshRenderDivisionLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMeshRenderDivisionLevels(int pRenderDivisionLevels)"
  },
  {
    "label": "GetDisplaySubdivisions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDisplaySubdivisions()"
  },
  {
    "label": "SetDisplaySubdivisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplaySubdivisions(bool pDisplySubdivisions)"
  },
  {
    "label": "GetBoundaryRule()",
    "kind": "Method",
    "detail": "Function (EBoundaryRule)",
    "insertText": "GetBoundaryRule()"
  },
  {
    "label": "SetBoundaryRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoundaryRule(EBoundaryRule pBoundaryRule)"
  },
  {
    "label": "GetPreserveBorders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreserveBorders()"
  },
  {
    "label": "SetPreserveBorders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreserveBorders(bool pPreserveBorders)"
  },
  {
    "label": "GetPreserveHardEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreserveHardEdges()"
  },
  {
    "label": "SetPreserveHardEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreserveHardEdges(bool pPreserveHardEdges)"
  },
  {
    "label": "GetPropagateEdgeHardness()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropagateEdgeHardness()"
  },
  {
    "label": "SetPropagateEdgeHardness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPropagateEdgeHardness(bool pPropagateEdgeHardness)"
  },
  {
    "label": "GetPolyHoleInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyHoleInfo(int pFaceIndex)"
  },
  {
    "label": "GetPolyHoleInfoArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPolyHoleInfoArray(FbxLayerElementArrayTemplate<bool>** pHoleArray)"
  },
  {
    "label": "SetPolyHoleInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPolyHoleInfo(int pFaceIndex, bool pIsHole)"
  },
  {
    "label": "SetPolyHoleInfoArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPolyHoleInfoArray(FbxArray<bool>* pHoleArray)"
  },
  {
    "label": "GenerateTangentsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateTangentsData(const char* pUVSetName=NULL, bool pOverwrite=false, bool pIgnoreTangentFlip = false)"
  },
  {
    "label": "GenerateTangentsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateTangentsData(int pUVSetLayerIndex, bool pOverwrite=false, bool pIgnoreTangentFlip = false)"
  },
  {
    "label": "GenerateTangentsDataForAllUVSets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateTangentsDataForAllUVSets(bool pOverwrite=false, bool pIgnoreTangentFlip=false)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS FbxObject&)",
    "insertText": "Copy(const FbxObject& pObject)"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact()"
  },
  {
    "label": "GetDataCount()",
    "kind": "Method",
    "detail": "Function (struct PolygonDef { int mIndex ; int mSize ; int mGroup ; } ; FbxArray<PolygonDef> mPolygons ; FbxArray<int> mPolygonVertices ; FbxArray<int> mEdgeArray ; FbxArray<PolygonDef>* mOriginalPolygons ; FbxArray<int>* mOriginalPolygonVertices ; int mOriginalControlPointsCount ; struct ComponentMap { FbxArray<int> mData ; FbxArray<int> mOffsets ; int)",
    "insertText": "GetDataCount(int pIndex)"
  },
  {
    "label": "ComputeComponentMaps()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "ComputeComponentMaps(ComponentMap& pEdgeToPolyMap, ComponentMap& pPolyToEdgeMap)"
  },
  {
    "label": "ControlPointToVerticesMap()",
    "kind": "Method",
    "detail": "Function (class FBXSDK_DLL ControlPointToVerticesMap { public :)",
    "insertText": "ControlPointToVerticesMap()"
  },
  {
    "label": "Valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Valid()"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(FbxMesh* pMesh)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCount()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(int pNbEntries)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "GetVerticesArray()",
    "kind": "Method",
    "detail": "Function (FbxArray<int>*)",
    "insertText": "GetVerticesArray(int pControlPoint)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxArray<int>*)",
    "insertText": "operator(int pControlPoint)"
  },
  {
    "label": "ComputeControlPointToVerticesMap()",
    "kind": "Method",
    "detail": "Function (private : FbxArray<FbxArray<int>*> mMap ; } ; void)",
    "insertText": "ComputeControlPointToVerticesMap(ControlPointToVerticesMap& pMap)"
  },
  {
    "label": "ConformNormalsTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConformNormalsTo(const FbxMesh* pMesh)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(bool pRecursive)"
  },
  {
    "label": "ContentClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContentClear()"
  },
  {
    "label": "InitTextureIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitTextureIndices(FbxLayerElementTexture* pLayerElementTexture, FbxLayerElement::EMappingMode pMappingMode)"
  },
  {
    "label": "RemoveTextureIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTextureIndex(FbxLayerElementTexture* pLayerElementTextures, int pPolygonIndex, int pOffset)"
  },
  {
    "label": "RemoveUVIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUVIndex(FbxLayerElementUV* pLayerElementUV, int pPolygonIndex, int pOffset)"
  },
  {
    "label": "GetBadPolyIndices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBadPolyIndices(FbxArray<int>& pArrayBadPolyIndices, bool pCheckOne)"
  },
  {
    "label": "FindPolygonIndex()",
    "kind": "Method",
    "detail": "Function (struct SplitEdgeData { int mOriginalEdge ; bool mIsNew ; } ; ESmoothness mSmoothness ; int mPreviewDivisionLevels ; int mRenderDivisionLevels ; bool mDisplaySubdivisions ; EBoundaryRule mBoundaryRule ; bool mPreserveBorders ; bool mPreserveHardEdges ; bool mPropagateEdgeHardness ; struct PolygonIndexDef { int mPolygonIndex ; int mSubPolygonIndex ; } ; struct V2PVMap { PolygonIndexDef* mV2PV ; int* mV2PVOffset ; int* mV2PVCount ; FbxArray<FbxSet<int>*> mPVEdge ; bool mValid ; FbxArray<int> mV2Edge ; } mV2PVMap ; struct EdgeLookupDef { FbxArray<int> mPVFlags ; bool mValid ; } mPVEndFlags ; int)",
    "insertText": "FindPolygonIndex(int pEdgeIndex)"
  },
  {
    "label": "PolygonIndexCompare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PolygonIndexCompare(const void* p1, const void* p2)"
  },
  {
    "label": "PolySetTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PolySetTexture(FbxLayer* pLayer, int pTextureIndex, FbxLayerElement::EType pTextureType)"
  },
  {
    "label": "GetPolygonVertexLayerElementIndex()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "GetPolygonVertexLayerElementIndex(const FbxLayerElementTemplate<T>* pLayerElement, int pPolyIndex, int pVertexIndex, int& pIndex)"
  },
  {
    "label": "GetPolygonVertexLayerElementValue()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "GetPolygonVertexLayerElementValue(const FbxLayerElementTemplate<T>* pLayerElement, int pPolyIndex, int pVertexIndex, T& pValue, bool pAllowUnmapped)"
  },
  {
    "label": "GenerateTangentsData()",
    "kind": "Method",
    "detail": "Function (class FbxGeometryConverter ; private : bool)",
    "insertText": "GenerateTangentsData(FbxLayerElementUV* pUVSet, int pLayerIndex, bool pOverwrite=false, bool pIgnoreTangentFlip = false)"
  },
  {
    "label": "FillMeshEdgeTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillMeshEdgeTable(FbxArray<int>& pTable, int* pValue, void (*FillFct)(FbxArray<int>& pTable, int pIndex, int* pValue))"
  },
  {
    "label": "ComputeNormalsPerCtrlPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNormalsPerCtrlPoint(FbxArray<VertexNormalInfo>& lNormalInfo, bool pCW=false)"
  },
  {
    "label": "ComputeNormalsPerPolygonVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNormalsPerPolygonVertex(FbxArray<VertexNormalInfo>& lNormalInfo, bool pCW=false)"
  },
  {
    "label": "GenerateNormalsByCtrlPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateNormalsByCtrlPoint(bool pCW)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetIndex(int index, int capacity)"
  }
]