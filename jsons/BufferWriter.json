[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBufferWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferWriter"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / NumericLimits . h \" # include \" Serialization / Archive . h \" # include \" Containers / UnrealString . h \" # include \" Logging / LogMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" CoreGlobals . h \" enum class EBufferWriterFlags : uint8 { None = 0 x0,TakeOwnership = 0 x1,AllowResize = 0 x2,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EBufferWriterFlags)"
  },
  {
    "label": "FBufferWriter()",
    "kind": "Method",
    "detail": "Function (class FBufferWriter final : public FArchive { public :)",
    "insertText": "FBufferWriter(void* Data, int64 Size, EBufferWriterFlags InFlags = EBufferWriterFlags::None) : WriterData(Data) , WriterPos(0) , WriterSize(Size) , bFreeOnClose((InFlags & EBufferWriterFlags::TakeOwnership) != EBufferWriterFlags::None) , bAllowResize((InFlags & EBufferWriterFlags::AllowResize) != EBufferWriterFlags::None)"
  },
  {
    "label": "SetIsSaving()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsSaving(true)"
  },
  {
    "label": "FBufferWriter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FBufferWriter()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(WriterData)"
  },
  {
    "label": "IsError()",
    "kind": "Method",
    "detail": "Function (WriterData = nullptr ; } return !)",
    "insertText": "IsError()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(void* Data, int64 Num)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int64 NumBytesToAdd = WriterPos + Num - WriterSize ;)",
    "insertText": "if(NumBytesToAdd > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int64 NewArrayCount = WriterSize + NumBytesToAdd ;)",
    "insertText": "if(NewArrayCount >= MAX_int32)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (} WriterData =)",
    "insertText": "Realloc(WriterData, NewArrayCount)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (WriterSize = NewArrayCount ; } else {)",
    "insertText": "UE_LOG(LogSerialization, Fatal, TEXT(\"FBufferWriter overflowed. Archive name: %s.\"), *GetArchiveName())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "check(WriterPos >= 0)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy((uint8*)WriterData + WriterPos, Data, Num)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (WriterPos + = Num ; } int64)",
    "insertText": "Tell()"
  },
  {
    "label": "AtEnd()",
    "kind": "Method",
    "detail": "Function (WriterPos = InPos ; } bool)",
    "insertText": "AtEnd()"
  },
  {
    "label": "GetWriterData()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetWriterData()"
  }
]