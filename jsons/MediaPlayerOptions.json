[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaPlayerTrackOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaPlayerTrackOptions"
  },
  {
    "label": "FMediaPlayerOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaPlayerOptions"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ScriptMacros . h \" # include \" Containers / Map . h \" # include \" Misc / Variant . h \" # include \" MediaPlayerOptions . generated . h \")",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (UseMediaPlayerDefaults)",
    "insertText": "UMETA(DisplayName=\"Media player selects default tracks\"), UseTrackOptionIndices UMETA(DisplayName=\"Uses provided track indices\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMediaPlayerTrackOptions() : Audio(0), Caption(-1), Metadata(-1), Script(-1), Subtitle(-1), Text(-1), Video(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMediaPlayerTrackOptions& Other)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMediaPlayerOptions() : TrackSelection(EMediaPlayerOptionTrackSelectMode::UseTrackOptionIndices), SeekTime(0), SeekTimeType(EMediaPlayerOptionSeekTimeType::RelativeToStartTime), PlayOnOpen(EMediaPlayerOptionBooleanOverride::UseMediaPlayerSetting), Loop(EMediaPlayerOptionBooleanOverride::UseMediaPlayerSetting)"
  },
  {
    "label": "SetAllAsOptional()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllAsOptional()"
  },
  {
    "label": "MinValue()",
    "kind": "Method",
    "detail": "Function (SeekTime =)",
    "insertText": "MinValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TrackSelection = EMediaPlayerOptionTrackSelectMode::UseMediaPlayerDefaults ; SeekTimeType = EMediaPlayerOptionSeekTimeType::Ignored ; PlayOnOpen = EMediaPlayerOptionBooleanOverride::UseMediaPlayerSetting ; Loop = EMediaPlayerOptionBooleanOverride::UseMediaPlayerSetting ; } bool)",
    "insertText": "operator(const FMediaPlayerOptions& Other)"
  },
  {
    "label": "Environment()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FVariant> InternalCustomOptions ; } ; namespace MediaPlayerOptionValues { const FName&)",
    "insertText": "Environment()"
  },
  {
    "label": "OptName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "OptName(TEXT(\"Environment\"))"
  },
  {
    "label": "OptName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "OptName(TEXT(\"Sequencer\"))"
  },
  {
    "label": "OptName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "OptName(TEXT(\"Preview\"))"
  },
  {
    "label": "OptName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "OptName(TEXT(\"ImgMediaSmartCacheEnabled\"))"
  },
  {
    "label": "OptName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "OptName(TEXT(\"ImgMediaSmartCacheTimeToLookAhead\"))"
  },
  {
    "label": "OptName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "OptName(TEXT(\"ParseTimecodeInfo\"))"
  }
]