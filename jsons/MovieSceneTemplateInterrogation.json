[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FMovieSceneBlendingAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBlendingAccumulator"
  },
  {
    "label": "FMovieSceneContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneContext"
  },
  {
    "label": "TMovieSceneInterrogationIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneInterrogationIterator"
  },
  {
    "label": "FMovieSceneInterrogationKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneInterrogationKey"
  },
  {
    "label": "IMovieSceneInterrogationToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieSceneInterrogationToken"
  },
  {
    "label": "TMovieSceneInterrogationToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneInterrogationToken"
  },
  {
    "label": "FMovieSceneInterrogationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneInterrogationData"
  },
  {
    "label": "FMovieSceneInterrogationKey()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Evaluation / MovieSceneAnimTypeID . h \" # include \" HAL / Platform . h \" # include \" Misc / InlineValue . h \" # include \" Misc / Optional . h \" # include \" Templates / Decay . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" class UObject ; struct FMovieSceneBlendingAccumulator ; struct FMovieSceneContext ; template<T> struct TMovieSceneInterrogationIterator ; struct FMovieSceneInterrogationKey { FMovieSceneAnimTypeID AnimTypeID ;)",
    "insertText": "FMovieSceneInterrogationKey(FMovieSceneAnimTypeID InAnimTypeID) : AnimTypeID(InAnimTypeID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FMovieSceneInterrogationKey A, FMovieSceneInterrogationKey B)"
  },
  {
    "label": "IMovieSceneInterrogationToken()",
    "kind": "Method",
    "detail": "Function (} ; struct IMovieSceneInterrogationToken { FMovieSceneInterrogationKey Key ;)",
    "insertText": "IMovieSceneInterrogationToken(FMovieSceneInterrogationKey InKey) : Key(InKey)"
  },
  {
    "label": "TMovieSceneInterrogationToken()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TMovieSceneInterrogationToken : IMovieSceneInterrogationToken { T Data ; template<U>)",
    "insertText": "TMovieSceneInterrogationToken(U&& In, FMovieSceneInterrogationKey InKey) : IMovieSceneInterrogationToken(InKey) , Data(Forward<U>(In))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMovieSceneInterrogationData { template<T> void)",
    "insertText": "Add(T&& InData, FMovieSceneInterrogationKey Key)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TokenData .)",
    "insertText": "Add(TMovieSceneInterrogationToken<typename TDecay<T>::Type>(Forward<T>(InData), Key))"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (} TArray<TInlineValue<IMovieSceneInterrogationToken>>::TConstIterator)",
    "insertText": "Iterate()"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (} template<T> TMovieSceneInterrogationIterator<T>)",
    "insertText": "Iterate(FMovieSceneInterrogationKey Key)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Finalize(const FMovieSceneContext& Context, UObject* BindingOverride)"
  },
  {
    "label": "GetAccumulator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneBlendingAccumulator&)",
    "insertText": "GetAccumulator()"
  },
  {
    "label": "TMovieSceneInterrogationIterator()",
    "kind": "Method",
    "detail": "Function (private : template<T> struct TMovieSceneInterrogationIterator ; TArray<TInlineValue<IMovieSceneInterrogationToken>> TokenData ; TSharedPtr<FMovieSceneBlendingAccumulator> Accumulator ; } ; template<DataType> struct TMovieSceneInterrogationIterator {)",
    "insertText": "TMovieSceneInterrogationIterator(const FMovieSceneInterrogationData& InContainer, FMovieSceneInterrogationKey InPredicateKey) : Container(InContainer) , PredicateKey(InPredicateKey) , Index(-1)"
  },
  {
    "label": "NextElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NextElement()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMovieSceneInterrogationIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TMovieSceneInterrogationIterator& LHS, const TMovieSceneInterrogationIterator& RHS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(!Container.TokenData.IsValidIndex(Index))"
  }
]