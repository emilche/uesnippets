[
  {
    "label": "FVulkanCommandBufferManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandBufferManager"
  },
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDynamicRHI"
  },
  {
    "label": "FVulkanOcclusionQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanOcclusionQueryPool"
  },
  {
    "label": "FVulkanPendingGfxState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPendingGfxState"
  },
  {
    "label": "FVulkanPendingComputeState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPendingComputeState"
  },
  {
    "label": "FVulkanQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanQueue"
  },
  {
    "label": "FVulkanSwapChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanSwapChain"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "ShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderType"
  },
  {
    "label": "FVulkanCommandContextContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanCommandContextContainer"
  },
  {
    "label": "FVulkanCommandListContextImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContextImmediate"
  },
  {
    "label": "FVulkanContextArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanContextArray"
  },
  {
    "label": "FVulkanCommandListContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VulkanResources . h \" # include \" VulkanRHIPrivate . h \" # include \" VulkanGPUProfiler . h \" class FVulkanCommandBufferManager ; class FVulkanDevice ; class FVulkanDynamicRHI ; class FVulkanOcclusionQueryPool ; class FVulkanPendingGfxState ; class FVulkanPendingComputeState ; class FVulkanQueue ; class FVulkanSwapChain ; class FVulkanCommandListContext : public IRHICommandContext { public :)",
    "insertText": "FVulkanCommandListContext(FVulkanDynamicRHI* InRHI, FVulkanDevice* InDevice, FVulkanQueue* InQueue, FVulkanCommandListContext* InImmediate)"
  },
  {
    "label": "FVulkanCommandListContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanCommandListContext()"
  },
  {
    "label": "GetVulkanContext()",
    "kind": "Method",
    "detail": "Function (FVulkanCommandListContext&)",
    "insertText": "GetVulkanContext(IRHICommandContext& CmdContext)"
  },
  {
    "label": "IsImmediate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsImmediate()"
  },
  {
    "label": "CommitGraphicsResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitGraphicsResourceTables()"
  },
  {
    "label": "CommitComputeResourceTables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitComputeResourceTables()"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "RHISetStereoViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStereoViewport(float LeftMinX, float RightMinX, float LeftMinY, float RightMinY, float MinZ, float LeftMaxX, float RightMaxX, float LeftMaxY, float RightMaxY, float MaxZ)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "RHISetGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetGraphicsPipelineState(FRHIGraphicsPipelineState* GraphicsState, uint32 StencilRef, bool bApplyAdditionalState)"
  },
  {
    "label": "RHISetShaderTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderTexture(FRHIGraphicsShader* Shader, uint32 TextureIndex, FRHITexture* NewTexture)"
  },
  {
    "label": "RHISetShaderTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderTexture(FRHIComputeShader* PixelShader, uint32 TextureIndex, FRHITexture* NewTexture)"
  },
  {
    "label": "RHISetShaderSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderSampler(FRHIComputeShader* ComputeShader, uint32 SamplerIndex, FRHISamplerState* NewState)"
  },
  {
    "label": "RHISetShaderSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderSampler(FRHIGraphicsShader* Shader, uint32 SamplerIndex, FRHISamplerState* NewState)"
  },
  {
    "label": "RHISetUAVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetUAVParameter(FRHIPixelShader* PixelShader, uint32 UAVIndex, FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "RHISetUAVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetUAVParameter(FRHIComputeShader* ComputeShader, uint32 UAVIndex, FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "RHISetUAVParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetUAVParameter(FRHIComputeShader* ComputeShader, uint32 UAVIndex, FRHIUnorderedAccessView* UAV, uint32 InitialCount)"
  },
  {
    "label": "RHISetShaderResourceViewParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderResourceViewParameter(FRHIGraphicsShader* Shader, uint32 SamplerIndex, FRHIShaderResourceView* SRV)"
  },
  {
    "label": "RHISetShaderResourceViewParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderResourceViewParameter(FRHIComputeShader* ComputeShader, uint32 SamplerIndex, FRHIShaderResourceView* SRV)"
  },
  {
    "label": "RHISetStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStaticUniformBuffers(const FUniformBufferStaticBindings& InUniformBuffers)"
  },
  {
    "label": "RHISetStaticUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStaticUniformBuffer(FUniformBufferStaticSlot Slot, FRHIUniformBuffer* Buffer)"
  },
  {
    "label": "RHISetUniformBufferDynamicOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetUniformBufferDynamicOffset(FUniformBufferStaticSlot Slot, uint32 InOffset)"
  },
  {
    "label": "RHISetShaderUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderUniformBuffer(FRHIGraphicsShader* Shader, uint32 BufferIndex, FRHIUniformBuffer* Buffer)"
  },
  {
    "label": "RHISetShaderUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderUniformBuffer(FRHIComputeShader* ComputeShader, uint32 BufferIndex, FRHIUniformBuffer* Buffer)"
  },
  {
    "label": "RHISetShaderParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameter(FRHIGraphicsShader* Shader, uint32 BufferIndex, uint32 BaseIndex, uint32 NumBytes, const void* NewValue)"
  },
  {
    "label": "RHISetShaderParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameter(FRHIComputeShader* ComputeShader, uint32 BufferIndex, uint32 BaseIndex, uint32 NumBytes, const void* NewValue)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIGraphicsShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetShaderParameters(FRHIComputeShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetStencilRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetStencilRef(uint32 StencilRef)"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedIndirect(FRHIBuffer* IndexBufferRHI, FRHIBuffer* ArgumentsBufferRHI, int32 DrawArgumentsIndex, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDispatchMeshShader()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_SUPPORTS_MESH_SHADERS void)",
    "insertText": "RHIDispatchMeshShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectMeshShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectMeshShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHISetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "RHIBeginBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (# if WITH_RHI_BREADCRUMBS void)",
    "insertText": "RHIBeginBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHISetComputePipelineState()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHISetComputePipelineState(FRHIComputePipelineState* ComputePipelineState)"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIDispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetMultipleViewports(uint32 Count, const FViewportBounds* Data)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTexture, FRHITexture* DestTexture, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyBufferRegion(FRHIBuffer* DstBuffer, uint64 DstOffset, FRHIBuffer* SrcBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHICopyToStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICopyToStagingBuffer(FRHIBuffer* SourceBuffer, FRHIStagingBuffer* DestinationStagingBuffer, uint32 Offset, uint32 NumBytes)"
  },
  {
    "label": "RHIWriteGPUFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIWriteGPUFence(FRHIGPUFence* Fence)"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0) virtual void RHICalibrateTimers(FRHITimestampCalibrationQuery* CalibrationQuery)"
  },
  {
    "label": "RHIBeginDrawingViewport()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "RHIBeginDrawingViewport(FRHIViewport* Viewport, FRHITexture* RenderTargetRHI)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "RHIEndRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderPass()"
  },
  {
    "label": "RHINextSubpass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHINextSubpass()"
  },
  {
    "label": "RHIClearRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHICommitRayTracingBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICommitRayTracingBindings(FRHIRayTracingScene* Scene)"
  },
  {
    "label": "RHIClearShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIClearShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "RHICommitShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICommitShaderBindingTable(FRHIShaderBindingTable* SBT)"
  },
  {
    "label": "RHIBindAccelerationStructureMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindAccelerationStructureMemory(FRHIRayTracingScene* Scene, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "RHIBuildAccelerationStructures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBuildAccelerationStructures(const TArrayView<const FRayTracingGeometryBuildParams> Params, const FRHIBufferRange& ScratchBufferRange)"
  },
  {
    "label": "RHIBuildAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBuildAccelerationStructure(const FRayTracingSceneBuildParams& SceneBuildParams)"
  },
  {
    "label": "RHIRayTraceDispatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRayTraceDispatch(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, uint32 Width, uint32 Height)"
  },
  {
    "label": "RHIRayTraceDispatchIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRayTraceDispatchIndirect(FRHIRayTracingPipelineState* RayTracingPipelineState, FRHIRayTracingShader* RayGenShader, FRHIShaderBindingTable* SBT, const FRayTracingShaderBindings& GlobalResourceBindings, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHISetBindingsOnShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHISetBindingsOnShaderBindingTable(FRHIShaderBindingTable* SBT, FRHIRayTracingPipelineState* Pipeline, uint32 NumBindings, const FRayTracingLocalShaderBindings* Bindings, ERayTracingBindingType BindingType)"
  },
  {
    "label": "GetCommandBufferManager()",
    "kind": "Method",
    "detail": "Function (FVulkanCommandBufferManager*)",
    "insertText": "GetCommandBufferManager()"
  },
  {
    "label": "NotifyDeletedImage()",
    "kind": "Method",
    "detail": "Function (CurrentFramebuffer = nullptr ; } } void)",
    "insertText": "NotifyDeletedImage(VkImage Image)"
  },
  {
    "label": "NotifyDeletedImage()",
    "kind": "Method",
    "detail": "Function (CommandBufferManager ->)",
    "insertText": "NotifyDeletedImage(Image)"
  },
  {
    "label": "GetCurrentRenderPass()",
    "kind": "Method",
    "detail": "Function (} FVulkanRenderPass*)",
    "insertText": "GetCurrentRenderPass()"
  },
  {
    "label": "WriteEndTimestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteEndTimestamp(FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0) void ReadAndCalculateGPUFrameTime()"
  },
  {
    "label": "GetGPUProfiler()",
    "kind": "Method",
    "detail": "Function (FVulkanGPUProfiler&)",
    "insertText": "GetGPUProfiler()"
  },
  {
    "label": "EndRenderQueryInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndRenderQueryInternal(FVulkanCmdBuffer* CmdBuffer, FVulkanRenderQuery* Query)"
  },
  {
    "label": "ReleasePendingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePendingState()"
  },
  {
    "label": "BeginOcclusionQueryBatch()",
    "kind": "Method",
    "detail": "Function (protected : FVulkanDynamicRHI* RHI ; FVulkanCommandListContext* Immediate ; FVulkanDevice* Device ; FVulkanQueue* Queue ; bool bSubmitAtNextSafePoint ; bool bUniformBufferUploadRenderPassDirty = true ; void)",
    "insertText": "BeginOcclusionQueryBatch(FVulkanCmdBuffer* CmdBuffer, uint32 NumQueriesInBatch)"
  },
  {
    "label": "EndOcclusionQueryBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndOcclusionQueryBatch(FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "PrepareForCPURead()",
    "kind": "Method",
    "detail": "Function (VulkanRHI::FTempBlockAllocator* TempBlockAllocator = nullptr ; TArray<FString> EventStack ; FVulkanCommandBufferManager* CommandBufferManager ; FVulkanRenderPass* CurrentRenderPass = nullptr ; FVulkanFramebuffer* CurrentFramebuffer = nullptr ; FVulkanOcclusionQueryPool* CurrentOcclusionQueryPool = nullptr ; FVulkanPendingGfxState* PendingGfxState ; FVulkanPendingComputeState* PendingComputeState ; enum { MAX_UNIFORM_BUFFERS_PER_SHADER_STAGE = 1 6 } ; FVulkanUniformBuffer* BoundUniformBuffers [ SF_NumStandardFrequencies ] [ MAX_UNIFORM_BUFFERS_PER_SHADER_STAGE ] = { } ; uint16 DirtyUniformBuffers [ SF_NumStandardFrequencies ] = { } ; void)",
    "insertText": "PrepareForCPURead()"
  },
  {
    "label": "RequestSubmitCurrentCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSubmitCurrentCommands()"
  },
  {
    "label": "InternalClearMRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalClearMRT(FVulkanCmdBuffer* CmdBuffer, bool bClearColor, int32 NumClearColors, const FLinearColor* ColorArray, bool bClearDepth, float Depth, bool bClearStencil, uint32 Stencil)"
  },
  {
    "label": "IsSwapchainImage()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsSwapchainImage(FRHITexture* InTexture)"
  },
  {
    "label": "GetSwapchainImageFormat()",
    "kind": "Method",
    "detail": "Function (VkFormat)",
    "insertText": "GetSwapchainImageFormat()"
  },
  {
    "label": "GetSwapChain()",
    "kind": "Method",
    "detail": "Function (FVulkanSwapChain*)",
    "insertText": "GetSwapChain()"
  },
  {
    "label": "PrepareRenderPassForPSOCreation()",
    "kind": "Method",
    "detail": "Function (FVulkanRenderPass*)",
    "insertText": "PrepareRenderPassForPSOCreation(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "PrepareRenderPassForPSOCreation()",
    "kind": "Method",
    "detail": "Function (FVulkanRenderPass*)",
    "insertText": "PrepareRenderPassForPSOCreation(const FVulkanRenderTargetLayout& Initializer)"
  },
  {
    "label": "RHIClearMRT()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RHIClearMRT(bool bClearColor, int32 NumClearColors, const FLinearColor* ColorArray, bool bClearDepth, float Depth, bool bClearStencil, uint32 Stencil)"
  },
  {
    "label": "SafePointSubmit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SafePointSubmit()"
  },
  {
    "label": "InternalSubmitActiveCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalSubmitActiveCmdBuffer()"
  },
  {
    "label": "RegisterGPUWork()",
    "kind": "Method",
    "detail": "Function (class FVulkanDevice ; class FVulkanDynamicRHI ; uint64 FrameCounter ; # if RHI_NEW_GPU_PROFILER void)",
    "insertText": "RegisterGPUWork(uint32 NumPrimitives = 0, uint32 NumVertices = 0)"
  },
  {
    "label": "RegisterGPUDispatch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterGPUDispatch(FIntVector GroupCount)"
  },
  {
    "label": "RegisterGPUWork()",
    "kind": "Method",
    "detail": "Function (GpuProfiler .)",
    "insertText": "RegisterGPUWork(NumPrimitives, NumVertices)"
  },
  {
    "label": "RegisterGPUDispatch()",
    "kind": "Method",
    "detail": "Function (GpuProfiler .)",
    "insertText": "RegisterGPUDispatch(GroupCount)"
  },
  {
    "label": "ApplyStaticUniformBuffers()",
    "kind": "Method",
    "detail": "Function (} FVulkanGPUProfiler GpuProfiler ; FVulkanGPUTiming* FrameTiming ; # endif template<TRHIShader> void)",
    "insertText": "ApplyStaticUniformBuffers(TRHIShader* Shader)"
  },
  {
    "label": "FVulkanCommandListContextImmediate()",
    "kind": "Method",
    "detail": "Function (TArray<FRHIUniformBuffer*> GlobalUniformBuffers ; struct FVulkanCommandContextContainer ; } ; class FVulkanCommandListContextImmediate : public FVulkanCommandListContext { public :)",
    "insertText": "FVulkanCommandListContextImmediate(FVulkanDynamicRHI* InRHI, FVulkanDevice* InDevice, FVulkanQueue* InQueue)"
  },
  {
    "label": "FVulkanCommandContextContainer()",
    "kind": "Method",
    "detail": "Function (} ; # if 0 struct FVulkanCommandContextContainer : public IRHICommandContextContainer,public VulkanRHI::FDeviceChild { FVulkanCommandListContext* CmdContext ;)",
    "insertText": "FVulkanCommandContextContainer(FVulkanDevice* InDevice)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (IRHICommandContext*)",
    "insertText": "GetContext()"
  },
  {
    "label": "FinishContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishContext()"
  },
  {
    "label": "SubmitAndFreeContextContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitAndFreeContextContainer(int32 Index, int32 Num)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void* RawMemory)"
  },
  {
    "label": "FVulkanContextArray()",
    "kind": "Method",
    "detail": "Function (private : class FVulkanDevice ; } ; # endif struct FVulkanContextArray : public TRHIPipelineArray<FVulkanCommandListContext*> {)",
    "insertText": "FVulkanContextArray(FRHIContextArray const& Contexts) : TRHIPipelineArray(InPlace, nullptr)"
  },
  {
    "label": "Pipeline()",
    "kind": "Method",
    "detail": "Function (IRHIComputeContext* Context = Contexts [)",
    "insertText": "Pipeline(*this)[Pipeline] = Context ? static_cast<FVulkanCommandListContext*>(&Context->GetLowestLevelContext())"
  }
]