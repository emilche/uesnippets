[
  {
    "label": "IMessageLogListing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageLogListing"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "FMessageFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageFilter"
  },
  {
    "label": "IMessageToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageToken"
  },
  {
    "label": "ClearMessages()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Logging / TokenizedMessage . h \" # include \" Logging / IMessageLog . h \" class IMessageLogListing ; typedef TSharedPtr<class IMessageLogListing> IMessageLogListingPtr ; typedef TSharedRef<class IMessageLogListing> IMessageLogListingRef ; class IMessageLogListing : public IMessageLog { public : void)",
    "insertText": "ClearMessages()"
  },
  {
    "label": "GetSelectedMessages()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<class FTokenizedMessage>>&)",
    "insertText": "GetSelectedMessages()"
  },
  {
    "label": "SelectMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectMessages(const TArray< TSharedRef<class FTokenizedMessage> >& InSelectedMessages)"
  },
  {
    "label": "GetFilteredMessages()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<class FTokenizedMessage>>&)",
    "insertText": "GetFilteredMessages()"
  },
  {
    "label": "SelectMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectMessage(const TSharedRef<class FTokenizedMessage>& Message, bool bSelected)"
  },
  {
    "label": "IsMessageSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMessageSelected(const TSharedRef<class FTokenizedMessage>& Message)"
  },
  {
    "label": "ClearSelectedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedMessages()"
  },
  {
    "label": "InvertSelectedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvertSelectedMessages()"
  },
  {
    "label": "GetSelectedMessagesAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSelectedMessagesAsString()"
  },
  {
    "label": "GetAllMessagesAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAllMessagesAsString()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLabel(const FText& InLogLabel)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetMessageFilters()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<class FMessageFilter>>&)",
    "insertText": "GetMessageFilters()"
  },
  {
    "label": "ExecuteToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteToken(const TSharedRef<class IMessageToken>& Token)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(IMessageLogListing, IMessageTokenClickedEvent, const TSharedRef<class IMessageToken>&)"
  },
  {
    "label": "OnMessageTokenClicked()",
    "kind": "Method",
    "detail": "Function (IMessageTokenClickedEvent&)",
    "insertText": "OnMessageTokenClicked()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IMessageLogListing, FChangedEvent ) virtual FChangedEvent& OnDataChanged()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IMessageLogListing, FOnSelectionChangedEvent ) virtual FOnSelectionChangedEvent& OnSelectionChanged()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IMessageLogListing, FOnPageSelectionChangedEvent ) virtual FOnPageSelectionChangedEvent& OnPageSelectionChanged()"
  }
]