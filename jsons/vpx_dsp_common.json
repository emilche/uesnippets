[
  {
    "label": "VPXMIN()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_VPX_DSP_COMMON_H_ # define VPX_VPX_DSP_VPX_DSP_COMMON_H_ # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_ports / mem . h \" # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "VPXMIN(x, y) (((x) < (y)) ? (x) : (y)) #define VPXMAX(x, y) (((x) > (y)) ? (x) : (y)) #define VPX_SWAP(type, a, b)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (\\ type)",
    "insertText": "c(b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0)"
  },
  {
    "label": "clip_pixel()",
    "kind": "Method",
    "detail": "Function (typedef int32_t tran_low_t ; # else typedef int32_t tran_high_t ; typedef int16_t tran_low_t ; # endif typedef int16_t tran_coef_t ; uint8_t)",
    "insertText": "clip_pixel(int val)"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "clamp(int value, int low, int high)"
  },
  {
    "label": "fclamp()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "fclamp(double value, double low, double high)"
  },
  {
    "label": "lclamp()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "lclamp(int64_t value, int64_t low, int64_t high)"
  },
  {
    "label": "clip_pixel_highbd()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "clip_pixel_highbd(int val, int bd)"
  }
]