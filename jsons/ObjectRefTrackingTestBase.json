[
  {
    "label": "FObjectRefTrackingTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectRefTrackingTestBase"
  },
  {
    "label": "FSnapshotObjectRefMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSnapshotObjectRefMetrics"
  },
  {
    "label": "MakeUnresolvedHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_LOW_LEVEL_TESTS # include \" TestHarness . h \" # include \" CoreMinimal . h \" # include \" UObject / ObjectHandle . h \" # include \" Misc / ScopeLock . h \" # if UE_WITH_OBJECT_HANDLE_LATE_RESOLVE FObjectHandle)",
    "insertText": "MakeUnresolvedHandle(const UObject* Obj)"
  },
  {
    "label": "MakePackedObjectRef()",
    "kind": "Method",
    "detail": "Function (UE::CoreUObject::Private::FPackedObjectRef PackedObjectRef = UE::CoreUObject::)",
    "insertText": "MakePackedObjectRef(Obj)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const auto* N = NumReadsPerObject .)",
    "insertText": "Find(Obj)"
  },
  {
    "label": "InstallCallbacks()",
    "kind": "Method",
    "detail": "Function (Test .)",
    "insertText": "InstallCallbacks()"
  },
  {
    "label": "FSnapshotObjectRefMetrics()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSnapshotObjectRefMetrics()"
  },
  {
    "label": "RemoveCallbacks()",
    "kind": "Method",
    "detail": "Function (Test .)",
    "insertText": "RemoveCallbacks()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Test . NumReadsPerObject .)",
    "insertText": "Empty()"
  },
  {
    "label": "TestNumResolves()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TestNumResolves(const TCHAR* What, uint32 ExpectedDelta)"
  },
  {
    "label": "TEST_EQUAL()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_OBJECT_HANDLE_TRACKING)",
    "insertText": "TEST_EQUAL(What, OriginalNumResolves + ExpectedDelta, Test.GetNumResolves())"
  },
  {
    "label": "TestNumFailedResolves()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "TestNumFailedResolves(const TCHAR* What, uint32 ExpectedDelta)"
  },
  {
    "label": "TEST_EQUAL()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_OBJECT_HANDLE_TRACKING)",
    "insertText": "TEST_EQUAL(What, OriginalNumFailedResolves + ExpectedDelta, Test.GetNumFailedResolves())"
  },
  {
    "label": "TestNumReads()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "TestNumReads(const TCHAR* What, uint32 ExpectedDelta, bool bAllowAdditionalReads = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_OBJECT_HANDLE_TRACKING bool bValue = false ;)",
    "insertText": "if(bAllowAdditionalReads)"
  },
  {
    "label": "INFO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "INFO(What)"
  },
  {
    "label": "GetNumReads()",
    "kind": "Method",
    "detail": "Function (} else { bValue = OriginalNumReads + ExpectedDelta = = Test .)",
    "insertText": "GetNumReads()"
  },
  {
    "label": "TEST_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TEST_TRUE(What, bValue)"
  },
  {
    "label": "TestNumReads()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "TestNumReads(const TCHAR* What, const UObject* const Obj, uint32 ExpectedDelta, bool bAllowAdditionalReads = false)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} else { bValue = OriginalNumReadsPerObject .)",
    "insertText": "FindOrAdd(Obj, 0) + ExpectedDelta == Test.GetNumReads(Obj)"
  },
  {
    "label": "OnRefResolved()",
    "kind": "Method",
    "detail": "Function (} # endif } private : FObjectRefTrackingTestBase& Test ; uint32 OriginalNumResolves ; uint32 OriginalNumFailedResolves ; uint32 OriginalNumReads ; TMap<const UObject* const,uint32> OriginalNumReadsPerObject ; } ; private : # if UE_WITH_OBJECT_HANDLE_TRACKING void)",
    "insertText": "OnRefResolved(const FObjectRef& ObjectRef, UPackage* Pkg, UObject* Obj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumResolves + + ;)",
    "insertText": "if(!ObjectRef.IsNull() && !Obj)"
  },
  {
    "label": "OnRefRead()",
    "kind": "Method",
    "detail": "Function (NumFailedResolves + + ; } } void)",
    "insertText": "OnRefRead(const TArrayView<const UObject* const>& Objects)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (NumReads + + ;)",
    "insertText": "for(auto Obj : Objects)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (+ + NumReadsPerObject .)",
    "insertText": "FindOrAdd(Obj, 0)"
  },
  {
    "label": "AddObjectHandleReferenceResolvedCallback()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_OBJECT_HANDLE_TRACKING ResolvedCallbackHandle = UE::)",
    "insertText": "AddObjectHandleReferenceResolvedCallback(OnRefResolved)"
  },
  {
    "label": "AddObjectHandleReadCallback()",
    "kind": "Method",
    "detail": "Function (HandleReadCallbackHandle = UE::)",
    "insertText": "AddObjectHandleReadCallback(OnRefRead)"
  },
  {
    "label": "RemoveObjectHandleReferenceResolvedCallback()",
    "kind": "Method",
    "detail": "Function (# if UE_WITH_OBJECT_HANDLE_TRACKING UE::)",
    "insertText": "RemoveObjectHandleReferenceResolvedCallback(ResolvedCallbackHandle)"
  },
  {
    "label": "RemoveObjectHandleReadCallback()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "RemoveObjectHandleReadCallback(HandleReadCallbackHandle)"
  }
]