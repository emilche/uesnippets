[
  {
    "label": "ULandscapeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeInfo"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "FPointifyFalloffs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointifyFalloffs"
  },
  {
    "label": "FixSelfIntersection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" LandscapeSplineSegment . h \" class ULandscapeInfo ; class ULandscapeLayerInfoObject ; namespace LandscapeSplineRaster { # if WITH_EDITOR bool)",
    "insertText": "FixSelfIntersection(TArray<FLandscapeSplineInterpPoint>& Points, FVector FLandscapeSplineInterpPoint::* Side)"
  },
  {
    "label": "FPointifyFalloffs()",
    "kind": "Method",
    "detail": "Function (struct FPointifyFalloffs {)",
    "insertText": "FPointifyFalloffs(float StartFalloff, float EndFalloff) : StartLeftSide(StartFalloff) , EndLeftSide(EndFalloff) , StartRightSide(StartFalloff) , EndRightSide(EndFalloff) , StartLeftSideLayer(StartFalloff) , EndLeftSideLayer(EndFalloff) , StartRightSideLayer(StartFalloff) , EndRightSideLayer(EndFalloff)"
  },
  {
    "label": "FPointifyFalloffs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPointifyFalloffs() : FPointifyFalloffs(0.0f, 0.0f)"
  },
  {
    "label": "Pointify()",
    "kind": "Method",
    "detail": "Function (} float StartLeftSide ; float EndLeftSide ; float StartRightSide ; float EndRightSide ; float StartLeftSideLayer ; float EndLeftSideLayer ; float StartRightSideLayer ; float EndRightSideLayer ; } ; void)",
    "insertText": "Pointify(const FInterpCurveVector& SplineInfo, TArray<FLandscapeSplineInterpPoint>& OutPoints, int32 NumSubdivisions, float StartFalloffFraction, float EndFalloffFraction, const float StartWidth, const float EndWidth, const float StartLayerWidth, const float EndLayerWidth, const FPointifyFalloffs& Falloffs, const float StartRollDegrees, const float EndRollDegrees)"
  },
  {
    "label": "RasterizeSegmentPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RasterizeSegmentPoints(ULandscapeInfo* LandscapeInfo, TArray<FLandscapeSplineInterpPoint> Points, const FTransform& SplineToWorld, bool bRaiseTerrain, bool bLowerTerrain, ULandscapeLayerInfoObject* LayerInfo)"
  }
]