[
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFrontendFilterExternalActivationHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrontendFilterExternalActivationHelper"
  },
  {
    "label": "SBasicFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBasicFilterBar"
  },
  {
    "label": "SFilterCheckBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterCheckBox"
  },
  {
    "label": "SFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilter"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Filters / FilterBase . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Input / SComboButton . h \" # include \" Textures / SlateIcon . h \" # include \" Widgets / Layout / SBorder . h \" # include \" ToolMenus . h \" # include \" Widgets / Images / SLayeredImage . h \" # include \" Widgets / SBoxPanel . h \" # include \" Misc / FilterCollection . h \" # include \" UObject / Object . h \" # include \" Misc / TextFilter . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / Layout / SWrapBox . h \" # include \" Widgets / Layout / SScrollBox . h \" # include \" Widgets / Layout / SWidgetSwitcher . h \" # include \" Filters / SCustomTextFilterDialog . h \" # include \" SSimpleButton . h \" # include \" Styling / StyleColors . h \" # include \" Filters / SFilterSearchBox . h \" # include \" Framework / Application / SlateApplication . h \" # include \" SBasicFilterBar . generated . h \" # define LOCTEXT_NAMESPACE \" FilterBar \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPopulateAddFilterMenu, UToolMenu*) DECLARE_DELEGATE_OneParam( FOnExtendAddFilterMenu, UToolMenu*)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (FOnExtendAddFilterMenu OnExtendAddFilterMenu ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (Default,Basic } ; template<FilterType> struct FFrontendFilterExternalActivationHelper ; template<FilterType> class SBasicFilterBar : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE(FOnFilterChanged)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(TSharedPtr<ICustomTextFilter<FilterType>>, FCreateTextFilter)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SBasicFilterBar<FilterType> ) : _FilterBarLayout(EFilterBarLayout::Horizontal) , _CanChangeOrientation(false) , _FilterPillStyle(EFilterPillStyle::Default) , _UseSectionsForCategories(false) , _bPinAllFrontendFilters(false)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnFilterChanged, OnFilterChanged ) SLATE_EVENT( FOnExtendAddFilterMenu, OnExtendAddFilterMenu ) SLATE_ARGUMENT( TArray<TSharedRef<FFilterBase<FilterType>>>, CustomFilters) SLATE_ARGUMENT(FCreateTextFilter, CreateTextFilter) SLATE_ARGUMENT(TSharedPtr<SFilterSearchBox>, FilterSearchBox) SLATE_ARGUMENT(EFilterBarLayout, FilterBarLayout) SLATE_ARGUMENT(bool, CanChangeOrientation) SLATE_ARGUMENT(EFilterPillStyle, FilterPillStyle) SLATE_ARGUMENT(bool, UseSectionsForCategories) SLATE_ARGUMENT(bool, bPinAllFrontendFilters) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (OnFilterChanged = InArgs . _OnFilterChanged ; OnExtendAddFilterMenu = InArgs . _OnExtendAddFilterMenu ; CreateTextFilter = InArgs . _CreateTextFilter ; FilterBarLayout = InArgs . _FilterBarLayout ; bCanChangeOrientation = InArgs . _CanChangeOrientation ; FilterPillStyle = InArgs . _FilterPillStyle ; bUseSectionsForCategories = InArgs . _UseSectionsForCategories ; bPinAllFrontendFilters = InArgs . _bPinAllFrontendFilters ; ChildSlot [)",
    "insertText": "SAssignNew(FilterBox, SWidgetSwitcher) + SWidgetSwitcher::Slot() [ SAssignNew(HorizontalFilterBox, SWrapBox) .UseAllottedSize(true) ] + SWidgetSwitcher::Slot() [ SAssignNew(VerticalFilterBox, SScrollBox) .Visibility_Lambda([this]() { return HasAnyFilters() ? EVisibility::Visible : EVisibility::Collapsed; })"
  },
  {
    "label": "SetActiveWidget()",
    "kind": "Method",
    "detail": "Function (FilterBox ->)",
    "insertText": "SetActiveWidget(HorizontalFilterBox.ToSharedRef())"
  },
  {
    "label": "SetActiveWidget()",
    "kind": "Method",
    "detail": "Function (} else { FilterBox ->)",
    "insertText": "SetActiveWidget(VerticalFilterBox.ToSharedRef())"
  },
  {
    "label": "AttachFilterSearchBox()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AttachFilterSearchBox(InArgs._FilterSearchBox)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (ActiveFilters =)",
    "insertText": "MakeShareable(new TFilterCollection<FilterType>())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(TSharedRef<FFilterBase<FilterType>> Filter : InArgs._CustomFilters)"
  },
  {
    "label": "AddFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFilter(Filter)"
  },
  {
    "label": "AddFilter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddFilter(TSharedRef<FFilterBase<FilterType>> InFilter)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllFrontendFilters .)",
    "insertText": "Add(InFilter)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (AllFilterCategories .)",
    "insertText": "AddUnique(Category)"
  },
  {
    "label": "BindToFilter()",
    "kind": "Method",
    "detail": "Function (} FFrontendFilterExternalActivationHelper<FilterType)",
    "insertText": "BindToFilter(SharedThis(this), InFilter)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontendFilterActive(InFilter, false)"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFilterToBar(InFilter)"
  },
  {
    "label": "GetFilterLayout()",
    "kind": "Method",
    "detail": "Function (} } EFilterBarLayout)",
    "insertText": "GetFilterLayout()"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (VerticalFilterBox ->)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(TSharedRef<SFilter> Filter: Filters)"
  },
  {
    "label": "AddWidgetToLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidgetToLayout(Filter)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "Invalidate(EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "MakeAddFilterButton()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "MakeAddFilterButton(TSharedRef<SBasicFilterBar<FilterType>> InFilterBar)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SLayeredImage> FilterImage =)",
    "insertText": "SNew(SLayeredImage) .Image(FAppStyle::Get().GetBrush(\"Icons.Filter\")) .ColorAndOpacity(FSlateColor::UseForeground())"
  },
  {
    "label": "AddLayer()",
    "kind": "Method",
    "detail": "Function (FilterImage ->)",
    "insertText": "AddLayer(TAttribute<const FSlateBrush*>(InFilterBar, &SBasicFilterBar<FilterType>::GetFilterBadgeIcon))"
  },
  {
    "label": "AttachFilterSearchBox()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AttachFilterSearchBox(TSharedPtr<SFilterSearchBox> InFilterSearchBox)"
  },
  {
    "label": "SetOnSaveSearchHandler()",
    "kind": "Method",
    "detail": "Function (InFilterSearchBox ->)",
    "insertText": "SetOnSaveSearchHandler(SFilterSearchBox::FOnSaveSearchClicked::CreateSP(this, &SBasicFilterBar<FilterType>::CreateCustomTextFilterFromSearch))"
  },
  {
    "label": "SetOnFilterCtrlClicked()",
    "kind": "Method",
    "detail": "Function (} } private : class SFilterCheckBox : public SCheckBox { public : void)",
    "insertText": "SetOnFilterCtrlClicked(const FOnClicked& NewFilterCtrlClicked)"
  },
  {
    "label": "SetOnFilterAltClicked()",
    "kind": "Method",
    "detail": "Function (OnFilterCtrlClicked = NewFilterCtrlClicked ; } void)",
    "insertText": "SetOnFilterAltClicked(const FOnClicked& NewFilteAltClicked)"
  },
  {
    "label": "SetOnFilterDoubleClicked()",
    "kind": "Method",
    "detail": "Function (OnFilterAltClicked = NewFilteAltClicked ; } void)",
    "insertText": "SetOnFilterDoubleClicked(const FOnClicked& NewFilterDoubleClicked)"
  },
  {
    "label": "SetOnFilterMiddleButtonClicked()",
    "kind": "Method",
    "detail": "Function (OnFilterDoubleClicked = NewFilterDoubleClicked ; } void)",
    "insertText": "SetOnFilterMiddleButtonClicked(const FOnClicked& NewFilterMiddleButtonClicked)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (OnFilterMiddleButtonClicked = NewFilterMiddleButtonClicked ; } FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "OnMouseButtonDoubleClick(InMyGeometry, InMouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InMouseEvent.IsAltDown() && OnFilterAltClicked.IsBound())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InMouseEvent.GetEffectingButton() == EKeys::MiddleMouseButton && OnFilterMiddleButtonClicked.IsBound())"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "OnMouseButtonUp(InMyGeometry, InMouseEvent)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } private : FOnClicked OnFilterCtrlClicked ; FOnClicked OnFilterAltClicked ; FOnClicked OnFilterDoubleClicked ; FOnClicked OnFilterMiddleButtonClicked ; } ; protected : class SFilter : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnRequestRemove, const TSharedRef<SFilter>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnRequestRemoveAllButThis, const TSharedRef<SFilter>&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnRequestEnableOnly, const TSharedRef<SFilter>&)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnRequestEnableAll)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnRequestDisableAll)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnRequestRemoveAll)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SFilter)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FFilterBase<FilterType>>, FrontendFilter ) SLATE_EVENT( SBasicFilterBar<FilterType>::FOnFilterChanged, OnFilterChanged ) SLATE_EVENT( FOnRequestRemove, OnRequestRemove ) SLATE_EVENT( FOnRequestEnableOnly, OnRequestEnableOnly ) SLATE_EVENT(FOnRequestEnableAll, OnRequestEnableAll) SLATE_EVENT( FOnRequestDisableAll, OnRequestDisableAll ) SLATE_EVENT( FOnRequestRemoveAll, OnRequestRemoveAll ) SLATE_EVENT( FOnRequestRemoveAllButThis, OnRequestRemoveAllButThis ) SLATE_ARGUMENT(EFilterPillStyle, FilterPillStyle) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bEnabled = false ; OnFilterChanged = InArgs . _OnFilterChanged ; OnRequestRemove = InArgs . _OnRequestRemove ; OnRequestEnableOnly = InArgs . _OnRequestEnableOnly ; OnRequestEnableAll = InArgs . _OnRequestEnableAll ; OnRequestDisableAll = InArgs . _OnRequestDisableAll ; OnRequestRemoveAll = InArgs . _OnRequestRemoveAll ; OnRequestRemoveAllButThis = InArgs . _OnRequestRemoveAllButThis ; FrontendFilter = InArgs . _FrontendFilter ; FilterColor = FLinearColor::White ;)",
    "insertText": "if(FrontendFilter.IsValid())"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FilterColor = FrontendFilter ->)",
    "insertText": "GetColor()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FilterToolTip = TAttribute<FText)",
    "insertText": "Create(TAttribute<FText>::FGetter::CreateSP(FrontendFilter.ToSharedRef(), &FFilterBase<FilterType>::GetToolTipText))"
  },
  {
    "label": "Construct_Internal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Construct_Internal(InArgs._FilterPillStyle)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabled(bool InEnabled, bool InExecuteOnFilterChanged = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bEnabled = InEnabled ;)",
    "insertText": "if(InExecuteOnFilterChanged)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnFilterChanged .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FilterName = FrontendFilter ->)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FilterName.IsEmpty())"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (FilterName =)",
    "insertText": "LOCTEXT(\"UnknownFilter\", \"???\")"
  },
  {
    "label": "GetFilterName()",
    "kind": "Method",
    "detail": "Function (} return FilterName ; } FString)",
    "insertText": "GetFilterName()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FilterName = FrontendFilter ->)",
    "insertText": "GetName()"
  },
  {
    "label": "Construct_Internal()",
    "kind": "Method",
    "detail": "Function (} return FilterName ; } protected : void)",
    "insertText": "Construct_Internal(EFilterPillStyle InFilterPillStyle)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> ContentWidget ;)",
    "insertText": "switch(InFilterPillStyle)"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (break ; case EFilterPillStyle::Default : default : ContentWidget =)",
    "insertText": "SAssignNew(ToggleButtonPtr, SFilterCheckBox ) .Style(FAppStyle::Get(), \"FilterBar.FilterButton\") .ToolTipText(FilterToolTip) .IsChecked(this, &SFilter::IsChecked) .OnCheckStateChanged(this, &SFilter::FilterToggled) .CheckBoxContentUsesAutoWidth(false) .OnGetMenuContent(this, &SFilter::GetRightClickMenuContent) [ SNew(SBorder) .Padding(1.0f) .BorderImage(FAppStyle::Get().GetBrush(\"FilterBar.FilterBackground\")) [ SNew(SHorizontalBox) +SHorizontalBox::Slot() .VAlign(VAlign_Center) .AutoWidth() [ SNew(SImage) .Image(FAppStyle::Get().GetBrush(\"FilterBar.FilterImage\")) .ColorAndOpacity(this, &SFilter::GetFilterImageColorAndOpacity) ] +SHorizontalBox::Slot() .Padding(TAttribute<FMargin>(this, &SFilter::GetFilterNamePadding)) .VAlign(VAlign_Center) [ SNew(STextBlock) .Text(this, &SFilter::GetFilterDisplayName) .IsEnabled_Lambda([this] {return bEnabled;})"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (} ChildSlot [ ContentWidget .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "SetOnFilterCtrlClicked()",
    "kind": "Method",
    "detail": "Function (ToggleButtonPtr ->)",
    "insertText": "SetOnFilterCtrlClicked(FOnClicked::CreateSP(this, &SFilter::FilterCtrlClicked))"
  },
  {
    "label": "SetOnFilterAltClicked()",
    "kind": "Method",
    "detail": "Function (ToggleButtonPtr ->)",
    "insertText": "SetOnFilterAltClicked(FOnClicked::CreateSP(this, &SFilter::FilterAltClicked))"
  },
  {
    "label": "SetOnFilterDoubleClicked()",
    "kind": "Method",
    "detail": "Function (ToggleButtonPtr ->)",
    "insertText": "SetOnFilterDoubleClicked(FOnClicked::CreateSP(this, &SFilter::FilterDoubleClicked))"
  },
  {
    "label": "SetOnFilterMiddleButtonClicked()",
    "kind": "Method",
    "detail": "Function (ToggleButtonPtr ->)",
    "insertText": "SetOnFilterMiddleButtonClicked(FOnClicked::CreateSP(this, &SFilter::FilterMiddleButtonClicked))"
  },
  {
    "label": "FilterToggled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FilterToggled(ECheckBoxState NewState)"
  },
  {
    "label": "FilterCtrlClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "FilterCtrlClicked()"
  },
  {
    "label": "FilterAltClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "FilterAltClicked()"
  },
  {
    "label": "FilterDoubleClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "FilterDoubleClicked()"
  },
  {
    "label": "FilterMiddleButtonClicked()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "FilterMiddleButtonClicked()"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilter()"
  },
  {
    "label": "GetRightClickMenuContent()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GetRightClickMenuContent()"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (bool bShouldCloseWindowAfterMenuSelection = true ; bool bCloseSelfOnly = true ; FMenuBuilder)",
    "insertText": "MenuBuilder(bShouldCloseWindowAfterMenuSelection, nullptr, {}, bCloseSelfOnly)"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "BeginSection(\"FilterOptions\", LOCTEXT(\"FilterContextHeading\", \"Filter Options\"))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function ({ MenuBuilder .)",
    "insertText": "AddMenuEntry(FText::Format( LOCTEXT(\"RemoveFilter\", \"Remove: {0}\"), GetFilterDisplayName() ), LOCTEXT(\"RemoveFilterTooltip\", \"Remove this filter from the list. It can be added again in the filters menu.\"), FSlateIcon(), FUIAction( FExecuteAction::CreateSP(this, &SFilter::RemoveFilter) ))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FText::Format( LOCTEXT(\"EnableOnlyThisFilter\", \"Enable Only This: {0}\"), GetFilterDisplayName() ), LOCTEXT(\"EnableOnlyThisFilterTooltip\", \"Enable only this filter from the list.\"), FSlateIcon(), FUIAction( FExecuteAction::CreateSP(this, &SFilter::EnableOnly) ))"
  },
  {
    "label": "EndSection()",
    "kind": "Method",
    "detail": "Function (} MenuBuilder .)",
    "insertText": "EndSection()"
  },
  {
    "label": "BeginSection()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "BeginSection(\"FilterBulkOptions\", LOCTEXT(\"BulkFilterContextHeading\", \"Bulk Filter Options\"))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function ({ MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"EnableAllFilters\", \"Enable All Filters\"), LOCTEXT(\"EnableAllFiltersTooltip\", \"Enables all filters.\"), FSlateIcon(), FUIAction(FExecuteAction::CreateSP(this, &SFilter::EnableAllFilters)))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"DisableAllFilters\", \"Disable All Filters\"), LOCTEXT(\"DisableAllFiltersTooltip\", \"Disables all active filters.\"), FSlateIcon(), FUIAction( FExecuteAction::CreateSP(this, &SFilter::DisableAllFilters) ))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"RemoveAllFilters\", \"Remove All Filters\"), LOCTEXT(\"RemoveAllFiltersTooltip\", \"Removes all filters from the list.\"), FSlateIcon(), FUIAction( FExecuteAction::CreateSP(this, &SFilter::RemoveAllFilters) ))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(FText::Format( LOCTEXT(\"RemoveAllButThisFilter\", \"Remove All But This: {0}\"), GetFilterDisplayName() ), LOCTEXT(\"RemoveAllButThisFilterTooltip\", \"Remove all other filters except this one from the list.\"), FSlateIcon(), FUIAction( FExecuteAction::CreateSP(this, &SFilter::RemoveAllButThis) ))"
  },
  {
    "label": "ModifyContextMenu()",
    "kind": "Method",
    "detail": "Function (FrontendFilter ->)",
    "insertText": "ModifyContextMenu(MenuBuilder)"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (} return MenuBuilder .)",
    "insertText": "MakeWidget()"
  },
  {
    "label": "SharedThis()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> Self =)",
    "insertText": "SharedThis(this)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnRequestRemove .)",
    "insertText": "ExecuteIfBound(Self)"
  },
  {
    "label": "RemoveAllButThis()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllButThis()"
  },
  {
    "label": "EnableOnly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableOnly()"
  },
  {
    "label": "EnableAllFilters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableAllFilters()"
  },
  {
    "label": "DisableAllFilters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableAllFilters()"
  },
  {
    "label": "RemoveAllFilters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAllFilters()"
  },
  {
    "label": "IsChecked()",
    "kind": "Method",
    "detail": "Function (} ECheckBoxState)",
    "insertText": "IsChecked()"
  },
  {
    "label": "GetFilterOverlayVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetFilterOverlayVisibility()"
  },
  {
    "label": "HasAnyFilters()",
    "kind": "Method",
    "detail": "Function (} protected : FOnFilterChanged OnFilterChanged ; FOnRequestRemove OnRequestRemove ; FOnRequestEnableOnly OnRequestEnableOnly ; FOnRequestEnableAll OnRequestEnableAll ; FOnRequestDisableAll OnRequestDisableAll ; FOnRequestDisableAll OnRequestRemoveAll ; FOnRequestRemoveAllButThis OnRequestRemoveAllButThis ; bool bEnabled ; TSharedPtr<FFilterBase<FilterType>> FrontendFilter ; TSharedPtr<SFilterCheckBox> ToggleButtonPtr ; FLinearColor FilterColor ; TAttribute<FText> FilterToolTip ; } ; public : bool)",
    "insertText": "HasAnyFilters()"
  },
  {
    "label": "GetFilter()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FFilterBase<FilterType>>)",
    "insertText": "GetFilter(const FString& InName)"
  },
  {
    "label": "GetAllActiveFilters()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<TFilterCollection<FilterType>>)",
    "insertText": "GetAllActiveFilters()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (Filter ->)",
    "insertText": "SetEnabled(true, false)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontendFilterActive(FrontendFilter.ToSharedRef(), true)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (Filter ->)",
    "insertText": "SetEnabled(false, false)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontendFilterActive(FrontendFilter.ToSharedRef(), false)"
  },
  {
    "label": "RemoveWidgetFromLayout()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RemoveWidgetFromLayout(FilterToRemove)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} Filters .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetFilterCheckState()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetFilterCheckState(const TSharedPtr<FFilterBase<FilterType>>& InFilter, ECheckBoxState InCheckState)"
  },
  {
    "label": "IsFrontendFilterInUse()",
    "kind": "Method",
    "detail": "Function (bool FrontendFilterChecked =)",
    "insertText": "IsFrontendFilterInUse(Filter)"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFilterToBar(Filter)->SetEnabled(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InCheckState == ECheckBoxState::Unchecked && FrontendFilterChecked)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilter(Filter)"
  },
  {
    "label": "GetFilterCheckState()",
    "kind": "Method",
    "detail": "Function (} } ECheckBoxState)",
    "insertText": "GetFilterCheckState(const TSharedPtr<FFilterBase<FilterType>>& InFilter)"
  },
  {
    "label": "IsFilterActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFilterActive(const TSharedPtr<FFilterBase<FilterType>>& InFilter)"
  },
  {
    "label": "GetFilterBadgeIcon()",
    "kind": "Method",
    "detail": "Function (} } } return false ; } protected : const FSlateBrush*)",
    "insertText": "GetFilterBadgeIcon()"
  },
  {
    "label": "RemoveAllButThis()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } void)",
    "insertText": "RemoveAllButThis(const TSharedRef<SFilter>& FilterToKeep)"
  },
  {
    "label": "RemoveWidgetFromLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWidgetFromLayout(Filter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(const TSharedPtr<FFilterBase<FilterType>>& FrontendFilter = Filter->GetFrontendFilter())"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFilterToBar(FilterToKeep)"
  },
  {
    "label": "AddWidgetToLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddWidgetToLayout(const TSharedRef<SWidget> WidgetToAdd)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (FMargin HorizontalFilterPadding ;)",
    "insertText": "switch(FilterPillStyle)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (break ; case EFilterPillStyle::Default : default : HorizontalFilterPadding =)",
    "insertText": "FMargin(3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FilterBarLayout == EFilterBarLayout::Horizontal)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalFilterBox ->)",
    "insertText": "AddSlot() .Padding(HorizontalFilterPadding)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (} else { VerticalFilterBox ->)",
    "insertText": "AddSlot() .Padding(4, 2)"
  },
  {
    "label": "RemoveWidgetFromLayout()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveWidgetFromLayout(const TSharedRef<SWidget> WidgetToRemove)"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (HorizontalFilterBox ->)",
    "insertText": "RemoveSlot(WidgetToRemove)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetFrontendFilterActive(const TSharedRef<FFilterBase<FilterType>>& Filter, bool bActive)"
  },
  {
    "label": "SetActiveInCollection()",
    "kind": "Method",
    "detail": "Function (Filter ->)",
    "insertText": "SetActiveInCollection(Filter, bActive, *ActiveFilters)"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SFilter>)",
    "insertText": "AddFilterToBar(const TSharedRef<FFilterBase<FilterType>>& Filter)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> NewFilter =)",
    "insertText": "SNew(SFilter) .FrontendFilter(Filter) .FilterPillStyle(FilterPillStyle) .OnFilterChanged( this, &SBasicFilterBar<FilterType>::FrontendFilterChanged, Filter ) .OnRequestRemove(this, &SBasicFilterBar<FilterType>::RemoveFilterAndUpdate) .OnRequestEnableOnly(this, &SBasicFilterBar<FilterType>::EnableOnlyThisFilter) .OnRequestEnableAll(this, &SBasicFilterBar<FilterType>::EnableAllFilters) .OnRequestDisableAll(this, &SBasicFilterBar<FilterType>::DisableAllFilters) .OnRequestRemoveAll(this, &SBasicFilterBar<FilterType>::RemoveAllFilters) .OnRequestRemoveAllButThis(this, &SBasicFilterBar<FilterType>::RemoveAllButThis)"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFilterToBar(NewFilter)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Filters .)",
    "insertText": "Add(FilterToAdd)"
  },
  {
    "label": "AddWidgetToLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidgetToLayout(FilterToAdd)"
  },
  {
    "label": "EnableOnlyThisFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableOnlyThisFilter(const TSharedRef<SFilter>& FilterToEnable)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (bool bEnable = Filter = = FilterToEnable ; Filter ->)",
    "insertText": "SetEnabled(bEnable, false)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontendFilterActive(FrontendFilter.ToSharedRef(), bEnable)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFilter(const TSharedRef<FFilterBase<FilterType>>& InFilterToRemove, bool ExecuteOnFilterChanged= true)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SFilter> FilterToRemove ;)",
    "insertText": "for(const TSharedRef<SFilter>& Filter : Filters)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FilterToRemove = Filter ; break ; } })",
    "insertText": "if(FilterToRemove.IsValid())"
  },
  {
    "label": "RemoveFilterAndUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilterAndUpdate(FilterToRemove.ToSharedRef())"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "RemoveFilter(FilterToRemove.ToSharedRef())"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "RemoveFilter(const TSharedRef<SFilter>& FilterToRemove)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Filters .)",
    "insertText": "Remove(FilterToRemove)"
  },
  {
    "label": "RemoveFilterAndUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveFilterAndUpdate(const TSharedRef<SFilter>& FilterToRemove)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilter(FilterToRemove)"
  },
  {
    "label": "FrontendFilterChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FrontendFilterChanged(TSharedRef<FFilterBase<FilterType>> FrontendFilter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FilterToUpdate = Filter ; break ; } })",
    "insertText": "if(FilterToUpdate.IsValid())"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontendFilterActive(FrontendFilter, FilterToUpdate->IsEnabled())"
  },
  {
    "label": "CreateOtherFiltersMenuCategory()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateOtherFiltersMenuCategory(FToolMenuSection& Section, TSharedPtr<FFilterCategory> MenuCategory)"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (Section .)",
    "insertText": "AddMenuEntry(NAME_None, FrontendFilter->GetDisplayName(), FrontendFilter->GetToolTipText(), FSlateIcon(FAppStyle::GetAppStyleSetName(), FrontendFilter->GetIconName()), FUIAction( FExecuteAction::CreateSP(const_cast< SBasicFilterBar<FilterType>* >(this), &SBasicFilterBar<FilterType>::FrontendFilterClicked, FrontendFilter), FCanExecuteAction(), FIsActionChecked::CreateSP(this, &SBasicFilterBar<FilterType>::IsFrontendFilterInUse, FrontendFilter)), EUserInterfaceActionType::ToggleButton)"
  },
  {
    "label": "CreateOtherFiltersMenuCategory()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "CreateOtherFiltersMenuCategory(UToolMenu* InMenu, TSharedPtr<FFilterCategory> MenuCategory)"
  },
  {
    "label": "CreateOtherFiltersMenuCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOtherFiltersMenuCategory(InMenu->AddSection(\"Section\"), MenuCategory)"
  },
  {
    "label": "FrontendFilterClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FrontendFilterClicked(TSharedRef<FFilterBase<FilterType>> FrontendFilter)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilter(FrontendFilter)"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (} else { TSharedRef<SFilter> NewFilter =)",
    "insertText": "AddFilterToBar(FrontendFilter)"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (NewFilter ->)",
    "insertText": "SetEnabled(true)"
  },
  {
    "label": "IsFrontendFilterInUse()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsFrontendFilterInUse(TSharedRef<FFilterBase<FilterType>> FrontendFilter)"
  },
  {
    "label": "IsFrontendFilterCategoryInUse()",
    "kind": "Method",
    "detail": "Function (bool bFullCategoryInUse =)",
    "insertText": "IsFrontendFilterCategoryInUse(MenuCategory)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool ExecuteOnFilterChanged = false ;)",
    "insertText": "for(const TSharedRef<FFilterBase<FilterType>>& FrontendFilter : AllFrontendFilters)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilter(FrontendFilter, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ExecuteOnFilterChanged = true ; } else)",
    "insertText": "if(!IsFrontendFilterInUse(FrontendFilter))"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontendFilterActive(FrontendFilter, NewFilter->IsEnabled())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ExecuteOnFilterChanged = true ; } } })",
    "insertText": "if(ExecuteOnFilterChanged)"
  },
  {
    "label": "IsFrontendFilterCategoryInUse()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsFrontendFilterCategoryInUse(TSharedPtr<FFilterCategory> MenuCategory)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsAnyActionInUse = true ; } else { bIsAnyActionNotInUse = true ; })",
    "insertText": "if(bIsAnyActionInUse && bIsAnyActionNotInUse)"
  },
  {
    "label": "OnSetFilterActive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSetFilterActive(bool bActive, TWeakPtr<FFilterBase<FilterType>> InWeakFilter)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFilterBase<FilterType>> Filter = InWeakFilter .)",
    "insertText": "Pin()"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> NewFilter =)",
    "insertText": "AddFilterToBar(Filter.ToSharedRef())"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (NewFilter ->)",
    "insertText": "SetEnabled(bActive)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(const TSharedRef<SFilter>& PinnedFilter : Filters)"
  },
  {
    "label": "OnIsFilterActive()",
    "kind": "Method",
    "detail": "Function (break ; } } } } } bool)",
    "insertText": "OnIsFilterActive(TWeakPtr<FFilterBase<FilterType>> InWeakFilter)"
  },
  {
    "label": "CustomTextFilterClicked()",
    "kind": "Method",
    "detail": "Function (} } return false ; } void)",
    "insertText": "CustomTextFilterClicked(ECheckBoxState CheckBoxState, TSharedRef<ICustomTextFilter<FilterType>> Filter)"
  },
  {
    "label": "GetFilter()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FFilterBase<FilterType>> FrontendFilter = Filter ->)",
    "insertText": "GetFilter().ToSharedRef()"
  },
  {
    "label": "OnCreateCustomTextFilter()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnCreateCustomTextFilter(const FCustomTextFilterData& InFilterData, bool bApplyFilter)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ICustomTextFilter<FilterType>> NewTextFilter = CreateTextFilter .)",
    "insertText": "Execute().ToSharedRef()"
  },
  {
    "label": "SetFromCustomTextFilterData()",
    "kind": "Method",
    "detail": "Function (NewTextFilter ->)",
    "insertText": "SetFromCustomTextFilterData(InFilterData)"
  },
  {
    "label": "GetFilter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFilterBase<FilterType>> NewFilter = NewTextFilter ->)",
    "insertText": "GetFilter()"
  },
  {
    "label": "OnCancelCustomTextFilterDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCancelCustomTextFilterDialog()"
  },
  {
    "label": "AddFilterToBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SFilter> AddedFilter =)",
    "insertText": "AddFilterToBar(NewFilter.ToSharedRef())"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (AddedFilter ->)",
    "insertText": "SetEnabled(bApplyFilter)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontendFilterActive(NewFilter.ToSharedRef(), bApplyFilter)"
  },
  {
    "label": "OnModifyCustomTextFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnModifyCustomTextFilter(const FCustomTextFilterData& InFilterData, TSharedPtr<ICustomTextFilter<FilterType>> InFilter)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFilter(NewFilter.ToSharedRef())"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (AddedFilter ->)",
    "insertText": "SetEnabled(bWasEnabled)"
  },
  {
    "label": "SetFrontendFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFrontendFilterActive(NewFilter.ToSharedRef(), bWasEnabled)"
  },
  {
    "label": "OnDeleteCustomTextFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDeleteCustomTextFilter(const TSharedPtr<ICustomTextFilter<FilterType>> InFilter)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (CustomTextFilters .)",
    "insertText": "RemoveSingle(InFilter.ToSharedRef())"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (CustomTextFilterWindow .)",
    "insertText": "Pin()->RequestDestroyWindow()"
  },
  {
    "label": "GetAllCustomTextFilterLabels()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllCustomTextFilterLabels(TArray<FText>& OutFilterLabels)"
  },
  {
    "label": "CreateCustomTextFilterData()",
    "kind": "Method",
    "detail": "Function (FCustomTextFilterData FilterData = Filter ->)",
    "insertText": "CreateCustomTextFilterData()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutFilterLabels .)",
    "insertText": "Add(FilterData.FilterLabel)"
  },
  {
    "label": "CreateCustomTextFilterWindow()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateCustomTextFilterWindow(const FCustomTextFilterData& CustomTextFilterData, TSharedPtr<ICustomTextFilter<FilterType>> InFilter)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool bInEditMode = InFilter .)",
    "insertText": "IsValid()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (FText WindowTitle = bInEditMode ?)",
    "insertText": "LOCTEXT(\"ModifyCustomTextFilterWindow\", \"Modify Custom Filter\") : LOCTEXT(\"CreateCustomTextFilterWindow\", \"Create Custom Filter\")"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWindow> NewTextFilterWindow =)",
    "insertText": "SNew(SWindow) .Title(WindowTitle) .HasCloseButton(true) .SupportsMaximize(false) .SupportsMinimize(false) .SizingRule(ESizingRule::FixedSize) .ClientSize(FVector2D(724, 183))"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SCustomTextFilterDialog> CustomTextFilterDialog =)",
    "insertText": "SNew(SCustomTextFilterDialog) .FilterData(CustomTextFilterData) .InEditMode(bInEditMode) .OnCreateFilter(this, &SBasicFilterBar<FilterType>::OnCreateCustomTextFilter) .OnDeleteFilter(this, &SBasicFilterBar<FilterType>::OnDeleteCustomTextFilter, InFilter) .OnModifyFilter(this, &SBasicFilterBar<FilterType>::OnModifyCustomTextFilter, InFilter) .OnCancelClicked(this, &SBasicFilterBar<FilterType>::OnCancelCustomTextFilterDialog) .OnGetFilterLabels(this, &SBasicFilterBar<FilterType>::GetAllCustomTextFilterLabels)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (NewTextFilterWindow ->)",
    "insertText": "SetContent(CustomTextFilterDialog.ToSharedRef())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().AddWindow(NewTextFilterWindow.ToSharedRef())"
  },
  {
    "label": "CreateAddCustomTextFilterWindow()",
    "kind": "Method",
    "detail": "Function (CustomTextFilterWindow = NewTextFilterWindow ; } void)",
    "insertText": "CreateAddCustomTextFilterWindow()"
  },
  {
    "label": "CreateCustomTextFilterWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCustomTextFilterWindow(FCustomTextFilterData(), nullptr)"
  },
  {
    "label": "CreateEditCustomTextFilterWindow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateEditCustomTextFilterWindow(TSharedPtr<ICustomTextFilter<FilterType>> InFilter)"
  },
  {
    "label": "CreateCustomTextFilterWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCustomTextFilterWindow(CustomTextFilterData, InFilter)"
  },
  {
    "label": "CreateCustomTextFilterFromSearch()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateCustomTextFilterFromSearch(const FText& InSearchText)"
  },
  {
    "label": "CreateCustomTextFilterWindow()",
    "kind": "Method",
    "detail": "Function (FCustomTextFilterData CustomTextFilterData ; CustomTextFilterData . FilterLabel = InSearchText ; CustomTextFilterData . FilterString = InSearchText ;)",
    "insertText": "CreateCustomTextFilterWindow(CustomTextFilterData, nullptr)"
  },
  {
    "label": "CreateTextFiltersMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateTextFiltersMenu(UToolMenu* InMenu)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (FToolMenuSection& Section = InMenu ->)",
    "insertText": "AddSection(\"FilterBarTextFiltersSubmenu\")"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (Section .)",
    "insertText": "AddMenuEntry(\"CreateNewTextFilter\", LOCTEXT(\"CreateNewTextFilter\", \"Create New Filter\"), LOCTEXT(\"CreateNewTextFilterTooltip\", \"Create a new text filter\"), FSlateIcon(FAppStyle::Get().GetStyleSetName(), \"Icons.PlusCircle\"), FUIAction( FExecuteAction::CreateSP(this, &SBasicFilterBar<FilterType>::CreateAddCustomTextFilterWindow) ))"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (FToolMenuSection& CustomFiltersSection = InMenu ->)",
    "insertText": "AddSection(\"FilterBarCustomTextFiltersSection\")"
  },
  {
    "label": "IsFrontendFilterInUse()",
    "kind": "Method",
    "detail": "Function (bool bIsFilterChecked =)",
    "insertText": "IsFrontendFilterInUse(FrontendFilter)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SHorizontalBox> CustomTextFilterWidget =)",
    "insertText": "SNew(SHorizontalBox)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (CustomTextFilterWidget ->)",
    "insertText": "AddSlot() .AutoWidth() .Padding(16, 0, 0, 0) [ SNew(SCheckBox) .Style(FAppStyle::Get(), \"Menu.CheckBox\") .OnCheckStateChanged(FOnCheckStateChanged::CreateSP(this, &SBasicFilterBar<FilterType>::CustomTextFilterClicked, Filter)) .IsChecked(bIsFilterChecked)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (CustomTextFilterWidget ->)",
    "insertText": "AddSlot() .FillWidth(1.0) [ SNew(SButton) .ButtonStyle(FAppStyle::Get(), \"SimpleButton\") .ForegroundColor(FStyleColors::White) .Text(FrontendFilter->GetDisplayName()) .OnClicked_Lambda([this, &Filter]() { this->FrontendFilterClicked(Filter->GetFilter().ToSharedRef()); FSlateApplication::Get().DismissAllMenus(); return FReply::Handled(); })"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (CustomTextFilterWidget ->)",
    "insertText": "AddSlot() .AutoWidth() .HAlign(HAlign_Right) .Padding(0, 0, 16, 0) [ SNew(SSimpleButton) .Icon(FAppStyle::GetBrush(\"Icons.Edit\")) .OnClicked_Lambda([this, &Filter]() { this->CreateEditCustomTextFilterWindow(Filter); return FReply::Handled(); })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (CustomFiltersSection .)",
    "insertText": "AddEntry(FToolMenuEntry::InitWidget( NAME_None, CustomTextFilterWidget.ToSharedRef(), FText::GetEmpty(), true, true ))"
  },
  {
    "label": "PopulateCommonFilterSections()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PopulateCommonFilterSections(UToolMenu* Menu)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (FToolMenuSection& Section = Menu ->)",
    "insertText": "AddSection(\"FilterBarResetFilters\")"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (Section .)",
    "insertText": "AddMenuEntry(\"ResetFilters\", LOCTEXT(\"FilterListResetFilters\", \"Reset Filters\"), LOCTEXT(\"FilterListResetToolTip\", \"Resets current filter selection\"), FSlateIcon(FAppStyle::Get().GetStyleSetName(), \"PropertyWindow.DiffersFromDefault\"), FUIAction( FExecuteAction::CreateSP(this, &SBasicFilterBar<FilterType>::OnResetFilters), FCanExecuteAction::CreateLambda([this]() { return HasAnyFilters(); })))"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (FToolMenuSection& CustomFiltersSection = Menu ->)",
    "insertText": "AddSection(\"FilterBarTextFilters\")"
  },
  {
    "label": "AddSubMenu()",
    "kind": "Method",
    "detail": "Function (CustomFiltersSection .)",
    "insertText": "AddSubMenu(\"CustomFiltersSubMenu\", LOCTEXT(\"FilterBarTextFilters\", \"Custom Filters\"), LOCTEXT(\"FilterBarTextFiltersTooltip\", \"Custom Filters\"), FNewToolMenuDelegate::CreateSP(this, &SBasicFilterBar<FilterType>::CreateTextFiltersMenu))"
  },
  {
    "label": "PopulateCustomFilters()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PopulateCustomFilters(UToolMenu* Menu)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (FToolMenuSection& Section = Menu ->)",
    "insertText": "AddSection(*Category->Title.ToString(), Category->Title)"
  },
  {
    "label": "CreateOtherFiltersMenuCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOtherFiltersMenuCategory(Section, Category)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (} } else { FToolMenuSection& Section = Menu ->)",
    "insertText": "AddSection(\"BasicFilterBarFiltersMenu\", LOCTEXT(\"FilterBarOtherFiltersSection\", \"Other Filters\"))"
  },
  {
    "label": "AddSubMenu()",
    "kind": "Method",
    "detail": "Function (Section .)",
    "insertText": "AddSubMenu(NAME_None, Category->Title, Category->Tooltip, FNewToolMenuDelegate::CreateSP(this, &SBasicFilterBar<FilterType>::CreateOtherFiltersMenuCategory, Category), FUIAction( FExecuteAction::CreateSP( this, &SBasicFilterBar<FilterType>::FrontendFilterCategoryClicked, Category ), FCanExecuteAction(), FGetActionCheckState::CreateSP(this, &SBasicFilterBar<FilterType>::IsFrontendFilterCategoryChecked, Category ) ), EUserInterfaceActionType::ToggleButton)"
  },
  {
    "label": "MakeAddFilterMenu()",
    "kind": "Method",
    "detail": "Function (} } } private : TSharedRef<SWidget>)",
    "insertText": "MakeAddFilterMenu()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FName FilterMenuName = \" FilterBar . FilterMenu \" ;)",
    "insertText": "if(!UToolMenus::Get()->IsMenuRegistered(FilterMenuName))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UToolMenu* Menu =)",
    "insertText": "Get()->RegisterMenu(FilterMenuName)"
  },
  {
    "label": "AddDynamicSection()",
    "kind": "Method",
    "detail": "Function (Menu -> bShouldCloseWindowAfterMenuSelection = true ; Menu -> bCloseSelfOnly = true ; Menu ->)",
    "insertText": "AddDynamicSection(NAME_None, FNewToolMenuDelegate::CreateLambda([](UToolMenu* InMenu) { if (UFilterBarContext* Context = InMenu->FindContext<UFilterBarContext>()) { Context->PopulateFilterMenu.ExecuteIfBound(InMenu); Context->OnExtendAddFilterMenu.ExecuteIfBound(InMenu); } }))"
  },
  {
    "label": "UFilterBarContext()",
    "kind": "Method",
    "detail": "Function (} UFilterBarContext* FilterBarContext = NewObject<)",
    "insertText": "UFilterBarContext()"
  },
  {
    "label": "CreateSP()",
    "kind": "Method",
    "detail": "Function (FilterBarContext -> PopulateFilterMenu =)",
    "insertText": "CreateSP(this, &SBasicFilterBar<FilterType>::PopulateAddFilterMenu)"
  },
  {
    "label": "ToolMenuContext()",
    "kind": "Method",
    "detail": "Function (FilterBarContext -> OnExtendAddFilterMenu = OnExtendAddFilterMenu ; FToolMenuContext)",
    "insertText": "ToolMenuContext(FilterBarContext)"
  },
  {
    "label": "PopulateAddFilterMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PopulateAddFilterMenu(UToolMenu* Menu)"
  },
  {
    "label": "PopulateCommonFilterSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCommonFilterSections(Menu)"
  },
  {
    "label": "PopulateCustomFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateCustomFilters(Menu)"
  },
  {
    "label": "BindToFilter()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedPtr<SWrapBox> HorizontalFilterBox ; TSharedPtr<SScrollBox> VerticalFilterBox ; TSharedPtr<SWidgetSwitcher> FilterBox ; EFilterBarLayout FilterBarLayout ; TArray<TSharedRef<SFilter>> Filters ; TArray<TSharedRef<FFilterBase<FilterType>>> AllFrontendFilters ; TSharedPtr<TFilterCollection<FilterType>> ActiveFilters ; TArray<TSharedPtr<FFilterCategory>> AllFilterCategories ; FOnFilterChanged OnFilterChanged ; FOnExtendAddFilterMenu OnExtendAddFilterMenu ; FCreateTextFilter CreateTextFilter ; TArray<TSharedRef<ICustomTextFilter<FilterType>>> CustomTextFilters ; TWeakPtr<SWindow> CustomTextFilterWindow ; bool bCanChangeOrientation ; bool bUseSectionsForCategories ; bool bPinAllFrontendFilters ; EFilterPillStyle FilterPillStyle ; struct FFrontendFilterExternalActivationHelper<FilterType> ; } ; template<FilterType> struct FFrontendFilterExternalActivationHelper { void)",
    "insertText": "BindToFilter(TSharedRef<SBasicFilterBar<FilterType>> InFilterList, TSharedRef<FFilterBase<FilterType>> InFrontendFilter)"
  },
  {
    "label": "AddSP()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FFilterBase<FilterType>> WeakFilter = InFrontendFilter ; InFrontendFilter -> SetActiveEvent .)",
    "insertText": "AddSP(&InFilterList.Get(), &SBasicFilterBar<FilterType>::OnSetFilterActive, WeakFilter)"
  },
  {
    "label": "BindSP()",
    "kind": "Method",
    "detail": "Function (InFrontendFilter -> IsActiveEvent .)",
    "insertText": "BindSP(&InFilterList.Get(), &SBasicFilterBar<FilterType>::OnIsFilterActive, WeakFilter)"
  }
]