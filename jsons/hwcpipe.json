[
  {
    "label": "Measurements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Measurements"
  },
  {
    "label": "HWCPIPE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HWCPIPE_EXPORT"
  },
  {
    "label": "get_last_error()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" cpu_profiler . h \" # include \" gpu_profiler . h \" # include<functional> # include<memory> # include \" hwcpipe_export . h \" namespace hwcpipe { const char*)",
    "insertText": "get_last_error()"
  },
  {
    "label": "HWCPipe()",
    "kind": "Method",
    "detail": "Function (HWCPIPE_EXPORT const char* error_msg ; const char* err = error_msg ; error_msg = nullptr ; return err ; } struct Measurements { const CpuMeasurements* cpu { nullptr } ; const GpuMeasurements* gpu { nullptr } ; } ; class HWCPIPE_EXPORT HWCPipe { public : # ifndef HWCPIPE_NO_JSON)",
    "insertText": "HWCPipe(const char *json_string)"
  },
  {
    "label": "HWCPipe()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "HWCPipe(const CpuCounterSet& enabled_cpu_counters, const GpuCounterSet& enabled_gpu_counters)"
  },
  {
    "label": "HWCPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HWCPipe()"
  },
  {
    "label": "set_enabled_cpu_counters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_enabled_cpu_counters(const CpuCounterSet& counters)"
  },
  {
    "label": "set_enabled_gpu_counters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_enabled_gpu_counters(const GpuCounterSet& counters)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (Measurements)",
    "insertText": "sample()"
  },
  {
    "label": "cpu_profiler()",
    "kind": "Method",
    "detail": "Function (CpuProfiler*)",
    "insertText": "cpu_profiler()"
  },
  {
    "label": "gpu_profiler()",
    "kind": "Method",
    "detail": "Function (} GpuProfiler*)",
    "insertText": "gpu_profiler()"
  },
  {
    "label": "create_profilers()",
    "kind": "Method",
    "detail": "Function (} private : std::unique_ptr<CpuProfiler> cpu_profiler_ { } ; std::unique_ptr<GpuProfiler> gpu_profiler_ { } ; void)",
    "insertText": "create_profilers(const CpuCounterSet& enabled_cpu_counters, const GpuCounterSet& enabled_gpu_counters)"
  }
]