[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FCurveEditorScreenSpace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpace"
  },
  {
    "label": "FCurvePointHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurvePointHandle"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "FKeyDrawInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDrawInfo"
  },
  {
    "label": "FKeyPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyPosition"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "FKeyBarCurveModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" CurveEditorTypes . h \" # include \" CurveModel . h \" # include \" Curves / KeyHandle . h \" # include \" Math / Color . h \" # include \" Math / Range . h \" # include \" Misc / Optional . h \" # include \" Templates / Tuple . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealType . h \" class FCurveEditor ; class FMenuBuilder ; struct FCurveEditorScreenSpace ; struct FCurvePointHandle ; struct FKeyAttributes ; struct FKeyDrawInfo ; struct FKeyPosition ; class FKeyBarCurveModel : public FCurveModel { public :)",
    "insertText": "FKeyBarCurveModel()"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetCurve()"
  },
  {
    "label": "DrawCurve()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "DrawCurve(const FCurveEditor& CurveEditor, const FCurveEditorScreenSpace& ScreenSpace, TArray<TTuple<double, double>>& InterpolatingPoints)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetKeys(double MinTime, double MaxTime, double MinValue, double MaxValue, TArray<FKeyHandle>& OutKeyHandles)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddKeys(TArrayView<const FKeyPosition> InPositions, TArrayView<const FKeyAttributes> InAttributes, TArrayView<TOptional<FKeyHandle>>* OutKeyHandles = nullptr)"
  },
  {
    "label": "RemoveKeys()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RemoveKeys(TArrayView<const FKeyHandle> InKeys)"
  },
  {
    "label": "GetKeyPositions()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<FKeyPosition> OutKeyPositions)"
  },
  {
    "label": "SetKeyPositions()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<const FKeyPosition> InKeyPositions,const EPropertyChangeType::Type ChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "GetKeyDrawInfo()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetKeyDrawInfo(ECurvePointType PointType, const FKeyHandle InKeyHandle, FKeyDrawInfo& OutDrawInfo)"
  },
  {
    "label": "GetTimeRange()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetTimeRange(double& MinTime, double& MaxTime)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetValueRange(double& MinValue, double& MaxValue)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "Evaluate(double InTime, double& OutValue)"
  },
  {
    "label": "FindRanges()",
    "kind": "Method",
    "detail": "Function (} ; struct FBarRange { bool bRangeIsInfinite = true ; TRange<double> Range ; FName Name ; FLinearColor Color ; } ; TArray<FKeyBarCurveModel::FBarRange>)",
    "insertText": "FindRanges()"
  }
]