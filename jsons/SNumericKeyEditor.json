[
  {
    "label": "SNonThrottledSpinBox",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SNonThrottledSpinBox"
  },
  {
    "label": "SNumericKeyEditorWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNumericKeyEditorWidget"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" ScopedTransaction . h \" # include \" Styling / SlateTypes . h \" # include \" Editor . h \" # include \" CurveKeyEditors / SequencerKeyEditor . h \" # include \" Widgets / Input / SSpinBox . h \" # include \" Styling / AppStyle . h \" # include \" NumericPropertyParams . h \" # define LOCTEXT_NAMESPACE \" NumericKeyEditor \" template<T> struct SNonThrottledSpinBox : SSpinBox<T> { FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply Reply = SSpinBox<T)",
    "insertText": "OnMouseButtonDown(MyGeometry, MouseEvent)"
  },
  {
    "label": "PreventThrottling()",
    "kind": "Method",
    "detail": "Function (Reply .)",
    "insertText": "PreventThrottling()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} return Reply ; } } ; template<NumericType> class SNumericKeyEditorWidget : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SNumericKeyEditorWidget)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() template<typename ChannelType> void Construct(const FArguments& InArgs, const TSequencerKeyEditor<ChannelType, NumericType>& InKeyEditor)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<TSequencerKeyEditorWrapper<ChannelType,NumericType>> KeyEditorWrapper = MakeShared<TSequencerKeyEditorWrapper<ChannelType,)",
    "insertText": "NumericType(InKeyEditor)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(InArgs, KeyEditorWrapper)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<ISequencerKeyEditor<NumericType>>& InKeyEditor)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (KeyEditor = InKeyEditor ; const FProperty* Property = nullptr ; ISequencer* Sequencer = InKeyEditor ->)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "GetPropertyBindings()",
    "kind": "Method",
    "detail": "Function (FTrackInstancePropertyBindings* PropertyBindings = InKeyEditor ->)",
    "insertText": "GetPropertyBindings()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (Property = PropertyBindings ->)",
    "insertText": "GetProperty(*Object)"
  },
  {
    "label": "CreateLambda()",
    "kind": "Method",
    "detail": "Function (break ; } } } } const TNumericPropertyParams<NumericType>::FMetaDataGetter MetaDataGetter = TNumericPropertyParams<NumericType>::)",
    "insertText": "CreateLambda([&](const FName& Key) { return InKeyEditor->GetMetaData(Key); })"
  },
  {
    "label": "NumericPropertyParams()",
    "kind": "Method",
    "detail": "Function (TNumericPropertyParams<NumericType>)",
    "insertText": "NumericPropertyParams(Property, MetaDataGetter)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (ChildSlot [)",
    "insertText": "SNew(SNonThrottledSpinBox<NumericType>) .Style(&FAppStyle::GetWidgetStyle<FSpinBoxStyle>(\"Sequencer.HyperlinkSpinBox\")) .Font(FAppStyle::GetFontStyle(\"Sequencer.AnimationOutliner.RegularFont\")) .MinValue(NumericPropertyParams.MinValue) .MaxValue(NumericPropertyParams.MaxValue) .TypeInterface(InKeyEditor->GetNumericTypeInterface()) .MinSliderValue(NumericPropertyParams.MinSliderValue) .MaxSliderValue(NumericPropertyParams.MaxSliderValue) .SliderExponent(NumericPropertyParams.SliderExponent) .Delta(NumericPropertyParams.Delta) .LinearDeltaSensitivity(NumericPropertyParams.GetLinearDeltaSensitivityAttribute()) .WheelStep(NumericPropertyParams.WheelStep) .Value_Raw(KeyEditor.Get(), &ISequencerKeyEditor<NumericType>::GetCurrentValue) .OnValueChanged(this, &SNumericKeyEditorWidget::OnValueChanged) .OnValueCommitted(this, &SNumericKeyEditorWidget::OnValueCommitted) .OnBeginSliderMovement(this, &SNumericKeyEditorWidget::OnBeginSliderMovement) .OnEndSliderMovement(this, &SNumericKeyEditorWidget::OnEndSliderMovement)"
  },
  {
    "label": "GetForegroundColor()",
    "kind": "Method",
    "detail": "Function (} private : FSlateColor)",
    "insertText": "GetForegroundColor()"
  },
  {
    "label": "OnBeginSliderMovement()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnBeginSliderMovement()"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (GEditor ->)",
    "insertText": "BeginTransaction(LOCTEXT(\"SetNumericKey\", \"Set Key Value\"))"
  },
  {
    "label": "OnEndSliderMovement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEndSliderMovement(NumericType Value)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (KeyEditor ->)",
    "insertText": "SetValue(Value)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (GEditor ->)",
    "insertText": "EndTransaction()"
  },
  {
    "label": "OnValueChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnValueChanged(NumericType Value)"
  },
  {
    "label": "SetValueWithNotify()",
    "kind": "Method",
    "detail": "Function (KeyEditor ->)",
    "insertText": "SetValueWithNotify(Value, EMovieSceneDataChangeType::TrackValueChanged)"
  },
  {
    "label": "OnValueCommitted()",
    "kind": "Method",
    "detail": "Function (} bCommitted = false ; } void)",
    "insertText": "OnValueCommitted(NumericType Value, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "Transaction()",
    "kind": "Method",
    "detail": "Function (const FScopedTransaction)",
    "insertText": "Transaction(LOCTEXT(\"SetNumericKey\", \"Set Key Value\"))"
  },
  {
    "label": "SetValueWithNotify()",
    "kind": "Method",
    "detail": "Function (KeyEditor ->)",
    "insertText": "SetValueWithNotify(Value, EMovieSceneDataChangeType::TrackValueChangedRefreshImmediately)"
  }
]