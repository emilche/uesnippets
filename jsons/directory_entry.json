[
  {
    "label": "directory_entry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "directory_entry"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "directory_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "directory_iterator"
  },
  {
    "label": "recursive_directory_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "recursive_directory_iterator"
  },
  {
    "label": "_LIBCPP_HIDDEN",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_HIDDEN"
  },
  {
    "label": "_CacheType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "_CacheType"
  },
  {
    "label": "__cached_data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__cached_data"
  },
  {
    "label": "__dir_element_proxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__dir_element_proxy"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FILESYSTEM_DIRECTORY_ENTRY_H # define _LIBCPP___FILESYSTEM_DIRECTORY_ENTRY_H # include<__availability> # include<__chrono / time_point . h> # include<__config> # include<__errc> # include<__filesystem / file_status . h> # include<__filesystem / file_time_type . h> # include<__filesystem / file_type . h> # include<__filesystem / filesystem_error . h> # include<__filesystem / operations . h> # include<__filesystem / path . h> # include<__filesystem / perms . h> # include<__utility / unreachable . h> # include<cstdint> # include<cstdlib> # include<iosfwd> # include<system_error> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "directory_entry()",
    "kind": "Method",
    "detail": "Function (typedef _VSTD_FS::path _Path ; public :)",
    "insertText": "directory_entry()"
  },
  {
    "label": "directory_entry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "directory_entry(directory_entry const&)"
  },
  {
    "label": "directory_entry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "directory_entry(directory_entry&&)"
  },
  {
    "label": "directory_entry()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY)",
    "insertText": "directory_entry(_Path const& __p) : __p_(__p)"
  },
  {
    "label": "__refresh()",
    "kind": "Method",
    "detail": "Function (error_code __ec ;)",
    "insertText": "__refresh(&__ec)"
  },
  {
    "label": "directory_entry()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "directory_entry(_Path const& __p, error_code& __ec) : __p_(__p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} directory_entry&)",
    "insertText": "operator(directory_entry const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (directory_entry&)",
    "insertText": "operator(directory_entry&&)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "assign(_Path const& __p)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "assign(_Path const& __p, error_code& __ec)"
  },
  {
    "label": "replace_filename()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "replace_filename(_Path const& __p)"
  },
  {
    "label": "replace_filename()",
    "kind": "Method",
    "detail": "Function (__p_ .)",
    "insertText": "replace_filename(__p)"
  },
  {
    "label": "replace_filename()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "replace_filename(_Path const& __p, error_code& __ec)"
  },
  {
    "label": "parent_path()",
    "kind": "Method",
    "detail": "Function (__p_ = __p_ .)",
    "insertText": "parent_path()"
  },
  {
    "label": "refresh()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "refresh()"
  },
  {
    "label": "__refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__refresh()"
  },
  {
    "label": "refresh()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "refresh(error_code& __ec)"
  },
  {
    "label": "path()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _Path const&)",
    "insertText": "path()"
  },
  {
    "label": "exists()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "exists(error_code& __ec)"
  },
  {
    "label": "is_block_file()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_block_file()"
  },
  {
    "label": "is_block_file()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_block_file(error_code& __ec)"
  },
  {
    "label": "is_character_file()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_character_file()"
  },
  {
    "label": "is_character_file()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_character_file(error_code& __ec)"
  },
  {
    "label": "is_directory()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_directory()"
  },
  {
    "label": "is_directory()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_directory(error_code& __ec)"
  },
  {
    "label": "is_fifo()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_fifo()"
  },
  {
    "label": "is_fifo()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_fifo(error_code& __ec)"
  },
  {
    "label": "is_other()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_other()"
  },
  {
    "label": "is_other()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_other(error_code& __ec)"
  },
  {
    "label": "is_regular_file()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_regular_file()"
  },
  {
    "label": "is_regular_file()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_regular_file(error_code& __ec)"
  },
  {
    "label": "is_socket()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_socket()"
  },
  {
    "label": "is_socket()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_socket(error_code& __ec)"
  },
  {
    "label": "is_symlink()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_symlink()"
  },
  {
    "label": "is_symlink()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "is_symlink(error_code& __ec)"
  },
  {
    "label": "file_size()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY uintmax_t)",
    "insertText": "file_size()"
  },
  {
    "label": "file_size()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY uintmax_t)",
    "insertText": "file_size(error_code& __ec)"
  },
  {
    "label": "hard_link_count()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY uintmax_t)",
    "insertText": "hard_link_count()"
  },
  {
    "label": "hard_link_count()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY uintmax_t)",
    "insertText": "hard_link_count(error_code& __ec)"
  },
  {
    "label": "last_write_time()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_time_type)",
    "insertText": "last_write_time()"
  },
  {
    "label": "last_write_time()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_time_type)",
    "insertText": "last_write_time(error_code& __ec)"
  },
  {
    "label": "status()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_status)",
    "insertText": "status()"
  },
  {
    "label": "status()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_status)",
    "insertText": "status(error_code& __ec)"
  },
  {
    "label": "symlink_status()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_status)",
    "insertText": "symlink_status()"
  },
  {
    "label": "symlink_status()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_status)",
    "insertText": "symlink_status(error_code& __ec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(directory_entry const& __rhs)"
  },
  {
    "label": "__cached_data()",
    "kind": "Method",
    "detail": "Function (} private : class directory_iterator ; class recursive_directory_iterator ; class _LIBCPP_HIDDEN __dir_stream ; enum _CacheType : unsigned char { _Empty,_IterSymlink,_IterNonSymlink,_RefreshSymlink,_RefreshSymlinkUnresolved,_RefreshNonSymlink } ; struct __cached_data { uintmax_t __size_ ; uintmax_t __nlink_ ; file_time_type __write_time_ ; perms __sym_perms_ ; perms __non_sym_perms_ ; file_type __type_ ; _CacheType __cache_type_ ; _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "__cached_data()"
  },
  {
    "label": "__reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__reset()"
  },
  {
    "label": "uintmax_t()",
    "kind": "Method",
    "detail": "Function (__cache_type_ = _Empty ; __type_ = file_type::none ; __sym_perms_ = __non_sym_perms_ = perms::unknown ; __size_ = __nlink_ =)",
    "insertText": "uintmax_t(-1)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__write_time_ =)",
    "insertText": "min()"
  },
  {
    "label": "__create_iter_result()",
    "kind": "Method",
    "detail": "Function (} } ; _LIBCPP_INLINE_VISIBILITY __cached_data)",
    "insertText": "__create_iter_result(file_type __ft)"
  },
  {
    "label": "__cache_type_()",
    "kind": "Method",
    "detail": "Function (__cached_data __data ; __data . __type_ = __ft ; __data .)",
    "insertText": "__cache_type_()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (__p_ =)",
    "insertText": "move(__p)"
  },
  {
    "label": "__do_refresh()",
    "kind": "Method",
    "detail": "Function (__data_ = __dt ; } _LIBCPP_FUNC_VIS error_code)",
    "insertText": "__do_refresh()"
  },
  {
    "label": "__is_dne_error()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "__is_dne_error(error_code const& __ec)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* __dest_ec = __ec ; return ; })",
    "insertText": "if(__ec && (!__allow_dne || !__is_dne_error(__ec))) __throw_filesystem_error(__msg, __p_, __ec)"
  },
  {
    "label": "__refresh()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "__refresh(error_code* __ec = nullptr)"
  },
  {
    "label": "__handle_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__handle_error(\"in directory_entry::refresh\", __ec, __do_refresh(), true)"
  },
  {
    "label": "__get_sym_ft()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_type)",
    "insertText": "__get_sym_ft(error_code* __ec = nullptr)"
  },
  {
    "label": "__get_ft()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_type)",
    "insertText": "__get_ft(error_code* __ec = nullptr)"
  },
  {
    "label": "__get_status()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_status)",
    "insertText": "__get_status(error_code* __ec = nullptr)"
  },
  {
    "label": "__libcpp_unreachable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__libcpp_unreachable()"
  },
  {
    "label": "__get_symlink_status()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_status)",
    "insertText": "__get_symlink_status(error_code* __ec = nullptr)"
  },
  {
    "label": "__get_size()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY uintmax_t)",
    "insertText": "__get_size(error_code* __ec = nullptr)"
  },
  {
    "label": "__handle_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__handle_error(\"in directory_entry::file_size\", __ec, __m_ec)"
  },
  {
    "label": "is_directory()",
    "kind": "Method",
    "detail": "Function (errc __err_kind =)",
    "insertText": "is_directory(__st)"
  },
  {
    "label": "__handle_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__handle_error(\"in directory_entry::file_size\", __ec, make_error_code(__err_kind))"
  },
  {
    "label": "__get_nlink()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY uintmax_t)",
    "insertText": "__get_nlink(error_code* __ec = nullptr)"
  },
  {
    "label": "__handle_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__handle_error(\"in directory_entry::hard_link_count\", __ec, __m_ec)"
  },
  {
    "label": "__get_write_time()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY file_time_type)",
    "insertText": "__get_write_time(error_code* __ec = nullptr)"
  },
  {
    "label": "__handle_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__handle_error(\"in directory_entry::last_write_time\", __ec, __m_ec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : _Path __p_ ; __cached_data __data_ ; } ; class __dir_element_proxy { public : _LIBCPP_INLINE_VISIBILITY directory_entry)",
    "insertText": "operator()"
  },
  {
    "label": "__dir_element_proxy()",
    "kind": "Method",
    "detail": "Function (} private : class directory_iterator ; class recursive_directory_iterator ;)",
    "insertText": "__dir_element_proxy(directory_entry const& __e) : __elem_(__e)"
  },
  {
    "label": "__dir_element_proxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__dir_element_proxy(__dir_element_proxy&& __o) : __elem_(_VSTD::move(__o.__elem_))"
  }
]