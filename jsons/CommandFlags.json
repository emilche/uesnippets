[
  {
    "label": "MArch()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_COMMANDFLAGS_H # define LLVM_CODEGEN_COMMANDFLAGS_H # include \" llvm / ADT / StringExtras . h \" # include \" llvm / IR / Instructions . h \" # include \" llvm / IR / Intrinsics . h \" # include \" llvm / IR / Module . h \" # include \" llvm / MC / MCTargetOptionsCommandFlags . h \" # include \" llvm # include \" llvm / Support / CodeGen . h \" # include \" llvm / Support / CommandLine . h \" # include \" llvm / Support / Host . h \" # include \" llvm / Target / TargetMachine . h \" # include \" llvm / Target / TargetOptions . h \" # include \" llvm / Target / TargetRecip . h \" # include<string> using namespace llvm ; cl::opt<std::string>)",
    "insertText": "MArch(\"march\", cl::desc(\"Architecture to generate code for (see --version)\"))"
  },
  {
    "label": "MCPU()",
    "kind": "Method",
    "detail": "Function (cl::opt<std::string>)",
    "insertText": "MCPU(\"mcpu\", cl::desc(\"Target a specific cpu type (-mcpu=help for details)\"), cl::value_desc(\"cpu-name\"), cl::init(\"\"))"
  },
  {
    "label": "MAttrs()",
    "kind": "Method",
    "detail": "Function (cl::list<std::string>)",
    "insertText": "MAttrs(\"mattr\", cl::CommaSeparated, cl::desc(\"Target specific attributes (-mattr=help for details)\"), cl::value_desc(\"a1,+a2,-a3,...\"))"
  },
  {
    "label": "RelocModel()",
    "kind": "Method",
    "detail": "Function (cl::opt<Reloc::Model>)",
    "insertText": "RelocModel(\"relocation-model\", cl::desc(\"Choose relocation model\"), cl::init(Reloc::Default), cl::values( clEnumValN(Reloc::Default, \"default\", \"Target default relocation model\"), clEnumValN(Reloc::Static, \"static\", \"Non-relocatable code\"), clEnumValN(Reloc::PIC_, \"pic\", \"Fully relocatable, position independent code\"), clEnumValN(Reloc::DynamicNoPIC, \"dynamic-no-pic\", \"Relocatable external references, non-relocatable code\"), clEnumValEnd))"
  },
  {
    "label": "TMModel()",
    "kind": "Method",
    "detail": "Function (cl::opt<ThreadModel::Model>)",
    "insertText": "TMModel(\"thread-model\", cl::desc(\"Choose threading model\"), cl::init(ThreadModel::POSIX), cl::values(clEnumValN(ThreadModel::POSIX, \"posix\", \"POSIX thread model\"), clEnumValN(ThreadModel::Single, \"single\", \"Single thread model\"), clEnumValEnd))"
  },
  {
    "label": "CMModel()",
    "kind": "Method",
    "detail": "Function (cl::opt<llvm::CodeModel::Model>)",
    "insertText": "CMModel(\"code-model\", cl::desc(\"Choose code model\"), cl::init(CodeModel::Default), cl::values(clEnumValN(CodeModel::Default, \"default\", \"Target default code model\"), clEnumValN(CodeModel::Small, \"small\", \"Small code model\"), clEnumValN(CodeModel::Kernel, \"kernel\", \"Kernel code model\"), clEnumValN(CodeModel::Medium, \"medium\", \"Medium code model\"), clEnumValN(CodeModel::Large, \"large\", \"Large code model\"), clEnumValEnd))"
  },
  {
    "label": "FileType()",
    "kind": "Method",
    "detail": "Function (cl::opt<TargetMachine::CodeGenFileType>)",
    "insertText": "FileType(\"filetype\", cl::init(TargetMachine::CGFT_AssemblyFile), cl::desc(\"Choose a file type (not all types are supported by all targets):\"), cl::values( clEnumValN(TargetMachine::CGFT_AssemblyFile, \"asm\", \"Emit an assembly ('.s') file\"), clEnumValN(TargetMachine::CGFT_ObjectFile, \"obj\", \"Emit a native object ('.o') file\"), clEnumValN(TargetMachine::CGFT_Null, \"null\", \"Emit nothing, for performance testing\"), clEnumValEnd))"
  },
  {
    "label": "EnableFPMAD()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "EnableFPMAD(\"enable-fp-mad\", cl::desc(\"Enable less precise MAD instructions to be generated\"), cl::init(false))"
  },
  {
    "label": "DisableFPElim()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "DisableFPElim(\"disable-fp-elim\", cl::desc(\"Disable frame pointer elimination optimization\"), cl::init(false))"
  },
  {
    "label": "EnableUnsafeFPMath()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "EnableUnsafeFPMath(\"enable-unsafe-fp-math\", cl::desc(\"Enable optimizations that may decrease FP precision\"), cl::init(false))"
  },
  {
    "label": "EnableNoInfsFPMath()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "EnableNoInfsFPMath(\"enable-no-infs-fp-math\", cl::desc(\"Enable FP math optimizations that assume no +-Infs\"), cl::init(false))"
  },
  {
    "label": "EnableNoNaNsFPMath()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "EnableNoNaNsFPMath(\"enable-no-nans-fp-math\", cl::desc(\"Enable FP math optimizations that assume no NaNs\"), cl::init(false))"
  },
  {
    "label": "EnableHonorSignDependentRoundingFPMath()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "EnableHonorSignDependentRoundingFPMath(\"enable-sign-dependent-rounding-fp-math\", cl::Hidden, cl::desc(\"Force codegen to assume rounding mode can change dynamically\"), cl::init(false))"
  },
  {
    "label": "FloatABIForCalls()",
    "kind": "Method",
    "detail": "Function (cl::opt<llvm::FloatABI::ABIType>)",
    "insertText": "FloatABIForCalls(\"float-abi\", cl::desc(\"Choose float ABI type\"), cl::init(FloatABI::Default), cl::values( clEnumValN(FloatABI::Default, \"default\", \"Target default float ABI type\"), clEnumValN(FloatABI::Soft, \"soft\", \"Soft float ABI (implied by -soft-float)\"), clEnumValN(FloatABI::Hard, \"hard\", \"Hard float ABI (uses FP registers)\"), clEnumValEnd))"
  },
  {
    "label": "FuseFPOps()",
    "kind": "Method",
    "detail": "Function (cl::opt<llvm::FPOpFusion::FPOpFusionMode>)",
    "insertText": "FuseFPOps(\"fp-contract\", cl::desc(\"Enable aggressive formation of fused FP ops\"), cl::init(FPOpFusion::Standard), cl::values( clEnumValN(FPOpFusion::Fast, \"fast\", \"Fuse FP ops whenever profitable\"), clEnumValN(FPOpFusion::Standard, \"on\", \"Only fuse 'blessed' FP ops.\"), clEnumValN(FPOpFusion::Strict, \"off\", \"Only fuse FP ops when the result won't be affected.\"), clEnumValEnd))"
  },
  {
    "label": "ReciprocalOps()",
    "kind": "Method",
    "detail": "Function (cl::list<std::string>)",
    "insertText": "ReciprocalOps(\"recip\", cl::CommaSeparated, cl::desc(\"Choose reciprocal operation types and parameters.\"), cl::value_desc(\"all,none,default,divf,!vec-sqrtd,vec-divd:0,sqrt:9...\"))"
  },
  {
    "label": "DontPlaceZerosInBSS()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "DontPlaceZerosInBSS(\"nozero-initialized-in-bss\", cl::desc(\"Don't place zero-initialized symbols into bss section\"), cl::init(false))"
  },
  {
    "label": "EnableGuaranteedTailCallOpt()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "EnableGuaranteedTailCallOpt(\"tailcallopt\", cl::desc(\"Turn fastcc calls into tail calls by (potentially) changing ABI.\"), cl::init(false))"
  },
  {
    "label": "DisableTailCalls()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "DisableTailCalls(\"disable-tail-calls\", cl::desc(\"Never emit tail calls\"), cl::init(false))"
  },
  {
    "label": "OverrideStackAlignment()",
    "kind": "Method",
    "detail": "Function (cl::opt<unsigned>)",
    "insertText": "OverrideStackAlignment(\"stack-alignment\", cl::desc(\"Override default stack alignment\"), cl::init(0))"
  },
  {
    "label": "TrapFuncName()",
    "kind": "Method",
    "detail": "Function (cl::opt<std::string>)",
    "insertText": "TrapFuncName(\"trap-func\", cl::Hidden, cl::desc(\"Emit a call to trap function rather than a trap instruction\"), cl::init(\"\"))"
  },
  {
    "label": "EnablePIE()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "EnablePIE(\"enable-pie\", cl::desc(\"Assume the creation of a position independent executable.\"), cl::init(false))"
  },
  {
    "label": "UseCtors()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "UseCtors(\"use-ctors\", cl::desc(\"Use .ctors instead of .init_array.\"), cl::init(false))"
  },
  {
    "label": "StopAfter()",
    "kind": "Method",
    "detail": "Function (cl::opt<std::string>)",
    "insertText": "StopAfter(\"stop-after\", cl::desc(\"Stop compilation after a specific pass\"), cl::value_desc(\"pass-name\"), cl::init(\"\"))"
  },
  {
    "label": "StartAfter()",
    "kind": "Method",
    "detail": "Function (cl::opt<std::string>)",
    "insertText": "StartAfter(\"start-after\", cl::desc(\"Resume compilation after a specific pass\"), cl::value_desc(\"pass-name\"), cl::init(\"\"))"
  },
  {
    "label": "RunPass()",
    "kind": "Method",
    "detail": "Function (cl::opt<std::string>)",
    "insertText": "RunPass(\"run-pass\", cl::desc(\"Run compiler only for one specific pass\"), cl::value_desc(\"pass-name\"), cl::init(\"\"))"
  },
  {
    "label": "DataSections()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "DataSections(\"data-sections\", cl::desc(\"Emit data into separate sections\"), cl::init(false))"
  },
  {
    "label": "FunctionSections()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "FunctionSections(\"function-sections\", cl::desc(\"Emit functions into separate sections\"), cl::init(false))"
  },
  {
    "label": "UniqueSectionNames()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "UniqueSectionNames(\"unique-section-names\", cl::desc(\"Give unique names to every section\"), cl::init(true))"
  },
  {
    "label": "JTableType()",
    "kind": "Method",
    "detail": "Function (cl::opt<llvm::JumpTable::JumpTableType>)",
    "insertText": "JTableType(\"jump-table-type\", cl::desc(\"Choose the type of Jump-Instruction Table for jumptable.\"), cl::init(JumpTable::Single), cl::values( clEnumValN(JumpTable::Single, \"single\", \"Create a single table for all jumptable functions\"), clEnumValN(JumpTable::Arity, \"arity\", \"Create one table per number of parameters.\"), clEnumValN(JumpTable::Simplified, \"simplified\", \"Create one table per simplified function type.\"), clEnumValN(JumpTable::Full, \"full\", \"Create one table per unique function type.\"), clEnumValEnd))"
  },
  {
    "label": "InitTargetOptionsFromCodeGenFlags()",
    "kind": "Method",
    "detail": "Function (TargetOptions)",
    "insertText": "InitTargetOptionsFromCodeGenFlags()"
  },
  {
    "label": "TargetRecip()",
    "kind": "Method",
    "detail": "Function (TargetOptions Options ; Options . LessPreciseFPMADOption = EnableFPMAD ; Options . AllowFPOpFusion = FuseFPOps ; Options . Reciprocals =)",
    "insertText": "TargetRecip(ReciprocalOps)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Options . UnsafeFPMath = EnableUnsafeFPMath ; Options . NoInfsFPMath = EnableNoInfsFPMath ; Options . NoNaNsFPMath = EnableNoNaNsFPMath ; Options . HonorSignDependentRoundingFPMathOption = EnableHonorSignDependentRoundingFPMath ;)",
    "insertText": "if(FloatABIForCalls != FloatABI::Default)"
  },
  {
    "label": "InitMCTargetOptionsFromFlags()",
    "kind": "Method",
    "detail": "Function (Options . NoZerosInBSS = DontPlaceZerosInBSS ; Options . GuaranteedTailCallOpt = EnableGuaranteedTailCallOpt ; Options . StackAlignmentOverride = OverrideStackAlignment ; Options . PositionIndependentExecutable = EnablePIE ; Options . UseInitArray = ! UseCtors ; Options . DataSections = DataSections ; Options . FunctionSections = FunctionSections ; Options . UniqueSectionNames = UniqueSectionNames ; Options . MCOptions =)",
    "insertText": "InitMCTargetOptionsFromFlags()"
  },
  {
    "label": "getCPUStr()",
    "kind": "Method",
    "detail": "Function (Options . JTType = JTableType ; Options . ThreadModel = TMModel ; return Options ; } std::string)",
    "insertText": "getCPUStr()"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (# if 1 return)",
    "insertText": "string()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else SubtargetFeatures Features ;)",
    "insertText": "if(MCPU == \"native\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringMap<bool> HostFeatures ;)",
    "insertText": "if(sys::getHostCPUFeatures(HostFeatures)) for (auto &F : HostFeatures) Features.AddFeature(F.first(), F.second)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(unsigned i = 0; i != MAttrs.size(); ++i) Features.AddFeature(MAttrs[i])"
  },
  {
    "label": "setFunctionAttributes()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "setFunctionAttributes(StringRef CPU, StringRef Features, Module &M)"
  },
  {
    "label": "getContext()",
    "kind": "Method",
    "detail": "Function (auto& Ctx = F .)",
    "insertText": "getContext()"
  },
  {
    "label": "getAttributes()",
    "kind": "Method",
    "detail": "Function (AttributeSet Attrs = F .)",
    "insertText": "getAttributes()"
  },
  {
    "label": "addAttributes()",
    "kind": "Method",
    "detail": "Function (NewAttrs = Attrs .)",
    "insertText": "addAttributes(Ctx, AttributeSet::FunctionIndex, NewAttrs)"
  },
  {
    "label": "setAttributes()",
    "kind": "Method",
    "detail": "Function (F .)",
    "insertText": "setAttributes(NewAttrs)"
  }
]