[
  {
    "label": "TRACESERVICES_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRACESERVICES_API"
  },
  {
    "label": "FRegionProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegionProvider"
  },
  {
    "label": "infinity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Common / PagedArray . h \" # include \" HAL / Platform . h \" # include \" Templates / Function . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { struct FTimeRegion { double BeginTime = std::numeric_limits<double)",
    "insertText": "infinity()"
  },
  {
    "label": "FRegionLane()",
    "kind": "Method",
    "detail": "Function (const TCHAR* Text = nullptr ; uint64 Id = 0 ; int32 Depth = - 1 ; } ; class FRegionLane { class FRegionProvider ; public :)",
    "insertText": "FRegionLane(ILinearAllocator& InAllocator) : Regions(InAllocator, 512)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "EnumerateRegions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EnumerateRegions(double IntervalStart, double IntervalEnd, TFunctionRef<bool(const FTimeRegion&)> Callback)"
  },
  {
    "label": "IRegionProvider()",
    "kind": "Method",
    "detail": "Function (private : TPagedArray<FTimeRegion> Regions ; } ; class IRegionProvider : public IProvider { public : ~)",
    "insertText": "IRegionProvider()"
  },
  {
    "label": "GetRegionCount()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetRegionCount()"
  },
  {
    "label": "GetLaneCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLaneCount()"
  },
  {
    "label": "GetLane()",
    "kind": "Method",
    "detail": "Function (const FRegionLane*)",
    "insertText": "GetLane(int32 Index)"
  },
  {
    "label": "EnumerateLanes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateLanes(TFunctionRef<void(const FRegionLane&, const int32)> Callback)"
  },
  {
    "label": "GetUpdateCounter()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetUpdateCounter()"
  },
  {
    "label": "IEditableRegionProvider()",
    "kind": "Method",
    "detail": "Function (} ; class IEditableRegionProvider : public IEditableProvider { public : ~)",
    "insertText": "IEditableRegionProvider()"
  },
  {
    "label": "AppendRegionBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRegionBegin(const TCHAR* Name, double Time)"
  },
  {
    "label": "AppendRegionBeginWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRegionBeginWithId(const TCHAR* Name, uint64 Id, double Time)"
  },
  {
    "label": "AppendRegionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRegionEnd(const TCHAR* Name, double Time)"
  },
  {
    "label": "AppendRegionEndWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRegionEndWithId(const uint64 Id, double Time)"
  },
  {
    "label": "OnAnalysisSessionEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisSessionEnded()"
  },
  {
    "label": "GetRegionProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetRegionProviderName()"
  },
  {
    "label": "ReadRegionProvider()",
    "kind": "Method",
    "detail": "Function (const IRegionProvider&)",
    "insertText": "ReadRegionProvider(const IAnalysisSession& Session)"
  },
  {
    "label": "EditRegionProvider()",
    "kind": "Method",
    "detail": "Function (IEditableRegionProvider&)",
    "insertText": "EditRegionProvider(IAnalysisSession& Session)"
  }
]