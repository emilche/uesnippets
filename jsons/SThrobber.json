[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SThrobber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SThrobber"
  },
  {
    "label": "EAnimation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAnimation"
  },
  {
    "label": "SCircularThrobber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCircularThrobber"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Animation / CurveHandle . h \" # include \" Animation / CurveSequence . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SLeafWidget . h \" # include \" Styling / CoreStyle . h \" class FPaintArgs ; class FSlateWindowElementList ; class SHorizontalBox ; class SThrobber : public SCompoundWidget { const int32 DefaultNumPieces = 3 ; public : enum EAnimation { Vertical = 0 x1<<0,Horizontal = 0 x1<<1,Opacity = 0 x1<<2,VerticalAndOpacity = Vertical | Opacity,All = Vertical | Horizontal | Opacity,None = 0 x0 } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SThrobber) : _PieceImage( FCoreStyle::Get().GetBrush( \"Throbber.Chunk\" ) ) , _NumPieces( DefaultNumPieces ) , _Animate( SThrobber::All)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(const FSlateBrush*, PieceImage ) SLATE_ARGUMENT( int32, NumPieces ) SLATE_ARGUMENT( EAnimation, Animate ) SLATE_END_ARGS() SLATE_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetPieceImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPieceImage(const FSlateBrush* InPieceImage)"
  },
  {
    "label": "InvalidatePieceImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePieceImage()"
  },
  {
    "label": "SetNumPieces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumPieces(int InNumPieces)"
  },
  {
    "label": "SetAnimate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnimate(EAnimation InAnimate)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "GetPieceScale()",
    "kind": "Method",
    "detail": "Function (private : FVector2D)",
    "insertText": "GetPieceScale(int32 PieceIndex)"
  },
  {
    "label": "GetPieceColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetPieceColor(int32 PieceIndex)"
  },
  {
    "label": "ConstructPieces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructPieces()"
  },
  {
    "label": "GetPieceBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetPieceBrush()"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (private : FCurveSequence AnimCurves ; TArray<FCurveHandle,TInlineAllocator<DefaultNumPieces>> ThrobberCurve ; TSharedPtr<SHorizontalBox> HBox ; const FSlateBrush* PieceImage ; int32 NumPieces ; EAnimation Animate ; } ; class SCircularThrobber : public SLeafWidget {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SCircularThrobber, SLeafWidget, SLATE_API)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SCircularThrobber) : _PieceImage( FCoreStyle::Get().GetBrush( \"Throbber.CircleChunk\" ) ) , _NumPieces( 6 ) , _Period( 0.75f ) , _Radius( 16.f)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(const FSlateBrush*, PieceImage ) SLATE_ARGUMENT( int32, NumPieces ) SLATE_ARGUMENT( float, Period ) SLATE_ARGUMENT( float, Radius ) SLATE_ATTRIBUTE(FSlateColor, ColorAndOpacity) SLATE_END_ARGS() SLATE_API SCircularThrobber()"
  },
  {
    "label": "SCircularThrobber()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SCircularThrobber()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetNumPieces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumPieces(int32 InNumPieces)"
  },
  {
    "label": "SetPeriod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPeriod(float InPeriod)"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(float InRadius)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ConstructSequence()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ConstructSequence()"
  }
]