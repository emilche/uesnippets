[
  {
    "label": "FSuspensionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSuspensionConstraint"
  },
  {
    "label": "FPBDRigidsEvolutionGBF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsEvolutionGBF"
  },
  {
    "label": "FSuspensionConstraintPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSuspensionConstraintPhysicsProxy"
  },
  {
    "label": "FSuspensionConstraintPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / Framework / MultiBufferResource . h \" # include \" Chaos / Framework / PhysicsProxy . h \" # include \" Chaos / PBDSuspensionConstraints . h \" # include \" Chaos / GeometryParticlesfwd . h \" # include \" Chaos / ParticleHandle . h \" # include \" PhysicsCoreTypes . h \" # include \" Chaos / Defines . h \" # include \" Chaos / PBDConstraintBaseData . h \" namespace Chaos { class FSuspensionConstraint ; class FPBDRigidsEvolutionGBF ; class FSuspensionConstraintPhysicsProxy : public IPhysicsProxyBase { public : using Base = IPhysicsProxyBase ;)",
    "insertText": "FSuspensionConstraintPhysicsProxy()"
  },
  {
    "label": "FSuspensionConstraintPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSuspensionConstraintPhysicsProxy(FSuspensionConstraint* InConstraint, FPBDSuspensionConstraintHandle* InHandle, UObject* InOwner = nullptr)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetParticleHandleFromProxy()",
    "kind": "Method",
    "detail": "Function (bInitialized = true ; } FGeometryParticleHandle*)",
    "insertText": "GetParticleHandleFromProxy(IPhysicsProxyBase* ProxyBase)"
  },
  {
    "label": "InitializeOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOnPhysicsThread(FPBDRigidsSolver* InSolver, FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "PushStateOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStateOnGameThread(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "PushStateOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushStateOnPhysicsThread(FPBDRigidsSolver* InSolver, const FDirtyPropertiesManager& Manager, int32 DataIdx, const FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "DestroyOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOnGameThread()"
  },
  {
    "label": "DestroyOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyOnPhysicsThread(FPBDRigidsSolver* InSolver)"
  },
  {
    "label": "UpdateTargetOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTargetOnPhysicsThread(FPBDRigidsSolver* InSolver, const FVector& TargetPos, const FVector& Normal, bool Enabled)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (FPBDSuspensionConstraintHandle*)",
    "insertText": "GetHandle()"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (Constraint_PT = InHandle ; } FSuspensionConstraint*)",
    "insertText": "GetConstraint()"
  }
]