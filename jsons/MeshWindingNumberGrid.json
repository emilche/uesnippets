[
  {
    "label": "TriangleMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangleMeshType"
  },
  {
    "label": "TMeshWindingNumberGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMeshWindingNumberGrid"
  },
  {
    "label": "EComputeModes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EComputeModes"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MathUtil . h \" # include \" MeshQueries . h \" # include \" Spatial / MeshAABBTree3 . h \" # include \" Spatial / FastWinding . h \" # include \" Implicit / SweepingMeshSDF . h \" # include \" Util / MeshCaches . h \" # include \" MatrixTypes . h \" namespace UE { namespace Geometry { template<class TriangleMeshType> class TMeshWindingNumberGrid { public : const TriangleMeshType* Mesh ; TFastWindingTree<TriangleMeshType>* FastWinding ; double CellSize ; int BufferCells = 1 ; enum EComputeModes { FullGrid = 0,NarrowBand = 1 } ; EComputeModes ComputeMode = EComputeModes::NarrowBand ; float WindingIsoValue = 0 . 5 f ; bool bWantMeshSDFGrid = true ; TFunction<)",
    "insertText": "bool()> CancelF = []()"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Compute()"
  },
  {
    "label": "GetTree()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d bounds = FastWinding ->)",
    "insertText": "GetTree()->GetBoundingBox()"
  },
  {
    "label": "GridOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridOrigin(FVector3f)bounds.Min - fBufferWidth * FVector3f::One()"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "max(FVector3f)bounds.Max + fBufferWidth * FVector3f::One()"
  },
  {
    "label": "ni()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ni(int)((max.X - GridOrigin.X) / (float)CellSize)"
  },
  {
    "label": "nj()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "nj(int)((max.Y - GridOrigin.Y) / (float)CellSize)"
  },
  {
    "label": "nk()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "nk(int)((max.Z - GridOrigin.Z) / (float)CellSize)"
  },
  {
    "label": "make_grid_dense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "make_grid_dense(GridOrigin, (float)CellSize, ni, nj, nk, WindingGrid)"
  },
  {
    "label": "make_grid()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "make_grid(GridOrigin, (float)CellSize, ni, nj, nk, WindingGrid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!bWantMeshSDFGrid)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (MeshSDF .)",
    "insertText": "Empty()"
  },
  {
    "label": "Dimensions()",
    "kind": "Method",
    "detail": "Function (} } FVector3i)",
    "insertText": "Dimensions()"
  },
  {
    "label": "At()",
    "kind": "Method",
    "detail": "Function (} const float&)",
    "insertText": "At(int I, int J, int K)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetValue(const FVector3i& IJK)"
  },
  {
    "label": "make_grid()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "make_grid(FVector3f origin, float dx, int ni, int nj, int nk, FDenseGrid3f& winding)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (winding .)",
    "insertText": "Resize(ni, nj, nk)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (winding .)",
    "insertText": "Assign(FMathf::MaxReal)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (FastWinding ->)",
    "insertText": "Build(false)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (MeshSDF . bComputeSigns = false ; MeshSDF . CancelF = CancelF ; MeshSDF .)",
    "insertText": "Compute(FastWinding->GetTree()->GetBoundingBox())"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(nj*nk, [this, origin, dx, ni, nj, nk, &winding, &distances](int LinearJK) { if (CancelF()) { return; } int J = LinearJK % nj, K = LinearJK / nj; int StartIdx = ni * (J + nj * K); for (int I = 0; I < ni; ++I) { int LinearIdx = StartIdx + I; float dist = distances[LinearIdx]; if (dist < CellSize) { FVector3d gx((float)I * dx + origin[0], (float)J * dx + origin[1], (float)K * dx + origin[2]); winding[LinearIdx] = (float)FastWinding->FastWindingNumber(gx); } } })"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (bounds . Max - =)",
    "insertText": "One()"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (TArray<bool> bits ; bits .)",
    "insertText": "SetNumZeroed(winding.Size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<int> cur_front ;)",
    "insertText": "for(int32 LinearIdx = 0; LinearIdx < bits.Num(); LinearIdx++)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (cur_front .)",
    "insertText": "Add(LinearIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bits [ LinearIdx ] = true ; } })",
    "insertText": "if(CancelF())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "for(int LinearIdx : queue)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bits [ LinearIdx ] = true ; } cur_front .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (cur_front .)",
    "insertText": "Add(idx)"
  },
  {
    "label": "make_grid_dense()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "make_grid_dense(FVector3f origin, float dx, int ni, int nj, int nk, FDenseGrid3f& winding)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (bool abort = false ;)",
    "insertText": "ParallelFor(winding.Size(), [this, origin, dx, &winding, &abort](int LinearIdx) { if (LinearIdx % 100 == 0) { abort = CancelF(); } if (abort) { return; } FVector3i ijk = winding.ToIndex(LinearIdx); FVector3d gx((double)ijk.X * dx + origin[0], (double)ijk.Y * dx + origin[1], (double)ijk.Z * dx + origin[2]); winding[LinearIdx] = (float)FastWinding->FastWindingNumber(gx); })"
  },
  {
    "label": "fill_spans()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "fill_spans(int ni, int nj, int nk, FDenseGrid3f& winding)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(nj*nk, [this, ni, nj, nk, &winding](int LinearJK) { int J = LinearJK % nj, K = LinearJK / nj; int StartIdx = ni * (J + nj * K); float last = winding[StartIdx]; if (last == FMathf::MaxReal) { last = 0; } for (int I = 0; I < ni; ++I) { int LinearIdx = I + StartIdx; if (winding[LinearIdx] == FMathf::MaxReal) { winding[LinearIdx] = last; } else { last = winding[LinearIdx]; if (last < WindingIsoValue) { last = 0; } } } })"
  }
]