[
  {
    "label": "SigslotTester0",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SigslotTester0"
  },
  {
    "label": "A1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A1"
  },
  {
    "label": "C1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C1"
  },
  {
    "label": "SigslotTester1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SigslotTester1"
  },
  {
    "label": "A2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A2"
  },
  {
    "label": "C2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C2"
  },
  {
    "label": "SigslotTester2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SigslotTester2"
  },
  {
    "label": "A3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A3"
  },
  {
    "label": "C3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C3"
  },
  {
    "label": "SigslotTester3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SigslotTester3"
  },
  {
    "label": "A4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A4"
  },
  {
    "label": "C4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C4"
  },
  {
    "label": "SigslotTester4",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SigslotTester4"
  },
  {
    "label": "A5",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A5"
  },
  {
    "label": "C5",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "C5"
  },
  {
    "label": "SigslotTester5",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SigslotTester5"
  },
  {
    "label": "SigslotTester0()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SIGSLOT_TESTER_H_ # define RTC_BASE_SIGSLOT_TESTER_H_ # include \" rtc_base / third_party / sigslot / sigslot . h \" namespace rtc { class SigslotTester0 : public sigslot::has_slots<> { public :)",
    "insertText": "SigslotTester0(sigslot::signal0<>* signal) : callback_count_(0)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (signal ->)",
    "insertText": "connect(this, &SigslotTester0::OnSignalCallback)"
  },
  {
    "label": "SigslotTester0()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SigslotTester0(const SigslotTester0&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SigslotTester0&)",
    "insertText": "operator(const SigslotTester0&)"
  },
  {
    "label": "callback_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "callback_count()"
  },
  {
    "label": "SigslotTester1()",
    "kind": "Method",
    "detail": "Function (callback_count_ + + ; } int callback_count_ ; } ; template<class A1,class C1> class SigslotTester1 : public sigslot::has_slots<> { public :)",
    "insertText": "SigslotTester1(sigslot::signal1<A1>* signal, C1* capture1) : callback_count_(0), capture1_(capture1)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (signal ->)",
    "insertText": "connect(this, &SigslotTester1::OnSignalCallback)"
  },
  {
    "label": "SigslotTester1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SigslotTester1(const SigslotTester1&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SigslotTester1&)",
    "insertText": "operator(const SigslotTester1&)"
  },
  {
    "label": "SigslotTester2()",
    "kind": "Method",
    "detail": "Function (callback_count_ + + ;* capture1_ = arg1 ; } int callback_count_ ; C1* capture1_ ; } ; template<class A1,class A2,class C1,class C2> class SigslotTester2 : public sigslot::has_slots<> { public :)",
    "insertText": "SigslotTester2(sigslot::signal2<A1, A2>* signal, C1* capture1, C2* capture2) : callback_count_(0), capture1_(capture1), capture2_(capture2)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (signal ->)",
    "insertText": "connect(this, &SigslotTester2::OnSignalCallback)"
  },
  {
    "label": "SigslotTester2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SigslotTester2(const SigslotTester2&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SigslotTester2&)",
    "insertText": "operator(const SigslotTester2&)"
  },
  {
    "label": "SigslotTester3()",
    "kind": "Method",
    "detail": "Function (callback_count_ + + ;* capture1_ = arg1 ;* capture2_ = arg2 ; } int callback_count_ ; C1* capture1_ ; C2* capture2_ ; } ; template<class A1,class A2,class A3,class C1,class C2,class C3> class SigslotTester3 : public sigslot::has_slots<> { public :)",
    "insertText": "SigslotTester3(sigslot::signal3<A1, A2, A3>* signal, C1* capture1, C2* capture2, C3* capture3) : callback_count_(0), capture1_(capture1), capture2_(capture2), capture3_(capture3)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (signal ->)",
    "insertText": "connect(this, &SigslotTester3::OnSignalCallback)"
  },
  {
    "label": "SigslotTester3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SigslotTester3(const SigslotTester3&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SigslotTester3&)",
    "insertText": "operator(const SigslotTester3&)"
  },
  {
    "label": "SigslotTester4()",
    "kind": "Method",
    "detail": "Function (callback_count_ + + ;* capture1_ = arg1 ;* capture2_ = arg2 ;* capture3_ = arg3 ; } int callback_count_ ; C1* capture1_ ; C2* capture2_ ; C3* capture3_ ; } ; template<class A1,class A2,class A3,class A4,class C1,class C2,class C3,class C4> class SigslotTester4 : public sigslot::has_slots<> { public :)",
    "insertText": "SigslotTester4(sigslot::signal4<A1, A2, A3, A4>* signal, C1* capture1, C2* capture2, C3* capture3, C4* capture4) : callback_count_(0), capture1_(capture1), capture2_(capture2), capture3_(capture3), capture4_(capture4)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (signal ->)",
    "insertText": "connect(this, &SigslotTester4::OnSignalCallback)"
  },
  {
    "label": "SigslotTester4()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SigslotTester4(const SigslotTester4&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SigslotTester4&)",
    "insertText": "operator(const SigslotTester4&)"
  },
  {
    "label": "SigslotTester5()",
    "kind": "Method",
    "detail": "Function (callback_count_ + + ;* capture1_ = arg1 ;* capture2_ = arg2 ;* capture3_ = arg3 ;* capture4_ = arg4 ; } int callback_count_ ; C1* capture1_ ; C2* capture2_ ; C3* capture3_ ; C4* capture4_ ; } ; template<class A1,class A2,class A3,class A4,class A5,class C1,class C2,class C3,class C4,class C5> class SigslotTester5 : public sigslot::has_slots<> { public :)",
    "insertText": "SigslotTester5(sigslot::signal5<A1, A2, A3, A4, A5>* signal, C1* capture1, C2* capture2, C3* capture3, C4* capture4, C5* capture5) : callback_count_(0), capture1_(capture1), capture2_(capture2), capture3_(capture3), capture4_(capture4), capture5_(capture5)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (signal ->)",
    "insertText": "connect(this, &SigslotTester5::OnSignalCallback)"
  },
  {
    "label": "SigslotTester5()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SigslotTester5(const SigslotTester5&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SigslotTester5&)",
    "insertText": "operator(const SigslotTester5&)"
  }
]