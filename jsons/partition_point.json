[
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Predicate"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_PARTITION_POINT_H # define _LIBCPP___ALGORITHM_PARTITION_POINT_H # include<__algorithm / half_positive . h> # include<__config> # include<__iterator / advance . h> # include<__iterator / distance . h> # include<__iterator / iterator_traits . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template<class _ForwardIterator, class _Predicate> _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::difference_type difference_type ; difference_type __len =)",
    "insertText": "distance(__first, __last)"
  },
  {
    "label": "__half_positive()",
    "kind": "Method",
    "detail": "Function (difference_type __l2 =)",
    "insertText": "__half_positive(__len)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (_ForwardIterator __m = __first ;)",
    "insertText": "advance(__m, __l2)"
  }
]