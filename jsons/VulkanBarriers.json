[
  {
    "label": "FVulkanCmdBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCmdBuffer"
  },
  {
    "label": "FVulkanPipelineBarrier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanPipelineBarrier"
  },
  {
    "label": "ImageBarrierExtraData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImageBarrierExtraData"
  },
  {
    "label": "FVulkanImageLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVulkanImageLayout"
  },
  {
    "label": "FVulkanLayoutManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanLayoutManager"
  },
  {
    "label": "FVulkanPipelineBarrier()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" RHIPipeline . h \" # include \" VulkanMemory . h \" # include \" VulkanResources . h \" # include \" VulkanThirdParty . h \" class FVulkanCmdBuffer ; struct FVulkanPipelineBarrier {)",
    "insertText": "FVulkanPipelineBarrier() : Semaphore(nullptr)"
  },
  {
    "label": "AddMemoryBarrier()",
    "kind": "Method",
    "detail": "Function (} using MemoryBarrierArrayType = TArray<VkMemoryBarrier2,TInlineAllocator<1>> ; using ImageBarrierArrayType = TArray<VkImageMemoryBarrier2,TInlineAllocator<2>> ; using BufferBarrierArrayType = TArray<VkBufferMemoryBarrier2> ; ERHIPipeline SrcPipelines,DstPipelines ; MemoryBarrierArrayType MemoryBarriers ; ImageBarrierArrayType ImageBarriers ; BufferBarrierArrayType BufferBarriers ; VulkanRHI::FSemaphore* Semaphore ; struct ImageBarrierExtraData { FVulkanTexture* BaseTexture = nullptr ; bool IsAliasingBarrier = false ; } ; TArray<ImageBarrierExtraData,TInlineAllocator<2>> ImageBarrierExtras ; void)",
    "insertText": "AddMemoryBarrier(VkAccessFlags SrcAccessFlags, VkAccessFlags DstAccessFlags, VkPipelineStageFlags SrcStageMask, VkPipelineStageFlags DstStageMask)"
  },
  {
    "label": "AddFullImageLayoutTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFullImageLayoutTransition(const FVulkanTexture& Texture, VkImageLayout SrcLayout, VkImageLayout DstLayout)"
  },
  {
    "label": "AddImageLayoutTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImageLayoutTransition(VkImage Image, VkImageLayout SrcLayout, VkImageLayout DstLayout, const VkImageSubresourceRange& SubresourceRange)"
  },
  {
    "label": "AddImageLayoutTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImageLayoutTransition(VkImage Image, VkImageAspectFlags AspectMask, const struct FVulkanImageLayout& SrcLayout, VkImageLayout DstLayout)"
  },
  {
    "label": "AddImageLayoutTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImageLayoutTransition(VkImage Image, VkImageAspectFlags AspectMask, VkImageLayout SrcLayout, const struct FVulkanImageLayout& DstLayout)"
  },
  {
    "label": "AddImageLayoutTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImageLayoutTransition(VkImage Image, VkImageAspectFlags AspectMask, const struct FVulkanImageLayout& SrcLayout, const struct FVulkanImageLayout& DstLayout)"
  },
  {
    "label": "AddImageAccessTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddImageAccessTransition(const FVulkanTexture& Surface, ERHIAccess SrcAccess, ERHIAccess DstAccess, const VkImageSubresourceRange& SubresourceRange, VkImageLayout& InOutLayout)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(VkCommandBuffer CmdBuffer)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "MakeSubresourceRange()",
    "kind": "Method",
    "detail": "Function (VkImageSubresourceRange)",
    "insertText": "MakeSubresourceRange(VkImageAspectFlags AspectMask, uint32 FirstMip = 0, uint32 NumMips = VK_REMAINING_MIP_LEVELS, uint32 FirstLayer = 0, uint32 NumLayers = VK_REMAINING_ARRAY_LAYERS)"
  },
  {
    "label": "FVulkanImageLayout()",
    "kind": "Method",
    "detail": "Function (} ; struct FVulkanImageLayout {)",
    "insertText": "FVulkanImageLayout(VkImageLayout InitialLayout, uint32 InNumMips, uint32 InNumLayers, VkImageAspectFlags Aspect) : NumMips(InNumMips), NumLayers(InNumLayers), NumPlanes((Aspect == (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT)) ? 2 : 1), MainLayout(InitialLayout)"
  },
  {
    "label": "AreAllSubresourcesSameLayout()",
    "kind": "Method",
    "detail": "Function (} uint32 NumMips ; uint32 NumLayers ; uint32 NumPlanes ; VkImageLayout MainLayout ; TArray<VkImageLayout> SubresLayouts ; bool)",
    "insertText": "AreAllSubresourcesSameLayout()"
  },
  {
    "label": "GetSubresLayout()",
    "kind": "Method",
    "detail": "Function (} VkImageLayout)",
    "insertText": "GetSubresLayout(uint32 Layer, uint32 Mip, VkImageAspectFlagBits Aspect)"
  },
  {
    "label": "GetSubresLayout()",
    "kind": "Method",
    "detail": "Function (} VkImageLayout)",
    "insertText": "GetSubresLayout(uint32 Layer, uint32 Mip, uint32 Plane)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Layer = 0 ; })",
    "insertText": "check(Plane < NumPlanes && Layer < NumLayers && Mip < NumMips)"
  },
  {
    "label": "AreSubresourcesSameLayout()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreSubresourcesSameLayout(VkImageLayout Layout, const VkImageSubresourceRange& SubresourceRange)"
  },
  {
    "label": "GetSubresRangeLayerCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSubresRangeLayerCount(const VkImageSubresourceRange& SubresourceRange)"
  },
  {
    "label": "GetSubresRangeMipCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSubresRangeMipCount(const VkImageSubresourceRange& SubresourceRange)"
  },
  {
    "label": "CollapseSubresLayoutsIfSame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CollapseSubresLayoutsIfSame()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(VkImageLayout Layout, const VkImageSubresourceRange& SubresourceRange)"
  },
  {
    "label": "FVulkanLayoutManager()",
    "kind": "Method",
    "detail": "Function (} ; class FVulkanLayoutManager { public :)",
    "insertText": "FVulkanLayoutManager(bool InWriteOnly, FVulkanLayoutManager* InFallback) : bWriteOnly(InWriteOnly) , Fallback(InFallback)"
  },
  {
    "label": "NotifyDeletedImage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyDeletedImage(VkImage Image)"
  },
  {
    "label": "GetDefaultLayout()",
    "kind": "Method",
    "detail": "Function (VkImageLayout)",
    "insertText": "GetDefaultLayout(FVulkanCmdBuffer* CmdBuffer, const FVulkanTexture& VulkanTexture, ERHIAccess DesiredAccess)"
  },
  {
    "label": "SetExpectedLayout()",
    "kind": "Method",
    "detail": "Function (VkImageLayout)",
    "insertText": "SetExpectedLayout(FVulkanCmdBuffer* CmdBuffer, const FVulkanTexture& VulkanTexture, ERHIAccess DesiredAccess)"
  },
  {
    "label": "GetDepthStencilHint()",
    "kind": "Method",
    "detail": "Function (VkImageLayout)",
    "insertText": "GetDepthStencilHint(const FVulkanTexture& VulkanTexture, VkImageAspectFlagBits AspectBit)"
  },
  {
    "label": "GetFullLayout()",
    "kind": "Method",
    "detail": "Function (const FVulkanImageLayout*)",
    "insertText": "GetFullLayout(VkImage Image)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FVulkanImageLayout* Layout = Layouts .)",
    "insertText": "Find(Image)"
  },
  {
    "label": "GetFullLayout()",
    "kind": "Method",
    "detail": "Function (} return Layout ; } const FVulkanImageLayout*)",
    "insertText": "GetFullLayout(const FVulkanTexture& VulkanTexture, bool bAddIfNotFound = false, VkImageLayout LayoutIfNotFound = VK_IMAGE_LAYOUT_UNDEFINED)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FVulkanImageLayout* Layout = Layouts .)",
    "insertText": "Find(VulkanTexture.Image)"
  },
  {
    "label": "GetFullLayout()",
    "kind": "Method",
    "detail": "Function (Layout = Fallback ->)",
    "insertText": "GetFullLayout(VulkanTexture, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Layout)"
  },
  {
    "label": "SetFullLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFullLayout(VkImage Image, const FVulkanImageLayout& NewLayout)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (* Layout = NewLayout ; } else { Layouts .)",
    "insertText": "Add(Image, NewLayout)"
  },
  {
    "label": "SetFullLayout()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetFullLayout(const FVulkanTexture& VulkanTexture, const FVulkanImageLayout& NewLayout)"
  },
  {
    "label": "SetFullLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFullLayout(VulkanTexture.Image, NewLayout)"
  },
  {
    "label": "SetFullLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFullLayout(const FVulkanTexture& VulkanTexture, VkImageLayout InLayout, bool bOnlyIfNotFound=false)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Layout ->)",
    "insertText": "Set(InLayout, FVulkanPipelineBarrier::MakeSubresourceRange(VulkanTexture.GetFullAspectMask()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } else { Layouts .)",
    "insertText": "Add(VulkanTexture.Image, FVulkanImageLayout(InLayout, VulkanTexture.GetNumMips(), VulkanTexture.GetNumberOfArrayLevels(), VulkanTexture.GetFullAspectMask()))"
  },
  {
    "label": "IsPartialResource()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsPartialResource(const FVulkanTexture& VulkanTexture, const VkImageSubresourceRange& InSubresourceRange)"
  },
  {
    "label": "SetLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLayout(const FVulkanTexture& VulkanTexture, const VkImageSubresourceRange& InSubresourceRange, VkImageLayout InLayout)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Layout =& Layouts .)",
    "insertText": "Add(VulkanTexture.Image, *FallbackLayout)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Layout ->)",
    "insertText": "Set(InLayout, InSubresourceRange)"
  },
  {
    "label": "NewLayout()",
    "kind": "Method",
    "detail": "Function (} else { FVulkanImageLayout)",
    "insertText": "NewLayout(VK_IMAGE_LAYOUT_UNDEFINED, VulkanTexture.GetNumMips(), VulkanTexture.GetNumberOfArrayLevels(), VulkanTexture.GetFullAspectMask())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Layouts .)",
    "insertText": "Add(VulkanTexture.Image, NewLayout)"
  },
  {
    "label": "TransferTo()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "TransferTo(FVulkanLayoutManager& Destination)"
  }
]