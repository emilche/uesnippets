[
  {
    "label": "PointPartitioner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointPartitioner"
  },
  {
    "label": "IndexIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexIterator"
  },
  {
    "label": "ComputePointOrderOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePointOrderOp"
  },
  {
    "label": "CreateOrderedPointIndexArrayOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateOrderedPointIndexArrayOp"
  },
  {
    "label": "VoxelOrderOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoxelOrderOp"
  },
  {
    "label": "Array",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Array"
  },
  {
    "label": "MoveSegmentDataOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoveSegmentDataOp"
  },
  {
    "label": "CopyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyData"
  },
  {
    "label": "MergeBinsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MergeBinsOp"
  },
  {
    "label": "BinPointIndicesOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinPointIndicesOp"
  },
  {
    "label": "OrderSegmentsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OrderSegmentsOp"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_POINT_PARTITIONER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_POINT_PARTITIONER_HAS_BEEN_INCLUDED # include<openvdb / Types . h> # include<openvdb / math / Transform . h> # include<tbb / blocked_range . h> # include<tbb / parallel_for . h> # include<tbb / task_scheduler_init . h> # include<algorithm> # include<cmath> # include<deque> # include<map> # include<set> # include<utility> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<PointIndexType = uint32_t,Index BucketLog2Dim = 3> class PointPartitioner { public : enum { LOG2DIM = BucketLog2Dim } ; using Ptr = SharedPtr<PointPartitioner> ; using ConstPtr = SharedPtr<const PointPartitioner> ; using IndexType = PointIndexType ; Index)",
    "insertText": "bits(3 * BucketLog2Dim)"
  },
  {
    "label": "conditional()",
    "kind": "Method",
    "detail": "Function (using VoxelOffsetType =)",
    "insertText": "conditional(bits < 16), int16_t, typename std::conditional<(bits < 32)"
  },
  {
    "label": "PointPartitioner()",
    "kind": "Method",
    "detail": "Function (using VoxelOffsetArray = std::unique_ptr<VoxelOffsetType [ ]> ; class IndexIterator ;)",
    "insertText": "PointPartitioner()"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (template<PointArray> void)",
    "insertText": "construct(const PointArray& points, const math::Transform& xform, bool voxelOrder = false, bool recordVoxelOffsets = false, bool cellCenteredTransform = true)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (template<PointArray> Ptr)",
    "insertText": "create(const PointArray& points, const math::Transform& xform, bool voxelOrder = false, bool recordVoxelOffsets = false, bool cellCenteredTransform = true)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(PointPartitioner&)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (IndexIterator)",
    "insertText": "indices(size_t n)"
  },
  {
    "label": "getBBox()",
    "kind": "Method",
    "detail": "Function (CoordBBox)",
    "insertText": "getBBox(size_t n)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (} const Coord&)",
    "insertText": "origin(size_t n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PointPartitioner&)",
    "insertText": "operator(const PointPartitioner&)"
  },
  {
    "label": "IndexIterator()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<IndexType [ ]> mPointIndices ; VoxelOffsetArray mVoxelOffsets ; std::unique_ptr<IndexType [ ]> mPageOffsets ; std::unique_ptr<Coord [ ]> mPageCoordinates ; IndexType mPageCount ; bool mUsingCellCenteredTransform ; } ; using UInt32PointPartitioner = PointPartitioner<uint32_t,3> ; template<PointIndexType,Index BucketLog2Dim> class PointPartitioner<PointIndexType,BucketLog2Dim>::IndexIterator { public : using IndexType = PointIndexType ;)",
    "insertText": "IndexIterator(IndexType* begin = nullptr, IndexType* end = nullptr) : mBegin(begin), mEnd(end), mItem(begin)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mItem != nullptr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this->test())"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (+ + mItem ; return* this ; } bool)",
    "insertText": "next()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "operator()"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "increment()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const IndexIterator& other)"
  },
  {
    "label": "ComputePointOrderOp()",
    "kind": "Method",
    "detail": "Function (} private : IndexType* const mBegin,* const mEnd ; IndexType* mItem ; } ; namespace point_partitioner_internal { template<PointIndexType> struct ComputePointOrderOp {)",
    "insertText": "ComputePointOrderOp(PointIndexType* pointOrder, const PointIndexType* bucketCounters, const PointIndexType* bucketOffsets) : mPointOrder(pointOrder) , mBucketCounters(bucketCounters) , mBucketOffsets(bucketOffsets)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "CreateOrderedPointIndexArrayOp()",
    "kind": "Method",
    "detail": "Function (mPointOrder [ n ] + = mBucketCounters [ mBucketOffsets [ n ] ] ; } } PointIndexType* const mPointOrder ; PointIndexType const* const mBucketCounters ; PointIndexType const* const mBucketOffsets ; } ; template<PointIndexType> struct CreateOrderedPointIndexArrayOp {)",
    "insertText": "CreateOrderedPointIndexArrayOp(PointIndexType* orderedIndexArray, const PointIndexType* pointOrder, const PointIndexType* indices) : mOrderedIndexArray(orderedIndexArray) , mPointOrder(pointOrder) , mIndices(indices)"
  },
  {
    "label": "VoxelOrderOp()",
    "kind": "Method",
    "detail": "Function (using VoxelOffsetArray = std::unique_ptr<VoxelOffsetType [ ]> ; using IndexArray = std::unique_ptr<PointIndexType [ ]> ;)",
    "insertText": "VoxelOrderOp(IndexArray& indices, const IndexArray& pages,const VoxelOffsetArray& offsets) : mIndices(indices.get()) , mPages(pages.get()) , mVoxelOffsets(offsets.get())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PointIndexType pointCount = 0 ;)",
    "insertText": "for(size_t n(range.begin()), N(range.end()); n != N; ++n)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (pointCount =)",
    "insertText": "max(pointCount, (mPages[n + 1] - mPages[n]))"
  },
  {
    "label": "voxelCount()",
    "kind": "Method",
    "detail": "Function (} const PointIndexType)",
    "insertText": "voxelCount(3 * BucketLog2Dim)"
  },
  {
    "label": "offsets()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VoxelOffsetType [ ]>)",
    "insertText": "offsets(new VoxelOffsetType[pointCount])"
  },
  {
    "label": "sortedIndices()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PointIndexType [ ]>)",
    "insertText": "sortedIndices(new PointIndexType[pointCount])"
  },
  {
    "label": "histogram()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<PointIndexType [ ]>)",
    "insertText": "histogram(new PointIndexType[voxelCount])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PointIndexType* const indices = mIndices + mPages [ n ] ; pointCount = mPages [ n + 1 ] - mPages [ n ] ;)",
    "insertText": "for(PointIndexType i = 0; i < pointCount; ++i)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (offsets [ i ] = mVoxelOffsets [ indices [ i ] ] ; })",
    "insertText": "memset(&histogram[0], 0, voxelCount * sizeof(PointIndexType))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + histogram [ offsets [ i ] ] ; } PointIndexType count = 0,startOffset ;)",
    "insertText": "for(int i = 0; i < int(voxelCount); ++i)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (sortedIndices [ histogram [ offsets [ i ] ] + + ] = indices [ i ] ; })",
    "insertText": "memcpy(&indices[0], &sortedIndices[0], sizeof(PointIndexType) * pointCount)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (} } PointIndexType* const mIndices ; PointIndexType const* const mPages ; VoxelOffsetType const* const mVoxelOffsets ; } ; template<T> struct Array { using Ptr = std::unique_ptr<Array> ;)",
    "insertText": "Array(size_t size) : mSize(size), mData(new T[size])"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} const T*)",
    "insertText": "data()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "MoveSegmentDataOp()",
    "kind": "Method",
    "detail": "Function (} private : size_t mSize ; std::unique_ptr<T [ ]> mData ; } ; template<PointIndexType> struct MoveSegmentDataOp { using SegmentPtr = Array<PointIndexType>::Ptr ;)",
    "insertText": "MoveSegmentDataOp(std::vector<PointIndexType*>& indexLists, SegmentPtr* segments) : mIndexLists(&indexLists[0]), mSegments(segments)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (PointIndexType* indices = mIndexLists [ n ] ; SegmentPtr& segment = mSegments [ n ] ;)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, segment->size()), CopyData(indices, segment->data()))"
  },
  {
    "label": "CopyData()",
    "kind": "Method",
    "detail": "Function (} } private : struct CopyData {)",
    "insertText": "CopyData(PointIndexType* lhs, const PointIndexType* rhs) : mLhs(lhs), mRhs(rhs)"
  },
  {
    "label": "MergeBinsOp()",
    "kind": "Method",
    "detail": "Function (mLhs [ n ] = mRhs [ n ] ; } } PointIndexType* const mLhs ; PointIndexType const* const mRhs ; } ; PointIndexType* const* const mIndexLists ; SegmentPtr* const mSegments ; } ; template<PointIndexType> struct MergeBinsOp { using Segment = Array<PointIndexType> ; using SegmentPtr = Segment::Ptr ; using IndexPair = std::pair<PointIndexType,PointIndexType> ; using IndexPairList = std::deque<IndexPair> ; using IndexPairListPtr = std::shared_ptr<IndexPairList> ; using IndexPairListMap = std::map<Coord,IndexPairListPtr> ; using IndexPairListMapPtr = std::shared_ptr<IndexPairListMap> ;)",
    "insertText": "MergeBinsOp(IndexPairListMapPtr* bins, SegmentPtr* indexSegments, SegmentPtr* offsetSegments, Coord* coords, size_t numSegments) : mBins(bins) , mIndexSegments(indexSegments) , mOffsetSegments(offsetSegments) , mCoords(coords) , mNumSegments(numSegments)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<IndexPairListPtr*> data ; std::vector<PointIndexType> arrayOffsets ;)",
    "insertText": "for(size_t n = range.begin(), N = range.end(); n != N; ++n)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (IndexPairListMap& idxMap =* mBins [ i ] ; IndexPairListMap::iterator iter = idxMap .)",
    "insertText": "find(ijk)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (IndexPairListPtr& idxListPtr = iter -> second ; data .)",
    "insertText": "push_back(&idxListPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(data.empty() || numIndices == 0)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (SegmentPtr& indexSegment = mIndexSegments [ n ] ; SegmentPtr& offsetSegment = mOffsetSegments [ n ] ; indexSegment .)",
    "insertText": "reset(new Segment(numIndices))"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (arrayOffsets .)",
    "insertText": "reserve(data.size())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (arrayOffsets .)",
    "insertText": "push_back(PointIndexType(count))"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "count(*data[i])->size()"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, data.size()), CopyData(&data[0], &arrayOffsets[0], indexSegment->data(), offsetSegment->data()))"
  },
  {
    "label": "CopyData()",
    "kind": "Method",
    "detail": "Function (} } private : struct CopyData {)",
    "insertText": "CopyData(IndexPairListPtr** indexLists, const PointIndexType* arrayOffsets, PointIndexType* indices, PointIndexType* offsets) : mIndexLists(indexLists) , mArrayOffsets(arrayOffsets) , mIndices(indices) , mOffsets(offsets)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const PointIndexType arrayOffset = mArrayOffsets [ n ] ; PointIndexType* indexPtr =& mIndices [ arrayOffset ] ; PointIndexType* offsetPtr =& mOffsets [ arrayOffset ] ; IndexPairListPtr& list =* mIndexLists [ n ] ;)",
    "insertText": "for(CIter it = list->begin(), end = list->end(); it != end; ++it)"
  },
  {
    "label": "BinPointIndicesOp()",
    "kind": "Method",
    "detail": "Function (} } IndexPairListPtr* const* const mIndexLists ; PointIndexType const* const mArrayOffsets ; PointIndexType* const mIndices ; PointIndexType* const mOffsets ; } ; IndexPairListMapPtr* const mBins ; SegmentPtr* const mIndexSegments ; SegmentPtr* const mOffsetSegments ; Coord const* const mCoords ; size_t const mNumSegments ; } ; template<PointArray,PointIndexType,VoxelOffsetType> struct BinPointIndicesOp { using PosType = PointArray::PosType ; using IndexPair = std::pair<PointIndexType,PointIndexType> ; using IndexPairList = std::deque<IndexPair> ; using IndexPairListPtr = std::shared_ptr<IndexPairList> ; using IndexPairListMap = std::map<Coord,IndexPairListPtr> ; using IndexPairListMapPtr = std::shared_ptr<IndexPairListMap> ;)",
    "insertText": "BinPointIndicesOp(IndexPairListMapPtr* data, const PointArray& points, VoxelOffsetType* voxelOffsets, const math::Transform& m, Index binLog2Dim, Index bucketLog2Dim, size_t numSegments, bool cellCenteredTransform) : mData(data) , mPoints(&points) , mVoxelOffsets(voxelOffsets) , mXForm(m) , mBinLog2Dim(binLog2Dim) , mBucketLog2Dim(bucketLog2Dim) , mNumSegments(numSegments) , mCellCenteredTransform(cellCenteredTransform)"
  },
  {
    "label": "bucketMask()",
    "kind": "Method",
    "detail": "Function (const Index log2dim = mBucketLog2Dim ; const Index log2dim2 = 2* log2dim ; const Index)",
    "insertText": "bucketMask(1u << log2dim)"
  },
  {
    "label": "binMask()",
    "kind": "Method",
    "detail": "Function (const Index binLog2dim = mBinLog2Dim ; const Index binLog2dim2 = 2* binLog2dim ; const Index)",
    "insertText": "binMask(1u << (log2dim + binLog2dim))"
  },
  {
    "label": "ijk()",
    "kind": "Method",
    "detail": "Function (const Index invBinMask = ~ binMask ; IndexPairList* idxList = nullptr ; Coord)",
    "insertText": "ijk(0, 0, 0), loc(0, 0, 0), binCoord(0, 0, 0), lastBinCoord(1, 2, 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IndexPairListMapPtr& dataPtr = mData [ n ] ;)",
    "insertText": "if(!dataPtr) dataPtr.reset(new IndexPairListMap())"
  },
  {
    "label": "isLastSegment()",
    "kind": "Method",
    "detail": "Function (IndexPairListMap& idxMap =* dataPtr ; const bool)",
    "insertText": "isLastSegment(n + 1)"
  },
  {
    "label": "numPoints()",
    "kind": "Method",
    "detail": "Function (const size_t start = n* segmentSize ; const size_t end = isLastSegment ?)",
    "insertText": "numPoints(start + segmentSize)"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (mPoints ->)",
    "insertText": "getPos(i, pos)"
  },
  {
    "label": "worldToIndexCellCentered()",
    "kind": "Method",
    "detail": "Function (ijk = cellCentered ? mXForm .)",
    "insertText": "worldToIndexCellCentered(pos) : mXForm.worldToIndexNodeCentered(pos)"
  },
  {
    "label": "VoxelOffsetType()",
    "kind": "Method",
    "detail": "Function (loc [ 0 ] = ijk [ 0 ]& bucketMask ; loc [ 1 ] = ijk [ 1 ]& bucketMask ; loc [ 2 ] = ijk [ 2 ]& bucketMask ; voxelOffset =)",
    "insertText": "VoxelOffsetType((loc[0] << log2dim2) + (loc[1] << log2dim) + loc[2])"
  },
  {
    "label": "PointIndexType()",
    "kind": "Method",
    "detail": "Function (} binCoord [ 0 ] = ijk [ 0 ]& invBinMask ; binCoord [ 1 ] = ijk [ 1 ]& invBinMask ; binCoord [ 2 ] = ijk [ 2 ]& invBinMask ; ijk [ 0 ]& = binMask ; ijk [ 1 ]& = binMask ; ijk [ 2 ]& = binMask ; ijk [ 0 ]>> = log2dim ; ijk [ 1 ]>> = log2dim ; ijk [ 2 ]>> = log2dim ; bucketOffset =)",
    "insertText": "PointIndexType((ijk[0] << binLog2dim2) + (ijk[1] << binLog2dim) + ijk[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (lastBinCoord = binCoord ; IndexPairListPtr& idxListPtr = idxMap [ lastBinCoord ] ;)",
    "insertText": "if(!idxListPtr) idxListPtr.reset(new IndexPairList())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (idxList = idxListPtr .)",
    "insertText": "get()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (} idxList ->)",
    "insertText": "push_back(IndexPair(PointIndexType(i), bucketOffset))"
  },
  {
    "label": "OrderSegmentsOp()",
    "kind": "Method",
    "detail": "Function (} } } } IndexPairListMapPtr* const mData ; PointArray const* const mPoints ; VoxelOffsetType* const mVoxelOffsets ; math::Transform const mXForm ; Index const mBinLog2Dim ; Index const mBucketLog2Dim ; size_t const mNumSegments ; bool const mCellCenteredTransform ; } ; template<PointIndexType> struct OrderSegmentsOp { using IndexArray = std::unique_ptr<PointIndexType [ ]> ; using SegmentPtr = Array<PointIndexType>::Ptr ;)",
    "insertText": "OrderSegmentsOp(SegmentPtr* indexSegments, SegmentPtr* offsetSegments, IndexArray* pageOffsetArrays, IndexArray* pageIndexArrays, Index binVolume) : mIndexSegments(indexSegments) , mOffsetSegments(offsetSegments) , mPageOffsetArrays(pageOffsetArrays) , mPageIndexArrays(pageIndexArrays) , mBinVolume(binVolume)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (const size_t bucketCountersSize =)",
    "insertText": "size_t(mBinVolume)"
  },
  {
    "label": "bucketCounters()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "bucketCounters(new PointIndexType[bucketCountersSize])"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (maxSegmentSize =)",
    "insertText": "max(maxSegmentSize, mIndexSegments[n]->size())"
  },
  {
    "label": "bucketIndices()",
    "kind": "Method",
    "detail": "Function (} IndexArray)",
    "insertText": "bucketIndices(new PointIndexType[maxSegmentSize])"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(bucketCounters.get(), 0, sizeof(PointIndexType) * bucketCountersSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bucketIndices [ i ] = bucketCounters [ offsets [ i ] ] + + ; } PointIndexType nonemptyBucketCount = 0 ;)",
    "insertText": "for(size_t i = 0; i < bucketCountersSize; ++i)"
  },
  {
    "label": "PointIndexType()",
    "kind": "Method",
    "detail": "Function (nonemptyBucketCount + = static_cast<)",
    "insertText": "PointIndexType(bucketCounters[i] != 0)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} IndexArray& pageOffsets = mPageOffsetArrays [ n ] ; pageOffsets .)",
    "insertText": "reset(new PointIndexType[nonemptyBucketCount + 1])"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (pageOffsets [ 0 ] = nonemptyBucketCount + 1 ; IndexArray& pageIndices = mPageIndexArrays [ n ] ; pageIndices .)",
    "insertText": "reset(new PointIndexType[nonemptyBucketCount])"
  },
  {
    "label": "PointIndexType()",
    "kind": "Method",
    "detail": "Function (pageIndices [ idx ] = static_cast<)",
    "insertText": "PointIndexType(i)"
  },
  {
    "label": "segmentRange()",
    "kind": "Method",
    "detail": "Function (const tbb::blocked_range<size_t>)",
    "insertText": "segmentRange(0, segmentSize)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(segmentRange, ComputePointOrderOp<PointIndexType>( bucketIndices.get(), bucketCounters.get(), offsets))"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(segmentRange, CreateOrderedPointIndexArrayOp<PointIndexType>( offsets, bucketIndices.get(), indices))"
  },
  {
    "label": "binAndSegment()",
    "kind": "Method",
    "detail": "Function (} } SegmentPtr* const mIndexSegments ; SegmentPtr* const mOffsetSegments ; IndexArray* const mPageOffsetArrays ; IndexArray* const mPageIndexArrays ; Index const mBinVolume ; } ; template<PointIndexType,VoxelOffsetType,PointArray> void)",
    "insertText": "binAndSegment(const PointArray& points, const math::Transform& xform, std::unique_ptr<typename Array<PointIndexType>::Ptr[]>& indexSegments, std::unique_ptr<typename Array<PointIndexType>::Ptr[]>& offsetSegments, std::vector<Coord>& coords, const Index binLog2Dim, const Index bucketLog2Dim, VoxelOffsetType* voxelOffsets = nullptr, bool cellCenteredTransform = true)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (using IndexPair = std::pair<PointIndexType,PointIndexType> ; using IndexPairList = std::deque<IndexPair> ; using IndexPairListPtr = std::shared_ptr<IndexPairList> ; using IndexPairListMap = std::map<Coord,IndexPairListPtr> ; using IndexPairListMapPtr = std::shared_ptr<IndexPairListMap> ; size_t numTasks = 1,numThreads =)",
    "insertText": "size_t(tbb::task_scheduler_init::default_num_threads())"
  },
  {
    "label": "bins()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<IndexPairListMapPtr [ ]>)",
    "insertText": "bins(new IndexPairListMapPtr[numTasks])"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (using BinOp = BinPointIndicesOp<PointArray,PointIndexType,VoxelOffsetType> ;)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, numTasks), BinOp(bins.get(), points, voxelOffsets, xform, binLog2Dim, bucketLog2Dim, numTasks, cellCenteredTransform))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::set<Coord> uniqueCoords ;)",
    "insertText": "for(size_t i = 0; i < numTasks; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IndexPairListMap& idxMap =* bins [ i ] ;)",
    "insertText": "for(typename IndexPairListMap::iterator it = idxMap.begin(); it != idxMap.end(); ++it)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (uniqueCoords .)",
    "insertText": "insert(it->first)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} } coords .)",
    "insertText": "assign(uniqueCoords.begin(), uniqueCoords.end())"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (using SegmentPtr = Array<PointIndexType>::Ptr ; indexSegments .)",
    "insertText": "reset(new SegmentPtr[segmentCount])"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (using MergeOp = MergeBinsOp<PointIndexType> ;)",
    "insertText": "parallel_for(tbb::blocked_range<size_t>(0, segmentCount), MergeOp(bins.get(), indexSegments.get(), offsetSegments.get(), &coords[0], numTasks))"
  },
  {
    "label": "partition()",
    "kind": "Method",
    "detail": "Function (} template<PointIndexType,VoxelOffsetType,PointArray> void)",
    "insertText": "partition(const PointArray& points, const math::Transform& xform, const Index bucketLog2Dim, std::unique_ptr<PointIndexType[]>& pointIndices, std::unique_ptr<PointIndexType[]>& pageOffsets, std::unique_ptr<Coord[]>& pageCoordinates, PointIndexType& pageCount, std::unique_ptr<VoxelOffsetType[]>& voxelOffsets, bool recordVoxelOffsets, bool cellCenteredTransform)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using SegmentPtr = Array<PointIndexType>::Ptr ;)",
    "insertText": "if(recordVoxelOffsets) voxelOffsets.reset(new VoxelOffsetType[points.size()])"
  },
  {
    "label": "PointArray()",
    "kind": "Method",
    "detail": "Function (const Index binLog2Dim = 5 u ; std::vector<Coord> segmentCoords ; std::unique_ptr<SegmentPtr [ ]> indexSegments ; std::unique_ptr<SegmentPtr [ ]> offsetSegments ; binAndSegment<PointIndexType,VoxelOffsetType,)",
    "insertText": "PointArray(points, xform, indexSegments, offsetSegments, segmentCoords, binLog2Dim, bucketLog2Dim, voxelOffsets.get(), cellCenteredTransform)"
  },
  {
    "label": "segmentRange()",
    "kind": "Method",
    "detail": "Function (const tbb::blocked_range<size_t>)",
    "insertText": "segmentRange(0, numSegments)"
  },
  {
    "label": "pageOffsetArrays()",
    "kind": "Method",
    "detail": "Function (using IndexArray = std::unique_ptr<PointIndexType [ ]> ; std::unique_ptr<IndexArray [ ]>)",
    "insertText": "pageOffsetArrays(new IndexArray[numSegments])"
  },
  {
    "label": "pageIndexArrays()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<IndexArray [ ]>)",
    "insertText": "pageIndexArrays(new IndexArray[numSegments])"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (const Index binVolume = 1)",
    "insertText": "u(3u * binLog2Dim)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(segmentRange, OrderSegmentsOp<PointIndexType> (indexSegments.get(), offsetSegments.get(), pageOffsetArrays.get(), pageIndexArrays.get(), binVolume))"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (std::vector<Index> segmentOffsets ; segmentOffsets .)",
    "insertText": "reserve(numSegments)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (pageCount = 0 ;)",
    "insertText": "for(size_t n = 0; n < numSegments; ++n)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (segmentOffsets .)",
    "insertText": "push_back(pageCount)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (pageCount + = pageOffsetArrays [ n ] [ 0 ] - 1 ; } pageOffsets .)",
    "insertText": "reset(new PointIndexType[pageCount + 1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PointIndexType count = 0 ;)",
    "insertText": "for(size_t n = 0, idx = 0; n < numSegments; ++n)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size_t size =)",
    "insertText": "size_t(offsets[0])"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (pageOffsets [ idx + + ] = count ; count + = offsets [ i ] ; } } pageOffsets [ pageCount ] = count ; pointIndices .)",
    "insertText": "reset(new PointIndexType[points.size()])"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (indexArray .)",
    "insertText": "push_back(index)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} pageCoordinates .)",
    "insertText": "reset(new Coord[pageCount])"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(segmentRange, [&](tbb::blocked_range<size_t>& range) { for (size_t n = range.begin(); n < range.end(); n++) { Index segmentOffset = segmentOffsets[n]; PointIndexType* indices = pageIndexArrays[n].get(); const Coord& segmentCoord = segmentCoords[n]; const size_t segmentSize = pageOffsetArrays[n][0] - 1; tbb::blocked_range<size_t> copyRange(0, segmentSize); tbb::parallel_for(copyRange, [&](tbb::blocked_range<size_t>& r) { for (size_t i = r.begin(); i < r.end(); i++) { Index pageIndex = indices[i]; Coord& ijk = pageCoordinates[segmentOffset+i]; ijk[0] = pageIndex >> (2 * binLog2Dim); Index pageIndexModulo = pageIndex - (ijk[0] << (2 * binLog2Dim)); ijk[1] = pageIndexModulo >> binLog2Dim; ijk[2] = pageIndexModulo - (ijk[1] << binLog2Dim); ijk = (ijk << bucketLog2Dim) + segmentCoord; } } ); } })"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(segmentRange, MoveSegmentDataOp<PointIndexType>(indexArray, offsetSegments.get()))"
  },
  {
    "label": "PointPartitioner()",
    "kind": "Method",
    "detail": "Function (} } template<PointIndexType,Index BucketLog2Dim> PointPartitioner<PointIndexType,BucketLog2Dim)",
    "insertText": "PointPartitioner() : mPointIndices(nullptr) , mVoxelOffsets(nullptr) , mPageOffsets(nullptr) , mPageCoordinates(nullptr) , mPageCount(0) , mUsingCellCenteredTransform(true)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<PointIndexType,Index BucketLog2Dim> void PointPartitioner<PointIndexType,BucketLog2Dim)",
    "insertText": "swap(PointPartitioner& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (const IndexType tmpLhsPageCount = mPageCount ; mPageCount = rhs . mPageCount ; rhs . mPageCount = tmpLhsPageCount ; mPointIndices .)",
    "insertText": "swap(rhs.mPointIndices)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (mVoxelOffsets .)",
    "insertText": "swap(rhs.mVoxelOffsets)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (mPageOffsets .)",
    "insertText": "swap(rhs.mPageOffsets)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (mPageCoordinates .)",
    "insertText": "swap(rhs.mPageCoordinates)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(bool(mPointIndices) && bool(mPageCount))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<PointIndexType,Index BucketLog2Dim> template<PointArray> void PointPartitioner<PointIndexType,BucketLog2Dim)",
    "insertText": "construct(const PointArray& points, const math::Transform& xform, bool voxelOrder, bool recordVoxelOffsets, bool cellCenteredTransform)"
  },
  {
    "label": "partition()",
    "kind": "Method",
    "detail": "Function (mUsingCellCenteredTransform = cellCenteredTransform ;)",
    "insertText": "partition(points, xform, BucketLog2Dim, mPointIndices, mPageOffsets, mPageCoordinates, mPageCount, mVoxelOffsets, (voxelOrder || recordVoxelOffsets), cellCenteredTransform)"
  },
  {
    "label": "pageRange()",
    "kind": "Method",
    "detail": "Function (const tbb::blocked_range<size_t>)",
    "insertText": "pageRange(0, mPageCount)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(pageRange, point_partitioner_internal::VoxelOrderOp< IndexType, BucketLog2Dim>(mPointIndices, mPageOffsets, mVoxelOffsets))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mVoxelOffsets && !recordVoxelOffsets)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} } template<PointIndexType,Index BucketLog2Dim> template<PointArray> PointPartitioner<PointIndexType,BucketLog2Dim>::Ptr PointPartitioner<PointIndexType,BucketLog2Dim)",
    "insertText": "create(const PointArray& points, const math::Transform& xform, bool voxelOrder, bool recordVoxelOffsets, bool cellCenteredTransform)"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "ret(new PointPartitioner())"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (ret ->)",
    "insertText": "construct(points, xform, voxelOrder, recordVoxelOffsets, cellCenteredTransform)"
  }
]