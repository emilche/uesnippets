[
  {
    "label": "PointArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PointArray"
  },
  {
    "label": "PointPartitioner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointPartitioner"
  },
  {
    "label": "IndexIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndexIterator"
  },
  {
    "label": "PointPartitioner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointPartitioner"
  },
  {
    "label": "PointPartitioner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointPartitioner"
  },
  {
    "label": "PointPartitioner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointPartitioner"
  },
  {
    "label": "ComputePointOrderOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePointOrderOp"
  },
  {
    "label": "ComputePointOrderOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ComputePointOrderOp"
  },
  {
    "label": "CreateOrderedPointIndexArrayOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateOrderedPointIndexArrayOp"
  },
  {
    "label": "CreateOrderedPointIndexArrayOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CreateOrderedPointIndexArrayOp"
  },
  {
    "label": "VoxelOrderOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoxelOrderOp"
  },
  {
    "label": "VoxelOrderOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoxelOrderOp"
  },
  {
    "label": "Array",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Array"
  },
  {
    "label": "Array",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Array"
  },
  {
    "label": "MoveSegmentDataOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoveSegmentDataOp"
  },
  {
    "label": "CopyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyData"
  },
  {
    "label": "MoveSegmentDataOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoveSegmentDataOp"
  },
  {
    "label": "MergeBinsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MergeBinsOp"
  },
  {
    "label": "CopyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyData"
  },
  {
    "label": "CopyData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyData"
  },
  {
    "label": "MergeBinsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MergeBinsOp"
  },
  {
    "label": "BinPointIndicesOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinPointIndicesOp"
  },
  {
    "label": "BinPointIndicesOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BinPointIndicesOp"
  },
  {
    "label": "OrderSegmentsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OrderSegmentsOp"
  },
  {
    "label": "OrderSegmentsOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OrderSegmentsOp"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct(const PointArray& points, const math::Transform& xform,\n        bool voxelOrder = false, bool recordVoxelOffsets = false,\n        bool cellCenteredTransform = true)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(const PointArray& points, const math::Transform& xform,\n        bool voxelOrder = false, bool recordVoxelOffsets = false,\n        bool cellCenteredTransform = true)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(PointPartitioner&)"
  },
  {
    "label": "PointPartitioner()",
    "kind": "Method",
    "detail": "Function (copying)",
    "insertText": "PointPartitioner(const PointPartitioner&)"
  },
  {
    "label": "bucketCounters()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "bucketCounters(new PointIndexType[bucketCountersSize])"
  },
  {
    "label": "bucketIndices()",
    "kind": "Method",
    "detail": "Function (IndexArray)",
    "insertText": "bucketIndices(new PointIndexType[maxSegmentSize])"
  },
  {
    "label": "segmentRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "segmentRange(0, segmentSize)"
  },
  {
    "label": "segmentRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "segmentRange(0, numSegments)"
  },
  {
    "label": "copyRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "copyRange(0, segmentSize)"
  },
  {
    "label": "pageRange()",
    "kind": "Method",
    "detail": "Function (tbb::blocked_range<size_t>)",
    "insertText": "pageRange(0, mPageCount)"
  }
]