[
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "ITrackExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITrackExtension"
  },
  {
    "label": "FObjectBindingModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectBindingModel"
  },
  {
    "label": "FBuildColumnWidgetParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildColumnWidgetParams"
  },
  {
    "label": "FBuildEditWidgetParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildEditWidgetParams"
  },
  {
    "label": "FSequencerDragDropParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerDragDropParams"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "FBuildColumnWidgetParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Misc / Attribute . h \" # include \" Templates / SubclassOf . h \" # include \" Framework / Commands / UICommandList . h \" # include \" ISequencerSection . h \" # include \" MovieSceneTrack . h \" # include \" SequencerKeyParams . h \" # include \" Sections / MovieScene3DTransformSection . h \" # include \" MVVM / Extensions / IOutlinerExtension . h \" # include \" MVVM / ViewModelPtr . h \" class FExtender ; class ISequencer ; class FMenuBuilder ; class FPaintArgs ; class FSlateWindowElementList ; class SHorizontalBox ; class UMovieScene ; class UMovieSceneTrack ; class UMovieSceneSequence ; namespace UE::Sequencer { class ITrackExtension ; class FObjectBindingModel ; } struct FBuildColumnWidgetParams : UE::Sequencer::FCreateOutlinerViewParams {)",
    "insertText": "FBuildColumnWidgetParams(UE::Sequencer::TViewModelPtr<UE::Sequencer::ITrackExtension> InTrack, const UE::Sequencer::FCreateOutlinerViewParams& InBaseParams) : UE::Sequencer::FCreateOutlinerViewParams(InBaseParams) , ViewModel(InTrack.AsModel()) , TrackModel(InTrack)"
  },
  {
    "label": "FBuildEditWidgetParams()",
    "kind": "Method",
    "detail": "Function (} UE::Sequencer::FViewModelPtr ViewModel ; UE::Sequencer::TViewModelPtr<UE::Sequencer::ITrackExtension> TrackModel ; } ; struct FBuildEditWidgetParams : FBuildColumnWidgetParams {)",
    "insertText": "FBuildEditWidgetParams(const FBuildColumnWidgetParams& Other) : FBuildColumnWidgetParams(Other) , RowIndex(0) , TrackInsertRowIndex(0)"
  },
  {
    "label": "FSequencerDragDropParams()",
    "kind": "Method",
    "detail": "Function (} TAttribute<bool> NodeIsHovered ; int32 RowIndex ; int32 TrackInsertRowIndex ; } ; struct FSequencerDragDropParams {)",
    "insertText": "FSequencerDragDropParams() : Track(nullptr) , RowIndex(INDEX_NONE)"
  },
  {
    "label": "FSequencerDragDropParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSequencerDragDropParams(UMovieSceneTrack* InTrack, int32 InRowIndex, FGuid InTargetObjectGuid, FFrameNumber InFrameNumber, const TRange<FFrameNumber>& InFrameRange) : Track(InTrack) , RowIndex(InRowIndex) , TargetObjectGuid(InTargetObjectGuid) , FrameNumber(InFrameNumber) , FrameRange(InFrameRange)"
  },
  {
    "label": "ProcessKeyOperation()",
    "kind": "Method",
    "detail": "Function (} TWeakObjectPtr<UMovieSceneTrack> Track ; int32 RowIndex ; FGuid TargetObjectGuid ; FFrameNumber FrameNumber ; TRange<FFrameNumber> FrameRange ; } ; class ISequencerTrackEditor { public : void)",
    "insertText": "ProcessKeyOperation(FFrameNumber InKeyTime, const UE::Sequencer::FKeyOperation& Operation, ISequencer& InSequencer)"
  },
  {
    "label": "ApplyDefault()",
    "kind": "Method",
    "detail": "Function (Operation .)",
    "insertText": "ApplyDefault(InKeyTime, InSequencer)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneTrack*)",
    "insertText": "AddTrack(UMovieScene* FocusedMovieScene, const FGuid& ObjectHandle, TSubclassOf<class UMovieSceneTrack> TrackClass, FName UniqueTypeName)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands(TSharedRef<FUICommandList> SequencerCommandBindings)"
  },
  {
    "label": "BuildAddTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildAddTrackMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "BuildObjectBindingEditButtons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingEditButtons(TSharedPtr<SHorizontalBox> EditBox, const FGuid& ObjectBinding, const UClass* ObjectClass)"
  },
  {
    "label": "BuildObjectBindingColumnWidgets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildObjectBindingColumnWidgets(TFunctionRef<TSharedRef<SHorizontalBox>()> GetEditBox, const UE::Sequencer::TViewModelPtr<UE::Sequencer::FObjectBindingModel>& ObjectBinding, const UE::Sequencer::FCreateOutlinerViewParams& InParams, const FName& InColumnName)"
  },
  {
    "label": "BuildObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "ExtendObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendObjectBindingTrackMenu(TSharedRef<FExtender> Extender, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "BuildObjectBindingContextMenu()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildObjectBindingContextMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "BuildOutlinerEditWidget()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWidget>)",
    "insertText": "BuildOutlinerEditWidget(const FGuid& ObjectBinding, UMovieSceneTrack* Track, const FBuildEditWidgetParams& Params)"
  },
  {
    "label": "BuildOutlinerColumnWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildOutlinerColumnWidget(const FBuildColumnWidgetParams& Params, const FName& ColumnName)"
  },
  {
    "label": "BuildTrackContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackContextMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "BuildTrackSidebarMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackSidebarMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "HandleAssetAdded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAssetAdded(UObject* Asset, const FGuid& TargetObjectGuid)"
  },
  {
    "label": "OnAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAllowDrop(const FDragDropEvent& DragDropEvent, FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FDragDropEvent& DragDropEvent, const FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "GetIconBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIconBrush()"
  },
  {
    "label": "OnRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRelease()"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneTrack> TrackClass)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsResizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResizable(UMovieSceneTrack* InTrack)"
  },
  {
    "label": "GetDefaultExpansionState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDefaultExpansionState(UMovieSceneTrack* InTrack)"
  },
  {
    "label": "HasTransformKeyOverridePriority()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "HasTransformKeyOverridePriority()"
  },
  {
    "label": "ObjectImplicitlyRemoved()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ObjectImplicitlyRemoved(UObject* InObject)"
  },
  {
    "label": "OnPreSaveWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreSaveWorld(UWorld* World)"
  },
  {
    "label": "OnPostSaveWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostSaveWorld(UWorld* World)"
  },
  {
    "label": "ISequencerTrackEditor()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "ISequencerTrackEditor()"
  }
]