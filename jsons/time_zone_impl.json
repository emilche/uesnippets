[
  {
    "label": "time_zone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "time_zone"
  },
  {
    "label": "UTC()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_IMPL_H_ # define ABSL_TIME_INTERNAL_CCTZ_TIME_ZONE_IMPL_H_ # include<memory> # include<string> # include \" absl / base / config . h \" # include \" absl / time / internal / cctz / include / cctz / civil_time . h \" # include \" absl / time / internal / cctz / include / cctz / time_zone . h \" # include \" time_zone_if . h \" # include \" time_zone_info . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace time_internal { namespace cctz { class time_zone::Impl { public : time_zone)",
    "insertText": "UTC()"
  },
  {
    "label": "LoadTimeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadTimeZone(const std::string& name, time_zone* tz)"
  },
  {
    "label": "ClearTimeZoneMapTestOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTimeZoneMapTestOnly()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "Name()"
  },
  {
    "label": "MakeTime()",
    "kind": "Method",
    "detail": "Function (} time_zone::civil_lookup)",
    "insertText": "MakeTime(const civil_second& cs)"
  },
  {
    "label": "NextTransition()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NextTransition(const time_point<seconds>& tp, time_zone::civil_transition* trans)"
  },
  {
    "label": "PrevTransition()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PrevTransition(const time_point<seconds>& tp, time_zone::civil_transition* trans)"
  },
  {
    "label": "Version()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "Version()"
  },
  {
    "label": "Description()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "Description()"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "Impl(const std::string& name)"
  },
  {
    "label": "UTCImpl()",
    "kind": "Method",
    "detail": "Function (const Impl*)",
    "insertText": "UTCImpl()"
  }
]