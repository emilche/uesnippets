[
  {
    "label": "FAnalysisSessionLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalysisSessionLock"
  },
  {
    "label": "FStringStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringStore"
  },
  {
    "label": "FRegionProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRegionProvider"
  },
  {
    "label": "FRegionProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Common / PagedArray . h \" # include \" Common / ProviderLock . h \" # include \" TraceServices / Model / Regions . h \" # include \" Templates / SharedPointer . h \" namespace TraceServices { thread_local FProviderLock::FThreadLocalState GRegionsProviderLockState ; class FAnalysisSessionLock ; class FStringStore ; class FRegionProvider : public IRegionProvider,public IEditableRegionProvider { public :)",
    "insertText": "FRegionProvider(IAnalysisSession& Session)"
  },
  {
    "label": "FRegionProvider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRegionProvider()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRead()"
  },
  {
    "label": "BeginRead()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "BeginRead(GRegionsProviderLockState)"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndRead()"
  },
  {
    "label": "EndRead()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "EndRead(GRegionsProviderLockState)"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadAccessCheck()"
  },
  {
    "label": "ReadAccessCheck()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "ReadAccessCheck(GRegionsProviderLockState)"
  },
  {
    "label": "GetRegionCount()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetRegionCount()"
  },
  {
    "label": "GetLaneCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLaneCount()"
  },
  {
    "label": "GetLane()",
    "kind": "Method",
    "detail": "Function (} const FRegionLane*)",
    "insertText": "GetLane(int32 Index)"
  },
  {
    "label": "EnumerateRegions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateRegions(double IntervalStart, double IntervalEnd, TFunctionRef<bool(const FTimeRegion&)> Callback)"
  },
  {
    "label": "EnumerateLanes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateLanes(TFunctionRef<void(const FRegionLane&, const int32)> Callback)"
  },
  {
    "label": "GetUpdateCounter()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetUpdateCounter()"
  },
  {
    "label": "BeginWrite()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "BeginWrite(GRegionsProviderLockState)"
  },
  {
    "label": "EndEdit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndEdit()"
  },
  {
    "label": "EndWrite()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "EndWrite(GRegionsProviderLockState)"
  },
  {
    "label": "EditAccessCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EditAccessCheck()"
  },
  {
    "label": "WriteAccessCheck()",
    "kind": "Method",
    "detail": "Function (Lock .)",
    "insertText": "WriteAccessCheck(GRegionsProviderLockState)"
  },
  {
    "label": "AppendRegionBegin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendRegionBegin(const TCHAR* Name, double Time)"
  },
  {
    "label": "AppendRegionBeginWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRegionBeginWithId(const TCHAR* Name, uint64 Id, double Time)"
  },
  {
    "label": "AppendRegionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRegionEnd(const TCHAR* Name, double Time)"
  },
  {
    "label": "AppendRegionEndWithId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendRegionEndWithId(uint64 Id, double Time)"
  },
  {
    "label": "OnAnalysisSessionEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnalysisSessionEnded()"
  },
  {
    "label": "CalculateRegionDepth()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "CalculateRegionDepth(const FTimeRegion& Item)"
  },
  {
    "label": "InsertNewRegion()",
    "kind": "Method",
    "detail": "Function (FTimeRegion*)",
    "insertText": "InsertNewRegion(double BeginTime, const TCHAR* Name, uint64 Id)"
  }
]