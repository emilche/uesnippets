[
  {
    "label": "PaUtilRingBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PaUtilRingBuffer"
  },
  {
    "label": "AudioDeviceMac",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDeviceMac"
  },
  {
    "label": "AudioDeviceMac()",
    "kind": "Method",
    "detail": "Function (# ifndef AUDIO_DEVICE_AUDIO_DEVICE_MAC_H_ # define AUDIO_DEVICE_AUDIO_DEVICE_MAC_H_ # include<AudioToolbox / AudioConverter . h> # include<CoreAudio / CoreAudio . h> # include<mach / semaphore . h> # include<atomic> # include<memory> # include \" absl / strings / string_view . h \" # include \" modules / audio_device / audio_device_generic . h \" # include \" modules / audio_device / mac / audio_mixer_manager_mac . h \" # include \" rtc_base / event . h \" # include \" rtc_base / logging . h \" # include \" rtc_base / platform_thread . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" struct PaUtilRingBuffer ; namespace webrtc { const uint32_t N_REC_SAMPLES_PER_SEC = 4 8 0 0 0 ; const uint32_t N_PLAY_SAMPLES_PER_SEC = 4 8 0 0 0 ; const uint32_t N_REC_CHANNELS = 1 ; const uint32_t N_PLAY_CHANNELS = 2 ; const uint32_t N_DEVICE_CHANNELS = 6 4 ; const int kBufferSizeMs = 1 0 ; const uint32_t ENGINE_REC_BUF_SIZE_IN_SAMPLES = N_REC_SAMPLES_PER_SEC* kBufferSizeMs / 1 0 0 0 ; const uint32_t ENGINE_PLAY_BUF_SIZE_IN_SAMPLES = N_PLAY_SAMPLES_PER_SEC* kBufferSizeMs / 1 0 0 0 ; const int N_BLOCKS_IO = 2 ; const int N_BUFFERS_IN = 2 ; const int N_BUFFERS_OUT = 3 ; const uint32_t TIMER_PERIOD_MS = 2* 1 0* N_BLOCKS_IO* 1 0 0 0 0 0 0 ; const uint32_t REC_BUF_SIZE_IN_SAMPLES = ENGINE_REC_BUF_SIZE_IN_SAMPLES* N_DEVICE_CHANNELS* N_BUFFERS_IN ; const uint32_t PLAY_BUF_SIZE_IN_SAMPLES = ENGINE_PLAY_BUF_SIZE_IN_SAMPLES* N_PLAY_CHANNELS* N_BUFFERS_OUT ; const int kGetMicVolumeIntervalMs = 1 0 0 0 ; class AudioDeviceMac : public AudioDeviceGeneric { public :)",
    "insertText": "AudioDeviceMac()"
  },
  {
    "label": "ActiveAudioLayer()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "ActiveAudioLayer(AudioDeviceModule::AudioLayer& audioLayer)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (InitStatus)",
    "insertText": "Init() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Terminate() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "Initialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialized()"
  },
  {
    "label": "PlayoutDevices()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "PlayoutDevices()"
  },
  {
    "label": "RecordingDevices()",
    "kind": "Method",
    "detail": "Function (int16_t)",
    "insertText": "RecordingDevices()"
  },
  {
    "label": "PlayoutDeviceName()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutDeviceName(uint16_t index, char name[kAdmMaxDeviceNameSize], char guid[kAdmMaxGuidSize])"
  },
  {
    "label": "RecordingDeviceName()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RecordingDeviceName(uint16_t index, char name[kAdmMaxDeviceNameSize], char guid[kAdmMaxGuidSize])"
  },
  {
    "label": "SetPlayoutDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutDevice(uint16_t index) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetPlayoutDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetPlayoutDevice(AudioDeviceModule::WindowsDeviceType device)"
  },
  {
    "label": "SetRecordingDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingDevice(uint16_t index)"
  },
  {
    "label": "SetRecordingDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetRecordingDevice(AudioDeviceModule::WindowsDeviceType device)"
  },
  {
    "label": "PlayoutIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutIsAvailable(bool& available)"
  },
  {
    "label": "InitPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitPlayout() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "PlayoutIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayoutIsInitialized()"
  },
  {
    "label": "RecordingIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RecordingIsAvailable(bool& available)"
  },
  {
    "label": "InitRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitRecording() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "RecordingIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecordingIsInitialized()"
  },
  {
    "label": "StartPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StartPlayout() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "StopPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StopPlayout() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "Playing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Playing()"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StartRecording() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StopRecording() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "Recording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Recording()"
  },
  {
    "label": "InitSpeaker()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitSpeaker() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SpeakerIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpeakerIsInitialized()"
  },
  {
    "label": "InitMicrophone()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitMicrophone() RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "MicrophoneIsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MicrophoneIsInitialized()"
  },
  {
    "label": "SpeakerVolumeIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerVolumeIsAvailable(bool& available) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetSpeakerVolume(uint32_t volume)"
  },
  {
    "label": "SpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerVolume(uint32_t& volume)"
  },
  {
    "label": "MaxSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MaxSpeakerVolume(uint32_t& maxVolume)"
  },
  {
    "label": "MinSpeakerVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MinSpeakerVolume(uint32_t& minVolume)"
  },
  {
    "label": "MicrophoneVolumeIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneVolumeIsAvailable(bool& available) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetMicrophoneVolume(uint32_t volume)"
  },
  {
    "label": "MicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneVolume(uint32_t& volume)"
  },
  {
    "label": "MaxMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MaxMicrophoneVolume(uint32_t& maxVolume)"
  },
  {
    "label": "MinMicrophoneVolume()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MinMicrophoneVolume(uint32_t& minVolume)"
  },
  {
    "label": "MicrophoneMuteIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneMuteIsAvailable(bool& available) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetMicrophoneMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetMicrophoneMute(bool enable)"
  },
  {
    "label": "MicrophoneMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneMute(bool& enabled)"
  },
  {
    "label": "SpeakerMuteIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerMuteIsAvailable(bool& available) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetSpeakerMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetSpeakerMute(bool enable)"
  },
  {
    "label": "SpeakerMute()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerMute(bool& enabled)"
  },
  {
    "label": "StereoPlayoutIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoPlayoutIsAvailable(bool& available) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SetStereoPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetStereoPlayout(bool enable)"
  },
  {
    "label": "StereoPlayout()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoPlayout(bool& enabled)"
  },
  {
    "label": "StereoRecordingIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoRecordingIsAvailable(bool& available)"
  },
  {
    "label": "SetStereoRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetStereoRecording(bool enable)"
  },
  {
    "label": "StereoRecording()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "StereoRecording(bool& enabled)"
  },
  {
    "label": "PlayoutDelay()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutDelay(uint16_t& delayMS)"
  },
  {
    "label": "AttachAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachAudioBuffer(AudioDeviceBuffer* audioBuffer) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "InitSpeakerLocked()",
    "kind": "Method",
    "detail": "Function (private : int32_t)",
    "insertText": "InitSpeakerLocked() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "InitMicrophoneLocked()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitMicrophoneLocked() RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "MicrophoneIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneIsAvailable(bool& available) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "MicrophoneIsAvailableLocked()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "MicrophoneIsAvailableLocked(bool& available) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "SpeakerIsAvailable()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerIsAvailable(bool& available) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "SpeakerIsAvailableLocked()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SpeakerIsAvailableLocked(bool& available) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "AtomicSet32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicSet32(int32_t* theValue, int32_t newValue)"
  },
  {
    "label": "AtomicGet32()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "AtomicGet32(int32_t* theValue)"
  },
  {
    "label": "logCAMsg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "logCAMsg(rtc::LoggingSeverity sev, const char* msg, const char* err)"
  },
  {
    "label": "GetNumberDevices()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetNumberDevices(AudioObjectPropertyScope scope, AudioDeviceID scopedDeviceIds[], uint32_t deviceListLength)"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetDeviceName(AudioObjectPropertyScope scope, uint16_t index, rtc::ArrayView<char> name)"
  },
  {
    "label": "InitDevice()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitDevice(uint16_t userDeviceIndex, AudioDeviceID& deviceId, bool isInput)"
  },
  {
    "label": "SetDesiredPlayoutFormat()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "SetDesiredPlayoutFormat()"
  },
  {
    "label": "objectListenerProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "objectListenerProc(AudioObjectID objectId, UInt32 numberAddresses, const AudioObjectPropertyAddress addresses[], void* clientData)"
  },
  {
    "label": "implObjectListenerProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "implObjectListenerProc(AudioObjectID objectId, UInt32 numberAddresses, const AudioObjectPropertyAddress addresses[])"
  },
  {
    "label": "HandleDeviceChange()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "HandleDeviceChange()"
  },
  {
    "label": "HandleStreamFormatChange()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "HandleStreamFormatChange(AudioObjectID objectId, AudioObjectPropertyAddress propertyAddress)"
  },
  {
    "label": "HandleDataSourceChange()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "HandleDataSourceChange(AudioObjectID objectId, AudioObjectPropertyAddress propertyAddress)"
  },
  {
    "label": "HandleProcessorOverload()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "HandleProcessorOverload(AudioObjectPropertyAddress propertyAddress)"
  },
  {
    "label": "deviceIOProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "deviceIOProc(AudioDeviceID device, const AudioTimeStamp* now, const AudioBufferList* inputData, const AudioTimeStamp* inputTime, AudioBufferList* outputData, const AudioTimeStamp* outputTime, void* clientData)"
  },
  {
    "label": "outConverterProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "outConverterProc(AudioConverterRef audioConverter, UInt32* numberDataPackets, AudioBufferList* data, AudioStreamPacketDescription** dataPacketDescription, void* userData)"
  },
  {
    "label": "inDeviceIOProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "inDeviceIOProc(AudioDeviceID device, const AudioTimeStamp* now, const AudioBufferList* inputData, const AudioTimeStamp* inputTime, AudioBufferList* outputData, const AudioTimeStamp* outputTime, void* clientData)"
  },
  {
    "label": "inConverterProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "inConverterProc(AudioConverterRef audioConverter, UInt32* numberDataPackets, AudioBufferList* data, AudioStreamPacketDescription** dataPacketDescription, void* inUserData)"
  },
  {
    "label": "implDeviceIOProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "implDeviceIOProc(const AudioBufferList* inputData, const AudioTimeStamp* inputTime, AudioBufferList* outputData, const AudioTimeStamp* outputTime) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "implOutConverterProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "implOutConverterProc(UInt32* numberDataPackets, AudioBufferList* data)"
  },
  {
    "label": "implInDeviceIOProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "implInDeviceIOProc(const AudioBufferList* inputData, const AudioTimeStamp* inputTime) RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "implInConverterProc()",
    "kind": "Method",
    "detail": "Function (OSStatus)",
    "insertText": "implInConverterProc(UInt32* numberDataPackets, AudioBufferList* data)"
  },
  {
    "label": "RunCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCapture(void*)"
  },
  {
    "label": "RunRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunRender(void*)"
  },
  {
    "label": "CaptureWorkerThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CaptureWorkerThread()"
  },
  {
    "label": "RenderWorkerThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenderWorkerThread()"
  },
  {
    "label": "KeyPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "KeyPressed()"
  }
]