[
  {
    "label": "AudioIngress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioIngress"
  },
  {
    "label": "AudioIngress()",
    "kind": "Method",
    "detail": "Function (# ifndef AUDIO_VOIP_AUDIO_INGRESS_H_ # define AUDIO_VOIP_AUDIO_INGRESS_H_ # include<algorithm> # include<atomic> # include<map> # include<memory> # include<utility> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio / audio_mixer . h \" # include \" api / rtp_headers . h \" # include \" api / scoped_refptr . h \" # include \" api / voip / voip_statistics . h \" # include \" audio / audio_level . h \" # include \" modules / audio_coding / acm2 / acm_receiver . h \" # include \" modules / audio_coding / include / audio_coding_module . h \" # include \" modules / rtp_rtcp / include / receive_statistics . h \" # include \" modules / rtp_rtcp / include / remote_ntp_time_estimator . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" # include \" modules / rtp_rtcp / source / rtp_rtcp_interface . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / time_utils . h \" namespace webrtc { class AudioIngress : public AudioMixer::Source { public :)",
    "insertText": "AudioIngress(RtpRtcpInterface* rtp_rtcp, Clock* clock, ReceiveStatistics* receive_statistics, rtc::scoped_refptr<AudioDecoderFactory> decoder_factory)"
  },
  {
    "label": "AudioIngress()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioIngress()"
  },
  {
    "label": "StartPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartPlay()"
  },
  {
    "label": "StopPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopPlay()"
  },
  {
    "label": "ResetLevelFullRange()",
    "kind": "Method",
    "detail": "Function (playing_ = false ; output_audio_level_ .)",
    "insertText": "ResetLevelFullRange()"
  },
  {
    "label": "IsPlaying()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPlaying()"
  },
  {
    "label": "ReceivedRTPPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedRTPPacket(rtc::ArrayView<const uint8_t> rtp_packet)"
  },
  {
    "label": "ReceivedRTCPPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedRTCPPacket(rtc::ArrayView<const uint8_t> rtcp_packet)"
  },
  {
    "label": "GetOutputAudioLevel()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOutputAudioLevel()"
  },
  {
    "label": "GetOutputTotalEnergy()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetOutputTotalEnergy()"
  },
  {
    "label": "GetOutputTotalDuration()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetOutputTotalDuration()"
  },
  {
    "label": "GetNetworkStatistics()",
    "kind": "Method",
    "detail": "Function (} NetworkStatistics)",
    "insertText": "GetNetworkStatistics()"
  },
  {
    "label": "GetNetworkStatistics()",
    "kind": "Method",
    "detail": "Function (NetworkStatistics stats ; acm_receiver_ .)",
    "insertText": "GetNetworkStatistics(&stats, false)"
  },
  {
    "label": "GetAudioFrameWithInfo()",
    "kind": "Method",
    "detail": "Function (AudioMixer::Source::AudioFrameInfo)",
    "insertText": "GetAudioFrameWithInfo(int sampling_rate, AudioFrame* audio_frame)"
  },
  {
    "label": "Ssrc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Ssrc()"
  },
  {
    "label": "PreferredSampleRate()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "PreferredSampleRate()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} private : std::atomic<bool> playing_ ; std::atomic<uint32_t> remote_ssrc_ ; std::atomic<int64_t> first_rtp_timestamp_ ; ReceiveStatistics* const rtp_receive_statistics_ ; RtpRtcpInterface* const rtp_rtcp_ ; acm2::AcmReceiver acm_receiver_ ; voe::AudioLevel output_audio_level_ ; Mutex lock_ ; RemoteNtpTimeEstimator ntp_estimator_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]