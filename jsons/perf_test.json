[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PrintResult()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_TESTSUPPORT_PERF_TEST_H_ # define TEST_TESTSUPPORT_PERF_TEST_H_ # include<sstream> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / numerics / samples_stats_counter . h \" namespace webrtc { namespace test { enum class ImproveDirection { kNone,kSmallerIsBetter,kBiggerIsBetter,} ; void)",
    "insertText": "PrintResult(absl::string_view measurement, absl::string_view modifier, absl::string_view user_story, double value, absl::string_view units, bool important, ImproveDirection improve_direction = ImproveDirection::kNone)"
  },
  {
    "label": "PrintResultMeanAndError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResultMeanAndError(absl::string_view measurement, absl::string_view modifier, absl::string_view user_story, double mean, double error, absl::string_view units, bool important, ImproveDirection improve_direction = ImproveDirection::kNone)"
  },
  {
    "label": "PrintResultList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResultList(absl::string_view measurement, absl::string_view modifier, absl::string_view user_story, rtc::ArrayView<const double> values, absl::string_view units, bool important, ImproveDirection improve_direction = ImproveDirection::kNone)"
  },
  {
    "label": "PrintResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResult(absl::string_view measurement, absl::string_view modifier, absl::string_view user_story, const SamplesStatsCounter& counter, absl::string_view units, bool important, ImproveDirection improve_direction = ImproveDirection::kNone)"
  },
  {
    "label": "GetPerfResults()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetPerfResults()"
  },
  {
    "label": "PrintPlottableResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintPlottableResults(const std::vector<std::string>& desired_graphs)"
  },
  {
    "label": "WritePerfResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePerfResults(const std::string& output_path)"
  },
  {
    "label": "SetPerfResultsOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerfResultsOutput(FILE* output)"
  },
  {
    "label": "ClearPerfResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPerfResults()"
  }
]