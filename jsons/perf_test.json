[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PrintResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResult(absl::string_view measurement,\n                 absl::string_view modifier,\n                 absl::string_view user_story,\n                 double value,\n                 absl::string_view units,\n                 bool important,\n                 ImproveDirection improve_direction = ImproveDirection::kNone)"
  },
  {
    "label": "PrintResultMeanAndError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResultMeanAndError(\n    absl::string_view measurement,\n    absl::string_view modifier,\n    absl::string_view user_story,\n    double mean,\n    double error,\n    absl::string_view units,\n    bool important,\n    ImproveDirection improve_direction = ImproveDirection::kNone)"
  },
  {
    "label": "PrintResultList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResultList(\n    absl::string_view measurement,\n    absl::string_view modifier,\n    absl::string_view user_story,\n    rtc::ArrayView<const double> values,\n    absl::string_view units,\n    bool important,\n    ImproveDirection improve_direction = ImproveDirection::kNone)"
  },
  {
    "label": "PrintResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintResult(absl::string_view measurement,\n                 absl::string_view modifier,\n                 absl::string_view user_story,\n                 const SamplesStatsCounter& counter,\n                 absl::string_view units,\n                 bool important,\n                 ImproveDirection improve_direction = ImproveDirection::kNone)"
  },
  {
    "label": "GetPerfResults()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetPerfResults()"
  },
  {
    "label": "PrintPlottableResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintPlottableResults(const std::vector<std::string>& desired_graphs)"
  },
  {
    "label": "WritePerfResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePerfResults(const std::string& output_path)"
  },
  {
    "label": "SetPerfResultsOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerfResultsOutput(FILE* output)"
  },
  {
    "label": "ClearPerfResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPerfResults()"
  }
]