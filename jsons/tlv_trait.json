[
  {
    "label": "TLVTrait",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLVTrait"
  },
  {
    "label": "ReportInvalidSize()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_PACKET_TLV_TRAIT_H_ # define NET_DCSCTP_PACKET_TLV_TRAIT_H_ # include<stdint . h> # include<string . h> # include<algorithm> # include<cstddef> # include<cstdint> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / packet / bounded_byte_reader . h \" # include \" net / dcsctp / packet / bounded_byte_writer . h \" namespace dcsctp { namespace tlv_trait_impl { void)",
    "insertText": "ReportInvalidSize(size_t actual_size, size_t expected_size)"
  },
  {
    "label": "ReportInvalidType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidType(int actual_type, int expected_type)"
  },
  {
    "label": "ReportInvalidFixedLengthField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidFixedLengthField(size_t value, size_t expected)"
  },
  {
    "label": "ReportInvalidVariableLengthField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidVariableLengthField(size_t value, size_t available)"
  },
  {
    "label": "ReportInvalidPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidPadding(size_t padding_bytes)"
  },
  {
    "label": "ReportInvalidLengthMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidLengthMultiple(size_t length, size_t alignment)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<Config> class TLVTrait { private : size_t kTlvHeaderSize = 4 ; protected : size_t kHeaderSize = Config::kHeaderSize ;)",
    "insertText": "static_assert(Config::kTypeSizeInBytes == 1 || Config::kTypeSizeInBytes == 2, \"kTypeSizeInBytes must be 1 or 2\")"
  },
  {
    "label": "ParseTLV()",
    "kind": "Method",
    "detail": "Function (absl::optional<BoundedByteReader<Config::kHeaderSize>>)",
    "insertText": "ParseTLV(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "ReportInvalidSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidSize(data.size(), Config::kHeaderSize)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "type(Config::kTypeSizeInBytes == 1) ? tlv_header.template Load8<0>() : tlv_header.template Load16<0>()"
  },
  {
    "label": "ReportInvalidType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidType(type, Config::kType)"
  },
  {
    "label": "ReportInvalidFixedLengthField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidFixedLengthField(length, Config::kHeaderSize)"
  },
  {
    "label": "ReportInvalidVariableLengthField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidVariableLengthField(length, data.size())"
  },
  {
    "label": "ReportInvalidPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidPadding(padding)"
  },
  {
    "label": "ReportInvalidLengthMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportInvalidLengthMultiple(length, Config::kVariableLengthAlignment)"
  },
  {
    "label": "AllocateTLV()",
    "kind": "Method",
    "detail": "Function (} BoundedByteWriter<Config::kHeaderSize>)",
    "insertText": "AllocateTLV(std::vector<uint8_t>& out, size_t variable_size = 0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const size_t offset = out .)",
    "insertText": "size()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (const size_t size = Config::kHeaderSize + variable_size ; out .)",
    "insertText": "resize(offset + size)"
  },
  {
    "label": "tlv_header()",
    "kind": "Method",
    "detail": "Function (BoundedByteWriter<kTlvHeaderSize>)",
    "insertText": "tlv_header(rtc::ArrayView<uint8_t>(out.data() + offset, kTlvHeaderSize))"
  },
  {
    "label": "Store8()",
    "kind": "Method",
    "detail": "Function (tlv_header . template)",
    "insertText": "Store8(static_cast<uint8_t>(Config::kType))"
  },
  {
    "label": "Store16()",
    "kind": "Method",
    "detail": "Function (} else { tlv_header . template)",
    "insertText": "Store16(Config::kType)"
  },
  {
    "label": "Store16()",
    "kind": "Method",
    "detail": "Function (} tlv_header . template)",
    "insertText": "Store16(size)"
  },
  {
    "label": "ValidateLengthAlignment()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "ValidateLengthAlignment(uint16_t length, size_t alignment)"
  }
]