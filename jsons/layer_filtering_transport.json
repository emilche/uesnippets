[
  {
    "label": "LayerFilteringTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LayerFilteringTransport"
  },
  {
    "label": "LayerFilteringTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_LAYER_FILTERING_TRANSPORT_H_ # define TEST_LAYER_FILTERING_TRANSPORT_H_ # include<stddef . h> # include<stdint . h> # include<map> # include<memory> # include \" api / call / transport . h \" # include \" api / media_types . h \" # include \" call / call . h \" # include \" call / simulated_packet_receiver . h \" # include \" modules / rtp_rtcp / source / video_rtp_depacketizer . h \" # include \" test / direct_transport . h \" namespace webrtc { namespace test { class LayerFilteringTransport : public test::DirectTransport { public :)",
    "insertText": "LayerFilteringTransport(TaskQueueBase* task_queue, std::unique_ptr<SimulatedPacketReceiverInterface> pipe, Call* send_call, uint8_t vp8_video_payload_type, uint8_t vp9_video_payload_type, int selected_tl, int selected_sl, const std::map<uint8_t, MediaType>& payload_type_map, uint32_t ssrc_to_filter_min, uint32_t ssrc_to_filter_max)"
  },
  {
    "label": "LayerFilteringTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LayerFilteringTransport(TaskQueueBase* task_queue, std::unique_ptr<SimulatedPacketReceiverInterface> pipe, Call* send_call, uint8_t vp8_video_payload_type, uint8_t vp9_video_payload_type, int selected_tl, int selected_sl, const std::map<uint8_t, MediaType>& payload_type_map)"
  },
  {
    "label": "DiscardedLastPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DiscardedLastPacket()"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtp(const uint8_t* data, size_t length, const PacketOptions& options)"
  }
]