[
  {
    "label": "UMovieSceneCompiledDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCompiledDataManager"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FMovieSceneCompiledDataID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneCompiledDataID"
  },
  {
    "label": "FMovieSceneSequenceID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceID"
  },
  {
    "label": "FSharedPlaybackState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSharedPlaybackState"
  },
  {
    "label": "FCompiledDataVolatilityManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompiledDataVolatilityManager"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / SortedMap . h \" # include \" Evaluation / MovieSceneEvaluationTemplateInstance . h \" # include \" Templates / UniquePtr . h \" class UMovieSceneCompiledDataManager ; struct FGuid ; struct FMovieSceneCompiledDataID ; struct FMovieSceneSequenceID ; namespace UE { namespace MovieScene { struct FSharedPlaybackState ; struct FCompiledDataVolatilityManager { TUniquePtr<FCompiledDataVolatilityManager>)",
    "insertText": "Construct(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "FCompiledDataVolatilityManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompiledDataVolatilityManager(TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "ConditionalRecompile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionalRecompile()"
  },
  {
    "label": "HasBeenRecompiled()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HasBeenRecompiled()"
  },
  {
    "label": "HasSequenceBeenRecompiled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSequenceBeenRecompiled(FMovieSceneCompiledDataID DataID, FMovieSceneSequenceID SequenceID)"
  },
  {
    "label": "UpdateCachedSignatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedSignatures()"
  }
]