[
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "DESKTOPWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DESKTOPWIDGETS_API"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Styling / ISlateStyle . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" class SEditableTextBox ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPathPicked, const FString&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SFilePathPicker : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SFilePathPicker) : _BrowseButtonToolTip(NSLOCTEXT(\"SFilePathPicker\", \"BrowseButtonToolTip\", \"Choose a file from this computer\")) , _FileTypeFilter(TEXT(\"All files (*.*)|*.*\")) , _Font() , _IsReadOnly(false) , _DialogReturnsFullPath(false)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(const FSlateBrush*, BrowseButtonImage) SLATE_STYLE_ARGUMENT(FButtonStyle, BrowseButtonStyle) SLATE_ATTRIBUTE(FText, BrowseButtonToolTip) SLATE_ATTRIBUTE(FString, BrowseDirectory) SLATE_ATTRIBUTE(FText, BrowseTitle) SLATE_ATTRIBUTE(FString, FilePath) SLATE_ATTRIBUTE(FString, FileTypeFilter) SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_ATTRIBUTE(bool, IsReadOnly) SLATE_ATTRIBUTE(bool, DialogReturnsFullPath) SLATE_EVENT(FOnPathPicked, OnPathPicked) SLATE_END_ARGS() void Construct( const FArguments& InArgs)"
  },
  {
    "label": "HandleBrowseButtonClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "HandleBrowseButtonClicked()"
  },
  {
    "label": "HandleTextBoxText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleTextBoxText()"
  },
  {
    "label": "HandleTextBoxTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextBoxTextCommitted(const FText& NewText, ETextCommit::Type)"
  }
]