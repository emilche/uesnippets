[
  {
    "label": "PeerConnectionTestWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionTestWrapper"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect(PeerConnectionTestWrapper* caller,\n                      PeerConnectionTestWrapper* callee)"
  },
  {
    "label": "CreatePc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePc(\n      const webrtc::PeerConnectionInterface::RTCConfiguration& config,\n      rtc::scoped_refptr<webrtc::AudioEncoderFactory> audio_encoder_factory,\n      rtc::scoped_refptr<webrtc::AudioDecoderFactory> audio_decoder_factory)"
  },
  {
    "label": "CreateDataChannel()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::DataChannelInterface>)",
    "insertText": "CreateDataChannel(\n      const std::string& label,\n      const webrtc::DataChannelInit& init)"
  },
  {
    "label": "WaitForNegotiation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForNegotiation()"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateOffer(\n      const webrtc::PeerConnectionInterface::RTCOfferAnswerOptions& options)"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAnswer(\n      const webrtc::PeerConnectionInterface::RTCOfferAnswerOptions& options)"
  },
  {
    "label": "ReceiveOfferSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveOfferSdp(const std::string& sdp)"
  },
  {
    "label": "ReceiveAnswerSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveAnswerSdp(const std::string& sdp)"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIceCandidate(const std::string& sdp_mid,\n                       int sdp_mline_index,\n                       const std::string& candidate)"
  },
  {
    "label": "WaitForCallEstablished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCallEstablished()"
  },
  {
    "label": "WaitForConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForConnection()"
  },
  {
    "label": "WaitForAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAudio()"
  },
  {
    "label": "WaitForVideo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForVideo()"
  },
  {
    "label": "GetAndAddUserMedia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAndAddUserMedia(bool audio,\n                          const cricket::AudioOptions& audio_options,\n                          bool video)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalDescription(webrtc::SdpType type, const std::string& sdp)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteDescription(webrtc::SdpType type, const std::string& sdp)"
  },
  {
    "label": "CheckForConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForConnection()"
  },
  {
    "label": "CheckForAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForAudio()"
  },
  {
    "label": "CheckForVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForVideo()"
  },
  {
    "label": "GetUserMedia()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::MediaStreamInterface>)",
    "insertText": "GetUserMedia(\n      bool audio,\n      const cricket::AudioOptions& audio_options,\n      bool video)"
  }
]