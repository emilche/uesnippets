[
  {
    "label": "PeerConnectionTestWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PeerConnectionTestWrapper"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_TEST_PEER_CONNECTION_TEST_WRAPPER_H_ # define PC_TEST_PEER_CONNECTION_TEST_WRAPPER_H_ # include<memory> # include<string> # include<vector> # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / audio_codecs / audio_encoder_factory . h \" # include \" api / audio_options . h \" # include \" api / data_channel_interface . h \" # include \" api / jsep . h \" # include \" api / media_stream_interface . h \" # include \" api / peer_connection_interface . h \" # include \" api / rtc_error . h \" # include \" api / rtp_receiver_interface . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" pc / test / fake_audio_capture_module . h \" # include \" pc / test / fake_video_track_renderer . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" class PeerConnectionTestWrapper : public webrtc::PeerConnectionObserver,public webrtc::CreateSessionDescriptionObserver,public sigslot::has_slots<> { public : void)",
    "insertText": "Connect(PeerConnectionTestWrapper* caller, PeerConnectionTestWrapper* callee)"
  },
  {
    "label": "PeerConnectionTestWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeerConnectionTestWrapper(const std::string& name, rtc::SocketServer* socket_server, rtc::Thread* network_thread, rtc::Thread* worker_thread)"
  },
  {
    "label": "PeerConnectionTestWrapper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PeerConnectionTestWrapper()"
  },
  {
    "label": "CreatePc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePc(const webrtc::PeerConnectionInterface::RTCConfiguration& config, rtc::scoped_refptr<webrtc::AudioEncoderFactory> audio_encoder_factory, rtc::scoped_refptr<webrtc::AudioDecoderFactory> audio_decoder_factory)"
  },
  {
    "label": "pc_factory()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>)",
    "insertText": "pc_factory()"
  },
  {
    "label": "CreateDataChannel()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<webrtc::DataChannelInterface>)",
    "insertText": "CreateDataChannel(const std::string& label, const webrtc::DataChannelInit& init)"
  },
  {
    "label": "WaitForNegotiation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForNegotiation()"
  },
  {
    "label": "OnSignalingChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSignalingChange(webrtc::PeerConnectionInterface::SignalingState new_state)"
  },
  {
    "label": "OnAddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddTrack(rtc::scoped_refptr<webrtc::RtpReceiverInterface> receiver, const std::vector<rtc::scoped_refptr<webrtc::MediaStreamInterface>>& streams)"
  },
  {
    "label": "OnDataChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDataChannel(rtc::scoped_refptr<webrtc::DataChannelInterface> data_channel)"
  },
  {
    "label": "OnRenegotiationNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenegotiationNeeded()"
  },
  {
    "label": "OnIceConnectionChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnIceConnectionChange(webrtc::PeerConnectionInterface::IceConnectionState new_state)"
  },
  {
    "label": "OnIceGatheringChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnIceGatheringChange(webrtc::PeerConnectionInterface::IceGatheringState new_state)"
  },
  {
    "label": "OnIceCandidate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnIceCandidate(const webrtc::IceCandidateInterface* candidate)"
  },
  {
    "label": "OnSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSuccess(webrtc::SessionDescriptionInterface* desc)"
  },
  {
    "label": "OnFailure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFailure(webrtc::RTCError)"
  },
  {
    "label": "CreateOffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateOffer(const webrtc::PeerConnectionInterface::RTCOfferAnswerOptions& options)"
  },
  {
    "label": "CreateAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAnswer(const webrtc::PeerConnectionInterface::RTCOfferAnswerOptions& options)"
  },
  {
    "label": "ReceiveOfferSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveOfferSdp(const std::string& sdp)"
  },
  {
    "label": "ReceiveAnswerSdp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveAnswerSdp(const std::string& sdp)"
  },
  {
    "label": "AddIceCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIceCandidate(const std::string& sdp_mid, int sdp_mline_index, const std::string& candidate)"
  },
  {
    "label": "WaitForCallEstablished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCallEstablished()"
  },
  {
    "label": "WaitForConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForConnection()"
  },
  {
    "label": "WaitForAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAudio()"
  },
  {
    "label": "WaitForVideo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForVideo()"
  },
  {
    "label": "GetAndAddUserMedia()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAndAddUserMedia(bool audio, const cricket::AudioOptions& audio_options, bool video)"
  },
  {
    "label": "SetLocalDescription()",
    "kind": "Method",
    "detail": "Function (sigslot::signal3<const std::string&,int,const std::string&> SignalOnIceCandidateReady ; sigslot::signal1<const std::string&> SignalOnSdpReady ; sigslot::signal1<webrtc::DataChannelInterface*> SignalOnDataChannel ; private : void)",
    "insertText": "SetLocalDescription(webrtc::SdpType type, const std::string& sdp)"
  },
  {
    "label": "SetRemoteDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRemoteDescription(webrtc::SdpType type, const std::string& sdp)"
  },
  {
    "label": "CheckForConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForConnection()"
  },
  {
    "label": "CheckForAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForAudio()"
  },
  {
    "label": "CheckForVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForVideo()"
  },
  {
    "label": "GetUserMedia()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<webrtc::MediaStreamInterface>)",
    "insertText": "GetUserMedia(bool audio, const cricket::AudioOptions& audio_options, bool video)"
  }
]