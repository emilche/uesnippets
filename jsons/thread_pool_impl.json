[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_THREAD_POOL_IMPL_H_ # define BASE_TASK_THREAD_POOL_THREAD_POOL_IMPL_H_ # include<memory> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / dcheck_is_on . h \" # include \" base / memory / ptr_util . h \" # include \" base / sequence_checker . h \" # include \" base / strings / string_piece . h \" # include \" base / synchronization / atomic_flag . h \" # include \" base / task / single_thread_task_runner_thread_mode . h \" # include \" base / task / task_executor . h \" # include \" base / task / task_traits . h \" # include \" base / task / thread_pool / delayed_task_manager . h \" # include \" base / task / thread_pool / environment_config . h \" # include \" base / task / thread_pool / pooled_single_thread_task_runner_manager . h \" # include \" base / task / thread_pool / pooled_task_runner_delegate . h \" # include \" base / task / thread_pool / service_thread . h \" # include \" base / task / thread_pool / task_source . h \" # include \" base / task / thread_pool / task_tracker . h \" # include \" base / task / thread_pool / thread_group . h \" # include \" base / task / thread_pool / thread_group_impl . h \" # include \" base / task / thread_pool / thread_pool_instance . h \" # include \" base / task / updateable_sequenced_task_runner . h \" # include \" base / thread_annotations . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "ThreadPoolImpl()",
    "kind": "Method",
    "detail": "Function (namespace internal { class BASE_EXPORT ThreadPoolImpl : public ThreadPoolInstance,public TaskExecutor,public ThreadGroup::Delegate,public PooledTaskRunnerDelegate { public : using TaskTrackerImpl = TaskTracker ;)",
    "insertText": "ThreadPoolImpl(StringPiece histogram_label)"
  },
  {
    "label": "ThreadPoolImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadPoolImpl(StringPiece histogram_label, std::unique_ptr<TaskTrackerImpl> task_tracker)"
  },
  {
    "label": "ThreadPoolImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadPoolImpl(const ThreadPoolImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadPoolImpl&)",
    "insertText": "operator(const ThreadPoolImpl&)"
  },
  {
    "label": "ThreadPoolImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadPoolImpl()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(const ThreadPoolInstance::InitParams& init_params, WorkerThreadObserver* worker_thread_observer)"
  },
  {
    "label": "WasStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasStarted()"
  },
  {
    "label": "WasStartedUnsafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WasStartedUnsafe()"
  },
  {
    "label": "GetMaxConcurrentNonBlockedTasksWithTraitsDeprecated()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxConcurrentNonBlockedTasksWithTraitsDeprecated(const TaskTraits& traits)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "FlushForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushForTesting()"
  },
  {
    "label": "FlushAsyncForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAsyncForTesting(OnceClosure flush_callback)"
  },
  {
    "label": "JoinForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinForTesting()"
  },
  {
    "label": "BeginFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFence()"
  },
  {
    "label": "EndFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFence()"
  },
  {
    "label": "BeginBestEffortFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginBestEffortFence()"
  },
  {
    "label": "EndBestEffortFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndBestEffortFence()"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, const TaskTraits& traits, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "CreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<TaskRunner>)",
    "insertText": "CreateTaskRunner(const TaskTraits& traits)"
  },
  {
    "label": "CreateSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SequencedTaskRunner>)",
    "insertText": "CreateSequencedTaskRunner(const TaskTraits& traits)"
  },
  {
    "label": "CreateSingleThreadTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "CreateSingleThreadTaskRunner(const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) scoped_refptr<SingleThreadTaskRunner> CreateCOMSTATaskRunner( const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "CreateUpdateableSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (# endif scoped_refptr<UpdateableSequencedTaskRunner>)",
    "insertText": "CreateUpdateableSequencedTaskRunner(const TaskTraits& traits)"
  },
  {
    "label": "EnqueueJobTaskSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueueJobTaskSource(scoped_refptr<JobTaskSource> task_source)"
  },
  {
    "label": "RemoveJobTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveJobTaskSource(scoped_refptr<JobTaskSource> task_source)"
  },
  {
    "label": "UpdatePriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriority(scoped_refptr<TaskSource> task_source, TaskPriority priority)"
  },
  {
    "label": "UpdateJobPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJobPriority(scoped_refptr<TaskSource> task_source, TaskPriority priority)"
  },
  {
    "label": "NextScheduledRunTimeForTesting()",
    "kind": "Method",
    "detail": "Function (absl::optional<TimeTicks>)",
    "insertText": "NextScheduledRunTimeForTesting()"
  },
  {
    "label": "ProcessRipeDelayedTasksForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRipeDelayedTasksForTesting()"
  },
  {
    "label": "SetSynchronousThreadStartForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSynchronousThreadStartForTesting(bool enabled)"
  },
  {
    "label": "UpdateCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateCanRunPolicy()"
  },
  {
    "label": "GetThreadGroupForTraits()",
    "kind": "Method",
    "detail": "Function (const ThreadGroup*)",
    "insertText": "GetThreadGroupForTraits(const TaskTraits& traits)"
  },
  {
    "label": "PostTaskWithSequenceNow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostTaskWithSequenceNow(Task task, scoped_refptr<Sequence> sequence)"
  },
  {
    "label": "PostTaskWithSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostTaskWithSequence(Task task, scoped_refptr<Sequence> sequence)"
  },
  {
    "label": "ShouldYield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldYield(const TaskSource* task_source)"
  },
  {
    "label": "GUARDED_BY_CONTEXT()",
    "kind": "Method",
    "detail": "Function (const std::unique_ptr<TaskTrackerImpl> task_tracker_ ; ServiceThread service_thread_ ; DelayedTaskManager delayed_task_manager_ ; PooledSingleThreadTaskRunnerManager single_thread_task_runner_manager_ ; std::unique_ptr<ThreadGroup> foreground_thread_group_ ; std::unique_ptr<ThreadGroup> background_thread_group_ ; bool started_)",
    "insertText": "GUARDED_BY_CONTEXT(sequence_checker_)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) && defined(COM_INIT_CHECK_HOOK_ENABLED)"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]