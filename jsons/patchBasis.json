[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_OSD_PATCH_BASIS_H # define OPENSUBDIV3_OSD_PATCH_BASIS_H # if !)",
    "insertText": "defined(OSD_PATCH_BASIS_GLSL) && \\ !defined(OSD_PATCH_BASIS_HLSL) && \\ !defined(OSD_PATCH_BASIS_CUDA) && \\ !defined(OSD_PATCH_BASIS_OPENCL) && \\ !defined(OSD_PATCH_BASIS_METAL)"
  },
  {
    "label": "Osd_EvalBasisLinear()",
    "kind": "Method",
    "detail": "Function (namespace OPENSUBDIV_VERSION { namespace Osd { # endif OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "Osd_EvalBasisLinear(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 4), OSD_OUT_ARRAY(OSD_REAL, wDs, 4), OSD_OUT_ARRAY(OSD_REAL, wDt, 4), OSD_OUT_ARRAY(OSD_REAL, wDss, 4), OSD_OUT_ARRAY(OSD_REAL, wDst, 4), OSD_OUT_ARRAY(OSD_REAL, wDtt, 4))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL sC = 1 . 0 f - s ; OSD_REAL tC = 1 . 0 f - t ;)",
    "insertText": "if(OSD_OPTIONAL(wP))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (wP [ 0 ] = sC* tC ; wP [ 1 ] = s* tC ; wP [ 2 ] = s* t ; wP [ 3 ] = sC* t ; })",
    "insertText": "if(OSD_OPTIONAL(wDs && wDt))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (wDs [ 0 ] = - tC ; wDs [ 1 ] = tC ; wDs [ 2 ] = t ; wDs [ 3 ] = - t ; wDt [ 0 ] = - sC ; wDt [ 1 ] = - s ; wDt [ 2 ] = s ; wDt [ 3 ] = sC ;)",
    "insertText": "if(OSD_OPTIONAL(wDss && wDst && wDtt))"
  },
  {
    "label": "Osd_evalBSplineCurve()",
    "kind": "Method",
    "detail": "Function (wDss [ i ] = 0 . 0 f ; wDtt [ i ] = 0 . 0 f ; } wDst [ 0 ] = 1 . 0 f ; wDst [ 1 ] = - 1 . 0 f ; wDst [ 2 ] = 1 . 0 f ; wDst [ 3 ] = - 1 . 0 f ; } } return 4 ; } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_evalBSplineCurve(OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 4), OSD_OUT_ARRAY(OSD_REAL, wDP, 4), OSD_OUT_ARRAY(OSD_REAL, wDP2, 4))"
  },
  {
    "label": "OSD_REAL_CAST()",
    "kind": "Method",
    "detail": "Function (const OSD_REAL one6th =)",
    "insertText": "OSD_REAL_CAST(1.0f / 6.0f)"
  },
  {
    "label": "one6th()",
    "kind": "Method",
    "detail": "Function (OSD_REAL t2 = t* t ; OSD_REAL t3 = t* t2 ; wP [ 0 ] =)",
    "insertText": "one6th(1.0f - 3.0f*(t - t2) - t3)"
  },
  {
    "label": "one6th()",
    "kind": "Method",
    "detail": "Function (wP [ 1 ] =)",
    "insertText": "one6th(4.0f - 6.0f*t2 + 3.0f*t3)"
  },
  {
    "label": "one6th()",
    "kind": "Method",
    "detail": "Function (wP [ 2 ] =)",
    "insertText": "one6th(1.0f + 3.0f*(t + t2 - t3))"
  },
  {
    "label": "one6th()",
    "kind": "Method",
    "detail": "Function (wP [ 3 ] =)",
    "insertText": "one6th(t3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (wDP [ 0 ] = - 0 . 5 f* t2 + t - 0 . 5 f ; wDP [ 1 ] = 1 . 5 f* t2 - 2 . 0 f* t ; wDP [ 2 ] = - 1 . 5 f* t2 + t + 0 . 5 f ; wDP [ 3 ] = 0 . 5 f* t2 ; })",
    "insertText": "if(OSD_OPTIONAL(wDP2))"
  },
  {
    "label": "Osd_adjustBSplineBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (wDP2 [ 0 ] = - t + 1 . 0 f ; wDP2 [ 1 ] = 3 . 0 f* t - 2 . 0 f ; wDP2 [ 2 ] = - 3 . 0 f* t + 1 . 0 f ; wDP2 [ 3 ] = t ; } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_adjustBSplineBoundaryWeights(int boundary, OSD_INOUT_ARRAY(OSD_REAL, w, 16))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (w [ i + 8 ] - = w [ i + 0 ] ; w [ i + 4 ] + = w [ i + 0 ]* 2 . 0 f ; w [ i + 0 ] = 0 . 0 f ; } })",
    "insertText": "if((boundary & 2) != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (w [ i + 1 ] - = w [ i + 3 ] ; w [ i + 2 ] + = w [ i + 3 ]* 2 . 0 f ; w [ i + 3 ] = 0 . 0 f ; } })",
    "insertText": "if((boundary & 4) != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (w [ i + 4 ] - = w [ i + 1 2 ] ; w [ i + 8 ] + = w [ i + 1 2 ]* 2 . 0 f ; w [ i + 1 2 ] = 0 . 0 f ; } })",
    "insertText": "if((boundary & 8) != 0)"
  },
  {
    "label": "Osd_boundBasisBSpline()",
    "kind": "Method",
    "detail": "Function (w [ i + 2 ] - = w [ i + 0 ] ; w [ i + 1 ] + = w [ i + 0 ]* 2 . 0 f ; w [ i + 0 ] = 0 . 0 f ; } } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_boundBasisBSpline(int boundary, OSD_INOUT_ARRAY(OSD_REAL, wP, 16), OSD_INOUT_ARRAY(OSD_REAL, wDs, 16), OSD_INOUT_ARRAY(OSD_REAL, wDt, 16), OSD_INOUT_ARRAY(OSD_REAL, wDss, 16), OSD_INOUT_ARRAY(OSD_REAL, wDst, 16), OSD_INOUT_ARRAY(OSD_REAL, wDtt, 16))"
  },
  {
    "label": "Osd_adjustBSplineBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBSplineBoundaryWeights(boundary, wP)"
  },
  {
    "label": "Osd_adjustBSplineBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBSplineBoundaryWeights(boundary, wDs)"
  },
  {
    "label": "Osd_adjustBSplineBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBSplineBoundaryWeights(boundary, wDt)"
  },
  {
    "label": "Osd_adjustBSplineBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBSplineBoundaryWeights(boundary, wDss)"
  },
  {
    "label": "Osd_adjustBSplineBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBSplineBoundaryWeights(boundary, wDst)"
  },
  {
    "label": "Osd_adjustBSplineBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBSplineBoundaryWeights(boundary, wDtt)"
  },
  {
    "label": "Osd_EvalBasisBSpline()",
    "kind": "Method",
    "detail": "Function (} } } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "Osd_EvalBasisBSpline(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 16), OSD_OUT_ARRAY(OSD_REAL, wDs, 16), OSD_OUT_ARRAY(OSD_REAL, wDt, 16), OSD_OUT_ARRAY(OSD_REAL, wDss, 16), OSD_OUT_ARRAY(OSD_REAL, wDst, 16), OSD_OUT_ARRAY(OSD_REAL, wDtt, 16))"
  },
  {
    "label": "Osd_evalBSplineCurve()",
    "kind": "Method",
    "detail": "Function (OSD_REAL sWeights [ 4 ],tWeights [ 4 ],dsWeights [ 4 ],dtWeights [ 4 ],dssWeights [ 4 ],dttWeights [ 4 ] ;)",
    "insertText": "Osd_evalBSplineCurve(s, sWeights, OSD_OPTIONAL_INIT(wDs, dsWeights), OSD_OPTIONAL_INIT(wDss, dssWeights))"
  },
  {
    "label": "Osd_evalBSplineCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBSplineCurve(t, tWeights, OSD_OPTIONAL_INIT(wDt, dtWeights), OSD_OPTIONAL_INIT(wDtt, dttWeights))"
  },
  {
    "label": "Osd_evalBezierCurve()",
    "kind": "Method",
    "detail": "Function (wDss [ 4* i + j ] = dssWeights [ j ]* tWeights [ i ] ; wDst [ 4* i + j ] = dsWeights [ j ]* dtWeights [ i ] ; wDtt [ 4* i + j ] = sWeights [ j ]* dttWeights [ i ] ; } } } } return 1 6 ; } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_evalBezierCurve(OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 4), OSD_OUT_ARRAY(OSD_REAL, wDP, 4), OSD_OUT_ARRAY(OSD_REAL, wDP2, 4))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL t2 = t* t ; OSD_REAL tC = 1 . 0 f - t ; OSD_REAL tC2 = tC* tC ; wP [ 0 ] = tC2* tC ; wP [ 1 ] = tC2* t* 3 . 0 f ; wP [ 2 ] = t2* tC* 3 . 0 f ; wP [ 3 ] = t2* t ;)",
    "insertText": "if(OSD_OPTIONAL(wDP))"
  },
  {
    "label": "Osd_EvalBasisBezier()",
    "kind": "Method",
    "detail": "Function (wDP2 [ 0 ] = 6 . 0 f* tC ; wDP2 [ 1 ] = 1 8 . 0 f* t - 1 2 . 0 f ; wDP2 [ 2 ] = - 1 8 . 0 f* t + 6 . 0 f ; wDP2 [ 3 ] = 6 . 0 f* t ; } } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "Osd_EvalBasisBezier(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 16), OSD_OUT_ARRAY(OSD_REAL, wDs, 16), OSD_OUT_ARRAY(OSD_REAL, wDt, 16), OSD_OUT_ARRAY(OSD_REAL, wDss, 16), OSD_OUT_ARRAY(OSD_REAL, wDst, 16), OSD_OUT_ARRAY(OSD_REAL, wDtt, 16))"
  },
  {
    "label": "Osd_evalBezierCurve()",
    "kind": "Method",
    "detail": "Function (OSD_REAL sWeights [ 4 ],tWeights [ 4 ],dsWeights [ 4 ],dtWeights [ 4 ],dssWeights [ 4 ],dttWeights [ 4 ] ;)",
    "insertText": "Osd_evalBezierCurve(s, OSD_OPTIONAL_INIT(wP, sWeights), OSD_OPTIONAL_INIT(wDs, dsWeights), OSD_OPTIONAL_INIT(wDss, dssWeights))"
  },
  {
    "label": "Osd_evalBezierCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierCurve(t, OSD_OPTIONAL_INIT(wP, tWeights), OSD_OPTIONAL_INIT(wDt, dtWeights), OSD_OPTIONAL_INIT(wDtt, dttWeights))"
  },
  {
    "label": "Osd_EvalBasisGregory()",
    "kind": "Method",
    "detail": "Function (wDss [ 4* i + j ] = dssWeights [ j ]* tWeights [ i ] ; wDst [ 4* i + j ] = dsWeights [ j ]* dtWeights [ i ] ; wDtt [ 4* i + j ] = sWeights [ j ]* dttWeights [ i ] ; } } } } return 1 6 ; } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "Osd_EvalBasisGregory(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 20), OSD_OUT_ARRAY(OSD_REAL, wDs, 20), OSD_OUT_ARRAY(OSD_REAL, wDt, 20), OSD_OUT_ARRAY(OSD_REAL, wDss, 20), OSD_OUT_ARRAY(OSD_REAL, wDst, 20), OSD_OUT_ARRAY(OSD_REAL, wDtt, 20))"
  },
  {
    "label": "OSD_ARRAY_12()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const int boundaryGregory [ 1 2 ] =)",
    "insertText": "OSD_ARRAY_12(int, 0, 1, 7, 5, 2, 6, 16, 12, 15, 17, 11, 10)"
  },
  {
    "label": "OSD_ARRAY_12()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const int boundaryBezSCol [ 1 2 ] =)",
    "insertText": "OSD_ARRAY_12(int, 0, 1, 2, 3, 0, 3, 0, 3, 0, 1, 2, 3)"
  },
  {
    "label": "OSD_ARRAY_12()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const int boundaryBezTRow [ 1 2 ] =)",
    "insertText": "OSD_ARRAY_12(int, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const int interiorGregory [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(int, 3, 4, 8, 9, 13, 14, 18, 19)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const int interiorBezSCol [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(int, 1, 1, 2, 2, 2, 2, 1, 1)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const int interiorBezTRow [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(int, 1, 1, 1, 1, 2, 2, 2, 2)"
  },
  {
    "label": "Osd_evalBezierCurve()",
    "kind": "Method",
    "detail": "Function (OSD_REAL Bs [ 4 ],Bds [ 4 ],Bdss [ 4 ] ; OSD_REAL Bt [ 4 ],Bdt [ 4 ],Bdtt [ 4 ] ;)",
    "insertText": "Osd_evalBezierCurve(s, Bs, OSD_OPTIONAL_INIT(wDs, Bds), OSD_OPTIONAL_INIT(wDss, Bdss))"
  },
  {
    "label": "Osd_evalBezierCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierCurve(t, Bt, OSD_OPTIONAL_INIT(wDt, Bdt), OSD_OPTIONAL_INIT(wDtt, Bdtt))"
  },
  {
    "label": "df0()",
    "kind": "Method",
    "detail": "Function (OSD_REAL sC = 1 . 0 f - s ; OSD_REAL tC = 1 . 0 f - t ; OSD_REAL df0 = s + t ;)",
    "insertText": "df0(df0 <= 0.0f) ? 1.0f : (1.0f / df0)"
  },
  {
    "label": "df1()",
    "kind": "Method",
    "detail": "Function (OSD_REAL df1 = sC + t ;)",
    "insertText": "df1(df1 <= 0.0f) ? 1.0f : (1.0f / df1)"
  },
  {
    "label": "df2()",
    "kind": "Method",
    "detail": "Function (OSD_REAL df2 = sC + tC ;)",
    "insertText": "df2(df2 <= 0.0f) ? 1.0f : (1.0f / df2)"
  },
  {
    "label": "df3()",
    "kind": "Method",
    "detail": "Function (OSD_REAL df3 = s + tC ;)",
    "insertText": "df3(df3 <= 0.0f) ? 1.0f : (1.0f / df3)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (OSD_REAL G [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(OSD_REAL, s*df0, (1.0f - s*df0), t*df1, (1.0f - t*df1), sC*df2, (1.0f - sC*df2), tC*df3, (1.0f - tC*df3))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (wP [ boundaryGregory [ i ] ] = Bs [ boundaryBezSCol [ i ] ]* Bt [ boundaryBezTRow [ i ] ] ; })",
    "insertText": "for(int j = 0; j < 8; ++j)"
  },
  {
    "label": "OSD_OPTIONAL()",
    "kind": "Method",
    "detail": "Function (bool find_second_partials =)",
    "insertText": "OSD_OPTIONAL(wDs && wDst && wDtt)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int iDst = boundaryGregory [ i ] ; int tRow = boundaryBezTRow [ i ] ; int sCol = boundaryBezSCol [ i ] ; wDs [ iDst ] = Bds [ sCol ]* Bt [ tRow ] ; wDt [ iDst ] = Bdt [ tRow ]* Bs [ sCol ] ;)",
    "insertText": "if(find_second_partials)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (wDss [ iDst ] = Bdss [ sCol ]* Bt [ tRow ]* G [ j ] ; wDst [ iDst ] = Bds [ sCol ]* Bdt [ tRow ]* G [ j ] ; wDtt [ iDst ] = Bs [ sCol ]* Bdtt [ tRow ]* G [ j ] ; } } # else OSD_REAL D [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(OSD_REAL, df0, df0, df1, df1, df2, df2, df3, df3)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const OSD_REAL Nds [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(OSD_REAL, 1.0f, 0.0f, 0.0f, -1.0f, -1.0f, 0.0f, 0.0f, 1.0f)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const OSD_REAL Ndt [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(OSD_REAL, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, -1.0f, -1.0f, 0.0f)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const OSD_REAL Dds [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(OSD_REAL, 1.0f, 1.0f, -1.0f, -1.0f, -1.0f, -1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "OSD_ARRAY_8()",
    "kind": "Method",
    "detail": "Function (OSD_DATA_STORAGE_CLASS const OSD_REAL Ddt [ 8 ] =)",
    "insertText": "OSD_ARRAY_8(OSD_REAL, 1.0f, 1.0f, 1.0f, 1.0f, -1.0f, -1.0f, -1.0f, -1.0f)"
  },
  {
    "label": "Gds()",
    "kind": "Method",
    "detail": "Function (int iDst = interiorGregory [ k ] ; int tRow = interiorBezTRow [ k ] ; int sCol = interiorBezSCol [ k ] ; OSD_REAL)",
    "insertText": "Gds(Nds[k] - Dds[k] * G[k])"
  },
  {
    "label": "Gdt()",
    "kind": "Method",
    "detail": "Function (OSD_REAL)",
    "insertText": "Gdt(Ndt[k] - Ddt[k] * G[k])"
  },
  {
    "label": "iDst()",
    "kind": "Method",
    "detail": "Function (wDs [)",
    "insertText": "iDst(Bds[sCol] * G[k] + Bs[sCol] * Gds)"
  },
  {
    "label": "iDst()",
    "kind": "Method",
    "detail": "Function (wDt [)",
    "insertText": "iDst(Bdt[tRow] * G[k] + Bt[tRow] * Gdt)"
  },
  {
    "label": "Dsqr_inv()",
    "kind": "Method",
    "detail": "Function (OSD_REAL Dsqr_inv = D [ k ]* D [ k ] ; OSD_REAL Gdss = 2 . 0 f* Dds [ k ]*)",
    "insertText": "Dsqr_inv(G[k] * Dds[k] - Nds[k])"
  },
  {
    "label": "Dsqr_inv()",
    "kind": "Method",
    "detail": "Function (OSD_REAL Gdst =)",
    "insertText": "Dsqr_inv(2.0f * G[k] * Dds[k] * Ddt[k] - Nds[k] * Ddt[k] - Ndt[k] * Dds[k])"
  },
  {
    "label": "Dsqr_inv()",
    "kind": "Method",
    "detail": "Function (OSD_REAL Gdtt = 2 . 0 f* Ddt [ k ]*)",
    "insertText": "Dsqr_inv(G[k] * Ddt[k] - Ndt[k])"
  },
  {
    "label": "iDst()",
    "kind": "Method",
    "detail": "Function (wDss [)",
    "insertText": "iDst(Bdss[sCol] * G[k] + 2.0f * Bds[sCol] * Gds + Bs[sCol] * Gdss)"
  },
  {
    "label": "tRow()",
    "kind": "Method",
    "detail": "Function (wDst [ iDst ] = Bt [)",
    "insertText": "tRow(Bs[sCol] * Gdst + Bds[sCol] * Gdt) + Bdt[tRow] * (Bds[sCol] * G[k] + Bs[sCol] * Gds)"
  },
  {
    "label": "iDst()",
    "kind": "Method",
    "detail": "Function (wDtt [)",
    "insertText": "iDst(Bdtt[tRow] * G[k] + 2.0f * Bdt[tRow] * Gdt + Bt[tRow] * Gdtt)"
  },
  {
    "label": "Osd_EvalBasisLinearTri()",
    "kind": "Method",
    "detail": "Function (} } # endif } return 2 0 ; } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "Osd_EvalBasisLinearTri(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 3), OSD_OUT_ARRAY(OSD_REAL, wDs, 3), OSD_OUT_ARRAY(OSD_REAL, wDt, 3), OSD_OUT_ARRAY(OSD_REAL, wDss, 3), OSD_OUT_ARRAY(OSD_REAL, wDst, 3), OSD_OUT_ARRAY(OSD_REAL, wDtt, 3))"
  },
  {
    "label": "Osd_evalBivariateMonomialsQuartic()",
    "kind": "Method",
    "detail": "Function (wDss [ 0 ] = wDss [ 1 ] = wDss [ 2 ] = 0 . 0 f ; wDst [ 0 ] = wDst [ 1 ] = wDst [ 2 ] = 0 . 0 f ; wDtt [ 0 ] = wDtt [ 1 ] = wDtt [ 2 ] = 0 . 0 f ; } } return 3 ; } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_evalBivariateMonomialsQuartic(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, M, 15))"
  },
  {
    "label": "Osd_evalBoxSplineTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (M [ 0 ] = 1 . 0 ; M [ 1 ] = s ; M [ 2 ] = t ; M [ 3 ] = s* s ; M [ 4 ] = s* t ; M [ 5 ] = t* t ; M [ 6 ] = M [ 3 ]* s ; M [ 7 ] = M [ 4 ]* s ; M [ 8 ] = M [ 4 ]* t ; M [ 9 ] = M [ 5 ]* t ; M [ 1 0 ] = M [ 6 ]* s ; M [ 1 1 ] = M [ 7 ]* s ; M [ 1 2 ] = M [ 3 ]* M [ 5 ] ; M [ 1 3 ] = M [ 8 ]* t ; M [ 1 4 ] = M [ 9 ]* t ; } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_evalBoxSplineTriDerivWeights(OSD_INOUT_ARRAY(OSD_REAL, M, 15), int ds, int dt, OSD_OUT_ARRAY(OSD_REAL, w, 12))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL S = 1 . 0 f ; int totalOrder = ds + dt ;)",
    "insertText": "if(totalOrder == 0)"
  },
  {
    "label": "OSD_REAL_CAST()",
    "kind": "Method",
    "detail": "Function (S* =)",
    "insertText": "OSD_REAL_CAST(1.0f / 12.0f)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 0 ] =)",
    "insertText": "S(1 - 2*M[1] - 4*M[2] + 6*M[4] + 6*M[5] + 2*M[6] - 6*M[8] - 4*M[9] - M[10] - 2*M[11] + 2*M[13] + M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 ] =)",
    "insertText": "S(1 + 2*M[1] - 2*M[2] - 6*M[4] - 4*M[6] + 6*M[8] + 2*M[9] + 2*M[10] + 4*M[11] - 2*M[13] - M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 2 ] =)",
    "insertText": "S(2*M[6] - M[10] - 2*M[11])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 3 ] =)",
    "insertText": "S(1 - 4*M[1] - 2*M[2] + 6*M[3] + 6*M[4] - 4*M[6] - 6*M[7] + 2*M[9] + M[10] + 2*M[11] - 2*M[13] - M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 4 ] =)",
    "insertText": "S(6 -12*M[3] -12*M[4] -12*M[5] + 8*M[6] +12*M[7] +12*M[8] + 8*M[9] - M[10] - 2*M[11] - 2*M[13] - M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 5 ] =)",
    "insertText": "S(1 + 4*M[1] + 2*M[2] + 6*M[3] + 6*M[4] - 4*M[6] - 6*M[7] -12*M[8] - 4*M[9] - M[10] - 2*M[11] + 4*M[13] + 2*M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 6 ] =)",
    "insertText": "S(M[10] + 2*M[11])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 7 ] =)",
    "insertText": "S(1 - 2*M[1] + 2*M[2] - 6*M[4] + 2*M[6] + 6*M[7] - 4*M[9] - M[10] - 2*M[11] + 4*M[13] + 2*M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 8 ] =)",
    "insertText": "S(1 + 2*M[1] + 4*M[2] + 6*M[4] + 6*M[5] - 4*M[6] -12*M[7] - 6*M[8] - 4*M[9] + 2*M[10] + 4*M[11] - 2*M[13] - M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 9 ] =)",
    "insertText": "S(2*M[6] + 6*M[7] + 6*M[8] + 2*M[9] - M[10] - 2*M[11] - 2*M[13] - M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 0 ] =)",
    "insertText": "S(2*M[9] - 2*M[13] - M[14])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 1 ] =)",
    "insertText": "S(2*M[13] + M[14])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(totalOrder == 1)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 0 ] =)",
    "insertText": "S(-1 + 3*M[2] + 3*M[3] - 3*M[5] - 2*M[6] - 3*M[7] + M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 ] =)",
    "insertText": "S(1 - 3*M[2] - 6*M[3] + 3*M[5] + 4*M[6] + 6*M[7] - M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 2 ] =)",
    "insertText": "S(3*M[3] - 2*M[6] - 3*M[7])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 3 ] =)",
    "insertText": "S(-2 + 6*M[1] + 3*M[2] - 6*M[3] - 6*M[4] + 2*M[6] + 3*M[7] - M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 4 ] =)",
    "insertText": "S(-12*M[1] - 6*M[2] +12*M[3] +12*M[4] + 6*M[5] - 2*M[6] - 3*M[7] - M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 5 ] =)",
    "insertText": "S(2 + 6*M[1] + 3*M[2] - 6*M[3] - 6*M[4] - 6*M[5] - 2*M[6] - 3*M[7] + 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 6 ] =)",
    "insertText": "S(2*M[6] + 3*M[7])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 7 ] =)",
    "insertText": "S(-1 - 3*M[2] + 3*M[3] + 6*M[4] - 2*M[6] - 3*M[7] + 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 8 ] =)",
    "insertText": "S(1 + 3*M[2] - 6*M[3] -12*M[4] - 3*M[5] + 4*M[6] + 6*M[7] - M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 9 ] =)",
    "insertText": "S(3*M[3] + 6*M[4] + 3*M[5] - 2*M[6] - 3*M[7] - M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 0 ] =)",
    "insertText": "S(- M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 1 ] =)",
    "insertText": "S(M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (} else { w [ 0 ] =)",
    "insertText": "S(-2 + 3*M[1] + 6*M[2] - 6*M[4] - 6*M[5] - M[6] + 3*M[8] + 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 ] =)",
    "insertText": "S(-1 - 3*M[1] + 6*M[4] + 3*M[5] + 2*M[6] - 3*M[8] - 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 2 ] =)",
    "insertText": "S(- M[6])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 3 ] =)",
    "insertText": "S(-1 + 3*M[1] - 3*M[3] + 3*M[5] + M[6] - 3*M[8] - 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 4 ] =)",
    "insertText": "S(- 6*M[1] -12*M[2] + 6*M[3] +12*M[4] +12*M[5] - M[6] - 3*M[8] - 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 5 ] =)",
    "insertText": "S(1 + 3*M[1] - 3*M[3] -12*M[4] - 6*M[5] - M[6] + 6*M[8] + 4*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 6 ] =)",
    "insertText": "S(+ M[6])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 7 ] =)",
    "insertText": "S(1 - 3*M[1] + 3*M[3] - 6*M[5] - M[6] + 6*M[8] + 4*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 8 ] =)",
    "insertText": "S(2 + 3*M[1] + 6*M[2] - 6*M[3] - 6*M[4] - 6*M[5] + 2*M[6] - 3*M[8] - 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 9 ] =)",
    "insertText": "S(+ 3*M[3] + 6*M[4] + 3*M[5] - M[6] - 3*M[8] - 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 0 ] =)",
    "insertText": "S(3*M[5] - 3*M[8] - 2*M[9])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 1 ] =)",
    "insertText": "S(3*M[8] + 2*M[9])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(totalOrder == 2)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 0 ] =)",
    "insertText": "S(+ M[1] - M[3] - M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 ] =)",
    "insertText": "S(- 2*M[1] + 2*M[3] + 2*M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 2 ] =)",
    "insertText": "S(M[1] - M[3] - M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 3 ] =)",
    "insertText": "S(1 - 2*M[1] - M[2] + M[3] + M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 4 ] =)",
    "insertText": "S(-2 + 4*M[1] + 2*M[2] - M[3] - M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 5 ] =)",
    "insertText": "S(1 - 2*M[1] - M[2] - M[3] - M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 6 ] =)",
    "insertText": "S(M[3] + M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 7 ] =)",
    "insertText": "S(+ M[1] + M[2] - M[3] - M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 8 ] =)",
    "insertText": "S(- 2*M[1] - 2*M[2] + 2*M[3] + 2*M[4])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 9 ] =)",
    "insertText": "S(M[1] + M[2] - M[3] - M[4])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (w [ 1 0 ] = 0 ; w [ 1 1 ] = 0 ; } else)",
    "insertText": "if(dt == 2)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 0 ] =)",
    "insertText": "S(1 - M[1] - 2*M[2] + M[4] + M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 ] =)",
    "insertText": "S(+ M[1] + M[2] - M[4] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 2 ] = 0 ; w [ 3 ] =)",
    "insertText": "S(+ M[2] - M[4] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 4 ] =)",
    "insertText": "S(-2 + 2*M[1] + 4*M[2] - M[4] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 5 ] =)",
    "insertText": "S(- 2*M[1] - 2*M[2] + 2*M[4] + 2*M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 6 ] = 0 ; w [ 7 ] =)",
    "insertText": "S(- 2*M[2] + 2*M[4] + 2*M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 8 ] =)",
    "insertText": "S(1 - M[1] - 2*M[2] - M[4] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 0 ] =)",
    "insertText": "S(M[2] - M[4] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 1 ] =)",
    "insertText": "S(M[4] + M[5])"
  },
  {
    "label": "OSD_REAL_CAST()",
    "kind": "Method",
    "detail": "Function (} else { S* =)",
    "insertText": "OSD_REAL_CAST(1.0f / 2.0f)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 0 ] =)",
    "insertText": "S(1 - 2*M[2] - M[3] + M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 ] =)",
    "insertText": "S(-1 + 2*M[2] + 2*M[3] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 2 ] =)",
    "insertText": "S(- M[3])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 3 ] =)",
    "insertText": "S(1 - 2*M[1] + M[3] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 4 ] =)",
    "insertText": "S(-2 + 4*M[1] + 4*M[2] - M[3] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 5 ] =)",
    "insertText": "S(1 - 2*M[1] - 4*M[2] - M[3] + 2*M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 6 ] =)",
    "insertText": "S(+ M[3])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 7 ] =)",
    "insertText": "S(-1 + 2*M[1] - M[3] + 2*M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 8 ] =)",
    "insertText": "S(1 - 4*M[1] - 2*M[2] + 2*M[3] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 9 ] =)",
    "insertText": "S(+ 2*M[1] + 2*M[2] - M[3] - M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 0 ] =)",
    "insertText": "S(- M[5])"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (w [ 1 1 ] =)",
    "insertText": "S(M[5])"
  },
  {
    "label": "Osd_adjustBoxSplineTriBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (} } else { } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_adjustBoxSplineTriBoundaryWeights(int boundaryMask, OSD_INOUT_ARRAY(OSD_REAL, weights, 12))"
  },
  {
    "label": "upperBits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "upperBits(boundaryMask >> 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int lowerBits = boundaryMask& 7 ; int eBits = lowerBits ; int vBits = 0 ;)",
    "insertText": "if(upperBits == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (vBits = eBits ; eBits = 0 ; } else)",
    "insertText": "if(upperBits == 2)"
  },
  {
    "label": "vBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vBits((eBits & 1) << 2) | (eBits >> 1)"
  },
  {
    "label": "edge0IsBoundary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "edge0IsBoundary(eBits & 1)"
  },
  {
    "label": "edge1IsBoundary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "edge1IsBoundary(eBits & 2)"
  },
  {
    "label": "edge2IsBoundary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "edge2IsBoundary(eBits & 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL w0 = weights [ 0 ] ;)",
    "insertText": "if(edge2IsBoundary)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (weights [ 4 ] + = w0 ; weights [ 4 ] + = w0 ; weights [ 8 ] - = w0 ; } else { weights [ 4 ] + = w0 ; weights [ 3 ] + = w0 ; weights [ 7 ] - = w0 ; } OSD_REAL w1 = weights [ 1 ] ; weights [ 4 ] + = w1 ; weights [ 5 ] + = w1 ; weights [ 8 ] - = w1 ; OSD_REAL w2 = weights [ 2 ] ;)",
    "insertText": "if(edge1IsBoundary)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL w0 = weights [ 6 ] ;)",
    "insertText": "if(edge0IsBoundary)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (weights [ 4 ] + = w2 ; weights [ 4 ] + = w2 ; weights [ 5 ] - = w2 ; } else { weights [ 4 ] + = w2 ; weights [ 0 ] + = w2 ; weights [ 1 ] - = w2 ; } weights [ 1 0 ] = weights [ 7 ] = weights [ 3 ] = 0 . 0 f ; })",
    "insertText": "if((vBits & 1) != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL w0 = weights [ 3 ] ; weights [ 4 ] + = w0 ; weights [ 7 ] + = w0 ; weights [ 8 ] - = w0 ; OSD_REAL w1 = weights [ 0 ] ; weights [ 4 ] + = w1 ; weights [ 1 ] + = w1 ; weights [ 5 ] - = w1 ; weights [ 3 ] = weights [ 0 ] = 0 . 0 f ; })",
    "insertText": "if((vBits & 2) != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL w0 = weights [ 2 ] ; weights [ 5 ] + = w0 ; weights [ 1 ] + = w0 ; weights [ 4 ] - = w0 ; OSD_REAL w1 = weights [ 6 ] ; weights [ 5 ] + = w1 ; weights [ 9 ] + = w1 ; weights [ 8 ] - = w1 ; weights [ 2 ] = weights [ 6 ] = 0 . 0 f ; })",
    "insertText": "if((vBits & 4) != 0)"
  },
  {
    "label": "Osd_boundBasisBoxSplineTri()",
    "kind": "Method",
    "detail": "Function (OSD_REAL w0 = weights [ 1 1 ] ; weights [ 8 ] + = w0 ; weights [ 9 ] + = w0 ; weights [ 5 ] - = w0 ; OSD_REAL w1 = weights [ 1 0 ] ; weights [ 8 ] + = w1 ; weights [ 7 ] + = w1 ; weights [ 4 ] - = w1 ; weights [ 1 1 ] = weights [ 1 0 ] = 0 . 0 f ; } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_boundBasisBoxSplineTri(int boundary, OSD_INOUT_ARRAY(OSD_REAL, wP, 12), OSD_INOUT_ARRAY(OSD_REAL, wDs, 12), OSD_INOUT_ARRAY(OSD_REAL, wDt, 12), OSD_INOUT_ARRAY(OSD_REAL, wDss, 12), OSD_INOUT_ARRAY(OSD_REAL, wDst, 12), OSD_INOUT_ARRAY(OSD_REAL, wDtt, 12))"
  },
  {
    "label": "Osd_adjustBoxSplineTriBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBoxSplineTriBoundaryWeights(boundary, wP)"
  },
  {
    "label": "Osd_adjustBoxSplineTriBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBoxSplineTriBoundaryWeights(boundary, wDs)"
  },
  {
    "label": "Osd_adjustBoxSplineTriBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBoxSplineTriBoundaryWeights(boundary, wDt)"
  },
  {
    "label": "Osd_adjustBoxSplineTriBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBoxSplineTriBoundaryWeights(boundary, wDss)"
  },
  {
    "label": "Osd_adjustBoxSplineTriBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBoxSplineTriBoundaryWeights(boundary, wDst)"
  },
  {
    "label": "Osd_adjustBoxSplineTriBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_adjustBoxSplineTriBoundaryWeights(boundary, wDtt)"
  },
  {
    "label": "Osd_EvalBasisBoxSplineTri()",
    "kind": "Method",
    "detail": "Function (} } } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "Osd_EvalBasisBoxSplineTri(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 12), OSD_OUT_ARRAY(OSD_REAL, wDs, 12), OSD_OUT_ARRAY(OSD_REAL, wDt, 12), OSD_OUT_ARRAY(OSD_REAL, wDss, 12), OSD_OUT_ARRAY(OSD_REAL, wDst, 12), OSD_OUT_ARRAY(OSD_REAL, wDtt, 12))"
  },
  {
    "label": "Osd_evalBivariateMonomialsQuartic()",
    "kind": "Method",
    "detail": "Function (OSD_REAL stMonomials [ 1 5 ] ;)",
    "insertText": "Osd_evalBivariateMonomialsQuartic(s, t, stMonomials)"
  },
  {
    "label": "Osd_evalBoxSplineTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBoxSplineTriDerivWeights(stMonomials, 0, 0, wP)"
  },
  {
    "label": "Osd_evalBoxSplineTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBoxSplineTriDerivWeights(stMonomials, 1, 0, wDs)"
  },
  {
    "label": "Osd_evalBoxSplineTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBoxSplineTriDerivWeights(stMonomials, 0, 1, wDt)"
  },
  {
    "label": "Osd_evalBoxSplineTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBoxSplineTriDerivWeights(stMonomials, 2, 0, wDss)"
  },
  {
    "label": "Osd_evalBoxSplineTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBoxSplineTriDerivWeights(stMonomials, 1, 1, wDst)"
  },
  {
    "label": "Osd_evalBoxSplineTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBoxSplineTriDerivWeights(stMonomials, 0, 2, wDtt)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (} } return 1 2 ; } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_evalBezierTriDerivWeights(OSD_REAL s, OSD_REAL t, int ds, int dt, OSD_OUT_ARRAY(OSD_REAL, wB, 15))"
  },
  {
    "label": "ww()",
    "kind": "Method",
    "detail": "Function (wB [ 0 ] = - 4* ww* w ; wB [ 1 ] = 4*)",
    "insertText": "ww(w - 3 * u)"
  },
  {
    "label": "uw()",
    "kind": "Method",
    "detail": "Function (wB [ 2 ] = 1 2*)",
    "insertText": "uw(w - u)"
  },
  {
    "label": "uu()",
    "kind": "Method",
    "detail": "Function (wB [ 3 ] = 4*)",
    "insertText": "uu(3 * w - u)"
  },
  {
    "label": "vw()",
    "kind": "Method",
    "detail": "Function (wB [ 4 ] = 4* uu* u ; wB [ 5 ] = - 1 2* vw* w ; wB [ 6 ] = 1 2*)",
    "insertText": "vw(w - 2 * u)"
  },
  {
    "label": "uv()",
    "kind": "Method",
    "detail": "Function (wB [ 7 ] = 1 2*)",
    "insertText": "uv(2 * w - u)"
  },
  {
    "label": "vv()",
    "kind": "Method",
    "detail": "Function (wB [ 8 ] = 1 2* uv* u ; wB [ 9 ] = - 1 2* vv* w ; wB [ 1 0 ] = 1 2*)",
    "insertText": "vv(w - u)"
  },
  {
    "label": "ww()",
    "kind": "Method",
    "detail": "Function (wB [ 1 1 ] = 1 2* vv* u ; wB [ 1 2 ] = - 4* vv* v ; wB [ 1 3 ] = 4* vv* v ; wB [ 1 4 ] = 0 ; } else { wB [ 0 ] = - 4* ww* w ; wB [ 1 ] = - 1 2* ww* u ; wB [ 2 ] = - 1 2* uu* w ; wB [ 3 ] = - 4* uu* u ; wB [ 4 ] = 0 ; wB [ 5 ] = 4*)",
    "insertText": "ww(w - 3 * v)"
  },
  {
    "label": "uw()",
    "kind": "Method",
    "detail": "Function (wB [ 6 ] = 1 2*)",
    "insertText": "uw(w - 2 * v)"
  },
  {
    "label": "uu()",
    "kind": "Method",
    "detail": "Function (wB [ 7 ] = 1 2*)",
    "insertText": "uu(w - v)"
  },
  {
    "label": "vw()",
    "kind": "Method",
    "detail": "Function (wB [ 8 ] = 4* uu* u ; wB [ 9 ] = 1 2*)",
    "insertText": "vw(w - v)"
  },
  {
    "label": "uv()",
    "kind": "Method",
    "detail": "Function (wB [ 1 0 ] = 1 2*)",
    "insertText": "uv(2 * w - v)"
  },
  {
    "label": "vv()",
    "kind": "Method",
    "detail": "Function (wB [ 1 1 ] = 1 2* uv* u ; ; wB [ 1 2 ] = 4*)",
    "insertText": "vv(3 * w - v)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (wB [ 0 ] = 1 2* ww ;)",
    "insertText": "wB(uw - ww)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wB(uu - 4 * uw + ww)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wB(uw - uu)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (wB [ 4 ] = 1 2* uu ; wB [ 5 ] = 2 4* vw ;)",
    "insertText": "wB(uv - 2 * vw)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wB(vw - 2 * uv)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (wB [ 0 ] = 1 2* ww ; wB [ 1 ] = 2 4* uw ; wB [ 2 ] = 1 2* uu ; wB [ 3 ] = 0 ; wB [ 4 ] = 0 ;)",
    "insertText": "wB(vw - ww)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wB(uv - 2 * uw)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (wB [ 7 ] = - 2 4* uu ; wB [ 8 ] = 0 ;)",
    "insertText": "wB(vv - 4 * vw + ww)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "wB(uw - 2 * uv)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (wB [ 1 1 ] = 1 2* uu ;)",
    "insertText": "wB(vw - vv)"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (wB [ 1 3 ] = 2 4* uv ; wB [ 1 4 ] = 1 2* vv ; } else { wB [ 0 ] = 1 2* ww ; wB [ 3 ] = - 1 2* uu ; wB [ 1 3 ] = 1 2* vv ; wB [ 1 1 ] = 2 4* uv ; wB [ 1 ] = 2 4* uw - wB [ 0 ] ; wB [ 2 ] = - 2 4* uw - wB [ 3 ] ; wB [ 5 ] = 2 4* vw - wB [ 0 ] ; wB [ 6 ] = - 2 4* vw + wB [ 1 1 ] - wB [ 1 ] ; wB [ 8 ] = - wB [ 3 ] ;)",
    "insertText": "wB(wB[11] + wB[2])"
  },
  {
    "label": "wB()",
    "kind": "Method",
    "detail": "Function (wB [ 9 ] = wB [ 1 3 ] - wB [ 5 ] - wB [ 0 ] ;)",
    "insertText": "wB(wB[9] + wB[11])"
  },
  {
    "label": "Osd_EvalBasisBezierTri()",
    "kind": "Method",
    "detail": "Function (wB [ 1 2 ] = - wB [ 1 3 ] ; wB [ 4 ] = 0 ; wB [ 1 4 ] = 0 ; } } else { } } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "Osd_EvalBasisBezierTri(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 15), OSD_OUT_ARRAY(OSD_REAL, wDs, 15), OSD_OUT_ARRAY(OSD_REAL, wDt, 15), OSD_OUT_ARRAY(OSD_REAL, wDss, 15), OSD_OUT_ARRAY(OSD_REAL, wDst, 15), OSD_OUT_ARRAY(OSD_REAL, wDtt, 15))"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 0, 0, wP)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 1, 0, wDs)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 0, 1, wDt)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 2, 0, wDss)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 1, 1, wDst)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 0, 2, wDtt)"
  },
  {
    "label": "Osd_convertBezierWeightsToGregory()",
    "kind": "Method",
    "detail": "Function (} } return 1 5 ; } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "Osd_convertBezierWeightsToGregory(OSD_INOUT_ARRAY(OSD_REAL, wB, 15), OSD_INOUT_ARRAY(OSD_REAL, rG, 6), OSD_OUT_ARRAY(OSD_REAL, wG, 18))"
  },
  {
    "label": "Osd_EvalBasisGregoryTri()",
    "kind": "Method",
    "detail": "Function (wG [ 0 ] = wB [ 0 ] ; wG [ 1 ] = wB [ 1 ] ; wG [ 2 ] = wB [ 5 ] ; wG [ 3 ] = wB [ 6 ]* rG [ 0 ] ; wG [ 4 ] = wB [ 6 ]* rG [ 1 ] ; wG [ 5 ] = wB [ 4 ] ; wG [ 6 ] = wB [ 8 ] ; wG [ 7 ] = wB [ 3 ] ; wG [ 8 ] = wB [ 7 ]* rG [ 2 ] ; wG [ 9 ] = wB [ 7 ]* rG [ 3 ] ; wG [ 1 0 ] = wB [ 1 4 ] ; wG [ 1 1 ] = wB [ 1 2 ] ; wG [ 1 2 ] = wB [ 1 3 ] ; wG [ 1 3 ] = wB [ 1 0 ]* rG [ 4 ] ; wG [ 1 4 ] = wB [ 1 0 ]* rG [ 5 ] ; wG [ 1 5 ] = wB [ 2 ] ; wG [ 1 6 ] = wB [ 1 1 ] ; wG [ 1 7 ] = wB [ 9 ] ; } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "Osd_EvalBasisGregoryTri(OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 18), OSD_OUT_ARRAY(OSD_REAL, wDs, 18), OSD_OUT_ARRAY(OSD_REAL, wDt, 18), OSD_OUT_ARRAY(OSD_REAL, wDss, 18), OSD_OUT_ARRAY(OSD_REAL, wDst, 18), OSD_OUT_ARRAY(OSD_REAL, wDtt, 18))"
  },
  {
    "label": "OSD_ARRAY_6()",
    "kind": "Method",
    "detail": "Function (OSD_REAL BP [ 1 5 ],BDs [ 1 5 ],BDt [ 1 5 ],BDss [ 1 5 ],BDst [ 1 5 ],BDtt [ 1 5 ] ; OSD_REAL G [ 6 ] =)",
    "insertText": "OSD_ARRAY_6(OSD_REAL, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL u = s ; OSD_REAL v = t ; OSD_REAL w = 1 - u - v ;)",
    "insertText": "if((u + v) > 0)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (G [ 0 ] =)",
    "insertText": "u(u + v)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (G [ 1 ] =)",
    "insertText": "v(u + v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((v + w) > 0)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (G [ 2 ] =)",
    "insertText": "v(v + w)"
  },
  {
    "label": "w()",
    "kind": "Method",
    "detail": "Function (G [ 3 ] =)",
    "insertText": "w(v + w)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((w + u) > 0)"
  },
  {
    "label": "w()",
    "kind": "Method",
    "detail": "Function (G [ 4 ] =)",
    "insertText": "w(w + u)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (G [ 5 ] =)",
    "insertText": "u(w + u)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 0, 0, BP)"
  },
  {
    "label": "Osd_convertBezierWeightsToGregory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_convertBezierWeightsToGregory(BP, G, wP)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 1, 0, BDs)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 0, 1, BDt)"
  },
  {
    "label": "Osd_convertBezierWeightsToGregory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_convertBezierWeightsToGregory(BDs, G, wDs)"
  },
  {
    "label": "Osd_convertBezierWeightsToGregory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_convertBezierWeightsToGregory(BDt, G, wDt)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 2, 0, BDss)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 1, 1, BDst)"
  },
  {
    "label": "Osd_evalBezierTriDerivWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierTriDerivWeights(s, t, 0, 2, BDtt)"
  },
  {
    "label": "Osd_convertBezierWeightsToGregory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_convertBezierWeightsToGregory(BDss, G, wDss)"
  },
  {
    "label": "Osd_convertBezierWeightsToGregory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_convertBezierWeightsToGregory(BDst, G, wDst)"
  },
  {
    "label": "Osd_convertBezierWeightsToGregory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_convertBezierWeightsToGregory(BDtt, G, wDtt)"
  },
  {
    "label": "OsdGetBezierWeights()",
    "kind": "Method",
    "detail": "Function (} } return 1 8 ; } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdGetBezierWeights(OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 4), OSD_OUT_ARRAY(OSD_REAL, wDP, 4), OSD_OUT_ARRAY(OSD_REAL, wDP2, 4))"
  },
  {
    "label": "Osd_evalBezierCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBezierCurve(t, wP, wDP, wDP2)"
  },
  {
    "label": "OsdGetBSplineWeights()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdGetBSplineWeights(OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 4), OSD_OUT_ARRAY(OSD_REAL, wDP, 4), OSD_OUT_ARRAY(OSD_REAL, wDP2, 4))"
  },
  {
    "label": "Osd_evalBSplineCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_evalBSplineCurve(t, wP, wDP, wDP2)"
  },
  {
    "label": "OsdGetBoxSplineWeights()",
    "kind": "Method",
    "detail": "Function (} OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdGetBoxSplineWeights(float s, float t, OSD_OUT_ARRAY(OSD_REAL, wP, 12))"
  },
  {
    "label": "OsdAdjustBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (} } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdAdjustBoundaryWeights(int boundary, OSD_INOUT_ARRAY(OSD_REAL, sWeights, 4), OSD_INOUT_ARRAY(OSD_REAL, tWeights, 4))"
  },
  {
    "label": "OsdComputeTensorProductPatchWeights()",
    "kind": "Method",
    "detail": "Function (sWeights [ 2 ] - = sWeights [ 0 ] ; sWeights [ 1 ] + = sWeights [ 0 ]* 2 . 0 f ; sWeights [ 0 ] = 0 . 0 f ; } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdComputeTensorProductPatchWeights(float dScale, int boundary, OSD_IN_ARRAY(float, sWeights, 4), OSD_IN_ARRAY(float, tWeights, 4), OSD_IN_ARRAY(float, dsWeights, 4), OSD_IN_ARRAY(float, dtWeights, 4), OSD_IN_ARRAY(float, dssWeights, 4), OSD_IN_ARRAY(float, dttWeights, 4), OSD_OUT_ARRAY(float, wP, 16), OSD_OUT_ARRAY(float, wDs, 16), OSD_OUT_ARRAY(float, wDt, 16), OSD_OUT_ARRAY(float, wDss, 16), OSD_OUT_ARRAY(float, wDst, 16), OSD_OUT_ARRAY(float, wDtt, 16))"
  },
  {
    "label": "OsdAdjustBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OsdAdjustBoundaryWeights(boundary, sWeights, tWeights)"
  },
  {
    "label": "OsdAdjustBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OsdAdjustBoundaryWeights(boundary, dsWeights, dtWeights)"
  },
  {
    "label": "OsdAdjustBoundaryWeights()",
    "kind": "Method",
    "detail": "Function (float d2Scale = dScale* dScale ;)",
    "insertText": "OsdAdjustBoundaryWeights(boundary, dssWeights, dttWeights)"
  },
  {
    "label": "OsdGetBilinearPatchWeights()",
    "kind": "Method",
    "detail": "Function (wDss [ 4* i + j ] = dssWeights [ j ]* tWeights [ i ]* d2Scale ; wDst [ 4* i + j ] = dsWeights [ j ]* dtWeights [ i ]* d2Scale ; wDtt [ 4* i + j ] = sWeights [ j ]* dttWeights [ i ]* d2Scale ; } } } } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdGetBilinearPatchWeights(OSD_REAL s, OSD_REAL t, OSD_REAL d1Scale, OSD_OUT_ARRAY(OSD_REAL, wP, 4), OSD_OUT_ARRAY(OSD_REAL, wDs, 4), OSD_OUT_ARRAY(OSD_REAL, wDt, 4), OSD_OUT_ARRAY(OSD_REAL, wDss, 4), OSD_OUT_ARRAY(OSD_REAL, wDst, 4), OSD_OUT_ARRAY(OSD_REAL, wDtt, 4))"
  },
  {
    "label": "Osd_EvalBasisLinear()",
    "kind": "Method",
    "detail": "Function (int nPoints =)",
    "insertText": "Osd_EvalBasisLinear(s, t, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OSD_REAL d2Scale = d1Scale* d1Scale ;)",
    "insertText": "for(int i = 0; i < nPoints; ++i)"
  },
  {
    "label": "OsdGetBSplinePatchWeights()",
    "kind": "Method",
    "detail": "Function (wDss [ i ]* = d2Scale ; wDst [ i ]* = d2Scale ; wDtt [ i ]* = d2Scale ; } } } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdGetBSplinePatchWeights(OSD_REAL s, OSD_REAL t, OSD_REAL d1Scale, int boundary, OSD_OUT_ARRAY(OSD_REAL, wP, 16), OSD_OUT_ARRAY(OSD_REAL, wDs, 16), OSD_OUT_ARRAY(OSD_REAL, wDt, 16), OSD_OUT_ARRAY(OSD_REAL, wDss, 16), OSD_OUT_ARRAY(OSD_REAL, wDst, 16), OSD_OUT_ARRAY(OSD_REAL, wDtt, 16))"
  },
  {
    "label": "Osd_EvalBasisBSpline()",
    "kind": "Method",
    "detail": "Function (int nPoints =)",
    "insertText": "Osd_EvalBasisBSpline(s, t, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "Osd_boundBasisBSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_boundBasisBSpline(boundary, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "OsdGetBezierPatchWeights()",
    "kind": "Method",
    "detail": "Function (wDss [ i ]* = d2Scale ; wDst [ i ]* = d2Scale ; wDtt [ i ]* = d2Scale ; } } } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdGetBezierPatchWeights(OSD_REAL s, OSD_REAL t, OSD_REAL d1Scale, OSD_OUT_ARRAY(OSD_REAL, wP, 16), OSD_OUT_ARRAY(OSD_REAL, wDs, 16), OSD_OUT_ARRAY(OSD_REAL, wDt, 16), OSD_OUT_ARRAY(OSD_REAL, wDss, 16), OSD_OUT_ARRAY(OSD_REAL, wDst, 16), OSD_OUT_ARRAY(OSD_REAL, wDtt, 16))"
  },
  {
    "label": "Osd_EvalBasisBezier()",
    "kind": "Method",
    "detail": "Function (int nPoints =)",
    "insertText": "Osd_EvalBasisBezier(s, t, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "OsdGetGregoryPatchWeights()",
    "kind": "Method",
    "detail": "Function (wDss [ i ]* = d2Scale ; wDst [ i ]* = d2Scale ; wDtt [ i ]* = d2Scale ; } } } } OSD_FUNCTION_STORAGE_CLASS void)",
    "insertText": "OsdGetGregoryPatchWeights(OSD_REAL s, OSD_REAL t, OSD_REAL d1Scale, OSD_OUT_ARRAY(OSD_REAL, wP, 20), OSD_OUT_ARRAY(OSD_REAL, wDs, 20), OSD_OUT_ARRAY(OSD_REAL, wDt, 20), OSD_OUT_ARRAY(OSD_REAL, wDss, 20), OSD_OUT_ARRAY(OSD_REAL, wDst, 20), OSD_OUT_ARRAY(OSD_REAL, wDtt, 20))"
  },
  {
    "label": "Osd_EvalBasisGregory()",
    "kind": "Method",
    "detail": "Function (int nPoints =)",
    "insertText": "Osd_EvalBasisGregory(s, t, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "OsdEvaluatePatchBasisNormalized()",
    "kind": "Method",
    "detail": "Function (wDss [ i ]* = d2Scale ; wDst [ i ]* = d2Scale ; wDtt [ i ]* = d2Scale ; } } } } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdEvaluatePatchBasisNormalized(int patchType, OsdPatchParam param, OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 20), OSD_OUT_ARRAY(OSD_REAL, wDs, 20), OSD_OUT_ARRAY(OSD_REAL, wDt, 20), OSD_OUT_ARRAY(OSD_REAL, wDss, 20), OSD_OUT_ARRAY(OSD_REAL, wDst, 20), OSD_OUT_ARRAY(OSD_REAL, wDtt, 20))"
  },
  {
    "label": "OsdPatchParamGetBoundary()",
    "kind": "Method",
    "detail": "Function (int boundaryMask =)",
    "insertText": "OsdPatchParamGetBoundary(param)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int nPoints = 0 ;)",
    "insertText": "if(patchType == OSD_PATCH_DESCRIPTOR_REGULAR)"
  },
  {
    "label": "Osd_boundBasisBSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_boundBasisBSpline(boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "Osd_EvalBasisBSpline()",
    "kind": "Method",
    "detail": "Function (} # else OSD_REAL wP16 [ 1 6 ],wDs16 [ 1 6 ],wDt16 [ 1 6 ],wDss16 [ 1 6 ],wDst16 [ 1 6 ],wDtt16 [ 1 6 ] ; nPoints =)",
    "insertText": "Osd_EvalBasisBSpline(s, t, wP16, wDs16, wDt16, wDss16, wDst16, wDtt16)"
  },
  {
    "label": "Osd_boundBasisBSpline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_boundBasisBSpline(boundaryMask, wP16, wDs16, wDt16, wDss16, wDst16, wDtt16)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int i=0; i<nPoints; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (wP [ i ] = wP16 [ i ] ; wDs [ i ] = wDs16 [ i ] ; wDt [ i ] = wDt16 [ i ] ; wDss [ i ] = wDss16 [ i ] ; wDst [ i ] = wDst16 [ i ] ; wDtt [ i ] = wDtt16 [ i ] ; } # endif } else)",
    "insertText": "if(patchType == OSD_PATCH_DESCRIPTOR_LOOP)"
  },
  {
    "label": "Osd_EvalBasisBoxSplineTri()",
    "kind": "Method",
    "detail": "Function (# if OSD_ARRAY_ARG_BOUND_OPTIONAL nPoints =)",
    "insertText": "Osd_EvalBasisBoxSplineTri(s, t, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "Osd_boundBasisBoxSplineTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_boundBasisBoxSplineTri(boundaryMask, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "Osd_EvalBasisBoxSplineTri()",
    "kind": "Method",
    "detail": "Function (} # else OSD_REAL wP12 [ 1 2 ],wDs12 [ 1 2 ],wDt12 [ 1 2 ],wDss12 [ 1 2 ],wDst12 [ 1 2 ],wDtt12 [ 1 2 ] ; nPoints =)",
    "insertText": "Osd_EvalBasisBoxSplineTri(s, t, wP12, wDs12, wDt12, wDss12, wDst12, wDtt12)"
  },
  {
    "label": "Osd_boundBasisBoxSplineTri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Osd_boundBasisBoxSplineTri(boundaryMask, wP12, wDs12, wDt12, wDss12, wDst12, wDtt12)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (wP [ i ] = wP12 [ i ] ; wDs [ i ] = wDs12 [ i ] ; wDt [ i ] = wDt12 [ i ] ; wDss [ i ] = wDss12 [ i ] ; wDst [ i ] = wDst12 [ i ] ; wDtt [ i ] = wDtt12 [ i ] ; } # endif } else)",
    "insertText": "if(patchType == OSD_PATCH_DESCRIPTOR_GREGORY_BASIS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(patchType == OSD_PATCH_DESCRIPTOR_GREGORY_TRIANGLE)"
  },
  {
    "label": "Osd_EvalBasisGregoryTri()",
    "kind": "Method",
    "detail": "Function (# if OSD_ARRAY_ARG_BOUND_OPTIONAL nPoints =)",
    "insertText": "Osd_EvalBasisGregoryTri(s, t, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "Osd_EvalBasisGregoryTri()",
    "kind": "Method",
    "detail": "Function (# else OSD_REAL wP18 [ 1 8 ],wDs18 [ 1 8 ],wDt18 [ 1 8 ],wDss18 [ 1 8 ],wDst18 [ 1 8 ],wDtt18 [ 1 8 ] ; nPoints =)",
    "insertText": "Osd_EvalBasisGregoryTri(s, t, wP18, wDs18, wDt18, wDss18, wDst18, wDtt18)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (wP [ i ] = wP18 [ i ] ; wDs [ i ] = wDs18 [ i ] ; wDt [ i ] = wDt18 [ i ] ; wDss [ i ] = wDss18 [ i ] ; wDst [ i ] = wDst18 [ i ] ; wDtt [ i ] = wDtt18 [ i ] ; } # endif } else)",
    "insertText": "if(patchType == OSD_PATCH_DESCRIPTOR_QUADS)"
  },
  {
    "label": "Osd_EvalBasisLinear()",
    "kind": "Method",
    "detail": "Function (# else OSD_REAL wP4 [ 4 ],wDs4 [ 4 ],wDt4 [ 4 ],wDss4 [ 4 ],wDst4 [ 4 ],wDtt4 [ 4 ] ; nPoints =)",
    "insertText": "Osd_EvalBasisLinear(s, t, wP4, wDs4, wDt4, wDss4, wDst4, wDtt4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (wP [ i ] = wP4 [ i ] ; wDs [ i ] = wDs4 [ i ] ; wDt [ i ] = wDt4 [ i ] ; wDss [ i ] = wDss4 [ i ] ; wDst [ i ] = wDst4 [ i ] ; wDtt [ i ] = wDtt4 [ i ] ; } # endif } else)",
    "insertText": "if(patchType == OSD_PATCH_DESCRIPTOR_TRIANGLES)"
  },
  {
    "label": "Osd_EvalBasisLinearTri()",
    "kind": "Method",
    "detail": "Function (# if OSD_ARRAY_ARG_BOUND_OPTIONAL nPoints =)",
    "insertText": "Osd_EvalBasisLinearTri(s, t, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "Osd_EvalBasisLinearTri()",
    "kind": "Method",
    "detail": "Function (# else OSD_REAL wP3 [ 3 ],wDs3 [ 3 ],wDt3 [ 3 ],wDss3 [ 3 ],wDst3 [ 3 ],wDtt3 [ 3 ] ; nPoints =)",
    "insertText": "Osd_EvalBasisLinearTri(s, t, wP3, wDs3, wDt3, wDss3, wDst3, wDtt3)"
  },
  {
    "label": "OsdEvaluatePatchBasis()",
    "kind": "Method",
    "detail": "Function (wP [ i ] = wP3 [ i ] ; wDs [ i ] = wDs3 [ i ] ; wDt [ i ] = wDt3 [ i ] ; wDss [ i ] = wDss3 [ i ] ; wDst [ i ] = wDst3 [ i ] ; wDtt [ i ] = wDtt3 [ i ] ; } # endif } else { } return nPoints ; } OSD_FUNCTION_STORAGE_CLASS int)",
    "insertText": "OsdEvaluatePatchBasis(int patchType, OsdPatchParam param, OSD_REAL s, OSD_REAL t, OSD_OUT_ARRAY(OSD_REAL, wP, 20), OSD_OUT_ARRAY(OSD_REAL, wDs, 20), OSD_OUT_ARRAY(OSD_REAL, wDt, 20), OSD_OUT_ARRAY(OSD_REAL, wDss, 20), OSD_OUT_ARRAY(OSD_REAL, wDst, 20), OSD_OUT_ARRAY(OSD_REAL, wDtt, 20))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OSD_REAL derivSign = 1 . 0 f ;)",
    "insertText": "if((patchType == OSD_PATCH_DESCRIPTOR_LOOP) || (patchType == OSD_PATCH_DESCRIPTOR_GREGORY_TRIANGLE) || (patchType == OSD_PATCH_DESCRIPTOR_TRIANGLES))"
  },
  {
    "label": "OSD_ARRAY_2()",
    "kind": "Method",
    "detail": "Function (OSD_REAL uv [ 2 ] =)",
    "insertText": "OSD_ARRAY_2(OSD_REAL, s, t)"
  },
  {
    "label": "OsdPatchParamNormalizeTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OsdPatchParamNormalizeTriangle(param, uv)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s = uv [ 0 ] ; t = uv [ 1 ] ;)",
    "insertText": "if(OsdPatchParamIsTriangleRotated(param))"
  },
  {
    "label": "OsdPatchParamNormalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OsdPatchParamNormalize(param, uv)"
  },
  {
    "label": "OsdEvaluatePatchBasisNormalized()",
    "kind": "Method",
    "detail": "Function (s = uv [ 0 ] ; t = uv [ 1 ] ; } int nPoints =)",
    "insertText": "OsdEvaluatePatchBasisNormalized(patchType, param, s, t, wP, wDs, wDt, wDss, wDst, wDtt)"
  },
  {
    "label": "OSD_REAL_CAST()",
    "kind": "Method",
    "detail": "Function (OSD_REAL d1Scale = derivSign*)",
    "insertText": "OSD_REAL_CAST(1 << OsdPatchParamGetDepth(param))"
  }
]