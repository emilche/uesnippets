[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "VCMEncodedFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMEncodedFrame"
  },
  {
    "label": "VCMReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCMReceiver"
  },
  {
    "label": "VCMReceiver()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_RECEIVER_H_ # define MODULES_VIDEO_CODING_RECEIVER_H_ # include<memory> # include<vector> # include \" api / field_trials_view . h \" # include \" modules / video_coding / event_wrapper . h \" # include \" modules / video_coding / include / video_coding . h \" # include \" modules / video_coding / include / video_coding_defines . h \" # include \" modules / video_coding / jitter_buffer . h \" # include \" modules / video_coding / packet . h \" # include \" modules / video_coding / timing / timing . h \" namespace webrtc { class Clock ; class VCMEncodedFrame ; class VCMReceiver { public :)",
    "insertText": "VCMReceiver(VCMTiming* timing, Clock* clock, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VCMReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VCMReceiver(VCMTiming* timing, Clock* clock, std::unique_ptr<EventWrapper> receiver_event, std::unique_ptr<EventWrapper> jitter_buffer_event, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VCMReceiver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VCMReceiver()"
  },
  {
    "label": "InsertPacket()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InsertPacket(const VCMPacket& packet)"
  },
  {
    "label": "FrameForDecoding()",
    "kind": "Method",
    "detail": "Function (VCMEncodedFrame*)",
    "insertText": "FrameForDecoding(uint16_t max_wait_time_ms, bool prefer_late_decoding)"
  },
  {
    "label": "ReleaseFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseFrame(VCMEncodedFrame* frame)"
  },
  {
    "label": "SetNackSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackSettings(size_t max_nack_list_size, int max_packet_age_to_nack, int max_incomplete_time_ms)"
  },
  {
    "label": "NackList()",
    "kind": "Method",
    "detail": "Function (std::vector<uint16_t>)",
    "insertText": "NackList(bool* request_key_frame)"
  }
]