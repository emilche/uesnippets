[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "UDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataTable"
  },
  {
    "label": "FDataTableEditorUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataTableEditorUtils"
  },
  {
    "label": "UGameplayTagTableManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTagTableManager"
  },
  {
    "label": "FDataTableImporterCSV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataTableImporterCSV"
  },
  {
    "label": "FDataTableImporterJSON",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataTableImporterJSON"
  },
  {
    "label": "CharType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharType"
  },
  {
    "label": "TPrettyJsonPrintPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPrettyJsonPrintPolicy"
  },
  {
    "label": "PrintPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintPolicy"
  },
  {
    "label": "TJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonWriter"
  },
  {
    "label": "FTableRowBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTableRowBase"
  },
  {
    "label": "UAssetImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportData"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FScopedDataTableChange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedDataTableChange"
  },
  {
    "label": "FDataTableRowHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataTableRowHandle"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FDataTableCategoryHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataTableCategoryHandle"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / Class . h \" # include \" UObject / UnrealType . h \" # include \" UObject / PropertyPortFlags . h \" # include \" DataTableUtils . h \" # include \" DataTable . generated . h \" class Error ; class UDataTable ; struct FDataTableEditorUtils ; class UGameplayTagTableManager ; class FDataTableImporterCSV ; class FDataTableImporterJSON ; template<class CharType> struct TPrettyJsonPrintPolicy ; template<class CharType> struct TPrettyJsonPrintPolicy ; template<class CharType,class PrintPolicy> class TJsonWriter ;)",
    "insertText": "USTRUCT(BlueprintInternalUseOnly)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FTableRowBase()"
  },
  {
    "label": "FTableRowBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FTableRowBase()"
  },
  {
    "label": "OnPostDataImport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostDataImport(const UDataTable* InDataTable, const FName InRowName, TArray<FString>& OutCollectedImportProblems)"
  },
  {
    "label": "OnDataTableChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnDataTableChanged(const UDataTable* InDataTable, const FName InRowName)"
  },
  {
    "label": "IsDataValid()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR EDataValidationResult)",
    "insertText": "IsDataValid(FDataValidationContext& Context)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() DECLARE_MULTICAST_DELEGATE(FOnDataTableChanged)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnDataTableImport)"
  },
  {
    "label": "GetNonConstRowMap()",
    "kind": "Method",
    "detail": "Function (protected : TMap<FName,uint8*> RowMap ; TMap<FName,uint8*>&)",
    "insertText": "GetNonConstRowMap()"
  },
  {
    "label": "RemoveRowInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRowInternal(FName RowName)"
  },
  {
    "label": "GetRowMap()",
    "kind": "Method",
    "detail": "Function (public : const TMap<FName,uint8*>&)",
    "insertText": "GetRowMap()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "ThreadedPostLoadAssetRegistryTagsOverride()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ThreadedPostLoadAssetRegistryTagsOverride(FPostLoadAssetRegistryTagsContext& Context)"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (public : # endif void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchiveRecord Record)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreloadDependencies(TArray<UObject*>& OutDeps)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "NeedsLoadForClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForClient()"
  },
  {
    "label": "NeedsLoadForEditorGame()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsLoadForEditorGame()"
  },
  {
    "label": "GetRowStructPathName()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetRowStructPathName()"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "OnDataTableChanged()",
    "kind": "Method",
    "detail": "Function (# endif private : FOnDataTableChanged OnDataTableChangedDelegate ; public : FOnDataTableChanged&)",
    "insertText": "OnDataTableChanged()"
  },
  {
    "label": "GetAllRows()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "GetAllRows(const TCHAR* ContextString, OUT TArray<T*>& OutRowArray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(!RowStruct->IsChildOf(T::StaticStruct()))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} else { OutRowArray .)",
    "insertText": "Reserve(OutRowArray.Num() + GetRowMap().Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutRowArray .)",
    "insertText": "Add(reinterpret_cast<T*>(RowMapIter.Value()))"
  },
  {
    "label": "GetAllRows()",
    "kind": "Method",
    "detail": "Function (} } } template<class T> void)",
    "insertText": "GetAllRows(const FString& ContextString, OUT TArray<T*>& OutRowArray)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (GetAllRows<)",
    "insertText": "T(*ContextString, OutRowArray)"
  },
  {
    "label": "FindRow()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindRow(FName RowName, const TCHAR* ContextString, bool bWarnIfRowMissing = true)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(bWarnIfRowMissing, LogDataTable, Error, TEXT(\"UDataTable::FindRow : '%s' specified incorrect type for DataTable '%s'.\"), ContextString, *GetPathName())"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(bWarnIfRowMissing, LogDataTable, Warning, TEXT(\"UDataTable::FindRow : '%s' requested invalid row 'None' from DataTable '%s'.\"), ContextString, *GetPathName())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } uint8* RowData =* RowDataPtr ;)",
    "insertText": "check(RowData)"
  },
  {
    "label": "FindRow()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindRow(FName RowName, const FString& ContextString, bool bWarnIfRowMissing = true)"
  },
  {
    "label": "ForeachRow()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "ForeachRow(const TCHAR* ContextString, TFunctionRef<void (const FName& Key, const T& Value)> Predicate)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(TMap<FName, uint8*>::TConstIterator RowMapIter(GetRowMap().CreateConstIterator()); RowMapIter; ++RowMapIter)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Entry = reinterpret_cast<)",
    "insertText": "T(RowMapIter.Value())"
  },
  {
    "label": "Predicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Predicate(RowMapIter.Key(), *Entry)"
  },
  {
    "label": "ForeachRow()",
    "kind": "Method",
    "detail": "Function (} } } template<class T> void)",
    "insertText": "ForeachRow(const FString& ContextString, TFunctionRef<void (const FName& Key, const T& Value)> Predicate)"
  },
  {
    "label": "FindTableProperty()",
    "kind": "Method",
    "detail": "Function (} FProperty*)",
    "insertText": "FindTableProperty(const FName& PropertyName)"
  },
  {
    "label": "FindRowUnchecked()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "FindRowUnchecked(FName RowName)"
  },
  {
    "label": "GetRowNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetRowNames()"
  },
  {
    "label": "RemoveRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRow(FName RowName)"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRow(FName RowName, const FTableRowBase& RowData)"
  },
  {
    "label": "AddRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRow(FName RowName, const uint8* RowData, const UScriptStruct* RowType)"
  },
  {
    "label": "CleanBeforeStructChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "CleanBeforeStructChange()"
  },
  {
    "label": "RestoreAfterStructChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreAfterStructChange()"
  },
  {
    "label": "GetTableAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTableAsString(const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None)"
  },
  {
    "label": "GetTableAsCSV()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTableAsCSV(const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None)"
  },
  {
    "label": "GetTableAsJSON()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTableAsJSON(const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None)"
  },
  {
    "label": "WriteTableAsJSON()",
    "kind": "Method",
    "detail": "Function (template<CharType = TCHAR> bool)",
    "insertText": "WriteTableAsJSON(const TSharedRef< TJsonWriter<CharType, TPrettyJsonPrintPolicy<CharType> > >& JsonWriter, const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None)"
  },
  {
    "label": "WriteTableAsJSONObject()",
    "kind": "Method",
    "detail": "Function (template<CharType = TCHAR> bool)",
    "insertText": "WriteTableAsJSONObject(const TSharedRef< TJsonWriter<CharType, TPrettyJsonPrintPolicy<CharType> > >& JsonWriter, const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None)"
  },
  {
    "label": "WriteRowAsJSON()",
    "kind": "Method",
    "detail": "Function (template<CharType = TCHAR> bool)",
    "insertText": "WriteRowAsJSON(const TSharedRef< TJsonWriter<CharType, TPrettyJsonPrintPolicy<CharType> > >& JsonWriter, const void* RowData, const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None)"
  },
  {
    "label": "CopyImportOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyImportOptions(UDataTable* SourceTable)"
  },
  {
    "label": "CreateTableFromCSVString()",
    "kind": "Method",
    "detail": "Function (# endif TArray<FString>)",
    "insertText": "CreateTableFromCSVString(const FString& InString)"
  },
  {
    "label": "CreateTableFromJSONString()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "CreateTableFromJSONString(const FString& InString)"
  },
  {
    "label": "GetTablePropertyArray()",
    "kind": "Method",
    "detail": "Function (TArray<FProperty*>)",
    "insertText": "GetTablePropertyArray(const TArray<const TCHAR*>& Cells, UStruct* RowStruct, TArray<FString>& OutProblems, int32 KeyColumn = 0)"
  },
  {
    "label": "CreateTableFromOtherTable()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "CreateTableFromOtherTable(const UDataTable* InTable)"
  },
  {
    "label": "CreateTableFromRawData()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "CreateTableFromRawData(TMap<FName, const uint8*>& DataMap, UScriptStruct* InRowStruct)"
  },
  {
    "label": "GetColumnTitles()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR TArray<FString>)",
    "insertText": "GetColumnTitles()"
  },
  {
    "label": "GetUniqueColumnTitles()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetUniqueColumnTitles()"
  },
  {
    "label": "GetTableData()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FString>>)",
    "insertText": "GetTableData(const EDataTableExportFlags InDTExportFlags = EDataTableExportFlags::None)"
  },
  {
    "label": "SaveStructData()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "SaveStructData(FStructuredArchiveSlot Slot)"
  },
  {
    "label": "LoadStructData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStructData(FStructuredArchiveSlot Slot)"
  },
  {
    "label": "OnPostDataImported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostDataImported(OUT TArray<FString>& OutCollectedImportProblems)"
  },
  {
    "label": "GetEmptyUsingStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct&)",
    "insertText": "GetEmptyUsingStruct()"
  },
  {
    "label": "FScopedDataTableChange()",
    "kind": "Method",
    "detail": "Function (struct FScopedDataTableChange {)",
    "insertText": "FScopedDataTableChange(UDataTable* InTable)"
  },
  {
    "label": "FScopedDataTableChange()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedDataTableChange()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (private : UDataTable* Table ; TMap<UDataTable*,int32> ScopeCount ; FCriticalSection CriticalSection ; } ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FDataTableRowHandle() : DataTable(nullptr) , RowName(NAME_None)"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "GetRow()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetRow(const TCHAR* ContextString)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } return DataTable -> FindRow<)",
    "insertText": "T(RowName, ContextString)"
  },
  {
    "label": "GetRow()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetRow(const FString& ContextString)"
  },
  {
    "label": "ToDebugString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToDebugString(bool bUseFullPath = false)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Printf(TEXT(\"Table: %s, Row: %s\"), bUseFullPath ? *DataTable->GetPathName() : *DataTable->GetName(), *RowName.ToString())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FDataTableRowHandle const& Other)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=DataTableCategoryHandle)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (OutRows .)",
    "insertText": "Empty()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "if(ColumnName == NAME_None)"
  },
  {
    "label": "FindTableProperty()",
    "kind": "Method",
    "detail": "Function (} return ; } FProperty* Property = DataTable ->)",
    "insertText": "FindTableProperty(ColumnName)"
  },
  {
    "label": "InitializeValue()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "InitializeValue(RowContentsAsBinary)"
  },
  {
    "label": "DestroyValue()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "DestroyValue(RowContentsAsBinary)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (uint8* RowData = RowIt .)",
    "insertText": "Value()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutRows .)",
    "insertText": "Add((T*)RowData)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FDataTableCategoryHandle const& Other)"
  }
]