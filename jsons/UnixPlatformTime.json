[
  {
    "label": "FUnixTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnixTime"
  },
  {
    "label": "timespec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timespec"
  },
  {
    "label": "timespec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timespec"
  },
  {
    "label": "timespec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timespec"
  },
  {
    "label": "InitTiming()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "InitTiming()"
  },
  {
    "label": "UpdateCPUTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCPUTime(float DeltaSeconds)"
  },
  {
    "label": "UpdateThreadCPUTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateThreadCPUTime(float = 0.0)"
  },
  {
    "label": "AutoUpdateGameThreadCPUTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoUpdateGameThreadCPUTime(double UpdateInterval)"
  },
  {
    "label": "GetCPUTime()",
    "kind": "Method",
    "detail": "Function (FCPUTime)",
    "insertText": "GetCPUTime()"
  },
  {
    "label": "GetThreadCPUTime()",
    "kind": "Method",
    "detail": "Function (FCPUTime)",
    "insertText": "GetThreadCPUTime()"
  },
  {
    "label": "GetLastIntervalThreadCPUTimeInSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetLastIntervalThreadCPUTimeInSeconds()"
  },
  {
    "label": "PrintCalibrationLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintCalibrationLog()"
  },
  {
    "label": "CalibrateAndSelectClock()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CalibrateAndSelectClock()"
  },
  {
    "label": "CallsPerSecondBenchmark()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CallsPerSecondBenchmark(clockid_t BenchClockId, const char * BenchClockIdName)"
  }
]