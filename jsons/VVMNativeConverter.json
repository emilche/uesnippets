[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVerseValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVerseValue"
  },
  {
    "label": "FVerseFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVerseFunction"
  },
  {
    "label": "TVerseFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVerseFunction"
  },
  {
    "label": "TInterfaceInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInterfaceInstance"
  },
  {
    "label": "VClass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VClass"
  },
  {
    "label": "TIsNativeStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsNativeStruct"
  },
  {
    "label": "TToVValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TToVValue"
  },
  {
    "label": "TFromVValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFromVValue"
  },
  {
    "label": "FNativeConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNativeConverter"
  },
  {
    "label": "ObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectType"
  },
  {
    "label": "InterfaceProxyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterfaceProxyType"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "ElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementType"
  },
  {
    "label": "KeyType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyType"
  },
  {
    "label": "ValueType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueType"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if ! WITH_VERSE_BPVM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (enum class EVerseTrue : uint8 ; struct FVerseValue ; struct FVerseFunction ; template<FunctionType> struct TVerseFunction ; template<InterfaceProxyType> struct TInterfaceInstance ; namespace Verse { struct VClass ; template<NativeType> struct TIsNativeStruct { bool Value = false ; } ; template<NativeType,= void> struct TToVValue { TOptional<NativeType> Value ; void)",
    "insertText": "Emplace()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TToVValue&)",
    "insertText": "operator(NativeType Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TToVValue&)",
    "insertText": "operator(TNonNullPtr<ObjectType> Other)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Value = Other .)",
    "insertText": "Get()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Value = Other .)",
    "insertText": "GetValue().Get()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { Value .)",
    "insertText": "Reset()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} return* this ; } } ; template<InterfaceProxyType> struct TToVValue<TInterfaceInstance<InterfaceProxyType>> ; template<NativeType,= void> struct TFromVValue { NativeType Value ; NativeType)",
    "insertText": "GetValue()"
  },
  {
    "label": "VERSE_UNREACHABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VERSE_UNREACHABLE()"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "ToVValue(FAllocationContext Context, EVerseTrue)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "ToVValue(FAllocationContext Context, bool Logic)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "ToVValue(FAllocationContext Context, int64 Number)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "ToVValue(FAllocationContext Context, double Number)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "ToVValue(FAllocationContext Context, const FNativeString& String)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "ToVValue(FAllocationContext Context, UTF8CHAR Char)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "ToVValue(FAllocationContext Context, UTF32CHAR Char32)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} template<class ObjectType> VValue)",
    "insertText": "ToVValue(FAllocationContext Context, ObjectType* Object)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (UObject* Obj = reinterpret_cast<)",
    "insertText": "UObject(Object)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} template<class ObjectType> VValue)",
    "insertText": "ToVValue(FAllocationContext Context, TNonNullPtr<ObjectType> Object)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} template<class InterfaceProxyType> VValue)",
    "insertText": "ToVValue(FAllocationContext Context, TInterfaceInstance<InterfaceProxyType> Object)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (template<class StructType,= TEnableIf<TIsNativeStruct<TDecay<StructType>::Type>::Value>::Type> VValue)",
    "insertText": "ToVValue(FAllocationContext Context, StructType&& Struct)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} template<. . . ElementTypes> VValue)",
    "insertText": "ToVValue(FAllocationContext Context, const TNativeTuple<ElementTypes...>& Tuple)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} template<. . . ElementTypes,size_t . . . Indices> VValue)",
    "insertText": "ToVValue(FAllocationContext Context, const TNativeTuple<ElementTypes...>& Tuple, std::index_sequence<Indices...>)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} template<class ElementType> VValue)",
    "insertText": "ToVValue(FAllocationContext Context, const TArray<ElementType>& Array)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (VArray& NewArray =)",
    "insertText": "New(Context, Array.Num(), [Context, &Array](uint32 Index) { return ToVValue(Context, Array[Index]); })"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<TPair<VValue,VValue>> Pairs ; Pairs .)",
    "insertText": "Reserve(Map.Num())"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (Pairs .)",
    "insertText": "Push({ToVValue(Context, Pair.Key), ToVValue(Context, Pair.Value)})"
  },
  {
    "label": "VMap()",
    "kind": "Method",
    "detail": "Function (} return VMapBase::New<)",
    "insertText": "VMap(Context, Pairs.Num(), [&](uint32 I) { return Pairs[I]; })"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> VValue)",
    "insertText": "ToVValue(FAllocationContext Context, const ::TOptional<ValueType>& Optional)"
  },
  {
    "label": "GlobalFalse()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "GlobalFalse()"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (} } VValue)",
    "insertText": "ToVValue(FAllocationContext Context, const FVerseValue& Value)"
  },
  {
    "label": "ToVValue()",
    "kind": "Method",
    "detail": "Function (VValue)",
    "insertText": "ToVValue(FAllocationContext Context, const FVerseFunction& Function)"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (FOpResult)",
    "insertText": "FromVValue(FAllocationContext Context, const VValue Value, TFromVValue<EVerseTrue>& OutNative)"
  },
  {
    "label": "V_REQUIRE_CONCRETE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_REQUIRE_CONCRETE(Value)"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value == GlobalFalse())"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value.IsLogic())"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function (OutNative . Value = Value .)",
    "insertText": "AsBool()"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value.IsInt())"
  },
  {
    "label": "ValueHelper()",
    "kind": "Method",
    "detail": "Function (VInt)",
    "insertText": "ValueHelper(Value)"
  },
  {
    "label": "V_RUNTIME_ERROR_IF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_RUNTIME_ERROR_IF(!ValueHelper.IsInt64(), Context, \"Value exceeds the range of a 64 bit integer.\")"
  },
  {
    "label": "AsInt64()",
    "kind": "Method",
    "detail": "Function (OutNative . Value = ValueHelper .)",
    "insertText": "AsInt64()"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value.IsFloat())"
  },
  {
    "label": "AsFloat()",
    "kind": "Method",
    "detail": "Function (OutNative . Value = Value .)",
    "insertText": "AsFloat().AsDouble()"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value.IsCellOfType<VArrayBase>())"
  },
  {
    "label": "VArrayBase()",
    "kind": "Method",
    "detail": "Function (OutNative . Value = Value . StaticCast<)",
    "insertText": "VArrayBase().AsStringView()"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value.IsChar())"
  },
  {
    "label": "AsChar()",
    "kind": "Method",
    "detail": "Function (OutNative . Value = Value .)",
    "insertText": "AsChar()"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value.IsChar32())"
  },
  {
    "label": "AsChar32()",
    "kind": "Method",
    "detail": "Function (OutNative . Value = Value .)",
    "insertText": "AsChar32()"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value.IsUObject())"
  },
  {
    "label": "ObjectType()",
    "kind": "Method",
    "detail": "Function (OutNative . Value = reinterpret_cast<)",
    "insertText": "ObjectType(Value.AsUObject())"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (template<class StructType,= TEnableIf<TIsNativeStruct<StructType>::Value>::Type> FOpResult)",
    "insertText": "FromVValue(FAllocationContext Context, const VValue Value, TFromVValue<StructType>& OutNative)"
  },
  {
    "label": "VNativeStruct()",
    "kind": "Method",
    "detail": "Function (OutNative . Value =& Value . StaticCast<)",
    "insertText": "VNativeStruct().GetStruct<StructType>()"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (} template<. . . ElementTypes,size_t . . . Indices> FOpResult)",
    "insertText": "FromVValue(FAllocationContext Context, const VValue Value, TFromVValue<TNativeTuple<ElementTypes...>>& OutNative, std::index_sequence<Indices...>)"
  },
  {
    "label": "VArrayBase()",
    "kind": "Method",
    "detail": "Function (const VArrayBase& Array = Value . StaticCast<)",
    "insertText": "VArrayBase()"
  },
  {
    "label": "ElementFromVValue()",
    "kind": "Method",
    "detail": "Function (FOpResult Result { FOpResult::Return } ; auto)",
    "insertText": "ElementFromVValue(const VValue ElementValue, auto& OutNativeElement)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (TFromVValue<TRemoveReference<)",
    "insertText": "decltype(OutNativeElement)"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "FromVValue(Context, ElementValue, NativeElement)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutNative . Value .)",
    "insertText": "Reserve(Array.Num())"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (TFromVValue<ElementType> NativeElement ; FOpResult ElementOpResult =)",
    "insertText": "FromVValue(Context, Element, NativeElement)"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (} return { FOpResult::Return } ; } template<class KeyType,class ValueType> FOpResult)",
    "insertText": "FromVValue(FAllocationContext Context, const VValue Value, TFromVValue<TMap<KeyType, ValueType>>& OutNative)"
  },
  {
    "label": "V_DIE_UNLESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "V_DIE_UNLESS(Value.IsCellOfType<VMap>())"
  },
  {
    "label": "VMap()",
    "kind": "Method",
    "detail": "Function (const VMap& Map = Value . StaticCast<)",
    "insertText": "VMap()"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (TFromVValue<KeyType> NativeKey ; FOpResult KeyOpResult =)",
    "insertText": "FromVValue(Context, Pair.Key, NativeKey)"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (} return { FOpResult::Return } ; } template<ValueType> FOpResult)",
    "insertText": "FromVValue(FAllocationContext Context, const VValue Value, TFromVValue<TOptional<ValueType>>& OutNative)"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (TFromVValue<ValueType> NativeValue ; FOpResult ValueOpResult =)",
    "insertText": "FromVValue(Context, Option->GetValue(), NativeValue)"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (} return { FOpResult::Return } ; } FOpResult)",
    "insertText": "FromVValue(FAllocationContext Context, const VValue Value, TFromVValue<FVerseValue>& OutNative)"
  },
  {
    "label": "FromVValue()",
    "kind": "Method",
    "detail": "Function (template<ReturnType,. . . ParamTypes> FOpResult)",
    "insertText": "FromVValue(FAllocationContext Context, const VValue Value, TFromVValue<TVerseFunction<ReturnType(ParamTypes...)>>& OutNative)"
  }
]