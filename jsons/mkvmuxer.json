[
  {
    "label": "IMkvReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMkvReader"
  },
  {
    "label": "MkvWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MkvWriter"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Segment"
  },
  {
    "label": "IMkvWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMkvWriter"
  },
  {
    "label": "Frame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Frame"
  },
  {
    "label": "CuePoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CuePoint"
  },
  {
    "label": "Cues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cues"
  },
  {
    "label": "ContentEncAESSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContentEncAESSettings"
  },
  {
    "label": "ContentEncoding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContentEncoding"
  },
  {
    "label": "PrimaryChromaticity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrimaryChromaticity"
  },
  {
    "label": "MasteringMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MasteringMetadata"
  },
  {
    "label": "Colour",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Colour"
  },
  {
    "label": "MatrixCoefficients",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MatrixCoefficients"
  },
  {
    "label": "ChromaSitingHorz",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ChromaSitingHorz"
  },
  {
    "label": "ChromaSitingVert",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ChromaSitingVert"
  },
  {
    "label": "Range",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Range"
  },
  {
    "label": "TransferCharacteristics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TransferCharacteristics"
  },
  {
    "label": "Primaries",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Primaries"
  },
  {
    "label": "Projection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Projection"
  },
  {
    "label": "ProjectionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProjectionType"
  },
  {
    "label": "Track",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Track"
  },
  {
    "label": "VideoTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoTrack"
  },
  {
    "label": "StereoMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StereoMode"
  },
  {
    "label": "AlphaMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AlphaMode"
  },
  {
    "label": "AudioTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioTrack"
  },
  {
    "label": "Tracks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tracks"
  },
  {
    "label": "Chapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chapter"
  },
  {
    "label": "Chapters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chapters"
  },
  {
    "label": "Display",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Display"
  },
  {
    "label": "Tag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tag"
  },
  {
    "label": "Tags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tags"
  },
  {
    "label": "SimpleTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTag"
  },
  {
    "label": "Cluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cluster"
  },
  {
    "label": "SeekHead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SeekHead"
  },
  {
    "label": "SegmentInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SegmentInfo"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "CuesPosition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CuesPosition"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (# ifndef MKVMUXER_MKVMUXER_H_ # define MKVMUXER_MKVMUXER_H_ # include<stdint . h> # include<cstddef> # include<list> # include<map> # include \" common / webmids . h \" # include \" mkvmuxer / mkvmuxertypes . h \" namespace mkvparser { class IMkvReader ; } namespace mkvmuxer { class MkvWriter ; class Segment ; const uint64_t kMaxTrackNumber = 1 2 6 ; class IMkvWriter { public : int32)",
    "insertText": "Write(const void* buf, uint32 len)"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Position()"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Position(int64 position)"
  },
  {
    "label": "Seekable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Seekable()"
  },
  {
    "label": "ElementStartNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ElementStartNotify(uint64 element_id, int64 position)"
  },
  {
    "label": "IMkvWriter()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "IMkvWriter()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(IMkvWriter)"
  },
  {
    "label": "WriteEbmlHeader()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "WriteEbmlHeader(IMkvWriter* writer, uint64_t doc_type_version, const char* const doc_type)"
  },
  {
    "label": "WriteEbmlHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteEbmlHeader(IMkvWriter* writer, uint64_t doc_type_version)"
  },
  {
    "label": "WriteEbmlHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteEbmlHeader(IMkvWriter* writer)"
  },
  {
    "label": "ChunkedCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ChunkedCopy(mkvparser::IMkvReader* source, IMkvWriter* dst, int64_t start, int64_t size)"
  },
  {
    "label": "Frame()",
    "kind": "Method",
    "detail": "Function (class Frame { public :)",
    "insertText": "Frame()"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFrom(const Frame& frame)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(const uint8_t* frame, uint64_t length)"
  },
  {
    "label": "AddAdditionalData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddAdditionalData(const uint8_t* additional, uint64_t length, uint64_t add_id)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "CanBeSimpleBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeSimpleBlock()"
  },
  {
    "label": "add_id()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "add_id()"
  },
  {
    "label": "duration()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "duration()"
  },
  {
    "label": "is_key()",
    "kind": "Method",
    "detail": "Function (is_key_ = key ; } bool)",
    "insertText": "is_key()"
  },
  {
    "label": "track_number()",
    "kind": "Method",
    "detail": "Function (track_number_ = track_number ; } uint64_t)",
    "insertText": "track_number()"
  },
  {
    "label": "timestamp()",
    "kind": "Method",
    "detail": "Function (timestamp_ = timestamp ; } uint64_t)",
    "insertText": "timestamp()"
  },
  {
    "label": "discard_padding()",
    "kind": "Method",
    "detail": "Function (discard_padding_ = discard_padding ; } int64_t)",
    "insertText": "discard_padding()"
  },
  {
    "label": "reference_block_timestamp()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "reference_block_timestamp()"
  },
  {
    "label": "CuePoint()",
    "kind": "Method",
    "detail": "Function (} ; class CuePoint { public :)",
    "insertText": "CuePoint()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "Size()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(IMkvWriter* writer)"
  },
  {
    "label": "set_time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_time(uint64_t time)"
  },
  {
    "label": "time()",
    "kind": "Method",
    "detail": "Function (time_ = time ; } uint64_t)",
    "insertText": "time()"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (track_ = track ; } uint64_t)",
    "insertText": "track()"
  },
  {
    "label": "cluster_pos()",
    "kind": "Method",
    "detail": "Function (cluster_pos_ = cluster_pos ; } uint64_t)",
    "insertText": "cluster_pos()"
  },
  {
    "label": "block_number()",
    "kind": "Method",
    "detail": "Function (block_number_ = block_number ; } uint64_t)",
    "insertText": "block_number()"
  },
  {
    "label": "output_block_number()",
    "kind": "Method",
    "detail": "Function (output_block_number_ = output_block_number ; } bool)",
    "insertText": "output_block_number()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (uint64_t time_ ; uint64_t track_ ; uint64_t cluster_pos_ ; uint64_t block_number_ ; bool output_block_number_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(CuePoint)"
  },
  {
    "label": "Cues()",
    "kind": "Method",
    "detail": "Function (} ; class Cues { public :)",
    "insertText": "Cues()"
  },
  {
    "label": "AddCue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCue(CuePoint* cue)"
  },
  {
    "label": "GetCueByIndex()",
    "kind": "Method",
    "detail": "Function (CuePoint*)",
    "insertText": "GetCueByIndex(int32_t index)"
  },
  {
    "label": "cue_entries_size()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "cue_entries_size()"
  },
  {
    "label": "ContentEncAESSettings()",
    "kind": "Method",
    "detail": "Function (} ; class ContentEncAESSettings { public : enum { kCTR = 1 } ;)",
    "insertText": "ContentEncAESSettings()"
  },
  {
    "label": "cipher_mode()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "cipher_mode()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (uint64_t cipher_mode_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(ContentEncAESSettings)"
  },
  {
    "label": "ContentEncoding()",
    "kind": "Method",
    "detail": "Function (} ; class ContentEncoding { public :)",
    "insertText": "ContentEncoding()"
  },
  {
    "label": "SetEncryptionID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEncryptionID(const uint8_t* id, uint64_t length)"
  },
  {
    "label": "enc_algo()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "enc_algo()"
  },
  {
    "label": "EncryptionSize()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "EncryptionSize()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (uint64_t enc_algo_ ; uint8_t* enc_key_id_ ; uint64_t encoding_order_ ; uint64_t encoding_scope_ ; uint64_t encoding_type_ ; ContentEncAESSettings enc_aes_settings_ ; uint64_t enc_key_id_length_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(ContentEncoding)"
  },
  {
    "label": "PrimaryChromaticity()",
    "kind": "Method",
    "detail": "Function (} ; class PrimaryChromaticity { public : const float kChromaticityMin ; const float kChromaticityMax ;)",
    "insertText": "PrimaryChromaticity(float x_val, float y_val) : x_(x_val), y_(y_val)"
  },
  {
    "label": "PrimaryChromaticity()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PrimaryChromaticity() : x_(0), y_(0)"
  },
  {
    "label": "PrimaryChromaticity()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PrimaryChromaticity()"
  },
  {
    "label": "PrimaryChromaticitySize()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "PrimaryChromaticitySize(libwebm::MkvId x_id, libwebm::MkvId y_id)"
  },
  {
    "label": "Valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Valid()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(IMkvWriter* writer, libwebm::MkvId x_id, libwebm::MkvId y_id)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "x()"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (x_ = new_x ; } float)",
    "insertText": "y()"
  },
  {
    "label": "MasteringMetadata()",
    "kind": "Method",
    "detail": "Function (y_ = new_y ; } private : float x_ ; float y_ ; } ; class MasteringMetadata { public : const float kValueNotPresent ; const float kMinLuminance ; const float kMinLuminanceMax ; const float kMaxLuminanceMax ;)",
    "insertText": "MasteringMetadata() : luminance_max_(kValueNotPresent), luminance_min_(kValueNotPresent), r_(NULL), g_(NULL), b_(NULL), white_point_(NULL)"
  },
  {
    "label": "MasteringMetadata()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MasteringMetadata()"
  },
  {
    "label": "MasteringMetadataSize()",
    "kind": "Method",
    "detail": "Function (delete r_ ; delete g_ ; delete b_ ; delete white_point_ ; } uint64_t)",
    "insertText": "MasteringMetadataSize()"
  },
  {
    "label": "SetChromaticity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetChromaticity(const PrimaryChromaticity* r, const PrimaryChromaticity* g, const PrimaryChromaticity* b, const PrimaryChromaticity* white_point)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (const PrimaryChromaticity*)",
    "insertText": "r()"
  },
  {
    "label": "luminance_min()",
    "kind": "Method",
    "detail": "Function (luminance_max_ = luminance_max ; } float)",
    "insertText": "luminance_min()"
  },
  {
    "label": "PayloadSize()",
    "kind": "Method",
    "detail": "Function (luminance_min_ = luminance_min ; } private : uint64_t)",
    "insertText": "PayloadSize()"
  },
  {
    "label": "Colour()",
    "kind": "Method",
    "detail": "Function (float luminance_max_ ; float luminance_min_ ; PrimaryChromaticity* r_ ; PrimaryChromaticity* g_ ; PrimaryChromaticity* b_ ; PrimaryChromaticity* white_point_ ; } ; class Colour { public : enum MatrixCoefficients { kGbr = 0,kBt709 = 1,kUnspecifiedMc = 2,kReserved = 3,kFcc = 4,kBt470bg = 5,kSmpte170MMc = 6,kSmpte240MMc = 7,kYcocg = 8,kBt2020NonConstantLuminance = 9,kBt2020ConstantLuminance = 1 0,} ; enum ChromaSitingHorz { kUnspecifiedCsh = 0,kLeftCollocated = 1,kHalfCsh = 2,} ; enum ChromaSitingVert { kUnspecifiedCsv = 0,kTopCollocated = 1,kHalfCsv = 2,} ; enum Range { kUnspecifiedCr = 0,kBroadcastRange = 1,kFullRange = 2,kMcTcDefined = 3,} ; enum TransferCharacteristics { kIturBt709Tc = 1,kUnspecifiedTc = 2,kReservedTc = 3,kGamma22Curve = 4,kGamma28Curve = 5,kSmpte170MTc = 6,kSmpte240MTc = 7,kLinear = 8,kLog = 9,kLogSqrt = 1 0,kIec6196624 = 1 1,kIturBt1361ExtendedColourGamut = 1 2,kIec6196621 = 1 3,kIturBt202010bit = 1 4,kIturBt202012bit = 1 5,kSmpteSt2084 = 1 6,kSmpteSt4281Tc = 1 7,kAribStdB67Hlg = 1 8,} ; enum Primaries { kReservedP0 = 0,kIturBt709P = 1,kUnspecifiedP = 2,kReservedP3 = 3,kIturBt470M = 4,kIturBt470Bg = 5,kSmpte170MP = 6,kSmpte240MP = 7,kFilm = 8,kIturBt2020 = 9,kSmpteSt4281P = 1 0,kJedecP22Phosphors = 2 2,} ; const uint64_t kValueNotPresent ;)",
    "insertText": "Colour() : matrix_coefficients_(kValueNotPresent), bits_per_channel_(kValueNotPresent), chroma_subsampling_horz_(kValueNotPresent), chroma_subsampling_vert_(kValueNotPresent), cb_subsampling_horz_(kValueNotPresent), cb_subsampling_vert_(kValueNotPresent), chroma_siting_horz_(kValueNotPresent), chroma_siting_vert_(kValueNotPresent), range_(kValueNotPresent), transfer_characteristics_(kValueNotPresent), primaries_(kValueNotPresent), max_cll_(kValueNotPresent), max_fall_(kValueNotPresent), mastering_metadata_(NULL)"
  },
  {
    "label": "Colour()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Colour()"
  },
  {
    "label": "ColourSize()",
    "kind": "Method",
    "detail": "Function (delete mastering_metadata_ ; } uint64_t)",
    "insertText": "ColourSize()"
  },
  {
    "label": "SetMasteringMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMasteringMetadata(const MasteringMetadata& mastering_metadata)"
  },
  {
    "label": "mastering_metadata()",
    "kind": "Method",
    "detail": "Function (const MasteringMetadata*)",
    "insertText": "mastering_metadata()"
  },
  {
    "label": "bits_per_channel()",
    "kind": "Method",
    "detail": "Function (matrix_coefficients_ = matrix_coefficients ; } uint64_t)",
    "insertText": "bits_per_channel()"
  },
  {
    "label": "chroma_subsampling_horz()",
    "kind": "Method",
    "detail": "Function (bits_per_channel_ = bits_per_channel ; } uint64_t)",
    "insertText": "chroma_subsampling_horz()"
  },
  {
    "label": "chroma_subsampling_vert()",
    "kind": "Method",
    "detail": "Function (chroma_subsampling_horz_ = chroma_subsampling_horz ; } uint64_t)",
    "insertText": "chroma_subsampling_vert()"
  },
  {
    "label": "cb_subsampling_horz()",
    "kind": "Method",
    "detail": "Function (chroma_subsampling_vert_ = chroma_subsampling_vert ; } uint64_t)",
    "insertText": "cb_subsampling_horz()"
  },
  {
    "label": "cb_subsampling_vert()",
    "kind": "Method",
    "detail": "Function (cb_subsampling_horz_ = cb_subsampling_horz ; } uint64_t)",
    "insertText": "cb_subsampling_vert()"
  },
  {
    "label": "chroma_siting_horz()",
    "kind": "Method",
    "detail": "Function (cb_subsampling_vert_ = cb_subsampling_vert ; } uint64_t)",
    "insertText": "chroma_siting_horz()"
  },
  {
    "label": "chroma_siting_vert()",
    "kind": "Method",
    "detail": "Function (chroma_siting_horz_ = chroma_siting_horz ; } uint64_t)",
    "insertText": "chroma_siting_vert()"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (chroma_siting_vert_ = chroma_siting_vert ; } uint64_t)",
    "insertText": "range()"
  },
  {
    "label": "transfer_characteristics()",
    "kind": "Method",
    "detail": "Function (range_ = range ; } uint64_t)",
    "insertText": "transfer_characteristics()"
  },
  {
    "label": "primaries()",
    "kind": "Method",
    "detail": "Function (transfer_characteristics_ = transfer_characteristics ; } uint64_t)",
    "insertText": "primaries()"
  },
  {
    "label": "max_cll()",
    "kind": "Method",
    "detail": "Function (primaries_ = primaries ; } uint64_t)",
    "insertText": "max_cll()"
  },
  {
    "label": "max_fall()",
    "kind": "Method",
    "detail": "Function (max_cll_ = max_cll ; } uint64_t)",
    "insertText": "max_fall()"
  },
  {
    "label": "Projection()",
    "kind": "Method",
    "detail": "Function (uint64_t matrix_coefficients_ ; uint64_t bits_per_channel_ ; uint64_t chroma_subsampling_horz_ ; uint64_t chroma_subsampling_vert_ ; uint64_t cb_subsampling_horz_ ; uint64_t cb_subsampling_vert_ ; uint64_t chroma_siting_horz_ ; uint64_t chroma_siting_vert_ ; uint64_t range_ ; uint64_t transfer_characteristics_ ; uint64_t primaries_ ; uint64_t max_cll_ ; uint64_t max_fall_ ; MasteringMetadata* mastering_metadata_ ; } ; class Projection { public : enum ProjectionType { kTypeNotPresent = - 1,kRectangular = 0,kEquirectangular = 1,kCubeMap = 2,kMesh = 3,} ; const uint64_t kValueNotPresent ;)",
    "insertText": "Projection() : type_(kRectangular), pose_yaw_(0.0), pose_pitch_(0.0), pose_roll_(0.0), private_data_(NULL), private_data_length_(0)"
  },
  {
    "label": "Projection()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Projection()"
  },
  {
    "label": "ProjectionSize()",
    "kind": "Method",
    "detail": "Function (delete [ ] private_data_ ; } uint64_t)",
    "insertText": "ProjectionSize()"
  },
  {
    "label": "SetProjectionPrivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProjectionPrivate(const uint8_t* private_data, uint64_t private_data_length)"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (ProjectionType)",
    "insertText": "type()"
  },
  {
    "label": "pose_yaw()",
    "kind": "Method",
    "detail": "Function (type_ = type ; } float)",
    "insertText": "pose_yaw()"
  },
  {
    "label": "pose_pitch()",
    "kind": "Method",
    "detail": "Function (pose_yaw_ = pose_yaw ; } float)",
    "insertText": "pose_pitch()"
  },
  {
    "label": "pose_roll()",
    "kind": "Method",
    "detail": "Function (pose_pitch_ = pose_pitch ; } float)",
    "insertText": "pose_roll()"
  },
  {
    "label": "private_data()",
    "kind": "Method",
    "detail": "Function (pose_roll_ = pose_roll ; } uint8_t*)",
    "insertText": "private_data()"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (ProjectionType type_ ; float pose_yaw_ ; float pose_pitch_ ; float pose_roll_ ; uint8_t* private_data_ ; uint64_t private_data_length_ ; } ; class Track { public :)",
    "insertText": "Track(unsigned int* seed)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Track()"
  },
  {
    "label": "AddContentEncoding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddContentEncoding()"
  },
  {
    "label": "GetContentEncodingByIndex()",
    "kind": "Method",
    "detail": "Function (ContentEncoding*)",
    "insertText": "GetContentEncodingByIndex(uint32_t index)"
  },
  {
    "label": "SetCodecPrivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCodecPrivate(const uint8_t* codec_private, uint64_t length)"
  },
  {
    "label": "set_codec_id()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_codec_id(const char* codec_id)"
  },
  {
    "label": "codec_id()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "codec_id()"
  },
  {
    "label": "language()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "language()"
  },
  {
    "label": "max_block_additional_id()",
    "kind": "Method",
    "detail": "Function (max_block_additional_id_ = max_block_additional_id ; } uint64_t)",
    "insertText": "max_block_additional_id()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "name()"
  },
  {
    "label": "number()",
    "kind": "Method",
    "detail": "Function (number_ = number ; } uint64_t)",
    "insertText": "number()"
  },
  {
    "label": "uid()",
    "kind": "Method",
    "detail": "Function (uid_ = uid ; } uint64_t)",
    "insertText": "uid()"
  },
  {
    "label": "codec_delay()",
    "kind": "Method",
    "detail": "Function (codec_delay_ = codec_delay ; } uint64_t)",
    "insertText": "codec_delay()"
  },
  {
    "label": "seek_pre_roll()",
    "kind": "Method",
    "detail": "Function (seek_pre_roll_ = seek_pre_roll ; } uint64_t)",
    "insertText": "seek_pre_roll()"
  },
  {
    "label": "default_duration()",
    "kind": "Method",
    "detail": "Function (default_duration_ = default_duration ; } uint64_t)",
    "insertText": "default_duration()"
  },
  {
    "label": "VideoTrack()",
    "kind": "Method",
    "detail": "Function (} ; class VideoTrack : public Track { public : enum StereoMode { kMono = 0,kSideBySideLeftIsFirst = 1,kTopBottomRightIsFirst = 2,kTopBottomLeftIsFirst = 3,kSideBySideRightIsFirst = 1 1 } ; enum AlphaMode { kNoAlpha = 0,kAlpha = 1 } ;)",
    "insertText": "VideoTrack(unsigned int* seed)"
  },
  {
    "label": "VideoTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoTrack()"
  },
  {
    "label": "SetStereoMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetStereoMode(uint64_t stereo_mode)"
  },
  {
    "label": "SetAlphaMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAlphaMode(uint64_t alpha_mode)"
  },
  {
    "label": "set_display_height()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_display_height(uint64_t height)"
  },
  {
    "label": "display_height()",
    "kind": "Method",
    "detail": "Function (display_height_ = height ; } uint64_t)",
    "insertText": "display_height()"
  },
  {
    "label": "display_width()",
    "kind": "Method",
    "detail": "Function (display_width_ = width ; } uint64_t)",
    "insertText": "display_width()"
  },
  {
    "label": "pixel_height()",
    "kind": "Method",
    "detail": "Function (pixel_height_ = height ; } uint64_t)",
    "insertText": "pixel_height()"
  },
  {
    "label": "pixel_width()",
    "kind": "Method",
    "detail": "Function (pixel_width_ = width ; } uint64_t)",
    "insertText": "pixel_width()"
  },
  {
    "label": "crop_left()",
    "kind": "Method",
    "detail": "Function (crop_left_ = crop_left ; } uint64_t)",
    "insertText": "crop_left()"
  },
  {
    "label": "crop_right()",
    "kind": "Method",
    "detail": "Function (crop_right_ = crop_right ; } uint64_t)",
    "insertText": "crop_right()"
  },
  {
    "label": "crop_top()",
    "kind": "Method",
    "detail": "Function (crop_top_ = crop_top ; } uint64_t)",
    "insertText": "crop_top()"
  },
  {
    "label": "crop_bottom()",
    "kind": "Method",
    "detail": "Function (crop_bottom_ = crop_bottom ; } uint64_t)",
    "insertText": "crop_bottom()"
  },
  {
    "label": "frame_rate()",
    "kind": "Method",
    "detail": "Function (frame_rate_ = frame_rate ; } double)",
    "insertText": "frame_rate()"
  },
  {
    "label": "height()",
    "kind": "Method",
    "detail": "Function (height_ = height ; } uint64_t)",
    "insertText": "height()"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (width_ = width ; } uint64_t)",
    "insertText": "width()"
  },
  {
    "label": "colour_space()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "colour_space()"
  },
  {
    "label": "projection()",
    "kind": "Method",
    "detail": "Function (Projection*)",
    "insertText": "projection()"
  },
  {
    "label": "VideoPayloadSize()",
    "kind": "Method",
    "detail": "Function (private : uint64_t)",
    "insertText": "VideoPayloadSize()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (uint64_t display_height_ ; uint64_t display_width_ ; uint64_t pixel_height_ ; uint64_t pixel_width_ ; uint64_t crop_left_ ; uint64_t crop_right_ ; uint64_t crop_top_ ; uint64_t crop_bottom_ ; double frame_rate_ ; uint64_t height_ ; uint64_t stereo_mode_ ; uint64_t alpha_mode_ ; uint64_t width_ ; char* colour_space_ ; Colour* colour_ ; Projection* projection_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(VideoTrack)"
  },
  {
    "label": "AudioTrack()",
    "kind": "Method",
    "detail": "Function (} ; class AudioTrack : public Track { public :)",
    "insertText": "AudioTrack(unsigned int* seed)"
  },
  {
    "label": "AudioTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioTrack()"
  },
  {
    "label": "set_bit_depth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_bit_depth(uint64_t bit_depth)"
  },
  {
    "label": "bit_depth()",
    "kind": "Method",
    "detail": "Function (bit_depth_ = bit_depth ; } uint64_t)",
    "insertText": "bit_depth()"
  },
  {
    "label": "channels()",
    "kind": "Method",
    "detail": "Function (channels_ = channels ; } uint64_t)",
    "insertText": "channels()"
  },
  {
    "label": "sample_rate()",
    "kind": "Method",
    "detail": "Function (sample_rate_ = sample_rate ; } double)",
    "insertText": "sample_rate()"
  },
  {
    "label": "Tracks()",
    "kind": "Method",
    "detail": "Function (} ; class Tracks { public : enum { kVideo = 0 x1,kAudio = 0 x2 } ; const char kOpusCodecId [ ] ; const char kVorbisCodecId [ ] ; const char kAv1CodecId [ ] ; const char kVp8CodecId [ ] ; const char kVp9CodecId [ ] ; const char kWebVttCaptionsId [ ] ; const char kWebVttDescriptionsId [ ] ; const char kWebVttMetadataId [ ] ; const char kWebVttSubtitlesId [ ] ;)",
    "insertText": "Tracks()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTrack(Track* track, int32_t number)"
  },
  {
    "label": "GetTrackByIndex()",
    "kind": "Method",
    "detail": "Function (const Track*)",
    "insertText": "GetTrackByIndex(uint32_t idx)"
  },
  {
    "label": "GetTrackByNumber()",
    "kind": "Method",
    "detail": "Function (Track*)",
    "insertText": "GetTrackByNumber(uint64_t track_number)"
  },
  {
    "label": "TrackIsAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackIsAudio(uint64_t track_number)"
  },
  {
    "label": "TrackIsVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackIsVideo(uint64_t track_number)"
  },
  {
    "label": "track_entries_size()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "track_entries_size()"
  },
  {
    "label": "set_id()",
    "kind": "Method",
    "detail": "Function (} ; class Chapter { public : bool)",
    "insertText": "set_id(const char* id)"
  },
  {
    "label": "set_time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_time(const Segment& segment, uint64_t start_time_ns, uint64_t end_time_ns)"
  },
  {
    "label": "set_uid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_uid(const uint64_t uid)"
  },
  {
    "label": "add_string()",
    "kind": "Method",
    "detail": "Function (uid_ = uid ; } bool)",
    "insertText": "add_string(const char* title, const char* language, const char* country)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : class Chapters ; class Display { public : void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "set_title()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_title(const char* title)"
  },
  {
    "label": "set_language()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_language(const char* language)"
  },
  {
    "label": "set_country()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_country(const char* country)"
  },
  {
    "label": "WriteDisplay()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "WriteDisplay(IMkvWriter* writer)"
  },
  {
    "label": "Chapter()",
    "kind": "Method",
    "detail": "Function (private : char* title_ ; char* language_ ; char* country_ ; } ;)",
    "insertText": "Chapter()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(unsigned int* seed)"
  },
  {
    "label": "ShallowCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShallowCopy(Chapter* dst)"
  },
  {
    "label": "ExpandDisplaysArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandDisplaysArray()"
  },
  {
    "label": "WriteAtom()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "WriteAtom(IMkvWriter* writer)"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (char* id_ ; uint64_t start_timecode_ ; uint64_t end_timecode_ ; uint64_t uid_ ; Display* displays_ ; int displays_size_ ; int displays_count_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(Chapter)"
  },
  {
    "label": "Chapters()",
    "kind": "Method",
    "detail": "Function (} ; class Chapters { public :)",
    "insertText": "Chapters()"
  },
  {
    "label": "AddChapter()",
    "kind": "Method",
    "detail": "Function (Chapter*)",
    "insertText": "AddChapter(unsigned int* seed)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Count()"
  },
  {
    "label": "ExpandChaptersArray()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ExpandChaptersArray()"
  },
  {
    "label": "WriteEdition()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "WriteEdition(IMkvWriter* writer)"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (int chapters_size_ ; int chapters_count_ ; Chapter* chapters_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(Chapters)"
  },
  {
    "label": "add_simple_tag()",
    "kind": "Method",
    "detail": "Function (} ; class Tag { public : bool)",
    "insertText": "add_simple_tag(const char* tag_name, const char* tag_string)"
  },
  {
    "label": "set_tag_name()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_tag_name(const char* tag_name)"
  },
  {
    "label": "set_tag_string()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_tag_string(const char* tag_string)"
  },
  {
    "label": "Tag()",
    "kind": "Method",
    "detail": "Function (private : char* tag_name_ ; char* tag_string_ ; } ;)",
    "insertText": "Tag()"
  },
  {
    "label": "ShallowCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShallowCopy(Tag* dst)"
  },
  {
    "label": "ExpandSimpleTagsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandSimpleTagsArray()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (SimpleTag* simple_tags_ ; int simple_tags_size_ ; int simple_tags_count_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(Tag)"
  },
  {
    "label": "Tags()",
    "kind": "Method",
    "detail": "Function (} ; class Tags { public :)",
    "insertText": "Tags()"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (Tag*)",
    "insertText": "AddTag()"
  },
  {
    "label": "ExpandTagsArray()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ExpandTagsArray()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (int tags_size_ ; int tags_count_ ; Tag* tags_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(Tags)"
  },
  {
    "label": "Cluster()",
    "kind": "Method",
    "detail": "Function (} ; class Cluster { public :)",
    "insertText": "Cluster(uint64_t timecode, int64_t cues_pos, uint64_t timecode_scale, bool write_last_frame_with_duration = false, bool fixed_size_timecode = false)"
  },
  {
    "label": "Cluster()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Cluster()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(IMkvWriter* ptr_writer)"
  },
  {
    "label": "AddFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrame(const Frame* frame)"
  },
  {
    "label": "AddFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrame(const uint8_t* data, uint64_t length, uint64_t track_number, uint64_t timecode, bool is_key)"
  },
  {
    "label": "AddFrameWithAdditional()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrameWithAdditional(const uint8_t* data, uint64_t length, const uint8_t* additional, uint64_t additional_length, uint64_t add_id, uint64_t track_number, uint64_t abs_timecode, bool is_key)"
  },
  {
    "label": "AddFrameWithDiscardPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrameWithDiscardPadding(const uint8_t* data, uint64_t length, int64_t discard_padding, uint64_t track_number, uint64_t abs_timecode, bool is_key)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMetadata(const uint8_t* data, uint64_t length, uint64_t track_number, uint64_t timecode, uint64_t duration)"
  },
  {
    "label": "AddPayloadSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPayloadSize(uint64_t size)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Finalize()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Finalize(bool set_last_frame_duration, uint64_t duration)"
  },
  {
    "label": "GetRelativeTimecode()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetRelativeTimecode(int64_t abs_timecode)"
  },
  {
    "label": "size_position()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "size_position()"
  },
  {
    "label": "write_last_frame_with_duration()",
    "kind": "Method",
    "detail": "Function (write_last_frame_with_duration_ = write_last_frame_with_duration ; } bool)",
    "insertText": "write_last_frame_with_duration()"
  },
  {
    "label": "PostWriteBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostWriteBlock(uint64_t element_size)"
  },
  {
    "label": "DoWriteFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoWriteFrame(const Frame* const frame)"
  },
  {
    "label": "QueueOrWriteFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueOrWriteFrame(const Frame* const frame)"
  },
  {
    "label": "WriteClusterHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteClusterHeader()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (int32_t blocks_added_ ; bool finalized_ ; bool fixed_size_timecode_ ; bool header_written_ ; uint64_t payload_size_ ; const int64_t position_for_cues_ ; int64_t size_position_ ; const uint64_t timecode_ ; const uint64_t timecode_scale_ ; bool write_last_frame_with_duration_ ; std::map<uint64_t,std::list<Frame*>> stored_frames_ ; std::map<uint64_t,uint64_t> last_block_timestamp_ ; IMkvWriter* writer_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(Cluster)"
  },
  {
    "label": "SeekHead()",
    "kind": "Method",
    "detail": "Function (} ; class SeekHead { public :)",
    "insertText": "SeekHead()"
  },
  {
    "label": "AddSeekEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSeekEntry(uint32_t id, uint64_t pos)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Finalize(IMkvWriter* writer)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetId(int index)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "GetPosition(int index)"
  },
  {
    "label": "SetSeekEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSeekEntry(int index, uint32_t id, uint64_t position)"
  },
  {
    "label": "MaxEntrySize()",
    "kind": "Method",
    "detail": "Function (const int32_t kSeekEntryCount = 5 ; private : uint64_t)",
    "insertText": "MaxEntrySize()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (uint32_t seek_entry_id_ [ kSeekEntryCount ] ; uint64_t seek_entry_pos_ [ kSeekEntryCount ] ; int64_t start_pos_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(SeekHead)"
  },
  {
    "label": "SegmentInfo()",
    "kind": "Method",
    "detail": "Function (} ; class SegmentInfo { public :)",
    "insertText": "SegmentInfo()"
  },
  {
    "label": "set_duration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_duration(double duration)"
  },
  {
    "label": "muxing_app()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "muxing_app()"
  },
  {
    "label": "timecode_scale()",
    "kind": "Method",
    "detail": "Function (timecode_scale_ = scale ; } uint64_t)",
    "insertText": "timecode_scale()"
  },
  {
    "label": "writing_app()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "writing_app()"
  },
  {
    "label": "date_utc()",
    "kind": "Method",
    "detail": "Function (date_utc_ = date_utc ; } int64_t)",
    "insertText": "date_utc()"
  },
  {
    "label": "Segment()",
    "kind": "Method",
    "detail": "Function (} ; class Segment { public : enum Mode { kLive = 0 x1,kFile = 0 x2 } ; enum CuesPosition { kAfterClusters = 0 x0,kBeforeClusters = 0 x1 } ; const uint32_t kDefaultDocTypeVersion = 4 ; const uint64_t kDefaultMaxClusterDuration = 3 0 0 0 0 0 0 0 0 0 0 ULL ;)",
    "insertText": "Segment()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (Track*)",
    "insertText": "AddTrack(int32_t number)"
  },
  {
    "label": "AddAudioTrack()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "AddAudioTrack(int32_t sample_rate, int32_t channels, int32_t number)"
  },
  {
    "label": "AddChapter()",
    "kind": "Method",
    "detail": "Function (Chapter*)",
    "insertText": "AddChapter()"
  },
  {
    "label": "AddCuePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCuePoint(uint64_t timestamp, uint64_t track)"
  },
  {
    "label": "AddFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrame(const uint8_t* data, uint64_t length, uint64_t track_number, uint64_t timestamp_ns, bool is_key)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMetadata(const uint8_t* data, uint64_t length, uint64_t track_number, uint64_t timestamp_ns, uint64_t duration_ns)"
  },
  {
    "label": "AddFrameWithAdditional()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrameWithAdditional(const uint8_t* data, uint64_t length, const uint8_t* additional, uint64_t additional_length, uint64_t add_id, uint64_t track_number, uint64_t timestamp, bool is_key)"
  },
  {
    "label": "AddFrameWithDiscardPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrameWithDiscardPadding(const uint8_t* data, uint64_t length, int64_t discard_padding, uint64_t track_number, uint64_t timestamp, bool is_key)"
  },
  {
    "label": "AddGenericFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddGenericFrame(const Frame* frame)"
  },
  {
    "label": "AddVideoTrack()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "AddVideoTrack(int32_t width, int32_t height, int32_t number)"
  },
  {
    "label": "CopyAndMoveCuesBeforeClusters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyAndMoveCuesBeforeClusters(mkvparser::IMkvReader* reader, IMkvWriter* writer)"
  },
  {
    "label": "CuesTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CuesTrack(uint64_t track_number)"
  },
  {
    "label": "ForceNewClusterOnNextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNewClusterOnNextFrame()"
  },
  {
    "label": "GetCues()",
    "kind": "Method",
    "detail": "Function (Cues*)",
    "insertText": "GetCues()"
  },
  {
    "label": "OutputCues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputCues(bool output_cues)"
  },
  {
    "label": "AccurateClusterDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccurateClusterDuration(bool accurate_cluster_duration)"
  },
  {
    "label": "UseFixedSizeClusterTimecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseFixedSizeClusterTimecode(bool fixed_size_cluster_timecode)"
  },
  {
    "label": "SetChunking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetChunking(bool chunking, const char* filename)"
  },
  {
    "label": "chunking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "chunking()"
  },
  {
    "label": "max_cluster_duration()",
    "kind": "Method",
    "detail": "Function (max_cluster_duration_ = max_cluster_duration ; } uint64_t)",
    "insertText": "max_cluster_duration()"
  },
  {
    "label": "max_cluster_size()",
    "kind": "Method",
    "detail": "Function (max_cluster_size_ = max_cluster_size ; } uint64_t)",
    "insertText": "max_cluster_size()"
  },
  {
    "label": "mode()",
    "kind": "Method",
    "detail": "Function (mode_ = mode ; } Mode)",
    "insertText": "mode()"
  },
  {
    "label": "estimate_file_duration()",
    "kind": "Method",
    "detail": "Function (estimate_file_duration_ = estimate_duration ; } bool)",
    "insertText": "estimate_file_duration()"
  },
  {
    "label": "CheckHeaderInfo()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CheckHeaderInfo()"
  },
  {
    "label": "UpdateDocTypeVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDocTypeVersion()"
  },
  {
    "label": "UpdateChunkName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateChunkName(const char* ext, char** name)"
  },
  {
    "label": "MaxOffset()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "MaxOffset()"
  },
  {
    "label": "QueueFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueFrame(Frame* frame)"
  },
  {
    "label": "WriteFramesAll()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WriteFramesAll()"
  },
  {
    "label": "WriteFramesLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFramesLessThan(uint64_t timestamp)"
  },
  {
    "label": "WriteSegmentHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteSegmentHeader()"
  },
  {
    "label": "TestFrame()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "TestFrame(uint64_t track_num, uint64_t timestamp_ns, bool key)"
  },
  {
    "label": "MakeNewCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeNewCluster(uint64_t timestamp_ns)"
  },
  {
    "label": "DoNewClusterProcessing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoNewClusterProcessing(uint64_t track_num, uint64_t timestamp_ns, bool key)"
  },
  {
    "label": "MoveCuesBeforeClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCuesBeforeClusters()"
  },
  {
    "label": "MoveCuesBeforeClustersHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCuesBeforeClustersHelper(uint64_t diff, int index, uint64_t* cue_size)"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (unsigned int seed_ ; Cues cues_ ; SeekHead seek_head_ ; SegmentInfo segment_info_ ; Tracks tracks_ ; Chapters chapters_ ; Tags tags_ ; int chunk_count_ ; char* chunk_name_ ; MkvWriter* chunk_writer_cluster_ ; MkvWriter* chunk_writer_cues_ ; MkvWriter* chunk_writer_header_ ; bool chunking_ ; char* chunking_base_name_ ; int64_t cluster_end_offset_ ; Cluster** cluster_list_ ; int32_t cluster_list_capacity_ ; int32_t cluster_list_size_ ; CuesPosition cues_position_ ; uint64_t cues_track_ ; bool force_new_cluster_ ; Frame** frames_ ; int32_t frames_capacity_ ; int32_t frames_size_ ; bool has_video_ ; bool header_written_ ; uint64_t last_block_duration_ ; uint64_t last_timestamp_ ; uint64_t last_track_timestamp_ [ kMaxTrackNumber ] ; uint64_t track_frames_written_ [ kMaxTrackNumber ] ; uint64_t max_cluster_duration_ ; uint64_t max_cluster_size_ ; Mode mode_ ; bool new_cuepoint_ ; bool output_cues_ ; bool accurate_cluster_duration_ ; bool fixed_size_cluster_timecode_ ; bool estimate_file_duration_ ; int32_t ebml_header_size_ ; int64_t payload_pos_ ; int64_t size_position_ ; uint32_t doc_type_version_ ; uint32_t doc_type_version_written_ ; double duration_ ; IMkvWriter* writer_cluster_ ; IMkvWriter* writer_cues_ ; IMkvWriter* writer_header_ ;)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(Segment)"
  }
]