[
  {
    "label": "IMkvReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMkvReader"
  },
  {
    "label": "MkvWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MkvWriter"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Segment"
  },
  {
    "label": "IMkvWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMkvWriter"
  },
  {
    "label": "Frame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Frame"
  },
  {
    "label": "CuePoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CuePoint"
  },
  {
    "label": "Cues",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cues"
  },
  {
    "label": "ContentEncAESSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContentEncAESSettings"
  },
  {
    "label": "ContentEncoding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContentEncoding"
  },
  {
    "label": "PrimaryChromaticity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrimaryChromaticity"
  },
  {
    "label": "MasteringMetadata",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MasteringMetadata"
  },
  {
    "label": "Colour",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Colour"
  },
  {
    "label": "MatrixCoefficients",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MatrixCoefficients"
  },
  {
    "label": "ChromaSitingHorz",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ChromaSitingHorz"
  },
  {
    "label": "ChromaSitingVert",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ChromaSitingVert"
  },
  {
    "label": "Range",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Range"
  },
  {
    "label": "TransferCharacteristics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TransferCharacteristics"
  },
  {
    "label": "Primaries",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Primaries"
  },
  {
    "label": "Projection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Projection"
  },
  {
    "label": "ProjectionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProjectionType"
  },
  {
    "label": "Track",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Track"
  },
  {
    "label": "VideoTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoTrack"
  },
  {
    "label": "StereoMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StereoMode"
  },
  {
    "label": "AlphaMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AlphaMode"
  },
  {
    "label": "AudioTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioTrack"
  },
  {
    "label": "Tracks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tracks"
  },
  {
    "label": "Chapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chapter"
  },
  {
    "label": "Chapters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chapters"
  },
  {
    "label": "Display",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Display"
  },
  {
    "label": "Chapters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Chapters"
  },
  {
    "label": "Tag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tag"
  },
  {
    "label": "Tags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tags"
  },
  {
    "label": "SimpleTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleTag"
  },
  {
    "label": "Tags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tags"
  },
  {
    "label": "Cluster",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Cluster"
  },
  {
    "label": "SeekHead",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SeekHead"
  },
  {
    "label": "SegmentInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SegmentInfo"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "Segment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Segment"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "CuesPosition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CuesPosition"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "IMkvWriter()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "IMkvWriter()"
  },
  {
    "label": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "LIBWEBM_DISALLOW_COPY_AND_ASSIGN(IMkvWriter)"
  },
  {
    "label": "WriteEbmlHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteEbmlHeader(IMkvWriter* writer, uint64_t doc_type_version,\n                     const char* const doc_type)"
  },
  {
    "label": "WriteEbmlHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteEbmlHeader(IMkvWriter* writer, uint64_t doc_type_version)"
  },
  {
    "label": "WriteEbmlHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteEbmlHeader(IMkvWriter* writer)"
  },
  {
    "label": "ChunkedCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ChunkedCopy(mkvparser::IMkvReader* source, IMkvWriter* dst, int64_t start,\n                 int64_t size)"
  },
  {
    "label": "Frame()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Frame()"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFrom(const Frame& frame)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(const uint8_t* frame, uint64_t length)"
  },
  {
    "label": "AddAdditionalData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddAdditionalData(const uint8_t* additional, uint64_t length,\n                         uint64_t add_id)"
  },
  {
    "label": "set_duration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_duration(uint64_t duration)"
  },
  {
    "label": "set_reference_block_timestamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_reference_block_timestamp(int64_t reference_block_timestamp)"
  },
  {
    "label": "CuePoint()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CuePoint()"
  },
  {
    "label": "Cues()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Cues()"
  },
  {
    "label": "AddCue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCue(CuePoint* cue)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "Size()"
  },
  {
    "label": "ContentEncoding()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ContentEncoding()"
  },
  {
    "label": "SetEncryptionID()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEncryptionID(const uint8_t* id, uint64_t length)"
  },
  {
    "label": "SetChromaticity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetChromaticity(const PrimaryChromaticity* r,\n                       const PrimaryChromaticity* g,\n                       const PrimaryChromaticity* b,\n                       const PrimaryChromaticity* white_point)"
  },
  {
    "label": "SetMasteringMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMasteringMetadata(const MasteringMetadata& mastering_metadata)"
  },
  {
    "label": "SetProjectionPrivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProjectionPrivate(const uint8_t* private_data,\n                            uint64_t private_data_length)"
  },
  {
    "label": "Track()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Track(unsigned int* seed)"
  },
  {
    "label": "AddContentEncoding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddContentEncoding()"
  },
  {
    "label": "SetCodecPrivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCodecPrivate(const uint8_t* codec_private, uint64_t length)"
  },
  {
    "label": "set_codec_id()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_codec_id(const char* codec_id)"
  },
  {
    "label": "set_language()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_language(const char* language)"
  },
  {
    "label": "set_name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_name(const char* name)"
  },
  {
    "label": "VideoTrack()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "VideoTrack(unsigned int* seed)"
  },
  {
    "label": "SetStereoMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetStereoMode(uint64_t stereo_mode)"
  },
  {
    "label": "SetAlphaMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAlphaMode(uint64_t alpha_mode)"
  },
  {
    "label": "set_colour_space()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_colour_space(const char* colour_space)"
  },
  {
    "label": "SetColour()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetColour(const Colour& colour)"
  },
  {
    "label": "SetProjection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProjection(const Projection& projection)"
  },
  {
    "label": "AudioTrack()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "AudioTrack(unsigned int* seed)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTrack(Track* track, int32_t number)"
  },
  {
    "label": "set_id()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_id(const char* id)"
  },
  {
    "label": "set_time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_time(const Segment& segment, uint64_t start_time_ns,\n                uint64_t end_time_ns)"
  },
  {
    "label": "add_string()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add_string(const char* title, const char* language, const char* country)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "set_title()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_title(const char* title)"
  },
  {
    "label": "set_language()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_language(const char* language)"
  },
  {
    "label": "set_country()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_country(const char* country)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(unsigned int* seed)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ExpandDisplaysArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandDisplaysArray()"
  },
  {
    "label": "Chapters()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Chapters()"
  },
  {
    "label": "ExpandChaptersArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandChaptersArray()"
  },
  {
    "label": "add_simple_tag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "add_simple_tag(const char* tag_name, const char* tag_string)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "set_tag_name()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_tag_name(const char* tag_name)"
  },
  {
    "label": "set_tag_string()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_tag_string(const char* tag_string)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ExpandSimpleTagsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandSimpleTagsArray()"
  },
  {
    "label": "Tags()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Tags()"
  },
  {
    "label": "ExpandTagsArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpandTagsArray()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(IMkvWriter* ptr_writer)"
  },
  {
    "label": "AddFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrame(const Frame* frame)"
  },
  {
    "label": "AddFrameWithAdditional()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrameWithAdditional(const uint8_t* data, uint64_t length,\n                              const uint8_t* additional,\n                              uint64_t additional_length, uint64_t add_id,\n                              uint64_t track_number, uint64_t abs_timecode,\n                              bool is_key)"
  },
  {
    "label": "AddFrameWithDiscardPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrameWithDiscardPadding(const uint8_t* data, uint64_t length,\n                                  int64_t discard_padding,\n                                  uint64_t track_number, uint64_t abs_timecode,\n                                  bool is_key)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMetadata(const uint8_t* data, uint64_t length, uint64_t track_number,\n                   uint64_t timecode, uint64_t duration)"
  },
  {
    "label": "AddPayloadSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPayloadSize(uint64_t size)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Finalize()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Finalize(bool set_last_frame_duration, uint64_t duration)"
  },
  {
    "label": "PreWriteBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreWriteBlock()"
  },
  {
    "label": "PostWriteBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostWriteBlock(uint64_t element_size)"
  },
  {
    "label": "DoWriteFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoWriteFrame(const Frame* const frame)"
  },
  {
    "label": "QueueOrWriteFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueOrWriteFrame(const Frame* const frame)"
  },
  {
    "label": "WriteClusterHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteClusterHeader()"
  },
  {
    "label": "SeekHead()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SeekHead()"
  },
  {
    "label": "AddSeekEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSeekEntry(uint32_t id, uint64_t pos)"
  },
  {
    "label": "SetSeekEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSeekEntry(int index, uint32_t id, uint64_t position)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(IMkvWriter* writer)"
  },
  {
    "label": "SegmentInfo()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SegmentInfo()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(IMkvWriter* writer)"
  },
  {
    "label": "set_muxing_app()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_muxing_app(const char* app)"
  },
  {
    "label": "set_writing_app()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_writing_app(const char* app)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(IMkvWriter* ptr_writer)"
  },
  {
    "label": "AddAudioTrack()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "AddAudioTrack(int32_t sample_rate, int32_t channels, int32_t number)"
  },
  {
    "label": "AddCuePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCuePoint(uint64_t timestamp, uint64_t track)"
  },
  {
    "label": "AddFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrame(const uint8_t* data, uint64_t length, uint64_t track_number,\n                uint64_t timestamp_ns, bool is_key)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMetadata(const uint8_t* data, uint64_t length, uint64_t track_number,\n                   uint64_t timestamp_ns, uint64_t duration_ns)"
  },
  {
    "label": "AddFrameWithAdditional()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrameWithAdditional(const uint8_t* data, uint64_t length,\n                              const uint8_t* additional,\n                              uint64_t additional_length, uint64_t add_id,\n                              uint64_t track_number, uint64_t timestamp,\n                              bool is_key)"
  },
  {
    "label": "AddFrameWithDiscardPadding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddFrameWithDiscardPadding(const uint8_t* data, uint64_t length,\n                                  int64_t discard_padding,\n                                  uint64_t track_number, uint64_t timestamp,\n                                  bool is_key)"
  },
  {
    "label": "AddGenericFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddGenericFrame(const Frame* frame)"
  },
  {
    "label": "AddVideoTrack()",
    "kind": "Method",
    "detail": "Function (uint64_t)",
    "insertText": "AddVideoTrack(int32_t width, int32_t height, int32_t number)"
  },
  {
    "label": "CopyAndMoveCuesBeforeClusters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyAndMoveCuesBeforeClusters(mkvparser::IMkvReader* reader,\n                                     IMkvWriter* writer)"
  },
  {
    "label": "CuesTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CuesTrack(uint64_t track_number)"
  },
  {
    "label": "ForceNewClusterOnNextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNewClusterOnNextFrame()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Finalize()"
  },
  {
    "label": "OutputCues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputCues(bool output_cues)"
  },
  {
    "label": "AccurateClusterDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccurateClusterDuration(bool accurate_cluster_duration)"
  },
  {
    "label": "UseFixedSizeClusterTimecode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseFixedSizeClusterTimecode(bool fixed_size_cluster_timecode)"
  },
  {
    "label": "SetChunking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetChunking(bool chunking, const char* filename)"
  },
  {
    "label": "CheckHeaderInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckHeaderInfo()"
  },
  {
    "label": "UpdateDocTypeVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDocTypeVersion()"
  },
  {
    "label": "MaxOffset()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "MaxOffset()"
  },
  {
    "label": "QueueFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueFrame(Frame* frame)"
  },
  {
    "label": "WriteFramesAll()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WriteFramesAll()"
  },
  {
    "label": "WriteFramesLessThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFramesLessThan(uint64_t timestamp)"
  },
  {
    "label": "WriteSegmentHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteSegmentHeader()"
  },
  {
    "label": "MakeNewCluster()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MakeNewCluster(uint64_t timestamp_ns)"
  },
  {
    "label": "DoNewClusterProcessing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoNewClusterProcessing(uint64_t track_num, uint64_t timestamp_ns,\n                              bool key)"
  },
  {
    "label": "MoveCuesBeforeClusters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCuesBeforeClusters()"
  },
  {
    "label": "MoveCuesBeforeClustersHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCuesBeforeClustersHelper(uint64_t diff, int index,\n                                    uint64_t* cue_size)"
  }
]