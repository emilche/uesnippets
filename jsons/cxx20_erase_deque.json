[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "Erase()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_CONTAINERS_CXX20_ERASE_DEQUE_H_ # define BASE_CONTAINERS_CXX20_ERASE_DEQUE_H_ # include<algorithm> # include<deque> # include<iterator> namespace base { template<class T,class Allocator,class Value> size_t)",
    "insertText": "Erase(std::deque<T, Allocator>& container, const Value& value)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "remove(container.begin(), container.end(), value)"
  },
  {
    "label": "distance()",
    "kind": "Method",
    "detail": "Function (size_t removed =)",
    "insertText": "distance(it, container.end())"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (container .)",
    "insertText": "erase(it, container.end())"
  },
  {
    "label": "remove_if()",
    "kind": "Method",
    "detail": "Function (auto it =)",
    "insertText": "remove_if(container.begin(), container.end(), pred)"
  }
]