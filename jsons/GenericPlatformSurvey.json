[
  {
    "label": "FTimeSample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeSample"
  },
  {
    "label": "FSynthBenchmarkStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSynthBenchmarkStat"
  },
  {
    "label": "FSynthBenchmarkResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSynthBenchmarkResults"
  },
  {
    "label": "FHardwareDisplay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHardwareDisplay"
  },
  {
    "label": "FGPUAdpater",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGPUAdpater"
  },
  {
    "label": "FHardwareSurveyResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHardwareSurveyResults"
  },
  {
    "label": "FGenericPlatformSurvey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformSurvey"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainersFwd . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSynthBenchmark, Log, All)"
  },
  {
    "label": "FTimeSample()",
    "kind": "Method",
    "detail": "Function (struct FTimeSample {)",
    "insertText": "FTimeSample(float InTotalTime, float InNormalizedTime) : TotalTime(InTotalTime) , NormalizedTime(InNormalizedTime)"
  },
  {
    "label": "FSynthBenchmarkStat()",
    "kind": "Method",
    "detail": "Function (} float TotalTime ; float NormalizedTime ; } ; struct FSynthBenchmarkStat {)",
    "insertText": "FSynthBenchmarkStat() : Desc(0) , MeasuredTotalTime(-1) , MeasuredNormalizedTime(-1) , IndexNormalizedTime(-1) , ValueType(0) , Confidence(0) , Weight(1.f)"
  },
  {
    "label": "FSynthBenchmarkStat()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSynthBenchmarkStat(const TCHAR* InDesc, float InIndexNormalizedTime, const TCHAR* InValueType, float InWeight) : Desc(InDesc) , MeasuredTotalTime(-1) , MeasuredNormalizedTime(-1) , IndexNormalizedTime(InIndexNormalizedTime) , ValueType(InValueType) , Confidence(0) , Weight(InWeight)"
  },
  {
    "label": "ComputePerfIndex()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ComputePerfIndex()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (MeasuredTotalTime = TimeSample . TotalTime ; MeasuredNormalizedTime = TimeSample . NormalizedTime ; Confidence = InConfidence ; } const TCHAR*)",
    "insertText": "GetDesc()"
  },
  {
    "label": "ComputeGPUPerfIndex()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeGPUPerfIndex(TArray<float>* OutIndividualResults = nullptr)"
  },
  {
    "label": "ComputeTotalGPUTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeTotalGPUTime()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float Ret = 0 . 0 f ;)",
    "insertText": "for(uint32 i = 0; i < sizeof(GPUStats) / sizeof(GPUStats[0]); ++i)"
  },
  {
    "label": "GetMeasuredTotalTime()",
    "kind": "Method",
    "detail": "Function (Ret + = GPUStats [ i ] .)",
    "insertText": "GetMeasuredTotalTime()"
  },
  {
    "label": "GetSurveyResults()",
    "kind": "Method",
    "detail": "Function (} return Ret ; } } ; struct FHardwareDisplay { const uint32 MaxStringLength = 2 6 0 ; uint32 CurrentModeWidth ; uint32 CurrentModeHeight ; TCHAR GPUCardName_DEPRECATED [ MaxStringLength ] ; uint32 GPUDedicatedMemoryMB_DEPRECATED ; TCHAR GPUDriverVersion_DEPRECATED [ MaxStringLength ] ; } ; struct FGPUAdpater { const uint32 MaxStringLength = 2 6 0 ; TCHAR AdapterName [ MaxStringLength ] ; TCHAR AdapterInternalDriverVersion [ MaxStringLength ] ; TCHAR AdapterUserDriverVersion [ MaxStringLength ] ; TCHAR AdapterDriverDate [ MaxStringLength ] ; TCHAR AdapterDedicatedMemoryMB [ MaxStringLength ] ; } ; struct FHardwareSurveyResults { const int32 MaxDisplayCount = 8 ; const int32 MaxStringLength = 2 6 0 ; TCHAR Platform [ MaxStringLength ] ; TCHAR OSVersion [ MaxStringLength ] ; TCHAR OSSubVersion [ MaxStringLength ] ; uint32 OSBits ; TCHAR OSLanguage [ MaxStringLength ] ; TCHAR RenderingAPI [ MaxStringLength ] ; TCHAR MultimediaAPI_DEPRECATED [ MaxStringLength ] ; uint32 HardDriveGB ; uint32 HardDriveFreeMB ; uint32 MemoryMB ; float CPUPerformanceIndex ; float GPUPerformanceIndex ; float RAMPerformanceIndex ; uint32 bIsLaptopComputer : 1 ; uint32 bIsRemoteSession : 1 ; uint32 CPUCount ; float CPUClockGHz ; TCHAR CPUBrand [ MaxStringLength ] ; TCHAR CPUNameString [ MaxStringLength ] ; uint32 CPUInfo ; uint32 DisplayCount ; FHardwareDisplay Displays [ MaxDisplayCount ] ; FGPUAdpater RHIAdapter ; uint32 ErrorCount ; TCHAR LastSurveyError [ MaxStringLength ] ; TCHAR LastSurveyErrorDetail [ MaxStringLength ] ; TCHAR LastPerformanceIndexError [ MaxStringLength ] ; TCHAR LastPerformanceIndexErrorDetail [ MaxStringLength ] ; FSynthBenchmarkResults SynthBenchmark ; } ; struct FGenericPlatformSurvey { bool)",
    "insertText": "GetSurveyResults(FHardwareSurveyResults& OutResults, bool bWait = false)"
  }
]