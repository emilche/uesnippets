[
  {
    "label": "FMessageLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLog"
  },
  {
    "label": "FStatsHierarchical",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsHierarchical"
  },
  {
    "label": "FStatsTreeElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsTreeElement"
  },
  {
    "label": "FStatsHierarchicalClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStatsHierarchicalClient"
  },
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScope"
  },
  {
    "label": "FHierarchicalStatEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHierarchicalStatEntry"
  },
  {
    "label": "FStatsTreeElement()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformTime . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" Logging / MessageLog . h \" # include \" Misc / Build . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" class FMessageLog ; class FStatsHierarchical ; class FStatsTreeElement { public :)",
    "insertText": "FStatsTreeElement()"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFName()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPath()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Num(bool bInclusive = false)"
  },
  {
    "label": "TotalCycles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "TotalCycles(bool bInclusive = true)"
  },
  {
    "label": "MaxCycles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "MaxCycles(bool bInclusive = true)"
  },
  {
    "label": "TotalSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "TotalSeconds(bool bInclusive = true)"
  },
  {
    "label": "AverageSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "AverageSeconds(bool bInclusive = true)"
  },
  {
    "label": "Contribution()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Contribution(bool bAgainstMaximum = false, bool bInclusive = true)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FStatsTreeElement>>&)",
    "insertText": "GetChildren()"
  },
  {
    "label": "FindChild()",
    "kind": "Method",
    "detail": "Function (protected : FName Name ; FString Path ; uint32 Invocations ; uint32 Cycles ; uint32 CyclesOfChildren ; double RatioAgainstTotalInclusive ; double RatioAgainstTotalExclusive ; double RatioAgainstMaximumInclusive ; double RatioAgainstMaximumExclusive ; TArray<TSharedPtr<FStatsTreeElement>> Children ; FStatsTreeElement*)",
    "insertText": "FindChild(const FString& InPath)"
  },
  {
    "label": "UpdatePostMeasurement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePostMeasurement(double InCyclesPerTimerToRemove = 0)"
  },
  {
    "label": "DECLARE_SCOPE_HIERARCHICAL_COUNTER()",
    "kind": "Method",
    "detail": "Function (class FStatsHierarchical ; class FStatsHierarchicalClient ; } ; # if STATS # define)",
    "insertText": "DECLARE_SCOPE_HIERARCHICAL_COUNTER(CounterName) \\ FStatsHierarchical::FScope PREPROCESSOR_JOIN(StatsHierarchicalScope, __LINE__)(#CounterName)"
  },
  {
    "label": "DECLARE_SCOPE_HIERARCHICAL_COUNTER_FUNC()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DECLARE_SCOPE_HIERARCHICAL_COUNTER_FUNC() \\ FStatsHierarchical::FScope PREPROCESSOR_JOIN(StatsHierarchicalScope, __LINE__)(__FUNCTION__)"
  },
  {
    "label": "DECLARE_SCOPE_HIERARCHICAL_COUNTER()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "DECLARE_SCOPE_HIERARCHICAL_COUNTER(CounterName) #define DECLARE_SCOPE_HIERARCHICAL_COUNTER_FUNC()"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (public : struct FScope {)",
    "insertText": "FScope(const ANSICHAR * InLabel)"
  },
  {
    "label": "BeginMeasurement()",
    "kind": "Method",
    "detail": "Function (# if STATS)",
    "insertText": "BeginMeasurement(InLabel)"
  },
  {
    "label": "FScope()",
    "kind": "Method",
    "detail": "Function (# endif } ~)",
    "insertText": "FScope()"
  },
  {
    "label": "EndMeasurement()",
    "kind": "Method",
    "detail": "Function (# if STATS)",
    "insertText": "EndMeasurement()"
  },
  {
    "label": "BeginMeasurements()",
    "kind": "Method",
    "detail": "Function (# endif } } ; void)",
    "insertText": "BeginMeasurements()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "EndMeasurements()",
    "kind": "Method",
    "detail": "Function (FStatsTreeElement)",
    "insertText": "EndMeasurements(FStatsTreeElement MeasurementsToMerge = FStatsTreeElement(), bool bAddUntrackedElements = true)"
  },
  {
    "label": "GetLastMeasurements()",
    "kind": "Method",
    "detail": "Function (FStatsTreeElement)",
    "insertText": "GetLastMeasurements()"
  },
  {
    "label": "DumpMeasurements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMeasurements(FMessageLog& Log, bool bSortByDuration = true)"
  },
  {
    "label": "GetUntrackedTimeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetUntrackedTimeName()"
  },
  {
    "label": "FHierarchicalStatEntry()",
    "kind": "Method",
    "detail": "Function (private : struct FHierarchicalStatEntry {)",
    "insertText": "FHierarchicalStatEntry(const ANSICHAR * InLabel, uint32 InCycles) :Label(InLabel) , Cycles(InCycles)"
  },
  {
    "label": "FHierarchicalStatEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHierarchicalStatEntry() :Label(nullptr) , Cycles(0)"
  },
  {
    "label": "BeginMeasurement()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR* Label ; uint32 Cycles ; class FStatsHierarchical ; } ; void)",
    "insertText": "BeginMeasurement(const ANSICHAR * Label)"
  }
]