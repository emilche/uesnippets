[
  {
    "label": "ITypedUMGListView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITypedUMGListView"
  },
  {
    "label": "FListViewConstructArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FListViewConstructArgs"
  },
  {
    "label": "ListViewT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ListViewT"
  },
  {
    "label": "FTileViewConstructArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileViewConstructArgs"
  },
  {
    "label": "TileViewT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TileViewT"
  },
  {
    "label": "FTreeViewConstructArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTreeViewConstructArgs"
  },
  {
    "label": "TreeViewT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeViewT"
  },
  {
    "label": "ObjectRowT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjectRowT"
  },
  {
    "label": "UListViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UListViewBase"
  },
  {
    "label": "FListViewBaseDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FListViewBaseDetails"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Components / Widget . h \" # include \" Slate / SObjectTableRow . h \" # include \" Blueprint / UserWidgetPool . h \" # include \" Widgets / Layout / SSpacer . h \" # include \" Widgets / Views / STileView . h \" # include \" Widgets / Views / STreeView . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Styling / UMGCoreStyle . h \" # include \" ListViewBase . generated . h \")",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnListEntryGeneratedDynamic, UUserWidget*, Widget)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnListEntryReleasedDynamic, UUserWidget*, Widget)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (template<ItemType> class ITypedUMGListView { public : using NullableItemType = SListView<ItemType>::NullableItemType ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FSimpleListItemEvent, ItemType)"
  },
  {
    "label": "OnItemClicked()",
    "kind": "Method",
    "detail": "Function (FSimpleListItemEvent&)",
    "insertText": "OnItemClicked()"
  },
  {
    "label": "OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (FSimpleListItemEvent&)",
    "insertText": "OnItemDoubleClicked()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnItemIsHoveredChanged, ItemType, bool)"
  },
  {
    "label": "OnItemIsHoveredChanged()",
    "kind": "Method",
    "detail": "Function (FOnItemIsHoveredChanged&)",
    "insertText": "OnItemIsHoveredChanged()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnItemSelectionChanged, NullableItemType)"
  },
  {
    "label": "OnItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (FOnItemSelectionChanged&)",
    "insertText": "OnItemSelectionChanged()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnListViewScrolled, float, float)"
  },
  {
    "label": "OnListViewScrolled()",
    "kind": "Method",
    "detail": "Function (FOnListViewScrolled&)",
    "insertText": "OnListViewScrolled()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnFinishedScrolling)"
  },
  {
    "label": "OnFinishedScrolling()",
    "kind": "Method",
    "detail": "Function (FOnFinishedScrolling&)",
    "insertText": "OnFinishedScrolling()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnItemScrolledIntoView, ItemType, UUserWidget&)"
  },
  {
    "label": "OnItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (FOnItemScrolledIntoView&)",
    "insertText": "OnItemScrolledIntoView()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnItemExpansionChanged, ItemType, bool)"
  },
  {
    "label": "OnItemExpansionChanged()",
    "kind": "Method",
    "detail": "Function (FOnItemExpansionChanged&)",
    "insertText": "OnItemExpansionChanged()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSubclassOf<UUserWidget>, FOnGetEntryClassForItem, ItemType)"
  },
  {
    "label": "OnGetEntryClassForItem()",
    "kind": "Method",
    "detail": "Function (FOnGetEntryClassForItem&)",
    "insertText": "OnGetEntryClassForItem()"
  },
  {
    "label": "GetDefaultEntryClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UUserWidget>)",
    "insertText": "GetDefaultEntryClass()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnIsItemSelectableOrNavigable, ItemType)"
  },
  {
    "label": "OnIsItemSelectableOrNavigable()",
    "kind": "Method",
    "detail": "Function (FOnIsItemSelectableOrNavigable&)",
    "insertText": "OnIsItemSelectableOrNavigable()"
  },
  {
    "label": "GetMyListView()",
    "kind": "Method",
    "detail": "Function (protected : SListView<ItemType>*)",
    "insertText": "GetMyListView()"
  },
  {
    "label": "GetOwningUserIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetOwningUserIndex()"
  },
  {
    "label": "IsDesignerPreview()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDesignerPreview()"
  },
  {
    "label": "GetDesiredEntryClassForItem()",
    "kind": "Method",
    "detail": "Function (public : TSubclassOf<UUserWidget>)",
    "insertText": "GetDesiredEntryClassForItem(ItemType Item)"
  },
  {
    "label": "OnGetEntryClassForItem()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UUserWidget> CustomClass =)",
    "insertText": "OnGetEntryClassForItem().IsBound() ? OnGetEntryClassForItem().Execute(Item)"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (} NullableItemType)",
    "insertText": "GetSelectedItem()"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<ItemType> SelectedItems = MyListView ->)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "ItemFromEntryWidget()",
    "kind": "Method",
    "detail": "Function (} const TObjectPtrWrapTypeOf<ItemType>*)",
    "insertText": "ItemFromEntryWidget(const UUserWidget& EntryWidget)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SObjectTableRow<ItemType>> ObjectTableRow = StaticCastSharedPtr<SObjectTableRow<)",
    "insertText": "ItemType(EntryWidget.GetCachedWidget())"
  },
  {
    "label": "GetEntryWidgetFromItem()",
    "kind": "Method",
    "detail": "Function (} } return nullptr ; } template<RowWidgetT = UUserWidget> RowWidgetT*)",
    "insertText": "GetEntryWidgetFromItem(const ItemType& Item)"
  },
  {
    "label": "GetObjectRowFromItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SObjectTableRow<ItemType>> ObjectRow =)",
    "insertText": "GetObjectRowFromItem(Item)"
  },
  {
    "label": "GetIndexInList()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } int32)",
    "insertText": "GetIndexInList(const ItemType& Item)"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (} } return INDEX_NONE ; } int32)",
    "insertText": "GetSelectedItems(TArray<ItemType>& OutSelectedItems)"
  },
  {
    "label": "GetNumItemsSelected()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumItemsSelected()"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSelectedItem(const ItemType& SoleSelectedItem, ESelectInfo::Type SelectInfo = ESelectInfo::Direct)"
  },
  {
    "label": "SetSelection()",
    "kind": "Method",
    "detail": "Function (MyListView ->)",
    "insertText": "SetSelection(SoleSelectedItem, SelectInfo)"
  },
  {
    "label": "SetItemSelection()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetItemSelection(const ItemType& Item, bool bIsSelected, ESelectInfo::Type SelectInfo = ESelectInfo::Direct)"
  },
  {
    "label": "SetItemSelection()",
    "kind": "Method",
    "detail": "Function (MyListView ->)",
    "insertText": "SetItemSelection(Item, bIsSelected, SelectInfo)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "IsItemVisible()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsItemVisible(const ItemType& Item)"
  },
  {
    "label": "IsItemSelected()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsItemSelected(const ItemType& Item)"
  },
  {
    "label": "RequestNavigateToItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestNavigateToItem(const ItemType& Item)"
  },
  {
    "label": "RequestNavigateToItem()",
    "kind": "Method",
    "detail": "Function (MyListView ->)",
    "insertText": "RequestNavigateToItem(Item, GetOwningUserIndex())"
  },
  {
    "label": "RequestScrollItemIntoView()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RequestScrollItemIntoView(const ItemType& Item)"
  },
  {
    "label": "RequestScrollIntoView()",
    "kind": "Method",
    "detail": "Function (MyListView ->)",
    "insertText": "RequestScrollIntoView(Item, GetOwningUserIndex())"
  },
  {
    "label": "CancelScrollIntoView()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CancelScrollIntoView()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } protected : struct FListViewConstructArgs { bool bAllowFocus = true ; ESelectionMode::Type SelectionMode = ESelectionMode::Single ; bool bClearSelectionOnClick = false ; EConsumeMouseWheel ConsumeMouseWheel = EConsumeMouseWheel::WhenScrollingPossible ; bool bReturnFocusToSelection = false ; EOrientation Orientation = Orient_Vertical ; EScrollIntoViewAlignment ScrollIntoViewAlignment = EScrollIntoViewAlignment::CenterAligned ; const FTableViewStyle* ListViewStyle =&)",
    "insertText": "Get().GetWidgetStyle<FTableViewStyle>(\"ListView\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FScrollBarStyle* ScrollBarStyle =&)",
    "insertText": "Get().GetWidgetStyle<FScrollBarStyle>(\"ScrollBar\")"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (FMargin ScrollBarPadding =)",
    "insertText": "FMargin(0.0f)"
  },
  {
    "label": "ConstructListView()",
    "kind": "Method",
    "detail": "Function (bool bPreventThrottling = false ; } ; template<template<> class ListViewT = SListView,UListViewBaseT> TSharedRef<ListViewT<ItemType>>)",
    "insertText": "ConstructListView(UListViewBaseT* Implementer, const TArray<ItemType>& ListItems, const FListViewConstructArgs& Args = FListViewConstructArgs())"
  },
  {
    "label": "ConstructTileView()",
    "kind": "Method",
    "detail": "Function (EVisibility ScrollbarDisabledVisibility = EVisibility::Collapsed ; } ; template<template<> class TileViewT = STileView,UListViewBaseT> TSharedRef<TileViewT<ItemType>>)",
    "insertText": "ConstructTileView(UListViewBaseT* Implementer, const TArray<ItemType>& ListItems, const FTileViewConstructArgs& Args = FTileViewConstructArgs())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} struct FTreeViewConstructArgs { ESelectionMode::Type SelectionMode = ESelectionMode::Single ; bool bClearSelectionOnClick = false ; EConsumeMouseWheel ConsumeMouseWheel = EConsumeMouseWheel::WhenScrollingPossible ; bool bReturnFocusToSelection = false ; const FTableViewStyle* TreeViewStyle =&)",
    "insertText": "Get().GetWidgetStyle<FTableViewStyle>(\"TreeView\")"
  },
  {
    "label": "ConstructTreeView()",
    "kind": "Method",
    "detail": "Function (} ; template<template<> class TreeViewT = STreeView,UListViewBaseT> TSharedRef<TreeViewT<ItemType>>)",
    "insertText": "ConstructTreeView(UListViewBaseT* Implementer, const TArray<ItemType>& ListItems, const FTreeViewConstructArgs& Args = FTreeViewConstructArgs())"
  },
  {
    "label": "GetObjectRowFromItem()",
    "kind": "Method",
    "detail": "Function (} protected : template<template<> class ObjectRowT = SObjectTableRow> TSharedPtr<ObjectRowT<ItemType>>)",
    "insertText": "GetObjectRowFromItem(const ItemType& Item)"
  },
  {
    "label": "WidgetFromItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITableRow> RowWidget = MyListView ->)",
    "insertText": "WidgetFromItem(Item)"
  },
  {
    "label": "OnGenerateEntryWidgetInternal()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } UUserWidget&)",
    "insertText": "OnGenerateEntryWidgetInternal(ItemType Item, TSubclassOf<UUserWidget> DesiredEntryClass, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetDesiredEntryPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetDesiredEntryPadding(ItemType Item)"
  },
  {
    "label": "OnGetChildrenInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnGetChildrenInternal(ItemType Item, TArray<ItemType>& OutChildren)"
  },
  {
    "label": "OnItemClickedInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemClickedInternal(ItemType Item)"
  },
  {
    "label": "OnItemDoubleClickedInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemDoubleClickedInternal(ItemType Item)"
  },
  {
    "label": "OnSelectionChangedInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSelectionChangedInternal(NullableItemType FirstSelectedItem)"
  },
  {
    "label": "OnIsSelectableOrNavigableInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnIsSelectableOrNavigableInternal(ItemType FirstSelectedItem)"
  },
  {
    "label": "OnItemScrolledIntoViewInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemScrolledIntoViewInternal(ItemType Item, UUserWidget& EntryWidget)"
  },
  {
    "label": "OnListViewScrolledInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnListViewScrolledInternal(float ItemOffset, float DistanceRemaining)"
  },
  {
    "label": "OnItemExpansionChangedInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemExpansionChangedInternal(ItemType Item, bool bIsExpanded)"
  },
  {
    "label": "HandleGenerateRow()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateRow(ItemType Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetDesiredEntryClassForItem()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UUserWidget> DesiredEntryClass =)",
    "insertText": "GetDesiredEntryClassForItem(Item)"
  },
  {
    "label": "OnGenerateEntryWidgetInternal()",
    "kind": "Method",
    "detail": "Function (UUserWidget& EntryWidget =)",
    "insertText": "OnGenerateEntryWidgetInternal(Item, DesiredEntryClass, OwnerTable)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (const FMargin DefaultPadding = EntryWidget .)",
    "insertText": "GetClass()->GetDefaultObject<UUserWidget>()->GetPadding()"
  },
  {
    "label": "SetPadding()",
    "kind": "Method",
    "detail": "Function (EntryWidget .)",
    "insertText": "SetPadding(DefaultPadding + GetDesiredEntryPadding(Item))"
  },
  {
    "label": "GetCachedWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> CachedWidget = EntryWidget .)",
    "insertText": "GetCachedWidget()"
  },
  {
    "label": "SetCanTick()",
    "kind": "Method",
    "detail": "Function (CachedWidget ->)",
    "insertText": "SetCanTick(true)"
  },
  {
    "label": "HandleItemClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleItemClicked(ItemType Item)"
  },
  {
    "label": "OnItemClickedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemClickedInternal(Item)"
  },
  {
    "label": "OnItemClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemClicked().Broadcast(Item)"
  },
  {
    "label": "HandleItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleItemDoubleClicked(ItemType Item)"
  },
  {
    "label": "OnItemDoubleClickedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemDoubleClickedInternal(Item)"
  },
  {
    "label": "OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemDoubleClicked().Broadcast(Item)"
  },
  {
    "label": "HandleSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleSelectionChanged(NullableItemType Item, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnSelectionChangedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChangedInternal(Item)"
  },
  {
    "label": "OnItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemSelectionChanged().Broadcast(Item)"
  },
  {
    "label": "HandleIsSelectableOrNavigable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleIsSelectableOrNavigable(ItemType Item)"
  },
  {
    "label": "HandleListViewScrolled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleListViewScrolled(double OffsetInItems)"
  },
  {
    "label": "CastToVector2f()",
    "kind": "Method",
    "detail": "Function (const FVector2f DistanceRemaining = UE::)",
    "insertText": "CastToVector2f(MyListView->GetScrollDistanceRemaining())"
  },
  {
    "label": "OnListViewScrolledInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListViewScrolledInternal(static_cast<float>(OffsetInItems), DistanceRemaining.Y)"
  },
  {
    "label": "OnListViewScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListViewScrolled().Broadcast(static_cast<float>(OffsetInItems), DistanceRemaining.Y)"
  },
  {
    "label": "HandleFinishedScrolling()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "HandleFinishedScrolling()"
  },
  {
    "label": "OnFinishedScrolling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedScrolling().Broadcast()"
  },
  {
    "label": "HandleItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleItemScrolledIntoView(ItemType Item, const TSharedPtr<ITableRow>& InWidget)"
  },
  {
    "label": "GetEntryWidgetFromItem()",
    "kind": "Method",
    "detail": "Function (UUserWidget* RowWidget =)",
    "insertText": "GetEntryWidgetFromItem(Item)"
  },
  {
    "label": "OnItemScrolledIntoViewInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemScrolledIntoViewInternal(Item, *RowWidget)"
  },
  {
    "label": "OnItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemScrolledIntoView().Broadcast(Item, *RowWidget)"
  },
  {
    "label": "HandleExpansionChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "HandleExpansionChanged(ItemType Item, bool bIsExpanded)"
  },
  {
    "label": "NotifyItemExpansionChanged()",
    "kind": "Method",
    "detail": "Function (ObjectRow ->)",
    "insertText": "NotifyItemExpansionChanged(bIsExpanded)"
  },
  {
    "label": "OnItemExpansionChangedInternal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnItemExpansionChangedInternal(Item, bIsExpanded)"
  },
  {
    "label": "OnItemExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemExpansionChanged().Broadcast(Item, bIsExpanded)"
  },
  {
    "label": "HandleGetChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleGetChildren(ItemType Item, TArray<ItemType>& OutChildren)"
  },
  {
    "label": "OnGetChildrenInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildrenInternal(Item, OutChildren)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(Abstract, NotBlueprintable, hidedropdown, meta = (EntryInterface = UserListEntry), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMG_API UListViewBase(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "GetPaletteCategory()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const FText)",
    "insertText": "GetPaletteCategory()"
  },
  {
    "label": "ValidateCompiledDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateCompiledDefaults(IWidgetCompilerLog& CompileLog)"
  },
  {
    "label": "GetEntryWidgetClass()",
    "kind": "Method",
    "detail": "Function (# endif TSubclassOf<UUserWidget>)",
    "insertText": "GetEntryWidgetClass()"
  },
  {
    "label": "GetListObjectFromEntry()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetListObjectFromEntry(UUserWidget& EntryWidget)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UListView, FOnListEntryGenerated, UUserWidget&)"
  },
  {
    "label": "OnEntryWidgetGenerated()",
    "kind": "Method",
    "detail": "Function (FOnListEntryGenerated&)",
    "insertText": "OnEntryWidgetGenerated()"
  },
  {
    "label": "OnEntryWidgetReleased()",
    "kind": "Method",
    "detail": "Function (FOnEntryWidgetReleased&)",
    "insertText": "OnEntryWidgetReleased()"
  },
  {
    "label": "ReleaseSlateResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSlateResources(bool bReleaseChildren)"
  },
  {
    "label": "SynchronizeProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynchronizeProperties()"
  },
  {
    "label": "RebuildListWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<STableViewBase>)",
    "insertText": "RebuildListWidget()"
  },
  {
    "label": "HandleListEntryHovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleListEntryHovered(UUserWidget& EntryWidget)"
  },
  {
    "label": "HandleListEntryUnhovered()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleListEntryUnhovered(UUserWidget& EntryWidget)"
  },
  {
    "label": "FinishGeneratingEntry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishGeneratingEntry(UUserWidget& GeneratedEntry)"
  },
  {
    "label": "NativeOnEntryGenerated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnEntryGenerated(UUserWidget* EntryWidget)"
  },
  {
    "label": "GenerateTypedEntry()",
    "kind": "Method",
    "detail": "Function (} ; TArray<TWeakObjectPtr<UUserWidget>> GeneratedEntriesToAnnounce ; template<WidgetEntryT = UUserWidget,ObjectTableRowT = SObjectTableRow<UObject*>> WidgetEntryT&)",
    "insertText": "GenerateTypedEntry(TSubclassOf<WidgetEntryT> WidgetClass, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "WidgetEntryT()",
    "kind": "Method",
    "detail": "Function (WidgetEntryT* ListEntryWidget = EntryWidgetPool . GetOrCreateInstance<)",
    "insertText": "WidgetEntryT(*WidgetClass, [this, &OwnerTable] (UUserWidget* WidgetObject, TSharedRef<SWidget> Content) { return SNew(ObjectTableRowT, OwnerTable, *WidgetObject, this) .bAllowDragging(bAllowDragging) .OnHovered_UObject(this, &UListViewBase::HandleListEntryHovered) .OnUnhovered_UObject(this, &UListViewBase::HandleListEntryUnhovered) [ Content ]; })"
  },
  {
    "label": "FinishGeneratingEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishGeneratingEntry(*ListEntryWidget)"
  },
  {
    "label": "RefreshDesignerItems()",
    "kind": "Method",
    "detail": "Function (} template<PlaceholderItemT> void)",
    "insertText": "RefreshDesignerItems(TArray<PlaceholderItemT>& ListItems, TFunctionRef<PlaceholderItemT()> CreateItemFunc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bNeedsToCallRefreshDesignerItems = false ; bool bRefresh = false ;)",
    "insertText": "if(EntryWidgetClass && NumDesignerPreviewEntries > 0 && EntryWidgetClass->ImplementsInterface(UUserListEntry::StaticClass()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ListItems .)",
    "insertText": "Add(CreateItemFunc())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} bRefresh = true ; } else)",
    "insertText": "if(ListItems.Num() > NumDesignerPreviewEntries)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumExtras = ListItems .)",
    "insertText": "Num()"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (ListItems .)",
    "insertText": "RemoveAtSwap(ListItems.Num() - (NumExtras + 1), NumExtras)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bRefresh = true ; } } else { ListItems .)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bRefresh = true ; })",
    "insertText": "if(bRefresh)"
  },
  {
    "label": "RequestRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRefresh()"
  },
  {
    "label": "HandleRowReleased()",
    "kind": "Method",
    "detail": "Function (} } # endif void)",
    "insertText": "HandleRowReleased(const TSharedRef<ITableRow>& Row)"
  },
  {
    "label": "NativeOnEntryReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NativeOnEntryReleased(UUserWidget* EntryWidget)"
  },
  {
    "label": "HandleAnnounceGeneratedEntries()",
    "kind": "Method",
    "detail": "Function (} ; private : void)",
    "insertText": "HandleAnnounceGeneratedEntries()"
  },
  {
    "label": "IMPLEMENT_TYPED_UMG_LIST()",
    "kind": "Method",
    "detail": "Function (FTimerHandle EntryGenAnnouncementTimerHandle ; FOnListEntryGenerated OnListEntryGeneratedEvent ; FOnEntryWidgetReleased OnEntryWidgetReleasedEvent ; TSharedPtr<STableViewBase> MyTableViewBase ; class FListViewBaseDetails ; } ; # define)",
    "insertText": "IMPLEMENT_TYPED_UMG_LIST(ItemType, ListPropertyName) \\ protected: \\ virtual SListView<ItemType>* GetMyListView()"
  },
  {
    "label": "GetOwningLocalPlayer()",
    "kind": "Method",
    "detail": "Function (\\ const ULocalPlayer* LocalPlayer =)",
    "insertText": "GetOwningLocalPlayer()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (\\ int32 SlateUserIndex = LocalPlayer ?)",
    "insertText": "Get().GetUserIndexForController(LocalPlayer->GetControllerId())"
  }
]