[
  {
    "label": "string_node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "string_node"
  },
  {
    "label": "string_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "string_list"
  },
  {
    "label": "token",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "token"
  },
  {
    "label": "token_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "token_list"
  },
  {
    "label": "YYLTYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "YYLTYPE"
  },
  {
    "label": "token_node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "token_node"
  },
  {
    "label": "argument_node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "argument_node"
  },
  {
    "label": "argument_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "argument_list"
  },
  {
    "label": "glcpp_parser",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "glcpp_parser"
  },
  {
    "label": "expansion_node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "expansion_node"
  },
  {
    "label": "skip_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "skip_type"
  },
  {
    "label": "skip_node",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "skip_node"
  },
  {
    "label": "active_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "active_list"
  },
  {
    "label": "hash_table",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hash_table"
  },
  {
    "label": "gl_extensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "gl_extensions"
  },
  {
    "label": "YYLLOC_DEFAULT()",
    "kind": "Method",
    "detail": "Function (# ifndef GLCPP_H # define GLCPP_H # include \" ralloc . h \" # include \" hash_table . h \" # define yyscan_t void* typedef struct string_node { const char* str ; struct string_node* next ; } string_node_t ; typedef struct string_list { string_node_t* head ; string_node_t* tail ; } string_list_t ; typedef struct token token_t ; typedef struct token_list token_list_t ; typedef union YYSTYPE { intmax_t ival ; char* str ; string_list_t* string_list ; token_t* token ; token_list_t* token_list ; } YYSTYPE ; # define YYSTYPE_IS_TRIVIAL 1 # define YYSTYPE_IS_DECLARED 1 typedef struct YYLTYPE { int first_line ; int first_column ; int last_line ; int last_column ; unsigned source ; } YYLTYPE ; # define YYLTYPE_IS_DECLARED 1 # define YYLTYPE_IS_TRIVIAL 1 # define)",
    "insertText": "YYLLOC_DEFAULT(Current, Rhs, N)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(N)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "else(Current).first_line = (Current).last_line = \\ YYRHSLOC(Rhs, 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0)"
  },
  {
    "label": "glcpp_parser_classify_token()",
    "kind": "Method",
    "detail": "Function (int type ; YYSTYPE value ; YYLTYPE location ; } ; typedef struct token_node { token_t* token ; struct token_node* next ; } token_node_t ; struct token_list { token_node_t* head ; token_node_t* tail ; token_node_t* non_space_tail ; } ; typedef struct argument_node { token_list_t* argument ; struct argument_node* next ; } argument_node_t ; typedef struct argument_list { argument_node_t* head ; argument_node_t* tail ; } argument_list_t ; typedef struct glcpp_parser glcpp_parser_t ; typedef enum { TOKEN_CLASS_IDENTIFIER,TOKEN_CLASS_IDENTIFIER_FINALIZED,TOKEN_CLASS_FUNC_MACRO,TOKEN_CLASS_OBJ_MACRO } token_class_t ; token_class_t)",
    "insertText": "glcpp_parser_classify_token(glcpp_parser_t *parser, const char *identifier, int *parameter_index)"
  },
  {
    "label": "glcpp_parser_create()",
    "kind": "Method",
    "detail": "Function (typedef struct { int is_function ; string_list_t* parameters ; const char* identifier ; token_list_t* replacements ; } macro_t ; typedef struct expansion_node { macro_t* macro ; token_node_t* replacements ; struct expansion_node* next ; } expansion_node_t ; typedef enum skip_type { SKIP_NO_SKIP,SKIP_TO_ELSE,SKIP_TO_ENDIF } skip_type_t ; typedef struct skip_node { skip_type_t type ; YYLTYPE loc ; struct skip_node* next ; } skip_node_t ; typedef struct active_list { const char* identifier ; token_node_t* marker ; struct active_list* next ; } active_list_t ; struct glcpp_parser { yyscan_t scanner ; struct hash_table* defines ; active_list_t* active ; int lexing_if ; int space_tokens ; int newline_as_space ; int in_control_line ; int paren_count ; skip_node_t* skip_stack ; token_list_t* lex_from_list ; token_node_t* lex_from_node ; char* output ; char* info_log ; size_t output_length ; size_t info_log_length ; int error ; } ; struct gl_extensions ; glcpp_parser_t*)",
    "insertText": "glcpp_parser_create()"
  },
  {
    "label": "glcpp_parser_parse()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "glcpp_parser_parse(glcpp_parser_t *parser)"
  },
  {
    "label": "glcpp_parser_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glcpp_parser_destroy(glcpp_parser_t *parser)"
  },
  {
    "label": "preprocess()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "preprocess(void *ralloc_ctx, const char **shader, char **info_log)"
  },
  {
    "label": "glcpp_error()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glcpp_error(YYLTYPE *locp, glcpp_parser_t *parser, const char *fmt, ...)"
  },
  {
    "label": "glcpp_warning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glcpp_warning(YYLTYPE *locp, glcpp_parser_t *parser, const char *fmt, ...)"
  },
  {
    "label": "glcpp_lex_init_extra()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "glcpp_lex_init_extra(glcpp_parser_t *parser, yyscan_t* scanner)"
  },
  {
    "label": "glcpp_lex_set_source_string()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glcpp_lex_set_source_string(glcpp_parser_t *parser, const char *shader)"
  },
  {
    "label": "glcpp_lex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "glcpp_lex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner)"
  },
  {
    "label": "glcpp_lex_destroy()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "glcpp_lex_destroy(yyscan_t scanner)"
  },
  {
    "label": "yyparse()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "yyparse(glcpp_parser_t *parser)"
  }
]