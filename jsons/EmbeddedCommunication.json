[
  {
    "label": "FEmbeddedCallParamsHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEmbeddedCallParamsHelper"
  },
  {
    "label": "FEmbeddedDelegates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmbeddedDelegates"
  },
  {
    "label": "FEmbeddedCommunication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmbeddedCommunication"
  },
  {
    "label": "FEmbeddedKeepAwake",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEmbeddedKeepAwake"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Delegates / MulticastDelegateBase . h \" # include \" HAL / CriticalSection . h \" # include \" Templates / Function . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" typedef TMap<FString,FString> FEmbeddedCommunicationMap ; struct FEmbeddedCallParamsHelper { FString Command ; FEmbeddedCommunicationMap Parameters ; TFunction<)",
    "insertText": "void(const FEmbeddedCommunicationMap&, FString)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ; class FEmbeddedDelegates { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FEmbeddedCommunicationParamsDelegate, const FEmbeddedCallParamsHelper&)"
  },
  {
    "label": "GetNativeToEmbeddedParamsDelegateForSubsystem()",
    "kind": "Method",
    "detail": "Function (FEmbeddedCommunicationParamsDelegate&)",
    "insertText": "GetNativeToEmbeddedParamsDelegateForSubsystem(FName SubsystemName)"
  },
  {
    "label": "GetEmbeddedToNativeParamsDelegateForSubsystem()",
    "kind": "Method",
    "detail": "Function (FEmbeddedCommunicationParamsDelegate&)",
    "insertText": "GetEmbeddedToNativeParamsDelegateForSubsystem(FName SubsystemName)"
  },
  {
    "label": "IsEmbeddedSubsystemAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmbeddedSubsystemAvailable(FName SubsystemName)"
  },
  {
    "label": "SetNamedObject()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate SleepTickDelegate ; void)",
    "insertText": "SetNamedObject(const FString& Name, void* Object)"
  },
  {
    "label": "GetNamedObject()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetNamedObject(const FString& Name)"
  },
  {
    "label": "FEmbeddedDelegates()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FEmbeddedDelegates()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,FEmbeddedCommunicationParamsDelegate> NativeToEmbeddedDelegateMap ; TMap<FName,FEmbeddedCommunicationParamsDelegate> EmbeddedToNativeDelegateMap ; FCriticalSection NamedObjectRegistryLock ; TMap<FString,void*> NamedObjectRegistry ; } ; class FEmbeddedCommunication { public : void)",
    "insertText": "Init()"
  },
  {
    "label": "ForceTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceTick(int ID, float MinTimeSlice=0.1f, float MaxTimeSlice=0.5f)"
  },
  {
    "label": "RunOnGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunOnGameThread(int Priority, TFunction<void()> Lambda)"
  },
  {
    "label": "WakeGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WakeGameThread()"
  },
  {
    "label": "TickGameThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TickGameThread(float DeltaTime)"
  },
  {
    "label": "KeepAwake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepAwake(FName Requester, bool bNeedsRendering)"
  },
  {
    "label": "AllowSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowSleep(FName Requester)"
  },
  {
    "label": "UELogFatal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UELogFatal(const TCHAR* String)"
  },
  {
    "label": "UELogError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UELogError(const TCHAR* String)"
  },
  {
    "label": "UELogWarning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UELogWarning(const TCHAR* String)"
  },
  {
    "label": "UELogDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UELogDisplay(const TCHAR* String)"
  },
  {
    "label": "UELogLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UELogLog(const TCHAR* String)"
  },
  {
    "label": "UELogVerbose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UELogVerbose(const TCHAR* String)"
  },
  {
    "label": "IsAwakeForTicking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAwakeForTicking()"
  },
  {
    "label": "IsAwakeForRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAwakeForRendering()"
  },
  {
    "label": "GetDebugInfo()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugInfo()"
  },
  {
    "label": "FEmbeddedKeepAwake()",
    "kind": "Method",
    "detail": "Function (} ; class FEmbeddedKeepAwake { public :)",
    "insertText": "FEmbeddedKeepAwake(FName InRequester, bool bInNeedsRendering) : Requester(InRequester) , bNeedsRendering(bInNeedsRendering)"
  },
  {
    "label": "KeepAwake()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeepAwake(Requester, bNeedsRendering)"
  },
  {
    "label": "FEmbeddedKeepAwake()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEmbeddedKeepAwake(const FEmbeddedKeepAwake& Other) : Requester(Other.Requester) , bNeedsRendering(Other.bNeedsRendering) , bIsValid(Other.bIsValid)"
  },
  {
    "label": "FEmbeddedKeepAwake()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FEmbeddedKeepAwake(FEmbeddedKeepAwake&& Other)"
  },
  {
    "label": "FEmbeddedKeepAwake()",
    "kind": "Method",
    "detail": "Function (Requester = Other . Requester ; bNeedsRendering = Other . bNeedsRendering ; bIsValid = Other . bIsValid ; Other . Requester = NAME_None ; Other . bNeedsRendering = false ; Other . bIsValid = false ; } ~)",
    "insertText": "FEmbeddedKeepAwake()"
  },
  {
    "label": "AllowSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowSleep(Requester)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FEmbeddedKeepAwake&)",
    "insertText": "operator(const FEmbeddedKeepAwake& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bOldIsValid = bIsValid ; FName OldRequester = Requester ; Requester = Other . Requester ; bNeedsRendering = Other . bNeedsRendering ; bIsValid = Other . bIsValid ;)",
    "insertText": "if(bIsValid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bOldIsValid)"
  },
  {
    "label": "AllowSleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowSleep(OldRequester)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FEmbeddedKeepAwake&)",
    "insertText": "operator(FEmbeddedKeepAwake&& Other)"
  },
  {
    "label": "GetNeedsRendering()",
    "kind": "Method",
    "detail": "Function (} Requester = Other . Requester ; bNeedsRendering = Other . bNeedsRendering ; bIsValid = Other . bIsValid ; Other . Requester = NAME_None ; Other . bNeedsRendering = false ; Other . bIsValid = false ; return* this ; } bool)",
    "insertText": "GetNeedsRendering()"
  }
]