[
  {
    "label": "SemiLagrangian",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SemiLagrangian"
  },
  {
    "label": "Limiter",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Limiter"
  },
  {
    "label": "VolumeAdvection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VolumeAdvection"
  },
  {
    "label": "Advect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Advect"
  },
  {
    "label": "VolumeAdvection()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_VOLUME_ADVECT_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_VOLUME_ADVECT_HAS_BEEN_INCLUDED # include<tbb / parallel_for . h> # include<openvdb / Types . h> # include<openvdb / math / Math . h> # include<openvdb / util / NullInterrupter . h> # include \" Interpolation . h \" # include \" VelocityFields . h \" # include \" Morphology . h \" # include \" Prune . h \" # include \" Statistics . h \" # include<functional> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { namespace Scheme { enum SemiLagrangian { SEMI,MID,RK3,RK4,MAC,BFECC } ; enum Limiter { NO_LIMITER,CLAMP,REVERT } ; } template<VelocityGridT = Vec3fGrid,bool StaggeredVelocity = false,InterrupterType = util::NullInterrupter> class VolumeAdvection { public :)",
    "insertText": "VolumeAdvection(const VelocityGridT& velGrid, InterrupterType* interrupter = nullptr) : mVelGrid(velGrid) , mInterrupter(interrupter) , mIntegrator( Scheme::SEMI ) , mLimiter( Scheme::CLAMP ) , mGrainSize( 128 ) , mSubSteps( 1)"
  },
  {
    "label": "extrema()",
    "kind": "Method",
    "detail": "Function (math::Extrema e =)",
    "insertText": "extrema(velGrid.cbeginValueAll(), true)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (e .)",
    "insertText": "add(velGrid.background().length())"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (mMaxVelocity = e .)",
    "insertText": "max()"
  },
  {
    "label": "VolumeAdvection()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "VolumeAdvection()"
  },
  {
    "label": "spatialOrder()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "spatialOrder()"
  },
  {
    "label": "temporalOrder()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "temporalOrder()"
  },
  {
    "label": "getIntegrator()",
    "kind": "Method",
    "detail": "Function (mIntegrator = integrator ; } Scheme::SemiLagrangian)",
    "insertText": "getIntegrator()"
  },
  {
    "label": "getLimiter()",
    "kind": "Method",
    "detail": "Function (mLimiter = limiter ; } Scheme::Limiter)",
    "insertText": "getLimiter()"
  },
  {
    "label": "getGrainSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getGrainSize()"
  },
  {
    "label": "getSubSteps()",
    "kind": "Method",
    "detail": "Function (mGrainSize = grainsize ; } int)",
    "insertText": "getSubSteps()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (mSubSteps =)",
    "insertText": "Max(1, substeps)"
  },
  {
    "label": "getMaxVelocity()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "getMaxVelocity()"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"Volume grid does not have uniform voxels!\")"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} const double d = mMaxVelocity*)",
    "insertText": "Abs(dt)/inGrid.voxelSize()"
  },
  {
    "label": "advect()",
    "kind": "Method",
    "detail": "Function (} template<VolumeGridT,VolumeSamplerT> VolumeGridT::Ptr)",
    "insertText": "advect(const VolumeGridT& inGrid, double timeStep)"
  },
  {
    "label": "deepCopy()",
    "kind": "Method",
    "detail": "Function (VolumeGridT::Ptr outGrid = inGrid .)",
    "insertText": "deepCopy()"
  },
  {
    "label": "getMaxDistance()",
    "kind": "Method",
    "detail": "Function (const double dt = timeStep / mSubSteps ; const int n = this ->)",
    "insertText": "getMaxDistance(inGrid, dt)"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateActiveValues(outGrid->tree(), n, NN_FACE, EXPAND_TILES)"
  },
  {
    "label": "VolumeSamplerT()",
    "kind": "Method",
    "detail": "Function (this -> template cook<VolumeGridT,)",
    "insertText": "VolumeSamplerT(*outGrid, inGrid, dt)"
  },
  {
    "label": "dilateActiveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dilateActiveValues(tmpGrid->tree(), n, NN_FACE, EXPAND_TILES)"
  },
  {
    "label": "VolumeSamplerT()",
    "kind": "Method",
    "detail": "Function (this -> template cook<VolumeGridT,)",
    "insertText": "VolumeSamplerT(*tmpGrid, *outGrid, dt)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (outGrid .)",
    "insertText": "swap(tmpGrid)"
  },
  {
    "label": "advect()",
    "kind": "Method",
    "detail": "Function (} return outGrid ; } template<VolumeGridT,MaskGridT,VolumeSamplerT> VolumeGridT::Ptr)",
    "insertText": "advect(const VolumeGridT& inGrid, const MaskGridT& mask, double timeStep)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"Volume grid and mask grid are misaligned! Consider \" \"resampling either of the two grids into the index space of the other.\")"
  },
  {
    "label": "topologyIntersection()",
    "kind": "Method",
    "detail": "Function (outGrid ->)",
    "insertText": "topologyIntersection(mask)"
  },
  {
    "label": "pruneInactive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneInactive(outGrid->tree(), mGrainSize>0, mGrainSize)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (outGrid ->)",
    "insertText": "topologyUnion(inGrid)"
  },
  {
    "label": "pruneInactive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneInactive(tmpGrid->tree(), mGrainSize>0, mGrainSize)"
  },
  {
    "label": "VolumeAdvection()",
    "kind": "Method",
    "detail": "Function (} return outGrid ; } private :)",
    "insertText": "VolumeAdvection(const VolumeAdvection&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VolumeAdvection&)",
    "insertText": "operator(const VolumeAdvection&)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "start(const char* str)"
  },
  {
    "label": "stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "stop()"
  },
  {
    "label": "interrupt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "interrupt()"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "self().cancel_group_execution()"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (adv .)",
    "insertText": "cook(outGrid, dt)"
  },
  {
    "label": "adv()",
    "kind": "Method",
    "detail": "Function (break ; } case Scheme::MID : { Advect<VolumeGridT,2,VolumeSamplerT>)",
    "insertText": "adv(inGrid, *this)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (break ; } default :)",
    "insertText": "OPENVDB_THROW(ValueError, \"Spatial difference scheme not supported!\")"
  },
  {
    "label": "pruneInactive()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pruneInactive(outGrid.tree(), mGrainSize>0, mGrainSize)"
  },
  {
    "label": "Advect()",
    "kind": "Method",
    "detail": "Function (} template<VolumeGridT,size_t OrderRK,SamplerT> struct Advect ; const VelocityGridT& mVelGrid ; double mMaxVelocity ; InterrupterType* mInterrupter ; Scheme::SemiLagrangian mIntegrator ; Scheme::Limiter mLimiter ; size_t mGrainSize ; int mSubSteps ; } ; template<VelocityGridT,bool StaggeredVelocity,InterrupterType> template<VolumeGridT,size_t OrderRK,SamplerT> struct VolumeAdvection<VelocityGridT,StaggeredVelocity,InterrupterType>::Advect { using TreeT = VolumeGridT::TreeType ; using AccT = VolumeGridT::ConstAccessor ; using ValueT = TreeT::ValueType ; using LeafManagerT = tree::LeafManager<TreeT> ; using LeafNodeT = LeafManagerT::LeafNodeType ; using LeafRangeT = LeafManagerT::LeafRange ; using VelocityIntegratorT = VelocityIntegrator<VelocityGridT,StaggeredVelocity> ; using RealT = VelocityIntegratorT::ElementType ; using VoxelIterT = TreeT::LeafNodeType::ValueOnIter ;)",
    "insertText": "Advect(const VolumeGridT& inGrid, const VolumeAdvection& parent) : mTask(nullptr) , mInGrid(&inGrid) , mVelocityInt(parent.mVelGrid) , mParent(&parent)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "cook(const LeafRangeT& range)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(range, *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "operator()(const LeafRangeT& range)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mTask)"
  },
  {
    "label": "mTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mTask(const_cast<Advect*>(this), range)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "cook(VolumeGridT& outGrid, double time_step)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (namespace ph = std::placeholders ; mParent ->)",
    "insertText": "start(\"Advecting volume\")"
  },
  {
    "label": "manager()",
    "kind": "Method",
    "detail": "Function (LeafManagerT)",
    "insertText": "manager(outGrid.tree(), mParent->spatialOrder()==2 ? 1 : 0)"
  },
  {
    "label": "leafRange()",
    "kind": "Method",
    "detail": "Function (const LeafRangeT range = manager .)",
    "insertText": "leafRange(mParent->mGrainSize)"
  },
  {
    "label": "RealT()",
    "kind": "Method",
    "detail": "Function (const RealT dt = static_cast<)",
    "insertText": "RealT(-time_step)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::rk, ph::_1, ph::_2, dt, 0, mInGrid)"
  },
  {
    "label": "cook()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "cook(range)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::rk, ph::_1, ph::_2,-dt, 1, &outGrid)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::mac, ph::_1, ph::_2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(mParent->mIntegrator == Scheme::BFECC)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::bfecc, ph::_1, ph::_2)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::rk, ph::_1, ph::_2, dt, 1, &outGrid)"
  },
  {
    "label": "swapLeafBuffer()",
    "kind": "Method",
    "detail": "Function (manager .)",
    "insertText": "swapLeafBuffer(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mParent->spatialOrder()==2) manager.removeAuxBuffers()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mTask =)",
    "insertText": "bind(&Advect::limiter, ph::_1, ph::_2, dt)"
  },
  {
    "label": "mac()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "mac(const LeafRangeT& range)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mParent->mIntegrator == Scheme::MAC)"
  },
  {
    "label": "getAccessor()",
    "kind": "Method",
    "detail": "Function (AccT acc = mInGrid ->)",
    "insertText": "getAccessor()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (ValueT* out0 = leafIter .)",
    "insertText": "buffer(0 ).data()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (const ValueT* out1 = leafIter .)",
    "insertText": "buffer(1 ).data()"
  },
  {
    "label": "probeConstLeaf()",
    "kind": "Method",
    "detail": "Function (const LeafNodeT* leaf = acc .)",
    "insertText": "probeConstLeaf(leafIter->origin())"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (const ValueT* in0 = leaf ->)",
    "insertText": "buffer().data()"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (const Index i = voxelIter .)",
    "insertText": "pos()"
  },
  {
    "label": "RealT()",
    "kind": "Method",
    "detail": "Function (out0 [ i ] + =)",
    "insertText": "RealT(0.5) * ( in0[i] - out1[i])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(VoxelIterT voxelIter = leafIter->beginValueOn(); voxelIter; ++voxelIter)"
  },
  {
    "label": "RealT()",
    "kind": "Method",
    "detail": "Function (out0 [ i ] + =)",
    "insertText": "RealT(0.5) * ( acc.getValue(voxelIter.getCoord()) - out1[i])"
  },
  {
    "label": "bfecc()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "bfecc(const LeafRangeT& range)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mParent->mIntegrator == Scheme::BFECC)"
  },
  {
    "label": "RealT()",
    "kind": "Method",
    "detail": "Function (out0 [ i ] =)",
    "insertText": "RealT(0.5)*( RealT(3)*in0[i] - out1[i])"
  },
  {
    "label": "RealT()",
    "kind": "Method",
    "detail": "Function (out0 [ i ] =)",
    "insertText": "RealT(0.5)*( RealT(3)*acc.getValue(voxelIter.getCoord()) - out1[i])"
  },
  {
    "label": "rk()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "rk(const LeafRangeT& range, RealT dt, size_t n, const VolumeGridT* grid)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (const math::Transform& xform = mInGrid ->)",
    "insertText": "transform()"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (ValueT* phi = leafIter .)",
    "insertText": "buffer(n ).data()"
  },
  {
    "label": "indexToWorld()",
    "kind": "Method",
    "detail": "Function (Vec3d wPos = xform .)",
    "insertText": "indexToWorld(voxelIter.getCoord())"
  },
  {
    "label": "Vec3d()",
    "kind": "Method",
    "detail": "Function (mVelocityInt . template rungeKutta<OrderRK,)",
    "insertText": "Vec3d(dt, wPos)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "sample(acc, xform.worldToIndex(wPos))"
  },
  {
    "label": "limiter()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "limiter(const LeafRangeT& range, RealT dt)"
  },
  {
    "label": "isLimiterOn()",
    "kind": "Method",
    "detail": "Function (const bool doLimiter = mParent ->)",
    "insertText": "isLimiterOn()"
  },
  {
    "label": "background()",
    "kind": "Method",
    "detail": "Function (const ValueT backg = mInGrid ->)",
    "insertText": "background()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(OrderRK == 1)"
  },
  {
    "label": "worldToIndex()",
    "kind": "Method",
    "detail": "Function (Vec3d iPos = xform .)",
    "insertText": "worldToIndex(wPos)"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (Coord ijk =)",
    "insertText": "floor(iPos)"
  },
  {
    "label": "getValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getValues(data, acc, ijk)"
  },
  {
    "label": "extrema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "extrema(data, vMin, vMax)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "Clamp(value, vMin, vMax)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(value < vMin || value > vMax)"
  },
  {
    "label": "Vec3R()",
    "kind": "Method",
    "detail": "Function (iPos - =)",
    "insertText": "Vec3R(ijk[0], ijk[1], ijk[2])"
  },
  {
    "label": "trilinearInterpolation()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "trilinearInterpolation(data, iPos)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(math::isApproxEqual(value, backg, math::Delta<ValueT>::value()))"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (value = backg ; leafIter ->)",
    "insertText": "setValueOff(voxelIter.pos())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } } } std::function<)",
    "insertText": "void(Advect*, const LeafRangeT&)"
  }
]