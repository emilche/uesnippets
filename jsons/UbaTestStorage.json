[
  {
    "label": "TestStorage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaStorageClient . h \" # include \" UbaStorageServer . h \" namespace uba { bool)",
    "insertText": "TestStorage(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_LINUX)",
    "insertText": "if(true)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (# endif StringBuffer<> rootDir ; rootDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"Uba\"))"
  },
  {
    "label": "storageInfo()",
    "kind": "Method",
    "detail": "Function (StorageCreateInfo)",
    "insertText": "storageInfo(rootDir.data, logger.m_writer)"
  },
  {
    "label": "storage()",
    "kind": "Method",
    "detail": "Function (storageInfo . casCapacityBytes = 1 0 2 4 ull* 1 0 2 4* 1 0 2 4 ; StorageImpl)",
    "insertText": "storage(storageInfo)"
  },
  {
    "label": "GetDirectoryOfCurrentModule()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> detoursLib ;)",
    "insertText": "GetDirectoryOfCurrentModule(logger, detoursLib)"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (detoursLib .)",
    "insertText": "EnsureEndsWithSlash().Append(UBA_DETOURS_LIBRARY)"
  },
  {
    "label": "LoadCasTable()",
    "kind": "Method",
    "detail": "Function (storage .)",
    "insertText": "LoadCasTable()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CasKey key ; bool deferCreation = false ; bool fileIsCompressed = false ;)",
    "insertText": "if(!storage.StoreCasFile(key, detoursLib.data, CasKeyZero, deferCreation, fileIsCompressed)) return logger.Error(TC(\"Failed to store file %s\"), detoursLib.data)"
  },
  {
    "label": "detoursLibCopy()",
    "kind": "Method",
    "detail": "Function (StringBuffer<>)",
    "insertText": "detoursLibCopy(detoursLib)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (detoursLibCopy .)",
    "insertText": "Append(TC(\".tmp\"))"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto deleteFile =)",
    "insertText": "MakeGuard([&]() { return DeleteFileW(detoursLibCopy.data); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FileHandle original ;)",
    "insertText": "if(!OpenFileSequentialRead(logger, detoursLib.data, original)) return logger.Error(TC(\"Failed to open %s for read\"), detoursLib.data)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto closeOriginal =)",
    "insertText": "MakeGuard([&]() { return CloseFile(detoursLib.data, original); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FileHandle copy ;)",
    "insertText": "if(!OpenFileSequentialRead(logger, detoursLibCopy.data, copy)) return logger.Error(TC(\"Failed to open %s for read\"), detoursLibCopy.data)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto closeCopy =)",
    "insertText": "MakeGuard([&]() { return CloseFile(detoursLibCopy.data, copy); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u64 originalSize ;)",
    "insertText": "if(!GetFileSizeEx(originalSize, original)) return logger.Error(TC(\"Failed to get size of %s\"), detoursLib.data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u64 copySize ;)",
    "insertText": "if(!GetFileSizeEx(copySize, copy)) return logger.Error(TC(\"Failed to get size of %s\"), detoursLibCopy.data)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (u8 originalBuffer [ 6 4* 1 0 2 4 ] ; u8 copyBuffer [ 6 4* 1 0 2 4 ] ; u64 left = originalSize ;)",
    "insertText": "while(left)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (u64 toRead =)",
    "insertText": "Min(left, (u64)sizeof(originalBuffer))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (left - = toRead ; })",
    "insertText": "if(!closeOriginal.Execute()) return logger.Error(TC(\"Failed to close %s\"), detoursLib.data)"
  },
  {
    "label": "serverTcp()",
    "kind": "Method",
    "detail": "Function (auto& logWriter = logger . m_writer ; NetworkBackendTcp)",
    "insertText": "serverTcp(logWriter, TC(\"ServerTcp\"))"
  },
  {
    "label": "clientTcp()",
    "kind": "Method",
    "detail": "Function (NetworkBackendTcp)",
    "insertText": "clientTcp(logWriter, TC(\"ClientTcp\"))"
  },
  {
    "label": "server()",
    "kind": "Method",
    "detail": "Function (bool ctorSuccess = true ; NetworkServer)",
    "insertText": "server(ctorSuccess, logWriter)"
  },
  {
    "label": "client()",
    "kind": "Method",
    "detail": "Function (NetworkClient)",
    "insertText": "client(ctorSuccess, logWriter)"
  },
  {
    "label": "storageServerInfo()",
    "kind": "Method",
    "detail": "Function (StorageServerCreateInfo)",
    "insertText": "storageServerInfo(server, rootDir.data, logger.m_writer)"
  },
  {
    "label": "storageServer()",
    "kind": "Method",
    "detail": "Function (storageServerInfo . casCapacityBytes = 1 0 2 4 ull* 1 0 2 4* 1 0 2 4 ; StorageServer)",
    "insertText": "storageServer(storageServerInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto g =)",
    "insertText": "MakeGuard([&]() { server.DisconnectClients(); })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (rootDir .)",
    "insertText": "Append(TC(\"Client\"))"
  },
  {
    "label": "storageClientInfo()",
    "kind": "Method",
    "detail": "Function (StorageClientCreateInfo)",
    "insertText": "storageClientInfo(client, rootDir.data)"
  },
  {
    "label": "storageClient()",
    "kind": "Method",
    "detail": "Function (StorageClient)",
    "insertText": "storageClient(storageClientInfo)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (storageClient .)",
    "insertText": "Start()"
  },
  {
    "label": "EnsureEndsWithSlash()",
    "kind": "Method",
    "detail": "Function (rootDir .)",
    "insertText": "EnsureEndsWithSlash()"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(100)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> fileName ; { fileName .)",
    "insertText": "Append(rootDir).Append(TC(\"UbaTestFile\"))"
  },
  {
    "label": "fileHandle()",
    "kind": "Method",
    "detail": "Function (FileAccessor)",
    "insertText": "fileHandle(logger, fileName.data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u8 byte = ' H ' ;)",
    "insertText": "if(!fileHandle.Write(&byte, 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} CasKey key ;)",
    "insertText": "if(!storageClient.StoreCasFile(key, ToStringKeyLower(fileName), fileName.data, FileMappingHandle{}, 0, 0, TC(\"UbaTestFile\"))) return logger.Error(TC(\"Failed to store file %s\"), fileName.data)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (fileName .)",
    "insertText": "Clear().Append(testRootDir).Append(TC(\"Uba\")).Append(PathSeparator).Append(TC(\"UbaTestFile\"))"
  }
]