[
  {
    "label": "UMovieSceneCompiledDataManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCompiledDataManager"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FEntityRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityRange"
  },
  {
    "label": "FInstanceRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceRegistry"
  },
  {
    "label": "FResolveObjectTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolveObjectTask"
  },
  {
    "label": "FBoundObjectInstances",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoundObjectInstances"
  },
  {
    "label": "MOVIESCENE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENE_API"
  },
  {
    "label": "FInstanceRegistry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" Containers / SparseArray . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" EntitySystem / MovieSceneSequenceInstance . h \" # include \" EntitySystem / MovieSceneSequenceInstanceHandle . h \" # include \" EntitySystem / MovieSceneComponentDebug . h \" # include \" EntitySystem / MovieSceneSharedPlaybackState . h \" # include \" MovieSceneSequenceID . h \" class UMovieSceneCompiledDataManager ; class UMovieSceneEntitySystemLinker ; class UMovieSceneCompiledDataManager ; namespace UE { namespace MovieScene { class FEntityManager ; struct FEntityRange ; struct FInstanceRegistry ; struct FResolveObjectTask ; struct FBoundObjectInstances ; struct FInstanceRegistry {)",
    "insertText": "FInstanceRegistry(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "FInstanceRegistry()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FInstanceRegistry()"
  },
  {
    "label": "FInstanceRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstanceRegistry(const FInstanceRegistry&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FInstanceRegistry&)"
  },
  {
    "label": "GetSparseInstances()",
    "kind": "Method",
    "detail": "Function (const TSparseArray<FSequenceInstance>&)",
    "insertText": "GetSparseInstances()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} const FSequenceInstance&)",
    "insertText": "GetInstance(FInstanceHandle InstanceHandle)"
  },
  {
    "label": "GetContext()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneContext&)",
    "insertText": "GetContext(FInstanceHandle InstanceHandle)"
  },
  {
    "label": "AllocateRootInstance()",
    "kind": "Method",
    "detail": "Function (} FRootInstanceHandle)",
    "insertText": "AllocateRootInstance(UMovieSceneSequence& InRootSequence, UObject* InPlaybackContext = nullptr, UMovieSceneCompiledDataManager* InCompiledDataManager = nullptr)"
  },
  {
    "label": "AllocateSubInstance()",
    "kind": "Method",
    "detail": "Function (FInstanceHandle)",
    "insertText": "AllocateSubInstance(FMovieSceneSequenceID SequenceID, FRootInstanceHandle RootInstance, FInstanceHandle ParentInstanceHandle)"
  },
  {
    "label": "DestroyInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyInstance(FInstanceHandle InstanceHandle)"
  },
  {
    "label": "CleanupLinkerEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupLinkerEntities(const TSet<FMovieSceneEntityID>& LinkerEntities)"
  },
  {
    "label": "InvalidateObjectBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateObjectBinding(const FGuid& ObjectBindingID, FInstanceHandle InstanceHandle)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InvalidatedObjectBindings .)",
    "insertText": "Add(MakeTuple(ObjectBindingID, InstanceHandle))"
  },
  {
    "label": "IsBindingInvalidated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBindingInvalidated(const FGuid& ObjectBindingID, FInstanceHandle InstanceHandle)"
  },
  {
    "label": "HasInvalidatedBindings()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasInvalidatedBindings()"
  },
  {
    "label": "PostInstantation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostInstantation()"
  },
  {
    "label": "TagGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TagGarbage()"
  },
  {
    "label": "FScopedVolatilityManagerSuppression()",
    "kind": "Method",
    "detail": "Function (private : UMovieSceneEntitySystemLinker* Linker ; TSparseArray<FSequenceInstance> Instances ; uint16 InstanceSerialNumber ; TSet<TTuple<FGuid,FInstanceHandle>> InvalidatedObjectBindings ; } ; struct FScopedVolatilityManagerSuppression {)",
    "insertText": "FScopedVolatilityManagerSuppression(TSharedPtr<FSharedPlaybackState> PlaybackState)"
  },
  {
    "label": "FScopedVolatilityManagerSuppression()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedVolatilityManagerSuppression()"
  }
]