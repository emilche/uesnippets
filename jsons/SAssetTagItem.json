[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "SAssetTagItemTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAssetTagItemTableRow"
  },
  {
    "label": "ASSETTAGSEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASSETTAGSEDITOR_API"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetTagItemTypes . h \" # include \" CoreMinimal . h \" # include \" Framework / SlateDelegates . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Layout / Margin . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Misc / Attribute . h \" # include \" Styling / AppStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" Widgets / Layout / SBorder . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Text / SInlineEditableTextBlock . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" class SWidget ; struct FSlateBrush ; template<ItemType> class SAssetTagItemTableRow : public STableRow<ItemType> { public : void)",
    "insertText": "Construct(const typename STableRow<ItemType>::FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "ConstructInternal()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ConstructInternal(InArgs, InOwnerTableView)"
  },
  {
    "label": "ConstructChildren()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "ConstructChildren(InOwnerTableView->TableViewMode, ApplySelectionBorderOuterPadding(InArgs._Padding), WrapContentInSelectionBorder(InArgs._Content.Widget))"
  },
  {
    "label": "SetIsDropTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsDropTarget(const TAttribute<bool>& InIsDropTarget)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (IsDropTarget = InIsDropTarget ; } void)",
    "insertText": "SetContent(TSharedRef<SWidget> InContent)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (STableRow<ItemType)",
    "insertText": "SetContent(WrapContentInSelectionBorder(InContent))"
  },
  {
    "label": "GetBorder()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetBorder()"
  },
  {
    "label": "WrapContentInSelectionBorder()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<SWidget>)",
    "insertText": "WrapContentInSelectionBorder(const TSharedRef<SWidget> InContent)"
  },
  {
    "label": "ApplySelectionBorderOuterPadding()",
    "kind": "Method",
    "detail": "Function (} TAttribute<FMargin>)",
    "insertText": "ApplySelectionBorderOuterPadding(const TAttribute<FMargin>& InPadding)"
  },
  {
    "label": "FMargin()",
    "kind": "Method",
    "detail": "Function (const FMargin ExtraPadding =)",
    "insertText": "FMargin(0.0f, 0.0f, 0.0f, 1.0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InPadding.IsSet())"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} return ExtraPadding ; } TAttribute<bool> IsDropTarget ; } ; class SAssetTagItem : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAssetTagItem) : _ViewMode(EAssetTagItemViewMode::Standard) , _BaseColor(FLinearColor::White)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(EAssetTagItemViewMode, ViewMode) SLATE_ATTRIBUTE(FLinearColor, BaseColor) SLATE_ATTRIBUTE(FText, DisplayName) SLATE_ATTRIBUTE(FText, CountText) SLATE_ATTRIBUTE(FText, WarningText) SLATE_ATTRIBUTE(FText, HighlightText) SLATE_ATTRIBUTE(bool, IsNameReadOnly) SLATE_ATTRIBUTE(bool, IsCheckBoxEnabled) SLATE_ATTRIBUTE(ECheckBoxState, IsChecked) SLATE_EVENT(FOnCheckStateChanged, OnCheckStateChanged) SLATE_EVENT(FOnBeginTextEdit, OnBeginNameEdit) SLATE_EVENT(FOnTextCommitted, OnNameCommitted) SLATE_EVENT(FOnVerifyTextChanged, OnVerifyName) SLATE_EVENT(FIsSelected, IsSelected) SLATE_EVENT(FOnBuildAssetTagItemToolTipInfo, OnBuildToolTipInfo) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "RequestRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRename()"
  },
  {
    "label": "EnterEditingMode()",
    "kind": "Method",
    "detail": "Function (InlineRenameWidget ->)",
    "insertText": "EnterEditingMode()"
  },
  {
    "label": "GetAssetTagBrightColor()",
    "kind": "Method",
    "detail": "Function (} } private : FLinearColor)",
    "insertText": "GetAssetTagBrightColor()"
  },
  {
    "label": "GetAssetTagDullColor()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetAssetTagDullColor()"
  },
  {
    "label": "GetAssetTagDisabledColor()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetAssetTagDisabledColor()"
  },
  {
    "label": "GetCheckBoxTooltipText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetCheckBoxTooltipText()"
  },
  {
    "label": "GetCountBackgroundColor()",
    "kind": "Method",
    "detail": "Function (} FSlateColor)",
    "insertText": "GetCountBackgroundColor()"
  },
  {
    "label": "GetWarningIconVisibility()",
    "kind": "Method",
    "detail": "Function (} EVisibility)",
    "insertText": "GetWarningIconVisibility()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FText WarningTextValue = WarningText .)",
    "insertText": "Get(FText::GetEmpty())"
  }
]