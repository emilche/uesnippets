[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "LazyThreadPoolTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LazyThreadPoolTaskRunner"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_LAZY_THREAD_POOL_TASK_RUNNER_H_ # define BASE_TASK_LAZY_THREAD_POOL_TASK_RUNNER_H_ # include<atomic> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / task / single_thread_task_runner_thread_mode . h \" # include \" base / task / task_traits . h \" # include \" base / thread_annotations . h \" # include \" build / build_config . h \" namespace base { namespace internal { template<TaskRunnerType,bool com_sta> class BASE_EXPORT LazyThreadPoolTaskRunner ; } using LazyThreadPoolSequencedTaskRunner = internal::LazyThreadPoolTaskRunner<SequencedTaskRunner,false> ; using LazyThreadPoolSingleThreadTaskRunner = internal::LazyThreadPoolTaskRunner<SingleThreadTaskRunner,false> ; # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL2()",
    "kind": "Method",
    "detail": "Function (# endif # define)",
    "insertText": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL2(a, b) a##b #define LAZY_TASK_RUNNER_CONCATENATE_INTERNAL(a, b) \\ LAZY_TASK_RUNNER_CONCATENATE_INTERNAL2(a, b) #define LAZY_THREAD_POOL_SEQUENCED_TASK_RUNNER_INITIALIZER(traits) \\ base::LazyThreadPoolSequencedTaskRunner::CreateInternal(traits)"
  },
  {
    "label": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL()",
    "kind": "Method",
    "detail": "Function (\\ [ [ maybe_unused ] ] base::TaskTraits \\)",
    "insertText": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL(kVerifyTraitsAreConstexpr, \\ __LINE__) = traits #define LAZY_THREAD_POOL_SINGLE_THREAD_TASK_RUNNER_INITIALIZER(traits, \\ thread_mode) \\ base::LazyThreadPoolSingleThreadTaskRunner::CreateInternal(traits, \\ thread_mode)"
  },
  {
    "label": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL()",
    "kind": "Method",
    "detail": "Function (\\ [ [ maybe_unused ] ] base::TaskTraits \\)",
    "insertText": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL(kVerifyTraitsAreConstexpr, \\ __LINE__)"
  },
  {
    "label": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL()",
    "kind": "Method",
    "detail": "Function (\\ [ [ maybe_unused ] ] base::SingleThreadTaskRunnerThreadMode \\)",
    "insertText": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL(kVerifyThreadModeIsConstexpr, \\ __LINE__) = thread_mode #define LAZY_COM_STA_TASK_RUNNER_INITIALIZER(traits, thread_mode) \\ base::LazyThreadPoolCOMSTATaskRunner::CreateInternal(traits, thread_mode)"
  },
  {
    "label": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL()",
    "kind": "Method",
    "detail": "Function (\\ [ [ maybe_unused ] ] base::SingleThreadTaskRunnerThreadMode \\)",
    "insertText": "LAZY_TASK_RUNNER_CONCATENATE_INTERNAL(kVerifyThreadModeIsConstexpr, \\ __LINE__)"
  },
  {
    "label": "CreateInternal()",
    "kind": "Method",
    "detail": "Function (template<TaskRunnerType,bool com_sta> class BASE_EXPORT LazyThreadPoolTaskRunner { public : LazyThreadPoolTaskRunner)",
    "insertText": "CreateInternal(const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode = SingleThreadTaskRunnerThreadMode::SHARED)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} scoped_refptr<TaskRunnerType>)",
    "insertText": "Get()"
  },
  {
    "label": "LazyThreadPoolTaskRunner()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "LazyThreadPoolTaskRunner(const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode = SingleThreadTaskRunnerThreadMode::SHARED) : traits_(traits), thread_mode_(thread_mode)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<TaskRunnerType>)",
    "insertText": "Create()"
  },
  {
    "label": "CreateRaw()",
    "kind": "Method",
    "detail": "Function (TaskRunnerType*)",
    "insertText": "CreateRaw(void* void_self)"
  },
  {
    "label": "ScopedLazyTaskRunnerListForTesting()",
    "kind": "Method",
    "detail": "Function (const TaskTraits traits_ ; const SingleThreadTaskRunnerThreadMode thread_mode_ ; std::atomic<uintptr_t> state_ = 0 ; } ; class BASE_EXPORT ScopedLazyTaskRunnerListForTesting { public :)",
    "insertText": "ScopedLazyTaskRunnerListForTesting()"
  },
  {
    "label": "ScopedLazyTaskRunnerListForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedLazyTaskRunnerListForTesting(const ScopedLazyTaskRunnerListForTesting&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedLazyTaskRunnerListForTesting&)",
    "insertText": "operator(const ScopedLazyTaskRunnerListForTesting&)"
  },
  {
    "label": "AddCallback()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddCallback(OnceClosure callback)"
  }
]