[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_TAGGING_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_TAGGING_H_ # include<cstddef> # include<cstdint> # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / component_export . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" build / build_config . h \" namespace partition_alloc { enum class TagViolationReportingMode { kUndefined,kDisabled,kSynchronous,kAsynchronous,} ;)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void ChangeMemoryTaggingModeForCurrentThread(TagViolationReportingMode)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (namespace internal { int kMemTagGranuleSize = 1 6 u ; # if)",
    "insertText": "defined(PA_HAS_MEMORY_TAGGING)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# else uint64_t kPtrTagMask = 0 ; # endif uint64_t kPtrUntagMask = ~ kPtrTagMask ; # if)",
    "insertText": "BUILDFLAG(IS_ANDROID) PA_COMPONENT_EXPORT(PARTITION_ALLOC) void ChangeMemoryTaggingModeForAllThreadsPerProcess(TagViolationReportingMode)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) TagViolationReportingMode GetMemoryTaggingModeForCurrentThread()"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC) void InitializeMTESupportIfNeeded()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using RemaskPtrInternalFn =)",
    "insertText": "void(void* ptr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using TagMemoryRangeIncrementInternalFn =)",
    "insertText": "void(void* ptr, size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using TagMemoryRangeRandomlyInternalFn =)",
    "insertText": "void(void* ptr, size_t size, uint64_t mask)"
  },
  {
    "label": "PA_COMPONENT_EXPORT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_COMPONENT_EXPORT(PARTITION_ALLOC)"
  },
  {
    "label": "TagMemoryRangeIncrement()",
    "kind": "Method",
    "detail": "Function (template<T> PA_ALWAYS_INLINE T*)",
    "insertText": "TagMemoryRangeIncrement(T* ptr, size_t size)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_MEMORY_TAGGING) return reinterpret_cast<T*>(global_tag_memory_range_increment_fn(ptr, size))"
  },
  {
    "label": "TagMemoryRangeIncrement()",
    "kind": "Method",
    "detail": "Function (# else return ptr ; # endif } PA_ALWAYS_INLINE void*)",
    "insertText": "TagMemoryRangeIncrement(uintptr_t ptr, size_t size)"
  },
  {
    "label": "TagMemoryRangeRandomly()",
    "kind": "Method",
    "detail": "Function (} template<T> PA_ALWAYS_INLINE T*)",
    "insertText": "TagMemoryRangeRandomly(T* ptr, size_t size, uint64_t mask = 0u)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_MEMORY_TAGGING) return reinterpret_cast<T*>( global_tag_memory_range_randomly_fn(ptr, size, mask))"
  },
  {
    "label": "TagMemoryRangeRandomly()",
    "kind": "Method",
    "detail": "Function (# else return ptr ; # endif } PA_ALWAYS_INLINE void*)",
    "insertText": "TagMemoryRangeRandomly(uintptr_t ptr, size_t size, uint64_t mask = 0u)"
  },
  {
    "label": "TagPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> PA_ALWAYS_INLINE T*)",
    "insertText": "TagPtr(T* ptr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(PA_HAS_MEMORY_TAGGING) return reinterpret_cast<T*>(global_remask_void_ptr_fn(ptr))"
  },
  {
    "label": "TagAddr()",
    "kind": "Method",
    "detail": "Function (# else return ptr ; # endif } PA_ALWAYS_INLINE void*)",
    "insertText": "TagAddr(uintptr_t address)"
  },
  {
    "label": "UntagAddr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "UntagAddr(uintptr_t address)"
  },
  {
    "label": "UntagPtr()",
    "kind": "Method",
    "detail": "Function (# else return address ; # endif } } template<T> PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "UntagPtr(T* ptr)"
  }
]