[
  {
    "label": "FColorTheme",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorTheme"
  },
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "SColorThemesViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorThemesViewer"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "SThemeColorBlocksBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SThemeColorBlocksBar"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FColorChannels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorChannels"
  },
  {
    "label": "SColorPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SColorPicker"
  },
  {
    "label": "FColorTheme",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FColorTheme"
  },
  {
    "label": "FColorPickerArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorPickerArgs"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "BackupColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BackupColors()"
  },
  {
    "label": "ApplyNewTargetColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyNewTargetColor(bool bForceUpdate = false)"
  },
  {
    "label": "GenerateDefaultColorPickerContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateDefaultColorPickerContent(bool bAdvancedSectionExpanded)"
  },
  {
    "label": "GenerateInlineColorPickerContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateInlineColorPickerContent()"
  },
  {
    "label": "DiscardColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardColor()"
  },
  {
    "label": "SetNewTargetColorRGB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNewTargetColorRGB(const FLinearColor& NewValue, bool bForceUpdate = false)"
  },
  {
    "label": "SetNewTargetColorHSV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetNewTargetColorHSV(const FLinearColor& NewValue, bool bForceUpdate = false)"
  },
  {
    "label": "UpdateColorPick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateColorPick()"
  },
  {
    "label": "UpdateColorPickMouseUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateColorPickMouseUp()"
  },
  {
    "label": "BeginAnimation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAnimation(FLinearColor Start, FLinearColor End)"
  },
  {
    "label": "HideSmallTrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideSmallTrash()"
  },
  {
    "label": "ShowSmallTrash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowSmallTrash()"
  },
  {
    "label": "CycleMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleMode()"
  },
  {
    "label": "AnimatePostConstruct()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "AnimatePostConstruct(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "HandleAdvancedAreaExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAdvancedAreaExpansionChanged(bool Expanded)"
  },
  {
    "label": "HandleCancelButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleCancelButtonClicked()"
  },
  {
    "label": "HandleColorAreaMouseDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleColorAreaMouseDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "HandleColorPickerModeButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleColorPickerModeButtonClicked()"
  },
  {
    "label": "HandleColorSpectrumValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleColorSpectrumValueChanged(FLinearColor NewValue)"
  },
  {
    "label": "HandleColorSpinBoxValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleColorSpinBoxValueChanged(float NewValue, EColorPickerChannels Channel)"
  },
  {
    "label": "HandleEyeDropperButtonComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEyeDropperButtonComplete(bool bCancelled)"
  },
  {
    "label": "HandleHexSRGBInputTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHexSRGBInputTextCommitted(const FText& Text, ETextCommit::Type CommitType)"
  },
  {
    "label": "HandleHexLinearInputTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHexLinearInputTextCommitted(const FText& Text, ETextCommit::Type CommitType)"
  },
  {
    "label": "HandleHSVColorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHSVColorChanged(FLinearColor NewValue)"
  },
  {
    "label": "HandleInteractiveChangeBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInteractiveChangeBegin()"
  },
  {
    "label": "HandleInteractiveChangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInteractiveChangeEnd()"
  },
  {
    "label": "HandleInteractiveChangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInteractiveChangeEnd(float NewValue)"
  },
  {
    "label": "HandleNewColorBlockMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleNewColorBlockMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bCheckAlpha)"
  },
  {
    "label": "HandleOkButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleOkButtonClicked()"
  },
  {
    "label": "HandleOldColorBlockMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleOldColorBlockMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, bool bCheckAlpha)"
  },
  {
    "label": "HandleParentWindowClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleParentWindowClosed(const TSharedRef<SWindow>& Window)"
  },
  {
    "label": "HandleRGBColorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRGBColorChanged(FLinearColor NewValue)"
  },
  {
    "label": "HandleSRGBCheckBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSRGBCheckBoxCheckStateChanged(ECheckBoxState InIsChecked)"
  },
  {
    "label": "HandleThemeBarColorSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleThemeBarColorSelected(FLinearColor NewValue)"
  },
  {
    "label": "HandleThemesViewerThemeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleThemesViewerThemeChanged()"
  },
  {
    "label": "GetColorPicker()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SColorPicker>)",
    "insertText": "GetColorPicker()"
  },
  {
    "label": "OpenColorPicker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenColorPicker(const FColorPickerArgs& Args)"
  },
  {
    "label": "DestroyColorPicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyColorPicker()"
  }
]