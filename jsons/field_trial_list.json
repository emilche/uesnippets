[
  {
    "label": "FieldTrialListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialListBase"
  },
  {
    "label": "FieldTrialListWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialListWrapper"
  },
  {
    "label": "FieldTrialList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialList"
  },
  {
    "label": "LambdaTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LambdaTypeTraits"
  },
  {
    "label": "TypedFieldTrialListWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypedFieldTrialListWrapper"
  },
  {
    "label": "FieldTrialStructListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialStructListBase"
  },
  {
    "label": "FieldTrialStructList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldTrialStructList"
  },
  {
    "label": "FieldTrialListBase()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_EXPERIMENTS_FIELD_TRIAL_LIST_H_ # define RTC_BASE_EXPERIMENTS_FIELD_TRIAL_LIST_H_ # include<initializer_list> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" rtc_base / experiments / field_trial_parser . h \" # include \" rtc_base / string_encode . h \" namespace webrtc { class FieldTrialListBase : public FieldTrialParameterInterface { protected : class FieldTrialListWrapper ;)",
    "insertText": "FieldTrialListBase(absl::string_view key)"
  },
  {
    "label": "Failed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Failed()"
  },
  {
    "label": "Used()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Used()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Size()"
  },
  {
    "label": "FieldTrialList()",
    "kind": "Method",
    "detail": "Function (bool failed_ ; bool parse_got_called_ ; } ; template<T> class FieldTrialList : public FieldTrialListBase { public :)",
    "insertText": "FieldTrialList(absl::string_view key) : FieldTrialList(key, {})"
  },
  {
    "label": "FieldTrialList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FieldTrialList(absl::string_view key, std::initializer_list<T> default_values) : FieldTrialListBase(key), values_(default_values)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} std::vector<T>)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::vector<T>::const_reference)",
    "insertText": "operator(size_t index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (parse_got_called_ = true ;)",
    "insertText": "if(!str_value)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (values_ .)",
    "insertText": "clear()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (absl::optional<T> value = ParseTypedParameter<)",
    "insertText": "T(token)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (new_values_ .)",
    "insertText": "push_back(*value)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} else { failed_ = true ; return false ; } } values_ .)",
    "insertText": "swap(new_values_)"
  },
  {
    "label": "FieldTrialListWrapper()",
    "kind": "Method",
    "detail": "Function (} private : std::vector<T> values_ ; } ; class FieldTrialListWrapper { public : ~)",
    "insertText": "FieldTrialListWrapper()"
  },
  {
    "label": "WriteElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteElement(void* struct_to_write, int index)"
  },
  {
    "label": "GetList()",
    "kind": "Method",
    "detail": "Function (FieldTrialListBase*)",
    "insertText": "GetList()"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Length()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; namespace field_trial_list_impl { template<T> struct LambdaTypeTraits : public LambdaTypeTraits<)",
    "insertText": "decltype(&T::operator())"
  },
  {
    "label": "RetType()",
    "kind": "Method",
    "detail": "Function (} ; template<ClassType,RetType,SourceType> struct LambdaTypeTraits<)",
    "insertText": "RetType(ClassType::*)(SourceType*)"
  },
  {
    "label": "TypedFieldTrialListWrapper()",
    "kind": "Method",
    "detail": "Function (using ret = RetType ; using src = SourceType ; } ; template<T> struct TypedFieldTrialListWrapper : FieldTrialListWrapper { public :)",
    "insertText": "TypedFieldTrialListWrapper(absl::string_view key, std::function<void(void*, T)> sink) : list_(key), sink_(sink)"
  },
  {
    "label": "sink_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sink_(struct_to_write, list_[index])"
  },
  {
    "label": "FieldTrialStructMember()",
    "kind": "Method",
    "detail": "Function (} ; } template<F,Traits = field_trial_list_impl::LambdaTypeTraits<F>> FieldTrialListWrapper*)",
    "insertText": "FieldTrialStructMember(absl::string_view key, F accessor)"
  },
  {
    "label": "FieldTrialStructListBase()",
    "kind": "Method",
    "detail": "Function (} class FieldTrialStructListBase : public FieldTrialParameterInterface { protected :)",
    "insertText": "FieldTrialStructListBase(std::initializer_list<FieldTrialListWrapper*> sub_lists) : FieldTrialParameterInterface(\"\"), sub_lists_()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (sub_parameters_ .)",
    "insertText": "push_back((*it)->GetList())"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (sub_lists_ .)",
    "insertText": "push_back(std::unique_ptr<FieldTrialListWrapper>(*it))"
  },
  {
    "label": "ValidateAndGetLength()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "ValidateAndGetLength()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(absl::optional<std::string> str_value)"
  },
  {
    "label": "FieldTrialStructList()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<FieldTrialListWrapper>> sub_lists_ ; } ; template<S> class FieldTrialStructList : public FieldTrialStructListBase { public :)",
    "insertText": "FieldTrialStructList(std::initializer_list<FieldTrialListWrapper*> l, std::initializer_list<S> default_list) : FieldTrialStructListBase(l), values_(default_list)"
  },
  {
    "label": "new_values()",
    "kind": "Method",
    "detail": "Function (std::vector<S>)",
    "insertText": "new_values(length, S())"
  },
  {
    "label": "WriteElement()",
    "kind": "Method",
    "detail": "Function (li ->)",
    "insertText": "WriteElement(&new_values[i], i)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } } values_ .)",
    "insertText": "swap(new_values)"
  }
]