[
  {
    "label": "IvcRowType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IvcRowType"
  },
  {
    "label": "IvcColType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IvcColType"
  },
  {
    "label": "IvcType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IvcType"
  },
  {
    "label": "EIGEN_INDEXED_VIEW_METHOD_TYPE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EIGEN_INDEXED_VIEW_METHOD_TYPE"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(EIGEN_PARSED_BY_DOXYGEN)"
  },
  {
    "label": "ivcRow()",
    "kind": "Method",
    "detail": "Function (} ; template<Indices> struct IvcColType : public internal::IndexedViewCompatibleType<Indices,ColsAtCompileTime> { } ; template<Indices> struct IvcType : public internal::IndexedViewCompatibleType<Indices,SizeAtCompileTime> { } ; typedef internal::IndexedViewCompatibleType<Index,1>::type IvcIndex ; template<Indices> IvcRowType<Indices>::type)",
    "insertText": "ivcRow(const Indices& indices)"
  },
  {
    "label": "ivcCol()",
    "kind": "Method",
    "detail": "Function (} template<Indices> IvcColType<Indices>::type)",
    "insertText": "ivcCol(const Indices& indices)"
  },
  {
    "label": "ivcSize()",
    "kind": "Method",
    "detail": "Function (} template<Indices> IvcColType<Indices>::type)",
    "insertText": "ivcSize(const Indices& indices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} public : # endif template<RowIndices,ColIndices> struct EIGEN_INDEXED_VIEW_METHOD_TYPE { typedef IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,IvcRowType<RowIndices>::type,IvcColType<ColIndices>::type> type ; } ; template<RowIndices,ColIndices> internal::enable_if<internal::valid_indexed_view_overload<RowIndices,ColIndices>::value&& internal::traits<EIGEN_INDEXED_VIEW_METHOD_TYPE<RowIndices,ColIndices>::type>::ReturnAsIndexedView,EIGEN_INDEXED_VIEW_METHOD_TYPE<RowIndices,ColIndices>::type>::type)",
    "insertText": "operator()(const RowIndices& rowIndices, const ColIndices& colIndices)"
  },
  {
    "label": "ivcRow()",
    "kind": "Method",
    "detail": "Function (typedef internal::traits<EIGEN_INDEXED_VIEW_METHOD_TYPE<RowIndices,ColIndices>::type>::BlockType BlockType ; IvcRowType<RowIndices>::type actualRowIndices =)",
    "insertText": "ivcRow(rowIndices)"
  },
  {
    "label": "ivcCol()",
    "kind": "Method",
    "detail": "Function (IvcColType<ColIndices>::type actualColIndices =)",
    "insertText": "ivcCol(colIndices)"
  },
  {
    "label": "RowIndicesT()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_STATIC_ARRAY_TEMPLATE template<RowIndicesT,std::size_t RowIndicesN,ColIndices> IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,const)",
    "insertText": "RowIndicesT(&)[RowIndicesN],typename IvcColType<ColIndices>::type> operator()(const RowIndicesT (&rowIndices)[RowIndicesN], const ColIndices& colIndices)"
  },
  {
    "label": "ColIndicesT()",
    "kind": "Method",
    "detail": "Function (} template<RowIndices,ColIndicesT,std::size_t ColIndicesN> IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,IvcRowType<RowIndices>::type,const)",
    "insertText": "ColIndicesT(&)[ColIndicesN]> operator()(const RowIndices& rowIndices, const ColIndicesT (&colIndices)[ColIndicesN])"
  },
  {
    "label": "RowIndicesT()",
    "kind": "Method",
    "detail": "Function (} template<RowIndicesT,std::size_t RowIndicesN,ColIndicesT,std::size_t ColIndicesN> IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,const)",
    "insertText": "RowIndicesT(&)[RowIndicesN], const ColIndicesT (&)[ColIndicesN]> operator()(const RowIndicesT (&rowIndices)[RowIndicesN], const ColIndicesT (&colIndices)[ColIndicesN])"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (} # endif template<Indices> internal::enable_if<)",
    "insertText": "IsRowMajor(!(internal::get_compile_time_incr<typename IvcType<Indices>::type>::value==1 || internal::is_valid_index_type<Indices>::value)), IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,IvcIndex,typename IvcType<Indices>::type> >::type operator()(const Indices& indices)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived) return IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,IvcIndex,typename IvcType<Indices>::type> (derived(), IvcIndex(0), ivcCol(indices))"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<Indices>)",
    "insertText": "enable_if(!IsRowMajor) && (!(internal::get_compile_time_incr<typename IvcType<Indices>::type>::value==1 || internal::is_valid_index_type<Indices>::value)), IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,typename IvcType<Indices>::type,IvcIndex> >::type operator()(const Indices& indices)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived) return IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,typename IvcType<Indices>::type,IvcIndex> (derived(), ivcRow(indices), IvcIndex(0))"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<Indices>)",
    "insertText": "enable_if(internal::get_compile_time_incr<typename IvcType<Indices>::type>::value==1) && (!internal::is_valid_index_type<Indices>::value) && (!symbolic::is_symbolic<Indices>::value), VectorBlock<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,internal::array_size<Indices>::value> >::type operator()(const Indices& indices)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived) typename IvcType<Indices>::type actualIndices = ivcSize(indices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<IndexType> internal::enable_if<symbolic::is_symbolic<IndexType>::value,CoeffReturnType>::type)",
    "insertText": "operator()(const IndexType& id)"
  },
  {
    "label": "IndicesT()",
    "kind": "Method",
    "detail": "Function (} # if EIGEN_HAS_STATIC_ARRAY_TEMPLATE template<IndicesT,std::size_t IndicesN> internal::enable_if<IsRowMajor,IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,IvcIndex,const)",
    "insertText": "IndicesT(&)[IndicesN]> >::type operator()(const IndicesT (&indices)[IndicesN])"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived) return IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,IvcIndex,const IndicesT (&)[IndicesN]> (derived(), IvcIndex(0), indices)"
  },
  {
    "label": "IndicesT()",
    "kind": "Method",
    "detail": "Function (} template<IndicesT,std::size_t IndicesN> internal::enable_if<! IsRowMajor,IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,const)",
    "insertText": "IndicesT(&)[IndicesN],IvcIndex> >::type operator()(const IndicesT (&indices)[IndicesN])"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived) return IndexedView<EIGEN_INDEXED_VIEW_METHOD_CONST Derived,const IndicesT (&)[IndicesN],IvcIndex> (derived(), indices, IvcIndex(0))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<Indices> IndexedView_or_VectorBlock)",
    "insertText": "operator()(const Indices& indices)"
  }
]