[
  {
    "label": "SSpinBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSpinBox"
  },
  {
    "label": "ECommitMethod",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECommitMethod"
  },
  {
    "label": "FPendingCommitValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCommitValue"
  },
  {
    "label": "SpinBoxComputeExponentSliderFraction()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Framework / Application / SlateApplication . h \" # include \" Framework / MultiBox / MultiBoxExtender . h \" # include \" Input / CursorReply . h \" # include \" Input / Events . h \" # include \" Input / Reply . h \" # include \" InputCoreTypes . h \" # include \" Layout / Margin . h \" # include \" Layout / Visibility . h \" # include \" Misc / Attribute . h \" # include \" Rendering / DrawElements . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / IsIntegral . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Images / SImage . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / Input / SEditableText . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Text / STextBlock . h \" # include<limits> namespace SpinBoxPrivate { bool bUseSpinBoxMouseMoveOptimization ; } float)",
    "insertText": "SpinBoxComputeExponentSliderFraction(float FractionFilled, float StartFractionFilled, float SliderExponent)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (template<NumericType> class SSpinBox : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnValueChanged, NumericType)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnValueCommitted, NumericType, ETextCommit::Type)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FourParams(FOnDynamicSliderMinMaxValueChanged, NumericType, TWeakPtr<SWidget>, bool, bool)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SSpinBox<NumericType>) : _Style(&FCoreStyle::Get().GetWidgetStyle<FSpinBoxStyle>(\"SpinBox\")) , _Value(0) , _MinFractionalDigits(DefaultMinFractionalDigits) , _MaxFractionalDigits(DefaultMaxFractionalDigits) , _AlwaysUsesDeltaSnap(false) , _EnableSlider(true) , _Delta(0) , _ShiftMultiplier(10.f) , _CtrlMultiplier(0.1f) , _SupportDynamicSliderMaxValue(false) , _SupportDynamicSliderMinValue(false) , _SliderExponent(1.f) , _EnableWheel(true) , _BroadcastValueChangesPerKey(false) , _Font(FCoreStyle::Get().GetFontStyle(TEXT(\"NormalFont\"))) , _ContentPadding(FMargin(2.0f, 1.0f)) , _OnValueChanged() , _OnValueCommitted() , _ClearKeyboardFocusOnCommit(false) , _SelectAllTextOnCommit(true) , _MinDesiredWidth(0.0f) , _Justification(ETextJustify::Left) , _KeyboardType(Keyboard_Default) , _PreventThrottling(true)"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FSpinBoxStyle, Style) SLATE_ATTRIBUTE(NumericType, Value) SLATE_ATTRIBUTE(TOptional< NumericType >, MinValue) SLATE_ATTRIBUTE(TOptional< NumericType >, MaxValue) SLATE_ATTRIBUTE(TOptional< NumericType >, MinSliderValue) SLATE_ATTRIBUTE(TOptional< NumericType >, MaxSliderValue) SLATE_ATTRIBUTE(TOptional< int32 >, MinFractionalDigits) SLATE_ATTRIBUTE(TOptional< int32 >, MaxFractionalDigits) SLATE_ATTRIBUTE(bool, AlwaysUsesDeltaSnap) SLATE_ATTRIBUTE(bool, EnableSlider) SLATE_ATTRIBUTE(NumericType, Delta) SLATE_ATTRIBUTE_DEPRECATED(int32, ShiftMouseMovePixelPerDelta, 5.4, \"Shift Mouse Move Pixel Per Delta is deprecated and incrementing by a fixed delta per pixel is no longer supported. Please use ShiftMultiplier and CtrlMultiplier which will multiply the step per mouse move\") SLATE_ATTRIBUTE(float, ShiftMultiplier) SLATE_ATTRIBUTE(float, CtrlMultiplier) SLATE_ATTRIBUTE(int32, LinearDeltaSensitivity) SLATE_ATTRIBUTE(bool, SupportDynamicSliderMaxValue) SLATE_ATTRIBUTE(bool, SupportDynamicSliderMinValue) SLATE_EVENT(FOnDynamicSliderMinMaxValueChanged, OnDynamicSliderMaxValueChanged) SLATE_EVENT(FOnDynamicSliderMinMaxValueChanged, OnDynamicSliderMinValueChanged) SLATE_ATTRIBUTE(float, SliderExponent) SLATE_ATTRIBUTE(NumericType, SliderExponentNeutralValue) SLATE_ARGUMENT(bool, EnableWheel) SLATE_ARGUMENT(bool, BroadcastValueChangesPerKey) SLATE_ATTRIBUTE(TOptional< NumericType >, WheelStep) SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_ATTRIBUTE(FMargin, ContentPadding) SLATE_EVENT(FOnValueChanged, OnValueChanged) SLATE_EVENT(FOnValueCommitted, OnValueCommitted) SLATE_EVENT(FSimpleDelegate, OnBeginSliderMovement) SLATE_EVENT(FOnValueChanged, OnEndSliderMovement) SLATE_ATTRIBUTE(bool, ClearKeyboardFocusOnCommit) SLATE_ATTRIBUTE(bool, SelectAllTextOnCommit) SLATE_ATTRIBUTE(float, MinDesiredWidth) SLATE_ATTRIBUTE(ETextJustify::Type, Justification) SLATE_ATTRIBUTE(EKeyboardType, KeyboardType) SLATE_ARGUMENT(TSharedPtr< INumericTypeInterface<NumericType> >, TypeInterface) SLATE_ARGUMENT(bool, PreventThrottling) SLATE_EVENT(FMenuExtensionDelegate, ContextMenuExtender) SLATE_END_ARGS() SSpinBox()"
  },
  {
    "label": "SSpinBox()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SSpinBox()"
  },
  {
    "label": "CancelMouseCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelMouseCapture()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "SetForegroundColor()",
    "kind": "Method",
    "detail": "Function (Style = InArgs . _Style ;)",
    "insertText": "SetForegroundColor(InArgs._Style->ForegroundColor)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (Interface = InArgs . _TypeInterface .)",
    "insertText": "IsValid() ? InArgs._TypeInterface : MakeShareable(new TDefaultNumericTypeInterface<NumericType>)"
  },
  {
    "label": "GetOnSettingChanged()",
    "kind": "Method",
    "detail": "Function (Interface ->)",
    "insertText": "GetOnSettingChanged()->AddSP(this, &SSpinBox::ResetCachedValueString)"
  },
  {
    "label": "MinSliderValue()",
    "kind": "Method",
    "detail": "Function (} ValueAttribute = InArgs . _Value ; OnValueChanged = InArgs . _OnValueChanged ; OnValueCommitted = InArgs . _OnValueCommitted ; OnBeginSliderMovement = InArgs . _OnBeginSliderMovement ; OnEndSliderMovement = InArgs . _OnEndSliderMovement ; MinDesiredWidth = InArgs . _MinDesiredWidth ; MinValue = InArgs . _MinValue ; MaxValue = InArgs . _MaxValue ;)",
    "insertText": "MinSliderValue(InArgs._MinSliderValue.Get().IsSet())"
  },
  {
    "label": "MaxSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxSliderValue(InArgs._MaxSliderValue.Get().IsSet())"
  },
  {
    "label": "MinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinFractionalDigits(InArgs._MinFractionalDigits.Get().IsSet())"
  },
  {
    "label": "MaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxFractionalDigits(InArgs._MaxFractionalDigits.Get().IsSet())"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxFractionalDigits(MaxFractionalDigits)"
  },
  {
    "label": "SetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinFractionalDigits(MinFractionalDigits)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (AlwaysUsesDeltaSnap = InArgs . _AlwaysUsesDeltaSnap ; EnableSlider = InArgs . _EnableSlider ; SupportDynamicSliderMaxValue = InArgs . _SupportDynamicSliderMaxValue ; SupportDynamicSliderMinValue = InArgs . _SupportDynamicSliderMinValue ; OnDynamicSliderMaxValueChanged = InArgs . _OnDynamicSliderMaxValueChanged ; OnDynamicSliderMinValueChanged = InArgs . _OnDynamicSliderMinValueChanged ; bEnableWheel = InArgs . _EnableWheel ; bBroadcastValueChangesPerKey = InArgs . _BroadcastValueChangesPerKey ; WheelStep = InArgs . _WheelStep ; bPreventThrottling = InArgs . _PreventThrottling ; CachedExternalValue = ValueAttribute .)",
    "insertText": "Get()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (CachedValueString = Interface ->)",
    "insertText": "ToString(CachedExternalValue)"
  },
  {
    "label": "InternalValue()",
    "kind": "Method",
    "detail": "Function (bCachedValueStringDirty = false ;)",
    "insertText": "InternalValue(double)"
  },
  {
    "label": "ApplySliderMaxValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySliderMaxValueChanged(float(CachedExternalValue - GetMaxSliderValue()), true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SupportDynamicSliderMinValue.Get() && CachedExternalValue < GetMinSliderValue())"
  },
  {
    "label": "ApplySliderMinValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySliderMinValueChanged(float(CachedExternalValue - GetMinSliderValue()), true)"
  },
  {
    "label": "UpdateIsSpinRangeUnlimited()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UpdateIsSpinRangeUnlimited()"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (SliderExponent = InArgs . _SliderExponent ; SliderExponentNeutralValue = InArgs . _SliderExponentNeutralValue ; DistanceDragged = 0 . 0 f ; PreDragValue =)",
    "insertText": "NumericType()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (ActiveBackgroundBrush : BackgroundHoveredBrush)",
    "insertText": "IsSet()"
  },
  {
    "label": "Padding()",
    "kind": "Method",
    "detail": "Function (InactiveFillBrush =& InArgs . _Style -> InactiveFillBrush ; const FMargin& TextMargin = InArgs . _Style -> TextPadding ; bDragging = false ; PointerDraggingSliderIndex = INDEX_NONE ; bIsTextChanging = false ; this -> ChildSlot .)",
    "insertText": "Padding(InArgs._ContentPadding) [ SNew(SHorizontalBox) + SHorizontalBox::Slot() .FillWidth(1.0f) .Padding(TextMargin) .HAlign(HAlign_Fill) .VAlign(VAlign_Center) [ SAssignNew(TextBlock, STextBlock) .Font(InArgs._Font) .Text(this, &SSpinBox<NumericType>::GetValueAsText) .MinDesiredWidth(this, &SSpinBox<NumericType>::GetTextMinDesiredWidth) .Justification(InArgs._Justification) ] + SHorizontalBox::Slot() .FillWidth(1.0f) .Padding(TextMargin) .HAlign(HAlign_Fill) .VAlign(VAlign_Center) [ SAssignNew(EditableText, SEditableText) .Visibility(EVisibility::Collapsed) .Font(InArgs._Font) .SelectAllTextWhenFocused(true) .Text(this, &SSpinBox<NumericType>::GetValueAsText) .OnIsTypedCharValid(this, &SSpinBox<NumericType>::IsCharacterValid) .OnTextChanged(this, &SSpinBox<NumericType>::TextField_OnTextChanged) .OnTextCommitted(this, &SSpinBox<NumericType>::TextField_OnTextCommitted) .ClearKeyboardFocusOnCommit(InArgs._ClearKeyboardFocusOnCommit) .SelectAllTextOnCommit(InArgs._SelectAllTextOnCommit) .MinDesiredWidth(this, &SSpinBox<NumericType>::GetTextMinDesiredWidth) .VirtualKeyboardType(InArgs._KeyboardType) .Justification(InArgs._Justification) .VirtualKeyboardTrigger(EVirtualKeyboardTrigger::OnAllFocusEvents) .ContextMenuExtender(InArgs._ContextMenuExtender) ] + SHorizontalBox::Slot() .AutoWidth() .HAlign(HAlign_Fill) .VAlign(VAlign_Center) [ SNew(SImage) .Image(&InArgs._Style->ArrowsImage) .ColorAndOpacity(FSlateColor::UseForeground())"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "IsInTextMode()",
    "kind": "Method",
    "detail": "Function (const bool bActiveFeedback = bDragging | |)",
    "insertText": "IsInTextMode()"
  },
  {
    "label": "IsHovered()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* BackgroundImage = bActiveFeedback ? BackgroundActiveBrush :)",
    "insertText": "IsHovered()"
  },
  {
    "label": "ShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (const int32 BackgroundLayer = LayerId ; const bool bEnabled =)",
    "insertText": "ShouldBeEnabled(bParentEnabled)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (const ESlateDrawEffect DrawEffects = bEnabled ? ESlateDrawEffect::None : ESlateDrawEffect::DisabledEffect ;)",
    "insertText": "MakeBox(OutDrawElements, BackgroundLayer, AllottedGeometry.ToPaintGeometry(), BackgroundImage, DrawEffects, BackgroundImage->GetTint(InWidgetStyle) * InWidgetStyle.GetColorAndOpacityTint())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 FilledLayer = BackgroundLayer + 1 ;)",
    "insertText": "if(!bUnlimitedSpinRange)"
  },
  {
    "label": "GridSnap()",
    "kind": "Method",
    "detail": "Function (Value =)",
    "insertText": "GridSnap(Value, CurrentDelta)"
  },
  {
    "label": "Fraction()",
    "kind": "Method",
    "detail": "Function (} float FractionFilled =)",
    "insertText": "Fraction((double)Value, (double)GetMinSliderValue(), (double)GetMaxSliderValue())"
  },
  {
    "label": "Fraction()",
    "kind": "Method",
    "detail": "Function (float StartFractionFilled =)",
    "insertText": "Fraction((double)SliderExponentNeutralValue.Get(), (double)GetMinSliderValue(), (double)GetMaxSliderValue())"
  },
  {
    "label": "SpinBoxComputeExponentSliderFraction()",
    "kind": "Method",
    "detail": "Function (FractionFilled =)",
    "insertText": "SpinBoxComputeExponentSliderFraction(FractionFilled, StartFractionFilled, CachedSliderExponent)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (} else { FractionFilled = 1 . 0 f -)",
    "insertText": "Pow(1.0f - FractionFilled, CachedSliderExponent)"
  },
  {
    "label": "FillSize()",
    "kind": "Method",
    "detail": "Function (} } const FVector2D)",
    "insertText": "FillSize(AllottedGeometry.GetLocalSize().X * FractionFilled, AllottedGeometry.GetLocalSize().Y)"
  },
  {
    "label": "MakeBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeBox(OutDrawElements, FilledLayer, AllottedGeometry.ToPaintGeometry(FillSize - FVector2D(Style->InsetPadding.GetTotalSpaceAlong<Orient_Horizontal>(), Style->InsetPadding.GetTotalSpaceAlong<Orient_Vertical>()), FSlateLayoutTransform(Style->InsetPadding.GetTopLeft())), FillImage, DrawEffects, FillImage->GetTint(InWidgetStyle) * InWidgetStyle.GetColorAndOpacityTint())"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Max(FilledLayer, SCompoundWidget::OnPaint(Args, AllottedGeometry, MyCullingRect, OutDrawElements, FilledLayer, InWidgetStyle, bEnabled))"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick(const FGeometry& AlottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "RoundIfIntegerValue()",
    "kind": "Method",
    "detail": "Function (const NumericType RoundedNewValue =)",
    "insertText": "RoundIfIntegerValue(PendingCommitValue->NewValue)"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(RoundedNewValue, PendingCommitValue->NewValue, PendingCommitValue->CommitMethod, ETextCommit::OnEnter)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PendingCommitValue .)",
    "insertText": "Reset()"
  },
  {
    "label": "CommitWithMultiplier()",
    "kind": "Method",
    "detail": "Function (} } const bool)",
    "insertText": "CommitWithMultiplier(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetPointerIndex()",
    "kind": "Method",
    "detail": "Function (PointerDraggingSliderIndex = MouseEvent .)",
    "insertText": "GetPointerIndex()"
  },
  {
    "label": "GetScreenSpacePosition()",
    "kind": "Method",
    "detail": "Function (CachedMousePosition = MouseEvent .)",
    "insertText": "GetScreenSpacePosition().IntPoint()"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (FReply ReturnReply =)",
    "insertText": "Handled().CaptureMouse(SharedThis(this)).UseHighPrecisionMouseMovement(SharedThis(this)).SetUserFocus(SharedThis(this), EFocusCause::Mouse)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} return ReturnReply ; } else { return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDragging)"
  },
  {
    "label": "GridSnap()",
    "kind": "Method",
    "detail": "Function (InternalValue =)",
    "insertText": "GridSnap(InternalValue, (double)CurrentDelta)"
  },
  {
    "label": "RoundIfIntegerValue()",
    "kind": "Method",
    "detail": "Function (} const NumericType CurrentValue =)",
    "insertText": "RoundIfIntegerValue(InternalValue)"
  },
  {
    "label": "NotifyValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyValueCommitted(CurrentValue)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} bDragging = false ; PointerDraggingSliderIndex = INDEX_NONE ; FReply Reply =)",
    "insertText": "Handled().ReleaseMouseCapture()"
  },
  {
    "label": "SetMousePos()",
    "kind": "Method",
    "detail": "Function (Reply .)",
    "insertText": "SetMousePos(CachedMousePosition)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(DistanceDragged < FSlateApplication::Get().GetDragTriggerDistance())"
  },
  {
    "label": "EnterTextMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterTextMode()"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (Reply .)",
    "insertText": "SetUserFocus(EditableText.ToSharedRef(), EFocusCause::SetDirectly)"
  },
  {
    "label": "ApplySliderMaxValueChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplySliderMaxValueChanged(float SliderDeltaToAdd, bool UpdateOnlyIfHigher)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (NumericType NewMaxSliderValue = std::numeric_limits<NumericType)",
    "insertText": "min()"
  },
  {
    "label": "GetMaxSliderValue()",
    "kind": "Method",
    "detail": "Function (NewMaxSliderValue =)",
    "insertText": "GetMaxSliderValue()"
  },
  {
    "label": "NewMaxSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewMaxSliderValue(NumericType)"
  },
  {
    "label": "SetMaxSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSliderValue(NewMaxSliderValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(OnDynamicSliderMaxValueChanged.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnDynamicSliderMaxValueChanged .)",
    "insertText": "Execute(NewMaxSliderValue, TWeakPtr<SWidget>(AsShared()), true, UpdateOnlyIfHigher)"
  },
  {
    "label": "ApplySliderMinValueChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplySliderMinValueChanged(float SliderDeltaToAdd, bool UpdateOnlyIfLower)"
  },
  {
    "label": "GetMinSliderValue()",
    "kind": "Method",
    "detail": "Function (NewMinSliderValue =)",
    "insertText": "GetMinSliderValue()"
  },
  {
    "label": "NewMinSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewMinSliderValue(NumericType)"
  },
  {
    "label": "SetMinSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinSliderValue(NewMinSliderValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(OnDynamicSliderMinValueChanged.IsBound())"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnDynamicSliderMinValueChanged .)",
    "insertText": "Execute(NewMinSliderValue, TWeakPtr<SWidget>(AsShared()), true, UpdateOnlyIfLower)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetEnableSlider()",
    "kind": "Method",
    "detail": "Function (const bool bEnableSlider =)",
    "insertText": "GetEnableSlider()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bDragging)"
  },
  {
    "label": "DistanceDragged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DistanceDragged(float)FMath::Abs(MouseEvent.GetCursorDelta().X)"
  },
  {
    "label": "ExitTextMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitTextMode()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (bDragging = true ; OnBeginSliderMovement .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} else { double NewValue = 0 . 0 ; const float MinSliderWidth = 1 0 0 . f ; float SliderWidthInSlateUnits =)",
    "insertText": "Max((float)MyGeometry.GetDrawSize().X, MinSliderWidth)"
  },
  {
    "label": "DeltaToAdd()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "DeltaToAdd(float)MouseEvent.GetCursorDelta()"
  },
  {
    "label": "ApplySliderMaxValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySliderMaxValueChanged(DeltaToAdd, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SupportDynamicSliderMinValue.Get() && (NumericType)InternalValue == GetMinSliderValue())"
  },
  {
    "label": "ApplySliderMinValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySliderMinValueChanged(DeltaToAdd, false)"
  },
  {
    "label": "bIsSmallStep()",
    "kind": "Method",
    "detail": "Function (} } ECommitMethod CommitMethod = CommittedViaSpin ; const bool)",
    "insertText": "bIsSmallStep(GetMaxSliderValue() - GetMinSliderValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CommitMethod = CommittedViaSpinMultiplier ; } else)",
    "insertText": "if(MouseEvent.IsShiftDown())"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool HasValidExponentNeutralValue = SliderExponentNeutralValue .)",
    "insertText": "IsSet() && SliderExponentNeutralValue.Get() > GetMinSliderValue() && SliderExponentNeutralValue.Get() < GetMaxSliderValue()"
  },
  {
    "label": "Fraction()",
    "kind": "Method",
    "detail": "Function (float FractionFilled =)",
    "insertText": "Fraction(InternalValue, (double)GetMinSliderValue(), (double)GetMaxSliderValue())"
  },
  {
    "label": "FractionFilled()",
    "kind": "Method",
    "detail": "Function (} } FractionFilled* = SliderWidthInSlateUnits ;)",
    "insertText": "FractionFilled(float)(MouseEvent.GetCursorDelta().X * Step)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (FractionFilled =)",
    "insertText": "Clamp(FractionFilled, 0.0f, SliderWidthInSlateUnits)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (float Percent =)",
    "insertText": "Clamp(FractionFilled / SliderWidthInSlateUnits, 0.0f, 1.0f)"
  },
  {
    "label": "Fraction()",
    "kind": "Method",
    "detail": "Function (float StartFractionFilled =)",
    "insertText": "Fraction(SliderExponentNeutralValue.Get(), GetMinSliderValue(), GetMaxSliderValue())"
  },
  {
    "label": "SpinBoxComputeExponentSliderFraction()",
    "kind": "Method",
    "detail": "Function (Percent =)",
    "insertText": "SpinBoxComputeExponentSliderFraction(Percent, StartFractionFilled, 1.0f / CachedSliderExponent)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (} else { Percent = 1 . 0 f -)",
    "insertText": "Pow(1.0f - Percent, 1.0f / CachedSliderExponent)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} } NewValue = FMath::LerpStable<)",
    "insertText": "double((double)GetMinSliderValue(), (double)GetMaxSliderValue(), Percent)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (} else { const double)",
    "insertText": "Sign(MouseEvent.GetCursorDelta().X > 0)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (const double MouseDelta =)",
    "insertText": "Abs(MouseEvent.GetCursorDelta().X / (float)LinearDeltaSensitivity.Get())"
  },
  {
    "label": "InternalValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "InternalValue(Sign * MouseDelta * FMath::Pow((double)Delta.Get(), (double)SliderExponent.Get()))"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} else { const double MouseDelta =)",
    "insertText": "Abs(MouseEvent.GetCursorDelta().X / SliderWidthInSlateUnits)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double CurrentValue = FMath::Clamp<)",
    "insertText": "double(FMath::Abs(InternalValue), 1.0, (double)std::numeric_limits<NumericType>::max())"
  },
  {
    "label": "InternalValue()",
    "kind": "Method",
    "detail": "Function (NewValue =)",
    "insertText": "InternalValue(Sign * MouseDelta * FMath::Pow((double)CurrentValue, (double)SliderExponent.Get()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SpinBoxPrivate::bUseSpinBoxMouseMoveOptimization)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (NewValue = FMath::Clamp<)",
    "insertText": "double(NewValue, (double)GetMinSliderValue(), (double)GetMaxSliderValue())"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} NewValue = FMath::Clamp<)",
    "insertText": "double(NewValue, (double)GetMinValue(), (double)GetMaxValue())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (InternalValue = NewValue ; PendingCommitValue .)",
    "insertText": "Emplace(FPendingCommitValue { .NewValue = NewValue, .CommitMethod = CommitMethod })"
  },
  {
    "label": "RoundIfIntegerValue()",
    "kind": "Method",
    "detail": "Function (} else { NumericType RoundedNewValue =)",
    "insertText": "RoundIfIntegerValue(NewValue)"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(RoundedNewValue, NewValue, CommitMethod, ETextCommit::OnEnter)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Handled()"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "bIsIntegral()",
    "kind": "Method",
    "detail": "Function (bool bIsIntegral = TIsIntegral<NumericType>::Value ; const bool bIsSmallStep = !)",
    "insertText": "bIsIntegral(GetMaxSliderValue() - GetMinSliderValue())"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (} const double)",
    "insertText": "Sign(MouseEvent.GetWheelDelta() > 0)"
  },
  {
    "label": "InternalValue()",
    "kind": "Method",
    "detail": "Function (const double NewValue =)",
    "insertText": "InternalValue(Sign * Step)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetText(FText::FromString(Interface->ToString((NumericType)NewValue)))"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(RoundedNewValue, NewValue, CommittedViaSpin, ETextCommit::OnEnter)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetText(FText::FromString(Interface->ToString((NumericType)InternalValue)))"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (} FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "Cursor()",
    "kind": "Method",
    "detail": "Function (} return bDragging ?)",
    "insertText": "Cursor(EMouseCursor::None) : FCursorReply::Cursor(EMouseCursor::ResizeLeftRight)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (const FKey Key = InKeyEvent .)",
    "insertText": "GetKey()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Key == EKeys::Up || Key == EKeys::Right)"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(LocalValueAttribute + LocalDelta, InternalValue + (double)LocalDelta, CommittedViaArrowKey, ETextCommit::OnEnter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Key == EKeys::Down || Key == EKeys::Left)"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(LocalValueAttribute - LocalDelta, InternalValue + (double)LocalDelta, CommittedViaArrowKey, ETextCommit::OnEnter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Key == EKeys::Enter)"
  },
  {
    "label": "InternalValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalValue(double)ValueAttribute.Get()"
  },
  {
    "label": "HasKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HasKeyboardFocus()"
  },
  {
    "label": "GetValueAttribute()",
    "kind": "Method",
    "detail": "Function (} TAttribute<NumericType>)",
    "insertText": "GetValueAttribute()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const TAttribute<NumericType>& InValueAttribute)"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(LocalValueAttribute, (double)LocalValueAttribute, ECommitMethod::CommittedViaCode, ETextCommit::Default)"
  },
  {
    "label": "GetMinValue()",
    "kind": "Method",
    "detail": "Function (} NumericType)",
    "insertText": "GetMinValue()"
  },
  {
    "label": "SetMinValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinValue(const TAttribute<TOptional<NumericType>>& InMinValue)"
  },
  {
    "label": "GetMaxValue()",
    "kind": "Method",
    "detail": "Function (} NumericType)",
    "insertText": "GetMaxValue()"
  },
  {
    "label": "SetMaxValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxValue(const TAttribute<TOptional<NumericType>>& InMaxValue)"
  },
  {
    "label": "IsMinSliderValueBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMinSliderValueBound()"
  },
  {
    "label": "SetMinSliderValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinSliderValue(const TAttribute<TOptional<NumericType>>& InMinSliderValue)"
  },
  {
    "label": "MinSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinSliderValue(InMinSliderValue.Get().IsSet())"
  },
  {
    "label": "IsMaxSliderValueBound()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMaxSliderValueBound()"
  },
  {
    "label": "SetMaxSliderValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxSliderValue(const TAttribute<TOptional<NumericType>>& InMaxSliderValue)"
  },
  {
    "label": "MaxSliderValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxSliderValue(InMaxSliderValue.Get().IsSet())"
  },
  {
    "label": "GetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMinFractionalDigits()"
  },
  {
    "label": "SetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinFractionalDigits(const TAttribute<TOptional<int32>>& InMinFractionalDigits)"
  },
  {
    "label": "SetMinFractionalDigits()",
    "kind": "Method",
    "detail": "Function (Interface ->)",
    "insertText": "SetMinFractionalDigits((InMinFractionalDigits.Get().IsSet()) ? InMinFractionalDigits.Get() : MinFractionalDigits)"
  },
  {
    "label": "GetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (bCachedValueStringDirty = true ; } int32)",
    "insertText": "GetMaxFractionalDigits()"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxFractionalDigits(const TAttribute<TOptional<int32>>& InMaxFractionalDigits)"
  },
  {
    "label": "SetMaxFractionalDigits()",
    "kind": "Method",
    "detail": "Function (Interface ->)",
    "insertText": "SetMaxFractionalDigits((InMaxFractionalDigits.Get().IsSet()) ? InMaxFractionalDigits.Get() : MaxFractionalDigits)"
  },
  {
    "label": "GetAlwaysUsesDeltaSnap()",
    "kind": "Method",
    "detail": "Function (bCachedValueStringDirty = true ; } bool)",
    "insertText": "GetAlwaysUsesDeltaSnap()"
  },
  {
    "label": "SetAlwaysUsesDeltaSnap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAlwaysUsesDeltaSnap(bool bNewValue)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (AlwaysUsesDeltaSnap .)",
    "insertText": "Set(bNewValue)"
  },
  {
    "label": "SetEnableSlider()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnableSlider(bool bNewValue)"
  },
  {
    "label": "GetDelta()",
    "kind": "Method",
    "detail": "Function (} NumericType)",
    "insertText": "GetDelta()"
  },
  {
    "label": "SetDelta()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDelta(NumericType InDelta)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Delta .)",
    "insertText": "Set(InDelta)"
  },
  {
    "label": "GetSliderExponent()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSliderExponent()"
  },
  {
    "label": "SetSliderExponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSliderExponent(const TAttribute<float>& InSliderExponent)"
  },
  {
    "label": "GetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (SliderExponent = InSliderExponent ; } float)",
    "insertText": "GetMinDesiredWidth()"
  },
  {
    "label": "SetMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMinDesiredWidth(const TAttribute<float>& InMinDesiredWidth)"
  },
  {
    "label": "GetWidgetStyle()",
    "kind": "Method",
    "detail": "Function (MinDesiredWidth = InMinDesiredWidth ; } const FSpinBoxStyle*)",
    "insertText": "GetWidgetStyle()"
  },
  {
    "label": "InvalidateStyle()",
    "kind": "Method",
    "detail": "Function (Style = InStyle ; } void)",
    "insertText": "InvalidateStyle()"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate(EInvalidateWidgetReason::Layout)"
  },
  {
    "label": "SetTextBlockFont()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextBlockFont(FSlateFontInfo InFont)"
  },
  {
    "label": "SetFont()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetFont(InFont)"
  },
  {
    "label": "SetTextJustification()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextJustification(ETextJustify::Type InJustification)"
  },
  {
    "label": "SetJustification()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetJustification(InJustification)"
  },
  {
    "label": "SetTextClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextClearKeyboardFocusOnCommit(bool bNewValue)"
  },
  {
    "label": "SetClearKeyboardFocusOnCommit()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetClearKeyboardFocusOnCommit(bNewValue)"
  },
  {
    "label": "SetTextSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTextSelectAllTextOnCommit(bool bNewValue)"
  },
  {
    "label": "SetSelectAllTextOnCommit()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetSelectAllTextOnCommit(bNewValue)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (TextBlock ->)",
    "insertText": "SetVisibility(EVisibility::Collapsed)"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetVisibility(EVisibility::Visible)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetValueAsString()"
  },
  {
    "label": "GetValueAsText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetValueAsText()"
  },
  {
    "label": "TextField_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TextField_OnTextChanged(const FText& NewText)"
  },
  {
    "label": "TextChangedGuard()",
    "kind": "Method",
    "detail": "Function (TGuardValue<bool>)",
    "insertText": "TextChangedGuard(bIsTextChanging, true)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString Data = NewText .)",
    "insertText": "ToString()"
  },
  {
    "label": "Len()",
    "kind": "Method",
    "detail": "Function (int32 NumValidChars = Data .)",
    "insertText": "Len()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumValidChars = Index ; break ; } })",
    "insertText": "if(NumValidChars < Data.Len())"
  },
  {
    "label": "Left()",
    "kind": "Method",
    "detail": "Function (FString ValidData = NumValidChars> 0 ? Data .)",
    "insertText": "Left(NumValidChars) : GetValueAsString()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (EditableText ->)",
    "insertText": "SetText(FText::FromString(ValidData))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bBroadcastValueChangesPerKey && FCString::IsNumeric(*Data))"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (TOptional<NumericType> NewValue = Interface ->)",
    "insertText": "FromString(Data, ValueAttribute.Get())"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(NewValue.GetValue(), static_cast<double>(NewValue.GetValue()), CommittedViaCode, ETextCommit::Default)"
  },
  {
    "label": "TextField_OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "TextField_OnTextCommitted(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} TOptional<NumericType> NewValue = Interface ->)",
    "insertText": "FromString(NewText.ToString(), ValueAttribute.Get())"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitValue(NewValue.GetValue(), (double)NewValue.GetValue(), CommittedViaTypeIn, CommitInfo)"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (} } enum ECommitMethod { CommittedViaSpin,CommittedViaTypeIn,CommittedViaArrowKey,CommittedViaCode,CommittedViaSpinMultiplier } ; void)",
    "insertText": "CommitValue(NumericType NewValue, double NewSpinValue, ECommitMethod CommitMethod, ETextCommit::Type OriginalCommitInfo)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(SSpinBox_CommitValue)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (NewValue = FMath::Clamp<)",
    "insertText": "NumericType(NewValue, LocalMinSliderValue, LocalMaxSliderValue)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (NewSpinValue = FMath::Clamp<)",
    "insertText": "double(NewSpinValue, (double)LocalMinSliderValue, (double)LocalMaxSliderValue)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (NewValue = FMath::Clamp<)",
    "insertText": "NumericType(NewValue, LocalMinValue, LocalMaxValue)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (NewSpinValue = FMath::Clamp<)",
    "insertText": "double(NewSpinValue, (double)LocalMinValue, (double)LocalMaxValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!ValueAttribute.IsBound())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (ValueAttribute .)",
    "insertText": "Set(NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CommitMethod == CommittedViaSpin)"
  },
  {
    "label": "NewSpinValue()",
    "kind": "Method",
    "detail": "Function (NewValue = CurrentValue ;)",
    "insertText": "NewSpinValue(double)"
  },
  {
    "label": "NumericType()",
    "kind": "Method",
    "detail": "Function (NewValue = FMath::GridSnap<)",
    "insertText": "NumericType(NewValue, CurrentDelta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SupportDynamicSliderMaxValue.Get() && ValueAttribute.Get() > GetMaxSliderValue())"
  },
  {
    "label": "ApplySliderMaxValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySliderMaxValueChanged(float(ValueAttribute.Get() - GetMaxSliderValue()), true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SupportDynamicSliderMinValue.Get() && ValueAttribute.Get() < GetMinSliderValue())"
  },
  {
    "label": "ApplySliderMinValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySliderMinValueChanged(float(ValueAttribute.Get() - GetMinSliderValue()), true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CommitMethod == CommittedViaTypeIn || CommitMethod == CommittedViaArrowKey)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnValueCommitted .)",
    "insertText": "ExecuteIfBound(NewValue, OriginalCommitInfo)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (} OnValueChanged .)",
    "insertText": "ExecuteIfBound(NewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bCachedValueStringDirty = false ; })",
    "insertText": "if(!this->HasMouseCapture())"
  },
  {
    "label": "NotifyValueCommitted()",
    "kind": "Method",
    "detail": "Function (bDragging = false ; PointerDraggingSliderIndex = INDEX_NONE ; } } void)",
    "insertText": "NotifyValueCommitted(NumericType CurrentValue)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnValueCommitted .)",
    "insertText": "ExecuteIfBound(CurrentValue, ETextCommit::OnEnter)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnEndSliderMovement .)",
    "insertText": "ExecuteIfBound(CurrentValue)"
  },
  {
    "label": "Fraction()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Fraction(double InValue, double InMinValue, double InMaxValue)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const double HalfMax = InMaxValue* 0 . 5 ; const double HalfMin = InMinValue* 0 . 5 ; const double HalfVal = InValue* 0 . 5 ;)",
    "insertText": "return(float)FMath::Clamp((HalfVal - HalfMin) / (HalfMax - HalfMin), 0.0, 1.0)"
  },
  {
    "label": "bUnlimitedSpinRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bUnlimitedSpinRange((MinValue.Get().IsSet() && MaxValue.Get().IsSet()) || (MinSliderValue.Get().IsSet() && MaxSliderValue.Get().IsSet()))"
  },
  {
    "label": "GetTextMinDesiredWidth()",
    "kind": "Method",
    "detail": "Function (} const FSpinBoxStyle* Style ; const FSlateBrush* BackgroundHoveredBrush ; const FSlateBrush* BackgroundActiveBrush ; const FSlateBrush* BackgroundBrush ; const FSlateBrush* ActiveFillBrush ; const FSlateBrush* HoveredFillBrush ; const FSlateBrush* InactiveFillBrush ; float DistanceDragged ; TAttribute<NumericType> Delta ; TAttribute<float> ShiftMultiplier ; TAttribute<float> CtrlMultiplier ; TAttribute<int32> LinearDeltaSensitivity ; TAttribute<float> SliderExponent ; TAttribute<NumericType> SliderExponentNeutralValue ; TAttribute<TOptional<NumericType>> MinValue ; TAttribute<TOptional<NumericType>> MaxValue ; TAttribute<TOptional<NumericType>> MinSliderValue ; TAttribute<TOptional<NumericType>> MaxSliderValue ; TAttribute<TOptional<int32>> MinFractionalDigits ; TAttribute<TOptional<int32>> MaxFractionalDigits ; TAttribute<bool> AlwaysUsesDeltaSnap ; TAttribute<bool> EnableSlider ; TAttribute<bool> SupportDynamicSliderMaxValue ; TAttribute<bool> SupportDynamicSliderMinValue ; TAttribute<TOptional<NumericType>> WheelStep ; FOnDynamicSliderMinMaxValueChanged OnDynamicSliderMaxValueChanged ; FOnDynamicSliderMinMaxValueChanged OnDynamicSliderMinValueChanged ; TAttribute<float> MinDesiredWidth ; float)",
    "insertText": "GetTextMinDesiredWidth()"
  },
  {
    "label": "IsCharacterValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCharacterValid(TCHAR InChar)"
  },
  {
    "label": "RoundIfIntegerValue()",
    "kind": "Method",
    "detail": "Function (} NumericType)",
    "insertText": "RoundIfIntegerValue(double ValueToRound)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bIsIntegral = TIsIntegral<NumericType>::Value ; bool bCanBeRepresentedInDouble = std::numeric_limits<double>::digits> = std::numeric_limits<NumericType>::digits ;)",
    "insertText": "if(bIsIntegral && !bCanBeRepresentedInDouble)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bIsIntegral)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(NumericType)FMath::Clamp<double>(ValueToRound, (double)std::numeric_limits<NumericType>::lowest(), (double)std::numeric_limits<NumericType>::max())"
  },
  {
    "label": "NotifyValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyValueCommitted(PreDragValue)"
  },
  {
    "label": "ResetCachedValueString()",
    "kind": "Method",
    "detail": "Function (} int32 PointerDraggingSliderIndex ; FIntPoint CachedMousePosition ; double InternalValue ; NumericType PreDragValue ; NumericType CachedExternalValue ; FString CachedValueString ; void)",
    "insertText": "ResetCachedValueString()"
  }
]