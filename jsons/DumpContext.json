[
  {
    "label": "EnumValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EnumValue"
  },
  {
    "label": "FlagsValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FlagsValue"
  },
  {
    "label": "QuotedStringValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QuotedStringValue"
  },
  {
    "label": "DumpContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DumpContext"
  },
  {
    "label": "EnumValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / Support / Global . h \" # include \" dxc / Test / D3DReflectionStrings . h \" # include<iomanip> # include<ostream> # include<sstream> # include<string> # include<unordered_set> namespace hlsl { using namespace RDAT ; namespace dump { template<_T> struct EnumValue { public :)",
    "insertText": "EnumValue(const _T &e) : eValue(e)"
  },
  {
    "label": "FlagsValue()",
    "kind": "Method",
    "detail": "Function (} _T eValue ; } ; template<_T,_StoreT = uint32_t> struct FlagsValue { public :)",
    "insertText": "FlagsValue(const _StoreT &f) : Flags(f)"
  },
  {
    "label": "QuotedStringValue()",
    "kind": "Method",
    "detail": "Function (} _StoreT Flags ; } ; struct QuotedStringValue { public :)",
    "insertText": "QuotedStringValue(const char *str) : Str(str)"
  },
  {
    "label": "DoIndent()",
    "kind": "Method",
    "detail": "Function (} const char* Str ; } ; class DumpContext { private : std::ostream& m_out ; unsigned m_indent = 0 ; std::unordered_set<size_t> m_visited ; std::ostream&)",
    "insertText": "DoIndent()"
  },
  {
    "label": "DumpContext()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "DumpContext(std::ostream &outStream) : m_out(outStream)"
  },
  {
    "label": "Indent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Indent()"
  },
  {
    "label": "Dedent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Dedent()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} template<_T> std::ostream&)",
    "insertText": "Write(_T t)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} template<_T,. . . Args> std::ostream&)",
    "insertText": "Write(_T t, Args... args)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} template<_T> std::ostream&)",
    "insertText": "Write(std::ostream &out, _T t)"
  },
  {
    "label": "WriteLn()",
    "kind": "Method",
    "detail": "Function (} template<_T> std::ostream&)",
    "insertText": "WriteLn(_T t)"
  },
  {
    "label": "WriteLn()",
    "kind": "Method",
    "detail": "Function (} template<_T,. . . Args> std::ostream&)",
    "insertText": "WriteLn(_T t, Args... args)"
  },
  {
    "label": "WriteEnumValue()",
    "kind": "Method",
    "detail": "Function (} template<_T> std::ostream&)",
    "insertText": "WriteEnumValue(_T eValue)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const char* szValue =)",
    "insertText": "ToString(eValue)"
  },
  {
    "label": "DumpEnum()",
    "kind": "Method",
    "detail": "Function (} template<_T> void)",
    "insertText": "DumpEnum(const char *Name, _T eValue)"
  },
  {
    "label": "WriteLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLn(Name, \": \", EnumValue<_T>(eValue))"
  },
  {
    "label": "DumpFlags()",
    "kind": "Method",
    "detail": "Function (} template<_T,_StoreT = uint32_t> void)",
    "insertText": "DumpFlags(const char *Name, _StoreT Flags)"
  },
  {
    "label": "WriteLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLn(Name, \": \", FlagsValue<_T, _StoreT>(Flags))"
  },
  {
    "label": "Failure()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "Failure(Args... args)"
  },
  {
    "label": "WriteLn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLn(\"Failed: \", args...)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Visit(size_t value)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Visit(const void *ptr)"
  },
  {
    "label": "VisitReset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VisitReset()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_visited .)",
    "insertText": "clear()"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (} } ; template<> std::ostream& DumpContext::Write<)",
    "insertText": "uint8_t(std::ostream &out, uint8_t t)"
  },
  {
    "label": "hexdigit()",
    "kind": "Method",
    "detail": "Function (} char)",
    "insertText": "hexdigit(unsigned X, bool LowerCase = false)"
  },
  {
    "label": "EscapedString()",
    "kind": "Method",
    "detail": "Function (const char HexChar = LowerCase ? ' a ' : ' A ' ; return X<1 0 ? ' 0 ' + X : HexChar + X - 1 0 ; } std::string)",
    "insertText": "EscapedString(const char *text)"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (std::ostringstream ss ; size_t size =)",
    "insertText": "strlen(text)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned char C = text [ i ] ;)",
    "insertText": "if(isprint(C) && C != '\\\\' && C != '\"')"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (} return ss .)",
    "insertText": "str()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<_T> std::ostream&)",
    "insertText": "operator(std::ostream &out, const EnumValue<_T> &obj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<_T,_StoreT> std::ostream&)",
    "insertText": "operator(std::ostream &out, const FlagsValue<_T, _StoreT> &obj)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_StoreT Flags = obj . Flags ;)",
    "insertText": "if(!Flags)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const char* szValue =)",
    "insertText": "ToString((_T)0)"
  }
]