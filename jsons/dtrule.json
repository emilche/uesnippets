[
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "DateRuleType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DateRuleType"
  },
  {
    "label": "TimeRuleType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TimeRuleType"
  },
  {
    "label": "DateTimeRule()",
    "kind": "Method",
    "detail": "Function (# ifndef DTRULE_H # define DTRULE_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / uobject . h \" U_NAMESPACE_BEGIN class U_I18N_API DateTimeRule : public UObject { public : enum DateRuleType { DOM = 0,DOW,DOW_GEQ_DOM,DOW_LEQ_DOM } ; enum TimeRuleType { WALL_TIME = 0,STANDARD_TIME,UTC_TIME } ;)",
    "insertText": "DateTimeRule(int32_t month, int32_t dayOfMonth, int32_t millisInDay, TimeRuleType timeType)"
  },
  {
    "label": "DateTimeRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateTimeRule(int32_t month, int32_t weekInMonth, int32_t dayOfWeek, int32_t millisInDay, TimeRuleType timeType)"
  },
  {
    "label": "DateTimeRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateTimeRule(int32_t month, int32_t dayOfMonth, int32_t dayOfWeek, UBool after, int32_t millisInDay, TimeRuleType timeType)"
  },
  {
    "label": "DateTimeRule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DateTimeRule(const DateTimeRule& source)"
  },
  {
    "label": "DateTimeRule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DateTimeRule()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (DateTimeRule*)",
    "insertText": "clone(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DateTimeRule&)",
    "insertText": "operator(const DateTimeRule& right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const DateTimeRule& that)"
  },
  {
    "label": "getDateRuleType()",
    "kind": "Method",
    "detail": "Function (DateRuleType)",
    "insertText": "getDateRuleType(void)"
  },
  {
    "label": "getTimeRuleType()",
    "kind": "Method",
    "detail": "Function (TimeRuleType)",
    "insertText": "getTimeRuleType(void)"
  },
  {
    "label": "getRuleMonth()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRuleMonth(void)"
  },
  {
    "label": "getRuleDayOfMonth()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRuleDayOfMonth(void)"
  },
  {
    "label": "getRuleDayOfWeek()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRuleDayOfWeek(void)"
  },
  {
    "label": "getRuleWeekInMonth()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRuleWeekInMonth(void)"
  },
  {
    "label": "getRuleMillisInDay()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "getRuleMillisInDay(void)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (private : int32_t fMonth ; int32_t fDayOfMonth ; int32_t fDayOfWeek ; int32_t fWeekInMonth ; int32_t fMillisInDay ; DateRuleType fDateRuleType ; TimeRuleType fTimeRuleType ; public : UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  }
]