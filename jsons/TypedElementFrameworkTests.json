[
  {
    "label": "UTestTypedElementInterfaceA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTestTypedElementInterfaceA"
  },
  {
    "label": "ITestTypedElementInterfaceA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITestTypedElementInterfaceA"
  },
  {
    "label": "UTestTypedElementInterfaceB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTestTypedElementInterfaceB"
  },
  {
    "label": "ITestTypedElementInterfaceB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITestTypedElementInterfaceB"
  },
  {
    "label": "UTestTypedElementInterfaceC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTestTypedElementInterfaceC"
  },
  {
    "label": "ITestTypedElementInterfaceC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITestTypedElementInterfaceC"
  },
  {
    "label": "TTypedElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTypedElement"
  },
  {
    "label": "FTestTypedElementData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestTypedElementData"
  },
  {
    "label": "UTestTypedElementInterfaceA_ImplTyped",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTestTypedElementInterfaceA_ImplTyped"
  },
  {
    "label": "UTestTypedElementInterfaceA_ImplUntyped",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTestTypedElementInterfaceA_ImplUntyped"
  },
  {
    "label": "UTestTypedElementInterfaceBAndC_Typed",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTestTypedElementInterfaceBAndC_Typed"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Framework / TypedElementRegistry . h \" # include \" UObject / Interface . h \" # include \" TypedElementFrameworkTests . generated . h \")",
    "insertText": "UINTERFACE(MinimalAPI, BlueprintType, meta = (CannotImplementInterfaceInBlueprint))"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ITestTypedElementInterfaceA {)",
    "insertText": "GENERATED_BODY() public: virtual FText GetDisplayName(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetDisplayName(const FTypedElementHandle& InElementHandle, FText InNewName, bool bNotify = true)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ITestTypedElementInterfaceB {)",
    "insertText": "GENERATED_BODY() public: virtual bool MarkAsTested(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ITestTypedElementInterfaceC {)",
    "insertText": "GENERATED_BODY() public: virtual bool GetIsTested(const FTypedElementHandle& InElementHandle)"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetDisplayName(FText InNewName, bool bNotify = true)"
  },
  {
    "label": "MarkAsTested()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TTypedElement<ITestTypedElementInterfaceB> : public TTypedElementBase<ITestTypedElementInterfaceB> { bool)",
    "insertText": "MarkAsTested()"
  },
  {
    "label": "GetIsTested()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TTypedElement<ITestTypedElementInterfaceC> : public TTypedElementBase<ITestTypedElementInterfaceC> { bool)",
    "insertText": "GetIsTested()"
  },
  {
    "label": "UE_DECLARE_TYPED_ELEMENT_DATA_RTTI()",
    "kind": "Method",
    "detail": "Function (} } ; struct FTestTypedElementData {)",
    "insertText": "UE_DECLARE_TYPED_ELEMENT_DATA_RTTI(FTestTypedElementData)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FName InternalElementId ; } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDisplayName(const FTypedElementHandle& InElementHandle, FText InNewName, bool bNotify)"
  },
  {
    "label": "GetIsTested()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsTested(const FTypedElementHandle& InElementHandle)"
  }
]