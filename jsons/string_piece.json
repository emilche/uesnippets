[
  {
    "label": "GSL_POINTER",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GSL_POINTER"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "StringPieceHashImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StringPieceHashImpl"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_PIECE_H_ # define BASE_STRINGS_STRING_PIECE_H_ # include<stddef . h> # include<algorithm> # include<iosfwd> # include<limits> # include<string> # include<type_traits> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / compiler_specific . h \" # include \" base / cxx20_is_constant_evaluated . h \" # include \" base / strings / string_piece_forward . h \" # include \" build / build_config . h \" namespace base { namespace internal { BASE_EXPORT size_t)",
    "insertText": "find(StringPiece self, StringPiece s, size_t pos)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find(StringPiece16 self, StringPiece16 s, size_t pos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "rfind(StringPiece self, StringPiece s, size_t pos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "rfind(StringPiece16 self, StringPiece16 s, size_t pos)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_first_of(StringPiece self, StringPiece s, size_t pos)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_first_of(StringPiece16 self, StringPiece16 s, size_t pos)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_first_not_of(StringPiece self, StringPiece s, size_t pos)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_first_not_of(StringPiece16 self, StringPiece16 s, size_t pos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_last_of(StringPiece self, StringPiece s, size_t pos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_last_of(StringPiece16 self, StringPiece16 s, size_t pos)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_last_not_of(StringPiece self, StringPiece s, size_t pos)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_last_not_of(StringPiece16 self, StringPiece16 s, size_t pos)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find(WStringPiece self, WStringPiece s, size_t pos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "rfind(WStringPiece self, WStringPiece s, size_t pos)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_first_of(WStringPiece self, WStringPiece s, size_t pos)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_first_not_of(WStringPiece self, WStringPiece s, size_t pos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_last_of(WStringPiece self, WStringPiece s, size_t pos)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT size_t)",
    "insertText": "find_last_not_of(WStringPiece self, WStringPiece s, size_t pos)"
  },
  {
    "label": "BasicStringPiece()",
    "kind": "Method",
    "detail": "Function (} template<CharT,Traits> class GSL_POINTER BasicStringPiece { public : using traits_type = Traits ; using value_type = CharT ; using pointer = CharT* ; using const_pointer = const CharT* ; using reference = CharT& ; using const_reference = const CharT& ; using const_iterator = const CharT* ; using iterator = const_iterator ; using const_reverse_iterator = std::reverse_iterator<const_iterator> ; using reverse_iterator = const_reverse_iterator ; using size_type = size_t ; using difference_type = ptrdiff_t ;)",
    "insertText": "BasicStringPiece() noexcept : ptr_(nullptr), length_(0)"
  },
  {
    "label": "BasicStringPiece()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicStringPiece(const BasicStringPiece& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BasicStringPiece&)",
    "insertText": "operator(const BasicStringPiece& view)"
  },
  {
    "label": "BasicStringPiece()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicStringPiece(const CharT* s, size_type count) : ptr_(s), length_(count)"
  },
  {
    "label": "BasicStringPiece()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicStringPiece(const CharT* s) : ptr_(s), length_(s ? traits_type::length(s) : 0)"
  },
  {
    "label": "BasicStringPiece()",
    "kind": "Method",
    "detail": "Function (} template<class T,class = std::enable_if_t<std::is_null_pointer<T>::value>>)",
    "insertText": "BasicStringPiece(T)"
  },
  {
    "label": "BasicStringPiece()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicStringPiece(const std::basic_string<CharT>& str) : ptr_(str.data()), length_(str.size())"
  },
  {
    "label": "CharT()",
    "kind": "Method",
    "detail": "Function (} operator std::basic_string<)",
    "insertText": "CharT()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "operator(size_type pos)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "at(size_type pos)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "back()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} const_pointer)",
    "insertText": "data()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] bool)",
    "insertText": "empty()"
  },
  {
    "label": "remove_prefix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "remove_prefix(size_type n)"
  },
  {
    "label": "remove_suffix()",
    "kind": "Method",
    "detail": "Function (ptr_ + = n ; length_ - = n ; } void)",
    "insertText": "remove_suffix(size_type n)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (length_ - = n ; } void)",
    "insertText": "swap(BasicStringPiece& v)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (const const_pointer ptr = ptr_ ; ptr_ = v . ptr_ ; v . ptr_ = ptr ; const size_type length = length_ ; length_ = v . length_ ; v . length_ = length ; } size_type)",
    "insertText": "copy(CharT* dest, size_type count, size_type pos = 0)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const size_type rcount =)",
    "insertText": "min(count, size() - pos)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(dest, data() + pos, rcount)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(BasicStringPiece v)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const size_type rlen =)",
    "insertText": "min(size(), v.size())"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (const int result =)",
    "insertText": "compare(data(), v.data(), rlen)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(size_type pos1, size_type count1, BasicStringPiece v)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(size_type pos1, size_type count1, BasicStringPiece v, size_type pos2, size_type count2)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(const CharT* s)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(size_type pos1, size_type count1, const CharT* s)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "compare(size_type pos1, size_type count1, const CharT* s, size_type count2)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find(BasicStringPiece v, size_type pos = 0)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} return npos ; } return)",
    "insertText": "find(*this, v, pos)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find(CharT ch, size_type pos = 0)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const const_pointer result =)",
    "insertText": "find(data() + pos, size() - pos, ch)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find(const CharT* s, size_type pos, size_type count)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find(const CharT* s, size_type pos = 0)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "rfind(BasicStringPiece v, size_type pos = npos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} return npos ; } return)",
    "insertText": "rfind(*this, v, pos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "rfind(CharT c, size_type pos = npos)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} return npos ; } size_type)",
    "insertText": "rfind(const CharT* s, size_type pos, size_type count)"
  },
  {
    "label": "rfind()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "rfind(const CharT* s, size_type pos = npos)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_of(BasicStringPiece v, size_type pos = 0)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} return npos ; } return)",
    "insertText": "find_first_of(*this, v, pos)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_of(CharT c, size_type pos = 0)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_of(const CharT* s, size_type pos, size_type count)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_of(const CharT* s, size_type pos = 0)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_of(BasicStringPiece v, size_type pos = npos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} return npos ; } return)",
    "insertText": "find_last_of(*this, v, pos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_of(CharT c, size_type pos = npos)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_of(const CharT* s, size_type pos, size_type count)"
  },
  {
    "label": "find_last_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_of(const CharT* s, size_type pos = npos)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_not_of(BasicStringPiece v, size_type pos = 0)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} return npos ; } return)",
    "insertText": "find_first_not_of(*this, v, pos)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_not_of(CharT c, size_type pos = 0)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} return npos ; } size_type)",
    "insertText": "find_first_not_of(const CharT* s, size_type pos, size_type count)"
  },
  {
    "label": "find_first_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_first_not_of(const CharT* s, size_type pos = 0)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_not_of(BasicStringPiece v, size_type pos = npos)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (} return npos ; } return)",
    "insertText": "find_last_not_of(*this, v, pos)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_not_of(CharT c, size_type pos = npos)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (} return npos ; } size_type)",
    "insertText": "find_last_not_of(const CharT* s, size_type pos, size_type count)"
  },
  {
    "label": "find_last_not_of()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "find_last_not_of(const CharT* s, size_type pos = npos)"
  },
  {
    "label": "size_type()",
    "kind": "Method",
    "detail": "Function (} size_type npos =)",
    "insertText": "size_type(-1)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (protected : const_pointer ptr_ ; size_type length_ ; } ; template<CharT,Traits> const BasicStringPiece<CharT,Traits>::size_type BasicStringPiece<CharT,Traits>::npos ; # if !)",
    "insertText": "defined(COMPILER_MSVC)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template class BASE_EXPORT BasicStringPiece<char16_t> ; # endif template<CharT,Traits> bool)",
    "insertText": "operator(BasicStringPiece<CharT, Traits> lhs, BasicStringPiece<CharT, Traits> rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharT,Traits,int = 1> bool)",
    "insertText": "operator(BasicStringPiece<CharT, Traits> lhs, std::common_type_t<BasicStringPiece<CharT, Traits>> rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharT,Traits,int = 2> bool)",
    "insertText": "operator(std::common_type_t<BasicStringPiece<CharT, Traits>> lhs, BasicStringPiece<CharT, Traits> rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, StringPiece piece)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, StringPiece16 piece)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::ostream&)",
    "insertText": "operator(std::ostream& o, WStringPiece piece)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<StringPieceType> struct StringPieceHashImpl { size_t)",
    "insertText": "operator()(StringPieceType sp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t result = 0 ;)",
    "insertText": "for(auto c : sp) result = (result * 131) + static_cast<size_t>(c)"
  }
]