[
  {
    "label": "FConvexStructureData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConvexStructureData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FISPCDataVerifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISPCDataVerifier"
  },
  {
    "label": "DataL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / ConvexFlattenedArrayStructureData . h \" # include \" Chaos / ConvexHalfEdgeStructureData . h \" # include \" ChaosArchive . h \" # include \" ChaosCheck . h \" # include \" ChaosLog . h \" # include \" UObject / PhysicsObjectVersion . h \" # include \" UObject / FortniteMainBranchObjectVersion . h \" namespace Chaos { class FConvexStructureData { public : using FConvexStructureDataLarge = FConvexHalfEdgeStructureDataS32 ; using FConvexStructureDataMedium = FConvexHalfEdgeStructureDataS16 ; using FConvexStructureDataSmall = FConvexHalfEdgeStructureDataU8 ; enum class EIndexType : int8 { None,Small,Medium,Large,} ; const FConvexStructureDataLarge&)",
    "insertText": "DataL()"
  },
  {
    "label": "EmptyOp()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "EmptyOp()"
  },
  {
    "label": "CHAOS_CONVEXSTRUCTUREDATA_DATAOP()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "CHAOS_CONVEXSTRUCTUREDATA_DATAOP(Op, DefaultValue) \\ switch (IndexType)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (\\ case EIndexType::Small : \\ return)",
    "insertText": "Op(DataS())"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (\\ case EIndexType::Medium : \\ return)",
    "insertText": "Op(DataM())"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (\\ case EIndexType::Large : \\ return)",
    "insertText": "Op(DataL())"
  },
  {
    "label": "NonConstDataOp()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return DefaultValue ; template<T_OP,T_EMPTYOP> auto)",
    "insertText": "NonConstDataOp(const T_OP& Op, const T_EMPTYOP& EmptyOp)"
  },
  {
    "label": "FConvexStructureData()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FConvexStructureData()"
  },
  {
    "label": "IndexType()",
    "kind": "Method",
    "detail": "Function (nullptr },)",
    "insertText": "IndexType(EIndexType::None)"
  },
  {
    "label": "FConvexStructureData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConvexStructureData(const FConvexStructureData& Other)"
  },
  {
    "label": "FConvexStructureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FConvexStructureData(FConvexStructureData&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "DestroyDataContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyDataContainer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConvexStructureData&)",
    "insertText": "operator(const FConvexStructureData& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConvexStructureData&)",
    "insertText": "operator(FConvexStructureData&& Other)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (Data . Ptr = Other . Data . Ptr ; IndexType = Other . IndexType ; Other . Data . Ptr = nullptr ; Other . IndexType = EIndexType::None ; return* this ; } void)",
    "insertText": "CopyFrom(const FConvexStructureData& Other)"
  },
  {
    "label": "FConvexStructureDataLarge()",
    "kind": "Method",
    "detail": "Function (Data . DataL = new)",
    "insertText": "FConvexStructureDataLarge(*Other.Data.DataL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Other.IndexType == EIndexType::Medium)"
  },
  {
    "label": "FConvexStructureDataMedium()",
    "kind": "Method",
    "detail": "Function (Data . DataM = new)",
    "insertText": "FConvexStructureDataMedium(*Other.Data.DataM)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Other.IndexType == EIndexType::Small)"
  },
  {
    "label": "FConvexStructureDataSmall()",
    "kind": "Method",
    "detail": "Function (Data . DataS = new)",
    "insertText": "FConvexStructureDataSmall(*Other.Data.DataS)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} IndexType = Other . IndexType ; } bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetIndexType()",
    "kind": "Method",
    "detail": "Function (} EIndexType)",
    "insertText": "GetIndexType()"
  },
  {
    "label": "GetVertexPlanes3()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVertexPlanes3(int32 VertexIndex, int32& PlaneIndex0, int32& PlaneIndex1, int32& PlaneIndex2)"
  },
  {
    "label": "NumPlaneVertices()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } int32)",
    "insertText": "NumPlaneVertices(int32 PlaneIndex)"
  },
  {
    "label": "GetPlaneVertex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlaneVertex(int32 PlaneIndex, int32 PlaneVertexIndex)"
  },
  {
    "label": "NumHalfEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumHalfEdges()"
  },
  {
    "label": "NumEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumEdges()"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEdgeVertex(int32 EdgeIndex, int32 EdgeVertexIndex)"
  },
  {
    "label": "GetEdgePlane()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetEdgePlane(int32 EdgeIndex, int32 EdgePlaneIndex)"
  },
  {
    "label": "SetPlaneVertices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetPlaneVertices(const TArray<TArray<int32>>& InPlaneVertices, int32 NumVerts, const bool bRegularDatas = false)"
  },
  {
    "label": "GetRequiredIndexType()",
    "kind": "Method",
    "detail": "Function (const EIndexType NewIndexType =)",
    "insertText": "GetRequiredIndexType(InPlaneVertices, NumVerts)"
  },
  {
    "label": "CreateDataContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDataContainer(NewIndexType)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FPhysicsObjectVersion::GUID)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FFortniteMainBranchObjectVersion::GUID)"
  },
  {
    "label": "CustomVer()",
    "kind": "Method",
    "detail": "Function (const bool bUseHalfEdgeStructureData = Ar .)",
    "insertText": "CustomVer(FPhysicsObjectVersion::GUID)"
  },
  {
    "label": "LoadLegacyData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLegacyData(Ar)"
  },
  {
    "label": "NonConstDataOp()",
    "kind": "Method",
    "detail": "Function (} else { Ar<<IndexType ; })",
    "insertText": "NonConstDataOp([&Ar](auto& ConcreteData) { Ar << ConcreteData; }, []() {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FConvexStructureData& Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Value .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SizeOfData()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfData()"
  },
  {
    "label": "OffsetOfIndexType()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "OffsetOfIndexType()"
  },
  {
    "label": "SizeOfIndexType()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfIndexType()"
  },
  {
    "label": "LoadLegacyData()",
    "kind": "Method",
    "detail": "Function (} } ; FISPCDataVerifier ; # endif private : void)",
    "insertText": "LoadLegacyData(FArchive& Ar)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> OldPlaneVertices ; int32 OldNumVertices = 0 ; Legacy::)",
    "insertText": "Load(Ar, OldPlaneVertices, OldNumVertices)"
  },
  {
    "label": "SetPlaneVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaneVertices(OldPlaneVertices, OldNumVertices)"
  },
  {
    "label": "GetRequiredIndexType()",
    "kind": "Method",
    "detail": "Function (} EIndexType)",
    "insertText": "GetRequiredIndexType(const TArray<TArray<int32>>& InPlaneVertices, int32 NumVerts)"
  },
  {
    "label": "FConvexStructureDataLarge()",
    "kind": "Method",
    "detail": "Function (Data . DataL = new)",
    "insertText": "FConvexStructureDataLarge()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InIndexType == EIndexType::Medium)"
  },
  {
    "label": "FConvexStructureDataMedium()",
    "kind": "Method",
    "detail": "Function (Data . DataM = new)",
    "insertText": "FConvexStructureDataMedium()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InIndexType == EIndexType::Small)"
  },
  {
    "label": "FConvexStructureDataSmall()",
    "kind": "Method",
    "detail": "Function (Data . DataS = new)",
    "insertText": "FConvexStructureDataSmall()"
  },
  {
    "label": "NonConstDataOp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NonConstDataOp([](auto& ConcreteData) { delete &ConcreteData; }, []() {})"
  }
]