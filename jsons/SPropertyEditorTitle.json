[
  {
    "label": "SPropertyEditorTitle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorTitle"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" PropertyNode . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Styling / AppStyle . h \" # include \" Presentation / PropertyEditor / PropertyEditor . h \" # include \" UserInterface / PropertyEditor / PropertyEditorConstants . h \" # include \" Widgets / Text / STextBlock . h \" class SPropertyEditorTitle : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyEditorTitle ) : _PropertyFont( FAppStyle::GetFontStyle( PropertyEditorConstants::PropertyFontStyle ) ) , _CategoryFont( FAppStyle::GetFontStyle( PropertyEditorConstants::CategoryFontStyle ))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FSlateFontInfo, PropertyFont ) SLATE_ATTRIBUTE( FSlateFontInfo, CategoryFont ) SLATE_EVENT( FOnClicked, OnDoubleClicked ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef<FPropertyEditor>& InPropertyEditor)"
  },
  {
    "label": "GetPropertyNode()",
    "kind": "Method",
    "detail": "Function (PropertyEditor = InPropertyEditor ; OnDoubleClicked = InArgs . _OnDoubleClicked ; const TSharedRef<FPropertyNode> PropertyNode = InPropertyEditor ->)",
    "insertText": "GetPropertyNode()"
  },
  {
    "label": "AsCategoryNode()",
    "kind": "Method",
    "detail": "Function (const bool bIsCategory = PropertyNode ->)",
    "insertText": "AsCategoryNode()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (const TAttribute<FSlateFontInfo> NameFont = bIsCategory ? InArgs . _CategoryFont : InArgs . _PropertyFont ; TSharedPtr<STextBlock> NameTextBlock ; const FName NAME_TitleProperty =)",
    "insertText": "FName(TEXT(\"TitleProperty\"))"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (const bool bHasTitleProperty = InPropertyEditor ->)",
    "insertText": "GetProperty() && InPropertyEditor->GetProperty()->HasMetaData(NAME_TitleProperty)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (NameTextBlock =)",
    "insertText": "SNew(STextBlock) .Text(InPropertyEditor, &FPropertyEditor::GetDisplayName) .Font(NameFont)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} else { NameTextBlock =)",
    "insertText": "SNew(STextBlock) .Text(InPropertyEditor->GetDisplayName()) .Font(NameFont)"
  },
  {
    "label": "SetOverflowPolicy()",
    "kind": "Method",
    "detail": "Function (} NameTextBlock ->)",
    "insertText": "SetOverflowPolicy(ETextOverflowPolicy::Ellipsis)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> NameWidget = NameTextBlock ; const bool bInArray = PropertyNode ->)",
    "insertText": "GetProperty() != nullptr && PropertyNode->GetArrayIndex()"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (const bool bNameIsIndex = NameTextBlock ->)",
    "insertText": "GetText().EqualTo(FText::AsNumber(PropertyNode->GetArrayIndex()))"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (NameWidget =)",
    "insertText": "SNew(SHorizontalBox) + SHorizontalBox::Slot() .HAlign(HAlign_Left) .VAlign(VAlign_Center) .Padding(0, 0, 3, 0) .AutoWidth() [ SNew(STextBlock) .Text(NSLOCTEXT(\"PropertyEditor\", \"Index\", \"Index\")) .Font(NameFont) .ColorAndOpacity(FSlateColor::UseSubduedForeground()) ] + SHorizontalBox::Slot() .HAlign(HAlign_Left) .VAlign(VAlign_Center) .Padding(0, 0, 3, 0) .AutoWidth() [ SNew(STextBlock) .Text(NSLOCTEXT(\"PropertyEditor\", \"OpenBracket\", \"[\")) .Font(NameFont) .ColorAndOpacity(FSlateColor::UseSubduedForeground()) ] + SHorizontalBox::Slot() .HAlign(HAlign_Left) .VAlign(VAlign_Center) .Padding(0, 0, 3, 0) .AutoWidth() [ NameTextBlock.ToSharedRef() ] + SHorizontalBox::Slot() .HAlign(HAlign_Left) .VAlign(VAlign_Center) .AutoWidth() [ SNew(STextBlock) .Text(NSLOCTEXT(\"PropertyEditor\", \"CloseBracket\", \"]\")) .Font(NameFont) .ColorAndOpacity(FSlateColor::UseSubduedForeground())"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (} } ChildSlot [ NameWidget .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} private : FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnDoubleClicked .)",
    "insertText": "Execute()"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Unhandled()"
  }
]