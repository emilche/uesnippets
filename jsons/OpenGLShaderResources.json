[
  {
    "label": "FOpenGLLinkedProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLLinkedProgram"
  },
  {
    "label": "FOpenGLShaderVarying",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLShaderVarying"
  },
  {
    "label": "FOpenGLShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLShaderBindings"
  },
  {
    "label": "FOpenGLCodeHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLCodeHeader"
  },
  {
    "label": "FOpenGLLinkedProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLLinkedProgram"
  },
  {
    "label": "FOpenGLCompiledShaderKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLCompiledShaderKey"
  },
  {
    "label": "FOpenGLShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLShader"
  },
  {
    "label": "FOpenGLVertexShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLVertexShader"
  },
  {
    "label": "FOpenGLPixelShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLPixelShader"
  },
  {
    "label": "FOpenGLGeometryShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLGeometryShader"
  },
  {
    "label": "FOpenGLComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLComputeShader"
  },
  {
    "label": "FOpenGLShaderParameterCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLShaderParameterCache"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "FOpenGLProgramKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLProgramKey"
  },
  {
    "label": "FOpenGLShader()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "FOpenGLShader(TArrayView<const uint8> Code, const FSHAHash& Hash, GLenum TypeEnum, FShaderResourceTable& SRT, FRHIShader* RHIShader)"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile(GLenum TypeEnum)"
  },
  {
    "label": "ConditionalyCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalyCompile()"
  },
  {
    "label": "ConditionalyCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalyCompile()"
  },
  {
    "label": "ConditionalyCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalyCompile()"
  },
  {
    "label": "ConditionalyCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalyCompile()"
  },
  {
    "label": "NeedsTextureStage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsTextureStage(int32 TextureStageIndex)"
  },
  {
    "label": "MaxTextureStageUsed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxTextureStageUsed()"
  },
  {
    "label": "InitializeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeResources(int32 UniformArraySize)"
  },
  {
    "label": "MarkAllDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAllDirty()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint32 BufferIndex, uint32 ByteOffset, uint32 NumBytes, const void* NewValues)"
  },
  {
    "label": "CommitPackedGlobals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackedGlobals(const FOpenGLLinkedProgram* LinkedProgram, CrossCompiler::EShaderStage Stage)"
  },
  {
    "label": "CommitPackedUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackedUniformBuffers(FOpenGLLinkedProgram* LinkedProgram, CrossCompiler::EShaderStage Stage, FRHIUniformBuffer** UniformBuffers, const TArray<CrossCompiler::FUniformBufferCopyInfo>& UniformBuffersCopyInfo)"
  },
  {
    "label": "MarkDirtyRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirtyRange(uint32 NewStartVector, uint32 NewNumVectors)"
  }
]