[
  {
    "label": "FOpenGLLinkedProgram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLLinkedProgram"
  },
  {
    "label": "FOpenGLShaderVarying",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLShaderVarying"
  },
  {
    "label": "FOpenGLShaderBindings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLShaderBindings"
  },
  {
    "label": "FOpenGLCodeHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLCodeHeader"
  },
  {
    "label": "FOpenGLCompiledShaderKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLCompiledShaderKey"
  },
  {
    "label": "FOpenGLShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLShader"
  },
  {
    "label": "FOpenGLVertexShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLVertexShader"
  },
  {
    "label": "FOpenGLPixelShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLPixelShader"
  },
  {
    "label": "FOpenGLGeometryShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLGeometryShader"
  },
  {
    "label": "FOpenGLComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLComputeShader"
  },
  {
    "label": "FOpenGLShaderParameterCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLShaderParameterCache"
  },
  {
    "label": "FRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRange"
  },
  {
    "label": "FOpenGLProgramKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOpenGLProgramKey"
  },
  {
    "label": "DEBUG_GL_SHADERS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CrossCompilerCommon . h \" # include \" OpenGLThirdParty . h \" class FOpenGLLinkedProgram ; # define)",
    "insertText": "DEBUG_GL_SHADERS(UE_BUILD_DEBUG || UE_EDITOR)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OGL_MAX_UNIFORM_BUFFER_BINDINGS = 1 2,OGL_FIRST_UNIFORM_BUFFER = 0,OGL_UAV_NOT_SUPPORTED_FOR_GRAPHICS_UNIT = - 1,} ; struct FOpenGLShaderVarying { TArray<ANSICHAR> Varying ; int32 Location ; bool)",
    "insertText": "operator(const FOpenGLShaderVarying& A, const FOpenGLShaderVarying& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} return true ; } uint32)",
    "insertText": "GetTypeHash(const FOpenGLShaderVarying &Var)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Var.Location)"
  },
  {
    "label": "MemCrc32()",
    "kind": "Method",
    "detail": "Function (Hash ^ =)",
    "insertText": "MemCrc32(Var.Varying.GetData(), Var.Varying.Num() * sizeof(ANSICHAR))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<Var . Varying ; Ar<<Var . Location ; return Ar ; } struct FOpenGLShaderBindings { TArray<TArray<CrossCompiler::FPackedArrayInfo>> PackedUniformBuffers ; TArray<CrossCompiler::FPackedArrayInfo> PackedGlobalArrays ; TArray<FOpenGLShaderVarying> InputVaryings ; TArray<FOpenGLShaderVarying> OutputVaryings ; CrossCompiler::FShaderBindingInOutMask InOutMask ; uint8 NumSamplers = 0 ; uint8 NumUniformBuffers = 0 ; uint8 NumUAVs = 0 ; bool bFlattenUB = false ; FSHAHash VaryingHash ; FArchive&)",
    "insertText": "Serialize(FArchive& Ar, FShaderResourceTable& ShaderResourceTable)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<PackedUniformBuffers ; Ar<<PackedGlobalArrays ; Ar<<InputVaryings ; Ar<<OutputVaryings ; Ar<<ShaderResourceTable ; Ar<<InOutMask ; Ar<<NumSamplers ; Ar<<NumUniformBuffers ; Ar<<NumUAVs ; Ar<<bFlattenUB ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "HashVarying()",
    "kind": "Method",
    "detail": "Function (FSHA1 HashState ; auto)",
    "insertText": "HashVarying(FSHA1& InHashState, const TArray<FOpenGLShaderVarying>& InInputVaryings)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (InHashState .)",
    "insertText": "Update((const uint8*)&Varying.Location, sizeof(Varying.Location))"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (InHashState .)",
    "insertText": "Update((const uint8*)Varying.Varying.GetData(), Varying.Varying.Num() * sizeof(ANSICHAR))"
  },
  {
    "label": "HashVarying()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "HashVarying(HashState, InputVaryings)"
  },
  {
    "label": "HashVarying()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HashVarying(HashState, OutputVaryings)"
  },
  {
    "label": "Final()",
    "kind": "Method",
    "detail": "Function (HashState .)",
    "insertText": "Final()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (HashState .)",
    "insertText": "GetHash(&VaryingHash.Hash[0])"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (InputVaryings .)",
    "insertText": "Empty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} return Ar ; } struct FOpenGLCodeHeader { uint32 GlslMarker ; uint16 FrequencyMarker ; FOpenGLShaderBindings Bindings ; FString ShaderName ; TArray<CrossCompiler::FUniformBufferCopyInfo> UniformBuffersCopyInfo ; FArchive&)",
    "insertText": "Serialize(FArchive& Ar, FShaderResourceTable& SRT)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ar<<GlslMarker ; Ar<<FrequencyMarker ; Bindings .)",
    "insertText": "Serialize(Ar, SRT)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Ar<<ShaderName ; int32 NumInfos = UniformBuffersCopyInfo .)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<NumInfos ;)",
    "insertText": "if(Ar.IsSaving())"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (UniformBuffersCopyInfo .)",
    "insertText": "Empty(NumInfos)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CrossCompiler::FUniformBufferCopyInfo Info ; Ar<<Info ; UniformBuffersCopyInfo .)",
    "insertText": "Add(Info)"
  },
  {
    "label": "FOpenGLCompiledShaderKey()",
    "kind": "Method",
    "detail": "Function (} } return Ar ; } class FOpenGLLinkedProgram ; class FOpenGLCompiledShaderKey { public :)",
    "insertText": "FOpenGLCompiledShaderKey()"
  },
  {
    "label": "FOpenGLCompiledShaderKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenGLCompiledShaderKey(GLenum InTypeEnum, uint32 InCodeSize, uint32 InCodeCRC ) : TypeEnum(InTypeEnum) , CodeSize(InCodeSize) , CodeCRC(InCodeCRC)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FOpenGLCompiledShaderKey& A, const FOpenGLCompiledShaderKey& B)"
  },
  {
    "label": "GetCodeCRC()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCodeCRC()"
  },
  {
    "label": "FOpenGLShader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOpenGLShader()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Compile(GLenum TypeEnum)"
  },
  {
    "label": "FOpenGLVertexShader()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLVertexShader : public FRHIVertexShader,public FOpenGLShader { public : EShaderFrequency Frequency = SF_Vertex ;)",
    "insertText": "FOpenGLVertexShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "ConditionalyCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionalyCompile()"
  },
  {
    "label": "FOpenGLPixelShader()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLPixelShader : public FRHIPixelShader,public FOpenGLShader { public : EShaderFrequency Frequency = SF_Pixel ;)",
    "insertText": "FOpenGLPixelShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "FOpenGLGeometryShader()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLGeometryShader : public FRHIGeometryShader,public FOpenGLShader { public : EShaderFrequency Frequency = SF_Geometry ;)",
    "insertText": "FOpenGLGeometryShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "FOpenGLComputeShader()",
    "kind": "Method",
    "detail": "Function (} ; class FOpenGLComputeShader : public FRHIComputeShader,public FOpenGLShader { public : EShaderFrequency Frequency = SF_Compute ;)",
    "insertText": "FOpenGLComputeShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "NeedsTextureStage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsTextureStage(int32 TextureStageIndex)"
  },
  {
    "label": "MaxTextureStageUsed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "MaxTextureStageUsed()"
  },
  {
    "label": "GetTextureNeeds()",
    "kind": "Method",
    "detail": "Function (const TBitArray<>&)",
    "insertText": "GetTextureNeeds(int32& OutMaxTextureStageUsed)"
  },
  {
    "label": "GetUAVNeeds()",
    "kind": "Method",
    "detail": "Function (const TBitArray<>&)",
    "insertText": "GetUAVNeeds(int32& OutMaxUAVUnitUsed)"
  },
  {
    "label": "NeedsUAVStage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsUAVStage(int32 UAVStageIndex)"
  },
  {
    "label": "FOpenGLShaderParameterCache()",
    "kind": "Method",
    "detail": "Function (FOpenGLLinkedProgram* LinkedProgram = nullptr ; } ; class FOpenGLShaderParameterCache { public :)",
    "insertText": "FOpenGLShaderParameterCache()"
  },
  {
    "label": "InitializeResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeResources(int32 UniformArraySize)"
  },
  {
    "label": "MarkAllDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkAllDirty()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(uint32 BufferIndex, uint32 ByteOffset, uint32 NumBytes, const void* NewValues)"
  },
  {
    "label": "CommitPackedGlobals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackedGlobals(const FOpenGLLinkedProgram* LinkedProgram, CrossCompiler::EShaderStage Stage)"
  },
  {
    "label": "CommitPackedUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackedUniformBuffers(FOpenGLLinkedProgram* LinkedProgram, CrossCompiler::EShaderStage Stage, FRHIUniformBuffer** UniformBuffers, const TArray<CrossCompiler::FUniformBufferCopyInfo>& UniformBuffersCopyInfo)"
  },
  {
    "label": "MarkDirtyRange()",
    "kind": "Method",
    "detail": "Function (private : uint8* PackedGlobalUniforms [ CrossCompiler::PACKED_TYPEINDEX_MAX ] ; struct FRange { uint32 StartVector ; uint32 NumVectors ; void)",
    "insertText": "MarkDirtyRange(uint32 NewStartVector, uint32 NewNumVectors)"
  },
  {
    "label": "FOpenGLProgramKey()",
    "kind": "Method",
    "detail": "Function (} ; FRange PackedGlobalUniformDirty [ CrossCompiler::PACKED_TYPEINDEX_MAX ] ; uint8* PackedUniformsScratch [ CrossCompiler::PACKED_TYPEINDEX_MAX ] ; int32 GlobalUniformArraySize ; } ; class FOpenGLProgramKey { public :)",
    "insertText": "FOpenGLProgramKey()"
  },
  {
    "label": "FOpenGLProgramKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenGLProgramKey(FRHIComputeShader* ComputeShaderRHI)"
  },
  {
    "label": "FOpenGLProgramKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FOpenGLProgramKey(FRHIVertexShader* VertexShaderRHI, FRHIPixelShader* PixelShaderRHI, FRHIGeometryShader* GeometryShaderRHI)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FOpenGLProgramKey& A, const FOpenGLProgramKey& B)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bHashMatch = true ;)",
    "insertText": "for(uint32 i = 0; i < CrossCompiler::NUM_SHADER_STAGES && bHashMatch; ++i)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FOpenGLProgramKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FOpenGLProgramKey& HashSet)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Ar<<HashSet . ShaderHashes [ Stage ] ; } return Ar ; } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString retme ;)",
    "insertText": "if(ShaderHashes[CrossCompiler::SHADER_STAGE_VERTEX] != FSHAHash())"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (retme =)",
    "insertText": "TEXT(\"Program V_\") + ShaderHashes[CrossCompiler::SHADER_STAGE_VERTEX].ToString()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (retme + =)",
    "insertText": "TEXT(\"_P_\") + ShaderHashes[CrossCompiler::SHADER_STAGE_PIXEL].ToString()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (retme =)",
    "insertText": "TEXT(\"Program C_\") + ShaderHashes[CrossCompiler::SHADER_STAGE_COMPUTE].ToString()"
  }
]