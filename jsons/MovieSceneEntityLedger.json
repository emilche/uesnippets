[
  {
    "label": "IMovieScenePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieScenePlayer"
  },
  {
    "label": "UMovieSceneEntitySystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystem"
  },
  {
    "label": "UMovieSceneEntitySystemLinker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEntitySystemLinker"
  },
  {
    "label": "FMovieSceneEntityComponentField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEntityComponentField"
  },
  {
    "label": "FEntityImportSequenceParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityImportSequenceParams"
  },
  {
    "label": "IMovieScenePerEntityMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieScenePerEntityMutation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEntityLedger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityLedger"
  },
  {
    "label": "FImportedEntityData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportedEntityData"
  },
  {
    "label": "UpdateEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEntities(UMovieSceneEntitySystemLinker* Linker, const FEntityImportSequenceParams& ImportParams, const FMovieSceneEntityComponentField* EntityField, const FMovieSceneEvaluationFieldEntitySet& NewEntities, FMovieSceneEvaluationFieldEntitySet& OutPerTickConditionalEntities, TMap<uint32, bool>& ConditionResultCache)"
  },
  {
    "label": "UpdateOneShotEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOneShotEntities(UMovieSceneEntitySystemLinker* Linker, const FEntityImportSequenceParams& ImportParams, const FMovieSceneEntityComponentField* EntityField, const FMovieSceneEvaluationFieldEntitySet& NewEntities, TMap<uint32, bool>& ConditionResultCache)"
  },
  {
    "label": "UpdateConditionalEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConditionalEntities(UMovieSceneEntitySystemLinker* Linker, const FEntityImportSequenceParams& ImportParams, const FMovieSceneEntityComponentField* EntityField, const FMovieSceneEvaluationFieldEntitySet& ConditionalEntities)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "IsInvalidated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInvalidated()"
  },
  {
    "label": "HasImportedEntity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasImportedEntity(const FMovieSceneEvaluationFieldEntityKey& EntityKey)"
  },
  {
    "label": "FindImportedEntity()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntityID)",
    "insertText": "FindImportedEntity(const FMovieSceneEvaluationFieldEntityKey& EntityKey)"
  },
  {
    "label": "FindImportedEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindImportedEntities(TWeakObjectPtr<UObject> EntityOwner, TArray<FMovieSceneEntityID>& OutEntityIDs)"
  },
  {
    "label": "CanImportEntity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanImportEntity(UMovieSceneEntitySystemLinker* Linker, const FEntityImportSequenceParams& ImportParams, const FMovieSceneEntityComponentField* EntityField, const FMovieSceneEvaluationFieldEntityQuery& Query, FMovieSceneEvaluationFieldEntitySet& OutPerTickConditionalEntities, TMap<uint32, bool>& ConditionResultCache, bool bUpdatingPerTickEntities=false)"
  },
  {
    "label": "ImportEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportEntity(UMovieSceneEntitySystemLinker* Linker, const FEntityImportSequenceParams& ImportParams, const FMovieSceneEntityComponentField* EntityField, const FMovieSceneEvaluationFieldEntityQuery& Query, FMovieSceneEvaluationFieldEntitySet& OutPerTickConditionalEntities, TMap<uint32, bool>& ConditionResultCache)"
  },
  {
    "label": "UnlinkEverything()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkEverything(UMovieSceneEntitySystemLinker* Linker, EUnlinkEverythingMode Garbage = EUnlinkEverythingMode::Normal)"
  },
  {
    "label": "UnlinkOneShots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkOneShots(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(UMovieSceneEntitySystemLinker* Linker, const FEntityComponentFilter& Filter)"
  },
  {
    "label": "MutateAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MutateAll(UMovieSceneEntitySystemLinker* Linker, const FEntityComponentFilter& Filter, const IMovieScenePerEntityMutation& Mutation)"
  },
  {
    "label": "TagGarbage()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "TagGarbage(UMovieSceneEntitySystemLinker* Linker)"
  },
  {
    "label": "CleanupLinkerEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupLinkerEntities(const TSet<FMovieSceneEntityID>& LinkerEntities)"
  }
]