[
  {
    "label": "CordRepFlat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CordRepFlat"
  },
  {
    "label": "Large",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Large"
  },
  {
    "label": "offsetof()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_INTERNAL_CORD_REP_FLAT_H_ # define ABSL_STRINGS_INTERNAL_CORD_REP_FLAT_H_ # include<cassert> # include<cstddef> # include<cstdint> # include<memory> # include \" absl / base / config . h \" # include \" absl / base / macros . h \" # include \" absl / strings / internal / cord_internal . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cord_internal { size_t kFlatOverhead =)",
    "insertText": "offsetof(CordRep, storage)"
  },
  {
    "label": "AllocatedSizeToTagUnchecked()",
    "kind": "Method",
    "detail": "Function (size_t kMinFlatSize = 3 2 ; size_t kMaxFlatSize = 4 0 9 6 ; size_t kMaxFlatLength = kMaxFlatSize - kFlatOverhead ; size_t kMinFlatLength = kMinFlatSize - kFlatOverhead ; size_t kMaxLargeFlatSize = 2 5 6* 1 0 2 4 ; size_t kMaxLargeFlatLength = kMaxLargeFlatSize - kFlatOverhead ; uint8_t kTagBase = FLAT - 4 ; uint8_t)",
    "insertText": "AllocatedSizeToTagUnchecked(size_t size)"
  },
  {
    "label": "TagToAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "TagToAllocatedSize(uint8_t tag)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(AllocatedSizeToTagUnchecked(kMinFlatSize) == FLAT, \"\")"
  },
  {
    "label": "RoundUp()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "RoundUp(size_t n, size_t m)"
  },
  {
    "label": "RoundUpForTag()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "RoundUpForTag(size_t size)"
  },
  {
    "label": "AllocatedSizeToTag()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "AllocatedSizeToTag(size_t size)"
  },
  {
    "label": "AllocatedSizeToTagUnchecked()",
    "kind": "Method",
    "detail": "Function (const uint8_t tag =)",
    "insertText": "AllocatedSizeToTagUnchecked(size)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(tag <= MAX_FLAT_TAG)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "static_assert(TagToAllocatedSize(MAX_FLAT_TAG) == kMaxLargeFlatSize, \"Bad tag logic\")"
  },
  {
    "label": "NewImpl()",
    "kind": "Method",
    "detail": "Function (struct CordRepFlat : public CordRep { struct Large { } ; template<size_t max_flat_size,. . . Args> CordRepFlat*)",
    "insertText": "NewImpl(size_t len, Args... args ABSL_ATTRIBUTE_UNUSED)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (len = kMinFlatLength ; } else)",
    "insertText": "if(len > max_flat_size - kFlatOverhead)"
  },
  {
    "label": "RoundUpForTag()",
    "kind": "Method",
    "detail": "Function (len = max_flat_size - kFlatOverhead ; } const size_t size =)",
    "insertText": "RoundUpForTag(len + kFlatOverhead)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* const raw_rep =::operator)",
    "insertText": "new(size)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (CordRepFlat* rep =)",
    "insertText": "new(raw_rep) CordRepFlat()"
  },
  {
    "label": "AllocatedSizeToTag()",
    "kind": "Method",
    "detail": "Function (rep -> tag =)",
    "insertText": "AllocatedSizeToTag(size)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} CordRepFlat*)",
    "insertText": "New(Large, size_t len)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Delete(CordRep*rep)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(rep->tag >= FLAT && rep->tag <= MAX_FLAT_TAG)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__cpp_sized_deallocation) size_t size = TagToAllocatedSize(rep->tag)"
  },
  {
    "label": "CordRep()",
    "kind": "Method",
    "detail": "Function (rep -> ~)",
    "insertText": "CordRep()"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (::operator)",
    "insertText": "delete(rep, size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (::operator)",
    "insertText": "delete(rep)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# endif } CordRepFlat*)",
    "insertText": "Create(absl::string_view data, size_t extra = 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(data.size() <= kMaxFlatLength)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (CordRepFlat* flat =)",
    "insertText": "New(data.size() + (std::min)(extra, kMaxFlatLength))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(flat->Data(), data.data(), data.size())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (flat -> length = data .)",
    "insertText": "size()"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "Data()"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "Capacity()"
  },
  {
    "label": "AllocatedSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "AllocatedSize()"
  },
  {
    "label": "flat()",
    "kind": "Method",
    "detail": "Function (} } ; CordRepFlat*)",
    "insertText": "flat()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(tag >= FLAT && tag <= MAX_FLAT_TAG)"
  }
]