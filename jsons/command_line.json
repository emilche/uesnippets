[
  {
    "label": "works",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "works"
  },
  {
    "label": "DuplicateSwitchHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplicateSwitchHandler"
  },
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "NoProgram",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NoProgram"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "CommandLine()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "CommandLine(NoProgram no_program)"
  },
  {
    "label": "CommandLine()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "CommandLine(const FilePath& program)"
  },
  {
    "label": "CommandLine()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "CommandLine(const StringVector& argv)"
  },
  {
    "label": "set_slash_is_not_a_switch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_slash_is_not_a_switch()"
  },
  {
    "label": "InitUsingArgvForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitUsingArgvForTesting(int argc, const char* const* argv)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(int argc, const char* const* argv)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "InitializedForCurrentProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializedForCurrentProcess()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (CommandLine)",
    "insertText": "FromString(StringPieceType command_line)"
  },
  {
    "label": "InitFromArgv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromArgv(int argc, const CharType* const* argv)"
  },
  {
    "label": "InitFromArgv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFromArgv(const StringVector& argv)"
  },
  {
    "label": "SetProgram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProgram(const FilePath& program)"
  },
  {
    "label": "AppendSwitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSwitch(StringPiece switch_string)"
  },
  {
    "label": "AppendSwitchPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSwitchPath(StringPiece switch_string, const FilePath& path)"
  },
  {
    "label": "AppendSwitchNative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSwitchNative(StringPiece switch_string, StringPieceType value)"
  },
  {
    "label": "AppendSwitchASCII()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSwitchASCII(StringPiece switch_string, StringPiece value)"
  },
  {
    "label": "RemoveSwitch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSwitch(const base::StringPiece switch_key_without_prefix)"
  },
  {
    "label": "CopySwitchesFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySwitchesFrom(const CommandLine& source,\n                        const char* const switches[],\n                        size_t count)"
  },
  {
    "label": "AppendArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendArg(StringPiece value)"
  },
  {
    "label": "AppendArgPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendArgPath(const FilePath& value)"
  },
  {
    "label": "AppendArgNative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendArgNative(StringPieceType value)"
  },
  {
    "label": "AppendArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendArguments(const CommandLine& other, bool include_program)"
  },
  {
    "label": "PrependWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependWrapper(StringPieceType wrapper)"
  },
  {
    "label": "ParseFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseFromString(StringPieceType command_line)"
  },
  {
    "label": "SetDuplicateSwitchHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDuplicateSwitchHandler(\n      std::unique_ptr<DuplicateSwitchHandler>)"
  },
  {
    "label": "AppendSwitchesAndArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSwitchesAndArguments(const StringVector& argv)"
  },
  {
    "label": "ParseAsSingleArgument()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseAsSingleArgument(const StringType& single_arg_switch_string)"
  }
]