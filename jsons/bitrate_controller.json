[
  {
    "label": "PccBitrateController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PccBitrateController"
  },
  {
    "label": "PccBitrateController()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_CONGESTION_CONTROLLER_PCC_BITRATE_CONTROLLER_H_ # define MODULES_CONGESTION_CONTROLLER_PCC_BITRATE_CONTROLLER_H_ # include<stdint . h> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / units / data_rate . h \" # include \" modules / congestion_controller / pcc / monitor_interval . h \" # include \" modules / congestion_controller / pcc / utility_function . h \" namespace webrtc { namespace pcc { class PccBitrateController { public :)",
    "insertText": "PccBitrateController(double initial_conversion_factor, double initial_dynamic_boundary, double dynamic_boundary_increment, double rtt_gradient_coefficient, double loss_coefficient, double throughput_coefficient, double throughput_power, double rtt_gradient_threshold, double delay_gradient_negative_bound)"
  },
  {
    "label": "PccBitrateController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PccBitrateController(double initial_conversion_factor, double initial_dynamic_boundary, double dynamic_boundary_increment, std::unique_ptr<PccUtilityFunctionInterface> utility_function)"
  },
  {
    "label": "ComputeRateUpdateForSlowStartMode()",
    "kind": "Method",
    "detail": "Function (absl::optional<DataRate>)",
    "insertText": "ComputeRateUpdateForSlowStartMode(const PccMonitorInterval& monitor_interval)"
  },
  {
    "label": "ComputeRateUpdateForOnlineLearningMode()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "ComputeRateUpdateForOnlineLearningMode(const std::vector<PccMonitorInterval>& block, DataRate bandwidth_estimate)"
  },
  {
    "label": "PccBitrateController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PccBitrateController()"
  },
  {
    "label": "ApplyDynamicBoundary()",
    "kind": "Method",
    "detail": "Function (private : double)",
    "insertText": "ApplyDynamicBoundary(double rate_change, double bitrate)"
  }
]