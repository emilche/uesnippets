[
  {
    "label": "Scheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scheduler"
  },
  {
    "label": "DelayTimerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DelayTimerBase"
  },
  {
    "label": "Calculator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Calculator"
  },
  {
    "label": "RawPtrMayDangle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawPtrMayDangle"
  },
  {
    "label": "RawPtrBanDanglingIfSupported",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawPtrBanDanglingIfSupported"
  },
  {
    "label": "RawPtrNoOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawPtrNoOp"
  },
  {
    "label": "RawPtrTypeToImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawPtrTypeToImpl"
  },
  {
    "label": "RawPtrNoOpImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawPtrNoOpImpl"
  },
  {
    "label": "MTECheckedPtrImplPartitionAllocSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MTECheckedPtrImplPartitionAllocSupport"
  },
  {
    "label": "MTECheckedPtrImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MTECheckedPtrImpl"
  },
  {
    "label": "BackupRefPtrImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BackupRefPtrImpl"
  },
  {
    "label": "AsanBackupRefPtrImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AsanBackupRefPtrImpl"
  },
  {
    "label": "Super",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Super"
  },
  {
    "label": "RawPtrCountingImplWrapperForTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawPtrCountingImplWrapperForTest"
  },
  {
    "label": "IsSupportedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsSupportedType"
  },
  {
    "label": "IsRawPtrCountingImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRawPtrCountingImpl"
  },
  {
    "label": "PA_TRIVIAL_ABI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PA_TRIVIAL_ABI"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "raw_ptr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ptr"
  },
  {
    "label": "IsRawPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRawPtr"
  },
  {
    "label": "IsPointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsPointer"
  },
  {
    "label": "RemovePointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RemovePointer"
  },
  {
    "label": "less",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "less"
  },
  {
    "label": "iterator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iterator_traits"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_RAW_PTR_H_ # define BASE_MEMORY_RAW_PTR_H_ # include<stddef . h> # include<stdint . h> # include<climits> # include<cstddef> # include<functional> # include<type_traits> # include<utility> # include \" base / allocator / buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / compiler_specific . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / debug / debugging_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_buildflags . h \" # include \" base / allocator / partition_allocator / partition_alloc_config . h \" # include \" base / base_export . h \" # include \" build / build_config . h \" # include \" build / buildflag . h \" # if)",
    "insertText": "BUILDFLAG(IS_NACL) #include \"base/check.h\" #define PA_RAW_PTR_CHECK(condition) CHECK(condition) #else #include \"base/allocator/partition_allocator/partition_alloc_base/check.h\" #define PA_RAW_PTR_CHECK(condition) PA_BASE_CHECK(condition) #endif #if BUILDFLAG(PA_USE_BASE_TRACING) #include \"base/trace_event/base_tracing_forward.h\" #endif #if BUILDFLAG(USE_MTE_CHECKED_PTR) && \\ defined(PA_ENABLE_MTE_CHECKED_PTR_SUPPORT_WITH_64_BITS_POINTERS) #include \"base/allocator/partition_allocator/partition_tag.h\" #include \"base/allocator/partition_allocator/partition_tag_types.h\" #include \"base/allocator/partition_allocator/tagging.h\" #define RAW_PTR_USE_MTE_CHECKED_PTR #endif #if BUILDFLAG(USE_BACKUP_REF_PTR) || defined(RAW_PTR_USE_MTE_CHECKED_PTR) #include \"base/allocator/partition_allocator/address_pool_manager_bitmap.h\" #include \"base/allocator/partition_allocator/partition_address_space.h\" #include \"base/allocator/partition_allocator/partition_alloc_constants.h\" #endif #if BUILDFLAG(IS_WIN)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (class Scheduler ; } namespace base::internal { class DelayTimerBase ; } namespace content::responsiveness { class Calculator ; } namespace base { struct RawPtrMayDangle { } ; struct RawPtrBanDanglingIfSupported { } ; struct RawPtrNoOp { } ; namespace raw_ptr_traits { template<T> struct RawPtrTypeToImpl ; } namespace internal { template<Z> bool offset_type = std::is_integral_v<Z>&&)",
    "insertText": "sizeof(Z) <= sizeof(ptrdiff_t)"
  },
  {
    "label": "WrapRawPtr()",
    "kind": "Method",
    "detail": "Function (struct RawPtrNoOpImpl { template<T> PA_ALWAYS_INLINE T*)",
    "insertText": "WrapRawPtr(T* ptr)"
  },
  {
    "label": "SafelyUnwrapPtrForDereference()",
    "kind": "Method",
    "detail": "Function (} template<T> PA_ALWAYS_INLINE T*)",
    "insertText": "SafelyUnwrapPtrForDereference(T* wrapped_ptr)"
  },
  {
    "label": "IncrementLessCountForTest()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "IncrementLessCountForTest()"
  },
  {
    "label": "IncrementPointerToMemberOperatorCountForTest()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "IncrementPointerToMemberOperatorCountForTest()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if)",
    "insertText": "defined(RAW_PTR_USE_MTE_CHECKED_PTR)"
  },
  {
    "label": "kAddressMask()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "kAddressMask(1ull << kValidAddressBits)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int kTagBits =)",
    "insertText": "sizeof(uintptr_t)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uintptr_t kTagMask = ~ kAddressMask& partition_alloc::internal::kPtrUntagMask ; int kTopBitShift = 6 3 ; uintptr_t kTopBit = 1 ull<<kTopBitShift ;)",
    "insertText": "static_assert(kTopBit << 1 == 0, \"kTopBit should really be the top bit\")"
  },
  {
    "label": "EnabledForPtr()",
    "kind": "Method",
    "detail": "Function (struct MTECheckedPtrImplPartitionAllocSupport { template<T> PA_ALWAYS_INLINE bool)",
    "insertText": "EnabledForPtr(T* ptr)"
  },
  {
    "label": "UntagPtr()",
    "kind": "Method",
    "detail": "Function (auto addr =)",
    "insertText": "UntagPtr(ptr)"
  },
  {
    "label": "TagPointer()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void*)",
    "insertText": "TagPointer(uintptr_t addr)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<PartitionAllocSupport> struct MTECheckedPtrImpl {)",
    "insertText": "static_assert(sizeof(void*) >= 8, \"Need 64-bit pointers\")"
  },
  {
    "label": "PA_BASE_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_BASE_DCHECK(ExtractTag(addr) == 0ull)"
  },
  {
    "label": "tag()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "tag(static_cast<volatile partition_alloc::PartitionTag*>( PartitionAllocSupport::TagPointer(addr)))"
  },
  {
    "label": "PA_BASE_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_BASE_DCHECK(tag)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (tag<<= kValidAddressBits ; addr | = tag ; return static_cast<)",
    "insertText": "T(partition_alloc::internal::TagAddr(addr))"
  },
  {
    "label": "ReleaseWrappedPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> PA_ALWAYS_INLINE void)",
    "insertText": "ReleaseWrappedPtr(T*)"
  },
  {
    "label": "UntagPtr()",
    "kind": "Method",
    "detail": "Function (uintptr_t wrapped_addr =)",
    "insertText": "UntagPtr(wrapped_ptr)"
  },
  {
    "label": "ExtractTag()",
    "kind": "Method",
    "detail": "Function (uintptr_t tag =)",
    "insertText": "ExtractTag(wrapped_addr)"
  },
  {
    "label": "PartitionTag()",
    "kind": "Method",
    "detail": "Function (uintptr_t read_tag =* static_cast<volatile)",
    "insertText": "PartitionTag(PartitionAllocSupport::TagPointer(ExtractAddress(wrapped_addr)))"
  },
  {
    "label": "SafelyUnwrapPtrForExtraction()",
    "kind": "Method",
    "detail": "Function (} return wrapped_ptr ; } template<T> PA_ALWAYS_INLINE T*)",
    "insertText": "SafelyUnwrapPtrForExtraction(T* wrapped_ptr)"
  },
  {
    "label": "UnsafelyUnwrapPtrForComparison()",
    "kind": "Method",
    "detail": "Function (} template<T> PA_ALWAYS_INLINE T*)",
    "insertText": "UnsafelyUnwrapPtrForComparison(T* wrapped_ptr)"
  },
  {
    "label": "Upcast()",
    "kind": "Method",
    "detail": "Function (} template<To,From> PA_ALWAYS_INLINE To*)",
    "insertText": "Upcast(From* wrapped_ptr)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (} template<T,Z,= std::enable_if_t<offset_type<Z>,void>> PA_ALWAYS_INLINE T*)",
    "insertText": "Advance(T* wrapped_ptr, Z delta_elems)"
  },
  {
    "label": "ExtractTag()",
    "kind": "Method",
    "detail": "Function (const uintptr_t tag1 =)",
    "insertText": "ExtractTag(partition_alloc::UntagPtr(wrapped_ptr1))"
  },
  {
    "label": "ExtractTag()",
    "kind": "Method",
    "detail": "Function (const uintptr_t tag2 =)",
    "insertText": "ExtractTag(partition_alloc::UntagPtr(wrapped_ptr2))"
  },
  {
    "label": "PA_BASE_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_BASE_CHECK(tag1 == tag2)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} template<T> PA_ALWAYS_INLINE T*)",
    "insertText": "Duplicate(T* wrapped_ptr)"
  },
  {
    "label": "ExtractAddress()",
    "kind": "Method",
    "detail": "Function (} private : PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ExtractAddress(uintptr_t wrapped_ptr)"
  },
  {
    "label": "ExtractTag()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE uintptr_t)",
    "insertText": "ExtractTag(uintptr_t wrapped_ptr)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # if)",
    "insertText": "BUILDFLAG(USE_BACKUP_REF_PTR) #if BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) BASE_EXPORT void CheckThatAddressIsntWithinFirstPartitionPage( uintptr_t address)"
  },
  {
    "label": "IsSupportedAndNotNull()",
    "kind": "Method",
    "detail": "Function (# endif template<bool AllowDangling = false> struct BackupRefPtrImpl { PA_ALWAYS_INLINE bool)",
    "insertText": "IsSupportedAndNotNull(uintptr_t address)"
  },
  {
    "label": "PA_HAS_BUILTIN()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "PA_HAS_BUILTIN(__builtin_constant_p) if (__builtin_constant_p(address == 0) && (address == 0))"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) PA_BASE_CHECK( !partition_alloc::IsManagedByPartitionAllocBRPPool(address))"
  },
  {
    "label": "IsManagedByPartitionAllocBRPPool()",
    "kind": "Method",
    "detail": "Function (# endif return false ; } # endif bool is_in_brp_pool =)",
    "insertText": "IsManagedByPartitionAllocBRPPool(address)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) if (is_in_brp_pool)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) PA_BASE_CHECK(ptr != nullptr)"
  },
  {
    "label": "AcquireInternal()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "AcquireInternal(address)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} else { # if !)",
    "insertText": "defined(PA_HAS_64_BITS_POINTERS) #if PA_HAS_BUILTIN(__builtin_constant_p) bool known_constant_zero = __builtin_constant_p(address == 0) && (address == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# else bool known_constant_zero = false ; # endif)",
    "insertText": "if(!known_constant_zero)"
  },
  {
    "label": "BanSuperPageFromBRPPool()",
    "kind": "Method",
    "detail": "Function (partition_alloc::internal::)",
    "insertText": "BanSuperPageFromBRPPool(address)"
  },
  {
    "label": "ReleaseWrappedPtr()",
    "kind": "Method",
    "detail": "Function (} # endif } return ptr ; } template<T> PA_ALWAYS_INLINE void)",
    "insertText": "ReleaseWrappedPtr(T* wrapped_ptr)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) PA_BASE_CHECK(wrapped_ptr != nullptr)"
  },
  {
    "label": "ReleaseInternal()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "ReleaseInternal(address)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) uintptr_t address = partition_alloc::UntagPtr(wrapped_ptr)"
  },
  {
    "label": "PA_BASE_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_BASE_CHECK(wrapped_ptr != nullptr)"
  },
  {
    "label": "PA_BASE_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_BASE_CHECK(IsPointeeAlive(address))"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PUT_REF_COUNT_IN_PREVIOUS_SLOT) uintptr_t address = partition_alloc::UntagPtr(wrapped_ptr)"
  },
  {
    "label": "GetDeltaElems()",
    "kind": "Method",
    "detail": "Function (# endif } template<T> PA_ALWAYS_INLINE ptrdiff_t)",
    "insertText": "GetDeltaElems(T* wrapped_ptr1, T* wrapped_ptr2)"
  },
  {
    "label": "UntagPtr()",
    "kind": "Method",
    "detail": "Function (uintptr_t address1 =)",
    "insertText": "UntagPtr(wrapped_ptr1)"
  },
  {
    "label": "UntagPtr()",
    "kind": "Method",
    "detail": "Function (uintptr_t address2 =)",
    "insertText": "UntagPtr(wrapped_ptr2)"
  },
  {
    "label": "PA_BASE_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_BASE_CHECK(IsSupportedAndNotNull(address2))"
  },
  {
    "label": "PA_BASE_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_BASE_CHECK(IsValidDelta(address2, address1 - address2))"
  },
  {
    "label": "PA_BASE_CHECK()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PA_BASE_CHECK(!IsSupportedAndNotNull(address2))"
  },
  {
    "label": "ReportIfDangling()",
    "kind": "Method",
    "detail": "Function (} template<T> PA_ALWAYS_INLINE void)",
    "insertText": "ReportIfDangling(T* wrapped_ptr)"
  },
  {
    "label": "ReportIfDanglingInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportIfDanglingInternal(partition_alloc::UntagPtr(wrapped_ptr))"
  },
  {
    "label": "IncrementSwapCountForTest()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "IncrementSwapCountForTest()"
  },
  {
    "label": "AcquireInternal()",
    "kind": "Method",
    "detail": "Function (} private : BASE_EXPORT PA_NOINLINE void)",
    "insertText": "AcquireInternal(uintptr_t address)"
  },
  {
    "label": "ReleaseInternal()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT PA_NOINLINE void)",
    "insertText": "ReleaseInternal(uintptr_t address)"
  },
  {
    "label": "IsPointeeAlive()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT PA_NOINLINE bool)",
    "insertText": "IsPointeeAlive(uintptr_t address)"
  },
  {
    "label": "ReportIfDanglingInternal()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT PA_NOINLINE void)",
    "insertText": "ReportIfDanglingInternal(uintptr_t address)"
  },
  {
    "label": "IsValidDelta()",
    "kind": "Method",
    "detail": "Function (template<Z,= std::enable_if_t<offset_type<Z>,void>> PA_ALWAYS_INLINE bool)",
    "insertText": "IsValidDelta(uintptr_t address, Z delta_in_bytes)"
  },
  {
    "label": "IsValidSignedDelta()",
    "kind": "Method",
    "detail": "Function (} BASE_EXPORT PA_NOINLINE bool)",
    "insertText": "IsValidSignedDelta(uintptr_t address, ptrdiff_t delta_in_bytes)"
  },
  {
    "label": "IsValidUnsignedDelta()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT PA_NOINLINE bool)",
    "insertText": "IsValidUnsignedDelta(uintptr_t address, size_t delta_in_bytes)"
  },
  {
    "label": "AsanCheckIfValidInstantiation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsanCheckIfValidInstantiation(ptr)"
  },
  {
    "label": "AsanCheckIfValidDereference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsanCheckIfValidDereference(wrapped_ptr)"
  },
  {
    "label": "AsanCheckIfValidExtraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsanCheckIfValidExtraction(wrapped_ptr)"
  },
  {
    "label": "AsanCheckIfValidInstantiation()",
    "kind": "Method",
    "detail": "Function (} private : BASE_EXPORT PA_NOINLINE void)",
    "insertText": "AsanCheckIfValidInstantiation(void const volatile* ptr)"
  },
  {
    "label": "AsanCheckIfValidDereference()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT PA_NOINLINE void)",
    "insertText": "AsanCheckIfValidDereference(void const volatile* ptr)"
  },
  {
    "label": "AsanCheckIfValidExtraction()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT PA_NOINLINE void)",
    "insertText": "AsanCheckIfValidExtraction(void const volatile* ptr)"
  },
  {
    "label": "WrapRawPtr()",
    "kind": "Method",
    "detail": "Function (+ + wrap_raw_ptr_cnt ; return)",
    "insertText": "WrapRawPtr(ptr)"
  },
  {
    "label": "ReleaseWrappedPtr()",
    "kind": "Method",
    "detail": "Function (} template<T> PA_ALWAYS_INLINE void)",
    "insertText": "ReleaseWrappedPtr(T* ptr)"
  },
  {
    "label": "ReleaseWrappedPtr()",
    "kind": "Method",
    "detail": "Function (+ + release_wrapped_ptr_cnt ;)",
    "insertText": "ReleaseWrappedPtr(ptr)"
  },
  {
    "label": "SafelyUnwrapPtrForDereference()",
    "kind": "Method",
    "detail": "Function (+ + get_for_dereference_cnt ; return)",
    "insertText": "SafelyUnwrapPtrForDereference(wrapped_ptr)"
  },
  {
    "label": "SafelyUnwrapPtrForExtraction()",
    "kind": "Method",
    "detail": "Function (+ + get_for_extraction_cnt ; return)",
    "insertText": "SafelyUnwrapPtrForExtraction(wrapped_ptr)"
  },
  {
    "label": "UnsafelyUnwrapPtrForComparison()",
    "kind": "Method",
    "detail": "Function (+ + get_for_comparison_cnt ; return)",
    "insertText": "UnsafelyUnwrapPtrForComparison(wrapped_ptr)"
  },
  {
    "label": "ClearCounters()",
    "kind": "Method",
    "detail": "Function (+ + pointer_to_member_operator_cnt ; } void)",
    "insertText": "ClearCounters()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (wrap_raw_ptr_cnt = 0 ; release_wrapped_ptr_cnt = 0 ; get_for_dereference_cnt = 0 ; get_for_extraction_cnt = 0 ; get_for_comparison_cnt = 0 ; wrapped_ptr_swap_cnt = 0 ; wrapped_ptr_less_cnt = 0 ; pointer_to_member_operator_cnt = 0 ; } int wrap_raw_ptr_cnt = INT_MIN ; int release_wrapped_ptr_cnt = INT_MIN ; int get_for_dereference_cnt = INT_MIN ; int get_for_extraction_cnt = INT_MIN ; int get_for_comparison_cnt = INT_MIN ; int wrapped_ptr_swap_cnt = INT_MIN ; int wrapped_ptr_less_cnt = INT_MIN ; int pointer_to_member_operator_cnt = INT_MIN ; } ; } namespace raw_ptr_traits { template<T,SFINAE = void> struct IsSupportedType { bool value = true ; } ; template<T> struct IsSupportedType<T,std::enable_if_t<std::is_function<T>::value>> { bool value = false ; } ; template<> struct IsSupportedType<cc::Scheduler> { bool value = false ; } ; template<> struct IsSupportedType<base::internal::DelayTimerBase> { bool value = false ; } ; template<> struct IsSupportedType<content::responsiveness::Calculator> { bool value = false ; } ; template<T> struct IsRawPtrCountingImpl : std::false_type { } ; template<T> struct IsRawPtrCountingImpl<internal::RawPtrCountingImplWrapperForTest<T>> : std::true_type { } ; # if __OBJC__ template<T> struct IsSupportedType<T,std::enable_if_t<std::is_convertible<T*,id>::value>> { bool value = false ; } ; # endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) #define PA_WINDOWS_HANDLE_TYPE(name)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (\\ bool value = false ; \\ } ; # include \" base / allocator / partition_allocator / partition_alloc_base / win / win_handle_types_list . inc \" # undef PA_WINDOWS_HANDLE_TYPE # endif template<T> struct RawPtrTypeToImpl { } ; template<T> struct RawPtrTypeToImpl<internal::RawPtrCountingImplWrapperForTest<T>> { using Impl = internal::RawPtrCountingImplWrapperForTest<T> ; } ; template<> struct RawPtrTypeToImpl<RawPtrMayDangle> { # if)",
    "insertText": "BUILDFLAG(USE_BACKUP_REF_PTR)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(USE_ASAN_BACKUP_REF_PTR)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# else using Impl = internal::RawPtrNoOpImpl ; # endif } ; template<> struct RawPtrTypeToImpl<RawPtrNoOp> { using Impl = internal::RawPtrNoOpImpl ; } ; } using DefaultRawPtrType = RawPtrBanDanglingIfSupported ; template<T,RawPtrType = DefaultRawPtrType> class PA_TRIVIAL_ABI PA_GSL_POINTER raw_ptr { using Impl = raw_ptr_traits::RawPtrTypeToImpl<RawPtrType>::Impl ; using DanglingRawPtr = std::conditional_t<raw_ptr_traits::IsRawPtrCountingImpl<Impl>::value,raw_ptr<T,internal::RawPtrCountingImplWrapperForTest<RawPtrMayDangle>>,raw_ptr<T,RawPtrMayDangle>> ; # if)",
    "insertText": "BUILDFLAG(IS_NACL) static_assert(std::is_same_v<Impl, internal::RawPtrNoOpImpl>)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "static_assert(raw_ptr_traits::IsSupportedType<T>::value, \"raw_ptr<T> doesn't work with this kind of pointee type T\")"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_BACKUP_REF_PTR) constexpr PA_ALWAYS_INLINE raw_ptr() noexcept : wrapped_ptr_(nullptr)"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE)",
    "insertText": "raw_ptr(const raw_ptr& p) noexcept : wrapped_ptr_(Impl::Duplicate(p.wrapped_ptr_))"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE)",
    "insertText": "raw_ptr(raw_ptr&& p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ = p . wrapped_ptr_ ; p . wrapped_ptr_ = nullptr ; } PA_ALWAYS_INLINE raw_ptr&)",
    "insertText": "operator(const raw_ptr& p)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (T* new_ptr =)",
    "insertText": "Duplicate(p.wrapped_ptr_)"
  },
  {
    "label": "ReleaseWrappedPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseWrappedPtr(wrapped_ptr_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ = new_ptr ; return* this ; } PA_ALWAYS_INLINE raw_ptr&)",
    "insertText": "operator(raw_ptr&& p)"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ = p . wrapped_ptr_ ; p . wrapped_ptr_ = nullptr ; } return* this ; } PA_ALWAYS_INLINE ~)",
    "insertText": "raw_ptr()"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE)",
    "insertText": "raw_ptr(const raw_ptr&)"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE)",
    "insertText": "raw_ptr(raw_ptr&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE raw_ptr&)",
    "insertText": "operator(const raw_ptr&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE raw_ptr&)",
    "insertText": "operator(raw_ptr&&)"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (# endif PA_ALWAYS_INLINE)",
    "insertText": "raw_ptr(std::nullptr_t) noexcept : wrapped_ptr_(nullptr)"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE)",
    "insertText": "raw_ptr(T* p) noexcept : wrapped_ptr_(Impl::WrapRawPtr(p))"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (} template<U,Unused = std::enable_if_t<std::is_convertible<U*,T*>::value&& ! std::is_void<std::remove_cv<T>::type>::value>> PA_ALWAYS_INLINE)",
    "insertText": "raw_ptr(const raw_ptr<U, RawPtrType>& ptr) noexcept : wrapped_ptr_( Impl::Duplicate(Impl::template Upcast<T, U>(ptr.wrapped_ptr_)))"
  },
  {
    "label": "raw_ptr()",
    "kind": "Method",
    "detail": "Function (} template<U,Unused = std::enable_if_t<std::is_convertible<U*,T*>::value&& ! std::is_void<std::remove_cv<T>::type>::value>> PA_ALWAYS_INLINE)",
    "insertText": "raw_ptr(raw_ptr<U, RawPtrType>&& ptr) noexcept : wrapped_ptr_(Impl::template Upcast<T, U>(ptr.wrapped_ptr_))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } PA_ALWAYS_INLINE raw_ptr&)",
    "insertText": "operator(std::nullptr_t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ = nullptr ; return* this ; } PA_ALWAYS_INLINE raw_ptr&)",
    "insertText": "operator(T* p)"
  },
  {
    "label": "WrapRawPtr()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ =)",
    "insertText": "WrapRawPtr(p)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(PA_DCHECK_IS_ON) || BUILDFLAG(ENABLE_BACKUP_REF_PTR_SLOW_CHECKS) PA_RAW_PTR_CHECK(reinterpret_cast<uintptr_t>(this) != reinterpret_cast<uintptr_t>(&ptr))"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ =)",
    "insertText": "Duplicate(Impl::template Upcast<T, U>(ptr.wrapped_ptr_))"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ = Impl::template Upcast<T,)",
    "insertText": "U(ptr.wrapped_ptr_)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (# endif return* this ; } PA_ALWAYS_INLINE T*)",
    "insertText": "get()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE T*)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<PMF> void)",
    "insertText": "operator(PMF)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (PA_ALWAYS_INLINE operator)",
    "insertText": "T()"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (} template<U> PA_ALWAYS_INLINE operator)",
    "insertText": "U()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ =)",
    "insertText": "Advance(wrapped_ptr_, 1)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ =)",
    "insertText": "Advance(wrapped_ptr_, -1)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (raw_ptr result =*)",
    "insertText": "this(*this)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (wrapped_ptr_ =)",
    "insertText": "Advance(wrapped_ptr_, delta_elems)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (raw_ptr result = p ; return result + = delta_elems ; } template<Z,= std::enable_if_t<internal::offset_type<Z>>> PA_ALWAYS_INLINE raw_ptr)",
    "insertText": "operator(const raw_ptr& p, Z delta_elems)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (raw_ptr result = p ; return result - = delta_elems ; } PA_ALWAYS_INLINE ptrdiff_t)",
    "insertText": "operator(const raw_ptr& p1, const raw_ptr& p2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE ptrdiff_t)",
    "insertText": "operator(T* p1, const raw_ptr& p2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE ptrdiff_t)",
    "insertText": "operator(const raw_ptr& p1, T* p2)"
  },
  {
    "label": "ClearAndDelete()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "ClearAndDelete()"
  },
  {
    "label": "GetForExtractionAndReset()",
    "kind": "Method",
    "detail": "Function (delete)",
    "insertText": "GetForExtractionAndReset()"
  },
  {
    "label": "ClearAndDeleteArray()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE void)",
    "insertText": "ClearAndDeleteArray()"
  },
  {
    "label": "ExtractAsDangling()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE DanglingRawPtr)",
    "insertText": "ExtractAsDangling()"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (DanglingRawPtr)",
    "insertText": "res(std::move(*this))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(nullptr)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (DanglingRawPtr)",
    "insertText": "res(ptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<U> PA_ALWAYS_INLINE bool)",
    "insertText": "operator(const raw_ptr& lhs, const raw_ptr<U, Impl>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U,V,I> PA_ALWAYS_INLINE bool)",
    "insertText": "operator(const raw_ptr<U, I>& lhs, const raw_ptr<V, I>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<U> PA_ALWAYS_INLINE bool)",
    "insertText": "operator(const raw_ptr& lhs, U* rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U> PA_ALWAYS_INLINE bool)",
    "insertText": "operator(U* lhs, const raw_ptr& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE bool)",
    "insertText": "operator(const raw_ptr& lhs, std::nullptr_t)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(lhs.wrapped_ptr_, rhs.wrapped_ptr_)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "BUILDFLAG(PA_USE_BASE_TRACING) template <class U = T> typename perfetto::check_traced_value_support<U>::type WriteIntoTrace( perfetto::TracedValue&& context)"
  },
  {
    "label": "WriteIntoTracedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteIntoTracedValue(std::move(context), get())"
  },
  {
    "label": "ReportIfDangling()",
    "kind": "Method",
    "detail": "Function (} # endif PA_ALWAYS_INLINE void)",
    "insertText": "ReportIfDangling()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(USE_BACKUP_REF_PTR) Impl::ReportIfDangling(wrapped_ptr_)"
  },
  {
    "label": "GetForDereference()",
    "kind": "Method",
    "detail": "Function (# endif } private : PA_ALWAYS_INLINE T*)",
    "insertText": "GetForDereference()"
  },
  {
    "label": "GetForExtraction()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE T*)",
    "insertText": "GetForExtraction()"
  },
  {
    "label": "GetForComparison()",
    "kind": "Method",
    "detail": "Function (} PA_ALWAYS_INLINE T*)",
    "insertText": "GetForComparison()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (using DanglingUntriagedDegradeToNoOpWhenMTE = base::RawPtrNoOp ; using DisableDanglingPtrDetectionDegradeToNoOpWhenMTE = base::RawPtrNoOp ; # else using DegradeToNoOpWhenMTE = base::RawPtrBanDanglingIfSupported ; using DanglingUntriagedDegradeToNoOpWhenMTE = DanglingUntriaged ; using DisableDanglingPtrDetectionDegradeToNoOpWhenMTE = DisableDanglingPtrDetection ; # endif namespace std { template<T,RawPtrType> struct less<raw_ptr<T,RawPtrType>> { using Impl = base::raw_ptr_traits::RawPtrTypeToImpl<RawPtrType>::Impl ; using is_transparent = void ; bool)",
    "insertText": "operator()(const raw_ptr<T, RawPtrType>& lhs, const raw_ptr<T, RawPtrType>& rhs)"
  }
]