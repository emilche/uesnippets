[
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "VClass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VClass"
  },
  {
    "label": "VTupleType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VTupleType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVersionedDigest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVersionedDigest"
  },
  {
    "label": "VPackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VPackage"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (namespace Verse { struct VClass ; struct VTupleType ; enum class EPackageStage : uint8 { Global,Temp,Dead } ; enum class EDigestVariant : uint8 { PublicAndEpicInternal = 0,PublicOnly = 1,} ; struct FVersionedDigest { TWriteBarrier<VArray> Code ; uint32 EffectiveVerseVersion ; } ; struct VPackage : VCell {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VCell)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; TOptional<FVersionedDigest> DigestVariants [ 2 ] ; VArray&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const VArray&)",
    "insertText": "GetName(uint32 Index)"
  },
  {
    "label": "GetDefinition()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "GetDefinition(uint32 Index)"
  },
  {
    "label": "AddDefinition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDefinition(FAllocationContext Context, FUtf8StringView Name, VValue Definition)"
  },
  {
    "label": "AddValue()",
    "kind": "Method",
    "detail": "Function (Map .)",
    "insertText": "AddValue(Context, Name, Definition)"
  },
  {
    "label": "AddDefinition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDefinition(FAllocationContext Context, VArray& Name, VValue Definition)"
  },
  {
    "label": "LookupDefinition()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "LookupDefinition(FUtf8StringView Name)"
  },
  {
    "label": "LookupDefinition()",
    "kind": "Method",
    "detail": "Function (} VValue)",
    "insertText": "LookupDefinition(FUtf8StringView Path, FUtf8StringView Name)"
  },
  {
    "label": "GetUPackage()",
    "kind": "Method",
    "detail": "Function (} UPackage*)",
    "insertText": "GetUPackage(const TCHAR* UEPackageName)"
  },
  {
    "label": "GetOrCreateUPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "GetOrCreateUPackage(FAllocationContext Context, const TCHAR* UEPackageName)"
  },
  {
    "label": "NotifyUsedTupleType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyUsedTupleType(FAllocationContext Context, VTupleType* TupleType)"
  },
  {
    "label": "ForEachUsedTupleType()",
    "kind": "Method",
    "detail": "Function (template<FunctorType> void)",
    "insertText": "ForEachUsedTupleType(FunctorType&& Functor)"
  },
  {
    "label": "GetStage()",
    "kind": "Method",
    "detail": "Function (EPackageStage)",
    "insertText": "GetStage()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (VPackage&)",
    "insertText": "New(FAllocationContext Context, VArray& Name, uint32 Capacity, EPackageStage InPackageStage = EPackageStage::Global)"
  },
  {
    "label": "VPackage()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "VPackage(FAllocationContext Context, VArray& Name, uint32 Capacity, EPackageStage InPackageStage) : VCell(Context, &GlobalTrivialEmergentType.Get(Context)) , PackageName(Context, &Name) , Map(Context, Capacity) , UPackageMap(Context, 0)"
  },
  {
    "label": "GetUPackageInternal()",
    "kind": "Method",
    "detail": "Function (} UPackage*)",
    "insertText": "GetUPackageInternal(FUtf8StringView UEPackageName)"
  }
]