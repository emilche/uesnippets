[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "LoggedIceCandidatePairConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LoggedIceCandidatePairConfig"
  },
  {
    "label": "IceCandidatePairDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceCandidatePairDescription"
  },
  {
    "label": "RtcEventIceCandidatePairConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventIceCandidatePairConfig"
  },
  {
    "label": "log_time_us()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_ICE_CANDIDATE_PAIR_CONFIG_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_ICE_CANDIDATE_PAIR_CONFIG_H_ # include<stdint . h> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / rtc_event_log / rtc_event . h \" # include \" api / units / timestamp . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding_parser . h \" namespace webrtc { enum class IceCandidatePairConfigType { kAdded,kUpdated,kDestroyed,kSelected,kNumValues,} ; enum class IceCandidateType { kUnknown,kLocal,kStun,kPrflx,kRelay,kNumValues,} ; enum class IceCandidatePairProtocol { kUnknown,kUdp,kTcp,kSsltcp,kTls,kNumValues,} ; enum class IceCandidatePairAddressFamily { kUnknown,kIpv4,kIpv6,kNumValues,} ; enum class IceCandidateNetworkType { kUnknown,kEthernet,kLoopback,kWifi,kVpn,kCellular,kNumValues,} ; struct LoggedIceCandidatePairConfig { int64_t)",
    "insertText": "log_time_us()"
  },
  {
    "label": "log_time_ms()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "log_time_ms()"
  },
  {
    "label": "log_time()",
    "kind": "Method",
    "detail": "Function (} Timestamp)",
    "insertText": "log_time()"
  },
  {
    "label": "IceCandidatePairDescription()",
    "kind": "Method",
    "detail": "Function (IceCandidatePairConfigType type ; uint32_t candidate_pair_id ; IceCandidateType local_candidate_type ; IceCandidatePairProtocol local_relay_protocol ; IceCandidateNetworkType local_network_type ; IceCandidatePairAddressFamily local_address_family ; IceCandidateType remote_candidate_type ; IceCandidatePairAddressFamily remote_address_family ; IceCandidatePairProtocol candidate_pair_protocol ; } ; class IceCandidatePairDescription { public :)",
    "insertText": "IceCandidatePairDescription()"
  },
  {
    "label": "IceCandidatePairDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IceCandidatePairDescription(const IceCandidatePairDescription& other)"
  },
  {
    "label": "RtcEventIceCandidatePairConfig()",
    "kind": "Method",
    "detail": "Function (IceCandidateType local_candidate_type ; IceCandidatePairProtocol local_relay_protocol ; IceCandidateNetworkType local_network_type ; IceCandidatePairAddressFamily local_address_family ; IceCandidateType remote_candidate_type ; IceCandidatePairAddressFamily remote_address_family ; IceCandidatePairProtocol candidate_pair_protocol ; } ; class RtcEventIceCandidatePairConfig final : public RtcEvent { public : Type kType = Type::IceCandidatePairConfig ;)",
    "insertText": "RtcEventIceCandidatePairConfig(IceCandidatePairConfigType type, uint32_t candidate_pair_id, const IceCandidatePairDescription& candidate_pair_desc)"
  },
  {
    "label": "RtcEventIceCandidatePairConfig()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventIceCandidatePairConfig()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (Type)",
    "insertText": "GetType()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (IceCandidatePairConfigType)",
    "insertText": "type()"
  },
  {
    "label": "RtcEventIceCandidatePairConfig()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "RtcEventIceCandidatePairConfig(const RtcEventIceCandidatePairConfig& other)"
  }
]