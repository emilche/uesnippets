[
  {
    "label": "IModifierToggleBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModifierToggleBehaviorTarget"
  },
  {
    "label": "IKeyInputBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyInputBehaviorTarget"
  },
  {
    "label": "IClickBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClickBehaviorTarget"
  },
  {
    "label": "IClickDragBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClickDragBehaviorTarget"
  },
  {
    "label": "IMouseWheelBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMouseWheelBehaviorTarget"
  },
  {
    "label": "IClickSequenceBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClickSequenceBehaviorTarget"
  },
  {
    "label": "IHoverBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IHoverBehaviorTarget"
  },
  {
    "label": "IModifierToggleBehaviorTarget()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputState . h \" class IModifierToggleBehaviorTarget { public : ~)",
    "insertText": "IModifierToggleBehaviorTarget()"
  },
  {
    "label": "OnUpdateModifierState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnUpdateModifierState(int ModifierID, bool bIsOn)"
  },
  {
    "label": "IKeyInputBehaviorTarget()",
    "kind": "Method",
    "detail": "Function (} } ; class IKeyInputBehaviorTarget : public IModifierToggleBehaviorTarget { public : ~)",
    "insertText": "IKeyInputBehaviorTarget()"
  },
  {
    "label": "OnKeyPressed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnKeyPressed(const FKey& KeyID)"
  },
  {
    "label": "OnKeyReleased()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnKeyReleased(const FKey& KeyID)"
  },
  {
    "label": "IClickBehaviorTarget()",
    "kind": "Method",
    "detail": "Function (} } ; class IClickBehaviorTarget : public IModifierToggleBehaviorTarget { public : ~)",
    "insertText": "IClickBehaviorTarget()"
  },
  {
    "label": "IsHitByClick()",
    "kind": "Method",
    "detail": "Function (} FInputRayHit)",
    "insertText": "IsHitByClick(const FInputDeviceRay& ClickPos)"
  },
  {
    "label": "OnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClicked(const FInputDeviceRay& ClickPos)"
  },
  {
    "label": "IClickDragBehaviorTarget()",
    "kind": "Method",
    "detail": "Function (} ; class IClickDragBehaviorTarget : public IModifierToggleBehaviorTarget { public : ~)",
    "insertText": "IClickDragBehaviorTarget()"
  },
  {
    "label": "CanBeginClickDragSequence()",
    "kind": "Method",
    "detail": "Function (} FInputRayHit)",
    "insertText": "CanBeginClickDragSequence(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPress(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDrag(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickRelease(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "OnTerminateDragSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTerminateDragSequence()"
  },
  {
    "label": "IMouseWheelBehaviorTarget()",
    "kind": "Method",
    "detail": "Function (} ; class IMouseWheelBehaviorTarget : public IModifierToggleBehaviorTarget { public : ~)",
    "insertText": "IMouseWheelBehaviorTarget()"
  },
  {
    "label": "ShouldRespondToMouseWheel()",
    "kind": "Method",
    "detail": "Function (} FInputRayHit)",
    "insertText": "ShouldRespondToMouseWheel(const FInputDeviceRay& CurrentPos)"
  },
  {
    "label": "OnMouseWheelScrollUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseWheelScrollUp(const FInputDeviceRay& CurrentPos)"
  },
  {
    "label": "OnMouseWheelScrollDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseWheelScrollDown(const FInputDeviceRay& CurrentPos)"
  },
  {
    "label": "IClickSequenceBehaviorTarget()",
    "kind": "Method",
    "detail": "Function (} ; class IClickSequenceBehaviorTarget : public IModifierToggleBehaviorTarget { public : ~)",
    "insertText": "IClickSequenceBehaviorTarget()"
  },
  {
    "label": "OnBeginSequencePreview()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBeginSequencePreview(const FInputDeviceRay& ClickPos)"
  },
  {
    "label": "CanBeginClickSequence()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanBeginClickSequence(const FInputDeviceRay& ClickPos)"
  },
  {
    "label": "OnBeginClickSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginClickSequence(const FInputDeviceRay& ClickPos)"
  },
  {
    "label": "OnNextSequencePreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNextSequencePreview(const FInputDeviceRay& ClickPos)"
  },
  {
    "label": "OnNextSequenceClick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnNextSequenceClick(const FInputDeviceRay& ClickPos)"
  },
  {
    "label": "OnTerminateClickSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTerminateClickSequence()"
  },
  {
    "label": "RequestAbortClickSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestAbortClickSequence()"
  },
  {
    "label": "BeginHoverSequenceHitTest()",
    "kind": "Method",
    "detail": "Function (} FInputRayHit)",
    "insertText": "BeginHoverSequenceHitTest(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnBeginHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginHover(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "OnUpdateHover()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnUpdateHover(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "OnEndHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndHover()"
  }
]