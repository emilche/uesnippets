[
  {
    "label": "FVorbisAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVorbisAudioInfo"
  },
  {
    "label": "FSoundQualityInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundQualityInfo"
  },
  {
    "label": "FAudioFormatOgg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioFormatOgg"
  },
  {
    "label": "FVorbisFileWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVorbisFileWrapper"
  },
  {
    "label": "WITH_OGGVORBIS_DLL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeBool . h \" # include \" AudioDecompress . h \" # ifndef WITH_OGGVORBIS # define WITH_OGGVORBIS 0 # endif # ifndef WITH_OGGVORBIS_DLL # define)",
    "insertText": "WITH_OGGVORBIS_DLL(PLATFORM_WINDOWS || PLATFORM_HOLOLENS)"
  },
  {
    "label": "LoadVorbisLibraries()",
    "kind": "Method",
    "detail": "Function (const int32 Order [ 8 ] [ 8 ] ; } void)",
    "insertText": "LoadVorbisLibraries()"
  },
  {
    "label": "FVorbisAudioInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_OGGVORBIS class FVorbisAudioInfo : public ICompressedAudioInfo { public :)",
    "insertText": "FVorbisAudioInfo(void)"
  },
  {
    "label": "ReadMemory()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadMemory(void *ptr, uint32 size)"
  },
  {
    "label": "SeekMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SeekMemory(uint32 offset, int whence)"
  },
  {
    "label": "CloseMemory()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CloseMemory(void)"
  },
  {
    "label": "TellMemory()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "TellMemory(void)"
  },
  {
    "label": "ReadStreaming()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadStreaming(void *ptr, uint32 size)"
  },
  {
    "label": "CloseStreaming()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CloseStreaming(void)"
  },
  {
    "label": "GetCompressedInfoCommon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCompressedInfoCommon(void* Callbacks, FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "ReadCompressedInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCompressedInfo(const uint8* InSrcBufferData, uint32 InSrcBufferDataSize, struct FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "ReadCompressedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadCompressedData(uint8* InDestination, bool bLooping, uint32 BufferSize)"
  },
  {
    "label": "SeekToTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToTime(const float SeekTime)"
  },
  {
    "label": "SeekToFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeekToFrame(const uint32 SeekFrame)"
  },
  {
    "label": "ExpandFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandFile(uint8* DstBuffer, struct FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "EnableHalfRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableHalfRate(bool HalfRate)"
  },
  {
    "label": "GetSourceBufferSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSourceBufferSize()"
  },
  {
    "label": "GetCurrentChunkIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentChunkIndex()"
  },
  {
    "label": "StreamCompressedInfoInternal()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "StreamCompressedInfoInternal(const FSoundWaveProxyPtr& InWaveProxy, struct FSoundQualityInfo* QualityInfo)"
  },
  {
    "label": "GetAudioDataStartOffset()",
    "kind": "Method",
    "detail": "Function (class FAudioFormatOgg ; int32)",
    "insertText": "GetAudioDataStartOffset()"
  },
  {
    "label": "GetLoadedChunk()",
    "kind": "Method",
    "detail": "Function (private : using Super = ICompressedAudioInfo ; const uint8*)",
    "insertText": "GetLoadedChunk(FSoundWaveProxyPtr InSoundWave, uint32 ChunkIndex, uint32& OutChunkSize)"
  }
]