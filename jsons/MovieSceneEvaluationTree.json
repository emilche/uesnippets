[
  {
    "label": "FMovieSceneEvaluationTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTree"
  },
  {
    "label": "FMovieSceneEvaluationTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTreeNode"
  },
  {
    "label": "FMovieSceneEvaluationTreeRangeIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTreeRangeIterator"
  },
  {
    "label": "TMovieSceneEvaluationTreeDataIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTreeDataIterator"
  },
  {
    "label": "TMovieSceneEvaluationTreeFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTreeFormatter"
  },
  {
    "label": "FEvaluationTreeEntryHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvaluationTreeEntryHandle"
  },
  {
    "label": "TEvaluationTreeEntryContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEvaluationTreeEntryContainer"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "IMovieSceneEvaluationTreeNodeOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieSceneEvaluationTreeNodeOperator"
  },
  {
    "label": "FMovieSceneEvaluationTreeNodeHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTreeNodeHandle"
  },
  {
    "label": "TMovieSceneEvaluationTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTree"
  },
  {
    "label": "FNullOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNullOperator"
  },
  {
    "label": "FAddUniqueOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddUniqueOperator"
  },
  {
    "label": "FAddOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddOperator"
  },
  {
    "label": "FEvaluationTreeEntryHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Math / Range . h \" # include \" Math / RangeBound . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / FrameNumber . h \" # include \" Serialization / Archive . h \" # include \" Templates / Function . h \" # include \" Templates / MemoryOps . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / SequencerObjectVersion . h \" struct FMovieSceneEvaluationTree ; struct FMovieSceneEvaluationTreeNode ; struct FMovieSceneEvaluationTreeRangeIterator ; template<DataType> struct TMovieSceneEvaluationTreeDataIterator ; template<DataType> struct TMovieSceneEvaluationTreeFormatter ; struct FEvaluationTreeEntryHandle {)",
    "insertText": "FEvaluationTreeEntryHandle() : EntryIndex(INDEX_NONE)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "AllocateEntry()",
    "kind": "Method",
    "detail": "Function (} int32 EntryIndex ; } ; template<ElementType> struct TEvaluationTreeEntryContainer { FEvaluationTreeEntryHandle)",
    "insertText": "AllocateEntry(int32 InitialCapacity = 2)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayView<ElementType>)",
    "insertText": "Get(FEvaluationTreeEntryHandle ID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FEvaluationTreeEntryHandle ID, ElementType&& Element)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(FEvaluationTreeEntryHandle ID, int32 Index, ElementType&& Element)"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TEvaluationTreeEntryContainer& In)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (} Ar .)",
    "insertText": "UsingCustomVersion(FSequencerObjectVersion::GUID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FEntry { int32 StartIndex ; int32 Size ; int32 Capacity ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FEntry& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<In . StartIndex<<In . Size<<In . Capacity ; return Ar ; } bool)",
    "insertText": "operator(const FEntry& A, const FEntry& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(FMovieSceneEvaluationTreeNode& Node)"
  },
  {
    "label": "FMovieSceneEvaluationTreeNodeHandle()",
    "kind": "Method",
    "detail": "Function (} ; struct FMovieSceneEvaluationTreeNodeHandle {)",
    "insertText": "FMovieSceneEvaluationTreeNodeHandle(FEvaluationTreeEntryHandle InChildrenHandle, int32 InIndex) : ChildrenHandle(InChildrenHandle), Index(InIndex)"
  },
  {
    "label": "Root()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEvaluationTreeNodeHandle)",
    "insertText": "Root()"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEvaluationTreeNodeHandle)",
    "insertText": "Invalid()"
  },
  {
    "label": "IsRoot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRoot()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} FEvaluationTreeEntryHandle)",
    "insertText": "GetHandle()"
  },
  {
    "label": "FMovieSceneEvaluationTreeNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneEvaluationTreeNode(TRange<FFrameNumber> InRange, FMovieSceneEvaluationTreeNodeHandle InParent) : Range(InRange) , Parent(InParent)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneEvaluationTreeNode& In)"
  },
  {
    "label": "FMovieSceneEvaluationTree()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneEvaluationTree(const FMovieSceneEvaluationTree& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTree&)",
    "insertText": "operator(const FMovieSceneEvaluationTree& RHS)"
  },
  {
    "label": "FMovieSceneEvaluationTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneEvaluationTree(FMovieSceneEvaluationTree&& RHS) : RootNode(RHS.RootNode) , ChildNodes(MoveTemp(RHS.ChildNodes))"
  },
  {
    "label": "FMovieSceneEvaluationTreeNode()",
    "kind": "Method",
    "detail": "Function (RHS . RootNode =)",
    "insertText": "FMovieSceneEvaluationTreeNode(TRange<FFrameNumber>::All(), FMovieSceneEvaluationTreeNodeHandle::Invalid())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEvaluationTree&)",
    "insertText": "operator(FMovieSceneEvaluationTree&& RHS)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RootNode = RHS . RootNode ; ChildNodes =)",
    "insertText": "MoveTemp(RHS.ChildNodes)"
  },
  {
    "label": "IterateFromLowerBound()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTreeRangeIterator)",
    "insertText": "IterateFromLowerBound(TRangeBound<FFrameNumber> InStartingLowerBound)"
  },
  {
    "label": "GetRootNode()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneEvaluationTreeNode&)",
    "insertText": "GetRootNode()"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneEvaluationTreeNode&)",
    "insertText": "GetNode(FMovieSceneEvaluationTreeNodeHandle Handle)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FMovieSceneEvaluationTreeNode>)",
    "insertText": "GetChildren(const FMovieSceneEvaluationTreeNode& InNode)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid(FMovieSceneEvaluationTreeNodeHandle Handle)"
  },
  {
    "label": "FEvaluationTreeEntryHandle()",
    "kind": "Method",
    "detail": "Function (RootNode . DataID = RootNode . ChildrenID =)",
    "insertText": "FEvaluationTreeEntryHandle()"
  },
  {
    "label": "AddTimeRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTimeRange(TRange<FFrameNumber> InTimeRange)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FMovieSceneEvaluationTree& In)"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (} const FMovieSceneEvaluationTreeNode&)",
    "insertText": "GetNode(FEvaluationTreeEntryHandle ChildrenID, int32 Index)"
  },
  {
    "label": "AddTimeRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTimeRange(TRange<FFrameNumber> InTimeRange, const IMovieSceneEvaluationTreeNodeOperator& InOperator, FMovieSceneEvaluationTreeNodeHandle InParent, const TFunctionRef<bool(FMovieSceneEvaluationTreeNodeHandle)>* Predicate)"
  },
  {
    "label": "InsertNewChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewChild(TRange<FFrameNumber> InEffectiveRange, const IMovieSceneEvaluationTreeNodeOperator& InOperator, int32 InsertIndex, FMovieSceneEvaluationTreeNodeHandle InParent)"
  },
  {
    "label": "FMovieSceneEvaluationTreeRangeIterator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTreeNode RootNode ; TEvaluationTreeEntryContainer<FMovieSceneEvaluationTreeNode> ChildNodes ; } ; struct FMovieSceneEvaluationTreeRangeIterator {)",
    "insertText": "FMovieSceneEvaluationTreeRangeIterator(const FMovieSceneEvaluationTree& InTree)"
  },
  {
    "label": "FMovieSceneEvaluationTreeRangeIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneEvaluationTreeRangeIterator(const FMovieSceneEvaluationTree& InTree, TRangeBound<FFrameNumber> StartingBound)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTreeRangeIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iter(true)"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iter(false)"
  },
  {
    "label": "Previous()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTreeRangeIterator N =* this ; return + + N ; } FMovieSceneEvaluationTreeRangeIterator)",
    "insertText": "Previous()"
  },
  {
    "label": "Range()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTreeRangeIterator P =* this ; return - - P ; } TRange<FFrameNumber>)",
    "insertText": "Range()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "operator(const FMovieSceneEvaluationTreeRangeIterator& Lhs, const FMovieSceneEvaluationTreeRangeIterator& Rhs)"
  },
  {
    "label": "GetLeadingBound()",
    "kind": "Method",
    "detail": "Function (} TRangeBound<FFrameNumber>)",
    "insertText": "GetLeadingBound(bool bForwards, TRange<FFrameNumber> Range)"
  },
  {
    "label": "GetTrailingBound()",
    "kind": "Method",
    "detail": "Function (} TRangeBound<FFrameNumber>)",
    "insertText": "GetTrailingBound(bool bForwards, TRange<FFrameNumber> Range)"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Iter(bool bForwards)"
  },
  {
    "label": "FindNextChild()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTreeNodeHandle)",
    "insertText": "FindNextChild(FMovieSceneEvaluationTreeNodeHandle ParentNodeHandle, TRangeBound<FFrameNumber> PredicateBound, bool bForwards)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (private : TRange<FFrameNumber> CurrentRange ; FMovieSceneEvaluationTreeNodeHandle CurrentNodeHandle ; const FMovieSceneEvaluationTree* Tree ; } ; template<DataType> struct TMovieSceneEvaluationTree : FMovieSceneEvaluationTree { bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(TRange<FFrameNumber> InTimeRange)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FNullOperator : IMovieSceneEvaluationTreeNodeOperator { void)",
    "insertText": "operator()(FMovieSceneEvaluationTreeNode& InNode)"
  },
  {
    "label": "AddTimeRange()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "AddTimeRange(InTimeRange, FNullOperator(), FMovieSceneEvaluationTreeNodeHandle::Root(), nullptr)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUnique(TRange<FFrameNumber> InTimeRange, DataType InData)"
  },
  {
    "label": "AddTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeRange(InTimeRange, FAddUniqueOperator(*this, MoveTemp(InData)), FMovieSceneEvaluationTreeNodeHandle::Root(), nullptr)"
  },
  {
    "label": "AddIfEmpty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddIfEmpty(TRange<FFrameNumber> InTimeRange, DataType InData)"
  },
  {
    "label": "AddSelective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelective(InTimeRange, MoveTemp(InData), [this](FMovieSceneEvaluationTreeNodeHandle InNodeHandle){ return this->GetAllData(InNodeHandle).IsValid() == false; })"
  },
  {
    "label": "AddIfEmptySelective()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddIfEmptySelective(TRange<FFrameNumber> InTimeRange, DataType InData, TFunctionRef<bool(FMovieSceneEvaluationTreeNodeHandle)> Predicate)"
  },
  {
    "label": "AddSelective()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelective(InTimeRange, MoveTemp(InData), [this, &Predicate](FMovieSceneEvaluationTreeNodeHandle InNodeHandle){ return this->GetAllData(InNodeHandle).IsValid() && Predicate(InNodeHandle); })"
  },
  {
    "label": "AddSelective()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSelective(TRange<FFrameNumber> InTimeRange, DataType InData, TFunctionRef<bool(FMovieSceneEvaluationTreeNodeHandle)> Predicate)"
  },
  {
    "label": "AddTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeRange(InTimeRange, FAddOperator(*this, MoveTemp(InData)), FMovieSceneEvaluationTreeNodeHandle::Root(), &Predicate)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(TRange<FFrameNumber> InTimeRange, DataType InData)"
  },
  {
    "label": "AddTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeRange(InTimeRange, FAddOperator(*this, MoveTemp(InData)), FMovieSceneEvaluationTreeNodeHandle::Root(), nullptr)"
  },
  {
    "label": "GetDataForSingleNode()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const DataType>)",
    "insertText": "GetDataForSingleNode(const FMovieSceneEvaluationTreeNode& InNode)"
  },
  {
    "label": "GetMutableDataForSingleNode()",
    "kind": "Method",
    "detail": "Function (} TArrayView<DataType>)",
    "insertText": "GetMutableDataForSingleNode(const FMovieSceneEvaluationTreeNode& InNode)"
  },
  {
    "label": "GetAllData()",
    "kind": "Method",
    "detail": "Function (} TMovieSceneEvaluationTreeDataIterator<DataType>)",
    "insertText": "GetAllData(FMovieSceneEvaluationTreeNodeHandle NodeHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TMovieSceneEvaluationTree<DataType>& In)"
  },
  {
    "label": "FMovieSceneEvaluationTree()",
    "kind": "Method",
    "detail": "Function (auto& BaseTree = static_cast<)",
    "insertText": "FMovieSceneEvaluationTree(In)"
  },
  {
    "label": "AllocateEntry()",
    "kind": "Method",
    "detail": "Function (InNode . DataID = Tree . Data .)",
    "insertText": "AllocateEntry(1)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const DataType> NodeData = Tree . Data .)",
    "insertText": "Get(InNode.DataID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tree . Data .)",
    "insertText": "Add(InNode.DataID, CopyTemp(DataToInsert))"
  },
  {
    "label": "FAddOperator()",
    "kind": "Method",
    "detail": "Function (} } TMovieSceneEvaluationTree<DataType>& Tree ; DataType DataToInsert ; } ; struct FAddOperator : IMovieSceneEvaluationTreeNodeOperator {)",
    "insertText": "FAddOperator(TMovieSceneEvaluationTree<DataType>& InTree, DataType&& InDataToInsert) : Tree(InTree), DataToInsert(InDataToInsert)"
  },
  {
    "label": "TMovieSceneEvaluationTreeDataIterator()",
    "kind": "Method",
    "detail": "Function (} TMovieSceneEvaluationTree<DataType>& Tree ; DataType DataToInsert ; } ; } ; template<DataType> struct TMovieSceneEvaluationTreeDataIterator {)",
    "insertText": "TMovieSceneEvaluationTreeDataIterator(const TMovieSceneEvaluationTree<DataType>& InTree, FMovieSceneEvaluationTreeNodeHandle StartNode) : Tree(&InTree) , CurrentNode(StartNode.IsValid() ? &InTree.GetNode(StartNode) : nullptr) , DataIndex(0)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (CurrentNode = CurrentNode -> Parent .)",
    "insertText": "IsValid() ? &InTree.GetNode(CurrentNode->Parent)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + DataIndex ;)",
    "insertText": "while(CurrentNode && !Tree->GetDataForSingleNode(*CurrentNode).IsValidIndex(DataIndex))"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (CurrentNode = CurrentNode -> Parent .)",
    "insertText": "IsValid() ? &Tree->GetNode(CurrentNode->Parent)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (DataIndex = 0 ; } return* this ; } TMovieSceneEvaluationTreeDataIterator<DataType>)",
    "insertText": "begin(const TMovieSceneEvaluationTreeDataIterator<DataType>& In)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TMovieSceneEvaluationTreeDataIterator<DataType>& A, const TMovieSceneEvaluationTreeDataIterator<DataType>& B)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FEvaluationTreeEntryHandle ID { Entries .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Entries .)",
    "insertText": "Add(FEntry{Items.Num(), 0, InitialCapacity})"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "SetNum(Items.Num() + InitialCapacity)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (const FEntry& Entry = Entries [ ID . EntryIndex ] ; return TArrayView<)",
    "insertText": "ElementType(&Items[Entry.StartIndex], Entry.Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEntry& Entry = Entries [ ID . EntryIndex ] ;)",
    "insertText": "if(Entry.Size+1 > Entry.Capacity)"
  },
  {
    "label": "ReserveEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveEntry(ID, FMath::Max<int32>(Entry.Capacity*2, 2))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} Items [ Entry . StartIndex + Entry . Size ] =)",
    "insertText": "MoveTemp(Element)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} Index =)",
    "insertText": "Clamp(Index, 0, Entry.Capacity-1)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (ElementType* OldLocation =& Items [ Entry . StartIndex + Index ] ; void* NewLocation =& Items [ Entry . StartIndex + Index + 1 ] ; RelocateConstructItems<)",
    "insertText": "ElementType(NewLocation, OldLocation, Entry.Size - Index)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (DefaultConstructItems<)",
    "insertText": "ElementType((void*)OldLocation, 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<ElementType> NewItems ;)",
    "insertText": "for(FEntry& Entry : Entries)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (NewItems .)",
    "insertText": "Append(&Items[OldIndex], Entry.Size)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} else { Entry . StartIndex = INDEX_NONE ; } Entry . Capacity = Entry . Size ; } NewItems .)",
    "insertText": "Shrink()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Items =)",
    "insertText": "MoveTemp(NewItems)"
  },
  {
    "label": "ReserveEntry()",
    "kind": "Method",
    "detail": "Function (} template<ElementType> void TEvaluationTreeEntryContainer<ElementType)",
    "insertText": "ReserveEntry(FEvaluationTreeEntryHandle ID, int32 NewCapacity)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FEntry& Entry = Entries [ ID . EntryIndex ] ;)",
    "insertText": "check(NewCapacity > Entry.Capacity)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "SetNum(Items.Num() + Entry.Capacity)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (ElementType* OldLocation =& Items [ Entry . StartIndex ] ; void* NewLocation =& Items [ NewStartIndex ] ; RelocateConstructItems<)",
    "insertText": "ElementType(NewLocation, OldLocation, Entry.Size)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (DefaultConstructItems<)",
    "insertText": "ElementType((void*)OldLocation, Entry.Size)"
  }
]