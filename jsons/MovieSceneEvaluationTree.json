[
  {
    "label": "FMovieSceneEvaluationTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTree"
  },
  {
    "label": "FMovieSceneEvaluationTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTreeNode"
  },
  {
    "label": "FMovieSceneEvaluationTreeRangeIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTreeRangeIterator"
  },
  {
    "label": "TMovieSceneEvaluationTreeDataIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTreeDataIterator"
  },
  {
    "label": "TMovieSceneEvaluationTreeFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTreeFormatter"
  },
  {
    "label": "FEvaluationTreeEntryHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvaluationTreeEntryHandle"
  },
  {
    "label": "TEvaluationTreeEntryContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEvaluationTreeEntryContainer"
  },
  {
    "label": "TMovieSceneEvaluationTreeFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTreeFormatter"
  },
  {
    "label": "TEvaluationTreeEntryContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEvaluationTreeEntryContainer"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "IMovieSceneEvaluationTreeNodeOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMovieSceneEvaluationTreeNodeOperator"
  },
  {
    "label": "FMovieSceneEvaluationTreeNodeHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTreeNodeHandle"
  },
  {
    "label": "FMovieSceneEvaluationTreeNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTreeNode"
  },
  {
    "label": "FMovieSceneEvaluationTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTree"
  },
  {
    "label": "FMovieSceneEvaluationTreeRangeIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTreeRangeIterator"
  },
  {
    "label": "TMovieSceneEvaluationTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTree"
  },
  {
    "label": "FNullOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNullOperator"
  },
  {
    "label": "TMovieSceneEvaluationTreeFormatter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTreeFormatter"
  },
  {
    "label": "FAddUniqueOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddUniqueOperator"
  },
  {
    "label": "FAddOperator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddOperator"
  },
  {
    "label": "TMovieSceneEvaluationTreeDataIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneEvaluationTreeDataIterator"
  },
  {
    "label": "AllocateEntry()",
    "kind": "Method",
    "detail": "Function (FEvaluationTreeEntryHandle)",
    "insertText": "AllocateEntry(int32 InitialCapacity = 2)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TArrayView<ElementType>)",
    "insertText": "Get(FEvaluationTreeEntryHandle ID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FEvaluationTreeEntryHandle ID, ElementType&& Element)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(FEvaluationTreeEntryHandle ID, int32 Index, ElementType&& Element)"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact()"
  },
  {
    "label": "ReserveEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveEntry(FEvaluationTreeEntryHandle ID, int32 NewCapacity)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTreeNode>)",
    "insertText": "GetChildren(const FMovieSceneEvaluationTreeNode& InNode)"
  },
  {
    "label": "AddTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimeRange(TRange<FFrameNumber> InTimeRange)"
  },
  {
    "label": "InsertNewChild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertNewChild(TRange<FFrameNumber> InEffectiveRange, const IMovieSceneEvaluationTreeNodeOperator& InOperator, int32 InsertIndex, FMovieSceneEvaluationTreeNodeHandle InParent)"
  },
  {
    "label": "FMovieSceneEvaluationTreeRangeIterator()",
    "kind": "Method",
    "detail": "Function (MOVIESCENE_API)",
    "insertText": "FMovieSceneEvaluationTreeRangeIterator(const FMovieSceneEvaluationTree& InTree)"
  },
  {
    "label": "FMovieSceneEvaluationTreeRangeIterator()",
    "kind": "Method",
    "detail": "Function (MOVIESCENE_API)",
    "insertText": "FMovieSceneEvaluationTreeRangeIterator(const FMovieSceneEvaluationTree& InTree, TRangeBound<FFrameNumber> StartingBound)"
  },
  {
    "label": "Iter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Iter(bool bForwards)"
  },
  {
    "label": "FindNextChild()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvaluationTreeNodeHandle)",
    "insertText": "FindNextChild(FMovieSceneEvaluationTreeNodeHandle ParentNodeHandle, TRangeBound<FFrameNumber> PredicateBound, bool bForwards)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsValid()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (entry)",
    "insertText": "check(NewCapacity > Entry.Capacity)"
  }
]