[
  {
    "label": "DivideRoundUp()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_DIVIDE_ROUND_H_ # define RTC_BASE_NUMERICS_DIVIDE_ROUND_H_ # include<type_traits> # include \" rtc_base / checks . h \" # include \" rtc_base / numerics / safe_compare . h \" namespace webrtc { template<Dividend,Divisor> auto)",
    "insertText": "DivideRoundUp(Dividend dividend, Divisor divisor)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(dividend, 0)"
  },
  {
    "label": "RTC_DCHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GT(divisor, 0)"
  },
  {
    "label": "quotient()",
    "kind": "Method",
    "detail": "Function (auto quotient = dividend / divisor ; auto remainder = dividend % divisor ; return)",
    "insertText": "quotient(remainder > 0 ? 1 : 0)"
  },
  {
    "label": "DivideRoundToNearest()",
    "kind": "Method",
    "detail": "Function (} template<Dividend,Divisor> auto)",
    "insertText": "DivideRoundToNearest(Dividend dividend, Divisor divisor)"
  },
  {
    "label": "half_of_divisor()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "half_of_divisor(divisor - 1)"
  },
  {
    "label": "quotient()",
    "kind": "Method",
    "detail": "Function (auto quotient = dividend / divisor ; auto remainder = dividend % divisor ; return)",
    "insertText": "quotient(rtc::SafeGt(remainder, half_of_divisor) ? 1 : 0)"
  }
]