[
  {
    "label": "AllocatorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocatorType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "RecyclingAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RecyclingAllocator"
  },
  {
    "label": "SubClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SubClass"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_RECYCLINGALLOCATOR_H # define LLVM_SUPPORT_RECYCLINGALLOCATOR_H # include \" llvm / Support / Recycler . h \" namespace llvm { template<class AllocatorType,class T,size_t Size =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "RecyclingAllocator()",
    "kind": "Method",
    "detail": "Function (private : Recycler<T,Size,Align> Base ; AllocatorType Allocator ; public : ~)",
    "insertText": "RecyclingAllocator()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (Base .)",
    "insertText": "clear(Allocator)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} template<class SubClass> SubClass*)",
    "insertText": "Allocate()"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (} template<class SubClass> void)",
    "insertText": "Deallocate(SubClass* E)"
  },
  {
    "label": "PrintStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintStats()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} } ; } template<class AllocatorType,class T,size_t Size,size_t Align> void* operator)",
    "insertText": "new(size_t size, llvm::RecyclingAllocator<AllocatorType, T, Size, Align> &Allocator)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(size <= Size && \"allocation size exceeded\")"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (} template<class AllocatorType,class T,size_t Size,size_t Align> void operator)",
    "insertText": "delete(void *E, llvm::RecyclingAllocator<AllocatorType, T, Size, Align> &A)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "Deallocate(E)"
  }
]