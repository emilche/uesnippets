[
  {
    "label": "FMockMemoryChunkStoreStat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockMemoryChunkStoreStat"
  },
  {
    "label": "OnChunkStored()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Installer / MemoryChunkStore . h \" # if WITH_DEV_AUTOMATION_TESTS # include \" Common / StatsCollector . h \" namespace BuildPatchServices { class FMockMemoryChunkStoreStat : public IMemoryChunkStoreStat { public : typedef TTuple<double,FGuid> FChunkStored ; typedef TTuple<double,FGuid> FChunkReleased ; typedef TTuple<double,FGuid> FChunkBooted ; typedef TTuple<double,int32> FStoreUseUpdated ; typedef TTuple<double,int32> FStoreSizeUpdated ; public : void)",
    "insertText": "OnChunkStored(const FGuid& ChunkId)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxChunkStored .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkId)"
  },
  {
    "label": "OnChunkReleased()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnChunkReleased(const FGuid& ChunkId)"
  },
  {
    "label": "OnChunkBooted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnChunkBooted(const FGuid& ChunkId)"
  },
  {
    "label": "OnStoreUseUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStoreUseUpdated(int32 ChunkCount)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxStoreUseUpdated .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), ChunkCount)"
  },
  {
    "label": "OnStoreSizeUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStoreSizeUpdated(int32 Size)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (RxStoreSizeUpdated .)",
    "insertText": "Emplace(FStatsCollector::GetSeconds(), Size)"
  }
]