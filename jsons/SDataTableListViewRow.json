[
  {
    "label": "FDataTableEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataTableEditor"
  },
  {
    "label": "SDataTableListViewRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDataTableListViewRow"
  },
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "SDataTableRowHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDataTableRowHandle"
  },
  {
    "label": "FDataTableRowDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataTableRowDragDropOp"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / UnrealString . h \" # include \" DataTableEditorUtils . h \" # include \" Delegates / IDelegateInstance . h \" # include \" DragAndDrop / DecoratedDragDropOp . h \" # include \" HAL / Platform . h \" # include \" Input / DragAndDrop . h \" # include \" Input / Reply . h \" # include \" InputCoreTypes . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" UObject / NameTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Views / STableRow . h \" class FDataTableEditor ; class SDataTableListViewRow ; class SInlineEditableTextBlock ; class STableViewBase ; class SWidget ; struct FGeometry ; struct FKeyEvent ; struct FPointerEvent ; struct FSlateBrush ; class SDataTableRowHandle : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDataTableRowHandle)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_ARGUMENT(TSharedPtr<SDataTableListViewRow>, ParentRow) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (} ; FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CreateDragDropOperation()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FDataTableRowDragDropOp>)",
    "insertText": "CreateDragDropOperation(TSharedPtr<SDataTableListViewRow> InRow)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<SDataTableListViewRow> ParentRow ; } ; class SDataTableListViewRow : public SMultiColumnTableRow<FDataTableEditorRowListViewDataPtr> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDataTableListViewRow) : _IsEditable(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<FDataTableEditor>, DataTableEditor) SLATE_ARGUMENT(FDataTableEditorRowListViewDataPtr, RowDataPtr) SLATE_ARGUMENT(bool, IsEditable) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnRowRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRowRenamed(const FText& Text, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "GetCurrentNameAsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentNameAsText()"
  },
  {
    "label": "GetCurrentName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetCurrentName()"
  },
  {
    "label": "GetCurrentIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentIndex()"
  },
  {
    "label": "GetCellValues()",
    "kind": "Method",
    "detail": "Function (const TArray<FText>&)",
    "insertText": "GetCellValues()"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "SetRowForRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRowForRename()"
  },
  {
    "label": "SetIsDragDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsDragDrop(bool bInIsDragDrop)"
  },
  {
    "label": "GetRowDataPtr()",
    "kind": "Method",
    "detail": "Function (const FDataTableEditorRowListViewDataPtr&)",
    "insertText": "GetRowDataPtr()"
  },
  {
    "label": "OnSearchForReferences()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnSearchForReferences()"
  },
  {
    "label": "OnInsertNewRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInsertNewRow(ERowInsertionPosition InsertPosition)"
  },
  {
    "label": "OnRowDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnRowDrop(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "MakeCellWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeCellWidget(const int32 InRowIndex, const FName& InColumnId)"
  },
  {
    "label": "OnRowDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRowDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnRowDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRowDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetBorder()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBorder()"
  },
  {
    "label": "OnMoveToExtentClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMoveToExtentClicked(FDataTableEditorUtils::ERowMoveDirection MoveDirection)"
  },
  {
    "label": "MakeRowActionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeRowActionsMenu()"
  },
  {
    "label": "DRAG_DROP_OPERATOR_TYPE()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SInlineEditableTextBlock> InlineEditableText ; TSharedPtr<FName> CurrentName ; FDataTableEditorRowListViewDataPtr RowDataPtr ; TWeakPtr<FDataTableEditor> DataTableEditor ; bool IsEditable ; bool bIsDragDropObject ; bool bIsHoveredDragTarget ; } ; class FDataTableRowDragDropOp : public FDecoratedDragDropOp { public :)",
    "insertText": "DRAG_DROP_OPERATOR_TYPE(FDataTableRowDragDropOp, FDecoratedDragDropOp) FDataTableRowDragDropOp(TSharedPtr<SDataTableListViewRow> InRow)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDrop(bool bDropWasHandled, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetDefaultDecorator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> DecoratorWidget ; TSharedPtr<SWidget>)",
    "insertText": "GetDefaultDecorator()"
  }
]