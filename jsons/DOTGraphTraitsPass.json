[
  {
    "label": "DefaultAnalysisGraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DefaultAnalysisGraphTraits"
  },
  {
    "label": "DOTGraphTraitsViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DOTGraphTraitsViewer"
  },
  {
    "label": "DOTGraphTraitsPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DOTGraphTraitsPrinter"
  },
  {
    "label": "DOTGraphTraitsModuleViewer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DOTGraphTraitsModuleViewer"
  },
  {
    "label": "DOTGraphTraitsModulePrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DOTGraphTraitsModulePrinter"
  },
  {
    "label": "getGraph()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_DOTGRAPHTRAITSPASS_H # define LLVM_ANALYSIS_DOTGRAPHTRAITSPASS_H # include \" llvm / Analysis / CFGPrinter . h \" # include \" llvm / Pass . h \" # include \" llvm / Support / FileSystem . h \" namespace llvm { template<AnalysisT,GraphT = AnalysisT*> struct DefaultAnalysisGraphTraits { GraphT)",
    "insertText": "getGraph(AnalysisT *A)"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnFunction(Function &F)"
  },
  {
    "label": "getGraph()",
    "kind": "Method",
    "detail": "Function (GraphT Graph =)",
    "insertText": "getGraph(&getAnalysis<AnalysisT>())"
  },
  {
    "label": "getGraphName()",
    "kind": "Method",
    "detail": "Function (std::string GraphName = DOTGraphTraits<GraphT)",
    "insertText": "getGraphName(Graph)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (std::string Title = GraphName + \" for ' \" + F .)",
    "insertText": "getName().str()"
  },
  {
    "label": "WriteGraph()",
    "kind": "Method",
    "detail": "Function (* OSOverride<<\" \\ ngraph : \"<<GraphName<<\" . dot \\ n \" ;)",
    "insertText": "WriteGraph(*OSOverride, Graph, false, Title)"
  },
  {
    "label": "setPreservesAll()",
    "kind": "Method",
    "detail": "Function (AU .)",
    "insertText": "setPreservesAll()"
  },
  {
    "label": "AnalysisT()",
    "kind": "Method",
    "detail": "Function (AU . addRequired<)",
    "insertText": "AnalysisT()"
  },
  {
    "label": "DOTGraphTraitsPrinter()",
    "kind": "Method",
    "detail": "Function (} private : std::string Name ; } ; template<AnalysisT,bool IsSimple,GraphT = AnalysisT*,AnalysisGraphTraitsT = DefaultAnalysisGraphTraits<AnalysisT>> class DOTGraphTraitsPrinter : public FunctionPass { public :)",
    "insertText": "DOTGraphTraitsPrinter(StringRef GraphName, char &ID) : FunctionPass(ID), Name(GraphName)"
  },
  {
    "label": "WriteGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteGraph(*OSOverride, Graph, false, DOTGraphTraits<GraphT>::getGraphName(Graph))"
  },
  {
    "label": "errs()",
    "kind": "Method",
    "detail": "Function (std::error_code EC ;)",
    "insertText": "errs()"
  },
  {
    "label": "File()",
    "kind": "Method",
    "detail": "Function (raw_fd_ostream)",
    "insertText": "File(Filename, EC, sys::fs::F_Text)"
  },
  {
    "label": "DOTGraphTraitsModuleViewer()",
    "kind": "Method",
    "detail": "Function (} private : std::string Name ; } ; template<AnalysisT,bool IsSimple,GraphT = AnalysisT*,AnalysisGraphTraitsT = DefaultAnalysisGraphTraits<AnalysisT>> class DOTGraphTraitsModuleViewer : public ModulePass { public :)",
    "insertText": "DOTGraphTraitsModuleViewer(StringRef GraphName, char &ID) : ModulePass(ID), Name(GraphName)"
  },
  {
    "label": "runOnModule()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runOnModule(Module &M)"
  },
  {
    "label": "DOTGraphTraitsModulePrinter()",
    "kind": "Method",
    "detail": "Function (} private : std::string Name ; } ; template<AnalysisT,bool IsSimple,GraphT = AnalysisT*,AnalysisGraphTraitsT = DefaultAnalysisGraphTraits<AnalysisT>> class DOTGraphTraitsModulePrinter : public ModulePass { public :)",
    "insertText": "DOTGraphTraitsModulePrinter(StringRef GraphName, char &ID) : ModulePass(ID), Name(GraphName)"
  }
]