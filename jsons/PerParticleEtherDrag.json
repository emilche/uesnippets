[
  {
    "label": "FPerParticleEtherDrag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticleEtherDrag"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPerParticleEtherDrag()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PerParticleRule . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / Utilities . h \" namespace Chaos { FRealSingle LinearEtherDragOverride ; FRealSingle AngularEtherDragOverride ; class FPerParticleEtherDrag : public FPerParticleRule { public :)",
    "insertText": "FPerParticleEtherDrag()"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyHelper(FVec3& V, FVec3& W, FReal LinearDamp, FReal AngularDamp, FReal LinearLimitSq, FReal AngularLimitSq, FReal Dt)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FReal LinearDrag = LinearEtherDragOverride> = 0 ? LinearEtherDragOverride : LinearDamp* Dt ; const FReal LinearMultiplier =)",
    "insertText": "Max(FReal(0), FReal(1) - LinearDrag)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (V* = LinearMultiplier ; const FReal AngularDrag = AngularEtherDragOverride> = 0 ? AngularEtherDragOverride : AngularDamp* Dt ; const FReal AngularMultiplier =)",
    "insertText": "Max(FReal(0), FReal(1) - AngularDrag)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (W* = AngularMultiplier ; const FReal LinearSpeedSq = V .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (V* =)",
    "insertText": "Sqrt(LinearLimitSq / LinearSpeedSq)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AngularSpeedSq > AngularLimitSq)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (W* =)",
    "insertText": "Sqrt(AngularLimitSq / AngularSpeedSq)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Apply(FDynamicParticles& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TRigidParticles<FReal, 3>& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (FVec3 V = InParticles .)",
    "insertText": "GetV(Index)"
  },
  {
    "label": "GetW()",
    "kind": "Method",
    "detail": "Function (FVec3 W = InParticles .)",
    "insertText": "GetW(Index)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHelper(V, W, InParticles.LinearEtherDrag(Index), InParticles.AngularEtherDrag(Index), InParticles.MaxLinearSpeedSq(Index), InParticles.MaxAngularSpeedSq(Index), Dt)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetV(Index, V)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "SetW(Index, W)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(TTransientPBDRigidParticleHandle<FReal, 3>& Particle, const FReal Dt)"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (FVec3 V = Particle .)",
    "insertText": "GetV()"
  },
  {
    "label": "GetW()",
    "kind": "Method",
    "detail": "Function (FVec3 W = Particle .)",
    "insertText": "GetW()"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHelper(V, W, Particle.LinearEtherDrag(), Particle.AngularEtherDrag(), Particle.MaxLinearSpeedSq(), Particle.MaxAngularSpeedSq(), Dt)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "SetV(V)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (Particle .)",
    "insertText": "SetW(W)"
  }
]