[
  {
    "label": "UTypedElementRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementRegistry"
  },
  {
    "label": "FScriptTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptTypedElementHandle"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "BatchElementsByType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Elements / Framework / TypedElementHandle . h \" # include \" Elements / Framework / TypedElementLimits . h \" # include \" Elements / Framework / TypedElementListFwd . h \" class UTypedElementRegistry ; struct FScriptTypedElementHandle ; struct FTypedElementHandle ; namespace TypedElementUtil { void)",
    "insertText": "BatchElementsByType(FTypedElementListConstRef InElementsToBatch, TMap<FTypedHandleTypeId, TArray<FTypedElementHandle>>& OutElementsByType)"
  },
  {
    "label": "BatchElementsByType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchElementsByType(TArrayView<const FTypedElementHandle> InElementsToBatch, TMap<FTypedHandleTypeId, TArray<FTypedElementHandle>>& OutElementsByType)"
  },
  {
    "label": "ConvertToScriptElementArray()",
    "kind": "Method",
    "detail": "Function (TArray<FScriptTypedElementHandle>)",
    "insertText": "ConvertToScriptElementArray(const TArray<FTypedElementHandle>& InNativeHandles, UTypedElementRegistry* Registry)"
  },
  {
    "label": "ConvertToNativeElementArray()",
    "kind": "Method",
    "detail": "Function (TArray<FTypedElementHandle>)",
    "insertText": "ConvertToNativeElementArray(const TArray<FScriptTypedElementHandle>& InScriptHandles)"
  }
]