[
  {
    "label": "FOpResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpResult"
  },
  {
    "label": "EKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EKind"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__) #include \"CoreTypes.h\" #include \"VVMValue.h\" #define V_RETURN(Value)"
  },
  {
    "label": "V_REQUIRE_CONCRETE()",
    "kind": "Method",
    "detail": "Function (\\::Verse::FOpResult::Return,Value \\ } # define)",
    "insertText": "V_REQUIRE_CONCRETE(Value) \\ if ((Value).IsPlaceholder())"
  },
  {
    "label": "V_FAIL_IF()",
    "kind": "Method",
    "detail": "Function (\\ return {::Verse::FOpResult::Block,Value } ; \\ } # define)",
    "insertText": "V_FAIL_IF(Condition) \\ if (Condition)"
  },
  {
    "label": "V_FAIL_UNLESS()",
    "kind": "Method",
    "detail": "Function (\\ return {::Verse::FOpResult::Fail } ; \\ } # define)",
    "insertText": "V_FAIL_UNLESS(Condition) \\ if (!(Condition))"
  },
  {
    "label": "V_YIELD()",
    "kind": "Method",
    "detail": "Function (\\ return {::Verse::FOpResult::Fail } ; \\ } # define)",
    "insertText": "V_YIELD()"
  },
  {
    "label": "V_RUNTIME_ERROR()",
    "kind": "Method",
    "detail": "Function (\\::Verse::FOpResult::Yield \\ } # define)",
    "insertText": "V_RUNTIME_ERROR(Context, Message)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (\\::Verse::FOpResult::Error,::Verse::)",
    "insertText": "New(Context, Message) \\ } #define V_RUNTIME_ERROR_IF(Condition, Context, Message) \\ if (Condition)"
  },
  {
    "label": "FOpResult()",
    "kind": "Method",
    "detail": "Function (\\ } namespace Verse { struct FOpResult { enum EKind { Return,Block,Fail,Yield,Error,} ;)",
    "insertText": "FOpResult(EKind Kind, VValue Value = VValue()) : Kind(Kind) , Value(Value)"
  }
]