[
  {
    "label": "Cross2D()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainersFwd . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Math / Vector2D . h \" namespace UE::AI { FVector::FReal)",
    "insertText": "Cross2D(const FVector& A, const FVector& B)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const FVector AB = B - A ; const FVector AC = C - A ;)",
    "insertText": "return(AC.X * AB.Y - AB.X * AC.Y)"
  },
  {
    "label": "TriArea2D()",
    "kind": "Method",
    "detail": "Function (} FVector2D::FReal)",
    "insertText": "TriArea2D(const FVector2D& A, const FVector2D& B, const FVector2D& C)"
  },
  {
    "label": "ProjectPointOnSegment2D()",
    "kind": "Method",
    "detail": "Function (} FVector2D::FReal)",
    "insertText": "ProjectPointOnSegment2D(const FVector Point, const FVector Start, const FVector End)"
  },
  {
    "label": "Seg()",
    "kind": "Method",
    "detail": "Function (using FReal = FVector::FReal ; const FVector2D)",
    "insertText": "Seg(End - Start)"
  },
  {
    "label": "Dir()",
    "kind": "Method",
    "detail": "Function (const FVector2D)",
    "insertText": "Dir(Point - Start)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (const FReal D = Seg .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal T =)",
    "insertText": "DotProduct(Seg, Dir)"
  },
  {
    "label": "ProjectPointOnLine2D()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "ProjectPointOnLine2D(const FVector Point, const FVector Start, const FVector End)"
  },
  {
    "label": "SignedDistancePointLine2D()",
    "kind": "Method",
    "detail": "Function (} FVector::FReal)",
    "insertText": "SignedDistancePointLine2D(const FVector Point, const FVector Start, const FVector End)"
  },
  {
    "label": "Cross2D()",
    "kind": "Method",
    "detail": "Function (const FReal Nom =)",
    "insertText": "Cross2D(Seg, Dir)"
  },
  {
    "label": "UE_KINDA_SMALL_NUMBER()",
    "kind": "Method",
    "detail": "Function (const FReal Dist = Den>)",
    "insertText": "UE_KINDA_SMALL_NUMBER(Nom / FMath::Sqrt(Den))"
  },
  {
    "label": "Cross2D()",
    "kind": "Method",
    "detail": "Function (using FReal = FVector::FReal ; const FVector U = EndA - StartA ; const FVector V = EndB - StartB ; const FVector W = StartA - StartB ; const FReal D =)",
    "insertText": "Cross2D(U, V)"
  },
  {
    "label": "Cross2D()",
    "kind": "Method",
    "detail": "Function (OutTA = 0 . 0 ; OutTB = 0 . 0 ; return false ; } OutTA =)",
    "insertText": "Cross2D(V, W)"
  },
  {
    "label": "Cross2D()",
    "kind": "Method",
    "detail": "Function (OutTB =)",
    "insertText": "Cross2D(U, W)"
  },
  {
    "label": "Bilinear()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "Bilinear(const FVector2D UV, const FVector VertexA, const FVector VertexB, const FVector VertexC, const FVector VertexD)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const FVector AB =)",
    "insertText": "Lerp(VertexA, VertexB, UV.X)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (const FVector CD =)",
    "insertText": "Lerp(VertexD, VertexC, UV.X)"
  },
  {
    "label": "InvBilinear2D()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "InvBilinear2D(const FVector Point, const FVector VertexA, const FVector VertexB, const FVector VertexC, const FVector VertexD)"
  },
  {
    "label": "InvBilinear2DClamped()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "InvBilinear2DClamped(const FVector Point, const FVector VertexA, const FVector VertexB, const FVector VertexC, const FVector VertexD)"
  }
]