[
  {
    "label": "AecDumpImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AecDumpImpl"
  },
  {
    "label": "RTC_PUSH_IGNORING_WUNDEF()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC_DUMP_AEC_DUMP_IMPL_H_ # define MODULES_AUDIO_PROCESSING_AEC_DUMP_AEC_DUMP_IMPL_H_ # include<memory> # include<string> # include<vector> # include \" modules / audio_processing / aec_dump / capture_stream_info . h \" # include \" modules / audio_processing / include / aec_dump . h \" # include \" rtc_base / ignore_wundef . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / system / file_wrapper . h \" # include \" rtc_base / task_queue . h \" # include \" rtc_base / thread_annotations . h \")",
    "insertText": "RTC_PUSH_IGNORING_WUNDEF() #ifdef WEBRTC_ANDROID_PLATFORM_BUILD #include \"external/webrtc/webrtc/modules/audio_processing/debug.pb.h\" #else #include \"modules/audio_processing/debug.pb.h\" #endif RTC_POP_IGNORING_WUNDEF()"
  },
  {
    "label": "AecDumpImpl()",
    "kind": "Method",
    "detail": "Function (class AecDumpImpl : public AecDump { public :)",
    "insertText": "AecDumpImpl(FileWrapper debug_file, int64_t max_log_size_bytes, rtc::TaskQueue* worker_queue)"
  },
  {
    "label": "AecDumpImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AecDumpImpl(const AecDumpImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AecDumpImpl&)",
    "insertText": "operator(const AecDumpImpl&)"
  },
  {
    "label": "AecDumpImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AecDumpImpl()"
  },
  {
    "label": "WriteInitMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInitMessage(const ProcessingConfig& api_format, int64_t time_now_ms)"
  },
  {
    "label": "AddCaptureStreamInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCaptureStreamInput(const AudioFrameView<const float>& src)"
  },
  {
    "label": "AddCaptureStreamOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCaptureStreamOutput(const AudioFrameView<const float>& src)"
  },
  {
    "label": "AddCaptureStreamInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCaptureStreamInput(const int16_t* const data, int num_channels, int samples_per_channel)"
  },
  {
    "label": "AddCaptureStreamOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCaptureStreamOutput(const int16_t* const data, int num_channels, int samples_per_channel)"
  },
  {
    "label": "AddAudioProcessingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudioProcessingState(const AudioProcessingState& state)"
  },
  {
    "label": "WriteCaptureStreamMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCaptureStreamMessage()"
  },
  {
    "label": "WriteRenderStreamMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteRenderStreamMessage(const int16_t* const data, int num_channels, int samples_per_channel)"
  },
  {
    "label": "WriteRenderStreamMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteRenderStreamMessage(const AudioFrameView<const float>& src)"
  },
  {
    "label": "WriteConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteConfig(const InternalAPMConfig& config)"
  },
  {
    "label": "WriteRuntimeSetting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteRuntimeSetting(const AudioProcessing::RuntimeSetting& runtime_setting)"
  },
  {
    "label": "PostWriteToFileTask()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PostWriteToFileTask(std::unique_ptr<audioproc::Event> event)"
  }
]