[
  {
    "label": "FGenericPlatformString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformString"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformStricmp . h \" # include \" Templates / EnableIf . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" Traits / IsCharEncodingSimplyConvertibleTo . h \" # include \" Traits / IsCharType . h \" # include \" Traits / IsFixedWidthCharEncoding . h \" # include<type_traits> namespace UE::Core::Private { int32)",
    "insertText": "GetConvertedLength(const UTF8CHAR* Dest, const WIDECHAR* Src)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const UTF8CHAR* Dest, const WIDECHAR* Src, int32 SrcLen)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const UTF8CHAR* Dest, const UCS2CHAR* Src)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const UTF8CHAR* Dest, const UCS2CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const UTF8CHAR* Dest, const UTF32CHAR* Src)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const UTF8CHAR* Dest, const UTF32CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const ANSICHAR* Dest, const UTF8CHAR* Src)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const ANSICHAR* Dest, const UTF8CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const WIDECHAR* Dest, const UTF8CHAR* Src)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const WIDECHAR* Dest, const UTF8CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const UCS2CHAR* Dest, const UTF8CHAR* Src)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetConvertedLength(const UCS2CHAR* Dest, const UTF8CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (UTF8CHAR*)",
    "insertText": "Convert(UTF8CHAR* Dest, int32 DestLen, const WIDECHAR* Src)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (UTF8CHAR*)",
    "insertText": "Convert(UTF8CHAR* Dest, int32 DestLen, const WIDECHAR* Src, int32 SrcLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (UTF8CHAR*)",
    "insertText": "Convert(UTF8CHAR* Dest, int32 DestLen, const UCS2CHAR* Src)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (UTF8CHAR*)",
    "insertText": "Convert(UTF8CHAR* Dest, int32 DestLen, const UCS2CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (UTF8CHAR*)",
    "insertText": "Convert(UTF8CHAR* Dest, int32 DestLen, const UTF32CHAR* Src)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (UTF8CHAR*)",
    "insertText": "Convert(UTF8CHAR* Dest, int32 DestLen, const UTF32CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (ANSICHAR*)",
    "insertText": "Convert(ANSICHAR* Dest, int32 DestLen, const UTF8CHAR* Src)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (ANSICHAR*)",
    "insertText": "Convert(ANSICHAR* Dest, int32 DestLen, const UTF8CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (WIDECHAR*)",
    "insertText": "Convert(WIDECHAR* Dest, int32 DestLen, const UTF8CHAR* Src)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (WIDECHAR*)",
    "insertText": "Convert(WIDECHAR* Dest, int32 DestLen, const UTF8CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (UCS2CHAR*)",
    "insertText": "Convert(UCS2CHAR* Dest, int32 DestLen, const UTF8CHAR* Src)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (UCS2CHAR*)",
    "insertText": "Convert(UCS2CHAR* Dest, int32 DestLen, const UTF8CHAR* Src, int32 SrcLen)"
  },
  {
    "label": "HIGH_SURROGATE_START_CODEPOINT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "HIGH_SURROGATE_START_CODEPOINT((uint16)0xD800) #define HIGH_SURROGATE_END_CODEPOINT ((uint16)0xDBFF) #define LOW_SURROGATE_START_CODEPOINT ((uint16)0xDC00) #define LOW_SURROGATE_END_CODEPOINT ((uint16)0xDFFF) #define ENCODED_SURROGATE_START_CODEPOINT ((uint32)0x10000) #define ENCODED_SURROGATE_END_CODEPOINT ((uint32)0x10FFFF) #define UNICODE_BOGUS_CHAR_CODEPOINT '?' static_assert(sizeof(UNICODE_BOGUS_CHAR_CODEPOINT) <= sizeof(ANSICHAR) && (UNICODE_BOGUS_CHAR_CODEPOINT) >= 32 && (UNICODE_BOGUS_CHAR_CODEPOINT) <= 127, \"The Unicode Bogus character point is expected to fit in a single ANSICHAR here\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(SourceEncoding) == 4 && sizeof(DestEncoding) == 2, \"Unimplemented conversion\")"
  },
  {
    "label": "GetEncodingTypeName()",
    "kind": "Method",
    "detail": "Function (} } template<Encoding> const TCHAR*)",
    "insertText": "GetEncodingTypeName()"
  },
  {
    "label": "GetEncodingName()",
    "kind": "Method",
    "detail": "Function (const ANSICHAR*)",
    "insertText": "GetEncodingName()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (enum { Value = TIsFixedWidthCharEncoding_V<EncodingA>&& TIsFixedWidthCharEncoding_V<EncodingB>&&)",
    "insertText": "sizeof(EncodingA) == sizeof(EncodingB)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} ; template<SourceEncoding,DestEncoding> DestEncoding*)",
    "insertText": "Convert(DestEncoding* Dest, int32 DestSize, const SourceEncoding* Src)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DestEncoding* DestCopy = Dest ; const SourceEncoding* SrcCopy = Src ; int32 DestSizeCopy = DestSize ; bool bInvalidChars = false ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "Dest()",
    "kind": "Method",
    "detail": "Function (Dest = nullptr ; break ; } SourceEncoding SrcCh =* Src + + ;*)",
    "insertText": "Dest(DestEncoding)"
  },
  {
    "label": "DestEncoding()",
    "kind": "Method",
    "detail": "Function (break ; } bInvalidChars | = ! CanConvertCodepoint<)",
    "insertText": "DestEncoding(SrcCh)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - DestSize ; })",
    "insertText": "if(bInvalidChars)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } SourceEncoding SrcCh =* SrcCopy + + ;)",
    "insertText": "if(!SrcCh)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "if(!CanConvertCodepoint<DestEncoding>(SrcCh))"
  },
  {
    "label": "DestEncoding()",
    "kind": "Method",
    "detail": "Function (* DestCopy = UNICODE_BOGUS_CHAR_CODEPOINT ; } + + DestCopy ; - - DestSizeCopy ; } LogBogusChars<)",
    "insertText": "DestEncoding(Src)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} return Dest ; } else { DestEncoding* Result = UE::Core::)",
    "insertText": "Convert(Dest, DestSize, Src)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "Result(DestEncoding)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} return Result ; } } template<SourceEncoding,DestEncoding> DestEncoding*)",
    "insertText": "Convert(DestEncoding* Dest, int32 DestSize, const SourceEncoding* Src, int32 SrcSize)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TIsCharEncodingSimplyConvertibleTo_V<SourceEncoding, DestEncoding>)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 Size = DestSize<= SrcSize ? DestSize : SrcSize ;)",
    "insertText": "for(int I = 0; I < Size; ++I)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (SourceEncoding SrcCh = Src [ I ] ; Dest [)",
    "insertText": "I(DestEncoding)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} return DestSize<SrcSize ? nullptr : Dest + Size ; } else if)",
    "insertText": "constexpr(TIsFixedWidthCharEncoding_V<SourceEncoding> && TIsFixedWidthCharEncoding_V<DestEncoding>)"
  },
  {
    "label": "DestEncoding()",
    "kind": "Method",
    "detail": "Function (Dest [ I ] = UNICODE_BOGUS_CHAR_CODEPOINT ; } } LogBogusChars<)",
    "insertText": "DestEncoding(Src, Size)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} return DestSize<SrcSize ? nullptr : Dest + Size ; } else { return UE::Core::)",
    "insertText": "Convert(Dest, DestSize, Src, SrcSize)"
  },
  {
    "label": "ConvertedLength()",
    "kind": "Method",
    "detail": "Function (} } template<DestEncoding,SourceEncoding> int32)",
    "insertText": "ConvertedLength(const SourceEncoding* Src)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int32 Result = 0 ;)",
    "insertText": "while(*Src)"
  },
  {
    "label": "GetConvertedLength()",
    "kind": "Method",
    "detail": "Function (+ + Src ; + + Result ; } return Result + 1 ; } else { return UE::Core::)",
    "insertText": "GetConvertedLength((DestEncoding*)nullptr, Src)"
  },
  {
    "label": "ConvertedLength()",
    "kind": "Method",
    "detail": "Function (} } template<DestEncoding,SourceEncoding> int32)",
    "insertText": "ConvertedLength(const SourceEncoding* Src, int32 SrcSize)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "Strncmp(const ANSICHAR* String1, const ANSICHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const WIDECHAR* String1, const ANSICHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const UTF8CHAR* String1, const ANSICHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const ANSICHAR* String1, const WIDECHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const WIDECHAR* String1, const WIDECHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const UTF8CHAR* String1, const WIDECHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const ANSICHAR* String1, const UTF8CHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const WIDECHAR* String1, const UTF8CHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Strncmp(const UTF8CHAR* String1, const UTF8CHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (private : void*)",
    "insertText": "Memcpy(void* Dest, const void* Src, SIZE_T Count)"
  },
  {
    "label": "LogBogusChars()",
    "kind": "Method",
    "detail": "Function (template<DestEncoding,SourceEncoding> void)",
    "insertText": "LogBogusChars(const SourceEncoding* Src)"
  },
  {
    "label": "LogBogusChars()",
    "kind": "Method",
    "detail": "Function (template<DestEncoding,SourceEncoding> void)",
    "insertText": "LogBogusChars(const SourceEncoding* Src, int32 SrcSize)"
  }
]