[
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FGlobalShaderPermutationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalShaderPermutationParameters"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "FRDGTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGTexture"
  },
  {
    "label": "FScreenMessageWriter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenMessageWriter"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FMegaLightsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMegaLightsVolume"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" class FSceneViewFamily ; struct FGlobalShaderPermutationParameters ; enum EShaderPlatform : uint16 ; class FRDGTexture ; using FRDGTextureRef = FRDGTexture* ; struct FScreenMessageWriter ; namespace ECastRayTracedShadow { enum Type : int ; } ; class FMegaLightsVolume { public : FRDGTextureRef Texture = nullptr ; } ; enum class EMegaLightsMode { Disabled,EnabledRT,EnabledVSM } ; namespace MegaLights { bool)",
    "insertText": "IsEnabled(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "IsUsingClosestHZB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingClosestHZB(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "IsUsingGlobalSDF()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingGlobalSDF(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "IsUsingLightFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingLightFunctions(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "IsSoftwareRayTracingSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoftwareRayTracingSupported(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "IsHardwareRayTracingSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHardwareRayTracingSupported(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "GetMegaLightsMode()",
    "kind": "Method",
    "detail": "Function (EMegaLightsMode)",
    "insertText": "GetMegaLightsMode(const FSceneViewFamily& ViewFamily, uint8 LightType, bool bLightAllowsMegaLights, TEnumAsByte<EMegaLightsShadowMethod::Type> ShadowMethod)"
  },
  {
    "label": "UseHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracing(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseInlineHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseInlineHardwareRayTracing(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ShouldCompileShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompileShaders(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "UseVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseVolume()"
  },
  {
    "label": "GetSampleMargin()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSampleMargin()"
  },
  {
    "label": "HasWarning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasWarning(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "WriteWarnings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteWarnings(const FSceneViewFamily& ViewFamily, FScreenMessageWriter& Writer)"
  }
]