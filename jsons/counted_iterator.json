[
  {
    "label": "__counted_iterator_concept",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__counted_iterator_concept"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "__counted_iterator_category",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__counted_iterator_category"
  },
  {
    "label": "__counted_iterator_value_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__counted_iterator_value_type"
  },
  {
    "label": "counted_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "counted_iterator"
  },
  {
    "label": "_I2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_I2"
  },
  {
    "label": "iterator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iterator_traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_COUNTED_ITERATOR_H # define _LIBCPP___ITERATOR_COUNTED_ITERATOR_H # include<__assert> # include<__config> # include<__iterator / concepts . h> # include<__iterator / default_sentinel . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iter_move . h> # include<__iterator / iter_swap . h> # include<__iterator / iterator_traits . h> # include<__iterator / readable_traits . h> # include<__memory / pointer_traits . h> # include<__utility / move . h> # include<compare> # include<concepts> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (} ; template<class _Iter> requires requires { _Iter::iterator_concept ; } struct __counted_iterator_concept<_Iter> { using iterator_concept = _Iter::iterator_concept ; } ; template<class> struct __counted_iterator_category { } ; template<class _Iter> requires requires { _Iter::iterator_category ; } struct __counted_iterator_category<_Iter> { using iterator_category = _Iter::iterator_category ; } ; template<class> struct __counted_iterator_value_type { } ; template<indirectly_readable _Iter> struct __counted_iterator_value_type<_Iter> { using value_type = iter_value_t<_Iter> ; } ; template<input_or_output_iterator _Iter> class counted_iterator : public __counted_iterator_concept<_Iter>,public __counted_iterator_category<_Iter>,public __counted_iterator_value_type<_Iter> { public : _LIBCPP_NO_UNIQUE_ADDRESS _Iter __current_ =)",
    "insertText": "_Iter()"
  },
  {
    "label": "counted_iterator()",
    "kind": "Method",
    "detail": "Function (iter_difference_t<_Iter> __count_ = 0 ; using iterator_type = _Iter ; using difference_type = iter_difference_t<_Iter> ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "counted_iterator()"
  },
  {
    "label": "counted_iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "counted_iterator(_Iter __iter, iter_difference_t<_Iter> __n) : __current_(_VSTD::move(__iter)), __count_(__n)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__n >= 0, \"__n must not be negative.\")"
  },
  {
    "label": "counted_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class _I2> requires convertible_to<const _I2&,_Iter> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "counted_iterator(const counted_iterator<_I2>& __other) : __current_(__other.__current_), __count_(__other.__count_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _I2> requires assignable_from<_Iter&,const _I2&> _LIBCPP_HIDE_FROM_ABI counted_iterator&)",
    "insertText": "operator(const counted_iterator<_I2>& __other)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (__current_ = __other . __current_ ; __count_ = __other . __count_ ; return* this ; } _LIBCPP_HIDE_FROM_ABI const _Iter&)",
    "insertText": "base()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI iter_difference_t<_Iter>)",
    "insertText": "count()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__count_ > 0, \"Iterator is equal to or past end.\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI counted_iterator&)",
    "insertText": "operator()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__count_ > 0, \"Iterator already at or past end.\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (+ + __current_ ; - - __count_ ; return* this ; } _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) operator++(int)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (- - __count_ ; # ifndef _LIBCPP_NO_EXCEPTIONS try { return __current_ + + ; })",
    "insertText": "catch(...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + __count_ ; throw ; } # else return __current_ + + ; # endif } _LIBCPP_HIDE_FROM_ABI counted_iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (counted_iterator __tmp =* this ; - -* this ; return __tmp ; } _LIBCPP_HIDE_FROM_ABI counted_iterator)",
    "insertText": "operator(iter_difference_t<_Iter> __n)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI counted_iterator)",
    "insertText": "operator(iter_difference_t<_Iter> __n, const counted_iterator& __x)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__n <= __count_, \"Cannot advance iterator past end.\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<common_with<_Iter> _I2> _LIBCPP_HIDE_FROM_ABI iter_difference_t<_I2>)",
    "insertText": "operator(const counted_iterator& __lhs, const counted_iterator<_I2>& __rhs)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(-__n <= __count_, \"Attempt to subtract too large of a size: \" \"counted_iterator would be decremented before the \" \"first element of its range.\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (__current_ - = __n ; __count_ + = __n ; return* this ; } _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "decltype(auto) operator[](iter_difference_t<_Iter> __n)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__n < __count_, \"Subscript argument must be less than size.\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__i.__count_ > 0, \"Iterator must not be past end of range.\")"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (} template<indirectly_swappable<_Iter> _I2> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "iter_swap(const counted_iterator& __x, const counted_iterator<_I2>& __y) noexcept(noexcept(ranges::iter_swap(__x.__current_, __y.__current_)))"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__x.__count_ > 0 && __y.__count_ > 0, \"Iterators must not be past end of range.\")"
  }
]