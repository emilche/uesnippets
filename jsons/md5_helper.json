[
  {
    "label": "MD5",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MD5"
  },
  {
    "label": "MD5()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_MD5_HELPER_H_ # define VPX_TEST_MD5_HELPER_H_ # include \" . / md5_utils . h \" # include \" vpx / vpx_decoder . h \" namespace libvpx_test { class MD5 { public :)",
    "insertText": "MD5()"
  },
  {
    "label": "MD5Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MD5Init(&md5_)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const vpx_image_t *img)"
  },
  {
    "label": "bytes_per_sample()",
    "kind": "Method",
    "detail": "Function (const uint8_t* buf = img -> planes [ plane ] ; const int)",
    "insertText": "bytes_per_sample(img->fmt & VPX_IMG_FMT_HIGHBITDEPTH)"
  },
  {
    "label": "plane()",
    "kind": "Method",
    "detail": "Function (y_chroma_shift\n                : img->d_h)",
    "insertText": "plane(img->d_h + img->y_chroma_shift)"
  },
  {
    "label": "w()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "w(plane ? (img->d_w + img->x_chroma_shift) >> img->x_chroma_shift : img->d_w)"
  },
  {
    "label": "MD5Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MD5Update(&md5_, buf, w)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (buf + = img -> stride [ plane ] ; } } } void)",
    "insertText": "Add(const uint8_t *data, size_t size)"
  },
  {
    "label": "MD5Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MD5Update(&md5_, data, static_cast<uint32_t>(size))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "Get()"
  },
  {
    "label": "MD5Final()",
    "kind": "Method",
    "detail": "Function (const char hex [ 1 6 ] = { ' 0 ',' 1 ',' 2 ',' 3 ',' 4 ',' 5 ',' 6 ',' 7 ',' 8 ',' 9 ',' a ',' b ',' c ',' d ',' e ',' f ',} ; uint8_t tmp [ 1 6 ] ; MD5Context ctx_tmp = md5_ ;)",
    "insertText": "MD5Final(tmp, &ctx_tmp)"
  }
]