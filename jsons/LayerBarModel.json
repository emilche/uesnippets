[
  {
    "label": "ILayerBarExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILayerBarExtension"
  },
  {
    "label": "TAutoRegisterViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAutoRegisterViewModelTypeID"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FSequenceModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequenceModel"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / Extensions / IDraggableTrackAreaExtension . h \" # include \" MVVM / Extensions / ILayerBarExtension . h \" # include \" MVVM / Extensions / ISelectableExtension . h \" # include \" MVVM / Extensions / ISnappableExtension . h \" # include \" MVVM / Extensions / IStretchableExtension . h \" # include \" MVVM / Extensions / ITrackLaneExtension . h \" # include \" MVVM / Extensions / LinkedOutlinerExtension . h \" # include \" MVVM / Extensions / ViewModelExtensionCollection . h \" # include \" MVVM / ICastable . h \" # include \" MVVM / ViewModels / ViewModel . h \" # include \" Math / Range . h \" # include \" Templates / SharedPointer . h \" namespace UE::Sequencer { class ILayerBarExtension ; } namespace UE::Sequencer { template<T> struct TAutoRegisterViewModelTypeID ; } struct FFrameNumber ; namespace UE { namespace Sequencer { class FSequenceModel ; class FLayerBarModel : public FViewModel,public FLinkedOutlinerExtension,public ITrackLaneExtension,public ISelectableExtension,public ISnappableExtension,public IDraggableTrackAreaExtension,public IStretchableExtension,protected TViewModelExtensionCollection<ILayerBarExtension> { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(FLayerBarModel, FViewModel , FLinkedOutlinerExtension , ITrackLaneExtension , ISelectableExtension , ISnappableExtension , IDraggableTrackAreaExtension , IStretchableExtension)"
  },
  {
    "label": "FLayerBarModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLayerBarModel(TWeakPtr<FViewModel> LayerRoot)"
  },
  {
    "label": "FLayerBarModel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLayerBarModel()"
  },
  {
    "label": "CreateTrackLaneView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITrackLaneWidget>)",
    "insertText": "CreateTrackLaneView(const FCreateTrackLaneViewParams& InParams)"
  },
  {
    "label": "ArrangeVirtualTrackLaneView()",
    "kind": "Method",
    "detail": "Function (FTrackLaneVirtualAlignment)",
    "insertText": "ArrangeVirtualTrackLaneView()"
  },
  {
    "label": "IsSelectable()",
    "kind": "Method",
    "detail": "Function (ESelectionIntent)",
    "insertText": "IsSelectable()"
  },
  {
    "label": "AddToSnapField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToSnapField(const ISnapCandidate& Candidate, ISnapField& SnapField)"
  },
  {
    "label": "CanDrag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDrag()"
  },
  {
    "label": "OnBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginDrag(IDragOperation& DragOperation)"
  },
  {
    "label": "OnEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDrag(IDragOperation& DragOperation)"
  },
  {
    "label": "OnInitiateStretch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitiateStretch(IStretchOperation& StretchOperation, EStretchConstraint Constraint, FStretchParameters* InOutGlobalParameters)"
  },
  {
    "label": "ComputeRange()",
    "kind": "Method",
    "detail": "Function (public : TRange<FFrameNumber>)",
    "insertText": "ComputeRange()"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Offset(FFrameNumber Offset)"
  },
  {
    "label": "OnConstruct()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnConstruct()"
  },
  {
    "label": "OnDestruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDestruct()"
  },
  {
    "label": "OnExtensionsDirtied()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExtensionsDirtied()"
  }
]