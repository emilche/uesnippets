[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Core / CADKernelArchive . h \" enum class EHaveStates : uint16 { None = 0 x0000u,IsApplyCriteria = 0 x0001u,IsMeshed = 0 x0002u,IsPreMeshed = 0 x0004u,ThinZone = 0 x0008u,Degenerated = 0 x0010u,IsDeleted = 0 x0020u,IsVirtuallyMeshed = 0 x0040u,ThinPeak = 0 x0080u,IsBackOriented = 0 x0100u,IsInner = 0 x0100u,FirstSideClosed = 0 x0200u,SecondSideClosed = 0 x0400u,HasMarker1 = 0 x0800u,HasMarker2 = 0 x1000u,ToProcess = 0 x2000u,IsWaiting = 0 x4000u,IsProcessed = 0 x8000u,AllMarkers = 0 xF800u,All = 0 xFFFFu } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EHaveStates)"
  },
  {
    "label": "FHaveStates()",
    "kind": "Method",
    "detail": "Function (namespace UE::CADKernel { class FHaveStates { protected : EHaveStates States ; public :)",
    "insertText": "FHaveStates() : States(EHaveStates::None)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "ResetElementStatus()",
    "kind": "Method",
    "detail": "Function (Ar<<States ; } void)",
    "insertText": "ResetElementStatus()"
  },
  {
    "label": "HasMarker1()",
    "kind": "Method",
    "detail": "Function (States = EHaveStates::None ; } bool)",
    "insertText": "HasMarker1()"
  },
  {
    "label": "HasMarker2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMarker2()"
  },
  {
    "label": "HasMarker1And2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMarker1And2()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (EHaveStates HasMarker12 = EHaveStates::HasMarker1 | EHaveStates::HasMarker2 ;)",
    "insertText": "return((States & HasMarker12) == HasMarker12)"
  },
  {
    "label": "HasMarker1Or2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMarker1Or2()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (EHaveStates HasMarker12 = EHaveStates::HasMarker1 | EHaveStates::HasMarker2 ;)",
    "insertText": "return((States & HasMarker12) != EHaveStates::None)"
  },
  {
    "label": "SetMarker1()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMarker1()"
  },
  {
    "label": "SetMarker2()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::HasMarker1 ; } void)",
    "insertText": "SetMarker2()"
  },
  {
    "label": "ResetMarker1()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::HasMarker2 ; } void)",
    "insertText": "ResetMarker1()"
  },
  {
    "label": "ResetMarker2()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::HasMarker1 ; } void)",
    "insertText": "ResetMarker2()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::HasMarker2 ; } void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "IsDeleted()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::AllMarkers ; } bool)",
    "insertText": "IsDeleted()"
  },
  {
    "label": "SetDeletedMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDeletedMarker()"
  },
  {
    "label": "ResetDeleted()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::IsDeleted ; } void)",
    "insertText": "ResetDeleted()"
  },
  {
    "label": "IsDeletedOrDegenerated()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::IsDeleted ; } bool)",
    "insertText": "IsDeletedOrDegenerated()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (EHaveStates DeletedOrDegenerated = EHaveStates::Degenerated | EHaveStates::IsDeleted ;)",
    "insertText": "return((States & DeletedOrDegenerated) != EHaveStates::None)"
  },
  {
    "label": "IsDegenerated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDegenerated()"
  },
  {
    "label": "SetAsDegenerated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAsDegenerated()"
  },
  {
    "label": "ResetDegenerated()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::Degenerated ; } void)",
    "insertText": "ResetDegenerated()"
  },
  {
    "label": "SetWaitingMarker()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::Degenerated ; } void)",
    "insertText": "SetWaitingMarker()"
  },
  {
    "label": "ResetWaitingMarker()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::IsWaiting ; } void)",
    "insertText": "ResetWaitingMarker()"
  },
  {
    "label": "IsWaiting()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::IsWaiting ; } bool)",
    "insertText": "IsWaiting()"
  },
  {
    "label": "SetProcessedMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProcessedMarker()"
  },
  {
    "label": "ResetProcessedMarker()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::IsProcessed ; } void)",
    "insertText": "ResetProcessedMarker()"
  },
  {
    "label": "IsProcessed()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::IsProcessed ; } bool)",
    "insertText": "IsProcessed()"
  },
  {
    "label": "IsProcessedDeletedOrDegenerated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProcessedDeletedOrDegenerated()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (EHaveStates ProcessedDeletedOrDegenerated = EHaveStates::Degenerated | EHaveStates::IsDeleted | EHaveStates::IsProcessed ;)",
    "insertText": "return((States & ProcessedDeletedOrDegenerated) != EHaveStates::None)"
  },
  {
    "label": "SetToProcessMarker()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetToProcessMarker()"
  },
  {
    "label": "ResetToProcessMarker()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::ToProcess ; } void)",
    "insertText": "ResetToProcessMarker()"
  },
  {
    "label": "IsToProcess()",
    "kind": "Method",
    "detail": "Function (States& = ~ EHaveStates::ToProcess ; } bool)",
    "insertText": "IsToProcess()"
  },
  {
    "label": "IsNotToProcess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotToProcess()"
  },
  {
    "label": "IsNotToOrAlreadyProcess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNotToOrAlreadyProcess()"
  }
]