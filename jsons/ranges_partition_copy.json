[
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "_OutIter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter1"
  },
  {
    "label": "_OutIter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter2"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_PARTITION_COPY_H # define _LIBCPP___ALGORITHM_RANGES_PARTITION_COPY_H # include<__algorithm / in_out_out_result . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "__partition_copy_fn_impl()",
    "kind": "Method",
    "detail": "Function (template<class _InIter,class _OutIter1,class _OutIter2> using partition_copy_result = in_out_out_result<_InIter,_OutIter1,_OutIter2> ; namespace __partition_copy { struct __fn { template<class _InIter,class _Sent,class _OutIter1,class _OutIter2,class _Proj,class _Pred> _LIBCPP_HIDE_FROM_ABI partition_copy_result<__uncvref_t<_InIter>,__uncvref_t<_OutIter1>,__uncvref_t<_OutIter2>>)",
    "insertText": "__partition_copy_fn_impl(_InIter&& __first, _Sent&& __last, _OutIter1&& __out_true, _OutIter2&& __out_false, _Pred& __pred, _Proj& __proj)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* __out_true =* __first ; + + __out_true ; } else {* __out_false =* __first ; + + __out_false ; } } return {)",
    "insertText": "move(__first), std::move(__out_true), std::move(__out_false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_iterator _InIter,sentinel_for<_InIter> _Sent,weakly_incrementable _OutIter1,weakly_incrementable _OutIter2,class _Proj = identity,indirect_unary_predicate<projected<_InIter,_Proj>> _Pred> requires indirectly_copyable<_InIter,_OutIter1>&& indirectly_copyable<_InIter,_OutIter2> _LIBCPP_HIDE_FROM_ABI partition_copy_result<_InIter,_OutIter1,_OutIter2>)",
    "insertText": "operator()(_InIter __first, _Sent __last, _OutIter1 __out_true, _OutIter2 __out_false, _Pred __pred, _Proj __proj = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Range,weakly_incrementable _OutIter1,weakly_incrementable _OutIter2,class _Proj = identity,indirect_unary_predicate<projected<iterator_t<_Range>,_Proj>> _Pred> requires indirectly_copyable<iterator_t<_Range>,_OutIter1>&& indirectly_copyable<iterator_t<_Range>,_OutIter2> _LIBCPP_HIDE_FROM_ABI partition_copy_result<borrowed_iterator_t<_Range>,_OutIter1,_OutIter2>)",
    "insertText": "operator()(_Range&& __range, _OutIter1 __out_true, _OutIter2 __out_false, _Pred __pred, _Proj __proj = {})"
  }
]