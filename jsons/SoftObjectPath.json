[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "Z_Construct_UScriptStruct_FSoftObjectPath_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FSoftObjectPath_Statics"
  },
  {
    "label": "FSoftObjectPathFastLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPathFastLess"
  },
  {
    "label": "FSoftObjectPathLexicalLess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPathLexicalLess"
  },
  {
    "label": "FSoftClassPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftClassPath"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "COREUOBJECT_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "COREUOBJECT_API"
  },
  {
    "label": "FSoftObjectPathSerializationScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPathSerializationScope"
  },
  {
    "label": "FSerializationOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializationOptions"
  },
  {
    "label": "FFilePath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFilePath"
  },
  {
    "label": "FDirectoryPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectoryPath"
  },
  {
    "label": "FSoftObjectPathFixupArchive",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPathFixupArchive"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Transform . h \" # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Containers / StringView . h \" # include \" CoreTypes . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / ThreadSingleton . h \" # include \" Misc / CString . h \" # include \" Serialization / ArchiveUObject . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / Function . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / TopLevelAssetPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UObjectHash . h \" class FArchive ; class FCbWriter ; class FOutputDevice ; struct FPropertyTag ; struct FUObjectSerializeContext ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FLoadSoftObjectPathAsyncDelegate, const FSoftObjectPath&, UObject*)"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (struct FSoftObjectPath {)",
    "insertText": "FSoftObjectPath()"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftObjectPath(const FSoftObjectPath& Other)"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftObjectPath(FSoftObjectPath&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath&)",
    "insertText": "operator(const FSoftObjectPath& Path)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath&)",
    "insertText": "operator(FSoftObjectPath&& Path)"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftObjectPath(const FString& Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FStringView(Path))"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(FTopLevelAssetPath InAssetPath, FString InSubPathString)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(InAssetPath, MoveTemp(InSubPathString))"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(FName InPackageName, FName InAssetName, FString InSubPathString)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FTopLevelAssetPath(InPackageName, InAssetName), MoveTemp(InSubPathString))"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(FTopLevelAssetPath InAssetPath)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(InAssetPath, FString())"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(FWideStringView Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(Path)"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(FAnsiStringView Path)"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(const WIDECHAR* Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FWideStringView(Path))"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(const ANSICHAR* Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FAnsiStringView(Path))"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(TYPE_OF_NULLPTR)"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "FSoftObjectPath(const TObjectPtr<T>& InObject)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(InObject.GetPathName())"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(const FObjectPtr& InObject)"
  },
  {
    "label": "FSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPath(const UObject* InObject)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(InObject->GetPathName())"
  },
  {
    "label": "ConstructFromPackageAssetSubpath()",
    "kind": "Method",
    "detail": "Function (} } FSoftObjectPath)",
    "insertText": "ConstructFromPackageAssetSubpath(FName InPackageName, FName InAssetName, const FString& InSubPathString)"
  },
  {
    "label": "ConstructFromPackageAssetSubpath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ConstructFromPackageAssetSubpath(FName InPackageName, FName InAssetName, FString&& InSubPathString)"
  },
  {
    "label": "ConstructFromPackageAsset()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ConstructFromPackageAsset(FName InPackageName, FName InAssetName)"
  },
  {
    "label": "ConstructFromAssetPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ConstructFromAssetPath(FTopLevelAssetPath InAssetPath)"
  },
  {
    "label": "ConstructFromStringPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ConstructFromStringPath(FString&& InPath)"
  },
  {
    "label": "ConstructFromStringPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ConstructFromStringPath(FStringView InPath)"
  },
  {
    "label": "ConstructFromStringPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ConstructFromStringPath(FUtf8StringView InPath)"
  },
  {
    "label": "ConstructFromObject()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ConstructFromObject(const UObject* InObject)"
  },
  {
    "label": "ConstructFromObject()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ConstructFromObject(const FObjectPtr& InObject)"
  },
  {
    "label": "ConstructFromObject()",
    "kind": "Method",
    "detail": "Function (template<T> FSoftObjectPath)",
    "insertText": "ConstructFromObject(const TObjectPtr<T>& InObject)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FSoftObjectPath&)",
    "insertText": "operator(const FTopLevelAssetPath Path)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS ; return* this ; } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToString(FStringBuilderBase& Builder)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToString(FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(FString& Builder)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(FStringBuilderBase& Builder)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendString(FUtf8StringBuilderBase& Builder)"
  },
  {
    "label": "GetAssetPath()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetAssetPath()"
  },
  {
    "label": "GetSubPathString()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetSubPathString()"
  },
  {
    "label": "GetLongPackageName()",
    "kind": "Method",
    "detail": "Function (SubPathString = InSubPathString ; } FString)",
    "insertText": "GetLongPackageName()"
  },
  {
    "label": "GetAssetPath()",
    "kind": "Method",
    "detail": "Function (FName PackageName =)",
    "insertText": "GetAssetPath().GetPackageName()"
  },
  {
    "label": "GetLongPackageFName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetLongPackageFName()"
  },
  {
    "label": "GetAssetName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetAssetName()"
  },
  {
    "label": "GetAssetPath()",
    "kind": "Method",
    "detail": "Function (FName AssetName =)",
    "insertText": "GetAssetPath().GetAssetName()"
  },
  {
    "label": "GetAssetFName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetAssetFName()"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPath(const FTopLevelAssetPath& InAssetPath, FString InSubPathString = FString())"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FWideStringView Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FAnsiStringView Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(FUtf8StringView Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPath(const WIDECHAR* Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPath(const ANSICHAR* Path)"
  },
  {
    "label": "SetPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPath(const FString& Path)"
  },
  {
    "label": "TryLoad()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "TryLoad(FUObjectSerializeContext* InLoadContext = nullptr)"
  },
  {
    "label": "LoadAsync()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoadAsync(FLoadSoftObjectPathAsyncDelegate InCompletionDelegate, FLoadAssetAsyncOptionalParams InOptionalParams = FLoadAssetAsyncOptionalParams())"
  },
  {
    "label": "ResolveObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ResolveObject()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsAsset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAsset()"
  },
  {
    "label": "IsSubobject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSubobject()"
  },
  {
    "label": "LexicalLess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LexicalLess(const FSoftObjectPath& Other)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int32 PathCompare = AssetPath .)",
    "insertText": "Compare(Other.AssetPath)"
  },
  {
    "label": "FastLess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FastLess(const FSoftObjectPath& Other)"
  },
  {
    "label": "CompareFast()",
    "kind": "Method",
    "detail": "Function (int32 PathCompare = AssetPath .)",
    "insertText": "CompareFast(Other.AssetPath)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FSoftObjectPath const& Other)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExportTextItem(FString& ValueStr, FSoftObjectPath const& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText, FArchive* InSerializingArchive = nullptr)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(struct FPropertyTag const& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "SerializePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializePath(FArchive& Ar)"
  },
  {
    "label": "SerializePathWithoutFixup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializePathWithoutFixup(FArchive& Ar)"
  },
  {
    "label": "PreSavePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreSavePath(bool* bReportSoftObjectPathRedirects = nullptr)"
  },
  {
    "label": "PostLoadPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoadPath(FArchive* InArchive)"
  },
  {
    "label": "FixupForPIE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupForPIE(TFunctionRef<void(int32, FSoftObjectPath&)> InPreFixupForPIECustomFunction = [](int32, FSoftObjectPath&) {})"
  },
  {
    "label": "FixupForPIE()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupForPIE(int32 PIEInstance, TFunctionRef<void(int32, FSoftObjectPath&)> InPreFixupForPIECustomFunction = [](int32, FSoftObjectPath&) {})"
  },
  {
    "label": "FixupCoreRedirects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixupCoreRedirects()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(FSoftObjectPath const& This)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(This.AssetPath))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(This.SubPathString))"
  },
  {
    "label": "AddPIEPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPIEPackageName(FName NewPIEPackageName)"
  },
  {
    "label": "ClearPIEPackageNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPIEPackageNames()"
  },
  {
    "label": "ResolveObjectInternal()",
    "kind": "Method",
    "detail": "Function (private : FTopLevelAssetPath AssetPath ; FString SubPathString ; TSet<FName> PIEPackageNames ; UObject*)",
    "insertText": "ResolveObjectInternal()"
  },
  {
    "label": "ResolveObjectInternal()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ResolveObjectInternal(const TCHAR* PathString)"
  },
  {
    "label": "SerializeForLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForLog(FCbWriter& Writer, const FSoftObjectPath& Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct Z_Construct_UScriptStruct_FSoftObjectPath_Statics ; } ; struct FSoftObjectPathFastLess { bool)",
    "insertText": "operator()(const FSoftObjectPath& Lhs, const FSoftObjectPath& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, const FSoftObjectPath& Path)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Path .)",
    "insertText": "ToString(Builder)"
  },
  {
    "label": "FSoftClassPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftClassPath(const FSoftClassPath& Other)"
  },
  {
    "label": "FSoftClassPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftClassPath(FSoftClassPath&& Other)"
  },
  {
    "label": "FSoftClassPath()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSoftClassPath()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSoftClassPath&)",
    "insertText": "operator(const FSoftClassPath& Path)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSoftClassPath&)",
    "insertText": "operator(FSoftClassPath&& Path)"
  },
  {
    "label": "FSoftClassPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoftClassPath(const FString& PathString) : FSoftObjectPath(PathString)"
  },
  {
    "label": "FSoftClassPath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftClassPath(const UClass* InClass) : FSoftObjectPath(InClass)"
  },
  {
    "label": "TryLoadClass()",
    "kind": "Method",
    "detail": "Function (} template<T> UClass*)",
    "insertText": "TryLoadClass()"
  },
  {
    "label": "ResolveClass()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } UClass*)",
    "insertText": "ResolveClass()"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(const FPropertyTag& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "GetOrCreateIDForClass()",
    "kind": "Method",
    "detail": "Function (FSoftClassPath)",
    "insertText": "GetOrCreateIDForClass(const UClass *InClass)"
  },
  {
    "label": "FSoftClassPath()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSoftClassPath(const UObject* InObject)"
  },
  {
    "label": "GetOrCreateIDForObject()",
    "kind": "Method",
    "detail": "Function (} FSoftObjectPath)",
    "insertText": "GetOrCreateIDForObject(const UObject *Object)"
  },
  {
    "label": "FSoftObjectPathThreadContext()",
    "kind": "Method",
    "detail": "Function (enum class ESoftObjectPathCollectType : uint8 { NonPackage,NeverCollect,EditorOnlyCollect,AlwaysCollect,} ; enum class ESoftObjectPathSerializeType : uint8 { NeverSerialize,SkipSerializeIfArchiveHasSize,AlwaysSerialize,} ; class FSoftObjectPathThreadContext : public TThreadSingleton<FSoftObjectPathThreadContext> { TThreadSingleton<FSoftObjectPathThreadContext> ; struct FSoftObjectPathSerializationScope ;)",
    "insertText": "FSoftObjectPathThreadContext()"
  },
  {
    "label": "FSerializationOptions()",
    "kind": "Method",
    "detail": "Function (} struct FSerializationOptions { FName PackageName ; FName PropertyName ; ESoftObjectPathCollectType CollectType ; ESoftObjectPathSerializeType SerializeType ;)",
    "insertText": "FSerializationOptions() : CollectType(ESoftObjectPathCollectType::AlwaysCollect)"
  },
  {
    "label": "FSerializationOptions()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSerializationOptions(FName InPackageName, FName InPropertyName, ESoftObjectPathCollectType InCollectType, ESoftObjectPathSerializeType InSerializeType) : PackageName(InPackageName), PropertyName(InPropertyName), CollectType(InCollectType), SerializeType(InSerializeType)"
  },
  {
    "label": "GetSerializationOptions()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FSerializationOptions> OptionStack ; public : bool)",
    "insertText": "GetSerializationOptions(FName& OutPackageName, FName& OutPropertyName, ESoftObjectPathCollectType& OutCollectType, ESoftObjectPathSerializeType& OutSerializeType, FArchive* Archive = nullptr)"
  },
  {
    "label": "FSoftObjectPathSerializationScope()",
    "kind": "Method",
    "detail": "Function (} ; struct FSoftObjectPathSerializationScope {)",
    "insertText": "FSoftObjectPathSerializationScope(FName SerializingPackageName, FName SerializingPropertyName, ESoftObjectPathCollectType CollectType, ESoftObjectPathSerializeType SerializeType)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().OptionStack.Emplace(SerializingPackageName, SerializingPropertyName, CollectType, SerializeType)"
  },
  {
    "label": "FSoftObjectPathSerializationScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPathSerializationScope(ESoftObjectPathCollectType CollectType)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().OptionStack.Emplace(NAME_None, NAME_None, CollectType, ESoftObjectPathSerializeType::AlwaysSerialize)"
  },
  {
    "label": "FSoftObjectPathSerializationScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSoftObjectPathSerializationScope()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().OptionStack.Pop()"
  },
  {
    "label": "FSoftObjectPathFixupArchive()",
    "kind": "Method",
    "detail": "Function (} } ; struct FFilePath { FString FilePath ; } ; struct FDirectoryPath { FString Path ; } ; struct FSoftObjectPathFixupArchive : public FArchiveUObject {)",
    "insertText": "FSoftObjectPathFixupArchive(TFunction<void(FSoftObjectPath&)> InFixupFunction) : FixupFunction(InFixupFunction)"
  },
  {
    "label": "SetIsSaving()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetIsSaving(true)"
  },
  {
    "label": "SetShouldSkipCompilingAssets()",
    "kind": "Method",
    "detail": "Function (this -> ArShouldSkipBulkData = true ; this ->)",
    "insertText": "SetShouldSkipCompilingAssets(true)"
  },
  {
    "label": "FSoftObjectPathFixupArchive()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoftObjectPathFixupArchive(const FString& InOldAssetPathString, const FString& InNewAssetPathString) : FSoftObjectPathFixupArchive([OldAssetPathString = InOldAssetPathString, NewAssetPath = FTopLevelAssetPath(InNewAssetPathString)](FSoftObjectPath& Value) { if (!Value.IsNull() && Value.GetAssetPathString().Equals(OldAssetPathString, ESearchCase::IgnoreCase)) { Value = FSoftObjectPath(NewAssetPath, Value.GetSubPathString()); } })"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FSoftObjectPath& Value)"
  },
  {
    "label": "FixupFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupFunction(Value)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Root ->)",
    "insertText": "Serialize(*this)"
  },
  {
    "label": "GetObjectsWithOuter()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> SubObjects ;)",
    "insertText": "GetObjectsWithOuter(Root, SubObjects)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } TFunction<)",
    "insertText": "void(FSoftObjectPath&)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FName> Out ; Out .)",
    "insertText": "Reserve(InPaths.Num())"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "Transform(InPaths, Out, [](const FSoftObjectPath& Path) { return Path.ToFName(); })"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "Transform(InPaths, Out, [](FName Name) { return FSoftObjectPath(Name); })"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS return Out ; } } # if WITH_LOW_LEVEL_TESTS # include<ostream> std::ostream&)",
    "insertText": "operator(std::ostream& Stream, const FSoftObjectPath& Value)"
  }
]