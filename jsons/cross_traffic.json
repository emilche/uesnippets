[
  {
    "label": "RandomWalkCrossTraffic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RandomWalkCrossTraffic"
  },
  {
    "label": "PulsedPeaksCrossTraffic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PulsedPeaksCrossTraffic"
  },
  {
    "label": "TcpMessageRouteImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TcpMessageRouteImpl"
  },
  {
    "label": "Message",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Message"
  },
  {
    "label": "MessageFragment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MessageFragment"
  },
  {
    "label": "TcpPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TcpPacket"
  },
  {
    "label": "FakeTcpCrossTraffic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeTcpCrossTraffic"
  },
  {
    "label": "RandomWalkCrossTraffic()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_NETWORK_CROSS_TRAFFIC_H_ # define TEST_NETWORK_CROSS_TRAFFIC_H_ # include<algorithm> # include<map> # include<memory> # include \" api / sequence_checker . h \" # include \" api / test / network_emulation_manager . h \" # include \" api / units / data_rate . h \" # include \" api / units / data_size . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / random . h \" # include \" test / network / network_emulation . h \" # include \" test / scenario / column_printer . h \" namespace webrtc { namespace test { class RandomWalkCrossTraffic final : public CrossTrafficGenerator { public :)",
    "insertText": "RandomWalkCrossTraffic(RandomWalkConfig config, CrossTrafficRoute* traffic_route)"
  },
  {
    "label": "RandomWalkCrossTraffic()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RandomWalkCrossTraffic()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process(Timestamp at_time)"
  },
  {
    "label": "GetProcessInterval()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetProcessInterval()"
  },
  {
    "label": "TrafficRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "TrafficRate()"
  },
  {
    "label": "StatsPrinter()",
    "kind": "Method",
    "detail": "Function (ColumnPrinter)",
    "insertText": "StatsPrinter()"
  },
  {
    "label": "RTC_PT_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : SequenceChecker sequence_checker_ ; const RandomWalkConfig config_ ; CrossTrafficRoute* const traffic_route_)",
    "insertText": "RTC_PT_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (webrtc::Random random_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Timestamp last_process_time_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_) = Timestamp::MinusInfinity()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (DataSize pending_size_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_) = DataSize::Zero()"
  },
  {
    "label": "PulsedPeaksCrossTraffic()",
    "kind": "Method",
    "detail": "Function (} ; class PulsedPeaksCrossTraffic final : public CrossTrafficGenerator { public :)",
    "insertText": "PulsedPeaksCrossTraffic(PulsedPeaksConfig config, CrossTrafficRoute* traffic_route)"
  },
  {
    "label": "PulsedPeaksCrossTraffic()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "PulsedPeaksCrossTraffic()"
  },
  {
    "label": "TcpMessageRouteImpl()",
    "kind": "Method",
    "detail": "Function (} ; class TcpMessageRouteImpl final : public TcpMessageRoute { public :)",
    "insertText": "TcpMessageRouteImpl(Clock* clock, TaskQueueBase* task_queue, EmulatedRoute* send_route, EmulatedRoute* ret_route)"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendMessage(size_t size, std::function<void()> on_received)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : struct Message { std::function<)",
    "insertText": "void()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (std::set<int> pending_fragment_ids ; } ; struct MessageFragment { int fragment_id ; size_t size ; } ; struct TcpPacket { int sequence_number ; Timestamp send_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "OnRequest()",
    "kind": "Method",
    "detail": "Function (MessageFragment fragment ; } ; void)",
    "insertText": "OnRequest(TcpPacket packet_info)"
  },
  {
    "label": "OnResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResponse(TcpPacket packet_info, Timestamp at_time)"
  },
  {
    "label": "HandleLoss()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLoss(Timestamp at_time)"
  },
  {
    "label": "SendPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPackets(Timestamp at_time)"
  },
  {
    "label": "HandlePacketTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePacketTimeout(int seq_num, Timestamp at_time)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (TimeDelta last_rtt_ =)",
    "insertText": "Zero()"
  },
  {
    "label": "FakeTcpCrossTraffic()",
    "kind": "Method",
    "detail": "Function (} ; class FakeTcpCrossTraffic : public TwoWayFakeTrafficRoute<int,int>::TrafficHandlerInterface,public CrossTrafficGenerator { public :)",
    "insertText": "FakeTcpCrossTraffic(FakeTcpConfig config, EmulatedRoute* send_route, EmulatedRoute* ret_route)"
  },
  {
    "label": "OnRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRequest(int sequence_number, Timestamp at_time)"
  },
  {
    "label": "OnResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResponse(int sequence_number, Timestamp at_time)"
  }
]