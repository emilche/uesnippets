[
  {
    "label": "FEdgeSpan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdgeSpan"
  },
  {
    "label": "FEdgeSpan()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" # include \" Util / IndexUtil . h \" # include \" Polyline3 . h \" namespace UE { namespace Geometry { class FEdgeSpan { public : const FDynamicMesh3* Mesh ; TArray<int> Vertices ; TArray<int> Edges ; TArray<int> BowtieVertices ; bool bBowtiesCalculated = false ;)",
    "insertText": "FEdgeSpan()"
  },
  {
    "label": "FEdgeSpan()",
    "kind": "Method",
    "detail": "Function (Mesh = nullptr ; })",
    "insertText": "FEdgeSpan(const FDynamicMesh3* mesh)"
  },
  {
    "label": "FEdgeSpan()",
    "kind": "Method",
    "detail": "Function (Mesh = mesh ; })",
    "insertText": "FEdgeSpan(const FDynamicMesh3* mesh, const TArray<int>& vertices, const TArray<int> & edges)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Mesh = mesh ; Vertices = vertices ; Edges = edges ; } void)",
    "insertText": "Initialize(const FDynamicMesh3* mesh, const TArray<int>& vertices, const TArray<int> & edges, const TArray<int>* BowtieVerticesIn = nullptr)"
  },
  {
    "label": "InitializeFromEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromEdges(const TArray<int>& EdgesIn)"
  },
  {
    "label": "InitializeFromEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeFromEdges(const FDynamicMesh3* MeshIn, const TArray<int>& EdgesIn)"
  },
  {
    "label": "InitializeFromEdges()",
    "kind": "Method",
    "detail": "Function (Mesh = MeshIn ;)",
    "insertText": "InitializeFromEdges(EdgesIn)"
  },
  {
    "label": "InitializeFromVertices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitializeFromVertices(const FDynamicMesh3* MeshIn, const TArray<int>& VerticesIn, bool bAutoOrient = true)"
  },
  {
    "label": "InitializeFromVertices()",
    "kind": "Method",
    "detail": "Function (Mesh = MeshIn ; return)",
    "insertText": "InitializeFromVertices(VerticesIn, bAutoOrient)"
  },
  {
    "label": "InitializeFromVertices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitializeFromVertices(const TArray<int>& VerticesIn, bool bAutoOrient = true)"
  },
  {
    "label": "SetBowtieVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBowtieVertices(const TArray<int>& Bowties)"
  },
  {
    "label": "CalculateBowtieVertices()",
    "kind": "Method",
    "detail": "Function (BowtieVertices = Bowties ; bBowtiesCalculated = true ; } void)",
    "insertText": "CalculateBowtieVertices()"
  },
  {
    "label": "GetVertexCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetVertexCount()"
  },
  {
    "label": "GetEdgeCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetEdgeCount()"
  },
  {
    "label": "GetVertex()",
    "kind": "Method",
    "detail": "Function (} FVector3d)",
    "insertText": "GetVertex(int SpanIndex)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} FAxisAlignedBox3d)",
    "insertText": "GetBounds()"
  },
  {
    "label": "GetPolyline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPolyline(FPolyline3d& PolylineOut)"
  },
  {
    "label": "SetCorrectOrientation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCorrectOrientation()"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse()"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(Vertices)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse(Edges)"
  },
  {
    "label": "IsInternalspan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternalspan()"
  },
  {
    "label": "IsBoundaryspan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundaryspan(const FDynamicMesh3* TestMesh = nullptr)"
  },
  {
    "label": "FindVertexIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindVertexIndex(int VertexID)"
  },
  {
    "label": "FindNearestVertexIndex()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FindNearestVertexIndex(const FVector3d& QueryPoint)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckValidity(EValidityCheckFailMode FailMode = EValidityCheckFailMode::Check)"
  },
  {
    "label": "VertexSpanToEdgeSpan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VertexSpanToEdgeSpan(const FDynamicMesh3* Mesh, const TArray<int>& VertexSpan, TArray<int>& OutEdgeSpan)"
  }
]