[
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FEntityAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityAllocation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCachedEntityManagerState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedEntityManagerState"
  },
  {
    "label": "FCachedEntityFilterResult_Match",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedEntityFilterResult_Match"
  },
  {
    "label": "FCachedEntityFilterResult_Allocations",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedEntityFilterResult_Allocations"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" HAL / Platform . h \" namespace UE { namespace MovieScene { class FEntityManager ; struct FEntityAllocation ; enum class ECachedEntityManagerState { UpToDate,Stale,} ; struct FCachedEntityManagerState { ECachedEntityManagerState)",
    "insertText": "Update(const FEntityManager& InEntityManager)"
  },
  {
    "label": "Invalidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Invalidate()"
  },
  {
    "label": "GetSerial()",
    "kind": "Method",
    "detail": "Function (LastSystemVersion = 0 ; } uint64)",
    "insertText": "GetSerial()"
  },
  {
    "label": "GetMatchingAllocations()",
    "kind": "Method",
    "detail": "Function (private : FCachedEntityManagerState Cache ; bool bContainsMatch = false ; } ; struct FCachedEntityFilterResult_Allocations { FEntityComponentFilter Filter ; TArrayView<FEntityAllocation* const>)",
    "insertText": "GetMatchingAllocations(const FEntityManager& InEntityManager)"
  }
]