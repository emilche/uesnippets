[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "is_error_code_enum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_error_code_enum"
  },
  {
    "label": "LineLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LineLocation"
  },
  {
    "label": "DenseMapInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapInfo"
  },
  {
    "label": "SampleRecord",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleRecord"
  },
  {
    "label": "FunctionSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionSamples"
  },
  {
    "label": "sampleprof_category()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_PROFILEDATA_SAMPLEPROF_H_ # define LLVM_PROFILEDATA_SAMPLEPROF_H_ # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / Support / Debug . h \" # include \" llvm / Support / raw_ostream . h \" # include<system_error> namespace llvm { const std::error_category&)",
    "insertText": "sampleprof_category()"
  },
  {
    "label": "make_error_code()",
    "kind": "Method",
    "detail": "Function (enum class sampleprof_error { success = 0,bad_magic,unsupported_version,too_large,truncated,malformed,unrecognized_format } ; std::error_code)",
    "insertText": "make_error_code(sampleprof_error E)"
  },
  {
    "label": "SPMagic()",
    "kind": "Method",
    "detail": "Function (} } namespace std { template<> struct is_error_code_enum<llvm::sampleprof_error> : std::true_type { } ; } namespace llvm { namespace sampleprof { uint64_t)",
    "insertText": "SPMagic()"
  },
  {
    "label": "SPVersion()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "SPVersion()"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (} int LineOffset ; unsigned Discriminator ; } ; } template<> struct DenseMapInfo<sampleprof::LineLocation> { typedef DenseMapInfo<int> OffsetInfo ; typedef DenseMapInfo<unsigned> DiscriminatorInfo ; sampleprof::LineLocation)",
    "insertText": "getEmptyKey()"
  },
  {
    "label": "getTombstoneKey()",
    "kind": "Method",
    "detail": "Function (} sampleprof::LineLocation)",
    "insertText": "getTombstoneKey()"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(sampleprof::LineLocation Val)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(sampleprof::LineLocation LHS, sampleprof::LineLocation RHS)"
  },
  {
    "label": "addSamples()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addSamples(unsigned S)"
  },
  {
    "label": "addCalledTarget()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addCalledTarget(StringRef F, unsigned S)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned& TargetSamples = CallTargets [ F ] ;)",
    "insertText": "if(TargetSamples <= std::numeric_limits<unsigned>::max() - S)"
  },
  {
    "label": "hasCalls()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasCalls()"
  },
  {
    "label": "getSamples()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSamples()"
  },
  {
    "label": "addSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSamples(Other.getSamples())"
  },
  {
    "label": "FunctionSamples()",
    "kind": "Method",
    "detail": "Function (} private : unsigned NumSamples ; CallTargetMap CallTargets ; } ; typedef DenseMap<LineLocation,SampleRecord> BodySampleMap ; class FunctionSamples { public :)",
    "insertText": "FunctionSamples() : TotalSamples(0), TotalHeadSamples(0)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "print(raw_ostream &OS = dbgs())"
  },
  {
    "label": "addTotalSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTotalSamples(unsigned Num)"
  },
  {
    "label": "addHeadSamples()",
    "kind": "Method",
    "detail": "Function (TotalSamples + = Num ; } void)",
    "insertText": "addHeadSamples(unsigned Num)"
  },
  {
    "label": "addBodySamples()",
    "kind": "Method",
    "detail": "Function (TotalHeadSamples + = Num ; } void)",
    "insertText": "addBodySamples(int LineOffset, unsigned Discriminator, unsigned Num)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(LineOffset >= 0)"
  },
  {
    "label": "LineLocation()",
    "kind": "Method",
    "detail": "Function (BodySamples [)",
    "insertText": "LineLocation(LineOffset, Discriminator)].addSamples(Num)"
  },
  {
    "label": "addCalledTargetSamples()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addCalledTargetSamples(int LineOffset, unsigned Discriminator, std::string FName, unsigned Num)"
  },
  {
    "label": "LineLocation()",
    "kind": "Method",
    "detail": "Function (BodySamples [)",
    "insertText": "LineLocation(LineOffset, Discriminator)].addCalledTarget(FName, Num)"
  },
  {
    "label": "sampleRecordAt()",
    "kind": "Method",
    "detail": "Function (} SampleRecord&)",
    "insertText": "sampleRecordAt(const LineLocation &Loc)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "getTotalSamples()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getTotalSamples()"
  },
  {
    "label": "addTotalSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTotalSamples(Other.getTotalSamples())"
  },
  {
    "label": "addHeadSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addHeadSamples(Other.getHeadSamples())"
  },
  {
    "label": "sampleRecordAt()",
    "kind": "Method",
    "detail": "Function (const LineLocation& Loc = I . first ; const SampleRecord& Rec = I . second ;)",
    "insertText": "sampleRecordAt(Loc).merge(Rec)"
  }
]