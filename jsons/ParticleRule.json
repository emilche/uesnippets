[
  {
    "label": "TParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TParticles"
  },
  {
    "label": "TDynamicParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicParticles"
  },
  {
    "label": "TPBDParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDParticles"
  },
  {
    "label": "TRigidParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRigidParticles"
  },
  {
    "label": "TPBDRigidParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDRigidParticles"
  },
  {
    "label": "FParticleRule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleRule"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Defines . h \" # include \" Chaos / DynamicParticles . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / PBDRigidParticles . h \" namespace Chaos { template<T,int d> class TParticles ; using FParticles = TParticles<FReal,3> ; template<T,int d> class TDynamicParticles ; using FDynamicParticles = TDynamicParticles<FReal,3> ; template<T,int d> class TPBDParticles ; using FPBDParticles = TPBDParticles<FReal,3> ; template<T,int d> class TRigidParticles ; template<T,int d> class TPBDRigidParticles ; class FParticleRule { public : void)",
    "insertText": "Apply(FParticles& InParticles, const FReal Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FDynamicParticles& InParticles, const FReal Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(static_cast<FParticles&>(InParticles), Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(static_cast<FDynamicParticles&>(InParticles), Dt)"
  }
]