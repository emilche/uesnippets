[
  {
    "label": "XrAndroidThreadTypeKHR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "XrAndroidThreadTypeKHR"
  },
  {
    "label": "XrInstanceCreateInfoAndroidKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrInstanceCreateInfoAndroidKHR"
  },
  {
    "label": "XrVulkanSwapchainFormatListCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrVulkanSwapchainFormatListCreateInfoKHR"
  },
  {
    "label": "XrGraphicsBindingOpenGLWin32KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingOpenGLWin32KHR"
  },
  {
    "label": "XrGraphicsBindingOpenGLXlibKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingOpenGLXlibKHR"
  },
  {
    "label": "XrGraphicsBindingOpenGLXcbKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingOpenGLXcbKHR"
  },
  {
    "label": "XrGraphicsBindingOpenGLWaylandKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingOpenGLWaylandKHR"
  },
  {
    "label": "wl_display",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "wl_display"
  },
  {
    "label": "XrSwapchainImageOpenGLKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainImageOpenGLKHR"
  },
  {
    "label": "XrGraphicsRequirementsOpenGLKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsRequirementsOpenGLKHR"
  },
  {
    "label": "XrGraphicsBindingOpenGLESAndroidKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingOpenGLESAndroidKHR"
  },
  {
    "label": "XrSwapchainImageOpenGLESKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainImageOpenGLESKHR"
  },
  {
    "label": "XrGraphicsRequirementsOpenGLESKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsRequirementsOpenGLESKHR"
  },
  {
    "label": "XrGraphicsBindingVulkanKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingVulkanKHR"
  },
  {
    "label": "XrSwapchainImageVulkanKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainImageVulkanKHR"
  },
  {
    "label": "XrGraphicsRequirementsVulkanKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsRequirementsVulkanKHR"
  },
  {
    "label": "XrGraphicsBindingD3D11KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingD3D11KHR"
  },
  {
    "label": "XrSwapchainImageD3D11KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainImageD3D11KHR"
  },
  {
    "label": "XrGraphicsRequirementsD3D11KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsRequirementsD3D11KHR"
  },
  {
    "label": "XrGraphicsBindingD3D12KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingD3D12KHR"
  },
  {
    "label": "XrSwapchainImageD3D12KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainImageD3D12KHR"
  },
  {
    "label": "XrGraphicsRequirementsD3D12KHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsRequirementsD3D12KHR"
  },
  {
    "label": "timespec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timespec"
  },
  {
    "label": "XrLoaderInitInfoAndroidKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrLoaderInitInfoAndroidKHR"
  },
  {
    "label": "XrVulkanInstanceCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrVulkanInstanceCreateInfoKHR"
  },
  {
    "label": "XrVulkanDeviceCreateInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrVulkanDeviceCreateInfoKHR"
  },
  {
    "label": "XrVulkanGraphicsDeviceGetInfoKHR",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrVulkanGraphicsDeviceGetInfoKHR"
  },
  {
    "label": "XrGraphicsBindingEGLMNDX",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrGraphicsBindingEGLMNDX"
  },
  {
    "label": "XrHolographicWindowAttachmentMSFT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrHolographicWindowAttachmentMSFT"
  },
  {
    "label": "XrAndroidSurfaceSwapchainCreateInfoFB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrAndroidSurfaceSwapchainCreateInfoFB"
  },
  {
    "label": "XrCoordinateSpaceCreateInfoML",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrCoordinateSpaceCreateInfoML"
  },
  {
    "label": "XrSwapchainImageFoveationVulkanFB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainImageFoveationVulkanFB"
  },
  {
    "label": "XrSwapchainStateAndroidSurfaceDimensionsFB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainStateAndroidSurfaceDimensionsFB"
  },
  {
    "label": "XrSwapchainStateSamplerOpenGLESFB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainStateSamplerOpenGLESFB"
  },
  {
    "label": "XrSwapchainStateSamplerVulkanFB",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrSwapchainStateSamplerVulkanFB"
  },
  {
    "label": "XrVulkanSwapchainCreateInfoMETA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "XrVulkanSwapchainCreateInfoMETA"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENXR_PLATFORM_H_ # define OPENXR_PLATFORM_H_ 1 # include \" openxr . h \" # ifdef __cplusplus \" C \" { # endif # ifdef XR_USE_PLATFORM_ANDROID # define XR_KHR_android_thread_settings 1 # define XR_KHR_android_thread_settings_SPEC_VERSION 5 # define XR_KHR_ANDROID_THREAD_SETTINGS_EXTENSION_NAME \" XR_KHR_android_thread_settings \" typedef enum XrAndroidThreadTypeKHR { XR_ANDROID_THREAD_TYPE_APPLICATION_MAIN_KHR = 1,XR_ANDROID_THREAD_TYPE_APPLICATION_WORKER_KHR = 2,XR_ANDROID_THREAD_TYPE_RENDERER_MAIN_KHR = 3,XR_ANDROID_THREAD_TYPE_RENDERER_WORKER_KHR = 4,XR_ANDROID_THREAD_TYPE_MAX_ENUM_KHR = 0 x7FFFFFFF } XrAndroidThreadTypeKHR ; typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrSetAndroidApplicationThreadKHR)(XrSession session, XrAndroidThreadTypeKHR threadType, uint32_t threadId)"
  },
  {
    "label": "xrSetAndroidApplicationThreadKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrSetAndroidApplicationThreadKHR(XrSession session, XrAndroidThreadTypeKHR threadType, uint32_t threadId)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_PLATFORM_ANDROID # define XR_KHR_android_surface_swapchain 1 # define XR_KHR_android_surface_swapchain_SPEC_VERSION 4 # define XR_KHR_ANDROID_SURFACE_SWAPCHAIN_EXTENSION_NAME \" XR_KHR_android_surface_swapchain \" typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrCreateSwapchainAndroidSurfaceKHR)(XrSession session, const XrSwapchainCreateInfo* info, XrSwapchain* swapchain, jobject* surface)"
  },
  {
    "label": "xrCreateSwapchainAndroidSurfaceKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrCreateSwapchainAndroidSurfaceKHR(XrSession session, const XrSwapchainCreateInfo* info, XrSwapchain* swapchain, jobject* surface)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_PLATFORM_ANDROID # define XR_KHR_android_create_instance 1 # define XR_KHR_android_create_instance_SPEC_VERSION 3 # define XR_KHR_ANDROID_CREATE_INSTANCE_EXTENSION_NAME \" XR_KHR_android_create_instance \" typedef struct XrInstanceCreateInfoAndroidKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; void* XR_MAY_ALIAS applicationVM ; void* XR_MAY_ALIAS applicationActivity ; } XrInstanceCreateInfoAndroidKHR ; # endif # ifdef XR_USE_GRAPHICS_API_VULKAN # define XR_KHR_vulkan_swapchain_format_list 1 # define XR_KHR_vulkan_swapchain_format_list_SPEC_VERSION 4 # define XR_KHR_VULKAN_SWAPCHAIN_FORMAT_LIST_EXTENSION_NAME \" XR_KHR_vulkan_swapchain_format_list \" typedef struct XrVulkanSwapchainFormatListCreateInfoKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; uint32_t viewFormatCount ; const VkFormat* viewFormats ; } XrVulkanSwapchainFormatListCreateInfoKHR ; # endif # ifdef XR_USE_GRAPHICS_API_OPENGL # define XR_KHR_opengl_enable 1 # define XR_KHR_opengl_enable_SPEC_VERSION 1 0 # define XR_KHR_OPENGL_ENABLE_EXTENSION_NAME \" XR_KHR_opengl_enable \" # ifdef XR_USE_PLATFORM_WIN32 typedef struct XrGraphicsBindingOpenGLWin32KHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; HDC hDC ; HGLRC hGLRC ; } XrGraphicsBindingOpenGLWin32KHR ; # endif # ifdef XR_USE_PLATFORM_XLIB typedef struct XrGraphicsBindingOpenGLXlibKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; Display* xDisplay ; uint32_t visualid ; GLXFBConfig glxFBConfig ; GLXDrawable glxDrawable ; GLXContext glxContext ; } XrGraphicsBindingOpenGLXlibKHR ; # endif # ifdef XR_USE_PLATFORM_XCB typedef struct XrGraphicsBindingOpenGLXcbKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; xcb_connection_t* connection ; uint32_t screenNumber ; xcb_glx_fbconfig_t fbconfigid ; xcb_visualid_t visualid ; xcb_glx_drawable_t glxDrawable ; xcb_glx_context_t glxContext ; } XrGraphicsBindingOpenGLXcbKHR ; # endif # ifdef XR_USE_PLATFORM_WAYLAND typedef struct XrGraphicsBindingOpenGLWaylandKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; struct wl_display* display ; } XrGraphicsBindingOpenGLWaylandKHR ; # endif typedef struct XrSwapchainImageOpenGLKHR { XrStructureType type ; void* XR_MAY_ALIAS next ; uint32_t image ; } XrSwapchainImageOpenGLKHR ; typedef struct XrGraphicsRequirementsOpenGLKHR { XrStructureType type ; void* XR_MAY_ALIAS next ; XrVersion minApiVersionSupported ; XrVersion maxApiVersionSupported ; } XrGraphicsRequirementsOpenGLKHR ; typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetOpenGLGraphicsRequirementsKHR)(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsOpenGLKHR* graphicsRequirements)"
  },
  {
    "label": "xrGetOpenGLGraphicsRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetOpenGLGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsOpenGLKHR* graphicsRequirements)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_GRAPHICS_API_OPENGL_ES # define XR_KHR_opengl_es_enable 1 # define XR_KHR_opengl_es_enable_SPEC_VERSION 8 # define XR_KHR_OPENGL_ES_ENABLE_EXTENSION_NAME \" XR_KHR_opengl_es_enable \" # ifdef XR_USE_PLATFORM_ANDROID typedef struct XrGraphicsBindingOpenGLESAndroidKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; EGLDisplay display ; EGLConfig config ; EGLContext context ; } XrGraphicsBindingOpenGLESAndroidKHR ; # endif typedef struct XrSwapchainImageOpenGLESKHR { XrStructureType type ; void* XR_MAY_ALIAS next ; uint32_t image ; } XrSwapchainImageOpenGLESKHR ; typedef struct XrGraphicsRequirementsOpenGLESKHR { XrStructureType type ; void* XR_MAY_ALIAS next ; XrVersion minApiVersionSupported ; XrVersion maxApiVersionSupported ; } XrGraphicsRequirementsOpenGLESKHR ; typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetOpenGLESGraphicsRequirementsKHR)(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsOpenGLESKHR* graphicsRequirements)"
  },
  {
    "label": "xrGetOpenGLESGraphicsRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetOpenGLESGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsOpenGLESKHR* graphicsRequirements)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_GRAPHICS_API_VULKAN # define XR_KHR_vulkan_enable 1 # define XR_KHR_vulkan_enable_SPEC_VERSION 8 # define XR_KHR_VULKAN_ENABLE_EXTENSION_NAME \" XR_KHR_vulkan_enable \" typedef struct XrGraphicsBindingVulkanKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; VkInstance instance ; VkPhysicalDevice physicalDevice ; VkDevice device ; uint32_t queueFamilyIndex ; uint32_t queueIndex ; } XrGraphicsBindingVulkanKHR ; typedef struct XrSwapchainImageVulkanKHR { XrStructureType type ; void* XR_MAY_ALIAS next ; VkImage image ; } XrSwapchainImageVulkanKHR ; typedef struct XrGraphicsRequirementsVulkanKHR { XrStructureType type ; void* XR_MAY_ALIAS next ; XrVersion minApiVersionSupported ; XrVersion maxApiVersionSupported ; } XrGraphicsRequirementsVulkanKHR ; typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetVulkanInstanceExtensionsKHR)(XrInstance instance, XrSystemId systemId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetVulkanDeviceExtensionsKHR)(XrInstance instance, XrSystemId systemId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetVulkanGraphicsDeviceKHR)(XrInstance instance, XrSystemId systemId, VkInstance vkInstance, VkPhysicalDevice* vkPhysicalDevice)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetVulkanGraphicsRequirementsKHR)(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsVulkanKHR* graphicsRequirements)"
  },
  {
    "label": "xrGetVulkanInstanceExtensionsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetVulkanInstanceExtensionsKHR(XrInstance instance, XrSystemId systemId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer)"
  },
  {
    "label": "xrGetVulkanDeviceExtensionsKHR()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetVulkanDeviceExtensionsKHR(XrInstance instance, XrSystemId systemId, uint32_t bufferCapacityInput, uint32_t* bufferCountOutput, char* buffer)"
  },
  {
    "label": "xrGetVulkanGraphicsDeviceKHR()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetVulkanGraphicsDeviceKHR(XrInstance instance, XrSystemId systemId, VkInstance vkInstance, VkPhysicalDevice* vkPhysicalDevice)"
  },
  {
    "label": "xrGetVulkanGraphicsRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetVulkanGraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsVulkanKHR* graphicsRequirements)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_GRAPHICS_API_D3D11 # define XR_KHR_D3D11_enable 1 # define XR_KHR_D3D11_enable_SPEC_VERSION 9 # define XR_KHR_D3D11_ENABLE_EXTENSION_NAME \" XR_KHR_D3D11_enable \" typedef struct XrGraphicsBindingD3D11KHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; ID3D11Device* device ; } XrGraphicsBindingD3D11KHR ; typedef struct XrSwapchainImageD3D11KHR { XrStructureType type ; void* XR_MAY_ALIAS next ; ID3D11Texture2D* texture ; } XrSwapchainImageD3D11KHR ; typedef struct XrGraphicsRequirementsD3D11KHR { XrStructureType type ; void* XR_MAY_ALIAS next ; LUID adapterLuid ; D3D_FEATURE_LEVEL minFeatureLevel ; } XrGraphicsRequirementsD3D11KHR ; typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetD3D11GraphicsRequirementsKHR)(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsD3D11KHR* graphicsRequirements)"
  },
  {
    "label": "xrGetD3D11GraphicsRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetD3D11GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsD3D11KHR* graphicsRequirements)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_GRAPHICS_API_D3D12 # define XR_KHR_D3D12_enable 1 # define XR_KHR_D3D12_enable_SPEC_VERSION 9 # define XR_KHR_D3D12_ENABLE_EXTENSION_NAME \" XR_KHR_D3D12_enable \" typedef struct XrGraphicsBindingD3D12KHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; ID3D12Device* device ; ID3D12CommandQueue* queue ; } XrGraphicsBindingD3D12KHR ; typedef struct XrSwapchainImageD3D12KHR { XrStructureType type ; void* XR_MAY_ALIAS next ; ID3D12Resource* texture ; } XrSwapchainImageD3D12KHR ; typedef struct XrGraphicsRequirementsD3D12KHR { XrStructureType type ; void* XR_MAY_ALIAS next ; LUID adapterLuid ; D3D_FEATURE_LEVEL minFeatureLevel ; } XrGraphicsRequirementsD3D12KHR ; typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetD3D12GraphicsRequirementsKHR)(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsD3D12KHR* graphicsRequirements)"
  },
  {
    "label": "xrGetD3D12GraphicsRequirementsKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetD3D12GraphicsRequirementsKHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsD3D12KHR* graphicsRequirements)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_PLATFORM_WIN32 # define XR_KHR_win32_convert_performance_counter_time 1 # define XR_KHR_win32_convert_performance_counter_time_SPEC_VERSION 1 # define XR_KHR_WIN32_CONVERT_PERFORMANCE_COUNTER_TIME_EXTENSION_NAME \" XR_KHR_win32_convert_performance_counter_time \" typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrConvertWin32PerformanceCounterToTimeKHR)(XrInstance instance, const LARGE_INTEGER* performanceCounter, XrTime* time)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrConvertTimeToWin32PerformanceCounterKHR)(XrInstance instance, XrTime time, LARGE_INTEGER* performanceCounter)"
  },
  {
    "label": "xrConvertWin32PerformanceCounterToTimeKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrConvertWin32PerformanceCounterToTimeKHR(XrInstance instance, const LARGE_INTEGER* performanceCounter, XrTime* time)"
  },
  {
    "label": "xrConvertTimeToWin32PerformanceCounterKHR()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrConvertTimeToWin32PerformanceCounterKHR(XrInstance instance, XrTime time, LARGE_INTEGER* performanceCounter)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_TIMESPEC # define XR_KHR_convert_timespec_time 1 # define XR_KHR_convert_timespec_time_SPEC_VERSION 1 # define XR_KHR_CONVERT_TIMESPEC_TIME_EXTENSION_NAME \" XR_KHR_convert_timespec_time \" typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrConvertTimespecTimeToTimeKHR)(XrInstance instance, const struct timespec* timespecTime, XrTime* time)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrConvertTimeToTimespecTimeKHR)(XrInstance instance, XrTime time, struct timespec* timespecTime)"
  },
  {
    "label": "xrConvertTimespecTimeToTimeKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrConvertTimespecTimeToTimeKHR(XrInstance instance, const struct timespec* timespecTime, XrTime* time)"
  },
  {
    "label": "xrConvertTimeToTimespecTimeKHR()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrConvertTimeToTimespecTimeKHR(XrInstance instance, XrTime time, struct timespec* timespecTime)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_PLATFORM_ANDROID # define XR_KHR_loader_init_android 1 # define XR_KHR_loader_init_android_SPEC_VERSION 1 # define XR_KHR_LOADER_INIT_ANDROID_EXTENSION_NAME \" XR_KHR_loader_init_android \" typedef struct XrLoaderInitInfoAndroidKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; void* XR_MAY_ALIAS applicationVM ; void* XR_MAY_ALIAS applicationContext ; } XrLoaderInitInfoAndroidKHR ; # endif # ifdef XR_USE_GRAPHICS_API_VULKAN # define XR_KHR_vulkan_enable2 1 # define XR_KHR_vulkan_enable2_SPEC_VERSION 2 # define XR_KHR_VULKAN_ENABLE2_EXTENSION_NAME \" XR_KHR_vulkan_enable2 \" typedef XrFlags64 XrVulkanInstanceCreateFlagsKHR ; typedef XrFlags64 XrVulkanDeviceCreateFlagsKHR ; typedef struct XrVulkanInstanceCreateInfoKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; XrSystemId systemId ; XrVulkanInstanceCreateFlagsKHR createFlags ; PFN_vkGetInstanceProcAddr pfnGetInstanceProcAddr ; const VkInstanceCreateInfo* vulkanCreateInfo ; const VkAllocationCallbacks* vulkanAllocator ; } XrVulkanInstanceCreateInfoKHR ; typedef struct XrVulkanDeviceCreateInfoKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; XrSystemId systemId ; XrVulkanDeviceCreateFlagsKHR createFlags ; PFN_vkGetInstanceProcAddr pfnGetInstanceProcAddr ; VkPhysicalDevice vulkanPhysicalDevice ; const VkDeviceCreateInfo* vulkanCreateInfo ; const VkAllocationCallbacks* vulkanAllocator ; } XrVulkanDeviceCreateInfoKHR ; typedef XrGraphicsBindingVulkanKHR XrGraphicsBindingVulkan2KHR ; typedef struct XrVulkanGraphicsDeviceGetInfoKHR { XrStructureType type ; const void* XR_MAY_ALIAS next ; XrSystemId systemId ; VkInstance vulkanInstance ; } XrVulkanGraphicsDeviceGetInfoKHR ; typedef XrSwapchainImageVulkanKHR XrSwapchainImageVulkan2KHR ; typedef XrGraphicsRequirementsVulkanKHR XrGraphicsRequirementsVulkan2KHR ; typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrCreateVulkanInstanceKHR)(XrInstance instance, const XrVulkanInstanceCreateInfoKHR* createInfo, VkInstance* vulkanInstance, VkResult* vulkanResult)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrCreateVulkanDeviceKHR)(XrInstance instance, const XrVulkanDeviceCreateInfoKHR* createInfo, VkDevice* vulkanDevice, VkResult* vulkanResult)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetVulkanGraphicsDevice2KHR)(XrInstance instance, const XrVulkanGraphicsDeviceGetInfoKHR* getInfo, VkPhysicalDevice* vulkanPhysicalDevice)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetVulkanGraphicsRequirements2KHR)(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsVulkanKHR* graphicsRequirements)"
  },
  {
    "label": "xrCreateVulkanInstanceKHR()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrCreateVulkanInstanceKHR(XrInstance instance, const XrVulkanInstanceCreateInfoKHR* createInfo, VkInstance* vulkanInstance, VkResult* vulkanResult)"
  },
  {
    "label": "xrCreateVulkanDeviceKHR()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrCreateVulkanDeviceKHR(XrInstance instance, const XrVulkanDeviceCreateInfoKHR* createInfo, VkDevice* vulkanDevice, VkResult* vulkanResult)"
  },
  {
    "label": "xrGetVulkanGraphicsDevice2KHR()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetVulkanGraphicsDevice2KHR(XrInstance instance, const XrVulkanGraphicsDeviceGetInfoKHR* getInfo, VkPhysicalDevice* vulkanPhysicalDevice)"
  },
  {
    "label": "xrGetVulkanGraphicsRequirements2KHR()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetVulkanGraphicsRequirements2KHR(XrInstance instance, XrSystemId systemId, XrGraphicsRequirementsVulkanKHR* graphicsRequirements)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_PLATFORM_EGL # define XR_MNDX_egl_enable 1 # define XR_MNDX_egl_enable_SPEC_VERSION 1 # define XR_MNDX_EGL_ENABLE_EXTENSION_NAME \" XR_MNDX_egl_enable \" typedef struct XrGraphicsBindingEGLMNDX { XrStructureType type ; const void* XR_MAY_ALIAS next ; PFNEGLGETPROCADDRESSPROC getProcAddress ; EGLDisplay display ; EGLConfig config ; EGLContext context ; } XrGraphicsBindingEGLMNDX ; # endif # ifdef XR_USE_PLATFORM_WIN32 # define XR_MSFT_perception_anchor_interop 1 # define XR_MSFT_perception_anchor_interop_SPEC_VERSION 1 # define XR_MSFT_PERCEPTION_ANCHOR_INTEROP_EXTENSION_NAME \" XR_MSFT_perception_anchor_interop \" typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrCreateSpatialAnchorFromPerceptionAnchorMSFT)(XrSession session, IUnknown* perceptionAnchor, XrSpatialAnchorMSFT* anchor)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrTryGetPerceptionAnchorFromSpatialAnchorMSFT)(XrSession session, XrSpatialAnchorMSFT anchor, IUnknown** perceptionAnchor)"
  },
  {
    "label": "xrCreateSpatialAnchorFromPerceptionAnchorMSFT()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrCreateSpatialAnchorFromPerceptionAnchorMSFT(XrSession session, IUnknown* perceptionAnchor, XrSpatialAnchorMSFT* anchor)"
  },
  {
    "label": "xrTryGetPerceptionAnchorFromSpatialAnchorMSFT()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrTryGetPerceptionAnchorFromSpatialAnchorMSFT(XrSession session, XrSpatialAnchorMSFT anchor, IUnknown** perceptionAnchor)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_PLATFORM_WIN32 # define XR_MSFT_holographic_window_attachment 1 # define XR_MSFT_holographic_window_attachment_SPEC_VERSION 1 # define XR_MSFT_HOLOGRAPHIC_WINDOW_ATTACHMENT_EXTENSION_NAME \" XR_MSFT_holographic_window_attachment \" # ifdef XR_USE_PLATFORM_WIN32 typedef struct XrHolographicWindowAttachmentMSFT { XrStructureType type ; const void* XR_MAY_ALIAS next ; IUnknown* holographicSpace ; IUnknown* coreWindow ; } XrHolographicWindowAttachmentMSFT ; # endif # endif # ifdef XR_USE_PLATFORM_ANDROID # define XR_FB_android_surface_swapchain_create 1 # define XR_FB_android_surface_swapchain_create_SPEC_VERSION 1 # define XR_FB_ANDROID_SURFACE_SWAPCHAIN_CREATE_EXTENSION_NAME \" XR_FB_android_surface_swapchain_create \" typedef XrFlags64 XrAndroidSurfaceSwapchainFlagsFB ; const XrAndroidSurfaceSwapchainFlagsFB XR_ANDROID_SURFACE_SWAPCHAIN_SYNCHRONOUS_BIT_FB = 0 x00000001 ; const XrAndroidSurfaceSwapchainFlagsFB XR_ANDROID_SURFACE_SWAPCHAIN_USE_TIMESTAMPS_BIT_FB = 0 x00000002 ; # ifdef XR_USE_PLATFORM_ANDROID typedef struct XrAndroidSurfaceSwapchainCreateInfoFB { XrStructureType type ; const void* XR_MAY_ALIAS next ; XrAndroidSurfaceSwapchainFlagsFB createFlags ; } XrAndroidSurfaceSwapchainCreateInfoFB ; # endif # endif # ifdef XR_USE_PLATFORM_ML # define XR_ML_compat 1 # define XR_ML_compat_SPEC_VERSION 1 # define XR_ML_COMPAT_EXTENSION_NAME \" XR_ML_compat \" typedef struct XrCoordinateSpaceCreateInfoML { XrStructureType type ; const void* XR_MAY_ALIAS next ; MLCoordinateFrameUID cfuid ; XrPosef poseInCoordinateSpace ; } XrCoordinateSpaceCreateInfoML ; typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrCreateSpaceFromCoordinateFrameUIDML)(XrSession session, const XrCoordinateSpaceCreateInfoML *createInfo, XrSpace* space)"
  },
  {
    "label": "xrCreateSpaceFromCoordinateFrameUIDML()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrCreateSpaceFromCoordinateFrameUIDML(XrSession session, const XrCoordinateSpaceCreateInfoML * createInfo, XrSpace* space)"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (# endif # endif # endif # ifdef XR_USE_PLATFORM_WIN32 # define XR_OCULUS_audio_device_guid 1 # define XR_OCULUS_audio_device_guid_SPEC_VERSION 1 # define XR_OCULUS_AUDIO_DEVICE_GUID_EXTENSION_NAME \" XR_OCULUS_audio_device_guid \" # define XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS 1 2 8 typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetAudioOutputDeviceGuidOculus)(XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS])"
  },
  {
    "label": "XrResult()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "XrResult(XRAPI_PTR *PFN_xrGetAudioInputDeviceGuidOculus)(XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS])"
  },
  {
    "label": "xrGetAudioOutputDeviceGuidOculus()",
    "kind": "Method",
    "detail": "Function (# ifndef XR_NO_PROTOTYPES # ifdef XR_EXTENSION_PROTOTYPES XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetAudioOutputDeviceGuidOculus(XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS])"
  },
  {
    "label": "xrGetAudioInputDeviceGuidOculus()",
    "kind": "Method",
    "detail": "Function (XRAPI_ATTR XrResult XRAPI_CALL)",
    "insertText": "xrGetAudioInputDeviceGuidOculus(XrInstance instance, wchar_t buffer[XR_MAX_AUDIO_DEVICE_STR_SIZE_OCULUS])"
  }
]