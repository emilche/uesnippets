[
  {
    "label": "TDynamicVertexAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicVertexAttribute"
  },
  {
    "label": "TDynamicVertexAttributeChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicVertexAttributeChange"
  },
  {
    "label": "FChangeVertexAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeVertexAttribute"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "TDynamicVertexAttributeChange()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicMesh3 . h \" # include \" DynamicMesh / DynamicAttribute . h \" namespace UE { namespace Geometry { template<AttribValueType,int AttribDimension,ParentType> class TDynamicVertexAttribute ; template<AttribValueType,int AttribDimension,ParentType> class TDynamicVertexAttributeChange : public TDynamicAttributeChangeBase<ParentType> { private : struct FChangeVertexAttribute { AttribValueType Data [ AttribDimension ] ; int VertexID ; } ; TArray<FChangeVertexAttribute> OldVertexAttributes,NewVertexAttributes ; public :)",
    "insertText": "TDynamicVertexAttributeChange()"
  },
  {
    "label": "SaveInitialVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SaveInitialVertex(const TDynamicAttributeBase<ParentType>* Attribute, int VertexID)"
  },
  {
    "label": "StoreAllFinalVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreAllFinalVertices(const TDynamicAttributeBase<ParentType>* Attribute, const TArray<int>& VertexIDs)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Apply(TDynamicAttributeBase<ParentType>* Attribute, bool bRevert)"
  },
  {
    "label": "TDynamicVertexAttribute()",
    "kind": "Method",
    "detail": "Function (} ; template<AttribValueType,int AttribDimension,ParentType> class TDynamicVertexAttribute : public TDynamicAttributeBase<ParentType> { protected : ParentType* Parent ; TDynamicVector<AttribValueType> AttribValues ; using Super = TDynamicAttributeBase<ParentType> ; class FDynamicMeshAttributeSet ; public :)",
    "insertText": "TDynamicVertexAttribute() : Parent(nullptr)"
  },
  {
    "label": "TDynamicVertexAttribute()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TDynamicVertexAttribute(ParentType* ParentIn, bool bAutoInit = true) : Parent(ParentIn)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "TDynamicVertexAttribute()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "TDynamicVertexAttribute()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (} const ParentType*)",
    "insertText": "GetParent()"
  },
  {
    "label": "MakeNew()",
    "kind": "Method",
    "detail": "Function (Parent = NewParent ; } public : TDynamicAttributeBase<ParentType>*)",
    "insertText": "MakeNew(ParentType* ParentIn)"
  },
  {
    "label": "ParentType()",
    "kind": "Method",
    "detail": "Function (TDynamicVertexAttribute<AttribValueType,AttribDimension,ParentType>* Matching = new TDynamicVertexAttribute<AttribValueType,AttribDimension,)",
    "insertText": "ParentType(ParentIn)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (ToFill ->)",
    "insertText": "Copy(*this)"
  },
  {
    "label": "CopyParentClassData()",
    "kind": "Method",
    "detail": "Function (TDynamicAttributeBase<ParentType)",
    "insertText": "CopyParentClassData(Copy)"
  },
  {
    "label": "MakeCompactCopy()",
    "kind": "Method",
    "detail": "Function (AttribValues = Copy . AttribValues ; } TDynamicAttributeBase<ParentType>*)",
    "insertText": "MakeCompactCopy(const FCompactMaps& CompactMaps, ParentType* ParentTypeIn)"
  },
  {
    "label": "ParentType()",
    "kind": "Method",
    "detail": "Function (TDynamicVertexAttribute<AttribValueType,AttribDimension,ParentType>* ToFill = new TDynamicVertexAttribute<AttribValueType,AttribDimension,)",
    "insertText": "ParentType(ParentTypeIn)"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (ToFill ->)",
    "insertText": "CompactCopy(CompactMaps, *this)"
  },
  {
    "label": "GetVertexMapping()",
    "kind": "Method",
    "detail": "Function (const int ToVID = CompactMaps .)",
    "insertText": "GetVertexMapping(VID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "if(ensure(ToVID <= VID))"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(VID, ToVID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} } AttribValues .)",
    "insertText": "Resize(Parent->MaxVertexID() * AttribDimension)"
  },
  {
    "label": "CompactCopy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompactCopy(const FCompactMaps& CompactMaps, const TDynamicVertexAttribute<AttribValueType, AttribDimension, ParentType>& ToCopy)"
  },
  {
    "label": "CopyParentClassData()",
    "kind": "Method",
    "detail": "Function (TDynamicAttributeBase<ParentType)",
    "insertText": "CopyParentClassData(ToCopy)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (AttribValueType Data [ AttribDimension ] ;)",
    "insertText": "for(int VID = 0, NumVID = CompactMaps.NumVertexMappings(); VID < NumVID; VID++)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (continue ; } ToCopy .)",
    "insertText": "GetValue(VID, Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(ToVID, Data)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Initialize(AttribValueType InitialValue = (AttribValueType)0)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (AttribValues .)",
    "insertText": "Fill(InitialValue)"
  },
  {
    "label": "SetNewValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNewValue(int NewVertexID, const AttribValueType* Data)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int k = NewVertexID* AttribDimension ;)",
    "insertText": "for(int i = 0; i < AttribDimension; ++i)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (AttribValues .)",
    "insertText": "InsertAt(Data[i], k + i)"
  },
  {
    "label": "CopyThroughMapping()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "CopyThroughMapping(const TDynamicAttributeBase<ParentType>* Source, const FMeshIndexMappings& Mapping)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (AttribValueType BufferData [ AttribDimension ] ; int BufferSize =)",
    "insertText": "sizeof(BufferData)"
  },
  {
    "label": "CopyOut()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "CopyOut(int RawID, void* Buffer, int BufferSize)"
  },
  {
    "label": "CopyIn()",
    "kind": "Method",
    "detail": "Function (BufferData [ i ] = AttribValues [ k + i ] ; } return true ; } bool)",
    "insertText": "CopyIn(int RawID, void* Buffer, int BufferSize)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (AttribValues [ k + i ] = BufferData [ i ] ; } return true ; } void)",
    "insertText": "GetValue(int VertexID, AttribValueType* Data)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (Data [ i ] = AttribValues [ k + i ] ; } } template<AsType> void)",
    "insertText": "GetValue(int VertexID, AsType& Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Data [ i ] = AttribValues [ k + i ] ; } } void)",
    "insertText": "SetValue(int VertexID, const AttribValueType* Data)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (AttribValues [ k + i ] = Data [ i ] ; } } template<AsType> void)",
    "insertText": "SetValue(int VertexID, const AsType& Data)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (AttribValues [ k + i ] = Data [ i ] ; } } void)",
    "insertText": "CopyValue(int FromVertexID, int ToVertexID)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (AttribValues .)",
    "insertText": "InsertAt(AttribValues[kA+i], kB+i)"
  },
  {
    "label": "OnSplitEdge()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "OnSplitEdge(const FDynamicMesh3::FEdgeSplitInfo& SplitInfo)"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAttribStoreIfNeeded(SplitInfo.NewVertex)"
  },
  {
    "label": "SetAttributeFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeFromLerp(SplitInfo.NewVertex, SplitInfo.OriginalVertices.A, SplitInfo.OriginalVertices.B, SplitInfo.SplitT)"
  },
  {
    "label": "OnFlipEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFlipEdge(const FDynamicMesh3::FEdgeFlipInfo& FlipInfo)"
  },
  {
    "label": "OnCollapseEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCollapseEdge(const FDynamicMesh3::FEdgeCollapseInfo& CollapseInfo)"
  },
  {
    "label": "SetAttributeFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeFromLerp(CollapseInfo.KeptVertex, CollapseInfo.KeptVertex, CollapseInfo.RemovedVertex, CollapseInfo.CollapseT)"
  },
  {
    "label": "GetDefaultAttributeValue()",
    "kind": "Method",
    "detail": "Function (} AttribValueType)",
    "insertText": "GetDefaultAttributeValue()"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResizeAttribStoreIfNeeded(int VertexID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (AttribValues .)",
    "insertText": "Resize(NeededSize, GetDefaultAttributeValue())"
  },
  {
    "label": "OnNewVertex()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnNewVertex(int VertexID, bool bInserted)"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAttribStoreIfNeeded(VertexID)"
  },
  {
    "label": "OnPokeTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPokeTriangle(const FDynamicMesh3::FPokeTriangleInfo& PokeInfo)"
  },
  {
    "label": "ResizeAttribStoreIfNeeded()",
    "kind": "Method",
    "detail": "Function (FIndex3i Tri = PokeInfo . TriVertices ;)",
    "insertText": "ResizeAttribStoreIfNeeded(PokeInfo.NewVertex)"
  },
  {
    "label": "SetAttributeFromBary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeFromBary(PokeInfo.NewVertex, Tri.A, Tri.B, Tri.C, PokeInfo.BaryCoords)"
  },
  {
    "label": "OnMergeEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMergeEdges(const FDynamicMesh3::FMergeEdgesInfo& MergeInfo)"
  },
  {
    "label": "SetAttributeFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeFromLerp(MergeInfo.KeptVerts.A, MergeInfo.KeptVerts.A, MergeInfo.RemovedVerts.A, MergeInfo.InterpolationT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(MergeInfo.RemovedVerts.B != FDynamicMesh3::InvalidID)"
  },
  {
    "label": "SetAttributeFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeFromLerp(MergeInfo.KeptVerts.B, MergeInfo.KeptVerts.B, MergeInfo.RemovedVerts.B, MergeInfo.InterpolationT)"
  },
  {
    "label": "OnMergeVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnMergeVertices(const FDynamicMesh3::FMergeVerticesInfo& MergeInfo)"
  },
  {
    "label": "SetAttributeFromLerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttributeFromLerp(MergeInfo.KeptVertex, MergeInfo.KeptVertex, MergeInfo.RemovedVertex, MergeInfo.InterpolationT)"
  },
  {
    "label": "OnSplitVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnSplitVertex(const FDynamicMesh3::FVertexSplitInfo& SplitInfo, const TArrayView<const int>& TrianglesToUpdate)"
  },
  {
    "label": "CopyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyValue(SplitInfo.OriginalVertex, SplitInfo.NewVertex)"
  },
  {
    "label": "NewBlankChange()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<TDynamicAttributeChangeBase<ParentType>>)",
    "insertText": "NewBlankChange()"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckValidity(bool bAllowNonmanifold, EValidityCheckFailMode FailMode)"
  },
  {
    "label": "IsSameAs()",
    "kind": "Method",
    "detail": "Function (default : return false ; } } return true ; } bool)",
    "insertText": "IsSameAs(const TDynamicVertexAttribute<AttribValueType, AttribDimension, ParentType>& Other, bool bIgnoreDataLayout)"
  },
  {
    "label": "GetVerticesRefCounts()",
    "kind": "Method",
    "detail": "Function (const FRefCountVector::IndexIterator ItVidEnd = Parent ->)",
    "insertText": "GetVerticesRefCounts().EndIndices()"
  },
  {
    "label": "GetVerticesRefCounts()",
    "kind": "Method",
    "detail": "Function (FRefCountVector::IndexIterator ItVidOther = Other . Parent ->)",
    "insertText": "GetVerticesRefCounts().BeginIndices()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const AttribValueType AttribValue = AttribValues [* ItVid* AttribDimension + i ] ; const AttribValueType AttribValueOther = Other . AttribValues [* ItVidOther* AttribDimension + i ] ;)",
    "insertText": "if(AttribValue != AttribValueOther)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Attr .)",
    "insertText": "Serialize(Ar, nullptr, false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FUE5MainStreamObjectVersion::GUID)"
  },
  {
    "label": "SerializeVector()",
    "kind": "Method",
    "detail": "Function (Ar<<AttribValues ; } else { auto)",
    "insertText": "SerializeVector(FArchive& Ar, auto& Vector, bool bUseCompression)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (Vector . template Serialize<true,)",
    "insertText": "true(Ar)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} else { Vector . template Serialize<true,)",
    "insertText": "false(Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ; Ar<<bUseCompression ;)",
    "insertText": "if(CompactMaps == nullptr || !CompactMaps->VertexMapIsSet())"
  },
  {
    "label": "SerializeVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeVector(Ar, AttribValues, bUseCompression)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} else { TDynamicVector<AttribValueType> AttribValuesCompact ; AttribValuesCompact .)",
    "insertText": "SetNum(Parent->VertexCount() * AttribDimension)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 VidCompact = 0 ;)",
    "insertText": "for(int32 Vid = 0, Num = AttribValues.Num() / AttribDimension; Vid < Num; ++Vid)"
  },
  {
    "label": "GetVertexMapping()",
    "kind": "Method",
    "detail": "Function (const int32 VidMapping = CompactMaps ->)",
    "insertText": "GetVertexMapping(Vid)"
  },
  {
    "label": "SerializeVector()",
    "kind": "Method",
    "detail": "Function (AttribValuesCompact [ VidCompact + + ] = AttribValues [ Vid* AttribDimension + i ] ; } } })",
    "insertText": "SerializeVector(Ar, AttribValuesCompact, bUseCompression)"
  },
  {
    "label": "SetAttributeFromLerp()",
    "kind": "Method",
    "detail": "Function (} } } protected : void)",
    "insertText": "SetAttributeFromLerp(int SetAttribute, int AttributeA, int AttributeB, double Alpha)"
  },
  {
    "label": "Beta()",
    "kind": "Method",
    "detail": "Function (int IndexSet = AttribDimension* SetAttribute ; int IndexA = AttribDimension* AttributeA ; int IndexB = AttribDimension* AttributeB ; double)",
    "insertText": "Beta(1. - Alpha)"
  },
  {
    "label": "AttribValueType()",
    "kind": "Method",
    "detail": "Function (AttribValues [ IndexSet + i ] =)",
    "insertText": "AttribValueType(Beta*AttribValues[IndexA+i] + Alpha*AttribValues[IndexB+i])"
  },
  {
    "label": "SetAttributeFromBary()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetAttributeFromBary(int SetAttribute, int AttributeA, int AttributeB, int AttributeC, const FVector3d& BaryCoords)"
  },
  {
    "label": "AttribValueType()",
    "kind": "Method",
    "detail": "Function (AttribValues [ IndexSet + i ] =)",
    "insertText": "AttribValueType(BaryCoords.X*AttribValues[IndexA+i] + BaryCoords.Y*AttribValues[IndexB+i] + BaryCoords.Z*AttribValues[IndexC+i])"
  },
  {
    "label": "Emplace_GetRef()",
    "kind": "Method",
    "detail": "Function (FChangeVertexAttribute& Change = OldVertexAttributes .)",
    "insertText": "Emplace_GetRef()"
  },
  {
    "label": "ParentType()",
    "kind": "Method",
    "detail": "Function (Change . VertexID = VertexID ; const TDynamicVertexAttribute<AttribValueType,AttribDimension,ParentType>* AttribCast = static_cast<const TDynamicVertexAttribute<AttribValueType,AttribDimension,)",
    "insertText": "ParentType(Attribute)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (AttribCast ->)",
    "insertText": "GetValue(VertexID, Change.Data)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (NewVertexAttributes .)",
    "insertText": "Reserve(NewVertexAttributes.Num() + VertexIDs.Num())"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (bool bIsVertex = AttribCast ->)",
    "insertText": "GetParent()->IsVertex(Change.VertexID)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (AttribCast ->)",
    "insertText": "SetValue(Change.VertexID, Change.Data)"
  }
]