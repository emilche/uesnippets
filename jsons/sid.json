[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "FromNamedCapability()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SID_H_ # define BASE_WIN_SID_H_ # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / win / windows_types . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { namespace win { enum class WellKnownCapability { kInternetClient,kInternetClientServer,kPrivateNetworkClientServer,kPicturesLibrary,kVideosLibrary,kMusicLibrary,kDocumentsLibrary,kEnterpriseAuthentication,kSharedUserCertificates,kRemovableStorage,kAppointments,kContacts } ; enum class WellKnownSid { kNull,kWorld,kCreatorOwner,kNetwork,kBatch,kInteractive,kService,kAnonymous,kSelf,kAuthenticatedUser,kRestricted,kLocalSystem,kLocalService,kNetworkService,kBuiltinAdministrators,kBuiltinUsers,kBuiltinGuests,kUntrustedLabel,kLowLabel,kMediumLabel,kHighLabel,kSystemLabel,kWriteRestricted,kCreatorOwnerRights,kAllApplicationPackages,kAllRestrictedApplicationPackages } ; class BASE_EXPORT Sid { public : absl::optional<Sid>)",
    "insertText": "FromNamedCapability(const wchar_t* capability_name)"
  },
  {
    "label": "FromKnownCapability()",
    "kind": "Method",
    "detail": "Function (absl::optional<Sid>)",
    "insertText": "FromKnownCapability(WellKnownCapability capability)"
  },
  {
    "label": "FromKnownSid()",
    "kind": "Method",
    "detail": "Function (absl::optional<Sid>)",
    "insertText": "FromKnownSid(WellKnownSid type)"
  },
  {
    "label": "FromSddlString()",
    "kind": "Method",
    "detail": "Function (absl::optional<Sid>)",
    "insertText": "FromSddlString(const wchar_t* sddl_sid)"
  },
  {
    "label": "FromPSID()",
    "kind": "Method",
    "detail": "Function (absl::optional<Sid>)",
    "insertText": "FromPSID(const PSID sid)"
  },
  {
    "label": "GenerateRandomSid()",
    "kind": "Method",
    "detail": "Function (absl::optional<Sid>)",
    "insertText": "GenerateRandomSid()"
  },
  {
    "label": "FromIntegrityLevel()",
    "kind": "Method",
    "detail": "Function (absl::optional<Sid>)",
    "insertText": "FromIntegrityLevel(DWORD integrity_level)"
  },
  {
    "label": "FromSddlStringVector()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::vector<Sid>>)",
    "insertText": "FromSddlStringVector(const std::vector<const wchar_t*>& sddl_sids)"
  },
  {
    "label": "FromNamedCapabilityVector()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::vector<Sid>>)",
    "insertText": "FromNamedCapabilityVector(const std::vector<const wchar_t*>& capability_names)"
  },
  {
    "label": "FromKnownCapabilityVector()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::vector<Sid>>)",
    "insertText": "FromKnownCapabilityVector(const std::vector<WellKnownCapability>& capabilities)"
  },
  {
    "label": "FromKnownSidVector()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::vector<Sid>>)",
    "insertText": "FromKnownSidVector(const std::vector<WellKnownSid>& sids)"
  },
  {
    "label": "Sid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sid(const Sid&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Sid&)",
    "insertText": "operator(const Sid&)"
  },
  {
    "label": "Sid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sid(Sid&& sid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Sid&)",
    "insertText": "operator(Sid&&)"
  },
  {
    "label": "Sid()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Sid()"
  },
  {
    "label": "GetPSID()",
    "kind": "Method",
    "detail": "Function (PSID)",
    "insertText": "GetPSID()"
  },
  {
    "label": "ToSddlString()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::wstring>)",
    "insertText": "ToSddlString()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (Sid)",
    "insertText": "Clone()"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equal(PSID sid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const Sid& sid)"
  },
  {
    "label": "Sid()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "Sid(const void* sid, size_t length)"
  }
]