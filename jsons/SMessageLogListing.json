[
  {
    "label": "FMessageFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageFilter"
  },
  {
    "label": "MESSAGELOG_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MESSAGELOG_API"
  },
  {
    "label": "IMessageLogListing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageLogListing"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "IMessageToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageToken"
  },
  {
    "label": "FMessageLogListingViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageLogListingViewModel"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Logging / TokenizedMessage . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Presentation / MessageLogListingViewModel . h \" # include \" Framework / Commands / UICommandList . h \" class FMessageFilter ; class SMessageLogListing : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMessageLogListing)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() SMessageLogListing()"
  },
  {
    "label": "SMessageLogListing()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SMessageLogListing()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef< class IMessageLogListing >& InModelView)"
  },
  {
    "label": "RefreshVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshVisibility()"
  },
  {
    "label": "BroadcastMessageTokenClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastMessageTokenClicked(TSharedPtr< class FTokenizedMessage > Message, const TSharedRef<class IMessageToken>& Token)"
  },
  {
    "label": "BroadcastMessageDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastMessageDoubleClicked(TSharedPtr< class FTokenizedMessage > Message)"
  },
  {
    "label": "GetSelectedMessages()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<class FTokenizedMessage>>)",
    "insertText": "GetSelectedMessages()"
  },
  {
    "label": "SelectMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectMessage(const TSharedRef< class FTokenizedMessage >& Message, bool bSelected)"
  },
  {
    "label": "IsMessageSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMessageSelected(const TSharedRef< class FTokenizedMessage >& Message)"
  },
  {
    "label": "ScrollToMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToMessage(const TSharedRef< class FTokenizedMessage >& Message)"
  },
  {
    "label": "ClearSelectedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedMessages()"
  },
  {
    "label": "InvertSelectedMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvertSelectedMessages()"
  },
  {
    "label": "GetSelectedMessagesAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSelectedMessagesAsString()"
  },
  {
    "label": "GetAllMessagesAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAllMessagesAsString()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (} const FText&)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetMessageFilters()",
    "kind": "Method",
    "detail": "Function (} const TArray<TSharedRef<class FMessageFilter>>&)",
    "insertText": "GetMessageFilters()"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnChanged()"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged()"
  },
  {
    "label": "CopySelectedToClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedToClipboard()"
  },
  {
    "label": "CopyLogOutput()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CopyLogOutput(bool bSelected, bool bClipboard)"
  },
  {
    "label": "GetCommandList()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<const FUICommandList>)",
    "insertText": "GetCommandList()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetPageText()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPageText()"
  },
  {
    "label": "OnClickedPrevPage()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClickedPrevPage()"
  },
  {
    "label": "OnClickedNextPage()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClickedNextPage()"
  },
  {
    "label": "GetFilterMenuVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetFilterMenuVisibility()"
  },
  {
    "label": "MakeShowWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "MakeShowWidget(TSharedRef<FMessageFilter> Selection, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "OnGetFilterMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetFilterMenuContent()"
  },
  {
    "label": "IsPageWidgetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPageWidgetEnabled()"
  },
  {
    "label": "GetPageWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPageWidgetVisibility()"
  },
  {
    "label": "IsClearWidgetEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClearWidgetEnabled()"
  },
  {
    "label": "GetClearWidgetVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetClearWidgetVisibility()"
  },
  {
    "label": "OnGetPageMenuLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "OnGetPageMenuLabel()"
  },
  {
    "label": "OnGetPageMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetPageMenuContent()"
  },
  {
    "label": "OnPageSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPageSelected(uint32 PageIndex)"
  },
  {
    "label": "OnClear()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnClear()"
  },
  {
    "label": "MakeMessageLogListItemWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "MakeMessageLogListItemWidget(TSharedRef< class FTokenizedMessage > Message, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnLineSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLineSelectionChanged(TSharedPtr< class FTokenizedMessage > Selection, ESelectInfo::Type SelectInfo)"
  }
]