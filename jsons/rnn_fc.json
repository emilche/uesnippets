[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FullyConnectedLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FullyConnectedLayer"
  },
  {
    "label": "FullyConnectedLayer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RNN_FC_H_ # define MODULES_AUDIO_PROCESSING_AGC2_RNN_VAD_RNN_FC_H_ # include<array> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / function_view . h \" # include \" modules / audio_processing / agc2 / cpu_features . h \" # include \" modules / audio_processing / agc2 / rnn_vad / vector_math . h \" namespace webrtc { namespace rnn_vad { enum class ActivationFunction { kTansigApproximated,kSigmoidApproximated } ; int kFullyConnectedLayerMaxUnits = 2 4 ; class FullyConnectedLayer { public :)",
    "insertText": "FullyConnectedLayer(int input_size, int output_size, rtc::ArrayView<const int8_t> bias, rtc::ArrayView<const int8_t> weights, ActivationFunction activation_function, const AvailableCpuFeatures& cpu_features, absl::string_view layer_name)"
  },
  {
    "label": "FullyConnectedLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FullyConnectedLayer(const FullyConnectedLayer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FullyConnectedLayer&)",
    "insertText": "operator(const FullyConnectedLayer&)"
  },
  {
    "label": "FullyConnectedLayer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FullyConnectedLayer()"
  },
  {
    "label": "input_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "input_size()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "size()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (private : const int input_size_ ; const int output_size_ ; const std::vector<float> bias_ ; const std::vector<float> weights_ ; const VectorMath vector_math_ ; rtc::FunctionView<)",
    "insertText": "float(float)"
  }
]