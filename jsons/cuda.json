[
  {
    "label": "CUctx_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUctx_st"
  },
  {
    "label": "CUmod_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUmod_st"
  },
  {
    "label": "CUfunc_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUfunc_st"
  },
  {
    "label": "CUarray_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUarray_st"
  },
  {
    "label": "CUmipmappedArray_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUmipmappedArray_st"
  },
  {
    "label": "CUtexref_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUtexref_st"
  },
  {
    "label": "CUsurfref_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUsurfref_st"
  },
  {
    "label": "CUevent_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUevent_st"
  },
  {
    "label": "CUstream_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUstream_st"
  },
  {
    "label": "CUgraphicsResource_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUgraphicsResource_st"
  },
  {
    "label": "CUextMemory_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUextMemory_st"
  },
  {
    "label": "CUextSemaphore_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUextSemaphore_st"
  },
  {
    "label": "CUgraph_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUgraph_st"
  },
  {
    "label": "CUgraphNode_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUgraphNode_st"
  },
  {
    "label": "CUgraphExec_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUgraphExec_st"
  },
  {
    "label": "CUmemPoolHandle_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUmemPoolHandle_st"
  },
  {
    "label": "CUuuid_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUuuid_st"
  },
  {
    "label": "CUipcEventHandle_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUipcEventHandle_st"
  },
  {
    "label": "CUipcMemHandle_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUipcMemHandle_st"
  },
  {
    "label": "CUipcMem_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUipcMem_flags_enum"
  },
  {
    "label": "CUmemAttach_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemAttach_flags_enum"
  },
  {
    "label": "CUctx_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUctx_flags_enum"
  },
  {
    "label": "CUstream_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUstream_flags_enum"
  },
  {
    "label": "CUevent_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUevent_flags_enum"
  },
  {
    "label": "CUevent_record_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUevent_record_flags_enum"
  },
  {
    "label": "CUevent_wait_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUevent_wait_flags_enum"
  },
  {
    "label": "CUstreamWaitValue_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUstreamWaitValue_flags_enum"
  },
  {
    "label": "CUstreamWriteValue_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUstreamWriteValue_flags_enum"
  },
  {
    "label": "CUstreamBatchMemOpType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUstreamBatchMemOpType_enum"
  },
  {
    "label": "CUstreamMemOpWaitValueParams_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUstreamMemOpWaitValueParams_st"
  },
  {
    "label": "CUstreamMemOpWriteValueParams_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUstreamMemOpWriteValueParams_st"
  },
  {
    "label": "CUstreamMemOpFlushRemoteWritesParams_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUstreamMemOpFlushRemoteWritesParams_st"
  },
  {
    "label": "CUoccupancy_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUoccupancy_flags_enum"
  },
  {
    "label": "CUarray_format_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUarray_format_enum"
  },
  {
    "label": "CUaddress_mode_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUaddress_mode_enum"
  },
  {
    "label": "CUfilter_mode_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUfilter_mode_enum"
  },
  {
    "label": "CUdevice_attribute_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUdevice_attribute_enum"
  },
  {
    "label": "CUdevprop_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUdevprop_st"
  },
  {
    "label": "CUpointer_attribute_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUpointer_attribute_enum"
  },
  {
    "label": "CUfunction_attribute_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUfunction_attribute_enum"
  },
  {
    "label": "CUfunc_cache_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUfunc_cache_enum"
  },
  {
    "label": "CUsharedconfig_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUsharedconfig_enum"
  },
  {
    "label": "CUshared_carveout_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUshared_carveout_enum"
  },
  {
    "label": "CUmemorytype_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemorytype_enum"
  },
  {
    "label": "CUcomputemode_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUcomputemode_enum"
  },
  {
    "label": "CUmem_advise_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmem_advise_enum"
  },
  {
    "label": "CUmem_range_attribute_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmem_range_attribute_enum"
  },
  {
    "label": "CUjit_option_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUjit_option_enum"
  },
  {
    "label": "CUjit_target_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUjit_target_enum"
  },
  {
    "label": "CUjit_fallback_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUjit_fallback_enum"
  },
  {
    "label": "CUjit_cacheMode_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUjit_cacheMode_enum"
  },
  {
    "label": "CUjitInputType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUjitInputType_enum"
  },
  {
    "label": "CUlinkState_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUlinkState_st"
  },
  {
    "label": "CUgraphicsRegisterFlags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUgraphicsRegisterFlags_enum"
  },
  {
    "label": "CUgraphicsMapResourceFlags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUgraphicsMapResourceFlags_enum"
  },
  {
    "label": "CUarray_cubemap_face_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUarray_cubemap_face_enum"
  },
  {
    "label": "CUlimit_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUlimit_enum"
  },
  {
    "label": "CUresourcetype_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUresourcetype_enum"
  },
  {
    "label": "CUaccessProperty_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUaccessProperty_enum"
  },
  {
    "label": "CUaccessPolicyWindow_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUaccessPolicyWindow_st"
  },
  {
    "label": "CUDA_KERNEL_NODE_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_KERNEL_NODE_PARAMS_st"
  },
  {
    "label": "CUDA_MEMSET_NODE_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_MEMSET_NODE_PARAMS_st"
  },
  {
    "label": "CUDA_HOST_NODE_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_HOST_NODE_PARAMS_st"
  },
  {
    "label": "CUgraphNodeType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUgraphNodeType_enum"
  },
  {
    "label": "CUsynchronizationPolicy_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUsynchronizationPolicy_enum"
  },
  {
    "label": "CUkernelNodeAttrID_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUkernelNodeAttrID_enum"
  },
  {
    "label": "CUstreamCaptureStatus_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUstreamCaptureStatus_enum"
  },
  {
    "label": "CUstreamCaptureMode_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUstreamCaptureMode_enum"
  },
  {
    "label": "CUstreamAttrID_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUstreamAttrID_enum"
  },
  {
    "label": "cudaError_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "cudaError_enum"
  },
  {
    "label": "CUdevice_P2PAttribute_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUdevice_P2PAttribute_enum"
  },
  {
    "label": "CUDA_MEMCPY2D_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_MEMCPY2D_st"
  },
  {
    "label": "CUDA_MEMCPY3D_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_MEMCPY3D_st"
  },
  {
    "label": "CUDA_MEMCPY3D_PEER_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_MEMCPY3D_PEER_st"
  },
  {
    "label": "CUDA_ARRAY_DESCRIPTOR_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_ARRAY_DESCRIPTOR_st"
  },
  {
    "label": "CUDA_ARRAY3D_DESCRIPTOR_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_ARRAY3D_DESCRIPTOR_st"
  },
  {
    "label": "CUDA_ARRAY_SPARSE_PROPERTIES_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_ARRAY_SPARSE_PROPERTIES_st"
  },
  {
    "label": "CUDA_RESOURCE_DESC_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_RESOURCE_DESC_st"
  },
  {
    "label": "CUDA_TEXTURE_DESC_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_TEXTURE_DESC_st"
  },
  {
    "label": "CUresourceViewFormat_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUresourceViewFormat_enum"
  },
  {
    "label": "CUDA_RESOURCE_VIEW_DESC_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_RESOURCE_VIEW_DESC_st"
  },
  {
    "label": "CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st"
  },
  {
    "label": "CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum"
  },
  {
    "label": "CUDA_LAUNCH_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_LAUNCH_PARAMS_st"
  },
  {
    "label": "CUexternalMemoryHandleType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUexternalMemoryHandleType_enum"
  },
  {
    "label": "CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st"
  },
  {
    "label": "CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st"
  },
  {
    "label": "CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st"
  },
  {
    "label": "CUexternalSemaphoreHandleType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUexternalSemaphoreHandleType_enum"
  },
  {
    "label": "CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st"
  },
  {
    "label": "CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st"
  },
  {
    "label": "CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st"
  },
  {
    "label": "CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st"
  },
  {
    "label": "CUDA_EXT_SEM_WAIT_NODE_PARAMS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_EXT_SEM_WAIT_NODE_PARAMS_st"
  },
  {
    "label": "CUmemAllocationHandleType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemAllocationHandleType_enum"
  },
  {
    "label": "CUmemAccess_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemAccess_flags_enum"
  },
  {
    "label": "CUmemLocationType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemLocationType_enum"
  },
  {
    "label": "CUmemAllocationType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemAllocationType_enum"
  },
  {
    "label": "CUmemAllocationGranularity_flags_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemAllocationGranularity_flags_enum"
  },
  {
    "label": "CUarraySparseSubresourceType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUarraySparseSubresourceType_enum"
  },
  {
    "label": "CUmemOperationType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemOperationType_enum"
  },
  {
    "label": "CUmemHandleType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemHandleType_enum"
  },
  {
    "label": "CUarrayMapInfo_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUarrayMapInfo_st"
  },
  {
    "label": "CUmemLocation_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUmemLocation_st"
  },
  {
    "label": "CUmemAllocationCompType_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemAllocationCompType_enum"
  },
  {
    "label": "CUmemAllocationProp_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUmemAllocationProp_st"
  },
  {
    "label": "CUmemAccessDesc_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUmemAccessDesc_st"
  },
  {
    "label": "CUgraphExecUpdateResult_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUgraphExecUpdateResult_enum"
  },
  {
    "label": "CUmemPool_attribute_enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CUmemPool_attribute_enum"
  },
  {
    "label": "CUmemPoolProps_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUmemPoolProps_st"
  },
  {
    "label": "CUmemPoolPtrExportData_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUmemPoolPtrExportData_st"
  },
  {
    "label": "CUDA_MEMCPY2D_v1_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_MEMCPY2D_v1_st"
  },
  {
    "label": "CUDA_MEMCPY3D_v1_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_MEMCPY3D_v1_st"
  },
  {
    "label": "CUDA_ARRAY_DESCRIPTOR_v1_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_ARRAY_DESCRIPTOR_v1_st"
  },
  {
    "label": "CUDA_ARRAY3D_DESCRIPTOR_v1_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CUDA_ARRAY3D_DESCRIPTOR_v1_st"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __cuda_cuda_h__ # define __cuda_cuda_h__ # include<stdlib . h> # ifdef _MSC_VER typedef unsigned __int32 cuuint32_t ; typedef unsigned __int64 cuuint64_t ; # else # include<stdint . h> typedef uint32_t cuuint32_t ; typedef uint64_t cuuint64_t ; # endif # if)",
    "insertText": "defined(__CUDA_API_VERSION_INTERNAL) || defined(__DOXYGEN_ONLY__) || defined(CUDA_ENABLE_DEPRECATED) #define __CUDA_DEPRECATED #elif defined(_MSC_VER) #define __CUDA_DEPRECATED __declspec(deprecated) #elif defined(__GNUC__) #define __CUDA_DEPRECATED __attribute__((deprecated)) #else #define __CUDA_DEPRECATED #endif #if defined(CUDA_FORCE_API_VERSION) #error \"CUDA_FORCE_API_VERSION is no longer supported.\" #endif #if defined(__CUDA_API_VERSION_INTERNAL) || defined(CUDA_API_PER_THREAD_DEFAULT_STREAM) #define __CUDA_API_PER_THREAD_DEFAULT_STREAM #define __CUDA_API_PTDS(api) api ## _ptds #define __CUDA_API_PTSZ(api) api ## _ptsz #else #define __CUDA_API_PTDS(api) api #define __CUDA_API_PTSZ(api) api #endif #define cuDeviceTotalMem cuDeviceTotalMem_v2 #define cuCtxCreate cuCtxCreate_v2 #define cuModuleGetGlobal cuModuleGetGlobal_v2 #define cuMemGetInfo cuMemGetInfo_v2 #define cuMemAlloc cuMemAlloc_v2 #define cuMemAllocPitch cuMemAllocPitch_v2 #define cuMemFree cuMemFree_v2 #define cuMemGetAddressRange cuMemGetAddressRange_v2 #define cuMemAllocHost cuMemAllocHost_v2 #define cuMemHostGetDevicePointer cuMemHostGetDevicePointer_v2 #define cuMemcpyHtoD __CUDA_API_PTDS(cuMemcpyHtoD_v2) #define cuMemcpyDtoH __CUDA_API_PTDS(cuMemcpyDtoH_v2) #define cuMemcpyDtoD __CUDA_API_PTDS(cuMemcpyDtoD_v2) #define cuMemcpyDtoA __CUDA_API_PTDS(cuMemcpyDtoA_v2) #define cuMemcpyAtoD __CUDA_API_PTDS(cuMemcpyAtoD_v2) #define cuMemcpyHtoA __CUDA_API_PTDS(cuMemcpyHtoA_v2) #define cuMemcpyAtoH __CUDA_API_PTDS(cuMemcpyAtoH_v2) #define cuMemcpyAtoA __CUDA_API_PTDS(cuMemcpyAtoA_v2) #define cuMemcpyHtoAAsync __CUDA_API_PTSZ(cuMemcpyHtoAAsync_v2) #define cuMemcpyAtoHAsync __CUDA_API_PTSZ(cuMemcpyAtoHAsync_v2) #define cuMemcpy2D __CUDA_API_PTDS(cuMemcpy2D_v2) #define cuMemcpy2DUnaligned __CUDA_API_PTDS(cuMemcpy2DUnaligned_v2) #define cuMemcpy3D __CUDA_API_PTDS(cuMemcpy3D_v2) #define cuMemcpyHtoDAsync __CUDA_API_PTSZ(cuMemcpyHtoDAsync_v2) #define cuMemcpyDtoHAsync __CUDA_API_PTSZ(cuMemcpyDtoHAsync_v2) #define cuMemcpyDtoDAsync __CUDA_API_PTSZ(cuMemcpyDtoDAsync_v2) #define cuMemcpy2DAsync __CUDA_API_PTSZ(cuMemcpy2DAsync_v2) #define cuMemcpy3DAsync __CUDA_API_PTSZ(cuMemcpy3DAsync_v2) #define cuMemsetD8 __CUDA_API_PTDS(cuMemsetD8_v2) #define cuMemsetD16 __CUDA_API_PTDS(cuMemsetD16_v2) #define cuMemsetD32 __CUDA_API_PTDS(cuMemsetD32_v2) #define cuMemsetD2D8 __CUDA_API_PTDS(cuMemsetD2D8_v2) #define cuMemsetD2D16 __CUDA_API_PTDS(cuMemsetD2D16_v2) #define cuMemsetD2D32 __CUDA_API_PTDS(cuMemsetD2D32_v2) #define cuArrayCreate cuArrayCreate_v2 #define cuArrayGetDescriptor cuArrayGetDescriptor_v2 #define cuArray3DCreate cuArray3DCreate_v2 #define cuArray3DGetDescriptor cuArray3DGetDescriptor_v2 #define cuTexRefSetAddress cuTexRefSetAddress_v2 #define cuTexRefGetAddress cuTexRefGetAddress_v2 #define cuGraphicsResourceGetMappedPointer cuGraphicsResourceGetMappedPointer_v2 #define cuCtxDestroy cuCtxDestroy_v2 #define cuCtxPopCurrent cuCtxPopCurrent_v2 #define cuCtxPushCurrent cuCtxPushCurrent_v2 #define cuStreamDestroy cuStreamDestroy_v2 #define cuEventDestroy cuEventDestroy_v2 #define cuTexRefSetAddress2D cuTexRefSetAddress2D_v3 #define cuLinkCreate cuLinkCreate_v2 #define cuLinkAddData cuLinkAddData_v2 #define cuLinkAddFile cuLinkAddFile_v2 #define cuMemHostRegister cuMemHostRegister_v2 #define cuGraphicsResourceSetMapFlags cuGraphicsResourceSetMapFlags_v2 #define cuStreamBeginCapture __CUDA_API_PTSZ(cuStreamBeginCapture_v2) #define cuDevicePrimaryCtxRelease cuDevicePrimaryCtxRelease_v2 #define cuDevicePrimaryCtxReset cuDevicePrimaryCtxReset_v2 #define cuDevicePrimaryCtxSetFlags cuDevicePrimaryCtxSetFlags_v2 #define cuIpcOpenMemHandle cuIpcOpenMemHandle_v2 #define cuGraphInstantiate cuGraphInstantiate_v2 #if defined(__CUDA_API_PER_THREAD_DEFAULT_STREAM) #define cuMemcpy __CUDA_API_PTDS(cuMemcpy) #define cuMemcpyAsync __CUDA_API_PTSZ(cuMemcpyAsync) #define cuMemcpyPeer __CUDA_API_PTDS(cuMemcpyPeer) #define cuMemcpyPeerAsync __CUDA_API_PTSZ(cuMemcpyPeerAsync) #define cuMemcpy3DPeer __CUDA_API_PTDS(cuMemcpy3DPeer) #define cuMemcpy3DPeerAsync __CUDA_API_PTSZ(cuMemcpy3DPeerAsync) #define cuMemPrefetchAsync __CUDA_API_PTSZ(cuMemPrefetchAsync) #define cuMemsetD8Async __CUDA_API_PTSZ(cuMemsetD8Async) #define cuMemsetD16Async __CUDA_API_PTSZ(cuMemsetD16Async) #define cuMemsetD32Async __CUDA_API_PTSZ(cuMemsetD32Async) #define cuMemsetD2D8Async __CUDA_API_PTSZ(cuMemsetD2D8Async) #define cuMemsetD2D16Async __CUDA_API_PTSZ(cuMemsetD2D16Async) #define cuMemsetD2D32Async __CUDA_API_PTSZ(cuMemsetD2D32Async) #define cuStreamGetPriority __CUDA_API_PTSZ(cuStreamGetPriority) #define cuStreamGetFlags __CUDA_API_PTSZ(cuStreamGetFlags) #define cuStreamGetCtx __CUDA_API_PTSZ(cuStreamGetCtx) #define cuStreamWaitEvent __CUDA_API_PTSZ(cuStreamWaitEvent) #define cuStreamEndCapture __CUDA_API_PTSZ(cuStreamEndCapture) #define cuStreamIsCapturing __CUDA_API_PTSZ(cuStreamIsCapturing) #define cuStreamGetCaptureInfo __CUDA_API_PTSZ(cuStreamGetCaptureInfo) #define cuStreamAddCallback __CUDA_API_PTSZ(cuStreamAddCallback) #define cuStreamAttachMemAsync __CUDA_API_PTSZ(cuStreamAttachMemAsync) #define cuStreamQuery __CUDA_API_PTSZ(cuStreamQuery) #define cuStreamSynchronize __CUDA_API_PTSZ(cuStreamSynchronize) #define cuEventRecord __CUDA_API_PTSZ(cuEventRecord) #define cuEventRecordWithFlags __CUDA_API_PTSZ(cuEventRecordWithFlags) #define cuLaunchKernel __CUDA_API_PTSZ(cuLaunchKernel) #define cuLaunchHostFunc __CUDA_API_PTSZ(cuLaunchHostFunc) #define cuGraphicsMapResources __CUDA_API_PTSZ(cuGraphicsMapResources) #define cuGraphicsUnmapResources __CUDA_API_PTSZ(cuGraphicsUnmapResources) #define cuStreamWriteValue32 __CUDA_API_PTSZ(cuStreamWriteValue32) #define cuStreamWaitValue32 __CUDA_API_PTSZ(cuStreamWaitValue32) #define cuStreamWriteValue64 __CUDA_API_PTSZ(cuStreamWriteValue64) #define cuStreamWaitValue64 __CUDA_API_PTSZ(cuStreamWaitValue64) #define cuStreamBatchMemOp __CUDA_API_PTSZ(cuStreamBatchMemOp) #define cuLaunchCooperativeKernel __CUDA_API_PTSZ(cuLaunchCooperativeKernel) #define cuSignalExternalSemaphoresAsync __CUDA_API_PTSZ(cuSignalExternalSemaphoresAsync) #define cuWaitExternalSemaphoresAsync __CUDA_API_PTSZ(cuWaitExternalSemaphoresAsync) #define cuGraphUpload __CUDA_API_PTSZ(cuGraphUpload) #define cuGraphLaunch __CUDA_API_PTSZ(cuGraphLaunch) #define cuStreamCopyAttributes __CUDA_API_PTSZ(cuStreamCopyAttributes) #define cuStreamGetAttribute __CUDA_API_PTSZ(cuStreamGetAttribute) #define cuStreamSetAttribute __CUDA_API_PTSZ(cuStreamSetAttribute) #define cuMemMapArrayAsync __CUDA_API_PTSZ(cuMemMapArrayAsync) #define cuMemFreeAsync __CUDA_API_PTSZ(cuMemFreeAsync) #define cuMemAllocAsync __CUDA_API_PTSZ(cuMemAllocAsync) #define cuMemAllocFromPoolAsync __CUDA_API_PTSZ(cuMemAllocFromPoolAsync)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(_WIN64) || defined(__LP64__)"
  },
  {
    "label": "CU_STREAM_LEGACY()",
    "kind": "Method",
    "detail": "Function (# else typedef unsigned int CUdeviceptr ; # endif typedef int CUdevice ; typedef struct CUctx_st* CUcontext ; typedef struct CUmod_st* CUmodule ; typedef struct CUfunc_st* CUfunction ; typedef struct CUarray_st* CUarray ; typedef struct CUmipmappedArray_st* CUmipmappedArray ; typedef struct CUtexref_st* CUtexref ; typedef struct CUsurfref_st* CUsurfref ; typedef struct CUevent_st* CUevent ; typedef struct CUstream_st* CUstream ; typedef struct CUgraphicsResource_st* CUgraphicsResource ; typedef unsigned long long CUtexObject ; typedef unsigned long long CUsurfObject ; typedef struct CUextMemory_st* CUexternalMemory ; typedef struct CUextSemaphore_st* CUexternalSemaphore ; typedef struct CUgraph_st* CUgraph ; typedef struct CUgraphNode_st* CUgraphNode ; typedef struct CUgraphExec_st* CUgraphExec ; typedef struct CUmemPoolHandle_st* CUmemoryPool ; # ifndef CU_UUID_HAS_BEEN_DEFINED # define CU_UUID_HAS_BEEN_DEFINED typedef struct CUuuid_st { char bytes [ 1 6 ] ; } CUuuid ; # endif # define CU_IPC_HANDLE_SIZE 6 4 typedef struct CUipcEventHandle_st { char reserved [ CU_IPC_HANDLE_SIZE ] ; } CUipcEventHandle ; typedef struct CUipcMemHandle_st { char reserved [ CU_IPC_HANDLE_SIZE ] ; } CUipcMemHandle ; typedef enum CUipcMem_flags_enum { CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0 x1 } CUipcMem_flags ; typedef enum CUmemAttach_flags_enum { CU_MEM_ATTACH_GLOBAL = 0 x1,CU_MEM_ATTACH_HOST = 0 x2,CU_MEM_ATTACH_SINGLE = 0 x4 } CUmemAttach_flags ; typedef enum CUctx_flags_enum { CU_CTX_SCHED_AUTO = 0 x00,CU_CTX_SCHED_SPIN = 0 x01,CU_CTX_SCHED_YIELD = 0 x02,CU_CTX_SCHED_BLOCKING_SYNC = 0 x04,CU_CTX_BLOCKING_SYNC = 0 x04,CU_CTX_SCHED_MASK = 0 x07,CU_CTX_MAP_HOST = 0 x08,CU_CTX_LMEM_RESIZE_TO_MAX = 0 x10,CU_CTX_FLAGS_MASK = 0 x1f } CUctx_flags ; typedef enum CUstream_flags_enum { CU_STREAM_DEFAULT = 0 x0,CU_STREAM_NON_BLOCKING = 0 x1 } CUstream_flags ; # define)",
    "insertText": "CU_STREAM_LEGACY((CUstream)0x1) #define CU_STREAM_PER_THREAD ((CUstream)0x2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (CU_EVENT_DEFAULT = 0 x0,CU_EVENT_BLOCKING_SYNC = 0 x1,CU_EVENT_DISABLE_TIMING = 0 x2,CU_EVENT_INTERPROCESS = 0 x4 } CUevent_flags ; typedef enum CUevent_record_flags_enum { CU_EVENT_RECORD_DEFAULT = 0 x0,CU_EVENT_RECORD_EXTERNAL = 0 x1 } CUevent_record_flags ; typedef enum CUevent_wait_flags_enum { CU_EVENT_WAIT_DEFAULT = 0 x0,CU_EVENT_WAIT_EXTERNAL = 0 x1 } CUevent_wait_flags ; typedef enum CUstreamWaitValue_flags_enum { CU_STREAM_WAIT_VALUE_GEQ = 0 x0,CU_STREAM_WAIT_VALUE_EQ = 0 x1,CU_STREAM_WAIT_VALUE_AND = 0 x2,CU_STREAM_WAIT_VALUE_NOR = 0 x3,CU_STREAM_WAIT_VALUE_FLUSH = 1<<3 0 } CUstreamWaitValue_flags ; typedef enum CUstreamWriteValue_flags_enum { CU_STREAM_WRITE_VALUE_DEFAULT = 0 x0,CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 0 x1 } CUstreamWriteValue_flags ; typedef enum CUstreamBatchMemOpType_enum { CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1,CU_STREAM_MEM_OP_WRITE_VALUE_32 = 2,CU_STREAM_MEM_OP_WAIT_VALUE_64 = 4,CU_STREAM_MEM_OP_WRITE_VALUE_64 = 5,CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3 } CUstreamBatchMemOpType ; typedef union CUstreamBatchMemOpParams_union { CUstreamBatchMemOpType operation ; struct CUstreamMemOpWaitValueParams_st { CUstreamBatchMemOpType operation ; CUdeviceptr address ; union { cuuint32_t value ; cuuint64_t value64 ; } ; unsigned int flags ; CUdeviceptr alias ; } waitValue ; struct CUstreamMemOpWriteValueParams_st { CUstreamBatchMemOpType operation ; CUdeviceptr address ; union { cuuint32_t value ; cuuint64_t value64 ; } ; unsigned int flags ; CUdeviceptr alias ; } writeValue ; struct CUstreamMemOpFlushRemoteWritesParams_st { CUstreamBatchMemOpType operation ; unsigned int flags ; } flushRemoteWrites ; cuuint64_t pad [ 6 ] ; } CUstreamBatchMemOpParams ; typedef enum CUoccupancy_flags_enum { CU_OCCUPANCY_DEFAULT = 0 x0,CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 0 x1 } CUoccupancy_flags ; typedef enum CUarray_format_enum { CU_AD_FORMAT_UNSIGNED_INT8 = 0 x01,CU_AD_FORMAT_UNSIGNED_INT16 = 0 x02,CU_AD_FORMAT_UNSIGNED_INT32 = 0 x03,CU_AD_FORMAT_SIGNED_INT8 = 0 x08,CU_AD_FORMAT_SIGNED_INT16 = 0 x09,CU_AD_FORMAT_SIGNED_INT32 = 0 x0a,CU_AD_FORMAT_HALF = 0 x10,CU_AD_FORMAT_FLOAT = 0 x20,CU_AD_FORMAT_NV12 = 0 xb0 } CUarray_format ; typedef enum CUaddress_mode_enum { CU_TR_ADDRESS_MODE_WRAP = 0,CU_TR_ADDRESS_MODE_CLAMP = 1,CU_TR_ADDRESS_MODE_MIRROR = 2,CU_TR_ADDRESS_MODE_BORDER = 3 } CUaddress_mode ; typedef enum CUfilter_mode_enum { CU_TR_FILTER_MODE_POINT = 0,CU_TR_FILTER_MODE_LINEAR = 1 } CUfilter_mode ; typedef enum CUdevice_attribute_enum { CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,CU_DEVICE_ATTRIBUTE_WARP_SIZE = 1 0,CU_DEVICE_ATTRIBUTE_MAX_PITCH = 1 1,CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 1 2,CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 1 2,CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 1 3,CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 1 4,CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 1 5,CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 1 6,CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 1 7,CU_DEVICE_ATTRIBUTE_INTEGRATED = 1 8,CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 1 9,CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 2 0,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 2 1,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 2 2,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 2 3,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 2 4,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 2 5,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 2 6,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 2 7,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 2 8,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 2 9,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 2 7,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 2 8,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 2 9,CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 3 0,CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 3 1,CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 3 2,CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 3 3,CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 3 4,CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 3 5,CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 3 6,CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 3 7,CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 3 8,CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 3 9,CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 4 0,CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 4 1,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 4 2,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 4 3,CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 4 4,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 4 5,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 4 6,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 4 7,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 4 8,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 4 9,CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 5 0,CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 5 1,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 5 2,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 5 3,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 5 4,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 5 5,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 5 6,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 5 7,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 5 8,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 5 9,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 6 0,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 6 1,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 6 2,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 6 3,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 6 4,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 6 5,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 6 6,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 6 7,CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 6 8,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 6 9,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 7 0,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 7 1,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 7 2,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 7 3,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 7 4,CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 7 5,CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 7 6,CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 7 7,CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 7 8,CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 7 9,CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 8 0,CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 8 1,CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 8 2,CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 8 3,CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 8 4,CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 8 5,CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED = 8 6,CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO = 8 7,CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS = 8 8,CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS = 8 9,CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED = 9 0,CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM = 9 1,CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS = 9 2,CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS = 9 3,CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR = 9 4,CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH = 9 5,CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH = 9 6,CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN = 9 7,CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES = 9 8,CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED = 9 9,CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES = 1 0 0,CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST = 1 0 1,CU_DEVICE_ATTRIBUTE_VIRTUAL_ADDRESS_MANAGEMENT_SUPPORTED = 1 0 2,CU_DEVICE_ATTRIBUTE_VIRTUAL_MEMORY_MANAGEMENT_SUPPORTED = 1 0 2,CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR_SUPPORTED = 1 0 3,CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_HANDLE_SUPPORTED = 1 0 4,CU_DEVICE_ATTRIBUTE_HANDLE_TYPE_WIN32_KMT_HANDLE_SUPPORTED = 1 0 5,CU_DEVICE_ATTRIBUTE_MAX_BLOCKS_PER_MULTIPROCESSOR = 1 0 6,CU_DEVICE_ATTRIBUTE_GENERIC_COMPRESSION_SUPPORTED = 1 0 7,CU_DEVICE_ATTRIBUTE_MAX_PERSISTING_L2_CACHE_SIZE = 1 0 8,CU_DEVICE_ATTRIBUTE_MAX_ACCESS_POLICY_WINDOW_SIZE = 1 0 9,CU_DEVICE_ATTRIBUTE_GPU_DIRECT_RDMA_WITH_CUDA_VMM_SUPPORTED = 1 1 0,CU_DEVICE_ATTRIBUTE_RESERVED_SHARED_MEMORY_PER_BLOCK = 1 1 1,CU_DEVICE_ATTRIBUTE_SPARSE_CUDA_ARRAY_SUPPORTED = 1 1 2,CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED = 1 1 3,CU_DEVICE_ATTRIBUTE_TIMELINE_SEMAPHORE_INTEROP_SUPPORTED = 1 1 4,CU_DEVICE_ATTRIBUTE_MEMORY_POOLS_SUPPORTED = 1 1 5,CU_DEVICE_ATTRIBUTE_MAX } CUdevice_attribute ; typedef struct CUdevprop_st { int maxThreadsPerBlock ; int maxThreadsDim [ 3 ] ; int maxGridSize [ 3 ] ; int sharedMemPerBlock ; int totalConstantMemory ; int SIMDWidth ; int memPitch ; int regsPerBlock ; int clockRate ; int textureAlign ; } CUdevprop ; typedef enum CUpointer_attribute_enum { CU_POINTER_ATTRIBUTE_CONTEXT = 1,CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3,CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,CU_POINTER_ATTRIBUTE_IS_MANAGED = 8,CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL = 9,CU_POINTER_ATTRIBUTE_IS_LEGACY_CUDA_IPC_CAPABLE = 1 0,CU_POINTER_ATTRIBUTE_RANGE_START_ADDR = 1 1,CU_POINTER_ATTRIBUTE_RANGE_SIZE = 1 2,CU_POINTER_ATTRIBUTE_MAPPED = 1 3,CU_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES = 1 4,CU_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE = 1 5,CU_POINTER_ATTRIBUTE_ACCESS_FLAGS = 1 6 } CUpointer_attribute ; typedef enum CUfunction_attribute_enum { CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,CU_FUNC_ATTRIBUTE_NUM_REGS = 4,CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES = 8,CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 9,CU_FUNC_ATTRIBUTE_MAX } CUfunction_attribute ; typedef enum CUfunc_cache_enum { CU_FUNC_CACHE_PREFER_NONE = 0 x00,CU_FUNC_CACHE_PREFER_SHARED = 0 x01,CU_FUNC_CACHE_PREFER_L1 = 0 x02,CU_FUNC_CACHE_PREFER_EQUAL = 0 x03 } CUfunc_cache ; typedef enum CUsharedconfig_enum { CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE = 0 x00,CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE = 0 x01,CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0 x02 } CUsharedconfig ; typedef enum CUshared_carveout_enum { CU_SHAREDMEM_CARVEOUT_DEFAULT = - 1,CU_SHAREDMEM_CARVEOUT_MAX_SHARED = 1 0 0,CU_SHAREDMEM_CARVEOUT_MAX_L1 = 0 } CUshared_carveout ; typedef enum CUmemorytype_enum { CU_MEMORYTYPE_HOST = 0 x01,CU_MEMORYTYPE_DEVICE = 0 x02,CU_MEMORYTYPE_ARRAY = 0 x03,CU_MEMORYTYPE_UNIFIED = 0 x04 } CUmemorytype ; typedef enum CUcomputemode_enum { CU_COMPUTEMODE_DEFAULT = 0,CU_COMPUTEMODE_PROHIBITED = 2,CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3 } CUcomputemode ; typedef enum CUmem_advise_enum { CU_MEM_ADVISE_SET_READ_MOSTLY = 1,CU_MEM_ADVISE_UNSET_READ_MOSTLY = 2,CU_MEM_ADVISE_SET_PREFERRED_LOCATION = 3,CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION = 4,CU_MEM_ADVISE_SET_ACCESSED_BY = 5,CU_MEM_ADVISE_UNSET_ACCESSED_BY = 6 } CUmem_advise ; typedef enum CUmem_range_attribute_enum { CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1,CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION = 2,CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY = 3,CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION = 4 } CUmem_range_attribute ; typedef enum CUjit_option_enum { CU_JIT_MAX_REGISTERS = 0,CU_JIT_THREADS_PER_BLOCK,CU_JIT_WALL_TIME,CU_JIT_INFO_LOG_BUFFER,CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,CU_JIT_ERROR_LOG_BUFFER,CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,CU_JIT_OPTIMIZATION_LEVEL,CU_JIT_TARGET_FROM_CUCONTEXT,CU_JIT_TARGET,CU_JIT_FALLBACK_STRATEGY,CU_JIT_GENERATE_DEBUG_INFO,CU_JIT_LOG_VERBOSE,CU_JIT_GENERATE_LINE_INFO,CU_JIT_CACHE_MODE,CU_JIT_NEW_SM3X_OPT,CU_JIT_FAST_COMPILE,CU_JIT_GLOBAL_SYMBOL_NAMES,CU_JIT_GLOBAL_SYMBOL_ADDRESSES,CU_JIT_GLOBAL_SYMBOL_COUNT,CU_JIT_NUM_OPTIONS } CUjit_option ; typedef enum CUjit_target_enum { CU_TARGET_COMPUTE_20 = 2 0,CU_TARGET_COMPUTE_21 = 2 1,CU_TARGET_COMPUTE_30 = 3 0,CU_TARGET_COMPUTE_32 = 3 2,CU_TARGET_COMPUTE_35 = 3 5,CU_TARGET_COMPUTE_37 = 3 7,CU_TARGET_COMPUTE_50 = 5 0,CU_TARGET_COMPUTE_52 = 5 2,CU_TARGET_COMPUTE_53 = 5 3,CU_TARGET_COMPUTE_60 = 6 0,CU_TARGET_COMPUTE_61 = 6 1,CU_TARGET_COMPUTE_62 = 6 2,CU_TARGET_COMPUTE_70 = 7 0,CU_TARGET_COMPUTE_72 = 7 2,CU_TARGET_COMPUTE_75 = 7 5,CU_TARGET_COMPUTE_80 = 8 0,CU_TARGET_COMPUTE_86 = 8 6 } CUjit_target ; typedef enum CUjit_fallback_enum { CU_PREFER_PTX = 0,CU_PREFER_BINARY } CUjit_fallback ; typedef enum CUjit_cacheMode_enum { CU_JIT_CACHE_OPTION_NONE = 0,CU_JIT_CACHE_OPTION_CG,CU_JIT_CACHE_OPTION_CA } CUjit_cacheMode ; typedef enum CUjitInputType_enum { CU_JIT_INPUT_CUBIN = 0,CU_JIT_INPUT_PTX,CU_JIT_INPUT_FATBINARY,CU_JIT_INPUT_OBJECT,CU_JIT_INPUT_LIBRARY,CU_JIT_NUM_INPUT_TYPES } CUjitInputType ; typedef struct CUlinkState_st* CUlinkState ; typedef enum CUgraphicsRegisterFlags_enum { CU_GRAPHICS_REGISTER_FLAGS_NONE = 0 x00,CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY = 0 x01,CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD = 0 x02,CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 0 x04,CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0 x08 } CUgraphicsRegisterFlags ; typedef enum CUgraphicsMapResourceFlags_enum { CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE = 0 x00,CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY = 0 x01,CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0 x02 } CUgraphicsMapResourceFlags ; typedef enum CUarray_cubemap_face_enum { CU_CUBEMAP_FACE_POSITIVE_X = 0 x00,CU_CUBEMAP_FACE_NEGATIVE_X = 0 x01,CU_CUBEMAP_FACE_POSITIVE_Y = 0 x02,CU_CUBEMAP_FACE_NEGATIVE_Y = 0 x03,CU_CUBEMAP_FACE_POSITIVE_Z = 0 x04,CU_CUBEMAP_FACE_NEGATIVE_Z = 0 x05 } CUarray_cubemap_face ; typedef enum CUlimit_enum { CU_LIMIT_STACK_SIZE = 0 x00,CU_LIMIT_PRINTF_FIFO_SIZE = 0 x01,CU_LIMIT_MALLOC_HEAP_SIZE = 0 x02,CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH = 0 x03,CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0 x04,CU_LIMIT_MAX_L2_FETCH_GRANULARITY = 0 x05,CU_LIMIT_PERSISTING_L2_CACHE_SIZE = 0 x06,CU_LIMIT_MAX } CUlimit ; typedef enum CUresourcetype_enum { CU_RESOURCE_TYPE_ARRAY = 0 x00,CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0 x01,CU_RESOURCE_TYPE_LINEAR = 0 x02,CU_RESOURCE_TYPE_PITCH2D = 0 x03 } CUresourcetype ; # ifdef _WIN32 # define CUDA_CB __stdcall # else # define CUDA_CB # endif typedef)",
    "insertText": "void(CUDA_CB *CUhostFn)(void *userData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef enum CUaccessProperty_enum { CU_ACCESS_PROPERTY_NORMAL = 0,CU_ACCESS_PROPERTY_STREAMING = 1,CU_ACCESS_PROPERTY_PERSISTING = 2 } CUaccessProperty ; typedef struct CUaccessPolicyWindow_st { void* base_ptr ; size_t num_bytes ; float hitRatio ; CUaccessProperty hitProp ; CUaccessProperty missProp ; } CUaccessPolicyWindow ; typedef struct CUDA_KERNEL_NODE_PARAMS_st { CUfunction func ; unsigned int gridDimX ; unsigned int gridDimY ; unsigned int gridDimZ ; unsigned int blockDimX ; unsigned int blockDimY ; unsigned int blockDimZ ; unsigned int sharedMemBytes ; void** kernelParams ; void** extra ; } CUDA_KERNEL_NODE_PARAMS ; typedef struct CUDA_MEMSET_NODE_PARAMS_st { CUdeviceptr dst ; size_t pitch ; unsigned int value ; unsigned int elementSize ; size_t width ; size_t height ; } CUDA_MEMSET_NODE_PARAMS ; typedef struct CUDA_HOST_NODE_PARAMS_st { CUhostFn fn ; void* userData ; } CUDA_HOST_NODE_PARAMS ; typedef enum CUgraphNodeType_enum { CU_GRAPH_NODE_TYPE_KERNEL = 0,CU_GRAPH_NODE_TYPE_MEMCPY = 1,CU_GRAPH_NODE_TYPE_MEMSET = 2,CU_GRAPH_NODE_TYPE_HOST = 3,CU_GRAPH_NODE_TYPE_GRAPH = 4,CU_GRAPH_NODE_TYPE_EMPTY = 5,CU_GRAPH_NODE_TYPE_WAIT_EVENT = 6,CU_GRAPH_NODE_TYPE_EVENT_RECORD = 7,CU_GRAPH_NODE_TYPE_EXT_SEMAS_SIGNAL = 8,CU_GRAPH_NODE_TYPE_EXT_SEMAS_WAIT = 9 } CUgraphNodeType ; typedef enum CUsynchronizationPolicy_enum { CU_SYNC_POLICY_AUTO = 1,CU_SYNC_POLICY_SPIN = 2,CU_SYNC_POLICY_YIELD = 3,CU_SYNC_POLICY_BLOCKING_SYNC = 4 } CUsynchronizationPolicy ; typedef enum CUkernelNodeAttrID_enum { CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1,CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2 } CUkernelNodeAttrID ; typedef union CUkernelNodeAttrValue_union { CUaccessPolicyWindow accessPolicyWindow ; int cooperative ; } CUkernelNodeAttrValue ; typedef enum CUstreamCaptureStatus_enum { CU_STREAM_CAPTURE_STATUS_NONE = 0,CU_STREAM_CAPTURE_STATUS_ACTIVE = 1,CU_STREAM_CAPTURE_STATUS_INVALIDATED = 2 } CUstreamCaptureStatus ; typedef enum CUstreamCaptureMode_enum { CU_STREAM_CAPTURE_MODE_GLOBAL = 0,CU_STREAM_CAPTURE_MODE_THREAD_LOCAL = 1,CU_STREAM_CAPTURE_MODE_RELAXED = 2 } CUstreamCaptureMode ; typedef enum CUstreamAttrID_enum { CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1,CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3 } CUstreamAttrID ; typedef union CUstreamAttrValue_union { CUaccessPolicyWindow accessPolicyWindow ; CUsynchronizationPolicy syncPolicy ; } CUstreamAttrValue ; typedef enum cudaError_enum { CUDA_SUCCESS = 0,CUDA_ERROR_INVALID_VALUE = 1,CUDA_ERROR_OUT_OF_MEMORY = 2,CUDA_ERROR_NOT_INITIALIZED = 3,CUDA_ERROR_DEINITIALIZED = 4,CUDA_ERROR_PROFILER_DISABLED = 5,CUDA_ERROR_PROFILER_NOT_INITIALIZED = 6,CUDA_ERROR_PROFILER_ALREADY_STARTED = 7,CUDA_ERROR_PROFILER_ALREADY_STOPPED = 8,CUDA_ERROR_STUB_LIBRARY = 3 4,CUDA_ERROR_NO_DEVICE = 1 0 0,CUDA_ERROR_INVALID_DEVICE = 1 0 1,CUDA_ERROR_DEVICE_NOT_LICENSED = 1 0 2,CUDA_ERROR_INVALID_IMAGE = 2 0 0,CUDA_ERROR_INVALID_CONTEXT = 2 0 1,CUDA_ERROR_CONTEXT_ALREADY_CURRENT = 2 0 2,CUDA_ERROR_MAP_FAILED = 2 0 5,CUDA_ERROR_UNMAP_FAILED = 2 0 6,CUDA_ERROR_ARRAY_IS_MAPPED = 2 0 7,CUDA_ERROR_ALREADY_MAPPED = 2 0 8,CUDA_ERROR_NO_BINARY_FOR_GPU = 2 0 9,CUDA_ERROR_ALREADY_ACQUIRED = 2 1 0,CUDA_ERROR_NOT_MAPPED = 2 1 1,CUDA_ERROR_NOT_MAPPED_AS_ARRAY = 2 1 2,CUDA_ERROR_NOT_MAPPED_AS_POINTER = 2 1 3,CUDA_ERROR_ECC_UNCORRECTABLE = 2 1 4,CUDA_ERROR_UNSUPPORTED_LIMIT = 2 1 5,CUDA_ERROR_CONTEXT_ALREADY_IN_USE = 2 1 6,CUDA_ERROR_PEER_ACCESS_UNSUPPORTED = 2 1 7,CUDA_ERROR_INVALID_PTX = 2 1 8,CUDA_ERROR_INVALID_GRAPHICS_CONTEXT = 2 1 9,CUDA_ERROR_NVLINK_UNCORRECTABLE = 2 2 0,CUDA_ERROR_JIT_COMPILER_NOT_FOUND = 2 2 1,CUDA_ERROR_UNSUPPORTED_PTX_VERSION = 2 2 2,CUDA_ERROR_JIT_COMPILATION_DISABLED = 2 2 3,CUDA_ERROR_INVALID_SOURCE = 3 0 0,CUDA_ERROR_FILE_NOT_FOUND = 3 0 1,CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 3 0 2,CUDA_ERROR_SHARED_OBJECT_INIT_FAILED = 3 0 3,CUDA_ERROR_OPERATING_SYSTEM = 3 0 4,CUDA_ERROR_INVALID_HANDLE = 4 0 0,CUDA_ERROR_ILLEGAL_STATE = 4 0 1,CUDA_ERROR_NOT_FOUND = 5 0 0,CUDA_ERROR_NOT_READY = 6 0 0,CUDA_ERROR_ILLEGAL_ADDRESS = 7 0 0,CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES = 7 0 1,CUDA_ERROR_LAUNCH_TIMEOUT = 7 0 2,CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING = 7 0 3,CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = 7 0 4,CUDA_ERROR_PEER_ACCESS_NOT_ENABLED = 7 0 5,CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 7 0 8,CUDA_ERROR_CONTEXT_IS_DESTROYED = 7 0 9,CUDA_ERROR_ASSERT = 7 1 0,CUDA_ERROR_TOO_MANY_PEERS = 7 1 1,CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 7 1 2,CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED = 7 1 3,CUDA_ERROR_HARDWARE_STACK_ERROR = 7 1 4,CUDA_ERROR_ILLEGAL_INSTRUCTION = 7 1 5,CUDA_ERROR_MISALIGNED_ADDRESS = 7 1 6,CUDA_ERROR_INVALID_ADDRESS_SPACE = 7 1 7,CUDA_ERROR_INVALID_PC = 7 1 8,CUDA_ERROR_LAUNCH_FAILED = 7 1 9,CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE = 7 2 0,CUDA_ERROR_NOT_PERMITTED = 8 0 0,CUDA_ERROR_NOT_SUPPORTED = 8 0 1,CUDA_ERROR_SYSTEM_NOT_READY = 8 0 2,CUDA_ERROR_SYSTEM_DRIVER_MISMATCH = 8 0 3,CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE = 8 0 4,CUDA_ERROR_STREAM_CAPTURE_UNSUPPORTED = 9 0 0,CUDA_ERROR_STREAM_CAPTURE_INVALIDATED = 9 0 1,CUDA_ERROR_STREAM_CAPTURE_MERGE = 9 0 2,CUDA_ERROR_STREAM_CAPTURE_UNMATCHED = 9 0 3,CUDA_ERROR_STREAM_CAPTURE_UNJOINED = 9 0 4,CUDA_ERROR_STREAM_CAPTURE_ISOLATION = 9 0 5,CUDA_ERROR_STREAM_CAPTURE_IMPLICIT = 9 0 6,CUDA_ERROR_CAPTURED_EVENT = 9 0 7,CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD = 9 0 8,CUDA_ERROR_TIMEOUT = 9 0 9,CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE = 9 1 0,CUDA_ERROR_UNKNOWN = 9 9 9 } CUresult ; typedef enum CUdevice_P2PAttribute_enum { CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 0 x01,CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED = 0 x02,CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED = 0 x03,CU_DEVICE_P2P_ATTRIBUTE_ACCESS_ACCESS_SUPPORTED = 0 x04,CU_DEVICE_P2P_ATTRIBUTE_CUDA_ARRAY_ACCESS_SUPPORTED = 0 x04 } CUdevice_P2PAttribute ; typedef)",
    "insertText": "void(CUDA_CB *CUstreamCallback)(CUstream hStream, CUresult status, void *userData)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "size_t(CUDA_CB *CUoccupancyB2DSize)(int blockSize)"
  },
  {
    "label": "CU_LAUNCH_PARAM_END()",
    "kind": "Method",
    "detail": "Function (# define CU_MEMHOSTALLOC_PORTABLE 0 x01 # define CU_MEMHOSTALLOC_DEVICEMAP 0 x02 # define CU_MEMHOSTALLOC_WRITECOMBINED 0 x04 # define CU_MEMHOSTREGISTER_PORTABLE 0 x01 # define CU_MEMHOSTREGISTER_DEVICEMAP 0 x02 # define CU_MEMHOSTREGISTER_IOMEMORY 0 x04 # define CU_MEMHOSTREGISTER_READ_ONLY 0 x08 typedef struct CUDA_MEMCPY2D_st { size_t srcXInBytes ; size_t srcY ; CUmemorytype srcMemoryType ; const void* srcHost ; CUdeviceptr srcDevice ; CUarray srcArray ; size_t srcPitch ; size_t dstXInBytes ; size_t dstY ; CUmemorytype dstMemoryType ; void* dstHost ; CUdeviceptr dstDevice ; CUarray dstArray ; size_t dstPitch ; size_t WidthInBytes ; size_t Height ; } CUDA_MEMCPY2D ; typedef struct CUDA_MEMCPY3D_st { size_t srcXInBytes ; size_t srcY ; size_t srcZ ; size_t srcLOD ; CUmemorytype srcMemoryType ; const void* srcHost ; CUdeviceptr srcDevice ; CUarray srcArray ; void* reserved0 ; size_t srcPitch ; size_t srcHeight ; size_t dstXInBytes ; size_t dstY ; size_t dstZ ; size_t dstLOD ; CUmemorytype dstMemoryType ; void* dstHost ; CUdeviceptr dstDevice ; CUarray dstArray ; void* reserved1 ; size_t dstPitch ; size_t dstHeight ; size_t WidthInBytes ; size_t Height ; size_t Depth ; } CUDA_MEMCPY3D ; typedef struct CUDA_MEMCPY3D_PEER_st { size_t srcXInBytes ; size_t srcY ; size_t srcZ ; size_t srcLOD ; CUmemorytype srcMemoryType ; const void* srcHost ; CUdeviceptr srcDevice ; CUarray srcArray ; CUcontext srcContext ; size_t srcPitch ; size_t srcHeight ; size_t dstXInBytes ; size_t dstY ; size_t dstZ ; size_t dstLOD ; CUmemorytype dstMemoryType ; void* dstHost ; CUdeviceptr dstDevice ; CUarray dstArray ; CUcontext dstContext ; size_t dstPitch ; size_t dstHeight ; size_t WidthInBytes ; size_t Height ; size_t Depth ; } CUDA_MEMCPY3D_PEER ; typedef struct CUDA_ARRAY_DESCRIPTOR_st { size_t Width ; size_t Height ; CUarray_format Format ; unsigned int NumChannels ; } CUDA_ARRAY_DESCRIPTOR ; typedef struct CUDA_ARRAY3D_DESCRIPTOR_st { size_t Width ; size_t Height ; size_t Depth ; CUarray_format Format ; unsigned int NumChannels ; unsigned int Flags ; } CUDA_ARRAY3D_DESCRIPTOR ; # define CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL 0 x1 typedef struct CUDA_ARRAY_SPARSE_PROPERTIES_st { struct { unsigned int width ; unsigned int height ; unsigned int depth ; } tileExtent ; unsigned int miptailFirstLevel ; unsigned long long miptailSize ; unsigned int flags ; unsigned int reserved [ 4 ] ; } CUDA_ARRAY_SPARSE_PROPERTIES ; typedef struct CUDA_RESOURCE_DESC_st { CUresourcetype resType ; union { struct { CUarray hArray ; } array ; struct { CUmipmappedArray hMipmappedArray ; } mipmap ; struct { CUdeviceptr devPtr ; CUarray_format format ; unsigned int numChannels ; size_t sizeInBytes ; } linear ; struct { CUdeviceptr devPtr ; CUarray_format format ; unsigned int numChannels ; size_t width ; size_t height ; size_t pitchInBytes ; } pitch2D ; struct { int reserved [ 3 2 ] ; } reserved ; } res ; unsigned int flags ; } CUDA_RESOURCE_DESC ; typedef struct CUDA_TEXTURE_DESC_st { CUaddress_mode addressMode [ 3 ] ; CUfilter_mode filterMode ; unsigned int flags ; unsigned int maxAnisotropy ; CUfilter_mode mipmapFilterMode ; float mipmapLevelBias ; float minMipmapLevelClamp ; float maxMipmapLevelClamp ; float borderColor [ 4 ] ; int reserved [ 1 2 ] ; } CUDA_TEXTURE_DESC ; typedef enum CUresourceViewFormat_enum { CU_RES_VIEW_FORMAT_NONE = 0 x00,CU_RES_VIEW_FORMAT_UINT_1X8 = 0 x01,CU_RES_VIEW_FORMAT_UINT_2X8 = 0 x02,CU_RES_VIEW_FORMAT_UINT_4X8 = 0 x03,CU_RES_VIEW_FORMAT_SINT_1X8 = 0 x04,CU_RES_VIEW_FORMAT_SINT_2X8 = 0 x05,CU_RES_VIEW_FORMAT_SINT_4X8 = 0 x06,CU_RES_VIEW_FORMAT_UINT_1X16 = 0 x07,CU_RES_VIEW_FORMAT_UINT_2X16 = 0 x08,CU_RES_VIEW_FORMAT_UINT_4X16 = 0 x09,CU_RES_VIEW_FORMAT_SINT_1X16 = 0 x0a,CU_RES_VIEW_FORMAT_SINT_2X16 = 0 x0b,CU_RES_VIEW_FORMAT_SINT_4X16 = 0 x0c,CU_RES_VIEW_FORMAT_UINT_1X32 = 0 x0d,CU_RES_VIEW_FORMAT_UINT_2X32 = 0 x0e,CU_RES_VIEW_FORMAT_UINT_4X32 = 0 x0f,CU_RES_VIEW_FORMAT_SINT_1X32 = 0 x10,CU_RES_VIEW_FORMAT_SINT_2X32 = 0 x11,CU_RES_VIEW_FORMAT_SINT_4X32 = 0 x12,CU_RES_VIEW_FORMAT_FLOAT_1X16 = 0 x13,CU_RES_VIEW_FORMAT_FLOAT_2X16 = 0 x14,CU_RES_VIEW_FORMAT_FLOAT_4X16 = 0 x15,CU_RES_VIEW_FORMAT_FLOAT_1X32 = 0 x16,CU_RES_VIEW_FORMAT_FLOAT_2X32 = 0 x17,CU_RES_VIEW_FORMAT_FLOAT_4X32 = 0 x18,CU_RES_VIEW_FORMAT_UNSIGNED_BC1 = 0 x19,CU_RES_VIEW_FORMAT_UNSIGNED_BC2 = 0 x1a,CU_RES_VIEW_FORMAT_UNSIGNED_BC3 = 0 x1b,CU_RES_VIEW_FORMAT_UNSIGNED_BC4 = 0 x1c,CU_RES_VIEW_FORMAT_SIGNED_BC4 = 0 x1d,CU_RES_VIEW_FORMAT_UNSIGNED_BC5 = 0 x1e,CU_RES_VIEW_FORMAT_SIGNED_BC5 = 0 x1f,CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0 x20,CU_RES_VIEW_FORMAT_SIGNED_BC6H = 0 x21,CU_RES_VIEW_FORMAT_UNSIGNED_BC7 = 0 x22 } CUresourceViewFormat ; typedef struct CUDA_RESOURCE_VIEW_DESC_st { CUresourceViewFormat format ; size_t width ; size_t height ; size_t depth ; unsigned int firstMipmapLevel ; unsigned int lastMipmapLevel ; unsigned int firstLayer ; unsigned int lastLayer ; unsigned int reserved [ 1 6 ] ; } CUDA_RESOURCE_VIEW_DESC ; typedef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st { unsigned long long p2pToken ; unsigned int vaSpaceToken ; } CUDA_POINTER_ATTRIBUTE_P2P_TOKENS ; typedef enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS_enum { CU_POINTER_ATTRIBUTE_ACCESS_FLAG_NONE = 0 x0,CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READ = 0 x1,CU_POINTER_ATTRIBUTE_ACCESS_FLAG_READWRITE = 0 x3 } CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS ; typedef struct CUDA_LAUNCH_PARAMS_st { CUfunction function ; unsigned int gridDimX ; unsigned int gridDimY ; unsigned int gridDimZ ; unsigned int blockDimX ; unsigned int blockDimY ; unsigned int blockDimZ ; unsigned int sharedMemBytes ; CUstream hStream ; void** kernelParams ; } CUDA_LAUNCH_PARAMS ; typedef enum CUexternalMemoryHandleType_enum { CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD = 1,CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32 = 2,CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT = 3,CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP = 4,CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE = 5,CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE = 6,CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT = 7,CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF = 8 } CUexternalMemoryHandleType ; # define CUDA_EXTERNAL_MEMORY_DEDICATED 0 x1 # define CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC 0 x01 # define CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC 0 x02 # define CUDA_NVSCISYNC_ATTR_SIGNAL 0 x1 # define CUDA_NVSCISYNC_ATTR_WAIT 0 x2 typedef struct CUDA_EXTERNAL_MEMORY_HANDLE_DESC_st { CUexternalMemoryHandleType type ; union { int fd ; struct { void* handle ; const void* name ; } win32 ; const void* nvSciBufObject ; } handle ; unsigned long long size ; unsigned int flags ; unsigned int reserved [ 1 6 ] ; } CUDA_EXTERNAL_MEMORY_HANDLE_DESC ; typedef struct CUDA_EXTERNAL_MEMORY_BUFFER_DESC_st { unsigned long long offset ; unsigned long long size ; unsigned int flags ; unsigned int reserved [ 1 6 ] ; } CUDA_EXTERNAL_MEMORY_BUFFER_DESC ; typedef struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st { unsigned long long offset ; CUDA_ARRAY3D_DESCRIPTOR arrayDesc ; unsigned int numLevels ; unsigned int reserved [ 1 6 ] ; } CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC ; typedef enum CUexternalSemaphoreHandleType_enum { CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD = 1,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32 = 2,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT = 3,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE = 4,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE = 5,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC = 6,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX = 7,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT = 8,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD = 9,CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32 = 1 0 } CUexternalSemaphoreHandleType ; typedef struct CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC_st { CUexternalSemaphoreHandleType type ; union { int fd ; struct { void* handle ; const void* name ; } win32 ; const void* nvSciSyncObj ; } handle ; unsigned int flags ; unsigned int reserved [ 1 6 ] ; } CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC ; typedef struct CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_st { struct { struct { unsigned long long value ; } fence ; union { void* fence ; unsigned long long reserved ; } nvSciSync ; struct { unsigned long long key ; } keyedMutex ; unsigned int reserved [ 1 2 ] ; } params ; unsigned int flags ; unsigned int reserved [ 1 6 ] ; } CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS ; typedef struct CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS_st { struct { struct { unsigned long long value ; } fence ; union { void* fence ; unsigned long long reserved ; } nvSciSync ; struct { unsigned long long key ; unsigned int timeoutMs ; } keyedMutex ; unsigned int reserved [ 1 0 ] ; } params ; unsigned int flags ; unsigned int reserved [ 1 6 ] ; } CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS ; typedef struct CUDA_EXT_SEM_SIGNAL_NODE_PARAMS_st { CUexternalSemaphore* extSemArray ; const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS* paramsArray ; unsigned int numExtSems ; } CUDA_EXT_SEM_SIGNAL_NODE_PARAMS ; typedef struct CUDA_EXT_SEM_WAIT_NODE_PARAMS_st { CUexternalSemaphore* extSemArray ; const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS* paramsArray ; unsigned int numExtSems ; } CUDA_EXT_SEM_WAIT_NODE_PARAMS ; typedef unsigned long long CUmemGenericAllocationHandle ; typedef enum CUmemAllocationHandleType_enum { CU_MEM_HANDLE_TYPE_NONE = 0 x0,CU_MEM_HANDLE_TYPE_POSIX_FILE_DESCRIPTOR = 0 x1,CU_MEM_HANDLE_TYPE_WIN32 = 0 x2,CU_MEM_HANDLE_TYPE_WIN32_KMT = 0 x4,CU_MEM_HANDLE_TYPE_MAX = 0 xFFFFFFFF } CUmemAllocationHandleType ; typedef enum CUmemAccess_flags_enum { CU_MEM_ACCESS_FLAGS_PROT_NONE = 0 x0,CU_MEM_ACCESS_FLAGS_PROT_READ = 0 x1,CU_MEM_ACCESS_FLAGS_PROT_READWRITE = 0 x3,CU_MEM_ACCESS_FLAGS_PROT_MAX = 0 xFFFFFFFF } CUmemAccess_flags ; typedef enum CUmemLocationType_enum { CU_MEM_LOCATION_TYPE_INVALID = 0 x0,CU_MEM_LOCATION_TYPE_DEVICE = 0 x1,CU_MEM_LOCATION_TYPE_MAX = 0 xFFFFFFFF } CUmemLocationType ; typedef enum CUmemAllocationType_enum { CU_MEM_ALLOCATION_TYPE_INVALID = 0 x0,CU_MEM_ALLOCATION_TYPE_PINNED = 0 x1,CU_MEM_ALLOCATION_TYPE_MAX = 0 xFFFFFFFF } CUmemAllocationType ; typedef enum CUmemAllocationGranularity_flags_enum { CU_MEM_ALLOC_GRANULARITY_MINIMUM = 0 x0,CU_MEM_ALLOC_GRANULARITY_RECOMMENDED = 0 x1 } CUmemAllocationGranularity_flags ; typedef enum CUarraySparseSubresourceType_enum { CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_SPARSE_LEVEL = 0,CU_ARRAY_SPARSE_SUBRESOURCE_TYPE_MIPTAIL = 1 } CUarraySparseSubresourceType ; typedef enum CUmemOperationType_enum { CU_MEM_OPERATION_TYPE_MAP = 1,CU_MEM_OPERATION_TYPE_UNMAP = 2 } CUmemOperationType ; typedef enum CUmemHandleType_enum { CU_MEM_HANDLE_TYPE_GENERIC = 0 } CUmemHandleType ; typedef struct CUarrayMapInfo_st { CUresourcetype resourceType ; union { CUmipmappedArray mipmap ; CUarray array ; } resource ; CUarraySparseSubresourceType subresourceType ; union { struct { unsigned int level ; unsigned int layer ; unsigned int offsetX ; unsigned int offsetY ; unsigned int offsetZ ; unsigned int extentWidth ; unsigned int extentHeight ; unsigned int extentDepth ; } sparseLevel ; struct { unsigned int layer ; unsigned long long offset ; unsigned long long size ; } miptail ; } subresource ; CUmemOperationType memOperationType ; CUmemHandleType memHandleType ; union { CUmemGenericAllocationHandle memHandle ; } memHandle ; unsigned long long offset ; unsigned int deviceBitMask ; unsigned int flags ; unsigned int reserved [ 2 ] ; } CUarrayMapInfo ; typedef struct CUmemLocation_st { CUmemLocationType type ; int id ; } CUmemLocation ; typedef enum CUmemAllocationCompType_enum { CU_MEM_ALLOCATION_COMP_NONE = 0 x0,CU_MEM_ALLOCATION_COMP_GENERIC = 0 x1 } CUmemAllocationCompType ; # define CU_MEM_CREATE_USAGE_TILE_POOL 0 x1 typedef struct CUmemAllocationProp_st { CUmemAllocationType type ; CUmemAllocationHandleType requestedHandleTypes ; CUmemLocation location ; void* win32HandleMetaData ; struct { unsigned char compressionType ; unsigned char gpuDirectRDMACapable ; unsigned short usage ; unsigned char reserved [ 4 ] ; } allocFlags ; } CUmemAllocationProp ; typedef struct CUmemAccessDesc_st { CUmemLocation location ; CUmemAccess_flags flags ; } CUmemAccessDesc ; typedef enum CUgraphExecUpdateResult_enum { CU_GRAPH_EXEC_UPDATE_SUCCESS = 0 x0,CU_GRAPH_EXEC_UPDATE_ERROR = 0 x1,CU_GRAPH_EXEC_UPDATE_ERROR_TOPOLOGY_CHANGED = 0 x2,CU_GRAPH_EXEC_UPDATE_ERROR_NODE_TYPE_CHANGED = 0 x3,CU_GRAPH_EXEC_UPDATE_ERROR_FUNCTION_CHANGED = 0 x4,CU_GRAPH_EXEC_UPDATE_ERROR_PARAMETERS_CHANGED = 0 x5,CU_GRAPH_EXEC_UPDATE_ERROR_NOT_SUPPORTED = 0 x6,CU_GRAPH_EXEC_UPDATE_ERROR_UNSUPPORTED_FUNCTION_CHANGE = 0 x7 } CUgraphExecUpdateResult ; typedef enum CUmemPool_attribute_enum { CU_MEMPOOL_ATTR_REUSE_FOLLOW_EVENT_DEPENDENCIES = 1,CU_MEMPOOL_ATTR_REUSE_ALLOW_OPPORTUNISTIC,CU_MEMPOOL_ATTR_REUSE_ALLOW_INTERNAL_DEPENDENCIES,CU_MEMPOOL_ATTR_RELEASE_THRESHOLD } CUmemPool_attribute ; typedef struct CUmemPoolProps_st { CUmemAllocationType allocType ; CUmemAllocationHandleType handleTypes ; CUmemLocation location ; void* win32SecurityAttributes ; unsigned char reserved [ 6 4 ] ; } CUmemPoolProps ; typedef struct CUmemPoolPtrExportData_st { unsigned char reserved [ 6 4 ] ; } CUmemPoolPtrExportData ; # define CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC 0 x01 # define CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC 0 x02 # define CUDA_ARRAY3D_LAYERED 0 x01 # define CUDA_ARRAY3D_2DARRAY 0 x01 # define CUDA_ARRAY3D_SURFACE_LDST 0 x02 # define CUDA_ARRAY3D_CUBEMAP 0 x04 # define CUDA_ARRAY3D_TEXTURE_GATHER 0 x08 # define CUDA_ARRAY3D_DEPTH_TEXTURE 0 x10 # define CUDA_ARRAY3D_COLOR_ATTACHMENT 0 x20 # define CUDA_ARRAY3D_SPARSE 0 x40 # define CU_TRSA_OVERRIDE_FORMAT 0 x01 # define CU_TRSF_READ_AS_INTEGER 0 x01 # define CU_TRSF_NORMALIZED_COORDINATES 0 x02 # define CU_TRSF_SRGB 0 x10 # define CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION 0 x20 # define)",
    "insertText": "CU_LAUNCH_PARAM_END((void*)0x00) #define CU_LAUNCH_PARAM_BUFFER_POINTER ((void*)0x01) #define CU_LAUNCH_PARAM_BUFFER_SIZE ((void*)0x02) #define CU_PARAM_TR_DEFAULT -1 #define CU_DEVICE_CPU ((CUdevice)-1) #define CU_DEVICE_INVALID ((CUdevice)-2) #if defined(__GNUC__) #if defined(__CUDA_API_PUSH_VISIBILITY_DEFAULT) #pragma GCC visibility push(default) #endif #endif #ifdef _WIN32 #define CUDAAPI __stdcall #else #define CUDAAPI #endif CUresult CUDAAPI cuGetErrorString(CUresult error, const char **pStr)"
  },
  {
    "label": "cuGetErrorName()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGetErrorName(CUresult error, const char **pStr)"
  },
  {
    "label": "cuInit()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuInit(unsigned int Flags)"
  },
  {
    "label": "cuDriverGetVersion()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDriverGetVersion(int *driverVersion)"
  },
  {
    "label": "cuDeviceGet()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGet(CUdevice *device, int ordinal)"
  },
  {
    "label": "cuDeviceGetCount()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetCount(int *count)"
  },
  {
    "label": "cuDeviceGetName()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetName(char *name, int len, CUdevice dev)"
  },
  {
    "label": "cuDeviceGetUuid()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetUuid(CUuuid *uuid, CUdevice dev)"
  },
  {
    "label": "cuDeviceGetLuid()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetLuid(char *luid, unsigned int *deviceNodeMask, CUdevice dev)"
  },
  {
    "label": "cuDeviceTotalMem()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceTotalMem(size_t *bytes, CUdevice dev)"
  },
  {
    "label": "cuDeviceGetTexture1DLinearMaxWidth()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetTexture1DLinearMaxWidth(size_t *maxWidthInElements, CUarray_format format, unsigned numChannels, CUdevice dev)"
  },
  {
    "label": "cuDeviceGetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetAttribute(int *pi, CUdevice_attribute attrib, CUdevice dev)"
  },
  {
    "label": "cuDeviceGetNvSciSyncAttributes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetNvSciSyncAttributes(void *nvSciSyncAttrList, CUdevice dev, int flags)"
  },
  {
    "label": "cuDeviceSetMemPool()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceSetMemPool(CUdevice dev, CUmemoryPool pool)"
  },
  {
    "label": "cuDeviceGetMemPool()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetMemPool(CUmemoryPool *pool, CUdevice dev)"
  },
  {
    "label": "cuDeviceGetDefaultMemPool()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetDefaultMemPool(CUmemoryPool *pool_out, CUdevice dev)"
  },
  {
    "label": "cuDeviceGetProperties()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuDeviceGetProperties(CUdevprop *prop, CUdevice dev)"
  },
  {
    "label": "cuDeviceComputeCapability()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuDeviceComputeCapability(int *major, int *minor, CUdevice dev)"
  },
  {
    "label": "cuDevicePrimaryCtxRetain()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDevicePrimaryCtxRetain(CUcontext *pctx, CUdevice dev)"
  },
  {
    "label": "cuDevicePrimaryCtxRelease()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDevicePrimaryCtxRelease(CUdevice dev)"
  },
  {
    "label": "cuDevicePrimaryCtxSetFlags()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDevicePrimaryCtxSetFlags(CUdevice dev, unsigned int flags)"
  },
  {
    "label": "cuDevicePrimaryCtxGetState()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDevicePrimaryCtxGetState(CUdevice dev, unsigned int *flags, int *active)"
  },
  {
    "label": "cuDevicePrimaryCtxReset()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDevicePrimaryCtxReset(CUdevice dev)"
  },
  {
    "label": "cuCtxCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxCreate(CUcontext *pctx, unsigned int flags, CUdevice dev)"
  },
  {
    "label": "cuCtxDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxDestroy(CUcontext ctx)"
  },
  {
    "label": "cuCtxPushCurrent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxPushCurrent(CUcontext ctx)"
  },
  {
    "label": "cuCtxPopCurrent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxPopCurrent(CUcontext *pctx)"
  },
  {
    "label": "cuCtxSetCurrent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxSetCurrent(CUcontext ctx)"
  },
  {
    "label": "cuCtxGetCurrent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxGetCurrent(CUcontext *pctx)"
  },
  {
    "label": "cuCtxGetDevice()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxGetDevice(CUdevice *device)"
  },
  {
    "label": "cuCtxGetFlags()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxGetFlags(unsigned int *flags)"
  },
  {
    "label": "cuCtxSynchronize()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxSynchronize(void)"
  },
  {
    "label": "cuCtxSetLimit()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxSetLimit(CUlimit limit, size_t value)"
  },
  {
    "label": "cuCtxGetLimit()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxGetLimit(size_t *pvalue, CUlimit limit)"
  },
  {
    "label": "cuCtxGetCacheConfig()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxGetCacheConfig(CUfunc_cache *pconfig)"
  },
  {
    "label": "cuCtxSetCacheConfig()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxSetCacheConfig(CUfunc_cache config)"
  },
  {
    "label": "cuCtxGetSharedMemConfig()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxGetSharedMemConfig(CUsharedconfig *pConfig)"
  },
  {
    "label": "cuCtxSetSharedMemConfig()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxSetSharedMemConfig(CUsharedconfig config)"
  },
  {
    "label": "cuCtxGetApiVersion()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxGetApiVersion(CUcontext ctx, unsigned int *version)"
  },
  {
    "label": "cuCtxGetStreamPriorityRange()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxGetStreamPriorityRange(int *leastPriority, int *greatestPriority)"
  },
  {
    "label": "cuCtxResetPersistingL2Cache()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxResetPersistingL2Cache(void)"
  },
  {
    "label": "cuCtxAttach()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuCtxAttach(CUcontext *pctx, unsigned int flags)"
  },
  {
    "label": "cuCtxDetach()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuCtxDetach(CUcontext ctx)"
  },
  {
    "label": "cuModuleLoad()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleLoad(CUmodule *module, const char *fname)"
  },
  {
    "label": "cuModuleLoadData()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleLoadData(CUmodule *module, const void *image)"
  },
  {
    "label": "cuModuleLoadDataEx()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleLoadDataEx(CUmodule *module, const void *image, unsigned int numOptions, CUjit_option *options, void **optionValues)"
  },
  {
    "label": "cuModuleLoadFatBinary()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleLoadFatBinary(CUmodule *module, const void *fatCubin)"
  },
  {
    "label": "cuModuleUnload()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleUnload(CUmodule hmod)"
  },
  {
    "label": "cuModuleGetFunction()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleGetFunction(CUfunction *hfunc, CUmodule hmod, const char *name)"
  },
  {
    "label": "cuModuleGetGlobal()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleGetGlobal(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const char *name)"
  },
  {
    "label": "cuModuleGetTexRef()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const char *name)"
  },
  {
    "label": "cuModuleGetSurfRef()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleGetSurfRef(CUsurfref *pSurfRef, CUmodule hmod, const char *name)"
  },
  {
    "label": "cuLinkCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLinkCreate(unsigned int numOptions, CUjit_option *options, void **optionValues, CUlinkState *stateOut)"
  },
  {
    "label": "cuLinkAddData()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLinkAddData(CUlinkState state, CUjitInputType type, void *data, size_t size, const char *name, unsigned int numOptions, CUjit_option *options, void **optionValues)"
  },
  {
    "label": "cuLinkAddFile()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLinkAddFile(CUlinkState state, CUjitInputType type, const char *path, unsigned int numOptions, CUjit_option *options, void **optionValues)"
  },
  {
    "label": "cuLinkComplete()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLinkComplete(CUlinkState state, void **cubinOut, size_t *sizeOut)"
  },
  {
    "label": "cuLinkDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLinkDestroy(CUlinkState state)"
  },
  {
    "label": "cuMemGetInfo()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemGetInfo(size_t *free, size_t *total)"
  },
  {
    "label": "cuMemAlloc()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAlloc(CUdeviceptr *dptr, size_t bytesize)"
  },
  {
    "label": "cuMemAllocPitch()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAllocPitch(CUdeviceptr *dptr, size_t *pPitch, size_t WidthInBytes, size_t Height, unsigned int ElementSizeBytes)"
  },
  {
    "label": "cuMemFree()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemFree(CUdeviceptr dptr)"
  },
  {
    "label": "cuMemGetAddressRange()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemGetAddressRange(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr)"
  },
  {
    "label": "cuMemAllocHost()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAllocHost(void **pp, size_t bytesize)"
  },
  {
    "label": "cuMemFreeHost()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemFreeHost(void *p)"
  },
  {
    "label": "cuMemHostAlloc()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags)"
  },
  {
    "label": "cuMemHostGetDevicePointer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemHostGetDevicePointer(CUdeviceptr *pdptr, void *p, unsigned int Flags)"
  },
  {
    "label": "cuMemHostGetFlags()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemHostGetFlags(unsigned int *pFlags, void *p)"
  },
  {
    "label": "cuMemAllocManaged()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAllocManaged(CUdeviceptr *dptr, size_t bytesize, unsigned int flags)"
  },
  {
    "label": "cuDeviceGetByPCIBusId()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetByPCIBusId(CUdevice *dev, const char *pciBusId)"
  },
  {
    "label": "cuDeviceGetPCIBusId()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetPCIBusId(char *pciBusId, int len, CUdevice dev)"
  },
  {
    "label": "cuIpcGetEventHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuIpcGetEventHandle(CUipcEventHandle *pHandle, CUevent event)"
  },
  {
    "label": "cuIpcOpenEventHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuIpcOpenEventHandle(CUevent *phEvent, CUipcEventHandle handle)"
  },
  {
    "label": "cuIpcGetMemHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuIpcGetMemHandle(CUipcMemHandle *pHandle, CUdeviceptr dptr)"
  },
  {
    "label": "cuIpcOpenMemHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuIpcOpenMemHandle(CUdeviceptr *pdptr, CUipcMemHandle handle, unsigned int Flags)"
  },
  {
    "label": "cuIpcCloseMemHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuIpcCloseMemHandle(CUdeviceptr dptr)"
  },
  {
    "label": "cuMemHostRegister()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemHostRegister(void *p, size_t bytesize, unsigned int Flags)"
  },
  {
    "label": "cuMemHostUnregister()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemHostUnregister(void *p)"
  },
  {
    "label": "cuMemcpy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyPeer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyHtoD()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoD(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyDtoH()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoH(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyDtoD()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoD(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyDtoA()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoA(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyAtoD()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoD(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyHtoA()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoA(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyAtoH()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoH(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyAtoA()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoA(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount)"
  },
  {
    "label": "cuMemcpy2D()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2D(const CUDA_MEMCPY2D *pCopy)"
  },
  {
    "label": "cuMemcpy2DUnaligned()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2DUnaligned(const CUDA_MEMCPY2D *pCopy)"
  },
  {
    "label": "cuMemcpy3D()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy3D(const CUDA_MEMCPY3D *pCopy)"
  },
  {
    "label": "cuMemcpy3DPeer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER *pCopy)"
  },
  {
    "label": "cuMemcpyAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyPeerAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyHtoDAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoDAsync(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyDtoHAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoHAsync(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyDtoDAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoDAsync(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyHtoAAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoAAsync(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyAtoHAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoHAsync(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpy2DAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2DAsync(const CUDA_MEMCPY2D *pCopy, CUstream hStream)"
  },
  {
    "label": "cuMemcpy3DAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy3DAsync(const CUDA_MEMCPY3D *pCopy, CUstream hStream)"
  },
  {
    "label": "cuMemcpy3DPeerAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER *pCopy, CUstream hStream)"
  },
  {
    "label": "cuMemsetD8()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD8(CUdeviceptr dstDevice, unsigned char uc, size_t N)"
  },
  {
    "label": "cuMemsetD16()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD16(CUdeviceptr dstDevice, unsigned short us, size_t N)"
  },
  {
    "label": "cuMemsetD32()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD32(CUdeviceptr dstDevice, unsigned int ui, size_t N)"
  },
  {
    "label": "cuMemsetD2D8()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D8(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height)"
  },
  {
    "label": "cuMemsetD2D16()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D16(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height)"
  },
  {
    "label": "cuMemsetD2D32()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D32(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height)"
  },
  {
    "label": "cuMemsetD8Async()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream)"
  },
  {
    "label": "cuMemsetD16Async()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream)"
  },
  {
    "label": "cuMemsetD32Async()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD32Async(CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream)"
  },
  {
    "label": "cuMemsetD2D8Async()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream)"
  },
  {
    "label": "cuMemsetD2D16Async()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream)"
  },
  {
    "label": "cuMemsetD2D32Async()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream)"
  },
  {
    "label": "cuArrayCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArrayCreate(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray)"
  },
  {
    "label": "cuArrayGetDescriptor()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArrayGetDescriptor(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray)"
  },
  {
    "label": "cuArrayGetSparseProperties()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArrayGetSparseProperties(CUDA_ARRAY_SPARSE_PROPERTIES *sparseProperties, CUarray array)"
  },
  {
    "label": "cuMipmappedArrayGetSparseProperties()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMipmappedArrayGetSparseProperties(CUDA_ARRAY_SPARSE_PROPERTIES *sparseProperties, CUmipmappedArray mipmap)"
  },
  {
    "label": "cuArrayGetPlane()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArrayGetPlane(CUarray *pPlaneArray, CUarray hArray, unsigned int planeIdx)"
  },
  {
    "label": "cuArrayDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArrayDestroy(CUarray hArray)"
  },
  {
    "label": "cuArray3DCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArray3DCreate(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray)"
  },
  {
    "label": "cuArray3DGetDescriptor()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArray3DGetDescriptor(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray)"
  },
  {
    "label": "cuMipmappedArrayCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMipmappedArrayCreate(CUmipmappedArray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, unsigned int numMipmapLevels)"
  },
  {
    "label": "cuMipmappedArrayGetLevel()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMipmappedArrayGetLevel(CUarray *pLevelArray, CUmipmappedArray hMipmappedArray, unsigned int level)"
  },
  {
    "label": "cuMipmappedArrayDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray)"
  },
  {
    "label": "cuMemAddressReserve()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAddressReserve(CUdeviceptr *ptr, size_t size, size_t alignment, CUdeviceptr addr, unsigned long long flags)"
  },
  {
    "label": "cuMemAddressFree()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAddressFree(CUdeviceptr ptr, size_t size)"
  },
  {
    "label": "cuMemCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemCreate(CUmemGenericAllocationHandle *handle, size_t size, const CUmemAllocationProp *prop, unsigned long long flags)"
  },
  {
    "label": "cuMemRelease()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemRelease(CUmemGenericAllocationHandle handle)"
  },
  {
    "label": "cuMemMap()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemMap(CUdeviceptr ptr, size_t size, size_t offset, CUmemGenericAllocationHandle handle, unsigned long long flags)"
  },
  {
    "label": "cuMemMapArrayAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemMapArrayAsync(CUarrayMapInfo *mapInfoList, unsigned int count, CUstream hStream)"
  },
  {
    "label": "cuMemUnmap()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemUnmap(CUdeviceptr ptr, size_t size)"
  },
  {
    "label": "cuMemSetAccess()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemSetAccess(CUdeviceptr ptr, size_t size, const CUmemAccessDesc *desc, size_t count)"
  },
  {
    "label": "cuMemGetAccess()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemGetAccess(unsigned long long *flags, const CUmemLocation *location, CUdeviceptr ptr)"
  },
  {
    "label": "cuMemExportToShareableHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemExportToShareableHandle(void *shareableHandle, CUmemGenericAllocationHandle handle, CUmemAllocationHandleType handleType, unsigned long long flags)"
  },
  {
    "label": "cuMemImportFromShareableHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemImportFromShareableHandle(CUmemGenericAllocationHandle *handle, void *osHandle, CUmemAllocationHandleType shHandleType)"
  },
  {
    "label": "cuMemGetAllocationGranularity()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemGetAllocationGranularity(size_t *granularity, const CUmemAllocationProp *prop, CUmemAllocationGranularity_flags option)"
  },
  {
    "label": "cuMemGetAllocationPropertiesFromHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemGetAllocationPropertiesFromHandle(CUmemAllocationProp *prop, CUmemGenericAllocationHandle handle)"
  },
  {
    "label": "cuMemRetainAllocationHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemRetainAllocationHandle(CUmemGenericAllocationHandle *handle, void *addr)"
  },
  {
    "label": "cuMemFreeAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemFreeAsync(CUdeviceptr dptr, CUstream hStream)"
  },
  {
    "label": "cuMemAllocAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAllocAsync(CUdeviceptr *dptr, size_t bytesize, CUstream hStream)"
  },
  {
    "label": "cuMemPoolTrimTo()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolTrimTo(CUmemoryPool pool, size_t minBytesToKeep)"
  },
  {
    "label": "cuMemPoolSetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolSetAttribute(CUmemoryPool pool, CUmemPool_attribute attr, void *value)"
  },
  {
    "label": "cuMemPoolGetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolGetAttribute(CUmemoryPool pool, CUmemPool_attribute attr, void *value)"
  },
  {
    "label": "cuMemPoolSetAccess()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolSetAccess(CUmemoryPool pool, const CUmemAccessDesc *map, size_t count)"
  },
  {
    "label": "cuMemPoolGetAccess()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolGetAccess(CUmemAccess_flags *flags, CUmemoryPool memPool, CUmemLocation *location)"
  },
  {
    "label": "cuMemPoolCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolCreate(CUmemoryPool *pool, const CUmemPoolProps *poolProps)"
  },
  {
    "label": "cuMemPoolDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolDestroy(CUmemoryPool pool)"
  },
  {
    "label": "cuMemAllocFromPoolAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAllocFromPoolAsync(CUdeviceptr *dptr, size_t bytesize, CUmemoryPool pool, CUstream hStream)"
  },
  {
    "label": "cuMemPoolExportToShareableHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolExportToShareableHandle(void *handle_out, CUmemoryPool pool, CUmemAllocationHandleType handleType, unsigned long long flags)"
  },
  {
    "label": "cuMemPoolImportFromShareableHandle()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolImportFromShareableHandle(CUmemoryPool *pool_out, void *handle, CUmemAllocationHandleType handleType, unsigned long long flags)"
  },
  {
    "label": "cuMemPoolExportPointer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolExportPointer(CUmemPoolPtrExportData *shareData_out, CUdeviceptr ptr)"
  },
  {
    "label": "cuMemPoolImportPointer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPoolImportPointer(CUdeviceptr *ptr_out, CUmemoryPool pool, CUmemPoolPtrExportData *shareData)"
  },
  {
    "label": "cuPointerGetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuPointerGetAttribute(void *data, CUpointer_attribute attribute, CUdeviceptr ptr)"
  },
  {
    "label": "cuMemPrefetchAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemPrefetchAsync(CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream)"
  },
  {
    "label": "cuMemAdvise()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAdvise(CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device)"
  },
  {
    "label": "cuMemRangeGetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemRangeGetAttribute(void *data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count)"
  },
  {
    "label": "cuMemRangeGetAttributes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemRangeGetAttributes(void **data, size_t *dataSizes, CUmem_range_attribute *attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count)"
  },
  {
    "label": "cuPointerSetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuPointerSetAttribute(const void *value, CUpointer_attribute attribute, CUdeviceptr ptr)"
  },
  {
    "label": "cuPointerGetAttributes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuPointerGetAttributes(unsigned int numAttributes, CUpointer_attribute *attributes, void **data, CUdeviceptr ptr)"
  },
  {
    "label": "cuStreamCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamCreate(CUstream *phStream, unsigned int Flags)"
  },
  {
    "label": "cuStreamCreateWithPriority()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamCreateWithPriority(CUstream *phStream, unsigned int flags, int priority)"
  },
  {
    "label": "cuStreamGetPriority()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamGetPriority(CUstream hStream, int *priority)"
  },
  {
    "label": "cuStreamGetFlags()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamGetFlags(CUstream hStream, unsigned int *flags)"
  },
  {
    "label": "cuStreamGetCtx()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamGetCtx(CUstream hStream, CUcontext *pctx)"
  },
  {
    "label": "cuStreamWaitEvent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned int Flags)"
  },
  {
    "label": "cuStreamAddCallback()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void *userData, unsigned int flags)"
  },
  {
    "label": "cuStreamBeginCapture()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamBeginCapture(CUstream hStream, CUstreamCaptureMode mode)"
  },
  {
    "label": "cuThreadExchangeStreamCaptureMode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuThreadExchangeStreamCaptureMode(CUstreamCaptureMode *mode)"
  },
  {
    "label": "cuStreamEndCapture()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamEndCapture(CUstream hStream, CUgraph *phGraph)"
  },
  {
    "label": "cuStreamIsCapturing()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamIsCapturing(CUstream hStream, CUstreamCaptureStatus *captureStatus)"
  },
  {
    "label": "cuStreamGetCaptureInfo()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamGetCaptureInfo(CUstream hStream, CUstreamCaptureStatus *captureStatus, cuuint64_t *id)"
  },
  {
    "label": "cuStreamAttachMemAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned int flags)"
  },
  {
    "label": "cuStreamQuery()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamQuery(CUstream hStream)"
  },
  {
    "label": "cuStreamSynchronize()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamSynchronize(CUstream hStream)"
  },
  {
    "label": "cuStreamDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamDestroy(CUstream hStream)"
  },
  {
    "label": "cuStreamCopyAttributes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamCopyAttributes(CUstream dst, CUstream src)"
  },
  {
    "label": "cuStreamGetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamGetAttribute(CUstream hStream, CUstreamAttrID attr, CUstreamAttrValue *value_out)"
  },
  {
    "label": "cuStreamSetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamSetAttribute(CUstream hStream, CUstreamAttrID attr, const CUstreamAttrValue *value)"
  },
  {
    "label": "cuEventCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuEventCreate(CUevent *phEvent, unsigned int Flags)"
  },
  {
    "label": "cuEventRecord()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuEventRecord(CUevent hEvent, CUstream hStream)"
  },
  {
    "label": "cuEventRecordWithFlags()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuEventRecordWithFlags(CUevent hEvent, CUstream hStream, unsigned int flags)"
  },
  {
    "label": "cuEventQuery()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuEventQuery(CUevent hEvent)"
  },
  {
    "label": "cuEventSynchronize()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuEventSynchronize(CUevent hEvent)"
  },
  {
    "label": "cuEventDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuEventDestroy(CUevent hEvent)"
  },
  {
    "label": "cuEventElapsedTime()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuEventElapsedTime(float *pMilliseconds, CUevent hStart, CUevent hEnd)"
  },
  {
    "label": "cuImportExternalMemory()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuImportExternalMemory(CUexternalMemory *extMem_out, const CUDA_EXTERNAL_MEMORY_HANDLE_DESC *memHandleDesc)"
  },
  {
    "label": "cuExternalMemoryGetMappedBuffer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuExternalMemoryGetMappedBuffer(CUdeviceptr *devPtr, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_BUFFER_DESC *bufferDesc)"
  },
  {
    "label": "cuExternalMemoryGetMappedMipmappedArray()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuExternalMemoryGetMappedMipmappedArray(CUmipmappedArray *mipmap, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC *mipmapDesc)"
  },
  {
    "label": "cuDestroyExternalMemory()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDestroyExternalMemory(CUexternalMemory extMem)"
  },
  {
    "label": "cuImportExternalSemaphore()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuImportExternalSemaphore(CUexternalSemaphore *extSem_out, const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC *semHandleDesc)"
  },
  {
    "label": "cuSignalExternalSemaphoresAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuSignalExternalSemaphoresAsync(const CUexternalSemaphore *extSemArray, const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *paramsArray, unsigned int numExtSems, CUstream stream)"
  },
  {
    "label": "cuWaitExternalSemaphoresAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuWaitExternalSemaphoresAsync(const CUexternalSemaphore *extSemArray, const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *paramsArray, unsigned int numExtSems, CUstream stream)"
  },
  {
    "label": "cuDestroyExternalSemaphore()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDestroyExternalSemaphore(CUexternalSemaphore extSem)"
  },
  {
    "label": "cuStreamWaitValue32()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags)"
  },
  {
    "label": "cuStreamWaitValue64()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamWaitValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned int flags)"
  },
  {
    "label": "cuStreamWriteValue32()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags)"
  },
  {
    "label": "cuStreamWriteValue64()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamWriteValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned int flags)"
  },
  {
    "label": "cuStreamBatchMemOp()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamBatchMemOp(CUstream stream, unsigned int count, CUstreamBatchMemOpParams *paramArray, unsigned int flags)"
  },
  {
    "label": "cuFuncGetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuFuncGetAttribute(int *pi, CUfunction_attribute attrib, CUfunction hfunc)"
  },
  {
    "label": "cuFuncSetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuFuncSetAttribute(CUfunction hfunc, CUfunction_attribute attrib, int value)"
  },
  {
    "label": "cuFuncSetCacheConfig()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config)"
  },
  {
    "label": "cuFuncSetSharedMemConfig()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config)"
  },
  {
    "label": "cuLaunchKernel()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLaunchKernel(CUfunction f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blockDimX, unsigned int blockDimY, unsigned int blockDimZ, unsigned int sharedMemBytes, CUstream hStream, void **kernelParams, void **extra)"
  },
  {
    "label": "cuLaunchCooperativeKernel()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLaunchCooperativeKernel(CUfunction f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blockDimX, unsigned int blockDimY, unsigned int blockDimZ, unsigned int sharedMemBytes, CUstream hStream, void **kernelParams)"
  },
  {
    "label": "cuLaunchCooperativeKernelMultiDevice()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLaunchCooperativeKernelMultiDevice(CUDA_LAUNCH_PARAMS *launchParamsList, unsigned int numDevices, unsigned int flags)"
  },
  {
    "label": "cuLaunchHostFunc()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuLaunchHostFunc(CUstream hStream, CUhostFn fn, void *userData)"
  },
  {
    "label": "cuFuncSetBlockShape()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z)"
  },
  {
    "label": "cuFuncSetSharedSize()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuFuncSetSharedSize(CUfunction hfunc, unsigned int bytes)"
  },
  {
    "label": "cuParamSetSize()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuParamSetSize(CUfunction hfunc, unsigned int numbytes)"
  },
  {
    "label": "cuParamSeti()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuParamSeti(CUfunction hfunc, int offset, unsigned int value)"
  },
  {
    "label": "cuParamSetf()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuParamSetf(CUfunction hfunc, int offset, float value)"
  },
  {
    "label": "cuParamSetv()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuParamSetv(CUfunction hfunc, int offset, void *ptr, unsigned int numbytes)"
  },
  {
    "label": "cuLaunch()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuLaunch(CUfunction f)"
  },
  {
    "label": "cuLaunchGrid()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuLaunchGrid(CUfunction f, int grid_width, int grid_height)"
  },
  {
    "label": "cuLaunchGridAsync()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream)"
  },
  {
    "label": "cuParamSetTexRef()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef)"
  },
  {
    "label": "cuGraphCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphCreate(CUgraph *phGraph, unsigned int flags)"
  },
  {
    "label": "cuGraphAddKernelNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddKernelNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_KERNEL_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphKernelNodeGetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphKernelNodeGetParams(CUgraphNode hNode, CUDA_KERNEL_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphKernelNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphKernelNodeSetParams(CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphAddMemcpyNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddMemcpyNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_MEMCPY3D *copyParams, CUcontext ctx)"
  },
  {
    "label": "cuGraphMemcpyNodeGetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphMemcpyNodeGetParams(CUgraphNode hNode, CUDA_MEMCPY3D *nodeParams)"
  },
  {
    "label": "cuGraphMemcpyNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphMemcpyNodeSetParams(CUgraphNode hNode, const CUDA_MEMCPY3D *nodeParams)"
  },
  {
    "label": "cuGraphAddMemsetNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddMemsetNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_MEMSET_NODE_PARAMS *memsetParams, CUcontext ctx)"
  },
  {
    "label": "cuGraphMemsetNodeGetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphMemsetNodeGetParams(CUgraphNode hNode, CUDA_MEMSET_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphMemsetNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphMemsetNodeSetParams(CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphAddHostNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddHostNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_HOST_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphHostNodeGetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphHostNodeGetParams(CUgraphNode hNode, CUDA_HOST_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphHostNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphHostNodeSetParams(CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphAddChildGraphNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddChildGraphNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, CUgraph childGraph)"
  },
  {
    "label": "cuGraphChildGraphNodeGetGraph()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphChildGraphNodeGetGraph(CUgraphNode hNode, CUgraph *phGraph)"
  },
  {
    "label": "cuGraphAddEmptyNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddEmptyNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies)"
  },
  {
    "label": "cuGraphAddEventRecordNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddEventRecordNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, CUevent event)"
  },
  {
    "label": "cuGraphEventRecordNodeGetEvent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphEventRecordNodeGetEvent(CUgraphNode hNode, CUevent *event_out)"
  },
  {
    "label": "cuGraphEventRecordNodeSetEvent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphEventRecordNodeSetEvent(CUgraphNode hNode, CUevent event)"
  },
  {
    "label": "cuGraphAddEventWaitNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddEventWaitNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, CUevent event)"
  },
  {
    "label": "cuGraphEventWaitNodeGetEvent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphEventWaitNodeGetEvent(CUgraphNode hNode, CUevent *event_out)"
  },
  {
    "label": "cuGraphEventWaitNodeSetEvent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphEventWaitNodeSetEvent(CUgraphNode hNode, CUevent event)"
  },
  {
    "label": "cuGraphAddExternalSemaphoresSignalNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddExternalSemaphoresSignalNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphExternalSemaphoresSignalNodeGetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExternalSemaphoresSignalNodeGetParams(CUgraphNode hNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *params_out)"
  },
  {
    "label": "cuGraphExternalSemaphoresSignalNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExternalSemaphoresSignalNodeSetParams(CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphAddExternalSemaphoresWaitNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddExternalSemaphoresWaitNode(CUgraphNode *phGraphNode, CUgraph hGraph, const CUgraphNode *dependencies, size_t numDependencies, const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphExternalSemaphoresWaitNodeGetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExternalSemaphoresWaitNodeGetParams(CUgraphNode hNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS *params_out)"
  },
  {
    "label": "cuGraphExternalSemaphoresWaitNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExternalSemaphoresWaitNodeSetParams(CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphClone()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphClone(CUgraph *phGraphClone, CUgraph originalGraph)"
  },
  {
    "label": "cuGraphNodeFindInClone()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphNodeFindInClone(CUgraphNode *phNode, CUgraphNode hOriginalNode, CUgraph hClonedGraph)"
  },
  {
    "label": "cuGraphNodeGetType()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphNodeGetType(CUgraphNode hNode, CUgraphNodeType *type)"
  },
  {
    "label": "cuGraphGetNodes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphGetNodes(CUgraph hGraph, CUgraphNode *nodes, size_t *numNodes)"
  },
  {
    "label": "cuGraphGetRootNodes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphGetRootNodes(CUgraph hGraph, CUgraphNode *rootNodes, size_t *numRootNodes)"
  },
  {
    "label": "cuGraphGetEdges()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphGetEdges(CUgraph hGraph, CUgraphNode *from, CUgraphNode *to, size_t *numEdges)"
  },
  {
    "label": "cuGraphNodeGetDependencies()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphNodeGetDependencies(CUgraphNode hNode, CUgraphNode *dependencies, size_t *numDependencies)"
  },
  {
    "label": "cuGraphNodeGetDependentNodes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphNodeGetDependentNodes(CUgraphNode hNode, CUgraphNode *dependentNodes, size_t *numDependentNodes)"
  },
  {
    "label": "cuGraphAddDependencies()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphAddDependencies(CUgraph hGraph, const CUgraphNode *from, const CUgraphNode *to, size_t numDependencies)"
  },
  {
    "label": "cuGraphRemoveDependencies()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphRemoveDependencies(CUgraph hGraph, const CUgraphNode *from, const CUgraphNode *to, size_t numDependencies)"
  },
  {
    "label": "cuGraphDestroyNode()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphDestroyNode(CUgraphNode hNode)"
  },
  {
    "label": "cuGraphInstantiate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphInstantiate(CUgraphExec *phGraphExec, CUgraph hGraph, CUgraphNode *phErrorNode, char *logBuffer, size_t bufferSize)"
  },
  {
    "label": "cuGraphExecKernelNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecKernelNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphExecMemcpyNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecMemcpyNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMCPY3D *copyParams, CUcontext ctx)"
  },
  {
    "label": "cuGraphExecMemsetNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecMemsetNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS *memsetParams, CUcontext ctx)"
  },
  {
    "label": "cuGraphExecHostNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecHostNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphExecChildGraphNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecChildGraphNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, CUgraph childGraph)"
  },
  {
    "label": "cuGraphExecEventRecordNodeSetEvent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecEventRecordNodeSetEvent(CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event)"
  },
  {
    "label": "cuGraphExecEventWaitNodeSetEvent()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecEventWaitNodeSetEvent(CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event)"
  },
  {
    "label": "cuGraphExecExternalSemaphoresSignalNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecExternalSemaphoresSignalNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphExecExternalSemaphoresWaitNodeSetParams()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecExternalSemaphoresWaitNodeSetParams(CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS *nodeParams)"
  },
  {
    "label": "cuGraphUpload()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphUpload(CUgraphExec hGraphExec, CUstream hStream)"
  },
  {
    "label": "cuGraphLaunch()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphLaunch(CUgraphExec hGraphExec, CUstream hStream)"
  },
  {
    "label": "cuGraphExecDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecDestroy(CUgraphExec hGraphExec)"
  },
  {
    "label": "cuGraphDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphDestroy(CUgraph hGraph)"
  },
  {
    "label": "cuGraphExecUpdate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphExecUpdate(CUgraphExec hGraphExec, CUgraph hGraph, CUgraphNode *hErrorNode_out, CUgraphExecUpdateResult *updateResult_out)"
  },
  {
    "label": "cuGraphKernelNodeCopyAttributes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphKernelNodeCopyAttributes(CUgraphNode dst, CUgraphNode src)"
  },
  {
    "label": "cuGraphKernelNodeGetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphKernelNodeGetAttribute(CUgraphNode hNode, CUkernelNodeAttrID attr, CUkernelNodeAttrValue *value_out)"
  },
  {
    "label": "cuGraphKernelNodeSetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphKernelNodeSetAttribute(CUgraphNode hNode, CUkernelNodeAttrID attr, const CUkernelNodeAttrValue *value)"
  },
  {
    "label": "cuOccupancyMaxActiveBlocksPerMultiprocessor()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize)"
  },
  {
    "label": "cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned int flags)"
  },
  {
    "label": "cuOccupancyMaxPotentialBlockSize()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuOccupancyMaxPotentialBlockSize(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit)"
  },
  {
    "label": "cuOccupancyMaxPotentialBlockSizeWithFlags()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuOccupancyMaxPotentialBlockSizeWithFlags(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned int flags)"
  },
  {
    "label": "cuOccupancyAvailableDynamicSMemPerBlock()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuOccupancyAvailableDynamicSMemPerBlock(size_t *dynamicSmemSize, CUfunction func, int numBlocks, int blockSize)"
  },
  {
    "label": "cuTexRefSetArray()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned int Flags)"
  },
  {
    "label": "cuTexRefSetMipmappedArray()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned int Flags)"
  },
  {
    "label": "cuTexRefSetAddress()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetAddress(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes)"
  },
  {
    "label": "cuTexRefSetAddress2D()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetAddress2D(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch)"
  },
  {
    "label": "cuTexRefSetFormat()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents)"
  },
  {
    "label": "cuTexRefSetAddressMode()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am)"
  },
  {
    "label": "cuTexRefSetFilterMode()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm)"
  },
  {
    "label": "cuTexRefSetMipmapFilterMode()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm)"
  },
  {
    "label": "cuTexRefSetMipmapLevelBias()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias)"
  },
  {
    "label": "cuTexRefSetMipmapLevelClamp()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp)"
  },
  {
    "label": "cuTexRefSetMaxAnisotropy()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned int maxAniso)"
  },
  {
    "label": "cuTexRefSetBorderColor()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetBorderColor(CUtexref hTexRef, float *pBorderColor)"
  },
  {
    "label": "cuTexRefSetFlags()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefSetFlags(CUtexref hTexRef, unsigned int Flags)"
  },
  {
    "label": "cuTexRefGetAddress()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetAddress(CUdeviceptr *pdptr, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetArray()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetArray(CUarray *phArray, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetMipmappedArray()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetMipmappedArray(CUmipmappedArray *phMipmappedArray, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetAddressMode()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetAddressMode(CUaddress_mode *pam, CUtexref hTexRef, int dim)"
  },
  {
    "label": "cuTexRefGetFilterMode()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetFilterMode(CUfilter_mode *pfm, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetFormat()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetFormat(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetMipmapFilterMode()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetMipmapFilterMode(CUfilter_mode *pfm, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetMipmapLevelBias()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetMipmapLevelBias(float *pbias, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetMipmapLevelClamp()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetMipmapLevelClamp(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetMaxAnisotropy()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetMaxAnisotropy(int *pmaxAniso, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetBorderColor()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetBorderColor(float *pBorderColor, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefGetFlags()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefGetFlags(unsigned int *pFlags, CUtexref hTexRef)"
  },
  {
    "label": "cuTexRefCreate()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefCreate(CUtexref *pTexRef)"
  },
  {
    "label": "cuTexRefDestroy()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuTexRefDestroy(CUtexref hTexRef)"
  },
  {
    "label": "cuSurfRefSetArray()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned int Flags)"
  },
  {
    "label": "cuSurfRefGetArray()",
    "kind": "Method",
    "detail": "Function (__CUDA_DEPRECATED CUresult CUDAAPI)",
    "insertText": "cuSurfRefGetArray(CUarray *phArray, CUsurfref hSurfRef)"
  },
  {
    "label": "cuTexObjectCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexObjectCreate(CUtexObject *pTexObject, const CUDA_RESOURCE_DESC *pResDesc, const CUDA_TEXTURE_DESC *pTexDesc, const CUDA_RESOURCE_VIEW_DESC *pResViewDesc)"
  },
  {
    "label": "cuTexObjectDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexObjectDestroy(CUtexObject texObject)"
  },
  {
    "label": "cuTexObjectGetResourceDesc()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUtexObject texObject)"
  },
  {
    "label": "cuTexObjectGetTextureDesc()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC *pTexDesc, CUtexObject texObject)"
  },
  {
    "label": "cuTexObjectGetResourceViewDesc()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC *pResViewDesc, CUtexObject texObject)"
  },
  {
    "label": "cuSurfObjectCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuSurfObjectCreate(CUsurfObject *pSurfObject, const CUDA_RESOURCE_DESC *pResDesc)"
  },
  {
    "label": "cuSurfObjectDestroy()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuSurfObjectDestroy(CUsurfObject surfObject)"
  },
  {
    "label": "cuSurfObjectGetResourceDesc()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUsurfObject surfObject)"
  },
  {
    "label": "cuDeviceCanAccessPeer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceCanAccessPeer(int *canAccessPeer, CUdevice dev, CUdevice peerDev)"
  },
  {
    "label": "cuCtxEnablePeerAccess()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxEnablePeerAccess(CUcontext peerContext, unsigned int Flags)"
  },
  {
    "label": "cuCtxDisablePeerAccess()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuCtxDisablePeerAccess(CUcontext peerContext)"
  },
  {
    "label": "cuDeviceGetP2PAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuDeviceGetP2PAttribute(int* value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice)"
  },
  {
    "label": "cuGraphicsUnregisterResource()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphicsUnregisterResource(CUgraphicsResource resource)"
  },
  {
    "label": "cuGraphicsSubResourceGetMappedArray()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphicsSubResourceGetMappedArray(CUarray *pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel)"
  },
  {
    "label": "cuGraphicsResourceGetMappedMipmappedArray()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray *pMipmappedArray, CUgraphicsResource resource)"
  },
  {
    "label": "cuGraphicsResourceGetMappedPointer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphicsResourceGetMappedPointer(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource)"
  },
  {
    "label": "cuGraphicsResourceSetMapFlags()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphicsResourceSetMapFlags(CUgraphicsResource resource, unsigned int flags)"
  },
  {
    "label": "cuGraphicsMapResources()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphicsMapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream)"
  },
  {
    "label": "cuGraphicsUnmapResources()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphicsUnmapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream)"
  },
  {
    "label": "cuGetExportTable()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGetExportTable(const void **ppExportTable, const CUuuid *pExportTableId)"
  },
  {
    "label": "cuFuncGetModule()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuFuncGetModule(CUmodule *hmod, CUfunction hfunc)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__CUDA_API_VERSION_INTERNAL) #undef cuMemHostRegister #undef cuGraphicsResourceSetMapFlags #undef cuLinkCreate #undef cuLinkAddData #undef cuLinkAddFile #undef cuDeviceTotalMem #undef cuCtxCreate #undef cuModuleGetGlobal #undef cuMemGetInfo #undef cuMemAlloc #undef cuMemAllocPitch #undef cuMemFree #undef cuMemGetAddressRange #undef cuMemAllocHost #undef cuMemHostGetDevicePointer #undef cuMemcpyHtoD #undef cuMemcpyDtoH #undef cuMemcpyDtoD #undef cuMemcpyDtoA #undef cuMemcpyAtoD #undef cuMemcpyHtoA #undef cuMemcpyAtoH #undef cuMemcpyAtoA #undef cuMemcpyHtoAAsync #undef cuMemcpyAtoHAsync #undef cuMemcpy2D #undef cuMemcpy2DUnaligned #undef cuMemcpy3D #undef cuMemcpyHtoDAsync #undef cuMemcpyDtoHAsync #undef cuMemcpyDtoDAsync #undef cuMemcpy2DAsync #undef cuMemcpy3DAsync #undef cuMemsetD8 #undef cuMemsetD16 #undef cuMemsetD32 #undef cuMemsetD2D8 #undef cuMemsetD2D16 #undef cuMemsetD2D32 #undef cuArrayCreate #undef cuArrayGetDescriptor #undef cuArray3DCreate #undef cuArray3DGetDescriptor #undef cuTexRefSetAddress #undef cuTexRefSetAddress2D #undef cuTexRefGetAddress #undef cuGraphicsResourceGetMappedPointer #undef cuCtxDestroy #undef cuCtxPopCurrent #undef cuCtxPushCurrent #undef cuStreamDestroy #undef cuEventDestroy #undef cuMemcpy #undef cuMemcpyAsync #undef cuMemcpyPeer #undef cuMemcpyPeerAsync #undef cuMemcpy3DPeer #undef cuMemcpy3DPeerAsync #undef cuMemsetD8Async #undef cuMemsetD16Async #undef cuMemsetD32Async #undef cuMemsetD2D8Async #undef cuMemsetD2D16Async #undef cuMemsetD2D32Async #undef cuStreamGetPriority #undef cuStreamGetFlags #undef cuStreamGetCtx #undef cuStreamWaitEvent #undef cuStreamAddCallback #undef cuStreamAttachMemAsync #undef cuStreamQuery #undef cuStreamSynchronize #undef cuEventRecord #undef cuEventRecordWithFlags #undef cuLaunchKernel #undef cuLaunchHostFunc #undef cuGraphicsMapResources #undef cuGraphicsUnmapResources #undef cuStreamWriteValue32 #undef cuStreamWaitValue32 #undef cuStreamWriteValue64 #undef cuStreamWaitValue64 #undef cuStreamBatchMemOp #undef cuMemPrefetchAsync #undef cuLaunchCooperativeKernel #undef cuSignalExternalSemaphoresAsync #undef cuWaitExternalSemaphoresAsync #undef cuStreamBeginCapture #undef cuStreamEndCapture #undef cuStreamIsCapturing #undef cuStreamGetCaptureInfo #undef cuGraphUpload #undef cuGraphLaunch #undef cuDevicePrimaryCtxRelease #undef cuDevicePrimaryCtxReset #undef cuDevicePrimaryCtxSetFlags #undef cuIpcOpenMemHandle #undef cuStreamCopyAttributes #undef cuStreamSetAttribute #undef cuStreamGetAttribute #undef cuGraphInstantiate #undef cuMemMapArrayAsync #undef cuMemFreeAsync #undef cuMemAllocAsync #undef cuMemAllocFromPoolAsync CUresult CUDAAPI cuMemHostRegister(void *p, size_t bytesize, unsigned int Flags)"
  },
  {
    "label": "cuTexRefSetAddress2D_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexRefSetAddress2D_v2(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch)"
  },
  {
    "label": "cuDeviceTotalMem()",
    "kind": "Method",
    "detail": "Function (typedef unsigned int CUdeviceptr_v1 ; typedef struct CUDA_MEMCPY2D_v1_st { unsigned int srcXInBytes ; unsigned int srcY ; CUmemorytype srcMemoryType ; const void* srcHost ; CUdeviceptr_v1 srcDevice ; CUarray srcArray ; unsigned int srcPitch ; unsigned int dstXInBytes ; unsigned int dstY ; CUmemorytype dstMemoryType ; void* dstHost ; CUdeviceptr_v1 dstDevice ; CUarray dstArray ; unsigned int dstPitch ; unsigned int WidthInBytes ; unsigned int Height ; } CUDA_MEMCPY2D_v1 ; typedef struct CUDA_MEMCPY3D_v1_st { unsigned int srcXInBytes ; unsigned int srcY ; unsigned int srcZ ; unsigned int srcLOD ; CUmemorytype srcMemoryType ; const void* srcHost ; CUdeviceptr_v1 srcDevice ; CUarray srcArray ; void* reserved0 ; unsigned int srcPitch ; unsigned int srcHeight ; unsigned int dstXInBytes ; unsigned int dstY ; unsigned int dstZ ; unsigned int dstLOD ; CUmemorytype dstMemoryType ; void* dstHost ; CUdeviceptr_v1 dstDevice ; CUarray dstArray ; void* reserved1 ; unsigned int dstPitch ; unsigned int dstHeight ; unsigned int WidthInBytes ; unsigned int Height ; unsigned int Depth ; } CUDA_MEMCPY3D_v1 ; typedef struct CUDA_ARRAY_DESCRIPTOR_v1_st { unsigned int Width ; unsigned int Height ; CUarray_format Format ; unsigned int NumChannels ; } CUDA_ARRAY_DESCRIPTOR_v1 ; typedef struct CUDA_ARRAY3D_DESCRIPTOR_v1_st { unsigned int Width ; unsigned int Height ; unsigned int Depth ; CUarray_format Format ; unsigned int NumChannels ; unsigned int Flags ; } CUDA_ARRAY3D_DESCRIPTOR_v1 ; CUresult CUDAAPI)",
    "insertText": "cuDeviceTotalMem(unsigned int *bytes, CUdevice dev)"
  },
  {
    "label": "cuModuleGetGlobal()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuModuleGetGlobal(CUdeviceptr_v1 *dptr, unsigned int *bytes, CUmodule hmod, const char *name)"
  },
  {
    "label": "cuMemGetInfo()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemGetInfo(unsigned int *free, unsigned int *total)"
  },
  {
    "label": "cuMemAlloc()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAlloc(CUdeviceptr_v1 *dptr, unsigned int bytesize)"
  },
  {
    "label": "cuMemAllocPitch()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAllocPitch(CUdeviceptr_v1 *dptr, unsigned int *pPitch, unsigned int WidthInBytes, unsigned int Height, unsigned int ElementSizeBytes)"
  },
  {
    "label": "cuMemFree()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemFree(CUdeviceptr_v1 dptr)"
  },
  {
    "label": "cuMemGetAddressRange()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemGetAddressRange(CUdeviceptr_v1 *pbase, unsigned int *psize, CUdeviceptr_v1 dptr)"
  },
  {
    "label": "cuMemAllocHost()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemAllocHost(void **pp, unsigned int bytesize)"
  },
  {
    "label": "cuMemHostGetDevicePointer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemHostGetDevicePointer(CUdeviceptr_v1 *pdptr, void *p, unsigned int Flags)"
  },
  {
    "label": "cuMemcpyHtoD()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoD(CUdeviceptr_v1 dstDevice, const void *srcHost, unsigned int ByteCount)"
  },
  {
    "label": "cuMemcpyDtoH()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoH(void *dstHost, CUdeviceptr_v1 srcDevice, unsigned int ByteCount)"
  },
  {
    "label": "cuMemcpyDtoD()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoD(CUdeviceptr_v1 dstDevice, CUdeviceptr_v1 srcDevice, unsigned int ByteCount)"
  },
  {
    "label": "cuMemcpyDtoA()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoA(CUarray dstArray, unsigned int dstOffset, CUdeviceptr_v1 srcDevice, unsigned int ByteCount)"
  },
  {
    "label": "cuMemcpyAtoD()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoD(CUdeviceptr_v1 dstDevice, CUarray srcArray, unsigned int srcOffset, unsigned int ByteCount)"
  },
  {
    "label": "cuMemcpyHtoA()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoA(CUarray dstArray, unsigned int dstOffset, const void *srcHost, unsigned int ByteCount)"
  },
  {
    "label": "cuMemcpyAtoH()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoH(void *dstHost, CUarray srcArray, unsigned int srcOffset, unsigned int ByteCount)"
  },
  {
    "label": "cuMemcpyAtoA()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoA(CUarray dstArray, unsigned int dstOffset, CUarray srcArray, unsigned int srcOffset, unsigned int ByteCount)"
  },
  {
    "label": "cuMemcpyHtoAAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoAAsync(CUarray dstArray, unsigned int dstOffset, const void *srcHost, unsigned int ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyAtoHAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoHAsync(void *dstHost, CUarray srcArray, unsigned int srcOffset, unsigned int ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpy2D()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2D(const CUDA_MEMCPY2D_v1 *pCopy)"
  },
  {
    "label": "cuMemcpy2DUnaligned()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2DUnaligned(const CUDA_MEMCPY2D_v1 *pCopy)"
  },
  {
    "label": "cuMemcpy3D()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy3D(const CUDA_MEMCPY3D_v1 *pCopy)"
  },
  {
    "label": "cuMemcpyHtoDAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoDAsync(CUdeviceptr_v1 dstDevice, const void *srcHost, unsigned int ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyDtoHAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoHAsync(void *dstHost, CUdeviceptr_v1 srcDevice, unsigned int ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyDtoDAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoDAsync(CUdeviceptr_v1 dstDevice, CUdeviceptr_v1 srcDevice, unsigned int ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpy2DAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2DAsync(const CUDA_MEMCPY2D_v1 *pCopy, CUstream hStream)"
  },
  {
    "label": "cuMemcpy3DAsync()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy3DAsync(const CUDA_MEMCPY3D_v1 *pCopy, CUstream hStream)"
  },
  {
    "label": "cuMemsetD8()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD8(CUdeviceptr_v1 dstDevice, unsigned char uc, unsigned int N)"
  },
  {
    "label": "cuMemsetD16()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD16(CUdeviceptr_v1 dstDevice, unsigned short us, unsigned int N)"
  },
  {
    "label": "cuMemsetD32()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD32(CUdeviceptr_v1 dstDevice, unsigned int ui, unsigned int N)"
  },
  {
    "label": "cuMemsetD2D8()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D8(CUdeviceptr_v1 dstDevice, unsigned int dstPitch, unsigned char uc, unsigned int Width, unsigned int Height)"
  },
  {
    "label": "cuMemsetD2D16()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D16(CUdeviceptr_v1 dstDevice, unsigned int dstPitch, unsigned short us, unsigned int Width, unsigned int Height)"
  },
  {
    "label": "cuMemsetD2D32()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D32(CUdeviceptr_v1 dstDevice, unsigned int dstPitch, unsigned int ui, unsigned int Width, unsigned int Height)"
  },
  {
    "label": "cuArrayCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArrayCreate(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR_v1 *pAllocateArray)"
  },
  {
    "label": "cuArrayGetDescriptor()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArrayGetDescriptor(CUDA_ARRAY_DESCRIPTOR_v1 *pArrayDescriptor, CUarray hArray)"
  },
  {
    "label": "cuArray3DCreate()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArray3DCreate(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR_v1 *pAllocateArray)"
  },
  {
    "label": "cuArray3DGetDescriptor()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuArray3DGetDescriptor(CUDA_ARRAY3D_DESCRIPTOR_v1 *pArrayDescriptor, CUarray hArray)"
  },
  {
    "label": "cuTexRefSetAddress()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexRefSetAddress(unsigned int *ByteOffset, CUtexref hTexRef, CUdeviceptr_v1 dptr, unsigned int bytes)"
  },
  {
    "label": "cuTexRefSetAddress2D()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexRefSetAddress2D(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR_v1 *desc, CUdeviceptr_v1 dptr, unsigned int Pitch)"
  },
  {
    "label": "cuTexRefGetAddress()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuTexRefGetAddress(CUdeviceptr_v1 *pdptr, CUtexref hTexRef)"
  },
  {
    "label": "cuGraphicsResourceGetMappedPointer()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphicsResourceGetMappedPointer(CUdeviceptr_v1 *pDevPtr, unsigned int *pSize, CUgraphicsResource resource)"
  },
  {
    "label": "cuMemcpyHtoD_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyDtoH_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoH_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyDtoD_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyDtoA_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyAtoD_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyHtoA_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyAtoH_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoH_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyAtoA_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount)"
  },
  {
    "label": "cuMemcpyHtoAAsync_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyAtoHAsync_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyAtoHAsync_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpy2D_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2D_v2(const CUDA_MEMCPY2D *pCopy)"
  },
  {
    "label": "cuMemcpy2DUnaligned_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *pCopy)"
  },
  {
    "label": "cuMemcpy3D_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy3D_v2(const CUDA_MEMCPY3D *pCopy)"
  },
  {
    "label": "cuMemcpyHtoDAsync_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyDtoHAsync_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoHAsync_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpyDtoDAsync_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream)"
  },
  {
    "label": "cuMemcpy2DAsync_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *pCopy, CUstream hStream)"
  },
  {
    "label": "cuMemcpy3DAsync_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *pCopy, CUstream hStream)"
  },
  {
    "label": "cuMemsetD8_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N)"
  },
  {
    "label": "cuMemsetD16_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N)"
  },
  {
    "label": "cuMemsetD32_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned int ui, size_t N)"
  },
  {
    "label": "cuMemsetD2D8_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height)"
  },
  {
    "label": "cuMemsetD2D16_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height)"
  },
  {
    "label": "cuMemsetD2D32_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height)"
  },
  {
    "label": "cuStreamBeginCapture()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamBeginCapture(CUstream hStream)"
  },
  {
    "label": "cuStreamBeginCapture_ptsz()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamBeginCapture_ptsz(CUstream hStream)"
  },
  {
    "label": "cuStreamBeginCapture_v2()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamBeginCapture_v2(CUstream hStream, CUstreamCaptureMode mode)"
  },
  {
    "label": "cuGraphUpload()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphUpload(CUgraphExec hGraph, CUstream hStream)"
  },
  {
    "label": "cuGraphLaunch()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuGraphLaunch(CUgraphExec hGraph, CUstream hStream)"
  },
  {
    "label": "cuStreamCopyAttributes()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamCopyAttributes(CUstream dstStream, CUstream srcStream)"
  },
  {
    "label": "cuStreamGetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamGetAttribute(CUstream hStream, CUstreamAttrID attr, CUstreamAttrValue *value)"
  },
  {
    "label": "cuStreamSetAttribute()",
    "kind": "Method",
    "detail": "Function (CUresult CUDAAPI)",
    "insertText": "cuStreamSetAttribute(CUstream hStream, CUstreamAttrID attr, const CUstreamAttrValue *param)"
  }
]