[
  {
    "label": "FAllInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllInputs"
  },
  {
    "label": "FSimModuleTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSimModuleTree"
  },
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "FModuleNetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleNetData"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FWheelSimModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWheelSimModule"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SimModule / TorqueSimModule . h \" namespace Chaos { struct FAllInputs ; class FSimModuleTree ; class FClusterUnionPhysicsProxy ; struct FModuleNetData ; struct FWheelSimModuleData : public FTorqueSimModuleData,public Chaos::TSimulationModuleTypeable<class FWheelSimModule,FWheelSimModuleData> { #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) FWheelSimModuleData(int NodeArrayIndex, const FString& InDebugString) : FTorqueSimModuleData(NodeArrayIndex, InDebugString)"
  },
  {
    "label": "FWheelSimModuleData()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FWheelSimModuleData(int NodeArrayIndex) : FTorqueSimModuleData(NodeArrayIndex)"
  },
  {
    "label": "FillSimState()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "FillSimState(ISimulationModuleBase* SimModule)"
  },
  {
    "label": "FillSimState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSimState(SimModule)"
  },
  {
    "label": "FillNetState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillNetState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "FillNetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNetState(SimModule)"
  },
  {
    "label": "MakeNewData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FWheelOutputData : public FSimOutputData,public Chaos::TSimulationModuleTypeable<class FWheelSimModule,FWheelOutputData> { FSimOutputData*)",
    "insertText": "MakeNewData()"
  },
  {
    "label": "MakeNew()",
    "kind": "Method",
    "detail": "Function (} FSimOutputData*)",
    "insertText": "MakeNew()"
  },
  {
    "label": "FillOutputState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FillOutputState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lerp(const FSimOutputData& InCurrent, const FSimOutputData& InNext, float Alpha)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual FString ToString()"
  },
  {
    "label": "FWheelSettings()",
    "kind": "Method",
    "detail": "Function (# endif bool bTouchingGround ; float ForceIntoSurface ; float SlipAngle ; float RPM ; float AngularPositionDegrees ; float SteeringAngleDegrees ; } ; struct FWheelSettings {)",
    "insertText": "FWheelSettings() : Radius(30.0f) , Width(20.0f) , WheelInertia(100.0f) , FrictionMultiplier(3.0f) , LateralSlipGraphMultiplier(1.0f) , CorneringStiffness(1000.0f) , SlipAngleLimit(8.0f) , SlipModifier(0.9f) , ABSEnabled(true) , TractionControlEnabled(true) , SteeringEnabled(false) , HandbrakeEnabled(false) , AutoHandbrakeEnabled(false) , AutoHandbrakeVelocityThreshold(10.0f) , MaxSteeringAngle(45) , MaxBrakeTorque(4000) , HandbrakeTorque(3000) , MaxRotationVel(100.0f) , Axis(EWheelAxis::X) , ReverseDirection(false) , ForceOffset(FVector::ZeroVector)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (} float Radius ; float Width ; float WheelInertia ; float FrictionMultiplier ; float LateralSlipGraphMultiplier ; float CorneringStiffness ; FGraph LateralSlipGraph ; float SlipAngleLimit ; float SlipModifier ; bool ABSEnabled ; bool TractionControlEnabled ; bool SteeringEnabled ; bool HandbrakeEnabled ; bool AutoHandbrakeEnabled ; float AutoHandbrakeVelocityThreshold ; float MaxSteeringAngle ; float MaxBrakeTorque ; float HandbrakeTorque ; float MaxRotationVel ; EWheelAxis Axis ; bool ReverseDirection ; FVector ForceOffset ; } ; class FWheelSimModule : public FWheelBaseInterface,public TSimModuleSettings<FWheelSettings>,public TSimulationModuleTypeable<FWheelSimModule> { FWheelOutputData ; public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FWheelSimModule)"
  },
  {
    "label": "FWheelSimModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWheelSimModule(const FWheelSettings& Settings)"
  },
  {
    "label": "GenerateNetData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FModuleNetData>)",
    "insertText": "GenerateNetData(const int32 SimArrayIndex)"
  },
  {
    "label": "GenerateOutputData()",
    "kind": "Method",
    "detail": "Function (} FSimOutputData*)",
    "insertText": "GenerateOutputData()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} const FString)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetDebugString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetDebugString(FString& StringOut)"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Simulate(float DeltaTime, const FAllInputs& Inputs, FSimModuleTree& VehicleModuleSystem)"
  },
  {
    "label": "Animate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Animate(Chaos::FClusterUnionPhysicsProxy* Proxy)"
  },
  {
    "label": "IsBehaviourType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBehaviourType(eSimModuleTypeFlags InType)"
  },
  {
    "label": "GetWheelRadius()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetWheelRadius()"
  },
  {
    "label": "GetSteerAngleDegrees()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSteerAngleDegrees()"
  },
  {
    "label": "SetAngularVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocity(LinearMetersPerSecondIn / Setup().Radius)"
  },
  {
    "label": "GetLinearSpeed()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetLinearSpeed()"
  },
  {
    "label": "GetEffectiveRadius()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetEffectiveRadius()"
  },
  {
    "label": "FWheelSimFactory()",
    "kind": "Method",
    "detail": "Function (} private : float BrakeTorque ; FVector ForceFromFriction ; float MassPerWheel ; float SteerAngleDegrees ; bool bTouchingGround ; float SlipAngle ; } ; class FWheelSimFactory : public FSimFactoryModule<FWheelSimModuleData>,public TSimulationModuleTypeable<FWheelSimModule,FWheelSimFactory>,public TSimFactoryAutoRegister<FWheelSimFactory> { public :)",
    "insertText": "FWheelSimFactory() : FSimFactoryModule(TEXT(\"WheelSimFactory\"))"
  }
]