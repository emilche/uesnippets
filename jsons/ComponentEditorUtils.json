[
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FComponentEditorUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentEditorUtils"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "CanEditComponentInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditComponentInstance(const UActorComponent* ActorComp, const UActorComponent* ParentSceneComp, bool bAllowUserContructionScript)"
  },
  {
    "label": "IsValidVariableNameString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidVariableNameString(const UActorComponent* InComponent, const FString& InString)"
  },
  {
    "label": "IsComponentNameAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentNameAvailable(const FString& InString, UObject* ComponentOwner, const UActorComponent* ComponentToIgnore = nullptr)"
  },
  {
    "label": "GenerateValidVariableName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateValidVariableName(TSubclassOf<UActorComponent> InComponentClass, AActor* ComponentOwner)"
  },
  {
    "label": "GenerateValidVariableNameFromAsset()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateValidVariableNameFromAsset(UObject* Asset, AActor* ComponentOwner)"
  },
  {
    "label": "CanCopyComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyComponent(const UActorComponent* ComponentToCopy)"
  },
  {
    "label": "CanCopyComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyComponents(const TArray<UActorComponent*>& ComponentsToCopy)"
  },
  {
    "label": "CopyComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyComponents(const TArray<UActorComponent*>& ComponentsToCopy, FString* DestinationData = nullptr)"
  },
  {
    "label": "CanPasteComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteComponents(const USceneComponent* RootComponent, bool bOverrideCanAttach = false, bool bPasteAsArchetypes = false, const FString* SourceData = nullptr)"
  },
  {
    "label": "PasteComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteComponents(TArray<UActorComponent*>& OutPastedComponents, AActor* TargetActor, USceneComponent* TargetComponent = nullptr, const FString* SourceData = nullptr)"
  },
  {
    "label": "GetComponentsFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComponentsFromClipboard(TMap<FName, FName>& OutParentMap, TMap<FName, UActorComponent*>& OutNewObjectMap, bool bGetComponentsAsArchetypes)"
  },
  {
    "label": "CanDeleteComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteComponent(const UActorComponent* ComponentToDelete)"
  },
  {
    "label": "CanDeleteComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteComponents(const TArray<UActorComponent*>& ComponentsToDelete)"
  },
  {
    "label": "DeleteComponents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteComponents(const TArray<UActorComponent*>& ComponentsToDelete, UActorComponent*& OutComponentToSelect)"
  },
  {
    "label": "BindComponentSelectionOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindComponentSelectionOverride(USceneComponent* SceneComponent, bool bBind)"
  },
  {
    "label": "AttemptApplyMaterialToComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptApplyMaterialToComponent( USceneComponent* SceneComponent, UMaterialInterface* MaterialToApply, int32 OptionalMaterialSlot = -1 )"
  },
  {
    "label": "AdjustComponentDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustComponentDelta(const USceneComponent* Component, FVector& Drag, FRotator& Rotation)"
  },
  {
    "label": "ApplyDefaultValueChange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ApplyDefaultValueChange(InSceneComponent, *CurrentValue, OldDefaultValue, NewDefaultValue)"
  },
  {
    "label": "FindVariableNameGivenComponentInstance()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FindVariableNameGivenComponentInstance(const UActorComponent* ComponentInstance)"
  },
  {
    "label": "FillComponentContextMenuOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillComponentContextMenuOptions(UToolMenu* Menu, const TArray<UActorComponent*>& SelectedComponents)"
  },
  {
    "label": "MakeComponentReference()",
    "kind": "Method",
    "detail": "Function (FComponentReference)",
    "insertText": "MakeComponentReference(const AActor* ExpectedComponentOwner, const UActorComponent* Component)"
  },
  {
    "label": "OnGoToComponentAssetInBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGoToComponentAssetInBrowser(UObject* Asset)"
  },
  {
    "label": "OnOpenComponentCodeFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenComponentCodeFile(const FString CodeFileName)"
  },
  {
    "label": "OnEditBlueprintComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditBlueprintComponent(UObject* Blueprint)"
  }
]