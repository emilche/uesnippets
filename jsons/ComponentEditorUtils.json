[
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FComponentEditorUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentEditorUtils"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "CanEditComponentInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SubclassOf . h \" # include \" Components / ActorComponent . h \" # include \" Engine / EngineTypes . h \" # include \" GameFramework / Actor . h \" # include \" UObject / UObjectHash . h \" class UToolMenu ; class UMaterialInterface ; class FComponentEditorUtils { public : bool)",
    "insertText": "CanEditComponentInstance(const UActorComponent* ActorComp, const UActorComponent* ParentSceneComp, bool bAllowUserContructionScript)"
  },
  {
    "label": "GetPropertyForEditableNativeComponent()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "GetPropertyForEditableNativeComponent(const UActorComponent* NativeComponent)"
  },
  {
    "label": "IsValidVariableNameString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidVariableNameString(const UActorComponent* InComponent, const FString& InString)"
  },
  {
    "label": "IsComponentNameAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComponentNameAvailable(const FString& InString, UObject* ComponentOwner, const UActorComponent* ComponentToIgnore = nullptr)"
  },
  {
    "label": "GenerateValidVariableName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateValidVariableName(TSubclassOf<UActorComponent> InComponentClass, AActor* ComponentOwner)"
  },
  {
    "label": "GenerateValidVariableNameFromAsset()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateValidVariableNameFromAsset(UObject* Asset, AActor* ComponentOwner)"
  },
  {
    "label": "CanCopyComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyComponent(const UActorComponent* ComponentToCopy)"
  },
  {
    "label": "CanCopyComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyComponents(const TArray<UActorComponent*>& ComponentsToCopy)"
  },
  {
    "label": "CopyComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyComponents(const TArray<UActorComponent*>& ComponentsToCopy, FString* DestinationData = nullptr)"
  },
  {
    "label": "CanPasteComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteComponents(const USceneComponent* RootComponent, bool bOverrideCanAttach = false, bool bPasteAsArchetypes = false, const FString* SourceData = nullptr)"
  },
  {
    "label": "PasteComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteComponents(TArray<UActorComponent*>& OutPastedComponents, AActor* TargetActor, USceneComponent* TargetComponent = nullptr, const FString* SourceData = nullptr)"
  },
  {
    "label": "GetComponentsFromClipboard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetComponentsFromClipboard(TMap<FName, FName>& OutParentMap, TMap<FName, UActorComponent*>& OutNewObjectMap, bool bGetComponentsAsArchetypes)"
  },
  {
    "label": "CanDeleteComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteComponent(const UActorComponent* ComponentToDelete)"
  },
  {
    "label": "CanDeleteComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteComponents(const TArray<UActorComponent*>& ComponentsToDelete)"
  },
  {
    "label": "DeleteComponents()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DeleteComponents(const TArray<UActorComponent*>& ComponentsToDelete, UActorComponent*& OutComponentToSelect)"
  },
  {
    "label": "DuplicateComponent()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "DuplicateComponent(UActorComponent* TemplateComponent)"
  },
  {
    "label": "BindComponentSelectionOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindComponentSelectionOverride(USceneComponent* SceneComponent, bool bBind)"
  },
  {
    "label": "AttemptApplyMaterialToComponent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AttemptApplyMaterialToComponent(USceneComponent* SceneComponent, UMaterialInterface* MaterialToApply, int32 OptionalMaterialSlot = -1)"
  },
  {
    "label": "AdjustComponentDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustComponentDelta(const USceneComponent* Component, FVector& Drag, FRotator& Rotation)"
  },
  {
    "label": "PropagateDefaultValueChange()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "PropagateDefaultValueChange(class USceneComponent* InSceneComponentTemplate, const class FProperty* InProperty, const T& OldDefaultValue, const T& NewDefaultValue, TSet<class USceneComponent*>& UpdatedInstances, int32 PropertyOffset = INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> ArchetypeInstances ;)",
    "insertText": "if(InSceneComponentTemplate->HasAnyFlags(RF_ArchetypeObject))"
  },
  {
    "label": "GetArchetypeInstances()",
    "kind": "Method",
    "detail": "Function (InSceneComponentTemplate ->)",
    "insertText": "GetArchetypeInstances(ArchetypeInstances)"
  },
  {
    "label": "USceneComponent()",
    "kind": "Method",
    "detail": "Function (USceneComponent* InstancedSceneComponent = static_cast<)",
    "insertText": "USceneComponent(ArchetypeInstances[InstanceIndex])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (UpdatedInstances .)",
    "insertText": "Add(InstancedSceneComponent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(UObject* Outer = InSceneComponentTemplate->GetOuter())"
  },
  {
    "label": "USceneComponent()",
    "kind": "Method",
    "detail": "Function (USceneComponent* InstancedSceneComponent = static_cast<)",
    "insertText": "USceneComponent(FindObjectWithOuter(ArchetypeInstances[InstanceIndex], InSceneComponentTemplate->GetClass(), InSceneComponentTemplate->GetFName()))"
  },
  {
    "label": "ApplyDefaultValueChange()",
    "kind": "Method",
    "detail": "Function (} } } } template<T> bool)",
    "insertText": "ApplyDefaultValueChange(class USceneComponent* InSceneComponent, const class FProperty* InProperty, const T& OldDefaultValue, const T& NewDefaultValue, int32 PropertyOffset)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* CurrentValue = PropertyOffset = = INDEX_NONE ? InProperty -> ContainerPtrToValuePtr<)",
    "insertText": "T(InSceneComponent) : (T*)((uint8*)InSceneComponent + PropertyOffset)"
  },
  {
    "label": "ApplyDefaultValueChange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ApplyDefaultValueChange(class USceneComponent* InSceneComponent, const class FProperty* InProperty, const bool& OldDefaultValue, const bool& NewDefaultValue, int32 PropertyOffset)"
  },
  {
    "label": "FBoolProperty()",
    "kind": "Method",
    "detail": "Function (const FBoolProperty* BoolProperty = CastField<)",
    "insertText": "FBoolProperty(InProperty)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (uint8* CurrentValue = PropertyOffset = = INDEX_NONE ? InProperty -> ContainerPtrToValuePtr<)",
    "insertText": "uint8(InSceneComponent) : ((uint8*)InSceneComponent + PropertyOffset)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (bool CurrentBool = BoolProperty ->)",
    "insertText": "GetPropertyValue(CurrentValue)"
  },
  {
    "label": "SetPropertyValue()",
    "kind": "Method",
    "detail": "Function (BoolProperty ->)",
    "insertText": "SetPropertyValue(CurrentValue, CurrentBool)"
  },
  {
    "label": "ReregisterComponent()",
    "kind": "Method",
    "detail": "Function (InSceneComponent ->)",
    "insertText": "ReregisterComponent()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (InSceneComponent ->)",
    "insertText": "SetFlags(RF_Transactional)"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (InSceneComponent ->)",
    "insertText": "Modify()"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (} AActor* Owner = InSceneComponent ->)",
    "insertText": "GetOwner()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} CurrentValue = NewDefaultValue ;)",
    "insertText": "if(bReregisterComponent && InSceneComponent->IsRegistered())"
  },
  {
    "label": "UpdateComponentToWorld()",
    "kind": "Method",
    "detail": "Function (} else { InSceneComponent ->)",
    "insertText": "UpdateComponentToWorld()"
  },
  {
    "label": "FindVariableNameGivenComponentInstance()",
    "kind": "Method",
    "detail": "Function (} } return true ; } return false ; } FName)",
    "insertText": "FindVariableNameGivenComponentInstance(const UActorComponent* ComponentInstance)"
  },
  {
    "label": "FillComponentContextMenuOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillComponentContextMenuOptions(UToolMenu* Menu, const TArray<UActorComponent*>& SelectedComponents)"
  },
  {
    "label": "FindMatchingComponent()",
    "kind": "Method",
    "detail": "Function (UActorComponent*)",
    "insertText": "FindMatchingComponent(const UActorComponent* ComponentInstance, const TInlineComponentArray<UActorComponent*>& ComponentList)"
  },
  {
    "label": "MakeComponentReference()",
    "kind": "Method",
    "detail": "Function (FComponentReference)",
    "insertText": "MakeComponentReference(const AActor* ExpectedComponentOwner, const UActorComponent* Component)"
  },
  {
    "label": "FindClosestParentInList()",
    "kind": "Method",
    "detail": "Function (private : USceneComponent*)",
    "insertText": "FindClosestParentInList(UActorComponent* ChildComponent, const TArray<UActorComponent*>& ComponentList)"
  },
  {
    "label": "OnGoToComponentAssetInBrowser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGoToComponentAssetInBrowser(UObject* Asset)"
  },
  {
    "label": "OnOpenComponentCodeFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOpenComponentCodeFile(const FString CodeFileName)"
  },
  {
    "label": "OnEditBlueprintComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditBlueprintComponent(UObject* Blueprint)"
  }
]