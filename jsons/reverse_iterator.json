[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "__is_reverse_iterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__is_reverse_iterator"
  },
  {
    "label": "_Iter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter1"
  },
  {
    "label": "_Iter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter2"
  },
  {
    "label": "__unconstrained_reverse_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__unconstrained_reverse_iterator"
  },
  {
    "label": "_RevIter1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RevIter1"
  },
  {
    "label": "_RevIter2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_RevIter2"
  },
  {
    "label": "__unwrap_reverse_iter_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__unwrap_reverse_iter_impl"
  },
  {
    "label": "__unwrap_iter_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__unwrap_iter_impl"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_REVERSE_ITERATOR_H # define _LIBCPP___ITERATOR_REVERSE_ITERATOR_H # include<__algorithm / unwrap_iter . h> # include<__compare / compare_three_way_result . h> # include<__compare / three_way_comparable . h> # include<__concepts / convertible_to . h> # include<__config> # include<__iterator / advance . h> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iter_move . h> # include<__iterator / iter_swap . h> # include<__iterator / iterator . h> # include<__iterator / iterator_traits . h> # include<__iterator / next . h> # include<__iterator / prev . h> # include<__iterator / readable_traits . h> # include<__memory / addressof . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / subrange . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD _LIBCPP_SUPPRESS_DEPRECATED_PUSH template <class _Iter> class _LIBCPP_TEMPLATE_VIS reverse_iterator #if _LIBCPP_STD_VER <= 14 || !defined(_LIBCPP_ABI_NO_ITERATOR_BASES)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_SUPPRESS_DEPRECATED_POP private : # ifndef _LIBCPP_ABI_NO_ITERATOR_BASES _Iter __t ; # endif # if _LIBCPP_STD_VER> 1 7)",
    "insertText": "static_assert(__is_cpp17_bidirectional_iterator<_Iter>::value || bidirectional_iterator<_Iter>, \"reverse_iterator<It> requires It to be a bidirectional iterator.\")"
  },
  {
    "label": "reverse_iterator()",
    "kind": "Method",
    "detail": "Function (# endif protected : _Iter current ; public : using iterator_type = _Iter ; using iterator_category = _If<__is_cpp17_random_access_iterator<_Iter>::value,random_access_iterator_tag,iterator_traits<_Iter>::iterator_category> ; using pointer = iterator_traits<_Iter>::pointer ; # if _LIBCPP_STD_VER> 1 7 using iterator_concept = _If<random_access_iterator<_Iter>,random_access_iterator_tag,bidirectional_iterator_tag> ; using value_type = iter_value_t<_Iter> ; using difference_type = iter_difference_t<_Iter> ; using reference = iter_reference_t<_Iter> ; # else using value_type = iterator_traits<_Iter>::value_type ; using difference_type = iterator_traits<_Iter>::difference_type ; using reference = iterator_traits<_Iter>::reference ; # endif # ifndef _LIBCPP_ABI_NO_ITERATOR_BASES _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "reverse_iterator() : __t(), current()"
  },
  {
    "label": "reverse_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "reverse_iterator(_Iter __x) : __t(__x), current(__x)"
  },
  {
    "label": "reverse_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class _Up,class = __enable_if_t<! is_same<_Up,_Iter>::value&& is_convertible<_Up const&,_Iter>::value>> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "reverse_iterator(const reverse_iterator<_Up>& __u) : __t(__u.base()), current(__u.base())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Up,class = __enable_if_t<! is_same<_Up,_Iter>::value&& is_convertible<_Up const&,_Iter>::value&& is_assignable<_Iter&,_Up const&>::value>> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 reverse_iterator&)",
    "insertText": "operator(const reverse_iterator<_Up>& __u)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (__t = current = __u .)",
    "insertText": "base()"
  },
  {
    "label": "reverse_iterator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "reverse_iterator(_Iter __x) : current(__x)"
  },
  {
    "label": "reverse_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class _Up,class = __enable_if_t<! is_same<_Up,_Iter>::value&& is_convertible<_Up const&,_Iter>::value>> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14)",
    "insertText": "reverse_iterator(const reverse_iterator<_Up>& __u) : current(__u.base())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (_Iter __tmp = current ; return* - - __tmp ; } # if _LIBCPP_STD_VER> 1 7 _LIBCPP_INLINE_VISIBILITY pointer)",
    "insertText": "operator() const requires is_pointer_v<_Iter> || requires(const _Iter __i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__i .)",
    "insertText": "operator()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} { if)",
    "insertText": "constexpr(is_pointer_v<_Iter>)"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "prev(current).operator->()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (- - current ; return* this ; } _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 reverse_iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "__tmp()",
    "kind": "Method",
    "detail": "Function (reverse_iterator)",
    "insertText": "__tmp(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + current ; return __tmp ; } _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 reverse_iterator)",
    "insertText": "operator(difference_type __n)"
  },
  {
    "label": "iter_move()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 7 _LIBCPP_HIDE_FROM_ABI iter_rvalue_reference_t<_Iter>)",
    "insertText": "iter_move(const reverse_iterator& __i) noexcept(is_nothrow_copy_constructible_v<_Iter> && noexcept(ranges::iter_move(--declval<_Iter&>())))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (} template<indirectly_swappable<_Iter> _Iter2> _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "iter_swap(const reverse_iterator& __x, const reverse_iterator<_Iter2>& __y) noexcept(is_nothrow_copy_constructible_v<_Iter> && is_nothrow_copy_constructible_v<_Iter2> && noexcept(ranges::iter_swap(--declval<_Iter&>(), --declval<_Iter2&>())))"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iter_swap(--__xtmp, --__ytmp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<class _Iter> struct __is_reverse_iterator : false_type { } ; template<class _Iter> struct __is_reverse_iterator<reverse_iterator<_Iter>> : true_type { } ; template<class _Iter1,class _Iter2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 bool)",
    "insertText": "operator(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y)"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (convertible_to<bool>)",
    "insertText": "base() == __y.base()"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (convertible_to<bool>)",
    "insertText": "base() > __y.base()"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (convertible_to<bool>)",
    "insertText": "base() != __y.base()"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (convertible_to<bool>)",
    "insertText": "base() < __y.base()"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (convertible_to<bool>)",
    "insertText": "base() <= __y.base()"
  },
  {
    "label": "base()",
    "kind": "Method",
    "detail": "Function (convertible_to<bool>)",
    "insertText": "base() >= __y.base()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef _LIBCPP_CXX03_LANG template<class _Iter1,class _Iter2> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 auto)",
    "insertText": "operator(const reverse_iterator<_Iter1>& __x, const reverse_iterator<_Iter2>& __y) -> decltype(__y.base() - __x.base())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # endif template<class _Iter> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 reverse_iterator<_Iter>)",
    "insertText": "operator(typename reverse_iterator<_Iter>::difference_type __n, const reverse_iterator<_Iter>& __x)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} # if _LIBCPP_STD_VER> 1 7 template<class _Iter1,class _Iter2>)",
    "insertText": "requires(!sized_sentinel_for<_Iter1, _Iter2>)"
  },
  {
    "label": "make_reverse_iterator()",
    "kind": "Method",
    "detail": "Function (# endif # if _LIBCPP_STD_VER> 1 1 template<class _Iter> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX14 reverse_iterator<_Iter>)",
    "insertText": "make_reverse_iterator(_Iter __i)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} # endif # if _LIBCPP_STD_VER<= 1 7 template<class _Iter> using __unconstrained_reverse_iterator = reverse_iterator<_Iter> ; # else template<class _Iter> class __unconstrained_reverse_iterator { _Iter __iter_ ; public :)",
    "insertText": "static_assert(__is_cpp17_bidirectional_iterator<_Iter>::value || bidirectional_iterator<_Iter>)"
  },
  {
    "label": "__unconstrained_reverse_iterator()",
    "kind": "Method",
    "detail": "Function (using iterator_type = _Iter ; using iterator_category = _If<__is_cpp17_random_access_iterator<_Iter>::value,random_access_iterator_tag,__iterator_category_type<_Iter>> ; using pointer = __iterator_pointer_type<_Iter> ; using value_type = iter_value_t<_Iter> ; using difference_type = iter_difference_t<_Iter> ; using reference = iter_reference_t<_Iter> ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__unconstrained_reverse_iterator()"
  },
  {
    "label": "__unconstrained_reverse_iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__unconstrained_reverse_iterator(const __unconstrained_reverse_iterator&)"
  },
  {
    "label": "__unconstrained_reverse_iterator()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__unconstrained_reverse_iterator(_Iter __iter) : __iter_(__iter)"
  },
  {
    "label": "prev()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "prev(__iter_).operator->()"
  },
  {
    "label": "iter_move()",
    "kind": "Method",
    "detail": "Function (} } _LIBCPP_HIDE_FROM_ABI iter_rvalue_reference_t<_Iter>)",
    "insertText": "iter_move(const __unconstrained_reverse_iterator& __i) noexcept(is_nothrow_copy_constructible_v<_Iter> && noexcept(ranges::iter_move(--declval<_Iter&>())))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI difference_type)",
    "insertText": "operator(const __unconstrained_reverse_iterator& __other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator(const __unconstrained_reverse_iterator& __lhs, const __unconstrained_reverse_iterator& __rhs)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Iter> struct __is_reverse_iterator<__unconstrained_reverse_iterator<_Iter>> : true_type { } ; # endif template<template<class> class _RevIter1,template<class> class _RevIter2,class _Iter> struct __unwrap_reverse_iter_impl { using _UnwrappedIter =)",
    "insertText": "decltype(__unwrap_iter_impl<_Iter>::__unwrap(std::declval<_Iter>()))"
  },
  {
    "label": "__rewrap()",
    "kind": "Method",
    "detail": "Function (using _ReverseWrapper = _RevIter1<_RevIter2<_Iter>> ; _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _ReverseWrapper)",
    "insertText": "__rewrap(_ReverseWrapper __orig_iter, _UnwrappedIter __unwrapped_iter)"
  },
  {
    "label": "__unwrap()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _UnwrappedIter)",
    "insertText": "__unwrap(_ReverseWrapper __i)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } ; # if _LIBCPP_STD_VER> 1 7&& !)",
    "insertText": "defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES) template <ranges::bidirectional_range _Range> _LIBCPP_HIDE_FROM_ABI constexpr ranges:: subrange<reverse_iterator<ranges::iterator_t<_Range>>, reverse_iterator<ranges::iterator_t<_Range>>> __reverse_range(_Range&& __range)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto __first =)",
    "insertText": "begin(__range)"
  }
]