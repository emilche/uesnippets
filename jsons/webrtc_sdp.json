[
  {
    "label": "Candidate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Candidate"
  },
  {
    "label": "StringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBuilder"
  },
  {
    "label": "IceCandidateInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IceCandidateInterface"
  },
  {
    "label": "JsepIceCandidate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsepIceCandidate"
  },
  {
    "label": "JsepSessionDescription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JsepSessionDescription"
  },
  {
    "label": "SdpParseError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SdpParseError"
  },
  {
    "label": "SdpSerialize()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_WEBRTC_SDP_H_ # define PC_WEBRTC_SDP_H_ # include<string> # include \" absl / strings / string_view . h \" # include \" api / candidate . h \" # include \" api / jsep . h \" # include \" api / jsep_ice_candidate . h \" # include \" api / jsep_session_description . h \" # include \" media / base / codec . h \" # include \" rtc_base / strings / string_builder . h \" # include \" rtc_base / system / rtc_export . h \" namespace cricket { class Candidate ; } namespace rtc { class StringBuilder ; } namespace webrtc { class IceCandidateInterface ; class JsepIceCandidate ; class JsepSessionDescription ; struct SdpParseError ; std::string)",
    "insertText": "SdpSerialize(const JsepSessionDescription& jdesc)"
  },
  {
    "label": "SdpSerializeCandidate()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "SdpSerializeCandidate(const IceCandidateInterface& candidate)"
  },
  {
    "label": "SdpSerializeCandidate()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT std::string)",
    "insertText": "SdpSerializeCandidate(const cricket::Candidate& candidate)"
  },
  {
    "label": "SdpDeserialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SdpDeserialize(absl::string_view message, JsepSessionDescription* jdesc, SdpParseError* error)"
  },
  {
    "label": "SdpDeserializeCandidate()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "SdpDeserializeCandidate(absl::string_view message, JsepIceCandidate* candidate, SdpParseError* error)"
  },
  {
    "label": "SdpDeserializeCandidate()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "SdpDeserializeCandidate(absl::string_view transport_name, absl::string_view message, cricket::Candidate* candidate, SdpParseError* error)"
  },
  {
    "label": "ParseCandidate()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "ParseCandidate(absl::string_view message, cricket::Candidate* candidate, SdpParseError* error, bool is_raw)"
  },
  {
    "label": "WriteFmtpParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteFmtpParameters(const cricket::CodecParameterMap& parameters, rtc::StringBuilder* os)"
  }
]