[
  {
    "label": "VHeapInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VHeapInt"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(VHeapInt& X, VHeapInt& Y)"
  },
  {
    "label": "DivideModulo()",
    "kind": "Method",
    "detail": "Function (Digit>)",
    "insertText": "DivideModulo(FAllocationContext, VHeapInt&, Digit)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (ComparisonResult)",
    "insertText": "Compare(VHeapInt& X, VHeapInt& Y)"
  },
  {
    "label": "ToStringImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToStringImpl(FStringBuilderBase& Builder, FAllocationContext Context, const FCellFormatter& Formatter)"
  },
  {
    "label": "SerializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImpl(VHeapInt*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(InitializationType)"
  },
  {
    "label": "SetDigit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDigit(const uint32 Index, Digit Value)"
  },
  {
    "label": "AbsoluteCompare()",
    "kind": "Method",
    "detail": "Function (ComparisonResult)",
    "insertText": "AbsoluteCompare(const VHeapInt& X, const VHeapInt& Y)"
  },
  {
    "label": "AbsoluteCompare()",
    "kind": "Method",
    "detail": "Function (ComparisonResult)",
    "insertText": "AbsoluteCompare(const VHeapInt&, Digit)"
  },
  {
    "label": "MultiplyAccumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyAccumulate(const VHeapInt& Multiplicand, Digit Multiplier, VHeapInt* Accumulator, uint32 AccumulatorIndex)"
  },
  {
    "label": "DigitAdd()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "DigitAdd(Digit A, Digit B, Digit& Carry)"
  },
  {
    "label": "DigitSub()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "DigitSub(Digit A, Digit B, Digit& Borrow)"
  },
  {
    "label": "DigitMul()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "DigitMul(Digit A, Digit B, Digit& High)"
  },
  {
    "label": "AbsoluteInplaceAdd()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "AbsoluteInplaceAdd(const VHeapInt& Summand, uint32 StartIndex)"
  },
  {
    "label": "AbsoluteInplaceSub()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "AbsoluteInplaceSub(const VHeapInt& Subtrahend, uint32 StartIndex)"
  },
  {
    "label": "InplaceRightShift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InplaceRightShift(uint32 Shift)"
  },
  {
    "label": "AbsoluteDivWithDigitDivisor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbsoluteDivWithDigitDivisor(FAllocationContext Context, const VHeapInt& X, Digit Divisor, VHeapInt** Quotient, Digit& Remainder)"
  },
  {
    "label": "AbsoluteDivWithHeapIntDivisor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbsoluteDivWithHeapIntDivisor(FAllocationContext Context, const VHeapInt& Dividend, const VHeapInt& Divisor, VHeapInt** Quotient, VHeapInt** Remainder, bool* bOutHasNonZeroRemainder = nullptr)"
  },
  {
    "label": "DigitDiv()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "DigitDiv(Digit high, Digit low, Digit divisor, Digit& remainder)"
  },
  {
    "label": "ProductGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProductGreaterThan(Digit Factor1, Digit Factor2, Digit High, Digit Low)"
  },
  {
    "label": "InternalMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalMultiplyAdd(const VHeapInt& Source, Digit Factor, Digit Summand, uint32 N, VHeapInt* Result)"
  }
]