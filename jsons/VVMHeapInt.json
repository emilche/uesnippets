[
  {
    "label": "VHeapInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VHeapInt"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "DECLARE_DERIVED_VCPPCLASSINFO()",
    "kind": "Method",
    "detail": "Function (struct VHeapInt final : VHeapValue {)",
    "insertText": "DECLARE_DERIVED_VCPPCLASSINFO(COREUOBJECT_API, VHeapValue)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TGlobalTrivialEmergentTypePtr<& StaticCppClassInfo> GlobalTrivialEmergentType ; using Digit = uint32 ; VHeapInt&)",
    "insertText": "New(FAllocationContext Context, uint32 NumWords)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} VHeapInt&)",
    "insertText": "New(FAllocationContext Context, bool Sign, TArrayView<Digit> Digits)"
  },
  {
    "label": "FromInt64()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE VHeapInt&)",
    "insertText": "FromInt64(FAllocationContext Context, int64 Int64)"
  },
  {
    "label": "IsInt32()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInt32()"
  },
  {
    "label": "AsInt32()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AsInt32()"
  },
  {
    "label": "IsInt64()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInt64()"
  },
  {
    "label": "AsInt64()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "AsInt64()"
  },
  {
    "label": "ConvertToFloat()",
    "kind": "Method",
    "detail": "Function (VFloat)",
    "insertText": "ConvertToFloat()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Equals(VHeapInt& X, VHeapInt& Y)"
  },
  {
    "label": "CreateZero()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "CreateZero(FAllocationContext Context)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "Add(FAllocationContext, VHeapInt& X, VHeapInt& Y)"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "Sub(FAllocationContext, VHeapInt& X, VHeapInt& Y)"
  },
  {
    "label": "Multiply()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "Multiply(FAllocationContext, VHeapInt& X, VHeapInt& Y)"
  },
  {
    "label": "Divide()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "Divide(FAllocationContext, VHeapInt& X, VHeapInt& Y, bool* bOutHasNonZeroRemainder = nullptr)"
  },
  {
    "label": "Modulo()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "Modulo(FAllocationContext, VHeapInt& X, VHeapInt& Y)"
  },
  {
    "label": "DivideModulo()",
    "kind": "Method",
    "detail": "Function (TTuple<VHeapInt*,Digit>)",
    "insertText": "DivideModulo(FAllocationContext, VHeapInt&, Digit)"
  },
  {
    "label": "UnaryMinus()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "UnaryMinus(FAllocationContext, VHeapInt& X)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (enum class ComparisonResult { Equal,Undefined,GreaterThan,LessThan } ; ComparisonResult)",
    "insertText": "Compare(VHeapInt& X, VHeapInt& Y)"
  },
  {
    "label": "IsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsZero()"
  },
  {
    "label": "GetSign()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetSign()"
  },
  {
    "label": "GetDigit()",
    "kind": "Method",
    "detail": "Function (} Digit)",
    "insertText": "GetDigit(const uint32 Index)"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (unsigned int)",
    "insertText": "GetLength()"
  },
  {
    "label": "SerializeImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImpl(VHeapInt*& This, FAllocationContext Context, FAbstractVisitor& Visitor)"
  },
  {
    "label": "VHeapInt()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "VHeapInt(FAllocationContext Context, uint32 NumWords) : VHeapValue(Context, &GlobalTrivialEmergentType.Get(Context)) , Length(NumWords)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} enum class InitializationType { None,WithZero } ; void)",
    "insertText": "Initialize(InitializationType)"
  },
  {
    "label": "CreateWithLength()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "CreateWithLength(FAllocationContext, uint32 length)"
  },
  {
    "label": "CreateFrom()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "CreateFrom(FAllocationContext, int64 Value)"
  },
  {
    "label": "CreateWithDigits()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "CreateWithDigits(FAllocationContext, bool Sign, TArrayView<Digit> Digits)"
  },
  {
    "label": "SetSign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSign(bool NewSign)"
  },
  {
    "label": "SetDigit()",
    "kind": "Method",
    "detail": "Function (Sign = NewSign ; } void)",
    "insertText": "SetDigit(const uint32 Index, Digit Value)"
  },
  {
    "label": "RightTrim()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "RightTrim(FAllocationContext)"
  },
  {
    "label": "CreateFromImpl()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "CreateFromImpl(FAllocationContext, uint64 Value, bool sign)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (unsigned BitsPerByte = 8 ; unsigned DigitBits =)",
    "insertText": "sizeof(Digit)"
  },
  {
    "label": "HalfDigitMask()",
    "kind": "Method",
    "detail": "Function (unsigned HalfDigitBits = DigitBits / 2 ; Digit)",
    "insertText": "HalfDigitMask(1ull << HalfDigitBits)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (int MaxInt = 0 x7FFFFFFF ; unsigned MaxLengthBits = 1 0 2 4* 1 0 2 4 ; unsigned MaxLength = MaxLengthBits / DigitBits ;)",
    "insertText": "static_assert(MaxLengthBits % DigitBits == 0)"
  },
  {
    "label": "AbsoluteCompare()",
    "kind": "Method",
    "detail": "Function (ComparisonResult)",
    "insertText": "AbsoluteCompare(const VHeapInt& X, const VHeapInt& Y)"
  },
  {
    "label": "AbsoluteCompare()",
    "kind": "Method",
    "detail": "Function (ComparisonResult)",
    "insertText": "AbsoluteCompare(const VHeapInt&, Digit)"
  },
  {
    "label": "MultiplyAccumulate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MultiplyAccumulate(const VHeapInt& Multiplicand, Digit Multiplier, VHeapInt* Accumulator, uint32 AccumulatorIndex)"
  },
  {
    "label": "DigitAdd()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "DigitAdd(Digit A, Digit B, Digit& Carry)"
  },
  {
    "label": "DigitSub()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "DigitSub(Digit A, Digit B, Digit& Borrow)"
  },
  {
    "label": "DigitMul()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "DigitMul(Digit A, Digit B, Digit& High)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "Copy(FAllocationContext, const VHeapInt& X)"
  },
  {
    "label": "AbsoluteAdd()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "AbsoluteAdd(FAllocationContext, VHeapInt& X, VHeapInt& Y, bool ResultSign)"
  },
  {
    "label": "AbsoluteSub()",
    "kind": "Method",
    "detail": "Function (VHeapInt*)",
    "insertText": "AbsoluteSub(FAllocationContext, VHeapInt& X, VHeapInt& Y, bool ResultSign)"
  },
  {
    "label": "AbsoluteInplaceAdd()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "AbsoluteInplaceAdd(const VHeapInt& Summand, uint32 StartIndex)"
  },
  {
    "label": "AbsoluteInplaceSub()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "AbsoluteInplaceSub(const VHeapInt& Subtrahend, uint32 StartIndex)"
  },
  {
    "label": "InplaceRightShift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InplaceRightShift(uint32 Shift)"
  },
  {
    "label": "AbsoluteDivWithDigitDivisor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AbsoluteDivWithDigitDivisor(FAllocationContext Context, const VHeapInt& X, Digit Divisor, VHeapInt** Quotient, Digit& Remainder)"
  },
  {
    "label": "AbsoluteDivWithHeapIntDivisor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbsoluteDivWithHeapIntDivisor(FAllocationContext Context, const VHeapInt& Dividend, const VHeapInt& Divisor, VHeapInt** Quotient, VHeapInt** Remainder, bool* bOutHasNonZeroRemainder = nullptr)"
  },
  {
    "label": "DigitDiv()",
    "kind": "Method",
    "detail": "Function (Digit)",
    "insertText": "DigitDiv(Digit high, Digit low, Digit divisor, Digit& remainder)"
  },
  {
    "label": "AbsoluteLeftShiftAlwaysCopy()",
    "kind": "Method",
    "detail": "Function (enum class LeftShiftMode { SameSizeResult,AlwaysAddOneDigit } ; VHeapInt*)",
    "insertText": "AbsoluteLeftShiftAlwaysCopy(FAllocationContext Context, const VHeapInt& X, uint32 Shift, LeftShiftMode Mode)"
  },
  {
    "label": "ProductGreaterThan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProductGreaterThan(Digit Factor1, Digit Factor2, Digit High, Digit Low)"
  },
  {
    "label": "InternalMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalMultiplyAdd(const VHeapInt& Source, Digit Factor, Digit Summand, uint32 N, VHeapInt* Result)"
  },
  {
    "label": "DataStorage()",
    "kind": "Method",
    "detail": "Function (Digit*)",
    "insertText": "DataStorage()"
  },
  {
    "label": "SetDigit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDigit(uint32 Index, Digit Value)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const VHeapInt& HeapInt)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Result)",
    "insertText": "GetTypeHash(HeapInt.GetSign())"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Result)",
    "insertText": "HashCombineFast(Result, ::GetTypeHash(HeapInt.GetDigit(I)))"
  }
]